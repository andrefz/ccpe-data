; ModuleID = 'llvm-link'
source_filename = "llvm-link"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.gx_device_memory_s = type { i32, %struct.gx_device_procs_s*, i8*, i32, i32, float, float, i32, i16, i32, i32, %struct.gs_matrix_s, i32, i8*, i8**, i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)*, i32, i32, i8* }
%struct.gx_device_procs_s = type { i32 (%struct.gx_device_s*)*, void (%struct.gx_device_s*, %struct.gs_matrix_s*)*, i32 (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*)*, i64 (%struct.gx_device_s*, i16, i16, i16)*, i32 (%struct.gx_device_s*, i64, i16*)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)*, i32 (%struct.gx_device_s*, %struct.gx_bitmap_s*, i32, i32, i32, i32, i64, i64)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, i64)*, i32 (%struct.gx_device_s*, %struct.gx_bitmap_s*, i32, i32, i32, i32, i32, i32, i64, i64)* }
%struct.gx_device_s = type { i32, %struct.gx_device_procs_s*, i8*, i32, i32, float, float, i32, i16, i32, i32 }
%struct.gx_bitmap_s = type { i8*, i32, i32, i32 }
%struct.gs_matrix_s = type { float, i64, float, i64, float, i64, float, i64, float, i64, float, i64 }
%struct.dir_descr = type { i16, i16, i16, i16 }
%struct.gs_image_enum_s = type { i32, i32, i32, i32, i32, i64, i64, i64, i64, void (%struct.gs_image_enum_s*, i8*, i8*, i32)*, i32 (%struct.gs_image_enum_s*, i8*, i32, i32)*, %struct.gs_state_s*, i8*, i32, i32, i32, i32, i32, [4 x i8*], i32, i32, i32, i64, i64, i32, [256 x %struct.gx_device_color_s] }
%struct.gs_state_s = type { %struct.gs_state_s*, %struct.gs_memory_procs, %struct.gs_matrix_fixed_s, %struct.gs_matrix_s, i32, i8*, i8*, %struct.gx_path_s*, %struct.gx_path_s*, i32, %struct.line_params_s*, %struct.halftone_s*, float (double, double)*, %struct.gs_color_s*, %struct.gx_device_color_s*, float (double)*, %struct.gs_font_s*, %struct.gs_matrix_s, i32, i8, i8, float, %struct.device_s*, i32 }
%struct.gs_memory_procs = type { i8* (i32, i32, i8*)*, void (i8*, i32, i32, i8*)* }
%struct.gs_matrix_fixed_s = type { float, i64, float, i64, float, i64, float, i64, float, i64, float, i64, i64, i64 }
%struct.gx_path_s = type { %struct.gs_memory_procs, %struct.gs_fixed_rect_s, %struct.segment_s*, %struct.gs_fixed_rect_s, %struct.subpath*, %struct.subpath*, i32, i32, i32, %struct.timeval, i8, i8, i8 }
%struct.segment_s = type { %struct.segment_s*, %struct.segment_s*, i32, %struct.timeval }
%struct.gs_fixed_rect_s = type { %struct.timeval, %struct.timeval }
%struct.subpath = type { %struct.segment_s*, %struct.segment_s*, i32, %struct.timeval, %struct.segment_s*, i32, i32, i8 }
%struct.timeval = type { i64, i64 }
%struct.line_params_s = type { float, i32, i32, float, float, %struct.dash_params_s }
%struct.dash_params_s = type { float*, i32, float, i32, i32, float }
%struct.halftone_s = type { float, float, i32, i32, %struct.ht_bit_s*, i32 }
%struct.ht_bit_s = type { i16, i16 }
%struct.gs_color_s = type { i16, i16, i16, i16, i8, i8 }
%struct.gx_device_color_s = type { i64, i64, i32, %struct.gx_bitmap_s* }
%struct.gs_font_s = type { %struct.gs_font_s*, %struct.gs_font_s*, %struct.gs_font_s*, %struct.gs_font_dir_s*, i8*, %struct.gs_matrix_s, i32, float, float, float, float, i32, i64, i32 (%struct.gs_show_enum_s*, %struct.gs_state_s*, %struct.gs_font_s*, i32, i8*)*, i8* }
%struct.gs_font_dir_s = type { i8* (i32, i32, i8*)*, void (i8*, i32, i32, i8*)*, i64, %struct.gs_font_s*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [128 x %struct.cached_char_s*], i8*, i32, %struct.cached_fm_pair_s*, i32, %struct.cached_char_s*, i32 }
%struct.cached_fm_pair_s = type { %struct.gs_font_s*, float, float, float, float, i32 }
%struct.cached_char_s = type { %struct.cached_char_s*, i32, %struct.cached_fm_pair_s*, i16, i16, i16, %struct.timeval, %struct.timeval, i8* }
%struct.gs_show_enum_s = type { %struct.gs_state_s*, i8*, i32, float, float, i32, float, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.gx_device_memory_s, %struct.device_s, i32, i32, %struct.timeval, %struct.cached_char_s*, %struct.gs_point_s, i32, i32, i32 (%struct.gs_show_enum_s*)* }
%struct.device_s = type { %struct.gx_device_s*, i32, i64, i64 }
%struct.gs_point_s = type { float, float }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.gx_ht_cache_s = type { i8*, i32, %struct.ht_bit_s*, i32, i32, [25 x %struct.bit_tile_s] }
%struct.bit_tile_s = type { i32, %struct.gx_bitmap_s }
%struct.alloc_state_s = type { %struct.alloc_chunk_s, %struct.alloc_chunk_s*, i32, i32, i8* (i32, i32, i8*)*, void (i8*, i32, i32, i8*)*, i64, i64, i32, [32 x i8*], %struct.alloc_block_s*, %struct.alloc_save_s*, i32, %struct.alloc_change_s* }
%struct.alloc_chunk_s = type { i8*, i8*, i8*, i8*, i32, %struct.alloc_chunk_s* }
%struct.alloc_block_s = type { %struct.alloc_block_s*, i32, i32, %struct.alloc_state_s* }
%struct.alloc_save_s = type { %struct.alloc_state_s, %struct.alloc_state_s* }
%struct.alloc_change_s = type { %struct.alloc_change_s*, i8*, i32 }
%struct.ref_s = type { %union.color_sample, i16, i16 }
%union.color_sample = type { i64 }
%struct.name_table = type { [256 x %struct.name_s*], [512 x %struct.name_s*], i32 }
%struct.name_s = type { %struct.name_s*, i16, i16, i8*, %struct.ref_s* }
%struct.stream_procs = type { i32 (%struct.stream_s*)*, i32 (%struct.stream_s*, i8)*, i32 (%struct.stream_s*, i64*)*, i32 (%struct.stream_s*, i64)*, i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)* }
%struct.stream_s = type { i8*, i8*, i8*, i32, i8, i8, i64, %struct.stream_procs, i32, %struct._IO_FILE*, %struct.stream_s*, i16, i32 }
%struct.op_def = type { i8*, i32 (%struct.ref_s*)* }
%struct.file_entry_s = type { %struct.stream_s*, i32, %struct.ref_s }
%struct.int_state_s = type { %struct.int_state_s*, %struct.ref_s, %struct.ref_s, %struct.ref_s, %struct.ref_s }
%struct.timezone = type { i32, i32 }
%struct.tm = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i8* }
%struct.gs_screen_enum_s = type { float, float, %struct.ht_bit_s*, i32, i32, %struct.gs_matrix_s, i32, i32, %struct.gs_state_s* }
%struct.status = type { %struct.gs_matrix_s, i8*, i32, i32, i8*, i32, i32, i32, i32, i32, i32, i32 }
%struct.anon = type { i8, i8, i8, i8 }
%struct.gs_rect_s = type { %struct.gs_point_s, %struct.gs_point_s }
%struct.gs_path_enum_s = type { %struct.segment_s*, %struct.gs_state_s* }
%struct.curve_segment = type { %struct.segment_s*, %struct.segment_s*, i32, %struct.timeval, %struct.timeval, %struct.timeval }
%struct.gs_type1_state_s = type { %struct.gs_show_enum_s*, %struct.gs_state_s*, %struct.gs_type1_data_s*, i32, i32, %struct.fixed_coeff, [24 x i64], i32, [11 x %struct.ip_state], i32, i32, %struct.timeval, %struct.timeval, i32 }
%struct.gs_type1_data_s = type { i32 (%struct.gs_type1_data_s*, i32, i8**)*, i32 (%struct.gs_type1_data_s*, i64*)*, i8*, i32 }
%struct.fixed_coeff = type { i64, i64, i64, i64, i32, i32, i64 }
%struct.ip_state = type { i8*, i16 }
%struct.line_list_s = type { %struct.active_line_s*, i32, i16, %struct.active_line_s*, %struct.active_line_s*, %struct.active_line_s*, %struct.active_line_s, i32 }
%struct.active_line_s = type { %struct.timeval, %struct.timeval, i64, i64, i64, %struct.segment_s*, i32, i16, i16, %struct.active_line_s*, %struct.active_line_s* }
%struct.partial_line_s = type { %struct.endpoint_s, %struct.endpoint_s, %struct.timeval, %struct.timeval, i32 }
%struct.endpoint_s = type { %struct.timeval, %struct.timeval, %struct.timeval, %struct.timeval }
%struct.dict_s = type { %struct.ref_s, %struct.ref_s }
%struct.dynamic_area_s = type { i8*, i8*, i32, i32, i32, i8* }
%struct.vm_save_s = type { %struct.alloc_save_s*, %struct.int_state_s*, %struct.gs_state_s* }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.font_data_s = type { %struct.ref_s, %struct.ref_s, %struct.ref_s, %struct.ref_s, %struct.ref_s, %struct.gs_type1_data_s }
%struct.z1_data = type { %struct.font_data_s*, i64*, [2 x i64] }

@mem_mono_device = dso_local global %struct.gx_device_memory_s { i32 200, %struct.gx_device_procs_s* @mem_mono_procs, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0), i32 0, i32 0, float 1.000000e+00, float 1.000000e+00, i32 0, i16 1, i32 1, i32 0, %struct.gs_matrix_s { float 1.000000e+00, i64 0, float 0.000000e+00, i64 0, float 0.000000e+00, i64 0, float 1.000000e+00, i64 0, float 0.000000e+00, i64 0, float 0.000000e+00, i64 0 }, i32 0, i8* null, i8** null, i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)* @mem_no_fault_proc, i32 0, i32 0, i8* null }, align 8
@mem_mono_procs = internal global %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @mem_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @mem_get_initial_matrix, i32 (%struct.gx_device_s*)* @gx_default_sync_output, i32 (%struct.gx_device_s*)* @gx_default_output_page, i32 (%struct.gx_device_s*)* @gx_default_close_device, i64 (%struct.gx_device_s*, i16, i16, i16)* @gx_default_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @mem_mono_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_bitmap_s*, i32, i32, i32, i32, i64, i64)* @gx_default_tile_rectangle, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)* @mem_mono_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32)* @mem_mono_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gx_default_draw_line, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, i64)* @gx_default_fill_trapezoid, i32 (%struct.gx_device_s*, %struct.gx_bitmap_s*, i32, i32, i32, i32, i32, i32, i64, i64)* @gx_default_tile_trapezoid }, align 8
@.str.1 = private unnamed_addr constant [12 x i8] c"image(mono)\00", align 1
@mem_mapped_color_device = dso_local global %struct.gx_device_memory_s { i32 200, %struct.gx_device_procs_s* @mem_mapped_procs, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i32 0, i32 0), i32 0, i32 0, float 1.000000e+00, float 1.000000e+00, i32 1, i16 255, i32 8, i32 0, %struct.gs_matrix_s { float 1.000000e+00, i64 0, float 0.000000e+00, i64 0, float 0.000000e+00, i64 0, float 1.000000e+00, i64 0, float 0.000000e+00, i64 0, float 0.000000e+00, i64 0 }, i32 0, i8* null, i8** null, i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)* @mem_no_fault_proc, i32 0, i32 0, i8* null }, align 8
@mem_mapped_procs = internal global %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @mem_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @mem_get_initial_matrix, i32 (%struct.gx_device_s*)* @gx_default_sync_output, i32 (%struct.gx_device_s*)* @gx_default_output_page, i32 (%struct.gx_device_s*)* @gx_default_close_device, i64 (%struct.gx_device_s*, i16, i16, i16)* @mem_mapped_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @mem_mapped_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @mem_mapped_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_bitmap_s*, i32, i32, i32, i32, i64, i64)* @gx_default_tile_rectangle, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)* @mem_mapped_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32)* @mem_mapped_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gx_default_draw_line, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, i64)* @gx_default_fill_trapezoid, i32 (%struct.gx_device_s*, %struct.gx_bitmap_s*, i32, i32, i32, i32, i32, i32, i64, i64)* @gx_default_tile_trapezoid }, align 8
@.str.2 = private unnamed_addr constant [9 x i8] c"image(8)\00", align 1
@mem_true24_color_device = dso_local global %struct.gx_device_memory_s { i32 200, %struct.gx_device_procs_s* @mem_true24_procs, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i32 0, i32 0), i32 0, i32 0, float 1.000000e+00, float 1.000000e+00, i32 1, i16 255, i32 24, i32 0, %struct.gs_matrix_s { float 1.000000e+00, i64 0, float 0.000000e+00, i64 0, float 0.000000e+00, i64 0, float 1.000000e+00, i64 0, float 0.000000e+00, i64 0, float 0.000000e+00, i64 0 }, i32 0, i8* null, i8** null, i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)* @mem_no_fault_proc, i32 0, i32 0, i8* null }, align 8
@mem_true24_procs = internal global %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @mem_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @mem_get_initial_matrix, i32 (%struct.gx_device_s*)* @gx_default_sync_output, i32 (%struct.gx_device_s*)* @gx_default_output_page, i32 (%struct.gx_device_s*)* @gx_default_close_device, i64 (%struct.gx_device_s*, i16, i16, i16)* @mem_true_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @mem_true_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @mem_true24_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_bitmap_s*, i32, i32, i32, i32, i64, i64)* @gx_default_tile_rectangle, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)* @mem_true24_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32)* @mem_true24_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gx_default_draw_line, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, i64)* @gx_default_fill_trapezoid, i32 (%struct.gx_device_s*, %struct.gx_bitmap_s*, i32, i32, i32, i32, i32, i32, i64, i64)* @gx_default_tile_trapezoid }, align 8
@.str.3 = private unnamed_addr constant [10 x i8] c"image(24)\00", align 1
@mem_true32_color_device = dso_local global %struct.gx_device_memory_s { i32 200, %struct.gx_device_procs_s* @mem_true32_procs, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i32 0, i32 0), i32 0, i32 0, float 1.000000e+00, float 1.000000e+00, i32 1, i16 255, i32 32, i32 0, %struct.gs_matrix_s { float 1.000000e+00, i64 0, float 0.000000e+00, i64 0, float 0.000000e+00, i64 0, float 1.000000e+00, i64 0, float 0.000000e+00, i64 0, float 0.000000e+00, i64 0 }, i32 0, i8* null, i8** null, i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)* @mem_no_fault_proc, i32 0, i32 0, i8* null }, align 8
@mem_true32_procs = internal global %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @mem_open, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @mem_get_initial_matrix, i32 (%struct.gx_device_s*)* @gx_default_sync_output, i32 (%struct.gx_device_s*)* @gx_default_output_page, i32 (%struct.gx_device_s*)* @gx_default_close_device, i64 (%struct.gx_device_s*, i16, i16, i16)* @mem_true_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @mem_true_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @mem_true32_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_bitmap_s*, i32, i32, i32, i32, i64, i64)* @gx_default_tile_rectangle, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)* @mem_true32_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32)* @mem_true32_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @gx_default_draw_line, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, i64)* @gx_default_fill_trapezoid, i32 (%struct.gx_device_s*, %struct.gx_bitmap_s*, i32, i32, i32, i32, i32, i32, i64, i64)* @gx_default_tile_trapezoid }, align 8
@.str.4 = private unnamed_addr constant [10 x i8] c"image(32)\00", align 1
@.str = private unnamed_addr constant [7 x i8] c"image(\00", align 1
@gx_device_list = dso_local global [1 x %struct.gx_device_s*] zeroinitializer, align 8
@gp_file_name_list_separator = dso_local global i8 58, align 1
@.str.5 = private unnamed_addr constant [34 x i8] c"Ghostscript: gettimeofday failed:\00", align 1
@.str.1.6 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.2.7 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@gs_show_enum_sizeof = dso_local global i32 368, align 4
@gs_screen_enum_sizeof = dso_local global i32 136, align 4
@gs_color_sizeof = dso_local global i32 10, align 4
@.str.10 = private unnamed_addr constant [17 x i8] c"halftone samples\00", align 1
@gx_device_null_p = dso_local global %struct.gx_device_s* @null_device, align 8
@null_device = internal global %struct.gx_device_s { i32 32, %struct.gx_device_procs_s* @null_procs, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.15, i32 0, i32 0), i32 16383, i32 16383, float 1.000000e+00, float 1.000000e+00, i32 0, i16 1, i32 1, i32 1 }, align 8
@null_procs = internal global %struct.gx_device_procs_s { i32 (%struct.gx_device_s*)* @gx_default_open_device, void (%struct.gx_device_s*, %struct.gs_matrix_s*)* @gx_default_get_initial_matrix, i32 (%struct.gx_device_s*)* @gx_default_sync_output, i32 (%struct.gx_device_s*)* @gx_default_output_page, i32 (%struct.gx_device_s*)* @gx_default_close_device, i64 (%struct.gx_device_s*, i16, i16, i16)* @gx_default_map_rgb_color, i32 (%struct.gx_device_s*, i64, i16*)* @gx_default_map_color_rgb, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @null_fill_rectangle, i32 (%struct.gx_device_s*, %struct.gx_bitmap_s*, i32, i32, i32, i32, i64, i64)* @null_tile_rectangle, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)* @null_copy_mono, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32)* @null_copy_color, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* @null_draw_line, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, i64)* @null_fill_trapezoid, i32 (%struct.gx_device_s*, %struct.gx_bitmap_s*, i32, i32, i32, i32, i32, i32, i64, i64)* @null_tile_trapezoid }, align 8
@.str.3.15 = private unnamed_addr constant [5 x i8] c"null\00", align 1
@.str.30 = private unnamed_addr constant [14 x i8] c"gs_makedevice\00", align 1
@.str.1.31 = private unnamed_addr constant [27 x i8] c"gs_makeimagedevice(device)\00", align 1
@.str.2.32 = private unnamed_addr constant [25 x i8] c"gs_makeimagedevice(bits)\00", align 1
@.str.35 = private unnamed_addr constant [16 x i8] c"ppm file buffer\00", align 1
@.str.1.36 = private unnamed_addr constant [46 x i8] c"P4\0A# Ghostscript 1 bit mono image dump\0A%d %d\0A\00", align 1
@.str.2.37 = private unnamed_addr constant [58 x i8] c"P6\0A# Ghostscript 8 bit mapped color image dump\0A%d %d\0A255\0A\00", align 1
@.str.3.38 = private unnamed_addr constant [56 x i8] c"P5\0A# Ghostscript 8 bit gray scale image dump\0A%d %d\0A255\0A\00", align 1
@.str.4.39 = private unnamed_addr constant [52 x i8] c"P6\0A# Ghostscript 24 bit color image dump\0A%d %d\0A255\0A\00", align 1
@.str.5.40 = private unnamed_addr constant [52 x i8] c"P6\0A# Ghostscript 32 bit color image dump\0A%d %d\0A255\0A\00", align 1
@.str.41 = private unnamed_addr constant [20 x i8] c"font_dir_alloc(dir)\00", align 1
@.str.1.42 = private unnamed_addr constant [22 x i8] c"font_dir_alloc(bdata)\00", align 1
@.str.2.43 = private unnamed_addr constant [22 x i8] c"font_dir_alloc(mdata)\00", align 1
@.str.3.44 = private unnamed_addr constant [22 x i8] c"font_dir_alloc(cdata)\00", align 1
@.str.4.45 = private unnamed_addr constant [12 x i8] c"gs_makefont\00", align 1
@.str.46 = private unnamed_addr constant [15 x i8] c"gsim2out cells\00", align 1
@trace_from.nesw = internal global [5 x %struct.dir_descr] [%struct.dir_descr { i16 -1, i16 1, i16 0, i16 1 }, %struct.dir_descr { i16 1, i16 1, i16 1, i16 0 }, %struct.dir_descr { i16 1, i16 -1, i16 0, i16 -1 }, %struct.dir_descr { i16 -1, i16 -1, i16 -1, i16 0 }, %struct.dir_descr { i16 -1, i16 1, i16 0, i16 1 }], align 16
@gs_image_enum_sizeof = dso_local global i32 8376, align 4
@.str.47 = private unnamed_addr constant [13 x i8] c"image buffer\00", align 1
@image_init.spread_procs = internal global [4 x void (%struct.gs_image_enum_s*, i8*, i8*, i32)*] [void (%struct.gs_image_enum_s*, i8*, i8*, i32)* @image_unpack_0_spread, void (%struct.gs_image_enum_s*, i8*, i8*, i32)* @image_unpack_1_spread, void (%struct.gs_image_enum_s*, i8*, i8*, i32)* @image_unpack_2, void (%struct.gs_image_enum_s*, i8*, i8*, i32)* @image_unpack_3_spread], align 16
@image_init.procs = internal global [4 x void (%struct.gs_image_enum_s*, i8*, i8*, i32)*] [void (%struct.gs_image_enum_s*, i8*, i8*, i32)* @image_unpack_0, void (%struct.gs_image_enum_s*, i8*, i8*, i32)* @image_unpack_1, void (%struct.gs_image_enum_s*, i8*, i8*, i32)* @image_unpack_2, void (%struct.gs_image_enum_s*, i8*, i8*, i32)* @image_unpack_3], align 16
@map_4_to_16 = internal global [16 x i16] [i16 0, i16 21760, i16 -22016, i16 -256, i16 85, i16 21845, i16 -21931, i16 -171, i16 170, i16 21930, i16 -21846, i16 -86, i16 255, i16 22015, i16 -21761, i16 -1], align 16
@map_4_to_32 = internal global [16 x i32] [i32 0, i32 -16777216, i32 16711680, i32 -65536, i32 65280, i32 -16711936, i32 16776960, i32 -256, i32 255, i32 -16776961, i32 16711935, i32 -65281, i32 65535, i32 -16711681, i32 16777215, i32 -1], align 16
@.str.48 = private unnamed_addr constant [13 x i8] c"dash pattern\00", align 1
@memory_chunk_size = dso_local global i32 20000, align 4
@gs_lib_paths = common dso_local global i8** null, align 8
@gs_lib_env_path = internal global i8* null, align 8
@.str.49 = private unnamed_addr constant [7 x i8] c"GS_LIB\00", align 1
@.str.1.50 = private unnamed_addr constant [9 x i8] c"-I array\00", align 1
@gs_lib_count = internal global i32 0, align 4
@quiet = internal global i32 0, align 4
@user_errors = internal global i32 0, align 4
@.str.2.51 = private unnamed_addr constant [7 x i8] c"GS.MAP\00", align 1
@.str.22 = private unnamed_addr constant [20 x i8] c"\0AInterp returns %d\0A\00", align 1
@.str.23 = private unnamed_addr constant [7 x i8] c"ostack\00", align 1
@.str.24 = private unnamed_addr constant [7 x i8] c"estack\00", align 1
@init2_done = internal global i32 0, align 4
@.str.17 = private unnamed_addr constant [9 x i8] c"ghost.ps\00", align 1
@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str.18 = private unnamed_addr constant [40 x i8] c"Can't find file %s (from command line)\0A\00", align 1
@.str.19 = private unnamed_addr constant [15 x i8] c"Reading %s... \00", align 1
@stdout = external dso_local global %struct._IO_FILE*, align 8
@.str.20 = private unnamed_addr constant [10 x i8] c"%s read.\0A\00", align 1
@init1_done = internal global i32 0, align 4
@.str.15 = private unnamed_addr constant [3 x i8] c"{(\00", align 1
@.str.16 = private unnamed_addr constant [13 x i8] c")run}execute\00", align 1
@.str.3.52 = private unnamed_addr constant [6 x i8] c"QUIET\00", align 1
@.str.4.53 = private unnamed_addr constant [43 x i8] c"Usage: -dname, -dname=token, -sname=string\00", align 1
@.str.5.54 = private unnamed_addr constant [42 x i8] c"-dname= must be followed by a valid token\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"-s\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"%s(%d): \00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"gs.c\00", align 1
@.str.9 = private unnamed_addr constant [16 x i8] c"Out of memory!\0A\00", align 1
@.str.10.55 = private unnamed_addr constant [40 x i8] c"-w and -h must be followed by a number\0A\00", align 1
@.str.11 = private unnamed_addr constant [12 x i8] c"DEVICEWIDTH\00", align 1
@.str.12 = private unnamed_addr constant [13 x i8] c"DEVICEHEIGHT\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.14 = private unnamed_addr constant [28 x i8] c"-M must be between 1 and 64\00", align 1
@gs_lib_default_path = internal global i8* getelementptr inbounds ([100 x i8], [100 x i8]* @.str.21, i32 0, i32 0), align 8
@.str.21 = private unnamed_addr constant [100 x i8] c"/home/anderson/YaCoS.Benchmarks/MallocBench/gs:/home/anderson/YaCoS.Benchmarks/MallocBench/gs/fonts\00", align 1
@proc_reloc = internal global i64 0, align 8
@.str.58 = private unnamed_addr constant [30 x i8] c"Unknown switch %s - ignoring\0A\00", align 1
@.str.1.59 = private unnamed_addr constant [50 x i8] c"Not a debugging configuration, -Z switch ignored\0A\00", align 1
@.str.2.60 = private unnamed_addr constant [48 x i8] c"Map file %s is apparently missing or malformed\0A\00", align 1
@.str.3.61 = private unnamed_addr constant [15 x i8] c"[T]main = %lx\0A\00", align 1
@.str.4.62 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.5.63 = private unnamed_addr constant [10 x i8] c"-T switch\00", align 1
@.str.6.64 = private unnamed_addr constant [14 x i8] c"%s not found\0A\00", align 1
@.str.7.67 = private unnamed_addr constant [36 x i8] c"frame %8lx called from %8lx (%8lx)\0A\00", align 1
@gs_identity_matrix = dso_local global %struct.gs_matrix_s { float 1.000000e+00, i64 0, float 0.000000e+00, i64 0, float 0.000000e+00, i64 0, float 1.000000e+00, i64 0, float 0.000000e+00, i64 0, float 0.000000e+00, i64 0 }, align 8
@.str.86 = private unnamed_addr constant [9 x i8] c"%s(%d): \00", align 1
@.str.1.87 = private unnamed_addr constant [9 x i8] c"gsmisc.c\00", align 1
@.str.2.88 = private unnamed_addr constant [19 x i8] c"%s: malloc failed\0A\00", align 1
@gs_path_enum_sizeof = dso_local global i32 16, align 4
@.str.93 = private unnamed_addr constant [9 x i8] c"%s(%d): \00", align 1
@.str.1.94 = private unnamed_addr constant [10 x i8] c"gspath2.c\00", align 1
@.str.2.95 = private unnamed_addr constant [35 x i8] c"bad type %x in gs_path_enum_next!\0A\00", align 1
@gs_state_sizeof = dso_local global i32 464, align 4
@.str.106 = private unnamed_addr constant [15 x i8] c"gs_state_alloc\00", align 1
@alloc_state_contents.cname = internal global i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4.107, i32 0, i32 0), align 8
@.str.4.107 = private unnamed_addr constant [25 x i8] c"(gs)alloc_state_contents\00", align 1
@.str.1.108 = private unnamed_addr constant [14 x i8] c"gs_state_free\00", align 1
@free_state_contents.cname = internal global i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5.109, i32 0, i32 0), align 8
@.str.5.109 = private unnamed_addr constant [24 x i8] c"(gs)free_state_contents\00", align 1
@.str.2.112 = private unnamed_addr constant [9 x i8] c"gs_gsave\00", align 1
@.str.3.115 = private unnamed_addr constant [12 x i8] c"gs_grestore\00", align 1
@gs_type1_state_sizeof = dso_local global i32 504, align 4
@cached_char_sizeof = dso_local global i32 72, align 4
@cached_fm_pair_sizeof = dso_local global i32 32, align 4
@lum = internal global [8 x i16] [i16 0, i16 30, i16 59, i16 89, i16 11, i16 41, i16 70, i16 100], align 16
@.str.156 = private unnamed_addr constant [13 x i8] c"active lines\00", align 1
@cache = internal global %struct.gx_ht_cache_s zeroinitializer, align 8
@cache_bits = internal global [1000 x i8] zeroinitializer, align 16
@multi_bits = internal global [9 x i16*] [i16* null, i16* bitcast ([2 x i8]* @mb1 to i16*), i16* bitcast ([4 x i8]* @mb2 to i16*), i16* bitcast ([6 x i8]* @mb3 to i16*), i16* bitcast ([8 x i8]* @mb4 to i16*), i16* bitcast ([10 x i8]* @mb5 to i16*), i16* bitcast ([12 x i8]* @mb6 to i16*), i16* bitcast ([14 x i8]* @mb7 to i16*), i16* bitcast ([16 x i8]* @mb8 to i16*)], align 16
@single_bits8 = internal global [32 x i8] c"\80\00@\00 \00\10\00\08\00\04\00\02\00\01\00\00\80\00@\00 \00\10\00\08\00\04\00\02\00\01", align 16
@mb1 = internal global [2 x i8] c"\FF\FF", align 1
@mb2 = internal global [4 x i8] c"\AA\AAUU", align 1
@mb3 = internal global [6 x i8] c"\92II$$\92", align 1
@mb4 = internal global [8 x i8] c"\88\88DD\22\22\11\11", align 1
@mb5 = internal global [10 x i8] c"\84!B\10!\08\10\84\08B", align 1
@mb6 = internal global [12 x i8] c"\82\08A\04 \82\10A\08 \04\10", align 1
@mb7 = internal global [14 x i8] c"\81\02@\81 @\10 \08\10\04\08\02\04", align 1
@mb8 = internal global [16 x i8] c"\80\80@@  \10\10\08\08\04\04\02\02\01\01", align 16
@init_ht.up_to_16 = internal global [9 x i32] [i32 0, i32 16, i32 16, i32 15, i32 16, i32 15, i32 12, i32 14, i32 16], align 16
@scaled_flat = internal global i64 0, align 8
@scaled_flat_sq = internal global float 0.000000e+00, align 4
@.str.183 = private unnamed_addr constant [9 x i8] c"%s(%d): \00", align 1
@.str.1.184 = private unnamed_addr constant [9 x i8] c"gxpath.c\00", align 1
@.str.2.185 = private unnamed_addr constant [34 x i8] c"bad type in gx_path_release: %x!\0A\00", align 1
@.str.3.186 = private unnamed_addr constant [16 x i8] c"gx_path_release\00", align 1
@.str.4.189 = private unnamed_addr constant [20 x i8] c"gx_path_new_subpath\00", align 1
@.str.5.196 = private unnamed_addr constant [17 x i8] c"gx_path_add_line\00", align 1
@.str.7.203 = private unnamed_addr constant [22 x i8] c"gx_path_close_subpath\00", align 1
@.str.6.206 = private unnamed_addr constant [18 x i8] c"gx_path_add_curve\00", align 1
@stroke_path = internal global %struct.gx_path_s* null, align 8
@stroke_path_body = internal global %struct.gx_path_s zeroinitializer, align 8
@as_current = internal global %struct.alloc_state_s zeroinitializer, align 8
@.str.5.215 = private unnamed_addr constant [12 x i8] c"alloc chunk\00", align 1
@.str.6.216 = private unnamed_addr constant [13 x i8] c"large object\00", align 1
@.str.217 = private unnamed_addr constant [13 x i8] c"alloc_shrink\00", align 1
@.str.1.218 = private unnamed_addr constant [17 x i8] c"alloc_save_state\00", align 1
@.str.2.219 = private unnamed_addr constant [18 x i8] c"alloc_save_change\00", align 1
@.str.3.220 = private unnamed_addr constant [31 x i8] c"alloc_restore_state(malloc'ed)\00", align 1
@.str.4.221 = private unnamed_addr constant [20 x i8] c"alloc_restore_state\00", align 1
@.str.222 = private unnamed_addr constant [5 x i8] c"(%x)\00", align 1
@.str.1.223 = private unnamed_addr constant [15 x i8] c"array(%u)0x%lx\00", align 1
@.str.2.224 = private unnamed_addr constant [11 x i8] c"boolean %x\00", align 1
@.str.3.225 = private unnamed_addr constant [13 x i8] c"device 0x%lx\00", align 1
@.str.4.226 = private unnamed_addr constant [17 x i8] c"dict(%u/%u)0x%lx\00", align 1
@.str.5.227 = private unnamed_addr constant [11 x i8] c"file 0x%lx\00", align 1
@.str.6.228 = private unnamed_addr constant [8 x i8] c"int %ld\00", align 1
@.str.7.229 = private unnamed_addr constant [5 x i8] c"mark\00", align 1
@.str.8.230 = private unnamed_addr constant [15 x i8] c"name(0x%lx#%x)\00", align 1
@.str.9.231 = private unnamed_addr constant [5 x i8] c"null\00", align 1
@.str.10.232 = private unnamed_addr constant [12 x i8] c"op(%u)0x%lx\00", align 1
@.str.11.233 = private unnamed_addr constant [21 x i8] c"packedarray(%u)0x%lx\00", align 1
@.str.12.234 = private unnamed_addr constant [8 x i8] c"real %f\00", align 1
@.str.13.235 = private unnamed_addr constant [16 x i8] c"string(%u)0x%lx\00", align 1
@.str.14.236 = private unnamed_addr constant [10 x i8] c"type 0x%x\00", align 1
@.str.15.239 = private unnamed_addr constant [5 x i8] c"%s:\0A\00", align 1
@debug_dump_refs.as = internal global i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.30.250, i32 0, i32 0), align 8
@.str.31 = private unnamed_addr constant [15 x i8] c"0x%lx: 0x%02x \00", align 1
@.str.32 = private unnamed_addr constant [10 x i8] c"0x%02x?? \00", align 1
@debug_dump_refs.ts = internal global [16 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16.241, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.17.242, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18.243, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19.244, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20.245, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21.246, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7.229, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22.247, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9.231, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23.248, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24.249, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.26, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.29, i32 0, i32 0)], align 16
@.str.33 = private unnamed_addr constant [4 x i8] c"%s \00", align 1
@.str.34 = private unnamed_addr constant [16 x i8] c" 0x%04x 0x%08lx\00", align 1
@.str.35.240 = private unnamed_addr constant [8 x i8] c"  =  %g\00", align 1
@.str.36 = private unnamed_addr constant [9 x i8] c"  =  %ld\00", align 1
@.str.37 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.16.241 = private unnamed_addr constant [5 x i8] c"arry\00", align 1
@.str.17.242 = private unnamed_addr constant [5 x i8] c"bool\00", align 1
@.str.18.243 = private unnamed_addr constant [5 x i8] c"dict\00", align 1
@.str.19.244 = private unnamed_addr constant [5 x i8] c"file\00", align 1
@.str.20.245 = private unnamed_addr constant [5 x i8] c"font\00", align 1
@.str.21.246 = private unnamed_addr constant [5 x i8] c"int \00", align 1
@.str.22.247 = private unnamed_addr constant [5 x i8] c"name\00", align 1
@.str.23.248 = private unnamed_addr constant [5 x i8] c"oper\00", align 1
@.str.24.249 = private unnamed_addr constant [5 x i8] c"pary\00", align 1
@.str.25 = private unnamed_addr constant [5 x i8] c"real\00", align 1
@.str.26 = private unnamed_addr constant [5 x i8] c"save\00", align 1
@.str.27 = private unnamed_addr constant [5 x i8] c"str \00", align 1
@.str.28 = private unnamed_addr constant [5 x i8] c"colr\00", align 1
@.str.29 = private unnamed_addr constant [5 x i8] c"devc\00", align 1
@.str.30.250 = private unnamed_addr constant [17 x i8] c"xe......wr?????s\00", align 1
@.str.38 = private unnamed_addr constant [5 x i8] c"%lx:\00", align 1
@.str.39 = private unnamed_addr constant [6 x i8] c" %02x\00", align 1
@dict_max_size = dso_local global i32 32766, align 4
@.str.251 = private unnamed_addr constant [12 x i8] c"dict_create\00", align 1
@.str.1.252 = private unnamed_addr constant [19 x i8] c"dict_create(pairs)\00", align 1
@.str.2.257 = private unnamed_addr constant [17 x i8] c"dict_resize(old)\00", align 1
@.str.3.258 = private unnamed_addr constant [17 x i8] c"dict_resize(new)\00", align 1
@name_errordict = common dso_local global %struct.ref_s zeroinitializer, align 8
@name_ErrorNames = common dso_local global %struct.ref_s zeroinitializer, align 8
@.str.261 = private unnamed_addr constant [9 x i8] c"%s(%d): \00", align 1
@.str.1.262 = private unnamed_addr constant [8 x i8] c"iinit.c\00", align 1
@.str.2.263 = private unnamed_addr constant [18 x i8] c"dict_put failed!\0A\00", align 1
@.str.3.266 = private unnamed_addr constant [5 x i8] c"mark\00", align 1
@.str.4.267 = private unnamed_addr constant [5 x i8] c"null\00", align 1
@.str.5.268 = private unnamed_addr constant [10 x i8] c"errordict\00", align 1
@.str.6.269 = private unnamed_addr constant [11 x i8] c"ErrorNames\00", align 1
@.str.274 = private unnamed_addr constant [10 x i8] c"name_init\00", align 1
@the_nt = internal global %struct.name_table* null, align 8
@.str.5.275 = private unnamed_addr constant [15 x i8] c"name_alloc_sub\00", align 1
@.str.1.278 = private unnamed_addr constant [17 x i8] c"name_ref(string)\00", align 1
@.str.2.281 = private unnamed_addr constant [9 x i8] c"%s(%d): \00", align 1
@.str.3.282 = private unnamed_addr constant [8 x i8] c"iname.c\00", align 1
@.str.4.283 = private unnamed_addr constant [23 x i8] c"name_enter failed - %s\00", align 1
@osbot = common dso_local global %struct.ref_s* null, align 8
@osp = common dso_local global %struct.ref_s* null, align 8
@ostop = common dso_local global %struct.ref_s* null, align 8
@osp_nargs = common dso_local global [6 x %struct.ref_s*] zeroinitializer, align 16
@estack = common dso_local global [150 x %struct.ref_s] zeroinitializer, align 16
@esp = common dso_local global %struct.ref_s* null, align 8
@estop = common dso_local global %struct.ref_s* null, align 8
@dstack = common dso_local global [20 x %struct.ref_s] zeroinitializer, align 16
@dsp = common dso_local global %struct.ref_s* null, align 8
@dstop = common dso_local global %struct.ref_s* null, align 8
@error_object = common dso_local global %struct.ref_s zeroinitializer, align 8
@ostack = internal global [520 x %struct.ref_s] zeroinitializer, align 16
@special_ops = internal global [7 x i32 (%struct.ref_s*)*] [i32 (%struct.ref_s*)* @zadd, i32 (%struct.ref_s*)* @zdup, i32 (%struct.ref_s*)* @zexch, i32 (%struct.ref_s*)* @zifelse, i32 (%struct.ref_s*)* @zle, i32 (%struct.ref_s*)* @zpop, i32 (%struct.ref_s*)* @zsub], align 16
@scan_char_array = common dso_local global [257 x i8] zeroinitializer, align 16
@array_packing = common dso_local global i32 0, align 4
@.str.302 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@left_bracket = internal global %struct.ref_s zeroinitializer, align 8
@.str.1.303 = private unnamed_addr constant [2 x i8] c"]\00", align 1
@right_bracket = internal global %struct.ref_s zeroinitializer, align 8
@.str.2.304 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@empty_name = internal global %struct.ref_s zeroinitializer, align 8
@scan_init.space_chars = internal global [6 x i8] c" \0C\09\0A\0D\00", align 1
@scan_init.stop_chars = internal global [11 x i8] c"()<>[]{}/%\00", align 1
@.str.3.307 = private unnamed_addr constant [18 x i8] c"scanner(top proc)\00", align 1
@.str.4.308 = private unnamed_addr constant [14 x i8] c"scanner(proc)\00", align 1
@.str.5.309 = private unnamed_addr constant [8 x i8] c"scanner\00", align 1
@scan_number.powers_10 = internal global [7 x float] [float 1.000000e+00, float 1.000000e+01, float 1.000000e+02, float 1.000000e+03, float 1.000000e+04, float 1.000000e+05, float 1.000000e+06], align 16
@.str.6.310 = private unnamed_addr constant [16 x i8] c"scanner(string)\00", align 1
@sread_string.p = internal global %struct.stream_procs { i32 (%struct.stream_s*)* @ssread, i32 (%struct.stream_s*, i8)* null, i32 (%struct.stream_s*, i64*)* @ssavailable, i32 (%struct.stream_s*, i64)* @ssseek, i32 (%struct.stream_s*)* @snull, i32 (%struct.stream_s*)* @snull }, align 8
@swrite_string.p = internal global %struct.stream_procs { i32 (%struct.stream_s*)* null, i32 (%struct.stream_s*, i8)* @sswrite, i32 (%struct.stream_s*, i64*)* @snoavailable, i32 (%struct.stream_s*, i64)* @ssseek, i32 (%struct.stream_s*)* @snull, i32 (%struct.stream_s*)* @snull }, align 8
@sread_file.p = internal global %struct.stream_procs { i32 (%struct.stream_s*)* @sfread, i32 (%struct.stream_s*, i8)* null, i32 (%struct.stream_s*, i64*)* @sfavailable, i32 (%struct.stream_s*, i64)* @srseek, i32 (%struct.stream_s*)* @snull, i32 (%struct.stream_s*)* @srclose }, align 8
@stdin = external dso_local global %struct._IO_FILE*, align 8
@swrite_file.p = internal global %struct.stream_procs { i32 (%struct.stream_s*)* null, i32 (%struct.stream_s*, i8)* @sfwrite, i32 (%struct.stream_s*, i64*)* @snoavailable, i32 (%struct.stream_s*, i64)* @swseek, i32 (%struct.stream_s*)* @swflush, i32 (%struct.stream_s*)* @swclose }, align 8
@sread_decrypt.p = internal global %struct.stream_procs { i32 (%struct.stream_s*)* @sxread, i32 (%struct.stream_s*, i8)* null, i32 (%struct.stream_s*, i64*)* @sxavailable, i32 (%struct.stream_s*, i64)* null, i32 (%struct.stream_s*)* @snull, i32 (%struct.stream_s*)* @snull }, align 8
@trace_flush_flag = common dso_local global i32 0, align 4
@zarith_op_init.my_defs = internal global [12 x %struct.op_def] [%struct.op_def { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.337, i32 0, i32 0), i32 (%struct.ref_s*)* @zadd }, %struct.op_def { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1.338, i32 0, i32 0), i32 (%struct.ref_s*)* @zceiling }, %struct.op_def { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2.339, i32 0, i32 0), i32 (%struct.ref_s*)* @zdiv }, %struct.op_def { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.340, i32 0, i32 0), i32 (%struct.ref_s*)* @zidiv }, %struct.op_def { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4.341, i32 0, i32 0), i32 (%struct.ref_s*)* @zfloor }, %struct.op_def { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5.342, i32 0, i32 0), i32 (%struct.ref_s*)* @zmod }, %struct.op_def { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.343, i32 0, i32 0), i32 (%struct.ref_s*)* @zmul }, %struct.op_def { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7.344, i32 0, i32 0), i32 (%struct.ref_s*)* @zneg }, %struct.op_def { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8.345, i32 0, i32 0), i32 (%struct.ref_s*)* @zround }, %struct.op_def { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9.346, i32 0, i32 0), i32 (%struct.ref_s*)* @zsub }, %struct.op_def { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10.347, i32 0, i32 0), i32 (%struct.ref_s*)* @ztruncate }, %struct.op_def zeroinitializer], align 16
@.str.337 = private unnamed_addr constant [5 x i8] c"2add\00", align 1
@.str.1.338 = private unnamed_addr constant [9 x i8] c"1ceiling\00", align 1
@.str.2.339 = private unnamed_addr constant [5 x i8] c"2div\00", align 1
@.str.3.340 = private unnamed_addr constant [6 x i8] c"2idiv\00", align 1
@.str.4.341 = private unnamed_addr constant [7 x i8] c"1floor\00", align 1
@.str.5.342 = private unnamed_addr constant [5 x i8] c"2mod\00", align 1
@.str.6.343 = private unnamed_addr constant [5 x i8] c"2mul\00", align 1
@.str.7.344 = private unnamed_addr constant [5 x i8] c"1neg\00", align 1
@.str.8.345 = private unnamed_addr constant [7 x i8] c"1round\00", align 1
@.str.9.346 = private unnamed_addr constant [5 x i8] c"2sub\00", align 1
@.str.10.347 = private unnamed_addr constant [10 x i8] c"1truncate\00", align 1
@.str.348 = private unnamed_addr constant [6 x i8] c"array\00", align 1
@zarray_op_init.my_defs = internal global [4 x %struct.op_def] [%struct.op_def { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.351, i32 0, i32 0), i32 (%struct.ref_s*)* @zaload }, %struct.op_def { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2.352, i32 0, i32 0), i32 (%struct.ref_s*)* @zarray }, %struct.op_def { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3.353, i32 0, i32 0), i32 (%struct.ref_s*)* @zastore }, %struct.op_def zeroinitializer], align 16
@.str.1.351 = private unnamed_addr constant [7 x i8] c"1aload\00", align 1
@.str.2.352 = private unnamed_addr constant [7 x i8] c"1array\00", align 1
@.str.3.353 = private unnamed_addr constant [8 x i8] c"1astore\00", align 1
@.str.13.354 = private unnamed_addr constant [10 x i8] c"free_show\00", align 1
@.str.12.355 = private unnamed_addr constant [11 x i8] c"setup_show\00", align 1
@.str.356 = private unnamed_addr constant [13 x i8] c"type1addpath\00", align 1
@zchar_op_init.my_defs = internal global [12 x %struct.op_def] [%struct.op_def { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.359, i32 0, i32 0), i32 (%struct.ref_s*)* @zashow }, %struct.op_def { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2.360, i32 0, i32 0), i32 (%struct.ref_s*)* @zawidthshow }, %struct.op_def { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3.361, i32 0, i32 0), i32 (%struct.ref_s*)* @zcharpath }, %struct.op_def { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4.362, i32 0, i32 0), i32 (%struct.ref_s*)* @zkshow }, %struct.op_def { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5.363, i32 0, i32 0), i32 (%struct.ref_s*)* @zsetcachedevice }, %struct.op_def { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6.364, i32 0, i32 0), i32 (%struct.ref_s*)* @zsetcharwidth }, %struct.op_def { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7.365, i32 0, i32 0), i32 (%struct.ref_s*)* @zshow }, %struct.op_def { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.8.366, i32 0, i32 0), i32 (%struct.ref_s*)* @zstringwidth }, %struct.op_def { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9.367, i32 0, i32 0), i32 (%struct.ref_s*)* @ztype1addpath }, %struct.op_def { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.10.368, i32 0, i32 0), i32 (%struct.ref_s*)* @ztype1imagepath }, %struct.op_def { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11.369, i32 0, i32 0), i32 (%struct.ref_s*)* @zwidthshow }, %struct.op_def zeroinitializer], align 16
@.str.1.359 = private unnamed_addr constant [7 x i8] c"3ashow\00", align 1
@.str.2.360 = private unnamed_addr constant [12 x i8] c"6awidthshow\00", align 1
@.str.3.361 = private unnamed_addr constant [10 x i8] c"2charpath\00", align 1
@.str.4.362 = private unnamed_addr constant [7 x i8] c"2kshow\00", align 1
@.str.5.363 = private unnamed_addr constant [16 x i8] c"3setcachedevice\00", align 1
@.str.6.364 = private unnamed_addr constant [14 x i8] c"2setcharwidth\00", align 1
@.str.7.365 = private unnamed_addr constant [6 x i8] c"1show\00", align 1
@.str.8.366 = private unnamed_addr constant [13 x i8] c"1stringwidth\00", align 1
@.str.9.367 = private unnamed_addr constant [14 x i8] c"1type1addpath\00", align 1
@.str.10.368 = private unnamed_addr constant [16 x i8] c"8type1imagepath\00", align 1
@.str.11.369 = private unnamed_addr constant [11 x i8] c"4widthshow\00", align 1
@.str.2.370 = private unnamed_addr constant [11 x i8] c"make_color\00", align 1
@zcolor_op_init.my_defs = internal global [3 x %struct.op_def] [%struct.op_def { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.373, i32 0, i32 0), i32 (%struct.ref_s*)* @zcurrentgscolor }, %struct.op_def { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1.374, i32 0, i32 0), i32 (%struct.ref_s*)* @zsetgscolor }, %struct.op_def zeroinitializer], align 16
@.str.373 = private unnamed_addr constant [16 x i8] c"0currentgscolor\00", align 1
@.str.1.374 = private unnamed_addr constant [12 x i8] c"1setgscolor\00", align 1
@zcontrol_op_init.my_defs = internal global [13 x %struct.op_def] [%struct.op_def { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.379, i32 0, i32 0), i32 (%struct.ref_s*)* @zcountexecstack }, %struct.op_def { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.380, i32 0, i32 0), i32 (%struct.ref_s*)* @zexec }, %struct.op_def { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2.381, i32 0, i32 0), i32 (%struct.ref_s*)* @zexecstack }, %struct.op_def { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.382, i32 0, i32 0), i32 (%struct.ref_s*)* @zexit }, %struct.op_def { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4.383, i32 0, i32 0), i32 (%struct.ref_s*)* @zif }, %struct.op_def { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.384, i32 0, i32 0), i32 (%struct.ref_s*)* @zifelse }, %struct.op_def { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.385, i32 0, i32 0), i32 (%struct.ref_s*)* @zfor }, %struct.op_def { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7.386, i32 0, i32 0), i32 (%struct.ref_s*)* @zloop }, %struct.op_def { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8.387, i32 0, i32 0), i32 (%struct.ref_s*)* @zquit }, %struct.op_def { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9.388, i32 0, i32 0), i32 (%struct.ref_s*)* @zrepeat }, %struct.op_def { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10.389, i32 0, i32 0), i32 (%struct.ref_s*)* @zstop }, %struct.op_def { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11.390, i32 0, i32 0), i32 (%struct.ref_s*)* @zstopped }, %struct.op_def zeroinitializer], align 16
@.str.379 = private unnamed_addr constant [16 x i8] c"0countexecstack\00", align 1
@.str.1.380 = private unnamed_addr constant [6 x i8] c"1exec\00", align 1
@.str.2.381 = private unnamed_addr constant [11 x i8] c"0execstack\00", align 1
@.str.3.382 = private unnamed_addr constant [6 x i8] c"0exit\00", align 1
@.str.4.383 = private unnamed_addr constant [4 x i8] c"2if\00", align 1
@.str.5.384 = private unnamed_addr constant [8 x i8] c"3ifelse\00", align 1
@.str.6.385 = private unnamed_addr constant [5 x i8] c"4for\00", align 1
@.str.7.386 = private unnamed_addr constant [6 x i8] c"1loop\00", align 1
@.str.8.387 = private unnamed_addr constant [6 x i8] c"0quit\00", align 1
@.str.9.388 = private unnamed_addr constant [8 x i8] c"2repeat\00", align 1
@.str.10.389 = private unnamed_addr constant [6 x i8] c"0stop\00", align 1
@.str.11.390 = private unnamed_addr constant [9 x i8] c"1stopped\00", align 1
@.str.391 = private unnamed_addr constant [11 x i8] c"devicename\00", align 1
@zdevice_op_init.my_defs = internal global [12 x %struct.op_def] [%struct.op_def { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.396, i32 0, i32 0), i32 (%struct.ref_s*)* @zcopypage }, %struct.op_def { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2.397, i32 0, i32 0), i32 (%struct.ref_s*)* @zcopyscanlines }, %struct.op_def { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3.398, i32 0, i32 0), i32 (%struct.ref_s*)* @zcurrentdevice }, %struct.op_def { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4.399, i32 0, i32 0), i32 (%struct.ref_s*)* @zdevicename }, %struct.op_def { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5.400, i32 0, i32 0), i32 (%struct.ref_s*)* @zdeviceparams }, %struct.op_def { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6.401, i32 0, i32 0), i32 (%struct.ref_s*)* @zflushpage }, %struct.op_def { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7.402, i32 0, i32 0), i32 (%struct.ref_s*)* @zgetdevice }, %struct.op_def { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8.403, i32 0, i32 0), i32 (%struct.ref_s*)* @zmakedevice }, %struct.op_def { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.9.404, i32 0, i32 0), i32 (%struct.ref_s*)* @zmakeimagedevice }, %struct.op_def { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.10.405, i32 0, i32 0), i32 (%struct.ref_s*)* @znulldevice }, %struct.op_def { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11.406, i32 0, i32 0), i32 (%struct.ref_s*)* @zsetdevice }, %struct.op_def zeroinitializer], align 16
@.str.1.396 = private unnamed_addr constant [10 x i8] c"0copypage\00", align 1
@.str.2.397 = private unnamed_addr constant [15 x i8] c"3copyscanlines\00", align 1
@.str.3.398 = private unnamed_addr constant [15 x i8] c"0currentdevice\00", align 1
@.str.4.399 = private unnamed_addr constant [12 x i8] c"1devicename\00", align 1
@.str.5.400 = private unnamed_addr constant [14 x i8] c"1deviceparams\00", align 1
@.str.6.401 = private unnamed_addr constant [11 x i8] c"0flushpage\00", align 1
@.str.7.402 = private unnamed_addr constant [11 x i8] c"1getdevice\00", align 1
@.str.8.403 = private unnamed_addr constant [12 x i8] c"4makedevice\00", align 1
@.str.9.404 = private unnamed_addr constant [17 x i8] c"4makeimagedevice\00", align 1
@.str.10.405 = private unnamed_addr constant [13 x i8] c"0.nulldevice\00", align 1
@.str.11.406 = private unnamed_addr constant [12 x i8] c"1.setdevice\00", align 1
@zdict_op_init.my_defs = internal global [14 x %struct.op_def] [%struct.op_def { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.409, i32 0, i32 0), i32 (%struct.ref_s*)* @zbegin }, %struct.op_def { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1.410, i32 0, i32 0), i32 (%struct.ref_s*)* @zcountdictstack }, %struct.op_def { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2.411, i32 0, i32 0), i32 (%struct.ref_s*)* @zcurrentdict }, %struct.op_def { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.412, i32 0, i32 0), i32 (%struct.ref_s*)* @zdef }, %struct.op_def { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4.413, i32 0, i32 0), i32 (%struct.ref_s*)* @zdict }, %struct.op_def { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5.414, i32 0, i32 0), i32 (%struct.ref_s*)* @zdictstack }, %struct.op_def { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.415, i32 0, i32 0), i32 (%struct.ref_s*)* @zend }, %struct.op_def { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7.416, i32 0, i32 0), i32 (%struct.ref_s*)* @zknown }, %struct.op_def { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8.417, i32 0, i32 0), i32 (%struct.ref_s*)* @zload }, %struct.op_def { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.418, i32 0, i32 0), i32 (%struct.ref_s*)* @zmaxlength }, %struct.op_def { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.10.419, i32 0, i32 0), i32 (%struct.ref_s*)* @zsetmaxlength }, %struct.op_def { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11.420, i32 0, i32 0), i32 (%struct.ref_s*)* @zstore }, %struct.op_def { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.12.421, i32 0, i32 0), i32 (%struct.ref_s*)* @zwhere }, %struct.op_def zeroinitializer], align 16
@.str.409 = private unnamed_addr constant [7 x i8] c"1begin\00", align 1
@.str.1.410 = private unnamed_addr constant [16 x i8] c"0countdictstack\00", align 1
@.str.2.411 = private unnamed_addr constant [13 x i8] c"0currentdict\00", align 1
@.str.3.412 = private unnamed_addr constant [5 x i8] c"2def\00", align 1
@.str.4.413 = private unnamed_addr constant [6 x i8] c"1dict\00", align 1
@.str.5.414 = private unnamed_addr constant [11 x i8] c"0dictstack\00", align 1
@.str.6.415 = private unnamed_addr constant [5 x i8] c"0end\00", align 1
@.str.7.416 = private unnamed_addr constant [7 x i8] c"2known\00", align 1
@.str.8.417 = private unnamed_addr constant [6 x i8] c"1load\00", align 1
@.str.9.418 = private unnamed_addr constant [11 x i8] c"1maxlength\00", align 1
@.str.10.419 = private unnamed_addr constant [14 x i8] c"2setmaxlength\00", align 1
@.str.11.420 = private unnamed_addr constant [7 x i8] c"2store\00", align 1
@.str.12.421 = private unnamed_addr constant [7 x i8] c"1where\00", align 1
@std_files = internal global [5 x %struct.file_entry_s] [%struct.file_entry_s { %struct.stream_s* getelementptr inbounds ([5 x %struct.stream_s], [5 x %struct.stream_s]* @std_file_streams, i32 0, i32 0), i32 0, %struct.ref_s zeroinitializer }, %struct.file_entry_s { %struct.stream_s* bitcast (i8* getelementptr (i8, i8* bitcast ([5 x %struct.stream_s]* @std_file_streams to i8*), i64 120) to %struct.stream_s*), i32 0, %struct.ref_s zeroinitializer }, %struct.file_entry_s { %struct.stream_s* bitcast (i8* getelementptr (i8, i8* bitcast ([5 x %struct.stream_s]* @std_file_streams to i8*), i64 240) to %struct.stream_s*), i32 0, %struct.ref_s zeroinitializer }, %struct.file_entry_s { %struct.stream_s* bitcast (i8* getelementptr (i8, i8* bitcast ([5 x %struct.stream_s]* @std_file_streams to i8*), i64 360) to %struct.stream_s*), i32 -1, %struct.ref_s zeroinitializer }, %struct.file_entry_s { %struct.stream_s* bitcast (i8* getelementptr (i8, i8* bitcast ([5 x %struct.stream_s]* @std_file_streams to i8*), i64 480) to %struct.stream_s*), i32 -1, %struct.ref_s zeroinitializer }], align 16
@stdin_buf = internal global [1 x i8] zeroinitializer, align 1
@stdout_buf = internal global [128 x i8] zeroinitializer, align 16
@stderr_buf = internal global [128 x i8] zeroinitializer, align 16
@std_file_names = internal global [5 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.44, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.46.428, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.47.429, i32 0, i32 0)], align 16
@.str.424 = private unnamed_addr constant [11 x i8] c"zfile_init\00", align 1
@.str.1.425 = private unnamed_addr constant [9 x i8] c"%s(%d): \00", align 1
@.str.2.426 = private unnamed_addr constant [8 x i8] c"zfile.c\00", align 1
@.str.3.427 = private unnamed_addr constant [29 x i8] c"alloc failed in zfile_init!\0A\00", align 1
@.str.43 = private unnamed_addr constant [7 x i8] c"%stdin\00", align 1
@.str.44 = private unnamed_addr constant [8 x i8] c"%stdout\00", align 1
@.str.45 = private unnamed_addr constant [8 x i8] c"%stderr\00", align 1
@.str.46.428 = private unnamed_addr constant [10 x i8] c"%lineedit\00", align 1
@.str.47.429 = private unnamed_addr constant [15 x i8] c"%statementedit\00", align 1
@std_file_streams = internal global [5 x %struct.stream_s] zeroinitializer, align 16
@.str.4.430 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.5.431 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.37.432 = private unnamed_addr constant [22 x i8] c"file_open(file_entry)\00", align 1
@.str.38.433 = private unnamed_addr constant [18 x i8] c"file_open(buffer)\00", align 1
@.str.39.434 = private unnamed_addr constant [18 x i8] c"file_open(stream)\00", align 1
@.str.40 = private unnamed_addr constant [21 x i8] c"file_open(file_name)\00", align 1
@std_file_attrs = internal global [5 x i32] [i32 514, i32 258, i32 258, i32 514, i32 514], align 16
@lineedit_buf = internal global [160 x i8] zeroinitializer, align 16
@.str.41.437 = private unnamed_addr constant [19 x i8] c"file_close(stream)\00", align 1
@.str.42 = private unnamed_addr constant [19 x i8] c"file_close(buffer)\00", align 1
@zwritehexstring.hex_digits = internal global i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6.438, i32 0, i32 0), align 8
@.str.6.438 = private unnamed_addr constant [17 x i8] c"0123456789abcdef\00", align 1
@invalid_file_entry = internal global %struct.file_entry_s zeroinitializer, align 8
@.str.7.441 = private unnamed_addr constant [11 x i8] c"deletefile\00", align 1
@.str.8.442 = private unnamed_addr constant [17 x i8] c"renamefile(from)\00", align 1
@.str.9.443 = private unnamed_addr constant [15 x i8] c"renamefile(to)\00", align 1
@zfile_op_init.my_defs = internal global [28 x %struct.op_def] [%struct.op_def { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.10.448, i32 0, i32 0), i32 (%struct.ref_s*)* @zbytesavailable }, %struct.op_def { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11.449, i32 0, i32 0), i32 (%struct.ref_s*)* @zclosefile }, %struct.op_def { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12.450, i32 0, i32 0), i32 (%struct.ref_s*)* @zcurrentfile }, %struct.op_def { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.13.451, i32 0, i32 0), i32 (%struct.ref_s*)* @zdeletefile }, %struct.op_def { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14.452, i32 0, i32 0), i32 (%struct.ref_s*)* @zecho }, %struct.op_def { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15.453, i32 0, i32 0), i32 (%struct.ref_s*)* @zfile }, %struct.op_def { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.16.454, i32 0, i32 0), i32 (%struct.ref_s*)* @zfilename }, %struct.op_def { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.17.455, i32 0, i32 0), i32 (%struct.ref_s*)* @zfileposition }, %struct.op_def { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.18.456, i32 0, i32 0), i32 (%struct.ref_s*)* @zfindlibfile }, %struct.op_def { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19.457, i32 0, i32 0), i32 (%struct.ref_s*)* @zflush }, %struct.op_def { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.20.458, i32 0, i32 0), i32 (%struct.ref_s*)* @zflushfile }, %struct.op_def { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21.459, i32 0, i32 0), i32 (%struct.ref_s*)* @zprint }, %struct.op_def { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22.460, i32 0, i32 0), i32 (%struct.ref_s*)* @zread }, %struct.op_def { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23.461, i32 0, i32 0), i32 (%struct.ref_s*)* @zreadhexstring }, %struct.op_def { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24.462, i32 0, i32 0), i32 (%struct.ref_s*)* @zreadline }, %struct.op_def { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.25.463, i32 0, i32 0), i32 (%struct.ref_s*)* @zreadstring }, %struct.op_def { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.26.464, i32 0, i32 0), i32 (%struct.ref_s*)* @zrenamefile }, %struct.op_def { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27.465, i32 0, i32 0), i32 (%struct.ref_s*)* @zresetfile }, %struct.op_def { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.28.466, i32 0, i32 0), i32 (%struct.ref_s*)* @zrun }, %struct.op_def { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.29.467, i32 0, i32 0), i32 (%struct.ref_s*)* @zsetfileposition }, %struct.op_def { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.30.468, i32 0, i32 0), i32 (%struct.ref_s*)* @ztype1decryptfile }, %struct.op_def { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.31.469, i32 0, i32 0), i32 (%struct.ref_s*)* @zunread }, %struct.op_def { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.32.470, i32 0, i32 0), i32 (%struct.ref_s*)* @zstatus }, %struct.op_def { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.33.471, i32 0, i32 0), i32 (%struct.ref_s*)* @zwrite }, %struct.op_def { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.34.472, i32 0, i32 0), i32 (%struct.ref_s*)* @zwritehexstring }, %struct.op_def { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.35.473, i32 0, i32 0), i32 (%struct.ref_s*)* @zwriteppmfile }, %struct.op_def { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.36.474, i32 0, i32 0), i32 (%struct.ref_s*)* @zwritestring }, %struct.op_def zeroinitializer], align 16
@.str.10.448 = private unnamed_addr constant [16 x i8] c"1bytesavailable\00", align 1
@.str.11.449 = private unnamed_addr constant [11 x i8] c"1closefile\00", align 1
@.str.12.450 = private unnamed_addr constant [13 x i8] c"0currentfile\00", align 1
@.str.13.451 = private unnamed_addr constant [12 x i8] c"1deletefile\00", align 1
@.str.14.452 = private unnamed_addr constant [6 x i8] c"1echo\00", align 1
@.str.15.453 = private unnamed_addr constant [6 x i8] c"2file\00", align 1
@.str.16.454 = private unnamed_addr constant [10 x i8] c"1filename\00", align 1
@.str.17.455 = private unnamed_addr constant [14 x i8] c"1fileposition\00", align 1
@.str.18.456 = private unnamed_addr constant [13 x i8] c"1findlibfile\00", align 1
@.str.19.457 = private unnamed_addr constant [7 x i8] c"0flush\00", align 1
@.str.20.458 = private unnamed_addr constant [11 x i8] c"1flushfile\00", align 1
@.str.21.459 = private unnamed_addr constant [7 x i8] c"1print\00", align 1
@.str.22.460 = private unnamed_addr constant [6 x i8] c"1read\00", align 1
@.str.23.461 = private unnamed_addr constant [15 x i8] c"2readhexstring\00", align 1
@.str.24.462 = private unnamed_addr constant [10 x i8] c"2readline\00", align 1
@.str.25.463 = private unnamed_addr constant [12 x i8] c"2readstring\00", align 1
@.str.26.464 = private unnamed_addr constant [12 x i8] c"2renamefile\00", align 1
@.str.27.465 = private unnamed_addr constant [11 x i8] c"1resetfile\00", align 1
@.str.28.466 = private unnamed_addr constant [5 x i8] c"1run\00", align 1
@.str.29.467 = private unnamed_addr constant [17 x i8] c"2setfileposition\00", align 1
@.str.30.468 = private unnamed_addr constant [18 x i8] c"2type1decryptfile\00", align 1
@.str.31.469 = private unnamed_addr constant [8 x i8] c"2unread\00", align 1
@.str.32.470 = private unnamed_addr constant [8 x i8] c"1status\00", align 1
@.str.33.471 = private unnamed_addr constant [7 x i8] c"2write\00", align 1
@.str.34.472 = private unnamed_addr constant [16 x i8] c"2writehexstring\00", align 1
@.str.35.473 = private unnamed_addr constant [14 x i8] c"2writeppmfile\00", align 1
@.str.36.474 = private unnamed_addr constant [13 x i8] c"2writestring\00", align 1
@ifont_dir = internal global %struct.gs_font_dir_s* null, align 8
@.str.479 = private unnamed_addr constant [14 x i8] c"FontDirectory\00", align 1
@name_FontDirectory = internal global %struct.ref_s zeroinitializer, align 8
@.str.1.480 = private unnamed_addr constant [11 x i8] c"FontMatrix\00", align 1
@name_FontMatrix = internal global %struct.ref_s zeroinitializer, align 8
@.str.2.481 = private unnamed_addr constant [9 x i8] c"FontType\00", align 1
@name_FontType = internal global %struct.ref_s zeroinitializer, align 8
@.str.3.482 = private unnamed_addr constant [9 x i8] c"FontBBox\00", align 1
@name_FontBBox = internal global %struct.ref_s zeroinitializer, align 8
@.str.4.483 = private unnamed_addr constant [9 x i8] c"Encoding\00", align 1
@name_Encoding = internal global %struct.ref_s zeroinitializer, align 8
@.str.5.484 = private unnamed_addr constant [10 x i8] c"PaintType\00", align 1
@name_PaintType = internal global %struct.ref_s zeroinitializer, align 8
@.str.6.485 = private unnamed_addr constant [9 x i8] c"UniqueID\00", align 1
@name_UniqueID = internal global %struct.ref_s zeroinitializer, align 8
@.str.7.486 = private unnamed_addr constant [10 x i8] c"BuildChar\00", align 1
@name_BuildChar = internal global %struct.ref_s zeroinitializer, align 8
@.str.8.487 = private unnamed_addr constant [15 x i8] c"Type1BuildChar\00", align 1
@name_Type1BuildChar = internal global %struct.ref_s zeroinitializer, align 8
@.str.9.488 = private unnamed_addr constant [8 x i8] c"Private\00", align 1
@name_Private = internal global %struct.ref_s zeroinitializer, align 8
@.str.10.489 = private unnamed_addr constant [12 x i8] c"CharStrings\00", align 1
@name_CharStrings = internal global %struct.ref_s zeroinitializer, align 8
@.str.11.490 = private unnamed_addr constant [4 x i8] c"FID\00", align 1
@name_FID = internal global %struct.ref_s zeroinitializer, align 8
@.str.12.491 = private unnamed_addr constant [6 x i8] c"Subrs\00", align 1
@name_Subrs = internal global %struct.ref_s zeroinitializer, align 8
@.str.13.492 = private unnamed_addr constant [6 x i8] c"lenIV\00", align 1
@name_lenIV = internal global %struct.ref_s zeroinitializer, align 8
@zdefinefont.no_subrs = internal global %struct.ref_s zeroinitializer, align 8
@zdefinefont.no_charstrings = internal global %struct.ref_s zeroinitializer, align 8
@.str.14.493 = private unnamed_addr constant [17 x i8] c"definefont(font)\00", align 1
@.str.15.494 = private unnamed_addr constant [17 x i8] c"definefont(data)\00", align 1
@zfont_op_init.my_defs = internal global [10 x %struct.op_def] [%struct.op_def { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.16.497, i32 0, i32 0), i32 (%struct.ref_s*)* @zcurrentfont }, %struct.op_def { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.17.498, i32 0, i32 0), i32 (%struct.ref_s*)* @zdefinefont }, %struct.op_def { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.18.499, i32 0, i32 0), i32 (%struct.ref_s*)* @zmakefont }, %struct.op_def { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.19.500, i32 0, i32 0), i32 (%struct.ref_s*)* @zscalefont }, %struct.op_def { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.20.501, i32 0, i32 0), i32 (%struct.ref_s*)* @zsetfont }, %struct.op_def { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.21.502, i32 0, i32 0), i32 (%struct.ref_s*)* @zcachestatus }, %struct.op_def { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.22.503, i32 0, i32 0), i32 (%struct.ref_s*)* @zsetcachelimit }, %struct.op_def { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.23.504, i32 0, i32 0), i32 (%struct.ref_s*)* @zsetcacheparams }, %struct.op_def { i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.24.505, i32 0, i32 0), i32 (%struct.ref_s*)* @zcurrentcacheparams }, %struct.op_def zeroinitializer], align 16
@.str.16.497 = private unnamed_addr constant [13 x i8] c"0currentfont\00", align 1
@.str.17.498 = private unnamed_addr constant [12 x i8] c"2definefont\00", align 1
@.str.18.499 = private unnamed_addr constant [10 x i8] c"2makefont\00", align 1
@.str.19.500 = private unnamed_addr constant [11 x i8] c"2scalefont\00", align 1
@.str.20.501 = private unnamed_addr constant [9 x i8] c"1setfont\00", align 1
@.str.21.502 = private unnamed_addr constant [13 x i8] c"0cachestatus\00", align 1
@.str.22.503 = private unnamed_addr constant [15 x i8] c"1setcachelimit\00", align 1
@.str.23.504 = private unnamed_addr constant [16 x i8] c"1setcacheparams\00", align 1
@.str.24.505 = private unnamed_addr constant [20 x i8] c"0currentcacheparams\00", align 1
@zgeneric_op_init.my_defs = internal global [8 x %struct.op_def] [%struct.op_def { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.508, i32 0, i32 0), i32 (%struct.ref_s*)* @zcopy }, %struct.op_def { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.509, i32 0, i32 0), i32 (%struct.ref_s*)* @zforall }, %struct.op_def { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2.510, i32 0, i32 0), i32 (%struct.ref_s*)* @zget }, %struct.op_def { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3.511, i32 0, i32 0), i32 (%struct.ref_s*)* @zgetinterval }, %struct.op_def { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4.512, i32 0, i32 0), i32 (%struct.ref_s*)* @zlength }, %struct.op_def { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5.513, i32 0, i32 0), i32 (%struct.ref_s*)* @zput }, %struct.op_def { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.514, i32 0, i32 0), i32 (%struct.ref_s*)* @zputinterval }, %struct.op_def zeroinitializer], align 16
@.str.508 = private unnamed_addr constant [6 x i8] c"1copy\00", align 1
@.str.1.509 = private unnamed_addr constant [8 x i8] c"2forall\00", align 1
@.str.2.510 = private unnamed_addr constant [5 x i8] c"2get\00", align 1
@.str.3.511 = private unnamed_addr constant [13 x i8] c"3getinterval\00", align 1
@.str.4.512 = private unnamed_addr constant [8 x i8] c"1length\00", align 1
@.str.5.513 = private unnamed_addr constant [5 x i8] c"3put\00", align 1
@.str.6.514 = private unnamed_addr constant [13 x i8] c"3putinterval\00", align 1
@igs = common dso_local global %struct.gs_state_s* null, align 8
@istate = common dso_local global %struct.int_state_s zeroinitializer, align 8
@.str.521 = private unnamed_addr constant [6 x i8] c"gsave\00", align 1
@.str.1.522 = private unnamed_addr constant [9 x i8] c"grestore\00", align 1
@.str.2.523 = private unnamed_addr constant [11 x i8] c"restoreall\00", align 1
@.str.3.524 = private unnamed_addr constant [8 x i8] c"setdash\00", align 1
@.str.4.525 = private unnamed_addr constant [12 x i8] c"currentdash\00", align 1
@zgstate_op_init.my_defs = internal global [26 x %struct.op_def] [%struct.op_def { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5.528, i32 0, i32 0), i32 (%struct.ref_s*)* @zcurrentdash }, %struct.op_def { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.529, i32 0, i32 0), i32 (%struct.ref_s*)* @zcurrentflat }, %struct.op_def { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7.530, i32 0, i32 0), i32 (%struct.ref_s*)* @zcurrentgray }, %struct.op_def { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8.531, i32 0, i32 0), i32 (%struct.ref_s*)* @zcurrenthsbcolor }, %struct.op_def { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9.532, i32 0, i32 0), i32 (%struct.ref_s*)* @zcurrentlinecap }, %struct.op_def { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.10.533, i32 0, i32 0), i32 (%struct.ref_s*)* @zcurrentlinejoin }, %struct.op_def { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.11.534, i32 0, i32 0), i32 (%struct.ref_s*)* @zcurrentlinewidth }, %struct.op_def { i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.12.535, i32 0, i32 0), i32 (%struct.ref_s*)* @zcurrentmiterlimit }, %struct.op_def { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.13.536, i32 0, i32 0), i32 (%struct.ref_s*)* @zcurrentrgbcolor }, %struct.op_def { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14.537, i32 0, i32 0), i32 (%struct.ref_s*)* @zcurrentscreen }, %struct.op_def { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.15.538, i32 0, i32 0), i32 (%struct.ref_s*)* @zcurrenttransfer }, %struct.op_def { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.16.539, i32 0, i32 0), i32 (%struct.ref_s*)* @zgrestore }, %struct.op_def { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.17.540, i32 0, i32 0), i32 (%struct.ref_s*)* @zgrestoreall }, %struct.op_def { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18.541, i32 0, i32 0), i32 (%struct.ref_s*)* @zgsave }, %struct.op_def { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.19.542, i32 0, i32 0), i32 (%struct.ref_s*)* @zinitgraphics }, %struct.op_def { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.20.543, i32 0, i32 0), i32 (%struct.ref_s*)* @zsetdash }, %struct.op_def { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.21.544, i32 0, i32 0), i32 (%struct.ref_s*)* @zsetflat }, %struct.op_def { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.22.545, i32 0, i32 0), i32 (%struct.ref_s*)* @zsetgray }, %struct.op_def { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.23.546, i32 0, i32 0), i32 (%struct.ref_s*)* @zsethsbcolor }, %struct.op_def { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.24.547, i32 0, i32 0), i32 (%struct.ref_s*)* @zsetlinecap }, %struct.op_def { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.25.548, i32 0, i32 0), i32 (%struct.ref_s*)* @zsetlinejoin }, %struct.op_def { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.26.549, i32 0, i32 0), i32 (%struct.ref_s*)* @zsetlinewidth }, %struct.op_def { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.27.550, i32 0, i32 0), i32 (%struct.ref_s*)* @zsetmiterlimit }, %struct.op_def { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.28.551, i32 0, i32 0), i32 (%struct.ref_s*)* @zsetrgbcolor }, %struct.op_def { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.29.552, i32 0, i32 0), i32 (%struct.ref_s*)* @zsettransfer }, %struct.op_def zeroinitializer], align 16
@.str.5.528 = private unnamed_addr constant [13 x i8] c"0currentdash\00", align 1
@.str.6.529 = private unnamed_addr constant [13 x i8] c"0currentflat\00", align 1
@.str.7.530 = private unnamed_addr constant [13 x i8] c"0currentgray\00", align 1
@.str.8.531 = private unnamed_addr constant [17 x i8] c"0currenthsbcolor\00", align 1
@.str.9.532 = private unnamed_addr constant [16 x i8] c"0currentlinecap\00", align 1
@.str.10.533 = private unnamed_addr constant [17 x i8] c"0currentlinejoin\00", align 1
@.str.11.534 = private unnamed_addr constant [18 x i8] c"0currentlinewidth\00", align 1
@.str.12.535 = private unnamed_addr constant [19 x i8] c"0currentmiterlimit\00", align 1
@.str.13.536 = private unnamed_addr constant [17 x i8] c"0currentrgbcolor\00", align 1
@.str.14.537 = private unnamed_addr constant [15 x i8] c"0currentscreen\00", align 1
@.str.15.538 = private unnamed_addr constant [17 x i8] c"0currenttransfer\00", align 1
@.str.16.539 = private unnamed_addr constant [10 x i8] c"0grestore\00", align 1
@.str.17.540 = private unnamed_addr constant [13 x i8] c"0grestoreall\00", align 1
@.str.18.541 = private unnamed_addr constant [7 x i8] c"0gsave\00", align 1
@.str.19.542 = private unnamed_addr constant [14 x i8] c"0initgraphics\00", align 1
@.str.20.543 = private unnamed_addr constant [9 x i8] c"2setdash\00", align 1
@.str.21.544 = private unnamed_addr constant [9 x i8] c"1setflat\00", align 1
@.str.22.545 = private unnamed_addr constant [10 x i8] c"1.setgray\00", align 1
@.str.23.546 = private unnamed_addr constant [13 x i8] c"3sethsbcolor\00", align 1
@.str.24.547 = private unnamed_addr constant [12 x i8] c"1setlinecap\00", align 1
@.str.25.548 = private unnamed_addr constant [13 x i8] c"1setlinejoin\00", align 1
@.str.26.549 = private unnamed_addr constant [14 x i8] c"1setlinewidth\00", align 1
@.str.27.550 = private unnamed_addr constant [15 x i8] c"1setmiterlimit\00", align 1
@.str.28.551 = private unnamed_addr constant [13 x i8] c"3setrgbcolor\00", align 1
@.str.29.552 = private unnamed_addr constant [13 x i8] c"1settransfer\00", align 1
@.str.553 = private unnamed_addr constant [10 x i8] c"setscreen\00", align 1
@zht_op_init.my_defs = internal global [2 x %struct.op_def] [%struct.op_def { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1.556, i32 0, i32 0), i32 (%struct.ref_s*)* @zsetscreen }, %struct.op_def zeroinitializer], align 16
@.str.1.556 = private unnamed_addr constant [11 x i8] c"3setscreen\00", align 1
@degrees_to_radians = dso_local global double 0x3F91DF46A2529D39, align 8
@radians_to_degrees = dso_local global double 0x404CA5DC1A63C1F8, align 8
@rand_state = internal global i64 0, align 8
@zmath_op_init.my_defs = internal global [13 x %struct.op_def] [%struct.op_def { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.561, i32 0, i32 0), i32 (%struct.ref_s*)* @zarccos }, %struct.op_def { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.562, i32 0, i32 0), i32 (%struct.ref_s*)* @zarcsin }, %struct.op_def { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2.563, i32 0, i32 0), i32 (%struct.ref_s*)* @zatan }, %struct.op_def { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.564, i32 0, i32 0), i32 (%struct.ref_s*)* @zcos }, %struct.op_def { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.565, i32 0, i32 0), i32 (%struct.ref_s*)* @zexp }, %struct.op_def { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5.566, i32 0, i32 0), i32 (%struct.ref_s*)* @zln }, %struct.op_def { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.567, i32 0, i32 0), i32 (%struct.ref_s*)* @zlog }, %struct.op_def { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7.568, i32 0, i32 0), i32 (%struct.ref_s*)* @zrand }, %struct.op_def { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8.569, i32 0, i32 0), i32 (%struct.ref_s*)* @zrrand }, %struct.op_def { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9.570, i32 0, i32 0), i32 (%struct.ref_s*)* @zsin }, %struct.op_def { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10.571, i32 0, i32 0), i32 (%struct.ref_s*)* @zsqrt }, %struct.op_def { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11.572, i32 0, i32 0), i32 (%struct.ref_s*)* @zsrand }, %struct.op_def zeroinitializer], align 16
@.str.561 = private unnamed_addr constant [8 x i8] c"1arccos\00", align 1
@.str.1.562 = private unnamed_addr constant [8 x i8] c"1arcsin\00", align 1
@.str.2.563 = private unnamed_addr constant [6 x i8] c"2atan\00", align 1
@.str.3.564 = private unnamed_addr constant [5 x i8] c"1cos\00", align 1
@.str.4.565 = private unnamed_addr constant [5 x i8] c"2exp\00", align 1
@.str.5.566 = private unnamed_addr constant [4 x i8] c"1ln\00", align 1
@.str.6.567 = private unnamed_addr constant [5 x i8] c"1log\00", align 1
@.str.7.568 = private unnamed_addr constant [6 x i8] c"0rand\00", align 1
@.str.8.569 = private unnamed_addr constant [7 x i8] c"0rrand\00", align 1
@.str.9.570 = private unnamed_addr constant [5 x i8] c"1sin\00", align 1
@.str.10.571 = private unnamed_addr constant [6 x i8] c"1sqrt\00", align 1
@.str.11.572 = private unnamed_addr constant [7 x i8] c"1srand\00", align 1
@zmatrix_op_init.my_defs = internal global [13 x %struct.op_def] [%struct.op_def { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.577, i32 0, i32 0), i32 (%struct.ref_s*)* @zconcat }, %struct.op_def { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1.578, i32 0, i32 0), i32 (%struct.ref_s*)* @zdtransform }, %struct.op_def { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2.579, i32 0, i32 0), i32 (%struct.ref_s*)* @zconcatmatrix }, %struct.op_def { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3.580, i32 0, i32 0), i32 (%struct.ref_s*)* @zcurrentmatrix }, %struct.op_def { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4.581, i32 0, i32 0), i32 (%struct.ref_s*)* @zidtransform }, %struct.op_def { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5.582, i32 0, i32 0), i32 (%struct.ref_s*)* @zinvertmatrix }, %struct.op_def { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6.583, i32 0, i32 0), i32 (%struct.ref_s*)* @zitransform }, %struct.op_def { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7.584, i32 0, i32 0), i32 (%struct.ref_s*)* @zrotate }, %struct.op_def { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8.585, i32 0, i32 0), i32 (%struct.ref_s*)* @zscale }, %struct.op_def { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9.586, i32 0, i32 0), i32 (%struct.ref_s*)* @zsetmatrix }, %struct.op_def { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10.587, i32 0, i32 0), i32 (%struct.ref_s*)* @ztransform }, %struct.op_def { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11.588, i32 0, i32 0), i32 (%struct.ref_s*)* @ztranslate }, %struct.op_def zeroinitializer], align 16
@.str.577 = private unnamed_addr constant [8 x i8] c"1concat\00", align 1
@.str.1.578 = private unnamed_addr constant [12 x i8] c"2dtransform\00", align 1
@.str.2.579 = private unnamed_addr constant [14 x i8] c"3concatmatrix\00", align 1
@.str.3.580 = private unnamed_addr constant [15 x i8] c"1currentmatrix\00", align 1
@.str.4.581 = private unnamed_addr constant [13 x i8] c"2idtransform\00", align 1
@.str.5.582 = private unnamed_addr constant [14 x i8] c"2invertmatrix\00", align 1
@.str.6.583 = private unnamed_addr constant [12 x i8] c"2itransform\00", align 1
@.str.7.584 = private unnamed_addr constant [8 x i8] c"1rotate\00", align 1
@.str.8.585 = private unnamed_addr constant [7 x i8] c"2scale\00", align 1
@.str.9.586 = private unnamed_addr constant [11 x i8] c"1setmatrix\00", align 1
@.str.10.587 = private unnamed_addr constant [11 x i8] c"2transform\00", align 1
@.str.11.588 = private unnamed_addr constant [11 x i8] c"2translate\00", align 1
@.str.589 = private unnamed_addr constant [12 x i8] c"getenv name\00", align 1
@.str.1.590 = private unnamed_addr constant [13 x i8] c"getenv value\00", align 1
@zmisc_op_init.my_defs = internal global [8 x %struct.op_def] [%struct.op_def { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2.593, i32 0, i32 0), i32 (%struct.ref_s*)* @zbind }, %struct.op_def { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3.594, i32 0, i32 0), i32 (%struct.ref_s*)* @zcurrenttime }, %struct.op_def { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4.595, i32 0, i32 0), i32 (%struct.ref_s*)* @zgetenv }, %struct.op_def { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5.596, i32 0, i32 0), i32 (%struct.ref_s*)* @zsetdebug }, %struct.op_def { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6.597, i32 0, i32 0), i32 (%struct.ref_s*)* @ztype1encrypt }, %struct.op_def { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7.598, i32 0, i32 0), i32 (%struct.ref_s*)* @ztype1decrypt }, %struct.op_def { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8.599, i32 0, i32 0), i32 (%struct.ref_s*)* @zusertime }, %struct.op_def zeroinitializer], align 16
@.str.2.593 = private unnamed_addr constant [6 x i8] c"1bind\00", align 1
@.str.3.594 = private unnamed_addr constant [13 x i8] c"0currenttime\00", align 1
@.str.4.595 = private unnamed_addr constant [8 x i8] c"1getenv\00", align 1
@.str.5.596 = private unnamed_addr constant [10 x i8] c"2setdebug\00", align 1
@.str.6.597 = private unnamed_addr constant [14 x i8] c"3type1encrypt\00", align 1
@.str.7.598 = private unnamed_addr constant [14 x i8] c"3type1decrypt\00", align 1
@.str.8.599 = private unnamed_addr constant [10 x i8] c"0usertime\00", align 1
@.str.600 = private unnamed_addr constant [12 x i8] c"packedarray\00", align 1
@zpacked_op_init.my_defs = internal global [4 x %struct.op_def] [%struct.op_def { i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1.603, i32 0, i32 0), i32 (%struct.ref_s*)* @zcurrentpacking }, %struct.op_def { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2.604, i32 0, i32 0), i32 (%struct.ref_s*)* @zpackedarray }, %struct.op_def { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3.605, i32 0, i32 0), i32 (%struct.ref_s*)* @zsetpacking }, %struct.op_def zeroinitializer], align 16
@.str.1.603 = private unnamed_addr constant [16 x i8] c"0currentpacking\00", align 1
@.str.2.604 = private unnamed_addr constant [13 x i8] c"1packedarray\00", align 1
@.str.3.605 = private unnamed_addr constant [12 x i8] c"1setpacking\00", align 1
@.str.7.606 = private unnamed_addr constant [12 x i8] c"image_setup\00", align 1
@.str.8.607 = private unnamed_addr constant [21 x i8] c"image_continue(quit)\00", align 1
@.str.9.608 = private unnamed_addr constant [25 x i8] c"image_continue(finished)\00", align 1
@zpaint_op_init.my_defs = internal global [8 x %struct.op_def] [%struct.op_def { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.611, i32 0, i32 0), i32 (%struct.ref_s*)* @zeofill }, %struct.op_def { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1.612, i32 0, i32 0), i32 (%struct.ref_s*)* @zerasepage }, %struct.op_def { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2.613, i32 0, i32 0), i32 (%struct.ref_s*)* @zfill }, %struct.op_def { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3.614, i32 0, i32 0), i32 (%struct.ref_s*)* @zcolorimage }, %struct.op_def { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4.615, i32 0, i32 0), i32 (%struct.ref_s*)* @zimage }, %struct.op_def { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5.616, i32 0, i32 0), i32 (%struct.ref_s*)* @zimagemask }, %struct.op_def { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.617, i32 0, i32 0), i32 (%struct.ref_s*)* @zstroke }, %struct.op_def zeroinitializer], align 16
@.str.611 = private unnamed_addr constant [8 x i8] c"0eofill\00", align 1
@.str.1.612 = private unnamed_addr constant [11 x i8] c"0erasepage\00", align 1
@.str.2.613 = private unnamed_addr constant [6 x i8] c"0fill\00", align 1
@.str.3.614 = private unnamed_addr constant [12 x i8] c"7colorimage\00", align 1
@.str.4.615 = private unnamed_addr constant [7 x i8] c"5image\00", align 1
@.str.5.616 = private unnamed_addr constant [11 x i8] c"5imagemask\00", align 1
@.str.6.617 = private unnamed_addr constant [8 x i8] c"0stroke\00", align 1
@.str.618 = private unnamed_addr constant [11 x i8] c"pathforall\00", align 1
@zpath2_op_init.my_defs = internal global [10 x %struct.op_def] [%struct.op_def { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.621, i32 0, i32 0), i32 (%struct.ref_s*)* @zclip }, %struct.op_def { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2.622, i32 0, i32 0), i32 (%struct.ref_s*)* @zclippath }, %struct.op_def { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3.623, i32 0, i32 0), i32 (%struct.ref_s*)* @zeoclip }, %struct.op_def { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4.624, i32 0, i32 0), i32 (%struct.ref_s*)* @zflattenpath }, %struct.op_def { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5.625, i32 0, i32 0), i32 (%struct.ref_s*)* @zinitclip }, %struct.op_def { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6.626, i32 0, i32 0), i32 (%struct.ref_s*)* @zpathbbox }, %struct.op_def { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.7.627, i32 0, i32 0), i32 (%struct.ref_s*)* @zpathforall }, %struct.op_def { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.8.628, i32 0, i32 0), i32 (%struct.ref_s*)* @zreversepath }, %struct.op_def { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.9.629, i32 0, i32 0), i32 (%struct.ref_s*)* @zstrokepath }, %struct.op_def zeroinitializer], align 16
@.str.1.621 = private unnamed_addr constant [6 x i8] c"0clip\00", align 1
@.str.2.622 = private unnamed_addr constant [10 x i8] c"0clippath\00", align 1
@.str.3.623 = private unnamed_addr constant [8 x i8] c"0eoclip\00", align 1
@.str.4.624 = private unnamed_addr constant [13 x i8] c"0flattenpath\00", align 1
@.str.5.625 = private unnamed_addr constant [10 x i8] c"0initclip\00", align 1
@.str.6.626 = private unnamed_addr constant [10 x i8] c"0pathbbox\00", align 1
@.str.7.627 = private unnamed_addr constant [12 x i8] c"4pathforall\00", align 1
@.str.8.628 = private unnamed_addr constant [13 x i8] c"0reversepath\00", align 1
@.str.9.629 = private unnamed_addr constant [12 x i8] c"0strokepath\00", align 1
@zpath_op_init.my_defs = internal global [14 x %struct.op_def] [%struct.op_def { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.632, i32 0, i32 0), i32 (%struct.ref_s*)* @zarc }, %struct.op_def { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.633, i32 0, i32 0), i32 (%struct.ref_s*)* @zarcn }, %struct.op_def { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2.634, i32 0, i32 0), i32 (%struct.ref_s*)* @zarct }, %struct.op_def { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3.635, i32 0, i32 0), i32 (%struct.ref_s*)* @zarcto }, %struct.op_def { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4.636, i32 0, i32 0), i32 (%struct.ref_s*)* @zclosepath }, %struct.op_def { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5.637, i32 0, i32 0), i32 (%struct.ref_s*)* @zcurrentpoint }, %struct.op_def { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6.638, i32 0, i32 0), i32 (%struct.ref_s*)* @zcurveto }, %struct.op_def { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7.639, i32 0, i32 0), i32 (%struct.ref_s*)* @zlineto }, %struct.op_def { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8.640, i32 0, i32 0), i32 (%struct.ref_s*)* @zmoveto }, %struct.op_def { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.9.641, i32 0, i32 0), i32 (%struct.ref_s*)* @znewpath }, %struct.op_def { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10.642, i32 0, i32 0), i32 (%struct.ref_s*)* @zrcurveto }, %struct.op_def { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11.643, i32 0, i32 0), i32 (%struct.ref_s*)* @zrlineto }, %struct.op_def { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12.644, i32 0, i32 0), i32 (%struct.ref_s*)* @zrmoveto }, %struct.op_def zeroinitializer], align 16
@.str.632 = private unnamed_addr constant [5 x i8] c"5arc\00", align 1
@.str.1.633 = private unnamed_addr constant [6 x i8] c"5arcn\00", align 1
@.str.2.634 = private unnamed_addr constant [6 x i8] c"5arct\00", align 1
@.str.3.635 = private unnamed_addr constant [7 x i8] c"5arcto\00", align 1
@.str.4.636 = private unnamed_addr constant [11 x i8] c"0closepath\00", align 1
@.str.5.637 = private unnamed_addr constant [14 x i8] c"0currentpoint\00", align 1
@.str.6.638 = private unnamed_addr constant [9 x i8] c"6curveto\00", align 1
@.str.7.639 = private unnamed_addr constant [8 x i8] c"2lineto\00", align 1
@.str.8.640 = private unnamed_addr constant [8 x i8] c"2moveto\00", align 1
@.str.9.641 = private unnamed_addr constant [9 x i8] c"0newpath\00", align 1
@.str.10.642 = private unnamed_addr constant [10 x i8] c"6rcurveto\00", align 1
@.str.11.643 = private unnamed_addr constant [9 x i8] c"2rlineto\00", align 1
@.str.12.644 = private unnamed_addr constant [9 x i8] c"2rmoveto\00", align 1
@zrelbit_op_init.my_defs = internal global [14 x %struct.op_def] [%struct.op_def { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.651, i32 0, i32 0), i32 (%struct.ref_s*)* @zand }, %struct.op_def { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.652, i32 0, i32 0), i32 (%struct.ref_s*)* @zbitshift }, %struct.op_def { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.653, i32 0, i32 0), i32 (%struct.ref_s*)* @zeq }, %struct.op_def { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.654, i32 0, i32 0), i32 (%struct.ref_s*)* @zge }, %struct.op_def { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4.655, i32 0, i32 0), i32 (%struct.ref_s*)* @zgt }, %struct.op_def { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5.656, i32 0, i32 0), i32 (%struct.ref_s*)* @zle }, %struct.op_def { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6.657, i32 0, i32 0), i32 (%struct.ref_s*)* @zlt }, %struct.op_def { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7.658, i32 0, i32 0), i32 (%struct.ref_s*)* @zmax }, %struct.op_def { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8.659, i32 0, i32 0), i32 (%struct.ref_s*)* @zmin }, %struct.op_def { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9.660, i32 0, i32 0), i32 (%struct.ref_s*)* @zne }, %struct.op_def { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10.661, i32 0, i32 0), i32 (%struct.ref_s*)* @znot }, %struct.op_def { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11.662, i32 0, i32 0), i32 (%struct.ref_s*)* @zor }, %struct.op_def { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12.663, i32 0, i32 0), i32 (%struct.ref_s*)* @zxor }, %struct.op_def zeroinitializer], align 16
@.str.651 = private unnamed_addr constant [5 x i8] c"2and\00", align 1
@.str.1.652 = private unnamed_addr constant [10 x i8] c"2bitshift\00", align 1
@.str.2.653 = private unnamed_addr constant [4 x i8] c"2eq\00", align 1
@.str.3.654 = private unnamed_addr constant [4 x i8] c"2ge\00", align 1
@.str.4.655 = private unnamed_addr constant [4 x i8] c"2gt\00", align 1
@.str.5.656 = private unnamed_addr constant [4 x i8] c"2le\00", align 1
@.str.6.657 = private unnamed_addr constant [4 x i8] c"2lt\00", align 1
@.str.7.658 = private unnamed_addr constant [5 x i8] c"2max\00", align 1
@.str.8.659 = private unnamed_addr constant [5 x i8] c"2min\00", align 1
@.str.9.660 = private unnamed_addr constant [4 x i8] c"2ne\00", align 1
@.str.10.661 = private unnamed_addr constant [5 x i8] c"1not\00", align 1
@.str.11.662 = private unnamed_addr constant [4 x i8] c"2or\00", align 1
@.str.12.663 = private unnamed_addr constant [5 x i8] c"2xor\00", align 1
@zstack_op_init.my_defs = internal global [10 x %struct.op_def] [%struct.op_def { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.674, i32 0, i32 0), i32 (%struct.ref_s*)* @zclear_stack }, %struct.op_def { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1.675, i32 0, i32 0), i32 (%struct.ref_s*)* @zcleartomark }, %struct.op_def { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2.676, i32 0, i32 0), i32 (%struct.ref_s*)* @zcount }, %struct.op_def { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3.677, i32 0, i32 0), i32 (%struct.ref_s*)* @zcounttomark }, %struct.op_def { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.678, i32 0, i32 0), i32 (%struct.ref_s*)* @zdup }, %struct.op_def { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5.679, i32 0, i32 0), i32 (%struct.ref_s*)* @zexch }, %struct.op_def { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6.680, i32 0, i32 0), i32 (%struct.ref_s*)* @zindex }, %struct.op_def { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7.681, i32 0, i32 0), i32 (%struct.ref_s*)* @zpop }, %struct.op_def { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8.682, i32 0, i32 0), i32 (%struct.ref_s*)* @zroll }, %struct.op_def zeroinitializer], align 16
@.str.674 = private unnamed_addr constant [7 x i8] c"0clear\00", align 1
@.str.1.675 = private unnamed_addr constant [13 x i8] c"0cleartomark\00", align 1
@.str.2.676 = private unnamed_addr constant [7 x i8] c"0count\00", align 1
@.str.3.677 = private unnamed_addr constant [13 x i8] c"0counttomark\00", align 1
@.str.4.678 = private unnamed_addr constant [5 x i8] c"1dup\00", align 1
@.str.5.679 = private unnamed_addr constant [6 x i8] c"2exch\00", align 1
@.str.6.680 = private unnamed_addr constant [7 x i8] c"2index\00", align 1
@.str.7.681 = private unnamed_addr constant [5 x i8] c"1pop\00", align 1
@.str.8.682 = private unnamed_addr constant [6 x i8] c"2roll\00", align 1
@.str.683 = private unnamed_addr constant [7 x i8] c"string\00", align 1
@zstring_op_init.my_defs = internal global [5 x %struct.op_def] [%struct.op_def { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.686, i32 0, i32 0), i32 (%struct.ref_s*)* @zanchorsearch }, %struct.op_def { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2.687, i32 0, i32 0), i32 (%struct.ref_s*)* @zsearch }, %struct.op_def { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3.688, i32 0, i32 0), i32 (%struct.ref_s*)* @zstring }, %struct.op_def { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4.689, i32 0, i32 0), i32 (%struct.ref_s*)* @ztoken }, %struct.op_def zeroinitializer], align 16
@.str.1.686 = private unnamed_addr constant [14 x i8] c"2anchorsearch\00", align 1
@.str.2.687 = private unnamed_addr constant [8 x i8] c"2search\00", align 1
@.str.3.688 = private unnamed_addr constant [8 x i8] c"1string\00", align 1
@.str.4.689 = private unnamed_addr constant [7 x i8] c"1token\00", align 1
@.str.692 = private unnamed_addr constant [5 x i8] c"true\00", align 1
@.str.1.693 = private unnamed_addr constant [6 x i8] c"false\00", align 1
@.str.2.694 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@.str.3.695 = private unnamed_addr constant [13 x i8] c"operator %lx\00", align 1
@.str.4.696 = private unnamed_addr constant [3 x i8] c"%g\00", align 1
@.str.5.697 = private unnamed_addr constant [16 x i8] c"--nostringval--\00", align 1
@ztype_op_init.my_defs = internal global [15 x %struct.op_def] [%struct.op_def { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.700, i32 0, i32 0), i32 (%struct.ref_s*)* @zcvi }, %struct.op_def { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7.701, i32 0, i32 0), i32 (%struct.ref_s*)* @zcvlit }, %struct.op_def { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8.702, i32 0, i32 0), i32 (%struct.ref_s*)* @zcvn }, %struct.op_def { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9.703, i32 0, i32 0), i32 (%struct.ref_s*)* @zcvr }, %struct.op_def { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10.704, i32 0, i32 0), i32 (%struct.ref_s*)* @zcvrs }, %struct.op_def { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11.705, i32 0, i32 0), i32 (%struct.ref_s*)* @zcvs }, %struct.op_def { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12.706, i32 0, i32 0), i32 (%struct.ref_s*)* @zcvx }, %struct.op_def { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.13.707, i32 0, i32 0), i32 (%struct.ref_s*)* @zexecuteonly }, %struct.op_def { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14.708, i32 0, i32 0), i32 (%struct.ref_s*)* @znoaccess }, %struct.op_def { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15.709, i32 0, i32 0), i32 (%struct.ref_s*)* @zrcheck }, %struct.op_def { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.16.710, i32 0, i32 0), i32 (%struct.ref_s*)* @zreadonly }, %struct.op_def { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.17.711, i32 0, i32 0), i32 (%struct.ref_s*)* @ztypenumber }, %struct.op_def { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.18.712, i32 0, i32 0), i32 (%struct.ref_s*)* @zwcheck }, %struct.op_def { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.19.713, i32 0, i32 0), i32 (%struct.ref_s*)* @zxcheck }, %struct.op_def zeroinitializer], align 16
@.str.6.700 = private unnamed_addr constant [5 x i8] c"1cvi\00", align 1
@.str.7.701 = private unnamed_addr constant [7 x i8] c"1cvlit\00", align 1
@.str.8.702 = private unnamed_addr constant [5 x i8] c"1cvn\00", align 1
@.str.9.703 = private unnamed_addr constant [5 x i8] c"1cvr\00", align 1
@.str.10.704 = private unnamed_addr constant [6 x i8] c"3cvrs\00", align 1
@.str.11.705 = private unnamed_addr constant [5 x i8] c"2cvs\00", align 1
@.str.12.706 = private unnamed_addr constant [5 x i8] c"1cvx\00", align 1
@.str.13.707 = private unnamed_addr constant [13 x i8] c"1executeonly\00", align 1
@.str.14.708 = private unnamed_addr constant [10 x i8] c"1noaccess\00", align 1
@.str.15.709 = private unnamed_addr constant [8 x i8] c"1rcheck\00", align 1
@.str.16.710 = private unnamed_addr constant [10 x i8] c"1readonly\00", align 1
@.str.17.711 = private unnamed_addr constant [13 x i8] c"1.typenumber\00", align 1
@.str.18.712 = private unnamed_addr constant [8 x i8] c"1wcheck\00", align 1
@.str.19.713 = private unnamed_addr constant [8 x i8] c"1xcheck\00", align 1
@.str.714 = private unnamed_addr constant [6 x i8] c"zsave\00", align 1
@.str.1.715 = private unnamed_addr constant [9 x i8] c"zrestore\00", align 1
@zvmem_op_init.my_defs = internal global [4 x %struct.op_def] [%struct.op_def { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2.718, i32 0, i32 0), i32 (%struct.ref_s*)* @zrestore }, %struct.op_def { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.719, i32 0, i32 0), i32 (%struct.ref_s*)* @zsave }, %struct.op_def { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4.720, i32 0, i32 0), i32 (%struct.ref_s*)* @zvmstatus }, %struct.op_def zeroinitializer], align 16
@.str.2.718 = private unnamed_addr constant [9 x i8] c"1restore\00", align 1
@.str.3.719 = private unnamed_addr constant [6 x i8] c"0save\00", align 1
@.str.4.720 = private unnamed_addr constant [10 x i8] c"0vmstatus\00", align 1

; Function Attrs: noinline nounwind uwtable
define internal i32 @mem_no_fault_proc(%struct.gx_device_memory_s* %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) #0 {
  %7 = alloca %struct.gx_device_memory_s*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store %struct.gx_device_memory_s* %0, %struct.gx_device_memory_s** %7, align 8
  store i32 %1, i32* %8, align 4
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store i32 %4, i32* %11, align 4
  store i32 %5, i32* %12, align 4
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @mem_open(%struct.gx_device_s* %0) #0 {
  %2 = alloca %struct.gx_device_s*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i8**, align 8
  %5 = alloca i8**, align 8
  store %struct.gx_device_s* %0, %struct.gx_device_s** %2, align 8
  %6 = load %struct.gx_device_s*, %struct.gx_device_s** %2, align 8
  %7 = bitcast %struct.gx_device_s* %6 to %struct.gx_device_memory_s*
  %8 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %7, i32 0, i32 13
  %9 = load i8*, i8** %8, align 8
  store i8* %9, i8** %3, align 8
  %10 = load i8*, i8** %3, align 8
  %11 = load %struct.gx_device_s*, %struct.gx_device_s** %2, align 8
  %12 = bitcast %struct.gx_device_s* %11 to %struct.gx_device_memory_s*
  %13 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %12, i32 0, i32 4
  %14 = load i32, i32* %13, align 4
  %15 = sext i32 %14 to i64
  %16 = load %struct.gx_device_s*, %struct.gx_device_s** %2, align 8
  %17 = bitcast %struct.gx_device_s* %16 to %struct.gx_device_memory_s*
  %18 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %17, i32 0, i32 12
  %19 = load i32, i32* %18, align 8
  %20 = sext i32 %19 to i64
  %21 = mul i64 %15, %20
  %22 = getelementptr inbounds i8, i8* %10, i64 %21
  %23 = bitcast i8* %22 to i8**
  store i8** %23, i8*** %4, align 8
  %24 = load i8**, i8*** %4, align 8
  %25 = load %struct.gx_device_s*, %struct.gx_device_s** %2, align 8
  %26 = bitcast %struct.gx_device_s* %25 to %struct.gx_device_memory_s*
  %27 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %26, i32 0, i32 4
  %28 = load i32, i32* %27, align 4
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8*, i8** %24, i64 %29
  store i8** %30, i8*** %5, align 8
  %31 = load i8**, i8*** %4, align 8
  %32 = load %struct.gx_device_s*, %struct.gx_device_s** %2, align 8
  %33 = bitcast %struct.gx_device_s* %32 to %struct.gx_device_memory_s*
  %34 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %33, i32 0, i32 14
  store i8** %31, i8*** %34, align 8
  br label %35

35:                                               ; preds = %39, %1
  %36 = load i8**, i8*** %4, align 8
  %37 = load i8**, i8*** %5, align 8
  %38 = icmp ne i8** %36, %37
  br i1 %38, label %39, label %50

39:                                               ; preds = %35
  %40 = load i8*, i8** %3, align 8
  %41 = load i8**, i8*** %4, align 8
  %42 = getelementptr inbounds i8*, i8** %41, i32 1
  store i8** %42, i8*** %4, align 8
  store i8* %40, i8** %41, align 8
  %43 = load %struct.gx_device_s*, %struct.gx_device_s** %2, align 8
  %44 = bitcast %struct.gx_device_s* %43 to %struct.gx_device_memory_s*
  %45 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %44, i32 0, i32 12
  %46 = load i32, i32* %45, align 8
  %47 = load i8*, i8** %3, align 8
  %48 = sext i32 %46 to i64
  %49 = getelementptr inbounds i8, i8* %47, i64 %48
  store i8* %49, i8** %3, align 8
  br label %35

50:                                               ; preds = %35
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mem_get_initial_matrix(%struct.gx_device_s* %0, %struct.gs_matrix_s* %1) #0 {
  %3 = alloca %struct.gx_device_s*, align 8
  %4 = alloca %struct.gs_matrix_s*, align 8
  store %struct.gx_device_s* %0, %struct.gx_device_s** %3, align 8
  store %struct.gs_matrix_s* %1, %struct.gs_matrix_s** %4, align 8
  %5 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %6 = load %struct.gx_device_s*, %struct.gx_device_s** %3, align 8
  %7 = bitcast %struct.gx_device_s* %6 to %struct.gx_device_memory_s*
  %8 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %7, i32 0, i32 11
  %9 = bitcast %struct.gs_matrix_s* %5 to i8*
  %10 = bitcast %struct.gs_matrix_s* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 96, i1 false)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @mem_mono_fill_rectangle(%struct.gx_device_s* %0, i32 %1, i32 %2, i32 %3, i32 %4, i64 %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca %struct.gx_device_s*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i8, align 1
  %16 = alloca i8, align 1
  %17 = alloca i8**, align 8
  %18 = alloca i8*, align 8
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i8, align 1
  %23 = alloca i32, align 4
  %24 = alloca i8**, align 8
  %25 = alloca i8*, align 8
  %26 = alloca i32, align 4
  %27 = alloca i8**, align 8
  %28 = alloca i8*, align 8
  %29 = alloca i32, align 4
  %30 = alloca i8**, align 8
  %31 = alloca i8*, align 8
  %32 = alloca i32, align 4
  %33 = alloca i8**, align 8
  %34 = alloca i8*, align 8
  %35 = alloca i32, align 4
  %36 = alloca i8**, align 8
  %37 = alloca i8*, align 8
  store %struct.gx_device_s* %0, %struct.gx_device_s** %8, align 8
  store i32 %1, i32* %9, align 4
  store i32 %2, i32* %10, align 4
  store i32 %3, i32* %11, align 4
  store i32 %4, i32* %12, align 4
  store i64 %5, i64* %13, align 8
  %38 = load %struct.gx_device_s*, %struct.gx_device_s** %8, align 8
  %39 = bitcast %struct.gx_device_s* %38 to %struct.gx_device_memory_s*
  %40 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %39, i32 0, i32 15
  %41 = load i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)** %40, align 8
  %42 = icmp ne i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)* %41, @mem_no_fault_proc
  br i1 %42, label %43, label %75

43:                                               ; preds = %6
  %44 = load %struct.gx_device_s*, %struct.gx_device_s** %8, align 8
  %45 = bitcast %struct.gx_device_s* %44 to %struct.gx_device_memory_s*
  %46 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %45, i32 0, i32 15
  %47 = load i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)** %46, align 8
  %48 = load %struct.gx_device_s*, %struct.gx_device_s** %8, align 8
  %49 = bitcast %struct.gx_device_s* %48 to %struct.gx_device_memory_s*
  %50 = load i32, i32* %9, align 4
  %51 = ashr i32 %50, 3
  %52 = load i32, i32* %10, align 4
  %53 = load i32, i32* %9, align 4
  %54 = load i32, i32* %11, align 4
  %55 = add nsw i32 %53, %54
  %56 = add nsw i32 %55, 7
  %57 = ashr i32 %56, 3
  %58 = load i32, i32* %9, align 4
  %59 = ashr i32 %58, 3
  %60 = sub nsw i32 %57, %59
  %61 = load i32, i32* %12, align 4
  %62 = call i32 %47(%struct.gx_device_memory_s* %49, i32 %51, i32 %52, i32 %60, i32 %61, i32 1)
  store i32 %62, i32* %20, align 4
  %63 = load i32, i32* %20, align 4
  %64 = icmp slt i32 %63, 0
  br i1 %64, label %65, label %74

65:                                               ; preds = %43
  %66 = load %struct.gx_device_s*, %struct.gx_device_s** %8, align 8
  %67 = load i32, i32* %9, align 4
  %68 = load i32, i32* %10, align 4
  %69 = load i32, i32* %11, align 4
  %70 = load i32, i32* %12, align 4
  %71 = load i64, i64* %13, align 8
  %72 = load i32, i32* %20, align 4
  %73 = call i32 @mem_fill_recover(%struct.gx_device_s* %66, i32 %67, i32 %68, i32 %69, i32 %70, i64 %71, i32 %72)
  store i32 %73, i32* %7, align 4
  br label %332

74:                                               ; preds = %43
  br label %75

75:                                               ; preds = %74, %6
  %76 = load i32, i32* %11, align 4
  %77 = icmp sle i32 %76, 0
  br i1 %77, label %81, label %78

78:                                               ; preds = %75
  %79 = load i32, i32* %12, align 4
  %80 = icmp sle i32 %79, 0
  br i1 %80, label %81, label %82

81:                                               ; preds = %78, %75
  store i32 0, i32* %7, align 4
  br label %332

82:                                               ; preds = %78
  %83 = load i32, i32* %9, align 4
  %84 = icmp slt i32 %83, 0
  br i1 %84, label %106, label %85

85:                                               ; preds = %82
  %86 = load i32, i32* %9, align 4
  %87 = load %struct.gx_device_s*, %struct.gx_device_s** %8, align 8
  %88 = bitcast %struct.gx_device_s* %87 to %struct.gx_device_memory_s*
  %89 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %88, i32 0, i32 3
  %90 = load i32, i32* %89, align 8
  %91 = load i32, i32* %11, align 4
  %92 = sub nsw i32 %90, %91
  %93 = icmp sgt i32 %86, %92
  br i1 %93, label %106, label %94

94:                                               ; preds = %85
  %95 = load i32, i32* %10, align 4
  %96 = icmp slt i32 %95, 0
  br i1 %96, label %106, label %97

97:                                               ; preds = %94
  %98 = load i32, i32* %10, align 4
  %99 = load %struct.gx_device_s*, %struct.gx_device_s** %8, align 8
  %100 = bitcast %struct.gx_device_s* %99 to %struct.gx_device_memory_s*
  %101 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %100, i32 0, i32 4
  %102 = load i32, i32* %101, align 4
  %103 = load i32, i32* %12, align 4
  %104 = sub nsw i32 %102, %103
  %105 = icmp sgt i32 %98, %104
  br i1 %105, label %106, label %107

106:                                              ; preds = %97, %94, %85, %82
  store i32 -1, i32* %7, align 4
  br label %332

107:                                              ; preds = %97
  %108 = load i32, i32* %9, align 4
  %109 = ashr i32 %108, 3
  %110 = sext i32 %109 to i64
  %111 = trunc i64 %110 to i32
  store i32 %111, i32* %19, align 4
  %112 = load %struct.gx_device_s*, %struct.gx_device_s** %8, align 8
  %113 = bitcast %struct.gx_device_s* %112 to %struct.gx_device_memory_s*
  %114 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %113, i32 0, i32 14
  %115 = load i8**, i8*** %114, align 8
  %116 = load i32, i32* %10, align 4
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds i8*, i8** %115, i64 %117
  store i8** %118, i8*** %17, align 8
  %119 = load i8**, i8*** %17, align 8
  %120 = load i8*, i8** %119, align 8
  %121 = load i32, i32* %19, align 4
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds i8, i8* %120, i64 %122
  store i8* %123, i8** %18, align 8
  %124 = load i64, i64* %13, align 8
  switch i64 %124, label %139 [
    i64 0, label %125
    i64 1, label %131
    i64 -1, label %138
  ]

125:                                              ; preds = %107
  %126 = load %struct.gx_device_s*, %struct.gx_device_s** %8, align 8
  %127 = bitcast %struct.gx_device_s* %126 to %struct.gx_device_memory_s*
  %128 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %127, i32 0, i32 16
  %129 = load i32, i32* %128, align 8
  %130 = trunc i32 %129 to i8
  store i8 %130, i8* %16, align 1
  br label %140

131:                                              ; preds = %107
  %132 = load %struct.gx_device_s*, %struct.gx_device_s** %8, align 8
  %133 = bitcast %struct.gx_device_s* %132 to %struct.gx_device_memory_s*
  %134 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %133, i32 0, i32 16
  %135 = load i32, i32* %134, align 8
  %136 = xor i32 %135, -1
  %137 = trunc i32 %136 to i8
  store i8 %137, i8* %16, align 1
  br label %140

138:                                              ; preds = %107
  store i32 0, i32* %7, align 4
  br label %332

139:                                              ; preds = %107
  store i32 -1, i32* %7, align 4
  br label %332

140:                                              ; preds = %131, %125
  %141 = load i32, i32* %9, align 4
  %142 = and i32 %141, 7
  store i32 %142, i32* %14, align 4
  %143 = load i32, i32* %14, align 4
  %144 = load i32, i32* %11, align 4
  %145 = add i32 %143, %144
  %146 = icmp ule i32 %145, 8
  br i1 %146, label %147, label %154

147:                                              ; preds = %140
  %148 = load i32, i32* %11, align 4
  %149 = ashr i32 255, %148
  %150 = sub nsw i32 255, %149
  %151 = load i32, i32* %14, align 4
  %152 = ashr i32 %150, %151
  %153 = trunc i32 %152 to i8
  store i8 %153, i8* %15, align 1
  br label %267

154:                                              ; preds = %140
  %155 = load i32, i32* %14, align 4
  %156 = icmp ne i32 %155, 0
  br i1 %156, label %157, label %227

157:                                              ; preds = %154
  %158 = load i32, i32* %14, align 4
  %159 = ashr i32 255, %158
  %160 = trunc i32 %159 to i8
  store i8 %160, i8* %22, align 1
  %161 = load i8, i8* %16, align 1
  %162 = icmp ne i8 %161, 0
  br i1 %162, label %163, label %191

163:                                              ; preds = %157
  %164 = load i32, i32* %12, align 4
  store i32 %164, i32* %23, align 4
  %165 = load i8**, i8*** %17, align 8
  store i8** %165, i8*** %24, align 8
  %166 = load i8**, i8*** %24, align 8
  %167 = load i8*, i8** %166, align 8
  %168 = load i32, i32* %19, align 4
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds i8, i8* %167, i64 %169
  store i8* %170, i8** %25, align 8
  br label %171

171:                                              ; preds = %186, %163
  %172 = load i8, i8* %22, align 1
  %173 = zext i8 %172 to i32
  %174 = load i8*, i8** %25, align 8
  %175 = load i8, i8* %174, align 1
  %176 = zext i8 %175 to i32
  %177 = or i32 %176, %173
  %178 = trunc i32 %177 to i8
  store i8 %178, i8* %174, align 1
  %179 = load i8**, i8*** %24, align 8
  %180 = getelementptr inbounds i8*, i8** %179, i32 1
  store i8** %180, i8*** %24, align 8
  %181 = load i8**, i8*** %24, align 8
  %182 = load i8*, i8** %181, align 8
  %183 = load i32, i32* %19, align 4
  %184 = sext i32 %183 to i64
  %185 = getelementptr inbounds i8, i8* %182, i64 %184
  store i8* %185, i8** %25, align 8
  br label %186

186:                                              ; preds = %171
  %187 = load i32, i32* %23, align 4
  %188 = add nsw i32 %187, -1
  store i32 %188, i32* %23, align 4
  %189 = icmp ne i32 %188, 0
  br i1 %189, label %171, label %190

190:                                              ; preds = %186
  br label %220

191:                                              ; preds = %157
  %192 = load i32, i32* %12, align 4
  store i32 %192, i32* %26, align 4
  %193 = load i8**, i8*** %17, align 8
  store i8** %193, i8*** %27, align 8
  %194 = load i8**, i8*** %27, align 8
  %195 = load i8*, i8** %194, align 8
  %196 = load i32, i32* %19, align 4
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds i8, i8* %195, i64 %197
  store i8* %198, i8** %28, align 8
  br label %199

199:                                              ; preds = %215, %191
  %200 = load i8, i8* %22, align 1
  %201 = zext i8 %200 to i32
  %202 = xor i32 %201, -1
  %203 = load i8*, i8** %28, align 8
  %204 = load i8, i8* %203, align 1
  %205 = zext i8 %204 to i32
  %206 = and i32 %205, %202
  %207 = trunc i32 %206 to i8
  store i8 %207, i8* %203, align 1
  %208 = load i8**, i8*** %27, align 8
  %209 = getelementptr inbounds i8*, i8** %208, i32 1
  store i8** %209, i8*** %27, align 8
  %210 = load i8**, i8*** %27, align 8
  %211 = load i8*, i8** %210, align 8
  %212 = load i32, i32* %19, align 4
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds i8, i8* %211, i64 %213
  store i8* %214, i8** %28, align 8
  br label %215

215:                                              ; preds = %199
  %216 = load i32, i32* %26, align 4
  %217 = add nsw i32 %216, -1
  store i32 %217, i32* %26, align 4
  %218 = icmp ne i32 %217, 0
  br i1 %218, label %199, label %219

219:                                              ; preds = %215
  br label %220

220:                                              ; preds = %219, %190
  %221 = load i32, i32* %19, align 4
  %222 = add nsw i32 %221, 1
  store i32 %222, i32* %19, align 4
  %223 = load i32, i32* %14, align 4
  %224 = sub i32 %223, 8
  %225 = load i32, i32* %11, align 4
  %226 = add i32 %225, %224
  store i32 %226, i32* %11, align 4
  br label %227

227:                                              ; preds = %220, %154
  %228 = load i32, i32* %11, align 4
  %229 = and i32 %228, 7
  %230 = ashr i32 255, %229
  %231 = sub nsw i32 255, %230
  %232 = trunc i32 %231 to i8
  store i8 %232, i8* %15, align 1
  %233 = load i32, i32* %11, align 4
  %234 = ashr i32 %233, 3
  store i32 %234, i32* %21, align 4
  %235 = icmp ne i32 %234, 0
  br i1 %235, label %236, label %266

236:                                              ; preds = %227
  %237 = load i32, i32* %12, align 4
  store i32 %237, i32* %29, align 4
  %238 = load i8**, i8*** %17, align 8
  store i8** %238, i8*** %30, align 8
  %239 = load i8**, i8*** %30, align 8
  %240 = load i8*, i8** %239, align 8
  %241 = load i32, i32* %19, align 4
  %242 = sext i32 %241 to i64
  %243 = getelementptr inbounds i8, i8* %240, i64 %242
  store i8* %243, i8** %31, align 8
  br label %244

244:                                              ; preds = %258, %236
  %245 = load i8*, i8** %31, align 8
  %246 = load i8, i8* %16, align 1
  %247 = zext i8 %246 to i32
  %248 = trunc i32 %247 to i8
  %249 = load i32, i32* %21, align 4
  %250 = sext i32 %249 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %245, i8 %248, i64 %250, i1 false)
  %251 = load i8**, i8*** %30, align 8
  %252 = getelementptr inbounds i8*, i8** %251, i32 1
  store i8** %252, i8*** %30, align 8
  %253 = load i8**, i8*** %30, align 8
  %254 = load i8*, i8** %253, align 8
  %255 = load i32, i32* %19, align 4
  %256 = sext i32 %255 to i64
  %257 = getelementptr inbounds i8, i8* %254, i64 %256
  store i8* %257, i8** %31, align 8
  br label %258

258:                                              ; preds = %244
  %259 = load i32, i32* %29, align 4
  %260 = add nsw i32 %259, -1
  store i32 %260, i32* %29, align 4
  %261 = icmp ne i32 %260, 0
  br i1 %261, label %244, label %262

262:                                              ; preds = %258
  %263 = load i32, i32* %21, align 4
  %264 = load i32, i32* %19, align 4
  %265 = add nsw i32 %264, %263
  store i32 %265, i32* %19, align 4
  br label %266

266:                                              ; preds = %262, %227
  br label %267

267:                                              ; preds = %266, %147
  %268 = load i8, i8* %15, align 1
  %269 = icmp ne i8 %268, 0
  br i1 %269, label %270, label %331

270:                                              ; preds = %267
  %271 = load i8, i8* %16, align 1
  %272 = icmp ne i8 %271, 0
  br i1 %272, label %273, label %301

273:                                              ; preds = %270
  %274 = load i32, i32* %12, align 4
  store i32 %274, i32* %32, align 4
  %275 = load i8**, i8*** %17, align 8
  store i8** %275, i8*** %33, align 8
  %276 = load i8**, i8*** %33, align 8
  %277 = load i8*, i8** %276, align 8
  %278 = load i32, i32* %19, align 4
  %279 = sext i32 %278 to i64
  %280 = getelementptr inbounds i8, i8* %277, i64 %279
  store i8* %280, i8** %34, align 8
  br label %281

281:                                              ; preds = %296, %273
  %282 = load i8, i8* %15, align 1
  %283 = zext i8 %282 to i32
  %284 = load i8*, i8** %34, align 8
  %285 = load i8, i8* %284, align 1
  %286 = zext i8 %285 to i32
  %287 = or i32 %286, %283
  %288 = trunc i32 %287 to i8
  store i8 %288, i8* %284, align 1
  %289 = load i8**, i8*** %33, align 8
  %290 = getelementptr inbounds i8*, i8** %289, i32 1
  store i8** %290, i8*** %33, align 8
  %291 = load i8**, i8*** %33, align 8
  %292 = load i8*, i8** %291, align 8
  %293 = load i32, i32* %19, align 4
  %294 = sext i32 %293 to i64
  %295 = getelementptr inbounds i8, i8* %292, i64 %294
  store i8* %295, i8** %34, align 8
  br label %296

296:                                              ; preds = %281
  %297 = load i32, i32* %32, align 4
  %298 = add nsw i32 %297, -1
  store i32 %298, i32* %32, align 4
  %299 = icmp ne i32 %298, 0
  br i1 %299, label %281, label %300

300:                                              ; preds = %296
  br label %330

301:                                              ; preds = %270
  %302 = load i32, i32* %12, align 4
  store i32 %302, i32* %35, align 4
  %303 = load i8**, i8*** %17, align 8
  store i8** %303, i8*** %36, align 8
  %304 = load i8**, i8*** %36, align 8
  %305 = load i8*, i8** %304, align 8
  %306 = load i32, i32* %19, align 4
  %307 = sext i32 %306 to i64
  %308 = getelementptr inbounds i8, i8* %305, i64 %307
  store i8* %308, i8** %37, align 8
  br label %309

309:                                              ; preds = %325, %301
  %310 = load i8, i8* %15, align 1
  %311 = zext i8 %310 to i32
  %312 = xor i32 %311, -1
  %313 = load i8*, i8** %37, align 8
  %314 = load i8, i8* %313, align 1
  %315 = zext i8 %314 to i32
  %316 = and i32 %315, %312
  %317 = trunc i32 %316 to i8
  store i8 %317, i8* %313, align 1
  %318 = load i8**, i8*** %36, align 8
  %319 = getelementptr inbounds i8*, i8** %318, i32 1
  store i8** %319, i8*** %36, align 8
  %320 = load i8**, i8*** %36, align 8
  %321 = load i8*, i8** %320, align 8
  %322 = load i32, i32* %19, align 4
  %323 = sext i32 %322 to i64
  %324 = getelementptr inbounds i8, i8* %321, i64 %323
  store i8* %324, i8** %37, align 8
  br label %325

325:                                              ; preds = %309
  %326 = load i32, i32* %35, align 4
  %327 = add nsw i32 %326, -1
  store i32 %327, i32* %35, align 4
  %328 = icmp ne i32 %327, 0
  br i1 %328, label %309, label %329

329:                                              ; preds = %325
  br label %330

330:                                              ; preds = %329, %300
  br label %331

331:                                              ; preds = %330, %267
  store i32 0, i32* %7, align 4
  br label %332

332:                                              ; preds = %331, %139, %138, %106, %81, %65
  %333 = load i32, i32* %7, align 4
  ret i32 %333
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @mem_mono_copy_mono(%struct.gx_device_s* %0, i8* %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i64 %8, i64 %9) #0 {
  %11 = alloca i32, align 4
  %12 = alloca %struct.gx_device_s*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i8*, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca i8**, align 8
  %31 = alloca i8*, align 8
  %32 = alloca i32, align 4
  %33 = alloca i32, align 4
  %34 = alloca i8*, align 8
  %35 = alloca i32, align 4
  %36 = alloca i8*, align 8
  %37 = alloca i32, align 4
  %38 = alloca i32, align 4
  %39 = alloca i32, align 4
  %40 = alloca i8*, align 8
  %41 = alloca i32, align 4
  %42 = alloca i8*, align 8
  %43 = alloca i32, align 4
  store %struct.gx_device_s* %0, %struct.gx_device_s** %12, align 8
  store i8* %1, i8** %13, align 8
  store i32 %2, i32* %14, align 4
  store i32 %3, i32* %15, align 4
  store i32 %4, i32* %16, align 4
  store i32 %5, i32* %17, align 4
  store i32 %6, i32* %18, align 4
  store i32 %7, i32* %19, align 4
  store i64 %8, i64* %20, align 8
  store i64 %9, i64* %21, align 8
  %44 = load i64, i64* %21, align 8
  %45 = trunc i64 %44 to i32
  %46 = load i64, i64* %20, align 8
  %47 = trunc i64 %46 to i32
  %48 = icmp eq i32 %45, %47
  br i1 %48, label %49, label %57

49:                                               ; preds = %10
  %50 = load %struct.gx_device_s*, %struct.gx_device_s** %12, align 8
  %51 = load i32, i32* %16, align 4
  %52 = load i32, i32* %17, align 4
  %53 = load i32, i32* %18, align 4
  %54 = load i32, i32* %19, align 4
  %55 = load i64, i64* %20, align 8
  %56 = call i32 @mem_mono_fill_rectangle(%struct.gx_device_s* %50, i32 %51, i32 %52, i32 %53, i32 %54, i64 %55)
  store i32 %56, i32* %11, align 4
  br label %504

57:                                               ; preds = %10
  %58 = load %struct.gx_device_s*, %struct.gx_device_s** %12, align 8
  %59 = bitcast %struct.gx_device_s* %58 to %struct.gx_device_memory_s*
  %60 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %59, i32 0, i32 15
  %61 = load i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)** %60, align 8
  %62 = icmp ne i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)* %61, @mem_no_fault_proc
  br i1 %62, label %63, label %99

63:                                               ; preds = %57
  %64 = load %struct.gx_device_s*, %struct.gx_device_s** %12, align 8
  %65 = bitcast %struct.gx_device_s* %64 to %struct.gx_device_memory_s*
  %66 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %65, i32 0, i32 15
  %67 = load i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)** %66, align 8
  %68 = load %struct.gx_device_s*, %struct.gx_device_s** %12, align 8
  %69 = bitcast %struct.gx_device_s* %68 to %struct.gx_device_memory_s*
  %70 = load i32, i32* %16, align 4
  %71 = ashr i32 %70, 3
  %72 = load i32, i32* %17, align 4
  %73 = load i32, i32* %16, align 4
  %74 = load i32, i32* %18, align 4
  %75 = add nsw i32 %73, %74
  %76 = add nsw i32 %75, 7
  %77 = ashr i32 %76, 3
  %78 = load i32, i32* %16, align 4
  %79 = ashr i32 %78, 3
  %80 = sub nsw i32 %77, %79
  %81 = load i32, i32* %19, align 4
  %82 = call i32 %67(%struct.gx_device_memory_s* %69, i32 %71, i32 %72, i32 %80, i32 %81, i32 1)
  store i32 %82, i32* %33, align 4
  %83 = load i32, i32* %33, align 4
  %84 = icmp slt i32 %83, 0
  br i1 %84, label %85, label %98

85:                                               ; preds = %63
  %86 = load %struct.gx_device_s*, %struct.gx_device_s** %12, align 8
  %87 = load i8*, i8** %13, align 8
  %88 = load i32, i32* %14, align 4
  %89 = load i32, i32* %15, align 4
  %90 = load i32, i32* %16, align 4
  %91 = load i32, i32* %17, align 4
  %92 = load i32, i32* %18, align 4
  %93 = load i32, i32* %19, align 4
  %94 = load i64, i64* %20, align 8
  %95 = load i64, i64* %21, align 8
  %96 = load i32, i32* %33, align 4
  %97 = call i32 @mem_copy_mono_recover(%struct.gx_device_s* %86, i8* %87, i32 %88, i32 %89, i32 %90, i32 %91, i32 %92, i32 %93, i64 %94, i64 %95, i32 %96)
  store i32 %97, i32* %11, align 4
  br label %504

98:                                               ; preds = %63
  br label %99

99:                                               ; preds = %98, %57
  %100 = load i32, i32* %18, align 4
  %101 = icmp sle i32 %100, 0
  br i1 %101, label %105, label %102

102:                                              ; preds = %99
  %103 = load i32, i32* %19, align 4
  %104 = icmp sle i32 %103, 0
  br i1 %104, label %105, label %106

105:                                              ; preds = %102, %99
  store i32 0, i32* %11, align 4
  br label %504

106:                                              ; preds = %102
  %107 = load i32, i32* %16, align 4
  %108 = icmp slt i32 %107, 0
  br i1 %108, label %130, label %109

109:                                              ; preds = %106
  %110 = load i32, i32* %16, align 4
  %111 = load %struct.gx_device_s*, %struct.gx_device_s** %12, align 8
  %112 = bitcast %struct.gx_device_s* %111 to %struct.gx_device_memory_s*
  %113 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %112, i32 0, i32 3
  %114 = load i32, i32* %113, align 8
  %115 = load i32, i32* %18, align 4
  %116 = sub nsw i32 %114, %115
  %117 = icmp sgt i32 %110, %116
  br i1 %117, label %130, label %118

118:                                              ; preds = %109
  %119 = load i32, i32* %17, align 4
  %120 = icmp slt i32 %119, 0
  br i1 %120, label %130, label %121

121:                                              ; preds = %118
  %122 = load i32, i32* %17, align 4
  %123 = load %struct.gx_device_s*, %struct.gx_device_s** %12, align 8
  %124 = bitcast %struct.gx_device_s* %123 to %struct.gx_device_memory_s*
  %125 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %124, i32 0, i32 4
  %126 = load i32, i32* %125, align 4
  %127 = load i32, i32* %19, align 4
  %128 = sub nsw i32 %126, %127
  %129 = icmp sgt i32 %122, %128
  br i1 %129, label %130, label %131

130:                                              ; preds = %121, %118, %109, %106
  store i32 -1, i32* %11, align 4
  br label %504

131:                                              ; preds = %121
  %132 = load i32, i32* %16, align 4
  %133 = ashr i32 %132, 3
  %134 = sext i32 %133 to i64
  %135 = trunc i64 %134 to i32
  store i32 %135, i32* %32, align 4
  %136 = load %struct.gx_device_s*, %struct.gx_device_s** %12, align 8
  %137 = bitcast %struct.gx_device_s* %136 to %struct.gx_device_memory_s*
  %138 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %137, i32 0, i32 14
  %139 = load i8**, i8*** %138, align 8
  %140 = load i32, i32* %17, align 4
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds i8*, i8** %139, i64 %141
  store i8** %142, i8*** %30, align 8
  %143 = load i8**, i8*** %30, align 8
  %144 = load i8*, i8** %143, align 8
  %145 = load i32, i32* %32, align 4
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds i8, i8* %144, i64 %146
  store i8* %147, i8** %31, align 8
  %148 = load i8*, i8** %13, align 8
  %149 = load i32, i32* %14, align 4
  %150 = ashr i32 %149, 3
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds i8, i8* %148, i64 %151
  store i8* %152, i8** %22, align 8
  %153 = load i32, i32* %14, align 4
  %154 = and i32 %153, 7
  %155 = sub nsw i32 8, %154
  store i32 %155, i32* %23, align 4
  %156 = load i32, i32* %16, align 4
  %157 = and i32 %156, 7
  %158 = sub nsw i32 8, %157
  store i32 %158, i32* %24, align 4
  %159 = load i32, i32* %24, align 4
  %160 = sub nsw i32 8, %159
  %161 = ashr i32 255, %160
  store i32 %161, i32* %25, align 4
  %162 = load i32, i32* %18, align 4
  %163 = load i32, i32* %24, align 4
  %164 = icmp slt i32 %162, %163
  br i1 %164, label %165, label %171

165:                                              ; preds = %131
  %166 = load i32, i32* %25, align 4
  %167 = load i32, i32* %18, align 4
  %168 = lshr i32 %166, %167
  %169 = load i32, i32* %25, align 4
  %170 = sub i32 %169, %168
  store i32 %170, i32* %25, align 4
  br label %178

171:                                              ; preds = %131
  %172 = load i32, i32* %18, align 4
  %173 = load i32, i32* %24, align 4
  %174 = sub nsw i32 %172, %173
  %175 = and i32 %174, 7
  %176 = ashr i32 255, %175
  %177 = sub nsw i32 255, %176
  store i32 %177, i32* %26, align 4
  br label %178

178:                                              ; preds = %171, %165
  %179 = load %struct.gx_device_s*, %struct.gx_device_s** %12, align 8
  %180 = bitcast %struct.gx_device_s* %179 to %struct.gx_device_memory_s*
  %181 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %180, i32 0, i32 16
  %182 = load i32, i32* %181, align 8
  %183 = icmp ne i32 %182, 0
  br i1 %183, label %184, label %199

184:                                              ; preds = %178
  %185 = load i64, i64* %20, align 8
  %186 = trunc i64 %185 to i32
  %187 = icmp ne i32 %186, -1
  br i1 %187, label %188, label %191

188:                                              ; preds = %184
  %189 = load i64, i64* %20, align 8
  %190 = xor i64 %189, 1
  store i64 %190, i64* %20, align 8
  br label %191

191:                                              ; preds = %188, %184
  %192 = load i64, i64* %21, align 8
  %193 = trunc i64 %192 to i32
  %194 = icmp ne i32 %193, -1
  br i1 %194, label %195, label %198

195:                                              ; preds = %191
  %196 = load i64, i64* %21, align 8
  %197 = xor i64 %196, 1
  store i64 %197, i64* %21, align 8
  br label %198

198:                                              ; preds = %195, %191
  br label %199

199:                                              ; preds = %198, %178
  %200 = load i64, i64* %20, align 8
  %201 = trunc i64 %200 to i32
  %202 = icmp eq i32 %201, 1
  br i1 %202, label %207, label %203

203:                                              ; preds = %199
  %204 = load i64, i64* %21, align 8
  %205 = trunc i64 %204 to i32
  %206 = icmp eq i32 %205, 0
  br label %207

207:                                              ; preds = %203, %199
  %208 = phi i1 [ true, %199 ], [ %206, %203 ]
  %209 = zext i1 %208 to i64
  %210 = select i1 %208, i32 -1, i32 0
  store i32 %210, i32* %27, align 4
  %211 = load i64, i64* %20, align 8
  %212 = trunc i64 %211 to i32
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %218, label %214

214:                                              ; preds = %207
  %215 = load i64, i64* %21, align 8
  %216 = trunc i64 %215 to i32
  %217 = icmp eq i32 %216, 0
  br label %218

218:                                              ; preds = %214, %207
  %219 = phi i1 [ true, %207 ], [ %217, %214 ]
  %220 = zext i1 %219 to i64
  %221 = select i1 %219, i32 0, i32 -1
  store i32 %221, i32* %28, align 4
  %222 = load i64, i64* %20, align 8
  %223 = trunc i64 %222 to i32
  %224 = icmp eq i32 %223, 1
  br i1 %224, label %229, label %225

225:                                              ; preds = %218
  %226 = load i64, i64* %21, align 8
  %227 = trunc i64 %226 to i32
  %228 = icmp eq i32 %227, 1
  br label %229

229:                                              ; preds = %225, %218
  %230 = phi i1 [ true, %218 ], [ %228, %225 ]
  %231 = zext i1 %230 to i64
  %232 = select i1 %230, i32 -1, i32 0
  store i32 %232, i32* %29, align 4
  %233 = load i32, i32* %23, align 4
  %234 = load i32, i32* %24, align 4
  %235 = icmp eq i32 %233, %234
  br i1 %235, label %236, label %340

236:                                              ; preds = %229
  %237 = load i32, i32* %24, align 4
  %238 = load i32, i32* %18, align 4
  %239 = sub nsw i32 %238, %237
  store i32 %239, i32* %18, align 4
  br label %240

240:                                              ; preds = %327, %236
  %241 = load i32, i32* %19, align 4
  %242 = add nsw i32 %241, -1
  store i32 %242, i32* %19, align 4
  %243 = icmp sge i32 %242, 0
  br i1 %243, label %244, label %339

244:                                              ; preds = %240
  %245 = load i8*, i8** %22, align 8
  store i8* %245, i8** %34, align 8
  %246 = load i32, i32* %18, align 4
  store i32 %246, i32* %35, align 4
  %247 = load i8*, i8** %31, align 8
  store i8* %247, i8** %36, align 8
  %248 = load i8*, i8** %34, align 8
  %249 = load i8, i8* %248, align 1
  %250 = zext i8 %249 to i32
  %251 = load i32, i32* %27, align 4
  %252 = xor i32 %250, %251
  store i32 %252, i32* %37, align 4
  %253 = load i32, i32* %37, align 4
  %254 = load i32, i32* %25, align 4
  %255 = xor i32 %254, -1
  %256 = or i32 %253, %255
  %257 = load i32, i32* %28, align 4
  %258 = or i32 %256, %257
  %259 = load i8*, i8** %36, align 8
  %260 = load i8, i8* %259, align 1
  %261 = zext i8 %260 to i32
  %262 = and i32 %258, %261
  %263 = load i32, i32* %37, align 4
  %264 = load i32, i32* %25, align 4
  %265 = and i32 %263, %264
  %266 = load i32, i32* %29, align 4
  %267 = and i32 %265, %266
  %268 = or i32 %262, %267
  %269 = trunc i32 %268 to i8
  %270 = load i8*, i8** %36, align 8
  store i8 %269, i8* %270, align 1
  br label %271

271:                                              ; preds = %275, %244
  %272 = load i32, i32* %35, align 4
  %273 = sub nsw i32 %272, 8
  store i32 %273, i32* %35, align 4
  %274 = icmp sge i32 %273, 0
  br i1 %274, label %275, label %297

275:                                              ; preds = %271
  %276 = load i8*, i8** %34, align 8
  %277 = getelementptr inbounds i8, i8* %276, i32 1
  store i8* %277, i8** %34, align 8
  %278 = load i8, i8* %277, align 1
  %279 = zext i8 %278 to i32
  %280 = load i32, i32* %27, align 4
  %281 = xor i32 %279, %280
  store i32 %281, i32* %37, align 4
  %282 = load i8*, i8** %36, align 8
  %283 = getelementptr inbounds i8, i8* %282, i32 1
  store i8* %283, i8** %36, align 8
  %284 = load i32, i32* %37, align 4
  %285 = load i32, i32* %28, align 4
  %286 = or i32 %284, %285
  %287 = load i8*, i8** %36, align 8
  %288 = load i8, i8* %287, align 1
  %289 = zext i8 %288 to i32
  %290 = and i32 %286, %289
  %291 = load i32, i32* %37, align 4
  %292 = load i32, i32* %29, align 4
  %293 = and i32 %291, %292
  %294 = or i32 %290, %293
  %295 = trunc i32 %294 to i8
  %296 = load i8*, i8** %36, align 8
  store i8 %295, i8* %296, align 1
  br label %271

297:                                              ; preds = %271
  %298 = load i32, i32* %35, align 4
  %299 = icmp sgt i32 %298, -8
  br i1 %299, label %300, label %327

300:                                              ; preds = %297
  %301 = load i8*, i8** %34, align 8
  %302 = getelementptr inbounds i8, i8* %301, i32 1
  store i8* %302, i8** %34, align 8
  %303 = load i8, i8* %302, align 1
  %304 = zext i8 %303 to i32
  %305 = load i32, i32* %27, align 4
  %306 = xor i32 %304, %305
  store i32 %306, i32* %37, align 4
  %307 = load i8*, i8** %36, align 8
  %308 = getelementptr inbounds i8, i8* %307, i32 1
  store i8* %308, i8** %36, align 8
  %309 = load i32, i32* %37, align 4
  %310 = load i32, i32* %26, align 4
  %311 = xor i32 %310, -1
  %312 = or i32 %309, %311
  %313 = load i32, i32* %28, align 4
  %314 = or i32 %312, %313
  %315 = load i8*, i8** %36, align 8
  %316 = load i8, i8* %315, align 1
  %317 = zext i8 %316 to i32
  %318 = and i32 %314, %317
  %319 = load i32, i32* %37, align 4
  %320 = load i32, i32* %26, align 4
  %321 = and i32 %319, %320
  %322 = load i32, i32* %29, align 4
  %323 = and i32 %321, %322
  %324 = or i32 %318, %323
  %325 = trunc i32 %324 to i8
  %326 = load i8*, i8** %36, align 8
  store i8 %325, i8* %326, align 1
  br label %327

327:                                              ; preds = %300, %297
  %328 = load i8**, i8*** %30, align 8
  %329 = getelementptr inbounds i8*, i8** %328, i32 1
  store i8** %329, i8*** %30, align 8
  %330 = load i8**, i8*** %30, align 8
  %331 = load i8*, i8** %330, align 8
  %332 = load i32, i32* %32, align 4
  %333 = sext i32 %332 to i64
  %334 = getelementptr inbounds i8, i8* %331, i64 %333
  store i8* %334, i8** %31, align 8
  %335 = load i8*, i8** %22, align 8
  %336 = load i32, i32* %15, align 4
  %337 = sext i32 %336 to i64
  %338 = getelementptr inbounds i8, i8* %335, i64 %337
  store i8* %338, i8** %22, align 8
  br label %240

339:                                              ; preds = %240
  br label %503

340:                                              ; preds = %229
  %341 = load i32, i32* %23, align 4
  %342 = load i32, i32* %24, align 4
  %343 = sub nsw i32 %341, %342
  %344 = and i32 %343, 7
  store i32 %344, i32* %38, align 4
  %345 = load i32, i32* %38, align 4
  %346 = sub nsw i32 8, %345
  store i32 %346, i32* %39, align 4
  br label %347

347:                                              ; preds = %490, %340
  %348 = load i32, i32* %19, align 4
  %349 = add nsw i32 %348, -1
  store i32 %349, i32* %19, align 4
  %350 = icmp sge i32 %349, 0
  br i1 %350, label %351, label %502

351:                                              ; preds = %347
  %352 = load i8*, i8** %22, align 8
  store i8* %352, i8** %40, align 8
  %353 = load i32, i32* %18, align 4
  store i32 %353, i32* %41, align 4
  %354 = load i8*, i8** %31, align 8
  store i8* %354, i8** %42, align 8
  %355 = load i32, i32* %23, align 4
  %356 = load i32, i32* %24, align 4
  %357 = icmp sge i32 %355, %356
  br i1 %357, label %358, label %364

358:                                              ; preds = %351
  %359 = load i8*, i8** %40, align 8
  %360 = load i8, i8* %359, align 1
  %361 = zext i8 %360 to i32
  %362 = load i32, i32* %38, align 4
  %363 = ashr i32 %361, %362
  store i32 %363, i32* %43, align 4
  br label %383

364:                                              ; preds = %351
  %365 = load i8*, i8** %40, align 8
  %366 = getelementptr inbounds i8, i8* %365, i32 1
  store i8* %366, i8** %40, align 8
  %367 = load i8, i8* %365, align 1
  %368 = zext i8 %367 to i32
  %369 = load i32, i32* %39, align 4
  %370 = shl i32 %368, %369
  store i32 %370, i32* %43, align 4
  %371 = load i32, i32* %41, align 4
  %372 = load i32, i32* %23, align 4
  %373 = icmp sgt i32 %371, %372
  br i1 %373, label %374, label %382

374:                                              ; preds = %364
  %375 = load i8*, i8** %40, align 8
  %376 = load i8, i8* %375, align 1
  %377 = zext i8 %376 to i32
  %378 = load i32, i32* %38, align 4
  %379 = ashr i32 %377, %378
  %380 = load i32, i32* %43, align 4
  %381 = add nsw i32 %380, %379
  store i32 %381, i32* %43, align 4
  br label %382

382:                                              ; preds = %374, %364
  br label %383

383:                                              ; preds = %382, %358
  %384 = load i32, i32* %27, align 4
  %385 = load i32, i32* %43, align 4
  %386 = xor i32 %385, %384
  store i32 %386, i32* %43, align 4
  %387 = load i32, i32* %43, align 4
  %388 = load i32, i32* %25, align 4
  %389 = xor i32 %388, -1
  %390 = or i32 %387, %389
  %391 = load i32, i32* %28, align 4
  %392 = or i32 %390, %391
  %393 = load i8*, i8** %42, align 8
  %394 = load i8, i8* %393, align 1
  %395 = zext i8 %394 to i32
  %396 = and i32 %392, %395
  %397 = load i32, i32* %43, align 4
  %398 = load i32, i32* %25, align 4
  %399 = and i32 %397, %398
  %400 = load i32, i32* %29, align 4
  %401 = and i32 %399, %400
  %402 = or i32 %396, %401
  %403 = trunc i32 %402 to i8
  %404 = load i8*, i8** %42, align 8
  store i8 %403, i8* %404, align 1
  %405 = load i32, i32* %24, align 4
  %406 = load i32, i32* %41, align 4
  %407 = sub nsw i32 %406, %405
  store i32 %407, i32* %41, align 4
  %408 = load i8*, i8** %42, align 8
  %409 = getelementptr inbounds i8, i8* %408, i32 1
  store i8* %409, i8** %42, align 8
  br label %410

410:                                              ; preds = %413, %383
  %411 = load i32, i32* %41, align 4
  %412 = icmp sge i32 %411, 8
  br i1 %412, label %413, label %447

413:                                              ; preds = %410
  %414 = load i8*, i8** %40, align 8
  %415 = getelementptr inbounds i8, i8* %414, i32 1
  store i8* %415, i8** %40, align 8
  %416 = load i8, i8* %414, align 1
  %417 = zext i8 %416 to i32
  %418 = load i32, i32* %39, align 4
  %419 = shl i32 %417, %418
  store i32 %419, i32* %43, align 4
  %420 = load i8*, i8** %40, align 8
  %421 = load i8, i8* %420, align 1
  %422 = zext i8 %421 to i32
  %423 = load i32, i32* %38, align 4
  %424 = ashr i32 %422, %423
  %425 = load i32, i32* %43, align 4
  %426 = add nsw i32 %425, %424
  store i32 %426, i32* %43, align 4
  %427 = load i32, i32* %27, align 4
  %428 = load i32, i32* %43, align 4
  %429 = xor i32 %428, %427
  store i32 %429, i32* %43, align 4
  %430 = load i32, i32* %43, align 4
  %431 = load i32, i32* %28, align 4
  %432 = or i32 %430, %431
  %433 = load i8*, i8** %42, align 8
  %434 = load i8, i8* %433, align 1
  %435 = zext i8 %434 to i32
  %436 = and i32 %432, %435
  %437 = load i32, i32* %43, align 4
  %438 = load i32, i32* %29, align 4
  %439 = and i32 %437, %438
  %440 = or i32 %436, %439
  %441 = trunc i32 %440 to i8
  %442 = load i8*, i8** %42, align 8
  store i8 %441, i8* %442, align 1
  %443 = load i32, i32* %41, align 4
  %444 = sub nsw i32 %443, 8
  store i32 %444, i32* %41, align 4
  %445 = load i8*, i8** %42, align 8
  %446 = getelementptr inbounds i8, i8* %445, i32 1
  store i8* %446, i8** %42, align 8
  br label %410

447:                                              ; preds = %410
  %448 = load i32, i32* %41, align 4
  %449 = icmp sgt i32 %448, 0
  br i1 %449, label %450, label %490

450:                                              ; preds = %447
  %451 = load i8*, i8** %40, align 8
  %452 = getelementptr inbounds i8, i8* %451, i32 1
  store i8* %452, i8** %40, align 8
  %453 = load i8, i8* %451, align 1
  %454 = zext i8 %453 to i32
  %455 = load i32, i32* %39, align 4
  %456 = shl i32 %454, %455
  store i32 %456, i32* %43, align 4
  %457 = load i32, i32* %41, align 4
  %458 = load i32, i32* %38, align 4
  %459 = icmp sgt i32 %457, %458
  br i1 %459, label %460, label %468

460:                                              ; preds = %450
  %461 = load i8*, i8** %40, align 8
  %462 = load i8, i8* %461, align 1
  %463 = zext i8 %462 to i32
  %464 = load i32, i32* %38, align 4
  %465 = ashr i32 %463, %464
  %466 = load i32, i32* %43, align 4
  %467 = add nsw i32 %466, %465
  store i32 %467, i32* %43, align 4
  br label %468

468:                                              ; preds = %460, %450
  %469 = load i32, i32* %27, align 4
  %470 = load i32, i32* %43, align 4
  %471 = xor i32 %470, %469
  store i32 %471, i32* %43, align 4
  %472 = load i32, i32* %43, align 4
  %473 = load i32, i32* %26, align 4
  %474 = xor i32 %473, -1
  %475 = or i32 %472, %474
  %476 = load i32, i32* %28, align 4
  %477 = or i32 %475, %476
  %478 = load i8*, i8** %42, align 8
  %479 = load i8, i8* %478, align 1
  %480 = zext i8 %479 to i32
  %481 = and i32 %477, %480
  %482 = load i32, i32* %43, align 4
  %483 = load i32, i32* %26, align 4
  %484 = and i32 %482, %483
  %485 = load i32, i32* %29, align 4
  %486 = and i32 %484, %485
  %487 = or i32 %481, %486
  %488 = trunc i32 %487 to i8
  %489 = load i8*, i8** %42, align 8
  store i8 %488, i8* %489, align 1
  br label %490

490:                                              ; preds = %468, %447
  %491 = load i8**, i8*** %30, align 8
  %492 = getelementptr inbounds i8*, i8** %491, i32 1
  store i8** %492, i8*** %30, align 8
  %493 = load i8**, i8*** %30, align 8
  %494 = load i8*, i8** %493, align 8
  %495 = load i32, i32* %32, align 4
  %496 = sext i32 %495 to i64
  %497 = getelementptr inbounds i8, i8* %494, i64 %496
  store i8* %497, i8** %31, align 8
  %498 = load i8*, i8** %22, align 8
  %499 = load i32, i32* %15, align 4
  %500 = sext i32 %499 to i64
  %501 = getelementptr inbounds i8, i8* %498, i64 %500
  store i8* %501, i8** %22, align 8
  br label %347

502:                                              ; preds = %347
  br label %503

503:                                              ; preds = %502, %339
  store i32 0, i32* %11, align 4
  br label %504

504:                                              ; preds = %503, %130, %105, %85, %49
  %505 = load i32, i32* %11, align 4
  ret i32 %505
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @mem_mono_copy_color(%struct.gx_device_s* %0, i8* %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7) #0 {
  %9 = alloca %struct.gx_device_s*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  store %struct.gx_device_s* %0, %struct.gx_device_s** %9, align 8
  store i8* %1, i8** %10, align 8
  store i32 %2, i32* %11, align 4
  store i32 %3, i32* %12, align 4
  store i32 %4, i32* %13, align 4
  store i32 %5, i32* %14, align 4
  store i32 %6, i32* %15, align 4
  store i32 %7, i32* %16, align 4
  %17 = load %struct.gx_device_s*, %struct.gx_device_s** %9, align 8
  %18 = load i8*, i8** %10, align 8
  %19 = load i32, i32* %11, align 4
  %20 = load i32, i32* %12, align 4
  %21 = load i32, i32* %13, align 4
  %22 = load i32, i32* %14, align 4
  %23 = load i32, i32* %15, align 4
  %24 = load i32, i32* %16, align 4
  %25 = call i32 @mem_mono_copy_mono(%struct.gx_device_s* %17, i8* %18, i32 %19, i32 %20, i32 %21, i32 %22, i32 %23, i32 %24, i64 0, i64 1)
  ret i32 %25
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @mem_copy_mono_recover(%struct.gx_device_s* %0, i8* %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i64 %8, i64 %9, i32 %10) #0 {
  %12 = alloca i32, align 4
  %13 = alloca %struct.gx_device_s*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  store %struct.gx_device_s* %0, %struct.gx_device_s** %13, align 8
  store i8* %1, i8** %14, align 8
  store i32 %2, i32* %15, align 4
  store i32 %3, i32* %16, align 4
  store i32 %4, i32* %17, align 4
  store i32 %5, i32* %18, align 4
  store i32 %6, i32* %19, align 4
  store i32 %7, i32* %20, align 4
  store i64 %8, i64* %21, align 8
  store i64 %9, i64* %22, align 8
  store i32 %10, i32* %23, align 4
  %28 = load i32, i32* %17, align 4
  store i32 %28, i32* %24, align 4
  %29 = load i32, i32* %19, align 4
  store i32 %29, i32* %25, align 4
  %30 = load i32, i32* %18, align 4
  store i32 %30, i32* %26, align 4
  %31 = load i32, i32* %20, align 4
  store i32 %31, i32* %27, align 4
  %32 = load i32, i32* %23, align 4
  switch i32 %32, label %49 [
    i32 -1, label %33
    i32 -2, label %41
  ]

33:                                               ; preds = %11
  %34 = load i32, i32* %25, align 4
  %35 = ashr i32 %34, 1
  store i32 %35, i32* %25, align 4
  %36 = load i32, i32* %24, align 4
  %37 = add nsw i32 %36, %35
  store i32 %37, i32* %24, align 4
  %38 = load i32, i32* %25, align 4
  %39 = load i32, i32* %19, align 4
  %40 = sub nsw i32 %39, %38
  store i32 %40, i32* %19, align 4
  br label %51

41:                                               ; preds = %11
  %42 = load i32, i32* %27, align 4
  %43 = ashr i32 %42, 1
  store i32 %43, i32* %27, align 4
  %44 = load i32, i32* %26, align 4
  %45 = add nsw i32 %44, %43
  store i32 %45, i32* %26, align 4
  %46 = load i32, i32* %27, align 4
  %47 = load i32, i32* %20, align 4
  %48 = sub nsw i32 %47, %46
  store i32 %48, i32* %20, align 4
  br label %51

49:                                               ; preds = %11
  %50 = load i32, i32* %23, align 4
  store i32 %50, i32* %12, align 4
  br label %84

51:                                               ; preds = %41, %33
  %52 = load %struct.gx_device_s*, %struct.gx_device_s** %13, align 8
  %53 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %52, i32 0, i32 1
  %54 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %53, align 8
  %55 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %54, i32 0, i32 9
  %56 = load i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)** %55, align 8
  %57 = load %struct.gx_device_s*, %struct.gx_device_s** %13, align 8
  %58 = load i8*, i8** %14, align 8
  %59 = load i32, i32* %15, align 4
  %60 = load i32, i32* %16, align 4
  %61 = load i32, i32* %17, align 4
  %62 = load i32, i32* %18, align 4
  %63 = load i32, i32* %19, align 4
  %64 = load i32, i32* %20, align 4
  %65 = load i64, i64* %21, align 8
  %66 = load i64, i64* %22, align 8
  %67 = call i32 %56(%struct.gx_device_s* %57, i8* %58, i32 %59, i32 %60, i32 %61, i32 %62, i32 %63, i32 %64, i64 %65, i64 %66)
  %68 = load %struct.gx_device_s*, %struct.gx_device_s** %13, align 8
  %69 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %68, i32 0, i32 1
  %70 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %69, align 8
  %71 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %70, i32 0, i32 9
  %72 = load i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)** %71, align 8
  %73 = load %struct.gx_device_s*, %struct.gx_device_s** %13, align 8
  %74 = load i8*, i8** %14, align 8
  %75 = load i32, i32* %15, align 4
  %76 = load i32, i32* %16, align 4
  %77 = load i32, i32* %24, align 4
  %78 = load i32, i32* %26, align 4
  %79 = load i32, i32* %25, align 4
  %80 = load i32, i32* %27, align 4
  %81 = load i64, i64* %21, align 8
  %82 = load i64, i64* %22, align 8
  %83 = call i32 %72(%struct.gx_device_s* %73, i8* %74, i32 %75, i32 %76, i32 %77, i32 %78, i32 %79, i32 %80, i64 %81, i64 %82)
  store i32 %83, i32* %12, align 4
  br label %84

84:                                               ; preds = %51, %49
  %85 = load i32, i32* %12, align 4
  ret i32 %85
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @mem_fill_recover(%struct.gx_device_s* %0, i32 %1, i32 %2, i32 %3, i32 %4, i64 %5, i32 %6) #0 {
  %8 = alloca i32, align 4
  %9 = alloca %struct.gx_device_s*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  store %struct.gx_device_s* %0, %struct.gx_device_s** %9, align 8
  store i32 %1, i32* %10, align 4
  store i32 %2, i32* %11, align 4
  store i32 %3, i32* %12, align 4
  store i32 %4, i32* %13, align 4
  store i64 %5, i64* %14, align 8
  store i32 %6, i32* %15, align 4
  %20 = load i32, i32* %10, align 4
  store i32 %20, i32* %16, align 4
  %21 = load i32, i32* %12, align 4
  store i32 %21, i32* %17, align 4
  %22 = load i32, i32* %11, align 4
  store i32 %22, i32* %18, align 4
  %23 = load i32, i32* %13, align 4
  store i32 %23, i32* %19, align 4
  %24 = load i32, i32* %15, align 4
  switch i32 %24, label %41 [
    i32 -1, label %25
    i32 -2, label %33
  ]

25:                                               ; preds = %7
  %26 = load i32, i32* %17, align 4
  %27 = ashr i32 %26, 1
  store i32 %27, i32* %17, align 4
  %28 = load i32, i32* %16, align 4
  %29 = add nsw i32 %28, %27
  store i32 %29, i32* %16, align 4
  %30 = load i32, i32* %17, align 4
  %31 = load i32, i32* %12, align 4
  %32 = sub nsw i32 %31, %30
  store i32 %32, i32* %12, align 4
  br label %43

33:                                               ; preds = %7
  %34 = load i32, i32* %19, align 4
  %35 = ashr i32 %34, 1
  store i32 %35, i32* %19, align 4
  %36 = load i32, i32* %18, align 4
  %37 = add nsw i32 %36, %35
  store i32 %37, i32* %18, align 4
  %38 = load i32, i32* %19, align 4
  %39 = load i32, i32* %13, align 4
  %40 = sub nsw i32 %39, %38
  store i32 %40, i32* %13, align 4
  br label %43

41:                                               ; preds = %7
  %42 = load i32, i32* %15, align 4
  store i32 %42, i32* %8, align 4
  br label %68

43:                                               ; preds = %33, %25
  %44 = load %struct.gx_device_s*, %struct.gx_device_s** %9, align 8
  %45 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %44, i32 0, i32 1
  %46 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %45, align 8
  %47 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %46, i32 0, i32 7
  %48 = load i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)** %47, align 8
  %49 = load %struct.gx_device_s*, %struct.gx_device_s** %9, align 8
  %50 = load i32, i32* %10, align 4
  %51 = load i32, i32* %11, align 4
  %52 = load i32, i32* %12, align 4
  %53 = load i32, i32* %13, align 4
  %54 = load i64, i64* %14, align 8
  %55 = call i32 %48(%struct.gx_device_s* %49, i32 %50, i32 %51, i32 %52, i32 %53, i64 %54)
  %56 = load %struct.gx_device_s*, %struct.gx_device_s** %9, align 8
  %57 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %56, i32 0, i32 1
  %58 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %57, align 8
  %59 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %58, i32 0, i32 7
  %60 = load i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)** %59, align 8
  %61 = load %struct.gx_device_s*, %struct.gx_device_s** %9, align 8
  %62 = load i32, i32* %16, align 4
  %63 = load i32, i32* %18, align 4
  %64 = load i32, i32* %17, align 4
  %65 = load i32, i32* %19, align 4
  %66 = load i64, i64* %14, align 8
  %67 = call i32 %60(%struct.gx_device_s* %61, i32 %62, i32 %63, i32 %64, i32 %65, i64 %66)
  store i32 %67, i32* %8, align 4
  br label %68

68:                                               ; preds = %43, %41
  %69 = load i32, i32* %8, align 4
  ret i32 %69
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noinline nounwind uwtable
define internal i64 @mem_mapped_map_rgb_color(%struct.gx_device_s* %0, i16 zeroext %1, i16 zeroext %2, i16 zeroext %3) #0 {
  %5 = alloca %struct.gx_device_s*, align 8
  %6 = alloca i16, align 2
  %7 = alloca i16, align 2
  %8 = alloca i16, align 2
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  store %struct.gx_device_s* %0, %struct.gx_device_s** %5, align 8
  store i16 %1, i16* %6, align 2
  store i16 %2, i16* %7, align 2
  store i16 %3, i16* %8, align 2
  %16 = load %struct.gx_device_s*, %struct.gx_device_s** %5, align 8
  %17 = bitcast %struct.gx_device_s* %16 to %struct.gx_device_memory_s*
  %18 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %17, i32 0, i32 18
  %19 = load i8*, i8** %18, align 8
  store i8* %19, i8** %9, align 8
  %20 = load %struct.gx_device_s*, %struct.gx_device_s** %5, align 8
  %21 = bitcast %struct.gx_device_s* %20 to %struct.gx_device_memory_s*
  %22 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %21, i32 0, i32 17
  %23 = load i32, i32* %22, align 4
  store i32 %23, i32* %10, align 4
  store i32 768, i32* %12, align 4
  br label %24

24:                                               ; preds = %87, %4
  %25 = load i32, i32* %10, align 4
  %26 = add nsw i32 %25, -1
  store i32 %26, i32* %10, align 4
  %27 = icmp sgt i32 %25, 0
  br i1 %27, label %28, label %90

28:                                               ; preds = %24
  %29 = load i8*, i8** %9, align 8
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = load i16, i16* %6, align 2
  %33 = zext i16 %32 to i32
  %34 = sub nsw i32 %31, %33
  store i32 %34, i32* %13, align 4
  %35 = load i32, i32* %13, align 4
  %36 = icmp slt i32 %35, 0
  br i1 %36, label %37, label %40

37:                                               ; preds = %28
  %38 = load i32, i32* %13, align 4
  %39 = sub nsw i32 0, %38
  store i32 %39, i32* %13, align 4
  br label %40

40:                                               ; preds = %37, %28
  %41 = load i32, i32* %13, align 4
  %42 = load i32, i32* %12, align 4
  %43 = icmp slt i32 %41, %42
  br i1 %43, label %44, label %87

44:                                               ; preds = %40
  %45 = load i8*, i8** %9, align 8
  %46 = getelementptr inbounds i8, i8* %45, i64 1
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = load i16, i16* %7, align 2
  %50 = zext i16 %49 to i32
  %51 = sub nsw i32 %48, %50
  store i32 %51, i32* %14, align 4
  %52 = load i32, i32* %14, align 4
  %53 = icmp slt i32 %52, 0
  br i1 %53, label %54, label %57

54:                                               ; preds = %44
  %55 = load i32, i32* %14, align 4
  %56 = sub nsw i32 0, %55
  store i32 %56, i32* %14, align 4
  br label %57

57:                                               ; preds = %54, %44
  %58 = load i32, i32* %14, align 4
  %59 = load i32, i32* %13, align 4
  %60 = add nsw i32 %59, %58
  store i32 %60, i32* %13, align 4
  %61 = load i32, i32* %12, align 4
  %62 = icmp slt i32 %60, %61
  br i1 %62, label %63, label %86

63:                                               ; preds = %57
  %64 = load i8*, i8** %9, align 8
  %65 = getelementptr inbounds i8, i8* %64, i64 2
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = load i16, i16* %8, align 2
  %69 = zext i16 %68 to i32
  %70 = sub nsw i32 %67, %69
  store i32 %70, i32* %15, align 4
  %71 = load i32, i32* %15, align 4
  %72 = icmp slt i32 %71, 0
  br i1 %72, label %73, label %76

73:                                               ; preds = %63
  %74 = load i32, i32* %15, align 4
  %75 = sub nsw i32 0, %74
  store i32 %75, i32* %15, align 4
  br label %76

76:                                               ; preds = %73, %63
  %77 = load i32, i32* %15, align 4
  %78 = load i32, i32* %13, align 4
  %79 = add nsw i32 %78, %77
  store i32 %79, i32* %13, align 4
  %80 = load i32, i32* %12, align 4
  %81 = icmp slt i32 %79, %80
  br i1 %81, label %82, label %85

82:                                               ; preds = %76
  %83 = load i8*, i8** %9, align 8
  store i8* %83, i8** %11, align 8
  %84 = load i32, i32* %13, align 4
  store i32 %84, i32* %12, align 4
  br label %85

85:                                               ; preds = %82, %76
  br label %86

86:                                               ; preds = %85, %57
  br label %87

87:                                               ; preds = %86, %40
  %88 = load i8*, i8** %9, align 8
  %89 = getelementptr inbounds i8, i8* %88, i64 3
  store i8* %89, i8** %9, align 8
  br label %24

90:                                               ; preds = %24
  %91 = load i8*, i8** %11, align 8
  %92 = load %struct.gx_device_s*, %struct.gx_device_s** %5, align 8
  %93 = bitcast %struct.gx_device_s* %92 to %struct.gx_device_memory_s*
  %94 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %93, i32 0, i32 18
  %95 = load i8*, i8** %94, align 8
  %96 = ptrtoint i8* %91 to i64
  %97 = ptrtoint i8* %95 to i64
  %98 = sub i64 %96, %97
  %99 = sdiv i64 %98, 3
  ret i64 %99
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @mem_mapped_map_color_rgb(%struct.gx_device_s* %0, i64 %1, i16* %2) #0 {
  %4 = alloca %struct.gx_device_s*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i16*, align 8
  %7 = alloca i8*, align 8
  store %struct.gx_device_s* %0, %struct.gx_device_s** %4, align 8
  store i64 %1, i64* %5, align 8
  store i16* %2, i16** %6, align 8
  %8 = load %struct.gx_device_s*, %struct.gx_device_s** %4, align 8
  %9 = bitcast %struct.gx_device_s* %8 to %struct.gx_device_memory_s*
  %10 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %9, i32 0, i32 18
  %11 = load i8*, i8** %10, align 8
  %12 = load i64, i64* %5, align 8
  %13 = trunc i64 %12 to i32
  %14 = mul nsw i32 %13, 3
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds i8, i8* %11, i64 %15
  store i8* %16, i8** %7, align 8
  %17 = load i8*, i8** %7, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 0
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i16
  %21 = load i16*, i16** %6, align 8
  %22 = getelementptr inbounds i16, i16* %21, i64 0
  store i16 %20, i16* %22, align 2
  %23 = load i8*, i8** %7, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i16
  %27 = load i16*, i16** %6, align 8
  %28 = getelementptr inbounds i16, i16* %27, i64 1
  store i16 %26, i16* %28, align 2
  %29 = load i8*, i8** %7, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 2
  %31 = load i8, i8* %30, align 1
  %32 = zext i8 %31 to i16
  %33 = load i16*, i16** %6, align 8
  %34 = getelementptr inbounds i16, i16* %33, i64 2
  store i16 %32, i16* %34, align 2
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @mem_mapped_fill_rectangle(%struct.gx_device_s* %0, i32 %1, i32 %2, i32 %3, i32 %4, i64 %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca %struct.gx_device_s*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i64, align 8
  %14 = alloca i8**, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  store %struct.gx_device_s* %0, %struct.gx_device_s** %8, align 8
  store i32 %1, i32* %9, align 4
  store i32 %2, i32* %10, align 4
  store i32 %3, i32* %11, align 4
  store i32 %4, i32* %12, align 4
  store i64 %5, i64* %13, align 8
  %18 = load %struct.gx_device_s*, %struct.gx_device_s** %8, align 8
  %19 = bitcast %struct.gx_device_s* %18 to %struct.gx_device_memory_s*
  %20 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %19, i32 0, i32 15
  %21 = load i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)** %20, align 8
  %22 = icmp ne i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)* %21, @mem_no_fault_proc
  br i1 %22, label %23, label %47

23:                                               ; preds = %6
  %24 = load %struct.gx_device_s*, %struct.gx_device_s** %8, align 8
  %25 = bitcast %struct.gx_device_s* %24 to %struct.gx_device_memory_s*
  %26 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %25, i32 0, i32 15
  %27 = load i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)** %26, align 8
  %28 = load %struct.gx_device_s*, %struct.gx_device_s** %8, align 8
  %29 = bitcast %struct.gx_device_s* %28 to %struct.gx_device_memory_s*
  %30 = load i32, i32* %9, align 4
  %31 = load i32, i32* %10, align 4
  %32 = load i32, i32* %11, align 4
  %33 = load i32, i32* %12, align 4
  %34 = call i32 %27(%struct.gx_device_memory_s* %29, i32 %30, i32 %31, i32 %32, i32 %33, i32 1)
  store i32 %34, i32* %17, align 4
  %35 = load i32, i32* %17, align 4
  %36 = icmp slt i32 %35, 0
  br i1 %36, label %37, label %46

37:                                               ; preds = %23
  %38 = load %struct.gx_device_s*, %struct.gx_device_s** %8, align 8
  %39 = load i32, i32* %9, align 4
  %40 = load i32, i32* %10, align 4
  %41 = load i32, i32* %11, align 4
  %42 = load i32, i32* %12, align 4
  %43 = load i64, i64* %13, align 8
  %44 = load i32, i32* %17, align 4
  %45 = call i32 @mem_fill_recover(%struct.gx_device_s* %38, i32 %39, i32 %40, i32 %41, i32 %42, i64 %43, i32 %44)
  store i32 %45, i32* %7, align 4
  br label %83

46:                                               ; preds = %23
  br label %47

47:                                               ; preds = %46, %6
  %48 = load i32, i32* %9, align 4
  %49 = sext i32 %48 to i64
  %50 = trunc i64 %49 to i32
  store i32 %50, i32* %16, align 4
  %51 = load %struct.gx_device_s*, %struct.gx_device_s** %8, align 8
  %52 = bitcast %struct.gx_device_s* %51 to %struct.gx_device_memory_s*
  %53 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %52, i32 0, i32 14
  %54 = load i8**, i8*** %53, align 8
  %55 = load i32, i32* %10, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i8*, i8** %54, i64 %56
  store i8** %57, i8*** %14, align 8
  %58 = load i8**, i8*** %14, align 8
  %59 = load i8*, i8** %58, align 8
  %60 = load i32, i32* %16, align 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i8, i8* %59, i64 %61
  store i8* %62, i8** %15, align 8
  br label %63

63:                                               ; preds = %67, %47
  %64 = load i32, i32* %12, align 4
  %65 = add nsw i32 %64, -1
  store i32 %65, i32* %12, align 4
  %66 = icmp sgt i32 %64, 0
  br i1 %66, label %67, label %82

67:                                               ; preds = %63
  %68 = load i8*, i8** %15, align 8
  %69 = load i64, i64* %13, align 8
  %70 = trunc i64 %69 to i8
  %71 = zext i8 %70 to i32
  %72 = trunc i32 %71 to i8
  %73 = load i32, i32* %11, align 4
  %74 = sext i32 %73 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %68, i8 %72, i64 %74, i1 false)
  %75 = load i8**, i8*** %14, align 8
  %76 = getelementptr inbounds i8*, i8** %75, i32 1
  store i8** %76, i8*** %14, align 8
  %77 = load i8**, i8*** %14, align 8
  %78 = load i8*, i8** %77, align 8
  %79 = load i32, i32* %16, align 4
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds i8, i8* %78, i64 %80
  store i8* %81, i8** %15, align 8
  br label %63

82:                                               ; preds = %63
  store i32 0, i32* %7, align 4
  br label %83

83:                                               ; preds = %82, %37
  %84 = load i32, i32* %7, align 4
  ret i32 %84
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @mem_mapped_copy_mono(%struct.gx_device_s* %0, i8* %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i64 %8, i64 %9) #0 {
  %11 = alloca i32, align 4
  %12 = alloca %struct.gx_device_s*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i8*, align 8
  %23 = alloca i32, align 4
  %24 = alloca i8**, align 8
  %25 = alloca i8*, align 8
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i8*, align 8
  %29 = alloca i8*, align 8
  %30 = alloca i32, align 4
  %31 = alloca i32, align 4
  %32 = alloca i32, align 4
  store %struct.gx_device_s* %0, %struct.gx_device_s** %12, align 8
  store i8* %1, i8** %13, align 8
  store i32 %2, i32* %14, align 4
  store i32 %3, i32* %15, align 4
  store i32 %4, i32* %16, align 4
  store i32 %5, i32* %17, align 4
  store i32 %6, i32* %18, align 4
  store i32 %7, i32* %19, align 4
  store i64 %8, i64* %20, align 8
  store i64 %9, i64* %21, align 8
  %33 = load %struct.gx_device_s*, %struct.gx_device_s** %12, align 8
  %34 = bitcast %struct.gx_device_s* %33 to %struct.gx_device_memory_s*
  %35 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %34, i32 0, i32 15
  %36 = load i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)** %35, align 8
  %37 = icmp ne i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)* %36, @mem_no_fault_proc
  br i1 %37, label %38, label %66

38:                                               ; preds = %10
  %39 = load %struct.gx_device_s*, %struct.gx_device_s** %12, align 8
  %40 = bitcast %struct.gx_device_s* %39 to %struct.gx_device_memory_s*
  %41 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %40, i32 0, i32 15
  %42 = load i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)** %41, align 8
  %43 = load %struct.gx_device_s*, %struct.gx_device_s** %12, align 8
  %44 = bitcast %struct.gx_device_s* %43 to %struct.gx_device_memory_s*
  %45 = load i32, i32* %16, align 4
  %46 = load i32, i32* %17, align 4
  %47 = load i32, i32* %18, align 4
  %48 = load i32, i32* %19, align 4
  %49 = call i32 %42(%struct.gx_device_memory_s* %44, i32 %45, i32 %46, i32 %47, i32 %48, i32 1)
  store i32 %49, i32* %27, align 4
  %50 = load i32, i32* %27, align 4
  %51 = icmp slt i32 %50, 0
  br i1 %51, label %52, label %65

52:                                               ; preds = %38
  %53 = load %struct.gx_device_s*, %struct.gx_device_s** %12, align 8
  %54 = load i8*, i8** %13, align 8
  %55 = load i32, i32* %14, align 4
  %56 = load i32, i32* %15, align 4
  %57 = load i32, i32* %16, align 4
  %58 = load i32, i32* %17, align 4
  %59 = load i32, i32* %18, align 4
  %60 = load i32, i32* %19, align 4
  %61 = load i64, i64* %20, align 8
  %62 = load i64, i64* %21, align 8
  %63 = load i32, i32* %27, align 4
  %64 = call i32 @mem_copy_mono_recover(%struct.gx_device_s* %53, i8* %54, i32 %55, i32 %56, i32 %57, i32 %58, i32 %59, i32 %60, i64 %61, i64 %62, i32 %63)
  store i32 %64, i32* %11, align 4
  br label %153

65:                                               ; preds = %38
  br label %66

66:                                               ; preds = %65, %10
  %67 = load i32, i32* %16, align 4
  %68 = sext i32 %67 to i64
  %69 = trunc i64 %68 to i32
  store i32 %69, i32* %26, align 4
  %70 = load %struct.gx_device_s*, %struct.gx_device_s** %12, align 8
  %71 = bitcast %struct.gx_device_s* %70 to %struct.gx_device_memory_s*
  %72 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %71, i32 0, i32 14
  %73 = load i8**, i8*** %72, align 8
  %74 = load i32, i32* %17, align 4
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i8*, i8** %73, i64 %75
  store i8** %76, i8*** %24, align 8
  %77 = load i8**, i8*** %24, align 8
  %78 = load i8*, i8** %77, align 8
  %79 = load i32, i32* %26, align 4
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds i8, i8* %78, i64 %80
  store i8* %81, i8** %25, align 8
  %82 = load i8*, i8** %13, align 8
  %83 = load i32, i32* %14, align 4
  %84 = ashr i32 %83, 3
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i8, i8* %82, i64 %85
  store i8* %86, i8** %22, align 8
  %87 = load i32, i32* %14, align 4
  %88 = and i32 %87, 7
  %89 = ashr i32 128, %88
  store i32 %89, i32* %23, align 4
  br label %90

90:                                               ; preds = %140, %66
  %91 = load i32, i32* %19, align 4
  %92 = add nsw i32 %91, -1
  store i32 %92, i32* %19, align 4
  %93 = icmp sgt i32 %91, 0
  br i1 %93, label %94, label %152

94:                                               ; preds = %90
  %95 = load i8*, i8** %25, align 8
  store i8* %95, i8** %28, align 8
  %96 = load i8*, i8** %22, align 8
  store i8* %96, i8** %29, align 8
  %97 = load i8*, i8** %29, align 8
  %98 = getelementptr inbounds i8, i8* %97, i32 1
  store i8* %98, i8** %29, align 8
  %99 = load i8, i8* %97, align 1
  %100 = zext i8 %99 to i32
  store i32 %100, i32* %30, align 4
  %101 = load i32, i32* %23, align 4
  store i32 %101, i32* %31, align 4
  %102 = load i32, i32* %18, align 4
  store i32 %102, i32* %32, align 4
  br label %103

103:                                              ; preds = %136, %94
  %104 = load i32, i32* %30, align 4
  %105 = load i32, i32* %31, align 4
  %106 = and i32 %104, %105
  %107 = icmp ne i32 %106, 0
  br i1 %107, label %108, label %116

108:                                              ; preds = %103
  %109 = load i64, i64* %21, align 8
  %110 = icmp ne i64 %109, -1
  br i1 %110, label %111, label %115

111:                                              ; preds = %108
  %112 = load i64, i64* %21, align 8
  %113 = trunc i64 %112 to i8
  %114 = load i8*, i8** %28, align 8
  store i8 %113, i8* %114, align 1
  br label %115

115:                                              ; preds = %111, %108
  br label %124

116:                                              ; preds = %103
  %117 = load i64, i64* %20, align 8
  %118 = icmp ne i64 %117, -1
  br i1 %118, label %119, label %123

119:                                              ; preds = %116
  %120 = load i64, i64* %20, align 8
  %121 = trunc i64 %120 to i8
  %122 = load i8*, i8** %28, align 8
  store i8 %121, i8* %122, align 1
  br label %123

123:                                              ; preds = %119, %116
  br label %124

124:                                              ; preds = %123, %115
  %125 = load i32, i32* %31, align 4
  %126 = ashr i32 %125, 1
  store i32 %126, i32* %31, align 4
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %128, label %133

128:                                              ; preds = %124
  store i32 128, i32* %31, align 4
  %129 = load i8*, i8** %29, align 8
  %130 = getelementptr inbounds i8, i8* %129, i32 1
  store i8* %130, i8** %29, align 8
  %131 = load i8, i8* %129, align 1
  %132 = zext i8 %131 to i32
  store i32 %132, i32* %30, align 4
  br label %133

133:                                              ; preds = %128, %124
  %134 = load i8*, i8** %28, align 8
  %135 = getelementptr inbounds i8, i8* %134, i32 1
  store i8* %135, i8** %28, align 8
  br label %136

136:                                              ; preds = %133
  %137 = load i32, i32* %32, align 4
  %138 = add nsw i32 %137, -1
  store i32 %138, i32* %32, align 4
  %139 = icmp sgt i32 %138, 0
  br i1 %139, label %103, label %140

140:                                              ; preds = %136
  %141 = load i32, i32* %15, align 4
  %142 = load i8*, i8** %22, align 8
  %143 = sext i32 %141 to i64
  %144 = getelementptr inbounds i8, i8* %142, i64 %143
  store i8* %144, i8** %22, align 8
  %145 = load i8**, i8*** %24, align 8
  %146 = getelementptr inbounds i8*, i8** %145, i32 1
  store i8** %146, i8*** %24, align 8
  %147 = load i8**, i8*** %24, align 8
  %148 = load i8*, i8** %147, align 8
  %149 = load i32, i32* %26, align 4
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds i8, i8* %148, i64 %150
  store i8* %151, i8** %25, align 8
  br label %90

152:                                              ; preds = %90
  store i32 0, i32* %11, align 4
  br label %153

153:                                              ; preds = %152, %52
  %154 = load i32, i32* %11, align 4
  ret i32 %154
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @mem_mapped_copy_color(%struct.gx_device_s* %0, i8* %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7) #0 {
  %9 = alloca i32, align 4
  %10 = alloca %struct.gx_device_s*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  store %struct.gx_device_s* %0, %struct.gx_device_s** %10, align 8
  store i8* %1, i8** %11, align 8
  store i32 %2, i32* %12, align 4
  store i32 %3, i32* %13, align 4
  store i32 %4, i32* %14, align 4
  store i32 %5, i32* %15, align 4
  store i32 %6, i32* %16, align 4
  store i32 %7, i32* %17, align 4
  %19 = load %struct.gx_device_s*, %struct.gx_device_s** %10, align 8
  %20 = bitcast %struct.gx_device_s* %19 to %struct.gx_device_memory_s*
  %21 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %20, i32 0, i32 15
  %22 = load i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)** %21, align 8
  %23 = icmp ne i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)* %22, @mem_no_fault_proc
  br i1 %23, label %24, label %50

24:                                               ; preds = %8
  %25 = load %struct.gx_device_s*, %struct.gx_device_s** %10, align 8
  %26 = bitcast %struct.gx_device_s* %25 to %struct.gx_device_memory_s*
  %27 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %26, i32 0, i32 15
  %28 = load i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)** %27, align 8
  %29 = load %struct.gx_device_s*, %struct.gx_device_s** %10, align 8
  %30 = bitcast %struct.gx_device_s* %29 to %struct.gx_device_memory_s*
  %31 = load i32, i32* %14, align 4
  %32 = load i32, i32* %15, align 4
  %33 = load i32, i32* %16, align 4
  %34 = load i32, i32* %17, align 4
  %35 = call i32 %28(%struct.gx_device_memory_s* %30, i32 %31, i32 %32, i32 %33, i32 %34, i32 1)
  store i32 %35, i32* %18, align 4
  %36 = load i32, i32* %18, align 4
  %37 = icmp slt i32 %36, 0
  br i1 %37, label %38, label %49

38:                                               ; preds = %24
  %39 = load %struct.gx_device_s*, %struct.gx_device_s** %10, align 8
  %40 = load i8*, i8** %11, align 8
  %41 = load i32, i32* %12, align 4
  %42 = load i32, i32* %13, align 4
  %43 = load i32, i32* %14, align 4
  %44 = load i32, i32* %15, align 4
  %45 = load i32, i32* %16, align 4
  %46 = load i32, i32* %17, align 4
  %47 = load i32, i32* %18, align 4
  %48 = call i32 @mem_copy_color_recover(%struct.gx_device_s* %39, i8* %40, i32 %41, i32 %42, i32 %43, i32 %44, i32 %45, i32 %46, i32 %47)
  store i32 %48, i32* %9, align 4
  br label %94

49:                                               ; preds = %24
  br label %50

50:                                               ; preds = %49, %8
  %51 = load i32, i32* %16, align 4
  %52 = icmp sle i32 %51, 0
  br i1 %52, label %56, label %53

53:                                               ; preds = %50
  %54 = load i32, i32* %17, align 4
  %55 = icmp sle i32 %54, 0
  br i1 %55, label %56, label %57

56:                                               ; preds = %53, %50
  store i32 0, i32* %9, align 4
  br label %94

57:                                               ; preds = %53
  %58 = load i32, i32* %14, align 4
  %59 = icmp slt i32 %58, 0
  br i1 %59, label %81, label %60

60:                                               ; preds = %57
  %61 = load i32, i32* %14, align 4
  %62 = load %struct.gx_device_s*, %struct.gx_device_s** %10, align 8
  %63 = bitcast %struct.gx_device_s* %62 to %struct.gx_device_memory_s*
  %64 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %63, i32 0, i32 3
  %65 = load i32, i32* %64, align 8
  %66 = load i32, i32* %16, align 4
  %67 = sub nsw i32 %65, %66
  %68 = icmp sgt i32 %61, %67
  br i1 %68, label %81, label %69

69:                                               ; preds = %60
  %70 = load i32, i32* %15, align 4
  %71 = icmp slt i32 %70, 0
  br i1 %71, label %81, label %72

72:                                               ; preds = %69
  %73 = load i32, i32* %15, align 4
  %74 = load %struct.gx_device_s*, %struct.gx_device_s** %10, align 8
  %75 = bitcast %struct.gx_device_s* %74 to %struct.gx_device_memory_s*
  %76 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %75, i32 0, i32 4
  %77 = load i32, i32* %76, align 4
  %78 = load i32, i32* %17, align 4
  %79 = sub nsw i32 %77, %78
  %80 = icmp sgt i32 %73, %79
  br i1 %80, label %81, label %82

81:                                               ; preds = %72, %69, %60, %57
  store i32 -1, i32* %9, align 4
  br label %94

82:                                               ; preds = %72
  %83 = load %struct.gx_device_s*, %struct.gx_device_s** %10, align 8
  %84 = load i8*, i8** %11, align 8
  %85 = load i32, i32* %12, align 4
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds i8, i8* %84, i64 %86
  %88 = load i32, i32* %13, align 4
  %89 = load i32, i32* %14, align 4
  %90 = load i32, i32* %15, align 4
  %91 = load i32, i32* %16, align 4
  %92 = load i32, i32* %17, align 4
  %93 = call i32 @copy_byte_rect(%struct.gx_device_s* %83, i8* %87, i32 %88, i32 %89, i32 %90, i32 %91, i32 %92)
  store i32 %93, i32* %9, align 4
  br label %94

94:                                               ; preds = %82, %81, %56, %38
  %95 = load i32, i32* %9, align 4
  ret i32 %95
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @mem_copy_color_recover(%struct.gx_device_s* %0, i8* %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8) #0 {
  %10 = alloca i32, align 4
  %11 = alloca %struct.gx_device_s*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  store %struct.gx_device_s* %0, %struct.gx_device_s** %11, align 8
  store i8* %1, i8** %12, align 8
  store i32 %2, i32* %13, align 4
  store i32 %3, i32* %14, align 4
  store i32 %4, i32* %15, align 4
  store i32 %5, i32* %16, align 4
  store i32 %6, i32* %17, align 4
  store i32 %7, i32* %18, align 4
  store i32 %8, i32* %19, align 4
  %24 = load i32, i32* %15, align 4
  store i32 %24, i32* %20, align 4
  %25 = load i32, i32* %17, align 4
  store i32 %25, i32* %21, align 4
  %26 = load i32, i32* %16, align 4
  store i32 %26, i32* %22, align 4
  %27 = load i32, i32* %18, align 4
  store i32 %27, i32* %23, align 4
  %28 = load i32, i32* %19, align 4
  switch i32 %28, label %45 [
    i32 -1, label %29
    i32 -2, label %37
  ]

29:                                               ; preds = %9
  %30 = load i32, i32* %21, align 4
  %31 = ashr i32 %30, 1
  store i32 %31, i32* %21, align 4
  %32 = load i32, i32* %20, align 4
  %33 = add nsw i32 %32, %31
  store i32 %33, i32* %20, align 4
  %34 = load i32, i32* %21, align 4
  %35 = load i32, i32* %17, align 4
  %36 = sub nsw i32 %35, %34
  store i32 %36, i32* %17, align 4
  br label %47

37:                                               ; preds = %9
  %38 = load i32, i32* %23, align 4
  %39 = ashr i32 %38, 1
  store i32 %39, i32* %23, align 4
  %40 = load i32, i32* %22, align 4
  %41 = add nsw i32 %40, %39
  store i32 %41, i32* %22, align 4
  %42 = load i32, i32* %23, align 4
  %43 = load i32, i32* %18, align 4
  %44 = sub nsw i32 %43, %42
  store i32 %44, i32* %18, align 4
  br label %47

45:                                               ; preds = %9
  %46 = load i32, i32* %19, align 4
  store i32 %46, i32* %10, align 4
  br label %76

47:                                               ; preds = %37, %29
  %48 = load %struct.gx_device_s*, %struct.gx_device_s** %11, align 8
  %49 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %48, i32 0, i32 1
  %50 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %49, align 8
  %51 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %50, i32 0, i32 10
  %52 = load i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32)** %51, align 8
  %53 = load %struct.gx_device_s*, %struct.gx_device_s** %11, align 8
  %54 = load i8*, i8** %12, align 8
  %55 = load i32, i32* %13, align 4
  %56 = load i32, i32* %14, align 4
  %57 = load i32, i32* %15, align 4
  %58 = load i32, i32* %16, align 4
  %59 = load i32, i32* %17, align 4
  %60 = load i32, i32* %18, align 4
  %61 = call i32 %52(%struct.gx_device_s* %53, i8* %54, i32 %55, i32 %56, i32 %57, i32 %58, i32 %59, i32 %60)
  %62 = load %struct.gx_device_s*, %struct.gx_device_s** %11, align 8
  %63 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %62, i32 0, i32 1
  %64 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %63, align 8
  %65 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %64, i32 0, i32 10
  %66 = load i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32)** %65, align 8
  %67 = load %struct.gx_device_s*, %struct.gx_device_s** %11, align 8
  %68 = load i8*, i8** %12, align 8
  %69 = load i32, i32* %13, align 4
  %70 = load i32, i32* %14, align 4
  %71 = load i32, i32* %20, align 4
  %72 = load i32, i32* %22, align 4
  %73 = load i32, i32* %21, align 4
  %74 = load i32, i32* %23, align 4
  %75 = call i32 %66(%struct.gx_device_s* %67, i8* %68, i32 %69, i32 %70, i32 %71, i32 %72, i32 %73, i32 %74)
  store i32 %75, i32* %10, align 4
  br label %76

76:                                               ; preds = %47, %45
  %77 = load i32, i32* %10, align 4
  ret i32 %77
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @copy_byte_rect(%struct.gx_device_s* %0, i8* %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6) #0 {
  %8 = alloca %struct.gx_device_s*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i8**, align 8
  %16 = alloca i8*, align 8
  store %struct.gx_device_s* %0, %struct.gx_device_s** %8, align 8
  store i8* %1, i8** %9, align 8
  store i32 %2, i32* %10, align 4
  store i32 %3, i32* %11, align 4
  store i32 %4, i32* %12, align 4
  store i32 %5, i32* %13, align 4
  store i32 %6, i32* %14, align 4
  %17 = load %struct.gx_device_s*, %struct.gx_device_s** %8, align 8
  %18 = bitcast %struct.gx_device_s* %17 to %struct.gx_device_memory_s*
  %19 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %18, i32 0, i32 14
  %20 = load i8**, i8*** %19, align 8
  %21 = load i32, i32* %12, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i8*, i8** %20, i64 %22
  store i8** %23, i8*** %15, align 8
  %24 = load i8**, i8*** %15, align 8
  %25 = load i8*, i8** %24, align 8
  %26 = load i32, i32* %11, align 4
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i8, i8* %25, i64 %27
  store i8* %28, i8** %16, align 8
  br label %29

29:                                               ; preds = %33, %7
  %30 = load i32, i32* %14, align 4
  %31 = add nsw i32 %30, -1
  store i32 %31, i32* %14, align 4
  %32 = icmp sgt i32 %30, 0
  br i1 %32, label %33, label %49

33:                                               ; preds = %29
  %34 = load i8*, i8** %16, align 8
  %35 = load i8*, i8** %9, align 8
  %36 = load i32, i32* %13, align 4
  %37 = sext i32 %36 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %34, i8* align 1 %35, i64 %37, i1 false)
  %38 = load i32, i32* %10, align 4
  %39 = load i8*, i8** %9, align 8
  %40 = sext i32 %38 to i64
  %41 = getelementptr inbounds i8, i8* %39, i64 %40
  store i8* %41, i8** %9, align 8
  %42 = load i8**, i8*** %15, align 8
  %43 = getelementptr inbounds i8*, i8** %42, i32 1
  store i8** %43, i8*** %15, align 8
  %44 = load i8**, i8*** %15, align 8
  %45 = load i8*, i8** %44, align 8
  %46 = load i32, i32* %11, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i8, i8* %45, i64 %47
  store i8* %48, i8** %16, align 8
  br label %29

49:                                               ; preds = %29
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @mem_true_map_rgb_color(%struct.gx_device_s* %0, i16 zeroext %1, i16 zeroext %2, i16 zeroext %3) #0 {
  %5 = alloca %struct.gx_device_s*, align 8
  %6 = alloca i16, align 2
  %7 = alloca i16, align 2
  %8 = alloca i16, align 2
  %9 = alloca i64, align 8
  store %struct.gx_device_s* %0, %struct.gx_device_s** %5, align 8
  store i16 %1, i16* %6, align 2
  store i16 %2, i16* %7, align 2
  store i16 %3, i16* %8, align 2
  store i64 0, i64* %9, align 8
  %10 = load i16, i16* %6, align 2
  %11 = trunc i16 %10 to i8
  %12 = bitcast i64* %9 to i8*
  %13 = getelementptr inbounds i8, i8* %12, i64 1
  store i8 %11, i8* %13, align 1
  %14 = load i16, i16* %7, align 2
  %15 = trunc i16 %14 to i8
  %16 = bitcast i64* %9 to i8*
  %17 = getelementptr inbounds i8, i8* %16, i64 2
  store i8 %15, i8* %17, align 2
  %18 = load i16, i16* %8, align 2
  %19 = trunc i16 %18 to i8
  %20 = bitcast i64* %9 to i8*
  %21 = getelementptr inbounds i8, i8* %20, i64 3
  store i8 %19, i8* %21, align 1
  %22 = load i64, i64* %9, align 8
  ret i64 %22
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @mem_true_map_color_rgb(%struct.gx_device_s* %0, i64 %1, i16* %2) #0 {
  %4 = alloca %struct.gx_device_s*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i16*, align 8
  store %struct.gx_device_s* %0, %struct.gx_device_s** %4, align 8
  store i64 %1, i64* %5, align 8
  store i16* %2, i16** %6, align 8
  %7 = bitcast i64* %5 to i8*
  %8 = getelementptr inbounds i8, i8* %7, i64 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i16
  %11 = load i16*, i16** %6, align 8
  %12 = getelementptr inbounds i16, i16* %11, i64 0
  store i16 %10, i16* %12, align 2
  %13 = bitcast i64* %5 to i8*
  %14 = getelementptr inbounds i8, i8* %13, i64 2
  %15 = load i8, i8* %14, align 2
  %16 = zext i8 %15 to i16
  %17 = load i16*, i16** %6, align 8
  %18 = getelementptr inbounds i16, i16* %17, i64 1
  store i16 %16, i16* %18, align 2
  %19 = bitcast i64* %5 to i8*
  %20 = getelementptr inbounds i8, i8* %19, i64 3
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i16
  %23 = load i16*, i16** %6, align 8
  %24 = getelementptr inbounds i16, i16* %23, i64 2
  store i16 %22, i16* %24, align 2
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @mem_true24_fill_rectangle(%struct.gx_device_s* %0, i32 %1, i32 %2, i32 %3, i32 %4, i64 %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca %struct.gx_device_s*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i64, align 8
  %14 = alloca i8, align 1
  %15 = alloca i8, align 1
  %16 = alloca i8, align 1
  %17 = alloca i8**, align 8
  %18 = alloca i8*, align 8
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i8*, align 8
  store %struct.gx_device_s* %0, %struct.gx_device_s** %8, align 8
  store i32 %1, i32* %9, align 4
  store i32 %2, i32* %10, align 4
  store i32 %3, i32* %11, align 4
  store i32 %4, i32* %12, align 4
  store i64 %5, i64* %13, align 8
  %23 = bitcast i64* %13 to i8*
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  %25 = load i8, i8* %24, align 1
  store i8 %25, i8* %14, align 1
  %26 = bitcast i64* %13 to i8*
  %27 = getelementptr inbounds i8, i8* %26, i64 2
  %28 = load i8, i8* %27, align 2
  store i8 %28, i8* %15, align 1
  %29 = bitcast i64* %13 to i8*
  %30 = getelementptr inbounds i8, i8* %29, i64 3
  %31 = load i8, i8* %30, align 1
  store i8 %31, i8* %16, align 1
  %32 = load %struct.gx_device_s*, %struct.gx_device_s** %8, align 8
  %33 = bitcast %struct.gx_device_s* %32 to %struct.gx_device_memory_s*
  %34 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %33, i32 0, i32 15
  %35 = load i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)** %34, align 8
  %36 = icmp ne i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)* %35, @mem_no_fault_proc
  br i1 %36, label %37, label %63

37:                                               ; preds = %6
  %38 = load %struct.gx_device_s*, %struct.gx_device_s** %8, align 8
  %39 = bitcast %struct.gx_device_s* %38 to %struct.gx_device_memory_s*
  %40 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %39, i32 0, i32 15
  %41 = load i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)** %40, align 8
  %42 = load %struct.gx_device_s*, %struct.gx_device_s** %8, align 8
  %43 = bitcast %struct.gx_device_s* %42 to %struct.gx_device_memory_s*
  %44 = load i32, i32* %9, align 4
  %45 = mul nsw i32 %44, 3
  %46 = load i32, i32* %10, align 4
  %47 = load i32, i32* %11, align 4
  %48 = mul nsw i32 %47, 3
  %49 = load i32, i32* %12, align 4
  %50 = call i32 %41(%struct.gx_device_memory_s* %43, i32 %45, i32 %46, i32 %48, i32 %49, i32 1)
  store i32 %50, i32* %20, align 4
  %51 = load i32, i32* %20, align 4
  %52 = icmp slt i32 %51, 0
  br i1 %52, label %53, label %62

53:                                               ; preds = %37
  %54 = load %struct.gx_device_s*, %struct.gx_device_s** %8, align 8
  %55 = load i32, i32* %9, align 4
  %56 = load i32, i32* %10, align 4
  %57 = load i32, i32* %11, align 4
  %58 = load i32, i32* %12, align 4
  %59 = load i64, i64* %13, align 8
  %60 = load i32, i32* %20, align 4
  %61 = call i32 @mem_fill_recover(%struct.gx_device_s* %54, i32 %55, i32 %56, i32 %57, i32 %58, i64 %59, i32 %60)
  store i32 %61, i32* %7, align 4
  br label %110

62:                                               ; preds = %37
  br label %63

63:                                               ; preds = %62, %6
  %64 = load i32, i32* %9, align 4
  %65 = mul nsw i32 %64, 3
  %66 = sext i32 %65 to i64
  %67 = trunc i64 %66 to i32
  store i32 %67, i32* %19, align 4
  %68 = load %struct.gx_device_s*, %struct.gx_device_s** %8, align 8
  %69 = bitcast %struct.gx_device_s* %68 to %struct.gx_device_memory_s*
  %70 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %69, i32 0, i32 14
  %71 = load i8**, i8*** %70, align 8
  %72 = load i32, i32* %10, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i8*, i8** %71, i64 %73
  store i8** %74, i8*** %17, align 8
  %75 = load i8**, i8*** %17, align 8
  %76 = load i8*, i8** %75, align 8
  %77 = load i32, i32* %19, align 4
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds i8, i8* %76, i64 %78
  store i8* %79, i8** %18, align 8
  br label %80

80:                                               ; preds = %101, %63
  %81 = load i32, i32* %12, align 4
  %82 = add nsw i32 %81, -1
  store i32 %82, i32* %12, align 4
  %83 = icmp sgt i32 %81, 0
  br i1 %83, label %84, label %109

84:                                               ; preds = %80
  %85 = load i32, i32* %11, align 4
  store i32 %85, i32* %21, align 4
  %86 = load i8*, i8** %18, align 8
  store i8* %86, i8** %22, align 8
  br label %87

87:                                               ; preds = %97, %84
  %88 = load i8, i8* %14, align 1
  %89 = load i8*, i8** %22, align 8
  %90 = getelementptr inbounds i8, i8* %89, i32 1
  store i8* %90, i8** %22, align 8
  store i8 %88, i8* %89, align 1
  %91 = load i8, i8* %15, align 1
  %92 = load i8*, i8** %22, align 8
  %93 = getelementptr inbounds i8, i8* %92, i32 1
  store i8* %93, i8** %22, align 8
  store i8 %91, i8* %92, align 1
  %94 = load i8, i8* %16, align 1
  %95 = load i8*, i8** %22, align 8
  %96 = getelementptr inbounds i8, i8* %95, i32 1
  store i8* %96, i8** %22, align 8
  store i8 %94, i8* %95, align 1
  br label %97

97:                                               ; preds = %87
  %98 = load i32, i32* %21, align 4
  %99 = add nsw i32 %98, -1
  store i32 %99, i32* %21, align 4
  %100 = icmp sgt i32 %99, 0
  br i1 %100, label %87, label %101

101:                                              ; preds = %97
  %102 = load i8**, i8*** %17, align 8
  %103 = getelementptr inbounds i8*, i8** %102, i32 1
  store i8** %103, i8*** %17, align 8
  %104 = load i8**, i8*** %17, align 8
  %105 = load i8*, i8** %104, align 8
  %106 = load i32, i32* %19, align 4
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i8, i8* %105, i64 %107
  store i8* %108, i8** %18, align 8
  br label %80

109:                                              ; preds = %80
  store i32 0, i32* %7, align 4
  br label %110

110:                                              ; preds = %109, %53
  %111 = load i32, i32* %7, align 4
  ret i32 %111
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @mem_true24_copy_mono(%struct.gx_device_s* %0, i8* %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i64 %8, i64 %9) #0 {
  %11 = alloca i32, align 4
  %12 = alloca %struct.gx_device_s*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i8*, align 8
  %23 = alloca i32, align 4
  %24 = alloca i8, align 1
  %25 = alloca i8, align 1
  %26 = alloca i8, align 1
  %27 = alloca i8, align 1
  %28 = alloca i8, align 1
  %29 = alloca i8, align 1
  %30 = alloca i8**, align 8
  %31 = alloca i8*, align 8
  %32 = alloca i32, align 4
  %33 = alloca i32, align 4
  %34 = alloca i8*, align 8
  %35 = alloca i8*, align 8
  %36 = alloca i32, align 4
  %37 = alloca i32, align 4
  %38 = alloca i32, align 4
  store %struct.gx_device_s* %0, %struct.gx_device_s** %12, align 8
  store i8* %1, i8** %13, align 8
  store i32 %2, i32* %14, align 4
  store i32 %3, i32* %15, align 4
  store i32 %4, i32* %16, align 4
  store i32 %5, i32* %17, align 4
  store i32 %6, i32* %18, align 4
  store i32 %7, i32* %19, align 4
  store i64 %8, i64* %20, align 8
  store i64 %9, i64* %21, align 8
  %39 = bitcast i64* %20 to i8*
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  %41 = load i8, i8* %40, align 1
  store i8 %41, i8* %24, align 1
  %42 = bitcast i64* %20 to i8*
  %43 = getelementptr inbounds i8, i8* %42, i64 2
  %44 = load i8, i8* %43, align 2
  store i8 %44, i8* %25, align 1
  %45 = bitcast i64* %20 to i8*
  %46 = getelementptr inbounds i8, i8* %45, i64 3
  %47 = load i8, i8* %46, align 1
  store i8 %47, i8* %26, align 1
  %48 = bitcast i64* %21 to i8*
  %49 = getelementptr inbounds i8, i8* %48, i64 1
  %50 = load i8, i8* %49, align 1
  store i8 %50, i8* %27, align 1
  %51 = bitcast i64* %21 to i8*
  %52 = getelementptr inbounds i8, i8* %51, i64 2
  %53 = load i8, i8* %52, align 2
  store i8 %53, i8* %28, align 1
  %54 = bitcast i64* %21 to i8*
  %55 = getelementptr inbounds i8, i8* %54, i64 3
  %56 = load i8, i8* %55, align 1
  store i8 %56, i8* %29, align 1
  %57 = load %struct.gx_device_s*, %struct.gx_device_s** %12, align 8
  %58 = bitcast %struct.gx_device_s* %57 to %struct.gx_device_memory_s*
  %59 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %58, i32 0, i32 15
  %60 = load i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)** %59, align 8
  %61 = icmp ne i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)* %60, @mem_no_fault_proc
  br i1 %61, label %62, label %92

62:                                               ; preds = %10
  %63 = load %struct.gx_device_s*, %struct.gx_device_s** %12, align 8
  %64 = bitcast %struct.gx_device_s* %63 to %struct.gx_device_memory_s*
  %65 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %64, i32 0, i32 15
  %66 = load i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)** %65, align 8
  %67 = load %struct.gx_device_s*, %struct.gx_device_s** %12, align 8
  %68 = bitcast %struct.gx_device_s* %67 to %struct.gx_device_memory_s*
  %69 = load i32, i32* %16, align 4
  %70 = mul nsw i32 %69, 3
  %71 = load i32, i32* %17, align 4
  %72 = load i32, i32* %18, align 4
  %73 = mul nsw i32 %72, 3
  %74 = load i32, i32* %19, align 4
  %75 = call i32 %66(%struct.gx_device_memory_s* %68, i32 %70, i32 %71, i32 %73, i32 %74, i32 1)
  store i32 %75, i32* %33, align 4
  %76 = load i32, i32* %33, align 4
  %77 = icmp slt i32 %76, 0
  br i1 %77, label %78, label %91

78:                                               ; preds = %62
  %79 = load %struct.gx_device_s*, %struct.gx_device_s** %12, align 8
  %80 = load i8*, i8** %13, align 8
  %81 = load i32, i32* %14, align 4
  %82 = load i32, i32* %15, align 4
  %83 = load i32, i32* %16, align 4
  %84 = load i32, i32* %17, align 4
  %85 = load i32, i32* %18, align 4
  %86 = load i32, i32* %19, align 4
  %87 = load i64, i64* %20, align 8
  %88 = load i64, i64* %21, align 8
  %89 = load i32, i32* %33, align 4
  %90 = call i32 @mem_copy_mono_recover(%struct.gx_device_s* %79, i8* %80, i32 %81, i32 %82, i32 %83, i32 %84, i32 %85, i32 %86, i64 %87, i64 %88, i32 %89)
  store i32 %90, i32* %11, align 4
  br label %190

91:                                               ; preds = %62
  br label %92

92:                                               ; preds = %91, %10
  %93 = load i32, i32* %16, align 4
  %94 = mul nsw i32 %93, 3
  %95 = sext i32 %94 to i64
  %96 = trunc i64 %95 to i32
  store i32 %96, i32* %32, align 4
  %97 = load %struct.gx_device_s*, %struct.gx_device_s** %12, align 8
  %98 = bitcast %struct.gx_device_s* %97 to %struct.gx_device_memory_s*
  %99 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %98, i32 0, i32 14
  %100 = load i8**, i8*** %99, align 8
  %101 = load i32, i32* %17, align 4
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds i8*, i8** %100, i64 %102
  store i8** %103, i8*** %30, align 8
  %104 = load i8**, i8*** %30, align 8
  %105 = load i8*, i8** %104, align 8
  %106 = load i32, i32* %32, align 4
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i8, i8* %105, i64 %107
  store i8* %108, i8** %31, align 8
  %109 = load i8*, i8** %13, align 8
  %110 = load i32, i32* %14, align 4
  %111 = ashr i32 %110, 3
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds i8, i8* %109, i64 %112
  store i8* %113, i8** %22, align 8
  %114 = load i32, i32* %14, align 4
  %115 = and i32 %114, 7
  %116 = ashr i32 128, %115
  store i32 %116, i32* %23, align 4
  br label %117

117:                                              ; preds = %177, %92
  %118 = load i32, i32* %19, align 4
  %119 = add nsw i32 %118, -1
  store i32 %119, i32* %19, align 4
  %120 = icmp sgt i32 %118, 0
  br i1 %120, label %121, label %189

121:                                              ; preds = %117
  %122 = load i8*, i8** %31, align 8
  store i8* %122, i8** %34, align 8
  %123 = load i8*, i8** %22, align 8
  store i8* %123, i8** %35, align 8
  %124 = load i8*, i8** %35, align 8
  %125 = getelementptr inbounds i8, i8* %124, i32 1
  store i8* %125, i8** %35, align 8
  %126 = load i8, i8* %124, align 1
  %127 = zext i8 %126 to i32
  store i32 %127, i32* %36, align 4
  %128 = load i32, i32* %23, align 4
  store i32 %128, i32* %37, align 4
  %129 = load i32, i32* %18, align 4
  store i32 %129, i32* %38, align 4
  br label %130

130:                                              ; preds = %173, %121
  %131 = load i32, i32* %36, align 4
  %132 = load i32, i32* %37, align 4
  %133 = and i32 %131, %132
  %134 = icmp ne i32 %133, 0
  br i1 %134, label %135, label %149

135:                                              ; preds = %130
  %136 = load i64, i64* %21, align 8
  %137 = icmp ne i64 %136, -1
  br i1 %137, label %138, label %148

138:                                              ; preds = %135
  %139 = load i8, i8* %27, align 1
  %140 = load i8*, i8** %34, align 8
  %141 = getelementptr inbounds i8, i8* %140, i32 1
  store i8* %141, i8** %34, align 8
  store i8 %139, i8* %140, align 1
  %142 = load i8, i8* %28, align 1
  %143 = load i8*, i8** %34, align 8
  %144 = getelementptr inbounds i8, i8* %143, i32 1
  store i8* %144, i8** %34, align 8
  store i8 %142, i8* %143, align 1
  %145 = load i8, i8* %29, align 1
  %146 = load i8*, i8** %34, align 8
  %147 = getelementptr inbounds i8, i8* %146, i32 1
  store i8* %147, i8** %34, align 8
  store i8 %145, i8* %146, align 1
  br label %148

148:                                              ; preds = %138, %135
  br label %163

149:                                              ; preds = %130
  %150 = load i64, i64* %20, align 8
  %151 = icmp ne i64 %150, -1
  br i1 %151, label %152, label %162

152:                                              ; preds = %149
  %153 = load i8, i8* %24, align 1
  %154 = load i8*, i8** %34, align 8
  %155 = getelementptr inbounds i8, i8* %154, i32 1
  store i8* %155, i8** %34, align 8
  store i8 %153, i8* %154, align 1
  %156 = load i8, i8* %25, align 1
  %157 = load i8*, i8** %34, align 8
  %158 = getelementptr inbounds i8, i8* %157, i32 1
  store i8* %158, i8** %34, align 8
  store i8 %156, i8* %157, align 1
  %159 = load i8, i8* %26, align 1
  %160 = load i8*, i8** %34, align 8
  %161 = getelementptr inbounds i8, i8* %160, i32 1
  store i8* %161, i8** %34, align 8
  store i8 %159, i8* %160, align 1
  br label %162

162:                                              ; preds = %152, %149
  br label %163

163:                                              ; preds = %162, %148
  %164 = load i32, i32* %37, align 4
  %165 = ashr i32 %164, 1
  store i32 %165, i32* %37, align 4
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %167, label %172

167:                                              ; preds = %163
  store i32 128, i32* %37, align 4
  %168 = load i8*, i8** %35, align 8
  %169 = getelementptr inbounds i8, i8* %168, i32 1
  store i8* %169, i8** %35, align 8
  %170 = load i8, i8* %168, align 1
  %171 = zext i8 %170 to i32
  store i32 %171, i32* %36, align 4
  br label %172

172:                                              ; preds = %167, %163
  br label %173

173:                                              ; preds = %172
  %174 = load i32, i32* %38, align 4
  %175 = add nsw i32 %174, -1
  store i32 %175, i32* %38, align 4
  %176 = icmp sgt i32 %175, 0
  br i1 %176, label %130, label %177

177:                                              ; preds = %173
  %178 = load i32, i32* %15, align 4
  %179 = load i8*, i8** %22, align 8
  %180 = sext i32 %178 to i64
  %181 = getelementptr inbounds i8, i8* %179, i64 %180
  store i8* %181, i8** %22, align 8
  %182 = load i8**, i8*** %30, align 8
  %183 = getelementptr inbounds i8*, i8** %182, i32 1
  store i8** %183, i8*** %30, align 8
  %184 = load i8**, i8*** %30, align 8
  %185 = load i8*, i8** %184, align 8
  %186 = load i32, i32* %32, align 4
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds i8, i8* %185, i64 %187
  store i8* %188, i8** %31, align 8
  br label %117

189:                                              ; preds = %117
  store i32 0, i32* %11, align 4
  br label %190

190:                                              ; preds = %189, %78
  %191 = load i32, i32* %11, align 4
  ret i32 %191
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @mem_true24_copy_color(%struct.gx_device_s* %0, i8* %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7) #0 {
  %9 = alloca i32, align 4
  %10 = alloca %struct.gx_device_s*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  store %struct.gx_device_s* %0, %struct.gx_device_s** %10, align 8
  store i8* %1, i8** %11, align 8
  store i32 %2, i32* %12, align 4
  store i32 %3, i32* %13, align 4
  store i32 %4, i32* %14, align 4
  store i32 %5, i32* %15, align 4
  store i32 %6, i32* %16, align 4
  store i32 %7, i32* %17, align 4
  %19 = load %struct.gx_device_s*, %struct.gx_device_s** %10, align 8
  %20 = bitcast %struct.gx_device_s* %19 to %struct.gx_device_memory_s*
  %21 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %20, i32 0, i32 15
  %22 = load i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)** %21, align 8
  %23 = icmp ne i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)* %22, @mem_no_fault_proc
  br i1 %23, label %24, label %52

24:                                               ; preds = %8
  %25 = load %struct.gx_device_s*, %struct.gx_device_s** %10, align 8
  %26 = bitcast %struct.gx_device_s* %25 to %struct.gx_device_memory_s*
  %27 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %26, i32 0, i32 15
  %28 = load i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)** %27, align 8
  %29 = load %struct.gx_device_s*, %struct.gx_device_s** %10, align 8
  %30 = bitcast %struct.gx_device_s* %29 to %struct.gx_device_memory_s*
  %31 = load i32, i32* %14, align 4
  %32 = mul nsw i32 %31, 3
  %33 = load i32, i32* %15, align 4
  %34 = load i32, i32* %16, align 4
  %35 = mul nsw i32 %34, 3
  %36 = load i32, i32* %17, align 4
  %37 = call i32 %28(%struct.gx_device_memory_s* %30, i32 %32, i32 %33, i32 %35, i32 %36, i32 1)
  store i32 %37, i32* %18, align 4
  %38 = load i32, i32* %18, align 4
  %39 = icmp slt i32 %38, 0
  br i1 %39, label %40, label %51

40:                                               ; preds = %24
  %41 = load %struct.gx_device_s*, %struct.gx_device_s** %10, align 8
  %42 = load i8*, i8** %11, align 8
  %43 = load i32, i32* %12, align 4
  %44 = load i32, i32* %13, align 4
  %45 = load i32, i32* %14, align 4
  %46 = load i32, i32* %15, align 4
  %47 = load i32, i32* %16, align 4
  %48 = load i32, i32* %17, align 4
  %49 = load i32, i32* %18, align 4
  %50 = call i32 @mem_copy_color_recover(%struct.gx_device_s* %41, i8* %42, i32 %43, i32 %44, i32 %45, i32 %46, i32 %47, i32 %48, i32 %49)
  store i32 %50, i32* %9, align 4
  br label %99

51:                                               ; preds = %24
  br label %52

52:                                               ; preds = %51, %8
  %53 = load i32, i32* %16, align 4
  %54 = icmp sle i32 %53, 0
  br i1 %54, label %58, label %55

55:                                               ; preds = %52
  %56 = load i32, i32* %17, align 4
  %57 = icmp sle i32 %56, 0
  br i1 %57, label %58, label %59

58:                                               ; preds = %55, %52
  store i32 0, i32* %9, align 4
  br label %99

59:                                               ; preds = %55
  %60 = load i32, i32* %14, align 4
  %61 = icmp slt i32 %60, 0
  br i1 %61, label %83, label %62

62:                                               ; preds = %59
  %63 = load i32, i32* %14, align 4
  %64 = load %struct.gx_device_s*, %struct.gx_device_s** %10, align 8
  %65 = bitcast %struct.gx_device_s* %64 to %struct.gx_device_memory_s*
  %66 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %65, i32 0, i32 3
  %67 = load i32, i32* %66, align 8
  %68 = load i32, i32* %16, align 4
  %69 = sub nsw i32 %67, %68
  %70 = icmp sgt i32 %63, %69
  br i1 %70, label %83, label %71

71:                                               ; preds = %62
  %72 = load i32, i32* %15, align 4
  %73 = icmp slt i32 %72, 0
  br i1 %73, label %83, label %74

74:                                               ; preds = %71
  %75 = load i32, i32* %15, align 4
  %76 = load %struct.gx_device_s*, %struct.gx_device_s** %10, align 8
  %77 = bitcast %struct.gx_device_s* %76 to %struct.gx_device_memory_s*
  %78 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %77, i32 0, i32 4
  %79 = load i32, i32* %78, align 4
  %80 = load i32, i32* %17, align 4
  %81 = sub nsw i32 %79, %80
  %82 = icmp sgt i32 %75, %81
  br i1 %82, label %83, label %84

83:                                               ; preds = %74, %71, %62, %59
  store i32 -1, i32* %9, align 4
  br label %99

84:                                               ; preds = %74
  %85 = load %struct.gx_device_s*, %struct.gx_device_s** %10, align 8
  %86 = load i8*, i8** %11, align 8
  %87 = load i32, i32* %12, align 4
  %88 = mul nsw i32 %87, 3
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i8, i8* %86, i64 %89
  %91 = load i32, i32* %13, align 4
  %92 = load i32, i32* %14, align 4
  %93 = mul nsw i32 %92, 3
  %94 = load i32, i32* %15, align 4
  %95 = load i32, i32* %16, align 4
  %96 = mul nsw i32 %95, 3
  %97 = load i32, i32* %17, align 4
  %98 = call i32 @copy_byte_rect(%struct.gx_device_s* %85, i8* %90, i32 %91, i32 %93, i32 %94, i32 %96, i32 %97)
  store i32 %98, i32* %9, align 4
  br label %99

99:                                               ; preds = %84, %83, %58, %40
  %100 = load i32, i32* %9, align 4
  ret i32 %100
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @mem_true32_fill_rectangle(%struct.gx_device_s* %0, i32 %1, i32 %2, i32 %3, i32 %4, i64 %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca %struct.gx_device_s*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i64, align 8
  %14 = alloca i8**, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i64*, align 8
  %19 = alloca i32, align 4
  store %struct.gx_device_s* %0, %struct.gx_device_s** %8, align 8
  store i32 %1, i32* %9, align 4
  store i32 %2, i32* %10, align 4
  store i32 %3, i32* %11, align 4
  store i32 %4, i32* %12, align 4
  store i64 %5, i64* %13, align 8
  %20 = load %struct.gx_device_s*, %struct.gx_device_s** %8, align 8
  %21 = bitcast %struct.gx_device_s* %20 to %struct.gx_device_memory_s*
  %22 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %21, i32 0, i32 15
  %23 = load i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)** %22, align 8
  %24 = icmp ne i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)* %23, @mem_no_fault_proc
  br i1 %24, label %25, label %51

25:                                               ; preds = %6
  %26 = load %struct.gx_device_s*, %struct.gx_device_s** %8, align 8
  %27 = bitcast %struct.gx_device_s* %26 to %struct.gx_device_memory_s*
  %28 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %27, i32 0, i32 15
  %29 = load i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)** %28, align 8
  %30 = load %struct.gx_device_s*, %struct.gx_device_s** %8, align 8
  %31 = bitcast %struct.gx_device_s* %30 to %struct.gx_device_memory_s*
  %32 = load i32, i32* %9, align 4
  %33 = shl i32 %32, 2
  %34 = load i32, i32* %10, align 4
  %35 = load i32, i32* %11, align 4
  %36 = shl i32 %35, 2
  %37 = load i32, i32* %12, align 4
  %38 = call i32 %29(%struct.gx_device_memory_s* %31, i32 %33, i32 %34, i32 %36, i32 %37, i32 1)
  store i32 %38, i32* %17, align 4
  %39 = load i32, i32* %17, align 4
  %40 = icmp slt i32 %39, 0
  br i1 %40, label %41, label %50

41:                                               ; preds = %25
  %42 = load %struct.gx_device_s*, %struct.gx_device_s** %8, align 8
  %43 = load i32, i32* %9, align 4
  %44 = load i32, i32* %10, align 4
  %45 = load i32, i32* %11, align 4
  %46 = load i32, i32* %12, align 4
  %47 = load i64, i64* %13, align 8
  %48 = load i32, i32* %17, align 4
  %49 = call i32 @mem_fill_recover(%struct.gx_device_s* %42, i32 %43, i32 %44, i32 %45, i32 %46, i64 %47, i32 %48)
  store i32 %49, i32* %7, align 4
  br label %93

50:                                               ; preds = %25
  br label %51

51:                                               ; preds = %50, %6
  %52 = load i32, i32* %9, align 4
  %53 = shl i32 %52, 2
  %54 = sext i32 %53 to i64
  %55 = trunc i64 %54 to i32
  store i32 %55, i32* %16, align 4
  %56 = load %struct.gx_device_s*, %struct.gx_device_s** %8, align 8
  %57 = bitcast %struct.gx_device_s* %56 to %struct.gx_device_memory_s*
  %58 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %57, i32 0, i32 14
  %59 = load i8**, i8*** %58, align 8
  %60 = load i32, i32* %10, align 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i8*, i8** %59, i64 %61
  store i8** %62, i8*** %14, align 8
  %63 = load i8**, i8*** %14, align 8
  %64 = load i8*, i8** %63, align 8
  %65 = load i32, i32* %16, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i8, i8* %64, i64 %66
  store i8* %67, i8** %15, align 8
  br label %68

68:                                               ; preds = %84, %51
  %69 = load i32, i32* %12, align 4
  %70 = add nsw i32 %69, -1
  store i32 %70, i32* %12, align 4
  %71 = icmp sgt i32 %69, 0
  br i1 %71, label %72, label %92

72:                                               ; preds = %68
  %73 = load i8*, i8** %15, align 8
  %74 = bitcast i8* %73 to i64*
  store i64* %74, i64** %18, align 8
  %75 = load i32, i32* %11, align 4
  store i32 %75, i32* %19, align 4
  br label %76

76:                                               ; preds = %80, %72
  %77 = load i64, i64* %13, align 8
  %78 = load i64*, i64** %18, align 8
  %79 = getelementptr inbounds i64, i64* %78, i32 1
  store i64* %79, i64** %18, align 8
  store i64 %77, i64* %78, align 8
  br label %80

80:                                               ; preds = %76
  %81 = load i32, i32* %19, align 4
  %82 = add nsw i32 %81, -1
  store i32 %82, i32* %19, align 4
  %83 = icmp sgt i32 %82, 0
  br i1 %83, label %76, label %84

84:                                               ; preds = %80
  %85 = load i8**, i8*** %14, align 8
  %86 = getelementptr inbounds i8*, i8** %85, i32 1
  store i8** %86, i8*** %14, align 8
  %87 = load i8**, i8*** %14, align 8
  %88 = load i8*, i8** %87, align 8
  %89 = load i32, i32* %16, align 4
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds i8, i8* %88, i64 %90
  store i8* %91, i8** %15, align 8
  br label %68

92:                                               ; preds = %68
  store i32 0, i32* %7, align 4
  br label %93

93:                                               ; preds = %92, %41
  %94 = load i32, i32* %7, align 4
  ret i32 %94
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @mem_true32_copy_mono(%struct.gx_device_s* %0, i8* %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i64 %8, i64 %9) #0 {
  %11 = alloca i32, align 4
  %12 = alloca %struct.gx_device_s*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i8*, align 8
  %23 = alloca i32, align 4
  %24 = alloca i8**, align 8
  %25 = alloca i8*, align 8
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i64*, align 8
  %29 = alloca i8*, align 8
  %30 = alloca i32, align 4
  %31 = alloca i32, align 4
  %32 = alloca i32, align 4
  store %struct.gx_device_s* %0, %struct.gx_device_s** %12, align 8
  store i8* %1, i8** %13, align 8
  store i32 %2, i32* %14, align 4
  store i32 %3, i32* %15, align 4
  store i32 %4, i32* %16, align 4
  store i32 %5, i32* %17, align 4
  store i32 %6, i32* %18, align 4
  store i32 %7, i32* %19, align 4
  store i64 %8, i64* %20, align 8
  store i64 %9, i64* %21, align 8
  %33 = load %struct.gx_device_s*, %struct.gx_device_s** %12, align 8
  %34 = bitcast %struct.gx_device_s* %33 to %struct.gx_device_memory_s*
  %35 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %34, i32 0, i32 15
  %36 = load i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)** %35, align 8
  %37 = icmp ne i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)* %36, @mem_no_fault_proc
  br i1 %37, label %38, label %68

38:                                               ; preds = %10
  %39 = load %struct.gx_device_s*, %struct.gx_device_s** %12, align 8
  %40 = bitcast %struct.gx_device_s* %39 to %struct.gx_device_memory_s*
  %41 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %40, i32 0, i32 15
  %42 = load i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)** %41, align 8
  %43 = load %struct.gx_device_s*, %struct.gx_device_s** %12, align 8
  %44 = bitcast %struct.gx_device_s* %43 to %struct.gx_device_memory_s*
  %45 = load i32, i32* %16, align 4
  %46 = shl i32 %45, 2
  %47 = load i32, i32* %17, align 4
  %48 = load i32, i32* %18, align 4
  %49 = shl i32 %48, 2
  %50 = load i32, i32* %19, align 4
  %51 = call i32 %42(%struct.gx_device_memory_s* %44, i32 %46, i32 %47, i32 %49, i32 %50, i32 1)
  store i32 %51, i32* %27, align 4
  %52 = load i32, i32* %27, align 4
  %53 = icmp slt i32 %52, 0
  br i1 %53, label %54, label %67

54:                                               ; preds = %38
  %55 = load %struct.gx_device_s*, %struct.gx_device_s** %12, align 8
  %56 = load i8*, i8** %13, align 8
  %57 = load i32, i32* %14, align 4
  %58 = load i32, i32* %15, align 4
  %59 = load i32, i32* %16, align 4
  %60 = load i32, i32* %17, align 4
  %61 = load i32, i32* %18, align 4
  %62 = load i32, i32* %19, align 4
  %63 = load i64, i64* %20, align 8
  %64 = load i64, i64* %21, align 8
  %65 = load i32, i32* %27, align 4
  %66 = call i32 @mem_copy_mono_recover(%struct.gx_device_s* %55, i8* %56, i32 %57, i32 %58, i32 %59, i32 %60, i32 %61, i32 %62, i64 %63, i64 %64, i32 %65)
  store i32 %66, i32* %11, align 4
  br label %155

67:                                               ; preds = %38
  br label %68

68:                                               ; preds = %67, %10
  %69 = load i32, i32* %16, align 4
  %70 = shl i32 %69, 2
  %71 = sext i32 %70 to i64
  %72 = trunc i64 %71 to i32
  store i32 %72, i32* %26, align 4
  %73 = load %struct.gx_device_s*, %struct.gx_device_s** %12, align 8
  %74 = bitcast %struct.gx_device_s* %73 to %struct.gx_device_memory_s*
  %75 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %74, i32 0, i32 14
  %76 = load i8**, i8*** %75, align 8
  %77 = load i32, i32* %17, align 4
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds i8*, i8** %76, i64 %78
  store i8** %79, i8*** %24, align 8
  %80 = load i8**, i8*** %24, align 8
  %81 = load i8*, i8** %80, align 8
  %82 = load i32, i32* %26, align 4
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds i8, i8* %81, i64 %83
  store i8* %84, i8** %25, align 8
  %85 = load i8*, i8** %13, align 8
  %86 = load i32, i32* %14, align 4
  %87 = ashr i32 %86, 3
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds i8, i8* %85, i64 %88
  store i8* %89, i8** %22, align 8
  %90 = load i32, i32* %14, align 4
  %91 = and i32 %90, 7
  %92 = ashr i32 128, %91
  store i32 %92, i32* %23, align 4
  br label %93

93:                                               ; preds = %142, %68
  %94 = load i32, i32* %19, align 4
  %95 = add nsw i32 %94, -1
  store i32 %95, i32* %19, align 4
  %96 = icmp sgt i32 %94, 0
  br i1 %96, label %97, label %154

97:                                               ; preds = %93
  %98 = load i8*, i8** %25, align 8
  %99 = bitcast i8* %98 to i64*
  store i64* %99, i64** %28, align 8
  %100 = load i8*, i8** %22, align 8
  store i8* %100, i8** %29, align 8
  %101 = load i8*, i8** %29, align 8
  %102 = getelementptr inbounds i8, i8* %101, i32 1
  store i8* %102, i8** %29, align 8
  %103 = load i8, i8* %101, align 1
  %104 = zext i8 %103 to i32
  store i32 %104, i32* %30, align 4
  %105 = load i32, i32* %23, align 4
  store i32 %105, i32* %31, align 4
  %106 = load i32, i32* %18, align 4
  store i32 %106, i32* %32, align 4
  br label %107

107:                                              ; preds = %138, %97
  %108 = load i32, i32* %30, align 4
  %109 = load i32, i32* %31, align 4
  %110 = and i32 %108, %109
  %111 = icmp ne i32 %110, 0
  br i1 %111, label %112, label %119

112:                                              ; preds = %107
  %113 = load i64, i64* %21, align 8
  %114 = icmp ne i64 %113, -1
  br i1 %114, label %115, label %118

115:                                              ; preds = %112
  %116 = load i64, i64* %21, align 8
  %117 = load i64*, i64** %28, align 8
  store i64 %116, i64* %117, align 8
  br label %118

118:                                              ; preds = %115, %112
  br label %126

119:                                              ; preds = %107
  %120 = load i64, i64* %20, align 8
  %121 = icmp ne i64 %120, -1
  br i1 %121, label %122, label %125

122:                                              ; preds = %119
  %123 = load i64, i64* %20, align 8
  %124 = load i64*, i64** %28, align 8
  store i64 %123, i64* %124, align 8
  br label %125

125:                                              ; preds = %122, %119
  br label %126

126:                                              ; preds = %125, %118
  %127 = load i32, i32* %31, align 4
  %128 = ashr i32 %127, 1
  store i32 %128, i32* %31, align 4
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %130, label %135

130:                                              ; preds = %126
  store i32 128, i32* %31, align 4
  %131 = load i8*, i8** %29, align 8
  %132 = getelementptr inbounds i8, i8* %131, i32 1
  store i8* %132, i8** %29, align 8
  %133 = load i8, i8* %131, align 1
  %134 = zext i8 %133 to i32
  store i32 %134, i32* %30, align 4
  br label %135

135:                                              ; preds = %130, %126
  %136 = load i64*, i64** %28, align 8
  %137 = getelementptr inbounds i64, i64* %136, i32 1
  store i64* %137, i64** %28, align 8
  br label %138

138:                                              ; preds = %135
  %139 = load i32, i32* %32, align 4
  %140 = add nsw i32 %139, -1
  store i32 %140, i32* %32, align 4
  %141 = icmp sgt i32 %140, 0
  br i1 %141, label %107, label %142

142:                                              ; preds = %138
  %143 = load i32, i32* %15, align 4
  %144 = load i8*, i8** %22, align 8
  %145 = sext i32 %143 to i64
  %146 = getelementptr inbounds i8, i8* %144, i64 %145
  store i8* %146, i8** %22, align 8
  %147 = load i8**, i8*** %24, align 8
  %148 = getelementptr inbounds i8*, i8** %147, i32 1
  store i8** %148, i8*** %24, align 8
  %149 = load i8**, i8*** %24, align 8
  %150 = load i8*, i8** %149, align 8
  %151 = load i32, i32* %26, align 4
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds i8, i8* %150, i64 %152
  store i8* %153, i8** %25, align 8
  br label %93

154:                                              ; preds = %93
  store i32 0, i32* %11, align 4
  br label %155

155:                                              ; preds = %154, %54
  %156 = load i32, i32* %11, align 4
  ret i32 %156
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @mem_true32_copy_color(%struct.gx_device_s* %0, i8* %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7) #0 {
  %9 = alloca i32, align 4
  %10 = alloca %struct.gx_device_s*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  store %struct.gx_device_s* %0, %struct.gx_device_s** %10, align 8
  store i8* %1, i8** %11, align 8
  store i32 %2, i32* %12, align 4
  store i32 %3, i32* %13, align 4
  store i32 %4, i32* %14, align 4
  store i32 %5, i32* %15, align 4
  store i32 %6, i32* %16, align 4
  store i32 %7, i32* %17, align 4
  %19 = load %struct.gx_device_s*, %struct.gx_device_s** %10, align 8
  %20 = bitcast %struct.gx_device_s* %19 to %struct.gx_device_memory_s*
  %21 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %20, i32 0, i32 15
  %22 = load i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)** %21, align 8
  %23 = icmp ne i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)* %22, @mem_no_fault_proc
  br i1 %23, label %24, label %52

24:                                               ; preds = %8
  %25 = load %struct.gx_device_s*, %struct.gx_device_s** %10, align 8
  %26 = bitcast %struct.gx_device_s* %25 to %struct.gx_device_memory_s*
  %27 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %26, i32 0, i32 15
  %28 = load i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)** %27, align 8
  %29 = load %struct.gx_device_s*, %struct.gx_device_s** %10, align 8
  %30 = bitcast %struct.gx_device_s* %29 to %struct.gx_device_memory_s*
  %31 = load i32, i32* %14, align 4
  %32 = shl i32 %31, 2
  %33 = load i32, i32* %15, align 4
  %34 = load i32, i32* %16, align 4
  %35 = shl i32 %34, 2
  %36 = load i32, i32* %17, align 4
  %37 = call i32 %28(%struct.gx_device_memory_s* %30, i32 %32, i32 %33, i32 %35, i32 %36, i32 1)
  store i32 %37, i32* %18, align 4
  %38 = load i32, i32* %18, align 4
  %39 = icmp slt i32 %38, 0
  br i1 %39, label %40, label %51

40:                                               ; preds = %24
  %41 = load %struct.gx_device_s*, %struct.gx_device_s** %10, align 8
  %42 = load i8*, i8** %11, align 8
  %43 = load i32, i32* %12, align 4
  %44 = load i32, i32* %13, align 4
  %45 = load i32, i32* %14, align 4
  %46 = load i32, i32* %15, align 4
  %47 = load i32, i32* %16, align 4
  %48 = load i32, i32* %17, align 4
  %49 = load i32, i32* %18, align 4
  %50 = call i32 @mem_copy_color_recover(%struct.gx_device_s* %41, i8* %42, i32 %43, i32 %44, i32 %45, i32 %46, i32 %47, i32 %48, i32 %49)
  store i32 %50, i32* %9, align 4
  br label %99

51:                                               ; preds = %24
  br label %52

52:                                               ; preds = %51, %8
  %53 = load i32, i32* %16, align 4
  %54 = icmp sle i32 %53, 0
  br i1 %54, label %58, label %55

55:                                               ; preds = %52
  %56 = load i32, i32* %17, align 4
  %57 = icmp sle i32 %56, 0
  br i1 %57, label %58, label %59

58:                                               ; preds = %55, %52
  store i32 0, i32* %9, align 4
  br label %99

59:                                               ; preds = %55
  %60 = load i32, i32* %14, align 4
  %61 = icmp slt i32 %60, 0
  br i1 %61, label %83, label %62

62:                                               ; preds = %59
  %63 = load i32, i32* %14, align 4
  %64 = load %struct.gx_device_s*, %struct.gx_device_s** %10, align 8
  %65 = bitcast %struct.gx_device_s* %64 to %struct.gx_device_memory_s*
  %66 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %65, i32 0, i32 3
  %67 = load i32, i32* %66, align 8
  %68 = load i32, i32* %16, align 4
  %69 = sub nsw i32 %67, %68
  %70 = icmp sgt i32 %63, %69
  br i1 %70, label %83, label %71

71:                                               ; preds = %62
  %72 = load i32, i32* %15, align 4
  %73 = icmp slt i32 %72, 0
  br i1 %73, label %83, label %74

74:                                               ; preds = %71
  %75 = load i32, i32* %15, align 4
  %76 = load %struct.gx_device_s*, %struct.gx_device_s** %10, align 8
  %77 = bitcast %struct.gx_device_s* %76 to %struct.gx_device_memory_s*
  %78 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %77, i32 0, i32 4
  %79 = load i32, i32* %78, align 4
  %80 = load i32, i32* %17, align 4
  %81 = sub nsw i32 %79, %80
  %82 = icmp sgt i32 %75, %81
  br i1 %82, label %83, label %84

83:                                               ; preds = %74, %71, %62, %59
  store i32 -1, i32* %9, align 4
  br label %99

84:                                               ; preds = %74
  %85 = load %struct.gx_device_s*, %struct.gx_device_s** %10, align 8
  %86 = load i8*, i8** %11, align 8
  %87 = load i32, i32* %12, align 4
  %88 = shl i32 %87, 2
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i8, i8* %86, i64 %89
  %91 = load i32, i32* %13, align 4
  %92 = load i32, i32* %14, align 4
  %93 = shl i32 %92, 2
  %94 = load i32, i32* %15, align 4
  %95 = load i32, i32* %16, align 4
  %96 = shl i32 %95, 2
  %97 = load i32, i32* %17, align 4
  %98 = call i32 @copy_byte_rect(%struct.gx_device_s* %85, i8* %90, i32 %91, i32 %93, i32 %94, i32 %96, i32 %97)
  store i32 %98, i32* %9, align 4
  br label %99

99:                                               ; preds = %84, %83, %58, %40
  %100 = load i32, i32* %9, align 4
  ret i32 %100
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @gx_device_memory_bitmap_size(%struct.gx_device_memory_s* %0) #0 {
  %2 = alloca %struct.gx_device_memory_s*, align 8
  %3 = alloca i32, align 4
  store %struct.gx_device_memory_s* %0, %struct.gx_device_memory_s** %2, align 8
  %4 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %2, align 8
  %5 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %4, i32 0, i32 3
  %6 = load i32, i32* %5, align 8
  %7 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %2, align 8
  %8 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %7, i32 0, i32 9
  %9 = load i32, i32* %8, align 8
  %10 = mul nsw i32 %6, %9
  %11 = add nsw i32 %10, 31
  %12 = ashr i32 %11, 5
  %13 = shl i32 %12, 2
  store i32 %13, i32* %3, align 4
  %14 = load i32, i32* %3, align 4
  %15 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %2, align 8
  %16 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %15, i32 0, i32 12
  store i32 %14, i32* %16, align 8
  %17 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %2, align 8
  %18 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %17, i32 0, i32 4
  %19 = load i32, i32* %18, align 4
  %20 = sext i32 %19 to i64
  %21 = load i32, i32* %3, align 4
  %22 = zext i32 %21 to i64
  %23 = add i64 %22, 8
  %24 = mul i64 %20, %23
  ret i64 %24
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_device_is_memory(%struct.gx_device_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.gx_device_s*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  store %struct.gx_device_s* %0, %struct.gx_device_s** %3, align 8
  %6 = load %struct.gx_device_s*, %struct.gx_device_s** %3, align 8
  %7 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %6, i32 0, i32 2
  %8 = load i8*, i8** %7, align 8
  store i8* %8, i8** %4, align 8
  store i32 0, i32* %5, align 4
  br label %9

9:                                                ; preds = %27, %1
  %10 = load i32, i32* %5, align 4
  %11 = icmp slt i32 %10, 6
  br i1 %11, label %12, label %30

12:                                               ; preds = %9
  %13 = load i8*, i8** %4, align 8
  %14 = load i32, i32* %5, align 4
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds i8, i8* %13, i64 %15
  %17 = load i8, i8* %16, align 1
  %18 = sext i8 %17 to i32
  %19 = load i32, i32* %5, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds [7 x i8], [7 x i8]* @.str, i64 0, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = sext i8 %22 to i32
  %24 = icmp ne i32 %18, %23
  br i1 %24, label %25, label %26

25:                                               ; preds = %12
  store i32 0, i32* %2, align 4
  br label %31

26:                                               ; preds = %12
  br label %27

27:                                               ; preds = %26
  %28 = load i32, i32* %5, align 4
  %29 = add nsw i32 %28, 1
  store i32 %29, i32* %5, align 4
  br label %9

30:                                               ; preds = %9
  store i32 1, i32* %2, align 4
  br label %31

31:                                               ; preds = %30, %25
  %32 = load i32, i32* %2, align 4
  ret i32 %32
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @mem_bytes_per_scan_line(%struct.gx_device_memory_s* %0) #0 {
  %2 = alloca %struct.gx_device_memory_s*, align 8
  store %struct.gx_device_memory_s* %0, %struct.gx_device_memory_s** %2, align 8
  %3 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %2, align 8
  %4 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %3, i32 0, i32 3
  %5 = load i32, i32* %4, align 8
  %6 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %2, align 8
  %7 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %6, i32 0, i32 9
  %8 = load i32, i32* %7, align 8
  %9 = mul nsw i32 %5, %8
  %10 = add nsw i32 %9, 7
  %11 = ashr i32 %10, 3
  ret i32 %11
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @mem_copy_scan_lines(%struct.gx_device_memory_s* %0, i32 %1, i8* %2, i32 %3) #0 {
  %5 = alloca %struct.gx_device_memory_s*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i8**, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  store %struct.gx_device_memory_s* %0, %struct.gx_device_memory_s** %5, align 8
  store i32 %1, i32* %6, align 4
  store i8* %2, i8** %7, align 8
  store i32 %3, i32* %8, align 4
  %18 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %5, align 8
  %19 = call i32 @mem_bytes_per_scan_line(%struct.gx_device_memory_s* %18)
  store i32 %19, i32* %12, align 4
  %20 = load i8*, i8** %7, align 8
  store i8* %20, i8** %13, align 8
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %14, align 4
  %22 = load i32, i32* %8, align 4
  %23 = load i32, i32* %12, align 4
  %24 = udiv i32 %22, %23
  %25 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %5, align 8
  %26 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %25, i32 0, i32 4
  %27 = load i32, i32* %26, align 4
  %28 = load i32, i32* %14, align 4
  %29 = sub nsw i32 %27, %28
  %30 = icmp ult i32 %24, %29
  br i1 %30, label %31, label %35

31:                                               ; preds = %4
  %32 = load i32, i32* %8, align 4
  %33 = load i32, i32* %12, align 4
  %34 = udiv i32 %32, %33
  br label %41

35:                                               ; preds = %4
  %36 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %5, align 8
  %37 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %36, i32 0, i32 4
  %38 = load i32, i32* %37, align 4
  %39 = load i32, i32* %14, align 4
  %40 = sub nsw i32 %38, %39
  br label %41

41:                                               ; preds = %35, %31
  %42 = phi i32 [ %34, %31 ], [ %40, %35 ]
  store i32 %42, i32* %15, align 4
  br label %43

43:                                               ; preds = %53, %41
  %44 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %5, align 8
  %45 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %44, i32 0, i32 15
  %46 = load i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_memory_s*, i32, i32, i32, i32, i32)** %45, align 8
  %47 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %5, align 8
  %48 = load i32, i32* %14, align 4
  %49 = load i32, i32* %12, align 4
  %50 = load i32, i32* %15, align 4
  %51 = call i32 %46(%struct.gx_device_memory_s* %47, i32 0, i32 %48, i32 %49, i32 %50, i32 0)
  %52 = icmp slt i32 %51, 0
  br i1 %52, label %53, label %74

53:                                               ; preds = %43
  %54 = load i32, i32* %15, align 4
  %55 = lshr i32 %54, 1
  store i32 %55, i32* %16, align 4
  %56 = load i32, i32* %16, align 4
  %57 = load i32, i32* %12, align 4
  %58 = mul i32 %56, %57
  store i32 %58, i32* %17, align 4
  %59 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %5, align 8
  %60 = load i32, i32* %14, align 4
  %61 = load i8*, i8** %13, align 8
  %62 = load i32, i32* %17, align 4
  %63 = call i32 @mem_copy_scan_lines(%struct.gx_device_memory_s* %59, i32 %60, i8* %61, i32 %62)
  %64 = load i32, i32* %17, align 4
  %65 = load i8*, i8** %13, align 8
  %66 = zext i32 %64 to i64
  %67 = getelementptr inbounds i8, i8* %65, i64 %66
  store i8* %67, i8** %13, align 8
  %68 = load i32, i32* %16, align 4
  %69 = load i32, i32* %14, align 4
  %70 = add i32 %69, %68
  store i32 %70, i32* %14, align 4
  %71 = load i32, i32* %16, align 4
  %72 = load i32, i32* %15, align 4
  %73 = sub i32 %72, %71
  store i32 %73, i32* %15, align 4
  br label %43

74:                                               ; preds = %43
  %75 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %5, align 8
  %76 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %75, i32 0, i32 14
  %77 = load i8**, i8*** %76, align 8
  %78 = load i32, i32* %14, align 4
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i8*, i8** %77, i64 %79
  store i8** %80, i8*** %9, align 8
  %81 = load i8**, i8*** %9, align 8
  %82 = load i8*, i8** %81, align 8
  %83 = getelementptr inbounds i8, i8* %82, i64 0
  store i8* %83, i8** %10, align 8
  br label %84

84:                                               ; preds = %88, %74
  %85 = load i32, i32* %15, align 4
  %86 = add i32 %85, -1
  store i32 %86, i32* %15, align 4
  %87 = icmp ne i32 %85, 0
  br i1 %87, label %88, label %104

88:                                               ; preds = %84
  %89 = load i8*, i8** %13, align 8
  %90 = load i8*, i8** %10, align 8
  %91 = load i32, i32* %12, align 4
  %92 = zext i32 %91 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %89, i8* align 1 %90, i64 %92, i1 false)
  %93 = load i8**, i8*** %9, align 8
  %94 = getelementptr inbounds i8*, i8** %93, i32 1
  store i8** %94, i8*** %9, align 8
  %95 = load i8**, i8*** %9, align 8
  %96 = load i8*, i8** %95, align 8
  %97 = getelementptr inbounds i8, i8* %96, i64 0
  store i8* %97, i8** %10, align 8
  %98 = load i32, i32* %12, align 4
  %99 = load i8*, i8** %13, align 8
  %100 = zext i32 %98 to i64
  %101 = getelementptr inbounds i8, i8* %99, i64 %100
  store i8* %101, i8** %13, align 8
  %102 = load i32, i32* %14, align 4
  %103 = add nsw i32 %102, 1
  store i32 %103, i32* %14, align 4
  br label %84

104:                                              ; preds = %84
  %105 = load i32, i32* %14, align 4
  %106 = load i32, i32* %6, align 4
  %107 = sub nsw i32 %105, %106
  ret i32 %107
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gp_init() #0 {
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gs_get_clock(i64* %0) #0 {
  %2 = alloca i64*, align 8
  %3 = alloca i64, align 8
  %4 = alloca %struct.timeval, align 8
  %5 = alloca %struct.timezone, align 4
  %6 = alloca %struct.tm*, align 8
  store i64* %0, i64** %2, align 8
  %7 = call i32 @gettimeofday(%struct.timeval* %4, %struct.timezone* %5) #9
  %8 = icmp eq i32 %7, -1
  br i1 %8, label %9, label %10

9:                                                ; preds = %1
  call void @perror(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5, i64 0, i64 0))
  call void @exit(i32 -1) #10
  unreachable

10:                                               ; preds = %1
  %11 = getelementptr inbounds %struct.timeval, %struct.timeval* %4, i32 0, i32 0
  %12 = load i64, i64* %11, align 8
  %13 = sub nsw i64 %12, 315576000
  store i64 %13, i64* %3, align 8
  %14 = getelementptr inbounds %struct.timezone, %struct.timezone* %5, i32 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = mul nsw i32 %15, 60
  %17 = sext i32 %16 to i64
  %18 = load i64, i64* %3, align 8
  %19 = sub nsw i64 %18, %17
  store i64 %19, i64* %3, align 8
  %20 = getelementptr inbounds %struct.timeval, %struct.timeval* %4, i32 0, i32 0
  %21 = call %struct.tm* @localtime(i64* %20) #9
  store %struct.tm* %21, %struct.tm** %6, align 8
  %22 = load %struct.tm*, %struct.tm** %6, align 8
  %23 = getelementptr inbounds %struct.tm, %struct.tm* %22, i32 0, i32 8
  %24 = load i32, i32* %23, align 8
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %29

26:                                               ; preds = %10
  %27 = load i64, i64* %3, align 8
  %28 = add nsw i64 %27, 3600
  store i64 %28, i64* %3, align 8
  br label %29

29:                                               ; preds = %26, %10
  %30 = load i64, i64* %3, align 8
  %31 = sdiv i64 %30, 86400
  %32 = load i64*, i64** %2, align 8
  %33 = getelementptr inbounds i64, i64* %32, i64 0
  store i64 %31, i64* %33, align 8
  %34 = load i64, i64* %3, align 8
  %35 = srem i64 %34, 86400
  %36 = mul nsw i64 %35, 1000
  %37 = getelementptr inbounds %struct.timeval, %struct.timeval* %4, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  %39 = sdiv i64 %38, 1000
  %40 = add nsw i64 %36, %39
  %41 = load i64*, i64** %2, align 8
  %42 = getelementptr inbounds i64, i64* %41, i64 1
  store i64 %40, i64* %42, align 8
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @gettimeofday(%struct.timeval*, %struct.timezone*) #2

declare dso_local void @perror(i8*) #3

; Function Attrs: noreturn
declare dso_local void @exit(i32) #4

; Function Attrs: nounwind
declare dso_local %struct.tm* @localtime(i64*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gp_file_name_is_absolute(i8* %0, i32 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %4, align 4
  %6 = icmp uge i32 %5, 1
  br i1 %6, label %7, label %12

7:                                                ; preds = %2
  %8 = load i8*, i8** %3, align 8
  %9 = load i8, i8* %8, align 1
  %10 = sext i8 %9 to i32
  %11 = icmp eq i32 %10, 47
  br label %12

12:                                               ; preds = %7, %2
  %13 = phi i1 [ false, %2 ], [ %11, %7 ]
  %14 = zext i1 %13 to i32
  ret i32 %14
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @gp_file_name_concat_string(i8* %0, i32 %1, i8* %2, i32 %3) #0 {
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  store i8* %0, i8** %6, align 8
  store i32 %1, i32* %7, align 4
  store i8* %2, i8** %8, align 8
  store i32 %3, i32* %9, align 4
  %10 = load i32, i32* %7, align 4
  %11 = icmp ugt i32 %10, 0
  br i1 %11, label %12, label %22

12:                                               ; preds = %4
  %13 = load i8*, i8** %6, align 8
  %14 = load i32, i32* %7, align 4
  %15 = sub i32 %14, 1
  %16 = zext i32 %15 to i64
  %17 = getelementptr inbounds i8, i8* %13, i64 %16
  %18 = load i8, i8* %17, align 1
  %19 = sext i8 %18 to i32
  %20 = icmp eq i32 %19, 47
  br i1 %20, label %21, label %22

21:                                               ; preds = %12
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1.6, i64 0, i64 0), i8** %5, align 8
  br label %23

22:                                               ; preds = %12, %4
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2.7, i64 0, i64 0), i8** %5, align 8
  br label %23

23:                                               ; preds = %22, %21
  %24 = load i8*, i8** %5, align 8
  ret i8* %24
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_show_init(%struct.gs_show_enum_s* %0, %struct.gs_state_s* %1, i8* %2) #0 {
  %4 = alloca %struct.gs_show_enum_s*, align 8
  %5 = alloca %struct.gs_state_s*, align 8
  %6 = alloca i8*, align 8
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %4, align 8
  store %struct.gs_state_s* %1, %struct.gs_state_s** %5, align 8
  store i8* %2, i8** %6, align 8
  %7 = load i8*, i8** %6, align 8
  %8 = call i64 @strlen(i8* %7) #11
  %9 = trunc i64 %8 to i32
  %10 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %4, align 8
  %11 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %10, i32 0, i32 2
  store i32 %9, i32* %11, align 8
  %12 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %4, align 8
  %13 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %12, i32 0, i32 10
  store i32 0, i32* %13, align 8
  %14 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %4, align 8
  %15 = load %struct.gs_state_s*, %struct.gs_state_s** %5, align 8
  %16 = load i8*, i8** %6, align 8
  %17 = call i32 @show_setup(%struct.gs_show_enum_s* %14, %struct.gs_state_s* %15, i8* %16)
  ret i32 %17
}

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #5

; Function Attrs: noinline nounwind uwtable
define internal i32 @show_setup(%struct.gs_show_enum_s* %0, %struct.gs_state_s* %1, i8* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.gs_show_enum_s*, align 8
  %6 = alloca %struct.gs_state_s*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca %struct.gs_fixed_rect_s, align 8
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %5, align 8
  store %struct.gs_state_s* %1, %struct.gs_state_s** %6, align 8
  store i8* %2, i8** %7, align 8
  %10 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %11 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %12 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %11, i32 0, i32 0
  store %struct.gs_state_s* %10, %struct.gs_state_s** %12, align 8
  %13 = load i8*, i8** %7, align 8
  %14 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %15 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %14, i32 0, i32 1
  store i8* %13, i8** %15, align 8
  %16 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %17 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %16, i32 0, i32 5
  store i32 256, i32* %17, align 4
  %18 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %19 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %18, i32 0, i32 8
  store i32 0, i32* %19, align 8
  %20 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %21 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %20, i32 0, i32 9
  store i32 0, i32* %21, align 4
  %22 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %23 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %22, i32 0, i32 11
  store i32 0, i32* %23, align 4
  %24 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %25 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %24, i32 0, i32 19
  store i32 0, i32* %25, align 8
  %26 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %27 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %26, i32 0, i32 20
  store i32 0, i32* %27, align 4
  %28 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %29 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %28, i32 0, i32 26
  store i32 (%struct.gs_show_enum_s*)* @continue_show, i32 (%struct.gs_show_enum_s*)** %29, align 8
  %30 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %31 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %30, i32 0, i32 18
  %32 = load i32, i32* %31, align 8
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %54, label %34

34:                                               ; preds = %3
  %35 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %36 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %35, i32 0, i32 17
  call void @gs_make_identity(%struct.gs_matrix_s* %36)
  %37 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %38 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %37, i32 0, i32 16
  %39 = load %struct.gs_font_s*, %struct.gs_font_s** %38, align 8
  %40 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %39, i32 0, i32 5
  %41 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %42 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %41, i32 0, i32 2
  %43 = bitcast %struct.gs_matrix_fixed_s* %42 to %struct.gs_matrix_s*
  %44 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %45 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %44, i32 0, i32 17
  %46 = call i32 @gs_matrix_multiply(%struct.gs_matrix_s* %40, %struct.gs_matrix_s* %43, %struct.gs_matrix_s* %45)
  store i32 %46, i32* %8, align 4
  %47 = load i32, i32* %8, align 4
  %48 = icmp slt i32 %47, 0
  br i1 %48, label %49, label %51

49:                                               ; preds = %34
  %50 = load i32, i32* %8, align 4
  store i32 %50, i32* %4, align 4
  br label %123

51:                                               ; preds = %34
  %52 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %53 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %52, i32 0, i32 18
  store i32 1, i32* %53, align 8
  br label %54

54:                                               ; preds = %51, %3
  %55 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %56 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %55, i32 0, i32 17
  %57 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %56, i32 0, i32 2
  %58 = bitcast float* %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %61 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %60, i32 0, i32 17
  %62 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %61, i32 0, i32 4
  %63 = bitcast float* %62 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = or i64 %59, %64
  %66 = shl i64 %65, 1
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %82, label %68

68:                                               ; preds = %54
  %69 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %70 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %69, i32 0, i32 17
  %71 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %70, i32 0, i32 0
  %72 = bitcast float* %71 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %75 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %74, i32 0, i32 17
  %76 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %75, i32 0, i32 6
  %77 = bitcast float* %76 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = or i64 %73, %78
  %80 = shl i64 %79, 1
  %81 = icmp eq i64 %80, 0
  br label %82

82:                                               ; preds = %68, %54
  %83 = phi i1 [ true, %54 ], [ %81, %68 ]
  %84 = zext i1 %83 to i32
  %85 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %86 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %85, i32 0, i32 12
  store i32 %84, i32* %86, align 8
  br i1 %83, label %87, label %122

87:                                               ; preds = %82
  %88 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %89 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %88, i32 0, i32 8
  %90 = load %struct.gx_path_s*, %struct.gx_path_s** %89, align 8
  %91 = call i32 @gx_cpath_box_for_check(%struct.gx_path_s* %90, %struct.gs_fixed_rect_s* %9)
  %92 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %9, i32 0, i32 0
  %93 = getelementptr inbounds %struct.timeval, %struct.timeval* %92, i32 0, i32 0
  %94 = load i64, i64* %93, align 8
  %95 = add nsw i64 %94, 4095
  %96 = ashr i64 %95, 12
  %97 = trunc i64 %96 to i32
  %98 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %99 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %98, i32 0, i32 13
  store i32 %97, i32* %99, align 4
  %100 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %9, i32 0, i32 0
  %101 = getelementptr inbounds %struct.timeval, %struct.timeval* %100, i32 0, i32 1
  %102 = load i64, i64* %101, align 8
  %103 = add nsw i64 %102, 4095
  %104 = ashr i64 %103, 12
  %105 = trunc i64 %104 to i32
  %106 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %107 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %106, i32 0, i32 14
  store i32 %105, i32* %107, align 8
  %108 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %9, i32 0, i32 1
  %109 = getelementptr inbounds %struct.timeval, %struct.timeval* %108, i32 0, i32 0
  %110 = load i64, i64* %109, align 8
  %111 = ashr i64 %110, 12
  %112 = trunc i64 %111 to i32
  %113 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %114 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %113, i32 0, i32 15
  store i32 %112, i32* %114, align 4
  %115 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %9, i32 0, i32 1
  %116 = getelementptr inbounds %struct.timeval, %struct.timeval* %115, i32 0, i32 1
  %117 = load i64, i64* %116, align 8
  %118 = ashr i64 %117, 12
  %119 = trunc i64 %118 to i32
  %120 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %121 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %120, i32 0, i32 16
  store i32 %119, i32* %121, align 8
  br label %122

122:                                              ; preds = %87, %82
  store i32 0, i32* %4, align 4
  br label %123

123:                                              ; preds = %122, %49
  %124 = load i32, i32* %4, align 4
  ret i32 %124
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @continue_show(%struct.gs_show_enum_s* %0) #0 {
  %2 = alloca %struct.gs_show_enum_s*, align 8
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %2, align 8
  %3 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %2, align 8
  %4 = call i32 @show_proceed(%struct.gs_show_enum_s* %3)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @show_proceed(%struct.gs_show_enum_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.gs_show_enum_s*, align 8
  %4 = alloca %struct.gs_state_s*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.cached_fm_pair_s*, align 8
  %8 = alloca i8, align 1
  %9 = alloca i32, align 4
  %10 = alloca %struct.cached_char_s*, align 8
  %11 = alloca %struct.timeval, align 8
  %12 = alloca %struct.gx_path_s*, align 8
  %13 = alloca %struct.gs_font_s*, align 8
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %3, align 8
  %14 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %15 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %14, i32 0, i32 0
  %16 = load %struct.gs_state_s*, %struct.gs_state_s** %15, align 8
  store %struct.gs_state_s* %16, %struct.gs_state_s** %4, align 8
  %17 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %18 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %17, i32 0, i32 1
  %19 = load i8*, i8** %18, align 8
  store i8* %19, i8** %5, align 8
  store %struct.cached_fm_pair_s* null, %struct.cached_fm_pair_s** %7, align 8
  %20 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %21 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %20, i32 0, i32 25
  store i32 0, i32* %21, align 4
  br label %22

22:                                               ; preds = %291, %1
  %23 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %24 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %23, i32 0, i32 12
  %25 = load i32, i32* %24, align 8
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %128

27:                                               ; preds = %22
  %28 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %7, align 8
  %29 = icmp eq %struct.cached_fm_pair_s* %28, null
  br i1 %29, label %30, label %33

30:                                               ; preds = %27
  %31 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %32 = call %struct.cached_fm_pair_s* @gx_lookup_fm_pair(%struct.gs_state_s* %31)
  store %struct.cached_fm_pair_s* %32, %struct.cached_fm_pair_s** %7, align 8
  br label %33

33:                                               ; preds = %30, %27
  br label %34

34:                                               ; preds = %126, %33
  %35 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %36 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %35, i32 0, i32 20
  %37 = load i32, i32* %36, align 4
  %38 = add i32 %37, 1
  store i32 %38, i32* %36, align 4
  store i32 %37, i32* %6, align 4
  %39 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %40 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %39, i32 0, i32 2
  %41 = load i32, i32* %40, align 8
  %42 = icmp ne i32 %37, %41
  br i1 %42, label %43, label %127

43:                                               ; preds = %34
  %44 = load i8*, i8** %5, align 8
  %45 = load i32, i32* %6, align 4
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds i8, i8* %44, i64 %46
  %48 = load i8, i8* %47, align 1
  store i8 %48, i8* %8, align 1
  %49 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %50 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %7, align 8
  %51 = load i8, i8* %8, align 1
  %52 = zext i8 %51 to i32
  %53 = call %struct.cached_char_s* @gx_lookup_cached_char(%struct.gs_state_s* %49, %struct.cached_fm_pair_s* %50, i32 %52)
  store %struct.cached_char_s* %53, %struct.cached_char_s** %10, align 8
  %54 = load %struct.cached_char_s*, %struct.cached_char_s** %10, align 8
  %55 = icmp eq %struct.cached_char_s* %54, null
  br i1 %55, label %56, label %57

56:                                               ; preds = %43
  br label %145

57:                                               ; preds = %43
  %58 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %59 = load %struct.cached_char_s*, %struct.cached_char_s** %10, align 8
  %60 = call i32 @gx_copy_cached_char(%struct.gs_show_enum_s* %58, %struct.cached_char_s* %59)
  store i32 %60, i32* %9, align 4
  %61 = load i32, i32* %9, align 4
  %62 = icmp slt i32 %61, 0
  br i1 %62, label %63, label %65

63:                                               ; preds = %57
  %64 = load i32, i32* %9, align 4
  store i32 %64, i32* %2, align 4
  br label %293

65:                                               ; preds = %57
  %66 = load i32, i32* %9, align 4
  %67 = icmp sgt i32 %66, 0
  br i1 %67, label %68, label %69

68:                                               ; preds = %65
  br label %145

69:                                               ; preds = %65
  br label %70

70:                                               ; preds = %69
  %71 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %72 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %71, i32 0, i32 10
  %73 = load i32, i32* %72, align 8
  %74 = icmp ne i32 %73, 0
  br i1 %74, label %75, label %84

75:                                               ; preds = %70
  %76 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %77 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %76, i32 0, i32 21
  %78 = load %struct.cached_char_s*, %struct.cached_char_s** %10, align 8
  %79 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %78, i32 0, i32 6
  %80 = bitcast %struct.timeval* %77 to i8*
  %81 = bitcast %struct.timeval* %79 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %80, i8* align 8 %81, i64 16, i1 false)
  %82 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %83 = call i32 @show_move(%struct.gs_show_enum_s* %82)
  store i32 %83, i32* %9, align 4
  br label %121

84:                                               ; preds = %70
  %85 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %86 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %85, i32 0, i32 7
  %87 = load %struct.gx_path_s*, %struct.gx_path_s** %86, align 8
  %88 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %87, i32 0, i32 10
  %89 = load i8, i8* %88, align 8
  %90 = icmp ne i8 %89, 0
  br i1 %90, label %92, label %91

91:                                               ; preds = %84
  br label %119

92:                                               ; preds = %84
  %93 = load %struct.cached_char_s*, %struct.cached_char_s** %10, align 8
  %94 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %93, i32 0, i32 6
  %95 = getelementptr inbounds %struct.timeval, %struct.timeval* %94, i32 0, i32 0
  %96 = load i64, i64* %95, align 8
  %97 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %98 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %97, i32 0, i32 7
  %99 = load %struct.gx_path_s*, %struct.gx_path_s** %98, align 8
  %100 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %99, i32 0, i32 9
  %101 = getelementptr inbounds %struct.timeval, %struct.timeval* %100, i32 0, i32 0
  %102 = load i64, i64* %101, align 8
  %103 = add nsw i64 %102, %96
  store i64 %103, i64* %101, align 8
  %104 = load %struct.cached_char_s*, %struct.cached_char_s** %10, align 8
  %105 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %104, i32 0, i32 6
  %106 = getelementptr inbounds %struct.timeval, %struct.timeval* %105, i32 0, i32 1
  %107 = load i64, i64* %106, align 8
  %108 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %109 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %108, i32 0, i32 7
  %110 = load %struct.gx_path_s*, %struct.gx_path_s** %109, align 8
  %111 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %110, i32 0, i32 9
  %112 = getelementptr inbounds %struct.timeval, %struct.timeval* %111, i32 0, i32 1
  %113 = load i64, i64* %112, align 8
  %114 = add nsw i64 %113, %107
  store i64 %114, i64* %112, align 8
  %115 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %116 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %115, i32 0, i32 7
  %117 = load %struct.gx_path_s*, %struct.gx_path_s** %116, align 8
  %118 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %117, i32 0, i32 11
  store i8 0, i8* %118, align 1
  br label %119

119:                                              ; preds = %92, %91
  %120 = phi i32 [ -14, %91 ], [ 0, %92 ]
  store i32 %120, i32* %9, align 4
  br label %121

121:                                              ; preds = %119, %75
  %122 = load i32, i32* %9, align 4
  %123 = icmp ne i32 %122, 0
  br i1 %123, label %124, label %126

124:                                              ; preds = %121
  %125 = load i32, i32* %9, align 4
  store i32 %125, i32* %2, align 4
  br label %293

126:                                              ; preds = %121
  br label %34

127:                                              ; preds = %34
  store i32 0, i32* %2, align 4
  br label %293

128:                                              ; preds = %22
  %129 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %130 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %129, i32 0, i32 20
  %131 = load i32, i32* %130, align 4
  %132 = add i32 %131, 1
  store i32 %132, i32* %130, align 4
  store i32 %131, i32* %6, align 4
  %133 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %134 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %133, i32 0, i32 2
  %135 = load i32, i32* %134, align 8
  %136 = icmp eq i32 %131, %135
  br i1 %136, label %137, label %138

137:                                              ; preds = %128
  store i32 0, i32* %2, align 4
  br label %293

138:                                              ; preds = %128
  %139 = load i8*, i8** %5, align 8
  %140 = load i32, i32* %6, align 4
  %141 = zext i32 %140 to i64
  %142 = getelementptr inbounds i8, i8* %139, i64 %141
  %143 = load i8, i8* %142, align 1
  store i8 %143, i8* %8, align 1
  br label %144

144:                                              ; preds = %138
  br label %145

145:                                              ; preds = %144, %68, %56
  %146 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %147 = call i32 @gs_gsave(%struct.gs_state_s* %146)
  store i32 %147, i32* %9, align 4
  %148 = icmp slt i32 %147, 0
  br i1 %148, label %149, label %151

149:                                              ; preds = %145
  %150 = load i32, i32* %9, align 4
  store i32 %150, i32* %2, align 4
  br label %293

151:                                              ; preds = %145
  %152 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %153 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %152, i32 0, i32 11
  %154 = load i32, i32* %153, align 4
  %155 = trunc i32 %154 to i8
  %156 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %157 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %156, i32 0, i32 20
  store i8 %155, i8* %157, align 1
  %158 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %159 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %158, i32 0, i32 7
  %160 = load %struct.gx_path_s*, %struct.gx_path_s** %159, align 8
  store %struct.gx_path_s* %160, %struct.gx_path_s** %12, align 8
  %161 = load %struct.gx_path_s*, %struct.gx_path_s** %12, align 8
  %162 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %161, i32 0, i32 10
  %163 = load i8, i8* %162, align 8
  %164 = icmp ne i8 %163, 0
  br i1 %164, label %166, label %165

165:                                              ; preds = %151
  br label %177

166:                                              ; preds = %151
  %167 = load %struct.gx_path_s*, %struct.gx_path_s** %12, align 8
  %168 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %167, i32 0, i32 9
  %169 = getelementptr inbounds %struct.timeval, %struct.timeval* %168, i32 0, i32 0
  %170 = load i64, i64* %169, align 8
  %171 = getelementptr inbounds %struct.timeval, %struct.timeval* %11, i32 0, i32 0
  store i64 %170, i64* %171, align 8
  %172 = load %struct.gx_path_s*, %struct.gx_path_s** %12, align 8
  %173 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %172, i32 0, i32 9
  %174 = getelementptr inbounds %struct.timeval, %struct.timeval* %173, i32 0, i32 1
  %175 = load i64, i64* %174, align 8
  %176 = getelementptr inbounds %struct.timeval, %struct.timeval* %11, i32 0, i32 1
  store i64 %175, i64* %176, align 8
  br label %177

177:                                              ; preds = %166, %165
  %178 = phi i32 [ -14, %165 ], [ 0, %166 ]
  store i32 %178, i32* %9, align 4
  %179 = icmp slt i32 %178, 0
  br i1 %179, label %180, label %182

180:                                              ; preds = %177
  %181 = load i32, i32* %9, align 4
  store i32 %181, i32* %2, align 4
  br label %293

182:                                              ; preds = %177
  %183 = load %struct.gx_path_s*, %struct.gx_path_s** %12, align 8
  %184 = call i32 @gx_path_is_void(%struct.gx_path_s* %183)
  %185 = icmp ne i32 %184, 0
  br i1 %185, label %200, label %186

186:                                              ; preds = %182
  %187 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %188 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %187, i32 0, i32 11
  %189 = load i32, i32* %188, align 4
  %190 = icmp ne i32 %189, 0
  br i1 %190, label %200, label %191

191:                                              ; preds = %186
  %192 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %193 = call i32 (%struct.gs_state_s*, ...) bitcast (i32 (%struct.gs_state_s*)* @gs_newpath to i32 (%struct.gs_state_s*, ...)*)(%struct.gs_state_s* %192)
  %194 = load %struct.gx_path_s*, %struct.gx_path_s** %12, align 8
  %195 = getelementptr inbounds %struct.timeval, %struct.timeval* %11, i32 0, i32 0
  %196 = load i64, i64* %195, align 8
  %197 = getelementptr inbounds %struct.timeval, %struct.timeval* %11, i32 0, i32 1
  %198 = load i64, i64* %197, align 8
  %199 = call i32 @gx_path_add_point(%struct.gx_path_s* %194, i64 %196, i64 %198)
  br label %200

200:                                              ; preds = %191, %186, %182
  %201 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %202 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %203 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %202, i32 0, i32 17
  %204 = call i32 (%struct.gs_state_s*, %struct.gs_matrix_s*, ...) bitcast (i32 (%struct.gs_state_s*, %struct.gs_matrix_s*)* @gs_setmatrix to i32 (%struct.gs_state_s*, %struct.gs_matrix_s*, ...)*)(%struct.gs_state_s* %201, %struct.gs_matrix_s* %203)
  %205 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %206 = getelementptr inbounds %struct.timeval, %struct.timeval* %11, i32 0, i32 0
  %207 = load i64, i64* %206, align 8
  %208 = getelementptr inbounds %struct.timeval, %struct.timeval* %11, i32 0, i32 1
  %209 = load i64, i64* %208, align 8
  %210 = call i32 (%struct.gs_state_s*, i64, i64, ...) bitcast (i32 (%struct.gs_state_s*, i64, i64)* @gs_translate_to_fixed to i32 (%struct.gs_state_s*, i64, i64, ...)*)(%struct.gs_state_s* %205, i64 %207, i64 %209)
  %211 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %212 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %211, i32 0, i32 2
  %213 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %212, i32 0, i32 12
  %214 = load i64, i64* %213, align 8
  %215 = add nsw i64 %214, 2048
  %216 = and i64 %215, -4096
  %217 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %218 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %217, i32 0, i32 2
  %219 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %218, i32 0, i32 12
  store i64 %216, i64* %219, align 8
  %220 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %221 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %220, i32 0, i32 2
  %222 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %221, i32 0, i32 12
  %223 = load i64, i64* %222, align 8
  %224 = sitofp i64 %223 to double
  %225 = fmul double %224, 0x3F30000000000000
  %226 = fptrunc double %225 to float
  %227 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %228 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %227, i32 0, i32 2
  %229 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %228, i32 0, i32 8
  store float %226, float* %229, align 8
  %230 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %231 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %230, i32 0, i32 2
  %232 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %231, i32 0, i32 13
  %233 = load i64, i64* %232, align 8
  %234 = add nsw i64 %233, 2048
  %235 = and i64 %234, -4096
  %236 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %237 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %236, i32 0, i32 2
  %238 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %237, i32 0, i32 13
  store i64 %235, i64* %238, align 8
  %239 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %240 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %239, i32 0, i32 2
  %241 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %240, i32 0, i32 13
  %242 = load i64, i64* %241, align 8
  %243 = sitofp i64 %242 to double
  %244 = fmul double %243, 0x3F30000000000000
  %245 = fptrunc double %244 to float
  %246 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %247 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %246, i32 0, i32 2
  %248 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %247, i32 0, i32 10
  store float %245, float* %248, align 8
  %249 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %250 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %249, i32 0, i32 24
  store i32 0, i32* %250, align 8
  %251 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %252 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %251, i32 0, i32 26
  store i32 (%struct.gs_show_enum_s*)* @continue_show_update, i32 (%struct.gs_show_enum_s*)** %252, align 8
  %253 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %254 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %253, i32 0, i32 16
  %255 = load %struct.gs_font_s*, %struct.gs_font_s** %254, align 8
  store %struct.gs_font_s* %255, %struct.gs_font_s** %13, align 8
  %256 = load %struct.gs_font_s*, %struct.gs_font_s** %13, align 8
  %257 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %256, i32 0, i32 13
  %258 = load i32 (%struct.gs_show_enum_s*, %struct.gs_state_s*, %struct.gs_font_s*, i32, i8*)*, i32 (%struct.gs_show_enum_s*, %struct.gs_state_s*, %struct.gs_font_s*, i32, i8*)** %257, align 8
  %259 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %260 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %261 = load %struct.gs_font_s*, %struct.gs_font_s** %13, align 8
  %262 = load i8, i8* %8, align 1
  %263 = zext i8 %262 to i32
  %264 = load %struct.gs_font_s*, %struct.gs_font_s** %13, align 8
  %265 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %264, i32 0, i32 14
  %266 = load i8*, i8** %265, align 8
  %267 = call i32 %258(%struct.gs_show_enum_s* %259, %struct.gs_state_s* %260, %struct.gs_font_s* %261, i32 %263, i8* %266)
  store i32 %267, i32* %9, align 4
  %268 = load i32, i32* %9, align 4
  %269 = icmp slt i32 %268, 0
  br i1 %269, label %270, label %272

270:                                              ; preds = %200
  %271 = load i32, i32* %9, align 4
  store i32 %271, i32* %2, align 4
  br label %293

272:                                              ; preds = %200
  %273 = load i32, i32* %9, align 4
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %275, label %292

275:                                              ; preds = %272
  %276 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %277 = call i32 @show_update(%struct.gs_show_enum_s* %276)
  store i32 %277, i32* %9, align 4
  %278 = load i32, i32* %9, align 4
  %279 = icmp slt i32 %278, 0
  br i1 %279, label %280, label %282

280:                                              ; preds = %275
  %281 = load i32, i32* %9, align 4
  store i32 %281, i32* %2, align 4
  br label %293

282:                                              ; preds = %275
  %283 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %284 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %283, i32 0, i32 25
  store i32 0, i32* %284, align 4
  %285 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %286 = call i32 @show_move(%struct.gs_show_enum_s* %285)
  store i32 %286, i32* %9, align 4
  %287 = load i32, i32* %9, align 4
  %288 = icmp ne i32 %287, 0
  br i1 %288, label %289, label %291

289:                                              ; preds = %282
  %290 = load i32, i32* %9, align 4
  store i32 %290, i32* %2, align 4
  br label %293

291:                                              ; preds = %282
  br label %22

292:                                              ; preds = %272
  store i32 1, i32* %2, align 4
  br label %293

293:                                              ; preds = %292, %289, %280, %270, %180, %149, %137, %127, %124, %63
  %294 = load i32, i32* %2, align 4
  ret i32 %294
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @show_move(%struct.gs_show_enum_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.gs_show_enum_s*, align 8
  %4 = alloca %struct.gs_state_s*, align 8
  %5 = alloca i32, align 4
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %3, align 8
  %6 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %7 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %6, i32 0, i32 0
  %8 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  store %struct.gs_state_s* %8, %struct.gs_state_s** %4, align 8
  %9 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %10 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %9, i32 0, i32 8
  %11 = load i32, i32* %10, align 8
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %24

13:                                               ; preds = %1
  %14 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %15 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %16 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %15, i32 0, i32 6
  %17 = load float, float* %16, align 8
  %18 = fpext float %17 to double
  %19 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %20 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %19, i32 0, i32 7
  %21 = load float, float* %20, align 4
  %22 = fpext float %21 to double
  %23 = call i32 (%struct.gs_state_s*, double, double, ...) bitcast (i32 (%struct.gs_state_s*, double, double)* @gs_rmoveto to i32 (%struct.gs_state_s*, double, double, ...)*)(%struct.gs_state_s* %14, double %18, double %22)
  br label %24

24:                                               ; preds = %13, %1
  %25 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %26 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %25, i32 0, i32 1
  %27 = load i8*, i8** %26, align 8
  %28 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %29 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %28, i32 0, i32 20
  %30 = load i32, i32* %29, align 4
  %31 = sub i32 %30, 1
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds i8, i8* %27, i64 %32
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %37 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %36, i32 0, i32 5
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %35, %38
  br i1 %39, label %40, label %51

40:                                               ; preds = %24
  %41 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %42 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %43 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %42, i32 0, i32 3
  %44 = load float, float* %43, align 4
  %45 = fpext float %44 to double
  %46 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %47 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %46, i32 0, i32 4
  %48 = load float, float* %47, align 8
  %49 = fpext float %48 to double
  %50 = call i32 (%struct.gs_state_s*, double, double, ...) bitcast (i32 (%struct.gs_state_s*, double, double)* @gs_rmoveto to i32 (%struct.gs_state_s*, double, double, ...)*)(%struct.gs_state_s* %41, double %45, double %49)
  br label %51

51:                                               ; preds = %40, %24
  %52 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %53 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %52, i32 0, i32 7
  %54 = load %struct.gx_path_s*, %struct.gx_path_s** %53, align 8
  %55 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %54, i32 0, i32 10
  %56 = load i8, i8* %55, align 8
  %57 = icmp ne i8 %56, 0
  br i1 %57, label %59, label %58

58:                                               ; preds = %51
  br label %86

59:                                               ; preds = %51
  %60 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %61 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %60, i32 0, i32 21
  %62 = getelementptr inbounds %struct.timeval, %struct.timeval* %61, i32 0, i32 0
  %63 = load i64, i64* %62, align 8
  %64 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %65 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %64, i32 0, i32 7
  %66 = load %struct.gx_path_s*, %struct.gx_path_s** %65, align 8
  %67 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %66, i32 0, i32 9
  %68 = getelementptr inbounds %struct.timeval, %struct.timeval* %67, i32 0, i32 0
  %69 = load i64, i64* %68, align 8
  %70 = add nsw i64 %69, %63
  store i64 %70, i64* %68, align 8
  %71 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %72 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %71, i32 0, i32 21
  %73 = getelementptr inbounds %struct.timeval, %struct.timeval* %72, i32 0, i32 1
  %74 = load i64, i64* %73, align 8
  %75 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %76 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %75, i32 0, i32 7
  %77 = load %struct.gx_path_s*, %struct.gx_path_s** %76, align 8
  %78 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %77, i32 0, i32 9
  %79 = getelementptr inbounds %struct.timeval, %struct.timeval* %78, i32 0, i32 1
  %80 = load i64, i64* %79, align 8
  %81 = add nsw i64 %80, %74
  store i64 %81, i64* %79, align 8
  %82 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %83 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %82, i32 0, i32 7
  %84 = load %struct.gx_path_s*, %struct.gx_path_s** %83, align 8
  %85 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %84, i32 0, i32 11
  store i8 0, i8* %85, align 1
  br label %86

86:                                               ; preds = %59, %58
  %87 = phi i32 [ -14, %58 ], [ 0, %59 ]
  store i32 %87, i32* %5, align 4
  %88 = load i32, i32* %5, align 4
  %89 = icmp slt i32 %88, 0
  br i1 %89, label %90, label %92

90:                                               ; preds = %86
  %91 = load i32, i32* %5, align 4
  store i32 %91, i32* %2, align 4
  br label %109

92:                                               ; preds = %86
  %93 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %94 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %93, i32 0, i32 9
  %95 = load i32, i32* %94, align 4
  %96 = icmp ne i32 %95, 0
  br i1 %96, label %97, label %108

97:                                               ; preds = %92
  %98 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %99 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %98, i32 0, i32 20
  %100 = load i32, i32* %99, align 4
  %101 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %102 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %101, i32 0, i32 2
  %103 = load i32, i32* %102, align 8
  %104 = icmp ult i32 %100, %103
  br i1 %104, label %105, label %108

105:                                              ; preds = %97
  %106 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %107 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %106, i32 0, i32 26
  store i32 (%struct.gs_show_enum_s*)* @continue_show, i32 (%struct.gs_show_enum_s*)** %107, align 8
  store i32 2, i32* %2, align 4
  br label %109

108:                                              ; preds = %97, %92
  store i32 0, i32* %2, align 4
  br label %109

109:                                              ; preds = %108, %105, %90
  %110 = load i32, i32* %2, align 4
  ret i32 %110
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @continue_show_update(%struct.gs_show_enum_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.gs_show_enum_s*, align 8
  %4 = alloca i32, align 4
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %3, align 8
  %5 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %6 = call i32 @show_update(%struct.gs_show_enum_s* %5)
  store i32 %6, i32* %4, align 4
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %9, label %11

9:                                                ; preds = %1
  %10 = load i32, i32* %4, align 4
  store i32 %10, i32* %2, align 4
  br label %21

11:                                               ; preds = %1
  %12 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %13 = call i32 @show_move(%struct.gs_show_enum_s* %12)
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %4, align 4
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %11
  %17 = load i32, i32* %4, align 4
  store i32 %17, i32* %2, align 4
  br label %21

18:                                               ; preds = %11
  %19 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %20 = call i32 @show_proceed(%struct.gs_show_enum_s* %19)
  store i32 %20, i32* %2, align 4
  br label %21

21:                                               ; preds = %18, %16, %9
  %22 = load i32, i32* %2, align 4
  ret i32 %22
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @show_update(%struct.gs_show_enum_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.gs_show_enum_s*, align 8
  %4 = alloca %struct.gs_state_s*, align 8
  %5 = alloca %struct.cached_char_s*, align 8
  %6 = alloca i32, align 4
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %3, align 8
  %7 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %8 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %7, i32 0, i32 0
  %9 = load %struct.gs_state_s*, %struct.gs_state_s** %8, align 8
  store %struct.gs_state_s* %9, %struct.gs_state_s** %4, align 8
  %10 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %11 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %10, i32 0, i32 24
  %12 = load i32, i32* %11, align 8
  switch i32 %12, label %39 [
    i32 0, label %13
    i32 1, label %14
    i32 2, label %38
  ]

13:                                               ; preds = %1
  store i32 -23, i32* %2, align 4
  br label %42

14:                                               ; preds = %1
  %15 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %16 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %15, i32 0, i32 22
  %17 = load %struct.cached_char_s*, %struct.cached_char_s** %16, align 8
  store %struct.cached_char_s* %17, %struct.cached_char_s** %5, align 8
  %18 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %19 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %18, i32 0, i32 16
  %20 = load %struct.gs_font_s*, %struct.gs_font_s** %19, align 8
  %21 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %20, i32 0, i32 3
  %22 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %21, align 8
  %23 = load %struct.cached_char_s*, %struct.cached_char_s** %5, align 8
  %24 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %25 = call %struct.cached_fm_pair_s* @gx_lookup_fm_pair(%struct.gs_state_s* %24)
  call void @gx_add_cached_char(%struct.gs_font_dir_s* %22, %struct.cached_char_s* %23, %struct.cached_fm_pair_s* %25)
  %26 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %27 = call i32 @gs_grestore(%struct.gs_state_s* %26)
  %28 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %29 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %28, i32 0, i32 25
  store i32 0, i32* %29, align 4
  %30 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %31 = load %struct.cached_char_s*, %struct.cached_char_s** %5, align 8
  %32 = call i32 @gx_copy_cached_char(%struct.gs_show_enum_s* %30, %struct.cached_char_s* %31)
  store i32 %32, i32* %6, align 4
  %33 = load i32, i32* %6, align 4
  %34 = icmp slt i32 %33, 0
  br i1 %34, label %35, label %37

35:                                               ; preds = %14
  %36 = load i32, i32* %6, align 4
  store i32 %36, i32* %2, align 4
  br label %42

37:                                               ; preds = %14
  br label %38

38:                                               ; preds = %37, %1
  br label %39

39:                                               ; preds = %38, %1
  %40 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %41 = call i32 @gs_grestore(%struct.gs_state_s* %40)
  store i32 0, i32* %2, align 4
  br label %42

42:                                               ; preds = %39, %35, %13
  %43 = load i32, i32* %2, align 4
  ret i32 %43
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_show_n_init(%struct.gs_show_enum_s* %0, %struct.gs_state_s* %1, i8* %2, i32 %3) #0 {
  %5 = alloca %struct.gs_show_enum_s*, align 8
  %6 = alloca %struct.gs_state_s*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %5, align 8
  store %struct.gs_state_s* %1, %struct.gs_state_s** %6, align 8
  store i8* %2, i8** %7, align 8
  store i32 %3, i32* %8, align 4
  %9 = load i32, i32* %8, align 4
  %10 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %11 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %10, i32 0, i32 2
  store i32 %9, i32* %11, align 8
  %12 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %13 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %12, i32 0, i32 10
  store i32 0, i32* %13, align 8
  %14 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %15 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %16 = load i8*, i8** %7, align 8
  %17 = call i32 @show_setup(%struct.gs_show_enum_s* %14, %struct.gs_state_s* %15, i8* %16)
  ret i32 %17
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_ashow_init(%struct.gs_show_enum_s* %0, %struct.gs_state_s* %1, double %2, double %3, i8* %4) #0 {
  %6 = alloca %struct.gs_show_enum_s*, align 8
  %7 = alloca %struct.gs_state_s*, align 8
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i32, align 4
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %6, align 8
  store %struct.gs_state_s* %1, %struct.gs_state_s** %7, align 8
  store double %2, double* %8, align 8
  store double %3, double* %9, align 8
  store i8* %4, i8** %10, align 8
  %12 = load i8*, i8** %10, align 8
  %13 = call i64 @strlen(i8* %12) #11
  %14 = trunc i64 %13 to i32
  %15 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %6, align 8
  %16 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %15, i32 0, i32 2
  store i32 %14, i32* %16, align 8
  %17 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %6, align 8
  %18 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  %19 = load i8*, i8** %10, align 8
  %20 = call i32 @show_setup(%struct.gs_show_enum_s* %17, %struct.gs_state_s* %18, i8* %19)
  store i32 %20, i32* %11, align 4
  %21 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %6, align 8
  %22 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %21, i32 0, i32 8
  store i32 1, i32* %22, align 8
  %23 = load double, double* %8, align 8
  %24 = fptrunc double %23 to float
  %25 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %6, align 8
  %26 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %25, i32 0, i32 6
  store float %24, float* %26, align 8
  %27 = load double, double* %9, align 8
  %28 = fptrunc double %27 to float
  %29 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %6, align 8
  %30 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %29, i32 0, i32 7
  store float %28, float* %30, align 4
  %31 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %6, align 8
  %32 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %31, i32 0, i32 10
  store i32 1, i32* %32, align 8
  %33 = load i32, i32* %11, align 4
  ret i32 %33
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_ashow_n_init(%struct.gs_show_enum_s* %0, %struct.gs_state_s* %1, double %2, double %3, i8* %4, i32 %5) #0 {
  %7 = alloca %struct.gs_show_enum_s*, align 8
  %8 = alloca %struct.gs_state_s*, align 8
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %7, align 8
  store %struct.gs_state_s* %1, %struct.gs_state_s** %8, align 8
  store double %2, double* %9, align 8
  store double %3, double* %10, align 8
  store i8* %4, i8** %11, align 8
  store i32 %5, i32* %12, align 4
  %14 = load i32, i32* %12, align 4
  %15 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %7, align 8
  %16 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %15, i32 0, i32 2
  store i32 %14, i32* %16, align 8
  %17 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %7, align 8
  %18 = load %struct.gs_state_s*, %struct.gs_state_s** %8, align 8
  %19 = load i8*, i8** %11, align 8
  %20 = call i32 @show_setup(%struct.gs_show_enum_s* %17, %struct.gs_state_s* %18, i8* %19)
  store i32 %20, i32* %13, align 4
  %21 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %7, align 8
  %22 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %21, i32 0, i32 8
  store i32 1, i32* %22, align 8
  %23 = load double, double* %9, align 8
  %24 = fptrunc double %23 to float
  %25 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %7, align 8
  %26 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %25, i32 0, i32 6
  store float %24, float* %26, align 8
  %27 = load double, double* %10, align 8
  %28 = fptrunc double %27 to float
  %29 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %7, align 8
  %30 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %29, i32 0, i32 7
  store float %28, float* %30, align 4
  %31 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %7, align 8
  %32 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %31, i32 0, i32 10
  store i32 1, i32* %32, align 8
  %33 = load i32, i32* %13, align 4
  ret i32 %33
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_widthshow_init(%struct.gs_show_enum_s* %0, %struct.gs_state_s* %1, double %2, double %3, i8 signext %4, i8* %5) #0 {
  %7 = alloca %struct.gs_show_enum_s*, align 8
  %8 = alloca %struct.gs_state_s*, align 8
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca i8, align 1
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %7, align 8
  store %struct.gs_state_s* %1, %struct.gs_state_s** %8, align 8
  store double %2, double* %9, align 8
  store double %3, double* %10, align 8
  store i8 %4, i8* %11, align 1
  store i8* %5, i8** %12, align 8
  %14 = load i8*, i8** %12, align 8
  %15 = call i64 @strlen(i8* %14) #11
  %16 = trunc i64 %15 to i32
  %17 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %7, align 8
  %18 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %17, i32 0, i32 2
  store i32 %16, i32* %18, align 8
  %19 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %7, align 8
  %20 = load %struct.gs_state_s*, %struct.gs_state_s** %8, align 8
  %21 = load i8*, i8** %12, align 8
  %22 = call i32 @show_setup(%struct.gs_show_enum_s* %19, %struct.gs_state_s* %20, i8* %21)
  store i32 %22, i32* %13, align 4
  %23 = load i8, i8* %11, align 1
  %24 = sext i8 %23 to i32
  %25 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %7, align 8
  %26 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %25, i32 0, i32 5
  store i32 %24, i32* %26, align 4
  %27 = load double, double* %9, align 8
  %28 = fptrunc double %27 to float
  %29 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %7, align 8
  %30 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %29, i32 0, i32 3
  store float %28, float* %30, align 4
  %31 = load double, double* %10, align 8
  %32 = fptrunc double %31 to float
  %33 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %7, align 8
  %34 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %33, i32 0, i32 4
  store float %32, float* %34, align 8
  %35 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %7, align 8
  %36 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %35, i32 0, i32 10
  store i32 1, i32* %36, align 8
  %37 = load i32, i32* %13, align 4
  ret i32 %37
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_widthshow_n_init(%struct.gs_show_enum_s* %0, %struct.gs_state_s* %1, double %2, double %3, i8 signext %4, i8* %5, i32 %6) #0 {
  %8 = alloca %struct.gs_show_enum_s*, align 8
  %9 = alloca %struct.gs_state_s*, align 8
  %10 = alloca double, align 8
  %11 = alloca double, align 8
  %12 = alloca i8, align 1
  %13 = alloca i8*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %8, align 8
  store %struct.gs_state_s* %1, %struct.gs_state_s** %9, align 8
  store double %2, double* %10, align 8
  store double %3, double* %11, align 8
  store i8 %4, i8* %12, align 1
  store i8* %5, i8** %13, align 8
  store i32 %6, i32* %14, align 4
  %16 = load i32, i32* %14, align 4
  %17 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %8, align 8
  %18 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %17, i32 0, i32 2
  store i32 %16, i32* %18, align 8
  %19 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %8, align 8
  %20 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  %21 = load i8*, i8** %13, align 8
  %22 = call i32 @show_setup(%struct.gs_show_enum_s* %19, %struct.gs_state_s* %20, i8* %21)
  store i32 %22, i32* %15, align 4
  %23 = load i8, i8* %12, align 1
  %24 = sext i8 %23 to i32
  %25 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %8, align 8
  %26 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %25, i32 0, i32 5
  store i32 %24, i32* %26, align 4
  %27 = load double, double* %10, align 8
  %28 = fptrunc double %27 to float
  %29 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %8, align 8
  %30 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %29, i32 0, i32 3
  store float %28, float* %30, align 4
  %31 = load double, double* %11, align 8
  %32 = fptrunc double %31 to float
  %33 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %8, align 8
  %34 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %33, i32 0, i32 4
  store float %32, float* %34, align 8
  %35 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %8, align 8
  %36 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %35, i32 0, i32 10
  store i32 1, i32* %36, align 8
  %37 = load i32, i32* %15, align 4
  ret i32 %37
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_awidthshow_init(%struct.gs_show_enum_s* %0, %struct.gs_state_s* %1, double %2, double %3, i8 signext %4, double %5, double %6, i8* %7) #0 {
  %9 = alloca %struct.gs_show_enum_s*, align 8
  %10 = alloca %struct.gs_state_s*, align 8
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca i8, align 1
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i32, align 4
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %9, align 8
  store %struct.gs_state_s* %1, %struct.gs_state_s** %10, align 8
  store double %2, double* %11, align 8
  store double %3, double* %12, align 8
  store i8 %4, i8* %13, align 1
  store double %5, double* %14, align 8
  store double %6, double* %15, align 8
  store i8* %7, i8** %16, align 8
  %18 = load i8*, i8** %16, align 8
  %19 = call i64 @strlen(i8* %18) #11
  %20 = trunc i64 %19 to i32
  %21 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %9, align 8
  %22 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %21, i32 0, i32 2
  store i32 %20, i32* %22, align 8
  %23 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %9, align 8
  %24 = load %struct.gs_state_s*, %struct.gs_state_s** %10, align 8
  %25 = load i8*, i8** %16, align 8
  %26 = call i32 @show_setup(%struct.gs_show_enum_s* %23, %struct.gs_state_s* %24, i8* %25)
  store i32 %26, i32* %17, align 4
  %27 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %9, align 8
  %28 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %27, i32 0, i32 8
  store i32 1, i32* %28, align 8
  %29 = load double, double* %14, align 8
  %30 = fptrunc double %29 to float
  %31 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %9, align 8
  %32 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %31, i32 0, i32 6
  store float %30, float* %32, align 8
  %33 = load double, double* %15, align 8
  %34 = fptrunc double %33 to float
  %35 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %9, align 8
  %36 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %35, i32 0, i32 7
  store float %34, float* %36, align 4
  %37 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %9, align 8
  %38 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %37, i32 0, i32 10
  store i32 1, i32* %38, align 8
  %39 = load i8, i8* %13, align 1
  %40 = sext i8 %39 to i32
  %41 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %9, align 8
  %42 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %41, i32 0, i32 5
  store i32 %40, i32* %42, align 4
  %43 = load double, double* %11, align 8
  %44 = fptrunc double %43 to float
  %45 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %9, align 8
  %46 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %45, i32 0, i32 3
  store float %44, float* %46, align 4
  %47 = load double, double* %12, align 8
  %48 = fptrunc double %47 to float
  %49 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %9, align 8
  %50 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %49, i32 0, i32 4
  store float %48, float* %50, align 8
  %51 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %9, align 8
  %52 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %51, i32 0, i32 10
  store i32 1, i32* %52, align 8
  %53 = load i32, i32* %17, align 4
  ret i32 %53
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_awidthshow_n_init(%struct.gs_show_enum_s* %0, %struct.gs_state_s* %1, double %2, double %3, i8 signext %4, double %5, double %6, i8* %7, i32 %8) #0 {
  %10 = alloca %struct.gs_show_enum_s*, align 8
  %11 = alloca %struct.gs_state_s*, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca i8, align 1
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %10, align 8
  store %struct.gs_state_s* %1, %struct.gs_state_s** %11, align 8
  store double %2, double* %12, align 8
  store double %3, double* %13, align 8
  store i8 %4, i8* %14, align 1
  store double %5, double* %15, align 8
  store double %6, double* %16, align 8
  store i8* %7, i8** %17, align 8
  store i32 %8, i32* %18, align 4
  %20 = load i32, i32* %18, align 4
  %21 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %10, align 8
  %22 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %21, i32 0, i32 2
  store i32 %20, i32* %22, align 8
  %23 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %10, align 8
  %24 = load %struct.gs_state_s*, %struct.gs_state_s** %11, align 8
  %25 = load i8*, i8** %17, align 8
  %26 = call i32 @show_setup(%struct.gs_show_enum_s* %23, %struct.gs_state_s* %24, i8* %25)
  store i32 %26, i32* %19, align 4
  %27 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %10, align 8
  %28 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %27, i32 0, i32 8
  store i32 1, i32* %28, align 8
  %29 = load double, double* %15, align 8
  %30 = fptrunc double %29 to float
  %31 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %10, align 8
  %32 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %31, i32 0, i32 6
  store float %30, float* %32, align 8
  %33 = load double, double* %16, align 8
  %34 = fptrunc double %33 to float
  %35 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %10, align 8
  %36 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %35, i32 0, i32 7
  store float %34, float* %36, align 4
  %37 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %10, align 8
  %38 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %37, i32 0, i32 10
  store i32 1, i32* %38, align 8
  %39 = load i8, i8* %14, align 1
  %40 = sext i8 %39 to i32
  %41 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %10, align 8
  %42 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %41, i32 0, i32 5
  store i32 %40, i32* %42, align 4
  %43 = load double, double* %12, align 8
  %44 = fptrunc double %43 to float
  %45 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %10, align 8
  %46 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %45, i32 0, i32 3
  store float %44, float* %46, align 4
  %47 = load double, double* %13, align 8
  %48 = fptrunc double %47 to float
  %49 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %10, align 8
  %50 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %49, i32 0, i32 4
  store float %48, float* %50, align 8
  %51 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %10, align 8
  %52 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %51, i32 0, i32 10
  store i32 1, i32* %52, align 8
  %53 = load i32, i32* %19, align 4
  ret i32 %53
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_kshow_init(%struct.gs_show_enum_s* %0, %struct.gs_state_s* %1, i8* %2) #0 {
  %4 = alloca %struct.gs_show_enum_s*, align 8
  %5 = alloca %struct.gs_state_s*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %4, align 8
  store %struct.gs_state_s* %1, %struct.gs_state_s** %5, align 8
  store i8* %2, i8** %6, align 8
  %8 = load i8*, i8** %6, align 8
  %9 = call i64 @strlen(i8* %8) #11
  %10 = trunc i64 %9 to i32
  %11 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %4, align 8
  %12 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %11, i32 0, i32 2
  store i32 %10, i32* %12, align 8
  %13 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %4, align 8
  %14 = load %struct.gs_state_s*, %struct.gs_state_s** %5, align 8
  %15 = load i8*, i8** %6, align 8
  %16 = call i32 @show_setup(%struct.gs_show_enum_s* %13, %struct.gs_state_s* %14, i8* %15)
  store i32 %16, i32* %7, align 4
  %17 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %4, align 8
  %18 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %17, i32 0, i32 10
  store i32 1, i32* %18, align 8
  %19 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %4, align 8
  %20 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %19, i32 0, i32 9
  store i32 1, i32* %20, align 4
  %21 = load i32, i32* %7, align 4
  ret i32 %21
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_kshow_n_init(%struct.gs_show_enum_s* %0, %struct.gs_state_s* %1, i8* %2, i32 %3) #0 {
  %5 = alloca %struct.gs_show_enum_s*, align 8
  %6 = alloca %struct.gs_state_s*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %5, align 8
  store %struct.gs_state_s* %1, %struct.gs_state_s** %6, align 8
  store i8* %2, i8** %7, align 8
  store i32 %3, i32* %8, align 4
  %10 = load i32, i32* %8, align 4
  %11 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %12 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %11, i32 0, i32 2
  store i32 %10, i32* %12, align 8
  %13 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %14 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %15 = load i8*, i8** %7, align 8
  %16 = call i32 @show_setup(%struct.gs_show_enum_s* %13, %struct.gs_state_s* %14, i8* %15)
  store i32 %16, i32* %9, align 4
  %17 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %18 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %17, i32 0, i32 10
  store i32 1, i32* %18, align 8
  %19 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %20 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %19, i32 0, i32 9
  store i32 1, i32* %20, align 4
  %21 = load i32, i32* %9, align 4
  ret i32 %21
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_stringwidth_init(%struct.gs_show_enum_s* %0, %struct.gs_state_s* %1, i8* %2) #0 {
  %4 = alloca %struct.gs_show_enum_s*, align 8
  %5 = alloca %struct.gs_state_s*, align 8
  %6 = alloca i8*, align 8
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %4, align 8
  store %struct.gs_state_s* %1, %struct.gs_state_s** %5, align 8
  store i8* %2, i8** %6, align 8
  %7 = load i8*, i8** %6, align 8
  %8 = call i64 @strlen(i8* %7) #11
  %9 = trunc i64 %8 to i32
  %10 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %4, align 8
  %11 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %10, i32 0, i32 2
  store i32 %9, i32* %11, align 8
  %12 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %4, align 8
  %13 = load %struct.gs_state_s*, %struct.gs_state_s** %5, align 8
  %14 = load i8*, i8** %6, align 8
  %15 = call i32 @stringwidth_setup(%struct.gs_show_enum_s* %12, %struct.gs_state_s* %13, i8* %14)
  ret i32 %15
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @stringwidth_setup(%struct.gs_show_enum_s* %0, %struct.gs_state_s* %1, i8* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.gs_show_enum_s*, align 8
  %6 = alloca %struct.gs_state_s*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca %struct.timeval, align 8
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %5, align 8
  store %struct.gs_state_s* %1, %struct.gs_state_s** %6, align 8
  store i8* %2, i8** %7, align 8
  %10 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %11 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %12 = load i8*, i8** %7, align 8
  %13 = call i32 @show_setup(%struct.gs_show_enum_s* %10, %struct.gs_state_s* %11, i8* %12)
  store i32 %13, i32* %8, align 4
  %14 = load i32, i32* %8, align 4
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %3
  %17 = load i32, i32* %8, align 4
  store i32 %17, i32* %4, align 4
  br label %48

18:                                               ; preds = %3
  %19 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %20 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %19, i32 0, i32 26
  store i32 (%struct.gs_show_enum_s*)* @continue_stringwidth, i32 (%struct.gs_show_enum_s*)** %20, align 8
  %21 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %22 = call i32 @gs_gsave(%struct.gs_state_s* %21)
  store i32 %22, i32* %8, align 4
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %18
  %25 = load i32, i32* %8, align 4
  store i32 %25, i32* %4, align 4
  br label %48

26:                                               ; preds = %18
  %27 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %28 = call i32 (%struct.gs_state_s*, ...) bitcast (void (%struct.gs_state_s*)* @gx_device_no_output to i32 (%struct.gs_state_s*, ...)*)(%struct.gs_state_s* %27)
  %29 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %30 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %29, i32 0, i32 7
  %31 = load %struct.gx_path_s*, %struct.gx_path_s** %30, align 8
  %32 = call i32 @gx_path_current_point(%struct.gx_path_s* %31, %struct.timeval* %9)
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %34, label %47

34:                                               ; preds = %26
  %35 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %36 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %35, i32 0, i32 7
  %37 = load %struct.gx_path_s*, %struct.gx_path_s** %36, align 8
  %38 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %39 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %38, i32 0, i32 2
  %40 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %39, i32 0, i32 12
  %41 = load i64, i64* %40, align 8
  %42 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %43 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %42, i32 0, i32 2
  %44 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %43, i32 0, i32 13
  %45 = load i64, i64* %44, align 8
  %46 = call i32 @gx_path_add_point(%struct.gx_path_s* %37, i64 %41, i64 %45)
  br label %47

47:                                               ; preds = %34, %26
  store i32 0, i32* %4, align 4
  br label %48

48:                                               ; preds = %47, %24, %16
  %49 = load i32, i32* %4, align 4
  ret i32 %49
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @continue_stringwidth(%struct.gs_show_enum_s* %0) #0 {
  %2 = alloca %struct.gs_show_enum_s*, align 8
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %2, align 8
  %3 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %2, align 8
  %4 = call i32 @stringwidth_proceed(%struct.gs_show_enum_s* %3)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @stringwidth_proceed(%struct.gs_show_enum_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.gs_show_enum_s*, align 8
  %4 = alloca %struct.gs_state_s*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.cached_fm_pair_s*, align 8
  %8 = alloca i8, align 1
  %9 = alloca i32, align 4
  %10 = alloca %struct.gs_point_s, align 4
  %11 = alloca %struct.gs_point_s, align 4
  %12 = alloca %struct.cached_char_s*, align 8
  %13 = alloca %struct.timeval, align 8
  %14 = alloca %struct.gs_font_s*, align 8
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %3, align 8
  %15 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %16 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %15, i32 0, i32 0
  %17 = load %struct.gs_state_s*, %struct.gs_state_s** %16, align 8
  store %struct.gs_state_s* %17, %struct.gs_state_s** %4, align 8
  %18 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %19 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %18, i32 0, i32 1
  %20 = load i8*, i8** %19, align 8
  store i8* %20, i8** %5, align 8
  store %struct.cached_fm_pair_s* null, %struct.cached_fm_pair_s** %7, align 8
  br label %21

21:                                               ; preds = %184, %97, %1
  %22 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %23 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %22, i32 0, i32 20
  %24 = load i32, i32* %23, align 4
  %25 = add i32 %24, 1
  store i32 %25, i32* %23, align 4
  store i32 %24, i32* %6, align 4
  %26 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %27 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %26, i32 0, i32 2
  %28 = load i32, i32* %27, align 8
  %29 = icmp eq i32 %24, %28
  br i1 %29, label %30, label %58

30:                                               ; preds = %21
  %31 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %32 = call i32 (%struct.gs_state_s*, %struct.gs_point_s*, ...) bitcast (i32 (%struct.gs_state_s*, %struct.gs_point_s*)* @gs_currentpoint to i32 (%struct.gs_state_s*, %struct.gs_point_s*, ...)*)(%struct.gs_state_s* %31, %struct.gs_point_s* %10)
  %33 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %34 = call i32 @gs_grestore(%struct.gs_state_s* %33)
  %35 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %36 = call i32 (%struct.gs_state_s*, %struct.gs_point_s*, ...) bitcast (i32 (%struct.gs_state_s*, %struct.gs_point_s*)* @gs_currentpoint to i32 (%struct.gs_state_s*, %struct.gs_point_s*, ...)*)(%struct.gs_state_s* %35, %struct.gs_point_s* %11)
  %37 = icmp eq i32 %36, -14
  br i1 %37, label %38, label %41

38:                                               ; preds = %30
  %39 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %11, i32 0, i32 0
  store float 0.000000e+00, float* %39, align 4
  %40 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %11, i32 0, i32 1
  store float 0.000000e+00, float* %40, align 4
  br label %41

41:                                               ; preds = %38, %30
  %42 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %10, i32 0, i32 0
  %43 = load float, float* %42, align 4
  %44 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %11, i32 0, i32 0
  %45 = load float, float* %44, align 4
  %46 = fsub float %43, %45
  %47 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %48 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %47, i32 0, i32 23
  %49 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %48, i32 0, i32 0
  store float %46, float* %49, align 8
  %50 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %10, i32 0, i32 1
  %51 = load float, float* %50, align 4
  %52 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %11, i32 0, i32 1
  %53 = load float, float* %52, align 4
  %54 = fsub float %51, %53
  %55 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %56 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %55, i32 0, i32 23
  %57 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %56, i32 0, i32 1
  store float %54, float* %57, align 4
  store i32 0, i32* %2, align 4
  br label %186

58:                                               ; preds = %21
  %59 = load i8*, i8** %5, align 8
  %60 = load i32, i32* %6, align 4
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds i8, i8* %59, i64 %61
  %63 = load i8, i8* %62, align 1
  store i8 %63, i8* %8, align 1
  %64 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %65 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %64, i32 0, i32 12
  %66 = load i32, i32* %65, align 8
  %67 = icmp ne i32 %66, 0
  br i1 %67, label %68, label %99

68:                                               ; preds = %58
  %69 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %7, align 8
  %70 = icmp eq %struct.cached_fm_pair_s* %69, null
  br i1 %70, label %71, label %74

71:                                               ; preds = %68
  %72 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %73 = call %struct.cached_fm_pair_s* @gx_lookup_fm_pair(%struct.gs_state_s* %72)
  store %struct.cached_fm_pair_s* %73, %struct.cached_fm_pair_s** %7, align 8
  br label %74

74:                                               ; preds = %71, %68
  %75 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %76 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %7, align 8
  %77 = load i8, i8* %8, align 1
  %78 = zext i8 %77 to i32
  %79 = call %struct.cached_char_s* @gx_lookup_cached_char(%struct.gs_state_s* %75, %struct.cached_fm_pair_s* %76, i32 %78)
  store %struct.cached_char_s* %79, %struct.cached_char_s** %12, align 8
  %80 = load %struct.cached_char_s*, %struct.cached_char_s** %12, align 8
  %81 = icmp ne %struct.cached_char_s* %80, null
  br i1 %81, label %82, label %98

82:                                               ; preds = %74
  %83 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %84 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %83, i32 0, i32 21
  %85 = load %struct.cached_char_s*, %struct.cached_char_s** %12, align 8
  %86 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %85, i32 0, i32 6
  %87 = bitcast %struct.timeval* %84 to i8*
  %88 = bitcast %struct.timeval* %86 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %87, i8* align 8 %88, i64 16, i1 false)
  %89 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %90 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %89, i32 0, i32 24
  store i32 2, i32* %90, align 8
  %91 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %92 = call i32 @stringwidth_move(%struct.gs_show_enum_s* %91)
  store i32 %92, i32* %9, align 4
  %93 = load i32, i32* %9, align 4
  %94 = icmp ne i32 %93, 0
  br i1 %94, label %95, label %97

95:                                               ; preds = %82
  %96 = load i32, i32* %9, align 4
  store i32 %96, i32* %2, align 4
  br label %186

97:                                               ; preds = %82
  br label %21

98:                                               ; preds = %74
  br label %99

99:                                               ; preds = %98, %58
  %100 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %101 = call i32 @gs_gsave(%struct.gs_state_s* %100)
  store i32 %101, i32* %9, align 4
  %102 = icmp slt i32 %101, 0
  br i1 %102, label %103, label %105

103:                                              ; preds = %99
  %104 = load i32, i32* %9, align 4
  store i32 %104, i32* %2, align 4
  br label %186

105:                                              ; preds = %99
  %106 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %107 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %106, i32 0, i32 7
  %108 = load %struct.gx_path_s*, %struct.gx_path_s** %107, align 8
  %109 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %108, i32 0, i32 10
  %110 = load i8, i8* %109, align 8
  %111 = icmp ne i8 %110, 0
  br i1 %111, label %113, label %112

112:                                              ; preds = %105
  br label %128

113:                                              ; preds = %105
  %114 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %115 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %114, i32 0, i32 7
  %116 = load %struct.gx_path_s*, %struct.gx_path_s** %115, align 8
  %117 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %116, i32 0, i32 9
  %118 = getelementptr inbounds %struct.timeval, %struct.timeval* %117, i32 0, i32 0
  %119 = load i64, i64* %118, align 8
  %120 = getelementptr inbounds %struct.timeval, %struct.timeval* %13, i32 0, i32 0
  store i64 %119, i64* %120, align 8
  %121 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %122 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %121, i32 0, i32 7
  %123 = load %struct.gx_path_s*, %struct.gx_path_s** %122, align 8
  %124 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %123, i32 0, i32 9
  %125 = getelementptr inbounds %struct.timeval, %struct.timeval* %124, i32 0, i32 1
  %126 = load i64, i64* %125, align 8
  %127 = getelementptr inbounds %struct.timeval, %struct.timeval* %13, i32 0, i32 1
  store i64 %126, i64* %127, align 8
  br label %128

128:                                              ; preds = %113, %112
  %129 = phi i32 [ -14, %112 ], [ 0, %113 ]
  store i32 %129, i32* %9, align 4
  %130 = icmp slt i32 %129, 0
  br i1 %130, label %131, label %133

131:                                              ; preds = %128
  %132 = load i32, i32* %9, align 4
  store i32 %132, i32* %2, align 4
  br label %186

133:                                              ; preds = %128
  %134 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %135 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %136 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %135, i32 0, i32 17
  %137 = call i32 (%struct.gs_state_s*, %struct.gs_matrix_s*, ...) bitcast (i32 (%struct.gs_state_s*, %struct.gs_matrix_s*)* @gs_setmatrix to i32 (%struct.gs_state_s*, %struct.gs_matrix_s*, ...)*)(%struct.gs_state_s* %134, %struct.gs_matrix_s* %136)
  %138 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %139 = getelementptr inbounds %struct.timeval, %struct.timeval* %13, i32 0, i32 0
  %140 = load i64, i64* %139, align 8
  %141 = getelementptr inbounds %struct.timeval, %struct.timeval* %13, i32 0, i32 1
  %142 = load i64, i64* %141, align 8
  %143 = call i32 (%struct.gs_state_s*, i64, i64, ...) bitcast (i32 (%struct.gs_state_s*, i64, i64)* @gs_translate_to_fixed to i32 (%struct.gs_state_s*, i64, i64, ...)*)(%struct.gs_state_s* %138, i64 %140, i64 %142)
  %144 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %145 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %144, i32 0, i32 24
  store i32 0, i32* %145, align 8
  %146 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %147 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %146, i32 0, i32 26
  store i32 (%struct.gs_show_enum_s*)* @continue_stringwidth_update, i32 (%struct.gs_show_enum_s*)** %147, align 8
  %148 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %149 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %148, i32 0, i32 16
  %150 = load %struct.gs_font_s*, %struct.gs_font_s** %149, align 8
  store %struct.gs_font_s* %150, %struct.gs_font_s** %14, align 8
  %151 = load %struct.gs_font_s*, %struct.gs_font_s** %14, align 8
  %152 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %151, i32 0, i32 13
  %153 = load i32 (%struct.gs_show_enum_s*, %struct.gs_state_s*, %struct.gs_font_s*, i32, i8*)*, i32 (%struct.gs_show_enum_s*, %struct.gs_state_s*, %struct.gs_font_s*, i32, i8*)** %152, align 8
  %154 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %155 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %156 = load %struct.gs_font_s*, %struct.gs_font_s** %14, align 8
  %157 = load i8, i8* %8, align 1
  %158 = zext i8 %157 to i32
  %159 = load %struct.gs_font_s*, %struct.gs_font_s** %14, align 8
  %160 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %159, i32 0, i32 14
  %161 = load i8*, i8** %160, align 8
  %162 = call i32 %153(%struct.gs_show_enum_s* %154, %struct.gs_state_s* %155, %struct.gs_font_s* %156, i32 %158, i8* %161)
  store i32 %162, i32* %9, align 4
  %163 = load i32, i32* %9, align 4
  %164 = icmp slt i32 %163, 0
  br i1 %164, label %165, label %167

165:                                              ; preds = %133
  %166 = load i32, i32* %9, align 4
  store i32 %166, i32* %2, align 4
  br label %186

167:                                              ; preds = %133
  %168 = load i32, i32* %9, align 4
  %169 = icmp eq i32 %168, 0
  br i1 %169, label %170, label %185

170:                                              ; preds = %167
  %171 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %172 = call i32 @stringwidth_update(%struct.gs_show_enum_s* %171)
  store i32 %172, i32* %9, align 4
  %173 = load i32, i32* %9, align 4
  %174 = icmp slt i32 %173, 0
  br i1 %174, label %175, label %177

175:                                              ; preds = %170
  %176 = load i32, i32* %9, align 4
  store i32 %176, i32* %2, align 4
  br label %186

177:                                              ; preds = %170
  %178 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %179 = call i32 @stringwidth_move(%struct.gs_show_enum_s* %178)
  store i32 %179, i32* %9, align 4
  %180 = load i32, i32* %9, align 4
  %181 = icmp ne i32 %180, 0
  br i1 %181, label %182, label %184

182:                                              ; preds = %177
  %183 = load i32, i32* %9, align 4
  store i32 %183, i32* %2, align 4
  br label %186

184:                                              ; preds = %177
  br label %21

185:                                              ; preds = %167
  store i32 1, i32* %2, align 4
  br label %186

186:                                              ; preds = %185, %182, %175, %165, %131, %103, %95, %41
  %187 = load i32, i32* %2, align 4
  ret i32 %187
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @stringwidth_move(%struct.gs_show_enum_s* %0) #0 {
  %2 = alloca %struct.gs_show_enum_s*, align 8
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %2, align 8
  %3 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %2, align 8
  %4 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %3, i32 0, i32 0
  %5 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %6 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %5, i32 0, i32 7
  %7 = load %struct.gx_path_s*, %struct.gx_path_s** %6, align 8
  %8 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %7, i32 0, i32 10
  %9 = load i8, i8* %8, align 8
  %10 = icmp ne i8 %9, 0
  br i1 %10, label %12, label %11

11:                                               ; preds = %1
  br label %45

12:                                               ; preds = %1
  %13 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %2, align 8
  %14 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %13, i32 0, i32 21
  %15 = getelementptr inbounds %struct.timeval, %struct.timeval* %14, i32 0, i32 0
  %16 = load i64, i64* %15, align 8
  %17 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %2, align 8
  %18 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %17, i32 0, i32 0
  %19 = load %struct.gs_state_s*, %struct.gs_state_s** %18, align 8
  %20 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %19, i32 0, i32 7
  %21 = load %struct.gx_path_s*, %struct.gx_path_s** %20, align 8
  %22 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %21, i32 0, i32 9
  %23 = getelementptr inbounds %struct.timeval, %struct.timeval* %22, i32 0, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = add nsw i64 %24, %16
  store i64 %25, i64* %23, align 8
  %26 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %2, align 8
  %27 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %26, i32 0, i32 21
  %28 = getelementptr inbounds %struct.timeval, %struct.timeval* %27, i32 0, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %2, align 8
  %31 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %30, i32 0, i32 0
  %32 = load %struct.gs_state_s*, %struct.gs_state_s** %31, align 8
  %33 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %32, i32 0, i32 7
  %34 = load %struct.gx_path_s*, %struct.gx_path_s** %33, align 8
  %35 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %34, i32 0, i32 9
  %36 = getelementptr inbounds %struct.timeval, %struct.timeval* %35, i32 0, i32 1
  %37 = load i64, i64* %36, align 8
  %38 = add nsw i64 %37, %29
  store i64 %38, i64* %36, align 8
  %39 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %2, align 8
  %40 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %39, i32 0, i32 0
  %41 = load %struct.gs_state_s*, %struct.gs_state_s** %40, align 8
  %42 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %41, i32 0, i32 7
  %43 = load %struct.gx_path_s*, %struct.gx_path_s** %42, align 8
  %44 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %43, i32 0, i32 11
  store i8 0, i8* %44, align 1
  br label %45

45:                                               ; preds = %12, %11
  %46 = phi i32 [ -14, %11 ], [ 0, %12 ]
  ret i32 %46
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @continue_stringwidth_update(%struct.gs_show_enum_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.gs_show_enum_s*, align 8
  %4 = alloca i32, align 4
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %3, align 8
  %5 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %6 = call i32 @stringwidth_update(%struct.gs_show_enum_s* %5)
  store i32 %6, i32* %4, align 4
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %9, label %11

9:                                                ; preds = %1
  %10 = load i32, i32* %4, align 4
  store i32 %10, i32* %2, align 4
  br label %21

11:                                               ; preds = %1
  %12 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %13 = call i32 @stringwidth_move(%struct.gs_show_enum_s* %12)
  store i32 %13, i32* %4, align 4
  %14 = load i32, i32* %4, align 4
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %11
  %17 = load i32, i32* %4, align 4
  store i32 %17, i32* %2, align 4
  br label %21

18:                                               ; preds = %11
  %19 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %20 = call i32 @stringwidth_proceed(%struct.gs_show_enum_s* %19)
  store i32 %20, i32* %2, align 4
  br label %21

21:                                               ; preds = %18, %16, %9
  %22 = load i32, i32* %2, align 4
  ret i32 %22
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @stringwidth_update(%struct.gs_show_enum_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.gs_show_enum_s*, align 8
  %4 = alloca %struct.gs_state_s*, align 8
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %3, align 8
  %5 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %6 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %5, i32 0, i32 0
  %7 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  store %struct.gs_state_s* %7, %struct.gs_state_s** %4, align 8
  %8 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %9 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %8, i32 0, i32 24
  %10 = load i32, i32* %9, align 8
  switch i32 %10, label %26 [
    i32 0, label %11
    i32 1, label %12
    i32 2, label %25
  ]

11:                                               ; preds = %1
  store i32 -23, i32* %2, align 4
  br label %29

12:                                               ; preds = %1
  %13 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %14 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %13, i32 0, i32 16
  %15 = load %struct.gs_font_s*, %struct.gs_font_s** %14, align 8
  %16 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %15, i32 0, i32 3
  %17 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %16, align 8
  %18 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %19 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %18, i32 0, i32 22
  %20 = load %struct.cached_char_s*, %struct.cached_char_s** %19, align 8
  %21 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %22 = call %struct.cached_fm_pair_s* @gx_lookup_fm_pair(%struct.gs_state_s* %21)
  call void @gx_add_cached_char(%struct.gs_font_dir_s* %17, %struct.cached_char_s* %20, %struct.cached_fm_pair_s* %22)
  %23 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %24 = call i32 @gs_grestore(%struct.gs_state_s* %23)
  br label %25

25:                                               ; preds = %12, %1
  br label %26

26:                                               ; preds = %25, %1
  %27 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %28 = call i32 @gs_grestore(%struct.gs_state_s* %27)
  store i32 0, i32* %2, align 4
  br label %29

29:                                               ; preds = %26, %11
  %30 = load i32, i32* %2, align 4
  ret i32 %30
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_stringwidth_n_init(%struct.gs_show_enum_s* %0, %struct.gs_state_s* %1, i8* %2, i32 %3) #0 {
  %5 = alloca %struct.gs_show_enum_s*, align 8
  %6 = alloca %struct.gs_state_s*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %5, align 8
  store %struct.gs_state_s* %1, %struct.gs_state_s** %6, align 8
  store i8* %2, i8** %7, align 8
  store i32 %3, i32* %8, align 4
  %9 = load i32, i32* %8, align 4
  %10 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %11 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %10, i32 0, i32 2
  store i32 %9, i32* %11, align 8
  %12 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %13 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %14 = load i8*, i8** %7, align 8
  %15 = call i32 @stringwidth_setup(%struct.gs_show_enum_s* %12, %struct.gs_state_s* %13, i8* %14)
  ret i32 %15
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_charpath_init(%struct.gs_show_enum_s* %0, %struct.gs_state_s* %1, i8* %2, i32 %3) #0 {
  %5 = alloca %struct.gs_show_enum_s*, align 8
  %6 = alloca %struct.gs_state_s*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %5, align 8
  store %struct.gs_state_s* %1, %struct.gs_state_s** %6, align 8
  store i8* %2, i8** %7, align 8
  store i32 %3, i32* %8, align 4
  %10 = load i8*, i8** %7, align 8
  %11 = call i64 @strlen(i8* %10) #11
  %12 = trunc i64 %11 to i32
  %13 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %14 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %13, i32 0, i32 2
  store i32 %12, i32* %14, align 8
  %15 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %16 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %17 = load i8*, i8** %7, align 8
  %18 = call i32 @show_setup(%struct.gs_show_enum_s* %15, %struct.gs_state_s* %16, i8* %17)
  store i32 %18, i32* %9, align 4
  %19 = load i32, i32* %8, align 4
  %20 = icmp ne i32 %19, 0
  %21 = zext i1 %20 to i64
  %22 = select i1 %20, i32 2, i32 1
  %23 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %24 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %23, i32 0, i32 11
  store i32 %22, i32* %24, align 4
  %25 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %26 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %25, i32 0, i32 12
  store i32 0, i32* %26, align 8
  %27 = load i32, i32* %9, align 4
  ret i32 %27
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_charpath_n_init(%struct.gs_show_enum_s* %0, %struct.gs_state_s* %1, i8* %2, i32 %3, i32 %4) #0 {
  %6 = alloca %struct.gs_show_enum_s*, align 8
  %7 = alloca %struct.gs_state_s*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %6, align 8
  store %struct.gs_state_s* %1, %struct.gs_state_s** %7, align 8
  store i8* %2, i8** %8, align 8
  store i32 %3, i32* %9, align 4
  store i32 %4, i32* %10, align 4
  %12 = load i32, i32* %9, align 4
  %13 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %6, align 8
  %14 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %13, i32 0, i32 2
  store i32 %12, i32* %14, align 8
  %15 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %6, align 8
  %16 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  %17 = load i8*, i8** %8, align 8
  %18 = call i32 @show_setup(%struct.gs_show_enum_s* %15, %struct.gs_state_s* %16, i8* %17)
  store i32 %18, i32* %11, align 4
  %19 = load i32, i32* %10, align 4
  %20 = icmp ne i32 %19, 0
  %21 = zext i1 %20 to i64
  %22 = select i1 %20, i32 2, i32 1
  %23 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %6, align 8
  %24 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %23, i32 0, i32 11
  store i32 %22, i32* %24, align 4
  %25 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %6, align 8
  %26 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %25, i32 0, i32 12
  store i32 0, i32* %26, align 8
  %27 = load i32, i32* %11, align 4
  ret i32 %27
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_setcachedevice(%struct.gs_show_enum_s* %0, double %1, double %2, double %3, double %4, double %5, double %6) #0 {
  %8 = alloca i32, align 4
  %9 = alloca %struct.gs_show_enum_s*, align 8
  %10 = alloca double, align 8
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca i32, align 4
  %17 = alloca %struct.gs_state_s*, align 8
  %18 = alloca %struct.gs_font_dir_s*, align 8
  %19 = alloca %struct.timeval, align 8
  %20 = alloca %struct.timeval, align 8
  %21 = alloca %struct.timeval, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca %struct.cached_char_s*, align 8
  %25 = alloca %struct.device_s*, align 8
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %9, align 8
  store double %1, double* %10, align 8
  store double %2, double* %11, align 8
  store double %3, double* %12, align 8
  store double %4, double* %13, align 8
  store double %5, double* %14, align 8
  store double %6, double* %15, align 8
  %26 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %9, align 8
  %27 = load double, double* %10, align 8
  %28 = load double, double* %11, align 8
  %29 = call i32 @gs_setcharwidth(%struct.gs_show_enum_s* %26, double %27, double %28)
  store i32 %29, i32* %16, align 4
  %30 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %9, align 8
  %31 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %30, i32 0, i32 0
  %32 = load %struct.gs_state_s*, %struct.gs_state_s** %31, align 8
  store %struct.gs_state_s* %32, %struct.gs_state_s** %17, align 8
  %33 = load i32, i32* %16, align 4
  %34 = icmp slt i32 %33, 0
  br i1 %34, label %35, label %37

35:                                               ; preds = %7
  %36 = load i32, i32* %16, align 4
  store i32 %36, i32* %8, align 4
  br label %279

37:                                               ; preds = %7
  %38 = load %struct.gs_state_s*, %struct.gs_state_s** %17, align 8
  %39 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %38, i32 0, i32 19
  %40 = load i8, i8* %39, align 4
  %41 = icmp ne i8 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %37
  store i32 0, i32* %8, align 4
  br label %279

43:                                               ; preds = %37
  %44 = load %struct.gs_state_s*, %struct.gs_state_s** %17, align 8
  %45 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %44, i32 0, i32 19
  store i8 1, i8* %45, align 4
  %46 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %9, align 8
  %47 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %46, i32 0, i32 12
  %48 = load i32, i32* %47, align 8
  %49 = icmp ne i32 %48, 0
  br i1 %49, label %50, label %63

50:                                               ; preds = %43
  %51 = load %struct.gs_state_s*, %struct.gs_state_s** %17, align 8
  %52 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %51, i32 0, i32 18
  %53 = load i32, i32* %52, align 8
  %54 = icmp ne i32 %53, 0
  br i1 %54, label %55, label %63

55:                                               ; preds = %50
  %56 = load double, double* %12, align 8
  %57 = load double, double* %14, align 8
  %58 = fcmp ogt double %56, %57
  br i1 %58, label %63, label %59

59:                                               ; preds = %55
  %60 = load double, double* %13, align 8
  %61 = load double, double* %15, align 8
  %62 = fcmp ogt double %60, %61
  br i1 %62, label %63, label %64

63:                                               ; preds = %59, %55, %50, %43
  store i32 0, i32* %8, align 4
  br label %279

64:                                               ; preds = %59
  %65 = load %struct.gs_state_s*, %struct.gs_state_s** %17, align 8
  %66 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %65, i32 0, i32 16
  %67 = load %struct.gs_font_s*, %struct.gs_font_s** %66, align 8
  %68 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %67, i32 0, i32 3
  %69 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %68, align 8
  store %struct.gs_font_dir_s* %69, %struct.gs_font_dir_s** %18, align 8
  %70 = load %struct.gs_state_s*, %struct.gs_state_s** %17, align 8
  %71 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %70, i32 0, i32 2
  %72 = load double, double* %12, align 8
  %73 = load double, double* %13, align 8
  %74 = call i32 @gs_distance_transform2fixed(%struct.gs_matrix_fixed_s* %71, double %72, double %73, %struct.timeval* %19)
  %75 = load %struct.gs_state_s*, %struct.gs_state_s** %17, align 8
  %76 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %75, i32 0, i32 2
  %77 = load double, double* %14, align 8
  %78 = load double, double* %15, align 8
  %79 = call i32 @gs_distance_transform2fixed(%struct.gs_matrix_fixed_s* %76, double %77, double %78, %struct.timeval* %20)
  %80 = getelementptr inbounds %struct.timeval, %struct.timeval* %20, i32 0, i32 0
  %81 = load i64, i64* %80, align 8
  %82 = getelementptr inbounds %struct.timeval, %struct.timeval* %19, i32 0, i32 0
  %83 = load i64, i64* %82, align 8
  %84 = sub nsw i64 %81, %83
  %85 = getelementptr inbounds %struct.timeval, %struct.timeval* %21, i32 0, i32 0
  store i64 %84, i64* %85, align 8
  %86 = getelementptr inbounds %struct.timeval, %struct.timeval* %20, i32 0, i32 1
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %struct.timeval, %struct.timeval* %19, i32 0, i32 1
  %89 = load i64, i64* %88, align 8
  %90 = sub nsw i64 %87, %89
  %91 = getelementptr inbounds %struct.timeval, %struct.timeval* %21, i32 0, i32 1
  store i64 %90, i64* %91, align 8
  %92 = getelementptr inbounds %struct.timeval, %struct.timeval* %21, i32 0, i32 0
  %93 = load i64, i64* %92, align 8
  %94 = icmp slt i64 %93, 0
  br i1 %94, label %95, label %100

95:                                               ; preds = %64
  %96 = getelementptr inbounds %struct.timeval, %struct.timeval* %21, i32 0, i32 0
  %97 = load i64, i64* %96, align 8
  %98 = sub nsw i64 0, %97
  %99 = getelementptr inbounds %struct.timeval, %struct.timeval* %21, i32 0, i32 0
  store i64 %98, i64* %99, align 8
  br label %100

100:                                              ; preds = %95, %64
  %101 = getelementptr inbounds %struct.timeval, %struct.timeval* %21, i32 0, i32 1
  %102 = load i64, i64* %101, align 8
  %103 = icmp slt i64 %102, 0
  br i1 %103, label %104, label %109

104:                                              ; preds = %100
  %105 = getelementptr inbounds %struct.timeval, %struct.timeval* %21, i32 0, i32 1
  %106 = load i64, i64* %105, align 8
  %107 = sub nsw i64 0, %106
  %108 = getelementptr inbounds %struct.timeval, %struct.timeval* %21, i32 0, i32 1
  store i64 %107, i64* %108, align 8
  br label %109

109:                                              ; preds = %104, %100
  %110 = getelementptr inbounds %struct.timeval, %struct.timeval* %21, i32 0, i32 0
  %111 = load i64, i64* %110, align 8
  %112 = ashr i64 %111, 12
  %113 = add nsw i64 %112, 2
  store i64 %113, i64* %22, align 8
  %114 = getelementptr inbounds %struct.timeval, %struct.timeval* %21, i32 0, i32 1
  %115 = load i64, i64* %114, align 8
  %116 = ashr i64 %115, 12
  %117 = add nsw i64 %116, 2
  store i64 %117, i64* %23, align 8
  %118 = load i64, i64* %22, align 8
  %119 = load i64, i64* %22, align 8
  %120 = trunc i64 %119 to i16
  %121 = zext i16 %120 to i64
  %122 = icmp ne i64 %118, %121
  br i1 %122, label %129, label %123

123:                                              ; preds = %109
  %124 = load i64, i64* %23, align 8
  %125 = load i64, i64* %23, align 8
  %126 = trunc i64 %125 to i16
  %127 = zext i16 %126 to i64
  %128 = icmp ne i64 %124, %127
  br i1 %128, label %129, label %130

129:                                              ; preds = %123, %109
  store i32 0, i32* %8, align 4
  br label %279

130:                                              ; preds = %123
  %131 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %9, align 8
  %132 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %131, i32 0, i32 19
  %133 = load i32, i32* %132, align 8
  %134 = icmp ne i32 %133, 0
  br i1 %134, label %154, label %135

135:                                              ; preds = %130
  %136 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %9, align 8
  %137 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %136, i32 0, i32 18
  store %struct.device_s* %137, %struct.device_s** %25, align 8
  %138 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %9, align 8
  %139 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %138, i32 0, i32 17
  %140 = bitcast %struct.gx_device_memory_s* %139 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %140, i8* align 8 bitcast (%struct.gx_device_memory_s* @mem_mono_device to i8*), i64 200, i1 false)
  %141 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %9, align 8
  %142 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %141, i32 0, i32 17
  %143 = bitcast %struct.gx_device_memory_s* %142 to %struct.gx_device_s*
  %144 = load %struct.device_s*, %struct.device_s** %25, align 8
  %145 = getelementptr inbounds %struct.device_s, %struct.device_s* %144, i32 0, i32 0
  store %struct.gx_device_s* %143, %struct.gx_device_s** %145, align 8
  %146 = load %struct.device_s*, %struct.device_s** %25, align 8
  %147 = getelementptr inbounds %struct.device_s, %struct.device_s* %146, i32 0, i32 1
  store i32 0, i32* %147, align 8
  %148 = load %struct.device_s*, %struct.device_s** %25, align 8
  %149 = getelementptr inbounds %struct.device_s, %struct.device_s* %148, i32 0, i32 2
  store i64 1, i64* %149, align 8
  %150 = load %struct.device_s*, %struct.device_s** %25, align 8
  %151 = getelementptr inbounds %struct.device_s, %struct.device_s* %150, i32 0, i32 3
  store i64 1, i64* %151, align 8
  %152 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %9, align 8
  %153 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %152, i32 0, i32 19
  store i32 1, i32* %153, align 8
  br label %154

154:                                              ; preds = %135, %130
  %155 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %18, align 8
  %156 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %9, align 8
  %157 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %156, i32 0, i32 17
  %158 = load i64, i64* %22, align 8
  %159 = trunc i64 %158 to i16
  %160 = load i64, i64* %23, align 8
  %161 = trunc i64 %160 to i16
  %162 = call %struct.cached_char_s* @gx_alloc_char_bits(%struct.gs_font_dir_s* %155, %struct.gx_device_memory_s* %157, i16 zeroext %159, i16 zeroext %161)
  store %struct.cached_char_s* %162, %struct.cached_char_s** %24, align 8
  %163 = icmp eq %struct.cached_char_s* %162, null
  br i1 %163, label %164, label %165

164:                                              ; preds = %154
  store i32 0, i32* %8, align 4
  br label %279

165:                                              ; preds = %154
  %166 = getelementptr inbounds %struct.timeval, %struct.timeval* %19, i32 0, i32 0
  %167 = load i64, i64* %166, align 8
  %168 = getelementptr inbounds %struct.timeval, %struct.timeval* %20, i32 0, i32 0
  %169 = load i64, i64* %168, align 8
  %170 = icmp slt i64 %167, %169
  br i1 %170, label %171, label %174

171:                                              ; preds = %165
  %172 = getelementptr inbounds %struct.timeval, %struct.timeval* %19, i32 0, i32 0
  %173 = load i64, i64* %172, align 8
  br label %177

174:                                              ; preds = %165
  %175 = getelementptr inbounds %struct.timeval, %struct.timeval* %20, i32 0, i32 0
  %176 = load i64, i64* %175, align 8
  br label %177

177:                                              ; preds = %174, %171
  %178 = phi i64 [ %173, %171 ], [ %176, %174 ]
  %179 = sub nsw i64 0, %178
  %180 = add nsw i64 %179, 2048
  %181 = and i64 %180, -4096
  %182 = load %struct.cached_char_s*, %struct.cached_char_s** %24, align 8
  %183 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %182, i32 0, i32 7
  %184 = getelementptr inbounds %struct.timeval, %struct.timeval* %183, i32 0, i32 0
  store i64 %181, i64* %184, align 8
  %185 = getelementptr inbounds %struct.timeval, %struct.timeval* %19, i32 0, i32 1
  %186 = load i64, i64* %185, align 8
  %187 = getelementptr inbounds %struct.timeval, %struct.timeval* %20, i32 0, i32 1
  %188 = load i64, i64* %187, align 8
  %189 = icmp slt i64 %186, %188
  br i1 %189, label %190, label %193

190:                                              ; preds = %177
  %191 = getelementptr inbounds %struct.timeval, %struct.timeval* %19, i32 0, i32 1
  %192 = load i64, i64* %191, align 8
  br label %196

193:                                              ; preds = %177
  %194 = getelementptr inbounds %struct.timeval, %struct.timeval* %20, i32 0, i32 1
  %195 = load i64, i64* %194, align 8
  br label %196

196:                                              ; preds = %193, %190
  %197 = phi i64 [ %192, %190 ], [ %195, %193 ]
  %198 = sub nsw i64 0, %197
  %199 = add nsw i64 %198, 2048
  %200 = and i64 %199, -4096
  %201 = load %struct.cached_char_s*, %struct.cached_char_s** %24, align 8
  %202 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %201, i32 0, i32 7
  %203 = getelementptr inbounds %struct.timeval, %struct.timeval* %202, i32 0, i32 1
  store i64 %200, i64* %203, align 8
  %204 = load %struct.gs_state_s*, %struct.gs_state_s** %17, align 8
  %205 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %204, i32 0, i32 13
  %206 = load %struct.gs_color_s*, %struct.gs_color_s** %205, align 8
  %207 = load %struct.gs_state_s*, %struct.gs_state_s** %17, align 8
  %208 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %207, i32 0, i32 14
  %209 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %208, align 8
  %210 = load %struct.gs_state_s*, %struct.gs_state_s** %17, align 8
  %211 = call i32 (%struct.gs_color_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, ...) bitcast (void (%struct.gs_color_s*, %struct.gx_device_color_s*, %struct.gs_state_s*)* @gx_color_render to i32 (%struct.gs_color_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, ...)*)(%struct.gs_color_s* %206, %struct.gx_device_color_s* %209, %struct.gs_state_s* %210)
  %212 = load %struct.gs_state_s*, %struct.gs_state_s** %17, align 8
  %213 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %212, i32 0, i32 14
  %214 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %213, align 8
  %215 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %214, i32 0, i32 2
  %216 = load i32, i32* %215, align 8
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %222, label %218

218:                                              ; preds = %196
  %219 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %18, align 8
  %220 = load %struct.cached_char_s*, %struct.cached_char_s** %24, align 8
  call void @gx_unalloc_cached_char(%struct.gs_font_dir_s* %219, %struct.cached_char_s* %220)
  %221 = load i32, i32* %16, align 4
  store i32 %221, i32* %8, align 4
  br label %279

222:                                              ; preds = %196
  %223 = load %struct.gs_state_s*, %struct.gs_state_s** %17, align 8
  %224 = call i32 @gs_gsave(%struct.gs_state_s* %223)
  store i32 %224, i32* %16, align 4
  %225 = icmp slt i32 %224, 0
  br i1 %225, label %226, label %230

226:                                              ; preds = %222
  %227 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %18, align 8
  %228 = load %struct.cached_char_s*, %struct.cached_char_s** %24, align 8
  call void @gx_unalloc_cached_char(%struct.gs_font_dir_s* %227, %struct.cached_char_s* %228)
  %229 = load i32, i32* %16, align 4
  store i32 %229, i32* %8, align 4
  br label %279

230:                                              ; preds = %222
  %231 = load %struct.cached_char_s*, %struct.cached_char_s** %24, align 8
  %232 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %9, align 8
  %233 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %232, i32 0, i32 22
  store %struct.cached_char_s* %231, %struct.cached_char_s** %233, align 8
  %234 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %9, align 8
  %235 = call zeroext i8 @gs_show_current_char(%struct.gs_show_enum_s* %234)
  %236 = zext i8 %235 to i32
  %237 = load %struct.cached_char_s*, %struct.cached_char_s** %24, align 8
  %238 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %237, i32 0, i32 1
  store i32 %236, i32* %238, align 8
  %239 = load %struct.cached_char_s*, %struct.cached_char_s** %24, align 8
  %240 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %239, i32 0, i32 6
  %241 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %9, align 8
  %242 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %241, i32 0, i32 21
  %243 = bitcast %struct.timeval* %240 to i8*
  %244 = bitcast %struct.timeval* %242 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %243, i8* align 8 %244, i64 16, i1 false)
  %245 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %9, align 8
  %246 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %245, i32 0, i32 18
  %247 = load %struct.gs_state_s*, %struct.gs_state_s** %17, align 8
  %248 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %247, i32 0, i32 22
  store %struct.device_s* %246, %struct.device_s** %248, align 8
  %249 = load %struct.gs_state_s*, %struct.gs_state_s** %17, align 8
  %250 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %249, i32 0, i32 23
  store i32 1, i32* %250, align 8
  %251 = load %struct.gs_state_s*, %struct.gs_state_s** %17, align 8
  %252 = load %struct.cached_char_s*, %struct.cached_char_s** %24, align 8
  %253 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %252, i32 0, i32 7
  %254 = getelementptr inbounds %struct.timeval, %struct.timeval* %253, i32 0, i32 0
  %255 = load i64, i64* %254, align 8
  %256 = load %struct.cached_char_s*, %struct.cached_char_s** %24, align 8
  %257 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %256, i32 0, i32 7
  %258 = getelementptr inbounds %struct.timeval, %struct.timeval* %257, i32 0, i32 1
  %259 = load i64, i64* %258, align 8
  %260 = call i32 (%struct.gs_state_s*, i64, i64, ...) bitcast (i32 (%struct.gs_state_s*, i64, i64)* @gs_translate_to_fixed to i32 (%struct.gs_state_s*, i64, i64, ...)*)(%struct.gs_state_s* %251, i64 %255, i64 %259)
  %261 = load %struct.gs_state_s*, %struct.gs_state_s** %17, align 8
  %262 = load i64, i64* %22, align 8
  %263 = shl i64 %262, 12
  %264 = load i64, i64* %23, align 8
  %265 = shl i64 %264, 12
  %266 = call i32 (%struct.gs_state_s*, i64, i64, i64, i64, ...) bitcast (i32 (%struct.gs_state_s*, i64, i64, i64, i64)* @gx_clip_to_rectangle to i32 (%struct.gs_state_s*, i64, i64, i64, i64, ...)*)(%struct.gs_state_s* %261, i64 0, i64 0, i64 %263, i64 %265)
  store i32 %266, i32* %16, align 4
  %267 = icmp slt i32 %266, 0
  br i1 %267, label %268, label %270

268:                                              ; preds = %230
  %269 = load i32, i32* %16, align 4
  store i32 %269, i32* %8, align 4
  br label %279

270:                                              ; preds = %230
  %271 = load %struct.gs_state_s*, %struct.gs_state_s** %17, align 8
  %272 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %271, i32 0, i32 19
  store i8 0, i8* %272, align 4
  %273 = load %struct.gs_state_s*, %struct.gs_state_s** %17, align 8
  %274 = call i32 @gs_setgray(%struct.gs_state_s* %273, double 0.000000e+00)
  %275 = load %struct.gs_state_s*, %struct.gs_state_s** %17, align 8
  %276 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %275, i32 0, i32 19
  store i8 1, i8* %276, align 4
  %277 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %9, align 8
  %278 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %277, i32 0, i32 24
  store i32 1, i32* %278, align 8
  store i32 0, i32* %8, align 4
  br label %279

279:                                              ; preds = %270, %268, %226, %218, %164, %129, %63, %42, %35
  %280 = load i32, i32* %8, align 4
  ret i32 %280
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_setcharwidth(%struct.gs_show_enum_s* %0, double %1, double %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.gs_show_enum_s*, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %5, align 8
  store double %1, double* %6, align 8
  store double %2, double* %7, align 8
  %8 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %9 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %8, i32 0, i32 24
  %10 = load i32, i32* %9, align 8
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %3
  store i32 -21, i32* %4, align 4
  br label %25

13:                                               ; preds = %3
  %14 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %15 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %14, i32 0, i32 0
  %16 = load %struct.gs_state_s*, %struct.gs_state_s** %15, align 8
  %17 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %16, i32 0, i32 2
  %18 = load double, double* %6, align 8
  %19 = load double, double* %7, align 8
  %20 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %21 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %20, i32 0, i32 21
  %22 = call i32 @gs_distance_transform2fixed(%struct.gs_matrix_fixed_s* %17, double %18, double %19, %struct.timeval* %21)
  %23 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %24 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %23, i32 0, i32 24
  store i32 2, i32* %24, align 8
  store i32 0, i32* %4, align 4
  br label %25

25:                                               ; preds = %13, %12
  %26 = load i32, i32* %4, align 4
  ret i32 %26
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @gs_show_current_char(%struct.gs_show_enum_s* %0) #0 {
  %2 = alloca %struct.gs_show_enum_s*, align 8
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %2, align 8
  %3 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %2, align 8
  %4 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %3, i32 0, i32 1
  %5 = load i8*, i8** %4, align 8
  %6 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %2, align 8
  %7 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %6, i32 0, i32 20
  %8 = load i32, i32* %7, align 4
  %9 = sub i32 %8, 1
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds i8, i8* %5, i64 %10
  %12 = load i8, i8* %11, align 1
  ret i8 %12
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_show_next(%struct.gs_show_enum_s* %0) #0 {
  %2 = alloca %struct.gs_show_enum_s*, align 8
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %2, align 8
  %3 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %2, align 8
  %4 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %3, i32 0, i32 26
  %5 = load i32 (%struct.gs_show_enum_s*)*, i32 (%struct.gs_show_enum_s*)** %4, align 8
  %6 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %2, align 8
  %7 = call i32 %5(%struct.gs_show_enum_s* %6)
  ret i32 %7
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @gs_kshow_previous_char(%struct.gs_show_enum_s* %0) #0 {
  %2 = alloca %struct.gs_show_enum_s*, align 8
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %2, align 8
  %3 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %2, align 8
  %4 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %3, i32 0, i32 1
  %5 = load i8*, i8** %4, align 8
  %6 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %2, align 8
  %7 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %6, i32 0, i32 20
  %8 = load i32, i32* %7, align 4
  %9 = sub i32 %8, 1
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds i8, i8* %5, i64 %10
  %12 = load i8, i8* %11, align 1
  ret i8 %12
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @gs_kshow_next_char(%struct.gs_show_enum_s* %0) #0 {
  %2 = alloca %struct.gs_show_enum_s*, align 8
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %2, align 8
  %3 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %2, align 8
  %4 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %3, i32 0, i32 1
  %5 = load i8*, i8** %4, align 8
  %6 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %2, align 8
  %7 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %6, i32 0, i32 20
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds i8, i8* %5, i64 %9
  %11 = load i8, i8* %10, align 1
  ret i8 %11
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gs_show_width(%struct.gs_show_enum_s* %0, %struct.gs_point_s* %1) #0 {
  %3 = alloca %struct.gs_show_enum_s*, align 8
  %4 = alloca %struct.gs_point_s*, align 8
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %3, align 8
  store %struct.gs_point_s* %1, %struct.gs_point_s** %4, align 8
  %5 = load %struct.gs_point_s*, %struct.gs_point_s** %4, align 8
  %6 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %3, align 8
  %7 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %6, i32 0, i32 23
  %8 = bitcast %struct.gs_point_s* %5 to i8*
  %9 = bitcast %struct.gs_point_s* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %8, i8* align 8 %9, i64 8, i1 false)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_show_in_charpath(%struct.gs_show_enum_s* %0) #0 {
  %2 = alloca %struct.gs_show_enum_s*, align 8
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %2, align 8
  %3 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %2, align 8
  %4 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %3, i32 0, i32 11
  %5 = load i32, i32* %4, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_setgray(%struct.gs_state_s* %0, double %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.gs_state_s*, align 8
  %5 = alloca double, align 8
  %6 = alloca float, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.gs_color_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %4, align 8
  store double %1, double* %5, align 8
  %9 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %10 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %9, i32 0, i32 13
  %11 = load %struct.gs_color_s*, %struct.gs_color_s** %10, align 8
  store %struct.gs_color_s* %11, %struct.gs_color_s** %8, align 8
  %12 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %13 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %12, i32 0, i32 19
  %14 = load i8, i8* %13, align 4
  %15 = icmp ne i8 %14, 0
  br i1 %15, label %16, label %17

16:                                               ; preds = %2
  store i32 -21, i32* %3, align 4
  br label %43

17:                                               ; preds = %2
  %18 = load double, double* %5, align 8
  %19 = call i32 @check_unit(double %18, float* %6)
  store i32 %19, i32* %7, align 4
  %20 = load i32, i32* %7, align 4
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %41, label %22

22:                                               ; preds = %17
  %23 = load float, float* %6, align 4
  %24 = fmul float 6.553500e+04, %23
  %25 = fptoui float %24 to i16
  %26 = load %struct.gs_color_s*, %struct.gs_color_s** %8, align 8
  %27 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %26, i32 0, i32 3
  store i16 %25, i16* %27, align 2
  %28 = load %struct.gs_color_s*, %struct.gs_color_s** %8, align 8
  %29 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %28, i32 0, i32 3
  %30 = load i16, i16* %29, align 2
  %31 = load %struct.gs_color_s*, %struct.gs_color_s** %8, align 8
  %32 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %31, i32 0, i32 2
  store i16 %30, i16* %32, align 2
  %33 = load %struct.gs_color_s*, %struct.gs_color_s** %8, align 8
  %34 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %33, i32 0, i32 1
  store i16 %30, i16* %34, align 2
  %35 = load %struct.gs_color_s*, %struct.gs_color_s** %8, align 8
  %36 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %35, i32 0, i32 0
  store i16 %30, i16* %36, align 2
  %37 = load %struct.gs_color_s*, %struct.gs_color_s** %8, align 8
  %38 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %37, i32 0, i32 5
  store i8 1, i8* %38, align 1
  %39 = load %struct.gs_color_s*, %struct.gs_color_s** %8, align 8
  %40 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %39, i32 0, i32 4
  store i8 1, i8* %40, align 2
  br label %41

41:                                               ; preds = %22, %17
  %42 = load i32, i32* %7, align 4
  store i32 %42, i32* %3, align 4
  br label %43

43:                                               ; preds = %41, %16
  %44 = load i32, i32* %3, align 4
  ret i32 %44
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @check_unit(double %0, float* %1) #0 {
  %3 = alloca double, align 8
  %4 = alloca float*, align 8
  store double %0, double* %3, align 8
  store float* %1, float** %4, align 8
  %5 = load double, double* %3, align 8
  %6 = fcmp olt double %5, 0.000000e+00
  br i1 %6, label %7, label %9

7:                                                ; preds = %2
  %8 = load float*, float** %4, align 8
  store float 0.000000e+00, float* %8, align 4
  br label %19

9:                                                ; preds = %2
  %10 = load double, double* %3, align 8
  %11 = fcmp ogt double %10, 1.000000e+00
  br i1 %11, label %12, label %14

12:                                               ; preds = %9
  %13 = load float*, float** %4, align 8
  store float 1.000000e+00, float* %13, align 4
  br label %18

14:                                               ; preds = %9
  %15 = load double, double* %3, align 8
  %16 = fptrunc double %15 to float
  %17 = load float*, float** %4, align 8
  store float %16, float* %17, align 4
  br label %18

18:                                               ; preds = %14, %12
  br label %19

19:                                               ; preds = %18, %7
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local float @gs_currentgray(%struct.gs_state_s* %0) #0 {
  %2 = alloca %struct.gs_state_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %4 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %3, i32 0, i32 13
  %5 = load %struct.gs_color_s*, %struct.gs_color_s** %4, align 8
  %6 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %5, i32 0, i32 5
  %7 = load i8, i8* %6, align 1
  %8 = zext i8 %7 to i32
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %17

10:                                               ; preds = %1
  %11 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %12 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %11, i32 0, i32 13
  %13 = load %struct.gs_color_s*, %struct.gs_color_s** %12, align 8
  %14 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %13, i32 0, i32 3
  %15 = load i16, i16* %14, align 2
  %16 = zext i16 %15 to i32
  br label %23

17:                                               ; preds = %1
  %18 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %19 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %18, i32 0, i32 13
  %20 = load %struct.gs_color_s*, %struct.gs_color_s** %19, align 8
  %21 = call zeroext i16 @gx_color_luminance(%struct.gs_color_s* %20)
  %22 = zext i16 %21 to i32
  br label %23

23:                                               ; preds = %17, %10
  %24 = phi i32 [ %16, %10 ], [ %22, %17 ]
  %25 = sitofp i32 %24 to float
  %26 = fdiv float %25, 6.553500e+04
  ret float %26
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_setgscolor(%struct.gs_state_s* %0, %struct.gs_color_s* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.gs_state_s*, align 8
  %5 = alloca %struct.gs_color_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %4, align 8
  store %struct.gs_color_s* %1, %struct.gs_color_s** %5, align 8
  %6 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %7 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %6, i32 0, i32 19
  %8 = load i8, i8* %7, align 4
  %9 = icmp ne i8 %8, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %2
  store i32 -21, i32* %3, align 4
  br label %18

11:                                               ; preds = %2
  %12 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %13 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %12, i32 0, i32 13
  %14 = load %struct.gs_color_s*, %struct.gs_color_s** %13, align 8
  %15 = load %struct.gs_color_s*, %struct.gs_color_s** %5, align 8
  %16 = bitcast %struct.gs_color_s* %14 to i8*
  %17 = bitcast %struct.gs_color_s* %15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %16, i8* align 2 %17, i64 10, i1 false)
  store i32 0, i32* %3, align 4
  br label %18

18:                                               ; preds = %11, %10
  %19 = load i32, i32* %3, align 4
  ret i32 %19
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_currentgscolor(%struct.gs_state_s* %0, %struct.gs_color_s* %1) #0 {
  %3 = alloca %struct.gs_state_s*, align 8
  %4 = alloca %struct.gs_color_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %3, align 8
  store %struct.gs_color_s* %1, %struct.gs_color_s** %4, align 8
  %5 = load %struct.gs_color_s*, %struct.gs_color_s** %4, align 8
  %6 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %7 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %6, i32 0, i32 13
  %8 = load %struct.gs_color_s*, %struct.gs_color_s** %7, align 8
  %9 = bitcast %struct.gs_color_s* %5 to i8*
  %10 = bitcast %struct.gs_color_s* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %9, i8* align 2 %10, i64 10, i1 false)
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_sethsbcolor(%struct.gs_state_s* %0, double %1, double %2, double %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.gs_state_s*, align 8
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  %10 = alloca [3 x i16], align 2
  %11 = alloca i32, align 4
  store %struct.gs_state_s* %0, %struct.gs_state_s** %6, align 8
  store double %1, double* %7, align 8
  store double %2, double* %8, align 8
  store double %3, double* %9, align 8
  %12 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %13 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %12, i32 0, i32 19
  %14 = load i8, i8* %13, align 4
  %15 = icmp ne i8 %14, 0
  br i1 %15, label %16, label %17

16:                                               ; preds = %4
  store i32 -21, i32* %5, align 4
  br label %37

17:                                               ; preds = %4
  %18 = load double, double* %7, align 8
  %19 = load double, double* %8, align 8
  %20 = load double, double* %9, align 8
  %21 = getelementptr inbounds [3 x i16], [3 x i16]* %10, i64 0, i64 0
  %22 = call i32 @tri_param(double %18, double %19, double %20, i16* %21)
  store i32 %22, i32* %11, align 4
  %23 = load i32, i32* %11, align 4
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %35, label %25

25:                                               ; preds = %17
  %26 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %27 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %26, i32 0, i32 13
  %28 = load %struct.gs_color_s*, %struct.gs_color_s** %27, align 8
  %29 = getelementptr inbounds [3 x i16], [3 x i16]* %10, i64 0, i64 0
  %30 = load i16, i16* %29, align 2
  %31 = getelementptr inbounds [3 x i16], [3 x i16]* %10, i64 0, i64 1
  %32 = load i16, i16* %31, align 2
  %33 = getelementptr inbounds [3 x i16], [3 x i16]* %10, i64 0, i64 2
  %34 = load i16, i16* %33, align 2
  call void @gx_color_from_hsb(%struct.gs_color_s* %28, i16 zeroext %30, i16 zeroext %32, i16 zeroext %34)
  br label %35

35:                                               ; preds = %25, %17
  %36 = load i32, i32* %11, align 4
  store i32 %36, i32* %5, align 4
  br label %37

37:                                               ; preds = %35, %16
  %38 = load i32, i32* %5, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @tri_param(double %0, double %1, double %2, i16* %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca i16*, align 8
  %10 = alloca i32, align 4
  %11 = alloca float, align 4
  %12 = alloca float, align 4
  %13 = alloca float, align 4
  store double %0, double* %6, align 8
  store double %1, double* %7, align 8
  store double %2, double* %8, align 8
  store i16* %3, i16** %9, align 8
  %14 = load double, double* %6, align 8
  %15 = call i32 @check_unit(double %14, float* %11)
  store i32 %15, i32* %10, align 4
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %25, label %17

17:                                               ; preds = %4
  %18 = load double, double* %7, align 8
  %19 = call i32 @check_unit(double %18, float* %12)
  store i32 %19, i32* %10, align 4
  %20 = icmp slt i32 %19, 0
  br i1 %20, label %25, label %21

21:                                               ; preds = %17
  %22 = load double, double* %8, align 8
  %23 = call i32 @check_unit(double %22, float* %13)
  store i32 %23, i32* %10, align 4
  %24 = icmp slt i32 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %21, %17, %4
  %26 = load i32, i32* %10, align 4
  store i32 %26, i32* %5, align 4
  br label %43

27:                                               ; preds = %21
  %28 = load float, float* %11, align 4
  %29 = fmul float %28, 6.553500e+04
  %30 = fptoui float %29 to i16
  %31 = load i16*, i16** %9, align 8
  %32 = getelementptr inbounds i16, i16* %31, i64 0
  store i16 %30, i16* %32, align 2
  %33 = load float, float* %12, align 4
  %34 = fmul float %33, 6.553500e+04
  %35 = fptoui float %34 to i16
  %36 = load i16*, i16** %9, align 8
  %37 = getelementptr inbounds i16, i16* %36, i64 1
  store i16 %35, i16* %37, align 2
  %38 = load float, float* %13, align 4
  %39 = fmul float %38, 6.553500e+04
  %40 = fptoui float %39 to i16
  %41 = load i16*, i16** %9, align 8
  %42 = getelementptr inbounds i16, i16* %41, i64 2
  store i16 %40, i16* %42, align 2
  store i32 0, i32* %5, align 4
  br label %43

43:                                               ; preds = %27, %25
  %44 = load i32, i32* %5, align 4
  ret i32 %44
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_currenthsbcolor(%struct.gs_state_s* %0, float* %1) #0 {
  %3 = alloca %struct.gs_state_s*, align 8
  %4 = alloca float*, align 8
  %5 = alloca [3 x i16], align 2
  store %struct.gs_state_s* %0, %struct.gs_state_s** %3, align 8
  store float* %1, float** %4, align 8
  %6 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %7 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %6, i32 0, i32 13
  %8 = load %struct.gs_color_s*, %struct.gs_color_s** %7, align 8
  %9 = getelementptr inbounds [3 x i16], [3 x i16]* %5, i64 0, i64 0
  call void @gx_color_to_hsb(%struct.gs_color_s* %8, i16* %9)
  %10 = getelementptr inbounds [3 x i16], [3 x i16]* %5, i64 0, i64 0
  %11 = load i16, i16* %10, align 2
  %12 = getelementptr inbounds [3 x i16], [3 x i16]* %5, i64 0, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = getelementptr inbounds [3 x i16], [3 x i16]* %5, i64 0, i64 2
  %15 = load i16, i16* %14, align 2
  %16 = load float*, float** %4, align 8
  call void @tri_return(i16 zeroext %11, i16 zeroext %13, i16 zeroext %15, float* %16)
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal void @tri_return(i16 zeroext %0, i16 zeroext %1, i16 zeroext %2, float* %3) #0 {
  %5 = alloca i16, align 2
  %6 = alloca i16, align 2
  %7 = alloca i16, align 2
  %8 = alloca float*, align 8
  store i16 %0, i16* %5, align 2
  store i16 %1, i16* %6, align 2
  store i16 %2, i16* %7, align 2
  store float* %3, float** %8, align 8
  %9 = load i16, i16* %5, align 2
  %10 = zext i16 %9 to i32
  %11 = sitofp i32 %10 to float
  %12 = fdiv float %11, 6.553500e+04
  %13 = load float*, float** %8, align 8
  %14 = getelementptr inbounds float, float* %13, i64 0
  store float %12, float* %14, align 4
  %15 = load i16, i16* %6, align 2
  %16 = zext i16 %15 to i32
  %17 = sitofp i32 %16 to float
  %18 = fdiv float %17, 6.553500e+04
  %19 = load float*, float** %8, align 8
  %20 = getelementptr inbounds float, float* %19, i64 1
  store float %18, float* %20, align 4
  %21 = load i16, i16* %7, align 2
  %22 = zext i16 %21 to i32
  %23 = sitofp i32 %22 to float
  %24 = fdiv float %23, 6.553500e+04
  %25 = load float*, float** %8, align 8
  %26 = getelementptr inbounds float, float* %25, i64 2
  store float %24, float* %26, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_setrgbcolor(%struct.gs_state_s* %0, double %1, double %2, double %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.gs_state_s*, align 8
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  %10 = alloca [3 x i16], align 2
  %11 = alloca i32, align 4
  %12 = alloca %struct.gs_color_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %6, align 8
  store double %1, double* %7, align 8
  store double %2, double* %8, align 8
  store double %3, double* %9, align 8
  %13 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %14 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %13, i32 0, i32 19
  %15 = load i8, i8* %14, align 4
  %16 = icmp ne i8 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %4
  store i32 -21, i32* %5, align 4
  br label %45

18:                                               ; preds = %4
  %19 = load double, double* %7, align 8
  %20 = load double, double* %8, align 8
  %21 = load double, double* %9, align 8
  %22 = getelementptr inbounds [3 x i16], [3 x i16]* %10, i64 0, i64 0
  %23 = call i32 @tri_param(double %19, double %20, double %21, i16* %22)
  store i32 %23, i32* %11, align 4
  %24 = load i32, i32* %11, align 4
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %43, label %26

26:                                               ; preds = %18
  %27 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %28 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %27, i32 0, i32 13
  %29 = load %struct.gs_color_s*, %struct.gs_color_s** %28, align 8
  store %struct.gs_color_s* %29, %struct.gs_color_s** %12, align 8
  %30 = getelementptr inbounds [3 x i16], [3 x i16]* %10, i64 0, i64 0
  %31 = load i16, i16* %30, align 2
  %32 = load %struct.gs_color_s*, %struct.gs_color_s** %12, align 8
  %33 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %32, i32 0, i32 0
  store i16 %31, i16* %33, align 2
  %34 = getelementptr inbounds [3 x i16], [3 x i16]* %10, i64 0, i64 1
  %35 = load i16, i16* %34, align 2
  %36 = load %struct.gs_color_s*, %struct.gs_color_s** %12, align 8
  %37 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %36, i32 0, i32 1
  store i16 %35, i16* %37, align 2
  %38 = getelementptr inbounds [3 x i16], [3 x i16]* %10, i64 0, i64 2
  %39 = load i16, i16* %38, align 2
  %40 = load %struct.gs_color_s*, %struct.gs_color_s** %12, align 8
  %41 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %40, i32 0, i32 2
  store i16 %39, i16* %41, align 2
  %42 = load %struct.gs_color_s*, %struct.gs_color_s** %12, align 8
  call void @gx_color_from_rgb(%struct.gs_color_s* %42)
  br label %43

43:                                               ; preds = %26, %18
  %44 = load i32, i32* %11, align 4
  store i32 %44, i32* %5, align 4
  br label %45

45:                                               ; preds = %43, %17
  %46 = load i32, i32* %5, align 4
  ret i32 %46
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_currentrgbcolor(%struct.gs_state_s* %0, float* %1) #0 {
  %3 = alloca %struct.gs_state_s*, align 8
  %4 = alloca float*, align 8
  %5 = alloca %struct.gs_color_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %3, align 8
  store float* %1, float** %4, align 8
  %6 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %7 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %6, i32 0, i32 13
  %8 = load %struct.gs_color_s*, %struct.gs_color_s** %7, align 8
  store %struct.gs_color_s* %8, %struct.gs_color_s** %5, align 8
  %9 = load %struct.gs_color_s*, %struct.gs_color_s** %5, align 8
  %10 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %9, i32 0, i32 0
  %11 = load i16, i16* %10, align 2
  %12 = load %struct.gs_color_s*, %struct.gs_color_s** %5, align 8
  %13 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %12, i32 0, i32 1
  %14 = load i16, i16* %13, align 2
  %15 = load %struct.gs_color_s*, %struct.gs_color_s** %5, align 8
  %16 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %15, i32 0, i32 2
  %17 = load i16, i16* %16, align 2
  %18 = load float*, float** %4, align 8
  call void @tri_return(i16 zeroext %11, i16 zeroext %14, i16 zeroext %17, float* %18)
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_colorrgb(%struct.gs_color_s* %0, float* %1) #0 {
  %3 = alloca %struct.gs_color_s*, align 8
  %4 = alloca float*, align 8
  store %struct.gs_color_s* %0, %struct.gs_color_s** %3, align 8
  store float* %1, float** %4, align 8
  %5 = load %struct.gs_color_s*, %struct.gs_color_s** %3, align 8
  %6 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %5, i32 0, i32 0
  %7 = load i16, i16* %6, align 2
  %8 = load %struct.gs_color_s*, %struct.gs_color_s** %3, align 8
  %9 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %8, i32 0, i32 1
  %10 = load i16, i16* %9, align 2
  %11 = load %struct.gs_color_s*, %struct.gs_color_s** %3, align 8
  %12 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %11, i32 0, i32 2
  %13 = load i16, i16* %12, align 2
  %14 = load float*, float** %4, align 8
  call void @tri_return(i16 zeroext %7, i16 zeroext %10, i16 zeroext %13, float* %14)
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_setscreen(%struct.gs_state_s* %0, double %1, double %2, float (double, double)* %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.gs_state_s*, align 8
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca float (double, double)*, align 8
  %10 = alloca %struct.gs_screen_enum_s, align 8
  %11 = alloca %struct.gs_point_s, align 4
  %12 = alloca i32, align 4
  store %struct.gs_state_s* %0, %struct.gs_state_s** %6, align 8
  store double %1, double* %7, align 8
  store double %2, double* %8, align 8
  store float (double, double)* %3, float (double, double)** %9, align 8
  %13 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %14 = load double, double* %7, align 8
  %15 = load double, double* %8, align 8
  %16 = call i32 @gs_screen_init(%struct.gs_screen_enum_s* %10, %struct.gs_state_s* %13, double %14, double %15)
  store i32 %16, i32* %12, align 4
  %17 = load i32, i32* %12, align 4
  %18 = icmp slt i32 %17, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %4
  %20 = load i32, i32* %12, align 4
  store i32 %20, i32* %5, align 4
  br label %49

21:                                               ; preds = %4
  br label %22

22:                                               ; preds = %39, %21
  %23 = call i32 @gs_screen_currentpoint(%struct.gs_screen_enum_s* %10, %struct.gs_point_s* %11)
  store i32 %23, i32* %12, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %40

25:                                               ; preds = %22
  %26 = load float (double, double)*, float (double, double)** %9, align 8
  %27 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %11, i32 0, i32 0
  %28 = load float, float* %27, align 4
  %29 = fpext float %28 to double
  %30 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %11, i32 0, i32 1
  %31 = load float, float* %30, align 4
  %32 = fpext float %31 to double
  %33 = call float %26(double %29, double %32)
  %34 = fpext float %33 to double
  %35 = call i32 @gs_screen_next(%struct.gs_screen_enum_s* %10, double %34)
  store i32 %35, i32* %12, align 4
  %36 = icmp slt i32 %35, 0
  br i1 %36, label %37, label %39

37:                                               ; preds = %25
  %38 = load i32, i32* %12, align 4
  store i32 %38, i32* %5, align 4
  br label %49

39:                                               ; preds = %25
  br label %22

40:                                               ; preds = %22
  %41 = load i32, i32* %12, align 4
  %42 = icmp slt i32 %41, 0
  br i1 %42, label %43, label %45

43:                                               ; preds = %40
  %44 = load i32, i32* %12, align 4
  store i32 %44, i32* %5, align 4
  br label %49

45:                                               ; preds = %40
  %46 = load float (double, double)*, float (double, double)** %9, align 8
  %47 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %48 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %47, i32 0, i32 12
  store float (double, double)* %46, float (double, double)** %48, align 8
  store i32 0, i32* %5, align 4
  br label %49

49:                                               ; preds = %45, %43, %37, %19
  %50 = load i32, i32* %5, align 4
  ret i32 %50
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_screen_init(%struct.gs_screen_enum_s* %0, %struct.gs_state_s* %1, double %2, double %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.gs_screen_enum_s*, align 8
  %7 = alloca %struct.gs_state_s*, align 8
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca %struct.ht_bit_s*, align 8
  %14 = alloca float, align 4
  %15 = alloca %struct.gs_point_s, align 4
  %16 = alloca %struct.gs_matrix_s, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca float, align 4
  %20 = alloca float, align 4
  %21 = alloca %struct.gs_matrix_s, align 8
  store %struct.gs_screen_enum_s* %0, %struct.gs_screen_enum_s** %6, align 8
  store %struct.gs_state_s* %1, %struct.gs_state_s** %7, align 8
  store double %2, double* %8, align 8
  store double %3, double* %9, align 8
  %22 = load double, double* %8, align 8
  %23 = fcmp olt double %22, 0.000000e+00
  br i1 %23, label %24, label %25

24:                                               ; preds = %4
  store i32 -15, i32* %5, align 4
  br label %149

25:                                               ; preds = %4
  %26 = load double, double* %8, align 8
  %27 = fdiv double 7.200000e+01, %26
  %28 = fptrunc double %27 to float
  store float %28, float* %14, align 4
  %29 = bitcast %struct.gs_matrix_s* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 96, i1 false)
  %30 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  %31 = call %struct.gx_device_s* @gs_currentdevice(%struct.gs_state_s* %30)
  call void @gs_deviceparams(%struct.gx_device_s* %31, %struct.gs_matrix_s* %16, i32* %17, i32* %18)
  %32 = load float, float* %14, align 4
  %33 = fpext float %32 to double
  %34 = load float, float* %14, align 4
  %35 = fpext float %34 to double
  %36 = call i32 @gs_distance_transform(double %33, double %35, %struct.gs_matrix_s* %16, %struct.gs_point_s* %15)
  store i32 %36, i32* %12, align 4
  %37 = icmp slt i32 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %25
  %39 = load i32, i32* %12, align 4
  store i32 %39, i32* %5, align 4
  br label %149

40:                                               ; preds = %25
  %41 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %15, i32 0, i32 0
  %42 = load float, float* %41, align 4
  %43 = fcmp olt float %42, 0.000000e+00
  br i1 %43, label %44, label %49

44:                                               ; preds = %40
  %45 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %15, i32 0, i32 0
  %46 = load float, float* %45, align 4
  %47 = fptosi float %46 to i32
  %48 = sub nsw i32 0, %47
  br label %53

49:                                               ; preds = %40
  %50 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %15, i32 0, i32 0
  %51 = load float, float* %50, align 4
  %52 = fptosi float %51 to i32
  br label %53

53:                                               ; preds = %49, %44
  %54 = phi i32 [ %48, %44 ], [ %52, %49 ]
  store i32 %54, i32* %10, align 4
  %55 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %15, i32 0, i32 1
  %56 = load float, float* %55, align 4
  %57 = fcmp olt float %56, 0.000000e+00
  br i1 %57, label %58, label %63

58:                                               ; preds = %53
  %59 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %15, i32 0, i32 1
  %60 = load float, float* %59, align 4
  %61 = fptosi float %60 to i32
  %62 = sub nsw i32 0, %61
  br label %67

63:                                               ; preds = %53
  %64 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %15, i32 0, i32 1
  %65 = load float, float* %64, align 4
  %66 = fptosi float %65 to i32
  br label %67

67:                                               ; preds = %63, %58
  %68 = phi i32 [ %62, %58 ], [ %66, %63 ]
  store i32 %68, i32* %11, align 4
  %69 = load i32, i32* %10, align 4
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %72

71:                                               ; preds = %67
  store i32 1, i32* %10, align 4
  br label %72

72:                                               ; preds = %71, %67
  %73 = load i32, i32* %11, align 4
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %76

75:                                               ; preds = %72
  store i32 1, i32* %11, align 4
  br label %76

76:                                               ; preds = %75, %72
  %77 = load i32, i32* %10, align 4
  %78 = load i32, i32* %11, align 4
  %79 = sdiv i32 65535, %78
  %80 = icmp sgt i32 %77, %79
  br i1 %80, label %81, label %82

81:                                               ; preds = %76
  store i32 -15, i32* %5, align 4
  br label %149

82:                                               ; preds = %76
  %83 = load i32, i32* %10, align 4
  %84 = load i32, i32* %11, align 4
  %85 = mul nsw i32 %83, %84
  %86 = call i8* @gs_malloc(i32 %85, i32 4, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 0))
  %87 = bitcast i8* %86 to %struct.ht_bit_s*
  store %struct.ht_bit_s* %87, %struct.ht_bit_s** %13, align 8
  %88 = load %struct.ht_bit_s*, %struct.ht_bit_s** %13, align 8
  %89 = icmp eq %struct.ht_bit_s* %88, null
  br i1 %89, label %90, label %91

90:                                               ; preds = %82
  store i32 -25, i32* %5, align 4
  br label %149

91:                                               ; preds = %82
  %92 = load double, double* %8, align 8
  %93 = fptrunc double %92 to float
  %94 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %6, align 8
  %95 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %94, i32 0, i32 0
  store float %93, float* %95, align 8
  %96 = load double, double* %9, align 8
  %97 = fptrunc double %96 to float
  %98 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %6, align 8
  %99 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %98, i32 0, i32 1
  store float %97, float* %99, align 4
  %100 = load %struct.ht_bit_s*, %struct.ht_bit_s** %13, align 8
  %101 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %6, align 8
  %102 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %101, i32 0, i32 2
  store %struct.ht_bit_s* %100, %struct.ht_bit_s** %102, align 8
  %103 = load i32, i32* %10, align 4
  %104 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %6, align 8
  %105 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %104, i32 0, i32 3
  store i32 %103, i32* %105, align 8
  %106 = load i32, i32* %11, align 4
  %107 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %6, align 8
  %108 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %107, i32 0, i32 4
  store i32 %106, i32* %108, align 4
  %109 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %6, align 8
  %110 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %109, i32 0, i32 7
  store i32 0, i32* %110, align 4
  %111 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %6, align 8
  %112 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %111, i32 0, i32 6
  store i32 0, i32* %112, align 8
  %113 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  %114 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %6, align 8
  %115 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %114, i32 0, i32 8
  store %struct.gs_state_s* %113, %struct.gs_state_s** %115, align 8
  %116 = load i32, i32* %10, align 4
  %117 = sitofp i32 %116 to double
  %118 = fdiv double 2.000000e+00, %117
  %119 = fptrunc double %118 to float
  store float %119, float* %19, align 4
  %120 = load i32, i32* %11, align 4
  %121 = sitofp i32 %120 to double
  %122 = fdiv double 2.000000e+00, %121
  %123 = fptrunc double %122 to float
  store float %123, float* %20, align 4
  call void @gs_make_identity(%struct.gs_matrix_s* %21)
  %124 = load float, float* %19, align 4
  %125 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %21, i32 0, i32 0
  store float %124, float* %125, align 8
  %126 = load float, float* %20, align 4
  %127 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %21, i32 0, i32 6
  store float %126, float* %127, align 8
  %128 = load float, float* %19, align 4
  %129 = fpext float %128 to double
  %130 = fmul double %129, 5.000000e-01
  %131 = fsub double %130, 1.000000e+00
  %132 = fptrunc double %131 to float
  %133 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %21, i32 0, i32 8
  store float %132, float* %133, align 8
  %134 = load float, float* %20, align 4
  %135 = fpext float %134 to double
  %136 = fmul double %135, 5.000000e-01
  %137 = fsub double %136, 1.000000e+00
  %138 = fptrunc double %137 to float
  %139 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %21, i32 0, i32 10
  store float %138, float* %139, align 8
  %140 = load double, double* %9, align 8
  %141 = fneg double %140
  %142 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %6, align 8
  %143 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %142, i32 0, i32 5
  %144 = call i32 @gs_matrix_rotate(%struct.gs_matrix_s* %21, double %141, %struct.gs_matrix_s* %143)
  store i32 %144, i32* %12, align 4
  %145 = icmp slt i32 %144, 0
  br i1 %145, label %146, label %148

146:                                              ; preds = %91
  %147 = load i32, i32* %12, align 4
  store i32 %147, i32* %5, align 4
  br label %149

148:                                              ; preds = %91
  store i32 0, i32* %5, align 4
  br label %149

149:                                              ; preds = %148, %146, %90, %81, %38, %24
  %150 = load i32, i32* %5, align 4
  ret i32 %150
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_screen_currentpoint(%struct.gs_screen_enum_s* %0, %struct.gs_point_s* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.gs_screen_enum_s*, align 8
  %5 = alloca %struct.gs_point_s*, align 8
  %6 = alloca %struct.gs_point_s, align 4
  %7 = alloca i32, align 4
  store %struct.gs_screen_enum_s* %0, %struct.gs_screen_enum_s** %4, align 8
  store %struct.gs_point_s* %1, %struct.gs_point_s** %5, align 8
  %8 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %4, align 8
  %9 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %8, i32 0, i32 7
  %10 = load i32, i32* %9, align 4
  %11 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %4, align 8
  %12 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %11, i32 0, i32 4
  %13 = load i32, i32* %12, align 4
  %14 = icmp sge i32 %10, %13
  br i1 %14, label %15, label %18

15:                                               ; preds = %2
  %16 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %4, align 8
  %17 = call i32 @gx_screen_finish(%struct.gs_screen_enum_s* %16)
  store i32 %17, i32* %3, align 4
  br label %83

18:                                               ; preds = %2
  %19 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %4, align 8
  %20 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %19, i32 0, i32 6
  %21 = load i32, i32* %20, align 8
  %22 = sitofp i32 %21 to double
  %23 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %4, align 8
  %24 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %23, i32 0, i32 7
  %25 = load i32, i32* %24, align 4
  %26 = sitofp i32 %25 to double
  %27 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %4, align 8
  %28 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %27, i32 0, i32 5
  %29 = call i32 @gs_point_transform(double %22, double %26, %struct.gs_matrix_s* %28, %struct.gs_point_s* %6)
  store i32 %29, i32* %7, align 4
  %30 = icmp slt i32 %29, 0
  br i1 %30, label %31, label %33

31:                                               ; preds = %18
  %32 = load i32, i32* %7, align 4
  store i32 %32, i32* %3, align 4
  br label %83

33:                                               ; preds = %18
  %34 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %6, i32 0, i32 0
  %35 = load float, float* %34, align 4
  %36 = fpext float %35 to double
  %37 = fcmp olt double %36, -1.000000e+00
  br i1 %37, label %38, label %44

38:                                               ; preds = %33
  %39 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %6, i32 0, i32 0
  %40 = load float, float* %39, align 4
  %41 = fpext float %40 to double
  %42 = fadd double %41, 2.000000e+00
  %43 = fptrunc double %42 to float
  store float %43, float* %39, align 4
  br label %56

44:                                               ; preds = %33
  %45 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %6, i32 0, i32 0
  %46 = load float, float* %45, align 4
  %47 = fpext float %46 to double
  %48 = fcmp ogt double %47, 1.000000e+00
  br i1 %48, label %49, label %55

49:                                               ; preds = %44
  %50 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %6, i32 0, i32 0
  %51 = load float, float* %50, align 4
  %52 = fpext float %51 to double
  %53 = fsub double %52, 2.000000e+00
  %54 = fptrunc double %53 to float
  store float %54, float* %50, align 4
  br label %55

55:                                               ; preds = %49, %44
  br label %56

56:                                               ; preds = %55, %38
  %57 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %6, i32 0, i32 1
  %58 = load float, float* %57, align 4
  %59 = fpext float %58 to double
  %60 = fcmp olt double %59, -1.000000e+00
  br i1 %60, label %61, label %67

61:                                               ; preds = %56
  %62 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %6, i32 0, i32 1
  %63 = load float, float* %62, align 4
  %64 = fpext float %63 to double
  %65 = fadd double %64, 2.000000e+00
  %66 = fptrunc double %65 to float
  store float %66, float* %62, align 4
  br label %79

67:                                               ; preds = %56
  %68 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %6, i32 0, i32 1
  %69 = load float, float* %68, align 4
  %70 = fpext float %69 to double
  %71 = fcmp ogt double %70, 1.000000e+00
  br i1 %71, label %72, label %78

72:                                               ; preds = %67
  %73 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %6, i32 0, i32 1
  %74 = load float, float* %73, align 4
  %75 = fpext float %74 to double
  %76 = fsub double %75, 2.000000e+00
  %77 = fptrunc double %76 to float
  store float %77, float* %73, align 4
  br label %78

78:                                               ; preds = %72, %67
  br label %79

79:                                               ; preds = %78, %61
  %80 = load %struct.gs_point_s*, %struct.gs_point_s** %5, align 8
  %81 = bitcast %struct.gs_point_s* %80 to i8*
  %82 = bitcast %struct.gs_point_s* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %81, i8* align 4 %82, i64 8, i1 false)
  store i32 0, i32* %3, align 4
  br label %83

83:                                               ; preds = %79, %31, %15
  %84 = load i32, i32* %3, align 4
  ret i32 %84
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_screen_next(%struct.gs_screen_enum_s* %0, double %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.gs_screen_enum_s*, align 8
  %5 = alloca double, align 8
  %6 = alloca i16, align 2
  %7 = alloca %struct.ht_bit_s*, align 8
  store %struct.gs_screen_enum_s* %0, %struct.gs_screen_enum_s** %4, align 8
  store double %1, double* %5, align 8
  %8 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %4, align 8
  %9 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %8, i32 0, i32 2
  %10 = load %struct.ht_bit_s*, %struct.ht_bit_s** %9, align 8
  store %struct.ht_bit_s* %10, %struct.ht_bit_s** %7, align 8
  %11 = load double, double* %5, align 8
  %12 = fcmp olt double %11, -1.000000e+00
  br i1 %12, label %16, label %13

13:                                               ; preds = %2
  %14 = load double, double* %5, align 8
  %15 = fcmp ogt double %14, 1.000000e+00
  br i1 %15, label %16, label %17

16:                                               ; preds = %13, %2
  store i32 -15, i32* %3, align 4
  br label %56

17:                                               ; preds = %13
  %18 = load double, double* %5, align 8
  %19 = fmul double %18, 3.276700e+04
  %20 = fptoui double %19 to i16
  %21 = zext i16 %20 to i32
  %22 = add nsw i32 %21, 32767
  %23 = trunc i32 %22 to i16
  store i16 %23, i16* %6, align 2
  %24 = load i16, i16* %6, align 2
  %25 = load %struct.ht_bit_s*, %struct.ht_bit_s** %7, align 8
  %26 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %4, align 8
  %27 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %26, i32 0, i32 7
  %28 = load i32, i32* %27, align 4
  %29 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %4, align 8
  %30 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %29, i32 0, i32 3
  %31 = load i32, i32* %30, align 8
  %32 = mul nsw i32 %28, %31
  %33 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %4, align 8
  %34 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %33, i32 0, i32 6
  %35 = load i32, i32* %34, align 8
  %36 = add nsw i32 %32, %35
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds %struct.ht_bit_s, %struct.ht_bit_s* %25, i64 %37
  %39 = getelementptr inbounds %struct.ht_bit_s, %struct.ht_bit_s* %38, i32 0, i32 1
  store i16 %24, i16* %39, align 2
  %40 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %4, align 8
  %41 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %40, i32 0, i32 6
  %42 = load i32, i32* %41, align 8
  %43 = add nsw i32 %42, 1
  store i32 %43, i32* %41, align 8
  %44 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %4, align 8
  %45 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %44, i32 0, i32 3
  %46 = load i32, i32* %45, align 8
  %47 = icmp sge i32 %43, %46
  br i1 %47, label %48, label %55

48:                                               ; preds = %17
  %49 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %4, align 8
  %50 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %49, i32 0, i32 6
  store i32 0, i32* %50, align 8
  %51 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %4, align 8
  %52 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %51, i32 0, i32 7
  %53 = load i32, i32* %52, align 4
  %54 = add nsw i32 %53, 1
  store i32 %54, i32* %52, align 4
  br label %55

55:                                               ; preds = %48, %17
  store i32 0, i32* %3, align 4
  br label %56

56:                                               ; preds = %55, %16
  %57 = load i32, i32* %3, align 4
  ret i32 %57
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gx_screen_finish(%struct.gs_screen_enum_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.gs_screen_enum_s*, align 8
  %4 = alloca %struct.ht_bit_s*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.halftone_s*, align 8
  store %struct.gs_screen_enum_s* %0, %struct.gs_screen_enum_s** %3, align 8
  %9 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %3, align 8
  %10 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %9, i32 0, i32 2
  %11 = load %struct.ht_bit_s*, %struct.ht_bit_s** %10, align 8
  store %struct.ht_bit_s* %11, %struct.ht_bit_s** %4, align 8
  %12 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %3, align 8
  %13 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %12, i32 0, i32 3
  %14 = load i32, i32* %13, align 8
  %15 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %3, align 8
  %16 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %15, i32 0, i32 4
  %17 = load i32, i32* %16, align 4
  %18 = mul nsw i32 %14, %17
  store i32 %18, i32* %5, align 4
  store i32 0, i32* %6, align 4
  br label %19

19:                                               ; preds = %31, %1
  %20 = load i32, i32* %6, align 4
  %21 = load i32, i32* %5, align 4
  %22 = icmp ult i32 %20, %21
  br i1 %22, label %23, label %34

23:                                               ; preds = %19
  %24 = load i32, i32* %6, align 4
  %25 = trunc i32 %24 to i16
  %26 = load %struct.ht_bit_s*, %struct.ht_bit_s** %4, align 8
  %27 = load i32, i32* %6, align 4
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds %struct.ht_bit_s, %struct.ht_bit_s* %26, i64 %28
  %30 = getelementptr inbounds %struct.ht_bit_s, %struct.ht_bit_s* %29, i32 0, i32 0
  store i16 %25, i16* %30, align 2
  br label %31

31:                                               ; preds = %23
  %32 = load i32, i32* %6, align 4
  %33 = add i32 %32, 1
  store i32 %33, i32* %6, align 4
  br label %19

34:                                               ; preds = %19
  %35 = load %struct.ht_bit_s*, %struct.ht_bit_s** %4, align 8
  %36 = load i32, i32* %5, align 4
  call void @gx_sort_ht_order(%struct.ht_bit_s* %35, i32 %36)
  %37 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %3, align 8
  %38 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %37, i32 0, i32 2
  %39 = load %struct.ht_bit_s*, %struct.ht_bit_s** %38, align 8
  %40 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %3, align 8
  %41 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %40, i32 0, i32 3
  %42 = load i32, i32* %41, align 8
  %43 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %3, align 8
  %44 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %43, i32 0, i32 4
  %45 = load i32, i32* %44, align 4
  %46 = call i32 (%struct.ht_bit_s*, i32, i32, ...) bitcast (i32 (%struct.ht_bit_s*, i32, i32)* @gx_ht_construct_order to i32 (%struct.ht_bit_s*, i32, i32, ...)*)(%struct.ht_bit_s* %39, i32 %42, i32 %45)
  store i32 %46, i32* %7, align 4
  %47 = load i32, i32* %7, align 4
  %48 = icmp slt i32 %47, 0
  br i1 %48, label %49, label %51

49:                                               ; preds = %34
  %50 = load i32, i32* %7, align 4
  store i32 %50, i32* %2, align 4
  br label %91

51:                                               ; preds = %34
  %52 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %3, align 8
  %53 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %52, i32 0, i32 8
  %54 = load %struct.gs_state_s*, %struct.gs_state_s** %53, align 8
  %55 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %54, i32 0, i32 11
  %56 = load %struct.halftone_s*, %struct.halftone_s** %55, align 8
  store %struct.halftone_s* %56, %struct.halftone_s** %8, align 8
  %57 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %3, align 8
  %58 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %57, i32 0, i32 0
  %59 = load float, float* %58, align 8
  %60 = load %struct.halftone_s*, %struct.halftone_s** %8, align 8
  %61 = getelementptr inbounds %struct.halftone_s, %struct.halftone_s* %60, i32 0, i32 0
  store float %59, float* %61, align 8
  %62 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %3, align 8
  %63 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %62, i32 0, i32 1
  %64 = load float, float* %63, align 4
  %65 = load %struct.halftone_s*, %struct.halftone_s** %8, align 8
  %66 = getelementptr inbounds %struct.halftone_s, %struct.halftone_s* %65, i32 0, i32 1
  store float %64, float* %66, align 4
  %67 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %3, align 8
  %68 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %67, i32 0, i32 3
  %69 = load i32, i32* %68, align 8
  %70 = load %struct.halftone_s*, %struct.halftone_s** %8, align 8
  %71 = getelementptr inbounds %struct.halftone_s, %struct.halftone_s* %70, i32 0, i32 2
  store i32 %69, i32* %71, align 8
  %72 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %3, align 8
  %73 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %72, i32 0, i32 4
  %74 = load i32, i32* %73, align 4
  %75 = load %struct.halftone_s*, %struct.halftone_s** %8, align 8
  %76 = getelementptr inbounds %struct.halftone_s, %struct.halftone_s* %75, i32 0, i32 3
  store i32 %74, i32* %76, align 4
  %77 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %3, align 8
  %78 = getelementptr inbounds %struct.gs_screen_enum_s, %struct.gs_screen_enum_s* %77, i32 0, i32 2
  %79 = load %struct.ht_bit_s*, %struct.ht_bit_s** %78, align 8
  %80 = load %struct.halftone_s*, %struct.halftone_s** %8, align 8
  %81 = getelementptr inbounds %struct.halftone_s, %struct.halftone_s* %80, i32 0, i32 4
  store %struct.ht_bit_s* %79, %struct.ht_bit_s** %81, align 8
  %82 = load %struct.halftone_s*, %struct.halftone_s** %8, align 8
  %83 = getelementptr inbounds %struct.halftone_s, %struct.halftone_s* %82, i32 0, i32 2
  %84 = load i32, i32* %83, align 8
  %85 = load %struct.halftone_s*, %struct.halftone_s** %8, align 8
  %86 = getelementptr inbounds %struct.halftone_s, %struct.halftone_s* %85, i32 0, i32 3
  %87 = load i32, i32* %86, align 4
  %88 = mul nsw i32 %84, %87
  %89 = load %struct.halftone_s*, %struct.halftone_s** %8, align 8
  %90 = getelementptr inbounds %struct.halftone_s, %struct.halftone_s* %89, i32 0, i32 5
  store i32 %88, i32* %90, align 8
  store i32 1, i32* %2, align 4
  br label %91

91:                                               ; preds = %51, %49
  %92 = load i32, i32* %2, align 4
  ret i32 %92
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_currentscreen(%struct.gs_state_s* %0, float* %1, float* %2, float (double, double)** %3) #0 {
  %5 = alloca %struct.gs_state_s*, align 8
  %6 = alloca float*, align 8
  %7 = alloca float*, align 8
  %8 = alloca float (double, double)**, align 8
  %9 = alloca %struct.halftone_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %5, align 8
  store float* %1, float** %6, align 8
  store float* %2, float** %7, align 8
  store float (double, double)** %3, float (double, double)*** %8, align 8
  %10 = load %struct.gs_state_s*, %struct.gs_state_s** %5, align 8
  %11 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %10, i32 0, i32 11
  %12 = load %struct.halftone_s*, %struct.halftone_s** %11, align 8
  store %struct.halftone_s* %12, %struct.halftone_s** %9, align 8
  %13 = load %struct.halftone_s*, %struct.halftone_s** %9, align 8
  %14 = getelementptr inbounds %struct.halftone_s, %struct.halftone_s* %13, i32 0, i32 0
  %15 = load float, float* %14, align 8
  %16 = load float*, float** %6, align 8
  store float %15, float* %16, align 4
  %17 = load %struct.halftone_s*, %struct.halftone_s** %9, align 8
  %18 = getelementptr inbounds %struct.halftone_s, %struct.halftone_s* %17, i32 0, i32 1
  %19 = load float, float* %18, align 4
  %20 = load float*, float** %7, align 8
  store float %19, float* %20, align 4
  %21 = load %struct.gs_state_s*, %struct.gs_state_s** %5, align 8
  %22 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %21, i32 0, i32 12
  %23 = load float (double, double)*, float (double, double)** %22, align 8
  %24 = load float (double, double)**, float (double, double)*** %8, align 8
  store float (double, double)* %23, float (double, double)** %24, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_initmatrix(%struct.gs_state_s* %0) #0 {
  %2 = alloca %struct.gs_state_s*, align 8
  %3 = alloca %struct.gx_device_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %2, align 8
  %4 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %5 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %4, i32 0, i32 22
  %6 = load %struct.device_s*, %struct.device_s** %5, align 8
  %7 = getelementptr inbounds %struct.device_s, %struct.device_s* %6, i32 0, i32 0
  %8 = load %struct.gx_device_s*, %struct.gx_device_s** %7, align 8
  store %struct.gx_device_s* %8, %struct.gx_device_s** %3, align 8
  %9 = load %struct.gx_device_s*, %struct.gx_device_s** %3, align 8
  %10 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %9, i32 0, i32 1
  %11 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %10, align 8
  %12 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %11, i32 0, i32 1
  %13 = load void (%struct.gx_device_s*, %struct.gs_matrix_s*)*, void (%struct.gx_device_s*, %struct.gs_matrix_s*)** %12, align 8
  %14 = load %struct.gx_device_s*, %struct.gx_device_s** %3, align 8
  %15 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %16 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %15, i32 0, i32 2
  %17 = bitcast %struct.gs_matrix_fixed_s* %16 to %struct.gs_matrix_s*
  call void %13(%struct.gx_device_s* %14, %struct.gs_matrix_s* %17)
  %18 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %19 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %18, i32 0, i32 2
  %20 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %19, i32 0, i32 8
  %21 = load float, float* %20, align 8
  %22 = fmul float %21, 4.096000e+03
  %23 = fptosi float %22 to i64
  %24 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %25 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %24, i32 0, i32 2
  %26 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %25, i32 0, i32 12
  store i64 %23, i64* %26, align 8
  %27 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %28 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %27, i32 0, i32 2
  %29 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %28, i32 0, i32 10
  %30 = load float, float* %29, align 8
  %31 = fmul float %30, 4.096000e+03
  %32 = fptosi float %31 to i64
  %33 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %34 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %33, i32 0, i32 2
  %35 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %34, i32 0, i32 13
  store i64 %32, i64* %35, align 8
  %36 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %37 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %36, i32 0, i32 4
  store i32 0, i32* %37, align 8
  %38 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %39 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %38, i32 0, i32 18
  store i32 0, i32* %39, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_defaultmatrix(%struct.gs_state_s* %0, %struct.gs_matrix_s* %1) #0 {
  %3 = alloca %struct.gs_state_s*, align 8
  %4 = alloca %struct.gs_matrix_s*, align 8
  %5 = alloca %struct.gx_device_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %3, align 8
  store %struct.gs_matrix_s* %1, %struct.gs_matrix_s** %4, align 8
  %6 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %7 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %6, i32 0, i32 22
  %8 = load %struct.device_s*, %struct.device_s** %7, align 8
  %9 = getelementptr inbounds %struct.device_s, %struct.device_s* %8, i32 0, i32 0
  %10 = load %struct.gx_device_s*, %struct.gx_device_s** %9, align 8
  store %struct.gx_device_s* %10, %struct.gx_device_s** %5, align 8
  %11 = load %struct.gx_device_s*, %struct.gx_device_s** %5, align 8
  %12 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %11, i32 0, i32 1
  %13 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %12, align 8
  %14 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %13, i32 0, i32 1
  %15 = load void (%struct.gx_device_s*, %struct.gs_matrix_s*)*, void (%struct.gx_device_s*, %struct.gs_matrix_s*)** %14, align 8
  %16 = load %struct.gx_device_s*, %struct.gx_device_s** %5, align 8
  %17 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  call void %15(%struct.gx_device_s* %16, %struct.gs_matrix_s* %17)
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_currentmatrix(%struct.gs_state_s* %0, %struct.gs_matrix_s* %1) #0 {
  %3 = alloca %struct.gs_state_s*, align 8
  %4 = alloca %struct.gs_matrix_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %3, align 8
  store %struct.gs_matrix_s* %1, %struct.gs_matrix_s** %4, align 8
  %5 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %6 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %7 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %6, i32 0, i32 2
  %8 = bitcast %struct.gs_matrix_fixed_s* %7 to %struct.gs_matrix_s*
  %9 = bitcast %struct.gs_matrix_s* %5 to i8*
  %10 = bitcast %struct.gs_matrix_s* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 96, i1 false)
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_setmatrix(%struct.gs_state_s* %0, %struct.gs_matrix_s* %1) #0 {
  %3 = alloca %struct.gs_state_s*, align 8
  %4 = alloca %struct.gs_matrix_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %3, align 8
  store %struct.gs_matrix_s* %1, %struct.gs_matrix_s** %4, align 8
  %5 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %6 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %5, i32 0, i32 2
  %7 = bitcast %struct.gs_matrix_fixed_s* %6 to %struct.gs_matrix_s*
  %8 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %9 = bitcast %struct.gs_matrix_s* %7 to i8*
  %10 = bitcast %struct.gs_matrix_s* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 96, i1 false)
  %11 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %12 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %11, i32 0, i32 2
  %13 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %12, i32 0, i32 8
  %14 = load float, float* %13, align 8
  %15 = fmul float %14, 4.096000e+03
  %16 = fptosi float %15 to i64
  %17 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %18 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %17, i32 0, i32 2
  %19 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %18, i32 0, i32 12
  store i64 %16, i64* %19, align 8
  %20 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %21 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %20, i32 0, i32 2
  %22 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %21, i32 0, i32 10
  %23 = load float, float* %22, align 8
  %24 = fmul float %23, 4.096000e+03
  %25 = fptosi float %24 to i64
  %26 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %27 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %26, i32 0, i32 2
  %28 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %27, i32 0, i32 13
  store i64 %25, i64* %28, align 8
  %29 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %30 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %29, i32 0, i32 4
  store i32 0, i32* %30, align 8
  %31 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %32 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %31, i32 0, i32 18
  store i32 0, i32* %32, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_translate(%struct.gs_state_s* %0, double %1, double %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.gs_state_s*, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca %struct.gs_point_s, align 4
  %9 = alloca i32, align 4
  store %struct.gs_state_s* %0, %struct.gs_state_s** %5, align 8
  store double %1, double* %6, align 8
  store double %2, double* %7, align 8
  %10 = load double, double* %6, align 8
  %11 = load double, double* %7, align 8
  %12 = load %struct.gs_state_s*, %struct.gs_state_s** %5, align 8
  %13 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %12, i32 0, i32 2
  %14 = bitcast %struct.gs_matrix_fixed_s* %13 to %struct.gs_matrix_s*
  %15 = call i32 @gs_distance_transform(double %10, double %11, %struct.gs_matrix_s* %14, %struct.gs_point_s* %8)
  store i32 %15, i32* %9, align 4
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %3
  %18 = load i32, i32* %9, align 4
  store i32 %18, i32* %4, align 4
  br label %54

19:                                               ; preds = %3
  %20 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %8, i32 0, i32 0
  %21 = load float, float* %20, align 4
  %22 = load %struct.gs_state_s*, %struct.gs_state_s** %5, align 8
  %23 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %22, i32 0, i32 2
  %24 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %23, i32 0, i32 8
  %25 = load float, float* %24, align 8
  %26 = fadd float %25, %21
  store float %26, float* %24, align 8
  %27 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %8, i32 0, i32 1
  %28 = load float, float* %27, align 4
  %29 = load %struct.gs_state_s*, %struct.gs_state_s** %5, align 8
  %30 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %29, i32 0, i32 2
  %31 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %30, i32 0, i32 10
  %32 = load float, float* %31, align 8
  %33 = fadd float %32, %28
  store float %33, float* %31, align 8
  %34 = load %struct.gs_state_s*, %struct.gs_state_s** %5, align 8
  %35 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %34, i32 0, i32 2
  %36 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %35, i32 0, i32 8
  %37 = load float, float* %36, align 8
  %38 = fmul float %37, 4.096000e+03
  %39 = fptosi float %38 to i64
  %40 = load %struct.gs_state_s*, %struct.gs_state_s** %5, align 8
  %41 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %40, i32 0, i32 2
  %42 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %41, i32 0, i32 12
  store i64 %39, i64* %42, align 8
  %43 = load %struct.gs_state_s*, %struct.gs_state_s** %5, align 8
  %44 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %43, i32 0, i32 2
  %45 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %44, i32 0, i32 10
  %46 = load float, float* %45, align 8
  %47 = fmul float %46, 4.096000e+03
  %48 = fptosi float %47 to i64
  %49 = load %struct.gs_state_s*, %struct.gs_state_s** %5, align 8
  %50 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %49, i32 0, i32 2
  %51 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %50, i32 0, i32 13
  store i64 %48, i64* %51, align 8
  %52 = load %struct.gs_state_s*, %struct.gs_state_s** %5, align 8
  %53 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %52, i32 0, i32 4
  store i32 0, i32* %53, align 8
  store i32 0, i32* %4, align 4
  br label %54

54:                                               ; preds = %19, %17
  %55 = load i32, i32* %4, align 4
  ret i32 %55
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_scale(%struct.gs_state_s* %0, double %1, double %2) #0 {
  %4 = alloca %struct.gs_state_s*, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %4, align 8
  store double %1, double* %5, align 8
  store double %2, double* %6, align 8
  %7 = load double, double* %5, align 8
  %8 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %9 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %8, i32 0, i32 2
  %10 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %9, i32 0, i32 0
  %11 = load float, float* %10, align 8
  %12 = fpext float %11 to double
  %13 = fmul double %12, %7
  %14 = fptrunc double %13 to float
  store float %14, float* %10, align 8
  %15 = load double, double* %5, align 8
  %16 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %17 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %16, i32 0, i32 2
  %18 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %17, i32 0, i32 2
  %19 = load float, float* %18, align 8
  %20 = fpext float %19 to double
  %21 = fmul double %20, %15
  %22 = fptrunc double %21 to float
  store float %22, float* %18, align 8
  %23 = load double, double* %6, align 8
  %24 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %25 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %24, i32 0, i32 2
  %26 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %25, i32 0, i32 4
  %27 = load float, float* %26, align 8
  %28 = fpext float %27 to double
  %29 = fmul double %28, %23
  %30 = fptrunc double %29 to float
  store float %30, float* %26, align 8
  %31 = load double, double* %6, align 8
  %32 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %33 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %32, i32 0, i32 2
  %34 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %33, i32 0, i32 6
  %35 = load float, float* %34, align 8
  %36 = fpext float %35 to double
  %37 = fmul double %36, %31
  %38 = fptrunc double %37 to float
  store float %38, float* %34, align 8
  %39 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %40 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %39, i32 0, i32 4
  store i32 0, i32* %40, align 8
  %41 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %42 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %41, i32 0, i32 18
  store i32 0, i32* %42, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_rotate(%struct.gs_state_s* %0, double %1) #0 {
  %3 = alloca %struct.gs_state_s*, align 8
  %4 = alloca double, align 8
  %5 = alloca i32, align 4
  store %struct.gs_state_s* %0, %struct.gs_state_s** %3, align 8
  store double %1, double* %4, align 8
  %6 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %7 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %6, i32 0, i32 2
  %8 = bitcast %struct.gs_matrix_fixed_s* %7 to %struct.gs_matrix_s*
  %9 = load double, double* %4, align 8
  %10 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %11 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %10, i32 0, i32 2
  %12 = bitcast %struct.gs_matrix_fixed_s* %11 to %struct.gs_matrix_s*
  %13 = call i32 @gs_matrix_rotate(%struct.gs_matrix_s* %8, double %9, %struct.gs_matrix_s* %12)
  store i32 %13, i32* %5, align 4
  %14 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %15 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %14, i32 0, i32 4
  store i32 0, i32* %15, align 8
  %16 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %17 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %16, i32 0, i32 18
  store i32 0, i32* %17, align 8
  %18 = load i32, i32* %5, align 4
  ret i32 %18
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_concat(%struct.gs_state_s* %0, %struct.gs_matrix_s* %1) #0 {
  %3 = alloca %struct.gs_state_s*, align 8
  %4 = alloca %struct.gs_matrix_s*, align 8
  %5 = alloca i32, align 4
  store %struct.gs_state_s* %0, %struct.gs_state_s** %3, align 8
  store %struct.gs_matrix_s* %1, %struct.gs_matrix_s** %4, align 8
  %6 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %7 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %8 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %7, i32 0, i32 2
  %9 = bitcast %struct.gs_matrix_fixed_s* %8 to %struct.gs_matrix_s*
  %10 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %11 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %10, i32 0, i32 2
  %12 = bitcast %struct.gs_matrix_fixed_s* %11 to %struct.gs_matrix_s*
  %13 = call i32 @gs_matrix_multiply(%struct.gs_matrix_s* %6, %struct.gs_matrix_s* %9, %struct.gs_matrix_s* %12)
  store i32 %13, i32* %5, align 4
  %14 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %15 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %14, i32 0, i32 2
  %16 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %15, i32 0, i32 8
  %17 = load float, float* %16, align 8
  %18 = fmul float %17, 4.096000e+03
  %19 = fptosi float %18 to i64
  %20 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %21 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %20, i32 0, i32 2
  %22 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %21, i32 0, i32 12
  store i64 %19, i64* %22, align 8
  %23 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %24 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %23, i32 0, i32 2
  %25 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %24, i32 0, i32 10
  %26 = load float, float* %25, align 8
  %27 = fmul float %26, 4.096000e+03
  %28 = fptosi float %27 to i64
  %29 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %30 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %29, i32 0, i32 2
  %31 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %30, i32 0, i32 13
  store i64 %28, i64* %31, align 8
  %32 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %33 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %32, i32 0, i32 4
  store i32 0, i32* %33, align 8
  %34 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %35 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %34, i32 0, i32 18
  store i32 0, i32* %35, align 8
  %36 = load i32, i32* %5, align 4
  ret i32 %36
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_transform(%struct.gs_state_s* %0, double %1, double %2, %struct.gs_point_s* %3) #0 {
  %5 = alloca %struct.gs_state_s*, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca %struct.gs_point_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %5, align 8
  store double %1, double* %6, align 8
  store double %2, double* %7, align 8
  store %struct.gs_point_s* %3, %struct.gs_point_s** %8, align 8
  %9 = load double, double* %6, align 8
  %10 = load double, double* %7, align 8
  %11 = load %struct.gs_state_s*, %struct.gs_state_s** %5, align 8
  %12 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %11, i32 0, i32 2
  %13 = bitcast %struct.gs_matrix_fixed_s* %12 to %struct.gs_matrix_s*
  %14 = load %struct.gs_point_s*, %struct.gs_point_s** %8, align 8
  %15 = call i32 @gs_point_transform(double %9, double %10, %struct.gs_matrix_s* %13, %struct.gs_point_s* %14)
  ret i32 %15
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_dtransform(%struct.gs_state_s* %0, double %1, double %2, %struct.gs_point_s* %3) #0 {
  %5 = alloca %struct.gs_state_s*, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca %struct.gs_point_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %5, align 8
  store double %1, double* %6, align 8
  store double %2, double* %7, align 8
  store %struct.gs_point_s* %3, %struct.gs_point_s** %8, align 8
  %9 = load double, double* %6, align 8
  %10 = load double, double* %7, align 8
  %11 = load %struct.gs_state_s*, %struct.gs_state_s** %5, align 8
  %12 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %11, i32 0, i32 2
  %13 = bitcast %struct.gs_matrix_fixed_s* %12 to %struct.gs_matrix_s*
  %14 = load %struct.gs_point_s*, %struct.gs_point_s** %8, align 8
  %15 = call i32 @gs_distance_transform(double %9, double %10, %struct.gs_matrix_s* %13, %struct.gs_point_s* %14)
  ret i32 %15
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_itransform(%struct.gs_state_s* %0, double %1, double %2, %struct.gs_point_s* %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.gs_state_s*, align 8
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca %struct.gs_point_s*, align 8
  %10 = alloca i32, align 4
  store %struct.gs_state_s* %0, %struct.gs_state_s** %6, align 8
  store double %1, double* %7, align 8
  store double %2, double* %8, align 8
  store %struct.gs_point_s* %3, %struct.gs_point_s** %9, align 8
  %11 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %12 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %11, i32 0, i32 4
  %13 = load i32, i32* %12, align 8
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %29, label %15

15:                                               ; preds = %4
  %16 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %17 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %16, i32 0, i32 2
  %18 = bitcast %struct.gs_matrix_fixed_s* %17 to %struct.gs_matrix_s*
  %19 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %20 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %19, i32 0, i32 3
  %21 = call i32 @gs_matrix_invert(%struct.gs_matrix_s* %18, %struct.gs_matrix_s* %20)
  store i32 %21, i32* %10, align 4
  %22 = load i32, i32* %10, align 4
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %15
  %25 = load i32, i32* %10, align 4
  store i32 %25, i32* %5, align 4
  br label %40

26:                                               ; preds = %15
  %27 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %28 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %27, i32 0, i32 4
  store i32 1, i32* %28, align 8
  br label %29

29:                                               ; preds = %26, %4
  %30 = load double, double* %7, align 8
  %31 = fptrunc double %30 to float
  %32 = fpext float %31 to double
  %33 = load double, double* %8, align 8
  %34 = fptrunc double %33 to float
  %35 = fpext float %34 to double
  %36 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %37 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %36, i32 0, i32 3
  %38 = load %struct.gs_point_s*, %struct.gs_point_s** %9, align 8
  %39 = call i32 @gs_point_transform(double %32, double %35, %struct.gs_matrix_s* %37, %struct.gs_point_s* %38)
  store i32 %39, i32* %5, align 4
  br label %40

40:                                               ; preds = %29, %24
  %41 = load i32, i32* %5, align 4
  ret i32 %41
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_idtransform(%struct.gs_state_s* %0, double %1, double %2, %struct.gs_point_s* %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.gs_state_s*, align 8
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca %struct.gs_point_s*, align 8
  %10 = alloca i32, align 4
  store %struct.gs_state_s* %0, %struct.gs_state_s** %6, align 8
  store double %1, double* %7, align 8
  store double %2, double* %8, align 8
  store %struct.gs_point_s* %3, %struct.gs_point_s** %9, align 8
  %11 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %12 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %11, i32 0, i32 4
  %13 = load i32, i32* %12, align 8
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %29, label %15

15:                                               ; preds = %4
  %16 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %17 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %16, i32 0, i32 2
  %18 = bitcast %struct.gs_matrix_fixed_s* %17 to %struct.gs_matrix_s*
  %19 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %20 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %19, i32 0, i32 3
  %21 = call i32 @gs_matrix_invert(%struct.gs_matrix_s* %18, %struct.gs_matrix_s* %20)
  store i32 %21, i32* %10, align 4
  %22 = load i32, i32* %10, align 4
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %15
  %25 = load i32, i32* %10, align 4
  store i32 %25, i32* %5, align 4
  br label %40

26:                                               ; preds = %15
  %27 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %28 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %27, i32 0, i32 4
  store i32 1, i32* %28, align 8
  br label %29

29:                                               ; preds = %26, %4
  %30 = load double, double* %7, align 8
  %31 = fptrunc double %30 to float
  %32 = fpext float %31 to double
  %33 = load double, double* %8, align 8
  %34 = fptrunc double %33 to float
  %35 = fpext float %34 to double
  %36 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %37 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %36, i32 0, i32 3
  %38 = load %struct.gs_point_s*, %struct.gs_point_s** %9, align 8
  %39 = call i32 @gs_distance_transform(double %32, double %35, %struct.gs_matrix_s* %37, %struct.gs_point_s* %38)
  store i32 %39, i32* %5, align 4
  br label %40

40:                                               ; preds = %29, %24
  %41 = load i32, i32* %5, align 4
  ret i32 %41
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_translate_to_fixed(%struct.gs_state_s* %0, i64 %1, i64 %2) #0 {
  %4 = alloca %struct.gs_state_s*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  %7 = load i64, i64* %5, align 8
  %8 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %9 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %8, i32 0, i32 2
  %10 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %9, i32 0, i32 12
  store i64 %7, i64* %10, align 8
  %11 = sitofp i64 %7 to double
  %12 = fmul double %11, 0x3F30000000000000
  %13 = fptrunc double %12 to float
  %14 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %15 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %14, i32 0, i32 2
  %16 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %15, i32 0, i32 8
  store float %13, float* %16, align 8
  %17 = load i64, i64* %6, align 8
  %18 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %19 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %18, i32 0, i32 2
  %20 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %19, i32 0, i32 13
  store i64 %17, i64* %20, align 8
  %21 = sitofp i64 %17 to double
  %22 = fmul double %21, 0x3F30000000000000
  %23 = fptrunc double %22 to float
  %24 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %25 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %24, i32 0, i32 2
  %26 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %25, i32 0, i32 10
  store float %23, float* %26, align 8
  %27 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %28 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %27, i32 0, i32 4
  store i32 0, i32* %28, align 8
  %29 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %30 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %29, i32 0, i32 18
  store i32 1, i32* %30, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_default_open_device(%struct.gx_device_s* %0) #0 {
  %2 = alloca %struct.gx_device_s*, align 8
  store %struct.gx_device_s* %0, %struct.gx_device_s** %2, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gx_default_get_initial_matrix(%struct.gx_device_s* %0, %struct.gs_matrix_s* %1) #0 {
  %3 = alloca %struct.gx_device_s*, align 8
  %4 = alloca %struct.gs_matrix_s*, align 8
  store %struct.gx_device_s* %0, %struct.gx_device_s** %3, align 8
  store %struct.gs_matrix_s* %1, %struct.gs_matrix_s** %4, align 8
  %5 = load %struct.gx_device_s*, %struct.gx_device_s** %3, align 8
  %6 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %5, i32 0, i32 5
  %7 = load float, float* %6, align 8
  %8 = fpext float %7 to double
  %9 = fdiv double %8, 7.200000e+01
  %10 = fptrunc double %9 to float
  %11 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %12 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %11, i32 0, i32 0
  store float %10, float* %12, align 8
  %13 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %14 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %13, i32 0, i32 2
  store float 0.000000e+00, float* %14, align 8
  %15 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %16 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %15, i32 0, i32 4
  store float 0.000000e+00, float* %16, align 8
  %17 = load %struct.gx_device_s*, %struct.gx_device_s** %3, align 8
  %18 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %17, i32 0, i32 6
  %19 = load float, float* %18, align 4
  %20 = fpext float %19 to double
  %21 = fdiv double %20, -7.200000e+01
  %22 = fptrunc double %21 to float
  %23 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %24 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %23, i32 0, i32 6
  store float %22, float* %24, align 8
  %25 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %26 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %25, i32 0, i32 8
  store float 0.000000e+00, float* %26, align 8
  %27 = load %struct.gx_device_s*, %struct.gx_device_s** %3, align 8
  %28 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %27, i32 0, i32 4
  %29 = load i32, i32* %28, align 4
  %30 = sitofp i32 %29 to float
  %31 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %32 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %31, i32 0, i32 10
  store float %30, float* %32, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_default_sync_output(%struct.gx_device_s* %0) #0 {
  %2 = alloca %struct.gx_device_s*, align 8
  store %struct.gx_device_s* %0, %struct.gx_device_s** %2, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_default_output_page(%struct.gx_device_s* %0) #0 {
  %2 = alloca %struct.gx_device_s*, align 8
  store %struct.gx_device_s* %0, %struct.gx_device_s** %2, align 8
  %3 = load %struct.gx_device_s*, %struct.gx_device_s** %2, align 8
  %4 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %3, i32 0, i32 1
  %5 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %4, align 8
  %6 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %5, i32 0, i32 2
  %7 = load i32 (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*)** %6, align 8
  %8 = load %struct.gx_device_s*, %struct.gx_device_s** %2, align 8
  %9 = call i32 %7(%struct.gx_device_s* %8)
  ret i32 %9
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_default_close_device(%struct.gx_device_s* %0) #0 {
  %2 = alloca %struct.gx_device_s*, align 8
  store %struct.gx_device_s* %0, %struct.gx_device_s** %2, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @gx_default_map_rgb_color(%struct.gx_device_s* %0, i16 zeroext %1, i16 zeroext %2, i16 zeroext %3) #0 {
  %5 = alloca %struct.gx_device_s*, align 8
  %6 = alloca i16, align 2
  %7 = alloca i16, align 2
  %8 = alloca i16, align 2
  store %struct.gx_device_s* %0, %struct.gx_device_s** %5, align 8
  store i16 %1, i16* %6, align 2
  store i16 %2, i16* %7, align 2
  store i16 %3, i16* %8, align 2
  %9 = load i16, i16* %6, align 2
  %10 = zext i16 %9 to i32
  %11 = load i16, i16* %7, align 2
  %12 = zext i16 %11 to i32
  %13 = icmp sgt i32 %10, %12
  br i1 %13, label %14, label %17

14:                                               ; preds = %4
  %15 = load i16, i16* %6, align 2
  %16 = zext i16 %15 to i32
  br label %20

17:                                               ; preds = %4
  %18 = load i16, i16* %7, align 2
  %19 = zext i16 %18 to i32
  br label %20

20:                                               ; preds = %17, %14
  %21 = phi i32 [ %16, %14 ], [ %19, %17 ]
  %22 = load i16, i16* %8, align 2
  %23 = zext i16 %22 to i32
  %24 = icmp sgt i32 %21, %23
  br i1 %24, label %25, label %39

25:                                               ; preds = %20
  %26 = load i16, i16* %6, align 2
  %27 = zext i16 %26 to i32
  %28 = load i16, i16* %7, align 2
  %29 = zext i16 %28 to i32
  %30 = icmp sgt i32 %27, %29
  br i1 %30, label %31, label %34

31:                                               ; preds = %25
  %32 = load i16, i16* %6, align 2
  %33 = zext i16 %32 to i32
  br label %37

34:                                               ; preds = %25
  %35 = load i16, i16* %7, align 2
  %36 = zext i16 %35 to i32
  br label %37

37:                                               ; preds = %34, %31
  %38 = phi i32 [ %33, %31 ], [ %36, %34 ]
  br label %42

39:                                               ; preds = %20
  %40 = load i16, i16* %8, align 2
  %41 = zext i16 %40 to i32
  br label %42

42:                                               ; preds = %39, %37
  %43 = phi i32 [ %38, %37 ], [ %41, %39 ]
  %44 = sext i32 %43 to i64
  ret i64 %44
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_default_map_color_rgb(%struct.gx_device_s* %0, i64 %1, i16* %2) #0 {
  %4 = alloca %struct.gx_device_s*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i16*, align 8
  store %struct.gx_device_s* %0, %struct.gx_device_s** %4, align 8
  store i64 %1, i64* %5, align 8
  store i16* %2, i16** %6, align 8
  %7 = load i64, i64* %5, align 8
  %8 = trunc i64 %7 to i16
  %9 = load i16*, i16** %6, align 8
  %10 = getelementptr inbounds i16, i16* %9, i64 2
  store i16 %8, i16* %10, align 2
  %11 = load i16*, i16** %6, align 8
  %12 = getelementptr inbounds i16, i16* %11, i64 1
  store i16 %8, i16* %12, align 2
  %13 = load i16*, i16** %6, align 8
  %14 = getelementptr inbounds i16, i16* %13, i64 0
  store i16 %8, i16* %14, align 2
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @null_fill_rectangle(%struct.gx_device_s* %0, i32 %1, i32 %2, i32 %3, i32 %4, i64 %5) #0 {
  %7 = alloca %struct.gx_device_s*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i64, align 8
  store %struct.gx_device_s* %0, %struct.gx_device_s** %7, align 8
  store i32 %1, i32* %8, align 4
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store i32 %4, i32* %11, align 4
  store i64 %5, i64* %12, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @null_tile_rectangle(%struct.gx_device_s* %0, %struct.gx_bitmap_s* %1, i32 %2, i32 %3, i32 %4, i32 %5, i64 %6, i64 %7) #0 {
  %9 = alloca %struct.gx_device_s*, align 8
  %10 = alloca %struct.gx_bitmap_s*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  store %struct.gx_device_s* %0, %struct.gx_device_s** %9, align 8
  store %struct.gx_bitmap_s* %1, %struct.gx_bitmap_s** %10, align 8
  store i32 %2, i32* %11, align 4
  store i32 %3, i32* %12, align 4
  store i32 %4, i32* %13, align 4
  store i32 %5, i32* %14, align 4
  store i64 %6, i64* %15, align 8
  store i64 %7, i64* %16, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @null_copy_mono(%struct.gx_device_s* %0, i8* %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i64 %8, i64 %9) #0 {
  %11 = alloca %struct.gx_device_s*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  store %struct.gx_device_s* %0, %struct.gx_device_s** %11, align 8
  store i8* %1, i8** %12, align 8
  store i32 %2, i32* %13, align 4
  store i32 %3, i32* %14, align 4
  store i32 %4, i32* %15, align 4
  store i32 %5, i32* %16, align 4
  store i32 %6, i32* %17, align 4
  store i32 %7, i32* %18, align 4
  store i64 %8, i64* %19, align 8
  store i64 %9, i64* %20, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @null_copy_color(%struct.gx_device_s* %0, i8* %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7) #0 {
  %9 = alloca %struct.gx_device_s*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  store %struct.gx_device_s* %0, %struct.gx_device_s** %9, align 8
  store i8* %1, i8** %10, align 8
  store i32 %2, i32* %11, align 4
  store i32 %3, i32* %12, align 4
  store i32 %4, i32* %13, align 4
  store i32 %5, i32* %14, align 4
  store i32 %6, i32* %15, align 4
  store i32 %7, i32* %16, align 4
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @null_draw_line(%struct.gx_device_s* %0, i32 %1, i32 %2, i32 %3, i32 %4, i64 %5) #0 {
  %7 = alloca %struct.gx_device_s*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i64, align 8
  store %struct.gx_device_s* %0, %struct.gx_device_s** %7, align 8
  store i32 %1, i32* %8, align 4
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store i32 %4, i32* %11, align 4
  store i64 %5, i64* %12, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @null_fill_trapezoid(%struct.gx_device_s* %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i64 %7) #0 {
  %9 = alloca %struct.gx_device_s*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i64, align 8
  store %struct.gx_device_s* %0, %struct.gx_device_s** %9, align 8
  store i32 %1, i32* %10, align 4
  store i32 %2, i32* %11, align 4
  store i32 %3, i32* %12, align 4
  store i32 %4, i32* %13, align 4
  store i32 %5, i32* %14, align 4
  store i32 %6, i32* %15, align 4
  store i64 %7, i64* %16, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @null_tile_trapezoid(%struct.gx_device_s* %0, %struct.gx_bitmap_s* %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i64 %8, i64 %9) #0 {
  %11 = alloca %struct.gx_device_s*, align 8
  %12 = alloca %struct.gx_bitmap_s*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  store %struct.gx_device_s* %0, %struct.gx_device_s** %11, align 8
  store %struct.gx_bitmap_s* %1, %struct.gx_bitmap_s** %12, align 8
  store i32 %2, i32* %13, align 4
  store i32 %3, i32* %14, align 4
  store i32 %4, i32* %15, align 4
  store i32 %5, i32* %16, align 4
  store i32 %6, i32* %17, align 4
  store i32 %7, i32* %18, align 4
  store i64 %8, i64* %19, align 8
  store i64 %9, i64* %20, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_flushpage(%struct.gs_state_s* %0) #0 {
  %2 = alloca %struct.gs_state_s*, align 8
  %3 = alloca %struct.gx_device_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %2, align 8
  %4 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %5 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %4, i32 0, i32 22
  %6 = load %struct.device_s*, %struct.device_s** %5, align 8
  %7 = getelementptr inbounds %struct.device_s, %struct.device_s* %6, i32 0, i32 0
  %8 = load %struct.gx_device_s*, %struct.gx_device_s** %7, align 8
  store %struct.gx_device_s* %8, %struct.gx_device_s** %3, align 8
  %9 = load %struct.gx_device_s*, %struct.gx_device_s** %3, align 8
  %10 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %9, i32 0, i32 1
  %11 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %10, align 8
  %12 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %11, i32 0, i32 2
  %13 = load i32 (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*)** %12, align 8
  %14 = load %struct.gx_device_s*, %struct.gx_device_s** %3, align 8
  %15 = call i32 %13(%struct.gx_device_s* %14)
  ret i32 %15
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_copypage(%struct.gs_state_s* %0) #0 {
  %2 = alloca %struct.gs_state_s*, align 8
  %3 = alloca %struct.gx_device_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %2, align 8
  %4 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %5 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %4, i32 0, i32 22
  %6 = load %struct.device_s*, %struct.device_s** %5, align 8
  %7 = getelementptr inbounds %struct.device_s, %struct.device_s* %6, i32 0, i32 0
  %8 = load %struct.gx_device_s*, %struct.gx_device_s** %7, align 8
  store %struct.gx_device_s* %8, %struct.gx_device_s** %3, align 8
  %9 = load %struct.gx_device_s*, %struct.gx_device_s** %3, align 8
  %10 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %9, i32 0, i32 1
  %11 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %10, align 8
  %12 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %11, i32 0, i32 3
  %13 = load i32 (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*)** %12, align 8
  %14 = load %struct.gx_device_s*, %struct.gx_device_s** %3, align 8
  %15 = call i32 %13(%struct.gx_device_s* %14)
  ret i32 %15
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_copyscanlines(%struct.gx_device_s* %0, i32 %1, i8* %2, i32 %3, i32* %4, i32* %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca %struct.gx_device_s*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32*, align 8
  %13 = alloca i32*, align 8
  %14 = alloca i32, align 4
  store %struct.gx_device_s* %0, %struct.gx_device_s** %8, align 8
  store i32 %1, i32* %9, align 4
  store i8* %2, i8** %10, align 8
  store i32 %3, i32* %11, align 4
  store i32* %4, i32** %12, align 8
  store i32* %5, i32** %13, align 8
  %15 = load %struct.gx_device_s*, %struct.gx_device_s** %8, align 8
  %16 = call i32 @gs_device_is_memory(%struct.gx_device_s* %15)
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %19, label %18

18:                                               ; preds = %6
  store i32 -21, i32* %7, align 4
  br label %42

19:                                               ; preds = %6
  %20 = load %struct.gx_device_s*, %struct.gx_device_s** %8, align 8
  %21 = bitcast %struct.gx_device_s* %20 to %struct.gx_device_memory_s*
  %22 = load i32, i32* %9, align 4
  %23 = load i8*, i8** %10, align 8
  %24 = load i32, i32* %11, align 4
  %25 = call i32 @mem_copy_scan_lines(%struct.gx_device_memory_s* %21, i32 %22, i8* %23, i32 %24)
  store i32 %25, i32* %14, align 4
  %26 = load i32*, i32** %12, align 8
  %27 = icmp ne i32* %26, null
  br i1 %27, label %28, label %31

28:                                               ; preds = %19
  %29 = load i32, i32* %14, align 4
  %30 = load i32*, i32** %12, align 8
  store i32 %29, i32* %30, align 4
  br label %31

31:                                               ; preds = %28, %19
  %32 = load i32*, i32** %13, align 8
  %33 = icmp ne i32* %32, null
  br i1 %33, label %34, label %41

34:                                               ; preds = %31
  %35 = load i32, i32* %14, align 4
  %36 = load %struct.gx_device_s*, %struct.gx_device_s** %8, align 8
  %37 = bitcast %struct.gx_device_s* %36 to %struct.gx_device_memory_s*
  %38 = call i32 @mem_bytes_per_scan_line(%struct.gx_device_memory_s* %37)
  %39 = mul nsw i32 %35, %38
  %40 = load i32*, i32** %13, align 8
  store i32 %39, i32* %40, align 4
  br label %41

41:                                               ; preds = %34, %31
  store i32 0, i32* %7, align 4
  br label %42

42:                                               ; preds = %41, %18
  %43 = load i32, i32* %7, align 4
  ret i32 %43
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.gx_device_s* @gs_currentdevice(%struct.gs_state_s* %0) #0 {
  %2 = alloca %struct.gs_state_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %4 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %3, i32 0, i32 22
  %5 = load %struct.device_s*, %struct.device_s** %4, align 8
  %6 = getelementptr inbounds %struct.device_s, %struct.device_s* %5, i32 0, i32 0
  %7 = load %struct.gx_device_s*, %struct.gx_device_s** %6, align 8
  ret %struct.gx_device_s* %7
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @gs_devicename(%struct.gx_device_s* %0) #0 {
  %2 = alloca %struct.gx_device_s*, align 8
  store %struct.gx_device_s* %0, %struct.gx_device_s** %2, align 8
  %3 = load %struct.gx_device_s*, %struct.gx_device_s** %2, align 8
  %4 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %3, i32 0, i32 2
  %5 = load i8*, i8** %4, align 8
  ret i8* %5
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gs_deviceparams(%struct.gx_device_s* %0, %struct.gs_matrix_s* %1, i32* %2, i32* %3) #0 {
  %5 = alloca %struct.gx_device_s*, align 8
  %6 = alloca %struct.gs_matrix_s*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  store %struct.gx_device_s* %0, %struct.gx_device_s** %5, align 8
  store %struct.gs_matrix_s* %1, %struct.gs_matrix_s** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %9 = load %struct.gx_device_s*, %struct.gx_device_s** %5, align 8
  %10 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %9, i32 0, i32 1
  %11 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %10, align 8
  %12 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %11, i32 0, i32 1
  %13 = load void (%struct.gx_device_s*, %struct.gs_matrix_s*)*, void (%struct.gx_device_s*, %struct.gs_matrix_s*)** %12, align 8
  %14 = load %struct.gx_device_s*, %struct.gx_device_s** %5, align 8
  %15 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  call void %13(%struct.gx_device_s* %14, %struct.gs_matrix_s* %15)
  %16 = load %struct.gx_device_s*, %struct.gx_device_s** %5, align 8
  %17 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %16, i32 0, i32 3
  %18 = load i32, i32* %17, align 8
  %19 = load i32*, i32** %7, align 8
  store i32 %18, i32* %19, align 4
  %20 = load %struct.gx_device_s*, %struct.gx_device_s** %5, align 8
  %21 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %20, i32 0, i32 4
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %8, align 8
  store i32 %22, i32* %23, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.gx_device_s* @gs_getdevice(i32 %0) #0 {
  %2 = alloca %struct.gx_device_s*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  br label %5

5:                                                ; preds = %21, %1
  %6 = load i32, i32* %4, align 4
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds [0 x %struct.gx_device_s*], [0 x %struct.gx_device_s*]* bitcast ([1 x %struct.gx_device_s*]* @gx_device_list to [0 x %struct.gx_device_s*]*), i64 0, i64 %7
  %9 = load %struct.gx_device_s*, %struct.gx_device_s** %8, align 8
  %10 = icmp ne %struct.gx_device_s* %9, null
  br i1 %10, label %11, label %24

11:                                               ; preds = %5
  %12 = load i32, i32* %4, align 4
  %13 = load i32, i32* %3, align 4
  %14 = icmp eq i32 %12, %13
  br i1 %14, label %15, label %20

15:                                               ; preds = %11
  %16 = load i32, i32* %4, align 4
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds [0 x %struct.gx_device_s*], [0 x %struct.gx_device_s*]* bitcast ([1 x %struct.gx_device_s*]* @gx_device_list to [0 x %struct.gx_device_s*]*), i64 0, i64 %17
  %19 = load %struct.gx_device_s*, %struct.gx_device_s** %18, align 8
  store %struct.gx_device_s* %19, %struct.gx_device_s** %2, align 8
  br label %25

20:                                               ; preds = %11
  br label %21

21:                                               ; preds = %20
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %5

24:                                               ; preds = %5
  store %struct.gx_device_s* null, %struct.gx_device_s** %2, align 8
  br label %25

25:                                               ; preds = %24, %15
  %26 = load %struct.gx_device_s*, %struct.gx_device_s** %2, align 8
  ret %struct.gx_device_s* %26
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_makedevice(%struct.gx_device_s** %0, %struct.gx_device_s* %1, %struct.gs_matrix_s* %2, i32 %3, i32 %4, i8* (i32, i32, i8*)* %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca %struct.gx_device_s**, align 8
  %9 = alloca %struct.gx_device_s*, align 8
  %10 = alloca %struct.gs_matrix_s*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i8* (i32, i32, i8*)*, align 8
  %14 = alloca %struct.gx_device_s*, align 8
  store %struct.gx_device_s** %0, %struct.gx_device_s*** %8, align 8
  store %struct.gx_device_s* %1, %struct.gx_device_s** %9, align 8
  store %struct.gs_matrix_s* %2, %struct.gs_matrix_s** %10, align 8
  store i32 %3, i32* %11, align 4
  store i32 %4, i32* %12, align 4
  store i8* (i32, i32, i8*)* %5, i8* (i32, i32, i8*)** %13, align 8
  %15 = load i8* (i32, i32, i8*)*, i8* (i32, i32, i8*)** %13, align 8
  %16 = load %struct.gx_device_s*, %struct.gx_device_s** %9, align 8
  %17 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %16, i32 0, i32 0
  %18 = load i32, i32* %17, align 8
  %19 = call i8* %15(i32 1, i32 %18, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.30, i64 0, i64 0))
  %20 = bitcast i8* %19 to %struct.gx_device_s*
  store %struct.gx_device_s* %20, %struct.gx_device_s** %14, align 8
  %21 = load %struct.gx_device_s*, %struct.gx_device_s** %14, align 8
  %22 = icmp eq %struct.gx_device_s* %21, null
  br i1 %22, label %23, label %24

23:                                               ; preds = %6
  store i32 -25, i32* %7, align 4
  br label %50

24:                                               ; preds = %6
  %25 = load i32, i32* %11, align 4
  %26 = icmp ule i32 %25, 0
  br i1 %26, label %30, label %27

27:                                               ; preds = %24
  %28 = load i32, i32* %12, align 4
  %29 = icmp ule i32 %28, 0
  br i1 %29, label %30, label %31

30:                                               ; preds = %27, %24
  store i32 -15, i32* %7, align 4
  br label %50

31:                                               ; preds = %27
  %32 = load %struct.gx_device_s*, %struct.gx_device_s** %14, align 8
  %33 = bitcast %struct.gx_device_s* %32 to i8*
  %34 = load %struct.gx_device_s*, %struct.gx_device_s** %9, align 8
  %35 = bitcast %struct.gx_device_s* %34 to i8*
  %36 = load %struct.gx_device_s*, %struct.gx_device_s** %9, align 8
  %37 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %36, i32 0, i32 0
  %38 = load i32, i32* %37, align 8
  %39 = sext i32 %38 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %33, i8* align 8 %35, i64 %39, i1 false)
  %40 = load i32, i32* %11, align 4
  %41 = load %struct.gx_device_s*, %struct.gx_device_s** %14, align 8
  %42 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %41, i32 0, i32 3
  store i32 %40, i32* %42, align 8
  %43 = load i32, i32* %12, align 4
  %44 = load %struct.gx_device_s*, %struct.gx_device_s** %14, align 8
  %45 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %44, i32 0, i32 4
  store i32 %43, i32* %45, align 4
  %46 = load %struct.gx_device_s*, %struct.gx_device_s** %14, align 8
  %47 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %46, i32 0, i32 10
  store i32 0, i32* %47, align 4
  %48 = load %struct.gx_device_s*, %struct.gx_device_s** %14, align 8
  %49 = load %struct.gx_device_s**, %struct.gx_device_s*** %8, align 8
  store %struct.gx_device_s* %48, %struct.gx_device_s** %49, align 8
  store i32 0, i32* %7, align 4
  br label %50

50:                                               ; preds = %31, %30, %23
  %51 = load i32, i32* %7, align 4
  ret i32 %51
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_makeimagedevice(%struct.gx_device_s** %0, %struct.gs_matrix_s* %1, i32 %2, i32 %3, float* %4, i32 %5, i8* (i32, i32, i8*)* %6) #0 {
  %8 = alloca i32, align 4
  %9 = alloca %struct.gx_device_s**, align 8
  %10 = alloca %struct.gs_matrix_s*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca float*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i8* (i32, i32, i8*)*, align 8
  %16 = alloca %struct.gx_device_memory_s*, align 8
  %17 = alloca %struct.gx_device_memory_s*, align 8
  %18 = alloca i8*, align 8
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i64, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca [768 x i8], align 16
  %26 = alloca i32, align 4
  %27 = alloca float*, align 8
  %28 = alloca i8*, align 8
  %29 = alloca i32, align 4
  store %struct.gx_device_s** %0, %struct.gx_device_s*** %9, align 8
  store %struct.gs_matrix_s* %1, %struct.gs_matrix_s** %10, align 8
  store i32 %2, i32* %11, align 4
  store i32 %3, i32* %12, align 4
  store float* %4, float** %13, align 8
  store i32 %5, i32* %14, align 4
  store i8* (i32, i32, i8*)* %6, i8* (i32, i32, i8*)** %15, align 8
  store %struct.gx_device_memory_s* @mem_mapped_color_device, %struct.gx_device_memory_s** %16, align 8
  %30 = load i32, i32* %14, align 4
  store i32 %30, i32* %19, align 4
  store i32 -1, i32* %23, align 4
  store i32 -1, i32* %24, align 4
  %31 = load i32, i32* %11, align 4
  %32 = icmp ule i32 %31, 0
  br i1 %32, label %36, label %33

33:                                               ; preds = %7
  %34 = load i32, i32* %12, align 4
  %35 = icmp ule i32 %34, 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %33, %7
  store i32 -15, i32* %8, align 4
  br label %210

37:                                               ; preds = %33
  %38 = load i32, i32* %14, align 4
  switch i32 %38, label %44 [
    i32 2, label %39
    i32 4, label %40
    i32 16, label %40
    i32 256, label %41
    i32 -24, label %42
    i32 -32, label %43
  ]

39:                                               ; preds = %37
  store i32 1, i32* %21, align 4
  store %struct.gx_device_memory_s* @mem_mono_device, %struct.gx_device_memory_s** %16, align 8
  br label %45

40:                                               ; preds = %37, %37
  store i32 -15, i32* %8, align 4
  br label %210

41:                                               ; preds = %37
  store i32 8, i32* %21, align 4
  br label %45

42:                                               ; preds = %37
  store i32 24, i32* %21, align 4
  store %struct.gx_device_memory_s* @mem_true24_color_device, %struct.gx_device_memory_s** %16, align 8
  store i32 0, i32* %19, align 4
  br label %45

43:                                               ; preds = %37
  store i32 32, i32* %21, align 4
  store %struct.gx_device_memory_s* @mem_true32_color_device, %struct.gx_device_memory_s** %16, align 8
  store i32 0, i32* %19, align 4
  br label %45

44:                                               ; preds = %37
  store i32 -15, i32* %8, align 4
  br label %210

45:                                               ; preds = %43, %42, %41, %39
  %46 = load i32, i32* %19, align 4
  %47 = mul nsw i32 %46, 3
  store i32 %47, i32* %20, align 4
  %48 = load i32, i32* %21, align 4
  %49 = icmp sle i32 %48, 8
  br i1 %49, label %50, label %133

50:                                               ; preds = %45
  store i32 0, i32* %26, align 4
  store i32 0, i32* %29, align 4
  %51 = load float*, float** %13, align 8
  store float* %51, float** %27, align 8
  %52 = getelementptr inbounds [768 x i8], [768 x i8]* %25, i64 0, i64 0
  store i8* %52, i8** %28, align 8
  br label %53

53:                                               ; preds = %118, %50
  %54 = load i32, i32* %29, align 4
  %55 = load i32, i32* %20, align 4
  %56 = icmp slt i32 %54, %55
  br i1 %56, label %57, label %125

57:                                               ; preds = %53
  %58 = load float*, float** %27, align 8
  %59 = load float, float* %58, align 4
  %60 = fpext float %59 to double
  %61 = fcmp olt double %60, -1.000000e-03
  br i1 %61, label %67, label %62

62:                                               ; preds = %57
  %63 = load float*, float** %27, align 8
  %64 = load float, float* %63, align 4
  %65 = fpext float %64 to double
  %66 = fcmp ogt double %65, 1.001000e+00
  br i1 %66, label %67, label %68

67:                                               ; preds = %62, %57
  store i32 -15, i32* %8, align 4
  br label %210

68:                                               ; preds = %62
  %69 = load float*, float** %27, align 8
  %70 = load float, float* %69, align 4
  %71 = fmul float %70, 2.550000e+02
  %72 = fpext float %71 to double
  %73 = fadd double %72, 5.000000e-01
  %74 = fptoui double %73 to i8
  %75 = load i8*, i8** %28, align 8
  store i8 %74, i8* %75, align 1
  %76 = load i32, i32* %29, align 4
  %77 = srem i32 %76, 3
  %78 = icmp eq i32 %77, 2
  br i1 %78, label %79, label %117

79:                                               ; preds = %68
  %80 = load i8*, i8** %28, align 8
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i32
  %83 = load i8*, i8** %28, align 8
  %84 = getelementptr inbounds i8, i8* %83, i64 -1
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = icmp eq i32 %82, %86
  br i1 %87, label %88, label %115

88:                                               ; preds = %79
  %89 = load i8*, i8** %28, align 8
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = load i8*, i8** %28, align 8
  %93 = getelementptr inbounds i8, i8* %92, i64 -2
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i32
  %96 = icmp eq i32 %91, %95
  br i1 %96, label %97, label %115

97:                                               ; preds = %88
  %98 = load i8*, i8** %28, align 8
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %102, label %105

102:                                              ; preds = %97
  %103 = load i32, i32* %29, align 4
  %104 = sub nsw i32 %103, 2
  store i32 %104, i32* %24, align 4
  br label %114

105:                                              ; preds = %97
  %106 = load i8*, i8** %28, align 8
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i32
  %109 = icmp eq i32 %108, 255
  br i1 %109, label %110, label %113

110:                                              ; preds = %105
  %111 = load i32, i32* %29, align 4
  %112 = sub nsw i32 %111, 2
  store i32 %112, i32* %23, align 4
  br label %113

113:                                              ; preds = %110, %105
  br label %114

114:                                              ; preds = %113, %102
  br label %116

115:                                              ; preds = %88, %79
  store i32 1, i32* %26, align 4
  br label %116

116:                                              ; preds = %115, %114
  br label %117

117:                                              ; preds = %116, %68
  br label %118

118:                                              ; preds = %117
  %119 = load i32, i32* %29, align 4
  %120 = add nsw i32 %119, 1
  store i32 %120, i32* %29, align 4
  %121 = load float*, float** %27, align 8
  %122 = getelementptr inbounds float, float* %121, i32 1
  store float* %122, float** %27, align 8
  %123 = load i8*, i8** %28, align 8
  %124 = getelementptr inbounds i8, i8* %123, i32 1
  store i8* %124, i8** %28, align 8
  br label %53

125:                                              ; preds = %53
  %126 = load i32, i32* %23, align 4
  %127 = icmp slt i32 %126, 0
  br i1 %127, label %131, label %128

128:                                              ; preds = %125
  %129 = load i32, i32* %24, align 4
  %130 = icmp slt i32 %129, 0
  br i1 %130, label %131, label %132

131:                                              ; preds = %128, %125
  store i32 -15, i32* %8, align 4
  br label %210

132:                                              ; preds = %128
  br label %134

133:                                              ; preds = %45
  store i32 1, i32* %26, align 4
  br label %134

134:                                              ; preds = %133, %132
  %135 = load i8* (i32, i32, i8*)*, i8* (i32, i32, i8*)** %15, align 8
  %136 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %16, align 8
  %137 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %136, i32 0, i32 0
  %138 = load i32, i32* %137, align 8
  %139 = call i8* %135(i32 1, i32 %138, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.31, i64 0, i64 0))
  %140 = bitcast i8* %139 to %struct.gx_device_memory_s*
  store %struct.gx_device_memory_s* %140, %struct.gx_device_memory_s** %17, align 8
  %141 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %17, align 8
  %142 = icmp eq %struct.gx_device_memory_s* %141, null
  br i1 %142, label %143, label %144

143:                                              ; preds = %134
  store i32 -25, i32* %8, align 4
  br label %210

144:                                              ; preds = %134
  %145 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %17, align 8
  %146 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %16, align 8
  %147 = bitcast %struct.gx_device_memory_s* %145 to i8*
  %148 = bitcast %struct.gx_device_memory_s* %146 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %147, i8* align 8 %148, i64 200, i1 false)
  %149 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %17, align 8
  %150 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %149, i32 0, i32 11
  %151 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %10, align 8
  %152 = bitcast %struct.gs_matrix_s* %150 to i8*
  %153 = bitcast %struct.gs_matrix_s* %151 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %152, i8* align 8 %153, i64 96, i1 false)
  %154 = load i32, i32* %11, align 4
  %155 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %17, align 8
  %156 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %155, i32 0, i32 3
  store i32 %154, i32* %156, align 8
  %157 = load i32, i32* %12, align 4
  %158 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %17, align 8
  %159 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %158, i32 0, i32 4
  store i32 %157, i32* %159, align 4
  %160 = load i32, i32* %26, align 4
  %161 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %17, align 8
  %162 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %161, i32 0, i32 7
  store i32 %160, i32* %162, align 8
  %163 = load i32, i32* %21, align 4
  %164 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %17, align 8
  %165 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %164, i32 0, i32 9
  store i32 %163, i32* %165, align 8
  %166 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %17, align 8
  %167 = call i64 @gx_device_memory_bitmap_size(%struct.gx_device_memory_s* %166)
  store i64 %167, i64* %22, align 8
  %168 = load i64, i64* %22, align 8
  %169 = icmp ugt i64 %168, 4294967295
  br i1 %169, label %170, label %171

170:                                              ; preds = %144
  store i32 -13, i32* %8, align 4
  br label %210

171:                                              ; preds = %144
  %172 = load i8* (i32, i32, i8*)*, i8* (i32, i32, i8*)** %15, align 8
  %173 = load i64, i64* %22, align 8
  %174 = trunc i64 %173 to i32
  %175 = load i32, i32* %20, align 4
  %176 = add i32 %174, %175
  %177 = call i8* %172(i32 1, i32 %176, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2.32, i64 0, i64 0))
  store i8* %177, i8** %18, align 8
  %178 = load i8*, i8** %18, align 8
  %179 = icmp eq i8* %178, null
  br i1 %179, label %180, label %181

180:                                              ; preds = %171
  store i32 -25, i32* %8, align 4
  br label %210

181:                                              ; preds = %171
  %182 = load i8*, i8** %18, align 8
  %183 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %17, align 8
  %184 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %183, i32 0, i32 13
  store i8* %182, i8** %184, align 8
  %185 = load i32, i32* %24, align 4
  %186 = icmp eq i32 %185, 0
  %187 = zext i1 %186 to i64
  %188 = select i1 %186, i32 0, i32 -1
  %189 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %17, align 8
  %190 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %189, i32 0, i32 16
  store i32 %188, i32* %190, align 8
  %191 = load i32, i32* %19, align 4
  %192 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %17, align 8
  %193 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %192, i32 0, i32 17
  store i32 %191, i32* %193, align 4
  %194 = load i8*, i8** %18, align 8
  %195 = load i64, i64* %22, align 8
  %196 = getelementptr inbounds i8, i8* %194, i64 %195
  %197 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %17, align 8
  %198 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %197, i32 0, i32 18
  store i8* %196, i8** %198, align 8
  %199 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %17, align 8
  %200 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %199, i32 0, i32 18
  %201 = load i8*, i8** %200, align 8
  %202 = getelementptr inbounds [768 x i8], [768 x i8]* %25, i64 0, i64 0
  %203 = load i32, i32* %20, align 4
  %204 = sext i32 %203 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %201, i8* align 16 %202, i64 %204, i1 false)
  %205 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %17, align 8
  %206 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %205, i32 0, i32 10
  store i32 0, i32* %206, align 4
  %207 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %17, align 8
  %208 = bitcast %struct.gx_device_memory_s* %207 to %struct.gx_device_s*
  %209 = load %struct.gx_device_s**, %struct.gx_device_s*** %9, align 8
  store %struct.gx_device_s* %208, %struct.gx_device_s** %209, align 8
  store i32 0, i32* %8, align 4
  br label %210

210:                                              ; preds = %181, %180, %170, %143, %131, %67, %44, %40, %36
  %211 = load i32, i32* %8, align 4
  ret i32 %211
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_setdevice(%struct.gs_state_s* %0, %struct.gx_device_s* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.gs_state_s*, align 8
  %5 = alloca %struct.gx_device_s*, align 8
  %6 = alloca %struct.device_s*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store %struct.gs_state_s* %0, %struct.gs_state_s** %4, align 8
  store %struct.gx_device_s* %1, %struct.gx_device_s** %5, align 8
  %9 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %10 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %9, i32 0, i32 22
  %11 = load %struct.device_s*, %struct.device_s** %10, align 8
  store %struct.device_s* %11, %struct.device_s** %6, align 8
  %12 = load %struct.gx_device_s*, %struct.gx_device_s** %5, align 8
  %13 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %12, i32 0, i32 10
  %14 = load i32, i32* %13, align 4
  store i32 %14, i32* %7, align 4
  %15 = load i32, i32* %7, align 4
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %32, label %17

17:                                               ; preds = %2
  %18 = load %struct.gx_device_s*, %struct.gx_device_s** %5, align 8
  %19 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %18, i32 0, i32 1
  %20 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %19, align 8
  %21 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %20, i32 0, i32 0
  %22 = load i32 (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*)** %21, align 8
  %23 = load %struct.gx_device_s*, %struct.gx_device_s** %5, align 8
  %24 = call i32 %22(%struct.gx_device_s* %23)
  store i32 %24, i32* %8, align 4
  %25 = load i32, i32* %8, align 4
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %27, label %29

27:                                               ; preds = %17
  %28 = load i32, i32* %8, align 4
  store i32 %28, i32* %3, align 4
  br label %83

29:                                               ; preds = %17
  %30 = load %struct.gx_device_s*, %struct.gx_device_s** %5, align 8
  %31 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %30, i32 0, i32 10
  store i32 1, i32* %31, align 4
  br label %32

32:                                               ; preds = %29, %2
  %33 = load %struct.gx_device_s*, %struct.gx_device_s** %5, align 8
  %34 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %33, i32 0, i32 1
  %35 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %34, align 8
  %36 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %35, i32 0, i32 5
  %37 = load i64 (%struct.gx_device_s*, i16, i16, i16)*, i64 (%struct.gx_device_s*, i16, i16, i16)** %36, align 8
  %38 = load %struct.gx_device_s*, %struct.gx_device_s** %5, align 8
  %39 = call i64 %37(%struct.gx_device_s* %38, i16 zeroext 0, i16 zeroext 0, i16 zeroext 0)
  %40 = load %struct.device_s*, %struct.device_s** %6, align 8
  %41 = getelementptr inbounds %struct.device_s, %struct.device_s* %40, i32 0, i32 3
  store i64 %39, i64* %41, align 8
  %42 = load %struct.gx_device_s*, %struct.gx_device_s** %5, align 8
  %43 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %42, i32 0, i32 1
  %44 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %43, align 8
  %45 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %44, i32 0, i32 5
  %46 = load i64 (%struct.gx_device_s*, i16, i16, i16)*, i64 (%struct.gx_device_s*, i16, i16, i16)** %45, align 8
  %47 = load %struct.gx_device_s*, %struct.gx_device_s** %5, align 8
  %48 = load %struct.gx_device_s*, %struct.gx_device_s** %5, align 8
  %49 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %48, i32 0, i32 8
  %50 = load i16, i16* %49, align 4
  %51 = load %struct.gx_device_s*, %struct.gx_device_s** %5, align 8
  %52 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %51, i32 0, i32 8
  %53 = load i16, i16* %52, align 4
  %54 = load %struct.gx_device_s*, %struct.gx_device_s** %5, align 8
  %55 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %54, i32 0, i32 8
  %56 = load i16, i16* %55, align 4
  %57 = call i64 %46(%struct.gx_device_s* %47, i16 zeroext %50, i16 zeroext %53, i16 zeroext %56)
  %58 = load %struct.device_s*, %struct.device_s** %6, align 8
  %59 = getelementptr inbounds %struct.device_s, %struct.device_s* %58, i32 0, i32 2
  store i64 %57, i64* %59, align 8
  %60 = load %struct.gx_device_s*, %struct.gx_device_s** %5, align 8
  %61 = load %struct.device_s*, %struct.device_s** %6, align 8
  %62 = getelementptr inbounds %struct.device_s, %struct.device_s* %61, i32 0, i32 0
  store %struct.gx_device_s* %60, %struct.gx_device_s** %62, align 8
  %63 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %64 = call i32 (%struct.gs_state_s*, ...) bitcast (i32 (%struct.gs_state_s*)* @gs_initmatrix to i32 (%struct.gs_state_s*, ...)*)(%struct.gs_state_s* %63)
  store i32 %64, i32* %8, align 4
  %65 = icmp slt i32 %64, 0
  br i1 %65, label %70, label %66

66:                                               ; preds = %32
  %67 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %68 = call i32 (%struct.gs_state_s*, ...) bitcast (i32 (%struct.gs_state_s*)* @gs_initclip to i32 (%struct.gs_state_s*, ...)*)(%struct.gs_state_s* %67)
  store i32 %68, i32* %8, align 4
  %69 = icmp slt i32 %68, 0
  br i1 %69, label %70, label %72

70:                                               ; preds = %66, %32
  %71 = load i32, i32* %8, align 4
  store i32 %71, i32* %3, align 4
  br label %83

72:                                               ; preds = %66
  %73 = load i32, i32* %7, align 4
  %74 = icmp ne i32 %73, 0
  br i1 %74, label %82, label %75

75:                                               ; preds = %72
  %76 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %77 = call i32 (%struct.gs_state_s*, ...) bitcast (i32 (%struct.gs_state_s*)* @gs_erasepage to i32 (%struct.gs_state_s*, ...)*)(%struct.gs_state_s* %76)
  store i32 %77, i32* %8, align 4
  %78 = icmp slt i32 %77, 0
  br i1 %78, label %79, label %81

79:                                               ; preds = %75
  %80 = load i32, i32* %8, align 4
  store i32 %80, i32* %3, align 4
  br label %83

81:                                               ; preds = %75
  br label %82

82:                                               ; preds = %81, %72
  store i32 0, i32* %3, align 4
  br label %83

83:                                               ; preds = %82, %79, %70, %27
  %84 = load i32, i32* %3, align 4
  ret i32 %84
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gs_nulldevice(%struct.gs_state_s* %0) #0 {
  %2 = alloca %struct.gs_state_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %4 = load %struct.gx_device_s*, %struct.gx_device_s** @gx_device_null_p, align 8
  %5 = call i32 @gs_setdevice(%struct.gs_state_s* %3, %struct.gx_device_s* %4)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gx_device_no_output(%struct.gs_state_s* %0) #0 {
  %2 = alloca %struct.gs_state_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %4 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %3, i32 0, i32 22
  %5 = load %struct.device_s*, %struct.device_s** %4, align 8
  %6 = getelementptr inbounds %struct.device_s, %struct.device_s* %5, i32 0, i32 0
  store %struct.gx_device_s* @null_device, %struct.gx_device_s** %6, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_writeppmfile(%struct.gx_device_memory_s* %0, %struct._IO_FILE* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.gx_device_memory_s*, align 8
  %5 = alloca %struct._IO_FILE*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i8*, align 8
  %19 = alloca i8*, align 8
  %20 = alloca i8*, align 8
  store %struct.gx_device_memory_s* %0, %struct.gx_device_memory_s** %4, align 8
  store %struct._IO_FILE* %1, %struct._IO_FILE** %5, align 8
  %21 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %4, align 8
  %22 = call i32 @mem_bytes_per_scan_line(%struct.gx_device_memory_s* %21)
  store i32 %22, i32* %6, align 4
  %23 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %4, align 8
  %24 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %23, i32 0, i32 4
  %25 = load i32, i32* %24, align 4
  store i32 %25, i32* %7, align 4
  %26 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %4, align 8
  %27 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %26, i32 0, i32 9
  %28 = load i32, i32* %27, align 8
  store i32 %28, i32* %8, align 4
  %29 = load i32, i32* %6, align 4
  %30 = mul nsw i32 %29, 3
  store i32 %30, i32* %9, align 4
  %31 = load i32, i32* %9, align 4
  %32 = call i8* @gs_malloc(i32 %31, i32 1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.35, i64 0, i64 0))
  store i8* %32, i8** %10, align 8
  store i32 0, i32* %13, align 4
  %33 = load i8*, i8** %10, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %35, label %36

35:                                               ; preds = %2
  store i32 -25, i32* %3, align 4
  br label %208

36:                                               ; preds = %2
  %37 = load i32, i32* %8, align 4
  switch i32 %37, label %48 [
    i32 1, label %38
    i32 8, label %39
    i32 24, label %46
    i32 32, label %47
  ]

38:                                               ; preds = %36
  store i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.1.36, i64 0, i64 0), i8** %11, align 8
  br label %49

39:                                               ; preds = %36
  %40 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %4, align 8
  %41 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %40, i32 0, i32 7
  %42 = load i32, i32* %41, align 8
  %43 = icmp ne i32 %42, 0
  %44 = zext i1 %43 to i64
  %45 = select i1 %43, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.2.37, i64 0, i64 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.3.38, i64 0, i64 0)
  store i8* %45, i8** %11, align 8
  br label %49

46:                                               ; preds = %36
  store i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.4.39, i64 0, i64 0), i8** %11, align 8
  br label %49

47:                                               ; preds = %36
  store i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.5.40, i64 0, i64 0), i8** %11, align 8
  br label %49

48:                                               ; preds = %36
  store i32 -23, i32* %13, align 4
  br label %204

49:                                               ; preds = %47, %46, %39, %38
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8
  %51 = load i8*, i8** %11, align 8
  %52 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %4, align 8
  %53 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %52, i32 0, i32 3
  %54 = load i32, i32* %53, align 8
  %55 = load i32, i32* %7, align 4
  %56 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %50, i8* %51, i32 %54, i32 %55)
  store i32 0, i32* %12, align 4
  br label %57

57:                                               ; preds = %200, %49
  %58 = load i32, i32* %12, align 4
  %59 = load i32, i32* %7, align 4
  %60 = icmp slt i32 %58, %59
  br i1 %60, label %61, label %203

61:                                               ; preds = %57
  %62 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %4, align 8
  %63 = load i32, i32* %12, align 4
  %64 = load i8*, i8** %10, align 8
  %65 = load i32, i32* %6, align 4
  %66 = call i32 @mem_copy_scan_lines(%struct.gx_device_memory_s* %62, i32 %63, i8* %64, i32 %65)
  %67 = load i32, i32* %8, align 4
  switch i32 %67, label %187 [
    i32 8, label %68
    i32 32, label %152
  ]

68:                                               ; preds = %61
  %69 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %4, align 8
  %70 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %69, i32 0, i32 7
  %71 = load i32, i32* %70, align 8
  %72 = icmp ne i32 %71, 0
  br i1 %72, label %73, label %124

73:                                               ; preds = %68
  %74 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %4, align 8
  %75 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %74, i32 0, i32 18
  %76 = load i8*, i8** %75, align 8
  store i8* %76, i8** %18, align 8
  %77 = load i8*, i8** %10, align 8
  %78 = load i32, i32* %6, align 4
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i8, i8* %77, i64 %79
  %81 = load i32, i32* %6, align 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds i8, i8* %80, i64 %82
  store i8* %83, i8** %15, align 8
  %84 = load i8*, i8** %15, align 8
  %85 = load i8*, i8** %10, align 8
  %86 = load i32, i32* %6, align 4
  %87 = sext i32 %86 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %84, i8* align 1 %85, i64 %87, i1 false)
  %88 = load i8*, i8** %10, align 8
  store i8* %88, i8** %16, align 8
  %89 = load i8*, i8** %15, align 8
  %90 = load i32, i32* %6, align 4
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds i8, i8* %89, i64 %91
  store i8* %92, i8** %17, align 8
  br label %93

93:                                               ; preds = %97, %73
  %94 = load i8*, i8** %15, align 8
  %95 = load i8*, i8** %17, align 8
  %96 = icmp ult i8* %94, %95
  br i1 %96, label %97, label %121

97:                                               ; preds = %93
  %98 = load i8*, i8** %18, align 8
  %99 = load i8*, i8** %15, align 8
  %100 = getelementptr inbounds i8, i8* %99, i32 1
  store i8* %100, i8** %15, align 8
  %101 = load i8, i8* %99, align 1
  %102 = zext i8 %101 to i32
  %103 = mul nsw i32 %102, 3
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds i8, i8* %98, i64 %104
  store i8* %105, i8** %19, align 8
  %106 = load i8*, i8** %19, align 8
  %107 = getelementptr inbounds i8, i8* %106, i32 1
  store i8* %107, i8** %19, align 8
  %108 = load i8, i8* %106, align 1
  %109 = load i8*, i8** %16, align 8
  %110 = getelementptr inbounds i8, i8* %109, i32 1
  store i8* %110, i8** %16, align 8
  store i8 %108, i8* %109, align 1
  %111 = load i8*, i8** %19, align 8
  %112 = getelementptr inbounds i8, i8* %111, i32 1
  store i8* %112, i8** %19, align 8
  %113 = load i8, i8* %111, align 1
  %114 = load i8*, i8** %16, align 8
  %115 = getelementptr inbounds i8, i8* %114, i32 1
  store i8* %115, i8** %16, align 8
  store i8 %113, i8* %114, align 1
  %116 = load i8*, i8** %19, align 8
  %117 = getelementptr inbounds i8, i8* %116, i32 1
  store i8* %117, i8** %19, align 8
  %118 = load i8, i8* %116, align 1
  %119 = load i8*, i8** %16, align 8
  %120 = getelementptr inbounds i8, i8* %119, i32 1
  store i8* %120, i8** %16, align 8
  store i8 %118, i8* %119, align 1
  br label %93

121:                                              ; preds = %93
  %122 = load i32, i32* %6, align 4
  %123 = mul nsw i32 %122, 3
  store i32 %123, i32* %14, align 4
  br label %151

124:                                              ; preds = %68
  %125 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %4, align 8
  %126 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %125, i32 0, i32 18
  %127 = load i8*, i8** %126, align 8
  store i8* %127, i8** %20, align 8
  %128 = load i8*, i8** %10, align 8
  store i8* %128, i8** %16, align 8
  store i8* %128, i8** %15, align 8
  %129 = load i8*, i8** %10, align 8
  %130 = load i32, i32* %6, align 4
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds i8, i8* %129, i64 %131
  store i8* %132, i8** %17, align 8
  br label %133

133:                                              ; preds = %137, %124
  %134 = load i8*, i8** %15, align 8
  %135 = load i8*, i8** %17, align 8
  %136 = icmp ult i8* %134, %135
  br i1 %136, label %137, label %149

137:                                              ; preds = %133
  %138 = load i8*, i8** %20, align 8
  %139 = load i8*, i8** %15, align 8
  %140 = getelementptr inbounds i8, i8* %139, i32 1
  store i8* %140, i8** %15, align 8
  %141 = load i8, i8* %139, align 1
  %142 = zext i8 %141 to i32
  %143 = mul nsw i32 %142, 3
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds i8, i8* %138, i64 %144
  %146 = load i8, i8* %145, align 1
  %147 = load i8*, i8** %16, align 8
  %148 = getelementptr inbounds i8, i8* %147, i32 1
  store i8* %148, i8** %16, align 8
  store i8 %146, i8* %147, align 1
  br label %133

149:                                              ; preds = %133
  %150 = load i32, i32* %6, align 4
  store i32 %150, i32* %14, align 4
  br label %151

151:                                              ; preds = %149, %121
  br label %189

152:                                              ; preds = %61
  %153 = load i8*, i8** %10, align 8
  store i8* %153, i8** %16, align 8
  store i8* %153, i8** %15, align 8
  %154 = load i8*, i8** %10, align 8
  %155 = load i32, i32* %6, align 4
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds i8, i8* %154, i64 %156
  store i8* %157, i8** %17, align 8
  br label %158

158:                                              ; preds = %162, %152
  %159 = load i8*, i8** %15, align 8
  %160 = load i8*, i8** %17, align 8
  %161 = icmp ult i8* %159, %160
  br i1 %161, label %162, label %180

162:                                              ; preds = %158
  %163 = load i8*, i8** %15, align 8
  %164 = getelementptr inbounds i8, i8* %163, i32 1
  store i8* %164, i8** %15, align 8
  %165 = load i8*, i8** %15, align 8
  %166 = getelementptr inbounds i8, i8* %165, i32 1
  store i8* %166, i8** %15, align 8
  %167 = load i8, i8* %165, align 1
  %168 = load i8*, i8** %16, align 8
  %169 = getelementptr inbounds i8, i8* %168, i32 1
  store i8* %169, i8** %16, align 8
  store i8 %167, i8* %168, align 1
  %170 = load i8*, i8** %15, align 8
  %171 = getelementptr inbounds i8, i8* %170, i32 1
  store i8* %171, i8** %15, align 8
  %172 = load i8, i8* %170, align 1
  %173 = load i8*, i8** %16, align 8
  %174 = getelementptr inbounds i8, i8* %173, i32 1
  store i8* %174, i8** %16, align 8
  store i8 %172, i8* %173, align 1
  %175 = load i8*, i8** %15, align 8
  %176 = getelementptr inbounds i8, i8* %175, i32 1
  store i8* %176, i8** %15, align 8
  %177 = load i8, i8* %175, align 1
  %178 = load i8*, i8** %16, align 8
  %179 = getelementptr inbounds i8, i8* %178, i32 1
  store i8* %179, i8** %16, align 8
  store i8 %177, i8* %178, align 1
  br label %158

180:                                              ; preds = %158
  %181 = load i8*, i8** %16, align 8
  %182 = load i8*, i8** %10, align 8
  %183 = ptrtoint i8* %181 to i64
  %184 = ptrtoint i8* %182 to i64
  %185 = sub i64 %183, %184
  %186 = trunc i64 %185 to i32
  store i32 %186, i32* %14, align 4
  br label %189

187:                                              ; preds = %61
  %188 = load i32, i32* %6, align 4
  store i32 %188, i32* %14, align 4
  br label %189

189:                                              ; preds = %187, %180, %151
  %190 = load i8*, i8** %10, align 8
  %191 = load i32, i32* %14, align 4
  %192 = sext i32 %191 to i64
  %193 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8
  %194 = call i64 @fwrite(i8* %190, i64 1, i64 %192, %struct._IO_FILE* %193)
  %195 = load i32, i32* %14, align 4
  %196 = sext i32 %195 to i64
  %197 = icmp ult i64 %194, %196
  br i1 %197, label %198, label %199

198:                                              ; preds = %189
  store i32 -12, i32* %13, align 4
  br label %204

199:                                              ; preds = %189
  br label %200

200:                                              ; preds = %199
  %201 = load i32, i32* %12, align 4
  %202 = add nsw i32 %201, 1
  store i32 %202, i32* %12, align 4
  br label %57

203:                                              ; preds = %57
  br label %204

204:                                              ; preds = %203, %198, %48
  %205 = load i8*, i8** %10, align 8
  %206 = load i32, i32* %9, align 4
  call void @gs_free(i8* %205, i32 %206, i32 1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.35, i64 0, i64 0))
  %207 = load i32, i32* %13, align 4
  store i32 %207, i32* %3, align 4
  br label %208

208:                                              ; preds = %204, %35
  %209 = load i32, i32* %3, align 4
  ret i32 %209
}

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

declare dso_local i64 @fwrite(i8*, i64, i64, %struct._IO_FILE*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.gs_font_dir_s* @gs_font_dir_alloc(i8* (i32, i32, i8*)* %0, void (i8*, i32, i32, i8*)* %1) #0 {
  %3 = alloca i8* (i32, i32, i8*)*, align 8
  %4 = alloca void (i8*, i32, i32, i8*)*, align 8
  store i8* (i32, i32, i8*)* %0, i8* (i32, i32, i8*)** %3, align 8
  store void (i8*, i32, i32, i8*)* %1, void (i8*, i32, i32, i8*)** %4, align 8
  %5 = load i8* (i32, i32, i8*)*, i8* (i32, i32, i8*)** %3, align 8
  %6 = load void (i8*, i32, i32, i8*)*, void (i8*, i32, i32, i8*)** %4, align 8
  %7 = call %struct.gs_font_dir_s* @gs_font_dir_alloc_limits(i8* (i32, i32, i8*)* %5, void (i8*, i32, i32, i8*)* %6, i32 10, i32 20000, i32 20, i32 500, i32 100)
  ret %struct.gs_font_dir_s* %7
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.gs_font_dir_s* @gs_font_dir_alloc_limits(i8* (i32, i32, i8*)* %0, void (i8*, i32, i32, i8*)* %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6) #0 {
  %8 = alloca %struct.gs_font_dir_s*, align 8
  %9 = alloca i8* (i32, i32, i8*)*, align 8
  %10 = alloca void (i8*, i32, i32, i8*)*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %struct.gs_font_dir_s*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca %struct.cached_fm_pair_s*, align 8
  %19 = alloca %struct.cached_char_s*, align 8
  store i8* (i32, i32, i8*)* %0, i8* (i32, i32, i8*)** %9, align 8
  store void (i8*, i32, i32, i8*)* %1, void (i8*, i32, i32, i8*)** %10, align 8
  store i32 %2, i32* %11, align 4
  store i32 %3, i32* %12, align 4
  store i32 %4, i32* %13, align 4
  store i32 %5, i32* %14, align 4
  store i32 %6, i32* %15, align 4
  %20 = load i8* (i32, i32, i8*)*, i8* (i32, i32, i8*)** %9, align 8
  %21 = call i8* %20(i32 1, i32 1144, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.41, i64 0, i64 0))
  %22 = bitcast i8* %21 to %struct.gs_font_dir_s*
  store %struct.gs_font_dir_s* %22, %struct.gs_font_dir_s** %16, align 8
  %23 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %16, align 8
  %24 = icmp eq %struct.gs_font_dir_s* %23, null
  br i1 %24, label %25, label %26

25:                                               ; preds = %7
  store %struct.gs_font_dir_s* null, %struct.gs_font_dir_s** %8, align 8
  br label %115

26:                                               ; preds = %7
  %27 = load i8* (i32, i32, i8*)*, i8* (i32, i32, i8*)** %9, align 8
  %28 = load i32, i32* %12, align 4
  %29 = call i8* %27(i32 %28, i32 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1.42, i64 0, i64 0))
  store i8* %29, i8** %17, align 8
  %30 = load i8* (i32, i32, i8*)*, i8* (i32, i32, i8*)** %9, align 8
  %31 = load i32, i32* %13, align 4
  %32 = load i32, i32* @cached_fm_pair_sizeof, align 4
  %33 = call i8* %30(i32 %31, i32 %32, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2.43, i64 0, i64 0))
  %34 = bitcast i8* %33 to %struct.cached_fm_pair_s*
  store %struct.cached_fm_pair_s* %34, %struct.cached_fm_pair_s** %18, align 8
  %35 = load i8* (i32, i32, i8*)*, i8* (i32, i32, i8*)** %9, align 8
  %36 = load i32, i32* %14, align 4
  %37 = load i32, i32* @cached_char_sizeof, align 4
  %38 = call i8* %35(i32 %36, i32 %37, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3.44, i64 0, i64 0))
  %39 = bitcast i8* %38 to %struct.cached_char_s*
  store %struct.cached_char_s* %39, %struct.cached_char_s** %19, align 8
  %40 = load i8*, i8** %17, align 8
  %41 = icmp eq i8* %40, null
  br i1 %41, label %48, label %42

42:                                               ; preds = %26
  %43 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %18, align 8
  %44 = icmp eq %struct.cached_fm_pair_s* %43, null
  br i1 %44, label %48, label %45

45:                                               ; preds = %42
  %46 = load %struct.cached_char_s*, %struct.cached_char_s** %19, align 8
  %47 = icmp eq %struct.cached_char_s* %46, null
  br i1 %47, label %48, label %77

48:                                               ; preds = %45, %42, %26
  %49 = load %struct.cached_char_s*, %struct.cached_char_s** %19, align 8
  %50 = icmp ne %struct.cached_char_s* %49, null
  br i1 %50, label %51, label %57

51:                                               ; preds = %48
  %52 = load void (i8*, i32, i32, i8*)*, void (i8*, i32, i32, i8*)** %10, align 8
  %53 = load %struct.cached_char_s*, %struct.cached_char_s** %19, align 8
  %54 = bitcast %struct.cached_char_s* %53 to i8*
  %55 = load i32, i32* %14, align 4
  %56 = load i32, i32* @cached_char_sizeof, align 4
  call void %52(i8* %54, i32 %55, i32 %56, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3.44, i64 0, i64 0))
  br label %57

57:                                               ; preds = %51, %48
  %58 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %18, align 8
  %59 = icmp ne %struct.cached_fm_pair_s* %58, null
  br i1 %59, label %60, label %66

60:                                               ; preds = %57
  %61 = load void (i8*, i32, i32, i8*)*, void (i8*, i32, i32, i8*)** %10, align 8
  %62 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %18, align 8
  %63 = bitcast %struct.cached_fm_pair_s* %62 to i8*
  %64 = load i32, i32* %13, align 4
  %65 = load i32, i32* @cached_fm_pair_sizeof, align 4
  call void %61(i8* %63, i32 %64, i32 %65, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2.43, i64 0, i64 0))
  br label %66

66:                                               ; preds = %60, %57
  %67 = load i8*, i8** %17, align 8
  %68 = icmp ne i8* %67, null
  br i1 %68, label %69, label %73

69:                                               ; preds = %66
  %70 = load void (i8*, i32, i32, i8*)*, void (i8*, i32, i32, i8*)** %10, align 8
  %71 = load i8*, i8** %17, align 8
  %72 = load i32, i32* %12, align 4
  call void %70(i8* %71, i32 %72, i32 1, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1.42, i64 0, i64 0))
  br label %73

73:                                               ; preds = %69, %66
  %74 = load void (i8*, i32, i32, i8*)*, void (i8*, i32, i32, i8*)** %10, align 8
  %75 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %16, align 8
  %76 = bitcast %struct.gs_font_dir_s* %75 to i8*
  call void %74(i8* %76, i32 1, i32 1144, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.41, i64 0, i64 0))
  store %struct.gs_font_dir_s* null, %struct.gs_font_dir_s** %8, align 8
  br label %115

77:                                               ; preds = %45
  %78 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %16, align 8
  %79 = bitcast %struct.gs_font_dir_s* %78 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 1 %79, i8 0, i64 1144, i1 false)
  %80 = load i8* (i32, i32, i8*)*, i8* (i32, i32, i8*)** %9, align 8
  %81 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %16, align 8
  %82 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %81, i32 0, i32 0
  store i8* (i32, i32, i8*)* %80, i8* (i32, i32, i8*)** %82, align 8
  %83 = load void (i8*, i32, i32, i8*)*, void (i8*, i32, i32, i8*)** %10, align 8
  %84 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %16, align 8
  %85 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %84, i32 0, i32 1
  store void (i8*, i32, i32, i8*)* %83, void (i8*, i32, i32, i8*)** %85, align 8
  %86 = load i32, i32* %11, align 4
  %87 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %16, align 8
  %88 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %87, i32 0, i32 5
  store i32 %86, i32* %88, align 4
  %89 = load i32, i32* %12, align 4
  %90 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %16, align 8
  %91 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %90, i32 0, i32 7
  store i32 %89, i32* %91, align 4
  %92 = load i32, i32* %13, align 4
  %93 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %16, align 8
  %94 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %93, i32 0, i32 9
  store i32 %92, i32* %94, align 4
  %95 = load i32, i32* %14, align 4
  %96 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %16, align 8
  %97 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %96, i32 0, i32 11
  store i32 %95, i32* %97, align 4
  %98 = load i32, i32* %15, align 4
  %99 = udiv i32 %98, 10
  %100 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %16, align 8
  %101 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %100, i32 0, i32 12
  store i32 %99, i32* %101, align 8
  %102 = load i32, i32* %15, align 4
  %103 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %16, align 8
  %104 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %103, i32 0, i32 13
  store i32 %102, i32* %104, align 4
  %105 = load i8*, i8** %17, align 8
  %106 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %16, align 8
  %107 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %106, i32 0, i32 15
  store i8* %105, i8** %107, align 8
  %108 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %18, align 8
  %109 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %16, align 8
  %110 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %109, i32 0, i32 17
  store %struct.cached_fm_pair_s* %108, %struct.cached_fm_pair_s** %110, align 8
  %111 = load %struct.cached_char_s*, %struct.cached_char_s** %19, align 8
  %112 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %16, align 8
  %113 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %112, i32 0, i32 19
  store %struct.cached_char_s* %111, %struct.cached_char_s** %113, align 8
  %114 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %16, align 8
  store %struct.gs_font_dir_s* %114, %struct.gs_font_dir_s** %8, align 8
  br label %115

115:                                              ; preds = %77, %73, %25
  %116 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %8, align 8
  ret %struct.gs_font_dir_s* %116
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_scalefont(%struct.gs_font_dir_s* %0, %struct.gs_font_s* %1, double %2, %struct.gs_font_s** %3, %struct.gs_font_s** %4) #0 {
  %6 = alloca %struct.gs_font_dir_s*, align 8
  %7 = alloca %struct.gs_font_s*, align 8
  %8 = alloca double, align 8
  %9 = alloca %struct.gs_font_s**, align 8
  %10 = alloca %struct.gs_font_s**, align 8
  %11 = alloca %struct.gs_matrix_s, align 8
  store %struct.gs_font_dir_s* %0, %struct.gs_font_dir_s** %6, align 8
  store %struct.gs_font_s* %1, %struct.gs_font_s** %7, align 8
  store double %2, double* %8, align 8
  store %struct.gs_font_s** %3, %struct.gs_font_s*** %9, align 8
  store %struct.gs_font_s** %4, %struct.gs_font_s*** %10, align 8
  %12 = load double, double* %8, align 8
  %13 = load double, double* %8, align 8
  %14 = call i32 @gs_make_scaling(double %12, double %13, %struct.gs_matrix_s* %11)
  %15 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %6, align 8
  %16 = load %struct.gs_font_s*, %struct.gs_font_s** %7, align 8
  %17 = load %struct.gs_font_s**, %struct.gs_font_s*** %9, align 8
  %18 = load %struct.gs_font_s**, %struct.gs_font_s*** %10, align 8
  %19 = call i32 @gs_makefont(%struct.gs_font_dir_s* %15, %struct.gs_font_s* %16, %struct.gs_matrix_s* %11, %struct.gs_font_s** %17, %struct.gs_font_s** %18)
  ret i32 %19
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_makefont(%struct.gs_font_dir_s* %0, %struct.gs_font_s* %1, %struct.gs_matrix_s* %2, %struct.gs_font_s** %3, %struct.gs_font_s** %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca %struct.gs_font_dir_s*, align 8
  %8 = alloca %struct.gs_font_s*, align 8
  %9 = alloca %struct.gs_matrix_s*, align 8
  %10 = alloca %struct.gs_font_s**, align 8
  %11 = alloca %struct.gs_font_s**, align 8
  %12 = alloca i32, align 4
  %13 = alloca %struct.gs_font_s*, align 8
  %14 = alloca %struct.gs_font_s*, align 8
  %15 = alloca %struct.gs_matrix_s, align 8
  store %struct.gs_font_dir_s* %0, %struct.gs_font_dir_s** %7, align 8
  store %struct.gs_font_s* %1, %struct.gs_font_s** %8, align 8
  store %struct.gs_matrix_s* %2, %struct.gs_matrix_s** %9, align 8
  store %struct.gs_font_s** %3, %struct.gs_font_s*** %10, align 8
  store %struct.gs_font_s** %4, %struct.gs_font_s*** %11, align 8
  store %struct.gs_font_s* null, %struct.gs_font_s** %13, align 8
  %16 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %7, align 8
  %17 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %16, i32 0, i32 3
  %18 = load %struct.gs_font_s*, %struct.gs_font_s** %17, align 8
  store %struct.gs_font_s* %18, %struct.gs_font_s** %14, align 8
  %19 = load %struct.gs_font_s**, %struct.gs_font_s*** %11, align 8
  store %struct.gs_font_s* null, %struct.gs_font_s** %19, align 8
  call void @gs_make_identity(%struct.gs_matrix_s* %15)
  %20 = load %struct.gs_font_s*, %struct.gs_font_s** %8, align 8
  %21 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %20, i32 0, i32 5
  %22 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %9, align 8
  %23 = call i32 @gs_matrix_multiply(%struct.gs_matrix_s* %21, %struct.gs_matrix_s* %22, %struct.gs_matrix_s* %15)
  store i32 %23, i32* %12, align 4
  %24 = icmp slt i32 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %5
  %26 = load i32, i32* %12, align 4
  store i32 %26, i32* %6, align 4
  br label %178

27:                                               ; preds = %5
  %28 = load %struct.gs_font_s*, %struct.gs_font_s** %8, align 8
  %29 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %28, i32 0, i32 12
  %30 = load i64, i64* %29, align 8
  %31 = icmp ne i64 %30, -1
  br i1 %31, label %32, label %94

32:                                               ; preds = %27
  br label %33

33:                                               ; preds = %88, %32
  %34 = load %struct.gs_font_s*, %struct.gs_font_s** %14, align 8
  %35 = icmp ne %struct.gs_font_s* %34, null
  br i1 %35, label %36, label %93

36:                                               ; preds = %33
  %37 = load %struct.gs_font_s*, %struct.gs_font_s** %14, align 8
  %38 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %37, i32 0, i32 12
  %39 = load i64, i64* %38, align 8
  %40 = load %struct.gs_font_s*, %struct.gs_font_s** %8, align 8
  %41 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %40, i32 0, i32 12
  %42 = load i64, i64* %41, align 8
  %43 = icmp eq i64 %39, %42
  br i1 %43, label %44, label %87

44:                                               ; preds = %36
  %45 = load %struct.gs_font_s*, %struct.gs_font_s** %14, align 8
  %46 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %45, i32 0, i32 6
  %47 = load i32, i32* %46, align 8
  %48 = load %struct.gs_font_s*, %struct.gs_font_s** %8, align 8
  %49 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %48, i32 0, i32 6
  %50 = load i32, i32* %49, align 8
  %51 = icmp eq i32 %47, %50
  br i1 %51, label %52, label %87

52:                                               ; preds = %44
  %53 = load %struct.gs_font_s*, %struct.gs_font_s** %14, align 8
  %54 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %53, i32 0, i32 5
  %55 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %54, i32 0, i32 0
  %56 = load float, float* %55, align 8
  %57 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %15, i32 0, i32 0
  %58 = load float, float* %57, align 8
  %59 = fcmp oeq float %56, %58
  br i1 %59, label %60, label %87

60:                                               ; preds = %52
  %61 = load %struct.gs_font_s*, %struct.gs_font_s** %14, align 8
  %62 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %61, i32 0, i32 5
  %63 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %62, i32 0, i32 2
  %64 = load float, float* %63, align 8
  %65 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %15, i32 0, i32 2
  %66 = load float, float* %65, align 8
  %67 = fcmp oeq float %64, %66
  br i1 %67, label %68, label %87

68:                                               ; preds = %60
  %69 = load %struct.gs_font_s*, %struct.gs_font_s** %14, align 8
  %70 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %69, i32 0, i32 5
  %71 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %70, i32 0, i32 4
  %72 = load float, float* %71, align 8
  %73 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %15, i32 0, i32 4
  %74 = load float, float* %73, align 8
  %75 = fcmp oeq float %72, %74
  br i1 %75, label %76, label %87

76:                                               ; preds = %68
  %77 = load %struct.gs_font_s*, %struct.gs_font_s** %14, align 8
  %78 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %77, i32 0, i32 5
  %79 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %78, i32 0, i32 6
  %80 = load float, float* %79, align 8
  %81 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %15, i32 0, i32 6
  %82 = load float, float* %81, align 8
  %83 = fcmp oeq float %80, %82
  br i1 %83, label %84, label %87

84:                                               ; preds = %76
  %85 = load %struct.gs_font_s*, %struct.gs_font_s** %14, align 8
  %86 = load %struct.gs_font_s**, %struct.gs_font_s*** %10, align 8
  store %struct.gs_font_s* %85, %struct.gs_font_s** %86, align 8
  store i32 0, i32* %6, align 4
  br label %178

87:                                               ; preds = %76, %68, %60, %52, %44, %36
  br label %88

88:                                               ; preds = %87
  %89 = load %struct.gs_font_s*, %struct.gs_font_s** %14, align 8
  store %struct.gs_font_s* %89, %struct.gs_font_s** %13, align 8
  %90 = load %struct.gs_font_s*, %struct.gs_font_s** %14, align 8
  %91 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %90, i32 0, i32 0
  %92 = load %struct.gs_font_s*, %struct.gs_font_s** %91, align 8
  store %struct.gs_font_s* %92, %struct.gs_font_s** %14, align 8
  br label %33

93:                                               ; preds = %33
  br label %94

94:                                               ; preds = %93, %27
  %95 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %7, align 8
  %96 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %95, i32 0, i32 0
  %97 = load i8* (i32, i32, i8*)*, i8* (i32, i32, i8*)** %96, align 8
  %98 = call i8* %97(i32 1, i32 184, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4.45, i64 0, i64 0))
  %99 = bitcast i8* %98 to %struct.gs_font_s*
  store %struct.gs_font_s* %99, %struct.gs_font_s** %14, align 8
  %100 = load %struct.gs_font_s*, %struct.gs_font_s** %14, align 8
  %101 = icmp ne %struct.gs_font_s* %100, null
  br i1 %101, label %103, label %102

102:                                              ; preds = %94
  store i32 -25, i32* %6, align 4
  br label %178

103:                                              ; preds = %94
  %104 = load %struct.gs_font_s*, %struct.gs_font_s** %14, align 8
  %105 = load %struct.gs_font_s*, %struct.gs_font_s** %8, align 8
  %106 = bitcast %struct.gs_font_s* %104 to i8*
  %107 = bitcast %struct.gs_font_s* %105 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %106, i8* align 8 %107, i64 184, i1 false)
  %108 = load %struct.gs_font_s*, %struct.gs_font_s** %14, align 8
  %109 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %108, i32 0, i32 5
  %110 = bitcast %struct.gs_matrix_s* %109 to i8*
  %111 = bitcast %struct.gs_matrix_s* %15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %110, i8* align 8 %111, i64 96, i1 false)
  %112 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %7, align 8
  %113 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %112, i32 0, i32 4
  %114 = load i32, i32* %113, align 8
  %115 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %7, align 8
  %116 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %115, i32 0, i32 5
  %117 = load i32, i32* %116, align 4
  %118 = icmp eq i32 %114, %117
  br i1 %118, label %119, label %144

119:                                              ; preds = %103
  %120 = load %struct.gs_font_s*, %struct.gs_font_s** %13, align 8
  %121 = icmp ne %struct.gs_font_s* %120, null
  br i1 %121, label %137, label %122

122:                                              ; preds = %119
  %123 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %7, align 8
  %124 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %123, i32 0, i32 3
  %125 = load %struct.gs_font_s*, %struct.gs_font_s** %124, align 8
  store %struct.gs_font_s* %125, %struct.gs_font_s** %13, align 8
  br label %126

126:                                              ; preds = %132, %122
  %127 = load %struct.gs_font_s*, %struct.gs_font_s** %13, align 8
  %128 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %127, i32 0, i32 0
  %129 = load %struct.gs_font_s*, %struct.gs_font_s** %128, align 8
  %130 = icmp ne %struct.gs_font_s* %129, null
  br i1 %130, label %131, label %136

131:                                              ; preds = %126
  br label %132

132:                                              ; preds = %131
  %133 = load %struct.gs_font_s*, %struct.gs_font_s** %13, align 8
  %134 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %133, i32 0, i32 0
  %135 = load %struct.gs_font_s*, %struct.gs_font_s** %134, align 8
  store %struct.gs_font_s* %135, %struct.gs_font_s** %13, align 8
  br label %126

136:                                              ; preds = %126
  br label %137

137:                                              ; preds = %136, %119
  %138 = load %struct.gs_font_s*, %struct.gs_font_s** %13, align 8
  %139 = load %struct.gs_font_s**, %struct.gs_font_s*** %11, align 8
  store %struct.gs_font_s* %138, %struct.gs_font_s** %139, align 8
  %140 = load %struct.gs_font_s*, %struct.gs_font_s** %13, align 8
  %141 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %140, i32 0, i32 1
  %142 = load %struct.gs_font_s*, %struct.gs_font_s** %141, align 8
  %143 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %142, i32 0, i32 0
  store %struct.gs_font_s* null, %struct.gs_font_s** %143, align 8
  br label %149

144:                                              ; preds = %103
  %145 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %7, align 8
  %146 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %145, i32 0, i32 4
  %147 = load i32, i32* %146, align 8
  %148 = add i32 %147, 1
  store i32 %148, i32* %146, align 8
  br label %149

149:                                              ; preds = %144, %137
  %150 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %7, align 8
  %151 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %150, i32 0, i32 3
  %152 = load %struct.gs_font_s*, %struct.gs_font_s** %151, align 8
  %153 = load %struct.gs_font_s*, %struct.gs_font_s** %14, align 8
  %154 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %153, i32 0, i32 0
  store %struct.gs_font_s* %152, %struct.gs_font_s** %154, align 8
  %155 = icmp ne %struct.gs_font_s* %152, null
  br i1 %155, label %156, label %162

156:                                              ; preds = %149
  %157 = load %struct.gs_font_s*, %struct.gs_font_s** %14, align 8
  %158 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %7, align 8
  %159 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %158, i32 0, i32 3
  %160 = load %struct.gs_font_s*, %struct.gs_font_s** %159, align 8
  %161 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %160, i32 0, i32 1
  store %struct.gs_font_s* %157, %struct.gs_font_s** %161, align 8
  br label %162

162:                                              ; preds = %156, %149
  %163 = load %struct.gs_font_s*, %struct.gs_font_s** %14, align 8
  %164 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %163, i32 0, i32 1
  store %struct.gs_font_s* null, %struct.gs_font_s** %164, align 8
  %165 = load %struct.gs_font_s*, %struct.gs_font_s** %14, align 8
  %166 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %7, align 8
  %167 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %166, i32 0, i32 3
  store %struct.gs_font_s* %165, %struct.gs_font_s** %167, align 8
  %168 = load %struct.gs_font_s*, %struct.gs_font_s** %8, align 8
  %169 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %168, i32 0, i32 2
  %170 = load %struct.gs_font_s*, %struct.gs_font_s** %169, align 8
  %171 = load %struct.gs_font_s*, %struct.gs_font_s** %14, align 8
  %172 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %171, i32 0, i32 2
  store %struct.gs_font_s* %170, %struct.gs_font_s** %172, align 8
  %173 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %7, align 8
  %174 = load %struct.gs_font_s*, %struct.gs_font_s** %14, align 8
  %175 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %174, i32 0, i32 3
  store %struct.gs_font_dir_s* %173, %struct.gs_font_dir_s** %175, align 8
  %176 = load %struct.gs_font_s*, %struct.gs_font_s** %14, align 8
  %177 = load %struct.gs_font_s**, %struct.gs_font_s*** %10, align 8
  store %struct.gs_font_s* %176, %struct.gs_font_s** %177, align 8
  store i32 1, i32* %6, align 4
  br label %178

178:                                              ; preds = %162, %102, %84, %25
  %179 = load i32, i32* %6, align 4
  ret i32 %179
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_setfont(%struct.gs_state_s* %0, %struct.gs_font_s* %1) #0 {
  %3 = alloca %struct.gs_state_s*, align 8
  %4 = alloca %struct.gs_font_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %3, align 8
  store %struct.gs_font_s* %1, %struct.gs_font_s** %4, align 8
  %5 = load %struct.gs_font_s*, %struct.gs_font_s** %4, align 8
  %6 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %7 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %6, i32 0, i32 16
  store %struct.gs_font_s* %5, %struct.gs_font_s** %7, align 8
  %8 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %9 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %8, i32 0, i32 18
  store i32 0, i32* %9, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.gs_font_s* @gs_currentfont(%struct.gs_state_s* %0) #0 {
  %2 = alloca %struct.gs_state_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %4 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %3, i32 0, i32 16
  %5 = load %struct.gs_font_s*, %struct.gs_font_s** %4, align 8
  ret %struct.gs_font_s* %5
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gs_cachestatus(%struct.gs_font_dir_s* %0, i32* %1) #0 {
  %3 = alloca %struct.gs_font_dir_s*, align 8
  %4 = alloca i32*, align 8
  store %struct.gs_font_dir_s* %0, %struct.gs_font_dir_s** %3, align 8
  store i32* %1, i32** %4, align 8
  %5 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %3, align 8
  %6 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %5, i32 0, i32 6
  %7 = load i32, i32* %6, align 8
  %8 = load i32*, i32** %4, align 8
  %9 = getelementptr inbounds i32, i32* %8, i64 0
  store i32 %7, i32* %9, align 4
  %10 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %3, align 8
  %11 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %10, i32 0, i32 7
  %12 = load i32, i32* %11, align 4
  %13 = load i32*, i32** %4, align 8
  %14 = getelementptr inbounds i32, i32* %13, i64 1
  store i32 %12, i32* %14, align 4
  %15 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %3, align 8
  %16 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %15, i32 0, i32 8
  %17 = load i32, i32* %16, align 8
  %18 = load i32*, i32** %4, align 8
  %19 = getelementptr inbounds i32, i32* %18, i64 2
  store i32 %17, i32* %19, align 4
  %20 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %3, align 8
  %21 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %20, i32 0, i32 9
  %22 = load i32, i32* %21, align 4
  %23 = load i32*, i32** %4, align 8
  %24 = getelementptr inbounds i32, i32* %23, i64 3
  store i32 %22, i32* %24, align 4
  %25 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %3, align 8
  %26 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %25, i32 0, i32 10
  %27 = load i32, i32* %26, align 8
  %28 = load i32*, i32** %4, align 8
  %29 = getelementptr inbounds i32, i32* %28, i64 4
  store i32 %27, i32* %29, align 4
  %30 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %3, align 8
  %31 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %30, i32 0, i32 11
  %32 = load i32, i32* %31, align 4
  %33 = load i32*, i32** %4, align 8
  %34 = getelementptr inbounds i32, i32* %33, i64 5
  store i32 %32, i32* %34, align 4
  %35 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %3, align 8
  %36 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %35, i32 0, i32 13
  %37 = load i32, i32* %36, align 4
  %38 = load i32*, i32** %4, align 8
  %39 = getelementptr inbounds i32, i32* %38, i64 6
  store i32 %37, i32* %39, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_setcachelimit(%struct.gs_font_dir_s* %0, i32 %1) #0 {
  %3 = alloca %struct.gs_font_dir_s*, align 8
  %4 = alloca i32, align 4
  store %struct.gs_font_dir_s* %0, %struct.gs_font_dir_s** %3, align 8
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %4, align 4
  %6 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %3, align 8
  %7 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %6, i32 0, i32 13
  store i32 %5, i32* %7, align 4
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_setcachelower(%struct.gs_font_dir_s* %0, i32 %1) #0 {
  %3 = alloca %struct.gs_font_dir_s*, align 8
  %4 = alloca i32, align 4
  store %struct.gs_font_dir_s* %0, %struct.gs_font_dir_s** %3, align 8
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %4, align 4
  %6 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %3, align 8
  %7 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %6, i32 0, i32 12
  store i32 %5, i32* %7, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_setcacheupper(%struct.gs_font_dir_s* %0, i32 %1) #0 {
  %3 = alloca %struct.gs_font_dir_s*, align 8
  %4 = alloca i32, align 4
  store %struct.gs_font_dir_s* %0, %struct.gs_font_dir_s** %3, align 8
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %4, align 4
  %6 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %3, align 8
  %7 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %6, i32 0, i32 13
  store i32 %5, i32* %7, align 4
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_currentcachelower(%struct.gs_font_dir_s* %0) #0 {
  %2 = alloca %struct.gs_font_dir_s*, align 8
  store %struct.gs_font_dir_s* %0, %struct.gs_font_dir_s** %2, align 8
  %3 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %2, align 8
  %4 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %3, i32 0, i32 12
  %5 = load i32, i32* %4, align 8
  ret i32 %5
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_currentcacheupper(%struct.gs_font_dir_s* %0) #0 {
  %2 = alloca %struct.gs_font_dir_s*, align 8
  store %struct.gs_font_dir_s* %0, %struct.gs_font_dir_s** %2, align 8
  %3 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %2, align 8
  %4 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %3, i32 0, i32 13
  %5 = load i32, i32* %4, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_no_build_char_proc(%struct.gs_show_enum_s* %0, %struct.gs_state_s* %1, %struct.gs_font_s* %2, i32 %3, i8* %4) #0 {
  %6 = alloca %struct.gs_show_enum_s*, align 8
  %7 = alloca %struct.gs_state_s*, align 8
  %8 = alloca %struct.gs_font_s*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %6, align 8
  store %struct.gs_state_s* %1, %struct.gs_state_s** %7, align 8
  store %struct.gs_font_s* %2, %struct.gs_font_s** %8, align 8
  store i32 %3, i32* %9, align 4
  store i8* %4, i8** %10, align 8
  ret i32 1
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_type1imagepath(%struct.gs_state_s* %0, i8* %1, i32 %2, i32 %3, double %4, double %5, double %6, double %7, i8* %8, i32 %9) #0 {
  %11 = alloca i32, align 4
  %12 = alloca %struct.gs_state_s*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  %18 = alloca double, align 8
  %19 = alloca double, align 8
  %20 = alloca i8*, align 8
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i8*, align 8
  %24 = alloca %struct.status, align 8
  %25 = alloca %struct.status*, align 8
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca i32, align 4
  %31 = alloca i32, align 4
  %32 = alloca float, align 4
  %33 = alloca %struct.gs_matrix_s, align 8
  %34 = alloca i32, align 4
  %35 = alloca %struct.gs_point_s, align 4
  %36 = alloca %struct.gs_point_s, align 4
  %37 = alloca %struct.gs_point_s, align 4
  store %struct.gs_state_s* %0, %struct.gs_state_s** %12, align 8
  store i8* %1, i8** %13, align 8
  store i32 %2, i32* %14, align 4
  store i32 %3, i32* %15, align 4
  store double %4, double* %16, align 8
  store double %5, double* %17, align 8
  store double %6, double* %18, align 8
  store double %7, double* %19, align 8
  store i8* %8, i8** %20, align 8
  store i32 %9, i32* %21, align 4
  store %struct.status* %24, %struct.status** %25, align 8
  %38 = load i32, i32* %15, align 4
  %39 = mul nsw i32 %38, 4
  %40 = sitofp i32 %39 to float
  store float %40, float* %32, align 4
  %41 = load %struct.gs_state_s*, %struct.gs_state_s** %12, align 8
  %42 = getelementptr inbounds %struct.status, %struct.status* %24, i32 0, i32 0
  %43 = call i32 @gs_currentmatrix(%struct.gs_state_s* %41, %struct.gs_matrix_s* %42)
  %44 = load float, float* %32, align 4
  %45 = fpext float %44 to double
  %46 = load float, float* %32, align 4
  %47 = fpext float %46 to double
  %48 = call i32 @gs_make_scaling(double %45, double %47, %struct.gs_matrix_s* %33)
  store i32 %48, i32* %31, align 4
  %49 = icmp slt i32 %48, 0
  br i1 %49, label %60, label %50

50:                                               ; preds = %10
  %51 = getelementptr inbounds %struct.status, %struct.status* %24, i32 0, i32 0
  %52 = getelementptr inbounds %struct.status, %struct.status* %24, i32 0, i32 0
  %53 = call i32 @gs_matrix_multiply(%struct.gs_matrix_s* %33, %struct.gs_matrix_s* %51, %struct.gs_matrix_s* %52)
  store i32 %53, i32* %31, align 4
  %54 = icmp slt i32 %53, 0
  br i1 %54, label %60, label %55

55:                                               ; preds = %50
  %56 = getelementptr inbounds %struct.status, %struct.status* %24, i32 0, i32 0
  %57 = getelementptr inbounds %struct.status, %struct.status* %24, i32 0, i32 0
  %58 = call i32 @gs_matrix_invert(%struct.gs_matrix_s* %56, %struct.gs_matrix_s* %57)
  store i32 %58, i32* %31, align 4
  %59 = icmp slt i32 %58, 0
  br i1 %59, label %60, label %62

60:                                               ; preds = %55, %50, %10
  %61 = load i32, i32* %31, align 4
  store i32 %61, i32* %11, align 4
  br label %281

62:                                               ; preds = %55
  %63 = load i32, i32* %14, align 4
  %64 = add nsw i32 %63, 2
  %65 = load i32, i32* %15, align 4
  %66 = add nsw i32 %65, 2
  %67 = mul nsw i32 %64, %66
  store i32 %67, i32* %22, align 4
  %68 = load i32, i32* %22, align 4
  %69 = call i8* @gs_malloc(i32 %68, i32 1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.46, i64 0, i64 0))
  store i8* %69, i8** %23, align 8
  %70 = load i8*, i8** %23, align 8
  %71 = icmp eq i8* %70, null
  br i1 %71, label %72, label %73

72:                                               ; preds = %62
  store i32 -25, i32* %11, align 4
  br label %281

73:                                               ; preds = %62
  %74 = load i8*, i8** %23, align 8
  %75 = load i8*, i8** %13, align 8
  %76 = load i32, i32* %14, align 4
  %77 = load i32, i32* %15, align 4
  call void @fill_cells(i8* %74, i8* %75, i32 %76, i32 %77)
  %78 = load i8*, i8** %20, align 8
  %79 = getelementptr inbounds %struct.status, %struct.status* %24, i32 0, i32 4
  store i8* %78, i8** %79, align 8
  %80 = load i8*, i8** %20, align 8
  %81 = load i32, i32* %21, align 4
  %82 = zext i32 %81 to i64
  %83 = getelementptr inbounds i8, i8* %80, i64 %82
  %84 = getelementptr inbounds %struct.status, %struct.status* %24, i32 0, i32 1
  store i8* %83, i8** %84, align 8
  store i32 0, i32* %26, align 4
  br label %85

85:                                               ; preds = %113, %73
  %86 = load i32, i32* %26, align 4
  %87 = load i32, i32* %14, align 4
  %88 = icmp slt i32 %86, %87
  br i1 %88, label %89, label %116

89:                                               ; preds = %85
  store i32 1, i32* %34, align 4
  br label %90

90:                                               ; preds = %109, %89
  %91 = load i32, i32* %34, align 4
  %92 = load i32, i32* %15, align 4
  %93 = icmp sle i32 %91, %92
  br i1 %93, label %94, label %112

94:                                               ; preds = %90
  %95 = load i8*, i8** %23, align 8
  %96 = load i32, i32* %34, align 4
  %97 = load i32, i32* %14, align 4
  %98 = add nsw i32 %97, 2
  %99 = mul nsw i32 %96, %98
  %100 = load i32, i32* %26, align 4
  %101 = add nsw i32 %99, %100
  %102 = add nsw i32 %101, 1
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds i8, i8* %95, i64 %103
  %105 = load i8, i8* %104, align 1
  %106 = icmp ne i8 %105, 0
  br i1 %106, label %107, label %108

107:                                              ; preds = %94
  br label %117

108:                                              ; preds = %94
  br label %109

109:                                              ; preds = %108
  %110 = load i32, i32* %34, align 4
  %111 = add nsw i32 %110, 1
  store i32 %111, i32* %34, align 4
  br label %90

112:                                              ; preds = %90
  br label %113

113:                                              ; preds = %112
  %114 = load i32, i32* %26, align 4
  %115 = add nsw i32 %114, 1
  store i32 %115, i32* %26, align 4
  br label %85

116:                                              ; preds = %85
  br label %117

117:                                              ; preds = %116, %107
  %118 = load double, double* %18, align 8
  %119 = fmul double %118, 4.000000e+00
  %120 = load double, double* %19, align 8
  %121 = fmul double %120, 4.000000e+00
  %122 = getelementptr inbounds %struct.status, %struct.status* %24, i32 0, i32 0
  %123 = call i32 @gs_distance_transform(double %119, double %121, %struct.gs_matrix_s* %122, %struct.gs_point_s* %35)
  store i32 %123, i32* %31, align 4
  %124 = icmp slt i32 %123, 0
  br i1 %124, label %142, label %125

125:                                              ; preds = %117
  %126 = load double, double* %16, align 8
  %127 = fmul double %126, 4.000000e+00
  %128 = load double, double* %17, align 8
  %129 = fmul double %128, 4.000000e+00
  %130 = getelementptr inbounds %struct.status, %struct.status* %24, i32 0, i32 0
  %131 = call i32 @gs_distance_transform(double %127, double %129, %struct.gs_matrix_s* %130, %struct.gs_point_s* %36)
  store i32 %131, i32* %31, align 4
  %132 = icmp slt i32 %131, 0
  br i1 %132, label %142, label %133

133:                                              ; preds = %125
  %134 = load i32, i32* %26, align 4
  %135 = sitofp i32 %134 to double
  %136 = load double, double* %18, align 8
  %137 = fsub double %135, %136
  %138 = fmul double %137, 4.000000e+00
  %139 = getelementptr inbounds %struct.status, %struct.status* %24, i32 0, i32 0
  %140 = call i32 @gs_distance_transform(double %138, double 0.000000e+00, %struct.gs_matrix_s* %139, %struct.gs_point_s* %37)
  store i32 %140, i32* %31, align 4
  %141 = icmp slt i32 %140, 0
  br i1 %141, label %142, label %144

142:                                              ; preds = %133, %125, %117
  %143 = load i32, i32* %31, align 4
  store i32 %143, i32* %11, align 4
  br label %281

144:                                              ; preds = %133
  %145 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %35, i32 0, i32 0
  %146 = load float, float* %145, align 4
  %147 = fpext float %146 to double
  %148 = call i32 @round_coord(double %147)
  %149 = getelementptr inbounds %struct.status, %struct.status* %24, i32 0, i32 2
  store i32 %148, i32* %149, align 8
  %150 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %35, i32 0, i32 1
  %151 = load float, float* %150, align 4
  %152 = fpext float %151 to double
  %153 = call i32 @round_coord(double %152)
  %154 = getelementptr inbounds %struct.status, %struct.status* %24, i32 0, i32 3
  store i32 %153, i32* %154, align 4
  %155 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %36, i32 0, i32 0
  %156 = load float, float* %155, align 4
  %157 = fpext float %156 to double
  %158 = call i32 @round_coord(double %157)
  store i32 %158, i32* %27, align 4
  %159 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %36, i32 0, i32 1
  %160 = load float, float* %159, align 4
  %161 = fpext float %160 to double
  %162 = call i32 @round_coord(double %161)
  store i32 %162, i32* %28, align 4
  %163 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %37, i32 0, i32 0
  %164 = load float, float* %163, align 4
  %165 = fpext float %164 to double
  %166 = call i32 @round_coord(double %165)
  store i32 %166, i32* %29, align 4
  %167 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %37, i32 0, i32 1
  %168 = load float, float* %167, align 4
  %169 = fpext float %168 to double
  %170 = call i32 @round_coord(double %169)
  store i32 %170, i32* %30, align 4
  %171 = load %struct.status*, %struct.status** %25, align 8
  %172 = load i32, i32* %29, align 4
  %173 = call i32 @put_int(%struct.status* %171, i32 %172)
  store i32 %173, i32* %31, align 4
  %174 = icmp slt i32 %173, 0
  br i1 %174, label %175, label %177

175:                                              ; preds = %144
  %176 = load i32, i32* %31, align 4
  store i32 %176, i32* %11, align 4
  br label %281

177:                                              ; preds = %144
  %178 = load i32, i32* %28, align 4
  %179 = icmp ne i32 %178, 0
  br i1 %179, label %183, label %180

180:                                              ; preds = %177
  %181 = load i32, i32* %30, align 4
  %182 = icmp ne i32 %181, 0
  br i1 %182, label %183, label %215

183:                                              ; preds = %180, %177
  %184 = load %struct.status*, %struct.status** %25, align 8
  %185 = load i32, i32* %30, align 4
  %186 = call i32 @put_int(%struct.status* %184, i32 %185)
  store i32 %186, i32* %31, align 4
  %187 = icmp slt i32 %186, 0
  br i1 %187, label %198, label %188

188:                                              ; preds = %183
  %189 = load %struct.status*, %struct.status** %25, align 8
  %190 = load i32, i32* %27, align 4
  %191 = call i32 @put_int(%struct.status* %189, i32 %190)
  store i32 %191, i32* %31, align 4
  %192 = icmp slt i32 %191, 0
  br i1 %192, label %198, label %193

193:                                              ; preds = %188
  %194 = load %struct.status*, %struct.status** %25, align 8
  %195 = load i32, i32* %28, align 4
  %196 = call i32 @put_int(%struct.status* %194, i32 %195)
  store i32 %196, i32* %31, align 4
  %197 = icmp slt i32 %196, 0
  br i1 %197, label %198, label %200

198:                                              ; preds = %193, %188, %183
  %199 = load i32, i32* %31, align 4
  store i32 %199, i32* %11, align 4
  br label %281

200:                                              ; preds = %193
  %201 = getelementptr inbounds %struct.status, %struct.status* %24, i32 0, i32 4
  %202 = load i8*, i8** %201, align 8
  %203 = getelementptr inbounds i8, i8* %202, i64 2
  %204 = getelementptr inbounds %struct.status, %struct.status* %24, i32 0, i32 1
  %205 = load i8*, i8** %204, align 8
  %206 = icmp ugt i8* %203, %205
  br i1 %206, label %207, label %208

207:                                              ; preds = %200
  store i32 -13, i32* %11, align 4
  br label %281

208:                                              ; preds = %200
  %209 = getelementptr inbounds %struct.status, %struct.status* %24, i32 0, i32 4
  %210 = load i8*, i8** %209, align 8
  %211 = getelementptr inbounds i8, i8* %210, i32 1
  store i8* %211, i8** %209, align 8
  store i8 12, i8* %210, align 1
  %212 = getelementptr inbounds %struct.status, %struct.status* %24, i32 0, i32 4
  %213 = load i8*, i8** %212, align 8
  %214 = getelementptr inbounds i8, i8* %213, i32 1
  store i8* %214, i8** %212, align 8
  store i8 7, i8* %213, align 1
  br label %234

215:                                              ; preds = %180
  %216 = load %struct.status*, %struct.status** %25, align 8
  %217 = load i32, i32* %27, align 4
  %218 = call i32 @put_int(%struct.status* %216, i32 %217)
  store i32 %218, i32* %31, align 4
  %219 = icmp slt i32 %218, 0
  br i1 %219, label %220, label %222

220:                                              ; preds = %215
  %221 = load i32, i32* %31, align 4
  store i32 %221, i32* %11, align 4
  br label %281

222:                                              ; preds = %215
  %223 = getelementptr inbounds %struct.status, %struct.status* %24, i32 0, i32 4
  %224 = load i8*, i8** %223, align 8
  %225 = getelementptr inbounds i8, i8* %224, i64 1
  %226 = getelementptr inbounds %struct.status, %struct.status* %24, i32 0, i32 1
  %227 = load i8*, i8** %226, align 8
  %228 = icmp ugt i8* %225, %227
  br i1 %228, label %229, label %230

229:                                              ; preds = %222
  store i32 -13, i32* %11, align 4
  br label %281

230:                                              ; preds = %222
  %231 = getelementptr inbounds %struct.status, %struct.status* %24, i32 0, i32 4
  %232 = load i8*, i8** %231, align 8
  %233 = getelementptr inbounds i8, i8* %232, i32 1
  store i8* %233, i8** %231, align 8
  store i8 13, i8* %232, align 1
  br label %234

234:                                              ; preds = %230, %208
  %235 = load i32, i32* %26, align 4
  %236 = mul nsw i32 %235, 4
  %237 = getelementptr inbounds %struct.status, %struct.status* %24, i32 0, i32 5
  store i32 %236, i32* %237, align 8
  %238 = load double, double* %19, align 8
  %239 = fmul double %238, 4.000000e+00
  %240 = fptosi double %239 to i32
  %241 = getelementptr inbounds %struct.status, %struct.status* %24, i32 0, i32 6
  store i32 %240, i32* %241, align 4
  %242 = load i32, i32* %29, align 4
  %243 = getelementptr inbounds %struct.status, %struct.status* %24, i32 0, i32 2
  %244 = load i32, i32* %243, align 8
  %245 = add nsw i32 %242, %244
  %246 = getelementptr inbounds %struct.status, %struct.status* %24, i32 0, i32 7
  store i32 %245, i32* %246, align 8
  %247 = load i32, i32* %30, align 4
  %248 = getelementptr inbounds %struct.status, %struct.status* %24, i32 0, i32 3
  %249 = load i32, i32* %248, align 4
  %250 = add nsw i32 %247, %249
  %251 = getelementptr inbounds %struct.status, %struct.status* %24, i32 0, i32 8
  store i32 %250, i32* %251, align 4
  %252 = load i8*, i8** %23, align 8
  %253 = load i32, i32* %14, align 4
  %254 = load i32, i32* %15, align 4
  %255 = load %struct.status*, %struct.status** %25, align 8
  %256 = call i32 @trace_cells(i8* %252, i32 %253, i32 %254, %struct.status* %255)
  store i32 %256, i32* %31, align 4
  %257 = load i8*, i8** %23, align 8
  %258 = load i32, i32* %22, align 4
  call void @gs_free(i8* %257, i32 %258, i32 1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.46, i64 0, i64 0))
  %259 = load i32, i32* %31, align 4
  %260 = icmp slt i32 %259, 0
  br i1 %260, label %261, label %263

261:                                              ; preds = %234
  %262 = load i32, i32* %31, align 4
  store i32 %262, i32* %11, align 4
  br label %281

263:                                              ; preds = %234
  %264 = getelementptr inbounds %struct.status, %struct.status* %24, i32 0, i32 4
  %265 = load i8*, i8** %264, align 8
  %266 = getelementptr inbounds %struct.status, %struct.status* %24, i32 0, i32 1
  %267 = load i8*, i8** %266, align 8
  %268 = icmp uge i8* %265, %267
  br i1 %268, label %269, label %270

269:                                              ; preds = %263
  store i32 -13, i32* %11, align 4
  br label %281

270:                                              ; preds = %263
  %271 = getelementptr inbounds %struct.status, %struct.status* %24, i32 0, i32 4
  %272 = load i8*, i8** %271, align 8
  %273 = getelementptr inbounds i8, i8* %272, i32 1
  store i8* %273, i8** %271, align 8
  store i8 14, i8* %272, align 1
  %274 = getelementptr inbounds %struct.status, %struct.status* %24, i32 0, i32 4
  %275 = load i8*, i8** %274, align 8
  %276 = load i8*, i8** %20, align 8
  %277 = ptrtoint i8* %275 to i64
  %278 = ptrtoint i8* %276 to i64
  %279 = sub i64 %277, %278
  %280 = trunc i64 %279 to i32
  store i32 %280, i32* %11, align 4
  br label %281

281:                                              ; preds = %270, %269, %261, %229, %220, %207, %198, %175, %142, %72, %60
  %282 = load i32, i32* %11, align 4
  ret i32 %282
}

; Function Attrs: noinline nounwind uwtable
define internal void @fill_cells(i8* %0, i8* %1, i32 %2, i32 %3) #0 {
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store i8* %0, i8** %5, align 8
  store i8* %1, i8** %6, align 8
  store i32 %2, i32* %7, align 4
  store i32 %3, i32* %8, align 4
  %15 = load i8*, i8** %6, align 8
  %16 = getelementptr inbounds i8, i8* %15, i64 -1
  store i8* %16, i8** %10, align 8
  %17 = load i8*, i8** %5, align 8
  %18 = load i32, i32* %7, align 4
  %19 = add nsw i32 %18, 2
  %20 = load i32, i32* %8, align 4
  %21 = mul nsw i32 %19, %20
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i8, i8* %17, i64 %22
  %24 = getelementptr inbounds i8, i8* %23, i64 1
  store i8* %24, i8** %11, align 8
  %25 = load i8*, i8** %5, align 8
  %26 = load i32, i32* %7, align 4
  %27 = add nsw i32 %26, 2
  %28 = load i32, i32* %8, align 4
  %29 = add nsw i32 %28, 2
  %30 = mul nsw i32 %27, %29
  %31 = sext i32 %30 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %25, i8 0, i64 %31, i1 false)
  store i32 0, i32* %9, align 4
  br label %32

32:                                               ; preds = %72, %4
  %33 = load i32, i32* %9, align 4
  %34 = load i32, i32* %8, align 4
  %35 = icmp slt i32 %33, %34
  br i1 %35, label %36, label %75

36:                                               ; preds = %32
  store i32 0, i32* %12, align 4
  store i32 0, i32* %14, align 4
  br label %37

37:                                               ; preds = %57, %36
  %38 = load i32, i32* %14, align 4
  %39 = load i32, i32* %7, align 4
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %41, label %64

41:                                               ; preds = %37
  %42 = load i32, i32* %12, align 4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %49

44:                                               ; preds = %41
  store i32 128, i32* %12, align 4
  %45 = load i8*, i8** %10, align 8
  %46 = getelementptr inbounds i8, i8* %45, i32 1
  store i8* %46, i8** %10, align 8
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  store i32 %48, i32* %13, align 4
  br label %49

49:                                               ; preds = %44, %41
  %50 = load i32, i32* %13, align 4
  %51 = load i32, i32* %12, align 4
  %52 = and i32 %50, %51
  %53 = icmp ne i32 %52, 0
  br i1 %53, label %54, label %56

54:                                               ; preds = %49
  %55 = load i8*, i8** %11, align 8
  store i8 1, i8* %55, align 1
  br label %56

56:                                               ; preds = %54, %49
  br label %57

57:                                               ; preds = %56
  %58 = load i32, i32* %14, align 4
  %59 = add nsw i32 %58, 1
  store i32 %59, i32* %14, align 4
  %60 = load i32, i32* %12, align 4
  %61 = ashr i32 %60, 1
  store i32 %61, i32* %12, align 4
  %62 = load i8*, i8** %11, align 8
  %63 = getelementptr inbounds i8, i8* %62, i32 1
  store i8* %63, i8** %11, align 8
  br label %37

64:                                               ; preds = %37
  %65 = load i32, i32* %7, align 4
  %66 = mul nsw i32 %65, 2
  %67 = add nsw i32 %66, 2
  %68 = load i8*, i8** %11, align 8
  %69 = sext i32 %67 to i64
  %70 = sub i64 0, %69
  %71 = getelementptr inbounds i8, i8* %68, i64 %70
  store i8* %71, i8** %11, align 8
  br label %72

72:                                               ; preds = %64
  %73 = load i32, i32* %9, align 4
  %74 = add nsw i32 %73, 1
  store i32 %74, i32* %9, align 4
  br label %32

75:                                               ; preds = %32
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @round_coord(double %0) #0 {
  %2 = alloca double, align 8
  %3 = alloca i64, align 8
  store double %0, double* %2, align 8
  %4 = load double, double* %2, align 8
  %5 = fadd double %4, 5.000000e-01
  %6 = fptosi double %5 to i64
  store i64 %6, i64* %3, align 8
  %7 = load i64, i64* %3, align 8
  %8 = icmp sgt i64 %7, 32767
  br i1 %8, label %9, label %10

9:                                                ; preds = %1
  br label %19

10:                                               ; preds = %1
  %11 = load i64, i64* %3, align 8
  %12 = icmp slt i64 %11, -32767
  br i1 %12, label %13, label %14

13:                                               ; preds = %10
  br label %17

14:                                               ; preds = %10
  %15 = load i64, i64* %3, align 8
  %16 = trunc i64 %15 to i32
  br label %17

17:                                               ; preds = %14, %13
  %18 = phi i32 [ -32767, %13 ], [ %16, %14 ]
  br label %19

19:                                               ; preds = %17, %9
  %20 = phi i32 [ 32767, %9 ], [ %18, %17 ]
  ret i32 %20
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @put_int(%struct.status* %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.status*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  store %struct.status* %0, %struct.status** %4, align 8
  store i32 %1, i32* %5, align 4
  %7 = load %struct.status*, %struct.status** %4, align 8
  %8 = getelementptr inbounds %struct.status, %struct.status* %7, i32 0, i32 4
  %9 = load i8*, i8** %8, align 8
  store i8* %9, i8** %6, align 8
  %10 = load i8*, i8** %6, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 5
  %12 = load %struct.status*, %struct.status** %4, align 8
  %13 = getelementptr inbounds %struct.status, %struct.status* %12, i32 0, i32 1
  %14 = load i8*, i8** %13, align 8
  %15 = icmp ugt i8* %11, %14
  br i1 %15, label %16, label %17

16:                                               ; preds = %2
  store i32 -13, i32* %3, align 4
  br label %107

17:                                               ; preds = %2
  %18 = load i32, i32* %5, align 4
  %19 = icmp sge i32 %18, -107
  br i1 %19, label %20, label %30

20:                                               ; preds = %17
  %21 = load i32, i32* %5, align 4
  %22 = icmp sle i32 %21, 107
  br i1 %22, label %23, label %30

23:                                               ; preds = %20
  %24 = load i32, i32* %5, align 4
  %25 = sub nsw i32 %24, -107
  %26 = add nsw i32 %25, 32
  %27 = trunc i32 %26 to i8
  %28 = load i8*, i8** %6, align 8
  %29 = getelementptr inbounds i8, i8* %28, i32 1
  store i8* %29, i8** %6, align 8
  store i8 %27, i8* %28, align 1
  br label %103

30:                                               ; preds = %20, %17
  %31 = load i32, i32* %5, align 4
  %32 = icmp sge i32 %31, 108
  br i1 %32, label %33, label %51

33:                                               ; preds = %30
  %34 = load i32, i32* %5, align 4
  %35 = icmp sle i32 %34, 1131
  br i1 %35, label %36, label %51

36:                                               ; preds = %33
  %37 = load i32, i32* %5, align 4
  %38 = sub nsw i32 %37, 108
  store i32 %38, i32* %5, align 4
  %39 = load i32, i32* %5, align 4
  %40 = ashr i32 %39, 8
  %41 = add nsw i32 %40, 246
  %42 = add nsw i32 %41, 1
  %43 = trunc i32 %42 to i8
  %44 = load i8*, i8** %6, align 8
  %45 = getelementptr inbounds i8, i8* %44, i32 1
  store i8* %45, i8** %6, align 8
  store i8 %43, i8* %44, align 1
  %46 = load i32, i32* %5, align 4
  %47 = and i32 %46, 255
  %48 = trunc i32 %47 to i8
  %49 = load i8*, i8** %6, align 8
  %50 = getelementptr inbounds i8, i8* %49, i32 1
  store i8* %50, i8** %6, align 8
  store i8 %48, i8* %49, align 1
  br label %102

51:                                               ; preds = %33, %30
  %52 = load i32, i32* %5, align 4
  %53 = icmp sge i32 %52, -1131
  br i1 %53, label %54, label %73

54:                                               ; preds = %51
  %55 = load i32, i32* %5, align 4
  %56 = icmp sle i32 %55, -108
  br i1 %56, label %57, label %73

57:                                               ; preds = %54
  %58 = load i32, i32* %5, align 4
  %59 = sub nsw i32 %58, -108
  %60 = sub nsw i32 0, %59
  store i32 %60, i32* %5, align 4
  %61 = load i32, i32* %5, align 4
  %62 = ashr i32 %61, 8
  %63 = add nsw i32 %62, 250
  %64 = add nsw i32 %63, 1
  %65 = trunc i32 %64 to i8
  %66 = load i8*, i8** %6, align 8
  %67 = getelementptr inbounds i8, i8* %66, i32 1
  store i8* %67, i8** %6, align 8
  store i8 %65, i8* %66, align 1
  %68 = load i32, i32* %5, align 4
  %69 = and i32 %68, 255
  %70 = trunc i32 %69 to i8
  %71 = load i8*, i8** %6, align 8
  %72 = getelementptr inbounds i8, i8* %71, i32 1
  store i8* %72, i8** %6, align 8
  store i8 %70, i8* %71, align 1
  br label %101

73:                                               ; preds = %54, %51
  %74 = load i8*, i8** %6, align 8
  %75 = getelementptr inbounds i8, i8* %74, i32 1
  store i8* %75, i8** %6, align 8
  store i8 -1, i8* %74, align 1
  %76 = load i32, i32* %5, align 4
  %77 = sext i32 %76 to i64
  %78 = ashr i64 %77, 24
  %79 = and i64 %78, 255
  %80 = trunc i64 %79 to i8
  %81 = load i8*, i8** %6, align 8
  %82 = getelementptr inbounds i8, i8* %81, i32 1
  store i8* %82, i8** %6, align 8
  store i8 %80, i8* %81, align 1
  %83 = load i32, i32* %5, align 4
  %84 = sext i32 %83 to i64
  %85 = ashr i64 %84, 16
  %86 = and i64 %85, 255
  %87 = trunc i64 %86 to i8
  %88 = load i8*, i8** %6, align 8
  %89 = getelementptr inbounds i8, i8* %88, i32 1
  store i8* %89, i8** %6, align 8
  store i8 %87, i8* %88, align 1
  %90 = load i32, i32* %5, align 4
  %91 = ashr i32 %90, 8
  %92 = and i32 %91, 255
  %93 = trunc i32 %92 to i8
  %94 = load i8*, i8** %6, align 8
  %95 = getelementptr inbounds i8, i8* %94, i32 1
  store i8* %95, i8** %6, align 8
  store i8 %93, i8* %94, align 1
  %96 = load i32, i32* %5, align 4
  %97 = and i32 %96, 255
  %98 = trunc i32 %97 to i8
  %99 = load i8*, i8** %6, align 8
  %100 = getelementptr inbounds i8, i8* %99, i32 1
  store i8* %100, i8** %6, align 8
  store i8 %98, i8* %99, align 1
  br label %101

101:                                              ; preds = %73, %57
  br label %102

102:                                              ; preds = %101, %36
  br label %103

103:                                              ; preds = %102, %23
  %104 = load i8*, i8** %6, align 8
  %105 = load %struct.status*, %struct.status** %4, align 8
  %106 = getelementptr inbounds %struct.status, %struct.status* %105, i32 0, i32 4
  store i8* %104, i8** %106, align 8
  store i32 0, i32* %3, align 4
  br label %107

107:                                              ; preds = %103, %16
  %108 = load i32, i32* %3, align 4
  ret i32 %108
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @trace_cells(i8* %0, i32 %1, i32 %2, %struct.status* %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %struct.status*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i8* %0, i8** %6, align 8
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store %struct.status* %3, %struct.status** %9, align 8
  %14 = load i8*, i8** %6, align 8
  %15 = load i32, i32* %7, align 4
  %16 = add nsw i32 %15, 2
  %17 = load i32, i32* %8, align 4
  %18 = add nsw i32 %17, 1
  %19 = mul nsw i32 %16, %18
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %14, i64 %20
  %22 = getelementptr inbounds i8, i8* %21, i64 -2
  store i8* %22, i8** %10, align 8
  br label %23

23:                                               ; preds = %108, %4
  %24 = load i8*, i8** %10, align 8
  %25 = load i8*, i8** %6, align 8
  %26 = icmp uge i8* %24, %25
  br i1 %26, label %27, label %111

27:                                               ; preds = %23
  %28 = load i8*, i8** %10, align 8
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = icmp eq i32 %30, 1
  br i1 %31, label %32, label %107

32:                                               ; preds = %27
  %33 = load i8*, i8** %10, align 8
  %34 = load i32, i32* %7, align 4
  %35 = add nsw i32 %34, 2
  %36 = sub nsw i32 0, %35
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds i8, i8* %33, i64 %37
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %107

42:                                               ; preds = %32
  %43 = load i8*, i8** %10, align 8
  %44 = load i8*, i8** %6, align 8
  %45 = ptrtoint i8* %43 to i64
  %46 = ptrtoint i8* %44 to i64
  %47 = sub i64 %45, %46
  %48 = load i32, i32* %7, align 4
  %49 = add nsw i32 %48, 2
  %50 = sext i32 %49 to i64
  %51 = srem i64 %47, %50
  %52 = sub nsw i64 %51, 1
  %53 = trunc i64 %52 to i32
  store i32 %53, i32* %12, align 4
  %54 = load i8*, i8** %10, align 8
  %55 = load i8*, i8** %6, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = ptrtoint i8* %55 to i64
  %58 = sub i64 %56, %57
  %59 = load i32, i32* %7, align 4
  %60 = add nsw i32 %59, 2
  %61 = sext i32 %60 to i64
  %62 = sdiv i64 %58, %61
  %63 = sub nsw i64 %62, 1
  %64 = trunc i64 %63 to i32
  store i32 %64, i32* %13, align 4
  %65 = load %struct.status*, %struct.status** %9, align 8
  %66 = load i32, i32* %12, align 4
  %67 = mul nsw i32 %66, 4
  %68 = add nsw i32 %67, 1
  %69 = load %struct.status*, %struct.status** %9, align 8
  %70 = getelementptr inbounds %struct.status, %struct.status* %69, i32 0, i32 5
  %71 = load i32, i32* %70, align 8
  %72 = sub nsw i32 %68, %71
  %73 = load i32, i32* %13, align 4
  %74 = mul nsw i32 %73, 4
  %75 = load %struct.status*, %struct.status** %9, align 8
  %76 = getelementptr inbounds %struct.status, %struct.status* %75, i32 0, i32 6
  %77 = load i32, i32* %76, align 4
  %78 = sub nsw i32 %74, %77
  %79 = call i32 @put_dxdy(%struct.status* %65, i32 %72, i32 %78, i32 1)
  store i32 %79, i32* %11, align 4
  %80 = icmp slt i32 %79, 0
  br i1 %80, label %81, label %83

81:                                               ; preds = %42
  %82 = load i32, i32* %11, align 4
  store i32 %82, i32* %5, align 4
  br label %112

83:                                               ; preds = %42
  %84 = load %struct.status*, %struct.status** %9, align 8
  %85 = getelementptr inbounds %struct.status, %struct.status* %84, i32 0, i32 11
  store i32 0, i32* %85, align 8
  %86 = load %struct.status*, %struct.status** %9, align 8
  %87 = load i8*, i8** %10, align 8
  %88 = load i32, i32* %7, align 4
  %89 = call i32 @trace_from(%struct.status* %86, i8* %87, i32 %88)
  store i32 %89, i32* %11, align 4
  %90 = icmp slt i32 %89, 0
  br i1 %90, label %91, label %93

91:                                               ; preds = %83
  %92 = load i32, i32* %11, align 4
  store i32 %92, i32* %5, align 4
  br label %112

93:                                               ; preds = %83
  %94 = load %struct.status*, %struct.status** %9, align 8
  %95 = getelementptr inbounds %struct.status, %struct.status* %94, i32 0, i32 4
  %96 = load i8*, i8** %95, align 8
  %97 = load %struct.status*, %struct.status** %9, align 8
  %98 = getelementptr inbounds %struct.status, %struct.status* %97, i32 0, i32 1
  %99 = load i8*, i8** %98, align 8
  %100 = icmp uge i8* %96, %99
  br i1 %100, label %101, label %102

101:                                              ; preds = %93
  store i32 -13, i32* %5, align 4
  br label %112

102:                                              ; preds = %93
  %103 = load %struct.status*, %struct.status** %9, align 8
  %104 = getelementptr inbounds %struct.status, %struct.status* %103, i32 0, i32 4
  %105 = load i8*, i8** %104, align 8
  %106 = getelementptr inbounds i8, i8* %105, i32 1
  store i8* %106, i8** %104, align 8
  store i8 9, i8* %105, align 1
  br label %107

107:                                              ; preds = %102, %32, %27
  br label %108

108:                                              ; preds = %107
  %109 = load i8*, i8** %10, align 8
  %110 = getelementptr inbounds i8, i8* %109, i32 -1
  store i8* %110, i8** %10, align 8
  br label %23

111:                                              ; preds = %23
  store i32 0, i32* %5, align 4
  br label %112

112:                                              ; preds = %111, %101, %91, %81
  %113 = load i32, i32* %5, align 4
  ret i32 %113
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @put_dxdy(%struct.status* %0, i32 %1, i32 %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.status*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca %struct.gs_point_s, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  store %struct.status* %0, %struct.status** %6, align 8
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  %18 = load %struct.status*, %struct.status** %6, align 8
  %19 = getelementptr inbounds %struct.status, %struct.status* %18, i32 0, i32 5
  %20 = load i32, i32* %19, align 8
  %21 = load i32, i32* %7, align 4
  %22 = add nsw i32 %20, %21
  store i32 %22, i32* %11, align 4
  %23 = load %struct.status*, %struct.status** %6, align 8
  %24 = getelementptr inbounds %struct.status, %struct.status* %23, i32 0, i32 6
  %25 = load i32, i32* %24, align 4
  %26 = load i32, i32* %8, align 4
  %27 = add nsw i32 %25, %26
  store i32 %27, i32* %12, align 4
  %28 = load i32, i32* %11, align 4
  %29 = sitofp i32 %28 to double
  %30 = load i32, i32* %12, align 4
  %31 = sitofp i32 %30 to double
  %32 = load %struct.status*, %struct.status** %6, align 8
  %33 = getelementptr inbounds %struct.status, %struct.status* %32, i32 0, i32 0
  %34 = call i32 @gs_distance_transform(double %29, double %31, %struct.gs_matrix_s* %33, %struct.gs_point_s* %13)
  %35 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %13, i32 0, i32 0
  %36 = load float, float* %35, align 4
  %37 = fpext float %36 to double
  %38 = call i32 @round_coord(double %37)
  store i32 %38, i32* %14, align 4
  %39 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %13, i32 0, i32 1
  %40 = load float, float* %39, align 4
  %41 = fpext float %40 to double
  %42 = call i32 @round_coord(double %41)
  store i32 %42, i32* %15, align 4
  %43 = load i32, i32* %14, align 4
  %44 = load %struct.status*, %struct.status** %6, align 8
  %45 = getelementptr inbounds %struct.status, %struct.status* %44, i32 0, i32 7
  %46 = load i32, i32* %45, align 8
  %47 = sub nsw i32 %43, %46
  store i32 %47, i32* %16, align 4
  %48 = load i32, i32* %15, align 4
  %49 = load %struct.status*, %struct.status** %6, align 8
  %50 = getelementptr inbounds %struct.status, %struct.status* %49, i32 0, i32 8
  %51 = load i32, i32* %50, align 4
  %52 = sub nsw i32 %48, %51
  store i32 %52, i32* %17, align 4
  %53 = load i32, i32* %16, align 4
  %54 = icmp ne i32 %53, 0
  br i1 %54, label %58, label %55

55:                                               ; preds = %4
  %56 = load i32, i32* %17, align 4
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %66

58:                                               ; preds = %55, %4
  %59 = load %struct.status*, %struct.status** %6, align 8
  %60 = load i32, i32* %16, align 4
  %61 = call i32 @put_int(%struct.status* %59, i32 %60)
  store i32 %61, i32* %10, align 4
  %62 = icmp slt i32 %61, 0
  br i1 %62, label %63, label %65

63:                                               ; preds = %58
  %64 = load i32, i32* %10, align 4
  store i32 %64, i32* %5, align 4
  br label %128

65:                                               ; preds = %58
  br label %66

66:                                               ; preds = %65, %55
  %67 = load i32, i32* %17, align 4
  %68 = icmp ne i32 %67, 0
  br i1 %68, label %69, label %77

69:                                               ; preds = %66
  %70 = load %struct.status*, %struct.status** %6, align 8
  %71 = load i32, i32* %17, align 4
  %72 = call i32 @put_int(%struct.status* %70, i32 %71)
  store i32 %72, i32* %10, align 4
  %73 = icmp slt i32 %72, 0
  br i1 %73, label %74, label %76

74:                                               ; preds = %69
  %75 = load i32, i32* %10, align 4
  store i32 %75, i32* %5, align 4
  br label %128

76:                                               ; preds = %69
  br label %77

77:                                               ; preds = %76, %66
  %78 = load %struct.status*, %struct.status** %6, align 8
  %79 = getelementptr inbounds %struct.status, %struct.status* %78, i32 0, i32 4
  %80 = load i8*, i8** %79, align 8
  %81 = load %struct.status*, %struct.status** %6, align 8
  %82 = getelementptr inbounds %struct.status, %struct.status* %81, i32 0, i32 1
  %83 = load i8*, i8** %82, align 8
  %84 = icmp eq i8* %80, %83
  br i1 %84, label %85, label %86

85:                                               ; preds = %77
  store i32 -13, i32* %5, align 4
  br label %128

86:                                               ; preds = %77
  %87 = load i32, i32* %17, align 4
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %94

89:                                               ; preds = %86
  %90 = load i32, i32* %9, align 4
  %91 = icmp ne i32 %90, 0
  %92 = zext i1 %91 to i64
  %93 = select i1 %91, i32 22, i32 6
  br label %109

94:                                               ; preds = %86
  %95 = load i32, i32* %16, align 4
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %102

97:                                               ; preds = %94
  %98 = load i32, i32* %9, align 4
  %99 = icmp ne i32 %98, 0
  %100 = zext i1 %99 to i64
  %101 = select i1 %99, i32 4, i32 7
  br label %107

102:                                              ; preds = %94
  %103 = load i32, i32* %9, align 4
  %104 = icmp ne i32 %103, 0
  %105 = zext i1 %104 to i64
  %106 = select i1 %104, i32 21, i32 5
  br label %107

107:                                              ; preds = %102, %97
  %108 = phi i32 [ %101, %97 ], [ %106, %102 ]
  br label %109

109:                                              ; preds = %107, %89
  %110 = phi i32 [ %93, %89 ], [ %108, %107 ]
  %111 = trunc i32 %110 to i8
  %112 = load %struct.status*, %struct.status** %6, align 8
  %113 = getelementptr inbounds %struct.status, %struct.status* %112, i32 0, i32 4
  %114 = load i8*, i8** %113, align 8
  %115 = getelementptr inbounds i8, i8* %114, i32 1
  store i8* %115, i8** %113, align 8
  store i8 %111, i8* %114, align 1
  %116 = load i32, i32* %11, align 4
  %117 = load %struct.status*, %struct.status** %6, align 8
  %118 = getelementptr inbounds %struct.status, %struct.status* %117, i32 0, i32 5
  store i32 %116, i32* %118, align 8
  %119 = load i32, i32* %12, align 4
  %120 = load %struct.status*, %struct.status** %6, align 8
  %121 = getelementptr inbounds %struct.status, %struct.status* %120, i32 0, i32 6
  store i32 %119, i32* %121, align 4
  %122 = load i32, i32* %14, align 4
  %123 = load %struct.status*, %struct.status** %6, align 8
  %124 = getelementptr inbounds %struct.status, %struct.status* %123, i32 0, i32 7
  store i32 %122, i32* %124, align 8
  %125 = load i32, i32* %15, align 4
  %126 = load %struct.status*, %struct.status** %6, align 8
  %127 = getelementptr inbounds %struct.status, %struct.status* %126, i32 0, i32 8
  store i32 %125, i32* %127, align 4
  store i32 0, i32* %5, align 4
  br label %128

128:                                              ; preds = %109, %85, %74, %63
  %129 = load i32, i32* %5, align 4
  ret i32 %129
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @trace_from(%struct.status* %0, i8* %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.status*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca %struct.dir_descr*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  store %struct.status* %0, %struct.status** %5, align 8
  store i8* %1, i8** %6, align 8
  store i32 %2, i32* %7, align 4
  %16 = load i32, i32* %7, align 4
  %17 = add nsw i32 %16, 2
  store i32 %17, i32* %9, align 4
  store i32 3, i32* %8, align 4
  store i32 1, i32* %10, align 4
  br label %18

18:                                               ; preds = %148, %132, %86, %3
  %19 = load i32, i32* %8, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds [5 x %struct.dir_descr], [5 x %struct.dir_descr]* @trace_from.nesw, i64 0, i64 %20
  store %struct.dir_descr* %21, %struct.dir_descr** %12, align 8
  %22 = load %struct.dir_descr*, %struct.dir_descr** %12, align 8
  %23 = getelementptr inbounds %struct.dir_descr, %struct.dir_descr* %22, i32 0, i32 2
  %24 = load i16, i16* %23, align 2
  %25 = sext i16 %24 to i32
  store i32 %25, i32* %13, align 4
  %26 = load %struct.dir_descr*, %struct.dir_descr** %12, align 8
  %27 = getelementptr inbounds %struct.dir_descr, %struct.dir_descr* %26, i32 0, i32 3
  %28 = load i16, i16* %27, align 2
  %29 = sext i16 %28 to i32
  store i32 %29, i32* %14, align 4
  %30 = load i32, i32* %8, align 4
  %31 = icmp eq i32 %30, 3
  br i1 %31, label %32, label %40

32:                                               ; preds = %18
  %33 = load i8*, i8** %6, align 8
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = icmp eq i32 %35, 2
  br i1 %36, label %37, label %38

37:                                               ; preds = %32
  store i32 0, i32* %4, align 4
  br label %149

38:                                               ; preds = %32
  %39 = load i8*, i8** %6, align 8
  store i8 2, i8* %39, align 1
  br label %40

40:                                               ; preds = %38, %18
  %41 = load %struct.dir_descr*, %struct.dir_descr** %12, align 8
  %42 = getelementptr inbounds %struct.dir_descr, %struct.dir_descr* %41, i32 0, i32 1
  %43 = load i16, i16* %42, align 2
  %44 = sext i16 %43 to i32
  %45 = load i32, i32* %9, align 4
  %46 = mul nsw i32 %44, %45
  %47 = load %struct.dir_descr*, %struct.dir_descr** %12, align 8
  %48 = getelementptr inbounds %struct.dir_descr, %struct.dir_descr* %47, i32 0, i32 0
  %49 = load i16, i16* %48, align 2
  %50 = sext i16 %49 to i32
  %51 = add nsw i32 %46, %50
  store i32 %51, i32* %15, align 4
  %52 = load i8*, i8** %6, align 8
  %53 = load i32, i32* %15, align 4
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i8, i8* %52, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = icmp ne i8 %56, 0
  br i1 %57, label %58, label %90

58:                                               ; preds = %40
  %59 = load i32, i32* %15, align 4
  %60 = load i8*, i8** %6, align 8
  %61 = sext i32 %59 to i64
  %62 = getelementptr inbounds i8, i8* %60, i64 %61
  store i8* %62, i8** %6, align 8
  %63 = load %struct.status*, %struct.status** %5, align 8
  %64 = load i32, i32* %13, align 4
  %65 = load i32, i32* %14, align 4
  %66 = load i32, i32* %10, align 4
  %67 = sub nsw i32 1, %66
  %68 = call i32 @add_dxdy(%struct.status* %63, i32 %64, i32 %65, i32 %67)
  store i32 %68, i32* %11, align 4
  %69 = icmp slt i32 %68, 0
  br i1 %69, label %70, label %72

70:                                               ; preds = %58
  %71 = load i32, i32* %11, align 4
  store i32 %71, i32* %4, align 4
  br label %149

72:                                               ; preds = %58
  %73 = load %struct.status*, %struct.status** %5, align 8
  %74 = load %struct.dir_descr*, %struct.dir_descr** %12, align 8
  %75 = getelementptr inbounds %struct.dir_descr, %struct.dir_descr* %74, i32 0, i32 0
  %76 = load i16, i16* %75, align 2
  %77 = sext i16 %76 to i32
  %78 = load %struct.dir_descr*, %struct.dir_descr** %12, align 8
  %79 = getelementptr inbounds %struct.dir_descr, %struct.dir_descr* %78, i32 0, i32 1
  %80 = load i16, i16* %79, align 2
  %81 = sext i16 %80 to i32
  %82 = call i32 @add_dxdy(%struct.status* %73, i32 %77, i32 %81, i32 3)
  store i32 %82, i32* %11, align 4
  %83 = icmp slt i32 %82, 0
  br i1 %83, label %84, label %86

84:                                               ; preds = %72
  %85 = load i32, i32* %11, align 4
  store i32 %85, i32* %4, align 4
  br label %149

86:                                               ; preds = %72
  %87 = load i32, i32* %8, align 4
  %88 = sub nsw i32 %87, 1
  %89 = and i32 %88, 3
  store i32 %89, i32* %8, align 4
  store i32 3, i32* %10, align 4
  br label %18

90:                                               ; preds = %40
  %91 = load i32, i32* %14, align 4
  %92 = load i32, i32* %9, align 4
  %93 = mul nsw i32 %91, %92
  %94 = load i32, i32* %13, align 4
  %95 = add nsw i32 %93, %94
  store i32 %95, i32* %15, align 4
  %96 = load i8*, i8** %6, align 8
  %97 = load i32, i32* %15, align 4
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds i8, i8* %96, i64 %98
  %100 = load i8, i8* %99, align 1
  %101 = icmp ne i8 %100, 0
  br i1 %101, label %136, label %102

102:                                              ; preds = %90
  %103 = load %struct.status*, %struct.status** %5, align 8
  %104 = load i32, i32* %13, align 4
  %105 = load i32, i32* %14, align 4
  %106 = load i32, i32* %10, align 4
  %107 = sub nsw i32 3, %106
  %108 = call i32 @add_dxdy(%struct.status* %103, i32 %104, i32 %105, i32 %107)
  store i32 %108, i32* %11, align 4
  %109 = icmp slt i32 %108, 0
  br i1 %109, label %110, label %112

110:                                              ; preds = %102
  %111 = load i32, i32* %11, align 4
  store i32 %111, i32* %4, align 4
  br label %149

112:                                              ; preds = %102
  %113 = load %struct.status*, %struct.status** %5, align 8
  %114 = load i32, i32* %13, align 4
  %115 = load %struct.dir_descr*, %struct.dir_descr** %12, align 8
  %116 = getelementptr inbounds %struct.dir_descr, %struct.dir_descr* %115, i64 1
  %117 = getelementptr inbounds %struct.dir_descr, %struct.dir_descr* %116, i32 0, i32 2
  %118 = load i16, i16* %117, align 2
  %119 = sext i16 %118 to i32
  %120 = add nsw i32 %114, %119
  %121 = load i32, i32* %14, align 4
  %122 = load %struct.dir_descr*, %struct.dir_descr** %12, align 8
  %123 = getelementptr inbounds %struct.dir_descr, %struct.dir_descr* %122, i64 1
  %124 = getelementptr inbounds %struct.dir_descr, %struct.dir_descr* %123, i32 0, i32 3
  %125 = load i16, i16* %124, align 2
  %126 = sext i16 %125 to i32
  %127 = add nsw i32 %121, %126
  %128 = call i32 @add_dxdy(%struct.status* %113, i32 %120, i32 %127, i32 1)
  store i32 %128, i32* %11, align 4
  %129 = icmp slt i32 %128, 0
  br i1 %129, label %130, label %132

130:                                              ; preds = %112
  %131 = load i32, i32* %11, align 4
  store i32 %131, i32* %4, align 4
  br label %149

132:                                              ; preds = %112
  %133 = load i32, i32* %8, align 4
  %134 = add nsw i32 %133, 1
  %135 = and i32 %134, 3
  store i32 %135, i32* %8, align 4
  store i32 1, i32* %10, align 4
  br label %18

136:                                              ; preds = %90
  %137 = load i32, i32* %15, align 4
  %138 = load i8*, i8** %6, align 8
  %139 = sext i32 %137 to i64
  %140 = getelementptr inbounds i8, i8* %138, i64 %139
  store i8* %140, i8** %6, align 8
  %141 = load %struct.status*, %struct.status** %5, align 8
  %142 = load i32, i32* %13, align 4
  %143 = load i32, i32* %14, align 4
  %144 = call i32 @add_dxdy(%struct.status* %141, i32 %142, i32 %143, i32 4)
  store i32 %144, i32* %11, align 4
  %145 = icmp slt i32 %144, 0
  br i1 %145, label %146, label %148

146:                                              ; preds = %136
  %147 = load i32, i32* %11, align 4
  store i32 %147, i32* %4, align 4
  br label %149

148:                                              ; preds = %136
  br label %18

149:                                              ; preds = %146, %130, %110, %84, %70, %37
  %150 = load i32, i32* %4, align 4
  ret i32 %150
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @add_dxdy(%struct.status* %0, i32 %1, i32 %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.status*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store %struct.status* %0, %struct.status** %6, align 8
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  %11 = load i32, i32* %9, align 4
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %68

13:                                               ; preds = %4
  %14 = load i32, i32* %7, align 4
  %15 = load %struct.status*, %struct.status** %6, align 8
  %16 = getelementptr inbounds %struct.status, %struct.status* %15, i32 0, i32 9
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %14, %17
  br i1 %18, label %19, label %31

19:                                               ; preds = %13
  %20 = load i32, i32* %8, align 4
  %21 = load %struct.status*, %struct.status** %6, align 8
  %22 = getelementptr inbounds %struct.status, %struct.status* %21, i32 0, i32 10
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %20, %23
  br i1 %24, label %25, label %31

25:                                               ; preds = %19
  %26 = load i32, i32* %9, align 4
  %27 = load %struct.status*, %struct.status** %6, align 8
  %28 = getelementptr inbounds %struct.status, %struct.status* %27, i32 0, i32 11
  %29 = load i32, i32* %28, align 8
  %30 = add nsw i32 %29, %26
  store i32 %30, i32* %28, align 8
  br label %67

31:                                               ; preds = %19, %13
  %32 = load %struct.status*, %struct.status** %6, align 8
  %33 = getelementptr inbounds %struct.status, %struct.status* %32, i32 0, i32 11
  %34 = load i32, i32* %33, align 8
  %35 = icmp ne i32 %34, 0
  br i1 %35, label %36, label %57

36:                                               ; preds = %31
  %37 = load %struct.status*, %struct.status** %6, align 8
  %38 = load %struct.status*, %struct.status** %6, align 8
  %39 = getelementptr inbounds %struct.status, %struct.status* %38, i32 0, i32 9
  %40 = load i32, i32* %39, align 8
  %41 = load %struct.status*, %struct.status** %6, align 8
  %42 = getelementptr inbounds %struct.status, %struct.status* %41, i32 0, i32 11
  %43 = load i32, i32* %42, align 8
  %44 = mul nsw i32 %40, %43
  %45 = load %struct.status*, %struct.status** %6, align 8
  %46 = getelementptr inbounds %struct.status, %struct.status* %45, i32 0, i32 10
  %47 = load i32, i32* %46, align 4
  %48 = load %struct.status*, %struct.status** %6, align 8
  %49 = getelementptr inbounds %struct.status, %struct.status* %48, i32 0, i32 11
  %50 = load i32, i32* %49, align 8
  %51 = mul nsw i32 %47, %50
  %52 = call i32 @put_dxdy(%struct.status* %37, i32 %44, i32 %51, i32 0)
  store i32 %52, i32* %10, align 4
  %53 = icmp slt i32 %52, 0
  br i1 %53, label %54, label %56

54:                                               ; preds = %36
  %55 = load i32, i32* %10, align 4
  store i32 %55, i32* %5, align 4
  br label %69

56:                                               ; preds = %36
  br label %57

57:                                               ; preds = %56, %31
  %58 = load i32, i32* %7, align 4
  %59 = load %struct.status*, %struct.status** %6, align 8
  %60 = getelementptr inbounds %struct.status, %struct.status* %59, i32 0, i32 9
  store i32 %58, i32* %60, align 8
  %61 = load i32, i32* %8, align 4
  %62 = load %struct.status*, %struct.status** %6, align 8
  %63 = getelementptr inbounds %struct.status, %struct.status* %62, i32 0, i32 10
  store i32 %61, i32* %63, align 4
  %64 = load i32, i32* %9, align 4
  %65 = load %struct.status*, %struct.status** %6, align 8
  %66 = getelementptr inbounds %struct.status, %struct.status* %65, i32 0, i32 11
  store i32 %64, i32* %66, align 8
  br label %67

67:                                               ; preds = %57, %25
  br label %68

68:                                               ; preds = %67, %4
  store i32 0, i32* %5, align 4
  br label %69

69:                                               ; preds = %68, %54
  %70 = load i32, i32* %5, align 4
  ret i32 %70
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_image_init(%struct.gs_image_enum_s* %0, %struct.gs_state_s* %1, i32 %2, i32 %3, i32 %4, i32 %5, %struct.gs_matrix_s* %6) #0 {
  %8 = alloca i32, align 4
  %9 = alloca %struct.gs_image_enum_s*, align 8
  %10 = alloca %struct.gs_state_s*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca %struct.gs_matrix_s*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  store %struct.gs_image_enum_s* %0, %struct.gs_image_enum_s** %9, align 8
  store %struct.gs_state_s* %1, %struct.gs_state_s** %10, align 8
  store i32 %2, i32* %11, align 4
  store i32 %3, i32* %12, align 4
  store i32 %4, i32* %13, align 4
  store i32 %5, i32* %14, align 4
  store %struct.gs_matrix_s* %6, %struct.gs_matrix_s** %15, align 8
  %18 = load %struct.gs_state_s*, %struct.gs_state_s** %10, align 8
  %19 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %18, i32 0, i32 19
  %20 = load i8, i8* %19, align 4
  %21 = icmp ne i8 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %7
  store i32 -21, i32* %8, align 4
  br label %58

23:                                               ; preds = %7
  %24 = load i32, i32* %13, align 4
  switch i32 %24, label %29 [
    i32 1, label %25
    i32 2, label %25
    i32 4, label %25
    i32 8, label %28
  ]

25:                                               ; preds = %23, %23, %23
  %26 = load i32, i32* %13, align 4
  %27 = ashr i32 %26, 1
  store i32 %27, i32* %16, align 4
  br label %30

28:                                               ; preds = %23
  store i32 3, i32* %16, align 4
  br label %30

29:                                               ; preds = %23
  store i32 -15, i32* %8, align 4
  br label %58

30:                                               ; preds = %28, %25
  %31 = load i32, i32* %14, align 4
  switch i32 %31, label %37 [
    i32 1, label %32
    i32 3, label %32
    i32 4, label %32
    i32 -3, label %33
    i32 -4, label %33
  ]

32:                                               ; preds = %30, %30, %30
  store i32 1, i32* %17, align 4
  br label %38

33:                                               ; preds = %30, %30
  %34 = load i32, i32* %14, align 4
  %35 = sub nsw i32 0, %34
  store i32 %35, i32* %14, align 4
  %36 = load i32, i32* %14, align 4
  store i32 %36, i32* %17, align 4
  br label %38

37:                                               ; preds = %30
  store i32 -15, i32* %8, align 4
  br label %58

38:                                               ; preds = %33, %32
  %39 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %9, align 8
  %40 = load i32, i32* %11, align 4
  %41 = load i32, i32* %12, align 4
  %42 = load i32, i32* %16, align 4
  %43 = load i32, i32* %14, align 4
  %44 = load i32, i32* %17, align 4
  %45 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %15, align 8
  %46 = load %struct.gs_state_s*, %struct.gs_state_s** %10, align 8
  %47 = load %struct.gs_state_s*, %struct.gs_state_s** %10, align 8
  %48 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %47, i32 0, i32 22
  %49 = load %struct.device_s*, %struct.device_s** %48, align 8
  %50 = getelementptr inbounds %struct.device_s, %struct.device_s* %49, i32 0, i32 3
  %51 = load i64, i64* %50, align 8
  %52 = load %struct.gs_state_s*, %struct.gs_state_s** %10, align 8
  %53 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %52, i32 0, i32 22
  %54 = load %struct.device_s*, %struct.device_s** %53, align 8
  %55 = getelementptr inbounds %struct.device_s, %struct.device_s* %54, i32 0, i32 2
  %56 = load i64, i64* %55, align 8
  %57 = call i32 @image_init(%struct.gs_image_enum_s* %39, i32 %40, i32 %41, i32 %42, i32 %43, i32 %44, %struct.gs_matrix_s* %45, %struct.gs_state_s* %46, i64 %51, i64 %56)
  store i32 %57, i32* %8, align 4
  br label %58

58:                                               ; preds = %38, %37, %29, %22
  %59 = load i32, i32* %8, align 4
  ret i32 %59
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @image_init(%struct.gs_image_enum_s* %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, %struct.gs_matrix_s* %6, %struct.gs_state_s* %7, i64 %8, i64 %9) #0 {
  %11 = alloca i32, align 4
  %12 = alloca %struct.gs_image_enum_s*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca %struct.gs_matrix_s*, align 8
  %19 = alloca %struct.gs_state_s*, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i32, align 4
  %23 = alloca %struct.gs_matrix_s, align 8
  %24 = alloca i32, align 4
  %25 = alloca i8*, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca %struct.gx_device_color_s*, align 8
  %29 = alloca i32, align 4
  %30 = alloca %struct.gx_path_s*, align 8
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  %33 = alloca i64, align 8
  %34 = alloca i64, align 8
  %35 = alloca i64, align 8
  %36 = alloca i64, align 8
  store %struct.gs_image_enum_s* %0, %struct.gs_image_enum_s** %12, align 8
  store i32 %1, i32* %13, align 4
  store i32 %2, i32* %14, align 4
  store i32 %3, i32* %15, align 4
  store i32 %4, i32* %16, align 4
  store i32 %5, i32* %17, align 4
  store %struct.gs_matrix_s* %6, %struct.gs_matrix_s** %18, align 8
  store %struct.gs_state_s* %7, %struct.gs_state_s** %19, align 8
  store i64 %8, i64* %20, align 8
  store i64 %9, i64* %21, align 8
  %37 = load i32, i32* %13, align 4
  %38 = add nsw i32 %37, 8
  %39 = load i32, i32* %16, align 4
  %40 = mul nsw i32 %38, %39
  store i32 %40, i32* %24, align 4
  %41 = load i32, i32* %13, align 4
  %42 = icmp sle i32 %41, 0
  br i1 %42, label %46, label %43

43:                                               ; preds = %10
  %44 = load i32, i32* %14, align 4
  %45 = icmp slt i32 %44, 0
  br i1 %45, label %46, label %47

46:                                               ; preds = %43, %10
  store i32 -23, i32* %11, align 4
  br label %499

47:                                               ; preds = %43
  %48 = load i32, i32* %14, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %51

50:                                               ; preds = %47
  store i32 0, i32* %11, align 4
  br label %499

51:                                               ; preds = %47
  %52 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %18, align 8
  %53 = call i32 @gs_matrix_invert(%struct.gs_matrix_s* %52, %struct.gs_matrix_s* %23)
  store i32 %53, i32* %22, align 4
  %54 = icmp slt i32 %53, 0
  br i1 %54, label %61, label %55

55:                                               ; preds = %51
  %56 = load %struct.gs_state_s*, %struct.gs_state_s** %19, align 8
  %57 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %56, i32 0, i32 2
  %58 = bitcast %struct.gs_matrix_fixed_s* %57 to %struct.gs_matrix_s*
  %59 = call i32 @gs_matrix_multiply(%struct.gs_matrix_s* %23, %struct.gs_matrix_s* %58, %struct.gs_matrix_s* %23)
  store i32 %59, i32* %22, align 4
  %60 = icmp slt i32 %59, 0
  br i1 %60, label %61, label %63

61:                                               ; preds = %55, %51
  %62 = load i32, i32* %22, align 4
  store i32 %62, i32* %11, align 4
  br label %499

63:                                               ; preds = %55
  %64 = load i32, i32* %24, align 4
  %65 = call i8* @gs_malloc(i32 1, i32 %64, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.47, i64 0, i64 0))
  store i8* %65, i8** %25, align 8
  %66 = load i8*, i8** %25, align 8
  %67 = icmp eq i8* %66, null
  br i1 %67, label %68, label %69

68:                                               ; preds = %63
  store i32 -25, i32* %11, align 4
  br label %499

69:                                               ; preds = %63
  %70 = load i32, i32* %13, align 4
  %71 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %72 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %71, i32 0, i32 0
  store i32 %70, i32* %72, align 8
  %73 = load i32, i32* %14, align 4
  %74 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %75 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %74, i32 0, i32 1
  store i32 %73, i32* %75, align 4
  %76 = load i32, i32* %15, align 4
  %77 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %78 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %77, i32 0, i32 2
  store i32 %76, i32* %78, align 8
  %79 = load i32, i32* %16, align 4
  %80 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %81 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %80, i32 0, i32 3
  store i32 %79, i32* %81, align 4
  %82 = load i32, i32* %17, align 4
  %83 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %84 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %83, i32 0, i32 4
  store i32 %82, i32* %84, align 8
  %85 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %23, i32 0, i32 0
  %86 = load float, float* %85, align 8
  %87 = fmul float %86, 4.096000e+03
  %88 = fptosi float %87 to i64
  %89 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %90 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %89, i32 0, i32 5
  store i64 %88, i64* %90, align 8
  %91 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %23, i32 0, i32 6
  %92 = load float, float* %91, align 8
  %93 = fmul float %92, 4.096000e+03
  %94 = fptosi float %93 to i64
  %95 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %96 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %95, i32 0, i32 8
  store i64 %94, i64* %96, align 8
  %97 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %23, i32 0, i32 2
  %98 = bitcast float* %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %23, i32 0, i32 4
  %101 = bitcast float* %100 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = or i64 %99, %102
  %104 = shl i64 %103, 1
  %105 = icmp eq i64 %104, 0
  %106 = xor i1 %105, true
  %107 = zext i1 %106 to i32
  %108 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %109 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %108, i32 0, i32 16
  store i32 %107, i32* %109, align 4
  br i1 %106, label %110, label %123

110:                                              ; preds = %69
  %111 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %23, i32 0, i32 2
  %112 = load float, float* %111, align 8
  %113 = fmul float %112, 4.096000e+03
  %114 = fptosi float %113 to i64
  %115 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %116 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %115, i32 0, i32 6
  store i64 %114, i64* %116, align 8
  %117 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %23, i32 0, i32 4
  %118 = load float, float* %117, align 8
  %119 = fmul float %118, 4.096000e+03
  %120 = fptosi float %119 to i64
  %121 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %122 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %121, i32 0, i32 7
  store i64 %120, i64* %122, align 8
  br label %128

123:                                              ; preds = %69
  %124 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %125 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %124, i32 0, i32 6
  store i64 0, i64* %125, align 8
  %126 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %127 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %126, i32 0, i32 7
  store i64 0, i64* %127, align 8
  br label %128

128:                                              ; preds = %123, %110
  %129 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %23, i32 0, i32 8
  %130 = load float, float* %129, align 8
  %131 = fmul float %130, 4.096000e+03
  %132 = fptosi float %131 to i64
  store i64 %132, i64* %26, align 8
  %133 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %134 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %133, i32 0, i32 22
  store i64 %132, i64* %134, align 8
  %135 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %23, i32 0, i32 10
  %136 = load float, float* %135, align 8
  %137 = fmul float %136, 4.096000e+03
  %138 = fptosi float %137 to i64
  store i64 %138, i64* %27, align 8
  %139 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %140 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %139, i32 0, i32 23
  store i64 %138, i64* %140, align 8
  %141 = load %struct.gs_state_s*, %struct.gs_state_s** %19, align 8
  %142 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %143 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %142, i32 0, i32 11
  store %struct.gs_state_s* %141, %struct.gs_state_s** %143, align 8
  %144 = load i8*, i8** %25, align 8
  %145 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %146 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %145, i32 0, i32 12
  store i8* %144, i8** %146, align 8
  %147 = load i32, i32* %24, align 4
  %148 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %149 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %148, i32 0, i32 13
  store i32 %147, i32* %149, align 8
  %150 = load i32, i32* %13, align 4
  %151 = sext i32 %150 to i64
  %152 = load i32, i32* %15, align 4
  %153 = zext i32 %152 to i64
  %154 = shl i64 %151, %153
  %155 = load i32, i32* %16, align 4
  %156 = sext i32 %155 to i64
  %157 = mul i64 %154, %156
  %158 = load i32, i32* %17, align 4
  %159 = sext i32 %158 to i64
  %160 = udiv i64 %157, %159
  %161 = add i64 %160, 7
  %162 = lshr i64 %161, 3
  %163 = trunc i64 %162 to i32
  %164 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %165 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %164, i32 0, i32 14
  store i32 %163, i32* %165, align 4
  %166 = load i32, i32* %16, align 4
  %167 = icmp eq i32 %166, 1
  br i1 %167, label %168, label %271

168:                                              ; preds = %128
  %169 = load i32, i32* %15, align 4
  switch i32 %169, label %252 [
    i32 3, label %170
    i32 2, label %194
    i32 1, label %243
  ]

170:                                              ; preds = %168
  %171 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %172 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %171, i32 0, i32 25
  %173 = getelementptr inbounds [256 x %struct.gx_device_color_s], [256 x %struct.gx_device_color_s]* %172, i64 0, i64 0
  store %struct.gx_device_color_s* %173, %struct.gx_device_color_s** %28, align 8
  store i32 64, i32* %29, align 4
  br label %174

174:                                              ; preds = %189, %170
  %175 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %28, align 8
  %176 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %175, i64 3
  %177 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %176, i32 0, i32 2
  store i32 -1, i32* %177, align 8
  %178 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %28, align 8
  %179 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %178, i64 2
  %180 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %179, i32 0, i32 2
  store i32 -1, i32* %180, align 8
  %181 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %28, align 8
  %182 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %181, i64 1
  %183 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %182, i32 0, i32 2
  store i32 -1, i32* %183, align 8
  %184 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %28, align 8
  %185 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %184, i64 0
  %186 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %185, i32 0, i32 2
  store i32 -1, i32* %186, align 8
  %187 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %28, align 8
  %188 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %187, i64 4
  store %struct.gx_device_color_s* %188, %struct.gx_device_color_s** %28, align 8
  br label %189

189:                                              ; preds = %174
  %190 = load i32, i32* %29, align 4
  %191 = add nsw i32 %190, -1
  store i32 %191, i32* %29, align 4
  %192 = icmp sgt i32 %191, 0
  br i1 %192, label %174, label %193

193:                                              ; preds = %189
  br label %252

194:                                              ; preds = %168
  %195 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %196 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %195, i32 0, i32 25
  %197 = getelementptr inbounds [256 x %struct.gx_device_color_s], [256 x %struct.gx_device_color_s]* %196, i64 0, i64 238
  %198 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %197, i32 0, i32 2
  store i32 -1, i32* %198, align 8
  %199 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %200 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %199, i32 0, i32 25
  %201 = getelementptr inbounds [256 x %struct.gx_device_color_s], [256 x %struct.gx_device_color_s]* %200, i64 0, i64 221
  %202 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %201, i32 0, i32 2
  store i32 -1, i32* %202, align 8
  %203 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %204 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %203, i32 0, i32 25
  %205 = getelementptr inbounds [256 x %struct.gx_device_color_s], [256 x %struct.gx_device_color_s]* %204, i64 0, i64 204
  %206 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %205, i32 0, i32 2
  store i32 -1, i32* %206, align 8
  %207 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %208 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %207, i32 0, i32 25
  %209 = getelementptr inbounds [256 x %struct.gx_device_color_s], [256 x %struct.gx_device_color_s]* %208, i64 0, i64 187
  %210 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %209, i32 0, i32 2
  store i32 -1, i32* %210, align 8
  %211 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %212 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %211, i32 0, i32 25
  %213 = getelementptr inbounds [256 x %struct.gx_device_color_s], [256 x %struct.gx_device_color_s]* %212, i64 0, i64 153
  %214 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %213, i32 0, i32 2
  store i32 -1, i32* %214, align 8
  %215 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %216 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %215, i32 0, i32 25
  %217 = getelementptr inbounds [256 x %struct.gx_device_color_s], [256 x %struct.gx_device_color_s]* %216, i64 0, i64 136
  %218 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %217, i32 0, i32 2
  store i32 -1, i32* %218, align 8
  %219 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %220 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %219, i32 0, i32 25
  %221 = getelementptr inbounds [256 x %struct.gx_device_color_s], [256 x %struct.gx_device_color_s]* %220, i64 0, i64 119
  %222 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %221, i32 0, i32 2
  store i32 -1, i32* %222, align 8
  %223 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %224 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %223, i32 0, i32 25
  %225 = getelementptr inbounds [256 x %struct.gx_device_color_s], [256 x %struct.gx_device_color_s]* %224, i64 0, i64 102
  %226 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %225, i32 0, i32 2
  store i32 -1, i32* %226, align 8
  %227 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %228 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %227, i32 0, i32 25
  %229 = getelementptr inbounds [256 x %struct.gx_device_color_s], [256 x %struct.gx_device_color_s]* %228, i64 0, i64 68
  %230 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %229, i32 0, i32 2
  store i32 -1, i32* %230, align 8
  %231 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %232 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %231, i32 0, i32 25
  %233 = getelementptr inbounds [256 x %struct.gx_device_color_s], [256 x %struct.gx_device_color_s]* %232, i64 0, i64 51
  %234 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %233, i32 0, i32 2
  store i32 -1, i32* %234, align 8
  %235 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %236 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %235, i32 0, i32 25
  %237 = getelementptr inbounds [256 x %struct.gx_device_color_s], [256 x %struct.gx_device_color_s]* %236, i64 0, i64 34
  %238 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %237, i32 0, i32 2
  store i32 -1, i32* %238, align 8
  %239 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %240 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %239, i32 0, i32 25
  %241 = getelementptr inbounds [256 x %struct.gx_device_color_s], [256 x %struct.gx_device_color_s]* %240, i64 0, i64 17
  %242 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %241, i32 0, i32 2
  store i32 -1, i32* %242, align 8
  br label %243

243:                                              ; preds = %194, %168
  %244 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %245 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %244, i32 0, i32 25
  %246 = getelementptr inbounds [256 x %struct.gx_device_color_s], [256 x %struct.gx_device_color_s]* %245, i64 0, i64 170
  %247 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %246, i32 0, i32 2
  store i32 -1, i32* %247, align 8
  %248 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %249 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %248, i32 0, i32 25
  %250 = getelementptr inbounds [256 x %struct.gx_device_color_s], [256 x %struct.gx_device_color_s]* %249, i64 0, i64 85
  %251 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %250, i32 0, i32 2
  store i32 -1, i32* %251, align 8
  br label %252

252:                                              ; preds = %243, %193, %168
  %253 = load i64, i64* %20, align 8
  %254 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %255 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %254, i32 0, i32 25
  %256 = getelementptr inbounds [256 x %struct.gx_device_color_s], [256 x %struct.gx_device_color_s]* %255, i64 0, i64 0
  %257 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %256, i32 0, i32 0
  store i64 %253, i64* %257, align 8
  %258 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %259 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %258, i32 0, i32 25
  %260 = getelementptr inbounds [256 x %struct.gx_device_color_s], [256 x %struct.gx_device_color_s]* %259, i64 0, i64 0
  %261 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %260, i32 0, i32 2
  store i32 0, i32* %261, align 8
  %262 = load i64, i64* %21, align 8
  %263 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %264 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %263, i32 0, i32 25
  %265 = getelementptr inbounds [256 x %struct.gx_device_color_s], [256 x %struct.gx_device_color_s]* %264, i64 0, i64 255
  %266 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %265, i32 0, i32 0
  store i64 %262, i64* %266, align 8
  %267 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %268 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %267, i32 0, i32 25
  %269 = getelementptr inbounds [256 x %struct.gx_device_color_s], [256 x %struct.gx_device_color_s]* %268, i64 0, i64 255
  %270 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %269, i32 0, i32 2
  store i32 0, i32* %270, align 8
  br label %271

271:                                              ; preds = %252, %128
  %272 = load %struct.gs_state_s*, %struct.gs_state_s** %19, align 8
  %273 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %272, i32 0, i32 8
  %274 = load %struct.gx_path_s*, %struct.gx_path_s** %273, align 8
  store %struct.gx_path_s* %274, %struct.gx_path_s** %30, align 8
  %275 = load %struct.gx_path_s*, %struct.gx_path_s** %30, align 8
  %276 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %275, i32 0, i32 3
  %277 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %276, i32 0, i32 0
  %278 = getelementptr inbounds %struct.timeval, %struct.timeval* %277, i32 0, i32 0
  %279 = load i64, i64* %278, align 8
  store i64 %279, i64* %31, align 8
  %280 = load %struct.gx_path_s*, %struct.gx_path_s** %30, align 8
  %281 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %280, i32 0, i32 3
  %282 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %281, i32 0, i32 0
  %283 = getelementptr inbounds %struct.timeval, %struct.timeval* %282, i32 0, i32 1
  %284 = load i64, i64* %283, align 8
  store i64 %284, i64* %32, align 8
  %285 = load %struct.gx_path_s*, %struct.gx_path_s** %30, align 8
  %286 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %285, i32 0, i32 3
  %287 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %286, i32 0, i32 1
  %288 = getelementptr inbounds %struct.timeval, %struct.timeval* %287, i32 0, i32 0
  %289 = load i64, i64* %288, align 8
  store i64 %289, i64* %33, align 8
  %290 = load %struct.gx_path_s*, %struct.gx_path_s** %30, align 8
  %291 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %290, i32 0, i32 3
  %292 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %291, i32 0, i32 1
  %293 = getelementptr inbounds %struct.timeval, %struct.timeval* %292, i32 0, i32 1
  %294 = load i64, i64* %293, align 8
  store i64 %294, i64* %34, align 8
  %295 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %23, i32 0, i32 0
  %296 = load float, float* %295, align 8
  %297 = fmul float %296, 4.096000e+03
  %298 = fptosi float %297 to i64
  %299 = load i32, i32* %13, align 4
  %300 = sext i32 %299 to i64
  %301 = mul nsw i64 %298, %300
  store i64 %301, i64* %35, align 8
  %302 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %23, i32 0, i32 6
  %303 = load float, float* %302, align 8
  %304 = fmul float %303, 4.096000e+03
  %305 = fptosi float %304 to i64
  %306 = load i32, i32* %14, align 4
  %307 = sext i32 %306 to i64
  %308 = mul nsw i64 %305, %307
  store i64 %308, i64* %36, align 8
  %309 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %310 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %309, i32 0, i32 16
  %311 = load i32, i32* %310, align 4
  %312 = icmp ne i32 %311, 0
  br i1 %312, label %313, label %332

313:                                              ; preds = %271
  %314 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %23, i32 0, i32 4
  %315 = load float, float* %314, align 8
  %316 = fmul float %315, 4.096000e+03
  %317 = fptosi float %316 to i64
  %318 = load i32, i32* %14, align 4
  %319 = sext i32 %318 to i64
  %320 = mul nsw i64 %317, %319
  %321 = load i64, i64* %35, align 8
  %322 = add nsw i64 %321, %320
  store i64 %322, i64* %35, align 8
  %323 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %23, i32 0, i32 2
  %324 = load float, float* %323, align 8
  %325 = fmul float %324, 4.096000e+03
  %326 = fptosi float %325 to i64
  %327 = load i32, i32* %13, align 4
  %328 = sext i32 %327 to i64
  %329 = mul nsw i64 %326, %328
  %330 = load i64, i64* %36, align 8
  %331 = add nsw i64 %330, %329
  store i64 %331, i64* %36, align 8
  br label %332

332:                                              ; preds = %313, %271
  %333 = load i64, i64* %35, align 8
  %334 = icmp slt i64 %333, 0
  br i1 %334, label %335, label %345

335:                                              ; preds = %332
  %336 = load i64, i64* %26, align 8
  %337 = load i64, i64* %35, align 8
  %338 = add nsw i64 %336, %337
  %339 = load i64, i64* %31, align 8
  %340 = icmp sge i64 %338, %339
  br i1 %340, label %341, label %387

341:                                              ; preds = %335
  %342 = load i64, i64* %26, align 8
  %343 = load i64, i64* %33, align 8
  %344 = icmp sle i64 %342, %343
  br i1 %344, label %355, label %387

345:                                              ; preds = %332
  %346 = load i64, i64* %26, align 8
  %347 = load i64, i64* %31, align 8
  %348 = icmp sge i64 %346, %347
  br i1 %348, label %349, label %387

349:                                              ; preds = %345
  %350 = load i64, i64* %26, align 8
  %351 = load i64, i64* %35, align 8
  %352 = add nsw i64 %350, %351
  %353 = load i64, i64* %33, align 8
  %354 = icmp sle i64 %352, %353
  br i1 %354, label %355, label %387

355:                                              ; preds = %349, %341
  %356 = load i64, i64* %36, align 8
  %357 = icmp slt i64 %356, 0
  br i1 %357, label %358, label %371

358:                                              ; preds = %355
  %359 = load i64, i64* %27, align 8
  %360 = load i64, i64* %36, align 8
  %361 = add nsw i64 %359, %360
  %362 = load i64, i64* %32, align 8
  %363 = icmp sge i64 %361, %362
  br i1 %363, label %364, label %368

364:                                              ; preds = %358
  %365 = load i64, i64* %27, align 8
  %366 = load i64, i64* %34, align 8
  %367 = icmp sle i64 %365, %366
  br label %368

368:                                              ; preds = %364, %358
  %369 = phi i1 [ false, %358 ], [ %367, %364 ]
  %370 = zext i1 %369 to i32
  br label %384

371:                                              ; preds = %355
  %372 = load i64, i64* %27, align 8
  %373 = load i64, i64* %32, align 8
  %374 = icmp sge i64 %372, %373
  br i1 %374, label %375, label %381

375:                                              ; preds = %371
  %376 = load i64, i64* %27, align 8
  %377 = load i64, i64* %36, align 8
  %378 = add nsw i64 %376, %377
  %379 = load i64, i64* %34, align 8
  %380 = icmp sle i64 %378, %379
  br label %381

381:                                              ; preds = %375, %371
  %382 = phi i1 [ false, %371 ], [ %380, %375 ]
  %383 = zext i1 %382 to i32
  br label %384

384:                                              ; preds = %381, %368
  %385 = phi i32 [ %370, %368 ], [ %383, %381 ]
  %386 = icmp ne i32 %385, 0
  br label %387

387:                                              ; preds = %384, %349, %345, %341, %335
  %388 = phi i1 [ false, %349 ], [ false, %345 ], [ false, %341 ], [ false, %335 ], [ %386, %384 ]
  %389 = zext i1 %388 to i32
  %390 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %391 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %390, i32 0, i32 15
  store i32 %389, i32* %391, align 8
  %392 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %393 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %392, i32 0, i32 15
  %394 = load i32, i32* %393, align 8
  %395 = icmp ne i32 %394, 0
  br i1 %395, label %396, label %417

396:                                              ; preds = %387
  %397 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %398 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %397, i32 0, i32 16
  %399 = load i32, i32* %398, align 4
  %400 = icmp ne i32 %399, 0
  br i1 %400, label %417, label %401

401:                                              ; preds = %396
  %402 = load i64, i64* %20, align 8
  %403 = icmp eq i64 %402, -1
  br i1 %403, label %407, label %404

404:                                              ; preds = %401
  %405 = load i64, i64* %21, align 8
  %406 = icmp eq i64 %405, -1
  br i1 %406, label %407, label %415

407:                                              ; preds = %404, %401
  %408 = load %struct.gs_state_s*, %struct.gs_state_s** %19, align 8
  %409 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %408, i32 0, i32 14
  %410 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %409, align 8
  %411 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %410, i32 0, i32 2
  %412 = load i32, i32* %411, align 8
  %413 = icmp eq i32 %412, 0
  %414 = xor i1 %413, true
  br label %415

415:                                              ; preds = %407, %404
  %416 = phi i1 [ false, %404 ], [ %414, %407 ]
  br label %417

417:                                              ; preds = %415, %396, %387
  %418 = phi i1 [ true, %396 ], [ true, %387 ], [ %416, %415 ]
  %419 = zext i1 %418 to i32
  %420 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %421 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %420, i32 0, i32 17
  store i32 %419, i32* %421, align 8
  %422 = load %struct.gs_state_s*, %struct.gs_state_s** %19, align 8
  %423 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %422, i32 0, i32 20
  %424 = load i8, i8* %423, align 1
  %425 = zext i8 %424 to i32
  %426 = icmp ne i32 %425, 0
  br i1 %426, label %427, label %428

427:                                              ; preds = %417
  br label %463

428:                                              ; preds = %417
  %429 = load i32, i32* %16, align 4
  %430 = icmp sgt i32 %429, 1
  br i1 %430, label %431, label %432

431:                                              ; preds = %428
  br label %461

432:                                              ; preds = %428
  %433 = load i32, i32* %15, align 4
  %434 = icmp eq i32 %433, 0
  br i1 %434, label %435, label %457

435:                                              ; preds = %432
  %436 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %437 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %436, i32 0, i32 17
  %438 = load i32, i32* %437, align 8
  %439 = icmp ne i32 %438, 0
  br i1 %439, label %457, label %440

440:                                              ; preds = %435
  %441 = load i64, i64* %26, align 8
  %442 = load i32, i32* %13, align 4
  %443 = sext i32 %442 to i64
  %444 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %445 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %444, i32 0, i32 5
  %446 = load i64, i64* %445, align 8
  %447 = mul nsw i64 %443, %446
  %448 = add nsw i64 %441, %447
  %449 = add nsw i64 %448, 2048
  %450 = ashr i64 %449, 12
  %451 = load i64, i64* %26, align 8
  %452 = ashr i64 %451, 12
  %453 = sub nsw i64 %450, %452
  %454 = load i32, i32* %13, align 4
  %455 = sext i32 %454 to i64
  %456 = icmp eq i64 %453, %455
  br label %457

457:                                              ; preds = %440, %435, %432
  %458 = phi i1 [ false, %435 ], [ false, %432 ], [ %456, %440 ]
  %459 = zext i1 %458 to i64
  %460 = select i1 %458, i32 (%struct.gs_image_enum_s*, i8*, i32, i32)* @image_render_direct, i32 (%struct.gs_image_enum_s*, i8*, i32, i32)* @image_render_mono
  br label %461

461:                                              ; preds = %457, %431
  %462 = phi i32 (%struct.gs_image_enum_s*, i8*, i32, i32)* [ @image_render_color, %431 ], [ %460, %457 ]
  br label %463

463:                                              ; preds = %461, %427
  %464 = phi i32 (%struct.gs_image_enum_s*, i8*, i32, i32)* [ @image_render_skip, %427 ], [ %462, %461 ]
  %465 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %466 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %465, i32 0, i32 10
  store i32 (%struct.gs_image_enum_s*, i8*, i32, i32)* %464, i32 (%struct.gs_image_enum_s*, i8*, i32, i32)** %466, align 8
  %467 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %468 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %467, i32 0, i32 10
  %469 = load i32 (%struct.gs_image_enum_s*, i8*, i32, i32)*, i32 (%struct.gs_image_enum_s*, i8*, i32, i32)** %468, align 8
  %470 = icmp eq i32 (%struct.gs_image_enum_s*, i8*, i32, i32)* %469, @image_render_direct
  br i1 %470, label %471, label %474

471:                                              ; preds = %463
  %472 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %473 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %472, i32 0, i32 9
  store void (%struct.gs_image_enum_s*, i8*, i8*, i32)* @image_unpack_3, void (%struct.gs_image_enum_s*, i8*, i8*, i32)** %473, align 8
  br label %492

474:                                              ; preds = %463
  %475 = load i32, i32* %17, align 4
  %476 = icmp ne i32 %475, 1
  br i1 %476, label %477, label %484

477:                                              ; preds = %474
  %478 = load i32, i32* %15, align 4
  %479 = sext i32 %478 to i64
  %480 = getelementptr inbounds [4 x void (%struct.gs_image_enum_s*, i8*, i8*, i32)*], [4 x void (%struct.gs_image_enum_s*, i8*, i8*, i32)*]* @image_init.spread_procs, i64 0, i64 %479
  %481 = load void (%struct.gs_image_enum_s*, i8*, i8*, i32)*, void (%struct.gs_image_enum_s*, i8*, i8*, i32)** %480, align 8
  %482 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %483 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %482, i32 0, i32 9
  store void (%struct.gs_image_enum_s*, i8*, i8*, i32)* %481, void (%struct.gs_image_enum_s*, i8*, i8*, i32)** %483, align 8
  br label %491

484:                                              ; preds = %474
  %485 = load i32, i32* %15, align 4
  %486 = sext i32 %485 to i64
  %487 = getelementptr inbounds [4 x void (%struct.gs_image_enum_s*, i8*, i8*, i32)*], [4 x void (%struct.gs_image_enum_s*, i8*, i8*, i32)*]* @image_init.procs, i64 0, i64 %486
  %488 = load void (%struct.gs_image_enum_s*, i8*, i8*, i32)*, void (%struct.gs_image_enum_s*, i8*, i8*, i32)** %487, align 8
  %489 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %490 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %489, i32 0, i32 9
  store void (%struct.gs_image_enum_s*, i8*, i8*, i32)* %488, void (%struct.gs_image_enum_s*, i8*, i8*, i32)** %490, align 8
  br label %491

491:                                              ; preds = %484, %477
  br label %492

492:                                              ; preds = %491, %471
  %493 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %494 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %493, i32 0, i32 19
  store i32 0, i32* %494, align 8
  %495 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %496 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %495, i32 0, i32 21
  store i32 0, i32* %496, align 8
  %497 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %12, align 8
  %498 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %497, i32 0, i32 24
  store i32 0, i32* %498, align 8
  store i32 0, i32* %11, align 4
  br label %499

499:                                              ; preds = %492, %68, %61, %50, %46
  %500 = load i32, i32* %11, align 4
  ret i32 %500
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @image_render_direct(%struct.gs_image_enum_s* %0, i8* %1, i32 %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.gs_image_enum_s*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %struct.gx_device_s*, align 8
  %17 = alloca i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)*, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i32, align 4
  store %struct.gs_image_enum_s* %0, %struct.gs_image_enum_s** %6, align 8
  store i8* %1, i8** %7, align 8
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  %21 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %6, align 8
  %22 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %21, i32 0, i32 22
  %23 = load i64, i64* %22, align 8
  store i64 %23, i64* %10, align 8
  %24 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %6, align 8
  %25 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %24, i32 0, i32 23
  %26 = load i64, i64* %25, align 8
  store i64 %26, i64* %11, align 8
  %27 = load i64, i64* %11, align 8
  %28 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %6, align 8
  %29 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %28, i32 0, i32 8
  %30 = load i64, i64* %29, align 8
  %31 = add nsw i64 %27, %30
  store i64 %31, i64* %12, align 8
  %32 = load i64, i64* %10, align 8
  %33 = ashr i64 %32, 12
  %34 = trunc i64 %33 to i32
  store i32 %34, i32* %13, align 4
  %35 = load i64, i64* %11, align 8
  %36 = ashr i64 %35, 12
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %14, align 4
  %38 = load i64, i64* %12, align 8
  %39 = ashr i64 %38, 12
  %40 = trunc i64 %39 to i32
  %41 = load i32, i32* %14, align 4
  %42 = sub nsw i32 %40, %41
  store i32 %42, i32* %15, align 4
  %43 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %6, align 8
  %44 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %43, i32 0, i32 11
  %45 = load %struct.gs_state_s*, %struct.gs_state_s** %44, align 8
  %46 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %45, i32 0, i32 22
  %47 = load %struct.device_s*, %struct.device_s** %46, align 8
  %48 = getelementptr inbounds %struct.device_s, %struct.device_s* %47, i32 0, i32 0
  %49 = load %struct.gx_device_s*, %struct.gx_device_s** %48, align 8
  store %struct.gx_device_s* %49, %struct.gx_device_s** %16, align 8
  %50 = load %struct.gx_device_s*, %struct.gx_device_s** %16, align 8
  %51 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %50, i32 0, i32 1
  %52 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %51, align 8
  %53 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %52, i32 0, i32 9
  %54 = load i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)** %53, align 8
  store i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)* %54, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)** %17, align 8
  %55 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %6, align 8
  %56 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %55, i32 0, i32 25
  %57 = getelementptr inbounds [256 x %struct.gx_device_color_s], [256 x %struct.gx_device_color_s]* %56, i64 0, i64 0
  %58 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %57, i32 0, i32 0
  %59 = load i64, i64* %58, align 8
  store i64 %59, i64* %18, align 8
  %60 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %6, align 8
  %61 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %60, i32 0, i32 25
  %62 = getelementptr inbounds [256 x %struct.gx_device_color_s], [256 x %struct.gx_device_color_s]* %61, i64 0, i64 255
  %63 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %62, i32 0, i32 0
  %64 = load i64, i64* %63, align 8
  store i64 %64, i64* %19, align 8
  %65 = load i32, i32* %15, align 4
  %66 = icmp eq i32 %65, 1
  br i1 %66, label %67, label %82

67:                                               ; preds = %4
  %68 = load i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)** %17, align 8
  %69 = load %struct.gx_device_s*, %struct.gx_device_s** %16, align 8
  %70 = load i8*, i8** %7, align 8
  %71 = load i32, i32* %8, align 4
  %72 = add i32 %71, 7
  %73 = lshr i32 %72, 3
  %74 = load i32, i32* %13, align 4
  %75 = load i32, i32* %14, align 4
  %76 = load i32, i32* %8, align 4
  %77 = load i32, i32* %9, align 4
  %78 = load i64, i64* %18, align 8
  %79 = load i64, i64* %19, align 8
  %80 = call i32 %68(%struct.gx_device_s* %69, i8* %70, i32 0, i32 %73, i32 %74, i32 %75, i32 %76, i32 %77, i64 %78, i64 %79)
  %81 = load i32, i32* %9, align 4
  store i32 %81, i32* %5, align 4
  br label %115

82:                                               ; preds = %4
  %83 = load i32, i32* %15, align 4
  %84 = icmp slt i32 %83, 0
  br i1 %84, label %85, label %91

85:                                               ; preds = %82
  %86 = load i32, i32* %15, align 4
  %87 = load i32, i32* %14, align 4
  %88 = add nsw i32 %87, %86
  store i32 %88, i32* %14, align 4
  %89 = load i32, i32* %15, align 4
  %90 = sub nsw i32 0, %89
  store i32 %90, i32* %15, align 4
  br label %91

91:                                               ; preds = %85, %82
  store i32 0, i32* %20, align 4
  br label %92

92:                                               ; preds = %111, %91
  %93 = load i32, i32* %20, align 4
  %94 = load i32, i32* %15, align 4
  %95 = icmp slt i32 %93, %94
  br i1 %95, label %96, label %114

96:                                               ; preds = %92
  %97 = load i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)** %17, align 8
  %98 = load %struct.gx_device_s*, %struct.gx_device_s** %16, align 8
  %99 = load i8*, i8** %7, align 8
  %100 = load i32, i32* %8, align 4
  %101 = add i32 %100, 7
  %102 = lshr i32 %101, 3
  %103 = load i32, i32* %13, align 4
  %104 = load i32, i32* %14, align 4
  %105 = load i32, i32* %20, align 4
  %106 = add nsw i32 %104, %105
  %107 = load i32, i32* %8, align 4
  %108 = load i64, i64* %18, align 8
  %109 = load i64, i64* %19, align 8
  %110 = call i32 %97(%struct.gx_device_s* %98, i8* %99, i32 0, i32 %102, i32 %103, i32 %106, i32 %107, i32 1, i64 %108, i64 %109)
  br label %111

111:                                              ; preds = %96
  %112 = load i32, i32* %20, align 4
  %113 = add nsw i32 %112, 1
  store i32 %113, i32* %20, align 4
  br label %92

114:                                              ; preds = %92
  store i32 1, i32* %5, align 4
  br label %115

115:                                              ; preds = %114, %67
  %116 = load i32, i32* %5, align 4
  ret i32 %116
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @image_render_mono(%struct.gs_image_enum_s* %0, i8* %1, i32 %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.gs_image_enum_s*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca %struct.gs_state_s*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca %struct.gs_fixed_rect_s, align 8
  %18 = alloca i32, align 4
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca %struct.gs_color_s, align 2
  %27 = alloca %struct.gx_device_color_s*, align 8
  %28 = alloca i32, align 4
  %29 = alloca i64, align 8
  %30 = alloca i8*, align 8
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  %33 = alloca i32, align 4
  %34 = alloca i32, align 4
  %35 = alloca %struct.gx_device_s*, align 8
  %36 = alloca i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)*, align 8
  %37 = alloca %struct.gx_path_s, align 8
  %38 = alloca %struct.gx_path_s*, align 8
  %39 = alloca i32, align 4
  %40 = alloca i64, align 8
  %41 = alloca i64, align 8
  %42 = alloca %struct.gs_fixed_rect_s, align 8
  %43 = alloca i64, align 8
  %44 = alloca i32, align 4
  %45 = alloca i32, align 4
  store %struct.gs_image_enum_s* %0, %struct.gs_image_enum_s** %6, align 8
  store i8* %1, i8** %7, align 8
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  %46 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %6, align 8
  %47 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %46, i32 0, i32 25
  %48 = getelementptr inbounds [256 x %struct.gx_device_color_s], [256 x %struct.gx_device_color_s]* %47, i64 0, i64 0
  %49 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %48, i32 0, i32 0
  %50 = load i64, i64* %49, align 8
  store i64 %50, i64* %10, align 8
  %51 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %6, align 8
  %52 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %51, i32 0, i32 25
  %53 = getelementptr inbounds [256 x %struct.gx_device_color_s], [256 x %struct.gx_device_color_s]* %52, i64 0, i64 255
  %54 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %53, i32 0, i32 0
  %55 = load i64, i64* %54, align 8
  store i64 %55, i64* %11, align 8
  %56 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %6, align 8
  %57 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %56, i32 0, i32 11
  %58 = load %struct.gs_state_s*, %struct.gs_state_s** %57, align 8
  store %struct.gs_state_s* %58, %struct.gs_state_s** %12, align 8
  %59 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %6, align 8
  %60 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %59, i32 0, i32 5
  %61 = load i64, i64* %60, align 8
  store i64 %61, i64* %13, align 8
  %62 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %6, align 8
  %63 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %62, i32 0, i32 6
  %64 = load i64, i64* %63, align 8
  store i64 %64, i64* %14, align 8
  %65 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %6, align 8
  %66 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %65, i32 0, i32 7
  %67 = load i64, i64* %66, align 8
  store i64 %67, i64* %15, align 8
  %68 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %6, align 8
  %69 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %68, i32 0, i32 8
  %70 = load i64, i64* %69, align 8
  store i64 %70, i64* %16, align 8
  %71 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %6, align 8
  %72 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %71, i32 0, i32 16
  %73 = load i32, i32* %72, align 4
  store i32 %73, i32* %18, align 4
  %74 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %6, align 8
  %75 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %74, i32 0, i32 22
  %76 = load i64, i64* %75, align 8
  store i64 %76, i64* %19, align 8
  %77 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %6, align 8
  %78 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %77, i32 0, i32 23
  %79 = load i64, i64* %78, align 8
  store i64 %79, i64* %20, align 8
  %80 = load %struct.gs_state_s*, %struct.gs_state_s** %12, align 8
  %81 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %80, i32 0, i32 14
  %82 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %81, align 8
  store %struct.gx_device_color_s* %82, %struct.gx_device_color_s** %27, align 8
  %83 = load i32, i32* %8, align 4
  store i32 %83, i32* %28, align 4
  %84 = load i64, i64* %19, align 8
  store i64 %84, i64* %29, align 8
  %85 = load i8*, i8** %7, align 8
  store i8* %85, i8** %30, align 8
  %86 = load i64, i64* %19, align 8
  store i64 %86, i64* %31, align 8
  %87 = load i64, i64* %20, align 8
  store i64 %87, i64* %32, align 8
  %88 = load i8*, i8** %30, align 8
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  store i32 %90, i32* %33, align 4
  store i32 -2, i32* %34, align 4
  %91 = load %struct.gs_state_s*, %struct.gs_state_s** %12, align 8
  %92 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %91, i32 0, i32 22
  %93 = load %struct.device_s*, %struct.device_s** %92, align 8
  %94 = getelementptr inbounds %struct.device_s, %struct.device_s* %93, i32 0, i32 0
  %95 = load %struct.gx_device_s*, %struct.gx_device_s** %94, align 8
  store %struct.gx_device_s* %95, %struct.gx_device_s** %35, align 8
  %96 = load %struct.gx_device_s*, %struct.gx_device_s** %35, align 8
  %97 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %96, i32 0, i32 1
  %98 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %97, align 8
  %99 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %98, i32 0, i32 7
  %100 = load i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)** %99, align 8
  store i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)* %100, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)** %36, align 8
  %101 = load %struct.gs_state_s*, %struct.gs_state_s** %12, align 8
  %102 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %101, i32 0, i32 8
  %103 = load %struct.gx_path_s*, %struct.gx_path_s** %102, align 8
  %104 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %103, i32 0, i32 1
  %105 = bitcast %struct.gs_fixed_rect_s* %17 to i8*
  %106 = bitcast %struct.gs_fixed_rect_s* %104 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %105, i8* align 8 %106, i64 32, i1 false)
  %107 = load i32, i32* %18, align 4
  %108 = icmp ne i32 %107, 0
  br i1 %108, label %171, label %109

109:                                              ; preds = %4
  %110 = load i64, i64* %20, align 8
  %111 = load i64, i64* %16, align 8
  %112 = add nsw i64 %110, %111
  %113 = add nsw i64 %112, 2048
  %114 = and i64 %113, -4096
  store i64 %114, i64* %21, align 8
  %115 = load i64, i64* %20, align 8
  %116 = add nsw i64 %115, 2048
  %117 = and i64 %116, -4096
  store i64 %117, i64* %20, align 8
  %118 = load i64, i64* %20, align 8
  %119 = ashr i64 %118, 12
  %120 = trunc i64 %119 to i32
  store i32 %120, i32* %22, align 4
  %121 = load i64, i64* %21, align 8
  %122 = ashr i64 %121, 12
  %123 = trunc i64 %122 to i32
  store i32 %123, i32* %23, align 4
  %124 = load i32, i32* %23, align 4
  %125 = load i32, i32* %22, align 4
  %126 = sub nsw i32 %124, %125
  store i32 %126, i32* %25, align 4
  %127 = load i32, i32* %25, align 4
  %128 = icmp sgt i32 %127, 0
  br i1 %128, label %129, label %130

129:                                              ; preds = %109
  store i32 0, i32* %24, align 4
  br label %139

130:                                              ; preds = %109
  %131 = load i32, i32* %25, align 4
  %132 = icmp slt i32 %131, 0
  br i1 %132, label %133, label %137

133:                                              ; preds = %130
  %134 = load i32, i32* %25, align 4
  store i32 %134, i32* %24, align 4
  %135 = load i32, i32* %25, align 4
  %136 = sub nsw i32 0, %135
  store i32 %136, i32* %25, align 4
  br label %138

137:                                              ; preds = %130
  store i32 1, i32* %5, align 4
  br label %516

138:                                              ; preds = %133
  br label %139

139:                                              ; preds = %138, %129
  %140 = load i64, i64* %16, align 8
  %141 = icmp sgt i64 %140, 0
  br i1 %141, label %142, label %156

142:                                              ; preds = %139
  %143 = load i64, i64* %20, align 8
  %144 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %17, i32 0, i32 1
  %145 = getelementptr inbounds %struct.timeval, %struct.timeval* %144, i32 0, i32 1
  %146 = load i64, i64* %145, align 8
  %147 = icmp sge i64 %143, %146
  br i1 %147, label %154, label %148

148:                                              ; preds = %142
  %149 = load i64, i64* %21, align 8
  %150 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %17, i32 0, i32 0
  %151 = getelementptr inbounds %struct.timeval, %struct.timeval* %150, i32 0, i32 1
  %152 = load i64, i64* %151, align 8
  %153 = icmp sle i64 %149, %152
  br i1 %153, label %154, label %155

154:                                              ; preds = %148, %142
  store i32 1, i32* %5, align 4
  br label %516

155:                                              ; preds = %148
  br label %170

156:                                              ; preds = %139
  %157 = load i64, i64* %21, align 8
  %158 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %17, i32 0, i32 1
  %159 = getelementptr inbounds %struct.timeval, %struct.timeval* %158, i32 0, i32 1
  %160 = load i64, i64* %159, align 8
  %161 = icmp sge i64 %157, %160
  br i1 %161, label %168, label %162

162:                                              ; preds = %156
  %163 = load i64, i64* %20, align 8
  %164 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %17, i32 0, i32 0
  %165 = getelementptr inbounds %struct.timeval, %struct.timeval* %164, i32 0, i32 1
  %166 = load i64, i64* %165, align 8
  %167 = icmp sle i64 %163, %166
  br i1 %167, label %168, label %169

168:                                              ; preds = %162, %156
  store i32 1, i32* %5, align 4
  br label %516

169:                                              ; preds = %162
  br label %170

170:                                              ; preds = %169, %155
  br label %171

171:                                              ; preds = %170, %4
  %172 = load i8*, i8** %7, align 8
  %173 = load i32, i32* %8, align 4
  %174 = sub i32 %173, 1
  %175 = zext i32 %174 to i64
  %176 = getelementptr inbounds i8, i8* %172, i64 %175
  %177 = load i8, i8* %176, align 1
  %178 = zext i8 %177 to i32
  %179 = xor i32 %178, -1
  %180 = trunc i32 %179 to i8
  %181 = load i8*, i8** %7, align 8
  %182 = load i32, i32* %8, align 4
  %183 = zext i32 %182 to i64
  %184 = getelementptr inbounds i8, i8* %181, i64 %183
  store i8 %180, i8* %184, align 1
  %185 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %26, i32 0, i32 5
  store i8 1, i8* %185, align 1
  %186 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %26, i32 0, i32 4
  store i8 1, i8* %186, align 2
  br label %187

187:                                              ; preds = %508, %171
  %188 = load i32, i32* %28, align 4
  %189 = add nsw i32 %188, -1
  store i32 %189, i32* %28, align 4
  %190 = icmp sge i32 %188, 0
  br i1 %190, label %191, label %515

191:                                              ; preds = %187
  %192 = load i8*, i8** %30, align 8
  %193 = getelementptr inbounds i8, i8* %192, i32 1
  store i8* %193, i8** %30, align 8
  %194 = load i8, i8* %192, align 1
  %195 = zext i8 %194 to i32
  %196 = load i32, i32* %33, align 4
  %197 = icmp ne i32 %195, %196
  br i1 %197, label %198, label %508

198:                                              ; preds = %191
  %199 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %6, align 8
  %200 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %199, i32 0, i32 17
  %201 = load i32, i32* %200, align 8
  %202 = icmp ne i32 %201, 0
  br i1 %202, label %203, label %410

203:                                              ; preds = %198
  store %struct.gx_path_s* %37, %struct.gx_path_s** %38, align 8
  %204 = load i32, i32* %33, align 4
  %205 = load i32, i32* %34, align 4
  %206 = icmp ne i32 %204, %205
  br i1 %206, label %207, label %255

207:                                              ; preds = %203
  %208 = load i32, i32* %33, align 4
  store i32 %208, i32* %34, align 4
  %209 = load i32, i32* %33, align 4
  %210 = icmp eq i32 %209, 0
  br i1 %210, label %211, label %216

211:                                              ; preds = %207
  %212 = load i64, i64* %10, align 8
  %213 = icmp eq i64 %212, -1
  br i1 %213, label %214, label %215

214:                                              ; preds = %211
  br label %409

215:                                              ; preds = %211
  br label %225

216:                                              ; preds = %207
  %217 = load i32, i32* %33, align 4
  %218 = icmp eq i32 %217, 255
  br i1 %218, label %219, label %224

219:                                              ; preds = %216
  %220 = load i64, i64* %11, align 8
  %221 = icmp eq i64 %220, -1
  br i1 %221, label %222, label %223

222:                                              ; preds = %219
  br label %409

223:                                              ; preds = %219
  br label %224

224:                                              ; preds = %223, %216
  br label %225

225:                                              ; preds = %224, %215
  %226 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %6, align 8
  %227 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %226, i32 0, i32 25
  %228 = load i32, i32* %33, align 4
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds [256 x %struct.gx_device_color_s], [256 x %struct.gx_device_color_s]* %227, i64 0, i64 %229
  store %struct.gx_device_color_s* %230, %struct.gx_device_color_s** %27, align 8
  %231 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %27, align 8
  %232 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %231, i32 0, i32 2
  %233 = load i32, i32* %232, align 8
  %234 = icmp slt i32 %233, 0
  br i1 %234, label %235, label %250

235:                                              ; preds = %225
  %236 = load i32, i32* %33, align 4
  %237 = trunc i32 %236 to i16
  %238 = zext i16 %237 to i32
  %239 = shl i32 %238, 8
  %240 = load i32, i32* %33, align 4
  %241 = add nsw i32 %239, %240
  %242 = trunc i32 %241 to i16
  %243 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %26, i32 0, i32 2
  store i16 %242, i16* %243, align 2
  %244 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %26, i32 0, i32 1
  store i16 %242, i16* %244, align 2
  %245 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %26, i32 0, i32 0
  store i16 %242, i16* %245, align 2
  %246 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %26, i32 0, i32 3
  store i16 %242, i16* %246, align 2
  %247 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %27, align 8
  %248 = load %struct.gs_state_s*, %struct.gs_state_s** %12, align 8
  %249 = call i32 (%struct.gs_color_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, ...) bitcast (void (%struct.gs_color_s*, %struct.gx_device_color_s*, %struct.gs_state_s*)* @gx_color_render to i32 (%struct.gs_color_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, ...)*)(%struct.gs_color_s* %26, %struct.gx_device_color_s* %247, %struct.gs_state_s* %248)
  br label %254

250:                                              ; preds = %225
  %251 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %27, align 8
  %252 = load %struct.gs_state_s*, %struct.gs_state_s** %12, align 8
  %253 = call i32 (%struct.gx_device_color_s*, %struct.gs_state_s*, ...) bitcast (void (%struct.gx_device_color_s*, %struct.gs_state_s*)* @gx_color_load to i32 (%struct.gx_device_color_s*, %struct.gs_state_s*, ...)*)(%struct.gx_device_color_s* %251, %struct.gs_state_s* %252)
  br label %254

254:                                              ; preds = %250, %235
  br label %255

255:                                              ; preds = %254, %203
  %256 = load i32, i32* %18, align 4
  %257 = icmp ne i32 %256, 0
  br i1 %257, label %312, label %258

258:                                              ; preds = %255
  %259 = load i64, i64* %29, align 8
  %260 = add nsw i64 %259, 2048
  %261 = and i64 %260, -4096
  store i64 %261, i64* %40, align 8
  %262 = load i64, i64* %31, align 8
  %263 = add nsw i64 %262, 2048
  %264 = and i64 %263, -4096
  store i64 %264, i64* %41, align 8
  %265 = load i64, i64* %41, align 8
  %266 = load i64, i64* %40, align 8
  %267 = icmp eq i64 %265, %266
  br i1 %267, label %268, label %269

268:                                              ; preds = %258
  br label %409

269:                                              ; preds = %258
  %270 = load i64, i64* %13, align 8
  %271 = icmp sge i64 %270, 0
  br i1 %271, label %272, label %286

272:                                              ; preds = %269
  %273 = load i64, i64* %41, align 8
  %274 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %17, i32 0, i32 1
  %275 = getelementptr inbounds %struct.timeval, %struct.timeval* %274, i32 0, i32 0
  %276 = load i64, i64* %275, align 8
  %277 = icmp sge i64 %273, %276
  br i1 %277, label %284, label %278

278:                                              ; preds = %272
  %279 = load i64, i64* %40, align 8
  %280 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %17, i32 0, i32 0
  %281 = getelementptr inbounds %struct.timeval, %struct.timeval* %280, i32 0, i32 0
  %282 = load i64, i64* %281, align 8
  %283 = icmp sle i64 %279, %282
  br i1 %283, label %284, label %285

284:                                              ; preds = %278, %272
  br label %409

285:                                              ; preds = %278
  br label %300

286:                                              ; preds = %269
  %287 = load i64, i64* %40, align 8
  %288 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %17, i32 0, i32 1
  %289 = getelementptr inbounds %struct.timeval, %struct.timeval* %288, i32 0, i32 0
  %290 = load i64, i64* %289, align 8
  %291 = icmp sge i64 %287, %290
  br i1 %291, label %298, label %292

292:                                              ; preds = %286
  %293 = load i64, i64* %41, align 8
  %294 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %17, i32 0, i32 0
  %295 = getelementptr inbounds %struct.timeval, %struct.timeval* %294, i32 0, i32 0
  %296 = load i64, i64* %295, align 8
  %297 = icmp sle i64 %293, %296
  br i1 %297, label %298, label %299

298:                                              ; preds = %292, %286
  br label %409

299:                                              ; preds = %292
  br label %300

300:                                              ; preds = %299, %285
  %301 = load %struct.gx_path_s*, %struct.gx_path_s** %38, align 8
  %302 = load %struct.gs_state_s*, %struct.gs_state_s** %12, align 8
  %303 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %302, i32 0, i32 1
  call void @gx_path_init(%struct.gx_path_s* %301, %struct.gs_memory_procs* %303)
  %304 = load %struct.gx_path_s*, %struct.gx_path_s** %38, align 8
  %305 = load i64, i64* %41, align 8
  %306 = load i64, i64* %20, align 8
  %307 = load i64, i64* %40, align 8
  %308 = load i64, i64* %20, align 8
  %309 = load i64, i64* %40, align 8
  %310 = load i64, i64* %21, align 8
  %311 = call i32 @gx_path_add_pgram(%struct.gx_path_s* %304, i64 %305, i64 %306, i64 %307, i64 %308, i64 %309, i64 %310)
  store i32 %311, i32* %39, align 4
  br label %328

312:                                              ; preds = %255
  %313 = load %struct.gx_path_s*, %struct.gx_path_s** %38, align 8
  %314 = load %struct.gs_state_s*, %struct.gs_state_s** %12, align 8
  %315 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %314, i32 0, i32 1
  call void @gx_path_init(%struct.gx_path_s* %313, %struct.gs_memory_procs* %315)
  %316 = load %struct.gx_path_s*, %struct.gx_path_s** %38, align 8
  %317 = load i64, i64* %31, align 8
  %318 = load i64, i64* %32, align 8
  %319 = load i64, i64* %29, align 8
  %320 = load i64, i64* %20, align 8
  %321 = load i64, i64* %29, align 8
  %322 = load i64, i64* %15, align 8
  %323 = add nsw i64 %321, %322
  %324 = load i64, i64* %20, align 8
  %325 = load i64, i64* %16, align 8
  %326 = add nsw i64 %324, %325
  %327 = call i32 @gx_path_add_pgram(%struct.gx_path_s* %316, i64 %317, i64 %318, i64 %319, i64 %320, i64 %323, i64 %326)
  store i32 %327, i32* %39, align 4
  br label %328

328:                                              ; preds = %312, %300
  %329 = load i32, i32* %39, align 4
  %330 = icmp slt i32 %329, 0
  br i1 %330, label %331, label %334

331:                                              ; preds = %328
  %332 = load %struct.gx_path_s*, %struct.gx_path_s** %38, align 8
  call void @gx_path_release(%struct.gx_path_s* %332)
  %333 = load i32, i32* %39, align 4
  store i32 %333, i32* %5, align 4
  br label %516

334:                                              ; preds = %328
  %335 = load i32, i32* %18, align 4
  %336 = icmp ne i32 %335, 0
  br i1 %336, label %337, label %402

337:                                              ; preds = %334
  %338 = load %struct.gx_path_s*, %struct.gx_path_s** %38, align 8
  %339 = call i32 @gx_path_bbox(%struct.gx_path_s* %338, %struct.gs_fixed_rect_s* %42)
  %340 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %42, i32 0, i32 1
  %341 = getelementptr inbounds %struct.timeval, %struct.timeval* %340, i32 0, i32 0
  %342 = load i64, i64* %341, align 8
  %343 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %17, i32 0, i32 0
  %344 = getelementptr inbounds %struct.timeval, %struct.timeval* %343, i32 0, i32 0
  %345 = load i64, i64* %344, align 8
  %346 = icmp sle i64 %342, %345
  br i1 %346, label %369, label %347

347:                                              ; preds = %337
  %348 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %42, i32 0, i32 0
  %349 = getelementptr inbounds %struct.timeval, %struct.timeval* %348, i32 0, i32 0
  %350 = load i64, i64* %349, align 8
  %351 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %17, i32 0, i32 1
  %352 = getelementptr inbounds %struct.timeval, %struct.timeval* %351, i32 0, i32 0
  %353 = load i64, i64* %352, align 8
  %354 = icmp sge i64 %350, %353
  br i1 %354, label %369, label %355

355:                                              ; preds = %347
  %356 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %42, i32 0, i32 0
  %357 = getelementptr inbounds %struct.timeval, %struct.timeval* %356, i32 0, i32 0
  %358 = load i64, i64* %357, align 8
  %359 = add nsw i64 %358, 2048
  %360 = ashr i64 %359, 12
  %361 = trunc i64 %360 to i32
  %362 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %42, i32 0, i32 1
  %363 = getelementptr inbounds %struct.timeval, %struct.timeval* %362, i32 0, i32 0
  %364 = load i64, i64* %363, align 8
  %365 = add nsw i64 %364, 2048
  %366 = ashr i64 %365, 12
  %367 = trunc i64 %366 to i32
  %368 = icmp eq i32 %361, %367
  br i1 %368, label %369, label %370

369:                                              ; preds = %355, %347, %337
  br label %407

370:                                              ; preds = %355
  %371 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %42, i32 0, i32 1
  %372 = getelementptr inbounds %struct.timeval, %struct.timeval* %371, i32 0, i32 1
  %373 = load i64, i64* %372, align 8
  %374 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %17, i32 0, i32 0
  %375 = getelementptr inbounds %struct.timeval, %struct.timeval* %374, i32 0, i32 1
  %376 = load i64, i64* %375, align 8
  %377 = icmp sle i64 %373, %376
  br i1 %377, label %400, label %378

378:                                              ; preds = %370
  %379 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %42, i32 0, i32 0
  %380 = getelementptr inbounds %struct.timeval, %struct.timeval* %379, i32 0, i32 1
  %381 = load i64, i64* %380, align 8
  %382 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %17, i32 0, i32 1
  %383 = getelementptr inbounds %struct.timeval, %struct.timeval* %382, i32 0, i32 1
  %384 = load i64, i64* %383, align 8
  %385 = icmp sge i64 %381, %384
  br i1 %385, label %400, label %386

386:                                              ; preds = %378
  %387 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %42, i32 0, i32 0
  %388 = getelementptr inbounds %struct.timeval, %struct.timeval* %387, i32 0, i32 1
  %389 = load i64, i64* %388, align 8
  %390 = add nsw i64 %389, 2048
  %391 = ashr i64 %390, 12
  %392 = trunc i64 %391 to i32
  %393 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %42, i32 0, i32 1
  %394 = getelementptr inbounds %struct.timeval, %struct.timeval* %393, i32 0, i32 1
  %395 = load i64, i64* %394, align 8
  %396 = add nsw i64 %395, 2048
  %397 = ashr i64 %396, 12
  %398 = trunc i64 %397 to i32
  %399 = icmp eq i32 %392, %398
  br i1 %399, label %400, label %401

400:                                              ; preds = %386, %378, %370
  br label %407

401:                                              ; preds = %386
  br label %402

402:                                              ; preds = %401, %334
  %403 = load %struct.gx_path_s*, %struct.gx_path_s** %38, align 8
  %404 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %27, align 8
  %405 = load %struct.gs_state_s*, %struct.gs_state_s** %12, align 8
  %406 = call i32 (%struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, i32, i64, ...) bitcast (i32 (%struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, i32, i64)* @gx_fill_path to i32 (%struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, i32, i64, ...)*)(%struct.gx_path_s* %403, %struct.gx_device_color_s* %404, %struct.gs_state_s* %405, i32 -1, i64 0)
  br label %407

407:                                              ; preds = %402, %400, %369
  %408 = load %struct.gx_path_s*, %struct.gx_path_s** %38, align 8
  call void @gx_path_release(%struct.gx_path_s* %408)
  br label %409

409:                                              ; preds = %407, %298, %284, %268, %222, %214
  br label %501

410:                                              ; preds = %198
  %411 = load i64, i64* %31, align 8
  %412 = add nsw i64 %411, 2048
  %413 = ashr i64 %412, 12
  %414 = trunc i64 %413 to i32
  store i32 %414, i32* %44, align 4
  %415 = load i64, i64* %29, align 8
  %416 = add nsw i64 %415, 2048
  %417 = ashr i64 %416, 12
  %418 = trunc i64 %417 to i32
  %419 = load i32, i32* %44, align 4
  %420 = sub nsw i32 %418, %419
  store i32 %420, i32* %45, align 4
  %421 = load i32, i32* %45, align 4
  %422 = icmp sle i32 %421, 0
  br i1 %422, label %423, label %433

423:                                              ; preds = %410
  %424 = load i32, i32* %45, align 4
  %425 = icmp eq i32 %424, 0
  br i1 %425, label %426, label %427

426:                                              ; preds = %423
  br label %500

427:                                              ; preds = %423
  %428 = load i32, i32* %45, align 4
  %429 = load i32, i32* %44, align 4
  %430 = add nsw i32 %429, %428
  store i32 %430, i32* %44, align 4
  %431 = load i32, i32* %45, align 4
  %432 = sub nsw i32 0, %431
  store i32 %432, i32* %45, align 4
  br label %433

433:                                              ; preds = %427, %410
  %434 = load i32, i32* %33, align 4
  switch i32 %434, label %454 [
    i32 0, label %435
    i32 255, label %437
  ]

435:                                              ; preds = %433
  %436 = load i64, i64* %10, align 8
  store i64 %436, i64* %43, align 8
  br label %439

437:                                              ; preds = %433
  %438 = load i64, i64* %11, align 8
  store i64 %438, i64* %43, align 8
  br label %439

439:                                              ; preds = %437, %435
  %440 = load i64, i64* %43, align 8
  %441 = icmp ne i64 %440, -1
  br i1 %441, label %442, label %453

442:                                              ; preds = %439
  %443 = load i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)** %36, align 8
  %444 = load %struct.gx_device_s*, %struct.gx_device_s** %35, align 8
  %445 = load i32, i32* %44, align 4
  %446 = load i32, i32* %22, align 4
  %447 = load i32, i32* %24, align 4
  %448 = add nsw i32 %446, %447
  %449 = load i32, i32* %45, align 4
  %450 = load i32, i32* %25, align 4
  %451 = load i64, i64* %43, align 8
  %452 = call i32 %443(%struct.gx_device_s* %444, i32 %445, i32 %448, i32 %449, i32 %450, i64 %451)
  br label %453

453:                                              ; preds = %442, %439
  br label %499

454:                                              ; preds = %433
  %455 = load i32, i32* %33, align 4
  %456 = load i32, i32* %34, align 4
  %457 = icmp ne i32 %455, %456
  br i1 %457, label %458, label %489

458:                                              ; preds = %454
  %459 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %6, align 8
  %460 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %459, i32 0, i32 25
  %461 = load i32, i32* %33, align 4
  %462 = sext i32 %461 to i64
  %463 = getelementptr inbounds [256 x %struct.gx_device_color_s], [256 x %struct.gx_device_color_s]* %460, i64 0, i64 %462
  store %struct.gx_device_color_s* %463, %struct.gx_device_color_s** %27, align 8
  %464 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %27, align 8
  %465 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %464, i32 0, i32 2
  %466 = load i32, i32* %465, align 8
  %467 = icmp slt i32 %466, 0
  br i1 %467, label %468, label %483

468:                                              ; preds = %458
  %469 = load i32, i32* %33, align 4
  %470 = trunc i32 %469 to i16
  %471 = zext i16 %470 to i32
  %472 = shl i32 %471, 8
  %473 = load i32, i32* %33, align 4
  %474 = add nsw i32 %472, %473
  %475 = trunc i32 %474 to i16
  %476 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %26, i32 0, i32 2
  store i16 %475, i16* %476, align 2
  %477 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %26, i32 0, i32 1
  store i16 %475, i16* %477, align 2
  %478 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %26, i32 0, i32 0
  store i16 %475, i16* %478, align 2
  %479 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %26, i32 0, i32 3
  store i16 %475, i16* %479, align 2
  %480 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %27, align 8
  %481 = load %struct.gs_state_s*, %struct.gs_state_s** %12, align 8
  %482 = call i32 (%struct.gs_color_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, ...) bitcast (void (%struct.gs_color_s*, %struct.gx_device_color_s*, %struct.gs_state_s*)* @gx_color_render to i32 (%struct.gs_color_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, ...)*)(%struct.gs_color_s* %26, %struct.gx_device_color_s* %480, %struct.gs_state_s* %481)
  br label %487

483:                                              ; preds = %458
  %484 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %27, align 8
  %485 = load %struct.gs_state_s*, %struct.gs_state_s** %12, align 8
  %486 = call i32 (%struct.gx_device_color_s*, %struct.gs_state_s*, ...) bitcast (void (%struct.gx_device_color_s*, %struct.gs_state_s*)* @gx_color_load to i32 (%struct.gx_device_color_s*, %struct.gs_state_s*, ...)*)(%struct.gx_device_color_s* %484, %struct.gs_state_s* %485)
  br label %487

487:                                              ; preds = %483, %468
  %488 = load i32, i32* %33, align 4
  store i32 %488, i32* %34, align 4
  br label %489

489:                                              ; preds = %487, %454
  %490 = load i32, i32* %44, align 4
  %491 = load i32, i32* %22, align 4
  %492 = load i32, i32* %24, align 4
  %493 = add nsw i32 %491, %492
  %494 = load i32, i32* %45, align 4
  %495 = load i32, i32* %25, align 4
  %496 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %27, align 8
  %497 = load %struct.gs_state_s*, %struct.gs_state_s** %12, align 8
  %498 = call i32 (i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gs_state_s*, ...) bitcast (i32 (i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gs_state_s*)* @gz_fill_rectangle to i32 (i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gs_state_s*, ...)*)(i32 %490, i32 %493, i32 %494, i32 %495, %struct.gx_device_color_s* %496, %struct.gs_state_s* %497)
  br label %499

499:                                              ; preds = %489, %453
  br label %500

500:                                              ; preds = %499, %426
  br label %501

501:                                              ; preds = %500, %409
  %502 = load i64, i64* %29, align 8
  store i64 %502, i64* %31, align 8
  %503 = load i64, i64* %20, align 8
  store i64 %503, i64* %32, align 8
  %504 = load i8*, i8** %30, align 8
  %505 = getelementptr inbounds i8, i8* %504, i64 -1
  %506 = load i8, i8* %505, align 1
  %507 = zext i8 %506 to i32
  store i32 %507, i32* %33, align 4
  br label %508

508:                                              ; preds = %501, %191
  %509 = load i64, i64* %13, align 8
  %510 = load i64, i64* %29, align 8
  %511 = add nsw i64 %510, %509
  store i64 %511, i64* %29, align 8
  %512 = load i64, i64* %14, align 8
  %513 = load i64, i64* %20, align 8
  %514 = add nsw i64 %513, %512
  store i64 %514, i64* %20, align 8
  br label %187

515:                                              ; preds = %187
  store i32 1, i32* %5, align 4
  br label %516

516:                                              ; preds = %515, %331, %168, %154, %137
  %517 = load i32, i32* %5, align 4
  ret i32 %517
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @image_render_color(%struct.gs_image_enum_s* %0, i8* %1, i32 %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.gs_image_enum_s*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.gs_state_s*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca %struct.gs_color_s, align 2
  %22 = alloca %struct.gx_device_color_s, align 8
  %23 = alloca %struct.gx_device_color_s, align 8
  %24 = alloca %struct.gx_device_color_s*, align 8
  %25 = alloca %struct.gx_device_color_s*, align 8
  %26 = alloca i32, align 4
  %27 = alloca i64, align 8
  %28 = alloca i8*, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca %union.color_sample, align 8
  %32 = alloca %union.color_sample, align 8
  %33 = alloca i8*, align 8
  %34 = alloca i64, align 8
  %35 = alloca i32, align 4
  %36 = alloca %struct.gx_device_color_s*, align 8
  %37 = alloca %struct.gx_path_s, align 8
  %38 = alloca %struct.gx_path_s*, align 8
  %39 = alloca i32, align 4
  %40 = alloca i32, align 4
  %41 = alloca i32, align 4
  store %struct.gs_image_enum_s* %0, %struct.gs_image_enum_s** %6, align 8
  store i8* %1, i8** %7, align 8
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  %42 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %6, align 8
  %43 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %42, i32 0, i32 11
  %44 = load %struct.gs_state_s*, %struct.gs_state_s** %43, align 8
  store %struct.gs_state_s* %44, %struct.gs_state_s** %10, align 8
  %45 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %6, align 8
  %46 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %45, i32 0, i32 5
  %47 = load i64, i64* %46, align 8
  store i64 %47, i64* %11, align 8
  %48 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %6, align 8
  %49 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %48, i32 0, i32 6
  %50 = load i64, i64* %49, align 8
  store i64 %50, i64* %12, align 8
  %51 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %6, align 8
  %52 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %51, i32 0, i32 7
  %53 = load i64, i64* %52, align 8
  store i64 %53, i64* %13, align 8
  %54 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %6, align 8
  %55 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %54, i32 0, i32 8
  %56 = load i64, i64* %55, align 8
  store i64 %56, i64* %14, align 8
  %57 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %6, align 8
  %58 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %57, i32 0, i32 16
  %59 = load i32, i32* %58, align 4
  store i32 %59, i32* %15, align 4
  %60 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %6, align 8
  %61 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %60, i32 0, i32 22
  %62 = load i64, i64* %61, align 8
  store i64 %62, i64* %16, align 8
  %63 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %6, align 8
  %64 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %63, i32 0, i32 23
  %65 = load i64, i64* %64, align 8
  store i64 %65, i64* %17, align 8
  store %struct.gx_device_color_s* %22, %struct.gx_device_color_s** %24, align 8
  store %struct.gx_device_color_s* %23, %struct.gx_device_color_s** %25, align 8
  %66 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %6, align 8
  %67 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %66, i32 0, i32 3
  %68 = load i32, i32* %67, align 4
  store i32 %68, i32* %26, align 4
  %69 = load i64, i64* %16, align 8
  store i64 %69, i64* %27, align 8
  %70 = load i8*, i8** %7, align 8
  store i8* %70, i8** %28, align 8
  %71 = load i64, i64* %16, align 8
  store i64 %71, i64* %29, align 8
  %72 = load i64, i64* %17, align 8
  store i64 %72, i64* %30, align 8
  %73 = load i8*, i8** %7, align 8
  %74 = load i32, i32* %8, align 4
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds i8, i8* %73, i64 %75
  store i8* %76, i8** %33, align 8
  %77 = load i8*, i8** %33, align 8
  %78 = load i32, i32* %26, align 4
  %79 = sub nsw i32 0, %78
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds i8, i8* %77, i64 %80
  %82 = load i8, i8* %81, align 1
  %83 = zext i8 %82 to i32
  %84 = xor i32 %83, -1
  %85 = trunc i32 %84 to i8
  %86 = load i8*, i8** %33, align 8
  %87 = getelementptr inbounds i8, i8* %86, i64 0
  store i8 %85, i8* %87, align 1
  %88 = load i32, i32* %15, align 4
  %89 = icmp ne i32 %88, 0
  br i1 %89, label %112, label %90

90:                                               ; preds = %4
  %91 = load i64, i64* %17, align 8
  %92 = load i64, i64* %14, align 8
  %93 = add nsw i64 %91, %92
  store i64 %93, i64* %34, align 8
  %94 = load i64, i64* %17, align 8
  %95 = add nsw i64 %94, 2048
  %96 = ashr i64 %95, 12
  %97 = trunc i64 %96 to i32
  store i32 %97, i32* %18, align 4
  %98 = load i64, i64* %34, align 8
  %99 = add nsw i64 %98, 2048
  %100 = ashr i64 %99, 12
  %101 = trunc i64 %100 to i32
  %102 = load i32, i32* %18, align 4
  %103 = sub nsw i32 %101, %102
  store i32 %103, i32* %20, align 4
  %104 = load i32, i32* %20, align 4
  %105 = icmp sge i32 %104, 0
  br i1 %105, label %106, label %107

106:                                              ; preds = %90
  store i32 0, i32* %19, align 4
  br label %111

107:                                              ; preds = %90
  %108 = load i32, i32* %20, align 4
  store i32 %108, i32* %19, align 4
  %109 = load i32, i32* %20, align 4
  %110 = sub nsw i32 0, %109
  store i32 %110, i32* %20, align 4
  br label %111

111:                                              ; preds = %107, %106
  br label %112

112:                                              ; preds = %111, %4
  %113 = bitcast %union.color_sample* %31 to i64*
  store i64 0, i64* %113, align 8
  %114 = bitcast %union.color_sample* %32 to i64*
  store i64 0, i64* %114, align 8
  %115 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %21, i32 0, i32 2
  store i16 0, i16* %115, align 2
  %116 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %21, i32 0, i32 1
  store i16 0, i16* %116, align 2
  %117 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %21, i32 0, i32 0
  store i16 0, i16* %117, align 2
  %118 = call i32 (%struct.gs_color_s*, ...) bitcast (void (%struct.gs_color_s*)* @gx_color_from_rgb to i32 (%struct.gs_color_s*, ...)*)(%struct.gs_color_s* %21)
  %119 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %24, align 8
  %120 = load %struct.gs_state_s*, %struct.gs_state_s** %10, align 8
  %121 = call i32 (%struct.gs_color_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, ...) bitcast (void (%struct.gs_color_s*, %struct.gx_device_color_s*, %struct.gs_state_s*)* @gx_color_render to i32 (%struct.gs_color_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, ...)*)(%struct.gs_color_s* %21, %struct.gx_device_color_s* %119, %struct.gs_state_s* %120)
  br label %122

122:                                              ; preds = %334, %112
  %123 = load i8*, i8** %28, align 8
  %124 = load i8*, i8** %33, align 8
  %125 = icmp ule i8* %123, %124
  br i1 %125, label %126, label %341

126:                                              ; preds = %122
  %127 = load i32, i32* %26, align 4
  %128 = icmp eq i32 %127, 4
  br i1 %128, label %129, label %170

129:                                              ; preds = %126
  %130 = load i8*, i8** %28, align 8
  %131 = getelementptr inbounds i8, i8* %130, i64 3
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i32
  %134 = sub nsw i32 255, %133
  store i32 %134, i32* %35, align 4
  %135 = load i8*, i8** %28, align 8
  %136 = getelementptr inbounds i8, i8* %135, i64 0
  %137 = load i8, i8* %136, align 1
  %138 = zext i8 %137 to i32
  %139 = sub nsw i32 255, %138
  %140 = load i32, i32* %35, align 4
  %141 = mul i32 %139, %140
  %142 = udiv i32 %141, 255
  %143 = trunc i32 %142 to i8
  %144 = bitcast %union.color_sample* %32 to %struct.anon*
  %145 = getelementptr inbounds %struct.anon, %struct.anon* %144, i32 0, i32 0
  store i8 %143, i8* %145, align 8
  %146 = load i8*, i8** %28, align 8
  %147 = getelementptr inbounds i8, i8* %146, i64 1
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i32
  %150 = sub nsw i32 255, %149
  %151 = load i32, i32* %35, align 4
  %152 = mul i32 %150, %151
  %153 = udiv i32 %152, 255
  %154 = trunc i32 %153 to i8
  %155 = bitcast %union.color_sample* %32 to %struct.anon*
  %156 = getelementptr inbounds %struct.anon, %struct.anon* %155, i32 0, i32 1
  store i8 %154, i8* %156, align 1
  %157 = load i8*, i8** %28, align 8
  %158 = getelementptr inbounds i8, i8* %157, i64 2
  %159 = load i8, i8* %158, align 1
  %160 = zext i8 %159 to i32
  %161 = sub nsw i32 255, %160
  %162 = load i32, i32* %35, align 4
  %163 = mul i32 %161, %162
  %164 = udiv i32 %163, 255
  %165 = trunc i32 %164 to i8
  %166 = bitcast %union.color_sample* %32 to %struct.anon*
  %167 = getelementptr inbounds %struct.anon, %struct.anon* %166, i32 0, i32 2
  store i8 %165, i8* %167, align 2
  %168 = load i8*, i8** %28, align 8
  %169 = getelementptr inbounds i8, i8* %168, i64 4
  store i8* %169, i8** %28, align 8
  br label %188

170:                                              ; preds = %126
  %171 = load i8*, i8** %28, align 8
  %172 = getelementptr inbounds i8, i8* %171, i64 0
  %173 = load i8, i8* %172, align 1
  %174 = bitcast %union.color_sample* %32 to %struct.anon*
  %175 = getelementptr inbounds %struct.anon, %struct.anon* %174, i32 0, i32 0
  store i8 %173, i8* %175, align 8
  %176 = load i8*, i8** %28, align 8
  %177 = getelementptr inbounds i8, i8* %176, i64 1
  %178 = load i8, i8* %177, align 1
  %179 = bitcast %union.color_sample* %32 to %struct.anon*
  %180 = getelementptr inbounds %struct.anon, %struct.anon* %179, i32 0, i32 1
  store i8 %178, i8* %180, align 1
  %181 = load i8*, i8** %28, align 8
  %182 = getelementptr inbounds i8, i8* %181, i64 2
  %183 = load i8, i8* %182, align 1
  %184 = bitcast %union.color_sample* %32 to %struct.anon*
  %185 = getelementptr inbounds %struct.anon, %struct.anon* %184, i32 0, i32 2
  store i8 %183, i8* %185, align 2
  %186 = load i8*, i8** %28, align 8
  %187 = getelementptr inbounds i8, i8* %186, i64 3
  store i8* %187, i8** %28, align 8
  br label %188

188:                                              ; preds = %170, %129
  %189 = bitcast %union.color_sample* %32 to i64*
  %190 = load i64, i64* %189, align 8
  %191 = bitcast %union.color_sample* %31 to i64*
  %192 = load i64, i64* %191, align 8
  %193 = icmp ne i64 %190, %192
  br i1 %193, label %194, label %334

194:                                              ; preds = %188
  %195 = bitcast %union.color_sample* %32 to %struct.anon*
  %196 = getelementptr inbounds %struct.anon, %struct.anon* %195, i32 0, i32 0
  %197 = load i8, i8* %196, align 8
  %198 = zext i8 %197 to i16
  %199 = zext i16 %198 to i32
  %200 = shl i32 %199, 8
  %201 = bitcast %union.color_sample* %32 to %struct.anon*
  %202 = getelementptr inbounds %struct.anon, %struct.anon* %201, i32 0, i32 0
  %203 = load i8, i8* %202, align 8
  %204 = zext i8 %203 to i32
  %205 = add nsw i32 %200, %204
  %206 = trunc i32 %205 to i16
  %207 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %21, i32 0, i32 0
  store i16 %206, i16* %207, align 2
  %208 = bitcast %union.color_sample* %32 to %struct.anon*
  %209 = getelementptr inbounds %struct.anon, %struct.anon* %208, i32 0, i32 1
  %210 = load i8, i8* %209, align 1
  %211 = zext i8 %210 to i16
  %212 = zext i16 %211 to i32
  %213 = shl i32 %212, 8
  %214 = bitcast %union.color_sample* %32 to %struct.anon*
  %215 = getelementptr inbounds %struct.anon, %struct.anon* %214, i32 0, i32 1
  %216 = load i8, i8* %215, align 1
  %217 = zext i8 %216 to i32
  %218 = add nsw i32 %213, %217
  %219 = trunc i32 %218 to i16
  %220 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %21, i32 0, i32 1
  store i16 %219, i16* %220, align 2
  %221 = bitcast %union.color_sample* %32 to %struct.anon*
  %222 = getelementptr inbounds %struct.anon, %struct.anon* %221, i32 0, i32 2
  %223 = load i8, i8* %222, align 2
  %224 = zext i8 %223 to i16
  %225 = zext i16 %224 to i32
  %226 = shl i32 %225, 8
  %227 = bitcast %union.color_sample* %32 to %struct.anon*
  %228 = getelementptr inbounds %struct.anon, %struct.anon* %227, i32 0, i32 2
  %229 = load i8, i8* %228, align 2
  %230 = zext i8 %229 to i32
  %231 = add nsw i32 %226, %230
  %232 = trunc i32 %231 to i16
  %233 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %21, i32 0, i32 2
  store i16 %232, i16* %233, align 2
  %234 = call i32 (%struct.gs_color_s*, ...) bitcast (void (%struct.gs_color_s*)* @gx_color_from_rgb to i32 (%struct.gs_color_s*, ...)*)(%struct.gs_color_s* %21)
  %235 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %25, align 8
  %236 = load %struct.gs_state_s*, %struct.gs_state_s** %10, align 8
  %237 = call i32 (%struct.gs_color_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, ...) bitcast (void (%struct.gs_color_s*, %struct.gx_device_color_s*, %struct.gs_state_s*)* @gx_color_render to i32 (%struct.gs_color_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, ...)*)(%struct.gs_color_s* %21, %struct.gx_device_color_s* %235, %struct.gs_state_s* %236)
  %238 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %22, i32 0, i32 0
  %239 = load i64, i64* %238, align 8
  %240 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %23, i32 0, i32 0
  %241 = load i64, i64* %240, align 8
  %242 = icmp ne i64 %239, %241
  br i1 %242, label %263, label %243

243:                                              ; preds = %194
  %244 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %22, i32 0, i32 2
  %245 = load i32, i32* %244, align 8
  %246 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %23, i32 0, i32 2
  %247 = load i32, i32* %246, align 8
  %248 = icmp ne i32 %245, %247
  br i1 %248, label %263, label %249

249:                                              ; preds = %243
  %250 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %22, i32 0, i32 2
  %251 = load i32, i32* %250, align 8
  %252 = icmp ne i32 %251, 0
  br i1 %252, label %253, label %259

253:                                              ; preds = %249
  %254 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %22, i32 0, i32 1
  %255 = load i64, i64* %254, align 8
  %256 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %23, i32 0, i32 1
  %257 = load i64, i64* %256, align 8
  %258 = icmp ne i64 %255, %257
  br i1 %258, label %263, label %259

259:                                              ; preds = %253, %249
  %260 = load i8*, i8** %28, align 8
  %261 = load i8*, i8** %33, align 8
  %262 = icmp ugt i8* %260, %261
  br i1 %262, label %263, label %330

263:                                              ; preds = %259, %253, %243, %194
  %264 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %6, align 8
  %265 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %264, i32 0, i32 17
  %266 = load i32, i32* %265, align 8
  %267 = icmp ne i32 %266, 0
  br i1 %267, label %268, label %295

268:                                              ; preds = %263
  store %struct.gx_path_s* %37, %struct.gx_path_s** %38, align 8
  %269 = load %struct.gx_path_s*, %struct.gx_path_s** %38, align 8
  %270 = load %struct.gs_state_s*, %struct.gs_state_s** %10, align 8
  %271 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %270, i32 0, i32 1
  call void @gx_path_init(%struct.gx_path_s* %269, %struct.gs_memory_procs* %271)
  %272 = load %struct.gx_path_s*, %struct.gx_path_s** %38, align 8
  %273 = load i64, i64* %29, align 8
  %274 = load i64, i64* %30, align 8
  %275 = load i64, i64* %27, align 8
  %276 = load i64, i64* %17, align 8
  %277 = load i64, i64* %27, align 8
  %278 = load i64, i64* %13, align 8
  %279 = add nsw i64 %277, %278
  %280 = load i64, i64* %17, align 8
  %281 = load i64, i64* %14, align 8
  %282 = add nsw i64 %280, %281
  %283 = call i32 @gx_path_add_pgram(%struct.gx_path_s* %272, i64 %273, i64 %274, i64 %275, i64 %276, i64 %279, i64 %282)
  store i32 %283, i32* %39, align 4
  %284 = load i32, i32* %39, align 4
  %285 = icmp slt i32 %284, 0
  br i1 %285, label %286, label %289

286:                                              ; preds = %268
  %287 = load %struct.gx_path_s*, %struct.gx_path_s** %38, align 8
  call void @gx_path_release(%struct.gx_path_s* %287)
  %288 = load i32, i32* %39, align 4
  store i32 %288, i32* %5, align 4
  br label %342

289:                                              ; preds = %268
  %290 = load %struct.gx_path_s*, %struct.gx_path_s** %38, align 8
  %291 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %24, align 8
  %292 = load %struct.gs_state_s*, %struct.gs_state_s** %10, align 8
  %293 = call i32 (%struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, i32, i64, ...) bitcast (i32 (%struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, i32, i64)* @gx_fill_path to i32 (%struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, i32, i64, ...)*)(%struct.gx_path_s* %290, %struct.gx_device_color_s* %291, %struct.gs_state_s* %292, i32 -1, i64 0)
  %294 = load %struct.gx_path_s*, %struct.gx_path_s** %38, align 8
  call void @gx_path_release(%struct.gx_path_s* %294)
  br label %324

295:                                              ; preds = %263
  %296 = load i64, i64* %29, align 8
  %297 = add nsw i64 %296, 2048
  %298 = ashr i64 %297, 12
  %299 = trunc i64 %298 to i32
  store i32 %299, i32* %40, align 4
  %300 = load i64, i64* %27, align 8
  %301 = add nsw i64 %300, 2048
  %302 = ashr i64 %301, 12
  %303 = trunc i64 %302 to i32
  %304 = load i32, i32* %40, align 4
  %305 = sub nsw i32 %303, %304
  store i32 %305, i32* %41, align 4
  %306 = load i32, i32* %41, align 4
  %307 = icmp slt i32 %306, 0
  br i1 %307, label %308, label %314

308:                                              ; preds = %295
  %309 = load i32, i32* %41, align 4
  %310 = load i32, i32* %40, align 4
  %311 = add nsw i32 %310, %309
  store i32 %311, i32* %40, align 4
  %312 = load i32, i32* %41, align 4
  %313 = sub nsw i32 0, %312
  store i32 %313, i32* %41, align 4
  br label %314

314:                                              ; preds = %308, %295
  %315 = load i32, i32* %40, align 4
  %316 = load i32, i32* %18, align 4
  %317 = load i32, i32* %19, align 4
  %318 = add nsw i32 %316, %317
  %319 = load i32, i32* %41, align 4
  %320 = load i32, i32* %20, align 4
  %321 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %24, align 8
  %322 = load %struct.gs_state_s*, %struct.gs_state_s** %10, align 8
  %323 = call i32 (i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gs_state_s*, ...) bitcast (i32 (i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gs_state_s*)* @gz_fill_rectangle to i32 (i32, i32, i32, i32, %struct.gx_device_color_s*, %struct.gs_state_s*, ...)*)(i32 %315, i32 %318, i32 %319, i32 %320, %struct.gx_device_color_s* %321, %struct.gs_state_s* %322)
  br label %324

324:                                              ; preds = %314, %289
  %325 = load i64, i64* %27, align 8
  store i64 %325, i64* %29, align 8
  %326 = load i64, i64* %17, align 8
  store i64 %326, i64* %30, align 8
  %327 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %24, align 8
  store %struct.gx_device_color_s* %327, %struct.gx_device_color_s** %36, align 8
  %328 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %25, align 8
  store %struct.gx_device_color_s* %328, %struct.gx_device_color_s** %24, align 8
  %329 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %36, align 8
  store %struct.gx_device_color_s* %329, %struct.gx_device_color_s** %25, align 8
  br label %330

330:                                              ; preds = %324, %259
  %331 = bitcast %union.color_sample* %32 to i64*
  %332 = load i64, i64* %331, align 8
  %333 = bitcast %union.color_sample* %31 to i64*
  store i64 %332, i64* %333, align 8
  br label %334

334:                                              ; preds = %330, %188
  %335 = load i64, i64* %11, align 8
  %336 = load i64, i64* %27, align 8
  %337 = add nsw i64 %336, %335
  store i64 %337, i64* %27, align 8
  %338 = load i64, i64* %12, align 8
  %339 = load i64, i64* %17, align 8
  %340 = add nsw i64 %339, %338
  store i64 %340, i64* %17, align 8
  br label %122

341:                                              ; preds = %122
  store i32 1, i32* %5, align 4
  br label %342

342:                                              ; preds = %341, %286
  %343 = load i32, i32* %5, align 4
  ret i32 %343
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @image_render_skip(%struct.gs_image_enum_s* %0, i8* %1, i32 %2, i32 %3) #0 {
  %5 = alloca %struct.gs_image_enum_s*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store %struct.gs_image_enum_s* %0, %struct.gs_image_enum_s** %5, align 8
  store i8* %1, i8** %6, align 8
  store i32 %2, i32* %7, align 4
  store i32 %3, i32* %8, align 4
  %9 = load i32, i32* %8, align 4
  ret i32 %9
}

; Function Attrs: noinline nounwind uwtable
define internal void @image_unpack_3(%struct.gs_image_enum_s* %0, i8* %1, i8* %2, i32 %3) #0 {
  %5 = alloca %struct.gs_image_enum_s*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  store %struct.gs_image_enum_s* %0, %struct.gs_image_enum_s** %5, align 8
  store i8* %1, i8** %6, align 8
  store i8* %2, i8** %7, align 8
  store i32 %3, i32* %8, align 4
  %9 = load i8*, i8** %7, align 8
  %10 = load i8*, i8** %6, align 8
  %11 = icmp ne i8* %9, %10
  br i1 %11, label %12, label %17

12:                                               ; preds = %4
  %13 = load i8*, i8** %6, align 8
  %14 = load i8*, i8** %7, align 8
  %15 = load i32, i32* %8, align 4
  %16 = zext i32 %15 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 1 %14, i64 %16, i1 false)
  br label %17

17:                                               ; preds = %12, %4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @image_unpack_0(%struct.gs_image_enum_s* %0, i8* %1, i8* %2, i32 %3) #0 {
  %5 = alloca %struct.gs_image_enum_s*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store %struct.gs_image_enum_s* %0, %struct.gs_image_enum_s** %5, align 8
  store i8* %1, i8** %6, align 8
  store i8* %2, i8** %7, align 8
  store i32 %3, i32* %8, align 4
  %12 = load i8*, i8** %6, align 8
  %13 = bitcast i8* %12 to i32*
  store i32* %13, i32** %9, align 8
  %14 = load i32, i32* %8, align 4
  store i32 %14, i32* %10, align 4
  br label %15

15:                                               ; preds = %19, %4
  %16 = load i32, i32* %10, align 4
  %17 = add nsw i32 %16, -1
  store i32 %17, i32* %10, align 4
  %18 = icmp ne i32 %16, 0
  br i1 %18, label %19, label %38

19:                                               ; preds = %15
  %20 = load i8*, i8** %7, align 8
  %21 = getelementptr inbounds i8, i8* %20, i32 1
  store i8* %21, i8** %7, align 8
  %22 = load i8, i8* %20, align 1
  %23 = zext i8 %22 to i32
  store i32 %23, i32* %11, align 4
  %24 = load i32, i32* %11, align 4
  %25 = lshr i32 %24, 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds [16 x i32], [16 x i32]* @map_4_to_32, i64 0, i64 %26
  %28 = load i32, i32* %27, align 4
  %29 = load i32*, i32** %9, align 8
  %30 = getelementptr inbounds i32, i32* %29, i32 1
  store i32* %30, i32** %9, align 8
  store i32 %28, i32* %29, align 4
  %31 = load i32, i32* %11, align 4
  %32 = and i32 %31, 15
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds [16 x i32], [16 x i32]* @map_4_to_32, i64 0, i64 %33
  %35 = load i32, i32* %34, align 4
  %36 = load i32*, i32** %9, align 8
  %37 = getelementptr inbounds i32, i32* %36, i32 1
  store i32* %37, i32** %9, align 8
  store i32 %35, i32* %36, align 4
  br label %15

38:                                               ; preds = %15
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @image_unpack_1(%struct.gs_image_enum_s* %0, i8* %1, i8* %2, i32 %3) #0 {
  %5 = alloca %struct.gs_image_enum_s*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i16*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store %struct.gs_image_enum_s* %0, %struct.gs_image_enum_s** %5, align 8
  store i8* %1, i8** %6, align 8
  store i8* %2, i8** %7, align 8
  store i32 %3, i32* %8, align 4
  %12 = load i8*, i8** %6, align 8
  %13 = bitcast i8* %12 to i16*
  store i16* %13, i16** %9, align 8
  %14 = load i32, i32* %8, align 4
  store i32 %14, i32* %10, align 4
  br label %15

15:                                               ; preds = %19, %4
  %16 = load i32, i32* %10, align 4
  %17 = add nsw i32 %16, -1
  store i32 %17, i32* %10, align 4
  %18 = icmp ne i32 %16, 0
  br i1 %18, label %19, label %38

19:                                               ; preds = %15
  %20 = load i8*, i8** %7, align 8
  %21 = getelementptr inbounds i8, i8* %20, i32 1
  store i8* %21, i8** %7, align 8
  %22 = load i8, i8* %20, align 1
  %23 = zext i8 %22 to i32
  store i32 %23, i32* %11, align 4
  %24 = load i32, i32* %11, align 4
  %25 = lshr i32 %24, 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds [16 x i16], [16 x i16]* @map_4_to_16, i64 0, i64 %26
  %28 = load i16, i16* %27, align 2
  %29 = load i16*, i16** %9, align 8
  %30 = getelementptr inbounds i16, i16* %29, i32 1
  store i16* %30, i16** %9, align 8
  store i16 %28, i16* %29, align 2
  %31 = load i32, i32* %11, align 4
  %32 = and i32 %31, 15
  %33 = zext i32 %32 to i64
  %34 = getelementptr inbounds [16 x i16], [16 x i16]* @map_4_to_16, i64 0, i64 %33
  %35 = load i16, i16* %34, align 2
  %36 = load i16*, i16** %9, align 8
  %37 = getelementptr inbounds i16, i16* %36, i32 1
  store i16* %37, i16** %9, align 8
  store i16 %35, i16* %36, align 2
  br label %15

38:                                               ; preds = %15
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @image_unpack_2(%struct.gs_image_enum_s* %0, i8* %1, i8* %2, i32 %3) #0 {
  %5 = alloca %struct.gs_image_enum_s*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store %struct.gs_image_enum_s* %0, %struct.gs_image_enum_s** %5, align 8
  store i8* %1, i8** %6, align 8
  store i8* %2, i8** %7, align 8
  store i32 %3, i32* %8, align 4
  %12 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %13 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %12, i32 0, i32 4
  %14 = load i32, i32* %13, align 8
  store i32 %14, i32* %9, align 4
  %15 = load i32, i32* %8, align 4
  store i32 %15, i32* %10, align 4
  br label %16

16:                                               ; preds = %20, %4
  %17 = load i32, i32* %10, align 4
  %18 = add nsw i32 %17, -1
  store i32 %18, i32* %10, align 4
  %19 = icmp ne i32 %17, 0
  br i1 %19, label %20, label %48

20:                                               ; preds = %16
  %21 = load i8*, i8** %7, align 8
  %22 = getelementptr inbounds i8, i8* %21, i32 1
  store i8* %22, i8** %7, align 8
  %23 = load i8, i8* %21, align 1
  %24 = zext i8 %23 to i32
  store i32 %24, i32* %11, align 4
  %25 = load i32, i32* %11, align 4
  %26 = and i32 %25, 240
  %27 = load i32, i32* %11, align 4
  %28 = lshr i32 %27, 4
  %29 = add i32 %26, %28
  %30 = trunc i32 %29 to i8
  %31 = load i8*, i8** %6, align 8
  store i8 %30, i8* %31, align 1
  %32 = load i32, i32* %9, align 4
  %33 = load i8*, i8** %6, align 8
  %34 = sext i32 %32 to i64
  %35 = getelementptr inbounds i8, i8* %33, i64 %34
  store i8* %35, i8** %6, align 8
  %36 = load i32, i32* %11, align 4
  %37 = and i32 %36, 15
  store i32 %37, i32* %11, align 4
  %38 = load i32, i32* %11, align 4
  %39 = shl i32 %38, 4
  %40 = load i32, i32* %11, align 4
  %41 = add i32 %39, %40
  %42 = trunc i32 %41 to i8
  %43 = load i8*, i8** %6, align 8
  store i8 %42, i8* %43, align 1
  %44 = load i32, i32* %9, align 4
  %45 = load i8*, i8** %6, align 8
  %46 = sext i32 %44 to i64
  %47 = getelementptr inbounds i8, i8* %45, i64 %46
  store i8* %47, i8** %6, align 8
  br label %16

48:                                               ; preds = %16
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @image_unpack_0_spread(%struct.gs_image_enum_s* %0, i8* %1, i8* %2, i32 %3) #0 {
  %5 = alloca %struct.gs_image_enum_s*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store %struct.gs_image_enum_s* %0, %struct.gs_image_enum_s** %5, align 8
  store i8* %1, i8** %6, align 8
  store i8* %2, i8** %7, align 8
  store i32 %3, i32* %8, align 4
  %12 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %13 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %12, i32 0, i32 4
  %14 = load i32, i32* %13, align 8
  store i32 %14, i32* %9, align 4
  %15 = load i32, i32* %8, align 4
  store i32 %15, i32* %10, align 4
  br label %16

16:                                               ; preds = %20, %4
  %17 = load i32, i32* %10, align 4
  %18 = add nsw i32 %17, -1
  store i32 %18, i32* %10, align 4
  %19 = icmp ne i32 %17, 0
  br i1 %19, label %20, label %103

20:                                               ; preds = %16
  %21 = load i8*, i8** %7, align 8
  %22 = getelementptr inbounds i8, i8* %21, i32 1
  store i8* %22, i8** %7, align 8
  %23 = load i8, i8* %21, align 1
  %24 = zext i8 %23 to i32
  store i32 %24, i32* %11, align 4
  %25 = load i32, i32* %11, align 4
  %26 = lshr i32 %25, 7
  %27 = sub i32 0, %26
  %28 = trunc i32 %27 to i8
  %29 = load i8*, i8** %6, align 8
  store i8 %28, i8* %29, align 1
  %30 = load i32, i32* %9, align 4
  %31 = load i8*, i8** %6, align 8
  %32 = sext i32 %30 to i64
  %33 = getelementptr inbounds i8, i8* %31, i64 %32
  store i8* %33, i8** %6, align 8
  %34 = load i32, i32* %11, align 4
  %35 = lshr i32 %34, 6
  %36 = and i32 %35, 1
  %37 = sub i32 0, %36
  %38 = trunc i32 %37 to i8
  %39 = load i8*, i8** %6, align 8
  store i8 %38, i8* %39, align 1
  %40 = load i32, i32* %9, align 4
  %41 = load i8*, i8** %6, align 8
  %42 = sext i32 %40 to i64
  %43 = getelementptr inbounds i8, i8* %41, i64 %42
  store i8* %43, i8** %6, align 8
  %44 = load i32, i32* %11, align 4
  %45 = lshr i32 %44, 5
  %46 = and i32 %45, 1
  %47 = sub i32 0, %46
  %48 = trunc i32 %47 to i8
  %49 = load i8*, i8** %6, align 8
  store i8 %48, i8* %49, align 1
  %50 = load i32, i32* %9, align 4
  %51 = load i8*, i8** %6, align 8
  %52 = sext i32 %50 to i64
  %53 = getelementptr inbounds i8, i8* %51, i64 %52
  store i8* %53, i8** %6, align 8
  %54 = load i32, i32* %11, align 4
  %55 = lshr i32 %54, 4
  %56 = and i32 %55, 1
  %57 = sub i32 0, %56
  %58 = trunc i32 %57 to i8
  %59 = load i8*, i8** %6, align 8
  store i8 %58, i8* %59, align 1
  %60 = load i32, i32* %9, align 4
  %61 = load i8*, i8** %6, align 8
  %62 = sext i32 %60 to i64
  %63 = getelementptr inbounds i8, i8* %61, i64 %62
  store i8* %63, i8** %6, align 8
  %64 = load i32, i32* %11, align 4
  %65 = lshr i32 %64, 3
  %66 = and i32 %65, 1
  %67 = sub i32 0, %66
  %68 = trunc i32 %67 to i8
  %69 = load i8*, i8** %6, align 8
  store i8 %68, i8* %69, align 1
  %70 = load i32, i32* %9, align 4
  %71 = load i8*, i8** %6, align 8
  %72 = sext i32 %70 to i64
  %73 = getelementptr inbounds i8, i8* %71, i64 %72
  store i8* %73, i8** %6, align 8
  %74 = load i32, i32* %11, align 4
  %75 = lshr i32 %74, 2
  %76 = and i32 %75, 1
  %77 = sub i32 0, %76
  %78 = trunc i32 %77 to i8
  %79 = load i8*, i8** %6, align 8
  store i8 %78, i8* %79, align 1
  %80 = load i32, i32* %9, align 4
  %81 = load i8*, i8** %6, align 8
  %82 = sext i32 %80 to i64
  %83 = getelementptr inbounds i8, i8* %81, i64 %82
  store i8* %83, i8** %6, align 8
  %84 = load i32, i32* %11, align 4
  %85 = lshr i32 %84, 1
  %86 = and i32 %85, 1
  %87 = sub i32 0, %86
  %88 = trunc i32 %87 to i8
  %89 = load i8*, i8** %6, align 8
  store i8 %88, i8* %89, align 1
  %90 = load i32, i32* %9, align 4
  %91 = load i8*, i8** %6, align 8
  %92 = sext i32 %90 to i64
  %93 = getelementptr inbounds i8, i8* %91, i64 %92
  store i8* %93, i8** %6, align 8
  %94 = load i32, i32* %11, align 4
  %95 = and i32 %94, 1
  %96 = sub i32 0, %95
  %97 = trunc i32 %96 to i8
  %98 = load i8*, i8** %6, align 8
  store i8 %97, i8* %98, align 1
  %99 = load i32, i32* %9, align 4
  %100 = load i8*, i8** %6, align 8
  %101 = sext i32 %99 to i64
  %102 = getelementptr inbounds i8, i8* %100, i64 %101
  store i8* %102, i8** %6, align 8
  br label %16

103:                                              ; preds = %16
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @image_unpack_1_spread(%struct.gs_image_enum_s* %0, i8* %1, i8* %2, i32 %3) #0 {
  %5 = alloca %struct.gs_image_enum_s*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i16, align 2
  store %struct.gs_image_enum_s* %0, %struct.gs_image_enum_s** %5, align 8
  store i8* %1, i8** %6, align 8
  store i8* %2, i8** %7, align 8
  store i32 %3, i32* %8, align 4
  %13 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %14 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %13, i32 0, i32 4
  %15 = load i32, i32* %14, align 8
  store i32 %15, i32* %9, align 4
  %16 = load i32, i32* %8, align 4
  store i32 %16, i32* %10, align 4
  br label %17

17:                                               ; preds = %21, %4
  %18 = load i32, i32* %10, align 4
  %19 = add nsw i32 %18, -1
  store i32 %19, i32* %10, align 4
  %20 = icmp ne i32 %18, 0
  br i1 %20, label %21, label %68

21:                                               ; preds = %17
  %22 = load i8*, i8** %7, align 8
  %23 = getelementptr inbounds i8, i8* %22, i32 1
  store i8* %23, i8** %7, align 8
  %24 = load i8, i8* %22, align 1
  %25 = zext i8 %24 to i32
  store i32 %25, i32* %11, align 4
  %26 = load i32, i32* %11, align 4
  %27 = lshr i32 %26, 4
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds [16 x i16], [16 x i16]* @map_4_to_16, i64 0, i64 %28
  %30 = load i16, i16* %29, align 2
  store i16 %30, i16* %12, align 2
  %31 = load i16, i16* %12, align 2
  %32 = zext i16 %31 to i32
  %33 = ashr i32 %32, 8
  %34 = trunc i32 %33 to i8
  %35 = load i8*, i8** %6, align 8
  store i8 %34, i8* %35, align 1
  %36 = load i32, i32* %9, align 4
  %37 = load i8*, i8** %6, align 8
  %38 = sext i32 %36 to i64
  %39 = getelementptr inbounds i8, i8* %37, i64 %38
  store i8* %39, i8** %6, align 8
  %40 = load i16, i16* %12, align 2
  %41 = trunc i16 %40 to i8
  %42 = load i8*, i8** %6, align 8
  store i8 %41, i8* %42, align 1
  %43 = load i32, i32* %9, align 4
  %44 = load i8*, i8** %6, align 8
  %45 = sext i32 %43 to i64
  %46 = getelementptr inbounds i8, i8* %44, i64 %45
  store i8* %46, i8** %6, align 8
  %47 = load i32, i32* %11, align 4
  %48 = and i32 %47, 15
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds [16 x i16], [16 x i16]* @map_4_to_16, i64 0, i64 %49
  %51 = load i16, i16* %50, align 2
  store i16 %51, i16* %12, align 2
  %52 = load i16, i16* %12, align 2
  %53 = zext i16 %52 to i32
  %54 = ashr i32 %53, 8
  %55 = trunc i32 %54 to i8
  %56 = load i8*, i8** %6, align 8
  store i8 %55, i8* %56, align 1
  %57 = load i32, i32* %9, align 4
  %58 = load i8*, i8** %6, align 8
  %59 = sext i32 %57 to i64
  %60 = getelementptr inbounds i8, i8* %58, i64 %59
  store i8* %60, i8** %6, align 8
  %61 = load i16, i16* %12, align 2
  %62 = trunc i16 %61 to i8
  %63 = load i8*, i8** %6, align 8
  store i8 %62, i8* %63, align 1
  %64 = load i32, i32* %9, align 4
  %65 = load i8*, i8** %6, align 8
  %66 = sext i32 %64 to i64
  %67 = getelementptr inbounds i8, i8* %65, i64 %66
  store i8* %67, i8** %6, align 8
  br label %17

68:                                               ; preds = %17
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @image_unpack_3_spread(%struct.gs_image_enum_s* %0, i8* %1, i8* %2, i32 %3) #0 {
  %5 = alloca %struct.gs_image_enum_s*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store %struct.gs_image_enum_s* %0, %struct.gs_image_enum_s** %5, align 8
  store i8* %1, i8** %6, align 8
  store i8* %2, i8** %7, align 8
  store i32 %3, i32* %8, align 4
  %11 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %12 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %11, i32 0, i32 4
  %13 = load i32, i32* %12, align 8
  store i32 %13, i32* %9, align 4
  %14 = load i32, i32* %8, align 4
  store i32 %14, i32* %10, align 4
  br label %15

15:                                               ; preds = %19, %4
  %16 = load i32, i32* %10, align 4
  %17 = add nsw i32 %16, -1
  store i32 %17, i32* %10, align 4
  %18 = icmp ne i32 %16, 0
  br i1 %18, label %19, label %28

19:                                               ; preds = %15
  %20 = load i8*, i8** %7, align 8
  %21 = getelementptr inbounds i8, i8* %20, i32 1
  store i8* %21, i8** %7, align 8
  %22 = load i8, i8* %20, align 1
  %23 = load i8*, i8** %6, align 8
  store i8 %22, i8* %23, align 1
  %24 = load i32, i32* %9, align 4
  %25 = load i8*, i8** %6, align 8
  %26 = sext i32 %24 to i64
  %27 = getelementptr inbounds i8, i8* %25, i64 %26
  store i8* %27, i8** %6, align 8
  br label %15

28:                                               ; preds = %15
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_imagemask_init(%struct.gs_image_enum_s* %0, %struct.gs_state_s* %1, i32 %2, i32 %3, i32 %4, %struct.gs_matrix_s* %5) #0 {
  %7 = alloca %struct.gs_image_enum_s*, align 8
  %8 = alloca %struct.gs_state_s*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca %struct.gs_matrix_s*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  store %struct.gs_image_enum_s* %0, %struct.gs_image_enum_s** %7, align 8
  store %struct.gs_state_s* %1, %struct.gs_state_s** %8, align 8
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store i32 %4, i32* %11, align 4
  store %struct.gs_matrix_s* %5, %struct.gs_matrix_s** %12, align 8
  %15 = load %struct.gs_state_s*, %struct.gs_state_s** %8, align 8
  %16 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %15, i32 0, i32 13
  %17 = load %struct.gs_color_s*, %struct.gs_color_s** %16, align 8
  %18 = load %struct.gs_state_s*, %struct.gs_state_s** %8, align 8
  %19 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %18, i32 0, i32 14
  %20 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %19, align 8
  %21 = load %struct.gs_state_s*, %struct.gs_state_s** %8, align 8
  %22 = call i32 (%struct.gs_color_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, ...) bitcast (void (%struct.gs_color_s*, %struct.gx_device_color_s*, %struct.gs_state_s*)* @gx_color_render to i32 (%struct.gs_color_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, ...)*)(%struct.gs_color_s* %17, %struct.gx_device_color_s* %20, %struct.gs_state_s* %21)
  %23 = load i32, i32* %11, align 4
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %31

25:                                               ; preds = %6
  store i64 -1, i64* %13, align 8
  %26 = load %struct.gs_state_s*, %struct.gs_state_s** %8, align 8
  %27 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %26, i32 0, i32 14
  %28 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %27, align 8
  %29 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %28, i32 0, i32 0
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %14, align 8
  br label %37

31:                                               ; preds = %6
  %32 = load %struct.gs_state_s*, %struct.gs_state_s** %8, align 8
  %33 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %32, i32 0, i32 14
  %34 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %33, align 8
  %35 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %34, i32 0, i32 0
  %36 = load i64, i64* %35, align 8
  store i64 %36, i64* %13, align 8
  store i64 -1, i64* %14, align 8
  br label %37

37:                                               ; preds = %31, %25
  %38 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %7, align 8
  %39 = load i32, i32* %9, align 4
  %40 = load i32, i32* %10, align 4
  %41 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %12, align 8
  %42 = load %struct.gs_state_s*, %struct.gs_state_s** %8, align 8
  %43 = load i64, i64* %13, align 8
  %44 = load i64, i64* %14, align 8
  %45 = call i32 @image_init(%struct.gs_image_enum_s* %38, i32 %39, i32 %40, i32 0, i32 1, i32 1, %struct.gs_matrix_s* %41, %struct.gs_state_s* %42, i64 %43, i64 %44)
  ret i32 %45
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_image_next(%struct.gs_image_enum_s* %0, i8* %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.gs_image_enum_s*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i8*, align 8
  %16 = alloca i32, align 4
  store %struct.gs_image_enum_s* %0, %struct.gs_image_enum_s** %5, align 8
  store i8* %1, i8** %6, align 8
  store i32 %2, i32* %7, align 4
  %17 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %18 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %17, i32 0, i32 14
  %19 = load i32, i32* %18, align 4
  store i32 %19, i32* %8, align 4
  %20 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %21 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %20, i32 0, i32 21
  %22 = load i32, i32* %21, align 8
  store i32 %22, i32* %9, align 4
  %23 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %24 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %23, i32 0, i32 0
  %25 = load i32, i32* %24, align 8
  store i32 %25, i32* %10, align 4
  %26 = load i32, i32* %7, align 4
  store i32 %26, i32* %11, align 4
  store i32 0, i32* %12, align 4
  %27 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %28 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %27, i32 0, i32 19
  %29 = load i32, i32* %28, align 8
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %35

31:                                               ; preds = %3
  %32 = load i32, i32* %7, align 4
  %33 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %34 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %33, i32 0, i32 20
  store i32 %32, i32* %34, align 4
  br label %43

35:                                               ; preds = %3
  %36 = load i32, i32* %7, align 4
  %37 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %38 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %37, i32 0, i32 20
  %39 = load i32, i32* %38, align 4
  %40 = icmp ne i32 %36, %39
  br i1 %40, label %41, label %42

41:                                               ; preds = %35
  store i32 -23, i32* %4, align 4
  br label %193

42:                                               ; preds = %35
  br label %43

43:                                               ; preds = %42, %31
  %44 = load i8*, i8** %6, align 8
  %45 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %46 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %45, i32 0, i32 18
  %47 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %48 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %47, i32 0, i32 19
  %49 = load i32, i32* %48, align 8
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [4 x i8*], [4 x i8*]* %46, i64 0, i64 %50
  store i8* %44, i8** %51, align 8
  %52 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %53 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %52, i32 0, i32 19
  %54 = load i32, i32* %53, align 8
  %55 = add nsw i32 %54, 1
  store i32 %55, i32* %53, align 8
  %56 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %57 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %56, i32 0, i32 4
  %58 = load i32, i32* %57, align 8
  %59 = icmp ne i32 %55, %58
  br i1 %59, label %60, label %61

60:                                               ; preds = %43
  store i32 0, i32* %4, align 4
  br label %193

61:                                               ; preds = %43
  %62 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %63 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %62, i32 0, i32 19
  store i32 0, i32* %63, align 8
  br label %64

64:                                               ; preds = %179, %61
  %65 = load i32, i32* %11, align 4
  %66 = icmp ne i32 %65, 0
  br i1 %66, label %67, label %180

67:                                               ; preds = %64
  %68 = load i32, i32* %11, align 4
  %69 = load i32, i32* %8, align 4
  %70 = load i32, i32* %9, align 4
  %71 = sub i32 %69, %70
  %72 = icmp ult i32 %68, %71
  br i1 %72, label %73, label %75

73:                                               ; preds = %67
  %74 = load i32, i32* %11, align 4
  br label %79

75:                                               ; preds = %67
  %76 = load i32, i32* %8, align 4
  %77 = load i32, i32* %9, align 4
  %78 = sub i32 %76, %77
  br label %79

79:                                               ; preds = %75, %73
  %80 = phi i32 [ %74, %73 ], [ %78, %75 ]
  store i32 %80, i32* %14, align 4
  %81 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %82 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %81, i32 0, i32 12
  %83 = load i8*, i8** %82, align 8
  %84 = load i32, i32* %9, align 4
  %85 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %86 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %85, i32 0, i32 2
  %87 = load i32, i32* %86, align 8
  %88 = sub nsw i32 3, %87
  %89 = shl i32 %84, %88
  %90 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %91 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %90, i32 0, i32 4
  %92 = load i32, i32* %91, align 8
  %93 = mul i32 %89, %92
  %94 = zext i32 %93 to i64
  %95 = getelementptr inbounds i8, i8* %83, i64 %94
  store i8* %95, i8** %15, align 8
  store i32 0, i32* %16, align 4
  br label %96

96:                                               ; preds = %121, %79
  %97 = load i32, i32* %16, align 4
  %98 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %99 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %98, i32 0, i32 4
  %100 = load i32, i32* %99, align 8
  %101 = icmp slt i32 %97, %100
  br i1 %101, label %102, label %124

102:                                              ; preds = %96
  %103 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %104 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %103, i32 0, i32 9
  %105 = load void (%struct.gs_image_enum_s*, i8*, i8*, i32)*, void (%struct.gs_image_enum_s*, i8*, i8*, i32)** %104, align 8
  %106 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %107 = load i8*, i8** %15, align 8
  %108 = load i32, i32* %16, align 4
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i8, i8* %107, i64 %109
  %111 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %112 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %111, i32 0, i32 18
  %113 = load i32, i32* %16, align 4
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds [4 x i8*], [4 x i8*]* %112, i64 0, i64 %114
  %116 = load i8*, i8** %115, align 8
  %117 = load i32, i32* %12, align 4
  %118 = zext i32 %117 to i64
  %119 = getelementptr inbounds i8, i8* %116, i64 %118
  %120 = load i32, i32* %14, align 4
  call void %105(%struct.gs_image_enum_s* %106, i8* %110, i8* %119, i32 %120)
  br label %121

121:                                              ; preds = %102
  %122 = load i32, i32* %16, align 4
  %123 = add nsw i32 %122, 1
  store i32 %123, i32* %16, align 4
  br label %96

124:                                              ; preds = %96
  %125 = load i32, i32* %14, align 4
  %126 = load i32, i32* %9, align 4
  %127 = add i32 %126, %125
  store i32 %127, i32* %9, align 4
  %128 = load i32, i32* %14, align 4
  %129 = load i32, i32* %12, align 4
  %130 = add i32 %129, %128
  store i32 %130, i32* %12, align 4
  %131 = load i32, i32* %14, align 4
  %132 = load i32, i32* %11, align 4
  %133 = sub i32 %132, %131
  store i32 %133, i32* %11, align 4
  %134 = load i32, i32* %9, align 4
  %135 = load i32, i32* %8, align 4
  %136 = icmp eq i32 %134, %135
  br i1 %136, label %137, label %179

137:                                              ; preds = %124
  %138 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %139 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %138, i32 0, i32 10
  %140 = load i32 (%struct.gs_image_enum_s*, i8*, i32, i32)*, i32 (%struct.gs_image_enum_s*, i8*, i32, i32)** %139, align 8
  %141 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %142 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %143 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %142, i32 0, i32 12
  %144 = load i8*, i8** %143, align 8
  %145 = load i32, i32* %10, align 4
  %146 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %147 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %146, i32 0, i32 3
  %148 = load i32, i32* %147, align 4
  %149 = mul nsw i32 %145, %148
  %150 = call i32 %140(%struct.gs_image_enum_s* %141, i8* %144, i32 %149, i32 1)
  store i32 %150, i32* %13, align 4
  %151 = load i32, i32* %13, align 4
  %152 = icmp slt i32 %151, 0
  br i1 %152, label %153, label %154

153:                                              ; preds = %137
  br label %185

154:                                              ; preds = %137
  %155 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %156 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %155, i32 0, i32 24
  %157 = load i32, i32* %156, align 8
  %158 = add nsw i32 %157, 1
  store i32 %158, i32* %156, align 8
  %159 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %160 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %159, i32 0, i32 1
  %161 = load i32, i32* %160, align 4
  %162 = icmp eq i32 %158, %161
  br i1 %162, label %163, label %164

163:                                              ; preds = %154
  br label %184

164:                                              ; preds = %154
  store i32 0, i32* %9, align 4
  %165 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %166 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %165, i32 0, i32 7
  %167 = load i64, i64* %166, align 8
  %168 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %169 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %168, i32 0, i32 22
  %170 = load i64, i64* %169, align 8
  %171 = add nsw i64 %170, %167
  store i64 %171, i64* %169, align 8
  %172 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %173 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %172, i32 0, i32 8
  %174 = load i64, i64* %173, align 8
  %175 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %176 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %175, i32 0, i32 23
  %177 = load i64, i64* %176, align 8
  %178 = add nsw i64 %177, %174
  store i64 %178, i64* %176, align 8
  br label %179

179:                                              ; preds = %164, %124
  br label %64

180:                                              ; preds = %64
  %181 = load i32, i32* %9, align 4
  %182 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %183 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %182, i32 0, i32 21
  store i32 %181, i32* %183, align 8
  store i32 0, i32* %4, align 4
  br label %193

184:                                              ; preds = %163
  store i32 1, i32* %13, align 4
  br label %185

185:                                              ; preds = %184, %153
  %186 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %187 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %186, i32 0, i32 12
  %188 = load i8*, i8** %187, align 8
  %189 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %5, align 8
  %190 = getelementptr inbounds %struct.gs_image_enum_s, %struct.gs_image_enum_s* %189, i32 0, i32 13
  %191 = load i32, i32* %190, align 8
  call void @gs_free(i8* %188, i32 %191, i32 1, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.47, i64 0, i64 0))
  %192 = load i32, i32* %13, align 4
  store i32 %192, i32* %4, align 4
  br label %193

193:                                              ; preds = %185, %180, %60, %41
  %194 = load i32, i32* %4, align 4
  ret i32 %194
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_setlinewidth(%struct.gs_state_s* %0, double %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.gs_state_s*, align 8
  %5 = alloca double, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %4, align 8
  store double %1, double* %5, align 8
  %6 = load double, double* %5, align 8
  %7 = fcmp olt double %6, 0.000000e+00
  br i1 %7, label %8, label %9

8:                                                ; preds = %2
  store i32 -15, i32* %3, align 4
  br label %17

9:                                                ; preds = %2
  %10 = load double, double* %5, align 8
  %11 = fdiv double %10, 2.000000e+00
  %12 = fptrunc double %11 to float
  %13 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %14 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %13, i32 0, i32 10
  %15 = load %struct.line_params_s*, %struct.line_params_s** %14, align 8
  %16 = getelementptr inbounds %struct.line_params_s, %struct.line_params_s* %15, i32 0, i32 0
  store float %12, float* %16, align 8
  store i32 0, i32* %3, align 4
  br label %17

17:                                               ; preds = %9, %8
  %18 = load i32, i32* %3, align 4
  ret i32 %18
}

; Function Attrs: noinline nounwind uwtable
define dso_local float @gs_currentlinewidth(%struct.gs_state_s* %0) #0 {
  %2 = alloca %struct.gs_state_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %4 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %3, i32 0, i32 10
  %5 = load %struct.line_params_s*, %struct.line_params_s** %4, align 8
  %6 = getelementptr inbounds %struct.line_params_s, %struct.line_params_s* %5, i32 0, i32 0
  %7 = load float, float* %6, align 8
  %8 = fmul float %7, 2.000000e+00
  ret float %8
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_setlinecap(%struct.gs_state_s* %0, i32 %1) #0 {
  %3 = alloca %struct.gs_state_s*, align 8
  %4 = alloca i32, align 4
  store %struct.gs_state_s* %0, %struct.gs_state_s** %3, align 8
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %4, align 4
  %6 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %7 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %6, i32 0, i32 10
  %8 = load %struct.line_params_s*, %struct.line_params_s** %7, align 8
  %9 = getelementptr inbounds %struct.line_params_s, %struct.line_params_s* %8, i32 0, i32 1
  store i32 %5, i32* %9, align 4
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_currentlinecap(%struct.gs_state_s* %0) #0 {
  %2 = alloca %struct.gs_state_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %4 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %3, i32 0, i32 10
  %5 = load %struct.line_params_s*, %struct.line_params_s** %4, align 8
  %6 = getelementptr inbounds %struct.line_params_s, %struct.line_params_s* %5, i32 0, i32 1
  %7 = load i32, i32* %6, align 4
  ret i32 %7
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_setlinejoin(%struct.gs_state_s* %0, i32 %1) #0 {
  %3 = alloca %struct.gs_state_s*, align 8
  %4 = alloca i32, align 4
  store %struct.gs_state_s* %0, %struct.gs_state_s** %3, align 8
  store i32 %1, i32* %4, align 4
  %5 = load i32, i32* %4, align 4
  %6 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %7 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %6, i32 0, i32 10
  %8 = load %struct.line_params_s*, %struct.line_params_s** %7, align 8
  %9 = getelementptr inbounds %struct.line_params_s, %struct.line_params_s* %8, i32 0, i32 2
  store i32 %5, i32* %9, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_currentlinejoin(%struct.gs_state_s* %0) #0 {
  %2 = alloca %struct.gs_state_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %4 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %3, i32 0, i32 10
  %5 = load %struct.line_params_s*, %struct.line_params_s** %4, align 8
  %6 = getelementptr inbounds %struct.line_params_s, %struct.line_params_s* %5, i32 0, i32 2
  %7 = load i32, i32* %6, align 8
  ret i32 %7
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_setmiterlimit(%struct.gs_state_s* %0, double %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.gs_state_s*, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %4, align 8
  store double %1, double* %5, align 8
  %7 = load double, double* %5, align 8
  %8 = fcmp olt double %7, 1.000000e+00
  br i1 %8, label %9, label %10

9:                                                ; preds = %2
  store i32 -15, i32* %3, align 4
  br label %41

10:                                               ; preds = %2
  %11 = load double, double* %5, align 8
  %12 = fptrunc double %11 to float
  %13 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %14 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %13, i32 0, i32 10
  %15 = load %struct.line_params_s*, %struct.line_params_s** %14, align 8
  %16 = getelementptr inbounds %struct.line_params_s, %struct.line_params_s* %15, i32 0, i32 3
  store float %12, float* %16, align 4
  %17 = load double, double* %5, align 8
  %18 = load double, double* %5, align 8
  %19 = fmul double %17, %18
  store double %19, double* %6, align 8
  %20 = load double, double* %6, align 8
  %21 = fcmp olt double %20, 2.000100e+00
  br i1 %21, label %22, label %26

22:                                               ; preds = %10
  %23 = load double, double* %6, align 8
  %24 = fcmp ogt double %23, 1.999900e+00
  br i1 %24, label %25, label %26

25:                                               ; preds = %22
  br label %34

26:                                               ; preds = %22, %10
  %27 = load double, double* %6, align 8
  %28 = fsub double %27, 1.000000e+00
  %29 = call double @sqrt(double %28) #9
  %30 = fmul double %29, 2.000000e+00
  %31 = load double, double* %6, align 8
  %32 = fsub double %31, 2.000000e+00
  %33 = fdiv double %30, %32
  br label %34

34:                                               ; preds = %26, %25
  %35 = phi double [ 1.000000e+06, %25 ], [ %33, %26 ]
  %36 = fptrunc double %35 to float
  %37 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %38 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %37, i32 0, i32 10
  %39 = load %struct.line_params_s*, %struct.line_params_s** %38, align 8
  %40 = getelementptr inbounds %struct.line_params_s, %struct.line_params_s* %39, i32 0, i32 4
  store float %36, float* %40, align 8
  store i32 0, i32* %3, align 4
  br label %41

41:                                               ; preds = %34, %9
  %42 = load i32, i32* %3, align 4
  ret i32 %42
}

; Function Attrs: nounwind
declare dso_local double @sqrt(double) #2

; Function Attrs: noinline nounwind uwtable
define dso_local float @gs_currentmiterlimit(%struct.gs_state_s* %0) #0 {
  %2 = alloca %struct.gs_state_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %4 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %3, i32 0, i32 10
  %5 = load %struct.line_params_s*, %struct.line_params_s** %4, align 8
  %6 = getelementptr inbounds %struct.line_params_s, %struct.line_params_s* %5, i32 0, i32 3
  %7 = load float, float* %6, align 4
  ret float %7
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_setdash(%struct.gs_state_s* %0, float* %1, i32 %2, double %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.gs_state_s*, align 8
  %7 = alloca float*, align 8
  %8 = alloca i32, align 4
  %9 = alloca double, align 8
  %10 = alloca i32, align 4
  %11 = alloca float*, align 8
  %12 = alloca i8, align 1
  %13 = alloca i32, align 4
  %14 = alloca float, align 4
  %15 = alloca float, align 4
  %16 = alloca %struct.dash_params_s*, align 8
  %17 = alloca float*, align 8
  %18 = alloca float, align 4
  store %struct.gs_state_s* %0, %struct.gs_state_s** %6, align 8
  store float* %1, float** %7, align 8
  store i32 %2, i32* %8, align 4
  store double %3, double* %9, align 8
  %19 = load i32, i32* %8, align 4
  store i32 %19, i32* %10, align 4
  %20 = load float*, float** %7, align 8
  store float* %20, float** %11, align 8
  store i8 1, i8* %12, align 1
  store i32 0, i32* %13, align 4
  store float 0.000000e+00, float* %14, align 4
  %21 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %22 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %21, i32 0, i32 10
  %23 = load %struct.line_params_s*, %struct.line_params_s** %22, align 8
  %24 = getelementptr inbounds %struct.line_params_s, %struct.line_params_s* %23, i32 0, i32 5
  store %struct.dash_params_s* %24, %struct.dash_params_s** %16, align 8
  br label %25

25:                                               ; preds = %36, %4
  %26 = load i32, i32* %10, align 4
  %27 = add i32 %26, -1
  store i32 %27, i32* %10, align 4
  %28 = icmp ne i32 %26, 0
  br i1 %28, label %29, label %40

29:                                               ; preds = %25
  %30 = load float*, float** %11, align 8
  %31 = getelementptr inbounds float, float* %30, i32 1
  store float* %31, float** %11, align 8
  %32 = load float, float* %30, align 4
  store float %32, float* %18, align 4
  %33 = load float, float* %18, align 4
  %34 = fcmp olt float %33, 0.000000e+00
  br i1 %34, label %35, label %36

35:                                               ; preds = %29
  store i32 -15, i32* %5, align 4
  br label %114

36:                                               ; preds = %29
  %37 = load float, float* %18, align 4
  %38 = load float, float* %14, align 4
  %39 = fadd float %38, %37
  store float %39, float* %14, align 4
  br label %25

40:                                               ; preds = %25
  %41 = load i32, i32* %8, align 4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %44

43:                                               ; preds = %40
  store float 0.000000e+00, float* %15, align 4
  store float* null, float** %17, align 8
  br label %92

44:                                               ; preds = %40
  %45 = load float, float* %14, align 4
  %46 = fcmp oeq float %45, 0.000000e+00
  br i1 %46, label %47, label %48

47:                                               ; preds = %44
  store i32 -15, i32* %5, align 4
  br label %114

48:                                               ; preds = %44
  %49 = load double, double* %9, align 8
  %50 = load double, double* %9, align 8
  %51 = load float, float* %14, align 4
  %52 = fpext float %51 to double
  %53 = fdiv double %50, %52
  %54 = call double @llvm.floor.f64(double %53)
  %55 = load float, float* %14, align 4
  %56 = fpext float %55 to double
  %57 = fmul double %54, %56
  %58 = fsub double %49, %57
  %59 = fptrunc double %58 to float
  store float %59, float* %15, align 4
  br label %60

60:                                               ; preds = %69, %48
  %61 = load float*, float** %7, align 8
  %62 = load i32, i32* %13, align 4
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds float, float* %61, i64 %63
  %65 = load float, float* %64, align 4
  %66 = load float, float* %15, align 4
  %67 = fsub float %66, %65
  store float %67, float* %15, align 4
  %68 = fcmp oge float %67, 0.000000e+00
  br i1 %68, label %69, label %77

69:                                               ; preds = %60
  %70 = load i8, i8* %12, align 1
  %71 = icmp ne i8 %70, 0
  %72 = xor i1 %71, true
  %73 = zext i1 %72 to i32
  %74 = trunc i32 %73 to i8
  store i8 %74, i8* %12, align 1
  %75 = load i32, i32* %13, align 4
  %76 = add nsw i32 %75, 1
  store i32 %76, i32* %13, align 4
  br label %60

77:                                               ; preds = %60
  %78 = load i32, i32* %8, align 4
  %79 = call i8* @gs_malloc(i32 %78, i32 4, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.48, i64 0, i64 0))
  %80 = bitcast i8* %79 to float*
  store float* %80, float** %17, align 8
  %81 = load float*, float** %17, align 8
  %82 = icmp eq float* %81, null
  br i1 %82, label %83, label %84

83:                                               ; preds = %77
  store i32 -25, i32* %5, align 4
  br label %114

84:                                               ; preds = %77
  %85 = load float*, float** %17, align 8
  %86 = bitcast float* %85 to i8*
  %87 = load float*, float** %7, align 8
  %88 = bitcast float* %87 to i8*
  %89 = load i32, i32* %8, align 4
  %90 = zext i32 %89 to i64
  %91 = mul i64 %90, 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %86, i8* align 4 %88, i64 %91, i1 false)
  br label %92

92:                                               ; preds = %84, %43
  %93 = load float*, float** %17, align 8
  %94 = load %struct.dash_params_s*, %struct.dash_params_s** %16, align 8
  %95 = getelementptr inbounds %struct.dash_params_s, %struct.dash_params_s* %94, i32 0, i32 0
  store float* %93, float** %95, align 8
  %96 = load i32, i32* %8, align 4
  %97 = load %struct.dash_params_s*, %struct.dash_params_s** %16, align 8
  %98 = getelementptr inbounds %struct.dash_params_s, %struct.dash_params_s* %97, i32 0, i32 1
  store i32 %96, i32* %98, align 8
  %99 = load double, double* %9, align 8
  %100 = fptrunc double %99 to float
  %101 = load %struct.dash_params_s*, %struct.dash_params_s** %16, align 8
  %102 = getelementptr inbounds %struct.dash_params_s, %struct.dash_params_s* %101, i32 0, i32 2
  store float %100, float* %102, align 4
  %103 = load i8, i8* %12, align 1
  %104 = sext i8 %103 to i32
  %105 = load %struct.dash_params_s*, %struct.dash_params_s** %16, align 8
  %106 = getelementptr inbounds %struct.dash_params_s, %struct.dash_params_s* %105, i32 0, i32 3
  store i32 %104, i32* %106, align 8
  %107 = load i32, i32* %13, align 4
  %108 = load %struct.dash_params_s*, %struct.dash_params_s** %16, align 8
  %109 = getelementptr inbounds %struct.dash_params_s, %struct.dash_params_s* %108, i32 0, i32 4
  store i32 %107, i32* %109, align 4
  %110 = load float, float* %15, align 4
  %111 = fneg float %110
  %112 = load %struct.dash_params_s*, %struct.dash_params_s** %16, align 8
  %113 = getelementptr inbounds %struct.dash_params_s, %struct.dash_params_s* %112, i32 0, i32 5
  store float %111, float* %113, align 8
  store i32 0, i32* %5, align 4
  br label %114

114:                                              ; preds = %92, %83, %47, %35
  %115 = load i32, i32* %5, align 4
  ret i32 %115
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.floor.f64(double) #6

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_currentdash_length(%struct.gs_state_s* %0) #0 {
  %2 = alloca %struct.gs_state_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %4 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %3, i32 0, i32 10
  %5 = load %struct.line_params_s*, %struct.line_params_s** %4, align 8
  %6 = getelementptr inbounds %struct.line_params_s, %struct.line_params_s* %5, i32 0, i32 5
  %7 = getelementptr inbounds %struct.dash_params_s, %struct.dash_params_s* %6, i32 0, i32 1
  %8 = load i32, i32* %7, align 8
  ret i32 %8
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_currentdash_pattern(%struct.gs_state_s* %0, float* %1) #0 {
  %3 = alloca %struct.gs_state_s*, align 8
  %4 = alloca float*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %3, align 8
  store float* %1, float** %4, align 8
  %5 = load float*, float** %4, align 8
  %6 = bitcast float* %5 to i8*
  %7 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %8 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %7, i32 0, i32 10
  %9 = load %struct.line_params_s*, %struct.line_params_s** %8, align 8
  %10 = getelementptr inbounds %struct.line_params_s, %struct.line_params_s* %9, i32 0, i32 5
  %11 = getelementptr inbounds %struct.dash_params_s, %struct.dash_params_s* %10, i32 0, i32 0
  %12 = load float*, float** %11, align 8
  %13 = bitcast float* %12 to i8*
  %14 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %15 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %14, i32 0, i32 10
  %16 = load %struct.line_params_s*, %struct.line_params_s** %15, align 8
  %17 = getelementptr inbounds %struct.line_params_s, %struct.line_params_s* %16, i32 0, i32 5
  %18 = getelementptr inbounds %struct.dash_params_s, %struct.dash_params_s* %17, i32 0, i32 1
  %19 = load i32, i32* %18, align 8
  %20 = zext i32 %19 to i64
  %21 = mul i64 %20, 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 %13, i64 %21, i1 false)
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local float @gs_currentdash_offset(%struct.gs_state_s* %0) #0 {
  %2 = alloca %struct.gs_state_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %4 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %3, i32 0, i32 10
  %5 = load %struct.line_params_s*, %struct.line_params_s** %4, align 8
  %6 = getelementptr inbounds %struct.line_params_s, %struct.line_params_s* %5, i32 0, i32 5
  %7 = getelementptr inbounds %struct.dash_params_s, %struct.dash_params_s* %6, i32 0, i32 2
  %8 = load float, float* %7, align 4
  ret float %8
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* null, i8** @gs_lib_env_path, align 8
  %10 = call i8* @getenv(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.49, i64 0, i64 0))
  store i8* %10, i8** %8, align 8
  %11 = load i8*, i8** %8, align 8
  %12 = icmp ne i8* %11, null
  br i1 %12, label %13, label %23

13:                                               ; preds = %2
  %14 = load i8*, i8** %8, align 8
  %15 = call i64 @strlen(i8* %14) #11
  %16 = trunc i64 %15 to i32
  store i32 %16, i32* %9, align 4
  %17 = load i32, i32* %9, align 4
  %18 = add nsw i32 %17, 1
  %19 = call i8* @gs_malloc(i32 %18, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.49, i64 0, i64 0))
  store i8* %19, i8** @gs_lib_env_path, align 8
  %20 = load i8*, i8** @gs_lib_env_path, align 8
  %21 = load i8*, i8** %8, align 8
  %22 = call i8* @strcpy(i8* %20, i8* %21) #9
  br label %23

23:                                               ; preds = %13, %2
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 2
  %26 = call i8* @gs_malloc(i32 %25, i32 8, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1.50, i64 0, i64 0))
  %27 = bitcast i8* %26 to i8**
  store i8** %27, i8*** @gs_lib_paths, align 8
  store i32 0, i32* @gs_lib_count, align 4
  call void @set_lib_paths()
  store i32 0, i32* @quiet, align 4
  store i32 1, i32* @user_errors, align 4
  %28 = load i32, i32* %4, align 4
  %29 = load i8**, i8*** %5, align 8
  %30 = call i32 (i32, i8**, i8*, i32 (i8, i8*)*, void (i8*, i32)*, ...) bitcast (i32 (i32, i8**, i8*, i32 (i8, i8*)*, void (i8*, i32)*)* @gs_main to i32 (i32, i8**, i8*, i32 (i8, i8*)*, void (i8*, i32)*, ...)*)(i32 %28, i8** %29, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2.51, i64 0, i64 0), i32 (i8, i8*)* @swproc, void (i8*, i32)* @argproc)
  store i32 %30, i32* %6, align 4
  %31 = load i32, i32* %6, align 4
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %23
  call void @init2()
  br label %34

34:                                               ; preds = %33, %23
  store i32 0, i32* %7, align 4
  %35 = call i32 (%struct.ref_s*, ...) bitcast (i32 (%struct.ref_s*)* @zflush to i32 (%struct.ref_s*, ...)*)(%struct.ref_s* null)
  %36 = call i32 (%struct.ref_s*, ...) bitcast (i32 (%struct.ref_s*)* @zflushpage to i32 (%struct.ref_s*, ...)*)(%struct.ref_s* null)
  %37 = load i32, i32* %7, align 4
  %38 = icmp slt i32 %37, 0
  br i1 %38, label %39, label %41

39:                                               ; preds = %34
  %40 = load i32, i32* %7, align 4
  call void @debug_dump_stack(i32 %40)
  br label %41

41:                                               ; preds = %39, %34
  %42 = load i32, i32* %7, align 4
  %43 = icmp eq i32 %42, 0
  %44 = zext i1 %43 to i64
  %45 = select i1 %43, i32 0, i32 2
  %46 = call i32 (i32, ...) bitcast (void (i32)* @gs_exit to i32 (i32, ...)*)(i32 %45)
  %47 = load i32, i32* %3, align 4
  ret i32 %47
}

declare dso_local i8* @getenv(i8*) #3

; Function Attrs: nounwind
declare dso_local i8* @strcpy(i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @set_lib_paths() #0 {
  %1 = alloca i8**, align 8
  %2 = load i8**, i8*** @gs_lib_paths, align 8
  %3 = load i32, i32* @gs_lib_count, align 4
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds i8*, i8** %2, i64 %4
  store i8** %5, i8*** %1, align 8
  %6 = load i8*, i8** @gs_lib_env_path, align 8
  %7 = icmp ne i8* %6, null
  br i1 %7, label %8, label %12

8:                                                ; preds = %0
  %9 = load i8*, i8** @gs_lib_env_path, align 8
  %10 = load i8**, i8*** %1, align 8
  %11 = getelementptr inbounds i8*, i8** %10, i32 1
  store i8** %11, i8*** %1, align 8
  store i8* %9, i8** %10, align 8
  br label %12

12:                                               ; preds = %8, %0
  %13 = load i8*, i8** @gs_lib_default_path, align 8
  %14 = icmp ne i8* %13, null
  br i1 %14, label %15, label %19

15:                                               ; preds = %12
  %16 = load i8*, i8** @gs_lib_default_path, align 8
  %17 = load i8**, i8*** %1, align 8
  %18 = getelementptr inbounds i8*, i8** %17, i32 1
  store i8** %18, i8*** %1, align 8
  store i8* %16, i8** %17, align 8
  br label %19

19:                                               ; preds = %15, %12
  %20 = load i8**, i8*** %1, align 8
  store i8* null, i8** %20, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @swproc(i8 signext %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8, align 1
  %5 = alloca i8*, align 8
  %6 = alloca %struct.ref_s, align 8
  %7 = alloca i8*, align 8
  %8 = alloca %struct.ref_s, align 8
  %9 = alloca i32, align 4
  %10 = alloca %struct.stream_s, align 8
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca %struct.stream_s, align 8
  %14 = alloca %struct.ref_s, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  store i8 %0, i8* %4, align 1
  store i8* %1, i8** %5, align 8
  %17 = load i8, i8* %4, align 1
  %18 = sext i8 %17 to i32
  switch i32 %18, label %19 [
    i32 73, label %20
    i32 113, label %28
    i32 68, label %33
    i32 100, label %33
    i32 83, label %33
    i32 115, label %33
    i32 119, label %101
    i32 104, label %101
    i32 69, label %133
    i32 77, label %134
  ]

19:                                               ; preds = %2
  store i32 -1, i32* %3, align 4
  br label %149

20:                                               ; preds = %2
  %21 = load i8*, i8** %5, align 8
  %22 = load i8**, i8*** @gs_lib_paths, align 8
  %23 = load i32, i32* @gs_lib_count, align 4
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i8*, i8** %22, i64 %24
  store i8* %21, i8** %25, align 8
  %26 = load i32, i32* @gs_lib_count, align 4
  %27 = add nsw i32 %26, 1
  store i32 %27, i32* @gs_lib_count, align 4
  call void @set_lib_paths()
  br label %148

28:                                               ; preds = %2
  store i32 1, i32* @quiet, align 4
  call void @init1()
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i32 0, i32 0
  %30 = bitcast %union.color_sample* %29 to i64*
  store i64 0, i64* %30, align 8
  %31 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i32 0, i32 1
  store i16 32, i16* %31, align 8
  %32 = call i32 (i8*, %struct.ref_s*, ...) bitcast (void (i8*, %struct.ref_s*)* @initial_enter_name to i32 (i8*, %struct.ref_s*, ...)*)(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.52, i64 0, i64 0), %struct.ref_s* %6)
  br label %148

33:                                               ; preds = %2, %2, %2, %2
  %34 = load i8*, i8** %5, align 8
  %35 = call i8* @strchr(i8* %34, i32 61) #11
  store i8* %35, i8** %7, align 8
  call void @init1()
  %36 = load i8*, i8** %7, align 8
  %37 = icmp eq i8* %36, null
  br i1 %37, label %38, label %42

38:                                               ; preds = %33
  %39 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 0
  %40 = bitcast %union.color_sample* %39 to i64*
  store i64 0, i64* %40, align 8
  %41 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 1
  store i16 32, i16* %41, align 8
  br label %98

42:                                               ; preds = %33
  %43 = load i8*, i8** %7, align 8
  %44 = load i8*, i8** %5, align 8
  %45 = icmp eq i8* %43, %44
  br i1 %45, label %46, label %49

46:                                               ; preds = %42
  %47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.4.53, i64 0, i64 0))
  %48 = call i32 (i32, ...) bitcast (void (i32)* @gs_exit to i32 (i32, ...)*)(i32 1)
  br label %97

49:                                               ; preds = %42
  %50 = load i8*, i8** %7, align 8
  %51 = getelementptr inbounds i8, i8* %50, i32 1
  store i8* %51, i8** %7, align 8
  store i8 0, i8* %50, align 1
  %52 = load i8, i8* %4, align 1
  %53 = sext i8 %52 to i32
  %54 = icmp eq i32 %53, 68
  br i1 %54, label %59, label %55

55:                                               ; preds = %49
  %56 = load i8, i8* %4, align 1
  %57 = sext i8 %56 to i32
  %58 = icmp eq i32 %57, 100
  br i1 %58, label %59, label %71

59:                                               ; preds = %55, %49
  %60 = load i8*, i8** %7, align 8
  %61 = load i8*, i8** %7, align 8
  %62 = call i64 @strlen(i8* %61) #11
  %63 = trunc i64 %62 to i32
  call void @sread_string(%struct.stream_s* %10, i8* %60, i32 %63)
  %64 = call i32 (%struct.stream_s*, i32, %struct.ref_s*, ...) bitcast (i32 (%struct.stream_s*, i32, %struct.ref_s*)* @scan_token to i32 (%struct.stream_s*, i32, %struct.ref_s*, ...)*)(%struct.stream_s* %10, i32 0, %struct.ref_s* %8)
  store i32 %64, i32* %9, align 4
  %65 = load i32, i32* %9, align 4
  %66 = icmp ne i32 %65, 0
  br i1 %66, label %67, label %70

67:                                               ; preds = %59
  %68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.5.54, i64 0, i64 0))
  %69 = call i32 (i32, ...) bitcast (void (i32)* @gs_exit to i32 (i32, ...)*)(i32 1)
  br label %70

70:                                               ; preds = %67, %59
  br label %96

71:                                               ; preds = %55
  %72 = load i8*, i8** %7, align 8
  %73 = call i64 @strlen(i8* %72) #11
  %74 = trunc i64 %73 to i32
  store i32 %74, i32* %11, align 4
  %75 = load i32, i32* %11, align 4
  %76 = call i8* @gs_malloc(i32 %75, i32 1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0))
  store i8* %76, i8** %12, align 8
  %77 = load i8*, i8** %12, align 8
  %78 = icmp eq i8* %77, null
  br i1 %78, label %79, label %85

79:                                               ; preds = %71
  %80 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %81 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %80, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), i32 153)
  %82 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %83 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %82, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0))
  %84 = call i32 (i32, ...) bitcast (void (i32)* @gs_exit to i32 (i32, ...)*)(i32 1)
  br label %85

85:                                               ; preds = %79, %71
  %86 = load i8*, i8** %12, align 8
  %87 = load i8*, i8** %7, align 8
  %88 = call i8* @strcpy(i8* %86, i8* %87) #9
  %89 = load i8*, i8** %12, align 8
  %90 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 0
  %91 = bitcast %union.color_sample* %90 to i8**
  store i8* %89, i8** %91, align 8
  %92 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 1
  store i16 566, i16* %92, align 8
  %93 = load i32, i32* %11, align 4
  %94 = trunc i32 %93 to i16
  %95 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 2
  store i16 %94, i16* %95, align 2
  br label %96

96:                                               ; preds = %85, %70
  br label %97

97:                                               ; preds = %96, %46
  br label %98

98:                                               ; preds = %97, %38
  %99 = load i8*, i8** %5, align 8
  %100 = call i32 (i8*, %struct.ref_s*, ...) bitcast (void (i8*, %struct.ref_s*)* @initial_enter_name to i32 (i8*, %struct.ref_s*, ...)*)(i8* %99, %struct.ref_s* %8)
  br label %148

101:                                              ; preds = %2, %2
  call void @init1()
  %102 = load i8*, i8** %5, align 8
  %103 = load i8*, i8** %5, align 8
  %104 = call i64 @strlen(i8* %103) #11
  %105 = trunc i64 %104 to i32
  call void @sread_string(%struct.stream_s* %13, i8* %102, i32 %105)
  %106 = call i32 (%struct.stream_s*, i32, %struct.ref_s*, ...) bitcast (i32 (%struct.stream_s*, i32, %struct.ref_s*)* @scan_token to i32 (%struct.stream_s*, i32, %struct.ref_s*, ...)*)(%struct.stream_s* %13, i32 0, %struct.ref_s* %14)
  store i32 %106, i32* %15, align 4
  %107 = load i32, i32* %15, align 4
  %108 = icmp ne i32 %107, 0
  br i1 %108, label %123, label %109

109:                                              ; preds = %101
  %110 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 1
  %111 = load i16, i16* %110, align 8
  %112 = zext i16 %111 to i32
  %113 = and i32 %112, 255
  %114 = ashr i32 %113, 2
  %115 = icmp ne i32 %114, 5
  br i1 %115, label %116, label %126

116:                                              ; preds = %109
  %117 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 1
  %118 = load i16, i16* %117, align 8
  %119 = zext i16 %118 to i32
  %120 = and i32 %119, 255
  %121 = ashr i32 %120, 2
  %122 = icmp ne i32 %121, 11
  br i1 %122, label %123, label %126

123:                                              ; preds = %116, %101
  %124 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.10.55, i64 0, i64 0))
  %125 = call i32 (i32, ...) bitcast (void (i32)* @gs_exit to i32 (i32, ...)*)(i32 1)
  br label %126

126:                                              ; preds = %123, %116, %109
  %127 = load i8, i8* %4, align 1
  %128 = sext i8 %127 to i32
  %129 = icmp eq i32 %128, 119
  %130 = zext i1 %129 to i64
  %131 = select i1 %129, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i64 0, i64 0)
  %132 = call i32 (i8*, %struct.ref_s*, ...) bitcast (void (i8*, %struct.ref_s*)* @initial_enter_name to i32 (i8*, %struct.ref_s*, ...)*)(i8* %131, %struct.ref_s* %14)
  br label %148

133:                                              ; preds = %2
  store i32 0, i32* @user_errors, align 4
  br label %148

134:                                              ; preds = %2
  store i32 0, i32* %16, align 4
  %135 = load i8*, i8** %5, align 8
  %136 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %135, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0), i32* %16) #9
  %137 = load i32, i32* %16, align 4
  %138 = icmp ule i32 %137, 0
  br i1 %138, label %142, label %139

139:                                              ; preds = %134
  %140 = load i32, i32* %16, align 4
  %141 = icmp uge i32 %140, 64
  br i1 %141, label %142, label %145

142:                                              ; preds = %139, %134
  %143 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.14, i64 0, i64 0))
  %144 = call i32 (i32, ...) bitcast (void (i32)* @gs_exit to i32 (i32, ...)*)(i32 1)
  br label %145

145:                                              ; preds = %142, %139
  %146 = load i32, i32* %16, align 4
  %147 = shl i32 %146, 10
  store i32 %147, i32* @memory_chunk_size, align 4
  br label %148

148:                                              ; preds = %145, %133, %126, %98, %28, %20
  store i32 0, i32* %3, align 4
  br label %149

149:                                              ; preds = %148, %19
  %150 = load i32, i32* %3, align 4
  ret i32 %150
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @argproc(i8* %0, i32 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca [256 x i8], align 16
  %6 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  store i32 %1, i32* %4, align 4
  call void @init2()
  %7 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 0
  %8 = call i8* @strcpy(i8* %7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i64 0, i64 0)) #9
  %9 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 0
  %10 = load i8*, i8** %3, align 8
  %11 = call i8* @strcat(i8* %9, i8* %10) #9
  %12 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 0
  %13 = call i8* @strcat(i8* %12, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.16, i64 0, i64 0)) #9
  %14 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 0
  %15 = call i32 @interpret_string(i8* %14)
  store i32 %15, i32* %6, align 4
  %16 = call i32 (%struct.ref_s*, ...) bitcast (i32 (%struct.ref_s*)* @zflushpage to i32 (%struct.ref_s*, ...)*)(%struct.ref_s* null)
  %17 = load i32, i32* %6, align 4
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %22

19:                                               ; preds = %2
  %20 = load i32, i32* %6, align 4
  call void @debug_dump_stack(i32 %20)
  %21 = call i32 (i32, ...) bitcast (void (i32)* @gs_exit to i32 (i32, ...)*)(i32 1)
  br label %22

22:                                               ; preds = %19, %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @init2() #0 {
  call void @init1()
  %1 = load i32, i32* @init2_done, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %12, label %3

3:                                                ; preds = %0
  %4 = call i32 (...) bitcast (void ()* @gs_init to i32 (...)*)()
  %5 = call i32 (...) bitcast (void ()* @zfile_init to i32 (...)*)()
  %6 = call i32 (...) bitcast (void ()* @zfont_init to i32 (...)*)()
  %7 = call i32 (...) bitcast (void ()* @zmath_init to i32 (...)*)()
  %8 = call i32 (...) bitcast (void ()* @zmatrix_init to i32 (...)*)()
  %9 = call i32 (i32, ...) bitcast (void (i32)* @interp_init to i32 (i32, ...)*)(i32 1)
  %10 = call i32 (...) bitcast (void ()* @op_init to i32 (...)*)()
  %11 = load i32, i32* @user_errors, align 4
  call void @run_file(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.17, i64 0, i64 0), i32 %11)
  store i32 1, i32* @init2_done, align 4
  br label %12

12:                                               ; preds = %3, %0
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @debug_dump_stack(i32 %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %4 = call i32 (%struct.ref_s*, ...) bitcast (i32 (%struct.ref_s*)* @zflush to i32 (%struct.ref_s*, ...)*)(%struct.ref_s* %3)
  %5 = load i32, i32* %2, align 4
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.22, i64 0, i64 0), i32 %5)
  %7 = load %struct.ref_s*, %struct.ref_s** @osbot, align 8
  %8 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i64 1
  %10 = call i32 (%struct.ref_s*, %struct.ref_s*, i8*, ...) bitcast (void (%struct.ref_s*, %struct.ref_s*, i8*)* @debug_dump_refs to i32 (%struct.ref_s*, %struct.ref_s*, i8*, ...)*)(%struct.ref_s* %7, %struct.ref_s* %9, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.23, i64 0, i64 0))
  %11 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %12 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %11, i64 1
  %13 = call i32 (%struct.ref_s*, %struct.ref_s*, i8*, ...) bitcast (void (%struct.ref_s*, %struct.ref_s*, i8*)* @debug_dump_refs to i32 (%struct.ref_s*, %struct.ref_s*, i8*, ...)*)(%struct.ref_s* getelementptr inbounds ([150 x %struct.ref_s], [150 x %struct.ref_s]* @estack, i64 0, i64 0), %struct.ref_s* %12, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.24, i64 0, i64 0))
  ret void
}

declare dso_local i32 @printf(i8*, ...) #3

; Function Attrs: noinline nounwind uwtable
define internal void @init1() #0 {
  %1 = load i32, i32* @init1_done, align 4
  %2 = icmp ne i32 %1, 0
  br i1 %2, label %8, label %3

3:                                                ; preds = %0
  %4 = load i32, i32* @memory_chunk_size, align 4
  call void @alloc_init(i8* (i32, i32, i8*)* @gs_malloc, void (i8*, i32, i32, i8*)* @gs_free, i32 %4)
  %5 = call i32 (...) bitcast (void ()* @name_init to i32 (...)*)()
  %6 = call i32 (...) bitcast (void ()* @obj_init to i32 (...)*)()
  %7 = call i32 (...) bitcast (void ()* @scan_init to i32 (...)*)()
  store i32 1, i32* @init1_done, align 4
  br label %8

8:                                                ; preds = %3, %0
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @run_file(i8* %0, i32 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca %struct.ref_s, align 8
  %6 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  store i32 %1, i32* %4, align 4
  %7 = load i8*, i8** %3, align 8
  %8 = load i8*, i8** %3, align 8
  %9 = call i64 @strlen(i8* %8) #11
  %10 = call i32 (i8*, i64, %struct.ref_s*, ...) bitcast (i32 (i8*, i32, %struct.ref_s*)* @lib_file_open to i32 (i8*, i64, %struct.ref_s*, ...)*)(i8* %7, i64 %9, %struct.ref_s* %5)
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %12, label %17

12:                                               ; preds = %2
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %14 = load i8*, i8** %3, align 8
  %15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.18, i64 0, i64 0), i8* %14)
  %16 = call i32 (i32, ...) bitcast (void (i32)* @gs_exit to i32 (i32, ...)*)(i32 1)
  br label %17

17:                                               ; preds = %12, %2
  %18 = load i32, i32* @quiet, align 4
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %25, label %20

20:                                               ; preds = %17
  %21 = load i8*, i8** %3, align 8
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i64 0, i64 0), i8* %21)
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %24 = call i32 @fflush(%struct._IO_FILE* %23)
  br label %25

25:                                               ; preds = %20, %17
  %26 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i32 0, i32 1
  %27 = load i16, i16* %26, align 8
  %28 = zext i16 %27 to i32
  %29 = or i32 %28, 3
  %30 = trunc i32 %29 to i16
  store i16 %30, i16* %26, align 8
  %31 = load i32, i32* %4, align 4
  %32 = call i32 (%struct.ref_s*, i32, ...) bitcast (i32 (%struct.ref_s*, i32)* @interpret to i32 (%struct.ref_s*, i32, ...)*)(%struct.ref_s* %5, i32 %31)
  store i32 %32, i32* %6, align 4
  %33 = load i32, i32* %6, align 4
  %34 = icmp slt i32 %33, 0
  br i1 %34, label %35, label %38

35:                                               ; preds = %25
  %36 = load i32, i32* %6, align 4
  call void @debug_dump_stack(i32 %36)
  %37 = call i32 (i32, ...) bitcast (void (i32)* @gs_exit to i32 (i32, ...)*)(i32 1)
  br label %38

38:                                               ; preds = %35, %25
  %39 = load i32, i32* @quiet, align 4
  %40 = icmp ne i32 %39, 0
  br i1 %40, label %46, label %41

41:                                               ; preds = %38
  %42 = load i8*, i8** %3, align 8
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.20, i64 0, i64 0), i8* %42)
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %45 = call i32 @fflush(%struct._IO_FILE* %44)
  br label %46

46:                                               ; preds = %41, %38
  ret void
}

declare dso_local i32 @fflush(%struct._IO_FILE*) #3

; Function Attrs: nounwind
declare dso_local i8* @strcat(i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @interpret_string(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca %struct.ref_s, align 8
  store i8* %0, i8** %2, align 8
  %4 = load i8*, i8** %2, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %3, i32 0, i32 0
  %6 = bitcast %union.color_sample* %5 to i8**
  store i8* %4, i8** %6, align 8
  %7 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %3, i32 0, i32 1
  store i16 567, i16* %7, align 8
  %8 = load i8*, i8** %2, align 8
  %9 = call i64 @strlen(i8* %8) #11
  %10 = trunc i64 %9 to i16
  %11 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %3, i32 0, i32 2
  store i16 %10, i16* %11, align 2
  %12 = load i32, i32* @user_errors, align 4
  %13 = call i32 (%struct.ref_s*, i32, ...) bitcast (i32 (%struct.ref_s*, i32)* @interpret to i32 (%struct.ref_s*, i32, ...)*)(%struct.ref_s* %3, i32 %12)
  ret i32 %13
}

; Function Attrs: nounwind readonly
declare dso_local i8* @strchr(i8*, i32) #5

; Function Attrs: nounwind
declare dso_local i32 @__isoc99_sscanf(i8*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_main(i32 %0, i8** %1, i8* %2, i32 (i8, i8*)* %3, void (i8*, i32)* %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i8**, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i32 (i8, i8*)*, align 8
  %10 = alloca void (i8*, i32)*, align 8
  %11 = alloca i32, align 4
  %12 = alloca %struct._IO_FILE*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i32, align 4
  store i32 %0, i32* %6, align 4
  store i8** %1, i8*** %7, align 8
  store i8* %2, i8** %8, align 8
  store i32 (i8, i8*)* %3, i32 (i8, i8*)** %9, align 8
  store void (i8*, i32)* %4, void (i8*, i32)** %10, align 8
  store i32 1, i32* %11, align 4
  store %struct._IO_FILE* null, %struct._IO_FILE** %12, align 8
  store i32 0, i32* %13, align 4
  store i64 0, i64* @proc_reloc, align 8
  call void (...) bitcast (void ()* @gp_init to void (...)*)()
  br label %19

19:                                               ; preds = %114, %5
  %20 = load i32, i32* %11, align 4
  %21 = load i32, i32* %6, align 4
  %22 = icmp slt i32 %20, %21
  br i1 %22, label %23, label %117

23:                                               ; preds = %19
  %24 = load i8**, i8*** %7, align 8
  %25 = load i32, i32* %11, align 4
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i8*, i8** %24, i64 %26
  %28 = load i8*, i8** %27, align 8
  store i8* %28, i8** %14, align 8
  %29 = load i8*, i8** %14, align 8
  %30 = load i8, i8* %29, align 1
  %31 = sext i8 %30 to i32
  %32 = icmp eq i32 %31, 45
  br i1 %32, label %33, label %108

33:                                               ; preds = %23
  %34 = load i8*, i8** %14, align 8
  %35 = getelementptr inbounds i8, i8* %34, i32 1
  store i8* %35, i8** %14, align 8
  %36 = load i8, i8* %35, align 1
  %37 = sext i8 %36 to i32
  switch i32 %37, label %38 [
    i32 90, label %51
    i32 84, label %53
  ]

38:                                               ; preds = %33
  %39 = load i32 (i8, i8*)*, i32 (i8, i8*)** %9, align 8
  %40 = load i8*, i8** %14, align 8
  %41 = load i8, i8* %40, align 1
  %42 = load i8*, i8** %14, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 1
  %44 = call i32 %39(i8 signext %41, i8* %43)
  %45 = icmp slt i32 %44, 0
  br i1 %45, label %46, label %50

46:                                               ; preds = %38
  %47 = load i8*, i8** %14, align 8
  %48 = getelementptr inbounds i8, i8* %47, i64 -1
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.58, i64 0, i64 0), i8* %48)
  br label %50

50:                                               ; preds = %46, %38
  br label %107

51:                                               ; preds = %33
  %52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.1.59, i64 0, i64 0))
  br label %107

53:                                               ; preds = %33
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** %12, align 8
  %55 = icmp eq %struct._IO_FILE* %54, null
  br i1 %55, label %56, label %66

56:                                               ; preds = %53
  %57 = load i8*, i8** %8, align 8
  %58 = call %struct._IO_FILE* @trace_open_map(i8* %57, i64* @proc_reloc)
  store %struct._IO_FILE* %58, %struct._IO_FILE** %12, align 8
  %59 = load %struct._IO_FILE*, %struct._IO_FILE** %12, align 8
  %60 = icmp eq %struct._IO_FILE* %59, null
  br i1 %60, label %61, label %64

61:                                               ; preds = %56
  %62 = load i8*, i8** %8, align 8
  %63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2.60, i64 0, i64 0), i8* %62)
  br label %107

64:                                               ; preds = %56
  %65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3.61, i64 0, i64 0), i64 ptrtoint (i32 (i32, i8**)* @main to i64))
  br label %66

66:                                               ; preds = %64, %53
  store i8* null, i8** %17, align 8
  store i32 0, i32* %18, align 4
  %67 = load i8*, i8** %14, align 8
  %68 = call i8* @strchr(i8* %67, i32 58) #11
  store i8* %68, i8** %15, align 8
  %69 = load i8*, i8** %15, align 8
  %70 = icmp ne i8* %69, null
  br i1 %70, label %71, label %85

71:                                               ; preds = %66
  %72 = load i8*, i8** %15, align 8
  %73 = getelementptr inbounds i8, i8* %72, i64 1
  %74 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %73, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4.62, i64 0, i64 0), i32* %18) #9
  %75 = load i8*, i8** %15, align 8
  store i8 0, i8* %75, align 1
  %76 = load i8*, i8** %15, align 8
  %77 = getelementptr inbounds i8, i8* %76, i64 1
  %78 = call i8* @strchr(i8* %77, i32 58) #11
  store i8* %78, i8** %15, align 8
  %79 = load i8*, i8** %15, align 8
  %80 = icmp ne i8* %79, null
  br i1 %80, label %81, label %84

81:                                               ; preds = %71
  %82 = load i8*, i8** %15, align 8
  %83 = getelementptr inbounds i8, i8* %82, i64 1
  store i8* %83, i8** %17, align 8
  br label %84

84:                                               ; preds = %81, %71
  br label %85

85:                                               ; preds = %84, %66
  %86 = load i8*, i8** %14, align 8
  %87 = call i64 @strlen(i8* %86) #11
  %88 = add i64 %87, 1
  %89 = trunc i64 %88 to i32
  %90 = call i8* @gs_malloc(i32 %89, i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5.63, i64 0, i64 0))
  store i8* %90, i8** %16, align 8
  %91 = load i8*, i8** %16, align 8
  %92 = load i8*, i8** %14, align 8
  %93 = call i8* @strcpy(i8* %91, i8* %92) #9
  %94 = load i8*, i8** %16, align 8
  store i8 95, i8* %94, align 1
  %95 = load i8*, i8** %16, align 8
  %96 = call i32 (i8*, ...) bitcast (i8* (i8*)* @strupr to i32 (i8*, ...)*)(i8* %95)
  %97 = load i8*, i8** %16, align 8
  %98 = load %struct._IO_FILE*, %struct._IO_FILE** %12, align 8
  %99 = load i8*, i8** %17, align 8
  %100 = load i32, i32* %18, align 4
  %101 = call i32 (i8*, %struct._IO_FILE*, i8*, i32, ...) bitcast (i32 (i8*, %struct._IO_FILE*, i8*, i32)* @trace_name to i32 (i8*, %struct._IO_FILE*, i8*, i32, ...)*)(i8* %97, %struct._IO_FILE* %98, i8* %99, i32 %100)
  %102 = icmp slt i32 %101, 0
  br i1 %102, label %103, label %106

103:                                              ; preds = %85
  %104 = load i8*, i8** %16, align 8
  %105 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6.64, i64 0, i64 0), i8* %104)
  br label %106

106:                                              ; preds = %103, %85
  store i32 1, i32* @trace_flush_flag, align 4
  br label %107

107:                                              ; preds = %106, %61, %51, %50
  br label %113

108:                                              ; preds = %23
  %109 = load void (i8*, i32)*, void (i8*, i32)** %10, align 8
  %110 = load i8*, i8** %14, align 8
  %111 = load i32, i32* %13, align 4
  %112 = add nsw i32 %111, 1
  store i32 %112, i32* %13, align 4
  call void %109(i8* %110, i32 %111)
  br label %113

113:                                              ; preds = %108, %107
  br label %114

114:                                              ; preds = %113
  %115 = load i32, i32* %11, align 4
  %116 = add nsw i32 %115, 1
  store i32 %116, i32* %11, align 4
  br label %19

117:                                              ; preds = %19
  %118 = load i32, i32* %13, align 4
  ret i32 %118
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gs_exit(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.gx_device_s**, align 8
  store i32 %0, i32* %2, align 4
  store %struct.gx_device_s** getelementptr inbounds ([1 x %struct.gx_device_s*], [1 x %struct.gx_device_s*]* @gx_device_list, i64 0, i64 0), %struct.gx_device_s*** %3, align 8
  %4 = load i32, i32* %2, align 4
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %1
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %8 = call i32 @fflush(%struct._IO_FILE* %7)
  br label %9

9:                                                ; preds = %6, %1
  br label %10

10:                                               ; preds = %31, %9
  %11 = load %struct.gx_device_s**, %struct.gx_device_s*** %3, align 8
  %12 = load %struct.gx_device_s*, %struct.gx_device_s** %11, align 8
  %13 = icmp ne %struct.gx_device_s* %12, null
  br i1 %13, label %14, label %34

14:                                               ; preds = %10
  %15 = load %struct.gx_device_s**, %struct.gx_device_s*** %3, align 8
  %16 = load %struct.gx_device_s*, %struct.gx_device_s** %15, align 8
  %17 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %16, i32 0, i32 10
  %18 = load i32, i32* %17, align 4
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %20, label %30

20:                                               ; preds = %14
  %21 = load %struct.gx_device_s**, %struct.gx_device_s*** %3, align 8
  %22 = load %struct.gx_device_s*, %struct.gx_device_s** %21, align 8
  %23 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %22, i32 0, i32 1
  %24 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %23, align 8
  %25 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %24, i32 0, i32 4
  %26 = load i32 (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*)** %25, align 8
  %27 = load %struct.gx_device_s**, %struct.gx_device_s*** %3, align 8
  %28 = load %struct.gx_device_s*, %struct.gx_device_s** %27, align 8
  %29 = call i32 %26(%struct.gx_device_s* %28)
  br label %30

30:                                               ; preds = %20, %14
  br label %31

31:                                               ; preds = %30
  %32 = load %struct.gx_device_s**, %struct.gx_device_s*** %3, align 8
  %33 = getelementptr inbounds %struct.gx_device_s*, %struct.gx_device_s** %32, i32 1
  store %struct.gx_device_s** %33, %struct.gx_device_s*** %3, align 8
  br label %10

34:                                               ; preds = %10
  %35 = load i32, i32* %2, align 4
  call void @exit(i32 %35) #12
  unreachable
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gs_dump_C_stack() #0 {
  %1 = alloca i8*, align 8
  %2 = alloca i8*, align 8
  %3 = call i8* (...) bitcast (i8* ()* @stack_top_frame to i8* (...)*)()
  store i8* %3, i8** %1, align 8
  br label %4

4:                                                ; preds = %17, %0
  %5 = load i8*, i8** %1, align 8
  store i8* %5, i8** %2, align 8
  %6 = load i8*, i8** %2, align 8
  %7 = ptrtoint i8* %6 to i64
  %8 = load i8*, i8** %2, align 8
  %9 = call i64 @stack_return(i8* %8)
  %10 = load i8*, i8** %2, align 8
  %11 = call i64 @stack_return(i8* %10)
  %12 = load i64, i64* @proc_reloc, align 8
  %13 = sub i64 %11, %12
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.7.67, i64 0, i64 0), i64 %7, i64 %9, i64 %13)
  %15 = load i8*, i8** %2, align 8
  %16 = call i8* @stack_next_frame(i8* %15)
  store i8* %16, i8** %1, align 8
  br label %17

17:                                               ; preds = %4
  %18 = load i8*, i8** %1, align 8
  %19 = icmp ne i8* %18, null
  br i1 %19, label %4, label %20

20:                                               ; preds = %17
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gs_make_identity(%struct.gs_matrix_s* %0) #0 {
  %2 = alloca %struct.gs_matrix_s*, align 8
  store %struct.gs_matrix_s* %0, %struct.gs_matrix_s** %2, align 8
  %3 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %2, align 8
  %4 = bitcast %struct.gs_matrix_s* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 bitcast (%struct.gs_matrix_s* @gs_identity_matrix to i8*), i64 96, i1 false)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_make_translation(double %0, double %1, %struct.gs_matrix_s* %2) #0 {
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca %struct.gs_matrix_s*, align 8
  store double %0, double* %4, align 8
  store double %1, double* %5, align 8
  store %struct.gs_matrix_s* %2, %struct.gs_matrix_s** %6, align 8
  %7 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %8 = bitcast %struct.gs_matrix_s* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 bitcast (%struct.gs_matrix_s* @gs_identity_matrix to i8*), i64 96, i1 false)
  %9 = load double, double* %4, align 8
  %10 = fptrunc double %9 to float
  %11 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %12 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %11, i32 0, i32 8
  store float %10, float* %12, align 8
  %13 = load double, double* %5, align 8
  %14 = fptrunc double %13 to float
  %15 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %16 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %15, i32 0, i32 10
  store float %14, float* %16, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_make_scaling(double %0, double %1, %struct.gs_matrix_s* %2) #0 {
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca %struct.gs_matrix_s*, align 8
  store double %0, double* %4, align 8
  store double %1, double* %5, align 8
  store %struct.gs_matrix_s* %2, %struct.gs_matrix_s** %6, align 8
  %7 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %8 = bitcast %struct.gs_matrix_s* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 bitcast (%struct.gs_matrix_s* @gs_identity_matrix to i8*), i64 96, i1 false)
  %9 = load double, double* %4, align 8
  %10 = fptrunc double %9 to float
  %11 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %12 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %11, i32 0, i32 0
  store float %10, float* %12, align 8
  %13 = load double, double* %5, align 8
  %14 = fptrunc double %13 to float
  %15 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %16 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %15, i32 0, i32 6
  store float %14, float* %16, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_make_rotation(double %0, %struct.gs_matrix_s* %1) #0 {
  %3 = alloca double, align 8
  %4 = alloca %struct.gs_matrix_s*, align 8
  %5 = alloca float, align 4
  store double %0, double* %3, align 8
  store %struct.gs_matrix_s* %1, %struct.gs_matrix_s** %4, align 8
  %6 = load double, double* %3, align 8
  %7 = fmul double %6, 0x3F91DF46A2529D39
  %8 = fptrunc double %7 to float
  store float %8, float* %5, align 4
  %9 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %10 = bitcast %struct.gs_matrix_s* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 bitcast (%struct.gs_matrix_s* @gs_identity_matrix to i8*), i64 96, i1 false)
  %11 = load float, float* %5, align 4
  %12 = fpext float %11 to double
  %13 = call double @cos(double %12) #9
  %14 = fptrunc double %13 to float
  %15 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %16 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %15, i32 0, i32 6
  store float %14, float* %16, align 8
  %17 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %18 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %17, i32 0, i32 0
  store float %14, float* %18, align 8
  %19 = load float, float* %5, align 4
  %20 = fpext float %19 to double
  %21 = call double @sin(double %20) #9
  %22 = fptrunc double %21 to float
  %23 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %24 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %23, i32 0, i32 2
  store float %22, float* %24, align 8
  %25 = fneg float %22
  %26 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %27 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %26, i32 0, i32 4
  store float %25, float* %27, align 8
  ret i32 0
}

; Function Attrs: nounwind
declare dso_local double @cos(double) #2

; Function Attrs: nounwind
declare dso_local double @sin(double) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_matrix_multiply(%struct.gs_matrix_s* %0, %struct.gs_matrix_s* %1, %struct.gs_matrix_s* %2) #0 {
  %4 = alloca %struct.gs_matrix_s*, align 8
  %5 = alloca %struct.gs_matrix_s*, align 8
  %6 = alloca %struct.gs_matrix_s*, align 8
  %7 = alloca float, align 4
  %8 = alloca float, align 4
  %9 = alloca float, align 4
  %10 = alloca float, align 4
  %11 = alloca float, align 4
  %12 = alloca float, align 4
  %13 = alloca float, align 4
  %14 = alloca float, align 4
  store %struct.gs_matrix_s* %0, %struct.gs_matrix_s** %4, align 8
  store %struct.gs_matrix_s* %1, %struct.gs_matrix_s** %5, align 8
  store %struct.gs_matrix_s* %2, %struct.gs_matrix_s** %6, align 8
  %15 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %16 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %15, i32 0, i32 0
  %17 = load float, float* %16, align 8
  store float %17, float* %7, align 4
  %18 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %19 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %18, i32 0, i32 6
  %20 = load float, float* %19, align 8
  store float %20, float* %8, align 4
  %21 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %22 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %21, i32 0, i32 8
  %23 = load float, float* %22, align 8
  store float %23, float* %9, align 4
  %24 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %25 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %24, i32 0, i32 10
  %26 = load float, float* %25, align 8
  store float %26, float* %10, align 4
  %27 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %5, align 8
  %28 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %27, i32 0, i32 0
  %29 = load float, float* %28, align 8
  store float %29, float* %11, align 4
  %30 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %5, align 8
  %31 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %30, i32 0, i32 6
  %32 = load float, float* %31, align 8
  store float %32, float* %12, align 4
  %33 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %5, align 8
  %34 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %33, i32 0, i32 2
  %35 = load float, float* %34, align 8
  store float %35, float* %13, align 4
  %36 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %5, align 8
  %37 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %36, i32 0, i32 4
  %38 = load float, float* %37, align 8
  store float %38, float* %14, align 4
  %39 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %40 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %39, i32 0, i32 2
  %41 = bitcast float* %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %44 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %43, i32 0, i32 4
  %45 = bitcast float* %44 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = or i64 %42, %46
  %48 = shl i64 %47, 1
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %50, label %121

50:                                               ; preds = %3
  %51 = load float, float* %9, align 4
  %52 = load float, float* %11, align 4
  %53 = fmul float %51, %52
  %54 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %5, align 8
  %55 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %54, i32 0, i32 8
  %56 = load float, float* %55, align 8
  %57 = fadd float %53, %56
  %58 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %59 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %58, i32 0, i32 8
  store float %57, float* %59, align 8
  %60 = load float, float* %10, align 4
  %61 = load float, float* %12, align 4
  %62 = fmul float %60, %61
  %63 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %5, align 8
  %64 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %63, i32 0, i32 10
  %65 = load float, float* %64, align 8
  %66 = fadd float %62, %65
  %67 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %68 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %67, i32 0, i32 10
  store float %66, float* %68, align 8
  %69 = bitcast float* %13 to i64*
  %70 = load i64, i64* %69, align 4
  %71 = shl i64 %70, 1
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %76

73:                                               ; preds = %50
  %74 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %75 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %74, i32 0, i32 2
  store float 0.000000e+00, float* %75, align 8
  br label %89

76:                                               ; preds = %50
  %77 = load float, float* %7, align 4
  %78 = load float, float* %13, align 4
  %79 = fmul float %77, %78
  %80 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %81 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %80, i32 0, i32 2
  store float %79, float* %81, align 8
  %82 = load float, float* %9, align 4
  %83 = load float, float* %13, align 4
  %84 = fmul float %82, %83
  %85 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %86 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %85, i32 0, i32 10
  %87 = load float, float* %86, align 8
  %88 = fadd float %87, %84
  store float %88, float* %86, align 8
  br label %89

89:                                               ; preds = %76, %73
  %90 = load float, float* %7, align 4
  %91 = load float, float* %11, align 4
  %92 = fmul float %90, %91
  %93 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %94 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %93, i32 0, i32 0
  store float %92, float* %94, align 8
  %95 = bitcast float* %14 to i64*
  %96 = load i64, i64* %95, align 4
  %97 = shl i64 %96, 1
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %99, label %102

99:                                               ; preds = %89
  %100 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %101 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %100, i32 0, i32 4
  store float 0.000000e+00, float* %101, align 8
  br label %115

102:                                              ; preds = %89
  %103 = load float, float* %8, align 4
  %104 = load float, float* %14, align 4
  %105 = fmul float %103, %104
  %106 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %107 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %106, i32 0, i32 4
  store float %105, float* %107, align 8
  %108 = load float, float* %10, align 4
  %109 = load float, float* %14, align 4
  %110 = fmul float %108, %109
  %111 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %112 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %111, i32 0, i32 8
  %113 = load float, float* %112, align 8
  %114 = fadd float %113, %110
  store float %114, float* %112, align 8
  br label %115

115:                                              ; preds = %102, %99
  %116 = load float, float* %8, align 4
  %117 = load float, float* %12, align 4
  %118 = fmul float %116, %117
  %119 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %120 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %119, i32 0, i32 6
  store float %118, float* %120, align 8
  br label %192

121:                                              ; preds = %3
  %122 = load float, float* %7, align 4
  %123 = load float, float* %11, align 4
  %124 = fmul float %122, %123
  %125 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %126 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %125, i32 0, i32 2
  %127 = load float, float* %126, align 8
  %128 = load float, float* %14, align 4
  %129 = fmul float %127, %128
  %130 = fadd float %124, %129
  %131 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %132 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %131, i32 0, i32 0
  store float %130, float* %132, align 8
  %133 = load float, float* %7, align 4
  %134 = load float, float* %13, align 4
  %135 = fmul float %133, %134
  %136 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %137 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %136, i32 0, i32 2
  %138 = load float, float* %137, align 8
  %139 = load float, float* %12, align 4
  %140 = fmul float %138, %139
  %141 = fadd float %135, %140
  %142 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %143 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %142, i32 0, i32 2
  store float %141, float* %143, align 8
  %144 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %145 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %144, i32 0, i32 4
  %146 = load float, float* %145, align 8
  %147 = load float, float* %13, align 4
  %148 = fmul float %146, %147
  %149 = load float, float* %8, align 4
  %150 = load float, float* %12, align 4
  %151 = fmul float %149, %150
  %152 = fadd float %148, %151
  %153 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %154 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %153, i32 0, i32 6
  store float %152, float* %154, align 8
  %155 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %156 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %155, i32 0, i32 4
  %157 = load float, float* %156, align 8
  %158 = load float, float* %11, align 4
  %159 = fmul float %157, %158
  %160 = load float, float* %8, align 4
  %161 = load float, float* %14, align 4
  %162 = fmul float %160, %161
  %163 = fadd float %159, %162
  %164 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %165 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %164, i32 0, i32 4
  store float %163, float* %165, align 8
  %166 = load float, float* %9, align 4
  %167 = load float, float* %11, align 4
  %168 = fmul float %166, %167
  %169 = load float, float* %10, align 4
  %170 = load float, float* %14, align 4
  %171 = fmul float %169, %170
  %172 = fadd float %168, %171
  %173 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %5, align 8
  %174 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %173, i32 0, i32 8
  %175 = load float, float* %174, align 8
  %176 = fadd float %172, %175
  %177 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %178 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %177, i32 0, i32 8
  store float %176, float* %178, align 8
  %179 = load float, float* %9, align 4
  %180 = load float, float* %13, align 4
  %181 = fmul float %179, %180
  %182 = load float, float* %10, align 4
  %183 = load float, float* %12, align 4
  %184 = fmul float %182, %183
  %185 = fadd float %181, %184
  %186 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %5, align 8
  %187 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %186, i32 0, i32 10
  %188 = load float, float* %187, align 8
  %189 = fadd float %185, %188
  %190 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %191 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %190, i32 0, i32 10
  store float %189, float* %191, align 8
  br label %192

192:                                              ; preds = %121, %115
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_matrix_invert(%struct.gs_matrix_s* %0, %struct.gs_matrix_s* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.gs_matrix_s*, align 8
  %5 = alloca %struct.gs_matrix_s*, align 8
  %6 = alloca double, align 8
  %7 = alloca float, align 4
  %8 = alloca float, align 4
  store %struct.gs_matrix_s* %0, %struct.gs_matrix_s** %4, align 8
  store %struct.gs_matrix_s* %1, %struct.gs_matrix_s** %5, align 8
  %9 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %10 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %9, i32 0, i32 2
  %11 = bitcast float* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %14 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %13, i32 0, i32 4
  %15 = bitcast float* %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = or i64 %12, %16
  %18 = shl i64 %17, 1
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %20, label %70

20:                                               ; preds = %2
  %21 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %22 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %21, i32 0, i32 0
  %23 = bitcast float* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = shl i64 %24, 1
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %20
  %28 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %29 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %28, i32 0, i32 6
  %30 = bitcast float* %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = shl i64 %31, 1
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %27, %20
  store i32 -23, i32* %3, align 4
  br label %166

35:                                               ; preds = %27
  %36 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %37 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %36, i32 0, i32 0
  %38 = load float, float* %37, align 8
  %39 = fpext float %38 to double
  %40 = fdiv double 1.000000e+00, %39
  %41 = fptrunc double %40 to float
  %42 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %5, align 8
  %43 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %42, i32 0, i32 0
  store float %41, float* %43, align 8
  %44 = fneg float %41
  %45 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %46 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %45, i32 0, i32 8
  %47 = load float, float* %46, align 8
  %48 = fmul float %44, %47
  %49 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %5, align 8
  %50 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %49, i32 0, i32 8
  store float %48, float* %50, align 8
  %51 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %5, align 8
  %52 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %51, i32 0, i32 2
  store float 0.000000e+00, float* %52, align 8
  %53 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %5, align 8
  %54 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %53, i32 0, i32 4
  store float 0.000000e+00, float* %54, align 8
  %55 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %56 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %55, i32 0, i32 6
  %57 = load float, float* %56, align 8
  %58 = fpext float %57 to double
  %59 = fdiv double 1.000000e+00, %58
  %60 = fptrunc double %59 to float
  %61 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %5, align 8
  %62 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %61, i32 0, i32 6
  store float %60, float* %62, align 8
  %63 = fneg float %60
  %64 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %65 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %64, i32 0, i32 10
  %66 = load float, float* %65, align 8
  %67 = fmul float %63, %66
  %68 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %5, align 8
  %69 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %68, i32 0, i32 10
  store float %67, float* %69, align 8
  br label %165

70:                                               ; preds = %2
  %71 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %72 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %71, i32 0, i32 0
  %73 = load float, float* %72, align 8
  %74 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %75 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %74, i32 0, i32 6
  %76 = load float, float* %75, align 8
  %77 = fmul float %73, %76
  %78 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %79 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %78, i32 0, i32 2
  %80 = load float, float* %79, align 8
  %81 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %82 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %81, i32 0, i32 4
  %83 = load float, float* %82, align 8
  %84 = fmul float %80, %83
  %85 = fsub float %77, %84
  %86 = fpext float %85 to double
  store double %86, double* %6, align 8
  %87 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %88 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %87, i32 0, i32 0
  %89 = load float, float* %88, align 8
  store float %89, float* %7, align 4
  %90 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %91 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %90, i32 0, i32 8
  %92 = load float, float* %91, align 8
  store float %92, float* %8, align 4
  %93 = load double, double* %6, align 8
  %94 = fcmp oeq double %93, 0.000000e+00
  br i1 %94, label %95, label %96

95:                                               ; preds = %70
  store i32 -23, i32* %3, align 4
  br label %166

96:                                               ; preds = %70
  %97 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %98 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %97, i32 0, i32 6
  %99 = load float, float* %98, align 8
  %100 = fpext float %99 to double
  %101 = load double, double* %6, align 8
  %102 = fdiv double %100, %101
  %103 = fptrunc double %102 to float
  %104 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %5, align 8
  %105 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %104, i32 0, i32 0
  store float %103, float* %105, align 8
  %106 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %107 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %106, i32 0, i32 2
  %108 = load float, float* %107, align 8
  %109 = fneg float %108
  %110 = fpext float %109 to double
  %111 = load double, double* %6, align 8
  %112 = fdiv double %110, %111
  %113 = fptrunc double %112 to float
  %114 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %5, align 8
  %115 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %114, i32 0, i32 2
  store float %113, float* %115, align 8
  %116 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %117 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %116, i32 0, i32 4
  %118 = load float, float* %117, align 8
  %119 = fneg float %118
  %120 = fpext float %119 to double
  %121 = load double, double* %6, align 8
  %122 = fdiv double %120, %121
  %123 = fptrunc double %122 to float
  %124 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %5, align 8
  %125 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %124, i32 0, i32 4
  store float %123, float* %125, align 8
  %126 = load float, float* %7, align 4
  %127 = fpext float %126 to double
  %128 = load double, double* %6, align 8
  %129 = fdiv double %127, %128
  %130 = fptrunc double %129 to float
  %131 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %5, align 8
  %132 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %131, i32 0, i32 6
  store float %130, float* %132, align 8
  %133 = load float, float* %8, align 4
  %134 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %5, align 8
  %135 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %134, i32 0, i32 0
  %136 = load float, float* %135, align 8
  %137 = fmul float %133, %136
  %138 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %139 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %138, i32 0, i32 10
  %140 = load float, float* %139, align 8
  %141 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %5, align 8
  %142 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %141, i32 0, i32 4
  %143 = load float, float* %142, align 8
  %144 = fmul float %140, %143
  %145 = fadd float %137, %144
  %146 = fneg float %145
  %147 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %5, align 8
  %148 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %147, i32 0, i32 8
  store float %146, float* %148, align 8
  %149 = load float, float* %8, align 4
  %150 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %5, align 8
  %151 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %150, i32 0, i32 2
  %152 = load float, float* %151, align 8
  %153 = fmul float %149, %152
  %154 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %155 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %154, i32 0, i32 10
  %156 = load float, float* %155, align 8
  %157 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %5, align 8
  %158 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %157, i32 0, i32 6
  %159 = load float, float* %158, align 8
  %160 = fmul float %156, %159
  %161 = fadd float %153, %160
  %162 = fneg float %161
  %163 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %5, align 8
  %164 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %163, i32 0, i32 10
  store float %162, float* %164, align 8
  br label %165

165:                                              ; preds = %96, %35
  store i32 0, i32* %3, align 4
  br label %166

166:                                              ; preds = %165, %95, %34
  %167 = load i32, i32* %3, align 4
  ret i32 %167
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_matrix_rotate(%struct.gs_matrix_s* %0, double %1, %struct.gs_matrix_s* %2) #0 {
  %4 = alloca %struct.gs_matrix_s*, align 8
  %5 = alloca double, align 8
  %6 = alloca %struct.gs_matrix_s*, align 8
  %7 = alloca float, align 4
  %8 = alloca float, align 4
  %9 = alloca i32, align 4
  %10 = alloca float, align 4
  %11 = alloca float, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca float, align 4
  store %struct.gs_matrix_s* %0, %struct.gs_matrix_s** %4, align 8
  store double %1, double* %5, align 8
  store %struct.gs_matrix_s* %2, %struct.gs_matrix_s** %6, align 8
  %16 = load double, double* %5, align 8
  %17 = fcmp oge double %16, -3.600000e+02
  br i1 %17, label %18, label %46

18:                                               ; preds = %3
  %19 = load double, double* %5, align 8
  %20 = fcmp ole double %19, 3.600000e+02
  br i1 %20, label %21, label %46

21:                                               ; preds = %18
  %22 = load double, double* %5, align 8
  %23 = load double, double* %5, align 8
  %24 = fptosi double %23 to i32
  %25 = sdiv i32 %24, 90
  store i32 %25, i32* %9, align 4
  %26 = mul nsw i32 %25, 90
  %27 = sitofp i32 %26 to double
  %28 = fcmp oeq double %22, %27
  br i1 %28, label %29, label %46

29:                                               ; preds = %21
  store i32 0, i32* %12, align 4
  store i32 1, i32* %13, align 4
  %30 = load i32, i32* %9, align 4
  %31 = and i32 %30, 3
  store i32 %31, i32* %9, align 4
  br label %32

32:                                               ; preds = %36, %29
  %33 = load i32, i32* %9, align 4
  %34 = add nsw i32 %33, -1
  store i32 %34, i32* %9, align 4
  %35 = icmp ne i32 %33, 0
  br i1 %35, label %36, label %41

36:                                               ; preds = %32
  %37 = load i32, i32* %12, align 4
  store i32 %37, i32* %14, align 4
  %38 = load i32, i32* %13, align 4
  store i32 %38, i32* %12, align 4
  %39 = load i32, i32* %14, align 4
  %40 = sub nsw i32 0, %39
  store i32 %40, i32* %13, align 4
  br label %32

41:                                               ; preds = %32
  %42 = load i32, i32* %12, align 4
  %43 = sitofp i32 %42 to float
  store float %43, float* %10, align 4
  %44 = load i32, i32* %13, align 4
  %45 = sitofp i32 %44 to float
  store float %45, float* %11, align 4
  br label %58

46:                                               ; preds = %21, %18, %3
  %47 = load double, double* %5, align 8
  %48 = fmul double %47, 0x3F91DF46A2529D39
  %49 = fptrunc double %48 to float
  store float %49, float* %15, align 4
  %50 = load float, float* %15, align 4
  %51 = fpext float %50 to double
  %52 = call double @sin(double %51) #9
  %53 = fptrunc double %52 to float
  store float %53, float* %10, align 4
  %54 = load float, float* %15, align 4
  %55 = fpext float %54 to double
  %56 = call double @cos(double %55) #9
  %57 = fptrunc double %56 to float
  store float %57, float* %11, align 4
  br label %58

58:                                               ; preds = %46, %41
  %59 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %60 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %59, i32 0, i32 0
  %61 = load float, float* %60, align 8
  store float %61, float* %7, align 4
  %62 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %63 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %62, i32 0, i32 2
  %64 = load float, float* %63, align 8
  store float %64, float* %8, align 4
  %65 = load float, float* %11, align 4
  %66 = load float, float* %7, align 4
  %67 = fmul float %65, %66
  %68 = load float, float* %10, align 4
  %69 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %70 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %69, i32 0, i32 4
  %71 = load float, float* %70, align 8
  %72 = fmul float %68, %71
  %73 = fadd float %67, %72
  %74 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %75 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %74, i32 0, i32 0
  store float %73, float* %75, align 8
  %76 = load float, float* %11, align 4
  %77 = load float, float* %8, align 4
  %78 = fmul float %76, %77
  %79 = load float, float* %10, align 4
  %80 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %81 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %80, i32 0, i32 6
  %82 = load float, float* %81, align 8
  %83 = fmul float %79, %82
  %84 = fadd float %78, %83
  %85 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %86 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %85, i32 0, i32 2
  store float %84, float* %86, align 8
  %87 = load float, float* %11, align 4
  %88 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %89 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %88, i32 0, i32 4
  %90 = load float, float* %89, align 8
  %91 = fmul float %87, %90
  %92 = load float, float* %10, align 4
  %93 = load float, float* %7, align 4
  %94 = fmul float %92, %93
  %95 = fsub float %91, %94
  %96 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %97 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %96, i32 0, i32 4
  store float %95, float* %97, align 8
  %98 = load float, float* %11, align 4
  %99 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %100 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %99, i32 0, i32 6
  %101 = load float, float* %100, align 8
  %102 = fmul float %98, %101
  %103 = load float, float* %10, align 4
  %104 = load float, float* %8, align 4
  %105 = fmul float %103, %104
  %106 = fsub float %102, %105
  %107 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %108 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %107, i32 0, i32 6
  store float %106, float* %108, align 8
  %109 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %110 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %109, i32 0, i32 8
  %111 = load float, float* %110, align 8
  %112 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %113 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %112, i32 0, i32 8
  store float %111, float* %113, align 8
  %114 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %4, align 8
  %115 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %114, i32 0, i32 10
  %116 = load float, float* %115, align 8
  %117 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %118 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %117, i32 0, i32 10
  store float %116, float* %118, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_point_transform(double %0, double %1, %struct.gs_matrix_s* %2, %struct.gs_point_s* %3) #0 {
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca %struct.gs_matrix_s*, align 8
  %8 = alloca %struct.gs_point_s*, align 8
  store double %0, double* %5, align 8
  store double %1, double* %6, align 8
  store %struct.gs_matrix_s* %2, %struct.gs_matrix_s** %7, align 8
  store %struct.gs_point_s* %3, %struct.gs_point_s** %8, align 8
  %9 = load double, double* %5, align 8
  %10 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %7, align 8
  %11 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %10, i32 0, i32 0
  %12 = load float, float* %11, align 8
  %13 = fpext float %12 to double
  %14 = fmul double %9, %13
  %15 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %7, align 8
  %16 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %15, i32 0, i32 8
  %17 = load float, float* %16, align 8
  %18 = fpext float %17 to double
  %19 = fadd double %14, %18
  %20 = fptrunc double %19 to float
  %21 = load %struct.gs_point_s*, %struct.gs_point_s** %8, align 8
  %22 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %21, i32 0, i32 0
  store float %20, float* %22, align 4
  %23 = load double, double* %6, align 8
  %24 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %7, align 8
  %25 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %24, i32 0, i32 6
  %26 = load float, float* %25, align 8
  %27 = fpext float %26 to double
  %28 = fmul double %23, %27
  %29 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %7, align 8
  %30 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %29, i32 0, i32 10
  %31 = load float, float* %30, align 8
  %32 = fpext float %31 to double
  %33 = fadd double %28, %32
  %34 = fptrunc double %33 to float
  %35 = load %struct.gs_point_s*, %struct.gs_point_s** %8, align 8
  %36 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %35, i32 0, i32 1
  store float %34, float* %36, align 4
  %37 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %7, align 8
  %38 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %37, i32 0, i32 4
  %39 = bitcast float* %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = shl i64 %40, 1
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %56, label %43

43:                                               ; preds = %4
  %44 = load double, double* %6, align 8
  %45 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %7, align 8
  %46 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %45, i32 0, i32 4
  %47 = load float, float* %46, align 8
  %48 = fpext float %47 to double
  %49 = fmul double %44, %48
  %50 = load %struct.gs_point_s*, %struct.gs_point_s** %8, align 8
  %51 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %50, i32 0, i32 0
  %52 = load float, float* %51, align 4
  %53 = fpext float %52 to double
  %54 = fadd double %53, %49
  %55 = fptrunc double %54 to float
  store float %55, float* %51, align 4
  br label %56

56:                                               ; preds = %43, %4
  %57 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %7, align 8
  %58 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %57, i32 0, i32 2
  %59 = bitcast float* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = shl i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %76, label %63

63:                                               ; preds = %56
  %64 = load double, double* %5, align 8
  %65 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %7, align 8
  %66 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %65, i32 0, i32 2
  %67 = load float, float* %66, align 8
  %68 = fpext float %67 to double
  %69 = fmul double %64, %68
  %70 = load %struct.gs_point_s*, %struct.gs_point_s** %8, align 8
  %71 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %70, i32 0, i32 1
  %72 = load float, float* %71, align 4
  %73 = fpext float %72 to double
  %74 = fadd double %73, %69
  %75 = fptrunc double %74 to float
  store float %75, float* %71, align 4
  br label %76

76:                                               ; preds = %63, %56
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_point_transform_inverse(double %0, double %1, %struct.gs_matrix_s* %2, %struct.gs_point_s* %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca %struct.gs_matrix_s*, align 8
  %9 = alloca %struct.gs_point_s*, align 8
  %10 = alloca %struct.gs_matrix_s, align 8
  %11 = alloca i32, align 4
  store double %0, double* %6, align 8
  store double %1, double* %7, align 8
  store %struct.gs_matrix_s* %2, %struct.gs_matrix_s** %8, align 8
  store %struct.gs_point_s* %3, %struct.gs_point_s** %9, align 8
  %12 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %8, align 8
  %13 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %12, i32 0, i32 2
  %14 = bitcast float* %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %8, align 8
  %17 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %16, i32 0, i32 4
  %18 = bitcast float* %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = or i64 %15, %19
  %21 = shl i64 %20, 1
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %23, label %52

23:                                               ; preds = %4
  %24 = load double, double* %6, align 8
  %25 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %8, align 8
  %26 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %25, i32 0, i32 8
  %27 = load float, float* %26, align 8
  %28 = fpext float %27 to double
  %29 = fsub double %24, %28
  %30 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %8, align 8
  %31 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %30, i32 0, i32 0
  %32 = load float, float* %31, align 8
  %33 = fpext float %32 to double
  %34 = fdiv double %29, %33
  %35 = fptrunc double %34 to float
  %36 = load %struct.gs_point_s*, %struct.gs_point_s** %9, align 8
  %37 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %36, i32 0, i32 0
  store float %35, float* %37, align 4
  %38 = load double, double* %7, align 8
  %39 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %8, align 8
  %40 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %39, i32 0, i32 10
  %41 = load float, float* %40, align 8
  %42 = fpext float %41 to double
  %43 = fsub double %38, %42
  %44 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %8, align 8
  %45 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %44, i32 0, i32 6
  %46 = load float, float* %45, align 8
  %47 = fpext float %46 to double
  %48 = fdiv double %43, %47
  %49 = fptrunc double %48 to float
  %50 = load %struct.gs_point_s*, %struct.gs_point_s** %9, align 8
  %51 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %50, i32 0, i32 1
  store float %49, float* %51, align 4
  store i32 0, i32* %5, align 4
  br label %64

52:                                               ; preds = %4
  %53 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %8, align 8
  %54 = call i32 @gs_matrix_invert(%struct.gs_matrix_s* %53, %struct.gs_matrix_s* %10)
  store i32 %54, i32* %11, align 4
  %55 = load i32, i32* %11, align 4
  %56 = icmp slt i32 %55, 0
  br i1 %56, label %57, label %59

57:                                               ; preds = %52
  %58 = load i32, i32* %11, align 4
  store i32 %58, i32* %5, align 4
  br label %64

59:                                               ; preds = %52
  %60 = load double, double* %6, align 8
  %61 = load double, double* %7, align 8
  %62 = load %struct.gs_point_s*, %struct.gs_point_s** %9, align 8
  %63 = call i32 @gs_point_transform(double %60, double %61, %struct.gs_matrix_s* %10, %struct.gs_point_s* %62)
  store i32 %63, i32* %5, align 4
  br label %64

64:                                               ; preds = %59, %57, %23
  %65 = load i32, i32* %5, align 4
  ret i32 %65
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_distance_transform(double %0, double %1, %struct.gs_matrix_s* %2, %struct.gs_point_s* %3) #0 {
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca %struct.gs_matrix_s*, align 8
  %8 = alloca %struct.gs_point_s*, align 8
  store double %0, double* %5, align 8
  store double %1, double* %6, align 8
  store %struct.gs_matrix_s* %2, %struct.gs_matrix_s** %7, align 8
  store %struct.gs_point_s* %3, %struct.gs_point_s** %8, align 8
  %9 = load double, double* %5, align 8
  %10 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %7, align 8
  %11 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %10, i32 0, i32 0
  %12 = load float, float* %11, align 8
  %13 = fpext float %12 to double
  %14 = fmul double %9, %13
  %15 = fptrunc double %14 to float
  %16 = load %struct.gs_point_s*, %struct.gs_point_s** %8, align 8
  %17 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %16, i32 0, i32 0
  store float %15, float* %17, align 4
  %18 = load double, double* %6, align 8
  %19 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %7, align 8
  %20 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %19, i32 0, i32 6
  %21 = load float, float* %20, align 8
  %22 = fpext float %21 to double
  %23 = fmul double %18, %22
  %24 = fptrunc double %23 to float
  %25 = load %struct.gs_point_s*, %struct.gs_point_s** %8, align 8
  %26 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %25, i32 0, i32 1
  store float %24, float* %26, align 4
  %27 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %7, align 8
  %28 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %27, i32 0, i32 4
  %29 = bitcast float* %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = shl i64 %30, 1
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %46, label %33

33:                                               ; preds = %4
  %34 = load double, double* %6, align 8
  %35 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %7, align 8
  %36 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %35, i32 0, i32 4
  %37 = load float, float* %36, align 8
  %38 = fpext float %37 to double
  %39 = fmul double %34, %38
  %40 = load %struct.gs_point_s*, %struct.gs_point_s** %8, align 8
  %41 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %40, i32 0, i32 0
  %42 = load float, float* %41, align 4
  %43 = fpext float %42 to double
  %44 = fadd double %43, %39
  %45 = fptrunc double %44 to float
  store float %45, float* %41, align 4
  br label %46

46:                                               ; preds = %33, %4
  %47 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %7, align 8
  %48 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %47, i32 0, i32 2
  %49 = bitcast float* %48 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = shl i64 %50, 1
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %66, label %53

53:                                               ; preds = %46
  %54 = load double, double* %5, align 8
  %55 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %7, align 8
  %56 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %55, i32 0, i32 2
  %57 = load float, float* %56, align 8
  %58 = fpext float %57 to double
  %59 = fmul double %54, %58
  %60 = load %struct.gs_point_s*, %struct.gs_point_s** %8, align 8
  %61 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %60, i32 0, i32 1
  %62 = load float, float* %61, align 4
  %63 = fpext float %62 to double
  %64 = fadd double %63, %59
  %65 = fptrunc double %64 to float
  store float %65, float* %61, align 4
  br label %66

66:                                               ; preds = %53, %46
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_distance_transform_inverse(double %0, double %1, %struct.gs_matrix_s* %2, %struct.gs_point_s* %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca %struct.gs_matrix_s*, align 8
  %9 = alloca %struct.gs_point_s*, align 8
  %10 = alloca double, align 8
  store double %0, double* %6, align 8
  store double %1, double* %7, align 8
  store %struct.gs_matrix_s* %2, %struct.gs_matrix_s** %8, align 8
  store %struct.gs_point_s* %3, %struct.gs_point_s** %9, align 8
  %11 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %8, align 8
  %12 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %11, i32 0, i32 2
  %13 = bitcast float* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %8, align 8
  %16 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %15, i32 0, i32 4
  %17 = bitcast float* %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = or i64 %14, %18
  %20 = shl i64 %19, 1
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %22, label %41

22:                                               ; preds = %4
  %23 = load double, double* %6, align 8
  %24 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %8, align 8
  %25 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %24, i32 0, i32 0
  %26 = load float, float* %25, align 8
  %27 = fpext float %26 to double
  %28 = fdiv double %23, %27
  %29 = fptrunc double %28 to float
  %30 = load %struct.gs_point_s*, %struct.gs_point_s** %9, align 8
  %31 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %30, i32 0, i32 0
  store float %29, float* %31, align 4
  %32 = load double, double* %7, align 8
  %33 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %8, align 8
  %34 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %33, i32 0, i32 6
  %35 = load float, float* %34, align 8
  %36 = fpext float %35 to double
  %37 = fdiv double %32, %36
  %38 = fptrunc double %37 to float
  %39 = load %struct.gs_point_s*, %struct.gs_point_s** %9, align 8
  %40 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %39, i32 0, i32 1
  store float %38, float* %40, align 4
  br label %98

41:                                               ; preds = %4
  %42 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %8, align 8
  %43 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %42, i32 0, i32 0
  %44 = load float, float* %43, align 8
  %45 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %8, align 8
  %46 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %45, i32 0, i32 6
  %47 = load float, float* %46, align 8
  %48 = fmul float %44, %47
  %49 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %8, align 8
  %50 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %49, i32 0, i32 2
  %51 = load float, float* %50, align 8
  %52 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %8, align 8
  %53 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %52, i32 0, i32 4
  %54 = load float, float* %53, align 8
  %55 = fmul float %51, %54
  %56 = fsub float %48, %55
  %57 = fpext float %56 to double
  store double %57, double* %10, align 8
  %58 = load double, double* %10, align 8
  %59 = fcmp oeq double %58, 0.000000e+00
  br i1 %59, label %60, label %61

60:                                               ; preds = %41
  store i32 -23, i32* %5, align 4
  br label %99

61:                                               ; preds = %41
  %62 = load double, double* %6, align 8
  %63 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %8, align 8
  %64 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %63, i32 0, i32 6
  %65 = load float, float* %64, align 8
  %66 = fpext float %65 to double
  %67 = fmul double %62, %66
  %68 = load double, double* %7, align 8
  %69 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %8, align 8
  %70 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %69, i32 0, i32 4
  %71 = load float, float* %70, align 8
  %72 = fpext float %71 to double
  %73 = fmul double %68, %72
  %74 = fsub double %67, %73
  %75 = load double, double* %10, align 8
  %76 = fdiv double %74, %75
  %77 = fptrunc double %76 to float
  %78 = load %struct.gs_point_s*, %struct.gs_point_s** %9, align 8
  %79 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %78, i32 0, i32 0
  store float %77, float* %79, align 4
  %80 = load double, double* %7, align 8
  %81 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %8, align 8
  %82 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %81, i32 0, i32 0
  %83 = load float, float* %82, align 8
  %84 = fpext float %83 to double
  %85 = fmul double %80, %84
  %86 = load double, double* %6, align 8
  %87 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %8, align 8
  %88 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %87, i32 0, i32 2
  %89 = load float, float* %88, align 8
  %90 = fpext float %89 to double
  %91 = fmul double %86, %90
  %92 = fsub double %85, %91
  %93 = load double, double* %10, align 8
  %94 = fdiv double %92, %93
  %95 = fptrunc double %94 to float
  %96 = load %struct.gs_point_s*, %struct.gs_point_s** %9, align 8
  %97 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %96, i32 0, i32 1
  store float %95, float* %97, align 4
  br label %98

98:                                               ; preds = %61, %22
  store i32 0, i32* %5, align 4
  br label %99

99:                                               ; preds = %98, %60
  %100 = load i32, i32* %5, align 4
  ret i32 %100
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_bbox_transform_inverse(%struct.gs_rect_s* %0, %struct.gs_matrix_s* %1, %struct.gs_rect_s* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.gs_rect_s*, align 8
  %6 = alloca %struct.gs_matrix_s*, align 8
  %7 = alloca %struct.gs_rect_s*, align 8
  %8 = alloca i32, align 4
  %9 = alloca %struct.gs_point_s, align 4
  %10 = alloca %struct.gs_point_s, align 4
  %11 = alloca %struct.gs_point_s, align 4
  %12 = alloca float, align 4
  %13 = alloca float, align 4
  %14 = alloca float, align 4
  %15 = alloca float, align 4
  store %struct.gs_rect_s* %0, %struct.gs_rect_s** %5, align 8
  store %struct.gs_matrix_s* %1, %struct.gs_matrix_s** %6, align 8
  store %struct.gs_rect_s* %2, %struct.gs_rect_s** %7, align 8
  %16 = load %struct.gs_rect_s*, %struct.gs_rect_s** %5, align 8
  %17 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %16, i32 0, i32 0
  %18 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %17, i32 0, i32 0
  %19 = load float, float* %18, align 4
  %20 = fpext float %19 to double
  %21 = load %struct.gs_rect_s*, %struct.gs_rect_s** %5, align 8
  %22 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %21, i32 0, i32 0
  %23 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %22, i32 0, i32 1
  %24 = load float, float* %23, align 4
  %25 = fpext float %24 to double
  %26 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %27 = call i32 @gs_point_transform_inverse(double %20, double %25, %struct.gs_matrix_s* %26, %struct.gs_point_s* %9)
  store i32 %27, i32* %8, align 4
  %28 = icmp slt i32 %27, 0
  br i1 %28, label %57, label %29

29:                                               ; preds = %3
  %30 = load %struct.gs_rect_s*, %struct.gs_rect_s** %5, align 8
  %31 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %30, i32 0, i32 1
  %32 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %31, i32 0, i32 0
  %33 = load float, float* %32, align 4
  %34 = load %struct.gs_rect_s*, %struct.gs_rect_s** %5, align 8
  %35 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %34, i32 0, i32 0
  %36 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %35, i32 0, i32 0
  %37 = load float, float* %36, align 4
  %38 = fsub float %33, %37
  %39 = fpext float %38 to double
  %40 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %41 = call i32 @gs_distance_transform_inverse(double %39, double 0.000000e+00, %struct.gs_matrix_s* %40, %struct.gs_point_s* %10)
  store i32 %41, i32* %8, align 4
  %42 = icmp slt i32 %41, 0
  br i1 %42, label %57, label %43

43:                                               ; preds = %29
  %44 = load %struct.gs_rect_s*, %struct.gs_rect_s** %5, align 8
  %45 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %44, i32 0, i32 1
  %46 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %45, i32 0, i32 1
  %47 = load float, float* %46, align 4
  %48 = load %struct.gs_rect_s*, %struct.gs_rect_s** %5, align 8
  %49 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %48, i32 0, i32 0
  %50 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %49, i32 0, i32 1
  %51 = load float, float* %50, align 4
  %52 = fsub float %47, %51
  %53 = fpext float %52 to double
  %54 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %55 = call i32 @gs_distance_transform_inverse(double 0.000000e+00, double %53, %struct.gs_matrix_s* %54, %struct.gs_point_s* %11)
  store i32 %55, i32* %8, align 4
  %56 = icmp slt i32 %55, 0
  br i1 %56, label %57, label %59

57:                                               ; preds = %43, %29, %3
  %58 = load i32, i32* %8, align 4
  store i32 %58, i32* %4, align 4
  br label %136

59:                                               ; preds = %43
  %60 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %9, i32 0, i32 0
  %61 = load float, float* %60, align 4
  store float %61, float* %14, align 4
  store float %61, float* %12, align 4
  %62 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %10, i32 0, i32 0
  %63 = load float, float* %62, align 4
  %64 = fcmp olt float %63, 0.000000e+00
  br i1 %64, label %65, label %70

65:                                               ; preds = %59
  %66 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %10, i32 0, i32 0
  %67 = load float, float* %66, align 4
  %68 = load float, float* %12, align 4
  %69 = fadd float %68, %67
  store float %69, float* %12, align 4
  br label %75

70:                                               ; preds = %59
  %71 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %10, i32 0, i32 0
  %72 = load float, float* %71, align 4
  %73 = load float, float* %14, align 4
  %74 = fadd float %73, %72
  store float %74, float* %14, align 4
  br label %75

75:                                               ; preds = %70, %65
  %76 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %11, i32 0, i32 0
  %77 = load float, float* %76, align 4
  %78 = fcmp olt float %77, 0.000000e+00
  br i1 %78, label %79, label %84

79:                                               ; preds = %75
  %80 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %11, i32 0, i32 0
  %81 = load float, float* %80, align 4
  %82 = load float, float* %12, align 4
  %83 = fadd float %82, %81
  store float %83, float* %12, align 4
  br label %89

84:                                               ; preds = %75
  %85 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %11, i32 0, i32 0
  %86 = load float, float* %85, align 4
  %87 = load float, float* %14, align 4
  %88 = fadd float %87, %86
  store float %88, float* %14, align 4
  br label %89

89:                                               ; preds = %84, %79
  %90 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %9, i32 0, i32 1
  %91 = load float, float* %90, align 4
  store float %91, float* %15, align 4
  store float %91, float* %13, align 4
  %92 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %10, i32 0, i32 1
  %93 = load float, float* %92, align 4
  %94 = fcmp olt float %93, 0.000000e+00
  br i1 %94, label %95, label %100

95:                                               ; preds = %89
  %96 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %10, i32 0, i32 1
  %97 = load float, float* %96, align 4
  %98 = load float, float* %13, align 4
  %99 = fadd float %98, %97
  store float %99, float* %13, align 4
  br label %105

100:                                              ; preds = %89
  %101 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %10, i32 0, i32 1
  %102 = load float, float* %101, align 4
  %103 = load float, float* %15, align 4
  %104 = fadd float %103, %102
  store float %104, float* %15, align 4
  br label %105

105:                                              ; preds = %100, %95
  %106 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %11, i32 0, i32 1
  %107 = load float, float* %106, align 4
  %108 = fcmp olt float %107, 0.000000e+00
  br i1 %108, label %109, label %114

109:                                              ; preds = %105
  %110 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %11, i32 0, i32 1
  %111 = load float, float* %110, align 4
  %112 = load float, float* %13, align 4
  %113 = fadd float %112, %111
  store float %113, float* %13, align 4
  br label %119

114:                                              ; preds = %105
  %115 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %11, i32 0, i32 1
  %116 = load float, float* %115, align 4
  %117 = load float, float* %15, align 4
  %118 = fadd float %117, %116
  store float %118, float* %15, align 4
  br label %119

119:                                              ; preds = %114, %109
  %120 = load float, float* %12, align 4
  %121 = load %struct.gs_rect_s*, %struct.gs_rect_s** %7, align 8
  %122 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %121, i32 0, i32 0
  %123 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %122, i32 0, i32 0
  store float %120, float* %123, align 4
  %124 = load float, float* %13, align 4
  %125 = load %struct.gs_rect_s*, %struct.gs_rect_s** %7, align 8
  %126 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %125, i32 0, i32 0
  %127 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %126, i32 0, i32 1
  store float %124, float* %127, align 4
  %128 = load float, float* %14, align 4
  %129 = load %struct.gs_rect_s*, %struct.gs_rect_s** %7, align 8
  %130 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %129, i32 0, i32 1
  %131 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %130, i32 0, i32 0
  store float %128, float* %131, align 4
  %132 = load float, float* %15, align 4
  %133 = load %struct.gs_rect_s*, %struct.gs_rect_s** %7, align 8
  %134 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %133, i32 0, i32 1
  %135 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %134, i32 0, i32 1
  store float %132, float* %135, align 4
  store i32 0, i32* %4, align 4
  br label %136

136:                                              ; preds = %119, %57
  %137 = load i32, i32* %4, align 4
  ret i32 %137
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_point_transform2fixed(%struct.gs_matrix_fixed_s* %0, double %1, double %2, %struct.timeval* %3) #0 {
  %5 = alloca %struct.gs_matrix_fixed_s*, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca %struct.timeval*, align 8
  store %struct.gs_matrix_fixed_s* %0, %struct.gs_matrix_fixed_s** %5, align 8
  store double %1, double* %6, align 8
  store double %2, double* %7, align 8
  store %struct.timeval* %3, %struct.timeval** %8, align 8
  %9 = load double, double* %6, align 8
  %10 = load %struct.gs_matrix_fixed_s*, %struct.gs_matrix_fixed_s** %5, align 8
  %11 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %10, i32 0, i32 0
  %12 = load float, float* %11, align 8
  %13 = fpext float %12 to double
  %14 = fmul double %9, %13
  %15 = fmul double %14, 4.096000e+03
  %16 = fptosi double %15 to i64
  %17 = load %struct.gs_matrix_fixed_s*, %struct.gs_matrix_fixed_s** %5, align 8
  %18 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %17, i32 0, i32 12
  %19 = load i64, i64* %18, align 8
  %20 = add nsw i64 %16, %19
  %21 = load %struct.timeval*, %struct.timeval** %8, align 8
  %22 = getelementptr inbounds %struct.timeval, %struct.timeval* %21, i32 0, i32 0
  store i64 %20, i64* %22, align 8
  %23 = load double, double* %7, align 8
  %24 = load %struct.gs_matrix_fixed_s*, %struct.gs_matrix_fixed_s** %5, align 8
  %25 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %24, i32 0, i32 6
  %26 = load float, float* %25, align 8
  %27 = fpext float %26 to double
  %28 = fmul double %23, %27
  %29 = fmul double %28, 4.096000e+03
  %30 = fptosi double %29 to i64
  %31 = load %struct.gs_matrix_fixed_s*, %struct.gs_matrix_fixed_s** %5, align 8
  %32 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %31, i32 0, i32 13
  %33 = load i64, i64* %32, align 8
  %34 = add nsw i64 %30, %33
  %35 = load %struct.timeval*, %struct.timeval** %8, align 8
  %36 = getelementptr inbounds %struct.timeval, %struct.timeval* %35, i32 0, i32 1
  store i64 %34, i64* %36, align 8
  %37 = load %struct.gs_matrix_fixed_s*, %struct.gs_matrix_fixed_s** %5, align 8
  %38 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %37, i32 0, i32 4
  %39 = bitcast float* %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = shl i64 %40, 1
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %56, label %43

43:                                               ; preds = %4
  %44 = load double, double* %7, align 8
  %45 = load %struct.gs_matrix_fixed_s*, %struct.gs_matrix_fixed_s** %5, align 8
  %46 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %45, i32 0, i32 4
  %47 = load float, float* %46, align 8
  %48 = fpext float %47 to double
  %49 = fmul double %44, %48
  %50 = fmul double %49, 4.096000e+03
  %51 = fptosi double %50 to i64
  %52 = load %struct.timeval*, %struct.timeval** %8, align 8
  %53 = getelementptr inbounds %struct.timeval, %struct.timeval* %52, i32 0, i32 0
  %54 = load i64, i64* %53, align 8
  %55 = add nsw i64 %54, %51
  store i64 %55, i64* %53, align 8
  br label %56

56:                                               ; preds = %43, %4
  %57 = load %struct.gs_matrix_fixed_s*, %struct.gs_matrix_fixed_s** %5, align 8
  %58 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %57, i32 0, i32 2
  %59 = bitcast float* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = shl i64 %60, 1
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %76, label %63

63:                                               ; preds = %56
  %64 = load double, double* %6, align 8
  %65 = load %struct.gs_matrix_fixed_s*, %struct.gs_matrix_fixed_s** %5, align 8
  %66 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %65, i32 0, i32 2
  %67 = load float, float* %66, align 8
  %68 = fpext float %67 to double
  %69 = fmul double %64, %68
  %70 = fmul double %69, 4.096000e+03
  %71 = fptosi double %70 to i64
  %72 = load %struct.timeval*, %struct.timeval** %8, align 8
  %73 = getelementptr inbounds %struct.timeval, %struct.timeval* %72, i32 0, i32 1
  %74 = load i64, i64* %73, align 8
  %75 = add nsw i64 %74, %71
  store i64 %75, i64* %73, align 8
  br label %76

76:                                               ; preds = %63, %56
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_distance_transform2fixed(%struct.gs_matrix_fixed_s* %0, double %1, double %2, %struct.timeval* %3) #0 {
  %5 = alloca %struct.gs_matrix_fixed_s*, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca %struct.timeval*, align 8
  store %struct.gs_matrix_fixed_s* %0, %struct.gs_matrix_fixed_s** %5, align 8
  store double %1, double* %6, align 8
  store double %2, double* %7, align 8
  store %struct.timeval* %3, %struct.timeval** %8, align 8
  %9 = load double, double* %6, align 8
  %10 = load %struct.gs_matrix_fixed_s*, %struct.gs_matrix_fixed_s** %5, align 8
  %11 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %10, i32 0, i32 0
  %12 = load float, float* %11, align 8
  %13 = fpext float %12 to double
  %14 = fmul double %9, %13
  %15 = fmul double %14, 4.096000e+03
  %16 = fptosi double %15 to i64
  %17 = load %struct.timeval*, %struct.timeval** %8, align 8
  %18 = getelementptr inbounds %struct.timeval, %struct.timeval* %17, i32 0, i32 0
  store i64 %16, i64* %18, align 8
  %19 = load double, double* %7, align 8
  %20 = load %struct.gs_matrix_fixed_s*, %struct.gs_matrix_fixed_s** %5, align 8
  %21 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %20, i32 0, i32 6
  %22 = load float, float* %21, align 8
  %23 = fpext float %22 to double
  %24 = fmul double %19, %23
  %25 = fmul double %24, 4.096000e+03
  %26 = fptosi double %25 to i64
  %27 = load %struct.timeval*, %struct.timeval** %8, align 8
  %28 = getelementptr inbounds %struct.timeval, %struct.timeval* %27, i32 0, i32 1
  store i64 %26, i64* %28, align 8
  %29 = load %struct.gs_matrix_fixed_s*, %struct.gs_matrix_fixed_s** %5, align 8
  %30 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %29, i32 0, i32 4
  %31 = bitcast float* %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = shl i64 %32, 1
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %48, label %35

35:                                               ; preds = %4
  %36 = load double, double* %7, align 8
  %37 = load %struct.gs_matrix_fixed_s*, %struct.gs_matrix_fixed_s** %5, align 8
  %38 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %37, i32 0, i32 4
  %39 = load float, float* %38, align 8
  %40 = fpext float %39 to double
  %41 = fmul double %36, %40
  %42 = fmul double %41, 4.096000e+03
  %43 = fptosi double %42 to i64
  %44 = load %struct.timeval*, %struct.timeval** %8, align 8
  %45 = getelementptr inbounds %struct.timeval, %struct.timeval* %44, i32 0, i32 0
  %46 = load i64, i64* %45, align 8
  %47 = add nsw i64 %46, %43
  store i64 %47, i64* %45, align 8
  br label %48

48:                                               ; preds = %35, %4
  %49 = load %struct.gs_matrix_fixed_s*, %struct.gs_matrix_fixed_s** %5, align 8
  %50 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %49, i32 0, i32 2
  %51 = bitcast float* %50 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = shl i64 %52, 1
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %68, label %55

55:                                               ; preds = %48
  %56 = load double, double* %6, align 8
  %57 = load %struct.gs_matrix_fixed_s*, %struct.gs_matrix_fixed_s** %5, align 8
  %58 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %57, i32 0, i32 2
  %59 = load float, float* %58, align 8
  %60 = fpext float %59 to double
  %61 = fmul double %56, %60
  %62 = fmul double %61, 4.096000e+03
  %63 = fptosi double %62 to i64
  %64 = load %struct.timeval*, %struct.timeval** %8, align 8
  %65 = getelementptr inbounds %struct.timeval, %struct.timeval* %64, i32 0, i32 1
  %66 = load i64, i64* %65, align 8
  %67 = add nsw i64 %66, %63
  store i64 %67, i64* %65, align 8
  br label %68

68:                                               ; preds = %55, %48
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @gs_malloc(i32 %0, i32 %1, i8* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store i8* %2, i8** %6, align 8
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %5, align 4
  %10 = mul i32 %8, %9
  %11 = zext i32 %10 to i64
  %12 = call noalias i8* @malloc(i64 %11) #9
  store i8* %12, i8** %7, align 8
  %13 = load i8*, i8** %7, align 8
  %14 = icmp eq i8* %13, null
  br i1 %14, label %15, label %21

15:                                               ; preds = %3
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.86, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1.87, i64 0, i64 0), i32 42)
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %19 = load i8*, i8** %6, align 8
  %20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %18, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2.88, i64 0, i64 0), i8* %19)
  br label %21

21:                                               ; preds = %15, %3
  %22 = load i8*, i8** %7, align 8
  ret i8* %22
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @gs_free(i8* %0, i32 %1, i32 %2, i8* %3) #0 {
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  store i8* %0, i8** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store i8* %3, i8** %8, align 8
  %9 = load i8*, i8** %5, align 8
  call void @free(i8* %9) #9
  ret void
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_erasepage(%struct.gs_state_s* %0) #0 {
  %2 = alloca %struct.gs_state_s*, align 8
  %3 = alloca %struct.device_s*, align 8
  %4 = alloca %struct.gx_device_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %2, align 8
  %5 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %6 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %5, i32 0, i32 22
  %7 = load %struct.device_s*, %struct.device_s** %6, align 8
  store %struct.device_s* %7, %struct.device_s** %3, align 8
  %8 = load %struct.device_s*, %struct.device_s** %3, align 8
  %9 = getelementptr inbounds %struct.device_s, %struct.device_s* %8, i32 0, i32 0
  %10 = load %struct.gx_device_s*, %struct.gx_device_s** %9, align 8
  store %struct.gx_device_s* %10, %struct.gx_device_s** %4, align 8
  %11 = load %struct.gx_device_s*, %struct.gx_device_s** %4, align 8
  %12 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %11, i32 0, i32 1
  %13 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %12, align 8
  %14 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %13, i32 0, i32 7
  %15 = load i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)** %14, align 8
  %16 = load %struct.gx_device_s*, %struct.gx_device_s** %4, align 8
  %17 = load %struct.gx_device_s*, %struct.gx_device_s** %4, align 8
  %18 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %17, i32 0, i32 3
  %19 = load i32, i32* %18, align 8
  %20 = load %struct.gx_device_s*, %struct.gx_device_s** %4, align 8
  %21 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %20, i32 0, i32 4
  %22 = load i32, i32* %21, align 4
  %23 = load %struct.device_s*, %struct.device_s** %3, align 8
  %24 = getelementptr inbounds %struct.device_s, %struct.device_s* %23, i32 0, i32 2
  %25 = load i64, i64* %24, align 8
  %26 = call i32 %15(%struct.gx_device_s* %16, i32 0, i32 0, i32 %19, i32 %22, i64 %25)
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_fill(%struct.gs_state_s* %0) #0 {
  %2 = alloca %struct.gs_state_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %4 = call i32 @gs_fill_trim(%struct.gs_state_s* %3, i64 0)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_fill_trim(%struct.gs_state_s* %0, i64 %1) #0 {
  %3 = alloca %struct.gs_state_s*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  store %struct.gs_state_s* %0, %struct.gs_state_s** %3, align 8
  store i64 %1, i64* %4, align 8
  %6 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %7 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %6, i32 0, i32 20
  %8 = load i8, i8* %7, align 1
  %9 = icmp ne i8 %8, 0
  br i1 %9, label %10, label %20

10:                                               ; preds = %2
  %11 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %12 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %11, i32 0, i32 7
  %13 = load %struct.gx_path_s*, %struct.gx_path_s** %12, align 8
  %14 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %15 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %14, i32 0, i32 0
  %16 = load %struct.gs_state_s*, %struct.gs_state_s** %15, align 8
  %17 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %16, i32 0, i32 7
  %18 = load %struct.gx_path_s*, %struct.gx_path_s** %17, align 8
  %19 = call i32 @gx_path_merge(%struct.gx_path_s* %13, %struct.gx_path_s* %18)
  store i32 %19, i32* %5, align 4
  br label %38

20:                                               ; preds = %2
  %21 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %22 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %21, i32 0, i32 13
  %23 = load %struct.gs_color_s*, %struct.gs_color_s** %22, align 8
  %24 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %25 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %24, i32 0, i32 14
  %26 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %25, align 8
  %27 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %28 = call i32 (%struct.gs_color_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, ...) bitcast (void (%struct.gs_color_s*, %struct.gx_device_color_s*, %struct.gs_state_s*)* @gx_color_render to i32 (%struct.gs_color_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, ...)*)(%struct.gs_color_s* %23, %struct.gx_device_color_s* %26, %struct.gs_state_s* %27)
  %29 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %30 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %29, i32 0, i32 7
  %31 = load %struct.gx_path_s*, %struct.gx_path_s** %30, align 8
  %32 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %33 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %32, i32 0, i32 14
  %34 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %33, align 8
  %35 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %36 = load i64, i64* %4, align 8
  %37 = call i32 (%struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, i32, i64, ...) bitcast (i32 (%struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, i32, i64)* @gx_fill_path to i32 (%struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, i32, i64, ...)*)(%struct.gx_path_s* %31, %struct.gx_device_color_s* %34, %struct.gs_state_s* %35, i32 -1, i64 %36)
  store i32 %37, i32* %5, align 4
  br label %38

38:                                               ; preds = %20, %10
  %39 = load i32, i32* %5, align 4
  %40 = icmp ne i32 %39, 0
  br i1 %40, label %44, label %41

41:                                               ; preds = %38
  %42 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %43 = call i32 (%struct.gs_state_s*, ...) bitcast (i32 (%struct.gs_state_s*)* @gs_newpath to i32 (%struct.gs_state_s*, ...)*)(%struct.gs_state_s* %42)
  br label %44

44:                                               ; preds = %41, %38
  %45 = load i32, i32* %5, align 4
  ret i32 %45
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_eofill(%struct.gs_state_s* %0) #0 {
  %2 = alloca %struct.gs_state_s*, align 8
  %3 = alloca i32, align 4
  store %struct.gs_state_s* %0, %struct.gs_state_s** %2, align 8
  %4 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %5 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %4, i32 0, i32 13
  %6 = load %struct.gs_color_s*, %struct.gs_color_s** %5, align 8
  %7 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %8 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %7, i32 0, i32 14
  %9 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %8, align 8
  %10 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %11 = call i32 (%struct.gs_color_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, ...) bitcast (void (%struct.gs_color_s*, %struct.gx_device_color_s*, %struct.gs_state_s*)* @gx_color_render to i32 (%struct.gs_color_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, ...)*)(%struct.gs_color_s* %6, %struct.gx_device_color_s* %9, %struct.gs_state_s* %10)
  %12 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %13 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %12, i32 0, i32 20
  %14 = load i8, i8* %13, align 1
  %15 = icmp ne i8 %14, 0
  br i1 %15, label %16, label %26

16:                                               ; preds = %1
  %17 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %18 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %17, i32 0, i32 7
  %19 = load %struct.gx_path_s*, %struct.gx_path_s** %18, align 8
  %20 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %21 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %20, i32 0, i32 0
  %22 = load %struct.gs_state_s*, %struct.gs_state_s** %21, align 8
  %23 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %22, i32 0, i32 7
  %24 = load %struct.gx_path_s*, %struct.gx_path_s** %23, align 8
  %25 = call i32 @gx_path_merge(%struct.gx_path_s* %19, %struct.gx_path_s* %24)
  store i32 %25, i32* %3, align 4
  br label %43

26:                                               ; preds = %1
  %27 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %28 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %27, i32 0, i32 13
  %29 = load %struct.gs_color_s*, %struct.gs_color_s** %28, align 8
  %30 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %31 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %30, i32 0, i32 14
  %32 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %31, align 8
  %33 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %34 = call i32 (%struct.gs_color_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, ...) bitcast (void (%struct.gs_color_s*, %struct.gx_device_color_s*, %struct.gs_state_s*)* @gx_color_render to i32 (%struct.gs_color_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, ...)*)(%struct.gs_color_s* %29, %struct.gx_device_color_s* %32, %struct.gs_state_s* %33)
  %35 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %36 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %35, i32 0, i32 7
  %37 = load %struct.gx_path_s*, %struct.gx_path_s** %36, align 8
  %38 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %39 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %38, i32 0, i32 14
  %40 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %39, align 8
  %41 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %42 = call i32 (%struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, i32, i64, ...) bitcast (i32 (%struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, i32, i64)* @gx_fill_path to i32 (%struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, i32, i64, ...)*)(%struct.gx_path_s* %37, %struct.gx_device_color_s* %40, %struct.gs_state_s* %41, i32 1, i64 0)
  store i32 %42, i32* %3, align 4
  br label %43

43:                                               ; preds = %26, %16
  %44 = load i32, i32* %3, align 4
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %49, label %46

46:                                               ; preds = %43
  %47 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %48 = call i32 (%struct.gs_state_s*, ...) bitcast (i32 (%struct.gs_state_s*)* @gs_newpath to i32 (%struct.gs_state_s*, ...)*)(%struct.gs_state_s* %47)
  br label %49

49:                                               ; preds = %46, %43
  %50 = load i32, i32* %3, align 4
  ret i32 %50
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_stroke(%struct.gs_state_s* %0) #0 {
  %2 = alloca %struct.gs_state_s*, align 8
  %3 = alloca i32, align 4
  store %struct.gs_state_s* %0, %struct.gs_state_s** %2, align 8
  %4 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %5 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %4, i32 0, i32 20
  %6 = load i8, i8* %5, align 1
  %7 = icmp ne i8 %6, 0
  br i1 %7, label %8, label %18

8:                                                ; preds = %1
  %9 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %10 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %9, i32 0, i32 7
  %11 = load %struct.gx_path_s*, %struct.gx_path_s** %10, align 8
  %12 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %13 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %12, i32 0, i32 0
  %14 = load %struct.gs_state_s*, %struct.gs_state_s** %13, align 8
  %15 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %14, i32 0, i32 7
  %16 = load %struct.gx_path_s*, %struct.gx_path_s** %15, align 8
  %17 = call i32 @gx_path_merge(%struct.gx_path_s* %11, %struct.gx_path_s* %16)
  store i32 %17, i32* %3, align 4
  br label %32

18:                                               ; preds = %1
  %19 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %20 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %19, i32 0, i32 13
  %21 = load %struct.gs_color_s*, %struct.gs_color_s** %20, align 8
  %22 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %23 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %22, i32 0, i32 14
  %24 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %23, align 8
  %25 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %26 = call i32 (%struct.gs_color_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, ...) bitcast (void (%struct.gs_color_s*, %struct.gx_device_color_s*, %struct.gs_state_s*)* @gx_color_render to i32 (%struct.gs_color_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, ...)*)(%struct.gs_color_s* %21, %struct.gx_device_color_s* %24, %struct.gs_state_s* %25)
  %27 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %28 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %27, i32 0, i32 7
  %29 = load %struct.gx_path_s*, %struct.gx_path_s** %28, align 8
  %30 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %31 = call i32 (%struct.gx_path_s*, %struct.gs_state_s*, ...) bitcast (i32 (%struct.gx_path_s*, %struct.gs_state_s*)* @gx_stroke_fill to i32 (%struct.gx_path_s*, %struct.gs_state_s*, ...)*)(%struct.gx_path_s* %29, %struct.gs_state_s* %30)
  store i32 %31, i32* %3, align 4
  br label %32

32:                                               ; preds = %18, %8
  %33 = load i32, i32* %3, align 4
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %38, label %35

35:                                               ; preds = %32
  %36 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %37 = call i32 (%struct.gs_state_s*, ...) bitcast (i32 (%struct.gs_state_s*)* @gs_newpath to i32 (%struct.gs_state_s*, ...)*)(%struct.gs_state_s* %36)
  br label %38

38:                                               ; preds = %35, %32
  %39 = load i32, i32* %3, align 4
  ret i32 %39
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_strokepath(%struct.gs_state_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.gs_state_s*, align 8
  %4 = alloca %struct.gx_path_s, align 8
  %5 = alloca i32, align 4
  store %struct.gs_state_s* %0, %struct.gs_state_s** %3, align 8
  %6 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %7 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %6, i32 0, i32 1
  call void @gx_path_init(%struct.gx_path_s* %4, %struct.gs_memory_procs* %7)
  %8 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %9 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %8, i32 0, i32 7
  %10 = load %struct.gx_path_s*, %struct.gx_path_s** %9, align 8
  %11 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %12 = call i32 (%struct.gx_path_s*, %struct.gx_path_s*, %struct.gs_state_s*, ...) bitcast (i32 (%struct.gx_path_s*, %struct.gx_path_s*, %struct.gs_state_s*)* @gx_stroke_add to i32 (%struct.gx_path_s*, %struct.gx_path_s*, %struct.gs_state_s*, ...)*)(%struct.gx_path_s* %10, %struct.gx_path_s* %4, %struct.gs_state_s* %11)
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %5, align 4
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %1
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  br label %26

17:                                               ; preds = %1
  %18 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %19 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %18, i32 0, i32 7
  %20 = load %struct.gx_path_s*, %struct.gx_path_s** %19, align 8
  call void @gx_path_release(%struct.gx_path_s* %20)
  %21 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %22 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %21, i32 0, i32 7
  %23 = load %struct.gx_path_s*, %struct.gx_path_s** %22, align 8
  %24 = bitcast %struct.gx_path_s* %23 to i8*
  %25 = bitcast %struct.gx_path_s* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %25, i64 144, i1 false)
  store i32 0, i32* %2, align 4
  br label %26

26:                                               ; preds = %17, %15
  %27 = load i32, i32* %2, align 4
  ret i32 %27
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_colorimage(%struct.gs_state_s* %0, i32 %1, i32 %2, i32 %3, i32 %4, %struct.gs_matrix_s* %5, i8* %6) #0 {
  %8 = alloca i32, align 4
  %9 = alloca %struct.gs_state_s*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %struct.gs_matrix_s*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca %struct.gs_image_enum_s, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i8*, align 8
  %21 = alloca i32, align 4
  store %struct.gs_state_s* %0, %struct.gs_state_s** %9, align 8
  store i32 %1, i32* %10, align 4
  store i32 %2, i32* %11, align 4
  store i32 %3, i32* %12, align 4
  store i32 %4, i32* %13, align 4
  store %struct.gs_matrix_s* %5, %struct.gs_matrix_s** %14, align 8
  store i8* %6, i8** %15, align 8
  %22 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  %23 = load i32, i32* %10, align 4
  %24 = load i32, i32* %11, align 4
  %25 = load i32, i32* %12, align 4
  %26 = load i32, i32* %13, align 4
  %27 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %14, align 8
  %28 = call i32 @gs_image_init(%struct.gs_image_enum_s* %16, %struct.gs_state_s* %22, i32 %23, i32 %24, i32 %25, i32 %26, %struct.gs_matrix_s* %27)
  store i32 %28, i32* %17, align 4
  %29 = icmp slt i32 %28, 0
  br i1 %29, label %30, label %32

30:                                               ; preds = %7
  %31 = load i32, i32* %17, align 4
  store i32 %31, i32* %8, align 4
  br label %84

32:                                               ; preds = %7
  %33 = load i32, i32* %13, align 4
  %34 = icmp sgt i32 %33, 0
  br i1 %34, label %35, label %48

35:                                               ; preds = %32
  %36 = load i32, i32* %10, align 4
  %37 = load i32, i32* %12, align 4
  %38 = mul i32 %36, %37
  %39 = load i32, i32* %13, align 4
  %40 = mul i32 %38, %39
  %41 = add i32 %40, 7
  %42 = lshr i32 %41, 3
  %43 = load i32, i32* %11, align 4
  %44 = mul i32 %42, %43
  store i32 %44, i32* %18, align 4
  %45 = load i8*, i8** %15, align 8
  %46 = load i32, i32* %18, align 4
  %47 = call i32 @gs_image_next(%struct.gs_image_enum_s* %16, i8* %45, i32 %46)
  store i32 %47, i32* %17, align 4
  br label %76

48:                                               ; preds = %32
  %49 = load i32, i32* %10, align 4
  %50 = load i32, i32* %12, align 4
  %51 = mul i32 %49, %50
  %52 = add i32 %51, 7
  %53 = lshr i32 %52, 3
  %54 = load i32, i32* %11, align 4
  %55 = mul i32 %53, %54
  store i32 %55, i32* %19, align 4
  %56 = load i8*, i8** %15, align 8
  store i8* %56, i8** %20, align 8
  %57 = load i32, i32* %13, align 4
  store i32 %57, i32* %21, align 4
  br label %58

58:                                               ; preds = %71, %48
  %59 = load i8*, i8** %20, align 8
  %60 = load i32, i32* %19, align 4
  %61 = call i32 @gs_image_next(%struct.gs_image_enum_s* %16, i8* %59, i32 %60)
  store i32 %61, i32* %17, align 4
  %62 = load i32, i32* %17, align 4
  %63 = icmp slt i32 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %58
  %65 = load i32, i32* %17, align 4
  store i32 %65, i32* %8, align 4
  br label %84

66:                                               ; preds = %58
  %67 = load i32, i32* %19, align 4
  %68 = load i8*, i8** %20, align 8
  %69 = zext i32 %67 to i64
  %70 = getelementptr inbounds i8, i8* %68, i64 %69
  store i8* %70, i8** %20, align 8
  br label %71

71:                                               ; preds = %66
  %72 = load i32, i32* %21, align 4
  %73 = add nsw i32 %72, 1
  store i32 %73, i32* %21, align 4
  %74 = icmp ne i32 %73, 0
  br i1 %74, label %58, label %75

75:                                               ; preds = %71
  br label %76

76:                                               ; preds = %75, %35
  %77 = load i32, i32* %17, align 4
  %78 = icmp slt i32 %77, 0
  br i1 %78, label %79, label %81

79:                                               ; preds = %76
  %80 = load i32, i32* %17, align 4
  br label %82

81:                                               ; preds = %76
  br label %82

82:                                               ; preds = %81, %79
  %83 = phi i32 [ %80, %79 ], [ 0, %81 ]
  store i32 %83, i32* %8, align 4
  br label %84

84:                                               ; preds = %82, %64, %30
  %85 = load i32, i32* %8, align 4
  ret i32 %85
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_image(%struct.gs_state_s* %0, i32 %1, i32 %2, i32 %3, %struct.gs_matrix_s* %4, i8* %5) #0 {
  %7 = alloca %struct.gs_state_s*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca %struct.gs_matrix_s*, align 8
  %12 = alloca i8*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %7, align 8
  store i32 %1, i32* %8, align 4
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store %struct.gs_matrix_s* %4, %struct.gs_matrix_s** %11, align 8
  store i8* %5, i8** %12, align 8
  %13 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  %14 = load i32, i32* %8, align 4
  %15 = load i32, i32* %9, align 4
  %16 = load i32, i32* %10, align 4
  %17 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %11, align 8
  %18 = load i8*, i8** %12, align 8
  %19 = call i32 @gs_colorimage(%struct.gs_state_s* %13, i32 %14, i32 %15, i32 %16, i32 1, %struct.gs_matrix_s* %17, i8* %18)
  ret i32 %19
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_imagemask(%struct.gs_state_s* %0, i32 %1, i32 %2, i32 %3, %struct.gs_matrix_s* %4, i8* %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca %struct.gs_state_s*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca %struct.gs_matrix_s*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca %struct.gs_image_enum_s, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  store %struct.gs_state_s* %0, %struct.gs_state_s** %8, align 8
  store i32 %1, i32* %9, align 4
  store i32 %2, i32* %10, align 4
  store i32 %3, i32* %11, align 4
  store %struct.gs_matrix_s* %4, %struct.gs_matrix_s** %12, align 8
  store i8* %5, i8** %13, align 8
  %17 = load i32, i32* %9, align 4
  %18 = add i32 %17, 7
  %19 = lshr i32 %18, 3
  %20 = load i32, i32* %10, align 4
  %21 = mul i32 %19, %20
  store i32 %21, i32* %16, align 4
  %22 = load %struct.gs_state_s*, %struct.gs_state_s** %8, align 8
  %23 = load i32, i32* %9, align 4
  %24 = load i32, i32* %10, align 4
  %25 = load i32, i32* %11, align 4
  %26 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %12, align 8
  %27 = call i32 @gs_imagemask_init(%struct.gs_image_enum_s* %14, %struct.gs_state_s* %22, i32 %23, i32 %24, i32 %25, %struct.gs_matrix_s* %26)
  store i32 %27, i32* %15, align 4
  %28 = icmp slt i32 %27, 0
  br i1 %28, label %29, label %31

29:                                               ; preds = %6
  %30 = load i32, i32* %15, align 4
  store i32 %30, i32* %7, align 4
  br label %42

31:                                               ; preds = %6
  %32 = load i8*, i8** %13, align 8
  %33 = load i32, i32* %16, align 4
  %34 = call i32 @gs_image_next(%struct.gs_image_enum_s* %14, i8* %32, i32 %33)
  store i32 %34, i32* %15, align 4
  %35 = load i32, i32* %15, align 4
  %36 = icmp slt i32 %35, 0
  br i1 %36, label %37, label %39

37:                                               ; preds = %31
  %38 = load i32, i32* %15, align 4
  br label %40

39:                                               ; preds = %31
  br label %40

40:                                               ; preds = %39, %37
  %41 = phi i32 [ %38, %37 ], [ 0, %39 ]
  store i32 %41, i32* %7, align 4
  br label %42

42:                                               ; preds = %40, %29
  %43 = load i32, i32* %7, align 4
  ret i32 %43
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_flattenpath(%struct.gs_state_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.gs_state_s*, align 8
  %4 = alloca %struct.gx_path_s, align 8
  %5 = alloca i32, align 4
  store %struct.gs_state_s* %0, %struct.gs_state_s** %3, align 8
  %6 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %7 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %6, i32 0, i32 7
  %8 = load %struct.gx_path_s*, %struct.gx_path_s** %7, align 8
  %9 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %8, i32 0, i32 8
  %10 = load i32, i32* %9, align 8
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %13, label %12

12:                                               ; preds = %1
  store i32 0, i32* %2, align 4
  br label %35

13:                                               ; preds = %1
  %14 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %15 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %14, i32 0, i32 7
  %16 = load %struct.gx_path_s*, %struct.gx_path_s** %15, align 8
  %17 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %18 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %17, i32 0, i32 21
  %19 = load float, float* %18, align 8
  %20 = fpext float %19 to double
  %21 = call i32 @gx_path_flatten(%struct.gx_path_s* %16, %struct.gx_path_s* %4, double %20)
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %5, align 4
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %13
  %25 = load i32, i32* %5, align 4
  store i32 %25, i32* %2, align 4
  br label %35

26:                                               ; preds = %13
  %27 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %28 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %27, i32 0, i32 7
  %29 = load %struct.gx_path_s*, %struct.gx_path_s** %28, align 8
  call void @gx_path_release(%struct.gx_path_s* %29)
  %30 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %31 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %30, i32 0, i32 7
  %32 = load %struct.gx_path_s*, %struct.gx_path_s** %31, align 8
  %33 = bitcast %struct.gx_path_s* %32 to i8*
  %34 = bitcast %struct.gx_path_s* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %33, i8* align 8 %34, i64 144, i1 false)
  store i32 0, i32* %2, align 4
  br label %35

35:                                               ; preds = %26, %24, %12
  %36 = load i32, i32* %2, align 4
  ret i32 %36
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_reversepath(%struct.gs_state_s* %0) #0 {
  %2 = alloca %struct.gs_state_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %2, align 8
  ret i32 -21
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_pathbbox(%struct.gs_state_s* %0, %struct.gs_rect_s* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.gs_state_s*, align 8
  %5 = alloca %struct.gs_rect_s*, align 8
  %6 = alloca %struct.gs_fixed_rect_s, align 8
  %7 = alloca %struct.gs_rect_s, align 4
  %8 = alloca i32, align 4
  store %struct.gs_state_s* %0, %struct.gs_state_s** %4, align 8
  store %struct.gs_rect_s* %1, %struct.gs_rect_s** %5, align 8
  %9 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %10 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %9, i32 0, i32 7
  %11 = load %struct.gx_path_s*, %struct.gx_path_s** %10, align 8
  %12 = call i32 @gx_path_bbox(%struct.gx_path_s* %11, %struct.gs_fixed_rect_s* %6)
  store i32 %12, i32* %8, align 4
  %13 = load i32, i32* %8, align 4
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %2
  %16 = load i32, i32* %8, align 4
  store i32 %16, i32* %3, align 4
  br label %55

17:                                               ; preds = %2
  %18 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %6, i32 0, i32 0
  %19 = getelementptr inbounds %struct.timeval, %struct.timeval* %18, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = sitofp i64 %20 to double
  %22 = fmul double %21, 0x3F30000000000000
  %23 = fptrunc double %22 to float
  %24 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %7, i32 0, i32 0
  %25 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %24, i32 0, i32 0
  store float %23, float* %25, align 4
  %26 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %6, i32 0, i32 0
  %27 = getelementptr inbounds %struct.timeval, %struct.timeval* %26, i32 0, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = sitofp i64 %28 to double
  %30 = fmul double %29, 0x3F30000000000000
  %31 = fptrunc double %30 to float
  %32 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %7, i32 0, i32 0
  %33 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %32, i32 0, i32 1
  store float %31, float* %33, align 4
  %34 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %6, i32 0, i32 1
  %35 = getelementptr inbounds %struct.timeval, %struct.timeval* %34, i32 0, i32 0
  %36 = load i64, i64* %35, align 8
  %37 = sitofp i64 %36 to double
  %38 = fmul double %37, 0x3F30000000000000
  %39 = fptrunc double %38 to float
  %40 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %7, i32 0, i32 1
  %41 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %40, i32 0, i32 0
  store float %39, float* %41, align 4
  %42 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %6, i32 0, i32 1
  %43 = getelementptr inbounds %struct.timeval, %struct.timeval* %42, i32 0, i32 1
  %44 = load i64, i64* %43, align 8
  %45 = sitofp i64 %44 to double
  %46 = fmul double %45, 0x3F30000000000000
  %47 = fptrunc double %46 to float
  %48 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %7, i32 0, i32 1
  %49 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %48, i32 0, i32 1
  store float %47, float* %49, align 4
  %50 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %51 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %50, i32 0, i32 2
  %52 = bitcast %struct.gs_matrix_fixed_s* %51 to %struct.gs_matrix_s*
  %53 = load %struct.gs_rect_s*, %struct.gs_rect_s** %5, align 8
  %54 = call i32 @gs_bbox_transform_inverse(%struct.gs_rect_s* %7, %struct.gs_matrix_s* %52, %struct.gs_rect_s* %53)
  store i32 %54, i32* %3, align 4
  br label %55

55:                                               ; preds = %17, %15
  %56 = load i32, i32* %3, align 4
  ret i32 %56
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gs_path_enum_init(%struct.gs_path_enum_s* %0, %struct.gs_state_s* %1) #0 {
  %3 = alloca %struct.gs_path_enum_s*, align 8
  %4 = alloca %struct.gs_state_s*, align 8
  store %struct.gs_path_enum_s* %0, %struct.gs_path_enum_s** %3, align 8
  store %struct.gs_state_s* %1, %struct.gs_state_s** %4, align 8
  %5 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %6 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %5, i32 0, i32 7
  %7 = load %struct.gx_path_s*, %struct.gx_path_s** %6, align 8
  %8 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %7, i32 0, i32 4
  %9 = load %struct.subpath*, %struct.subpath** %8, align 8
  %10 = bitcast %struct.subpath* %9 to %struct.segment_s*
  %11 = load %struct.gs_path_enum_s*, %struct.gs_path_enum_s** %3, align 8
  %12 = getelementptr inbounds %struct.gs_path_enum_s, %struct.gs_path_enum_s* %11, i32 0, i32 0
  store %struct.segment_s* %10, %struct.segment_s** %12, align 8
  %13 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %14 = load %struct.gs_path_enum_s*, %struct.gs_path_enum_s** %3, align 8
  %15 = getelementptr inbounds %struct.gs_path_enum_s, %struct.gs_path_enum_s* %14, i32 0, i32 1
  store %struct.gs_state_s* %13, %struct.gs_state_s** %15, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_path_enum_next(%struct.gs_path_enum_s* %0, %struct.gs_point_s* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.gs_path_enum_s*, align 8
  %5 = alloca %struct.gs_point_s*, align 8
  %6 = alloca %struct.segment_s*, align 8
  %7 = alloca %struct.gs_state_s*, align 8
  %8 = alloca %struct.gs_point_s, align 4
  %9 = alloca i32, align 4
  store %struct.gs_path_enum_s* %0, %struct.gs_path_enum_s** %4, align 8
  store %struct.gs_point_s* %1, %struct.gs_point_s** %5, align 8
  %10 = load %struct.gs_path_enum_s*, %struct.gs_path_enum_s** %4, align 8
  %11 = getelementptr inbounds %struct.gs_path_enum_s, %struct.gs_path_enum_s* %10, i32 0, i32 0
  %12 = load %struct.segment_s*, %struct.segment_s** %11, align 8
  store %struct.segment_s* %12, %struct.segment_s** %6, align 8
  %13 = load %struct.gs_path_enum_s*, %struct.gs_path_enum_s** %4, align 8
  %14 = getelementptr inbounds %struct.gs_path_enum_s, %struct.gs_path_enum_s* %13, i32 0, i32 1
  %15 = load %struct.gs_state_s*, %struct.gs_state_s** %14, align 8
  store %struct.gs_state_s* %15, %struct.gs_state_s** %7, align 8
  %16 = load %struct.segment_s*, %struct.segment_s** %6, align 8
  %17 = icmp eq %struct.segment_s* %16, null
  br i1 %17, label %18, label %19

18:                                               ; preds = %2
  store i32 0, i32* %3, align 4
  br label %128

19:                                               ; preds = %2
  %20 = load %struct.segment_s*, %struct.segment_s** %6, align 8
  %21 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %20, i32 0, i32 1
  %22 = load %struct.segment_s*, %struct.segment_s** %21, align 8
  %23 = load %struct.gs_path_enum_s*, %struct.gs_path_enum_s** %4, align 8
  %24 = getelementptr inbounds %struct.gs_path_enum_s, %struct.gs_path_enum_s* %23, i32 0, i32 0
  store %struct.segment_s* %22, %struct.segment_s** %24, align 8
  %25 = load %struct.segment_s*, %struct.segment_s** %6, align 8
  %26 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %25, i32 0, i32 2
  %27 = load i32, i32* %26, align 8
  %28 = icmp eq i32 %27, 2
  br i1 %28, label %29, label %30

29:                                               ; preds = %19
  store i32 4, i32* %3, align 4
  br label %128

30:                                               ; preds = %19
  %31 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  %32 = load %struct.segment_s*, %struct.segment_s** %6, align 8
  %33 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %32, i32 0, i32 3
  %34 = getelementptr inbounds %struct.timeval, %struct.timeval* %33, i32 0, i32 0
  %35 = load i64, i64* %34, align 8
  %36 = sitofp i64 %35 to double
  %37 = fmul double %36, 0x3F30000000000000
  %38 = fptrunc double %37 to float
  %39 = fpext float %38 to double
  %40 = load %struct.segment_s*, %struct.segment_s** %6, align 8
  %41 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %40, i32 0, i32 3
  %42 = getelementptr inbounds %struct.timeval, %struct.timeval* %41, i32 0, i32 1
  %43 = load i64, i64* %42, align 8
  %44 = sitofp i64 %43 to double
  %45 = fmul double %44, 0x3F30000000000000
  %46 = fptrunc double %45 to float
  %47 = fpext float %46 to double
  %48 = call i32 (%struct.gs_state_s*, double, double, %struct.gs_point_s*, ...) bitcast (i32 (%struct.gs_state_s*, double, double, %struct.gs_point_s*)* @gs_itransform to i32 (%struct.gs_state_s*, double, double, %struct.gs_point_s*, ...)*)(%struct.gs_state_s* %31, double %39, double %47, %struct.gs_point_s* %8)
  store i32 %48, i32* %9, align 4
  %49 = icmp slt i32 %48, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %30
  %51 = load i32, i32* %9, align 4
  store i32 %51, i32* %3, align 4
  br label %128

52:                                               ; preds = %30
  %53 = load %struct.segment_s*, %struct.segment_s** %6, align 8
  %54 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %53, i32 0, i32 2
  %55 = load i32, i32* %54, align 8
  switch i32 %55, label %120 [
    i32 0, label %56
    i32 1, label %61
    i32 3, label %66
  ]

56:                                               ; preds = %52
  %57 = load %struct.gs_point_s*, %struct.gs_point_s** %5, align 8
  %58 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %57, i64 0
  %59 = bitcast %struct.gs_point_s* %58 to i8*
  %60 = bitcast %struct.gs_point_s* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %59, i8* align 4 %60, i64 8, i1 false)
  store i32 1, i32* %3, align 4
  br label %128

61:                                               ; preds = %52
  %62 = load %struct.gs_point_s*, %struct.gs_point_s** %5, align 8
  %63 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %62, i64 0
  %64 = bitcast %struct.gs_point_s* %63 to i8*
  %65 = bitcast %struct.gs_point_s* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %64, i8* align 4 %65, i64 8, i1 false)
  store i32 2, i32* %3, align 4
  br label %128

66:                                               ; preds = %52
  %67 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  %68 = load %struct.segment_s*, %struct.segment_s** %6, align 8
  %69 = bitcast %struct.segment_s* %68 to %struct.curve_segment*
  %70 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %69, i32 0, i32 4
  %71 = getelementptr inbounds %struct.timeval, %struct.timeval* %70, i32 0, i32 0
  %72 = load i64, i64* %71, align 8
  %73 = sitofp i64 %72 to double
  %74 = fmul double %73, 0x3F30000000000000
  %75 = fptrunc double %74 to float
  %76 = fpext float %75 to double
  %77 = load %struct.segment_s*, %struct.segment_s** %6, align 8
  %78 = bitcast %struct.segment_s* %77 to %struct.curve_segment*
  %79 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %78, i32 0, i32 4
  %80 = getelementptr inbounds %struct.timeval, %struct.timeval* %79, i32 0, i32 1
  %81 = load i64, i64* %80, align 8
  %82 = sitofp i64 %81 to double
  %83 = fmul double %82, 0x3F30000000000000
  %84 = fptrunc double %83 to float
  %85 = fpext float %84 to double
  %86 = load %struct.gs_point_s*, %struct.gs_point_s** %5, align 8
  %87 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %86, i64 0
  %88 = call i32 (%struct.gs_state_s*, double, double, %struct.gs_point_s*, ...) bitcast (i32 (%struct.gs_state_s*, double, double, %struct.gs_point_s*)* @gs_itransform to i32 (%struct.gs_state_s*, double, double, %struct.gs_point_s*, ...)*)(%struct.gs_state_s* %67, double %76, double %85, %struct.gs_point_s* %87)
  store i32 %88, i32* %9, align 4
  %89 = icmp slt i32 %88, 0
  br i1 %89, label %114, label %90

90:                                               ; preds = %66
  %91 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  %92 = load %struct.segment_s*, %struct.segment_s** %6, align 8
  %93 = bitcast %struct.segment_s* %92 to %struct.curve_segment*
  %94 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %93, i32 0, i32 5
  %95 = getelementptr inbounds %struct.timeval, %struct.timeval* %94, i32 0, i32 0
  %96 = load i64, i64* %95, align 8
  %97 = sitofp i64 %96 to double
  %98 = fmul double %97, 0x3F30000000000000
  %99 = fptrunc double %98 to float
  %100 = fpext float %99 to double
  %101 = load %struct.segment_s*, %struct.segment_s** %6, align 8
  %102 = bitcast %struct.segment_s* %101 to %struct.curve_segment*
  %103 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %102, i32 0, i32 5
  %104 = getelementptr inbounds %struct.timeval, %struct.timeval* %103, i32 0, i32 1
  %105 = load i64, i64* %104, align 8
  %106 = sitofp i64 %105 to double
  %107 = fmul double %106, 0x3F30000000000000
  %108 = fptrunc double %107 to float
  %109 = fpext float %108 to double
  %110 = load %struct.gs_point_s*, %struct.gs_point_s** %5, align 8
  %111 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %110, i64 1
  %112 = call i32 (%struct.gs_state_s*, double, double, %struct.gs_point_s*, ...) bitcast (i32 (%struct.gs_state_s*, double, double, %struct.gs_point_s*)* @gs_itransform to i32 (%struct.gs_state_s*, double, double, %struct.gs_point_s*, ...)*)(%struct.gs_state_s* %91, double %100, double %109, %struct.gs_point_s* %111)
  store i32 %112, i32* %9, align 4
  %113 = icmp slt i32 %112, 0
  br i1 %113, label %114, label %115

114:                                              ; preds = %90, %66
  store i32 0, i32* %3, align 4
  br label %128

115:                                              ; preds = %90
  %116 = load %struct.gs_point_s*, %struct.gs_point_s** %5, align 8
  %117 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %116, i64 2
  %118 = bitcast %struct.gs_point_s* %117 to i8*
  %119 = bitcast %struct.gs_point_s* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %118, i8* align 4 %119, i64 8, i1 false)
  store i32 3, i32* %3, align 4
  br label %128

120:                                              ; preds = %52
  %121 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %122 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %121, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.93, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1.94, i64 0, i64 0), i32 125)
  %123 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %124 = load %struct.segment_s*, %struct.segment_s** %6, align 8
  %125 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %124, i32 0, i32 2
  %126 = load i32, i32* %125, align 8
  %127 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %123, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2.95, i64 0, i64 0), i32 %126)
  call void @exit(i32 1) #10
  unreachable

128:                                              ; preds = %115, %114, %61, %56, %50, %29, %18
  %129 = load i32, i32* %3, align 4
  ret i32 %129
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_clippath(%struct.gs_state_s* %0) #0 {
  %2 = alloca %struct.gs_state_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %4 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %3, i32 0, i32 8
  %5 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %6 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %7 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %6, i32 0, i32 7
  %8 = load %struct.gx_path_s*, %struct.gx_path_s** %7, align 8
  %9 = call i32 @gx_path_copy(%struct.gx_path_s* %5, %struct.gx_path_s* %8)
  ret i32 %9
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_initclip(%struct.gs_state_s* %0) #0 {
  %2 = alloca %struct.gs_state_s*, align 8
  %3 = alloca %struct.gx_device_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %2, align 8
  %4 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %5 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %4, i32 0, i32 22
  %6 = load %struct.device_s*, %struct.device_s** %5, align 8
  %7 = getelementptr inbounds %struct.device_s, %struct.device_s* %6, i32 0, i32 0
  %8 = load %struct.gx_device_s*, %struct.gx_device_s** %7, align 8
  store %struct.gx_device_s* %8, %struct.gx_device_s** %3, align 8
  %9 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %10 = load %struct.gx_device_s*, %struct.gx_device_s** %3, align 8
  %11 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %10, i32 0, i32 3
  %12 = load i32, i32* %11, align 8
  %13 = sext i32 %12 to i64
  %14 = shl i64 %13, 12
  %15 = load %struct.gx_device_s*, %struct.gx_device_s** %3, align 8
  %16 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %15, i32 0, i32 4
  %17 = load i32, i32* %16, align 4
  %18 = sext i32 %17 to i64
  %19 = shl i64 %18, 12
  %20 = call i32 @gx_clip_to_rectangle(%struct.gs_state_s* %9, i64 0, i64 0, i64 %14, i64 %19)
  ret i32 %20
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_clip_to_rectangle(%struct.gs_state_s* %0, i64 %1, i64 %2, i64 %3, i64 %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca %struct.gs_state_s*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca %struct.gx_path_s, align 8
  %13 = alloca %struct.gx_path_s*, align 8
  %14 = alloca i32, align 4
  store %struct.gs_state_s* %0, %struct.gs_state_s** %7, align 8
  store i64 %1, i64* %8, align 8
  store i64 %2, i64* %9, align 8
  store i64 %3, i64* %10, align 8
  store i64 %4, i64* %11, align 8
  store %struct.gx_path_s* %12, %struct.gx_path_s** %13, align 8
  %15 = load %struct.gx_path_s*, %struct.gx_path_s** %13, align 8
  %16 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  %17 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %16, i32 0, i32 1
  call void @gx_path_init(%struct.gx_path_s* %15, %struct.gs_memory_procs* %17)
  %18 = load %struct.gx_path_s*, %struct.gx_path_s** %13, align 8
  %19 = load i64, i64* %8, align 8
  %20 = load i64, i64* %9, align 8
  %21 = load i64, i64* %10, align 8
  %22 = load i64, i64* %11, align 8
  %23 = call i32 @gx_path_add_rectangle(%struct.gx_path_s* %18, i64 %19, i64 %20, i64 %21, i64 %22)
  store i32 %23, i32* %14, align 4
  %24 = icmp slt i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %5
  %26 = load %struct.gx_path_s*, %struct.gx_path_s** %13, align 8
  call void @gx_path_release(%struct.gx_path_s* %26)
  %27 = load i32, i32* %14, align 4
  store i32 %27, i32* %6, align 4
  br label %35

28:                                               ; preds = %5
  %29 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  %30 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %29, i32 0, i32 8
  %31 = load %struct.gx_path_s*, %struct.gx_path_s** %30, align 8
  call void @gx_path_release(%struct.gx_path_s* %31)
  %32 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  %33 = load %struct.gx_path_s*, %struct.gx_path_s** %13, align 8
  %34 = call i32 @set_clip_path(%struct.gs_state_s* %32, %struct.gx_path_s* %33, i32 -1)
  store i32 %34, i32* %6, align 4
  br label %35

35:                                               ; preds = %28, %25
  %36 = load i32, i32* %6, align 4
  ret i32 %36
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @set_clip_path(%struct.gs_state_s* %0, %struct.gx_path_s* %1, i32 %2) #0 {
  %4 = alloca %struct.gs_state_s*, align 8
  %5 = alloca %struct.gx_path_s*, align 8
  %6 = alloca i32, align 4
  store %struct.gs_state_s* %0, %struct.gs_state_s** %4, align 8
  store %struct.gx_path_s* %1, %struct.gx_path_s** %5, align 8
  store i32 %2, i32* %6, align 4
  %7 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %8 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %9 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %8, i32 0, i32 3
  %10 = call i32 @gx_path_is_rectangle(%struct.gx_path_s* %7, %struct.gs_fixed_rect_s* %9)
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %29, label %12

12:                                               ; preds = %3
  %13 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %14 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %13, i32 0, i32 3
  %15 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %14, i32 0, i32 0
  %16 = getelementptr inbounds %struct.timeval, %struct.timeval* %15, i32 0, i32 1
  store i64 0, i64* %16, align 8
  %17 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %18 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %17, i32 0, i32 3
  %19 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %18, i32 0, i32 0
  %20 = getelementptr inbounds %struct.timeval, %struct.timeval* %19, i32 0, i32 0
  store i64 0, i64* %20, align 8
  %21 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %22 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %21, i32 0, i32 3
  %23 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %22, i32 0, i32 1
  %24 = getelementptr inbounds %struct.timeval, %struct.timeval* %23, i32 0, i32 1
  store i64 0, i64* %24, align 8
  %25 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %26 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %25, i32 0, i32 3
  %27 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %26, i32 0, i32 1
  %28 = getelementptr inbounds %struct.timeval, %struct.timeval* %27, i32 0, i32 0
  store i64 0, i64* %28, align 8
  br label %29

29:                                               ; preds = %12, %3
  %30 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %31 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %32 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %31, i32 0, i32 1
  %33 = call i32 @gx_path_bbox(%struct.gx_path_s* %30, %struct.gs_fixed_rect_s* %32)
  %34 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %35 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %34, i32 0, i32 8
  %36 = load %struct.gx_path_s*, %struct.gx_path_s** %35, align 8
  %37 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %38 = bitcast %struct.gx_path_s* %36 to i8*
  %39 = bitcast %struct.gx_path_s* %37 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %38, i8* align 8 %39, i64 144, i1 false)
  %40 = load i32, i32* %6, align 4
  %41 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %42 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %41, i32 0, i32 9
  store i32 %40, i32* %42, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_clip(%struct.gs_state_s* %0) #0 {
  %2 = alloca %struct.gs_state_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %4 = call i32 @common_clip(%struct.gs_state_s* %3, i32 -1)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @common_clip(%struct.gs_state_s* %0, i32 %1) #0 {
  %3 = alloca %struct.gs_state_s*, align 8
  %4 = alloca i32, align 4
  %5 = alloca %struct.gx_path_s, align 8
  %6 = alloca i32, align 4
  store %struct.gs_state_s* %0, %struct.gs_state_s** %3, align 8
  store i32 %1, i32* %4, align 4
  %7 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %8 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %7, i32 0, i32 7
  %9 = load %struct.gx_path_s*, %struct.gx_path_s** %8, align 8
  %10 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %11 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %10, i32 0, i32 21
  %12 = load float, float* %11, align 8
  %13 = fpext float %12 to double
  %14 = call i32 @gx_path_flatten(%struct.gx_path_s* %9, %struct.gx_path_s* %5, double %13)
  store i32 %14, i32* %6, align 4
  %15 = load i32, i32* %6, align 4
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %21, label %17

17:                                               ; preds = %2
  %18 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %19 = load i32, i32* %4, align 4
  %20 = call i32 @set_clip_path(%struct.gs_state_s* %18, %struct.gx_path_s* %5, i32 %19)
  store i32 %20, i32* %6, align 4
  br label %21

21:                                               ; preds = %17, %2
  %22 = load i32, i32* %6, align 4
  ret i32 %22
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_eoclip(%struct.gs_state_s* %0) #0 {
  %2 = alloca %struct.gs_state_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %4 = call i32 @common_clip(%struct.gs_state_s* %3, i32 1)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_newpath(%struct.gs_state_s* %0) #0 {
  %2 = alloca %struct.gs_state_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %4 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %3, i32 0, i32 7
  %5 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  call void @gx_path_release(%struct.gx_path_s* %5)
  %6 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %7 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %6, i32 0, i32 7
  %8 = load %struct.gx_path_s*, %struct.gx_path_s** %7, align 8
  %9 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %10 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %9, i32 0, i32 1
  call void @gx_path_init(%struct.gx_path_s* %8, %struct.gs_memory_procs* %10)
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_closepath(%struct.gs_state_s* %0) #0 {
  %2 = alloca %struct.gs_state_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %4 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %3, i32 0, i32 7
  %5 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %6 = call i32 @gx_path_close_subpath(%struct.gx_path_s* %5)
  ret i32 %6
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_currentpoint(%struct.gs_state_s* %0, %struct.gs_point_s* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.gs_state_s*, align 8
  %5 = alloca %struct.gs_point_s*, align 8
  %6 = alloca %struct.timeval, align 8
  %7 = alloca i32, align 4
  store %struct.gs_state_s* %0, %struct.gs_state_s** %4, align 8
  store %struct.gs_point_s* %1, %struct.gs_point_s** %5, align 8
  %8 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %9 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %8, i32 0, i32 7
  %10 = load %struct.gx_path_s*, %struct.gx_path_s** %9, align 8
  %11 = call i32 @gx_path_current_point(%struct.gx_path_s* %10, %struct.timeval* %6)
  store i32 %11, i32* %7, align 4
  %12 = load i32, i32* %7, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %2
  %15 = load i32, i32* %7, align 4
  store i32 %15, i32* %3, align 4
  br label %32

16:                                               ; preds = %2
  %17 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %18 = getelementptr inbounds %struct.timeval, %struct.timeval* %6, i32 0, i32 0
  %19 = load i64, i64* %18, align 8
  %20 = sitofp i64 %19 to double
  %21 = fmul double %20, 0x3F30000000000000
  %22 = fptrunc double %21 to float
  %23 = fpext float %22 to double
  %24 = getelementptr inbounds %struct.timeval, %struct.timeval* %6, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = sitofp i64 %25 to double
  %27 = fmul double %26, 0x3F30000000000000
  %28 = fptrunc double %27 to float
  %29 = fpext float %28 to double
  %30 = load %struct.gs_point_s*, %struct.gs_point_s** %5, align 8
  %31 = call i32 (%struct.gs_state_s*, double, double, %struct.gs_point_s*, ...) bitcast (i32 (%struct.gs_state_s*, double, double, %struct.gs_point_s*)* @gs_itransform to i32 (%struct.gs_state_s*, double, double, %struct.gs_point_s*, ...)*)(%struct.gs_state_s* %17, double %23, double %29, %struct.gs_point_s* %30)
  store i32 %31, i32* %3, align 4
  br label %32

32:                                               ; preds = %16, %14
  %33 = load i32, i32* %3, align 4
  ret i32 %33
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_moveto(%struct.gs_state_s* %0, double %1, double %2) #0 {
  %4 = alloca %struct.gs_state_s*, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca i32, align 4
  %8 = alloca %struct.timeval, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %4, align 8
  store double %1, double* %5, align 8
  store double %2, double* %6, align 8
  %9 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %10 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %9, i32 0, i32 2
  %11 = load double, double* %5, align 8
  %12 = load double, double* %6, align 8
  %13 = call i32 @gs_point_transform2fixed(%struct.gs_matrix_fixed_s* %10, double %11, double %12, %struct.timeval* %8)
  store i32 %13, i32* %7, align 4
  %14 = icmp sge i32 %13, 0
  br i1 %14, label %15, label %24

15:                                               ; preds = %3
  %16 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %17 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %16, i32 0, i32 7
  %18 = load %struct.gx_path_s*, %struct.gx_path_s** %17, align 8
  %19 = getelementptr inbounds %struct.timeval, %struct.timeval* %8, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %struct.timeval, %struct.timeval* %8, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = call i32 @gx_path_add_point(%struct.gx_path_s* %18, i64 %20, i64 %22)
  store i32 %23, i32* %7, align 4
  br label %24

24:                                               ; preds = %15, %3
  %25 = load i32, i32* %7, align 4
  ret i32 %25
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_rmoveto(%struct.gs_state_s* %0, double %1, double %2) #0 {
  %4 = alloca %struct.gs_state_s*, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca i32, align 4
  %8 = alloca %struct.timeval, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %4, align 8
  store double %1, double* %5, align 8
  store double %2, double* %6, align 8
  %9 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %10 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %9, i32 0, i32 2
  %11 = load double, double* %5, align 8
  %12 = load double, double* %6, align 8
  %13 = call i32 @gs_distance_transform2fixed(%struct.gs_matrix_fixed_s* %10, double %11, double %12, %struct.timeval* %8)
  store i32 %13, i32* %7, align 4
  %14 = icmp sge i32 %13, 0
  br i1 %14, label %15, label %24

15:                                               ; preds = %3
  %16 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %17 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %16, i32 0, i32 7
  %18 = load %struct.gx_path_s*, %struct.gx_path_s** %17, align 8
  %19 = getelementptr inbounds %struct.timeval, %struct.timeval* %8, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %struct.timeval, %struct.timeval* %8, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = call i32 @gx_path_add_relative_point(%struct.gx_path_s* %18, i64 %20, i64 %22)
  store i32 %23, i32* %7, align 4
  br label %24

24:                                               ; preds = %15, %3
  %25 = load i32, i32* %7, align 4
  ret i32 %25
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_lineto(%struct.gs_state_s* %0, double %1, double %2) #0 {
  %4 = alloca %struct.gs_state_s*, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca i32, align 4
  %8 = alloca %struct.timeval, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %4, align 8
  store double %1, double* %5, align 8
  store double %2, double* %6, align 8
  %9 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %10 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %9, i32 0, i32 2
  %11 = load double, double* %5, align 8
  %12 = load double, double* %6, align 8
  %13 = call i32 @gs_point_transform2fixed(%struct.gs_matrix_fixed_s* %10, double %11, double %12, %struct.timeval* %8)
  store i32 %13, i32* %7, align 4
  %14 = icmp sge i32 %13, 0
  br i1 %14, label %15, label %24

15:                                               ; preds = %3
  %16 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %17 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %16, i32 0, i32 7
  %18 = load %struct.gx_path_s*, %struct.gx_path_s** %17, align 8
  %19 = getelementptr inbounds %struct.timeval, %struct.timeval* %8, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = getelementptr inbounds %struct.timeval, %struct.timeval* %8, i32 0, i32 1
  %22 = load i64, i64* %21, align 8
  %23 = call i32 @gx_path_add_line(%struct.gx_path_s* %18, i64 %20, i64 %22)
  store i32 %23, i32* %7, align 4
  br label %24

24:                                               ; preds = %15, %3
  %25 = load i32, i32* %7, align 4
  ret i32 %25
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_rlineto(%struct.gs_state_s* %0, double %1, double %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.gs_state_s*, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca %struct.timeval, align 8
  %9 = alloca %struct.timeval, align 8
  %10 = alloca i32, align 4
  store %struct.gs_state_s* %0, %struct.gs_state_s** %5, align 8
  store double %1, double* %6, align 8
  store double %2, double* %7, align 8
  %11 = load %struct.gs_state_s*, %struct.gs_state_s** %5, align 8
  %12 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %11, i32 0, i32 7
  %13 = load %struct.gx_path_s*, %struct.gx_path_s** %12, align 8
  %14 = call i32 @gx_path_current_point(%struct.gx_path_s* %13, %struct.timeval* %8)
  store i32 %14, i32* %10, align 4
  %15 = load i32, i32* %10, align 4
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %3
  %18 = load i32, i32* %10, align 4
  store i32 %18, i32* %4, align 4
  br label %43

19:                                               ; preds = %3
  %20 = load %struct.gs_state_s*, %struct.gs_state_s** %5, align 8
  %21 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %20, i32 0, i32 2
  %22 = load double, double* %6, align 8
  %23 = load double, double* %7, align 8
  %24 = call i32 @gs_distance_transform2fixed(%struct.gs_matrix_fixed_s* %21, double %22, double %23, %struct.timeval* %9)
  store i32 %24, i32* %10, align 4
  %25 = icmp sge i32 %24, 0
  br i1 %25, label %26, label %41

26:                                               ; preds = %19
  %27 = load %struct.gs_state_s*, %struct.gs_state_s** %5, align 8
  %28 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %27, i32 0, i32 7
  %29 = load %struct.gx_path_s*, %struct.gx_path_s** %28, align 8
  %30 = getelementptr inbounds %struct.timeval, %struct.timeval* %8, i32 0, i32 0
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %struct.timeval, %struct.timeval* %9, i32 0, i32 0
  %33 = load i64, i64* %32, align 8
  %34 = add nsw i64 %31, %33
  %35 = getelementptr inbounds %struct.timeval, %struct.timeval* %8, i32 0, i32 1
  %36 = load i64, i64* %35, align 8
  %37 = getelementptr inbounds %struct.timeval, %struct.timeval* %9, i32 0, i32 1
  %38 = load i64, i64* %37, align 8
  %39 = add nsw i64 %36, %38
  %40 = call i32 @gx_path_add_line(%struct.gx_path_s* %29, i64 %34, i64 %39)
  store i32 %40, i32* %10, align 4
  br label %41

41:                                               ; preds = %26, %19
  %42 = load i32, i32* %10, align 4
  store i32 %42, i32* %4, align 4
  br label %43

43:                                               ; preds = %41, %17
  %44 = load i32, i32* %4, align 4
  ret i32 %44
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_arc(%struct.gs_state_s* %0, double %1, double %2, double %3, double %4, double %5) #0 {
  %7 = alloca %struct.gs_state_s*, align 8
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %7, align 8
  store double %1, double* %8, align 8
  store double %2, double* %9, align 8
  store double %3, double* %10, align 8
  store double %4, double* %11, align 8
  store double %5, double* %12, align 8
  %13 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  %14 = load double, double* %8, align 8
  %15 = load double, double* %9, align 8
  %16 = load double, double* %10, align 8
  %17 = load double, double* %11, align 8
  %18 = load double, double* %12, align 8
  %19 = call i32 @arc_either(%struct.gs_state_s* %13, double %14, double %15, double %16, double %17, double %18, i32 0)
  ret i32 %19
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @arc_either(%struct.gs_state_s* %0, double %1, double %2, double %3, double %4, double %5, i32 %6) #0 {
  %8 = alloca i32, align 4
  %9 = alloca %struct.gs_state_s*, align 8
  %10 = alloca double, align 8
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca i32, align 4
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca float, align 4
  %20 = alloca float, align 4
  %21 = alloca float, align 4
  %22 = alloca float, align 4
  %23 = alloca float, align 4
  %24 = alloca float, align 4
  %25 = alloca float, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca float, align 4
  %29 = alloca float, align 4
  %30 = alloca float, align 4
  %31 = alloca float, align 4
  store %struct.gs_state_s* %0, %struct.gs_state_s** %9, align 8
  store double %1, double* %10, align 8
  store double %2, double* %11, align 8
  store double %3, double* %12, align 8
  store double %4, double* %13, align 8
  store double %5, double* %14, align 8
  store i32 %6, i32* %15, align 4
  %32 = load double, double* %13, align 8
  %33 = fmul double %32, 4.096000e+03
  %34 = fptosi double %33 to i64
  store i64 %34, i64* %16, align 8
  %35 = load double, double* %14, align 8
  %36 = fmul double %35, 4.096000e+03
  %37 = fptosi double %36 to i64
  store i64 %37, i64* %17, align 8
  store i32 1, i32* %26, align 4
  %38 = load double, double* %12, align 8
  %39 = fcmp olt double %38, 0.000000e+00
  br i1 %39, label %40, label %41

40:                                               ; preds = %7
  store i32 -15, i32* %8, align 4
  br label %255

41:                                               ; preds = %7
  %42 = load i64, i64* %16, align 8
  %43 = load i64, i64* %17, align 8
  %44 = icmp ne i64 %42, %43
  br i1 %44, label %45, label %69

45:                                               ; preds = %41
  %46 = load i64, i64* %16, align 8
  %47 = srem i64 %46, 1474560
  store i64 %47, i64* %16, align 8
  %48 = load i64, i64* %17, align 8
  %49 = srem i64 %48, 1474560
  store i64 %49, i64* %17, align 8
  %50 = load i32, i32* %15, align 4
  %51 = icmp ne i32 %50, 0
  br i1 %51, label %52, label %60

52:                                               ; preds = %45
  %53 = load i64, i64* %17, align 8
  %54 = load i64, i64* %16, align 8
  %55 = icmp sge i64 %53, %54
  br i1 %55, label %56, label %59

56:                                               ; preds = %52
  %57 = load i64, i64* %16, align 8
  %58 = add nsw i64 %57, 1474560
  store i64 %58, i64* %16, align 8
  br label %59

59:                                               ; preds = %56, %52
  br label %68

60:                                               ; preds = %45
  %61 = load i64, i64* %17, align 8
  %62 = load i64, i64* %16, align 8
  %63 = icmp sle i64 %61, %62
  br i1 %63, label %64, label %67

64:                                               ; preds = %60
  %65 = load i64, i64* %17, align 8
  %66 = add nsw i64 %65, 1474560
  store i64 %66, i64* %17, align 8
  br label %67

67:                                               ; preds = %64, %60
  br label %68

68:                                               ; preds = %67, %59
  br label %69

69:                                               ; preds = %68, %41
  %70 = load i64, i64* %16, align 8
  %71 = sitofp i64 %70 to double
  %72 = fmul double %71, 0x3F30000000000000
  %73 = fptrunc double %72 to float
  %74 = fpext float %73 to double
  %75 = fmul double %74, 0x3F91DF46A2529D39
  %76 = fptrunc double %75 to float
  store float %76, float* %19, align 4
  %77 = load double, double* %12, align 8
  %78 = load float, float* %19, align 4
  %79 = fpext float %78 to double
  %80 = call double @sin(double %79) #9
  %81 = fmul double %77, %80
  %82 = fptrunc double %81 to float
  store float %82, float* %22, align 4
  %83 = load double, double* %12, align 8
  %84 = load float, float* %19, align 4
  %85 = fpext float %84 to double
  %86 = call double @cos(double %85) #9
  %87 = fmul double %83, %86
  %88 = fptrunc double %87 to float
  store float %88, float* %23, align 4
  %89 = load double, double* %10, align 8
  %90 = load float, float* %23, align 4
  %91 = fpext float %90 to double
  %92 = fadd double %89, %91
  %93 = fptrunc double %92 to float
  store float %93, float* %20, align 4
  %94 = load double, double* %11, align 8
  %95 = load float, float* %22, align 4
  %96 = fpext float %95 to double
  %97 = fadd double %94, %96
  %98 = fptrunc double %97 to float
  store float %98, float* %21, align 4
  %99 = load i32, i32* %15, align 4
  %100 = icmp ne i32 %99, 0
  br i1 %100, label %101, label %151

101:                                              ; preds = %69
  br label %102

102:                                              ; preds = %145, %101
  %103 = load i64, i64* %17, align 8
  %104 = load i64, i64* %16, align 8
  %105 = sub nsw i64 %103, %104
  store i64 %105, i64* %18, align 8
  %106 = icmp slt i64 %105, -368640
  br i1 %106, label %107, label %150

107:                                              ; preds = %102
  %108 = load float, float* %22, align 4
  store float %108, float* %28, align 4
  %109 = load float, float* %23, align 4
  %110 = fneg float %109
  store float %110, float* %22, align 4
  %111 = load float, float* %28, align 4
  store float %111, float* %23, align 4
  %112 = load double, double* %10, align 8
  %113 = load float, float* %23, align 4
  %114 = fpext float %113 to double
  %115 = fadd double %112, %114
  %116 = fptrunc double %115 to float
  store float %116, float* %24, align 4
  %117 = load double, double* %11, align 8
  %118 = load float, float* %22, align 4
  %119 = fpext float %118 to double
  %120 = fadd double %117, %119
  %121 = fptrunc double %120 to float
  store float %121, float* %25, align 4
  %122 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  %123 = load float, float* %20, align 4
  %124 = fpext float %123 to double
  %125 = load float, float* %21, align 4
  %126 = fpext float %125 to double
  %127 = load float, float* %24, align 4
  %128 = fpext float %127 to double
  %129 = load float, float* %25, align 4
  %130 = fpext float %129 to double
  %131 = load float, float* %20, align 4
  %132 = load float, float* %23, align 4
  %133 = fadd float %131, %132
  %134 = fpext float %133 to double
  %135 = load float, float* %21, align 4
  %136 = load float, float* %22, align 4
  %137 = fadd float %135, %136
  %138 = fpext float %137 to double
  %139 = load i32, i32* %26, align 4
  %140 = call i32 @arc_add(%struct.gs_state_s* %122, double %124, double %126, double %128, double %130, double %134, double %138, i32 %139)
  store i32 %140, i32* %27, align 4
  %141 = load i32, i32* %27, align 4
  %142 = icmp slt i32 %141, 0
  br i1 %142, label %143, label %145

143:                                              ; preds = %107
  %144 = load i32, i32* %27, align 4
  store i32 %144, i32* %8, align 4
  br label %255

145:                                              ; preds = %107
  %146 = load float, float* %24, align 4
  store float %146, float* %20, align 4
  %147 = load float, float* %25, align 4
  store float %147, float* %21, align 4
  %148 = load i64, i64* %16, align 8
  %149 = sub nsw i64 %148, 368640
  store i64 %149, i64* %16, align 8
  store i32 0, i32* %26, align 4
  br label %102

150:                                              ; preds = %102
  br label %201

151:                                              ; preds = %69
  br label %152

152:                                              ; preds = %195, %151
  %153 = load i64, i64* %17, align 8
  %154 = load i64, i64* %16, align 8
  %155 = sub nsw i64 %153, %154
  store i64 %155, i64* %18, align 8
  %156 = icmp sgt i64 %155, 368640
  br i1 %156, label %157, label %200

157:                                              ; preds = %152
  %158 = load float, float* %23, align 4
  store float %158, float* %29, align 4
  %159 = load float, float* %22, align 4
  %160 = fneg float %159
  store float %160, float* %23, align 4
  %161 = load float, float* %29, align 4
  store float %161, float* %22, align 4
  %162 = load double, double* %10, align 8
  %163 = load float, float* %23, align 4
  %164 = fpext float %163 to double
  %165 = fadd double %162, %164
  %166 = fptrunc double %165 to float
  store float %166, float* %24, align 4
  %167 = load double, double* %11, align 8
  %168 = load float, float* %22, align 4
  %169 = fpext float %168 to double
  %170 = fadd double %167, %169
  %171 = fptrunc double %170 to float
  store float %171, float* %25, align 4
  %172 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  %173 = load float, float* %20, align 4
  %174 = fpext float %173 to double
  %175 = load float, float* %21, align 4
  %176 = fpext float %175 to double
  %177 = load float, float* %24, align 4
  %178 = fpext float %177 to double
  %179 = load float, float* %25, align 4
  %180 = fpext float %179 to double
  %181 = load float, float* %20, align 4
  %182 = load float, float* %23, align 4
  %183 = fadd float %181, %182
  %184 = fpext float %183 to double
  %185 = load float, float* %21, align 4
  %186 = load float, float* %22, align 4
  %187 = fadd float %185, %186
  %188 = fpext float %187 to double
  %189 = load i32, i32* %26, align 4
  %190 = call i32 @arc_add(%struct.gs_state_s* %172, double %174, double %176, double %178, double %180, double %184, double %188, i32 %189)
  store i32 %190, i32* %27, align 4
  %191 = load i32, i32* %27, align 4
  %192 = icmp slt i32 %191, 0
  br i1 %192, label %193, label %195

193:                                              ; preds = %157
  %194 = load i32, i32* %27, align 4
  store i32 %194, i32* %8, align 4
  br label %255

195:                                              ; preds = %157
  %196 = load float, float* %24, align 4
  store float %196, float* %20, align 4
  %197 = load float, float* %25, align 4
  store float %197, float* %21, align 4
  %198 = load i64, i64* %16, align 8
  %199 = add nsw i64 %198, 368640
  store i64 %199, i64* %16, align 8
  store i32 0, i32* %26, align 4
  br label %152

200:                                              ; preds = %152
  br label %201

201:                                              ; preds = %200, %150
  %202 = load i64, i64* %18, align 8
  %203 = icmp eq i64 %202, 0
  br i1 %203, label %204, label %205

204:                                              ; preds = %201
  store i32 0, i32* %8, align 4
  br label %255

205:                                              ; preds = %201
  %206 = load i64, i64* %18, align 8
  %207 = sitofp i64 %206 to double
  %208 = fmul double %207, 0x3F30000000000000
  %209 = fptrunc double %208 to float
  %210 = fpext float %209 to double
  %211 = fmul double %210, 0x3F81DF46A2529D39
  %212 = call double @tan(double %211) #9
  %213 = fptrunc double %212 to float
  store float %213, float* %30, align 4
  %214 = load i64, i64* %17, align 8
  %215 = sitofp i64 %214 to double
  %216 = fmul double %215, 0x3F30000000000000
  %217 = fptrunc double %216 to float
  %218 = fpext float %217 to double
  %219 = fmul double %218, 0x3F91DF46A2529D39
  %220 = fptrunc double %219 to float
  store float %220, float* %31, align 4
  %221 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  %222 = load float, float* %20, align 4
  %223 = fpext float %222 to double
  %224 = load float, float* %21, align 4
  %225 = fpext float %224 to double
  %226 = load double, double* %10, align 8
  %227 = load double, double* %12, align 8
  %228 = load float, float* %31, align 4
  %229 = fpext float %228 to double
  %230 = call double @cos(double %229) #9
  %231 = fmul double %227, %230
  %232 = fadd double %226, %231
  %233 = load double, double* %11, align 8
  %234 = load double, double* %12, align 8
  %235 = load float, float* %31, align 4
  %236 = fpext float %235 to double
  %237 = call double @sin(double %236) #9
  %238 = fmul double %234, %237
  %239 = fadd double %233, %238
  %240 = load float, float* %20, align 4
  %241 = load float, float* %30, align 4
  %242 = load float, float* %22, align 4
  %243 = fmul float %241, %242
  %244 = fsub float %240, %243
  %245 = fpext float %244 to double
  %246 = load float, float* %21, align 4
  %247 = load float, float* %30, align 4
  %248 = load float, float* %23, align 4
  %249 = fmul float %247, %248
  %250 = fadd float %246, %249
  %251 = fpext float %250 to double
  %252 = load i32, i32* %26, align 4
  %253 = call i32 @arc_add(%struct.gs_state_s* %221, double %223, double %225, double %232, double %239, double %245, double %251, i32 %252)
  store i32 %253, i32* %27, align 4
  %254 = load i32, i32* %27, align 4
  store i32 %254, i32* %8, align 4
  br label %255

255:                                              ; preds = %205, %204, %193, %143, %40
  %256 = load i32, i32* %8, align 4
  ret i32 %256
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @arc_add(%struct.gs_state_s* %0, double %1, double %2, double %3, double %4, double %5, double %6, i32 %7) #0 {
  %9 = alloca i32, align 4
  %10 = alloca %struct.gs_state_s*, align 8
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca i32, align 4
  %18 = alloca %struct.gx_path_s*, align 8
  %19 = alloca i32, align 4
  %20 = alloca %struct.timeval, align 8
  %21 = alloca %struct.timeval, align 8
  %22 = alloca %struct.timeval, align 8
  %23 = alloca %struct.timeval, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %10, align 8
  store double %1, double* %11, align 8
  store double %2, double* %12, align 8
  store double %3, double* %13, align 8
  store double %4, double* %14, align 8
  store double %5, double* %15, align 8
  store double %6, double* %16, align 8
  store i32 %7, i32* %17, align 4
  %24 = load %struct.gs_state_s*, %struct.gs_state_s** %10, align 8
  %25 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %24, i32 0, i32 7
  %26 = load %struct.gx_path_s*, %struct.gx_path_s** %25, align 8
  store %struct.gx_path_s* %26, %struct.gx_path_s** %18, align 8
  %27 = load %struct.gs_state_s*, %struct.gs_state_s** %10, align 8
  %28 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %27, i32 0, i32 2
  %29 = load double, double* %11, align 8
  %30 = load double, double* %12, align 8
  %31 = call i32 @gs_point_transform2fixed(%struct.gs_matrix_fixed_s* %28, double %29, double %30, %struct.timeval* %20)
  store i32 %31, i32* %19, align 4
  %32 = icmp slt i32 %31, 0
  br i1 %32, label %71, label %33

33:                                               ; preds = %8
  %34 = load %struct.gs_state_s*, %struct.gs_state_s** %10, align 8
  %35 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %34, i32 0, i32 2
  %36 = load double, double* %13, align 8
  %37 = load double, double* %14, align 8
  %38 = call i32 @gs_point_transform2fixed(%struct.gs_matrix_fixed_s* %35, double %36, double %37, %struct.timeval* %21)
  store i32 %38, i32* %19, align 4
  %39 = icmp slt i32 %38, 0
  br i1 %39, label %71, label %40

40:                                               ; preds = %33
  %41 = load %struct.gs_state_s*, %struct.gs_state_s** %10, align 8
  %42 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %41, i32 0, i32 2
  %43 = load double, double* %15, align 8
  %44 = load double, double* %16, align 8
  %45 = call i32 @gs_point_transform2fixed(%struct.gs_matrix_fixed_s* %42, double %43, double %44, %struct.timeval* %22)
  store i32 %45, i32* %19, align 4
  %46 = icmp slt i32 %45, 0
  br i1 %46, label %71, label %47

47:                                               ; preds = %40
  %48 = load i32, i32* %17, align 4
  %49 = icmp ne i32 %48, 0
  br i1 %49, label %50, label %73

50:                                               ; preds = %47
  %51 = load %struct.gx_path_s*, %struct.gx_path_s** %18, align 8
  %52 = call i32 @gx_path_current_point(%struct.gx_path_s* %51, %struct.timeval* %23)
  %53 = icmp sge i32 %52, 0
  br i1 %53, label %54, label %61

54:                                               ; preds = %50
  %55 = load %struct.gx_path_s*, %struct.gx_path_s** %18, align 8
  %56 = getelementptr inbounds %struct.timeval, %struct.timeval* %20, i32 0, i32 0
  %57 = load i64, i64* %56, align 8
  %58 = getelementptr inbounds %struct.timeval, %struct.timeval* %20, i32 0, i32 1
  %59 = load i64, i64* %58, align 8
  %60 = call i32 @gx_path_add_line(%struct.gx_path_s* %55, i64 %57, i64 %59)
  br label %68

61:                                               ; preds = %50
  %62 = load %struct.gx_path_s*, %struct.gx_path_s** %18, align 8
  %63 = getelementptr inbounds %struct.timeval, %struct.timeval* %20, i32 0, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = getelementptr inbounds %struct.timeval, %struct.timeval* %20, i32 0, i32 1
  %66 = load i64, i64* %65, align 8
  %67 = call i32 @gx_path_add_point(%struct.gx_path_s* %62, i64 %64, i64 %66)
  br label %68

68:                                               ; preds = %61, %54
  %69 = phi i32 [ %60, %54 ], [ %67, %61 ]
  store i32 %69, i32* %19, align 4
  %70 = icmp slt i32 %69, 0
  br i1 %70, label %71, label %73

71:                                               ; preds = %68, %40, %33, %8
  %72 = load i32, i32* %19, align 4
  store i32 %72, i32* %9, align 4
  br label %88

73:                                               ; preds = %68, %47
  %74 = load %struct.gx_path_s*, %struct.gx_path_s** %18, align 8
  %75 = getelementptr inbounds %struct.timeval, %struct.timeval* %20, i32 0, i32 0
  %76 = load i64, i64* %75, align 8
  %77 = getelementptr inbounds %struct.timeval, %struct.timeval* %20, i32 0, i32 1
  %78 = load i64, i64* %77, align 8
  %79 = getelementptr inbounds %struct.timeval, %struct.timeval* %21, i32 0, i32 0
  %80 = load i64, i64* %79, align 8
  %81 = getelementptr inbounds %struct.timeval, %struct.timeval* %21, i32 0, i32 1
  %82 = load i64, i64* %81, align 8
  %83 = getelementptr inbounds %struct.timeval, %struct.timeval* %22, i32 0, i32 0
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds %struct.timeval, %struct.timeval* %22, i32 0, i32 1
  %86 = load i64, i64* %85, align 8
  %87 = call i32 @gx_path_add_arc(%struct.gx_path_s* %74, i64 %76, i64 %78, i64 %80, i64 %82, i64 %84, i64 %86)
  store i32 %87, i32* %9, align 4
  br label %88

88:                                               ; preds = %73, %71
  %89 = load i32, i32* %9, align 4
  ret i32 %89
}

; Function Attrs: nounwind
declare dso_local double @tan(double) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_arcn(%struct.gs_state_s* %0, double %1, double %2, double %3, double %4, double %5) #0 {
  %7 = alloca %struct.gs_state_s*, align 8
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %7, align 8
  store double %1, double* %8, align 8
  store double %2, double* %9, align 8
  store double %3, double* %10, align 8
  store double %4, double* %11, align 8
  store double %5, double* %12, align 8
  %13 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  %14 = load double, double* %8, align 8
  %15 = load double, double* %9, align 8
  %16 = load double, double* %10, align 8
  %17 = load double, double* %11, align 8
  %18 = load double, double* %12, align 8
  %19 = call i32 @arc_either(%struct.gs_state_s* %13, double %14, double %15, double %16, double %17, double %18, i32 1)
  ret i32 %19
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_arcto(%struct.gs_state_s* %0, double %1, double %2, double %3, double %4, double %5, float* %6) #0 {
  %8 = alloca i32, align 4
  %9 = alloca %struct.gs_state_s*, align 8
  %10 = alloca double, align 8
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca float*, align 8
  %16 = alloca float, align 4
  %17 = alloca float, align 4
  %18 = alloca float, align 4
  %19 = alloca float, align 4
  %20 = alloca %struct.gs_point_s, align 4
  %21 = alloca i32, align 4
  %22 = alloca float, align 4
  %23 = alloca float, align 4
  %24 = alloca float, align 4
  %25 = alloca float, align 4
  %26 = alloca double, align 8
  %27 = alloca double, align 8
  %28 = alloca double, align 8
  %29 = alloca double, align 8
  %30 = alloca %struct.timeval, align 8
  %31 = alloca double, align 8
  %32 = alloca double, align 8
  %33 = alloca double, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %9, align 8
  store double %1, double* %10, align 8
  store double %2, double* %11, align 8
  store double %3, double* %12, align 8
  store double %4, double* %13, align 8
  store double %5, double* %14, align 8
  store float* %6, float** %15, align 8
  %34 = load double, double* %14, align 8
  %35 = fcmp olt double %34, 0.000000e+00
  br i1 %35, label %36, label %37

36:                                               ; preds = %7
  store i32 -23, i32* %8, align 4
  br label %203

37:                                               ; preds = %7
  %38 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  %39 = call i32 @gs_currentpoint(%struct.gs_state_s* %38, %struct.gs_point_s* %20)
  store i32 %39, i32* %21, align 4
  %40 = icmp slt i32 %39, 0
  br i1 %40, label %41, label %43

41:                                               ; preds = %37
  %42 = load i32, i32* %21, align 4
  store i32 %42, i32* %8, align 4
  br label %203

43:                                               ; preds = %37
  %44 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %20, i32 0, i32 0
  %45 = load float, float* %44, align 4
  %46 = fpext float %45 to double
  %47 = load double, double* %10, align 8
  %48 = fsub double %46, %47
  %49 = fptrunc double %48 to float
  store float %49, float* %22, align 4
  %50 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %20, i32 0, i32 1
  %51 = load float, float* %50, align 4
  %52 = fpext float %51 to double
  %53 = load double, double* %11, align 8
  %54 = fsub double %52, %53
  %55 = fptrunc double %54 to float
  store float %55, float* %23, align 4
  %56 = load double, double* %12, align 8
  %57 = load double, double* %10, align 8
  %58 = fsub double %56, %57
  %59 = fptrunc double %58 to float
  store float %59, float* %24, align 4
  %60 = load double, double* %13, align 8
  %61 = load double, double* %11, align 8
  %62 = fsub double %60, %61
  %63 = fptrunc double %62 to float
  store float %63, float* %25, align 4
  %64 = load float, float* %22, align 4
  %65 = load float, float* %22, align 4
  %66 = fmul float %64, %65
  %67 = load float, float* %23, align 4
  %68 = load float, float* %23, align 4
  %69 = fmul float %67, %68
  %70 = fadd float %66, %69
  %71 = fpext float %70 to double
  store double %71, double* %26, align 8
  %72 = load float, float* %24, align 4
  %73 = load float, float* %24, align 4
  %74 = fmul float %72, %73
  %75 = load float, float* %25, align 4
  %76 = load float, float* %25, align 4
  %77 = fmul float %75, %76
  %78 = fadd float %74, %77
  %79 = fpext float %78 to double
  store double %79, double* %27, align 8
  %80 = load float, float* %23, align 4
  %81 = load float, float* %24, align 4
  %82 = fmul float %80, %81
  %83 = load float, float* %25, align 4
  %84 = load float, float* %22, align 4
  %85 = fmul float %83, %84
  %86 = fsub float %82, %85
  %87 = fpext float %86 to double
  store double %87, double* %28, align 8
  %88 = load double, double* %26, align 8
  %89 = load double, double* %27, align 8
  %90 = fmul double %88, %89
  %91 = call double @sqrt(double %90) #9
  %92 = load float, float* %22, align 4
  %93 = load float, float* %24, align 4
  %94 = fmul float %92, %93
  %95 = load float, float* %23, align 4
  %96 = load float, float* %25, align 4
  %97 = fmul float %95, %96
  %98 = fadd float %94, %97
  %99 = fpext float %98 to double
  %100 = fsub double %91, %99
  store double %100, double* %29, align 8
  %101 = load double, double* %28, align 8
  %102 = call double @llvm.fabs.f64(double %101)
  %103 = fcmp olt double %102, 0x3EB0C6F7A0B5ED8D
  br i1 %103, label %108, label %104

104:                                              ; preds = %43
  %105 = load double, double* %29, align 8
  %106 = call double @llvm.fabs.f64(double %105)
  %107 = fcmp olt double %106, 0x3EB0C6F7A0B5ED8D
  br i1 %107, label %108, label %130

108:                                              ; preds = %104, %43
  %109 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  %110 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %109, i32 0, i32 2
  %111 = load double, double* %10, align 8
  %112 = load double, double* %11, align 8
  %113 = call i32 @gs_point_transform2fixed(%struct.gs_matrix_fixed_s* %110, double %111, double %112, %struct.timeval* %30)
  store i32 %113, i32* %21, align 4
  %114 = load i32, i32* %21, align 4
  %115 = icmp sge i32 %114, 0
  br i1 %115, label %116, label %125

116:                                              ; preds = %108
  %117 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  %118 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %117, i32 0, i32 7
  %119 = load %struct.gx_path_s*, %struct.gx_path_s** %118, align 8
  %120 = getelementptr inbounds %struct.timeval, %struct.timeval* %30, i32 0, i32 0
  %121 = load i64, i64* %120, align 8
  %122 = getelementptr inbounds %struct.timeval, %struct.timeval* %30, i32 0, i32 1
  %123 = load i64, i64* %122, align 8
  %124 = call i32 @gx_path_add_line(%struct.gx_path_s* %119, i64 %121, i64 %123)
  store i32 %124, i32* %21, align 4
  br label %125

125:                                              ; preds = %116, %108
  %126 = load double, double* %10, align 8
  %127 = fptrunc double %126 to float
  store float %127, float* %18, align 4
  store float %127, float* %16, align 4
  %128 = load double, double* %11, align 8
  %129 = fptrunc double %128 to float
  store float %129, float* %19, align 4
  store float %129, float* %17, align 4
  br label %185

130:                                              ; preds = %104
  %131 = load double, double* %14, align 8
  %132 = load double, double* %28, align 8
  %133 = fmul double %131, %132
  %134 = load double, double* %29, align 8
  %135 = fdiv double %133, %134
  %136 = call double @llvm.fabs.f64(double %135)
  store double %136, double* %31, align 8
  %137 = load double, double* %31, align 8
  %138 = load double, double* %26, align 8
  %139 = call double @sqrt(double %138) #9
  %140 = fdiv double %137, %139
  store double %140, double* %32, align 8
  %141 = load double, double* %31, align 8
  %142 = load double, double* %27, align 8
  %143 = call double @sqrt(double %142) #9
  %144 = fdiv double %141, %143
  store double %144, double* %33, align 8
  %145 = load double, double* %10, align 8
  %146 = load float, float* %22, align 4
  %147 = fpext float %146 to double
  %148 = load double, double* %32, align 8
  %149 = fmul double %147, %148
  %150 = fadd double %145, %149
  %151 = fptrunc double %150 to float
  store float %151, float* %16, align 4
  %152 = load double, double* %11, align 8
  %153 = load float, float* %23, align 4
  %154 = fpext float %153 to double
  %155 = load double, double* %32, align 8
  %156 = fmul double %154, %155
  %157 = fadd double %152, %156
  %158 = fptrunc double %157 to float
  store float %158, float* %17, align 4
  %159 = load double, double* %10, align 8
  %160 = load float, float* %24, align 4
  %161 = fpext float %160 to double
  %162 = load double, double* %33, align 8
  %163 = fmul double %161, %162
  %164 = fadd double %159, %163
  %165 = fptrunc double %164 to float
  store float %165, float* %18, align 4
  %166 = load double, double* %11, align 8
  %167 = load float, float* %25, align 4
  %168 = fpext float %167 to double
  %169 = load double, double* %33, align 8
  %170 = fmul double %168, %169
  %171 = fadd double %166, %170
  %172 = fptrunc double %171 to float
  store float %172, float* %19, align 4
  %173 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  %174 = load float, float* %16, align 4
  %175 = fpext float %174 to double
  %176 = load float, float* %17, align 4
  %177 = fpext float %176 to double
  %178 = load float, float* %18, align 4
  %179 = fpext float %178 to double
  %180 = load float, float* %19, align 4
  %181 = fpext float %180 to double
  %182 = load double, double* %10, align 8
  %183 = load double, double* %11, align 8
  %184 = call i32 @arc_add(%struct.gs_state_s* %173, double %175, double %177, double %179, double %181, double %182, double %183, i32 1)
  store i32 %184, i32* %21, align 4
  br label %185

185:                                              ; preds = %130, %125
  %186 = load float*, float** %15, align 8
  %187 = icmp ne float* %186, null
  br i1 %187, label %188, label %201

188:                                              ; preds = %185
  %189 = load float, float* %16, align 4
  %190 = load float*, float** %15, align 8
  %191 = getelementptr inbounds float, float* %190, i64 0
  store float %189, float* %191, align 4
  %192 = load float, float* %17, align 4
  %193 = load float*, float** %15, align 8
  %194 = getelementptr inbounds float, float* %193, i64 1
  store float %192, float* %194, align 4
  %195 = load float, float* %18, align 4
  %196 = load float*, float** %15, align 8
  %197 = getelementptr inbounds float, float* %196, i64 2
  store float %195, float* %197, align 4
  %198 = load float, float* %19, align 4
  %199 = load float*, float** %15, align 8
  %200 = getelementptr inbounds float, float* %199, i64 3
  store float %198, float* %200, align 4
  br label %201

201:                                              ; preds = %188, %185
  %202 = load i32, i32* %21, align 4
  store i32 %202, i32* %8, align 4
  br label %203

203:                                              ; preds = %201, %41, %36
  %204 = load i32, i32* %8, align 4
  ret i32 %204
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double) #6

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_curveto(%struct.gs_state_s* %0, double %1, double %2, double %3, double %4, double %5, double %6) #0 {
  %8 = alloca i32, align 4
  %9 = alloca %struct.gs_state_s*, align 8
  %10 = alloca double, align 8
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca %struct.timeval, align 8
  %17 = alloca %struct.timeval, align 8
  %18 = alloca %struct.timeval, align 8
  %19 = alloca i32, align 4
  store %struct.gs_state_s* %0, %struct.gs_state_s** %9, align 8
  store double %1, double* %10, align 8
  store double %2, double* %11, align 8
  store double %3, double* %12, align 8
  store double %4, double* %13, align 8
  store double %5, double* %14, align 8
  store double %6, double* %15, align 8
  %20 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  %21 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %20, i32 0, i32 2
  %22 = load double, double* %10, align 8
  %23 = load double, double* %11, align 8
  %24 = call i32 @gs_point_transform2fixed(%struct.gs_matrix_fixed_s* %21, double %22, double %23, %struct.timeval* %16)
  store i32 %24, i32* %19, align 4
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %40, label %26

26:                                               ; preds = %7
  %27 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  %28 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %27, i32 0, i32 2
  %29 = load double, double* %12, align 8
  %30 = load double, double* %13, align 8
  %31 = call i32 @gs_point_transform2fixed(%struct.gs_matrix_fixed_s* %28, double %29, double %30, %struct.timeval* %17)
  store i32 %31, i32* %19, align 4
  %32 = icmp slt i32 %31, 0
  br i1 %32, label %40, label %33

33:                                               ; preds = %26
  %34 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  %35 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %34, i32 0, i32 2
  %36 = load double, double* %14, align 8
  %37 = load double, double* %15, align 8
  %38 = call i32 @gs_point_transform2fixed(%struct.gs_matrix_fixed_s* %35, double %36, double %37, %struct.timeval* %18)
  store i32 %38, i32* %19, align 4
  %39 = icmp slt i32 %38, 0
  br i1 %39, label %40, label %42

40:                                               ; preds = %33, %26, %7
  %41 = load i32, i32* %19, align 4
  store i32 %41, i32* %8, align 4
  br label %59

42:                                               ; preds = %33
  %43 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  %44 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %43, i32 0, i32 7
  %45 = load %struct.gx_path_s*, %struct.gx_path_s** %44, align 8
  %46 = getelementptr inbounds %struct.timeval, %struct.timeval* %16, i32 0, i32 0
  %47 = load i64, i64* %46, align 8
  %48 = getelementptr inbounds %struct.timeval, %struct.timeval* %16, i32 0, i32 1
  %49 = load i64, i64* %48, align 8
  %50 = getelementptr inbounds %struct.timeval, %struct.timeval* %17, i32 0, i32 0
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds %struct.timeval, %struct.timeval* %17, i32 0, i32 1
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds %struct.timeval, %struct.timeval* %18, i32 0, i32 0
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %struct.timeval, %struct.timeval* %18, i32 0, i32 1
  %57 = load i64, i64* %56, align 8
  %58 = call i32 @gx_path_add_curve(%struct.gx_path_s* %45, i64 %47, i64 %49, i64 %51, i64 %53, i64 %55, i64 %57)
  store i32 %58, i32* %8, align 4
  br label %59

59:                                               ; preds = %42, %40
  %60 = load i32, i32* %8, align 4
  ret i32 %60
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_rcurveto(%struct.gs_state_s* %0, double %1, double %2, double %3, double %4, double %5, double %6) #0 {
  %8 = alloca i32, align 4
  %9 = alloca %struct.gs_state_s*, align 8
  %10 = alloca double, align 8
  %11 = alloca double, align 8
  %12 = alloca double, align 8
  %13 = alloca double, align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca %struct.timeval, align 8
  %17 = alloca %struct.timeval, align 8
  %18 = alloca %struct.timeval, align 8
  %19 = alloca %struct.timeval, align 8
  %20 = alloca i32, align 4
  store %struct.gs_state_s* %0, %struct.gs_state_s** %9, align 8
  store double %1, double* %10, align 8
  store double %2, double* %11, align 8
  store double %3, double* %12, align 8
  store double %4, double* %13, align 8
  store double %5, double* %14, align 8
  store double %6, double* %15, align 8
  %21 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  %22 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %21, i32 0, i32 7
  %23 = load %struct.gx_path_s*, %struct.gx_path_s** %22, align 8
  %24 = call i32 @gx_path_current_point(%struct.gx_path_s* %23, %struct.timeval* %16)
  store i32 %24, i32* %20, align 4
  %25 = load i32, i32* %20, align 4
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %27, label %29

27:                                               ; preds = %7
  %28 = load i32, i32* %20, align 4
  store i32 %28, i32* %8, align 4
  br label %87

29:                                               ; preds = %7
  %30 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  %31 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %30, i32 0, i32 2
  %32 = load double, double* %10, align 8
  %33 = load double, double* %11, align 8
  %34 = call i32 @gs_distance_transform2fixed(%struct.gs_matrix_fixed_s* %31, double %32, double %33, %struct.timeval* %17)
  store i32 %34, i32* %20, align 4
  %35 = icmp slt i32 %34, 0
  br i1 %35, label %50, label %36

36:                                               ; preds = %29
  %37 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  %38 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %37, i32 0, i32 2
  %39 = load double, double* %12, align 8
  %40 = load double, double* %13, align 8
  %41 = call i32 @gs_distance_transform2fixed(%struct.gs_matrix_fixed_s* %38, double %39, double %40, %struct.timeval* %18)
  store i32 %41, i32* %20, align 4
  %42 = icmp slt i32 %41, 0
  br i1 %42, label %50, label %43

43:                                               ; preds = %36
  %44 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  %45 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %44, i32 0, i32 2
  %46 = load double, double* %14, align 8
  %47 = load double, double* %15, align 8
  %48 = call i32 @gs_distance_transform2fixed(%struct.gs_matrix_fixed_s* %45, double %46, double %47, %struct.timeval* %19)
  store i32 %48, i32* %20, align 4
  %49 = icmp slt i32 %48, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %43, %36, %29
  %51 = load i32, i32* %20, align 4
  store i32 %51, i32* %8, align 4
  br label %87

52:                                               ; preds = %43
  %53 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  %54 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %53, i32 0, i32 7
  %55 = load %struct.gx_path_s*, %struct.gx_path_s** %54, align 8
  %56 = getelementptr inbounds %struct.timeval, %struct.timeval* %16, i32 0, i32 0
  %57 = load i64, i64* %56, align 8
  %58 = getelementptr inbounds %struct.timeval, %struct.timeval* %17, i32 0, i32 0
  %59 = load i64, i64* %58, align 8
  %60 = add nsw i64 %57, %59
  %61 = getelementptr inbounds %struct.timeval, %struct.timeval* %16, i32 0, i32 1
  %62 = load i64, i64* %61, align 8
  %63 = getelementptr inbounds %struct.timeval, %struct.timeval* %17, i32 0, i32 1
  %64 = load i64, i64* %63, align 8
  %65 = add nsw i64 %62, %64
  %66 = getelementptr inbounds %struct.timeval, %struct.timeval* %16, i32 0, i32 0
  %67 = load i64, i64* %66, align 8
  %68 = getelementptr inbounds %struct.timeval, %struct.timeval* %18, i32 0, i32 0
  %69 = load i64, i64* %68, align 8
  %70 = add nsw i64 %67, %69
  %71 = getelementptr inbounds %struct.timeval, %struct.timeval* %16, i32 0, i32 1
  %72 = load i64, i64* %71, align 8
  %73 = getelementptr inbounds %struct.timeval, %struct.timeval* %18, i32 0, i32 1
  %74 = load i64, i64* %73, align 8
  %75 = add nsw i64 %72, %74
  %76 = getelementptr inbounds %struct.timeval, %struct.timeval* %16, i32 0, i32 0
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %struct.timeval, %struct.timeval* %19, i32 0, i32 0
  %79 = load i64, i64* %78, align 8
  %80 = add nsw i64 %77, %79
  %81 = getelementptr inbounds %struct.timeval, %struct.timeval* %16, i32 0, i32 1
  %82 = load i64, i64* %81, align 8
  %83 = getelementptr inbounds %struct.timeval, %struct.timeval* %19, i32 0, i32 1
  %84 = load i64, i64* %83, align 8
  %85 = add nsw i64 %82, %84
  %86 = call i32 @gx_path_add_curve(%struct.gx_path_s* %55, i64 %60, i64 %65, i64 %70, i64 %75, i64 %80, i64 %85)
  store i32 %86, i32* %8, align 4
  br label %87

87:                                               ; preds = %52, %50, %27
  %88 = load i32, i32* %8, align 4
  ret i32 %88
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.gs_state_s* @gs_state_alloc(i8* (i32, i32, i8*)* %0, void (i8*, i32, i32, i8*)* %1) #0 {
  %3 = alloca %struct.gs_state_s*, align 8
  %4 = alloca i8* (i32, i32, i8*)*, align 8
  %5 = alloca void (i8*, i32, i32, i8*)*, align 8
  %6 = alloca %struct.gs_state_s*, align 8
  store i8* (i32, i32, i8*)* %0, i8* (i32, i32, i8*)** %4, align 8
  store void (i8*, i32, i32, i8*)* %1, void (i8*, i32, i32, i8*)** %5, align 8
  %7 = load i8* (i32, i32, i8*)*, i8* (i32, i32, i8*)** %4, align 8
  %8 = call i8* %7(i32 1, i32 464, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.106, i64 0, i64 0))
  %9 = bitcast i8* %8 to %struct.gs_state_s*
  store %struct.gs_state_s* %9, %struct.gs_state_s** %6, align 8
  %10 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %11 = icmp eq %struct.gs_state_s* %10, null
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  store %struct.gs_state_s* null, %struct.gs_state_s** %3, align 8
  br label %63

13:                                               ; preds = %2
  %14 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %15 = load i8* (i32, i32, i8*)*, i8* (i32, i32, i8*)** %4, align 8
  %16 = call i32 @alloc_state_contents(%struct.gs_state_s* %14, i8* (i32, i32, i8*)* %15)
  %17 = icmp slt i32 %16, 0
  br i1 %17, label %18, label %19

18:                                               ; preds = %13
  store %struct.gs_state_s* null, %struct.gs_state_s** %3, align 8
  br label %63

19:                                               ; preds = %13
  %20 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %21 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %20, i32 0, i32 0
  store %struct.gs_state_s* null, %struct.gs_state_s** %21, align 8
  %22 = load i8* (i32, i32, i8*)*, i8* (i32, i32, i8*)** %4, align 8
  %23 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %24 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %23, i32 0, i32 1
  %25 = getelementptr inbounds %struct.gs_memory_procs, %struct.gs_memory_procs* %24, i32 0, i32 0
  store i8* (i32, i32, i8*)* %22, i8* (i32, i32, i8*)** %25, align 8
  %26 = load void (i8*, i32, i32, i8*)*, void (i8*, i32, i32, i8*)** %5, align 8
  %27 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %28 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %27, i32 0, i32 1
  %29 = getelementptr inbounds %struct.gs_memory_procs, %struct.gs_memory_procs* %28, i32 0, i32 1
  store void (i8*, i32, i32, i8*)* %26, void (i8*, i32, i32, i8*)** %29, align 8
  %30 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %31 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %30, i32 0, i32 7
  %32 = load %struct.gx_path_s*, %struct.gx_path_s** %31, align 8
  %33 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %32, i32 0, i32 4
  store %struct.subpath* null, %struct.subpath** %33, align 8
  %34 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %35 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %34, i32 0, i32 8
  %36 = load %struct.gx_path_s*, %struct.gx_path_s** %35, align 8
  %37 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %36, i32 0, i32 4
  store %struct.subpath* null, %struct.subpath** %37, align 8
  %38 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %39 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %38, i32 0, i32 11
  %40 = load %struct.halftone_s*, %struct.halftone_s** %39, align 8
  %41 = getelementptr inbounds %struct.halftone_s, %struct.halftone_s* %40, i32 0, i32 5
  store i32 0, i32* %41, align 8
  %42 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %43 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %42, i32 0, i32 11
  %44 = load %struct.halftone_s*, %struct.halftone_s** %43, align 8
  %45 = getelementptr inbounds %struct.halftone_s, %struct.halftone_s* %44, i32 0, i32 3
  store i32 0, i32* %45, align 4
  %46 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %47 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %46, i32 0, i32 11
  %48 = load %struct.halftone_s*, %struct.halftone_s** %47, align 8
  %49 = getelementptr inbounds %struct.halftone_s, %struct.halftone_s* %48, i32 0, i32 2
  store i32 0, i32* %49, align 8
  %50 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  call void @gs_nulldevice(%struct.gs_state_s* %50)
  %51 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %52 = call i32 @gs_setflat(%struct.gs_state_s* %51, double 1.000000e+00)
  %53 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %54 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %53, i32 0, i32 20
  store i8 0, i8* %54, align 1
  %55 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %56 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %55, i32 0, i32 19
  store i8 0, i8* %56, align 4
  %57 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %58 = call i32 @gs_initgraphics(%struct.gs_state_s* %57)
  %59 = icmp slt i32 %58, 0
  br i1 %59, label %60, label %61

60:                                               ; preds = %19
  store %struct.gs_state_s* null, %struct.gs_state_s** %3, align 8
  br label %63

61:                                               ; preds = %19
  %62 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  store %struct.gs_state_s* %62, %struct.gs_state_s** %3, align 8
  br label %63

63:                                               ; preds = %61, %60, %18, %12
  %64 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  ret %struct.gs_state_s* %64
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @alloc_state_contents(%struct.gs_state_s* %0, i8* (i32, i32, i8*)* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.gs_state_s*, align 8
  %5 = alloca i8* (i32, i32, i8*)*, align 8
  %6 = alloca i8*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %4, align 8
  store i8* (i32, i32, i8*)* %1, i8* (i32, i32, i8*)** %5, align 8
  %7 = load i8* (i32, i32, i8*)*, i8* (i32, i32, i8*)** %5, align 8
  %8 = load i8*, i8** @alloc_state_contents.cname, align 8
  %9 = call i8* %7(i32 1, i32 144, i8* %8)
  store i8* %9, i8** %6, align 8
  %10 = icmp eq i8* %9, null
  br i1 %10, label %11, label %12

11:                                               ; preds = %2
  store i32 -1, i32* %3, align 4
  br label %79

12:                                               ; preds = %2
  %13 = load i8*, i8** %6, align 8
  %14 = bitcast i8* %13 to %struct.gx_path_s*
  %15 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %16 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %15, i32 0, i32 7
  store %struct.gx_path_s* %14, %struct.gx_path_s** %16, align 8
  %17 = load i8* (i32, i32, i8*)*, i8* (i32, i32, i8*)** %5, align 8
  %18 = load i8*, i8** @alloc_state_contents.cname, align 8
  %19 = call i8* %17(i32 1, i32 144, i8* %18)
  store i8* %19, i8** %6, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %21, label %22

21:                                               ; preds = %12
  store i32 -1, i32* %3, align 4
  br label %79

22:                                               ; preds = %12
  %23 = load i8*, i8** %6, align 8
  %24 = bitcast i8* %23 to %struct.gx_path_s*
  %25 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %26 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %25, i32 0, i32 8
  store %struct.gx_path_s* %24, %struct.gx_path_s** %26, align 8
  %27 = load i8* (i32, i32, i8*)*, i8* (i32, i32, i8*)** %5, align 8
  %28 = load i8*, i8** @alloc_state_contents.cname, align 8
  %29 = call i8* %27(i32 1, i32 56, i8* %28)
  store i8* %29, i8** %6, align 8
  %30 = icmp eq i8* %29, null
  br i1 %30, label %31, label %32

31:                                               ; preds = %22
  store i32 -1, i32* %3, align 4
  br label %79

32:                                               ; preds = %22
  %33 = load i8*, i8** %6, align 8
  %34 = bitcast i8* %33 to %struct.line_params_s*
  %35 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %36 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %35, i32 0, i32 10
  store %struct.line_params_s* %34, %struct.line_params_s** %36, align 8
  %37 = load i8* (i32, i32, i8*)*, i8* (i32, i32, i8*)** %5, align 8
  %38 = load i8*, i8** @alloc_state_contents.cname, align 8
  %39 = call i8* %37(i32 1, i32 32, i8* %38)
  store i8* %39, i8** %6, align 8
  %40 = icmp eq i8* %39, null
  br i1 %40, label %41, label %42

41:                                               ; preds = %32
  store i32 -1, i32* %3, align 4
  br label %79

42:                                               ; preds = %32
  %43 = load i8*, i8** %6, align 8
  %44 = bitcast i8* %43 to %struct.halftone_s*
  %45 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %46 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %45, i32 0, i32 11
  store %struct.halftone_s* %44, %struct.halftone_s** %46, align 8
  %47 = load i8* (i32, i32, i8*)*, i8* (i32, i32, i8*)** %5, align 8
  %48 = load i8*, i8** @alloc_state_contents.cname, align 8
  %49 = call i8* %47(i32 1, i32 10, i8* %48)
  store i8* %49, i8** %6, align 8
  %50 = icmp eq i8* %49, null
  br i1 %50, label %51, label %52

51:                                               ; preds = %42
  store i32 -1, i32* %3, align 4
  br label %79

52:                                               ; preds = %42
  %53 = load i8*, i8** %6, align 8
  %54 = bitcast i8* %53 to %struct.gs_color_s*
  %55 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %56 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %55, i32 0, i32 13
  store %struct.gs_color_s* %54, %struct.gs_color_s** %56, align 8
  %57 = load i8* (i32, i32, i8*)*, i8* (i32, i32, i8*)** %5, align 8
  %58 = load i8*, i8** @alloc_state_contents.cname, align 8
  %59 = call i8* %57(i32 1, i32 32, i8* %58)
  store i8* %59, i8** %6, align 8
  %60 = icmp eq i8* %59, null
  br i1 %60, label %61, label %62

61:                                               ; preds = %52
  store i32 -1, i32* %3, align 4
  br label %79

62:                                               ; preds = %52
  %63 = load i8*, i8** %6, align 8
  %64 = bitcast i8* %63 to %struct.gx_device_color_s*
  %65 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %66 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %65, i32 0, i32 14
  store %struct.gx_device_color_s* %64, %struct.gx_device_color_s** %66, align 8
  %67 = load i8* (i32, i32, i8*)*, i8* (i32, i32, i8*)** %5, align 8
  %68 = load i8*, i8** @alloc_state_contents.cname, align 8
  %69 = call i8* %67(i32 1, i32 32, i8* %68)
  store i8* %69, i8** %6, align 8
  %70 = icmp eq i8* %69, null
  br i1 %70, label %71, label %72

71:                                               ; preds = %62
  store i32 -1, i32* %3, align 4
  br label %79

72:                                               ; preds = %62
  %73 = load i8*, i8** %6, align 8
  %74 = bitcast i8* %73 to %struct.device_s*
  %75 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %76 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %75, i32 0, i32 22
  store %struct.device_s* %74, %struct.device_s** %76, align 8
  %77 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %78 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %77, i32 0, i32 23
  store i32 0, i32* %78, align 8
  store i32 0, i32* %3, align 4
  br label %79

79:                                               ; preds = %72, %71, %61, %51, %41, %31, %21, %11
  %80 = load i32, i32* %3, align 4
  ret i32 %80
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_setflat(%struct.gs_state_s* %0, double %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.gs_state_s*, align 8
  %5 = alloca double, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %4, align 8
  store double %1, double* %5, align 8
  %6 = load double, double* %5, align 8
  %7 = fcmp ole double %6, 0.000000e+00
  br i1 %7, label %8, label %9

8:                                                ; preds = %2
  store i32 -15, i32* %3, align 4
  br label %14

9:                                                ; preds = %2
  %10 = load double, double* %5, align 8
  %11 = fptrunc double %10 to float
  %12 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %13 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %12, i32 0, i32 21
  store float %11, float* %13, align 8
  store i32 0, i32* %3, align 4
  br label %14

14:                                               ; preds = %9, %8
  %15 = load i32, i32* %3, align 4
  ret i32 %15
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_initgraphics(%struct.gs_state_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.gs_state_s*, align 8
  %4 = alloca i32, align 4
  store %struct.gs_state_s* %0, %struct.gs_state_s** %3, align 8
  %5 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %6 = call i32 (%struct.gs_state_s*, ...) bitcast (i32 (%struct.gs_state_s*)* @gs_initmatrix to i32 (%struct.gs_state_s*, ...)*)(%struct.gs_state_s* %5)
  %7 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %8 = call i32 (%struct.gs_state_s*, ...) bitcast (i32 (%struct.gs_state_s*)* @gs_newpath to i32 (%struct.gs_state_s*, ...)*)(%struct.gs_state_s* %7)
  store i32 %8, i32* %4, align 4
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %38, label %10

10:                                               ; preds = %1
  %11 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %12 = call i32 (%struct.gs_state_s*, ...) bitcast (i32 (%struct.gs_state_s*)* @gs_initclip to i32 (%struct.gs_state_s*, ...)*)(%struct.gs_state_s* %11)
  store i32 %12, i32* %4, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %38, label %14

14:                                               ; preds = %10
  %15 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %16 = call i32 @gs_setlinewidth(%struct.gs_state_s* %15, double 1.000000e+00)
  store i32 %16, i32* %4, align 4
  %17 = icmp slt i32 %16, 0
  br i1 %17, label %38, label %18

18:                                               ; preds = %14
  %19 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %20 = call i32 @gs_setlinecap(%struct.gs_state_s* %19, i32 0)
  store i32 %20, i32* %4, align 4
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %38, label %22

22:                                               ; preds = %18
  %23 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %24 = call i32 @gs_setlinejoin(%struct.gs_state_s* %23, i32 0)
  store i32 %24, i32* %4, align 4
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %38, label %26

26:                                               ; preds = %22
  %27 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %28 = call i32 @gs_setdash(%struct.gs_state_s* %27, float* null, i32 0, double 0.000000e+00)
  store i32 %28, i32* %4, align 4
  %29 = icmp slt i32 %28, 0
  br i1 %29, label %38, label %30

30:                                               ; preds = %26
  %31 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %32 = call i32 @gs_setgray(%struct.gs_state_s* %31, double 0.000000e+00)
  store i32 %32, i32* %4, align 4
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %38, label %34

34:                                               ; preds = %30
  %35 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %36 = call i32 @gs_setmiterlimit(%struct.gs_state_s* %35, double 1.000000e+01)
  store i32 %36, i32* %4, align 4
  %37 = icmp slt i32 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %34, %30, %26, %22, %18, %14, %10, %1
  %39 = load i32, i32* %4, align 4
  store i32 %39, i32* %2, align 4
  br label %41

40:                                               ; preds = %34
  store i32 0, i32* %2, align 4
  br label %41

41:                                               ; preds = %40, %38
  %42 = load i32, i32* %2, align 4
  ret i32 %42
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_state_free(%struct.gs_state_s* %0) #0 {
  %2 = alloca %struct.gs_state_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  call void @free_state_contents(%struct.gs_state_s* %3)
  %4 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %5 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %4, i32 0, i32 1
  %6 = getelementptr inbounds %struct.gs_memory_procs, %struct.gs_memory_procs* %5, i32 0, i32 1
  %7 = load void (i8*, i32, i32, i8*)*, void (i8*, i32, i32, i8*)** %6, align 8
  %8 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %9 = bitcast %struct.gs_state_s* %8 to i8*
  call void %7(i8* %9, i32 1, i32 464, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1.108, i64 0, i64 0))
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_state_contents(%struct.gs_state_s* %0) #0 {
  %2 = alloca %struct.gs_state_s*, align 8
  %3 = alloca void (i8*, i32, i32, i8*)*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %2, align 8
  %4 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %5 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %4, i32 0, i32 1
  %6 = getelementptr inbounds %struct.gs_memory_procs, %struct.gs_memory_procs* %5, i32 0, i32 1
  %7 = load void (i8*, i32, i32, i8*)*, void (i8*, i32, i32, i8*)** %6, align 8
  store void (i8*, i32, i32, i8*)* %7, void (i8*, i32, i32, i8*)** %3, align 8
  %8 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %9 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %8, i32 0, i32 8
  %10 = load %struct.gx_path_s*, %struct.gx_path_s** %9, align 8
  call void @gx_path_release(%struct.gx_path_s* %10)
  %11 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %12 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %11, i32 0, i32 7
  %13 = load %struct.gx_path_s*, %struct.gx_path_s** %12, align 8
  call void @gx_path_release(%struct.gx_path_s* %13)
  %14 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %15 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %14, i32 0, i32 23
  %16 = load i32, i32* %15, align 8
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %25, label %18

18:                                               ; preds = %1
  %19 = load void (i8*, i32, i32, i8*)*, void (i8*, i32, i32, i8*)** %3, align 8
  %20 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %21 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %20, i32 0, i32 22
  %22 = load %struct.device_s*, %struct.device_s** %21, align 8
  %23 = bitcast %struct.device_s* %22 to i8*
  %24 = load i8*, i8** @free_state_contents.cname, align 8
  call void %19(i8* %23, i32 1, i32 32, i8* %24)
  br label %25

25:                                               ; preds = %18, %1
  %26 = load void (i8*, i32, i32, i8*)*, void (i8*, i32, i32, i8*)** %3, align 8
  %27 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %28 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %27, i32 0, i32 14
  %29 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %28, align 8
  %30 = bitcast %struct.gx_device_color_s* %29 to i8*
  %31 = load i8*, i8** @free_state_contents.cname, align 8
  call void %26(i8* %30, i32 1, i32 32, i8* %31)
  %32 = load void (i8*, i32, i32, i8*)*, void (i8*, i32, i32, i8*)** %3, align 8
  %33 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %34 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %33, i32 0, i32 13
  %35 = load %struct.gs_color_s*, %struct.gs_color_s** %34, align 8
  %36 = bitcast %struct.gs_color_s* %35 to i8*
  %37 = load i8*, i8** @free_state_contents.cname, align 8
  call void %32(i8* %36, i32 1, i32 10, i8* %37)
  %38 = load void (i8*, i32, i32, i8*)*, void (i8*, i32, i32, i8*)** %3, align 8
  %39 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %40 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %39, i32 0, i32 11
  %41 = load %struct.halftone_s*, %struct.halftone_s** %40, align 8
  %42 = bitcast %struct.halftone_s* %41 to i8*
  %43 = load i8*, i8** @free_state_contents.cname, align 8
  call void %38(i8* %42, i32 1, i32 32, i8* %43)
  %44 = load void (i8*, i32, i32, i8*)*, void (i8*, i32, i32, i8*)** %3, align 8
  %45 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %46 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %45, i32 0, i32 10
  %47 = load %struct.line_params_s*, %struct.line_params_s** %46, align 8
  %48 = bitcast %struct.line_params_s* %47 to i8*
  %49 = load i8*, i8** @free_state_contents.cname, align 8
  call void %44(i8* %48, i32 1, i32 56, i8* %49)
  %50 = load void (i8*, i32, i32, i8*)*, void (i8*, i32, i32, i8*)** %3, align 8
  %51 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %52 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %51, i32 0, i32 8
  %53 = load %struct.gx_path_s*, %struct.gx_path_s** %52, align 8
  %54 = bitcast %struct.gx_path_s* %53 to i8*
  %55 = load i8*, i8** @free_state_contents.cname, align 8
  call void %50(i8* %54, i32 1, i32 144, i8* %55)
  %56 = load void (i8*, i32, i32, i8*)*, void (i8*, i32, i32, i8*)** %3, align 8
  %57 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %58 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %57, i32 0, i32 7
  %59 = load %struct.gx_path_s*, %struct.gx_path_s** %58, align 8
  %60 = bitcast %struct.gx_path_s* %59 to i8*
  %61 = load i8*, i8** @free_state_contents.cname, align 8
  call void %56(i8* %60, i32 1, i32 144, i8* %61)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_gsave(%struct.gs_state_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.gs_state_s*, align 8
  %4 = alloca %struct.gs_state_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %3, align 8
  %5 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %6 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %5, i32 0, i32 1
  %7 = getelementptr inbounds %struct.gs_memory_procs, %struct.gs_memory_procs* %6, i32 0, i32 0
  %8 = load i8* (i32, i32, i8*)*, i8* (i32, i32, i8*)** %7, align 8
  %9 = call i8* %8(i32 1, i32 464, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2.112, i64 0, i64 0))
  %10 = bitcast i8* %9 to %struct.gs_state_s*
  store %struct.gs_state_s* %10, %struct.gs_state_s** %4, align 8
  %11 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %12 = icmp eq %struct.gs_state_s* %11, null
  br i1 %12, label %13, label %14

13:                                               ; preds = %1
  store i32 -25, i32* %2, align 4
  br label %93

14:                                               ; preds = %1
  %15 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %16 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %17 = bitcast %struct.gs_state_s* %15 to i8*
  %18 = bitcast %struct.gs_state_s* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 %18, i64 464, i1 false)
  %19 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %20 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %21 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %20, i32 0, i32 1
  %22 = getelementptr inbounds %struct.gs_memory_procs, %struct.gs_memory_procs* %21, i32 0, i32 0
  %23 = load i8* (i32, i32, i8*)*, i8* (i32, i32, i8*)** %22, align 8
  %24 = call i32 @alloc_state_contents(%struct.gs_state_s* %19, i8* (i32, i32, i8*)* %23)
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %26, label %27

26:                                               ; preds = %14
  store i32 -25, i32* %2, align 4
  br label %93

27:                                               ; preds = %14
  %28 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %29 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %28, i32 0, i32 7
  %30 = load %struct.gx_path_s*, %struct.gx_path_s** %29, align 8
  %31 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %32 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %31, i32 0, i32 7
  %33 = load %struct.gx_path_s*, %struct.gx_path_s** %32, align 8
  %34 = bitcast %struct.gx_path_s* %30 to i8*
  %35 = bitcast %struct.gx_path_s* %33 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 %35, i64 144, i1 false)
  %36 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %37 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %36, i32 0, i32 8
  %38 = load %struct.gx_path_s*, %struct.gx_path_s** %37, align 8
  %39 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %40 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %39, i32 0, i32 8
  %41 = load %struct.gx_path_s*, %struct.gx_path_s** %40, align 8
  %42 = bitcast %struct.gx_path_s* %38 to i8*
  %43 = bitcast %struct.gx_path_s* %41 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* align 8 %43, i64 144, i1 false)
  %44 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %45 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %44, i32 0, i32 10
  %46 = load %struct.line_params_s*, %struct.line_params_s** %45, align 8
  %47 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %48 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %47, i32 0, i32 10
  %49 = load %struct.line_params_s*, %struct.line_params_s** %48, align 8
  %50 = bitcast %struct.line_params_s* %46 to i8*
  %51 = bitcast %struct.line_params_s* %49 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %51, i64 56, i1 false)
  %52 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %53 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %52, i32 0, i32 11
  %54 = load %struct.halftone_s*, %struct.halftone_s** %53, align 8
  %55 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %56 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %55, i32 0, i32 11
  %57 = load %struct.halftone_s*, %struct.halftone_s** %56, align 8
  %58 = bitcast %struct.halftone_s* %54 to i8*
  %59 = bitcast %struct.halftone_s* %57 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %58, i8* align 8 %59, i64 32, i1 false)
  %60 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %61 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %60, i32 0, i32 13
  %62 = load %struct.gs_color_s*, %struct.gs_color_s** %61, align 8
  %63 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %64 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %63, i32 0, i32 13
  %65 = load %struct.gs_color_s*, %struct.gs_color_s** %64, align 8
  %66 = bitcast %struct.gs_color_s* %62 to i8*
  %67 = bitcast %struct.gs_color_s* %65 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %66, i8* align 2 %67, i64 10, i1 false)
  %68 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %69 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %68, i32 0, i32 14
  %70 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %69, align 8
  %71 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %72 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %71, i32 0, i32 14
  %73 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %72, align 8
  %74 = bitcast %struct.gx_device_color_s* %70 to i8*
  %75 = bitcast %struct.gx_device_color_s* %73 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %74, i8* align 8 %75, i64 32, i1 false)
  %76 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %77 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %76, i32 0, i32 22
  %78 = load %struct.device_s*, %struct.device_s** %77, align 8
  %79 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %80 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %79, i32 0, i32 22
  %81 = load %struct.device_s*, %struct.device_s** %80, align 8
  %82 = bitcast %struct.device_s* %78 to i8*
  %83 = bitcast %struct.device_s* %81 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %82, i8* align 8 %83, i64 32, i1 false)
  %84 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %85 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %84, i32 0, i32 7
  %86 = load %struct.gx_path_s*, %struct.gx_path_s** %85, align 8
  call void @gx_path_share(%struct.gx_path_s* %86)
  %87 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %88 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %87, i32 0, i32 8
  %89 = load %struct.gx_path_s*, %struct.gx_path_s** %88, align 8
  call void @gx_path_share(%struct.gx_path_s* %89)
  %90 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %91 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %92 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %91, i32 0, i32 0
  store %struct.gs_state_s* %90, %struct.gs_state_s** %92, align 8
  store i32 0, i32* %2, align 4
  br label %93

93:                                               ; preds = %27, %26, %13
  %94 = load i32, i32* %2, align 4
  ret i32 %94
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_grestore(%struct.gs_state_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.gs_state_s*, align 8
  %4 = alloca %struct.gs_state_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %3, align 8
  %5 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %6 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %5, i32 0, i32 0
  %7 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  store %struct.gs_state_s* %7, %struct.gs_state_s** %4, align 8
  %8 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %9 = icmp eq %struct.gs_state_s* %8, null
  br i1 %9, label %10, label %11

10:                                               ; preds = %1
  store i32 -23, i32* %2, align 4
  br label %23

11:                                               ; preds = %1
  %12 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  call void @free_state_contents(%struct.gs_state_s* %12)
  %13 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %14 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %15 = bitcast %struct.gs_state_s* %13 to i8*
  %16 = bitcast %struct.gs_state_s* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 464, i1 false)
  %17 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %18 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %17, i32 0, i32 1
  %19 = getelementptr inbounds %struct.gs_memory_procs, %struct.gs_memory_procs* %18, i32 0, i32 1
  %20 = load void (i8*, i32, i32, i8*)*, void (i8*, i32, i32, i8*)** %19, align 8
  %21 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %22 = bitcast %struct.gs_state_s* %21 to i8*
  call void %20(i8* %22, i32 1, i32 464, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3.115, i64 0, i64 0))
  store i32 0, i32* %2, align 4
  br label %23

23:                                               ; preds = %11, %10
  %24 = load i32, i32* %2, align 4
  ret i32 %24
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_grestoreall(%struct.gs_state_s* %0) #0 {
  %2 = alloca %struct.gs_state_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %2, align 8
  br label %3

3:                                                ; preds = %7, %1
  %4 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %5 = call i32 @gs_grestore(%struct.gs_state_s* %4)
  %6 = icmp sge i32 %5, 0
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  br label %3

8:                                                ; preds = %3
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.gs_state_s* @gs_state_swap_saved(%struct.gs_state_s* %0, %struct.gs_state_s* %1) #0 {
  %3 = alloca %struct.gs_state_s*, align 8
  %4 = alloca %struct.gs_state_s*, align 8
  %5 = alloca %struct.gs_state_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %3, align 8
  store %struct.gs_state_s* %1, %struct.gs_state_s** %4, align 8
  %6 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %7 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %6, i32 0, i32 0
  %8 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  store %struct.gs_state_s* %8, %struct.gs_state_s** %5, align 8
  %9 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %10 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %11 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %10, i32 0, i32 0
  store %struct.gs_state_s* %9, %struct.gs_state_s** %11, align 8
  %12 = load %struct.gs_state_s*, %struct.gs_state_s** %5, align 8
  ret %struct.gs_state_s* %12
}

; Function Attrs: noinline nounwind uwtable
define dso_local float @gs_currentflat(%struct.gs_state_s* %0) #0 {
  %2 = alloca %struct.gs_state_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** %2, align 8
  %4 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %3, i32 0, i32 21
  %5 = load float, float* %4, align 8
  ret float %5
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_type1_encrypt(i8* %0, i8* %1, i32 %2, i16* %3) #0 {
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i16*, align 8
  %9 = alloca i16, align 2
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  store i8* %0, i8** %5, align 8
  store i8* %1, i8** %6, align 8
  store i32 %2, i32* %7, align 4
  store i16* %3, i16** %8, align 8
  %13 = load i16*, i16** %8, align 8
  %14 = load i16, i16* %13, align 2
  store i16 %14, i16* %9, align 2
  %15 = load i8*, i8** %6, align 8
  store i8* %15, i8** %10, align 8
  %16 = load i8*, i8** %5, align 8
  store i8* %16, i8** %11, align 8
  %17 = load i32, i32* %7, align 4
  store i32 %17, i32* %12, align 4
  br label %18

18:                                               ; preds = %21, %4
  %19 = load i32, i32* %12, align 4
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %46

21:                                               ; preds = %18
  %22 = load i8*, i8** %10, align 8
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = load i16, i16* %9, align 2
  %26 = zext i16 %25 to i32
  %27 = ashr i32 %26, 8
  %28 = xor i32 %24, %27
  %29 = trunc i32 %28 to i8
  %30 = load i8*, i8** %11, align 8
  store i8 %29, i8* %30, align 1
  %31 = load i8*, i8** %11, align 8
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = load i16, i16* %9, align 2
  %35 = zext i16 %34 to i32
  %36 = add nsw i32 %33, %35
  %37 = mul nsw i32 %36, 52845
  %38 = add nsw i32 %37, 22719
  %39 = trunc i32 %38 to i16
  store i16 %39, i16* %9, align 2
  %40 = load i8*, i8** %10, align 8
  %41 = getelementptr inbounds i8, i8* %40, i32 1
  store i8* %41, i8** %10, align 8
  %42 = load i8*, i8** %11, align 8
  %43 = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %43, i8** %11, align 8
  %44 = load i32, i32* %12, align 4
  %45 = add i32 %44, -1
  store i32 %45, i32* %12, align 4
  br label %18

46:                                               ; preds = %18
  %47 = load i16, i16* %9, align 2
  %48 = load i16*, i16** %8, align 8
  store i16 %47, i16* %48, align 2
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_type1_decrypt(i8* %0, i8* %1, i32 %2, i16* %3) #0 {
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i16*, align 8
  %9 = alloca i16, align 2
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i8, align 1
  store i8* %0, i8** %5, align 8
  store i8* %1, i8** %6, align 8
  store i32 %2, i32* %7, align 4
  store i16* %3, i16** %8, align 8
  %14 = load i16*, i16** %8, align 8
  %15 = load i16, i16* %14, align 2
  store i16 %15, i16* %9, align 2
  %16 = load i8*, i8** %6, align 8
  store i8* %16, i8** %10, align 8
  %17 = load i8*, i8** %5, align 8
  store i8* %17, i8** %11, align 8
  %18 = load i32, i32* %7, align 4
  store i32 %18, i32* %12, align 4
  br label %19

19:                                               ; preds = %22, %4
  %20 = load i32, i32* %12, align 4
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %22, label %46

22:                                               ; preds = %19
  %23 = load i8*, i8** %10, align 8
  %24 = getelementptr inbounds i8, i8* %23, i32 1
  store i8* %24, i8** %10, align 8
  %25 = load i8, i8* %23, align 1
  store i8 %25, i8* %13, align 1
  %26 = load i8, i8* %13, align 1
  %27 = zext i8 %26 to i32
  %28 = load i16, i16* %9, align 2
  %29 = zext i16 %28 to i32
  %30 = ashr i32 %29, 8
  %31 = xor i32 %27, %30
  %32 = trunc i32 %31 to i8
  %33 = load i8*, i8** %11, align 8
  store i8 %32, i8* %33, align 1
  %34 = load i8, i8* %13, align 1
  %35 = zext i8 %34 to i32
  %36 = load i16, i16* %9, align 2
  %37 = zext i16 %36 to i32
  %38 = add nsw i32 %35, %37
  %39 = mul nsw i32 %38, 52845
  %40 = add nsw i32 %39, 22719
  %41 = trunc i32 %40 to i16
  store i16 %41, i16* %9, align 2
  %42 = load i8*, i8** %11, align 8
  %43 = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %43, i8** %11, align 8
  %44 = load i32, i32* %12, align 4
  %45 = add i32 %44, -1
  store i32 %45, i32* %12, align 4
  br label %19

46:                                               ; preds = %19
  %47 = load i16, i16* %9, align 2
  %48 = load i16*, i16** %8, align 8
  store i16 %47, i16* %48, align 2
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_type1_init_matrix(%struct.gs_type1_state_s* %0) #0 {
  %2 = alloca %struct.gs_type1_state_s*, align 8
  %3 = alloca %struct.gs_matrix_s, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store %struct.gs_type1_state_s* %0, %struct.gs_type1_state_s** %2, align 8
  store i32 -10000, i32* %4, align 4
  %7 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %2, align 8
  %8 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %7, i32 0, i32 1
  %9 = load %struct.gs_state_s*, %struct.gs_state_s** %8, align 8
  %10 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %9, i32 0, i32 2
  %11 = bitcast %struct.gs_matrix_fixed_s* %10 to %struct.gs_matrix_s*
  %12 = bitcast %struct.gs_matrix_s* %3 to i8*
  %13 = bitcast %struct.gs_matrix_s* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 96, i1 false)
  %14 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %2, align 8
  %15 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %14, i32 0, i32 5
  %16 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %15, i32 0, i32 4
  store i32 0, i32* %16, align 8
  %17 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %3, i32 0, i32 0
  %18 = bitcast float* %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = shl i64 %19, 1
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %27, label %22

22:                                               ; preds = %1
  %23 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %3, i32 0, i32 0
  %24 = load float, float* %23, align 8
  %25 = fpext float %24 to double
  %26 = call double @frexp(double %25, i32* %4) #9
  br label %27

27:                                               ; preds = %22, %1
  %28 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %3, i32 0, i32 2
  %29 = bitcast float* %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = shl i64 %30, 1
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %47, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %3, i32 0, i32 2
  %35 = load float, float* %34, align 8
  %36 = fpext float %35 to double
  %37 = call double @frexp(double %36, i32* %5) #9
  %38 = load i32, i32* %5, align 4
  %39 = load i32, i32* %4, align 4
  %40 = icmp sgt i32 %38, %39
  br i1 %40, label %41, label %43

41:                                               ; preds = %33
  %42 = load i32, i32* %5, align 4
  store i32 %42, i32* %4, align 4
  br label %43

43:                                               ; preds = %41, %33
  %44 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %2, align 8
  %45 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %44, i32 0, i32 5
  %46 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %45, i32 0, i32 4
  store i32 1, i32* %46, align 8
  br label %47

47:                                               ; preds = %43, %27
  %48 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %3, i32 0, i32 4
  %49 = bitcast float* %48 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = shl i64 %50, 1
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %67, label %53

53:                                               ; preds = %47
  %54 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %3, i32 0, i32 4
  %55 = load float, float* %54, align 8
  %56 = fpext float %55 to double
  %57 = call double @frexp(double %56, i32* %5) #9
  %58 = load i32, i32* %5, align 4
  %59 = load i32, i32* %4, align 4
  %60 = icmp sgt i32 %58, %59
  br i1 %60, label %61, label %63

61:                                               ; preds = %53
  %62 = load i32, i32* %5, align 4
  store i32 %62, i32* %4, align 4
  br label %63

63:                                               ; preds = %61, %53
  %64 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %2, align 8
  %65 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %64, i32 0, i32 5
  %66 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %65, i32 0, i32 4
  store i32 1, i32* %66, align 8
  br label %67

67:                                               ; preds = %63, %47
  %68 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %3, i32 0, i32 6
  %69 = bitcast float* %68 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = shl i64 %70, 1
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %84, label %73

73:                                               ; preds = %67
  %74 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %3, i32 0, i32 6
  %75 = load float, float* %74, align 8
  %76 = fpext float %75 to double
  %77 = call double @frexp(double %76, i32* %5) #9
  %78 = load i32, i32* %5, align 4
  %79 = load i32, i32* %4, align 4
  %80 = icmp sgt i32 %78, %79
  br i1 %80, label %81, label %83

81:                                               ; preds = %73
  %82 = load i32, i32* %5, align 4
  store i32 %82, i32* %4, align 4
  br label %83

83:                                               ; preds = %81, %73
  br label %84

84:                                               ; preds = %83, %67
  %85 = load i32, i32* %4, align 4
  %86 = sub nsw i32 20, %85
  store i32 %86, i32* %4, align 4
  %87 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %3, i32 0, i32 0
  %88 = bitcast float* %87 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = shl i64 %89, 1
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %93

92:                                               ; preds = %84
  br label %100

93:                                               ; preds = %84
  %94 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %3, i32 0, i32 0
  %95 = load float, float* %94, align 8
  %96 = fpext float %95 to double
  %97 = load i32, i32* %4, align 4
  %98 = call double @ldexp(double %96, i32 %97) #9
  %99 = fptosi double %98 to i64
  br label %100

100:                                              ; preds = %93, %92
  %101 = phi i64 [ 0, %92 ], [ %99, %93 ]
  %102 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %2, align 8
  %103 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %102, i32 0, i32 5
  %104 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %103, i32 0, i32 0
  store i64 %101, i64* %104, align 8
  %105 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %3, i32 0, i32 6
  %106 = bitcast float* %105 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = shl i64 %107, 1
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %111

110:                                              ; preds = %100
  br label %118

111:                                              ; preds = %100
  %112 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %3, i32 0, i32 6
  %113 = load float, float* %112, align 8
  %114 = fpext float %113 to double
  %115 = load i32, i32* %4, align 4
  %116 = call double @ldexp(double %114, i32 %115) #9
  %117 = fptosi double %116 to i64
  br label %118

118:                                              ; preds = %111, %110
  %119 = phi i64 [ 0, %110 ], [ %117, %111 ]
  %120 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %2, align 8
  %121 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %120, i32 0, i32 5
  %122 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %121, i32 0, i32 3
  store i64 %119, i64* %122, align 8
  %123 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %2, align 8
  %124 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %123, i32 0, i32 5
  %125 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %124, i32 0, i32 4
  %126 = load i32, i32* %125, align 8
  %127 = icmp ne i32 %126, 0
  br i1 %127, label %128, label %165

128:                                              ; preds = %118
  %129 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %3, i32 0, i32 2
  %130 = bitcast float* %129 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = shl i64 %131, 1
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %135

134:                                              ; preds = %128
  br label %142

135:                                              ; preds = %128
  %136 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %3, i32 0, i32 2
  %137 = load float, float* %136, align 8
  %138 = fpext float %137 to double
  %139 = load i32, i32* %4, align 4
  %140 = call double @ldexp(double %138, i32 %139) #9
  %141 = fptosi double %140 to i64
  br label %142

142:                                              ; preds = %135, %134
  %143 = phi i64 [ 0, %134 ], [ %141, %135 ]
  %144 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %2, align 8
  %145 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %144, i32 0, i32 5
  %146 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %145, i32 0, i32 1
  store i64 %143, i64* %146, align 8
  %147 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %3, i32 0, i32 4
  %148 = bitcast float* %147 to i64*
  %149 = load i64, i64* %148, align 8
  %150 = shl i64 %149, 1
  %151 = icmp eq i64 %150, 0
  br i1 %151, label %152, label %153

152:                                              ; preds = %142
  br label %160

153:                                              ; preds = %142
  %154 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %3, i32 0, i32 4
  %155 = load float, float* %154, align 8
  %156 = fpext float %155 to double
  %157 = load i32, i32* %4, align 4
  %158 = call double @ldexp(double %156, i32 %157) #9
  %159 = fptosi double %158 to i64
  br label %160

160:                                              ; preds = %153, %152
  %161 = phi i64 [ 0, %152 ], [ %159, %153 ]
  %162 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %2, align 8
  %163 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %162, i32 0, i32 5
  %164 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %163, i32 0, i32 2
  store i64 %161, i64* %164, align 8
  br label %172

165:                                              ; preds = %118
  %166 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %2, align 8
  %167 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %166, i32 0, i32 5
  %168 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %167, i32 0, i32 2
  store i64 0, i64* %168, align 8
  %169 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %2, align 8
  %170 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %169, i32 0, i32 5
  %171 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %170, i32 0, i32 1
  store i64 0, i64* %171, align 8
  br label %172

172:                                              ; preds = %165, %160
  %173 = load i32, i32* %4, align 4
  %174 = sub nsw i32 %173, 12
  store i32 %174, i32* %6, align 4
  %175 = load i32, i32* %6, align 4
  %176 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %2, align 8
  %177 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %176, i32 0, i32 5
  %178 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %177, i32 0, i32 5
  store i32 %175, i32* %178, align 4
  %179 = load i32, i32* %6, align 4
  %180 = icmp sgt i32 %179, 0
  br i1 %180, label %181, label %186

181:                                              ; preds = %172
  %182 = load i32, i32* %6, align 4
  %183 = sub nsw i32 %182, 1
  %184 = zext i32 %183 to i64
  %185 = shl i64 1, %184
  br label %187

186:                                              ; preds = %172
  br label %187

187:                                              ; preds = %186, %181
  %188 = phi i64 [ %185, %181 ], [ 0, %186 ]
  %189 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %2, align 8
  %190 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %189, i32 0, i32 5
  %191 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %190, i32 0, i32 6
  store i64 %188, i64* %191, align 8
  ret i32 0
}

; Function Attrs: nounwind
declare dso_local double @frexp(double, i32*) #2

; Function Attrs: nounwind
declare dso_local double @ldexp(double, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_type1_init(%struct.gs_type1_state_s* %0, %struct.gs_show_enum_s* %1, i32 %2, i32 %3, i8* %4, %struct.gs_type1_data_s* %5) #0 {
  %7 = alloca %struct.gs_type1_state_s*, align 8
  %8 = alloca %struct.gs_show_enum_s*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  %12 = alloca %struct.gs_type1_data_s*, align 8
  %13 = alloca %struct.gs_state_s*, align 8
  %14 = alloca %struct.gx_path_s*, align 8
  store %struct.gs_type1_state_s* %0, %struct.gs_type1_state_s** %7, align 8
  store %struct.gs_show_enum_s* %1, %struct.gs_show_enum_s** %8, align 8
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store i8* %4, i8** %11, align 8
  store %struct.gs_type1_data_s* %5, %struct.gs_type1_data_s** %12, align 8
  %15 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %8, align 8
  %16 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %15, i32 0, i32 0
  %17 = load %struct.gs_state_s*, %struct.gs_state_s** %16, align 8
  store %struct.gs_state_s* %17, %struct.gs_state_s** %13, align 8
  %18 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %8, align 8
  %19 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %7, align 8
  %20 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %19, i32 0, i32 0
  store %struct.gs_show_enum_s* %18, %struct.gs_show_enum_s** %20, align 8
  %21 = load %struct.gs_state_s*, %struct.gs_state_s** %13, align 8
  %22 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %7, align 8
  %23 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %22, i32 0, i32 1
  store %struct.gs_state_s* %21, %struct.gs_state_s** %23, align 8
  %24 = load %struct.gs_type1_data_s*, %struct.gs_type1_data_s** %12, align 8
  %25 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %7, align 8
  %26 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %25, i32 0, i32 2
  store %struct.gs_type1_data_s* %24, %struct.gs_type1_data_s** %26, align 8
  %27 = load i32, i32* %9, align 4
  %28 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %7, align 8
  %29 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %28, i32 0, i32 3
  store i32 %27, i32* %29, align 8
  %30 = load i32, i32* %10, align 4
  %31 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %7, align 8
  %32 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %31, i32 0, i32 4
  store i32 %30, i32* %32, align 4
  %33 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %7, align 8
  %34 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %33, i32 0, i32 7
  store i32 0, i32* %34, align 8
  %35 = load i8*, i8** %11, align 8
  %36 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %7, align 8
  %37 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %36, i32 0, i32 8
  %38 = getelementptr inbounds [11 x %struct.ip_state], [11 x %struct.ip_state]* %37, i64 0, i64 0
  %39 = getelementptr inbounds %struct.ip_state, %struct.ip_state* %38, i32 0, i32 0
  store i8* %35, i8** %39, align 8
  %40 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %7, align 8
  %41 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %40, i32 0, i32 8
  %42 = getelementptr inbounds [11 x %struct.ip_state], [11 x %struct.ip_state]* %41, i64 0, i64 0
  %43 = getelementptr inbounds %struct.ip_state, %struct.ip_state* %42, i32 0, i32 1
  store i16 4330, i16* %43, align 8
  %44 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %7, align 8
  %45 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %44, i32 0, i32 9
  store i32 1, i32* %45, align 8
  %46 = load %struct.gs_type1_data_s*, %struct.gs_type1_data_s** %12, align 8
  %47 = getelementptr inbounds %struct.gs_type1_data_s, %struct.gs_type1_data_s* %46, i32 0, i32 3
  %48 = load i32, i32* %47, align 8
  %49 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %7, align 8
  %50 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %49, i32 0, i32 10
  store i32 %48, i32* %50, align 4
  %51 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %7, align 8
  %52 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %51, i32 0, i32 13
  store i32 -1, i32* %52, align 8
  %53 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %7, align 8
  %54 = call i32 @gs_type1_init_matrix(%struct.gs_type1_state_s* %53)
  %55 = load %struct.gs_state_s*, %struct.gs_state_s** %13, align 8
  %56 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %55, i32 0, i32 7
  %57 = load %struct.gx_path_s*, %struct.gx_path_s** %56, align 8
  store %struct.gx_path_s* %57, %struct.gx_path_s** %14, align 8
  %58 = load %struct.gs_state_s*, %struct.gs_state_s** %13, align 8
  %59 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %58, i32 0, i32 2
  %60 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %59, i32 0, i32 12
  %61 = load i64, i64* %60, align 8
  %62 = load %struct.gx_path_s*, %struct.gx_path_s** %14, align 8
  %63 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %62, i32 0, i32 9
  %64 = getelementptr inbounds %struct.timeval, %struct.timeval* %63, i32 0, i32 0
  store i64 %61, i64* %64, align 8
  %65 = load %struct.gs_state_s*, %struct.gs_state_s** %13, align 8
  %66 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %65, i32 0, i32 2
  %67 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %66, i32 0, i32 13
  %68 = load i64, i64* %67, align 8
  %69 = load %struct.gx_path_s*, %struct.gx_path_s** %14, align 8
  %70 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %69, i32 0, i32 9
  %71 = getelementptr inbounds %struct.timeval, %struct.timeval* %70, i32 0, i32 1
  store i64 %68, i64* %71, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_type1_interpret(%struct.gs_type1_state_s* %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.gs_type1_state_s*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca %struct.gs_state_s*, align 8
  %7 = alloca %struct.gx_path_s*, align 8
  %8 = alloca %struct.gs_type1_data_s*, align 8
  %9 = alloca [24 x i64], align 16
  %10 = alloca i64*, align 8
  %11 = alloca %struct.ip_state*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i16, align 2
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca %struct.fixed_coeff, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i32, align 4
  %27 = alloca i8*, align 8
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca i32, align 4
  %31 = alloca %struct.gs_rect_s, align 4
  %32 = alloca float, align 4
  %33 = alloca i8, align 1
  %34 = alloca i8, align 1
  %35 = alloca i8, align 1
  %36 = alloca i64, align 8
  store %struct.gs_type1_state_s* %0, %struct.gs_type1_state_s** %4, align 8
  store i8* %1, i8** %5, align 8
  %37 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %38 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %37, i32 0, i32 1
  %39 = load %struct.gs_state_s*, %struct.gs_state_s** %38, align 8
  store %struct.gs_state_s* %39, %struct.gs_state_s** %6, align 8
  %40 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %41 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %40, i32 0, i32 7
  %42 = load %struct.gx_path_s*, %struct.gx_path_s** %41, align 8
  store %struct.gx_path_s* %42, %struct.gx_path_s** %7, align 8
  %43 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %44 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %43, i32 0, i32 2
  %45 = load %struct.gs_type1_data_s*, %struct.gs_type1_data_s** %44, align 8
  store %struct.gs_type1_data_s* %45, %struct.gs_type1_data_s** %8, align 8
  %46 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %47 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %46, i32 0, i32 8
  %48 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %49 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %48, i32 0, i32 9
  %50 = load i32, i32* %49, align 8
  %51 = sub nsw i32 %50, 1
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds [11 x %struct.ip_state], [11 x %struct.ip_state]* %47, i64 0, i64 %52
  store %struct.ip_state* %53, %struct.ip_state** %11, align 8
  %54 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %55 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %54, i32 0, i32 10
  %56 = load i32, i32* %55, align 4
  store i32 %56, i32* %12, align 4
  %57 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %58 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %57, i32 0, i32 2
  %59 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %58, i32 0, i32 12
  %60 = load i64, i64* %59, align 8
  store i64 %60, i64* %18, align 8
  %61 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %62 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %61, i32 0, i32 2
  %63 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %62, i32 0, i32 13
  %64 = load i64, i64* %63, align 8
  store i64 %64, i64* %19, align 8
  %65 = load %struct.gx_path_s*, %struct.gx_path_s** %7, align 8
  %66 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %65, i32 0, i32 9
  %67 = getelementptr inbounds %struct.timeval, %struct.timeval* %66, i32 0, i32 0
  %68 = load i64, i64* %67, align 8
  store i64 %68, i64* %20, align 8
  %69 = load %struct.gx_path_s*, %struct.gx_path_s** %7, align 8
  %70 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %69, i32 0, i32 9
  %71 = getelementptr inbounds %struct.timeval, %struct.timeval* %70, i32 0, i32 1
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %21, align 8
  %73 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %74 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %73, i32 0, i32 5
  %75 = bitcast %struct.fixed_coeff* %17 to i8*
  %76 = bitcast %struct.fixed_coeff* %74 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %75, i8* align 8 %76, i64 48, i1 false)
  %77 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %78 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %77, i32 0, i32 7
  %79 = load i32, i32* %78, align 8
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %84

81:                                               ; preds = %2
  %82 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %83 = getelementptr inbounds i64, i64* %82, i64 -1
  store i64* %83, i64** %10, align 8
  br label %102

84:                                               ; preds = %2
  %85 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %86 = bitcast i64* %85 to i8*
  %87 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %88 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %87, i32 0, i32 6
  %89 = getelementptr inbounds [24 x i64], [24 x i64]* %88, i64 0, i64 0
  %90 = bitcast i64* %89 to i8*
  %91 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %92 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %91, i32 0, i32 7
  %93 = load i32, i32* %92, align 8
  %94 = sext i32 %93 to i64
  %95 = mul i64 %94, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %86, i8* align 8 %90, i64 %95, i1 false)
  %96 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %97 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %96, i32 0, i32 7
  %98 = load i32, i32* %97, align 8
  %99 = sub nsw i32 %98, 1
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 %100
  store i64* %101, i64** %10, align 8
  br label %102

102:                                              ; preds = %84, %81
  %103 = load i8*, i8** %5, align 8
  %104 = icmp ne i8* %103, null
  br i1 %104, label %105, label %109

105:                                              ; preds = %102
  %106 = load i8*, i8** %5, align 8
  %107 = load %struct.ip_state*, %struct.ip_state** %11, align 8
  %108 = getelementptr inbounds %struct.ip_state, %struct.ip_state* %107, i32 0, i32 0
  store i8* %106, i8** %108, align 8
  br label %109

109:                                              ; preds = %105, %102
  br label %110

110:                                              ; preds = %1091, %109
  %111 = load %struct.ip_state*, %struct.ip_state** %11, align 8
  %112 = getelementptr inbounds %struct.ip_state, %struct.ip_state* %111, i32 0, i32 0
  %113 = load i8*, i8** %112, align 8
  store i8* %113, i8** %13, align 8
  %114 = load %struct.ip_state*, %struct.ip_state** %11, align 8
  %115 = getelementptr inbounds %struct.ip_state, %struct.ip_state* %114, i32 0, i32 1
  %116 = load i16, i16* %115, align 8
  store i16 %116, i16* %14, align 2
  br label %117

117:                                              ; preds = %1074, %110
  br label %118

118:                                              ; preds = %140, %117
  %119 = load i32, i32* %12, align 4
  %120 = icmp sgt i32 %119, 0
  br i1 %120, label %121, label %143

121:                                              ; preds = %118
  %122 = load i8*, i8** %13, align 8
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i32
  %125 = load i16, i16* %14, align 2
  %126 = zext i16 %125 to i32
  %127 = ashr i32 %126, 8
  %128 = xor i32 %124, %127
  store i32 %128, i32* %15, align 4
  %129 = load i8*, i8** %13, align 8
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i32
  %132 = load i16, i16* %14, align 2
  %133 = zext i16 %132 to i32
  %134 = add nsw i32 %131, %133
  %135 = mul nsw i32 %134, 52845
  %136 = add nsw i32 %135, 22719
  %137 = trunc i32 %136 to i16
  store i16 %137, i16* %14, align 2
  %138 = load i8*, i8** %13, align 8
  %139 = getelementptr inbounds i8, i8* %138, i32 1
  store i8* %139, i8** %13, align 8
  br label %140

140:                                              ; preds = %121
  %141 = load i32, i32* %12, align 4
  %142 = add nsw i32 %141, -1
  store i32 %142, i32* %12, align 4
  br label %118

143:                                              ; preds = %118
  br label %144

144:                                              ; preds = %2853, %143
  %145 = load i8*, i8** %13, align 8
  %146 = load i8, i8* %145, align 1
  %147 = zext i8 %146 to i32
  %148 = load i16, i16* %14, align 2
  %149 = zext i16 %148 to i32
  %150 = ashr i32 %149, 8
  %151 = xor i32 %147, %150
  store i32 %151, i32* %15, align 4
  %152 = load i8*, i8** %13, align 8
  %153 = load i8, i8* %152, align 1
  %154 = zext i8 %153 to i32
  %155 = load i16, i16* %14, align 2
  %156 = zext i16 %155 to i32
  %157 = add nsw i32 %154, %156
  %158 = mul nsw i32 %157, 52845
  %159 = add nsw i32 %158, 22719
  %160 = trunc i32 %159 to i16
  store i16 %160, i16* %14, align 2
  %161 = load i8*, i8** %13, align 8
  %162 = getelementptr inbounds i8, i8* %161, i32 1
  store i8* %162, i8** %13, align 8
  %163 = load i32, i32* %15, align 4
  switch i32 %163, label %2693 [
    i32 1, label %164
    i32 3, label %167
    i32 4, label %170
    i32 5, label %250
    i32 6, label %418
    i32 7, label %498
    i32 8, label %578
    i32 9, label %1051
    i32 10, label %1059
    i32 11, label %1091
    i32 12, label %1094
    i32 13, label %1439
    i32 14, label %1611
    i32 21, label %1821
    i32 22, label %1980
    i32 30, label %2060
    i32 31, label %2376
    i32 0, label %2692
    i32 2, label %2692
    i32 15, label %2692
    i32 16, label %2692
    i32 17, label %2692
    i32 18, label %2692
    i32 19, label %2692
    i32 20, label %2692
    i32 23, label %2692
    i32 24, label %2692
    i32 25, label %2692
    i32 26, label %2692
    i32 27, label %2692
    i32 28, label %2692
    i32 29, label %2692
  ]

164:                                              ; preds = %144
  %165 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %166 = getelementptr inbounds i64, i64* %165, i64 -1
  store i64* %166, i64** %10, align 8
  br label %2853

167:                                              ; preds = %144
  %168 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %169 = getelementptr inbounds i64, i64* %168, i64 -1
  store i64* %169, i64** %10, align 8
  br label %2853

170:                                              ; preds = %144
  %171 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %172 = load i32, i32* %171, align 4
  %173 = icmp sge i32 %172, 0
  br i1 %173, label %174, label %190

174:                                              ; preds = %170
  %175 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %176 = load i64, i64* %175, align 16
  %177 = ashr i64 %176, 12
  %178 = trunc i64 %177 to i32
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 3
  %181 = load i64, i64* %180, align 8
  %182 = mul nsw i64 %179, %181
  %183 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %184 = load i64, i64* %183, align 8
  %185 = add nsw i64 %182, %184
  %186 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %187 = load i32, i32* %186, align 4
  %188 = zext i32 %187 to i64
  %189 = ashr i64 %185, %188
  br label %204

190:                                              ; preds = %170
  %191 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %192 = load i64, i64* %191, align 16
  %193 = ashr i64 %192, 12
  %194 = trunc i64 %193 to i32
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 3
  %197 = load i64, i64* %196, align 8
  %198 = mul nsw i64 %195, %197
  %199 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %200 = load i32, i32* %199, align 4
  %201 = sub nsw i32 0, %200
  %202 = zext i32 %201 to i64
  %203 = shl i64 %198, %202
  br label %204

204:                                              ; preds = %190, %174
  %205 = phi i64 [ %189, %174 ], [ %203, %190 ]
  %206 = load i64, i64* %21, align 8
  %207 = add nsw i64 %206, %205
  store i64 %207, i64* %21, align 8
  %208 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 4
  %209 = load i32, i32* %208, align 8
  %210 = icmp ne i32 %209, 0
  br i1 %210, label %211, label %249

211:                                              ; preds = %204
  %212 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %213 = load i32, i32* %212, align 4
  %214 = icmp sge i32 %213, 0
  br i1 %214, label %215, label %231

215:                                              ; preds = %211
  %216 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %217 = load i64, i64* %216, align 16
  %218 = ashr i64 %217, 12
  %219 = trunc i64 %218 to i32
  %220 = sext i32 %219 to i64
  %221 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 2
  %222 = load i64, i64* %221, align 8
  %223 = mul nsw i64 %220, %222
  %224 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %225 = load i64, i64* %224, align 8
  %226 = add nsw i64 %223, %225
  %227 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %228 = load i32, i32* %227, align 4
  %229 = zext i32 %228 to i64
  %230 = ashr i64 %226, %229
  br label %245

231:                                              ; preds = %211
  %232 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %233 = load i64, i64* %232, align 16
  %234 = ashr i64 %233, 12
  %235 = trunc i64 %234 to i32
  %236 = sext i32 %235 to i64
  %237 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 2
  %238 = load i64, i64* %237, align 8
  %239 = mul nsw i64 %236, %238
  %240 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %241 = load i32, i32* %240, align 4
  %242 = sub nsw i32 0, %241
  %243 = zext i32 %242 to i64
  %244 = shl i64 %239, %243
  br label %245

245:                                              ; preds = %231, %215
  %246 = phi i64 [ %230, %215 ], [ %244, %231 ]
  %247 = load i64, i64* %20, align 8
  %248 = add nsw i64 %247, %246
  store i64 %248, i64* %20, align 8
  br label %249

249:                                              ; preds = %245, %204
  br label %1975

250:                                              ; preds = %144
  %251 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %252 = load i32, i32* %251, align 4
  %253 = icmp sge i32 %252, 0
  br i1 %253, label %254, label %270

254:                                              ; preds = %250
  %255 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %256 = load i64, i64* %255, align 16
  %257 = ashr i64 %256, 12
  %258 = trunc i64 %257 to i32
  %259 = sext i32 %258 to i64
  %260 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 0
  %261 = load i64, i64* %260, align 8
  %262 = mul nsw i64 %259, %261
  %263 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %264 = load i64, i64* %263, align 8
  %265 = add nsw i64 %262, %264
  %266 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %267 = load i32, i32* %266, align 4
  %268 = zext i32 %267 to i64
  %269 = ashr i64 %265, %268
  br label %284

270:                                              ; preds = %250
  %271 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %272 = load i64, i64* %271, align 16
  %273 = ashr i64 %272, 12
  %274 = trunc i64 %273 to i32
  %275 = sext i32 %274 to i64
  %276 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 0
  %277 = load i64, i64* %276, align 8
  %278 = mul nsw i64 %275, %277
  %279 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %280 = load i32, i32* %279, align 4
  %281 = sub nsw i32 0, %280
  %282 = zext i32 %281 to i64
  %283 = shl i64 %278, %282
  br label %284

284:                                              ; preds = %270, %254
  %285 = phi i64 [ %269, %254 ], [ %283, %270 ]
  %286 = load i64, i64* %20, align 8
  %287 = add nsw i64 %286, %285
  store i64 %287, i64* %20, align 8
  %288 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %289 = load i32, i32* %288, align 4
  %290 = icmp sge i32 %289, 0
  br i1 %290, label %291, label %307

291:                                              ; preds = %284
  %292 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 1
  %293 = load i64, i64* %292, align 8
  %294 = ashr i64 %293, 12
  %295 = trunc i64 %294 to i32
  %296 = sext i32 %295 to i64
  %297 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 3
  %298 = load i64, i64* %297, align 8
  %299 = mul nsw i64 %296, %298
  %300 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %301 = load i64, i64* %300, align 8
  %302 = add nsw i64 %299, %301
  %303 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %304 = load i32, i32* %303, align 4
  %305 = zext i32 %304 to i64
  %306 = ashr i64 %302, %305
  br label %321

307:                                              ; preds = %284
  %308 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 1
  %309 = load i64, i64* %308, align 8
  %310 = ashr i64 %309, 12
  %311 = trunc i64 %310 to i32
  %312 = sext i32 %311 to i64
  %313 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 3
  %314 = load i64, i64* %313, align 8
  %315 = mul nsw i64 %312, %314
  %316 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %317 = load i32, i32* %316, align 4
  %318 = sub nsw i32 0, %317
  %319 = zext i32 %318 to i64
  %320 = shl i64 %315, %319
  br label %321

321:                                              ; preds = %307, %291
  %322 = phi i64 [ %306, %291 ], [ %320, %307 ]
  %323 = load i64, i64* %21, align 8
  %324 = add nsw i64 %323, %322
  store i64 %324, i64* %21, align 8
  %325 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 4
  %326 = load i32, i32* %325, align 8
  %327 = icmp ne i32 %326, 0
  br i1 %327, label %328, label %403

328:                                              ; preds = %321
  %329 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %330 = load i32, i32* %329, align 4
  %331 = icmp sge i32 %330, 0
  br i1 %331, label %332, label %348

332:                                              ; preds = %328
  %333 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %334 = load i64, i64* %333, align 16
  %335 = ashr i64 %334, 12
  %336 = trunc i64 %335 to i32
  %337 = sext i32 %336 to i64
  %338 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 1
  %339 = load i64, i64* %338, align 8
  %340 = mul nsw i64 %337, %339
  %341 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %342 = load i64, i64* %341, align 8
  %343 = add nsw i64 %340, %342
  %344 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %345 = load i32, i32* %344, align 4
  %346 = zext i32 %345 to i64
  %347 = ashr i64 %343, %346
  br label %362

348:                                              ; preds = %328
  %349 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %350 = load i64, i64* %349, align 16
  %351 = ashr i64 %350, 12
  %352 = trunc i64 %351 to i32
  %353 = sext i32 %352 to i64
  %354 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 1
  %355 = load i64, i64* %354, align 8
  %356 = mul nsw i64 %353, %355
  %357 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %358 = load i32, i32* %357, align 4
  %359 = sub nsw i32 0, %358
  %360 = zext i32 %359 to i64
  %361 = shl i64 %356, %360
  br label %362

362:                                              ; preds = %348, %332
  %363 = phi i64 [ %347, %332 ], [ %361, %348 ]
  %364 = load i64, i64* %21, align 8
  %365 = add nsw i64 %364, %363
  store i64 %365, i64* %21, align 8
  %366 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %367 = load i32, i32* %366, align 4
  %368 = icmp sge i32 %367, 0
  br i1 %368, label %369, label %385

369:                                              ; preds = %362
  %370 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 1
  %371 = load i64, i64* %370, align 8
  %372 = ashr i64 %371, 12
  %373 = trunc i64 %372 to i32
  %374 = sext i32 %373 to i64
  %375 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 2
  %376 = load i64, i64* %375, align 8
  %377 = mul nsw i64 %374, %376
  %378 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %379 = load i64, i64* %378, align 8
  %380 = add nsw i64 %377, %379
  %381 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %382 = load i32, i32* %381, align 4
  %383 = zext i32 %382 to i64
  %384 = ashr i64 %380, %383
  br label %399

385:                                              ; preds = %362
  %386 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 1
  %387 = load i64, i64* %386, align 8
  %388 = ashr i64 %387, 12
  %389 = trunc i64 %388 to i32
  %390 = sext i32 %389 to i64
  %391 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 2
  %392 = load i64, i64* %391, align 8
  %393 = mul nsw i64 %390, %392
  %394 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %395 = load i32, i32* %394, align 4
  %396 = sub nsw i32 0, %395
  %397 = zext i32 %396 to i64
  %398 = shl i64 %393, %397
  br label %399

399:                                              ; preds = %385, %369
  %400 = phi i64 [ %384, %369 ], [ %398, %385 ]
  %401 = load i64, i64* %20, align 8
  %402 = add nsw i64 %401, %400
  store i64 %402, i64* %20, align 8
  br label %403

403:                                              ; preds = %399, %321
  br label %404

404:                                              ; preds = %577, %497, %403
  %405 = load %struct.gx_path_s*, %struct.gx_path_s** %7, align 8
  %406 = load i64, i64* %20, align 8
  %407 = load i64, i64* %21, align 8
  %408 = call i32 @gx_path_add_line(%struct.gx_path_s* %405, i64 %406, i64 %407)
  store i32 %408, i32* %16, align 4
  br label %409

409:                                              ; preds = %1975, %1042, %404
  %410 = load i32, i32* %16, align 4
  %411 = icmp slt i32 %410, 0
  br i1 %411, label %412, label %414

412:                                              ; preds = %409
  %413 = load i32, i32* %16, align 4
  store i32 %413, i32* %3, align 4
  br label %2854

414:                                              ; preds = %409
  br label %415

415:                                              ; preds = %1610, %414
  %416 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %417 = getelementptr inbounds i64, i64* %416, i64 -1
  store i64* %417, i64** %10, align 8
  br label %2853

418:                                              ; preds = %144
  %419 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %420 = load i32, i32* %419, align 4
  %421 = icmp sge i32 %420, 0
  br i1 %421, label %422, label %438

422:                                              ; preds = %418
  %423 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %424 = load i64, i64* %423, align 16
  %425 = ashr i64 %424, 12
  %426 = trunc i64 %425 to i32
  %427 = sext i32 %426 to i64
  %428 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 0
  %429 = load i64, i64* %428, align 8
  %430 = mul nsw i64 %427, %429
  %431 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %432 = load i64, i64* %431, align 8
  %433 = add nsw i64 %430, %432
  %434 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %435 = load i32, i32* %434, align 4
  %436 = zext i32 %435 to i64
  %437 = ashr i64 %433, %436
  br label %452

438:                                              ; preds = %418
  %439 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %440 = load i64, i64* %439, align 16
  %441 = ashr i64 %440, 12
  %442 = trunc i64 %441 to i32
  %443 = sext i32 %442 to i64
  %444 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 0
  %445 = load i64, i64* %444, align 8
  %446 = mul nsw i64 %443, %445
  %447 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %448 = load i32, i32* %447, align 4
  %449 = sub nsw i32 0, %448
  %450 = zext i32 %449 to i64
  %451 = shl i64 %446, %450
  br label %452

452:                                              ; preds = %438, %422
  %453 = phi i64 [ %437, %422 ], [ %451, %438 ]
  %454 = load i64, i64* %20, align 8
  %455 = add nsw i64 %454, %453
  store i64 %455, i64* %20, align 8
  %456 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 4
  %457 = load i32, i32* %456, align 8
  %458 = icmp ne i32 %457, 0
  br i1 %458, label %459, label %497

459:                                              ; preds = %452
  %460 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %461 = load i32, i32* %460, align 4
  %462 = icmp sge i32 %461, 0
  br i1 %462, label %463, label %479

463:                                              ; preds = %459
  %464 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %465 = load i64, i64* %464, align 16
  %466 = ashr i64 %465, 12
  %467 = trunc i64 %466 to i32
  %468 = sext i32 %467 to i64
  %469 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 1
  %470 = load i64, i64* %469, align 8
  %471 = mul nsw i64 %468, %470
  %472 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %473 = load i64, i64* %472, align 8
  %474 = add nsw i64 %471, %473
  %475 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %476 = load i32, i32* %475, align 4
  %477 = zext i32 %476 to i64
  %478 = ashr i64 %474, %477
  br label %493

479:                                              ; preds = %459
  %480 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %481 = load i64, i64* %480, align 16
  %482 = ashr i64 %481, 12
  %483 = trunc i64 %482 to i32
  %484 = sext i32 %483 to i64
  %485 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 1
  %486 = load i64, i64* %485, align 8
  %487 = mul nsw i64 %484, %486
  %488 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %489 = load i32, i32* %488, align 4
  %490 = sub nsw i32 0, %489
  %491 = zext i32 %490 to i64
  %492 = shl i64 %487, %491
  br label %493

493:                                              ; preds = %479, %463
  %494 = phi i64 [ %478, %463 ], [ %492, %479 ]
  %495 = load i64, i64* %21, align 8
  %496 = add nsw i64 %495, %494
  store i64 %496, i64* %21, align 8
  br label %497

497:                                              ; preds = %493, %452
  br label %404

498:                                              ; preds = %144
  %499 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %500 = load i32, i32* %499, align 4
  %501 = icmp sge i32 %500, 0
  br i1 %501, label %502, label %518

502:                                              ; preds = %498
  %503 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %504 = load i64, i64* %503, align 16
  %505 = ashr i64 %504, 12
  %506 = trunc i64 %505 to i32
  %507 = sext i32 %506 to i64
  %508 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 3
  %509 = load i64, i64* %508, align 8
  %510 = mul nsw i64 %507, %509
  %511 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %512 = load i64, i64* %511, align 8
  %513 = add nsw i64 %510, %512
  %514 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %515 = load i32, i32* %514, align 4
  %516 = zext i32 %515 to i64
  %517 = ashr i64 %513, %516
  br label %532

518:                                              ; preds = %498
  %519 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %520 = load i64, i64* %519, align 16
  %521 = ashr i64 %520, 12
  %522 = trunc i64 %521 to i32
  %523 = sext i32 %522 to i64
  %524 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 3
  %525 = load i64, i64* %524, align 8
  %526 = mul nsw i64 %523, %525
  %527 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %528 = load i32, i32* %527, align 4
  %529 = sub nsw i32 0, %528
  %530 = zext i32 %529 to i64
  %531 = shl i64 %526, %530
  br label %532

532:                                              ; preds = %518, %502
  %533 = phi i64 [ %517, %502 ], [ %531, %518 ]
  %534 = load i64, i64* %21, align 8
  %535 = add nsw i64 %534, %533
  store i64 %535, i64* %21, align 8
  %536 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 4
  %537 = load i32, i32* %536, align 8
  %538 = icmp ne i32 %537, 0
  br i1 %538, label %539, label %577

539:                                              ; preds = %532
  %540 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %541 = load i32, i32* %540, align 4
  %542 = icmp sge i32 %541, 0
  br i1 %542, label %543, label %559

543:                                              ; preds = %539
  %544 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %545 = load i64, i64* %544, align 16
  %546 = ashr i64 %545, 12
  %547 = trunc i64 %546 to i32
  %548 = sext i32 %547 to i64
  %549 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 2
  %550 = load i64, i64* %549, align 8
  %551 = mul nsw i64 %548, %550
  %552 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %553 = load i64, i64* %552, align 8
  %554 = add nsw i64 %551, %553
  %555 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %556 = load i32, i32* %555, align 4
  %557 = zext i32 %556 to i64
  %558 = ashr i64 %554, %557
  br label %573

559:                                              ; preds = %539
  %560 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %561 = load i64, i64* %560, align 16
  %562 = ashr i64 %561, 12
  %563 = trunc i64 %562 to i32
  %564 = sext i32 %563 to i64
  %565 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 2
  %566 = load i64, i64* %565, align 8
  %567 = mul nsw i64 %564, %566
  %568 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %569 = load i32, i32* %568, align 4
  %570 = sub nsw i32 0, %569
  %571 = zext i32 %570 to i64
  %572 = shl i64 %567, %571
  br label %573

573:                                              ; preds = %559, %543
  %574 = phi i64 [ %558, %543 ], [ %572, %559 ]
  %575 = load i64, i64* %20, align 8
  %576 = add nsw i64 %575, %574
  store i64 %576, i64* %20, align 8
  br label %577

577:                                              ; preds = %573, %532
  br label %404

578:                                              ; preds = %144
  %579 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %580 = load i32, i32* %579, align 4
  %581 = icmp sge i32 %580, 0
  br i1 %581, label %582, label %598

582:                                              ; preds = %578
  %583 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %584 = load i64, i64* %583, align 16
  %585 = ashr i64 %584, 12
  %586 = trunc i64 %585 to i32
  %587 = sext i32 %586 to i64
  %588 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 0
  %589 = load i64, i64* %588, align 8
  %590 = mul nsw i64 %587, %589
  %591 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %592 = load i64, i64* %591, align 8
  %593 = add nsw i64 %590, %592
  %594 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %595 = load i32, i32* %594, align 4
  %596 = zext i32 %595 to i64
  %597 = ashr i64 %593, %596
  br label %612

598:                                              ; preds = %578
  %599 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %600 = load i64, i64* %599, align 16
  %601 = ashr i64 %600, 12
  %602 = trunc i64 %601 to i32
  %603 = sext i32 %602 to i64
  %604 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 0
  %605 = load i64, i64* %604, align 8
  %606 = mul nsw i64 %603, %605
  %607 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %608 = load i32, i32* %607, align 4
  %609 = sub nsw i32 0, %608
  %610 = zext i32 %609 to i64
  %611 = shl i64 %606, %610
  br label %612

612:                                              ; preds = %598, %582
  %613 = phi i64 [ %597, %582 ], [ %611, %598 ]
  %614 = load i64, i64* %20, align 8
  %615 = add nsw i64 %614, %613
  store i64 %615, i64* %20, align 8
  %616 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %617 = load i32, i32* %616, align 4
  %618 = icmp sge i32 %617, 0
  br i1 %618, label %619, label %635

619:                                              ; preds = %612
  %620 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 1
  %621 = load i64, i64* %620, align 8
  %622 = ashr i64 %621, 12
  %623 = trunc i64 %622 to i32
  %624 = sext i32 %623 to i64
  %625 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 3
  %626 = load i64, i64* %625, align 8
  %627 = mul nsw i64 %624, %626
  %628 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %629 = load i64, i64* %628, align 8
  %630 = add nsw i64 %627, %629
  %631 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %632 = load i32, i32* %631, align 4
  %633 = zext i32 %632 to i64
  %634 = ashr i64 %630, %633
  br label %649

635:                                              ; preds = %612
  %636 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 1
  %637 = load i64, i64* %636, align 8
  %638 = ashr i64 %637, 12
  %639 = trunc i64 %638 to i32
  %640 = sext i32 %639 to i64
  %641 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 3
  %642 = load i64, i64* %641, align 8
  %643 = mul nsw i64 %640, %642
  %644 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %645 = load i32, i32* %644, align 4
  %646 = sub nsw i32 0, %645
  %647 = zext i32 %646 to i64
  %648 = shl i64 %643, %647
  br label %649

649:                                              ; preds = %635, %619
  %650 = phi i64 [ %634, %619 ], [ %648, %635 ]
  %651 = load i64, i64* %21, align 8
  %652 = add nsw i64 %651, %650
  store i64 %652, i64* %21, align 8
  %653 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 4
  %654 = load i32, i32* %653, align 8
  %655 = icmp ne i32 %654, 0
  br i1 %655, label %656, label %731

656:                                              ; preds = %649
  %657 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %658 = load i32, i32* %657, align 4
  %659 = icmp sge i32 %658, 0
  br i1 %659, label %660, label %676

660:                                              ; preds = %656
  %661 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %662 = load i64, i64* %661, align 16
  %663 = ashr i64 %662, 12
  %664 = trunc i64 %663 to i32
  %665 = sext i32 %664 to i64
  %666 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 1
  %667 = load i64, i64* %666, align 8
  %668 = mul nsw i64 %665, %667
  %669 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %670 = load i64, i64* %669, align 8
  %671 = add nsw i64 %668, %670
  %672 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %673 = load i32, i32* %672, align 4
  %674 = zext i32 %673 to i64
  %675 = ashr i64 %671, %674
  br label %690

676:                                              ; preds = %656
  %677 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %678 = load i64, i64* %677, align 16
  %679 = ashr i64 %678, 12
  %680 = trunc i64 %679 to i32
  %681 = sext i32 %680 to i64
  %682 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 1
  %683 = load i64, i64* %682, align 8
  %684 = mul nsw i64 %681, %683
  %685 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %686 = load i32, i32* %685, align 4
  %687 = sub nsw i32 0, %686
  %688 = zext i32 %687 to i64
  %689 = shl i64 %684, %688
  br label %690

690:                                              ; preds = %676, %660
  %691 = phi i64 [ %675, %660 ], [ %689, %676 ]
  %692 = load i64, i64* %21, align 8
  %693 = add nsw i64 %692, %691
  store i64 %693, i64* %21, align 8
  %694 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %695 = load i32, i32* %694, align 4
  %696 = icmp sge i32 %695, 0
  br i1 %696, label %697, label %713

697:                                              ; preds = %690
  %698 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 1
  %699 = load i64, i64* %698, align 8
  %700 = ashr i64 %699, 12
  %701 = trunc i64 %700 to i32
  %702 = sext i32 %701 to i64
  %703 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 2
  %704 = load i64, i64* %703, align 8
  %705 = mul nsw i64 %702, %704
  %706 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %707 = load i64, i64* %706, align 8
  %708 = add nsw i64 %705, %707
  %709 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %710 = load i32, i32* %709, align 4
  %711 = zext i32 %710 to i64
  %712 = ashr i64 %708, %711
  br label %727

713:                                              ; preds = %690
  %714 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 1
  %715 = load i64, i64* %714, align 8
  %716 = ashr i64 %715, 12
  %717 = trunc i64 %716 to i32
  %718 = sext i32 %717 to i64
  %719 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 2
  %720 = load i64, i64* %719, align 8
  %721 = mul nsw i64 %718, %720
  %722 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %723 = load i32, i32* %722, align 4
  %724 = sub nsw i32 0, %723
  %725 = zext i32 %724 to i64
  %726 = shl i64 %721, %725
  br label %727

727:                                              ; preds = %713, %697
  %728 = phi i64 [ %712, %697 ], [ %726, %713 ]
  %729 = load i64, i64* %20, align 8
  %730 = add nsw i64 %729, %728
  store i64 %730, i64* %20, align 8
  br label %731

731:                                              ; preds = %727, %649
  %732 = load i64, i64* %20, align 8
  store i64 %732, i64* %22, align 8
  %733 = load i64, i64* %21, align 8
  store i64 %733, i64* %23, align 8
  %734 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %735 = load i32, i32* %734, align 4
  %736 = icmp sge i32 %735, 0
  br i1 %736, label %737, label %753

737:                                              ; preds = %731
  %738 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 2
  %739 = load i64, i64* %738, align 16
  %740 = ashr i64 %739, 12
  %741 = trunc i64 %740 to i32
  %742 = sext i32 %741 to i64
  %743 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 0
  %744 = load i64, i64* %743, align 8
  %745 = mul nsw i64 %742, %744
  %746 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %747 = load i64, i64* %746, align 8
  %748 = add nsw i64 %745, %747
  %749 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %750 = load i32, i32* %749, align 4
  %751 = zext i32 %750 to i64
  %752 = ashr i64 %748, %751
  br label %767

753:                                              ; preds = %731
  %754 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 2
  %755 = load i64, i64* %754, align 16
  %756 = ashr i64 %755, 12
  %757 = trunc i64 %756 to i32
  %758 = sext i32 %757 to i64
  %759 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 0
  %760 = load i64, i64* %759, align 8
  %761 = mul nsw i64 %758, %760
  %762 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %763 = load i32, i32* %762, align 4
  %764 = sub nsw i32 0, %763
  %765 = zext i32 %764 to i64
  %766 = shl i64 %761, %765
  br label %767

767:                                              ; preds = %753, %737
  %768 = phi i64 [ %752, %737 ], [ %766, %753 ]
  %769 = load i64, i64* %20, align 8
  %770 = add nsw i64 %769, %768
  store i64 %770, i64* %20, align 8
  %771 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %772 = load i32, i32* %771, align 4
  %773 = icmp sge i32 %772, 0
  br i1 %773, label %774, label %790

774:                                              ; preds = %767
  %775 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 3
  %776 = load i64, i64* %775, align 8
  %777 = ashr i64 %776, 12
  %778 = trunc i64 %777 to i32
  %779 = sext i32 %778 to i64
  %780 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 3
  %781 = load i64, i64* %780, align 8
  %782 = mul nsw i64 %779, %781
  %783 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %784 = load i64, i64* %783, align 8
  %785 = add nsw i64 %782, %784
  %786 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %787 = load i32, i32* %786, align 4
  %788 = zext i32 %787 to i64
  %789 = ashr i64 %785, %788
  br label %804

790:                                              ; preds = %767
  %791 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 3
  %792 = load i64, i64* %791, align 8
  %793 = ashr i64 %792, 12
  %794 = trunc i64 %793 to i32
  %795 = sext i32 %794 to i64
  %796 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 3
  %797 = load i64, i64* %796, align 8
  %798 = mul nsw i64 %795, %797
  %799 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %800 = load i32, i32* %799, align 4
  %801 = sub nsw i32 0, %800
  %802 = zext i32 %801 to i64
  %803 = shl i64 %798, %802
  br label %804

804:                                              ; preds = %790, %774
  %805 = phi i64 [ %789, %774 ], [ %803, %790 ]
  %806 = load i64, i64* %21, align 8
  %807 = add nsw i64 %806, %805
  store i64 %807, i64* %21, align 8
  %808 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 4
  %809 = load i32, i32* %808, align 8
  %810 = icmp ne i32 %809, 0
  br i1 %810, label %811, label %886

811:                                              ; preds = %804
  %812 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %813 = load i32, i32* %812, align 4
  %814 = icmp sge i32 %813, 0
  br i1 %814, label %815, label %831

815:                                              ; preds = %811
  %816 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 2
  %817 = load i64, i64* %816, align 16
  %818 = ashr i64 %817, 12
  %819 = trunc i64 %818 to i32
  %820 = sext i32 %819 to i64
  %821 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 1
  %822 = load i64, i64* %821, align 8
  %823 = mul nsw i64 %820, %822
  %824 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %825 = load i64, i64* %824, align 8
  %826 = add nsw i64 %823, %825
  %827 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %828 = load i32, i32* %827, align 4
  %829 = zext i32 %828 to i64
  %830 = ashr i64 %826, %829
  br label %845

831:                                              ; preds = %811
  %832 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 2
  %833 = load i64, i64* %832, align 16
  %834 = ashr i64 %833, 12
  %835 = trunc i64 %834 to i32
  %836 = sext i32 %835 to i64
  %837 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 1
  %838 = load i64, i64* %837, align 8
  %839 = mul nsw i64 %836, %838
  %840 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %841 = load i32, i32* %840, align 4
  %842 = sub nsw i32 0, %841
  %843 = zext i32 %842 to i64
  %844 = shl i64 %839, %843
  br label %845

845:                                              ; preds = %831, %815
  %846 = phi i64 [ %830, %815 ], [ %844, %831 ]
  %847 = load i64, i64* %21, align 8
  %848 = add nsw i64 %847, %846
  store i64 %848, i64* %21, align 8
  %849 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %850 = load i32, i32* %849, align 4
  %851 = icmp sge i32 %850, 0
  br i1 %851, label %852, label %868

852:                                              ; preds = %845
  %853 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 3
  %854 = load i64, i64* %853, align 8
  %855 = ashr i64 %854, 12
  %856 = trunc i64 %855 to i32
  %857 = sext i32 %856 to i64
  %858 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 2
  %859 = load i64, i64* %858, align 8
  %860 = mul nsw i64 %857, %859
  %861 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %862 = load i64, i64* %861, align 8
  %863 = add nsw i64 %860, %862
  %864 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %865 = load i32, i32* %864, align 4
  %866 = zext i32 %865 to i64
  %867 = ashr i64 %863, %866
  br label %882

868:                                              ; preds = %845
  %869 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 3
  %870 = load i64, i64* %869, align 8
  %871 = ashr i64 %870, 12
  %872 = trunc i64 %871 to i32
  %873 = sext i32 %872 to i64
  %874 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 2
  %875 = load i64, i64* %874, align 8
  %876 = mul nsw i64 %873, %875
  %877 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %878 = load i32, i32* %877, align 4
  %879 = sub nsw i32 0, %878
  %880 = zext i32 %879 to i64
  %881 = shl i64 %876, %880
  br label %882

882:                                              ; preds = %868, %852
  %883 = phi i64 [ %867, %852 ], [ %881, %868 ]
  %884 = load i64, i64* %20, align 8
  %885 = add nsw i64 %884, %883
  store i64 %885, i64* %20, align 8
  br label %886

886:                                              ; preds = %882, %804
  %887 = load i64, i64* %20, align 8
  store i64 %887, i64* %24, align 8
  %888 = load i64, i64* %21, align 8
  store i64 %888, i64* %25, align 8
  %889 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %890 = load i32, i32* %889, align 4
  %891 = icmp sge i32 %890, 0
  br i1 %891, label %892, label %908

892:                                              ; preds = %886
  %893 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 4
  %894 = load i64, i64* %893, align 16
  %895 = ashr i64 %894, 12
  %896 = trunc i64 %895 to i32
  %897 = sext i32 %896 to i64
  %898 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 0
  %899 = load i64, i64* %898, align 8
  %900 = mul nsw i64 %897, %899
  %901 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %902 = load i64, i64* %901, align 8
  %903 = add nsw i64 %900, %902
  %904 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %905 = load i32, i32* %904, align 4
  %906 = zext i32 %905 to i64
  %907 = ashr i64 %903, %906
  br label %922

908:                                              ; preds = %886
  %909 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 4
  %910 = load i64, i64* %909, align 16
  %911 = ashr i64 %910, 12
  %912 = trunc i64 %911 to i32
  %913 = sext i32 %912 to i64
  %914 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 0
  %915 = load i64, i64* %914, align 8
  %916 = mul nsw i64 %913, %915
  %917 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %918 = load i32, i32* %917, align 4
  %919 = sub nsw i32 0, %918
  %920 = zext i32 %919 to i64
  %921 = shl i64 %916, %920
  br label %922

922:                                              ; preds = %908, %892
  %923 = phi i64 [ %907, %892 ], [ %921, %908 ]
  %924 = load i64, i64* %20, align 8
  %925 = add nsw i64 %924, %923
  store i64 %925, i64* %20, align 8
  %926 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %927 = load i32, i32* %926, align 4
  %928 = icmp sge i32 %927, 0
  br i1 %928, label %929, label %945

929:                                              ; preds = %922
  %930 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 5
  %931 = load i64, i64* %930, align 8
  %932 = ashr i64 %931, 12
  %933 = trunc i64 %932 to i32
  %934 = sext i32 %933 to i64
  %935 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 3
  %936 = load i64, i64* %935, align 8
  %937 = mul nsw i64 %934, %936
  %938 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %939 = load i64, i64* %938, align 8
  %940 = add nsw i64 %937, %939
  %941 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %942 = load i32, i32* %941, align 4
  %943 = zext i32 %942 to i64
  %944 = ashr i64 %940, %943
  br label %959

945:                                              ; preds = %922
  %946 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 5
  %947 = load i64, i64* %946, align 8
  %948 = ashr i64 %947, 12
  %949 = trunc i64 %948 to i32
  %950 = sext i32 %949 to i64
  %951 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 3
  %952 = load i64, i64* %951, align 8
  %953 = mul nsw i64 %950, %952
  %954 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %955 = load i32, i32* %954, align 4
  %956 = sub nsw i32 0, %955
  %957 = zext i32 %956 to i64
  %958 = shl i64 %953, %957
  br label %959

959:                                              ; preds = %945, %929
  %960 = phi i64 [ %944, %929 ], [ %958, %945 ]
  %961 = load i64, i64* %21, align 8
  %962 = add nsw i64 %961, %960
  store i64 %962, i64* %21, align 8
  %963 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 4
  %964 = load i32, i32* %963, align 8
  %965 = icmp ne i32 %964, 0
  br i1 %965, label %966, label %1041

966:                                              ; preds = %959
  %967 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %968 = load i32, i32* %967, align 4
  %969 = icmp sge i32 %968, 0
  br i1 %969, label %970, label %986

970:                                              ; preds = %966
  %971 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 4
  %972 = load i64, i64* %971, align 16
  %973 = ashr i64 %972, 12
  %974 = trunc i64 %973 to i32
  %975 = sext i32 %974 to i64
  %976 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 1
  %977 = load i64, i64* %976, align 8
  %978 = mul nsw i64 %975, %977
  %979 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %980 = load i64, i64* %979, align 8
  %981 = add nsw i64 %978, %980
  %982 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %983 = load i32, i32* %982, align 4
  %984 = zext i32 %983 to i64
  %985 = ashr i64 %981, %984
  br label %1000

986:                                              ; preds = %966
  %987 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 4
  %988 = load i64, i64* %987, align 16
  %989 = ashr i64 %988, 12
  %990 = trunc i64 %989 to i32
  %991 = sext i32 %990 to i64
  %992 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 1
  %993 = load i64, i64* %992, align 8
  %994 = mul nsw i64 %991, %993
  %995 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %996 = load i32, i32* %995, align 4
  %997 = sub nsw i32 0, %996
  %998 = zext i32 %997 to i64
  %999 = shl i64 %994, %998
  br label %1000

1000:                                             ; preds = %986, %970
  %1001 = phi i64 [ %985, %970 ], [ %999, %986 ]
  %1002 = load i64, i64* %21, align 8
  %1003 = add nsw i64 %1002, %1001
  store i64 %1003, i64* %21, align 8
  %1004 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1005 = load i32, i32* %1004, align 4
  %1006 = icmp sge i32 %1005, 0
  br i1 %1006, label %1007, label %1023

1007:                                             ; preds = %1000
  %1008 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 5
  %1009 = load i64, i64* %1008, align 8
  %1010 = ashr i64 %1009, 12
  %1011 = trunc i64 %1010 to i32
  %1012 = sext i32 %1011 to i64
  %1013 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 2
  %1014 = load i64, i64* %1013, align 8
  %1015 = mul nsw i64 %1012, %1014
  %1016 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %1017 = load i64, i64* %1016, align 8
  %1018 = add nsw i64 %1015, %1017
  %1019 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1020 = load i32, i32* %1019, align 4
  %1021 = zext i32 %1020 to i64
  %1022 = ashr i64 %1018, %1021
  br label %1037

1023:                                             ; preds = %1000
  %1024 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 5
  %1025 = load i64, i64* %1024, align 8
  %1026 = ashr i64 %1025, 12
  %1027 = trunc i64 %1026 to i32
  %1028 = sext i32 %1027 to i64
  %1029 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 2
  %1030 = load i64, i64* %1029, align 8
  %1031 = mul nsw i64 %1028, %1030
  %1032 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1033 = load i32, i32* %1032, align 4
  %1034 = sub nsw i32 0, %1033
  %1035 = zext i32 %1034 to i64
  %1036 = shl i64 %1031, %1035
  br label %1037

1037:                                             ; preds = %1023, %1007
  %1038 = phi i64 [ %1022, %1007 ], [ %1036, %1023 ]
  %1039 = load i64, i64* %20, align 8
  %1040 = add nsw i64 %1039, %1038
  store i64 %1040, i64* %20, align 8
  br label %1041

1041:                                             ; preds = %1037, %959
  br label %1042

1042:                                             ; preds = %2691, %2375, %1041
  %1043 = load %struct.gx_path_s*, %struct.gx_path_s** %7, align 8
  %1044 = load i64, i64* %22, align 8
  %1045 = load i64, i64* %23, align 8
  %1046 = load i64, i64* %24, align 8
  %1047 = load i64, i64* %25, align 8
  %1048 = load i64, i64* %20, align 8
  %1049 = load i64, i64* %21, align 8
  %1050 = call i32 @gx_path_add_curve(%struct.gx_path_s* %1043, i64 %1044, i64 %1045, i64 %1046, i64 %1047, i64 %1048, i64 %1049)
  store i32 %1050, i32* %16, align 4
  br label %409

1051:                                             ; preds = %144
  %1052 = load %struct.gx_path_s*, %struct.gx_path_s** %7, align 8
  %1053 = call i32 @gx_path_close_subpath(%struct.gx_path_s* %1052)
  store i32 %1053, i32* %16, align 4
  %1054 = load i32, i32* %16, align 4
  %1055 = icmp slt i32 %1054, 0
  br i1 %1055, label %1056, label %1058

1056:                                             ; preds = %1051
  %1057 = load i32, i32* %16, align 4
  store i32 %1057, i32* %3, align 4
  br label %2854

1058:                                             ; preds = %1051
  br label %1975

1059:                                             ; preds = %144
  %1060 = load i64*, i64** %10, align 8
  %1061 = load i64, i64* %1060, align 8
  %1062 = ashr i64 %1061, 12
  %1063 = trunc i64 %1062 to i32
  store i32 %1063, i32* %26, align 4
  %1064 = load %struct.gs_type1_data_s*, %struct.gs_type1_data_s** %8, align 8
  %1065 = getelementptr inbounds %struct.gs_type1_data_s, %struct.gs_type1_data_s* %1064, i32 0, i32 0
  %1066 = load i32 (%struct.gs_type1_data_s*, i32, i8**)*, i32 (%struct.gs_type1_data_s*, i32, i8**)** %1065, align 8
  %1067 = load %struct.gs_type1_data_s*, %struct.gs_type1_data_s** %8, align 8
  %1068 = load i32, i32* %26, align 4
  %1069 = call i32 %1066(%struct.gs_type1_data_s* %1067, i32 %1068, i8** %27)
  store i32 %1069, i32* %16, align 4
  %1070 = load i32, i32* %16, align 4
  %1071 = icmp slt i32 %1070, 0
  br i1 %1071, label %1072, label %1074

1072:                                             ; preds = %1059
  %1073 = load i32, i32* %16, align 4
  store i32 %1073, i32* %3, align 4
  br label %2854

1074:                                             ; preds = %1059
  %1075 = load i64*, i64** %10, align 8
  %1076 = getelementptr inbounds i64, i64* %1075, i32 -1
  store i64* %1076, i64** %10, align 8
  %1077 = load i8*, i8** %13, align 8
  %1078 = load %struct.ip_state*, %struct.ip_state** %11, align 8
  %1079 = getelementptr inbounds %struct.ip_state, %struct.ip_state* %1078, i32 0, i32 0
  store i8* %1077, i8** %1079, align 8
  %1080 = load i16, i16* %14, align 2
  %1081 = load %struct.ip_state*, %struct.ip_state** %11, align 8
  %1082 = getelementptr inbounds %struct.ip_state, %struct.ip_state* %1081, i32 0, i32 1
  store i16 %1080, i16* %1082, align 8
  %1083 = load %struct.ip_state*, %struct.ip_state** %11, align 8
  %1084 = getelementptr inbounds %struct.ip_state, %struct.ip_state* %1083, i32 1
  store %struct.ip_state* %1084, %struct.ip_state** %11, align 8
  %1085 = load i8*, i8** %27, align 8
  store i8* %1085, i8** %13, align 8
  store i16 4330, i16* %14, align 2
  %1086 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %1087 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %1086, i32 0, i32 2
  %1088 = load %struct.gs_type1_data_s*, %struct.gs_type1_data_s** %1087, align 8
  %1089 = getelementptr inbounds %struct.gs_type1_data_s, %struct.gs_type1_data_s* %1088, i32 0, i32 3
  %1090 = load i32, i32* %1089, align 8
  store i32 %1090, i32* %12, align 4
  br label %117

1091:                                             ; preds = %144
  %1092 = load %struct.ip_state*, %struct.ip_state** %11, align 8
  %1093 = getelementptr inbounds %struct.ip_state, %struct.ip_state* %1092, i32 -1
  store %struct.ip_state* %1093, %struct.ip_state** %11, align 8
  br label %110

1094:                                             ; preds = %144
  %1095 = load i8*, i8** %13, align 8
  %1096 = load i8, i8* %1095, align 1
  %1097 = zext i8 %1096 to i32
  %1098 = load i16, i16* %14, align 2
  %1099 = zext i16 %1098 to i32
  %1100 = ashr i32 %1099, 8
  %1101 = xor i32 %1097, %1100
  store i32 %1101, i32* %15, align 4
  %1102 = load i8*, i8** %13, align 8
  %1103 = load i8, i8* %1102, align 1
  %1104 = zext i8 %1103 to i32
  %1105 = load i16, i16* %14, align 2
  %1106 = zext i16 %1105 to i32
  %1107 = add nsw i32 %1104, %1106
  %1108 = mul nsw i32 %1107, 52845
  %1109 = add nsw i32 %1108, 22719
  %1110 = trunc i32 %1109 to i16
  store i16 %1110, i16* %14, align 2
  %1111 = load i8*, i8** %13, align 8
  %1112 = getelementptr inbounds i8, i8* %1111, i32 1
  store i8* %1112, i8** %13, align 8
  %1113 = load i32, i32* %15, align 4
  switch i32 %1113, label %1437 [
    i32 0, label %1114
    i32 1, label %1117
    i32 2, label %1120
    i32 6, label %1123
    i32 7, label %1315
    i32 12, label %1336
    i32 15, label %1351
    i32 16, label %1369
    i32 17, label %1420
    i32 33, label %1434
  ]

1114:                                             ; preds = %1094
  %1115 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %1116 = getelementptr inbounds i64, i64* %1115, i64 -1
  store i64* %1116, i64** %10, align 8
  br label %1438

1117:                                             ; preds = %1094
  %1118 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %1119 = getelementptr inbounds i64, i64* %1118, i64 -1
  store i64* %1119, i64** %10, align 8
  br label %1438

1120:                                             ; preds = %1094
  %1121 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %1122 = getelementptr inbounds i64, i64* %1121, i64 -1
  store i64* %1122, i64** %10, align 8
  br label %1438

1123:                                             ; preds = %1094
  %1124 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 3
  %1125 = load i64, i64* %1124, align 8
  %1126 = ashr i64 %1125, 12
  %1127 = trunc i64 %1126 to i32
  %1128 = trunc i32 %1127 to i8
  %1129 = zext i8 %1128 to i32
  %1130 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %1131 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %1130, i32 0, i32 13
  store i32 %1129, i32* %1131, align 8
  %1132 = load i64, i64* %18, align 8
  store i64 %1132, i64* %20, align 8
  %1133 = load i64, i64* %19, align 8
  store i64 %1133, i64* %21, align 8
  %1134 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %1135 = load i64, i64* %1134, align 16
  %1136 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 1
  %1137 = load i64, i64* %1136, align 8
  %1138 = sub nsw i64 %1137, %1135
  store i64 %1138, i64* %1136, align 8
  %1139 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1140 = load i32, i32* %1139, align 4
  %1141 = icmp sge i32 %1140, 0
  br i1 %1141, label %1142, label %1158

1142:                                             ; preds = %1123
  %1143 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 1
  %1144 = load i64, i64* %1143, align 8
  %1145 = ashr i64 %1144, 12
  %1146 = trunc i64 %1145 to i32
  %1147 = sext i32 %1146 to i64
  %1148 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 0
  %1149 = load i64, i64* %1148, align 8
  %1150 = mul nsw i64 %1147, %1149
  %1151 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %1152 = load i64, i64* %1151, align 8
  %1153 = add nsw i64 %1150, %1152
  %1154 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1155 = load i32, i32* %1154, align 4
  %1156 = zext i32 %1155 to i64
  %1157 = ashr i64 %1153, %1156
  br label %1172

1158:                                             ; preds = %1123
  %1159 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 1
  %1160 = load i64, i64* %1159, align 8
  %1161 = ashr i64 %1160, 12
  %1162 = trunc i64 %1161 to i32
  %1163 = sext i32 %1162 to i64
  %1164 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 0
  %1165 = load i64, i64* %1164, align 8
  %1166 = mul nsw i64 %1163, %1165
  %1167 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1168 = load i32, i32* %1167, align 4
  %1169 = sub nsw i32 0, %1168
  %1170 = zext i32 %1169 to i64
  %1171 = shl i64 %1166, %1170
  br label %1172

1172:                                             ; preds = %1158, %1142
  %1173 = phi i64 [ %1157, %1142 ], [ %1171, %1158 ]
  %1174 = load i64, i64* %20, align 8
  %1175 = add nsw i64 %1174, %1173
  store i64 %1175, i64* %20, align 8
  %1176 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1177 = load i32, i32* %1176, align 4
  %1178 = icmp sge i32 %1177, 0
  br i1 %1178, label %1179, label %1195

1179:                                             ; preds = %1172
  %1180 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 2
  %1181 = load i64, i64* %1180, align 16
  %1182 = ashr i64 %1181, 12
  %1183 = trunc i64 %1182 to i32
  %1184 = sext i32 %1183 to i64
  %1185 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 3
  %1186 = load i64, i64* %1185, align 8
  %1187 = mul nsw i64 %1184, %1186
  %1188 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %1189 = load i64, i64* %1188, align 8
  %1190 = add nsw i64 %1187, %1189
  %1191 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1192 = load i32, i32* %1191, align 4
  %1193 = zext i32 %1192 to i64
  %1194 = ashr i64 %1190, %1193
  br label %1209

1195:                                             ; preds = %1172
  %1196 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 2
  %1197 = load i64, i64* %1196, align 16
  %1198 = ashr i64 %1197, 12
  %1199 = trunc i64 %1198 to i32
  %1200 = sext i32 %1199 to i64
  %1201 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 3
  %1202 = load i64, i64* %1201, align 8
  %1203 = mul nsw i64 %1200, %1202
  %1204 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1205 = load i32, i32* %1204, align 4
  %1206 = sub nsw i32 0, %1205
  %1207 = zext i32 %1206 to i64
  %1208 = shl i64 %1203, %1207
  br label %1209

1209:                                             ; preds = %1195, %1179
  %1210 = phi i64 [ %1194, %1179 ], [ %1208, %1195 ]
  %1211 = load i64, i64* %21, align 8
  %1212 = add nsw i64 %1211, %1210
  store i64 %1212, i64* %21, align 8
  %1213 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 4
  %1214 = load i32, i32* %1213, align 8
  %1215 = icmp ne i32 %1214, 0
  br i1 %1215, label %1216, label %1291

1216:                                             ; preds = %1209
  %1217 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1218 = load i32, i32* %1217, align 4
  %1219 = icmp sge i32 %1218, 0
  br i1 %1219, label %1220, label %1236

1220:                                             ; preds = %1216
  %1221 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 1
  %1222 = load i64, i64* %1221, align 8
  %1223 = ashr i64 %1222, 12
  %1224 = trunc i64 %1223 to i32
  %1225 = sext i32 %1224 to i64
  %1226 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 1
  %1227 = load i64, i64* %1226, align 8
  %1228 = mul nsw i64 %1225, %1227
  %1229 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %1230 = load i64, i64* %1229, align 8
  %1231 = add nsw i64 %1228, %1230
  %1232 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1233 = load i32, i32* %1232, align 4
  %1234 = zext i32 %1233 to i64
  %1235 = ashr i64 %1231, %1234
  br label %1250

1236:                                             ; preds = %1216
  %1237 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 1
  %1238 = load i64, i64* %1237, align 8
  %1239 = ashr i64 %1238, 12
  %1240 = trunc i64 %1239 to i32
  %1241 = sext i32 %1240 to i64
  %1242 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 1
  %1243 = load i64, i64* %1242, align 8
  %1244 = mul nsw i64 %1241, %1243
  %1245 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1246 = load i32, i32* %1245, align 4
  %1247 = sub nsw i32 0, %1246
  %1248 = zext i32 %1247 to i64
  %1249 = shl i64 %1244, %1248
  br label %1250

1250:                                             ; preds = %1236, %1220
  %1251 = phi i64 [ %1235, %1220 ], [ %1249, %1236 ]
  %1252 = load i64, i64* %21, align 8
  %1253 = add nsw i64 %1252, %1251
  store i64 %1253, i64* %21, align 8
  %1254 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1255 = load i32, i32* %1254, align 4
  %1256 = icmp sge i32 %1255, 0
  br i1 %1256, label %1257, label %1273

1257:                                             ; preds = %1250
  %1258 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 2
  %1259 = load i64, i64* %1258, align 16
  %1260 = ashr i64 %1259, 12
  %1261 = trunc i64 %1260 to i32
  %1262 = sext i32 %1261 to i64
  %1263 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 2
  %1264 = load i64, i64* %1263, align 8
  %1265 = mul nsw i64 %1262, %1264
  %1266 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %1267 = load i64, i64* %1266, align 8
  %1268 = add nsw i64 %1265, %1267
  %1269 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1270 = load i32, i32* %1269, align 4
  %1271 = zext i32 %1270 to i64
  %1272 = ashr i64 %1268, %1271
  br label %1287

1273:                                             ; preds = %1250
  %1274 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 2
  %1275 = load i64, i64* %1274, align 16
  %1276 = ashr i64 %1275, 12
  %1277 = trunc i64 %1276 to i32
  %1278 = sext i32 %1277 to i64
  %1279 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 2
  %1280 = load i64, i64* %1279, align 8
  %1281 = mul nsw i64 %1278, %1280
  %1282 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1283 = load i32, i32* %1282, align 4
  %1284 = sub nsw i32 0, %1283
  %1285 = zext i32 %1284 to i64
  %1286 = shl i64 %1281, %1285
  br label %1287

1287:                                             ; preds = %1273, %1257
  %1288 = phi i64 [ %1272, %1257 ], [ %1286, %1273 ]
  %1289 = load i64, i64* %20, align 8
  %1290 = add nsw i64 %1289, %1288
  store i64 %1290, i64* %20, align 8
  br label %1291

1291:                                             ; preds = %1287, %1209
  %1292 = load i64, i64* %20, align 8
  %1293 = load %struct.gx_path_s*, %struct.gx_path_s** %7, align 8
  %1294 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %1293, i32 0, i32 9
  %1295 = getelementptr inbounds %struct.timeval, %struct.timeval* %1294, i32 0, i32 0
  store i64 %1292, i64* %1295, align 8
  %1296 = load i64, i64* %21, align 8
  %1297 = load %struct.gx_path_s*, %struct.gx_path_s** %7, align 8
  %1298 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %1297, i32 0, i32 9
  %1299 = getelementptr inbounds %struct.timeval, %struct.timeval* %1298, i32 0, i32 1
  store i64 %1296, i64* %1299, align 8
  %1300 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %1301 = getelementptr inbounds i64, i64* %1300, i64 -1
  store i64* %1301, i64** %10, align 8
  store i16 4330, i16* %14, align 2
  %1302 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %1303 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %1302, i32 0, i32 2
  %1304 = load %struct.gs_type1_data_s*, %struct.gs_type1_data_s** %1303, align 8
  %1305 = getelementptr inbounds %struct.gs_type1_data_s, %struct.gs_type1_data_s* %1304, i32 0, i32 3
  %1306 = load i32, i32* %1305, align 8
  store i32 %1306, i32* %12, align 4
  %1307 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 4
  %1308 = load i64, i64* %1307, align 16
  %1309 = ashr i64 %1308, 12
  %1310 = trunc i64 %1309 to i32
  %1311 = trunc i32 %1310 to i8
  %1312 = zext i8 %1311 to i32
  %1313 = shl i32 %1312, 1
  %1314 = add nsw i32 %1313, 1
  store i32 %1314, i32* %3, align 4
  br label %2854

1315:                                             ; preds = %1094
  %1316 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %1317 = load i64, i64* %1316, align 16
  %1318 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %1319 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %1318, i32 0, i32 11
  %1320 = getelementptr inbounds %struct.timeval, %struct.timeval* %1319, i32 0, i32 0
  store i64 %1317, i64* %1320, align 8
  %1321 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 1
  %1322 = load i64, i64* %1321, align 8
  %1323 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %1324 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %1323, i32 0, i32 11
  %1325 = getelementptr inbounds %struct.timeval, %struct.timeval* %1324, i32 0, i32 1
  store i64 %1322, i64* %1325, align 8
  %1326 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 2
  %1327 = load i64, i64* %1326, align 16
  %1328 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %1329 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %1328, i32 0, i32 12
  %1330 = getelementptr inbounds %struct.timeval, %struct.timeval* %1329, i32 0, i32 0
  store i64 %1327, i64* %1330, align 8
  %1331 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 3
  %1332 = load i64, i64* %1331, align 8
  %1333 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %1334 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %1333, i32 0, i32 12
  %1335 = getelementptr inbounds %struct.timeval, %struct.timeval* %1334, i32 0, i32 1
  store i64 %1332, i64* %1335, align 8
  br label %1457

1336:                                             ; preds = %1094
  %1337 = load i64*, i64** %10, align 8
  %1338 = getelementptr inbounds i64, i64* %1337, i64 -1
  %1339 = load i64, i64* %1338, align 8
  %1340 = sitofp i64 %1339 to float
  %1341 = load i64*, i64** %10, align 8
  %1342 = load i64, i64* %1341, align 8
  %1343 = sitofp i64 %1342 to float
  %1344 = fdiv float %1340, %1343
  %1345 = fmul float %1344, 4.096000e+03
  %1346 = fptosi float %1345 to i64
  %1347 = load i64*, i64** %10, align 8
  %1348 = getelementptr inbounds i64, i64* %1347, i64 -1
  store i64 %1346, i64* %1348, align 8
  %1349 = load i64*, i64** %10, align 8
  %1350 = getelementptr inbounds i64, i64* %1349, i32 -1
  store i64* %1350, i64** %10, align 8
  br label %1438

1351:                                             ; preds = %1094
  %1352 = load i64*, i64** %10, align 8
  %1353 = getelementptr inbounds i64, i64* %1352, i64 -2
  %1354 = load i64, i64* %1353, align 8
  %1355 = load i64*, i64** %10, align 8
  %1356 = getelementptr inbounds i64, i64* %1355, i64 -1
  %1357 = load i64, i64* %1356, align 8
  %1358 = icmp sgt i64 %1354, %1357
  br i1 %1358, label %1359, label %1366

1359:                                             ; preds = %1351
  %1360 = load i64*, i64** %10, align 8
  %1361 = load i64, i64* %1360, align 8
  %1362 = load i64*, i64** %10, align 8
  %1363 = getelementptr inbounds i64, i64* %1362, i64 -3
  %1364 = load i64, i64* %1363, align 8
  %1365 = add nsw i64 %1364, %1361
  store i64 %1365, i64* %1363, align 8
  br label %1366

1366:                                             ; preds = %1359, %1351
  %1367 = load i64*, i64** %10, align 8
  %1368 = getelementptr inbounds i64, i64* %1367, i64 -3
  store i64* %1368, i64** %10, align 8
  br label %1438

1369:                                             ; preds = %1094
  %1370 = load i64*, i64** %10, align 8
  %1371 = load i64, i64* %1370, align 8
  %1372 = ashr i64 %1371, 12
  %1373 = trunc i64 %1372 to i32
  store i32 %1373, i32* %28, align 4
  %1374 = load i64*, i64** %10, align 8
  %1375 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %1376 = ptrtoint i64* %1374 to i64
  %1377 = ptrtoint i64* %1375 to i64
  %1378 = sub i64 %1376, %1377
  %1379 = sdiv exact i64 %1378, 8
  %1380 = trunc i64 %1379 to i32
  store i32 %1380, i32* %29, align 4
  %1381 = load i8*, i8** %13, align 8
  %1382 = load %struct.ip_state*, %struct.ip_state** %11, align 8
  %1383 = getelementptr inbounds %struct.ip_state, %struct.ip_state* %1382, i32 0, i32 0
  store i8* %1381, i8** %1383, align 8
  %1384 = load i16, i16* %14, align 2
  %1385 = load %struct.ip_state*, %struct.ip_state** %11, align 8
  %1386 = getelementptr inbounds %struct.ip_state, %struct.ip_state* %1385, i32 0, i32 1
  store i16 %1384, i16* %1386, align 8
  %1387 = load i32, i32* %29, align 4
  %1388 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %1389 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %1388, i32 0, i32 7
  store i32 %1387, i32* %1389, align 8
  %1390 = load %struct.ip_state*, %struct.ip_state** %11, align 8
  %1391 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %1392 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %1391, i32 0, i32 8
  %1393 = getelementptr inbounds [11 x %struct.ip_state], [11 x %struct.ip_state]* %1392, i64 0, i64 0
  %1394 = ptrtoint %struct.ip_state* %1390 to i64
  %1395 = ptrtoint %struct.ip_state* %1393 to i64
  %1396 = sub i64 %1394, %1395
  %1397 = sdiv exact i64 %1396, 16
  %1398 = add nsw i64 %1397, 1
  %1399 = trunc i64 %1398 to i32
  %1400 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %1401 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %1400, i32 0, i32 9
  store i32 %1399, i32* %1401, align 8
  %1402 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %1403 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %1402, i32 0, i32 10
  store i32 0, i32* %1403, align 4
  %1404 = load i32, i32* %29, align 4
  %1405 = icmp ne i32 %1404, 0
  br i1 %1405, label %1406, label %1416

1406:                                             ; preds = %1369
  %1407 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %1408 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %1407, i32 0, i32 6
  %1409 = getelementptr inbounds [24 x i64], [24 x i64]* %1408, i64 0, i64 0
  %1410 = bitcast i64* %1409 to i8*
  %1411 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %1412 = bitcast i64* %1411 to i8*
  %1413 = load i32, i32* %29, align 4
  %1414 = sext i32 %1413 to i64
  %1415 = mul i64 %1414, 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1410, i8* align 16 %1412, i64 %1415, i1 false)
  br label %1416

1416:                                             ; preds = %1406, %1369
  %1417 = load i32, i32* %28, align 4
  %1418 = add nsw i32 %1417, 1
  %1419 = shl i32 %1418, 1
  store i32 %1419, i32* %3, align 4
  br label %2854

1420:                                             ; preds = %1094
  %1421 = load i64*, i64** %10, align 8
  %1422 = getelementptr inbounds i64, i64* %1421, i32 1
  store i64* %1422, i64** %10, align 8
  %1423 = load %struct.gs_type1_data_s*, %struct.gs_type1_data_s** %8, align 8
  %1424 = getelementptr inbounds %struct.gs_type1_data_s, %struct.gs_type1_data_s* %1423, i32 0, i32 1
  %1425 = load i32 (%struct.gs_type1_data_s*, i64*)*, i32 (%struct.gs_type1_data_s*, i64*)** %1424, align 8
  %1426 = load %struct.gs_type1_data_s*, %struct.gs_type1_data_s** %8, align 8
  %1427 = load i64*, i64** %10, align 8
  %1428 = call i32 %1425(%struct.gs_type1_data_s* %1426, i64* %1427)
  store i32 %1428, i32* %16, align 4
  %1429 = load i32, i32* %16, align 4
  %1430 = icmp slt i32 %1429, 0
  br i1 %1430, label %1431, label %1433

1431:                                             ; preds = %1420
  %1432 = load i32, i32* %16, align 4
  store i32 %1432, i32* %3, align 4
  br label %2854

1433:                                             ; preds = %1420
  br label %2852

1434:                                             ; preds = %1094
  %1435 = load i64, i64* %18, align 8
  store i64 %1435, i64* %20, align 8
  %1436 = load i64, i64* %19, align 8
  store i64 %1436, i64* %21, align 8
  br label %1457

1437:                                             ; preds = %1094
  store i32 -10, i32* %3, align 4
  br label %2854

1438:                                             ; preds = %1366, %1336, %1120, %1117, %1114
  br label %2853

1439:                                             ; preds = %144
  %1440 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %1441 = load i64, i64* %1440, align 16
  %1442 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %1443 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %1442, i32 0, i32 11
  %1444 = getelementptr inbounds %struct.timeval, %struct.timeval* %1443, i32 0, i32 0
  store i64 %1441, i64* %1444, align 8
  %1445 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %1446 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %1445, i32 0, i32 11
  %1447 = getelementptr inbounds %struct.timeval, %struct.timeval* %1446, i32 0, i32 1
  store i64 0, i64* %1447, align 8
  %1448 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 1
  %1449 = load i64, i64* %1448, align 8
  %1450 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %1451 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %1450, i32 0, i32 12
  %1452 = getelementptr inbounds %struct.timeval, %struct.timeval* %1451, i32 0, i32 0
  store i64 %1449, i64* %1452, align 8
  %1453 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %1454 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %1453, i32 0, i32 12
  %1455 = getelementptr inbounds %struct.timeval, %struct.timeval* %1454, i32 0, i32 1
  store i64 0, i64* %1455, align 8
  %1456 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 1
  store i64 0, i64* %1456, align 8
  br label %1457

1457:                                             ; preds = %1439, %1434, %1315
  %1458 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1459 = load i32, i32* %1458, align 4
  %1460 = icmp sge i32 %1459, 0
  br i1 %1460, label %1461, label %1477

1461:                                             ; preds = %1457
  %1462 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %1463 = load i64, i64* %1462, align 16
  %1464 = ashr i64 %1463, 12
  %1465 = trunc i64 %1464 to i32
  %1466 = sext i32 %1465 to i64
  %1467 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 0
  %1468 = load i64, i64* %1467, align 8
  %1469 = mul nsw i64 %1466, %1468
  %1470 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %1471 = load i64, i64* %1470, align 8
  %1472 = add nsw i64 %1469, %1471
  %1473 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1474 = load i32, i32* %1473, align 4
  %1475 = zext i32 %1474 to i64
  %1476 = ashr i64 %1472, %1475
  br label %1491

1477:                                             ; preds = %1457
  %1478 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %1479 = load i64, i64* %1478, align 16
  %1480 = ashr i64 %1479, 12
  %1481 = trunc i64 %1480 to i32
  %1482 = sext i32 %1481 to i64
  %1483 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 0
  %1484 = load i64, i64* %1483, align 8
  %1485 = mul nsw i64 %1482, %1484
  %1486 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1487 = load i32, i32* %1486, align 4
  %1488 = sub nsw i32 0, %1487
  %1489 = zext i32 %1488 to i64
  %1490 = shl i64 %1485, %1489
  br label %1491

1491:                                             ; preds = %1477, %1461
  %1492 = phi i64 [ %1476, %1461 ], [ %1490, %1477 ]
  %1493 = load i64, i64* %20, align 8
  %1494 = add nsw i64 %1493, %1492
  store i64 %1494, i64* %20, align 8
  %1495 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1496 = load i32, i32* %1495, align 4
  %1497 = icmp sge i32 %1496, 0
  br i1 %1497, label %1498, label %1514

1498:                                             ; preds = %1491
  %1499 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 1
  %1500 = load i64, i64* %1499, align 8
  %1501 = ashr i64 %1500, 12
  %1502 = trunc i64 %1501 to i32
  %1503 = sext i32 %1502 to i64
  %1504 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 3
  %1505 = load i64, i64* %1504, align 8
  %1506 = mul nsw i64 %1503, %1505
  %1507 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %1508 = load i64, i64* %1507, align 8
  %1509 = add nsw i64 %1506, %1508
  %1510 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1511 = load i32, i32* %1510, align 4
  %1512 = zext i32 %1511 to i64
  %1513 = ashr i64 %1509, %1512
  br label %1528

1514:                                             ; preds = %1491
  %1515 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 1
  %1516 = load i64, i64* %1515, align 8
  %1517 = ashr i64 %1516, 12
  %1518 = trunc i64 %1517 to i32
  %1519 = sext i32 %1518 to i64
  %1520 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 3
  %1521 = load i64, i64* %1520, align 8
  %1522 = mul nsw i64 %1519, %1521
  %1523 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1524 = load i32, i32* %1523, align 4
  %1525 = sub nsw i32 0, %1524
  %1526 = zext i32 %1525 to i64
  %1527 = shl i64 %1522, %1526
  br label %1528

1528:                                             ; preds = %1514, %1498
  %1529 = phi i64 [ %1513, %1498 ], [ %1527, %1514 ]
  %1530 = load i64, i64* %21, align 8
  %1531 = add nsw i64 %1530, %1529
  store i64 %1531, i64* %21, align 8
  %1532 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 4
  %1533 = load i32, i32* %1532, align 8
  %1534 = icmp ne i32 %1533, 0
  br i1 %1534, label %1535, label %1610

1535:                                             ; preds = %1528
  %1536 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1537 = load i32, i32* %1536, align 4
  %1538 = icmp sge i32 %1537, 0
  br i1 %1538, label %1539, label %1555

1539:                                             ; preds = %1535
  %1540 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %1541 = load i64, i64* %1540, align 16
  %1542 = ashr i64 %1541, 12
  %1543 = trunc i64 %1542 to i32
  %1544 = sext i32 %1543 to i64
  %1545 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 1
  %1546 = load i64, i64* %1545, align 8
  %1547 = mul nsw i64 %1544, %1546
  %1548 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %1549 = load i64, i64* %1548, align 8
  %1550 = add nsw i64 %1547, %1549
  %1551 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1552 = load i32, i32* %1551, align 4
  %1553 = zext i32 %1552 to i64
  %1554 = ashr i64 %1550, %1553
  br label %1569

1555:                                             ; preds = %1535
  %1556 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %1557 = load i64, i64* %1556, align 16
  %1558 = ashr i64 %1557, 12
  %1559 = trunc i64 %1558 to i32
  %1560 = sext i32 %1559 to i64
  %1561 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 1
  %1562 = load i64, i64* %1561, align 8
  %1563 = mul nsw i64 %1560, %1562
  %1564 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1565 = load i32, i32* %1564, align 4
  %1566 = sub nsw i32 0, %1565
  %1567 = zext i32 %1566 to i64
  %1568 = shl i64 %1563, %1567
  br label %1569

1569:                                             ; preds = %1555, %1539
  %1570 = phi i64 [ %1554, %1539 ], [ %1568, %1555 ]
  %1571 = load i64, i64* %21, align 8
  %1572 = add nsw i64 %1571, %1570
  store i64 %1572, i64* %21, align 8
  %1573 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1574 = load i32, i32* %1573, align 4
  %1575 = icmp sge i32 %1574, 0
  br i1 %1575, label %1576, label %1592

1576:                                             ; preds = %1569
  %1577 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 1
  %1578 = load i64, i64* %1577, align 8
  %1579 = ashr i64 %1578, 12
  %1580 = trunc i64 %1579 to i32
  %1581 = sext i32 %1580 to i64
  %1582 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 2
  %1583 = load i64, i64* %1582, align 8
  %1584 = mul nsw i64 %1581, %1583
  %1585 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %1586 = load i64, i64* %1585, align 8
  %1587 = add nsw i64 %1584, %1586
  %1588 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1589 = load i32, i32* %1588, align 4
  %1590 = zext i32 %1589 to i64
  %1591 = ashr i64 %1587, %1590
  br label %1606

1592:                                             ; preds = %1569
  %1593 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 1
  %1594 = load i64, i64* %1593, align 8
  %1595 = ashr i64 %1594, 12
  %1596 = trunc i64 %1595 to i32
  %1597 = sext i32 %1596 to i64
  %1598 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 2
  %1599 = load i64, i64* %1598, align 8
  %1600 = mul nsw i64 %1597, %1599
  %1601 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1602 = load i32, i32* %1601, align 4
  %1603 = sub nsw i32 0, %1602
  %1604 = zext i32 %1603 to i64
  %1605 = shl i64 %1600, %1604
  br label %1606

1606:                                             ; preds = %1592, %1576
  %1607 = phi i64 [ %1591, %1576 ], [ %1605, %1592 ]
  %1608 = load i64, i64* %20, align 8
  %1609 = add nsw i64 %1608, %1607
  store i64 %1609, i64* %20, align 8
  br label %1610

1610:                                             ; preds = %1606, %1528
  br label %415

1611:                                             ; preds = %144
  %1612 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %1613 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %1612, i32 0, i32 13
  %1614 = load i32, i32* %1613, align 8
  %1615 = icmp sge i32 %1614, 0
  br i1 %1615, label %1616, label %1646

1616:                                             ; preds = %1611
  %1617 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %1618 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %1617, i32 0, i32 13
  %1619 = load i32, i32* %1618, align 8
  store i32 %1619, i32* %30, align 4
  %1620 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %1621 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %1620, i32 0, i32 13
  store i32 -1, i32* %1621, align 8
  %1622 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %1623 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %1622, i32 0, i32 2
  %1624 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %1623, i32 0, i32 12
  %1625 = load i64, i64* %1624, align 8
  %1626 = load %struct.gx_path_s*, %struct.gx_path_s** %7, align 8
  %1627 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %1626, i32 0, i32 9
  %1628 = getelementptr inbounds %struct.timeval, %struct.timeval* %1627, i32 0, i32 0
  store i64 %1625, i64* %1628, align 8
  %1629 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %1630 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %1629, i32 0, i32 2
  %1631 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %1630, i32 0, i32 13
  %1632 = load i64, i64* %1631, align 8
  %1633 = load %struct.gx_path_s*, %struct.gx_path_s** %7, align 8
  %1634 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %1633, i32 0, i32 9
  %1635 = getelementptr inbounds %struct.timeval, %struct.timeval* %1634, i32 0, i32 1
  store i64 %1632, i64* %1635, align 8
  %1636 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %1637 = getelementptr inbounds i64, i64* %1636, i64 -1
  store i64* %1637, i64** %10, align 8
  store i16 4330, i16* %14, align 2
  %1638 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %1639 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %1638, i32 0, i32 2
  %1640 = load %struct.gs_type1_data_s*, %struct.gs_type1_data_s** %1639, align 8
  %1641 = getelementptr inbounds %struct.gs_type1_data_s, %struct.gs_type1_data_s* %1640, i32 0, i32 3
  %1642 = load i32, i32* %1641, align 8
  store i32 %1642, i32* %12, align 4
  %1643 = load i32, i32* %30, align 4
  %1644 = shl i32 %1643, 1
  %1645 = add nsw i32 %1644, 1
  store i32 %1645, i32* %3, align 4
  br label %2854

1646:                                             ; preds = %1611
  %1647 = load %struct.gx_path_s*, %struct.gx_path_s** %7, align 8
  %1648 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %1649 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %1648, i32 0, i32 2
  %1650 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %1649, i32 0, i32 12
  %1651 = load i64, i64* %1650, align 8
  %1652 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %1653 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %1652, i32 0, i32 2
  %1654 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %1653, i32 0, i32 13
  %1655 = load i64, i64* %1654, align 8
  %1656 = call i32 @gx_path_add_point(%struct.gx_path_s* %1647, i64 %1651, i64 %1655)
  %1657 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %1658 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %1657, i32 0, i32 3
  %1659 = load i32, i32* %1658, align 8
  %1660 = icmp ne i32 %1659, 0
  br i1 %1660, label %1661, label %1694

1661:                                             ; preds = %1646
  %1662 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %1663 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %1662, i32 0, i32 0
  %1664 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %1663, align 8
  %1665 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %1666 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %1665, i32 0, i32 12
  %1667 = getelementptr inbounds %struct.timeval, %struct.timeval* %1666, i32 0, i32 0
  %1668 = load i64, i64* %1667, align 8
  %1669 = sitofp i64 %1668 to double
  %1670 = fmul double %1669, 0x3F30000000000000
  %1671 = fptrunc double %1670 to float
  %1672 = fpext float %1671 to double
  %1673 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %1674 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %1673, i32 0, i32 12
  %1675 = getelementptr inbounds %struct.timeval, %struct.timeval* %1674, i32 0, i32 1
  %1676 = load i64, i64* %1675, align 8
  %1677 = sitofp i64 %1676 to double
  %1678 = fmul double %1677, 0x3F30000000000000
  %1679 = fptrunc double %1678 to float
  %1680 = fpext float %1679 to double
  %1681 = call i32 @gs_setcharwidth(%struct.gs_show_enum_s* %1664, double %1672, double %1680)
  store i32 %1681, i32* %16, align 4
  %1682 = load i32, i32* %16, align 4
  %1683 = icmp slt i32 %1682, 0
  br i1 %1683, label %1684, label %1686

1684:                                             ; preds = %1661
  %1685 = load i32, i32* %16, align 4
  store i32 %1685, i32* %3, align 4
  br label %2854

1686:                                             ; preds = %1661
  %1687 = load %struct.gx_path_s*, %struct.gx_path_s** %7, align 8
  %1688 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %1689 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %1688, i32 0, i32 0
  %1690 = load %struct.gs_state_s*, %struct.gs_state_s** %1689, align 8
  %1691 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %1690, i32 0, i32 7
  %1692 = load %struct.gx_path_s*, %struct.gx_path_s** %1691, align 8
  %1693 = call i32 @gx_path_merge(%struct.gx_path_s* %1687, %struct.gx_path_s* %1692)
  store i32 %1693, i32* %16, align 4
  br label %1819

1694:                                             ; preds = %1646
  %1695 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %1696 = call i32 (%struct.gs_state_s*, %struct.gs_rect_s*, ...) bitcast (i32 (%struct.gs_state_s*, %struct.gs_rect_s*)* @gs_pathbbox to i32 (%struct.gs_state_s*, %struct.gs_rect_s*, ...)*)(%struct.gs_state_s* %1695, %struct.gs_rect_s* %31)
  store i32 %1696, i32* %16, align 4
  %1697 = load %struct.gx_path_s*, %struct.gx_path_s** %7, align 8
  %1698 = load i64, i64* %18, align 8
  %1699 = load i64, i64* %19, align 8
  %1700 = call i32 @gx_path_add_point(%struct.gx_path_s* %1697, i64 %1698, i64 %1699)
  %1701 = load i32, i32* %16, align 4
  %1702 = icmp slt i32 %1701, 0
  br i1 %1702, label %1703, label %1712

1703:                                             ; preds = %1694
  %1704 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %31, i32 0, i32 1
  %1705 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %1704, i32 0, i32 1
  store float 0.000000e+00, float* %1705, align 4
  %1706 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %31, i32 0, i32 1
  %1707 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %1706, i32 0, i32 0
  store float 0.000000e+00, float* %1707, align 4
  %1708 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %31, i32 0, i32 0
  %1709 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %1708, i32 0, i32 1
  store float 0.000000e+00, float* %1709, align 4
  %1710 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %31, i32 0, i32 0
  %1711 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %1710, i32 0, i32 0
  store float 0.000000e+00, float* %1711, align 4
  br label %1712

1712:                                             ; preds = %1703, %1694
  %1713 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %1714 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %1713, i32 0, i32 4
  %1715 = load i32, i32* %1714, align 4
  %1716 = icmp ne i32 %1715, 0
  br i1 %1716, label %1717, label %1744

1717:                                             ; preds = %1712
  %1718 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %1719 = call float @gs_currentlinewidth(%struct.gs_state_s* %1718)
  store float %1719, float* %32, align 4
  %1720 = load float, float* %32, align 4
  %1721 = fcmp oeq float %1720, 0.000000e+00
  br i1 %1721, label %1722, label %1723

1722:                                             ; preds = %1717
  store float 1.000000e+00, float* %32, align 4
  br label %1723

1723:                                             ; preds = %1722, %1717
  %1724 = load float, float* %32, align 4
  %1725 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %31, i32 0, i32 0
  %1726 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %1725, i32 0, i32 0
  %1727 = load float, float* %1726, align 4
  %1728 = fsub float %1727, %1724
  store float %1728, float* %1726, align 4
  %1729 = load float, float* %32, align 4
  %1730 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %31, i32 0, i32 0
  %1731 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %1730, i32 0, i32 1
  %1732 = load float, float* %1731, align 4
  %1733 = fsub float %1732, %1729
  store float %1733, float* %1731, align 4
  %1734 = load float, float* %32, align 4
  %1735 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %31, i32 0, i32 1
  %1736 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %1735, i32 0, i32 0
  %1737 = load float, float* %1736, align 4
  %1738 = fadd float %1737, %1734
  store float %1738, float* %1736, align 4
  %1739 = load float, float* %32, align 4
  %1740 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %31, i32 0, i32 1
  %1741 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %1740, i32 0, i32 1
  %1742 = load float, float* %1741, align 4
  %1743 = fadd float %1742, %1739
  store float %1743, float* %1741, align 4
  br label %1744

1744:                                             ; preds = %1723, %1712
  %1745 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %1746 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %1745, i32 0, i32 0
  %1747 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %1746, align 8
  %1748 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %1749 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %1748, i32 0, i32 12
  %1750 = getelementptr inbounds %struct.timeval, %struct.timeval* %1749, i32 0, i32 0
  %1751 = load i64, i64* %1750, align 8
  %1752 = sitofp i64 %1751 to double
  %1753 = fmul double %1752, 0x3F30000000000000
  %1754 = fptrunc double %1753 to float
  %1755 = fpext float %1754 to double
  %1756 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %1757 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %1756, i32 0, i32 12
  %1758 = getelementptr inbounds %struct.timeval, %struct.timeval* %1757, i32 0, i32 1
  %1759 = load i64, i64* %1758, align 8
  %1760 = sitofp i64 %1759 to double
  %1761 = fmul double %1760, 0x3F30000000000000
  %1762 = fptrunc double %1761 to float
  %1763 = fpext float %1762 to double
  %1764 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %31, i32 0, i32 0
  %1765 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %1764, i32 0, i32 0
  %1766 = load float, float* %1765, align 4
  %1767 = fpext float %1766 to double
  %1768 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %31, i32 0, i32 0
  %1769 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %1768, i32 0, i32 1
  %1770 = load float, float* %1769, align 4
  %1771 = fpext float %1770 to double
  %1772 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %31, i32 0, i32 1
  %1773 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %1772, i32 0, i32 0
  %1774 = load float, float* %1773, align 4
  %1775 = fpext float %1774 to double
  %1776 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %31, i32 0, i32 1
  %1777 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %1776, i32 0, i32 1
  %1778 = load float, float* %1777, align 4
  %1779 = fpext float %1778 to double
  %1780 = call i32 @gs_setcachedevice(%struct.gs_show_enum_s* %1747, double %1755, double %1763, double %1767, double %1771, double %1775, double %1779)
  store i32 %1780, i32* %16, align 4
  %1781 = load i32, i32* %16, align 4
  %1782 = icmp slt i32 %1781, 0
  br i1 %1782, label %1783, label %1785

1783:                                             ; preds = %1744
  %1784 = load i32, i32* %16, align 4
  store i32 %1784, i32* %3, align 4
  br label %2854

1785:                                             ; preds = %1744
  %1786 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %1787 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %1786, i32 0, i32 7
  %1788 = load %struct.gx_path_s*, %struct.gx_path_s** %1787, align 8
  %1789 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %1790 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %1789, i32 0, i32 2
  %1791 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %1790, i32 0, i32 12
  %1792 = load i64, i64* %1791, align 8
  %1793 = load i64, i64* %18, align 8
  %1794 = sub nsw i64 %1792, %1793
  %1795 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %1796 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %1795, i32 0, i32 2
  %1797 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %1796, i32 0, i32 13
  %1798 = load i64, i64* %1797, align 8
  %1799 = load i64, i64* %19, align 8
  %1800 = sub nsw i64 %1798, %1799
  %1801 = call i32 @gx_path_translate(%struct.gx_path_s* %1788, i64 %1794, i64 %1800)
  %1802 = load i32, i32* %16, align 4
  %1803 = icmp slt i32 %1802, 0
  br i1 %1803, label %1804, label %1806

1804:                                             ; preds = %1785
  %1805 = load i32, i32* %16, align 4
  store i32 %1805, i32* %3, align 4
  br label %2854

1806:                                             ; preds = %1785
  %1807 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %4, align 8
  %1808 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %1807, i32 0, i32 4
  %1809 = load i32, i32* %1808, align 4
  %1810 = icmp ne i32 %1809, 0
  br i1 %1810, label %1811, label %1814

1811:                                             ; preds = %1806
  %1812 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %1813 = call i32 (%struct.gs_state_s*, ...) bitcast (i32 (%struct.gs_state_s*)* @gs_stroke to i32 (%struct.gs_state_s*, ...)*)(%struct.gs_state_s* %1812)
  br label %1817

1814:                                             ; preds = %1806
  %1815 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %1816 = call i32 (%struct.gs_state_s*, i64, ...) bitcast (i32 (%struct.gs_state_s*, i64)* @gs_fill_trim to i32 (%struct.gs_state_s*, i64, ...)*)(%struct.gs_state_s* %1815, i64 819)
  br label %1817

1817:                                             ; preds = %1814, %1811
  %1818 = phi i32 [ %1813, %1811 ], [ %1816, %1814 ]
  store i32 %1818, i32* %16, align 4
  br label %1819

1819:                                             ; preds = %1817, %1686
  %1820 = load i32, i32* %16, align 4
  store i32 %1820, i32* %3, align 4
  br label %2854

1821:                                             ; preds = %144
  %1822 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1823 = load i32, i32* %1822, align 4
  %1824 = icmp sge i32 %1823, 0
  br i1 %1824, label %1825, label %1841

1825:                                             ; preds = %1821
  %1826 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %1827 = load i64, i64* %1826, align 16
  %1828 = ashr i64 %1827, 12
  %1829 = trunc i64 %1828 to i32
  %1830 = sext i32 %1829 to i64
  %1831 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 0
  %1832 = load i64, i64* %1831, align 8
  %1833 = mul nsw i64 %1830, %1832
  %1834 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %1835 = load i64, i64* %1834, align 8
  %1836 = add nsw i64 %1833, %1835
  %1837 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1838 = load i32, i32* %1837, align 4
  %1839 = zext i32 %1838 to i64
  %1840 = ashr i64 %1836, %1839
  br label %1855

1841:                                             ; preds = %1821
  %1842 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %1843 = load i64, i64* %1842, align 16
  %1844 = ashr i64 %1843, 12
  %1845 = trunc i64 %1844 to i32
  %1846 = sext i32 %1845 to i64
  %1847 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 0
  %1848 = load i64, i64* %1847, align 8
  %1849 = mul nsw i64 %1846, %1848
  %1850 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1851 = load i32, i32* %1850, align 4
  %1852 = sub nsw i32 0, %1851
  %1853 = zext i32 %1852 to i64
  %1854 = shl i64 %1849, %1853
  br label %1855

1855:                                             ; preds = %1841, %1825
  %1856 = phi i64 [ %1840, %1825 ], [ %1854, %1841 ]
  %1857 = load i64, i64* %20, align 8
  %1858 = add nsw i64 %1857, %1856
  store i64 %1858, i64* %20, align 8
  %1859 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1860 = load i32, i32* %1859, align 4
  %1861 = icmp sge i32 %1860, 0
  br i1 %1861, label %1862, label %1878

1862:                                             ; preds = %1855
  %1863 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 1
  %1864 = load i64, i64* %1863, align 8
  %1865 = ashr i64 %1864, 12
  %1866 = trunc i64 %1865 to i32
  %1867 = sext i32 %1866 to i64
  %1868 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 3
  %1869 = load i64, i64* %1868, align 8
  %1870 = mul nsw i64 %1867, %1869
  %1871 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %1872 = load i64, i64* %1871, align 8
  %1873 = add nsw i64 %1870, %1872
  %1874 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1875 = load i32, i32* %1874, align 4
  %1876 = zext i32 %1875 to i64
  %1877 = ashr i64 %1873, %1876
  br label %1892

1878:                                             ; preds = %1855
  %1879 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 1
  %1880 = load i64, i64* %1879, align 8
  %1881 = ashr i64 %1880, 12
  %1882 = trunc i64 %1881 to i32
  %1883 = sext i32 %1882 to i64
  %1884 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 3
  %1885 = load i64, i64* %1884, align 8
  %1886 = mul nsw i64 %1883, %1885
  %1887 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1888 = load i32, i32* %1887, align 4
  %1889 = sub nsw i32 0, %1888
  %1890 = zext i32 %1889 to i64
  %1891 = shl i64 %1886, %1890
  br label %1892

1892:                                             ; preds = %1878, %1862
  %1893 = phi i64 [ %1877, %1862 ], [ %1891, %1878 ]
  %1894 = load i64, i64* %21, align 8
  %1895 = add nsw i64 %1894, %1893
  store i64 %1895, i64* %21, align 8
  %1896 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 4
  %1897 = load i32, i32* %1896, align 8
  %1898 = icmp ne i32 %1897, 0
  br i1 %1898, label %1899, label %1974

1899:                                             ; preds = %1892
  %1900 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1901 = load i32, i32* %1900, align 4
  %1902 = icmp sge i32 %1901, 0
  br i1 %1902, label %1903, label %1919

1903:                                             ; preds = %1899
  %1904 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %1905 = load i64, i64* %1904, align 16
  %1906 = ashr i64 %1905, 12
  %1907 = trunc i64 %1906 to i32
  %1908 = sext i32 %1907 to i64
  %1909 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 1
  %1910 = load i64, i64* %1909, align 8
  %1911 = mul nsw i64 %1908, %1910
  %1912 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %1913 = load i64, i64* %1912, align 8
  %1914 = add nsw i64 %1911, %1913
  %1915 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1916 = load i32, i32* %1915, align 4
  %1917 = zext i32 %1916 to i64
  %1918 = ashr i64 %1914, %1917
  br label %1933

1919:                                             ; preds = %1899
  %1920 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %1921 = load i64, i64* %1920, align 16
  %1922 = ashr i64 %1921, 12
  %1923 = trunc i64 %1922 to i32
  %1924 = sext i32 %1923 to i64
  %1925 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 1
  %1926 = load i64, i64* %1925, align 8
  %1927 = mul nsw i64 %1924, %1926
  %1928 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1929 = load i32, i32* %1928, align 4
  %1930 = sub nsw i32 0, %1929
  %1931 = zext i32 %1930 to i64
  %1932 = shl i64 %1927, %1931
  br label %1933

1933:                                             ; preds = %1919, %1903
  %1934 = phi i64 [ %1918, %1903 ], [ %1932, %1919 ]
  %1935 = load i64, i64* %21, align 8
  %1936 = add nsw i64 %1935, %1934
  store i64 %1936, i64* %21, align 8
  %1937 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1938 = load i32, i32* %1937, align 4
  %1939 = icmp sge i32 %1938, 0
  br i1 %1939, label %1940, label %1956

1940:                                             ; preds = %1933
  %1941 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 1
  %1942 = load i64, i64* %1941, align 8
  %1943 = ashr i64 %1942, 12
  %1944 = trunc i64 %1943 to i32
  %1945 = sext i32 %1944 to i64
  %1946 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 2
  %1947 = load i64, i64* %1946, align 8
  %1948 = mul nsw i64 %1945, %1947
  %1949 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %1950 = load i64, i64* %1949, align 8
  %1951 = add nsw i64 %1948, %1950
  %1952 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1953 = load i32, i32* %1952, align 4
  %1954 = zext i32 %1953 to i64
  %1955 = ashr i64 %1951, %1954
  br label %1970

1956:                                             ; preds = %1933
  %1957 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 1
  %1958 = load i64, i64* %1957, align 8
  %1959 = ashr i64 %1958, 12
  %1960 = trunc i64 %1959 to i32
  %1961 = sext i32 %1960 to i64
  %1962 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 2
  %1963 = load i64, i64* %1962, align 8
  %1964 = mul nsw i64 %1961, %1963
  %1965 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1966 = load i32, i32* %1965, align 4
  %1967 = sub nsw i32 0, %1966
  %1968 = zext i32 %1967 to i64
  %1969 = shl i64 %1964, %1968
  br label %1970

1970:                                             ; preds = %1956, %1940
  %1971 = phi i64 [ %1955, %1940 ], [ %1969, %1956 ]
  %1972 = load i64, i64* %20, align 8
  %1973 = add nsw i64 %1972, %1971
  store i64 %1973, i64* %20, align 8
  br label %1974

1974:                                             ; preds = %1970, %1892
  br label %1975

1975:                                             ; preds = %2059, %1974, %1058, %249
  %1976 = load %struct.gx_path_s*, %struct.gx_path_s** %7, align 8
  %1977 = load i64, i64* %20, align 8
  %1978 = load i64, i64* %21, align 8
  %1979 = call i32 @gx_path_add_point(%struct.gx_path_s* %1976, i64 %1977, i64 %1978)
  store i32 %1979, i32* %16, align 4
  br label %409

1980:                                             ; preds = %144
  %1981 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1982 = load i32, i32* %1981, align 4
  %1983 = icmp sge i32 %1982, 0
  br i1 %1983, label %1984, label %2000

1984:                                             ; preds = %1980
  %1985 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %1986 = load i64, i64* %1985, align 16
  %1987 = ashr i64 %1986, 12
  %1988 = trunc i64 %1987 to i32
  %1989 = sext i32 %1988 to i64
  %1990 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 0
  %1991 = load i64, i64* %1990, align 8
  %1992 = mul nsw i64 %1989, %1991
  %1993 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %1994 = load i64, i64* %1993, align 8
  %1995 = add nsw i64 %1992, %1994
  %1996 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %1997 = load i32, i32* %1996, align 4
  %1998 = zext i32 %1997 to i64
  %1999 = ashr i64 %1995, %1998
  br label %2014

2000:                                             ; preds = %1980
  %2001 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %2002 = load i64, i64* %2001, align 16
  %2003 = ashr i64 %2002, 12
  %2004 = trunc i64 %2003 to i32
  %2005 = sext i32 %2004 to i64
  %2006 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 0
  %2007 = load i64, i64* %2006, align 8
  %2008 = mul nsw i64 %2005, %2007
  %2009 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2010 = load i32, i32* %2009, align 4
  %2011 = sub nsw i32 0, %2010
  %2012 = zext i32 %2011 to i64
  %2013 = shl i64 %2008, %2012
  br label %2014

2014:                                             ; preds = %2000, %1984
  %2015 = phi i64 [ %1999, %1984 ], [ %2013, %2000 ]
  %2016 = load i64, i64* %20, align 8
  %2017 = add nsw i64 %2016, %2015
  store i64 %2017, i64* %20, align 8
  %2018 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 4
  %2019 = load i32, i32* %2018, align 8
  %2020 = icmp ne i32 %2019, 0
  br i1 %2020, label %2021, label %2059

2021:                                             ; preds = %2014
  %2022 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2023 = load i32, i32* %2022, align 4
  %2024 = icmp sge i32 %2023, 0
  br i1 %2024, label %2025, label %2041

2025:                                             ; preds = %2021
  %2026 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %2027 = load i64, i64* %2026, align 16
  %2028 = ashr i64 %2027, 12
  %2029 = trunc i64 %2028 to i32
  %2030 = sext i32 %2029 to i64
  %2031 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 1
  %2032 = load i64, i64* %2031, align 8
  %2033 = mul nsw i64 %2030, %2032
  %2034 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %2035 = load i64, i64* %2034, align 8
  %2036 = add nsw i64 %2033, %2035
  %2037 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2038 = load i32, i32* %2037, align 4
  %2039 = zext i32 %2038 to i64
  %2040 = ashr i64 %2036, %2039
  br label %2055

2041:                                             ; preds = %2021
  %2042 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %2043 = load i64, i64* %2042, align 16
  %2044 = ashr i64 %2043, 12
  %2045 = trunc i64 %2044 to i32
  %2046 = sext i32 %2045 to i64
  %2047 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 1
  %2048 = load i64, i64* %2047, align 8
  %2049 = mul nsw i64 %2046, %2048
  %2050 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2051 = load i32, i32* %2050, align 4
  %2052 = sub nsw i32 0, %2051
  %2053 = zext i32 %2052 to i64
  %2054 = shl i64 %2049, %2053
  br label %2055

2055:                                             ; preds = %2041, %2025
  %2056 = phi i64 [ %2040, %2025 ], [ %2054, %2041 ]
  %2057 = load i64, i64* %21, align 8
  %2058 = add nsw i64 %2057, %2056
  store i64 %2058, i64* %21, align 8
  br label %2059

2059:                                             ; preds = %2055, %2014
  br label %1975

2060:                                             ; preds = %144
  %2061 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2062 = load i32, i32* %2061, align 4
  %2063 = icmp sge i32 %2062, 0
  br i1 %2063, label %2064, label %2080

2064:                                             ; preds = %2060
  %2065 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %2066 = load i64, i64* %2065, align 16
  %2067 = ashr i64 %2066, 12
  %2068 = trunc i64 %2067 to i32
  %2069 = sext i32 %2068 to i64
  %2070 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 3
  %2071 = load i64, i64* %2070, align 8
  %2072 = mul nsw i64 %2069, %2071
  %2073 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %2074 = load i64, i64* %2073, align 8
  %2075 = add nsw i64 %2072, %2074
  %2076 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2077 = load i32, i32* %2076, align 4
  %2078 = zext i32 %2077 to i64
  %2079 = ashr i64 %2075, %2078
  br label %2094

2080:                                             ; preds = %2060
  %2081 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %2082 = load i64, i64* %2081, align 16
  %2083 = ashr i64 %2082, 12
  %2084 = trunc i64 %2083 to i32
  %2085 = sext i32 %2084 to i64
  %2086 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 3
  %2087 = load i64, i64* %2086, align 8
  %2088 = mul nsw i64 %2085, %2087
  %2089 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2090 = load i32, i32* %2089, align 4
  %2091 = sub nsw i32 0, %2090
  %2092 = zext i32 %2091 to i64
  %2093 = shl i64 %2088, %2092
  br label %2094

2094:                                             ; preds = %2080, %2064
  %2095 = phi i64 [ %2079, %2064 ], [ %2093, %2080 ]
  %2096 = load i64, i64* %21, align 8
  %2097 = add nsw i64 %2096, %2095
  store i64 %2097, i64* %21, align 8
  %2098 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 4
  %2099 = load i32, i32* %2098, align 8
  %2100 = icmp ne i32 %2099, 0
  br i1 %2100, label %2101, label %2139

2101:                                             ; preds = %2094
  %2102 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2103 = load i32, i32* %2102, align 4
  %2104 = icmp sge i32 %2103, 0
  br i1 %2104, label %2105, label %2121

2105:                                             ; preds = %2101
  %2106 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %2107 = load i64, i64* %2106, align 16
  %2108 = ashr i64 %2107, 12
  %2109 = trunc i64 %2108 to i32
  %2110 = sext i32 %2109 to i64
  %2111 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 2
  %2112 = load i64, i64* %2111, align 8
  %2113 = mul nsw i64 %2110, %2112
  %2114 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %2115 = load i64, i64* %2114, align 8
  %2116 = add nsw i64 %2113, %2115
  %2117 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2118 = load i32, i32* %2117, align 4
  %2119 = zext i32 %2118 to i64
  %2120 = ashr i64 %2116, %2119
  br label %2135

2121:                                             ; preds = %2101
  %2122 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %2123 = load i64, i64* %2122, align 16
  %2124 = ashr i64 %2123, 12
  %2125 = trunc i64 %2124 to i32
  %2126 = sext i32 %2125 to i64
  %2127 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 2
  %2128 = load i64, i64* %2127, align 8
  %2129 = mul nsw i64 %2126, %2128
  %2130 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2131 = load i32, i32* %2130, align 4
  %2132 = sub nsw i32 0, %2131
  %2133 = zext i32 %2132 to i64
  %2134 = shl i64 %2129, %2133
  br label %2135

2135:                                             ; preds = %2121, %2105
  %2136 = phi i64 [ %2120, %2105 ], [ %2134, %2121 ]
  %2137 = load i64, i64* %20, align 8
  %2138 = add nsw i64 %2137, %2136
  store i64 %2138, i64* %20, align 8
  br label %2139

2139:                                             ; preds = %2135, %2094
  %2140 = load i64, i64* %20, align 8
  store i64 %2140, i64* %22, align 8
  %2141 = load i64, i64* %21, align 8
  store i64 %2141, i64* %23, align 8
  %2142 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2143 = load i32, i32* %2142, align 4
  %2144 = icmp sge i32 %2143, 0
  br i1 %2144, label %2145, label %2161

2145:                                             ; preds = %2139
  %2146 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 1
  %2147 = load i64, i64* %2146, align 8
  %2148 = ashr i64 %2147, 12
  %2149 = trunc i64 %2148 to i32
  %2150 = sext i32 %2149 to i64
  %2151 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 0
  %2152 = load i64, i64* %2151, align 8
  %2153 = mul nsw i64 %2150, %2152
  %2154 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %2155 = load i64, i64* %2154, align 8
  %2156 = add nsw i64 %2153, %2155
  %2157 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2158 = load i32, i32* %2157, align 4
  %2159 = zext i32 %2158 to i64
  %2160 = ashr i64 %2156, %2159
  br label %2175

2161:                                             ; preds = %2139
  %2162 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 1
  %2163 = load i64, i64* %2162, align 8
  %2164 = ashr i64 %2163, 12
  %2165 = trunc i64 %2164 to i32
  %2166 = sext i32 %2165 to i64
  %2167 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 0
  %2168 = load i64, i64* %2167, align 8
  %2169 = mul nsw i64 %2166, %2168
  %2170 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2171 = load i32, i32* %2170, align 4
  %2172 = sub nsw i32 0, %2171
  %2173 = zext i32 %2172 to i64
  %2174 = shl i64 %2169, %2173
  br label %2175

2175:                                             ; preds = %2161, %2145
  %2176 = phi i64 [ %2160, %2145 ], [ %2174, %2161 ]
  %2177 = load i64, i64* %20, align 8
  %2178 = add nsw i64 %2177, %2176
  store i64 %2178, i64* %20, align 8
  %2179 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2180 = load i32, i32* %2179, align 4
  %2181 = icmp sge i32 %2180, 0
  br i1 %2181, label %2182, label %2198

2182:                                             ; preds = %2175
  %2183 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 2
  %2184 = load i64, i64* %2183, align 16
  %2185 = ashr i64 %2184, 12
  %2186 = trunc i64 %2185 to i32
  %2187 = sext i32 %2186 to i64
  %2188 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 3
  %2189 = load i64, i64* %2188, align 8
  %2190 = mul nsw i64 %2187, %2189
  %2191 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %2192 = load i64, i64* %2191, align 8
  %2193 = add nsw i64 %2190, %2192
  %2194 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2195 = load i32, i32* %2194, align 4
  %2196 = zext i32 %2195 to i64
  %2197 = ashr i64 %2193, %2196
  br label %2212

2198:                                             ; preds = %2175
  %2199 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 2
  %2200 = load i64, i64* %2199, align 16
  %2201 = ashr i64 %2200, 12
  %2202 = trunc i64 %2201 to i32
  %2203 = sext i32 %2202 to i64
  %2204 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 3
  %2205 = load i64, i64* %2204, align 8
  %2206 = mul nsw i64 %2203, %2205
  %2207 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2208 = load i32, i32* %2207, align 4
  %2209 = sub nsw i32 0, %2208
  %2210 = zext i32 %2209 to i64
  %2211 = shl i64 %2206, %2210
  br label %2212

2212:                                             ; preds = %2198, %2182
  %2213 = phi i64 [ %2197, %2182 ], [ %2211, %2198 ]
  %2214 = load i64, i64* %21, align 8
  %2215 = add nsw i64 %2214, %2213
  store i64 %2215, i64* %21, align 8
  %2216 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 4
  %2217 = load i32, i32* %2216, align 8
  %2218 = icmp ne i32 %2217, 0
  br i1 %2218, label %2219, label %2294

2219:                                             ; preds = %2212
  %2220 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2221 = load i32, i32* %2220, align 4
  %2222 = icmp sge i32 %2221, 0
  br i1 %2222, label %2223, label %2239

2223:                                             ; preds = %2219
  %2224 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 1
  %2225 = load i64, i64* %2224, align 8
  %2226 = ashr i64 %2225, 12
  %2227 = trunc i64 %2226 to i32
  %2228 = sext i32 %2227 to i64
  %2229 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 1
  %2230 = load i64, i64* %2229, align 8
  %2231 = mul nsw i64 %2228, %2230
  %2232 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %2233 = load i64, i64* %2232, align 8
  %2234 = add nsw i64 %2231, %2233
  %2235 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2236 = load i32, i32* %2235, align 4
  %2237 = zext i32 %2236 to i64
  %2238 = ashr i64 %2234, %2237
  br label %2253

2239:                                             ; preds = %2219
  %2240 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 1
  %2241 = load i64, i64* %2240, align 8
  %2242 = ashr i64 %2241, 12
  %2243 = trunc i64 %2242 to i32
  %2244 = sext i32 %2243 to i64
  %2245 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 1
  %2246 = load i64, i64* %2245, align 8
  %2247 = mul nsw i64 %2244, %2246
  %2248 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2249 = load i32, i32* %2248, align 4
  %2250 = sub nsw i32 0, %2249
  %2251 = zext i32 %2250 to i64
  %2252 = shl i64 %2247, %2251
  br label %2253

2253:                                             ; preds = %2239, %2223
  %2254 = phi i64 [ %2238, %2223 ], [ %2252, %2239 ]
  %2255 = load i64, i64* %21, align 8
  %2256 = add nsw i64 %2255, %2254
  store i64 %2256, i64* %21, align 8
  %2257 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2258 = load i32, i32* %2257, align 4
  %2259 = icmp sge i32 %2258, 0
  br i1 %2259, label %2260, label %2276

2260:                                             ; preds = %2253
  %2261 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 2
  %2262 = load i64, i64* %2261, align 16
  %2263 = ashr i64 %2262, 12
  %2264 = trunc i64 %2263 to i32
  %2265 = sext i32 %2264 to i64
  %2266 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 2
  %2267 = load i64, i64* %2266, align 8
  %2268 = mul nsw i64 %2265, %2267
  %2269 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %2270 = load i64, i64* %2269, align 8
  %2271 = add nsw i64 %2268, %2270
  %2272 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2273 = load i32, i32* %2272, align 4
  %2274 = zext i32 %2273 to i64
  %2275 = ashr i64 %2271, %2274
  br label %2290

2276:                                             ; preds = %2253
  %2277 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 2
  %2278 = load i64, i64* %2277, align 16
  %2279 = ashr i64 %2278, 12
  %2280 = trunc i64 %2279 to i32
  %2281 = sext i32 %2280 to i64
  %2282 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 2
  %2283 = load i64, i64* %2282, align 8
  %2284 = mul nsw i64 %2281, %2283
  %2285 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2286 = load i32, i32* %2285, align 4
  %2287 = sub nsw i32 0, %2286
  %2288 = zext i32 %2287 to i64
  %2289 = shl i64 %2284, %2288
  br label %2290

2290:                                             ; preds = %2276, %2260
  %2291 = phi i64 [ %2275, %2260 ], [ %2289, %2276 ]
  %2292 = load i64, i64* %20, align 8
  %2293 = add nsw i64 %2292, %2291
  store i64 %2293, i64* %20, align 8
  br label %2294

2294:                                             ; preds = %2290, %2212
  %2295 = load i64, i64* %20, align 8
  store i64 %2295, i64* %24, align 8
  %2296 = load i64, i64* %21, align 8
  store i64 %2296, i64* %25, align 8
  %2297 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2298 = load i32, i32* %2297, align 4
  %2299 = icmp sge i32 %2298, 0
  br i1 %2299, label %2300, label %2316

2300:                                             ; preds = %2294
  %2301 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 3
  %2302 = load i64, i64* %2301, align 8
  %2303 = ashr i64 %2302, 12
  %2304 = trunc i64 %2303 to i32
  %2305 = sext i32 %2304 to i64
  %2306 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 0
  %2307 = load i64, i64* %2306, align 8
  %2308 = mul nsw i64 %2305, %2307
  %2309 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %2310 = load i64, i64* %2309, align 8
  %2311 = add nsw i64 %2308, %2310
  %2312 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2313 = load i32, i32* %2312, align 4
  %2314 = zext i32 %2313 to i64
  %2315 = ashr i64 %2311, %2314
  br label %2330

2316:                                             ; preds = %2294
  %2317 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 3
  %2318 = load i64, i64* %2317, align 8
  %2319 = ashr i64 %2318, 12
  %2320 = trunc i64 %2319 to i32
  %2321 = sext i32 %2320 to i64
  %2322 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 0
  %2323 = load i64, i64* %2322, align 8
  %2324 = mul nsw i64 %2321, %2323
  %2325 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2326 = load i32, i32* %2325, align 4
  %2327 = sub nsw i32 0, %2326
  %2328 = zext i32 %2327 to i64
  %2329 = shl i64 %2324, %2328
  br label %2330

2330:                                             ; preds = %2316, %2300
  %2331 = phi i64 [ %2315, %2300 ], [ %2329, %2316 ]
  %2332 = load i64, i64* %20, align 8
  %2333 = add nsw i64 %2332, %2331
  store i64 %2333, i64* %20, align 8
  %2334 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 4
  %2335 = load i32, i32* %2334, align 8
  %2336 = icmp ne i32 %2335, 0
  br i1 %2336, label %2337, label %2375

2337:                                             ; preds = %2330
  %2338 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2339 = load i32, i32* %2338, align 4
  %2340 = icmp sge i32 %2339, 0
  br i1 %2340, label %2341, label %2357

2341:                                             ; preds = %2337
  %2342 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 3
  %2343 = load i64, i64* %2342, align 8
  %2344 = ashr i64 %2343, 12
  %2345 = trunc i64 %2344 to i32
  %2346 = sext i32 %2345 to i64
  %2347 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 1
  %2348 = load i64, i64* %2347, align 8
  %2349 = mul nsw i64 %2346, %2348
  %2350 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %2351 = load i64, i64* %2350, align 8
  %2352 = add nsw i64 %2349, %2351
  %2353 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2354 = load i32, i32* %2353, align 4
  %2355 = zext i32 %2354 to i64
  %2356 = ashr i64 %2352, %2355
  br label %2371

2357:                                             ; preds = %2337
  %2358 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 3
  %2359 = load i64, i64* %2358, align 8
  %2360 = ashr i64 %2359, 12
  %2361 = trunc i64 %2360 to i32
  %2362 = sext i32 %2361 to i64
  %2363 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 1
  %2364 = load i64, i64* %2363, align 8
  %2365 = mul nsw i64 %2362, %2364
  %2366 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2367 = load i32, i32* %2366, align 4
  %2368 = sub nsw i32 0, %2367
  %2369 = zext i32 %2368 to i64
  %2370 = shl i64 %2365, %2369
  br label %2371

2371:                                             ; preds = %2357, %2341
  %2372 = phi i64 [ %2356, %2341 ], [ %2370, %2357 ]
  %2373 = load i64, i64* %21, align 8
  %2374 = add nsw i64 %2373, %2372
  store i64 %2374, i64* %21, align 8
  br label %2375

2375:                                             ; preds = %2371, %2330
  br label %1042

2376:                                             ; preds = %144
  %2377 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2378 = load i32, i32* %2377, align 4
  %2379 = icmp sge i32 %2378, 0
  br i1 %2379, label %2380, label %2396

2380:                                             ; preds = %2376
  %2381 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %2382 = load i64, i64* %2381, align 16
  %2383 = ashr i64 %2382, 12
  %2384 = trunc i64 %2383 to i32
  %2385 = sext i32 %2384 to i64
  %2386 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 0
  %2387 = load i64, i64* %2386, align 8
  %2388 = mul nsw i64 %2385, %2387
  %2389 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %2390 = load i64, i64* %2389, align 8
  %2391 = add nsw i64 %2388, %2390
  %2392 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2393 = load i32, i32* %2392, align 4
  %2394 = zext i32 %2393 to i64
  %2395 = ashr i64 %2391, %2394
  br label %2410

2396:                                             ; preds = %2376
  %2397 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %2398 = load i64, i64* %2397, align 16
  %2399 = ashr i64 %2398, 12
  %2400 = trunc i64 %2399 to i32
  %2401 = sext i32 %2400 to i64
  %2402 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 0
  %2403 = load i64, i64* %2402, align 8
  %2404 = mul nsw i64 %2401, %2403
  %2405 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2406 = load i32, i32* %2405, align 4
  %2407 = sub nsw i32 0, %2406
  %2408 = zext i32 %2407 to i64
  %2409 = shl i64 %2404, %2408
  br label %2410

2410:                                             ; preds = %2396, %2380
  %2411 = phi i64 [ %2395, %2380 ], [ %2409, %2396 ]
  %2412 = load i64, i64* %20, align 8
  %2413 = add nsw i64 %2412, %2411
  store i64 %2413, i64* %20, align 8
  %2414 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 4
  %2415 = load i32, i32* %2414, align 8
  %2416 = icmp ne i32 %2415, 0
  br i1 %2416, label %2417, label %2455

2417:                                             ; preds = %2410
  %2418 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2419 = load i32, i32* %2418, align 4
  %2420 = icmp sge i32 %2419, 0
  br i1 %2420, label %2421, label %2437

2421:                                             ; preds = %2417
  %2422 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %2423 = load i64, i64* %2422, align 16
  %2424 = ashr i64 %2423, 12
  %2425 = trunc i64 %2424 to i32
  %2426 = sext i32 %2425 to i64
  %2427 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 1
  %2428 = load i64, i64* %2427, align 8
  %2429 = mul nsw i64 %2426, %2428
  %2430 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %2431 = load i64, i64* %2430, align 8
  %2432 = add nsw i64 %2429, %2431
  %2433 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2434 = load i32, i32* %2433, align 4
  %2435 = zext i32 %2434 to i64
  %2436 = ashr i64 %2432, %2435
  br label %2451

2437:                                             ; preds = %2417
  %2438 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 0
  %2439 = load i64, i64* %2438, align 16
  %2440 = ashr i64 %2439, 12
  %2441 = trunc i64 %2440 to i32
  %2442 = sext i32 %2441 to i64
  %2443 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 1
  %2444 = load i64, i64* %2443, align 8
  %2445 = mul nsw i64 %2442, %2444
  %2446 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2447 = load i32, i32* %2446, align 4
  %2448 = sub nsw i32 0, %2447
  %2449 = zext i32 %2448 to i64
  %2450 = shl i64 %2445, %2449
  br label %2451

2451:                                             ; preds = %2437, %2421
  %2452 = phi i64 [ %2436, %2421 ], [ %2450, %2437 ]
  %2453 = load i64, i64* %21, align 8
  %2454 = add nsw i64 %2453, %2452
  store i64 %2454, i64* %21, align 8
  br label %2455

2455:                                             ; preds = %2451, %2410
  %2456 = load i64, i64* %20, align 8
  store i64 %2456, i64* %22, align 8
  %2457 = load i64, i64* %21, align 8
  store i64 %2457, i64* %23, align 8
  %2458 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2459 = load i32, i32* %2458, align 4
  %2460 = icmp sge i32 %2459, 0
  br i1 %2460, label %2461, label %2477

2461:                                             ; preds = %2455
  %2462 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 1
  %2463 = load i64, i64* %2462, align 8
  %2464 = ashr i64 %2463, 12
  %2465 = trunc i64 %2464 to i32
  %2466 = sext i32 %2465 to i64
  %2467 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 0
  %2468 = load i64, i64* %2467, align 8
  %2469 = mul nsw i64 %2466, %2468
  %2470 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %2471 = load i64, i64* %2470, align 8
  %2472 = add nsw i64 %2469, %2471
  %2473 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2474 = load i32, i32* %2473, align 4
  %2475 = zext i32 %2474 to i64
  %2476 = ashr i64 %2472, %2475
  br label %2491

2477:                                             ; preds = %2455
  %2478 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 1
  %2479 = load i64, i64* %2478, align 8
  %2480 = ashr i64 %2479, 12
  %2481 = trunc i64 %2480 to i32
  %2482 = sext i32 %2481 to i64
  %2483 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 0
  %2484 = load i64, i64* %2483, align 8
  %2485 = mul nsw i64 %2482, %2484
  %2486 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2487 = load i32, i32* %2486, align 4
  %2488 = sub nsw i32 0, %2487
  %2489 = zext i32 %2488 to i64
  %2490 = shl i64 %2485, %2489
  br label %2491

2491:                                             ; preds = %2477, %2461
  %2492 = phi i64 [ %2476, %2461 ], [ %2490, %2477 ]
  %2493 = load i64, i64* %20, align 8
  %2494 = add nsw i64 %2493, %2492
  store i64 %2494, i64* %20, align 8
  %2495 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2496 = load i32, i32* %2495, align 4
  %2497 = icmp sge i32 %2496, 0
  br i1 %2497, label %2498, label %2514

2498:                                             ; preds = %2491
  %2499 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 2
  %2500 = load i64, i64* %2499, align 16
  %2501 = ashr i64 %2500, 12
  %2502 = trunc i64 %2501 to i32
  %2503 = sext i32 %2502 to i64
  %2504 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 3
  %2505 = load i64, i64* %2504, align 8
  %2506 = mul nsw i64 %2503, %2505
  %2507 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %2508 = load i64, i64* %2507, align 8
  %2509 = add nsw i64 %2506, %2508
  %2510 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2511 = load i32, i32* %2510, align 4
  %2512 = zext i32 %2511 to i64
  %2513 = ashr i64 %2509, %2512
  br label %2528

2514:                                             ; preds = %2491
  %2515 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 2
  %2516 = load i64, i64* %2515, align 16
  %2517 = ashr i64 %2516, 12
  %2518 = trunc i64 %2517 to i32
  %2519 = sext i32 %2518 to i64
  %2520 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 3
  %2521 = load i64, i64* %2520, align 8
  %2522 = mul nsw i64 %2519, %2521
  %2523 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2524 = load i32, i32* %2523, align 4
  %2525 = sub nsw i32 0, %2524
  %2526 = zext i32 %2525 to i64
  %2527 = shl i64 %2522, %2526
  br label %2528

2528:                                             ; preds = %2514, %2498
  %2529 = phi i64 [ %2513, %2498 ], [ %2527, %2514 ]
  %2530 = load i64, i64* %21, align 8
  %2531 = add nsw i64 %2530, %2529
  store i64 %2531, i64* %21, align 8
  %2532 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 4
  %2533 = load i32, i32* %2532, align 8
  %2534 = icmp ne i32 %2533, 0
  br i1 %2534, label %2535, label %2610

2535:                                             ; preds = %2528
  %2536 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2537 = load i32, i32* %2536, align 4
  %2538 = icmp sge i32 %2537, 0
  br i1 %2538, label %2539, label %2555

2539:                                             ; preds = %2535
  %2540 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 1
  %2541 = load i64, i64* %2540, align 8
  %2542 = ashr i64 %2541, 12
  %2543 = trunc i64 %2542 to i32
  %2544 = sext i32 %2543 to i64
  %2545 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 1
  %2546 = load i64, i64* %2545, align 8
  %2547 = mul nsw i64 %2544, %2546
  %2548 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %2549 = load i64, i64* %2548, align 8
  %2550 = add nsw i64 %2547, %2549
  %2551 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2552 = load i32, i32* %2551, align 4
  %2553 = zext i32 %2552 to i64
  %2554 = ashr i64 %2550, %2553
  br label %2569

2555:                                             ; preds = %2535
  %2556 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 1
  %2557 = load i64, i64* %2556, align 8
  %2558 = ashr i64 %2557, 12
  %2559 = trunc i64 %2558 to i32
  %2560 = sext i32 %2559 to i64
  %2561 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 1
  %2562 = load i64, i64* %2561, align 8
  %2563 = mul nsw i64 %2560, %2562
  %2564 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2565 = load i32, i32* %2564, align 4
  %2566 = sub nsw i32 0, %2565
  %2567 = zext i32 %2566 to i64
  %2568 = shl i64 %2563, %2567
  br label %2569

2569:                                             ; preds = %2555, %2539
  %2570 = phi i64 [ %2554, %2539 ], [ %2568, %2555 ]
  %2571 = load i64, i64* %21, align 8
  %2572 = add nsw i64 %2571, %2570
  store i64 %2572, i64* %21, align 8
  %2573 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2574 = load i32, i32* %2573, align 4
  %2575 = icmp sge i32 %2574, 0
  br i1 %2575, label %2576, label %2592

2576:                                             ; preds = %2569
  %2577 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 2
  %2578 = load i64, i64* %2577, align 16
  %2579 = ashr i64 %2578, 12
  %2580 = trunc i64 %2579 to i32
  %2581 = sext i32 %2580 to i64
  %2582 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 2
  %2583 = load i64, i64* %2582, align 8
  %2584 = mul nsw i64 %2581, %2583
  %2585 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %2586 = load i64, i64* %2585, align 8
  %2587 = add nsw i64 %2584, %2586
  %2588 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2589 = load i32, i32* %2588, align 4
  %2590 = zext i32 %2589 to i64
  %2591 = ashr i64 %2587, %2590
  br label %2606

2592:                                             ; preds = %2569
  %2593 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 2
  %2594 = load i64, i64* %2593, align 16
  %2595 = ashr i64 %2594, 12
  %2596 = trunc i64 %2595 to i32
  %2597 = sext i32 %2596 to i64
  %2598 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 2
  %2599 = load i64, i64* %2598, align 8
  %2600 = mul nsw i64 %2597, %2599
  %2601 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2602 = load i32, i32* %2601, align 4
  %2603 = sub nsw i32 0, %2602
  %2604 = zext i32 %2603 to i64
  %2605 = shl i64 %2600, %2604
  br label %2606

2606:                                             ; preds = %2592, %2576
  %2607 = phi i64 [ %2591, %2576 ], [ %2605, %2592 ]
  %2608 = load i64, i64* %20, align 8
  %2609 = add nsw i64 %2608, %2607
  store i64 %2609, i64* %20, align 8
  br label %2610

2610:                                             ; preds = %2606, %2528
  %2611 = load i64, i64* %20, align 8
  store i64 %2611, i64* %24, align 8
  %2612 = load i64, i64* %21, align 8
  store i64 %2612, i64* %25, align 8
  %2613 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2614 = load i32, i32* %2613, align 4
  %2615 = icmp sge i32 %2614, 0
  br i1 %2615, label %2616, label %2632

2616:                                             ; preds = %2610
  %2617 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 3
  %2618 = load i64, i64* %2617, align 8
  %2619 = ashr i64 %2618, 12
  %2620 = trunc i64 %2619 to i32
  %2621 = sext i32 %2620 to i64
  %2622 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 3
  %2623 = load i64, i64* %2622, align 8
  %2624 = mul nsw i64 %2621, %2623
  %2625 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %2626 = load i64, i64* %2625, align 8
  %2627 = add nsw i64 %2624, %2626
  %2628 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2629 = load i32, i32* %2628, align 4
  %2630 = zext i32 %2629 to i64
  %2631 = ashr i64 %2627, %2630
  br label %2646

2632:                                             ; preds = %2610
  %2633 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 3
  %2634 = load i64, i64* %2633, align 8
  %2635 = ashr i64 %2634, 12
  %2636 = trunc i64 %2635 to i32
  %2637 = sext i32 %2636 to i64
  %2638 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 3
  %2639 = load i64, i64* %2638, align 8
  %2640 = mul nsw i64 %2637, %2639
  %2641 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2642 = load i32, i32* %2641, align 4
  %2643 = sub nsw i32 0, %2642
  %2644 = zext i32 %2643 to i64
  %2645 = shl i64 %2640, %2644
  br label %2646

2646:                                             ; preds = %2632, %2616
  %2647 = phi i64 [ %2631, %2616 ], [ %2645, %2632 ]
  %2648 = load i64, i64* %21, align 8
  %2649 = add nsw i64 %2648, %2647
  store i64 %2649, i64* %21, align 8
  %2650 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 4
  %2651 = load i32, i32* %2650, align 8
  %2652 = icmp ne i32 %2651, 0
  br i1 %2652, label %2653, label %2691

2653:                                             ; preds = %2646
  %2654 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2655 = load i32, i32* %2654, align 4
  %2656 = icmp sge i32 %2655, 0
  br i1 %2656, label %2657, label %2673

2657:                                             ; preds = %2653
  %2658 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 3
  %2659 = load i64, i64* %2658, align 8
  %2660 = ashr i64 %2659, 12
  %2661 = trunc i64 %2660 to i32
  %2662 = sext i32 %2661 to i64
  %2663 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 2
  %2664 = load i64, i64* %2663, align 8
  %2665 = mul nsw i64 %2662, %2664
  %2666 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 6
  %2667 = load i64, i64* %2666, align 8
  %2668 = add nsw i64 %2665, %2667
  %2669 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2670 = load i32, i32* %2669, align 4
  %2671 = zext i32 %2670 to i64
  %2672 = ashr i64 %2668, %2671
  br label %2687

2673:                                             ; preds = %2653
  %2674 = getelementptr inbounds [24 x i64], [24 x i64]* %9, i64 0, i64 3
  %2675 = load i64, i64* %2674, align 8
  %2676 = ashr i64 %2675, 12
  %2677 = trunc i64 %2676 to i32
  %2678 = sext i32 %2677 to i64
  %2679 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 2
  %2680 = load i64, i64* %2679, align 8
  %2681 = mul nsw i64 %2678, %2680
  %2682 = getelementptr inbounds %struct.fixed_coeff, %struct.fixed_coeff* %17, i32 0, i32 5
  %2683 = load i32, i32* %2682, align 4
  %2684 = sub nsw i32 0, %2683
  %2685 = zext i32 %2684 to i64
  %2686 = shl i64 %2681, %2685
  br label %2687

2687:                                             ; preds = %2673, %2657
  %2688 = phi i64 [ %2672, %2657 ], [ %2686, %2673 ]
  %2689 = load i64, i64* %20, align 8
  %2690 = add nsw i64 %2689, %2688
  store i64 %2690, i64* %20, align 8
  br label %2691

2691:                                             ; preds = %2687, %2646
  br label %1042

2692:                                             ; preds = %144, %144, %144, %144, %144, %144, %144, %144, %144, %144, %144, %144, %144, %144, %144
  store i32 -10, i32* %3, align 4
  br label %2854

2693:                                             ; preds = %144
  %2694 = load i64*, i64** %10, align 8
  %2695 = getelementptr inbounds i64, i64* %2694, i32 1
  store i64* %2695, i64** %10, align 8
  %2696 = load i32, i32* %15, align 4
  %2697 = icmp sle i32 %2696, 246
  br i1 %2697, label %2698, label %2706

2698:                                             ; preds = %2693
  %2699 = load i32, i32* %15, align 4
  %2700 = trunc i32 %2699 to i8
  %2701 = zext i8 %2700 to i32
  %2702 = sub nsw i32 %2701, 139
  %2703 = sext i32 %2702 to i64
  %2704 = shl i64 %2703, 12
  %2705 = load i64*, i64** %10, align 8
  store i64 %2704, i64* %2705, align 8
  br label %2851

2706:                                             ; preds = %2693
  %2707 = load i8*, i8** %13, align 8
  %2708 = load i8, i8* %2707, align 1
  %2709 = zext i8 %2708 to i32
  %2710 = load i16, i16* %14, align 2
  %2711 = zext i16 %2710 to i32
  %2712 = ashr i32 %2711, 8
  %2713 = xor i32 %2709, %2712
  %2714 = trunc i32 %2713 to i8
  store i8 %2714, i8* %33, align 1
  %2715 = load i8*, i8** %13, align 8
  %2716 = load i8, i8* %2715, align 1
  %2717 = zext i8 %2716 to i32
  %2718 = load i16, i16* %14, align 2
  %2719 = zext i16 %2718 to i32
  %2720 = add nsw i32 %2717, %2719
  %2721 = mul nsw i32 %2720, 52845
  %2722 = add nsw i32 %2721, 22719
  %2723 = trunc i32 %2722 to i16
  store i16 %2723, i16* %14, align 2
  %2724 = load i8*, i8** %13, align 8
  %2725 = getelementptr inbounds i8, i8* %2724, i32 1
  store i8* %2725, i8** %13, align 8
  %2726 = load i32, i32* %15, align 4
  %2727 = icmp sle i32 %2726, 250
  br i1 %2727, label %2728, label %2743

2728:                                             ; preds = %2706
  %2729 = load i32, i32* %15, align 4
  %2730 = sub nsw i32 %2729, 247
  %2731 = trunc i32 %2730 to i8
  %2732 = zext i8 %2731 to i32
  %2733 = shl i32 %2732, 8
  %2734 = load i8, i8* %33, align 1
  %2735 = zext i8 %2734 to i32
  %2736 = trunc i32 %2735 to i8
  %2737 = zext i8 %2736 to i32
  %2738 = add nsw i32 %2733, %2737
  %2739 = add nsw i32 %2738, 108
  %2740 = sext i32 %2739 to i64
  %2741 = shl i64 %2740, 12
  %2742 = load i64*, i64** %10, align 8
  store i64 %2741, i64* %2742, align 8
  br label %2850

2743:                                             ; preds = %2706
  %2744 = load i32, i32* %15, align 4
  %2745 = icmp sle i32 %2744, 254
  br i1 %2745, label %2746, label %2762

2746:                                             ; preds = %2743
  %2747 = load i32, i32* %15, align 4
  %2748 = sub nsw i32 %2747, 251
  %2749 = trunc i32 %2748 to i8
  %2750 = zext i8 %2749 to i32
  %2751 = shl i32 %2750, 8
  %2752 = load i8, i8* %33, align 1
  %2753 = zext i8 %2752 to i32
  %2754 = trunc i32 %2753 to i8
  %2755 = zext i8 %2754 to i32
  %2756 = add nsw i32 %2751, %2755
  %2757 = add nsw i32 %2756, 108
  %2758 = sub nsw i32 0, %2757
  %2759 = sext i32 %2758 to i64
  %2760 = shl i64 %2759, 12
  %2761 = load i64*, i64** %10, align 8
  store i64 %2760, i64* %2761, align 8
  br label %2849

2762:                                             ; preds = %2743
  %2763 = load i8*, i8** %13, align 8
  %2764 = load i8, i8* %2763, align 1
  %2765 = zext i8 %2764 to i32
  %2766 = load i16, i16* %14, align 2
  %2767 = zext i16 %2766 to i32
  %2768 = ashr i32 %2767, 8
  %2769 = xor i32 %2765, %2768
  %2770 = trunc i32 %2769 to i8
  store i8 %2770, i8* %34, align 1
  %2771 = load i8*, i8** %13, align 8
  %2772 = load i8, i8* %2771, align 1
  %2773 = zext i8 %2772 to i32
  %2774 = load i16, i16* %14, align 2
  %2775 = zext i16 %2774 to i32
  %2776 = add nsw i32 %2773, %2775
  %2777 = mul nsw i32 %2776, 52845
  %2778 = add nsw i32 %2777, 22719
  %2779 = trunc i32 %2778 to i16
  store i16 %2779, i16* %14, align 2
  %2780 = load i8*, i8** %13, align 8
  %2781 = getelementptr inbounds i8, i8* %2780, i32 1
  store i8* %2781, i8** %13, align 8
  %2782 = load i8*, i8** %13, align 8
  %2783 = load i8, i8* %2782, align 1
  %2784 = zext i8 %2783 to i32
  %2785 = load i16, i16* %14, align 2
  %2786 = zext i16 %2785 to i32
  %2787 = ashr i32 %2786, 8
  %2788 = xor i32 %2784, %2787
  %2789 = trunc i32 %2788 to i8
  store i8 %2789, i8* %35, align 1
  %2790 = load i8*, i8** %13, align 8
  %2791 = load i8, i8* %2790, align 1
  %2792 = zext i8 %2791 to i32
  %2793 = load i16, i16* %14, align 2
  %2794 = zext i16 %2793 to i32
  %2795 = add nsw i32 %2792, %2794
  %2796 = mul nsw i32 %2795, 52845
  %2797 = add nsw i32 %2796, 22719
  %2798 = trunc i32 %2797 to i16
  store i16 %2798, i16* %14, align 2
  %2799 = load i8*, i8** %13, align 8
  %2800 = getelementptr inbounds i8, i8* %2799, i32 1
  store i8* %2800, i8** %13, align 8
  %2801 = load i8*, i8** %13, align 8
  %2802 = load i8, i8* %2801, align 1
  %2803 = zext i8 %2802 to i32
  %2804 = load i16, i16* %14, align 2
  %2805 = zext i16 %2804 to i32
  %2806 = ashr i32 %2805, 8
  %2807 = xor i32 %2803, %2806
  %2808 = sext i32 %2807 to i64
  store i64 %2808, i64* %36, align 8
  %2809 = load i8*, i8** %13, align 8
  %2810 = load i8, i8* %2809, align 1
  %2811 = zext i8 %2810 to i32
  %2812 = load i16, i16* %14, align 2
  %2813 = zext i16 %2812 to i32
  %2814 = add nsw i32 %2811, %2813
  %2815 = mul nsw i32 %2814, 52845
  %2816 = add nsw i32 %2815, 22719
  %2817 = trunc i32 %2816 to i16
  store i16 %2817, i16* %14, align 2
  %2818 = load i8*, i8** %13, align 8
  %2819 = getelementptr inbounds i8, i8* %2818, i32 1
  store i8* %2819, i8** %13, align 8
  %2820 = load i8, i8* %33, align 1
  %2821 = zext i8 %2820 to i64
  %2822 = shl i64 %2821, 24
  %2823 = load i64, i64* %36, align 8
  %2824 = add nsw i64 %2823, %2822
  store i64 %2824, i64* %36, align 8
  %2825 = load i8, i8* %34, align 1
  %2826 = zext i8 %2825 to i32
  %2827 = shl i32 %2826, 16
  %2828 = zext i32 %2827 to i64
  %2829 = load i64, i64* %36, align 8
  %2830 = add nsw i64 %2829, %2828
  store i64 %2830, i64* %36, align 8
  %2831 = load i8, i8* %35, align 1
  %2832 = zext i8 %2831 to i32
  %2833 = shl i32 %2832, 8
  %2834 = zext i32 %2833 to i64
  %2835 = load i64, i64* %36, align 8
  %2836 = add nsw i64 %2835, %2834
  store i64 %2836, i64* %36, align 8
  %2837 = load i64, i64* %36, align 8
  %2838 = shl i64 %2837, 12
  %2839 = load i64*, i64** %10, align 8
  store i64 %2838, i64* %2839, align 8
  %2840 = load i64, i64* %36, align 8
  %2841 = load i64*, i64** %10, align 8
  %2842 = load i64, i64* %2841, align 8
  %2843 = ashr i64 %2842, 12
  %2844 = trunc i64 %2843 to i32
  %2845 = sext i32 %2844 to i64
  %2846 = icmp ne i64 %2840, %2845
  br i1 %2846, label %2847, label %2848

2847:                                             ; preds = %2762
  store i32 -15, i32* %3, align 4
  br label %2854

2848:                                             ; preds = %2762
  br label %2849

2849:                                             ; preds = %2848, %2746
  br label %2850

2850:                                             ; preds = %2849, %2728
  br label %2851

2851:                                             ; preds = %2850, %2698
  br label %2852

2852:                                             ; preds = %2851, %1433
  br label %2853

2853:                                             ; preds = %2852, %1438, %415, %167, %164
  br label %144

2854:                                             ; preds = %2847, %2692, %1819, %1804, %1783, %1684, %1616, %1437, %1431, %1416, %1291, %1072, %1056, %412
  %2855 = load i32, i32* %3, align 4
  ret i32 %2855
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gs_type1_pop(%struct.gs_type1_state_s* %0, i64* %1) #0 {
  %3 = alloca %struct.gs_type1_state_s*, align 8
  %4 = alloca i64*, align 8
  store %struct.gs_type1_state_s* %0, %struct.gs_type1_state_s** %3, align 8
  store i64* %1, i64** %4, align 8
  %5 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %3, align 8
  %6 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %5, i32 0, i32 6
  %7 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %3, align 8
  %8 = getelementptr inbounds %struct.gs_type1_state_s, %struct.gs_type1_state_s* %7, i32 0, i32 7
  %9 = load i32, i32* %8, align 8
  %10 = add nsw i32 %9, -1
  store i32 %10, i32* %8, align 8
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds [24 x i64], [24 x i64]* %6, i64 0, i64 %11
  %13 = load i64, i64* %12, align 8
  %14 = load i64*, i64** %4, align 8
  store i64 %13, i64* %14, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cached_char_s* @gx_alloc_char_bits(%struct.gs_font_dir_s* %0, %struct.gx_device_memory_s* %1, i16 zeroext %2, i16 zeroext %3) #0 {
  %5 = alloca %struct.cached_char_s*, align 8
  %6 = alloca %struct.gs_font_dir_s*, align 8
  %7 = alloca %struct.gx_device_memory_s*, align 8
  %8 = alloca i16, align 2
  %9 = alloca i16, align 2
  %10 = alloca i64, align 8
  %11 = alloca %struct.cached_char_s*, align 8
  store %struct.gs_font_dir_s* %0, %struct.gs_font_dir_s** %6, align 8
  store %struct.gx_device_memory_s* %1, %struct.gx_device_memory_s** %7, align 8
  store i16 %2, i16* %8, align 2
  store i16 %3, i16* %9, align 2
  %12 = load i16, i16* %8, align 2
  %13 = zext i16 %12 to i32
  %14 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %7, align 8
  %15 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %14, i32 0, i32 3
  store i32 %13, i32* %15, align 8
  %16 = load i16, i16* %9, align 2
  %17 = zext i16 %16 to i32
  %18 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %7, align 8
  %19 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %18, i32 0, i32 4
  store i32 %17, i32* %19, align 4
  %20 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %7, align 8
  %21 = call i64 @gx_device_memory_bitmap_size(%struct.gx_device_memory_s* %20)
  store i64 %21, i64* %10, align 8
  %22 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %7, align 8
  %23 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %22, i32 0, i32 12
  %24 = load i32, i32* %23, align 8
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %38

26:                                               ; preds = %4
  %27 = load i16, i16* %9, align 2
  %28 = zext i16 %27 to i32
  %29 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %6, align 8
  %30 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %29, i32 0, i32 13
  %31 = load i32, i32* %30, align 4
  %32 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %7, align 8
  %33 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %32, i32 0, i32 12
  %34 = load i32, i32* %33, align 8
  %35 = udiv i32 %31, %34
  %36 = icmp ugt i32 %28, %35
  br i1 %36, label %37, label %38

37:                                               ; preds = %26
  store %struct.cached_char_s* null, %struct.cached_char_s** %5, align 8
  br label %142

38:                                               ; preds = %26, %4
  %39 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %6, align 8
  %40 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %39, i32 0, i32 10
  %41 = load i32, i32* %40, align 8
  %42 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %6, align 8
  %43 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %42, i32 0, i32 11
  %44 = load i32, i32* %43, align 4
  %45 = icmp uge i32 %41, %44
  br i1 %45, label %57, label %46

46:                                               ; preds = %38
  %47 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %6, align 8
  %48 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %47, i32 0, i32 7
  %49 = load i32, i32* %48, align 4
  %50 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %6, align 8
  %51 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %50, i32 0, i32 6
  %52 = load i32, i32* %51, align 8
  %53 = sub i32 %49, %52
  %54 = zext i32 %53 to i64
  %55 = load i64, i64* %10, align 8
  %56 = icmp ult i64 %54, %55
  br i1 %56, label %57, label %72

57:                                               ; preds = %46, %38
  %58 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %6, align 8
  %59 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %58, i32 0, i32 11
  %60 = load i32, i32* %59, align 4
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %69, label %62

62:                                               ; preds = %57
  %63 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %6, align 8
  %64 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %63, i32 0, i32 7
  %65 = load i32, i32* %64, align 4
  %66 = zext i32 %65 to i64
  %67 = load i64, i64* %10, align 8
  %68 = icmp ult i64 %66, %67
  br i1 %68, label %69, label %70

69:                                               ; preds = %62, %57
  store %struct.cached_char_s* null, %struct.cached_char_s** %5, align 8
  br label %142

70:                                               ; preds = %62
  %71 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %6, align 8
  call void @zap_cache(%struct.gs_font_dir_s* %71)
  br label %72

72:                                               ; preds = %70, %46
  %73 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %6, align 8
  %74 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %73, i32 0, i32 19
  %75 = load %struct.cached_char_s*, %struct.cached_char_s** %74, align 8
  %76 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %6, align 8
  %77 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %76, i32 0, i32 20
  %78 = load i32, i32* %77, align 8
  %79 = add i32 %78, 1
  store i32 %79, i32* %77, align 8
  %80 = zext i32 %78 to i64
  %81 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %75, i64 %80
  store %struct.cached_char_s* %81, %struct.cached_char_s** %11, align 8
  %82 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %6, align 8
  %83 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %82, i32 0, i32 15
  %84 = load i8*, i8** %83, align 8
  %85 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %6, align 8
  %86 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %85, i32 0, i32 16
  %87 = load i32, i32* %86, align 8
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds i8, i8* %84, i64 %88
  %90 = load %struct.cached_char_s*, %struct.cached_char_s** %11, align 8
  %91 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %90, i32 0, i32 8
  store i8* %89, i8** %91, align 8
  %92 = load i64, i64* %10, align 8
  %93 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %6, align 8
  %94 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %93, i32 0, i32 16
  %95 = load i32, i32* %94, align 8
  %96 = zext i32 %95 to i64
  %97 = add i64 %96, %92
  %98 = trunc i64 %97 to i32
  store i32 %98, i32* %94, align 8
  %99 = load %struct.cached_char_s*, %struct.cached_char_s** %11, align 8
  %100 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %99, i32 0, i32 8
  %101 = load i8*, i8** %100, align 8
  %102 = load i64, i64* %10, align 8
  %103 = trunc i64 %102 to i32
  %104 = zext i32 %103 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %101, i8 0, i64 %104, i1 false)
  %105 = load i16, i16* %8, align 2
  %106 = load %struct.cached_char_s*, %struct.cached_char_s** %11, align 8
  %107 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %106, i32 0, i32 5
  store i16 %105, i16* %107, align 4
  %108 = load i16, i16* %9, align 2
  %109 = load %struct.cached_char_s*, %struct.cached_char_s** %11, align 8
  %110 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %109, i32 0, i32 4
  store i16 %108, i16* %110, align 2
  %111 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %7, align 8
  %112 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %111, i32 0, i32 12
  %113 = load i32, i32* %112, align 8
  %114 = trunc i32 %113 to i16
  %115 = load %struct.cached_char_s*, %struct.cached_char_s** %11, align 8
  %116 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %115, i32 0, i32 3
  store i16 %114, i16* %116, align 8
  %117 = load %struct.cached_char_s*, %struct.cached_char_s** %11, align 8
  %118 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %117, i32 0, i32 8
  %119 = load i8*, i8** %118, align 8
  %120 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %7, align 8
  %121 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %120, i32 0, i32 13
  store i8* %119, i8** %121, align 8
  %122 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %7, align 8
  %123 = getelementptr inbounds %struct.gx_device_memory_s, %struct.gx_device_memory_s* %122, i32 0, i32 1
  %124 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %123, align 8
  %125 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %124, i32 0, i32 0
  %126 = load i32 (%struct.gx_device_s*)*, i32 (%struct.gx_device_s*)** %125, align 8
  %127 = load %struct.gx_device_memory_s*, %struct.gx_device_memory_s** %7, align 8
  %128 = bitcast %struct.gx_device_memory_s* %127 to %struct.gx_device_s*
  %129 = call i32 %126(%struct.gx_device_s* %128)
  %130 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %6, align 8
  %131 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %130, i32 0, i32 10
  %132 = load i32, i32* %131, align 8
  %133 = add i32 %132, 1
  store i32 %133, i32* %131, align 8
  %134 = load i64, i64* %10, align 8
  %135 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %6, align 8
  %136 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %135, i32 0, i32 6
  %137 = load i32, i32* %136, align 8
  %138 = zext i32 %137 to i64
  %139 = add i64 %138, %134
  %140 = trunc i64 %139 to i32
  store i32 %140, i32* %136, align 8
  %141 = load %struct.cached_char_s*, %struct.cached_char_s** %11, align 8
  store %struct.cached_char_s* %141, %struct.cached_char_s** %5, align 8
  br label %142

142:                                              ; preds = %72, %69, %37
  %143 = load %struct.cached_char_s*, %struct.cached_char_s** %5, align 8
  ret %struct.cached_char_s* %143
}

; Function Attrs: noinline nounwind uwtable
define internal void @zap_cache(%struct.gs_font_dir_s* %0) #0 {
  %2 = alloca %struct.gs_font_dir_s*, align 8
  store %struct.gs_font_dir_s* %0, %struct.gs_font_dir_s** %2, align 8
  %3 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %2, align 8
  %4 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %3, i32 0, i32 6
  store i32 0, i32* %4, align 8
  %5 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %2, align 8
  %6 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %5, i32 0, i32 8
  store i32 0, i32* %6, align 8
  %7 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %2, align 8
  %8 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %7, i32 0, i32 10
  store i32 0, i32* %8, align 8
  %9 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %2, align 8
  %10 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %9, i32 0, i32 16
  store i32 0, i32* %10, align 8
  %11 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %2, align 8
  %12 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %11, i32 0, i32 18
  store i32 0, i32* %12, align 8
  %13 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %2, align 8
  %14 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %13, i32 0, i32 20
  store i32 0, i32* %14, align 8
  %15 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %2, align 8
  %16 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %15, i32 0, i32 14
  %17 = getelementptr inbounds [128 x %struct.cached_char_s*], [128 x %struct.cached_char_s*]* %16, i64 0, i64 0
  %18 = bitcast %struct.cached_char_s** %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 1024, i1 false)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gx_unalloc_cached_char(%struct.gs_font_dir_s* %0, %struct.cached_char_s* %1) #0 {
  %3 = alloca %struct.gs_font_dir_s*, align 8
  %4 = alloca %struct.cached_char_s*, align 8
  %5 = alloca i32, align 4
  store %struct.gs_font_dir_s* %0, %struct.gs_font_dir_s** %3, align 8
  store %struct.cached_char_s* %1, %struct.cached_char_s** %4, align 8
  %6 = load %struct.cached_char_s*, %struct.cached_char_s** %4, align 8
  %7 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %6, i32 0, i32 3
  %8 = load i16, i16* %7, align 8
  %9 = zext i16 %8 to i32
  %10 = load %struct.cached_char_s*, %struct.cached_char_s** %4, align 8
  %11 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %10, i32 0, i32 4
  %12 = load i16, i16* %11, align 2
  %13 = zext i16 %12 to i32
  %14 = mul nsw i32 %9, %13
  store i32 %14, i32* %5, align 4
  %15 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %3, align 8
  %16 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %15, i32 0, i32 20
  %17 = load i32, i32* %16, align 8
  %18 = add i32 %17, -1
  store i32 %18, i32* %16, align 8
  %19 = load i32, i32* %5, align 4
  %20 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %3, align 8
  %21 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %20, i32 0, i32 16
  %22 = load i32, i32* %21, align 8
  %23 = sub i32 %22, %19
  store i32 %23, i32* %21, align 8
  %24 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %3, align 8
  %25 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %24, i32 0, i32 10
  %26 = load i32, i32* %25, align 8
  %27 = add i32 %26, -1
  store i32 %27, i32* %25, align 8
  %28 = load i32, i32* %5, align 4
  %29 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %3, align 8
  %30 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %29, i32 0, i32 6
  %31 = load i32, i32* %30, align 8
  %32 = sub i32 %31, %28
  store i32 %32, i32* %30, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cached_fm_pair_s* @gx_lookup_fm_pair(%struct.gs_state_s* %0) #0 {
  %2 = alloca %struct.cached_fm_pair_s*, align 8
  %3 = alloca %struct.gs_state_s*, align 8
  %4 = alloca float, align 4
  %5 = alloca float, align 4
  %6 = alloca float, align 4
  %7 = alloca float, align 4
  %8 = alloca %struct.gs_font_s*, align 8
  %9 = alloca %struct.gs_font_dir_s*, align 8
  %10 = alloca %struct.cached_fm_pair_s*, align 8
  %11 = alloca i32, align 4
  store %struct.gs_state_s* %0, %struct.gs_state_s** %3, align 8
  %12 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %13 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %12, i32 0, i32 17
  %14 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %13, i32 0, i32 0
  %15 = load float, float* %14, align 8
  store float %15, float* %4, align 4
  %16 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %17 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %16, i32 0, i32 17
  %18 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %17, i32 0, i32 2
  %19 = load float, float* %18, align 8
  store float %19, float* %5, align 4
  %20 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %21 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %20, i32 0, i32 17
  %22 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %21, i32 0, i32 4
  %23 = load float, float* %22, align 8
  store float %23, float* %6, align 4
  %24 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %25 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %24, i32 0, i32 17
  %26 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %25, i32 0, i32 6
  %27 = load float, float* %26, align 8
  store float %27, float* %7, align 4
  %28 = load %struct.gs_state_s*, %struct.gs_state_s** %3, align 8
  %29 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %28, i32 0, i32 16
  %30 = load %struct.gs_font_s*, %struct.gs_font_s** %29, align 8
  store %struct.gs_font_s* %30, %struct.gs_font_s** %8, align 8
  %31 = load %struct.gs_font_s*, %struct.gs_font_s** %8, align 8
  %32 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %31, i32 0, i32 3
  %33 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %32, align 8
  store %struct.gs_font_dir_s* %33, %struct.gs_font_dir_s** %9, align 8
  %34 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %9, align 8
  %35 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %34, i32 0, i32 17
  %36 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %35, align 8
  %37 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %9, align 8
  %38 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %37, i32 0, i32 18
  %39 = load i32, i32* %38, align 8
  %40 = zext i32 %39 to i64
  %41 = getelementptr inbounds %struct.cached_fm_pair_s, %struct.cached_fm_pair_s* %36, i64 %40
  store %struct.cached_fm_pair_s* %41, %struct.cached_fm_pair_s** %10, align 8
  %42 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %9, align 8
  %43 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %42, i32 0, i32 8
  %44 = load i32, i32* %43, align 8
  store i32 %44, i32* %11, align 4
  br label %45

45:                                               ; preds = %97, %1
  %46 = load i32, i32* %11, align 4
  %47 = add nsw i32 %46, -1
  store i32 %47, i32* %11, align 4
  %48 = icmp ne i32 %46, 0
  br i1 %48, label %49, label %98

49:                                               ; preds = %45
  %50 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %10, align 8
  %51 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %9, align 8
  %52 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %51, i32 0, i32 17
  %53 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %52, align 8
  %54 = icmp eq %struct.cached_fm_pair_s* %50, %53
  br i1 %54, label %55, label %62

55:                                               ; preds = %49
  %56 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %9, align 8
  %57 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %56, i32 0, i32 9
  %58 = load i32, i32* %57, align 4
  %59 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %10, align 8
  %60 = zext i32 %58 to i64
  %61 = getelementptr inbounds %struct.cached_fm_pair_s, %struct.cached_fm_pair_s* %59, i64 %60
  store %struct.cached_fm_pair_s* %61, %struct.cached_fm_pair_s** %10, align 8
  br label %65

62:                                               ; preds = %49
  %63 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %10, align 8
  %64 = getelementptr inbounds %struct.cached_fm_pair_s, %struct.cached_fm_pair_s* %63, i32 -1
  store %struct.cached_fm_pair_s* %64, %struct.cached_fm_pair_s** %10, align 8
  br label %65

65:                                               ; preds = %62, %55
  %66 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %10, align 8
  %67 = getelementptr inbounds %struct.cached_fm_pair_s, %struct.cached_fm_pair_s* %66, i32 0, i32 0
  %68 = load %struct.gs_font_s*, %struct.gs_font_s** %67, align 8
  %69 = load %struct.gs_font_s*, %struct.gs_font_s** %8, align 8
  %70 = icmp eq %struct.gs_font_s* %68, %69
  br i1 %70, label %71, label %97

71:                                               ; preds = %65
  %72 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %10, align 8
  %73 = getelementptr inbounds %struct.cached_fm_pair_s, %struct.cached_fm_pair_s* %72, i32 0, i32 1
  %74 = load float, float* %73, align 8
  %75 = load float, float* %4, align 4
  %76 = fcmp oeq float %74, %75
  br i1 %76, label %77, label %97

77:                                               ; preds = %71
  %78 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %10, align 8
  %79 = getelementptr inbounds %struct.cached_fm_pair_s, %struct.cached_fm_pair_s* %78, i32 0, i32 2
  %80 = load float, float* %79, align 4
  %81 = load float, float* %5, align 4
  %82 = fcmp oeq float %80, %81
  br i1 %82, label %83, label %97

83:                                               ; preds = %77
  %84 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %10, align 8
  %85 = getelementptr inbounds %struct.cached_fm_pair_s, %struct.cached_fm_pair_s* %84, i32 0, i32 3
  %86 = load float, float* %85, align 8
  %87 = load float, float* %6, align 4
  %88 = fcmp oeq float %86, %87
  br i1 %88, label %89, label %97

89:                                               ; preds = %83
  %90 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %10, align 8
  %91 = getelementptr inbounds %struct.cached_fm_pair_s, %struct.cached_fm_pair_s* %90, i32 0, i32 4
  %92 = load float, float* %91, align 4
  %93 = load float, float* %7, align 4
  %94 = fcmp oeq float %92, %93
  br i1 %94, label %95, label %97

95:                                               ; preds = %89
  %96 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %10, align 8
  store %struct.cached_fm_pair_s* %96, %struct.cached_fm_pair_s** %2, align 8
  br label %151

97:                                               ; preds = %89, %83, %77, %71, %65
  br label %45

98:                                               ; preds = %45
  %99 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %9, align 8
  %100 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %99, i32 0, i32 8
  %101 = load i32, i32* %100, align 8
  %102 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %9, align 8
  %103 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %102, i32 0, i32 9
  %104 = load i32, i32* %103, align 4
  %105 = icmp eq i32 %101, %104
  br i1 %105, label %106, label %108

106:                                              ; preds = %98
  %107 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %9, align 8
  call void @zap_cache(%struct.gs_font_dir_s* %107)
  br label %108

108:                                              ; preds = %106, %98
  %109 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %9, align 8
  %110 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %109, i32 0, i32 8
  %111 = load i32, i32* %110, align 8
  %112 = add i32 %111, 1
  store i32 %112, i32* %110, align 8
  %113 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %9, align 8
  %114 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %113, i32 0, i32 17
  %115 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %114, align 8
  %116 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %9, align 8
  %117 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %116, i32 0, i32 18
  %118 = load i32, i32* %117, align 8
  %119 = zext i32 %118 to i64
  %120 = getelementptr inbounds %struct.cached_fm_pair_s, %struct.cached_fm_pair_s* %115, i64 %119
  store %struct.cached_fm_pair_s* %120, %struct.cached_fm_pair_s** %10, align 8
  %121 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %9, align 8
  %122 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %121, i32 0, i32 18
  %123 = load i32, i32* %122, align 8
  %124 = add i32 %123, 1
  store i32 %124, i32* %122, align 8
  %125 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %9, align 8
  %126 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %125, i32 0, i32 9
  %127 = load i32, i32* %126, align 4
  %128 = icmp eq i32 %124, %127
  br i1 %128, label %129, label %132

129:                                              ; preds = %108
  %130 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %9, align 8
  %131 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %130, i32 0, i32 18
  store i32 0, i32* %131, align 8
  br label %132

132:                                              ; preds = %129, %108
  %133 = load %struct.gs_font_s*, %struct.gs_font_s** %8, align 8
  %134 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %10, align 8
  %135 = getelementptr inbounds %struct.cached_fm_pair_s, %struct.cached_fm_pair_s* %134, i32 0, i32 0
  store %struct.gs_font_s* %133, %struct.gs_font_s** %135, align 8
  %136 = load float, float* %4, align 4
  %137 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %10, align 8
  %138 = getelementptr inbounds %struct.cached_fm_pair_s, %struct.cached_fm_pair_s* %137, i32 0, i32 1
  store float %136, float* %138, align 8
  %139 = load float, float* %5, align 4
  %140 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %10, align 8
  %141 = getelementptr inbounds %struct.cached_fm_pair_s, %struct.cached_fm_pair_s* %140, i32 0, i32 2
  store float %139, float* %141, align 4
  %142 = load float, float* %6, align 4
  %143 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %10, align 8
  %144 = getelementptr inbounds %struct.cached_fm_pair_s, %struct.cached_fm_pair_s* %143, i32 0, i32 3
  store float %142, float* %144, align 8
  %145 = load float, float* %7, align 4
  %146 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %10, align 8
  %147 = getelementptr inbounds %struct.cached_fm_pair_s, %struct.cached_fm_pair_s* %146, i32 0, i32 4
  store float %145, float* %147, align 4
  %148 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %10, align 8
  %149 = getelementptr inbounds %struct.cached_fm_pair_s, %struct.cached_fm_pair_s* %148, i32 0, i32 5
  store i32 0, i32* %149, align 8
  %150 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %10, align 8
  store %struct.cached_fm_pair_s* %150, %struct.cached_fm_pair_s** %2, align 8
  br label %151

151:                                              ; preds = %132, %95
  %152 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %2, align 8
  ret %struct.cached_fm_pair_s* %152
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gx_add_cached_char(%struct.gs_font_dir_s* %0, %struct.cached_char_s* %1, %struct.cached_fm_pair_s* %2) #0 {
  %4 = alloca %struct.gs_font_dir_s*, align 8
  %5 = alloca %struct.cached_char_s*, align 8
  %6 = alloca %struct.cached_fm_pair_s*, align 8
  %7 = alloca %struct.cached_char_s**, align 8
  store %struct.gs_font_dir_s* %0, %struct.gs_font_dir_s** %4, align 8
  store %struct.cached_char_s* %1, %struct.cached_char_s** %5, align 8
  store %struct.cached_fm_pair_s* %2, %struct.cached_fm_pair_s** %6, align 8
  %8 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %4, align 8
  %9 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %8, i32 0, i32 14
  %10 = load %struct.cached_char_s*, %struct.cached_char_s** %5, align 8
  %11 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %10, i32 0, i32 1
  %12 = load i32, i32* %11, align 8
  %13 = and i32 %12, 127
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds [128 x %struct.cached_char_s*], [128 x %struct.cached_char_s*]* %9, i64 0, i64 %14
  store %struct.cached_char_s** %15, %struct.cached_char_s*** %7, align 8
  br label %16

16:                                               ; preds = %20, %3
  %17 = load %struct.cached_char_s**, %struct.cached_char_s*** %7, align 8
  %18 = load %struct.cached_char_s*, %struct.cached_char_s** %17, align 8
  %19 = icmp ne %struct.cached_char_s* %18, null
  br i1 %19, label %20, label %24

20:                                               ; preds = %16
  %21 = load %struct.cached_char_s**, %struct.cached_char_s*** %7, align 8
  %22 = load %struct.cached_char_s*, %struct.cached_char_s** %21, align 8
  %23 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %22, i32 0, i32 0
  store %struct.cached_char_s** %23, %struct.cached_char_s*** %7, align 8
  br label %16

24:                                               ; preds = %16
  %25 = load %struct.cached_char_s*, %struct.cached_char_s** %5, align 8
  %26 = load %struct.cached_char_s**, %struct.cached_char_s*** %7, align 8
  store %struct.cached_char_s* %25, %struct.cached_char_s** %26, align 8
  %27 = load %struct.cached_char_s*, %struct.cached_char_s** %5, align 8
  %28 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %27, i32 0, i32 0
  store %struct.cached_char_s* null, %struct.cached_char_s** %28, align 8
  %29 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %6, align 8
  %30 = load %struct.cached_char_s*, %struct.cached_char_s** %5, align 8
  %31 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %30, i32 0, i32 2
  store %struct.cached_fm_pair_s* %29, %struct.cached_fm_pair_s** %31, align 8
  %32 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %6, align 8
  %33 = getelementptr inbounds %struct.cached_fm_pair_s, %struct.cached_fm_pair_s* %32, i32 0, i32 5
  %34 = load i32, i32* %33, align 8
  %35 = add nsw i32 %34, 1
  store i32 %35, i32* %33, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.cached_char_s* @gx_lookup_cached_char(%struct.gs_state_s* %0, %struct.cached_fm_pair_s* %1, i32 %2) #0 {
  %4 = alloca %struct.cached_char_s*, align 8
  %5 = alloca %struct.gs_state_s*, align 8
  %6 = alloca %struct.cached_fm_pair_s*, align 8
  %7 = alloca i32, align 4
  %8 = alloca %struct.cached_char_s*, align 8
  store %struct.gs_state_s* %0, %struct.gs_state_s** %5, align 8
  store %struct.cached_fm_pair_s* %1, %struct.cached_fm_pair_s** %6, align 8
  store i32 %2, i32* %7, align 4
  %9 = load %struct.gs_state_s*, %struct.gs_state_s** %5, align 8
  %10 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %9, i32 0, i32 16
  %11 = load %struct.gs_font_s*, %struct.gs_font_s** %10, align 8
  %12 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %11, i32 0, i32 3
  %13 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** %12, align 8
  %14 = getelementptr inbounds %struct.gs_font_dir_s, %struct.gs_font_dir_s* %13, i32 0, i32 14
  %15 = load i32, i32* %7, align 4
  %16 = and i32 %15, 127
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds [128 x %struct.cached_char_s*], [128 x %struct.cached_char_s*]* %14, i64 0, i64 %17
  %19 = load %struct.cached_char_s*, %struct.cached_char_s** %18, align 8
  store %struct.cached_char_s* %19, %struct.cached_char_s** %8, align 8
  br label %20

20:                                               ; preds = %37, %3
  %21 = load %struct.cached_char_s*, %struct.cached_char_s** %8, align 8
  %22 = icmp ne %struct.cached_char_s* %21, null
  br i1 %22, label %23, label %41

23:                                               ; preds = %20
  %24 = load %struct.cached_char_s*, %struct.cached_char_s** %8, align 8
  %25 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %24, i32 0, i32 1
  %26 = load i32, i32* %25, align 8
  %27 = load i32, i32* %7, align 4
  %28 = icmp eq i32 %26, %27
  br i1 %28, label %29, label %37

29:                                               ; preds = %23
  %30 = load %struct.cached_char_s*, %struct.cached_char_s** %8, align 8
  %31 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %30, i32 0, i32 2
  %32 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %31, align 8
  %33 = load %struct.cached_fm_pair_s*, %struct.cached_fm_pair_s** %6, align 8
  %34 = icmp eq %struct.cached_fm_pair_s* %32, %33
  br i1 %34, label %35, label %37

35:                                               ; preds = %29
  %36 = load %struct.cached_char_s*, %struct.cached_char_s** %8, align 8
  store %struct.cached_char_s* %36, %struct.cached_char_s** %4, align 8
  br label %42

37:                                               ; preds = %29, %23
  %38 = load %struct.cached_char_s*, %struct.cached_char_s** %8, align 8
  %39 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %38, i32 0, i32 0
  %40 = load %struct.cached_char_s*, %struct.cached_char_s** %39, align 8
  store %struct.cached_char_s* %40, %struct.cached_char_s** %8, align 8
  br label %20

41:                                               ; preds = %20
  store %struct.cached_char_s* null, %struct.cached_char_s** %4, align 8
  br label %42

42:                                               ; preds = %41, %35
  %43 = load %struct.cached_char_s*, %struct.cached_char_s** %4, align 8
  ret %struct.cached_char_s* %43
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_copy_cached_char(%struct.gs_show_enum_s* %0, %struct.cached_char_s* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.gs_show_enum_s*, align 8
  %5 = alloca %struct.cached_char_s*, align 8
  %6 = alloca %struct.gs_state_s*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca %struct.timeval, align 8
  %13 = alloca %struct.gx_device_color_s*, align 8
  %14 = alloca %struct.gs_matrix_s, align 8
  %15 = alloca %struct.gx_device_s*, align 8
  store %struct.gs_show_enum_s* %0, %struct.gs_show_enum_s** %4, align 8
  store %struct.cached_char_s* %1, %struct.cached_char_s** %5, align 8
  %16 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %4, align 8
  %17 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %16, i32 0, i32 0
  %18 = load %struct.gs_state_s*, %struct.gs_state_s** %17, align 8
  store %struct.gs_state_s* %18, %struct.gs_state_s** %6, align 8
  %19 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %20 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %19, i32 0, i32 7
  %21 = load %struct.gx_path_s*, %struct.gx_path_s** %20, align 8
  %22 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %21, i32 0, i32 10
  %23 = load i8, i8* %22, align 8
  %24 = icmp ne i8 %23, 0
  br i1 %24, label %26, label %25

25:                                               ; preds = %2
  br label %41

26:                                               ; preds = %2
  %27 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %28 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %27, i32 0, i32 7
  %29 = load %struct.gx_path_s*, %struct.gx_path_s** %28, align 8
  %30 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %29, i32 0, i32 9
  %31 = getelementptr inbounds %struct.timeval, %struct.timeval* %30, i32 0, i32 0
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %struct.timeval, %struct.timeval* %12, i32 0, i32 0
  store i64 %32, i64* %33, align 8
  %34 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %35 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %34, i32 0, i32 7
  %36 = load %struct.gx_path_s*, %struct.gx_path_s** %35, align 8
  %37 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %36, i32 0, i32 9
  %38 = getelementptr inbounds %struct.timeval, %struct.timeval* %37, i32 0, i32 1
  %39 = load i64, i64* %38, align 8
  %40 = getelementptr inbounds %struct.timeval, %struct.timeval* %12, i32 0, i32 1
  store i64 %39, i64* %40, align 8
  br label %41

41:                                               ; preds = %26, %25
  %42 = phi i32 [ -14, %25 ], [ 0, %26 ]
  store i32 %42, i32* %11, align 4
  %43 = load i32, i32* %11, align 4
  %44 = icmp slt i32 %43, 0
  br i1 %44, label %45, label %47

45:                                               ; preds = %41
  %46 = load i32, i32* %11, align 4
  store i32 %46, i32* %3, align 4
  br label %200

47:                                               ; preds = %41
  %48 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %4, align 8
  %49 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %48, i32 0, i32 25
  %50 = load i32, i32* %49, align 4
  %51 = icmp ne i32 %50, 0
  br i1 %51, label %70, label %52

52:                                               ; preds = %47
  %53 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %54 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %53, i32 0, i32 14
  %55 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %54, align 8
  store %struct.gx_device_color_s* %55, %struct.gx_device_color_s** %13, align 8
  %56 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %57 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %56, i32 0, i32 13
  %58 = load %struct.gs_color_s*, %struct.gs_color_s** %57, align 8
  %59 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %13, align 8
  %60 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %61 = call i32 (%struct.gs_color_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, ...) bitcast (void (%struct.gs_color_s*, %struct.gx_device_color_s*, %struct.gs_state_s*)* @gx_color_render to i32 (%struct.gs_color_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, ...)*)(%struct.gs_color_s* %58, %struct.gx_device_color_s* %59, %struct.gs_state_s* %60)
  %62 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %13, align 8
  %63 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %62, i32 0, i32 2
  %64 = load i32, i32* %63, align 8
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %67, label %66

66:                                               ; preds = %52
  store i32 1, i32* %3, align 4
  br label %200

67:                                               ; preds = %52
  %68 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %4, align 8
  %69 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %68, i32 0, i32 25
  store i32 1, i32* %69, align 4
  br label %70

70:                                               ; preds = %67, %47
  %71 = load %struct.cached_char_s*, %struct.cached_char_s** %5, align 8
  %72 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %71, i32 0, i32 7
  %73 = getelementptr inbounds %struct.timeval, %struct.timeval* %72, i32 0, i32 0
  %74 = load i64, i64* %73, align 8
  %75 = getelementptr inbounds %struct.timeval, %struct.timeval* %12, i32 0, i32 0
  %76 = load i64, i64* %75, align 8
  %77 = sub nsw i64 %76, %74
  store i64 %77, i64* %75, align 8
  %78 = getelementptr inbounds %struct.timeval, %struct.timeval* %12, i32 0, i32 0
  %79 = load i64, i64* %78, align 8
  %80 = add nsw i64 %79, 2048
  %81 = ashr i64 %80, 12
  %82 = trunc i64 %81 to i32
  store i32 %82, i32* %7, align 4
  %83 = load %struct.cached_char_s*, %struct.cached_char_s** %5, align 8
  %84 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %83, i32 0, i32 7
  %85 = getelementptr inbounds %struct.timeval, %struct.timeval* %84, i32 0, i32 1
  %86 = load i64, i64* %85, align 8
  %87 = getelementptr inbounds %struct.timeval, %struct.timeval* %12, i32 0, i32 1
  %88 = load i64, i64* %87, align 8
  %89 = sub nsw i64 %88, %86
  store i64 %89, i64* %87, align 8
  %90 = getelementptr inbounds %struct.timeval, %struct.timeval* %12, i32 0, i32 1
  %91 = load i64, i64* %90, align 8
  %92 = add nsw i64 %91, 2048
  %93 = ashr i64 %92, 12
  %94 = trunc i64 %93 to i32
  store i32 %94, i32* %8, align 4
  %95 = load %struct.cached_char_s*, %struct.cached_char_s** %5, align 8
  %96 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %95, i32 0, i32 5
  %97 = load i16, i16* %96, align 4
  %98 = zext i16 %97 to i32
  store i32 %98, i32* %9, align 4
  %99 = load %struct.cached_char_s*, %struct.cached_char_s** %5, align 8
  %100 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %99, i32 0, i32 4
  %101 = load i16, i16* %100, align 2
  %102 = zext i16 %101 to i32
  store i32 %102, i32* %10, align 4
  %103 = load i32, i32* %7, align 4
  %104 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %4, align 8
  %105 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %104, i32 0, i32 13
  %106 = load i32, i32* %105, align 4
  %107 = icmp slt i32 %103, %106
  br i1 %107, label %130, label %108

108:                                              ; preds = %70
  %109 = load i32, i32* %7, align 4
  %110 = load i32, i32* %9, align 4
  %111 = add nsw i32 %109, %110
  %112 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %4, align 8
  %113 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %112, i32 0, i32 15
  %114 = load i32, i32* %113, align 4
  %115 = icmp sgt i32 %111, %114
  br i1 %115, label %130, label %116

116:                                              ; preds = %108
  %117 = load i32, i32* %8, align 4
  %118 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %4, align 8
  %119 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %118, i32 0, i32 14
  %120 = load i32, i32* %119, align 8
  %121 = icmp slt i32 %117, %120
  br i1 %121, label %130, label %122

122:                                              ; preds = %116
  %123 = load i32, i32* %8, align 4
  %124 = load i32, i32* %10, align 4
  %125 = add nsw i32 %123, %124
  %126 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %4, align 8
  %127 = getelementptr inbounds %struct.gs_show_enum_s, %struct.gs_show_enum_s* %126, i32 0, i32 16
  %128 = load i32, i32* %127, align 8
  %129 = icmp sgt i32 %125, %128
  br i1 %129, label %130, label %163

130:                                              ; preds = %122, %116, %108, %70
  %131 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %132 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %131, i32 0, i32 2
  %133 = bitcast %struct.gs_matrix_fixed_s* %132 to %struct.gs_matrix_s*
  %134 = bitcast %struct.gs_matrix_s* %14 to i8*
  %135 = bitcast %struct.gs_matrix_s* %133 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %134, i8* align 8 %135, i64 96, i1 false)
  %136 = getelementptr inbounds %struct.timeval, %struct.timeval* %12, i32 0, i32 0
  %137 = load i64, i64* %136, align 8
  %138 = sitofp i64 %137 to double
  %139 = fmul double %138, 0x3F30000000000000
  %140 = fptrunc double %139 to float
  %141 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %14, i32 0, i32 8
  %142 = load float, float* %141, align 8
  %143 = fsub float %142, %140
  store float %143, float* %141, align 8
  %144 = getelementptr inbounds %struct.timeval, %struct.timeval* %12, i32 0, i32 1
  %145 = load i64, i64* %144, align 8
  %146 = sitofp i64 %145 to double
  %147 = fmul double %146, 0x3F30000000000000
  %148 = fptrunc double %147 to float
  %149 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %14, i32 0, i32 10
  %150 = load float, float* %149, align 8
  %151 = fsub float %150, %148
  store float %151, float* %149, align 8
  %152 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %153 = load %struct.cached_char_s*, %struct.cached_char_s** %5, align 8
  %154 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %153, i32 0, i32 3
  %155 = load i16, i16* %154, align 8
  %156 = zext i16 %155 to i32
  %157 = mul nsw i32 %156, 8
  %158 = load i32, i32* %10, align 4
  %159 = load %struct.cached_char_s*, %struct.cached_char_s** %5, align 8
  %160 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %159, i32 0, i32 8
  %161 = load i8*, i8** %160, align 8
  %162 = call i32 @gs_imagemask(%struct.gs_state_s* %152, i32 %157, i32 %158, i32 1, %struct.gs_matrix_s* %14, i8* %161)
  store i32 %162, i32* %11, align 4
  br label %192

163:                                              ; preds = %122
  %164 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %165 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %164, i32 0, i32 22
  %166 = load %struct.device_s*, %struct.device_s** %165, align 8
  %167 = getelementptr inbounds %struct.device_s, %struct.device_s* %166, i32 0, i32 0
  %168 = load %struct.gx_device_s*, %struct.gx_device_s** %167, align 8
  store %struct.gx_device_s* %168, %struct.gx_device_s** %15, align 8
  %169 = load %struct.gx_device_s*, %struct.gx_device_s** %15, align 8
  %170 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %169, i32 0, i32 1
  %171 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %170, align 8
  %172 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %171, i32 0, i32 9
  %173 = load i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)** %172, align 8
  %174 = load %struct.gx_device_s*, %struct.gx_device_s** %15, align 8
  %175 = load %struct.cached_char_s*, %struct.cached_char_s** %5, align 8
  %176 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %175, i32 0, i32 8
  %177 = load i8*, i8** %176, align 8
  %178 = load %struct.cached_char_s*, %struct.cached_char_s** %5, align 8
  %179 = getelementptr inbounds %struct.cached_char_s, %struct.cached_char_s* %178, i32 0, i32 3
  %180 = load i16, i16* %179, align 8
  %181 = zext i16 %180 to i32
  %182 = load i32, i32* %7, align 4
  %183 = load i32, i32* %8, align 4
  %184 = load i32, i32* %9, align 4
  %185 = load i32, i32* %10, align 4
  %186 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %187 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %186, i32 0, i32 14
  %188 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %187, align 8
  %189 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %188, i32 0, i32 0
  %190 = load i64, i64* %189, align 8
  %191 = call i32 %173(%struct.gx_device_s* %174, i8* %177, i32 0, i32 %181, i32 %182, i32 %183, i32 %184, i32 %185, i64 -1, i64 %190)
  store i32 %191, i32* %11, align 4
  br label %192

192:                                              ; preds = %163, %130
  %193 = load i32, i32* %11, align 4
  %194 = icmp slt i32 %193, 0
  br i1 %194, label %195, label %197

195:                                              ; preds = %192
  %196 = load i32, i32* %11, align 4
  br label %198

197:                                              ; preds = %192
  br label %198

198:                                              ; preds = %197, %195
  %199 = phi i32 [ %196, %195 ], [ 0, %197 ]
  store i32 %199, i32* %3, align 4
  br label %200

200:                                              ; preds = %198, %66, %45
  %201 = load i32, i32* %3, align 4
  ret i32 %201
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gx_color_from_rgb(%struct.gs_color_s* %0) #0 {
  %2 = alloca %struct.gs_color_s*, align 8
  store %struct.gs_color_s* %0, %struct.gs_color_s** %2, align 8
  %3 = load %struct.gs_color_s*, %struct.gs_color_s** %2, align 8
  %4 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %3, i32 0, i32 0
  %5 = load i16, i16* %4, align 2
  %6 = zext i16 %5 to i32
  %7 = load %struct.gs_color_s*, %struct.gs_color_s** %2, align 8
  %8 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %7, i32 0, i32 1
  %9 = load i16, i16* %8, align 2
  %10 = zext i16 %9 to i32
  %11 = icmp eq i32 %6, %10
  br i1 %11, label %12, label %32

12:                                               ; preds = %1
  %13 = load %struct.gs_color_s*, %struct.gs_color_s** %2, align 8
  %14 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %13, i32 0, i32 1
  %15 = load i16, i16* %14, align 2
  %16 = zext i16 %15 to i32
  %17 = load %struct.gs_color_s*, %struct.gs_color_s** %2, align 8
  %18 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %17, i32 0, i32 2
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = icmp eq i32 %16, %20
  br i1 %21, label %22, label %32

22:                                               ; preds = %12
  %23 = load %struct.gs_color_s*, %struct.gs_color_s** %2, align 8
  %24 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %23, i32 0, i32 0
  %25 = load i16, i16* %24, align 2
  %26 = load %struct.gs_color_s*, %struct.gs_color_s** %2, align 8
  %27 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %26, i32 0, i32 3
  store i16 %25, i16* %27, align 2
  %28 = load %struct.gs_color_s*, %struct.gs_color_s** %2, align 8
  %29 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %28, i32 0, i32 5
  store i8 1, i8* %29, align 1
  %30 = load %struct.gs_color_s*, %struct.gs_color_s** %2, align 8
  %31 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %30, i32 0, i32 4
  store i8 1, i8* %31, align 2
  br label %37

32:                                               ; preds = %12, %1
  %33 = load %struct.gs_color_s*, %struct.gs_color_s** %2, align 8
  %34 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %33, i32 0, i32 5
  store i8 0, i8* %34, align 1
  %35 = load %struct.gs_color_s*, %struct.gs_color_s** %2, align 8
  %36 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %35, i32 0, i32 4
  store i8 0, i8* %36, align 2
  br label %37

37:                                               ; preds = %32, %22
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i16 @gx_color_luminance(%struct.gs_color_s* %0) #0 {
  %2 = alloca %struct.gs_color_s*, align 8
  store %struct.gs_color_s* %0, %struct.gs_color_s** %2, align 8
  %3 = load %struct.gs_color_s*, %struct.gs_color_s** %2, align 8
  %4 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %3, i32 0, i32 5
  %5 = load i8, i8* %4, align 1
  %6 = icmp ne i8 %5, 0
  br i1 %6, label %32, label %7

7:                                                ; preds = %1
  %8 = load %struct.gs_color_s*, %struct.gs_color_s** %2, align 8
  %9 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %8, i32 0, i32 0
  %10 = load i16, i16* %9, align 2
  %11 = zext i16 %10 to i64
  %12 = mul i64 %11, 30
  %13 = load %struct.gs_color_s*, %struct.gs_color_s** %2, align 8
  %14 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %13, i32 0, i32 1
  %15 = load i16, i16* %14, align 2
  %16 = zext i16 %15 to i64
  %17 = mul i64 %16, 59
  %18 = add i64 %12, %17
  %19 = load %struct.gs_color_s*, %struct.gs_color_s** %2, align 8
  %20 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %19, i32 0, i32 2
  %21 = load i16, i16* %20, align 2
  %22 = zext i16 %21 to i64
  %23 = mul i64 %22, 11
  %24 = add i64 %18, %23
  %25 = add i64 %24, 50
  %26 = udiv i64 %25, 100
  %27 = trunc i64 %26 to i16
  %28 = load %struct.gs_color_s*, %struct.gs_color_s** %2, align 8
  %29 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %28, i32 0, i32 3
  store i16 %27, i16* %29, align 2
  %30 = load %struct.gs_color_s*, %struct.gs_color_s** %2, align 8
  %31 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %30, i32 0, i32 5
  store i8 1, i8* %31, align 1
  br label %32

32:                                               ; preds = %7, %1
  %33 = load %struct.gs_color_s*, %struct.gs_color_s** %2, align 8
  %34 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %33, i32 0, i32 3
  %35 = load i16, i16* %34, align 2
  ret i16 %35
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gx_color_to_hsb(%struct.gs_color_s* %0, i16* %1) #0 {
  %3 = alloca %struct.gs_color_s*, align 8
  %4 = alloca i16*, align 8
  %5 = alloca %struct.gs_color_s, align 2
  %6 = alloca i16, align 2
  %7 = alloca i16, align 2
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  store %struct.gs_color_s* %0, %struct.gs_color_s** %3, align 8
  store i16* %1, i16** %4, align 8
  %10 = load %struct.gs_color_s*, %struct.gs_color_s** %3, align 8
  %11 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %10, i32 0, i32 4
  %12 = load i8, i8* %11, align 2
  %13 = icmp ne i8 %12, 0
  br i1 %13, label %14, label %24

14:                                               ; preds = %2
  %15 = load i16*, i16** %4, align 8
  %16 = getelementptr inbounds i16, i16* %15, i64 0
  store i16 0, i16* %16, align 2
  %17 = load i16*, i16** %4, align 8
  %18 = getelementptr inbounds i16, i16* %17, i64 1
  store i16 0, i16* %18, align 2
  %19 = load %struct.gs_color_s*, %struct.gs_color_s** %3, align 8
  %20 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %19, i32 0, i32 0
  %21 = load i16, i16* %20, align 2
  %22 = load i16*, i16** %4, align 8
  %23 = getelementptr inbounds i16, i16* %22, i64 2
  store i16 %21, i16* %23, align 2
  br label %174

24:                                               ; preds = %2
  %25 = load %struct.gs_color_s*, %struct.gs_color_s** %3, align 8
  %26 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %25, i32 0, i32 0
  %27 = load i16, i16* %26, align 2
  %28 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %5, i32 0, i32 0
  store i16 %27, i16* %28, align 2
  %29 = load %struct.gs_color_s*, %struct.gs_color_s** %3, align 8
  %30 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %29, i32 0, i32 1
  %31 = load i16, i16* %30, align 2
  %32 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %5, i32 0, i32 1
  store i16 %31, i16* %32, align 2
  %33 = load %struct.gs_color_s*, %struct.gs_color_s** %3, align 8
  %34 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %33, i32 0, i32 2
  %35 = load i16, i16* %34, align 2
  %36 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %5, i32 0, i32 2
  store i16 %35, i16* %36, align 2
  %37 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %5, i32 0, i32 0
  %38 = load i16, i16* %37, align 2
  %39 = zext i16 %38 to i32
  %40 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %5, i32 0, i32 1
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = icmp sgt i32 %39, %42
  br i1 %43, label %44, label %48

44:                                               ; preds = %24
  %45 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %5, i32 0, i32 0
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  br label %52

48:                                               ; preds = %24
  %49 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %5, i32 0, i32 1
  %50 = load i16, i16* %49, align 2
  %51 = zext i16 %50 to i32
  br label %52

52:                                               ; preds = %48, %44
  %53 = phi i32 [ %47, %44 ], [ %51, %48 ]
  %54 = trunc i32 %53 to i16
  store i16 %54, i16* %6, align 2
  %55 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %5, i32 0, i32 2
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = load i16, i16* %6, align 2
  %59 = zext i16 %58 to i32
  %60 = icmp sgt i32 %57, %59
  br i1 %60, label %61, label %64

61:                                               ; preds = %52
  %62 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %5, i32 0, i32 2
  %63 = load i16, i16* %62, align 2
  store i16 %63, i16* %6, align 2
  br label %64

64:                                               ; preds = %61, %52
  %65 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %5, i32 0, i32 0
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  %68 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %5, i32 0, i32 1
  %69 = load i16, i16* %68, align 2
  %70 = zext i16 %69 to i32
  %71 = icmp sgt i32 %67, %70
  br i1 %71, label %72, label %76

72:                                               ; preds = %64
  %73 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %5, i32 0, i32 1
  %74 = load i16, i16* %73, align 2
  %75 = zext i16 %74 to i32
  br label %80

76:                                               ; preds = %64
  %77 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %5, i32 0, i32 0
  %78 = load i16, i16* %77, align 2
  %79 = zext i16 %78 to i32
  br label %80

80:                                               ; preds = %76, %72
  %81 = phi i32 [ %75, %72 ], [ %79, %76 ]
  %82 = trunc i32 %81 to i16
  store i16 %82, i16* %7, align 2
  %83 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %5, i32 0, i32 2
  %84 = load i16, i16* %83, align 2
  %85 = zext i16 %84 to i32
  %86 = load i16, i16* %7, align 2
  %87 = zext i16 %86 to i32
  %88 = icmp slt i32 %85, %87
  br i1 %88, label %89, label %92

89:                                               ; preds = %80
  %90 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %5, i32 0, i32 2
  %91 = load i16, i16* %90, align 2
  store i16 %91, i16* %7, align 2
  br label %92

92:                                               ; preds = %89, %80
  %93 = load i16, i16* %6, align 2
  %94 = zext i16 %93 to i32
  %95 = load i16, i16* %7, align 2
  %96 = zext i16 %95 to i32
  %97 = sub nsw i32 %94, %96
  %98 = sext i32 %97 to i64
  store i64 %98, i64* %8, align 8
  %99 = load i16, i16* %6, align 2
  %100 = zext i16 %99 to i32
  %101 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %5, i32 0, i32 0
  %102 = load i16, i16* %101, align 2
  %103 = zext i16 %102 to i32
  %104 = icmp eq i32 %100, %103
  br i1 %104, label %105, label %117

105:                                              ; preds = %92
  %106 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %5, i32 0, i32 1
  %107 = load i16, i16* %106, align 2
  %108 = zext i16 %107 to i32
  %109 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %5, i32 0, i32 2
  %110 = load i16, i16* %109, align 2
  %111 = zext i16 %110 to i32
  %112 = sub nsw i32 %108, %111
  %113 = sext i32 %112 to i64
  %114 = mul nsw i64 %113, 65535
  %115 = load i64, i64* %8, align 8
  %116 = sdiv i64 %114, %115
  store i64 %116, i64* %9, align 8
  br label %151

117:                                              ; preds = %92
  %118 = load i16, i16* %6, align 2
  %119 = zext i16 %118 to i32
  %120 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %5, i32 0, i32 1
  %121 = load i16, i16* %120, align 2
  %122 = zext i16 %121 to i32
  %123 = icmp eq i32 %119, %122
  br i1 %123, label %124, label %137

124:                                              ; preds = %117
  %125 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %5, i32 0, i32 2
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %5, i32 0, i32 0
  %129 = load i16, i16* %128, align 2
  %130 = zext i16 %129 to i32
  %131 = sub nsw i32 %127, %130
  %132 = sext i32 %131 to i64
  %133 = mul nsw i64 %132, 65535
  %134 = load i64, i64* %8, align 8
  %135 = sdiv i64 %133, %134
  %136 = add nsw i64 %135, 131070
  store i64 %136, i64* %9, align 8
  br label %150

137:                                              ; preds = %117
  %138 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %5, i32 0, i32 0
  %139 = load i16, i16* %138, align 2
  %140 = zext i16 %139 to i32
  %141 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %5, i32 0, i32 1
  %142 = load i16, i16* %141, align 2
  %143 = zext i16 %142 to i32
  %144 = sub nsw i32 %140, %143
  %145 = sext i32 %144 to i64
  %146 = mul nsw i64 %145, 65535
  %147 = load i64, i64* %8, align 8
  %148 = sdiv i64 %146, %147
  %149 = add nsw i64 %148, 262140
  store i64 %149, i64* %9, align 8
  br label %150

150:                                              ; preds = %137, %124
  br label %151

151:                                              ; preds = %150, %105
  %152 = load i64, i64* %9, align 8
  %153 = icmp slt i64 %152, 0
  br i1 %153, label %154, label %157

154:                                              ; preds = %151
  %155 = load i64, i64* %9, align 8
  %156 = add nsw i64 %155, 393210
  store i64 %156, i64* %9, align 8
  br label %157

157:                                              ; preds = %154, %151
  %158 = load i64, i64* %9, align 8
  %159 = sdiv i64 %158, 6
  %160 = trunc i64 %159 to i16
  %161 = load i16*, i16** %4, align 8
  %162 = getelementptr inbounds i16, i16* %161, i64 0
  store i16 %160, i16* %162, align 2
  %163 = load i64, i64* %8, align 8
  %164 = mul nsw i64 %163, 65535
  %165 = load i16, i16* %6, align 2
  %166 = zext i16 %165 to i64
  %167 = sdiv i64 %164, %166
  %168 = trunc i64 %167 to i16
  %169 = load i16*, i16** %4, align 8
  %170 = getelementptr inbounds i16, i16* %169, i64 1
  store i16 %168, i16* %170, align 2
  %171 = load i16, i16* %6, align 2
  %172 = load i16*, i16** %4, align 8
  %173 = getelementptr inbounds i16, i16* %172, i64 2
  store i16 %171, i16* %173, align 2
  br label %174

174:                                              ; preds = %157, %14
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gx_color_from_hsb(%struct.gs_color_s* %0, i16 zeroext %1, i16 zeroext %2, i16 zeroext %3) #0 {
  %5 = alloca %struct.gs_color_s*, align 8
  %6 = alloca i16, align 2
  %7 = alloca i16, align 2
  %8 = alloca i16, align 2
  %9 = alloca float, align 4
  %10 = alloca float, align 4
  %11 = alloca i32, align 4
  %12 = alloca float, align 4
  %13 = alloca float, align 4
  %14 = alloca float, align 4
  %15 = alloca float, align 4
  %16 = alloca float, align 4
  %17 = alloca float, align 4
  %18 = alloca float, align 4
  store %struct.gs_color_s* %0, %struct.gs_color_s** %5, align 8
  store i16 %1, i16* %6, align 2
  store i16 %2, i16* %7, align 2
  store i16 %3, i16* %8, align 2
  %19 = load i16, i16* %7, align 2
  %20 = zext i16 %19 to i32
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %30

22:                                               ; preds = %4
  %23 = load i16, i16* %8, align 2
  %24 = load %struct.gs_color_s*, %struct.gs_color_s** %5, align 8
  %25 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %24, i32 0, i32 2
  store i16 %23, i16* %25, align 2
  %26 = load %struct.gs_color_s*, %struct.gs_color_s** %5, align 8
  %27 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %26, i32 0, i32 1
  store i16 %23, i16* %27, align 2
  %28 = load %struct.gs_color_s*, %struct.gs_color_s** %5, align 8
  %29 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %28, i32 0, i32 0
  store i16 %23, i16* %29, align 2
  br label %107

30:                                               ; preds = %4
  %31 = load i16, i16* %8, align 2
  %32 = zext i16 %31 to i32
  %33 = add nsw i32 %32, 0
  %34 = sitofp i32 %33 to float
  %35 = fdiv float %34, 6.553500e+04
  store float %35, float* %9, align 4
  %36 = load i16, i16* %7, align 2
  %37 = zext i16 %36 to i32
  %38 = add nsw i32 %37, 0
  %39 = sitofp i32 %38 to float
  %40 = fdiv float %39, 6.553500e+04
  store float %40, float* %10, align 4
  %41 = load i16, i16* %6, align 2
  %42 = zext i16 %41 to i32
  %43 = sdiv i32 %42, 10923
  store i32 %43, i32* %11, align 4
  %44 = load i16, i16* %6, align 2
  %45 = zext i16 %44 to i32
  %46 = srem i32 %45, 10923
  %47 = sitofp i32 %46 to float
  %48 = fdiv float %47, 1.092300e+04
  store float %48, float* %12, align 4
  %49 = load float, float* %9, align 4
  %50 = load float, float* %10, align 4
  %51 = fsub float 1.000000e+00, %50
  %52 = fmul float %49, %51
  store float %52, float* %13, align 4
  %53 = load float, float* %9, align 4
  %54 = load float, float* %10, align 4
  %55 = load float, float* %12, align 4
  %56 = fmul float %54, %55
  %57 = fsub float 1.000000e+00, %56
  %58 = fmul float %53, %57
  store float %58, float* %14, align 4
  %59 = load float, float* %9, align 4
  %60 = load float, float* %10, align 4
  %61 = load float, float* %12, align 4
  %62 = fsub float 1.000000e+00, %61
  %63 = fmul float %60, %62
  %64 = fsub float 1.000000e+00, %63
  %65 = fmul float %59, %64
  store float %65, float* %15, align 4
  %66 = load i32, i32* %11, align 4
  switch i32 %66, label %67 [
    i32 1, label %71
    i32 2, label %75
    i32 3, label %79
    i32 4, label %83
    i32 5, label %87
  ]

67:                                               ; preds = %30
  %68 = load float, float* %9, align 4
  store float %68, float* %16, align 4
  %69 = load float, float* %15, align 4
  store float %69, float* %17, align 4
  %70 = load float, float* %13, align 4
  store float %70, float* %18, align 4
  br label %91

71:                                               ; preds = %30
  %72 = load float, float* %14, align 4
  store float %72, float* %16, align 4
  %73 = load float, float* %9, align 4
  store float %73, float* %17, align 4
  %74 = load float, float* %13, align 4
  store float %74, float* %18, align 4
  br label %91

75:                                               ; preds = %30
  %76 = load float, float* %13, align 4
  store float %76, float* %16, align 4
  %77 = load float, float* %9, align 4
  store float %77, float* %17, align 4
  %78 = load float, float* %15, align 4
  store float %78, float* %18, align 4
  br label %91

79:                                               ; preds = %30
  %80 = load float, float* %13, align 4
  store float %80, float* %16, align 4
  %81 = load float, float* %14, align 4
  store float %81, float* %17, align 4
  %82 = load float, float* %9, align 4
  store float %82, float* %18, align 4
  br label %91

83:                                               ; preds = %30
  %84 = load float, float* %15, align 4
  store float %84, float* %16, align 4
  %85 = load float, float* %13, align 4
  store float %85, float* %17, align 4
  %86 = load float, float* %9, align 4
  store float %86, float* %18, align 4
  br label %91

87:                                               ; preds = %30
  %88 = load float, float* %9, align 4
  store float %88, float* %16, align 4
  %89 = load float, float* %13, align 4
  store float %89, float* %17, align 4
  %90 = load float, float* %14, align 4
  store float %90, float* %18, align 4
  br label %91

91:                                               ; preds = %87, %83, %79, %75, %71, %67
  %92 = load float, float* %16, align 4
  %93 = fmul float %92, 6.553500e+04
  %94 = fptoui float %93 to i16
  %95 = load %struct.gs_color_s*, %struct.gs_color_s** %5, align 8
  %96 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %95, i32 0, i32 0
  store i16 %94, i16* %96, align 2
  %97 = load float, float* %17, align 4
  %98 = fmul float %97, 6.553500e+04
  %99 = fptoui float %98 to i16
  %100 = load %struct.gs_color_s*, %struct.gs_color_s** %5, align 8
  %101 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %100, i32 0, i32 1
  store i16 %99, i16* %101, align 2
  %102 = load float, float* %18, align 4
  %103 = fmul float %102, 6.553500e+04
  %104 = fptoui float %103 to i16
  %105 = load %struct.gs_color_s*, %struct.gs_color_s** %5, align 8
  %106 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %105, i32 0, i32 2
  store i16 %104, i16* %106, align 2
  br label %107

107:                                              ; preds = %91, %22
  %108 = load %struct.gs_color_s*, %struct.gs_color_s** %5, align 8
  call void @gx_color_from_rgb(%struct.gs_color_s* %108)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gx_sort_ht_order(%struct.ht_bit_s* %0, i32 %1) #0 {
  %3 = alloca %struct.ht_bit_s*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.ht_bit_s, align 2
  %9 = alloca i32, align 4
  store %struct.ht_bit_s* %0, %struct.ht_bit_s** %3, align 8
  store i32 %1, i32* %4, align 4
  %10 = load i32, i32* %4, align 4
  %11 = lshr i32 %10, 1
  store i32 %11, i32* %5, align 4
  %12 = load i32, i32* %4, align 4
  %13 = sub i32 %12, 1
  store i32 %13, i32* %6, align 4
  %14 = load i32, i32* %4, align 4
  %15 = icmp ule i32 %14, 1
  br i1 %15, label %16, label %17

16:                                               ; preds = %2
  br label %120

17:                                               ; preds = %2
  br label %18

18:                                               ; preds = %119, %17
  %19 = load i32, i32* %5, align 4
  %20 = icmp ugt i32 %19, 0
  br i1 %20, label %21, label %29

21:                                               ; preds = %18
  %22 = load %struct.ht_bit_s*, %struct.ht_bit_s** %3, align 8
  %23 = load i32, i32* %5, align 4
  %24 = add i32 %23, -1
  store i32 %24, i32* %5, align 4
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds %struct.ht_bit_s, %struct.ht_bit_s* %22, i64 %25
  %27 = bitcast %struct.ht_bit_s* %8 to i8*
  %28 = bitcast %struct.ht_bit_s* %26 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %27, i8* align 2 %28, i64 4, i1 false)
  br label %53

29:                                               ; preds = %18
  %30 = load %struct.ht_bit_s*, %struct.ht_bit_s** %3, align 8
  %31 = load i32, i32* %6, align 4
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds %struct.ht_bit_s, %struct.ht_bit_s* %30, i64 %32
  %34 = bitcast %struct.ht_bit_s* %8 to i8*
  %35 = bitcast %struct.ht_bit_s* %33 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %34, i8* align 2 %35, i64 4, i1 false)
  %36 = load %struct.ht_bit_s*, %struct.ht_bit_s** %3, align 8
  %37 = load i32, i32* %6, align 4
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds %struct.ht_bit_s, %struct.ht_bit_s* %36, i64 %38
  %40 = load %struct.ht_bit_s*, %struct.ht_bit_s** %3, align 8
  %41 = getelementptr inbounds %struct.ht_bit_s, %struct.ht_bit_s* %40, i64 0
  %42 = bitcast %struct.ht_bit_s* %39 to i8*
  %43 = bitcast %struct.ht_bit_s* %41 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %42, i8* align 2 %43, i64 4, i1 false)
  %44 = load i32, i32* %6, align 4
  %45 = add i32 %44, -1
  store i32 %45, i32* %6, align 4
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %52

47:                                               ; preds = %29
  %48 = load %struct.ht_bit_s*, %struct.ht_bit_s** %3, align 8
  %49 = getelementptr inbounds %struct.ht_bit_s, %struct.ht_bit_s* %48, i64 0
  %50 = bitcast %struct.ht_bit_s* %49 to i8*
  %51 = bitcast %struct.ht_bit_s* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %50, i8* align 2 %51, i64 4, i1 false)
  br label %120

52:                                               ; preds = %29
  br label %53

53:                                               ; preds = %52, %21
  %54 = load i32, i32* %5, align 4
  store i32 %54, i32* %7, align 4
  br label %55

55:                                               ; preds = %108, %53
  %56 = load i32, i32* %7, align 4
  store i32 %56, i32* %9, align 4
  %57 = load i32, i32* %7, align 4
  %58 = load i32, i32* %7, align 4
  %59 = add i32 %57, %58
  %60 = add i32 %59, 1
  store i32 %60, i32* %7, align 4
  %61 = load i32, i32* %7, align 4
  %62 = load i32, i32* %6, align 4
  %63 = icmp ult i32 %61, %62
  br i1 %63, label %64, label %85

64:                                               ; preds = %55
  %65 = load %struct.ht_bit_s*, %struct.ht_bit_s** %3, align 8
  %66 = load i32, i32* %7, align 4
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds %struct.ht_bit_s, %struct.ht_bit_s* %65, i64 %67
  %69 = getelementptr inbounds %struct.ht_bit_s, %struct.ht_bit_s* %68, i32 0, i32 1
  %70 = load i16, i16* %69, align 2
  %71 = zext i16 %70 to i32
  %72 = load %struct.ht_bit_s*, %struct.ht_bit_s** %3, align 8
  %73 = load i32, i32* %7, align 4
  %74 = add i32 %73, 1
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds %struct.ht_bit_s, %struct.ht_bit_s* %72, i64 %75
  %77 = getelementptr inbounds %struct.ht_bit_s, %struct.ht_bit_s* %76, i32 0, i32 1
  %78 = load i16, i16* %77, align 2
  %79 = zext i16 %78 to i32
  %80 = icmp slt i32 %71, %79
  br i1 %80, label %81, label %84

81:                                               ; preds = %64
  %82 = load i32, i32* %7, align 4
  %83 = add i32 %82, 1
  store i32 %83, i32* %7, align 4
  br label %84

84:                                               ; preds = %81, %64
  br label %85

85:                                               ; preds = %84, %55
  %86 = load i32, i32* %7, align 4
  %87 = load i32, i32* %6, align 4
  %88 = icmp ugt i32 %86, %87
  br i1 %88, label %101, label %89

89:                                               ; preds = %85
  %90 = getelementptr inbounds %struct.ht_bit_s, %struct.ht_bit_s* %8, i32 0, i32 1
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  %93 = load %struct.ht_bit_s*, %struct.ht_bit_s** %3, align 8
  %94 = load i32, i32* %7, align 4
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds %struct.ht_bit_s, %struct.ht_bit_s* %93, i64 %95
  %97 = getelementptr inbounds %struct.ht_bit_s, %struct.ht_bit_s* %96, i32 0, i32 1
  %98 = load i16, i16* %97, align 2
  %99 = zext i16 %98 to i32
  %100 = icmp sge i32 %92, %99
  br i1 %100, label %101, label %108

101:                                              ; preds = %89, %85
  %102 = load %struct.ht_bit_s*, %struct.ht_bit_s** %3, align 8
  %103 = load i32, i32* %9, align 4
  %104 = zext i32 %103 to i64
  %105 = getelementptr inbounds %struct.ht_bit_s, %struct.ht_bit_s* %102, i64 %104
  %106 = bitcast %struct.ht_bit_s* %105 to i8*
  %107 = bitcast %struct.ht_bit_s* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %106, i8* align 2 %107, i64 4, i1 false)
  br label %119

108:                                              ; preds = %89
  %109 = load %struct.ht_bit_s*, %struct.ht_bit_s** %3, align 8
  %110 = load i32, i32* %9, align 4
  %111 = zext i32 %110 to i64
  %112 = getelementptr inbounds %struct.ht_bit_s, %struct.ht_bit_s* %109, i64 %111
  %113 = load %struct.ht_bit_s*, %struct.ht_bit_s** %3, align 8
  %114 = load i32, i32* %7, align 4
  %115 = zext i32 %114 to i64
  %116 = getelementptr inbounds %struct.ht_bit_s, %struct.ht_bit_s* %113, i64 %115
  %117 = bitcast %struct.ht_bit_s* %112 to i8*
  %118 = bitcast %struct.ht_bit_s* %116 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %117, i8* align 2 %118, i64 4, i1 false)
  br label %55

119:                                              ; preds = %101
  br label %18

120:                                              ; preds = %47, %16
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gx_color_render(%struct.gs_color_s* %0, %struct.gx_device_color_s* %1, %struct.gs_state_s* %2) #0 {
  %4 = alloca %struct.gs_color_s*, align 8
  %5 = alloca %struct.gx_device_color_s*, align 8
  %6 = alloca %struct.gs_state_s*, align 8
  %7 = alloca %struct.device_s*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca %struct.gx_device_s*, align 8
  %12 = alloca i16, align 2
  %13 = alloca i16, align 2
  %14 = alloca i16, align 2
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i16, align 2
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i16, align 2
  %22 = alloca i16, align 2
  %23 = alloca i16, align 2
  %24 = alloca i16, align 2
  %25 = alloca i16, align 2
  %26 = alloca i16, align 2
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca i16, align 2
  %31 = alloca i64, align 8
  %32 = alloca i32, align 4
  %33 = alloca i32, align 4
  %34 = alloca i16, align 2
  %35 = alloca i64, align 8
  %36 = alloca i64, align 8
  %37 = alloca i64, align 8
  %38 = alloca i32, align 4
  store %struct.gs_color_s* %0, %struct.gs_color_s** %4, align 8
  store %struct.gx_device_color_s* %1, %struct.gx_device_color_s** %5, align 8
  store %struct.gs_state_s* %2, %struct.gs_state_s** %6, align 8
  %39 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %40 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %39, i32 0, i32 22
  %41 = load %struct.device_s*, %struct.device_s** %40, align 8
  store %struct.device_s* %41, %struct.device_s** %7, align 8
  %42 = load %struct.gs_color_s*, %struct.gs_color_s** %4, align 8
  %43 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %42, i32 0, i32 4
  %44 = load i8, i8* %43, align 2
  %45 = icmp ne i8 %44, 0
  br i1 %45, label %46, label %80

46:                                               ; preds = %3
  %47 = load %struct.gs_color_s*, %struct.gs_color_s** %4, align 8
  %48 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %47, i32 0, i32 3
  %49 = load i16, i16* %48, align 2
  %50 = zext i16 %49 to i32
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %62

52:                                               ; preds = %46
  %53 = load %struct.device_s*, %struct.device_s** %7, align 8
  %54 = getelementptr inbounds %struct.device_s, %struct.device_s* %53, i32 0, i32 3
  %55 = load i64, i64* %54, align 8
  %56 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %5, align 8
  %57 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %56, i32 0, i32 0
  store i64 %55, i64* %57, align 8
  %58 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %5, align 8
  %59 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %58, i32 0, i32 1
  store i64 %55, i64* %59, align 8
  %60 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %5, align 8
  %61 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %60, i32 0, i32 2
  store i32 0, i32* %61, align 8
  br label %573

62:                                               ; preds = %46
  %63 = load %struct.gs_color_s*, %struct.gs_color_s** %4, align 8
  %64 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %63, i32 0, i32 3
  %65 = load i16, i16* %64, align 2
  %66 = zext i16 %65 to i32
  %67 = icmp eq i32 %66, 65535
  br i1 %67, label %68, label %78

68:                                               ; preds = %62
  %69 = load %struct.device_s*, %struct.device_s** %7, align 8
  %70 = getelementptr inbounds %struct.device_s, %struct.device_s* %69, i32 0, i32 2
  %71 = load i64, i64* %70, align 8
  %72 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %5, align 8
  %73 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %72, i32 0, i32 0
  store i64 %71, i64* %73, align 8
  %74 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %5, align 8
  %75 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %74, i32 0, i32 1
  store i64 %71, i64* %75, align 8
  %76 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %5, align 8
  %77 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %76, i32 0, i32 2
  store i32 0, i32* %77, align 8
  br label %573

78:                                               ; preds = %62
  br label %79

79:                                               ; preds = %78
  br label %80

80:                                               ; preds = %79, %3
  %81 = load %struct.device_s*, %struct.device_s** %7, align 8
  %82 = getelementptr inbounds %struct.device_s, %struct.device_s* %81, i32 0, i32 0
  %83 = load %struct.gx_device_s*, %struct.gx_device_s** %82, align 8
  store %struct.gx_device_s* %83, %struct.gx_device_s** %11, align 8
  %84 = load %struct.gx_device_s*, %struct.gx_device_s** %11, align 8
  %85 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %84, i32 0, i32 8
  %86 = load i16, i16* %85, align 4
  %87 = zext i16 %86 to i64
  store i64 %87, i64* %8, align 8
  %88 = load i64, i64* %8, align 8
  %89 = add i64 %88, 1
  store i64 %89, i64* %9, align 8
  %90 = load i64, i64* %8, align 8
  %91 = icmp uge i64 %90, 255
  br i1 %91, label %92, label %133

92:                                               ; preds = %80
  %93 = load %struct.gs_color_s*, %struct.gs_color_s** %4, align 8
  %94 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %93, i32 0, i32 0
  %95 = load i16, i16* %94, align 2
  %96 = zext i16 %95 to i64
  %97 = load i64, i64* %9, align 8
  %98 = mul i64 %96, %97
  %99 = udiv i64 %98, 65536
  %100 = trunc i64 %99 to i16
  store i16 %100, i16* %12, align 2
  %101 = load %struct.gs_color_s*, %struct.gs_color_s** %4, align 8
  %102 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %101, i32 0, i32 1
  %103 = load i16, i16* %102, align 2
  %104 = zext i16 %103 to i64
  %105 = load i64, i64* %9, align 8
  %106 = mul i64 %104, %105
  %107 = udiv i64 %106, 65536
  %108 = trunc i64 %107 to i16
  store i16 %108, i16* %13, align 2
  %109 = load %struct.gs_color_s*, %struct.gs_color_s** %4, align 8
  %110 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %109, i32 0, i32 2
  %111 = load i16, i16* %110, align 2
  %112 = zext i16 %111 to i64
  %113 = load i64, i64* %9, align 8
  %114 = mul i64 %112, %113
  %115 = udiv i64 %114, 65536
  %116 = trunc i64 %115 to i16
  store i16 %116, i16* %14, align 2
  %117 = load %struct.gx_device_s*, %struct.gx_device_s** %11, align 8
  %118 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %117, i32 0, i32 1
  %119 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %118, align 8
  %120 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %119, i32 0, i32 5
  %121 = load i64 (%struct.gx_device_s*, i16, i16, i16)*, i64 (%struct.gx_device_s*, i16, i16, i16)** %120, align 8
  %122 = load %struct.gx_device_s*, %struct.gx_device_s** %11, align 8
  %123 = load i16, i16* %12, align 2
  %124 = load i16, i16* %13, align 2
  %125 = load i16, i16* %14, align 2
  %126 = call i64 %121(%struct.gx_device_s* %122, i16 zeroext %123, i16 zeroext %124, i16 zeroext %125)
  %127 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %5, align 8
  %128 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %127, i32 0, i32 0
  store i64 %126, i64* %128, align 8
  %129 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %5, align 8
  %130 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %129, i32 0, i32 1
  store i64 %126, i64* %130, align 8
  %131 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %5, align 8
  %132 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %131, i32 0, i32 2
  store i32 0, i32* %132, align 8
  br label %573

133:                                              ; preds = %80
  %134 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %135 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %134, i32 0, i32 11
  %136 = load %struct.halftone_s*, %struct.halftone_s** %135, align 8
  %137 = getelementptr inbounds %struct.halftone_s, %struct.halftone_s* %136, i32 0, i32 5
  %138 = load i32, i32* %137, align 8
  %139 = zext i32 %138 to i64
  store i64 %139, i64* %10, align 8
  %140 = load %struct.gx_device_s*, %struct.gx_device_s** %11, align 8
  %141 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %140, i32 0, i32 7
  %142 = load i32, i32* %141, align 8
  %143 = icmp ne i32 %142, 0
  br i1 %143, label %144, label %150

144:                                              ; preds = %133
  %145 = load %struct.gs_color_s*, %struct.gs_color_s** %4, align 8
  %146 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %145, i32 0, i32 4
  %147 = load i8, i8* %146, align 2
  %148 = zext i8 %147 to i32
  %149 = icmp ne i32 %148, 0
  br i1 %149, label %150, label %225

150:                                              ; preds = %144, %133
  %151 = load i64, i64* %10, align 8
  %152 = load i64, i64* %8, align 8
  %153 = mul i64 %151, %152
  %154 = add i64 %153, 1
  store i64 %154, i64* %15, align 8
  %155 = load i64, i64* %15, align 8
  %156 = load %struct.gs_color_s*, %struct.gs_color_s** %4, align 8
  %157 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %156, i32 0, i32 5
  %158 = load i8, i8* %157, align 1
  %159 = zext i8 %158 to i32
  %160 = icmp ne i32 %159, 0
  br i1 %160, label %161, label %166

161:                                              ; preds = %150
  %162 = load %struct.gs_color_s*, %struct.gs_color_s** %4, align 8
  %163 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %162, i32 0, i32 3
  %164 = load i16, i16* %163, align 2
  %165 = zext i16 %164 to i32
  br label %170

166:                                              ; preds = %150
  %167 = load %struct.gs_color_s*, %struct.gs_color_s** %4, align 8
  %168 = call zeroext i16 @gx_color_luminance(%struct.gs_color_s* %167)
  %169 = zext i16 %168 to i32
  br label %170

170:                                              ; preds = %166, %161
  %171 = phi i32 [ %165, %161 ], [ %169, %166 ]
  %172 = sext i32 %171 to i64
  %173 = mul i64 %155, %172
  %174 = udiv i64 %173, 65536
  store i64 %174, i64* %16, align 8
  %175 = load i64, i64* %16, align 8
  %176 = load i64, i64* %10, align 8
  %177 = udiv i64 %175, %176
  %178 = trunc i64 %177 to i16
  store i16 %178, i16* %17, align 2
  %179 = load i64, i64* %16, align 8
  %180 = load i64, i64* %10, align 8
  %181 = urem i64 %179, %180
  %182 = trunc i64 %181 to i32
  %183 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %5, align 8
  %184 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %183, i32 0, i32 2
  store i32 %182, i32* %184, align 8
  %185 = load %struct.gx_device_s*, %struct.gx_device_s** %11, align 8
  %186 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %185, i32 0, i32 1
  %187 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %186, align 8
  %188 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %187, i32 0, i32 5
  %189 = load i64 (%struct.gx_device_s*, i16, i16, i16)*, i64 (%struct.gx_device_s*, i16, i16, i16)** %188, align 8
  %190 = load %struct.gx_device_s*, %struct.gx_device_s** %11, align 8
  %191 = load i16, i16* %17, align 2
  %192 = load i16, i16* %17, align 2
  %193 = load i16, i16* %17, align 2
  %194 = call i64 %189(%struct.gx_device_s* %190, i16 zeroext %191, i16 zeroext %192, i16 zeroext %193)
  %195 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %5, align 8
  %196 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %195, i32 0, i32 0
  store i64 %194, i64* %196, align 8
  %197 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %5, align 8
  %198 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %197, i32 0, i32 2
  %199 = load i32, i32* %198, align 8
  %200 = icmp eq i32 %199, 0
  br i1 %200, label %201, label %207

201:                                              ; preds = %170
  %202 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %5, align 8
  %203 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %202, i32 0, i32 0
  %204 = load i64, i64* %203, align 8
  %205 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %5, align 8
  %206 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %205, i32 0, i32 1
  store i64 %204, i64* %206, align 8
  br label %224

207:                                              ; preds = %170
  %208 = load i16, i16* %17, align 2
  %209 = add i16 %208, 1
  store i16 %209, i16* %17, align 2
  %210 = load %struct.gx_device_s*, %struct.gx_device_s** %11, align 8
  %211 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %210, i32 0, i32 1
  %212 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %211, align 8
  %213 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %212, i32 0, i32 5
  %214 = load i64 (%struct.gx_device_s*, i16, i16, i16)*, i64 (%struct.gx_device_s*, i16, i16, i16)** %213, align 8
  %215 = load %struct.gx_device_s*, %struct.gx_device_s** %11, align 8
  %216 = load i16, i16* %17, align 2
  %217 = load i16, i16* %17, align 2
  %218 = load i16, i16* %17, align 2
  %219 = call i64 %214(%struct.gx_device_s* %215, i16 zeroext %216, i16 zeroext %217, i16 zeroext %218)
  %220 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %5, align 8
  %221 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %220, i32 0, i32 1
  store i64 %219, i64* %221, align 8
  %222 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %5, align 8
  %223 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  call void @gx_color_load(%struct.gx_device_color_s* %222, %struct.gs_state_s* %223)
  br label %224

224:                                              ; preds = %207, %201
  br label %573

225:                                              ; preds = %144
  %226 = load %struct.gs_color_s*, %struct.gs_color_s** %4, align 8
  %227 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %226, i32 0, i32 0
  %228 = load i16, i16* %227, align 2
  %229 = zext i16 %228 to i64
  %230 = load i64, i64* %8, align 8
  %231 = mul i64 %229, %230
  store i64 %231, i64* %18, align 8
  %232 = load %struct.gs_color_s*, %struct.gs_color_s** %4, align 8
  %233 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %232, i32 0, i32 1
  %234 = load i16, i16* %233, align 2
  %235 = zext i16 %234 to i64
  %236 = load i64, i64* %8, align 8
  %237 = mul i64 %235, %236
  store i64 %237, i64* %19, align 8
  %238 = load %struct.gs_color_s*, %struct.gs_color_s** %4, align 8
  %239 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %238, i32 0, i32 2
  %240 = load i16, i16* %239, align 2
  %241 = zext i16 %240 to i64
  %242 = load i64, i64* %8, align 8
  %243 = mul i64 %241, %242
  store i64 %243, i64* %20, align 8
  %244 = load i64, i64* %18, align 8
  %245 = udiv i64 %244, 65535
  %246 = trunc i64 %245 to i16
  store i16 %246, i16* %21, align 2
  %247 = load i64, i64* %19, align 8
  %248 = udiv i64 %247, 65535
  %249 = trunc i64 %248 to i16
  store i16 %249, i16* %22, align 2
  %250 = load i64, i64* %20, align 8
  %251 = udiv i64 %250, 65535
  %252 = trunc i64 %251 to i16
  store i16 %252, i16* %23, align 2
  %253 = load i64, i64* %18, align 8
  %254 = trunc i64 %253 to i16
  %255 = zext i16 %254 to i32
  %256 = load i16, i16* %21, align 2
  %257 = zext i16 %256 to i32
  %258 = mul nsw i32 %257, 65535
  %259 = sub nsw i32 %255, %258
  %260 = trunc i32 %259 to i16
  store i16 %260, i16* %24, align 2
  %261 = load i64, i64* %19, align 8
  %262 = trunc i64 %261 to i16
  %263 = zext i16 %262 to i32
  %264 = load i16, i16* %22, align 2
  %265 = zext i16 %264 to i32
  %266 = mul nsw i32 %265, 65535
  %267 = sub nsw i32 %263, %266
  %268 = trunc i32 %267 to i16
  store i16 %268, i16* %25, align 2
  %269 = load i64, i64* %20, align 8
  %270 = trunc i64 %269 to i16
  %271 = zext i16 %270 to i32
  %272 = load i16, i16* %23, align 2
  %273 = zext i16 %272 to i32
  %274 = mul nsw i32 %273, 65535
  %275 = sub nsw i32 %271, %274
  %276 = trunc i32 %275 to i16
  store i16 %276, i16* %26, align 2
  %277 = load i16, i16* %24, align 2
  %278 = zext i16 %277 to i32
  %279 = load i16, i16* %25, align 2
  %280 = zext i16 %279 to i32
  %281 = or i32 %278, %280
  %282 = load i16, i16* %26, align 2
  %283 = zext i16 %282 to i32
  %284 = or i32 %281, %283
  %285 = icmp ne i32 %284, 0
  br i1 %285, label %303, label %286

286:                                              ; preds = %225
  %287 = load %struct.gx_device_s*, %struct.gx_device_s** %11, align 8
  %288 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %287, i32 0, i32 1
  %289 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %288, align 8
  %290 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %289, i32 0, i32 5
  %291 = load i64 (%struct.gx_device_s*, i16, i16, i16)*, i64 (%struct.gx_device_s*, i16, i16, i16)** %290, align 8
  %292 = load %struct.gx_device_s*, %struct.gx_device_s** %11, align 8
  %293 = load i16, i16* %21, align 2
  %294 = load i16, i16* %22, align 2
  %295 = load i16, i16* %23, align 2
  %296 = call i64 %291(%struct.gx_device_s* %292, i16 zeroext %293, i16 zeroext %294, i16 zeroext %295)
  %297 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %5, align 8
  %298 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %297, i32 0, i32 0
  store i64 %296, i64* %298, align 8
  %299 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %5, align 8
  %300 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %299, i32 0, i32 1
  store i64 %296, i64* %300, align 8
  %301 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %5, align 8
  %302 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %301, i32 0, i32 2
  store i32 0, i32* %302, align 8
  br label %573

303:                                              ; preds = %225
  store i16 0, i16* %34, align 2
  %304 = load i16, i16* %24, align 2
  %305 = zext i16 %304 to i32
  %306 = icmp sgt i32 %305, 32767
  br i1 %306, label %307, label %318

307:                                              ; preds = %303
  %308 = load i16, i16* %24, align 2
  %309 = zext i16 %308 to i32
  %310 = sub nsw i32 65535, %309
  %311 = trunc i32 %310 to i16
  store i16 %311, i16* %24, align 2
  store i32 -1, i32* %27, align 4
  %312 = load i16, i16* %21, align 2
  %313 = add i16 %312, 1
  store i16 %313, i16* %21, align 2
  %314 = load i16, i16* %34, align 2
  %315 = zext i16 %314 to i32
  %316 = add nsw i32 %315, 30
  %317 = trunc i32 %316 to i16
  store i16 %317, i16* %34, align 2
  br label %319

318:                                              ; preds = %303
  store i32 1, i32* %27, align 4
  br label %319

319:                                              ; preds = %318, %307
  %320 = load i16, i16* %25, align 2
  %321 = zext i16 %320 to i32
  %322 = icmp sgt i32 %321, 32767
  br i1 %322, label %323, label %334

323:                                              ; preds = %319
  %324 = load i16, i16* %25, align 2
  %325 = zext i16 %324 to i32
  %326 = sub nsw i32 65535, %325
  %327 = trunc i32 %326 to i16
  store i16 %327, i16* %25, align 2
  store i32 -1, i32* %29, align 4
  %328 = load i16, i16* %22, align 2
  %329 = add i16 %328, 1
  store i16 %329, i16* %22, align 2
  %330 = load i16, i16* %34, align 2
  %331 = zext i16 %330 to i32
  %332 = add nsw i32 %331, 59
  %333 = trunc i32 %332 to i16
  store i16 %333, i16* %34, align 2
  br label %335

334:                                              ; preds = %319
  store i32 1, i32* %29, align 4
  br label %335

335:                                              ; preds = %334, %323
  %336 = load i16, i16* %26, align 2
  %337 = zext i16 %336 to i32
  %338 = icmp sgt i32 %337, 32767
  br i1 %338, label %339, label %350

339:                                              ; preds = %335
  %340 = load i16, i16* %26, align 2
  %341 = zext i16 %340 to i32
  %342 = sub nsw i32 65535, %341
  %343 = trunc i32 %342 to i16
  store i16 %343, i16* %26, align 2
  store i32 -1, i32* %28, align 4
  %344 = load i16, i16* %23, align 2
  %345 = add i16 %344, 1
  store i16 %345, i16* %23, align 2
  %346 = load i16, i16* %34, align 2
  %347 = zext i16 %346 to i32
  %348 = add nsw i32 %347, 11
  %349 = trunc i32 %348 to i16
  store i16 %349, i16* %34, align 2
  br label %351

350:                                              ; preds = %335
  store i32 1, i32* %28, align 4
  br label %351

351:                                              ; preds = %350, %339
  %352 = load %struct.gx_device_s*, %struct.gx_device_s** %11, align 8
  %353 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %352, i32 0, i32 1
  %354 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %353, align 8
  %355 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %354, i32 0, i32 5
  %356 = load i64 (%struct.gx_device_s*, i16, i16, i16)*, i64 (%struct.gx_device_s*, i16, i16, i16)** %355, align 8
  %357 = load %struct.gx_device_s*, %struct.gx_device_s** %11, align 8
  %358 = load i16, i16* %21, align 2
  %359 = load i16, i16* %22, align 2
  %360 = load i16, i16* %23, align 2
  %361 = call i64 %356(%struct.gx_device_s* %357, i16 zeroext %358, i16 zeroext %359, i16 zeroext %360)
  %362 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %5, align 8
  %363 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %362, i32 0, i32 0
  store i64 %361, i64* %363, align 8
  %364 = load i16, i16* %25, align 2
  %365 = zext i16 %364 to i32
  %366 = load i16, i16* %24, align 2
  %367 = zext i16 %366 to i32
  %368 = icmp sgt i32 %365, %367
  br i1 %368, label %369, label %398

369:                                              ; preds = %351
  %370 = load i16, i16* %26, align 2
  %371 = zext i16 %370 to i32
  %372 = load i16, i16* %25, align 2
  %373 = zext i16 %372 to i32
  %374 = icmp sgt i32 %371, %373
  br i1 %374, label %375, label %377

375:                                              ; preds = %369
  %376 = load i16, i16* %26, align 2
  store i16 %376, i16* %30, align 2
  store i32 4, i32* %32, align 4
  br label %379

377:                                              ; preds = %369
  %378 = load i16, i16* %25, align 2
  store i16 %378, i16* %30, align 2
  store i32 2, i32* %32, align 4
  br label %379

379:                                              ; preds = %377, %375
  %380 = load i16, i16* %26, align 2
  %381 = zext i16 %380 to i32
  %382 = load i16, i16* %24, align 2
  %383 = zext i16 %382 to i32
  %384 = icmp sgt i32 %381, %383
  br i1 %384, label %385, label %391

385:                                              ; preds = %379
  %386 = load i16, i16* %25, align 2
  %387 = zext i16 %386 to i64
  %388 = load i16, i16* %26, align 2
  %389 = zext i16 %388 to i64
  %390 = add i64 %387, %389
  store i64 %390, i64* %31, align 8
  store i32 6, i32* %33, align 4
  br label %397

391:                                              ; preds = %379
  %392 = load i16, i16* %24, align 2
  %393 = zext i16 %392 to i64
  %394 = load i16, i16* %25, align 2
  %395 = zext i16 %394 to i64
  %396 = add i64 %393, %395
  store i64 %396, i64* %31, align 8
  store i32 3, i32* %33, align 4
  br label %397

397:                                              ; preds = %391, %385
  br label %427

398:                                              ; preds = %351
  %399 = load i16, i16* %26, align 2
  %400 = zext i16 %399 to i32
  %401 = load i16, i16* %24, align 2
  %402 = zext i16 %401 to i32
  %403 = icmp sgt i32 %400, %402
  br i1 %403, label %404, label %406

404:                                              ; preds = %398
  %405 = load i16, i16* %26, align 2
  store i16 %405, i16* %30, align 2
  store i32 4, i32* %32, align 4
  br label %408

406:                                              ; preds = %398
  %407 = load i16, i16* %24, align 2
  store i16 %407, i16* %30, align 2
  store i32 1, i32* %32, align 4
  br label %408

408:                                              ; preds = %406, %404
  %409 = load i16, i16* %26, align 2
  %410 = zext i16 %409 to i32
  %411 = load i16, i16* %25, align 2
  %412 = zext i16 %411 to i32
  %413 = icmp sgt i32 %410, %412
  br i1 %413, label %414, label %420

414:                                              ; preds = %408
  %415 = load i16, i16* %26, align 2
  %416 = zext i16 %415 to i64
  %417 = load i16, i16* %24, align 2
  %418 = zext i16 %417 to i64
  %419 = add i64 %416, %418
  store i64 %419, i64* %31, align 8
  store i32 5, i32* %33, align 4
  br label %426

420:                                              ; preds = %408
  %421 = load i16, i16* %24, align 2
  %422 = zext i16 %421 to i64
  %423 = load i16, i16* %25, align 2
  %424 = zext i16 %423 to i64
  %425 = add i64 %422, %424
  store i64 %425, i64* %31, align 8
  store i32 3, i32* %33, align 4
  br label %426

426:                                              ; preds = %420, %414
  br label %427

427:                                              ; preds = %426, %397
  %428 = load i16, i16* %30, align 2
  %429 = zext i16 %428 to i64
  %430 = mul i64 %429, 100
  store i64 %430, i64* %35, align 8
  %431 = load i64, i64* %31, align 8
  %432 = mul i64 %431, 71
  store i64 %432, i64* %36, align 8
  %433 = load i16, i16* %24, align 2
  %434 = zext i16 %433 to i64
  %435 = load i16, i16* %25, align 2
  %436 = zext i16 %435 to i64
  %437 = add i64 %434, %436
  %438 = load i16, i16* %26, align 2
  %439 = zext i16 %438 to i64
  %440 = add i64 %437, %439
  store i64 %440, i64* %37, align 8
  %441 = load i64, i64* %35, align 8
  %442 = load i64, i64* %36, align 8
  %443 = icmp ugt i64 %441, %442
  br i1 %443, label %444, label %464

444:                                              ; preds = %427
  %445 = load i64, i64* %37, align 8
  %446 = mul i64 %445, 62
  %447 = load i64, i64* %35, align 8
  %448 = icmp ugt i64 %446, %447
  br i1 %448, label %449, label %455

449:                                              ; preds = %444
  store i32 7, i32* %33, align 4
  %450 = load i64, i64* %10, align 8
  %451 = load i64, i64* %37, align 8
  %452 = mul i64 %450, %451
  %453 = udiv i64 %452, 196605
  %454 = trunc i64 %453 to i32
  store i32 %454, i32* %38, align 4
  br label %463

455:                                              ; preds = %444
  %456 = load i32, i32* %32, align 4
  store i32 %456, i32* %33, align 4
  %457 = load i64, i64* %10, align 8
  %458 = load i16, i16* %30, align 2
  %459 = zext i16 %458 to i64
  %460 = mul i64 %457, %459
  %461 = udiv i64 %460, 65535
  %462 = trunc i64 %461 to i32
  store i32 %462, i32* %38, align 4
  br label %463

463:                                              ; preds = %455, %449
  br label %482

464:                                              ; preds = %427
  %465 = load i64, i64* %37, align 8
  %466 = mul i64 %465, 62
  %467 = load i64, i64* %36, align 8
  %468 = icmp ugt i64 %466, %467
  br i1 %468, label %469, label %475

469:                                              ; preds = %464
  store i32 7, i32* %33, align 4
  %470 = load i64, i64* %10, align 8
  %471 = load i64, i64* %37, align 8
  %472 = mul i64 %470, %471
  %473 = udiv i64 %472, 196605
  %474 = trunc i64 %473 to i32
  store i32 %474, i32* %38, align 4
  br label %481

475:                                              ; preds = %464
  %476 = load i64, i64* %10, align 8
  %477 = load i64, i64* %31, align 8
  %478 = mul i64 %476, %477
  %479 = udiv i64 %478, 131070
  %480 = trunc i64 %479 to i32
  store i32 %480, i32* %38, align 4
  br label %481

481:                                              ; preds = %475, %469
  br label %482

482:                                              ; preds = %481, %463
  %483 = load i32, i32* %38, align 4
  %484 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %5, align 8
  %485 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %484, i32 0, i32 2
  store i32 %483, i32* %485, align 8
  %486 = icmp eq i32 %483, 0
  br i1 %486, label %487, label %493

487:                                              ; preds = %482
  %488 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %5, align 8
  %489 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %488, i32 0, i32 0
  %490 = load i64, i64* %489, align 8
  %491 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %5, align 8
  %492 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %491, i32 0, i32 1
  store i64 %490, i64* %492, align 8
  br label %573

493:                                              ; preds = %482
  %494 = load i32, i32* %33, align 4
  %495 = and i32 %494, 1
  %496 = icmp ne i32 %495, 0
  br i1 %496, label %497, label %503

497:                                              ; preds = %493
  %498 = load i32, i32* %27, align 4
  %499 = load i16, i16* %21, align 2
  %500 = zext i16 %499 to i32
  %501 = add nsw i32 %500, %498
  %502 = trunc i32 %501 to i16
  store i16 %502, i16* %21, align 2
  br label %503

503:                                              ; preds = %497, %493
  %504 = load i32, i32* %33, align 4
  %505 = and i32 %504, 2
  %506 = icmp ne i32 %505, 0
  br i1 %506, label %507, label %513

507:                                              ; preds = %503
  %508 = load i32, i32* %29, align 4
  %509 = load i16, i16* %22, align 2
  %510 = zext i16 %509 to i32
  %511 = add nsw i32 %510, %508
  %512 = trunc i32 %511 to i16
  store i16 %512, i16* %22, align 2
  br label %513

513:                                              ; preds = %507, %503
  %514 = load i32, i32* %33, align 4
  %515 = and i32 %514, 4
  %516 = icmp ne i32 %515, 0
  br i1 %516, label %517, label %523

517:                                              ; preds = %513
  %518 = load i32, i32* %28, align 4
  %519 = load i16, i16* %23, align 2
  %520 = zext i16 %519 to i32
  %521 = add nsw i32 %520, %518
  %522 = trunc i32 %521 to i16
  store i16 %522, i16* %23, align 2
  br label %523

523:                                              ; preds = %517, %513
  %524 = load i32, i32* %33, align 4
  %525 = sext i32 %524 to i64
  %526 = getelementptr inbounds [8 x i16], [8 x i16]* @lum, i64 0, i64 %525
  %527 = load i16, i16* %526, align 2
  %528 = zext i16 %527 to i32
  %529 = load i16, i16* %34, align 2
  %530 = zext i16 %529 to i32
  %531 = icmp slt i32 %528, %530
  br i1 %531, label %532, label %557

532:                                              ; preds = %523
  %533 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %5, align 8
  %534 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %533, i32 0, i32 0
  %535 = load i64, i64* %534, align 8
  %536 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %5, align 8
  %537 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %536, i32 0, i32 1
  store i64 %535, i64* %537, align 8
  %538 = load %struct.gx_device_s*, %struct.gx_device_s** %11, align 8
  %539 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %538, i32 0, i32 1
  %540 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %539, align 8
  %541 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %540, i32 0, i32 5
  %542 = load i64 (%struct.gx_device_s*, i16, i16, i16)*, i64 (%struct.gx_device_s*, i16, i16, i16)** %541, align 8
  %543 = load %struct.gx_device_s*, %struct.gx_device_s** %11, align 8
  %544 = load i16, i16* %21, align 2
  %545 = load i16, i16* %22, align 2
  %546 = load i16, i16* %23, align 2
  %547 = call i64 %542(%struct.gx_device_s* %543, i16 zeroext %544, i16 zeroext %545, i16 zeroext %546)
  %548 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %5, align 8
  %549 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %548, i32 0, i32 0
  store i64 %547, i64* %549, align 8
  %550 = load i64, i64* %10, align 8
  %551 = load i32, i32* %38, align 4
  %552 = sext i32 %551 to i64
  %553 = sub i64 %550, %552
  %554 = trunc i64 %553 to i32
  store i32 %554, i32* %38, align 4
  %555 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %5, align 8
  %556 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %555, i32 0, i32 2
  store i32 %554, i32* %556, align 8
  br label %570

557:                                              ; preds = %523
  %558 = load %struct.gx_device_s*, %struct.gx_device_s** %11, align 8
  %559 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %558, i32 0, i32 1
  %560 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %559, align 8
  %561 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %560, i32 0, i32 5
  %562 = load i64 (%struct.gx_device_s*, i16, i16, i16)*, i64 (%struct.gx_device_s*, i16, i16, i16)** %561, align 8
  %563 = load %struct.gx_device_s*, %struct.gx_device_s** %11, align 8
  %564 = load i16, i16* %21, align 2
  %565 = load i16, i16* %22, align 2
  %566 = load i16, i16* %23, align 2
  %567 = call i64 %562(%struct.gx_device_s* %563, i16 zeroext %564, i16 zeroext %565, i16 zeroext %566)
  %568 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %5, align 8
  %569 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %568, i32 0, i32 1
  store i64 %567, i64* %569, align 8
  br label %570

570:                                              ; preds = %557, %532
  %571 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %5, align 8
  %572 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  call void @gx_color_load(%struct.gx_device_color_s* %571, %struct.gs_state_s* %572)
  br label %573

573:                                              ; preds = %570, %487, %286, %224, %92, %68, %52
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gz_fill_rectangle(i32 %0, i32 %1, i32 %2, i32 %3, %struct.gx_device_color_s* %4, %struct.gs_state_s* %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca %struct.gx_device_color_s*, align 8
  %13 = alloca %struct.gs_state_s*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca %struct.gx_device_s*, align 8
  %17 = alloca %struct.gx_bitmap_s*, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i8*, align 8
  store i32 %0, i32* %8, align 4
  store i32 %1, i32* %9, align 4
  store i32 %2, i32* %10, align 4
  store i32 %3, i32* %11, align 4
  store %struct.gx_device_color_s* %4, %struct.gx_device_color_s** %12, align 8
  store %struct.gs_state_s* %5, %struct.gs_state_s** %13, align 8
  %23 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %12, align 8
  %24 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %23, i32 0, i32 0
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %14, align 8
  %26 = load %struct.gs_state_s*, %struct.gs_state_s** %13, align 8
  %27 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %26, i32 0, i32 22
  %28 = load %struct.device_s*, %struct.device_s** %27, align 8
  %29 = getelementptr inbounds %struct.device_s, %struct.device_s* %28, i32 0, i32 0
  %30 = load %struct.gx_device_s*, %struct.gx_device_s** %29, align 8
  store %struct.gx_device_s* %30, %struct.gx_device_s** %16, align 8
  %31 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %12, align 8
  %32 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %31, i32 0, i32 2
  %33 = load i32, i32* %32, align 8
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %48

35:                                               ; preds = %6
  %36 = load %struct.gx_device_s*, %struct.gx_device_s** %16, align 8
  %37 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %36, i32 0, i32 1
  %38 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %37, align 8
  %39 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %38, i32 0, i32 7
  %40 = load i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)** %39, align 8
  %41 = load %struct.gx_device_s*, %struct.gx_device_s** %16, align 8
  %42 = load i32, i32* %8, align 4
  %43 = load i32, i32* %9, align 4
  %44 = load i32, i32* %10, align 4
  %45 = load i32, i32* %11, align 4
  %46 = load i64, i64* %14, align 8
  %47 = call i32 %40(%struct.gx_device_s* %41, i32 %42, i32 %43, i32 %44, i32 %45, i64 %46)
  store i32 %47, i32* %7, align 4
  br label %177

48:                                               ; preds = %6
  %49 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %12, align 8
  %50 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %49, i32 0, i32 1
  %51 = load i64, i64* %50, align 8
  store i64 %51, i64* %15, align 8
  %52 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %12, align 8
  %53 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %52, i32 0, i32 3
  %54 = load %struct.gx_bitmap_s*, %struct.gx_bitmap_s** %53, align 8
  store %struct.gx_bitmap_s* %54, %struct.gx_bitmap_s** %17, align 8
  %55 = load i32, i32* %10, align 4
  %56 = load %struct.gx_bitmap_s*, %struct.gx_bitmap_s** %17, align 8
  %57 = getelementptr inbounds %struct.gx_bitmap_s, %struct.gx_bitmap_s* %56, i32 0, i32 2
  %58 = load i32, i32* %57, align 4
  %59 = icmp sle i32 %55, %58
  br i1 %59, label %60, label %142

60:                                               ; preds = %48
  %61 = load i32, i32* %11, align 4
  %62 = load %struct.gx_bitmap_s*, %struct.gx_bitmap_s** %17, align 8
  %63 = getelementptr inbounds %struct.gx_bitmap_s, %struct.gx_bitmap_s* %62, i32 0, i32 3
  %64 = load i32, i32* %63, align 8
  %65 = icmp sle i32 %61, %64
  br i1 %65, label %66, label %142

66:                                               ; preds = %60
  %67 = load i32, i32* %8, align 4
  %68 = load %struct.gx_bitmap_s*, %struct.gx_bitmap_s** %17, align 8
  %69 = getelementptr inbounds %struct.gx_bitmap_s, %struct.gx_bitmap_s* %68, i32 0, i32 2
  %70 = load i32, i32* %69, align 4
  %71 = srem i32 %67, %70
  store i32 %71, i32* %19, align 4
  %72 = load i32, i32* %19, align 4
  %73 = load i32, i32* %10, align 4
  %74 = add nsw i32 %72, %73
  %75 = load %struct.gx_bitmap_s*, %struct.gx_bitmap_s** %17, align 8
  %76 = getelementptr inbounds %struct.gx_bitmap_s, %struct.gx_bitmap_s* %75, i32 0, i32 2
  %77 = load i32, i32* %76, align 4
  %78 = icmp sle i32 %74, %77
  br i1 %78, label %79, label %141

79:                                               ; preds = %66
  %80 = load i32, i32* %9, align 4
  %81 = load %struct.gx_bitmap_s*, %struct.gx_bitmap_s** %17, align 8
  %82 = getelementptr inbounds %struct.gx_bitmap_s, %struct.gx_bitmap_s* %81, i32 0, i32 3
  %83 = load i32, i32* %82, align 8
  %84 = srem i32 %80, %83
  store i32 %84, i32* %20, align 4
  %85 = load i32, i32* %11, align 4
  %86 = add nsw i32 %84, %85
  %87 = load %struct.gx_bitmap_s*, %struct.gx_bitmap_s** %17, align 8
  %88 = getelementptr inbounds %struct.gx_bitmap_s, %struct.gx_bitmap_s* %87, i32 0, i32 3
  %89 = load i32, i32* %88, align 8
  %90 = icmp sle i32 %86, %89
  br i1 %90, label %91, label %141

91:                                               ; preds = %79
  %92 = load %struct.gx_bitmap_s*, %struct.gx_bitmap_s** %17, align 8
  %93 = getelementptr inbounds %struct.gx_bitmap_s, %struct.gx_bitmap_s* %92, i32 0, i32 1
  %94 = load i32, i32* %93, align 8
  store i32 %94, i32* %21, align 4
  %95 = load %struct.gx_bitmap_s*, %struct.gx_bitmap_s** %17, align 8
  %96 = getelementptr inbounds %struct.gx_bitmap_s, %struct.gx_bitmap_s* %95, i32 0, i32 0
  %97 = load i8*, i8** %96, align 8
  %98 = load i32, i32* %20, align 4
  %99 = load i32, i32* %21, align 4
  %100 = mul nsw i32 %98, %99
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds i8, i8* %97, i64 %101
  store i8* %102, i8** %22, align 8
  %103 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %12, align 8
  %104 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %103, i32 0, i32 2
  %105 = load i32, i32* %104, align 8
  %106 = icmp slt i32 %105, 0
  br i1 %106, label %107, label %122

107:                                              ; preds = %91
  %108 = load %struct.gx_device_s*, %struct.gx_device_s** %16, align 8
  %109 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %108, i32 0, i32 1
  %110 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %109, align 8
  %111 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %110, i32 0, i32 10
  %112 = load i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32)** %111, align 8
  %113 = load %struct.gx_device_s*, %struct.gx_device_s** %16, align 8
  %114 = load i8*, i8** %22, align 8
  %115 = load i32, i32* %19, align 4
  %116 = load i32, i32* %21, align 4
  %117 = load i32, i32* %8, align 4
  %118 = load i32, i32* %9, align 4
  %119 = load i32, i32* %10, align 4
  %120 = load i32, i32* %11, align 4
  %121 = call i32 %112(%struct.gx_device_s* %113, i8* %114, i32 %115, i32 %116, i32 %117, i32 %118, i32 %119, i32 %120)
  br label %139

122:                                              ; preds = %91
  %123 = load %struct.gx_device_s*, %struct.gx_device_s** %16, align 8
  %124 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %123, i32 0, i32 1
  %125 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %124, align 8
  %126 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %125, i32 0, i32 9
  %127 = load i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)** %126, align 8
  %128 = load %struct.gx_device_s*, %struct.gx_device_s** %16, align 8
  %129 = load i8*, i8** %22, align 8
  %130 = load i32, i32* %19, align 4
  %131 = load i32, i32* %21, align 4
  %132 = load i32, i32* %8, align 4
  %133 = load i32, i32* %9, align 4
  %134 = load i32, i32* %10, align 4
  %135 = load i32, i32* %11, align 4
  %136 = load i64, i64* %14, align 8
  %137 = load i64, i64* %15, align 8
  %138 = call i32 %127(%struct.gx_device_s* %128, i8* %129, i32 %130, i32 %131, i32 %132, i32 %133, i32 %134, i32 %135, i64 %136, i64 %137)
  br label %139

139:                                              ; preds = %122, %107
  %140 = phi i32 [ %121, %107 ], [ %138, %122 ]
  store i32 %140, i32* %7, align 4
  br label %177

141:                                              ; preds = %79, %66
  br label %142

142:                                              ; preds = %141, %60, %48
  %143 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %12, align 8
  %144 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %143, i32 0, i32 2
  %145 = load i32, i32* %144, align 8
  %146 = icmp slt i32 %145, 0
  br i1 %146, label %147, label %148

147:                                              ; preds = %142
  store i64 -1, i64* %15, align 8
  store i64 -1, i64* %14, align 8
  br label %148

148:                                              ; preds = %147, %142
  %149 = load %struct.gx_device_s*, %struct.gx_device_s** %16, align 8
  %150 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %149, i32 0, i32 1
  %151 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %150, align 8
  %152 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %151, i32 0, i32 8
  %153 = load i32 (%struct.gx_device_s*, %struct.gx_bitmap_s*, i32, i32, i32, i32, i64, i64)*, i32 (%struct.gx_device_s*, %struct.gx_bitmap_s*, i32, i32, i32, i32, i64, i64)** %152, align 8
  %154 = load %struct.gx_device_s*, %struct.gx_device_s** %16, align 8
  %155 = load %struct.gx_bitmap_s*, %struct.gx_bitmap_s** %17, align 8
  %156 = load i32, i32* %8, align 4
  %157 = load i32, i32* %9, align 4
  %158 = load i32, i32* %10, align 4
  %159 = load i32, i32* %11, align 4
  %160 = load i64, i64* %14, align 8
  %161 = load i64, i64* %15, align 8
  %162 = call i32 %153(%struct.gx_device_s* %154, %struct.gx_bitmap_s* %155, i32 %156, i32 %157, i32 %158, i32 %159, i64 %160, i64 %161)
  store i32 %162, i32* %18, align 4
  %163 = load i32, i32* %18, align 4
  %164 = icmp slt i32 %163, 0
  br i1 %164, label %165, label %175

165:                                              ; preds = %148
  %166 = load %struct.gx_device_s*, %struct.gx_device_s** %16, align 8
  %167 = load %struct.gx_bitmap_s*, %struct.gx_bitmap_s** %17, align 8
  %168 = load i32, i32* %8, align 4
  %169 = load i32, i32* %9, align 4
  %170 = load i32, i32* %10, align 4
  %171 = load i32, i32* %11, align 4
  %172 = load i64, i64* %14, align 8
  %173 = load i64, i64* %15, align 8
  %174 = call i32 @gx_default_tile_rectangle(%struct.gx_device_s* %166, %struct.gx_bitmap_s* %167, i32 %168, i32 %169, i32 %170, i32 %171, i64 %172, i64 %173)
  store i32 %174, i32* %18, align 4
  br label %175

175:                                              ; preds = %165, %148
  %176 = load i32, i32* %18, align 4
  store i32 %176, i32* %7, align 4
  br label %177

177:                                              ; preds = %175, %139, %35
  %178 = load i32, i32* %7, align 4
  ret i32 %178
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_default_tile_rectangle(%struct.gx_device_s* %0, %struct.gx_bitmap_s* %1, i32 %2, i32 %3, i32 %4, i32 %5, i64 %6, i64 %7) #0 {
  %9 = alloca %struct.gx_device_s*, align 8
  %10 = alloca %struct.gx_bitmap_s*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i8*, align 8
  %29 = alloca i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)*, align 8
  %30 = alloca i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32)*, align 8
  %31 = alloca i32, align 4
  %32 = alloca i32, align 4
  %33 = alloca i32, align 4
  store %struct.gx_device_s* %0, %struct.gx_device_s** %9, align 8
  store %struct.gx_bitmap_s* %1, %struct.gx_bitmap_s** %10, align 8
  store i32 %2, i32* %11, align 4
  store i32 %3, i32* %12, align 4
  store i32 %4, i32* %13, align 4
  store i32 %5, i32* %14, align 4
  store i64 %6, i64* %15, align 8
  store i64 %7, i64* %16, align 8
  %34 = load %struct.gx_bitmap_s*, %struct.gx_bitmap_s** %10, align 8
  %35 = getelementptr inbounds %struct.gx_bitmap_s, %struct.gx_bitmap_s* %34, i32 0, i32 2
  %36 = load i32, i32* %35, align 4
  store i32 %36, i32* %17, align 4
  %37 = load %struct.gx_bitmap_s*, %struct.gx_bitmap_s** %10, align 8
  %38 = getelementptr inbounds %struct.gx_bitmap_s, %struct.gx_bitmap_s* %37, i32 0, i32 3
  %39 = load i32, i32* %38, align 8
  store i32 %39, i32* %18, align 4
  %40 = load %struct.gx_bitmap_s*, %struct.gx_bitmap_s** %10, align 8
  %41 = getelementptr inbounds %struct.gx_bitmap_s, %struct.gx_bitmap_s* %40, i32 0, i32 1
  %42 = load i32, i32* %41, align 8
  store i32 %42, i32* %19, align 4
  %43 = load i32, i32* %11, align 4
  %44 = load i32, i32* %13, align 4
  %45 = add nsw i32 %43, %44
  store i32 %45, i32* %20, align 4
  %46 = load i32, i32* %12, align 4
  %47 = load i32, i32* %14, align 4
  %48 = add nsw i32 %46, %47
  store i32 %48, i32* %21, align 4
  %49 = load i32, i32* %20, align 4
  %50 = load i32, i32* %17, align 4
  %51 = sub nsw i32 %49, %50
  store i32 %51, i32* %22, align 4
  %52 = load i32, i32* %21, align 4
  %53 = load i32, i32* %18, align 4
  %54 = sub nsw i32 %52, %53
  store i32 %54, i32* %23, align 4
  %55 = load i32, i32* %17, align 4
  %56 = load i32, i32* %17, align 4
  %57 = sub nsw i32 %56, 1
  %58 = and i32 %55, %57
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %65

60:                                               ; preds = %8
  %61 = load i32, i32* %11, align 4
  %62 = load i32, i32* %17, align 4
  %63 = sub nsw i32 %62, 1
  %64 = and i32 %61, %63
  br label %69

65:                                               ; preds = %8
  %66 = load i32, i32* %11, align 4
  %67 = load i32, i32* %17, align 4
  %68 = srem i32 %66, %67
  br label %69

69:                                               ; preds = %65, %60
  %70 = phi i32 [ %64, %60 ], [ %68, %65 ]
  store i32 %70, i32* %24, align 4
  %71 = load i32, i32* %12, align 4
  %72 = load i32, i32* %18, align 4
  %73 = srem i32 %71, %72
  store i32 %73, i32* %25, align 4
  %74 = load i32, i32* %17, align 4
  %75 = load i32, i32* %24, align 4
  %76 = sub nsw i32 %74, %75
  store i32 %76, i32* %26, align 4
  %77 = load i32, i32* %18, align 4
  %78 = load i32, i32* %25, align 4
  %79 = sub nsw i32 %77, %78
  store i32 %79, i32* %27, align 4
  %80 = load %struct.gx_bitmap_s*, %struct.gx_bitmap_s** %10, align 8
  %81 = getelementptr inbounds %struct.gx_bitmap_s, %struct.gx_bitmap_s* %80, i32 0, i32 0
  %82 = load i8*, i8** %81, align 8
  %83 = load i32, i32* %25, align 4
  %84 = load i32, i32* %19, align 4
  %85 = mul nsw i32 %83, %84
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds i8, i8* %82, i64 %86
  store i8* %87, i8** %28, align 8
  %88 = load i64, i64* %15, align 8
  %89 = icmp eq i64 %88, -1
  br i1 %89, label %90, label %93

90:                                               ; preds = %69
  %91 = load i64, i64* %16, align 8
  %92 = icmp eq i64 %91, -1
  br label %93

93:                                               ; preds = %90, %69
  %94 = phi i1 [ false, %69 ], [ %92, %90 ]
  %95 = zext i1 %94 to i32
  store i32 %95, i32* %31, align 4
  %96 = load i32, i32* %31, align 4
  %97 = icmp ne i32 %96, 0
  br i1 %97, label %98, label %104

98:                                               ; preds = %93
  %99 = load %struct.gx_device_s*, %struct.gx_device_s** %9, align 8
  %100 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %99, i32 0, i32 1
  %101 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %100, align 8
  %102 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %101, i32 0, i32 10
  %103 = load i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32)** %102, align 8
  store i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32)* %103, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32)** %30, align 8
  br label %110

104:                                              ; preds = %93
  %105 = load %struct.gx_device_s*, %struct.gx_device_s** %9, align 8
  %106 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %105, i32 0, i32 1
  %107 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %106, align 8
  %108 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %107, i32 0, i32 9
  %109 = load i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)** %108, align 8
  store i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)* %109, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)** %29, align 8
  br label %110

110:                                              ; preds = %104, %98
  %111 = load i32, i32* %26, align 4
  %112 = load i32, i32* %13, align 4
  %113 = icmp sgt i32 %111, %112
  br i1 %113, label %114, label %116

114:                                              ; preds = %110
  %115 = load i32, i32* %13, align 4
  store i32 %115, i32* %26, align 4
  br label %116

116:                                              ; preds = %114, %110
  %117 = load i32, i32* %27, align 4
  %118 = load i32, i32* %14, align 4
  %119 = icmp sgt i32 %117, %118
  br i1 %119, label %120, label %122

120:                                              ; preds = %116
  %121 = load i32, i32* %14, align 4
  store i32 %121, i32* %27, align 4
  br label %122

122:                                              ; preds = %120, %116
  %123 = load i32, i32* %12, align 4
  store i32 %123, i32* %33, align 4
  br label %124

124:                                              ; preds = %242, %122
  %125 = load i32, i32* %33, align 4
  %126 = load i32, i32* %21, align 4
  %127 = icmp slt i32 %125, %126
  br i1 %127, label %128, label %247

128:                                              ; preds = %124
  %129 = load i32, i32* %31, align 4
  %130 = icmp ne i32 %129, 0
  br i1 %130, label %131, label %142

131:                                              ; preds = %128
  %132 = load i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32)** %30, align 8
  %133 = load %struct.gx_device_s*, %struct.gx_device_s** %9, align 8
  %134 = load i8*, i8** %28, align 8
  %135 = load i32, i32* %24, align 4
  %136 = load i32, i32* %19, align 4
  %137 = load i32, i32* %11, align 4
  %138 = load i32, i32* %33, align 4
  %139 = load i32, i32* %26, align 4
  %140 = load i32, i32* %27, align 4
  %141 = call i32 %132(%struct.gx_device_s* %133, i8* %134, i32 %135, i32 %136, i32 %137, i32 %138, i32 %139, i32 %140)
  br label %155

142:                                              ; preds = %128
  %143 = load i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)** %29, align 8
  %144 = load %struct.gx_device_s*, %struct.gx_device_s** %9, align 8
  %145 = load i8*, i8** %28, align 8
  %146 = load i32, i32* %24, align 4
  %147 = load i32, i32* %19, align 4
  %148 = load i32, i32* %11, align 4
  %149 = load i32, i32* %33, align 4
  %150 = load i32, i32* %26, align 4
  %151 = load i32, i32* %27, align 4
  %152 = load i64, i64* %15, align 8
  %153 = load i64, i64* %16, align 8
  %154 = call i32 %143(%struct.gx_device_s* %144, i8* %145, i32 %146, i32 %147, i32 %148, i32 %149, i32 %150, i32 %151, i64 %152, i64 %153)
  br label %155

155:                                              ; preds = %142, %131
  %156 = phi i32 [ %141, %131 ], [ %154, %142 ]
  %157 = load i32, i32* %11, align 4
  %158 = load i32, i32* %26, align 4
  %159 = add nsw i32 %157, %158
  store i32 %159, i32* %32, align 4
  br label %160

160:                                              ; preds = %189, %155
  %161 = load i32, i32* %32, align 4
  %162 = load i32, i32* %22, align 4
  %163 = icmp sle i32 %161, %162
  br i1 %163, label %164, label %194

164:                                              ; preds = %160
  %165 = load i32, i32* %31, align 4
  %166 = icmp ne i32 %165, 0
  br i1 %166, label %167, label %177

167:                                              ; preds = %164
  %168 = load i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32)** %30, align 8
  %169 = load %struct.gx_device_s*, %struct.gx_device_s** %9, align 8
  %170 = load i8*, i8** %28, align 8
  %171 = load i32, i32* %19, align 4
  %172 = load i32, i32* %32, align 4
  %173 = load i32, i32* %33, align 4
  %174 = load i32, i32* %17, align 4
  %175 = load i32, i32* %27, align 4
  %176 = call i32 %168(%struct.gx_device_s* %169, i8* %170, i32 0, i32 %171, i32 %172, i32 %173, i32 %174, i32 %175)
  br label %189

177:                                              ; preds = %164
  %178 = load i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)** %29, align 8
  %179 = load %struct.gx_device_s*, %struct.gx_device_s** %9, align 8
  %180 = load i8*, i8** %28, align 8
  %181 = load i32, i32* %19, align 4
  %182 = load i32, i32* %32, align 4
  %183 = load i32, i32* %33, align 4
  %184 = load i32, i32* %17, align 4
  %185 = load i32, i32* %27, align 4
  %186 = load i64, i64* %15, align 8
  %187 = load i64, i64* %16, align 8
  %188 = call i32 %178(%struct.gx_device_s* %179, i8* %180, i32 0, i32 %181, i32 %182, i32 %183, i32 %184, i32 %185, i64 %186, i64 %187)
  br label %189

189:                                              ; preds = %177, %167
  %190 = phi i32 [ %176, %167 ], [ %188, %177 ]
  %191 = load i32, i32* %17, align 4
  %192 = load i32, i32* %32, align 4
  %193 = add nsw i32 %192, %191
  store i32 %193, i32* %32, align 4
  br label %160

194:                                              ; preds = %160
  %195 = load i32, i32* %32, align 4
  %196 = load i32, i32* %20, align 4
  %197 = icmp slt i32 %195, %196
  br i1 %197, label %198, label %229

198:                                              ; preds = %194
  %199 = load i32, i32* %31, align 4
  %200 = icmp ne i32 %199, 0
  br i1 %200, label %201, label %213

201:                                              ; preds = %198
  %202 = load i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32)** %30, align 8
  %203 = load %struct.gx_device_s*, %struct.gx_device_s** %9, align 8
  %204 = load i8*, i8** %28, align 8
  %205 = load i32, i32* %19, align 4
  %206 = load i32, i32* %32, align 4
  %207 = load i32, i32* %33, align 4
  %208 = load i32, i32* %20, align 4
  %209 = load i32, i32* %32, align 4
  %210 = sub nsw i32 %208, %209
  %211 = load i32, i32* %27, align 4
  %212 = call i32 %202(%struct.gx_device_s* %203, i8* %204, i32 0, i32 %205, i32 %206, i32 %207, i32 %210, i32 %211)
  br label %227

213:                                              ; preds = %198
  %214 = load i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)*, i32 (%struct.gx_device_s*, i8*, i32, i32, i32, i32, i32, i32, i64, i64)** %29, align 8
  %215 = load %struct.gx_device_s*, %struct.gx_device_s** %9, align 8
  %216 = load i8*, i8** %28, align 8
  %217 = load i32, i32* %19, align 4
  %218 = load i32, i32* %32, align 4
  %219 = load i32, i32* %33, align 4
  %220 = load i32, i32* %20, align 4
  %221 = load i32, i32* %32, align 4
  %222 = sub nsw i32 %220, %221
  %223 = load i32, i32* %27, align 4
  %224 = load i64, i64* %15, align 8
  %225 = load i64, i64* %16, align 8
  %226 = call i32 %214(%struct.gx_device_s* %215, i8* %216, i32 0, i32 %217, i32 %218, i32 %219, i32 %222, i32 %223, i64 %224, i64 %225)
  br label %227

227:                                              ; preds = %213, %201
  %228 = phi i32 [ %212, %201 ], [ %226, %213 ]
  br label %229

229:                                              ; preds = %227, %194
  %230 = load i32, i32* %27, align 4
  %231 = load i32, i32* %33, align 4
  %232 = add nsw i32 %231, %230
  store i32 %232, i32* %33, align 4
  %233 = load i32, i32* %33, align 4
  %234 = load i32, i32* %23, align 4
  %235 = icmp sgt i32 %233, %234
  br i1 %235, label %236, label %240

236:                                              ; preds = %229
  %237 = load i32, i32* %21, align 4
  %238 = load i32, i32* %33, align 4
  %239 = sub nsw i32 %237, %238
  br label %242

240:                                              ; preds = %229
  %241 = load i32, i32* %18, align 4
  br label %242

242:                                              ; preds = %240, %236
  %243 = phi i32 [ %239, %236 ], [ %241, %240 ]
  store i32 %243, i32* %27, align 4
  %244 = load %struct.gx_bitmap_s*, %struct.gx_bitmap_s** %10, align 8
  %245 = getelementptr inbounds %struct.gx_bitmap_s, %struct.gx_bitmap_s* %244, i32 0, i32 0
  %246 = load i8*, i8** %245, align 8
  store i8* %246, i8** %28, align 8
  br label %124

247:                                              ; preds = %124
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gz_fill_trapezoid_fixed(i64 %0, i64 %1, i64 %2, i64 %3, i64 %4, i64 %5, i32 %6, %struct.gx_device_color_s* %7, %struct.gs_state_s* %8) #0 {
  %10 = alloca i32, align 4
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i32, align 4
  %18 = alloca %struct.gx_device_color_s*, align 8
  %19 = alloca %struct.gs_state_s*, align 8
  %20 = alloca i32, align 4
  %21 = alloca i64, align 8
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i64, align 8
  %26 = alloca i32, align 4
  %27 = alloca i64, align 8
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca %struct.gx_device_s*, align 8
  %31 = alloca i32, align 4
  %32 = alloca i32, align 4
  %33 = alloca i32, align 4
  %34 = alloca i32, align 4
  %35 = alloca i32, align 4
  %36 = alloca i32, align 4
  %37 = alloca i32, align 4
  %38 = alloca i32, align 4
  %39 = alloca i32, align 4
  %40 = alloca i32, align 4
  %41 = alloca i32, align 4
  %42 = alloca i32, align 4
  %43 = alloca i32, align 4
  %44 = alloca i32, align 4
  store i64 %0, i64* %11, align 8
  store i64 %1, i64* %12, align 8
  store i64 %2, i64* %13, align 8
  store i64 %3, i64* %14, align 8
  store i64 %4, i64* %15, align 8
  store i64 %5, i64* %16, align 8
  store i32 %6, i32* %17, align 4
  store %struct.gx_device_color_s* %7, %struct.gx_device_color_s** %18, align 8
  store %struct.gs_state_s* %8, %struct.gs_state_s** %19, align 8
  %45 = load i64, i64* %11, align 8
  %46 = ashr i64 %45, 12
  %47 = trunc i64 %46 to i32
  store i32 %47, i32* %20, align 4
  %48 = load i64, i64* %11, align 8
  %49 = load i64, i64* %12, align 8
  %50 = add nsw i64 %48, %49
  store i64 %50, i64* %21, align 8
  %51 = load i64, i64* %21, align 8
  %52 = add nsw i64 %51, 4095
  %53 = ashr i64 %52, 12
  %54 = trunc i64 %53 to i32
  %55 = load i32, i32* %20, align 4
  %56 = sub nsw i32 %54, %55
  store i32 %56, i32* %22, align 4
  %57 = load i64, i64* %13, align 8
  %58 = ashr i64 %57, 12
  %59 = trunc i64 %58 to i32
  store i32 %59, i32* %23, align 4
  %60 = load i64, i64* %14, align 8
  %61 = ashr i64 %60, 12
  %62 = trunc i64 %61 to i32
  store i32 %62, i32* %24, align 4
  %63 = load i64, i64* %14, align 8
  %64 = load i64, i64* %15, align 8
  %65 = add nsw i64 %63, %64
  store i64 %65, i64* %25, align 8
  %66 = load i64, i64* %25, align 8
  %67 = add nsw i64 %66, 4095
  %68 = ashr i64 %67, 12
  %69 = trunc i64 %68 to i32
  %70 = load i32, i32* %24, align 4
  %71 = sub nsw i32 %69, %70
  store i32 %71, i32* %26, align 4
  %72 = load i64, i64* %13, align 8
  %73 = load i64, i64* %16, align 8
  %74 = add nsw i64 %72, %73
  store i64 %74, i64* %27, align 8
  %75 = load i64, i64* %27, align 8
  %76 = add nsw i64 %75, 4095
  %77 = ashr i64 %76, 12
  %78 = trunc i64 %77 to i32
  store i32 %78, i32* %28, align 4
  %79 = load i32, i32* %28, align 4
  %80 = load i32, i32* %23, align 4
  %81 = sub nsw i32 %79, %80
  store i32 %81, i32* %29, align 4
  %82 = load i32, i32* %22, align 4
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %87

84:                                               ; preds = %9
  %85 = load i32, i32* %26, align 4
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %90, label %87

87:                                               ; preds = %84, %9
  %88 = load i32, i32* %29, align 4
  %89 = icmp sle i32 %88, 0
  br i1 %89, label %90, label %91

90:                                               ; preds = %87, %84
  store i32 0, i32* %10, align 4
  br label %364

91:                                               ; preds = %87
  %92 = load i32, i32* %17, align 4
  %93 = icmp ne i32 %92, 0
  br i1 %93, label %124, label %94

94:                                               ; preds = %91
  %95 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %18, align 8
  %96 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %95, i32 0, i32 2
  %97 = load i32, i32* %96, align 8
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %124

99:                                               ; preds = %94
  %100 = load %struct.gs_state_s*, %struct.gs_state_s** %19, align 8
  %101 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %100, i32 0, i32 22
  %102 = load %struct.device_s*, %struct.device_s** %101, align 8
  %103 = getelementptr inbounds %struct.device_s, %struct.device_s* %102, i32 0, i32 0
  %104 = load %struct.gx_device_s*, %struct.gx_device_s** %103, align 8
  store %struct.gx_device_s* %104, %struct.gx_device_s** %30, align 8
  %105 = load %struct.gx_device_s*, %struct.gx_device_s** %30, align 8
  %106 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %105, i32 0, i32 1
  %107 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %106, align 8
  %108 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %107, i32 0, i32 12
  %109 = load i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, i64)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i32, i32, i64)** %108, align 8
  %110 = load %struct.gx_device_s*, %struct.gx_device_s** %30, align 8
  %111 = load i32, i32* %20, align 4
  %112 = load i32, i32* %23, align 4
  %113 = load i32, i32* %22, align 4
  %114 = load i32, i32* %24, align 4
  %115 = load i32, i32* %28, align 4
  %116 = load i32, i32* %26, align 4
  %117 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %18, align 8
  %118 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %117, i32 0, i32 0
  %119 = load i64, i64* %118, align 8
  %120 = call i32 %109(%struct.gx_device_s* %110, i32 %111, i32 %112, i32 %113, i32 %114, i32 %115, i32 %116, i64 %119)
  %121 = icmp sge i32 %120, 0
  br i1 %121, label %122, label %123

122:                                              ; preds = %99
  store i32 0, i32* %10, align 4
  br label %364

123:                                              ; preds = %99
  br label %124

124:                                              ; preds = %123, %94, %91
  %125 = load i32, i32* %24, align 4
  %126 = load i32, i32* %20, align 4
  %127 = sub nsw i32 %125, %126
  store i32 %127, i32* %35, align 4
  %128 = load i32, i32* %24, align 4
  %129 = load i32, i32* %26, align 4
  %130 = add nsw i32 %128, %129
  %131 = load i32, i32* %20, align 4
  %132 = load i32, i32* %22, align 4
  %133 = add nsw i32 %131, %132
  %134 = sub nsw i32 %130, %133
  store i32 %134, i32* %40, align 4
  %135 = load i32, i32* %23, align 4
  store i32 %135, i32* %41, align 4
  %136 = load i32, i32* %35, align 4
  %137 = icmp sge i32 %136, 0
  br i1 %137, label %138, label %154

138:                                              ; preds = %124
  %139 = load i32, i32* %35, align 4
  %140 = load i32, i32* %29, align 4
  %141 = icmp sge i32 %139, %140
  br i1 %141, label %142, label %152

142:                                              ; preds = %138
  %143 = load i32, i32* %35, align 4
  %144 = load i32, i32* %29, align 4
  %145 = sdiv i32 %143, %144
  store i32 %145, i32* %33, align 4
  %146 = add nsw i32 %145, 1
  store i32 %146, i32* %34, align 4
  %147 = load i32, i32* %33, align 4
  %148 = load i32, i32* %29, align 4
  %149 = mul nsw i32 %147, %148
  %150 = load i32, i32* %35, align 4
  %151 = sub nsw i32 %150, %149
  store i32 %151, i32* %35, align 4
  br label %153

152:                                              ; preds = %138
  store i32 0, i32* %33, align 4
  store i32 1, i32* %34, align 4
  br label %153

153:                                              ; preds = %152, %142
  br label %173

154:                                              ; preds = %124
  %155 = load i32, i32* %35, align 4
  %156 = load i32, i32* %29, align 4
  %157 = sub nsw i32 0, %156
  %158 = icmp sle i32 %155, %157
  br i1 %158, label %159, label %169

159:                                              ; preds = %154
  %160 = load i32, i32* %35, align 4
  %161 = load i32, i32* %29, align 4
  %162 = sdiv i32 %160, %161
  store i32 %162, i32* %33, align 4
  %163 = sub nsw i32 %162, 1
  store i32 %163, i32* %34, align 4
  %164 = load i32, i32* %33, align 4
  %165 = load i32, i32* %29, align 4
  %166 = mul nsw i32 %164, %165
  %167 = load i32, i32* %35, align 4
  %168 = sub nsw i32 %166, %167
  store i32 %168, i32* %35, align 4
  br label %172

169:                                              ; preds = %154
  store i32 0, i32* %33, align 4
  store i32 -1, i32* %34, align 4
  %170 = load i32, i32* %35, align 4
  %171 = sub nsw i32 0, %170
  store i32 %171, i32* %35, align 4
  br label %172

172:                                              ; preds = %169, %159
  br label %173

173:                                              ; preds = %172, %153
  %174 = load i32, i32* %40, align 4
  %175 = icmp sge i32 %174, 0
  br i1 %175, label %176, label %221

176:                                              ; preds = %173
  %177 = load i32, i32* %40, align 4
  %178 = load i32, i32* %29, align 4
  %179 = icmp sge i32 %177, %178
  br i1 %179, label %180, label %190

180:                                              ; preds = %176
  %181 = load i32, i32* %40, align 4
  %182 = load i32, i32* %29, align 4
  %183 = sdiv i32 %181, %182
  store i32 %183, i32* %38, align 4
  %184 = add nsw i32 %183, 1
  store i32 %184, i32* %39, align 4
  %185 = load i32, i32* %38, align 4
  %186 = load i32, i32* %29, align 4
  %187 = mul nsw i32 %185, %186
  %188 = load i32, i32* %40, align 4
  %189 = sub nsw i32 %188, %187
  store i32 %189, i32* %40, align 4
  br label %220

190:                                              ; preds = %176
  %191 = load i32, i32* %33, align 4
  %192 = icmp eq i32 %191, 0
  br i1 %192, label %193, label %219

193:                                              ; preds = %190
  %194 = load i32, i32* %35, align 4
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %196, label %219

196:                                              ; preds = %193
  %197 = load i32, i32* %40, align 4
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %219

199:                                              ; preds = %196
  %200 = load i32, i32* %17, align 4
  %201 = icmp ne i32 %200, 0
  br i1 %201, label %202, label %210

202:                                              ; preds = %199
  %203 = load i32, i32* %23, align 4
  %204 = load i32, i32* %20, align 4
  %205 = load i32, i32* %29, align 4
  %206 = load i32, i32* %22, align 4
  %207 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %18, align 8
  %208 = load %struct.gs_state_s*, %struct.gs_state_s** %19, align 8
  %209 = call i32 @gz_fill_rectangle(i32 %203, i32 %204, i32 %205, i32 %206, %struct.gx_device_color_s* %207, %struct.gs_state_s* %208)
  br label %218

210:                                              ; preds = %199
  %211 = load i32, i32* %20, align 4
  %212 = load i32, i32* %23, align 4
  %213 = load i32, i32* %22, align 4
  %214 = load i32, i32* %29, align 4
  %215 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %18, align 8
  %216 = load %struct.gs_state_s*, %struct.gs_state_s** %19, align 8
  %217 = call i32 @gz_fill_rectangle(i32 %211, i32 %212, i32 %213, i32 %214, %struct.gx_device_color_s* %215, %struct.gs_state_s* %216)
  br label %218

218:                                              ; preds = %210, %202
  store i32 0, i32* %10, align 4
  br label %364

219:                                              ; preds = %196, %193, %190
  store i32 0, i32* %38, align 4
  store i32 1, i32* %39, align 4
  br label %220

220:                                              ; preds = %219, %180
  br label %240

221:                                              ; preds = %173
  %222 = load i32, i32* %40, align 4
  %223 = load i32, i32* %29, align 4
  %224 = sub nsw i32 0, %223
  %225 = icmp sle i32 %222, %224
  br i1 %225, label %226, label %236

226:                                              ; preds = %221
  %227 = load i32, i32* %40, align 4
  %228 = load i32, i32* %29, align 4
  %229 = sdiv i32 %227, %228
  store i32 %229, i32* %38, align 4
  %230 = sub nsw i32 %229, 1
  store i32 %230, i32* %39, align 4
  %231 = load i32, i32* %38, align 4
  %232 = load i32, i32* %29, align 4
  %233 = mul nsw i32 %231, %232
  %234 = load i32, i32* %40, align 4
  %235 = sub nsw i32 %233, %234
  store i32 %235, i32* %40, align 4
  br label %239

236:                                              ; preds = %221
  store i32 0, i32* %38, align 4
  store i32 -1, i32* %39, align 4
  %237 = load i32, i32* %40, align 4
  %238 = sub nsw i32 0, %237
  store i32 %238, i32* %40, align 4
  br label %239

239:                                              ; preds = %236, %226
  br label %240

240:                                              ; preds = %239, %220
  %241 = load i32, i32* %20, align 4
  store i32 %241, i32* %31, align 4
  %242 = load i32, i32* %35, align 4
  %243 = ashr i32 %242, 1
  store i32 %243, i32* %32, align 4
  %244 = load i32, i32* %20, align 4
  %245 = load i32, i32* %22, align 4
  %246 = add nsw i32 %244, %245
  store i32 %246, i32* %36, align 4
  %247 = load i32, i32* %40, align 4
  %248 = ashr i32 %247, 1
  store i32 %248, i32* %37, align 4
  %249 = load i32, i32* %31, align 4
  store i32 %249, i32* %42, align 4
  %250 = load i32, i32* %36, align 4
  store i32 %250, i32* %43, align 4
  %251 = load i32, i32* %41, align 4
  store i32 %251, i32* %44, align 4
  br label %252

252:                                              ; preds = %326, %240
  %253 = load i32, i32* %31, align 4
  %254 = load i32, i32* %42, align 4
  %255 = icmp ne i32 %253, %254
  br i1 %255, label %260, label %256

256:                                              ; preds = %252
  %257 = load i32, i32* %36, align 4
  %258 = load i32, i32* %43, align 4
  %259 = icmp ne i32 %257, %258
  br i1 %259, label %260, label %291

260:                                              ; preds = %256, %252
  %261 = load i32, i32* %17, align 4
  %262 = icmp ne i32 %261, 0
  br i1 %262, label %263, label %275

263:                                              ; preds = %260
  %264 = load i32, i32* %44, align 4
  %265 = load i32, i32* %42, align 4
  %266 = load i32, i32* %41, align 4
  %267 = load i32, i32* %44, align 4
  %268 = sub nsw i32 %266, %267
  %269 = load i32, i32* %43, align 4
  %270 = load i32, i32* %42, align 4
  %271 = sub nsw i32 %269, %270
  %272 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %18, align 8
  %273 = load %struct.gs_state_s*, %struct.gs_state_s** %19, align 8
  %274 = call i32 @gz_fill_rectangle(i32 %264, i32 %265, i32 %268, i32 %271, %struct.gx_device_color_s* %272, %struct.gs_state_s* %273)
  br label %287

275:                                              ; preds = %260
  %276 = load i32, i32* %42, align 4
  %277 = load i32, i32* %44, align 4
  %278 = load i32, i32* %43, align 4
  %279 = load i32, i32* %42, align 4
  %280 = sub nsw i32 %278, %279
  %281 = load i32, i32* %41, align 4
  %282 = load i32, i32* %44, align 4
  %283 = sub nsw i32 %281, %282
  %284 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %18, align 8
  %285 = load %struct.gs_state_s*, %struct.gs_state_s** %19, align 8
  %286 = call i32 @gz_fill_rectangle(i32 %276, i32 %277, i32 %280, i32 %283, %struct.gx_device_color_s* %284, %struct.gs_state_s* %285)
  br label %287

287:                                              ; preds = %275, %263
  %288 = load i32, i32* %31, align 4
  store i32 %288, i32* %42, align 4
  %289 = load i32, i32* %36, align 4
  store i32 %289, i32* %43, align 4
  %290 = load i32, i32* %41, align 4
  store i32 %290, i32* %44, align 4
  br label %291

291:                                              ; preds = %287, %256
  %292 = load i32, i32* %35, align 4
  %293 = load i32, i32* %32, align 4
  %294 = add nsw i32 %293, %292
  store i32 %294, i32* %32, align 4
  %295 = load i32, i32* %29, align 4
  %296 = icmp sge i32 %294, %295
  br i1 %296, label %297, label %304

297:                                              ; preds = %291
  %298 = load i32, i32* %29, align 4
  %299 = load i32, i32* %32, align 4
  %300 = sub nsw i32 %299, %298
  store i32 %300, i32* %32, align 4
  %301 = load i32, i32* %34, align 4
  %302 = load i32, i32* %31, align 4
  %303 = add nsw i32 %302, %301
  store i32 %303, i32* %31, align 4
  br label %308

304:                                              ; preds = %291
  %305 = load i32, i32* %33, align 4
  %306 = load i32, i32* %31, align 4
  %307 = add nsw i32 %306, %305
  store i32 %307, i32* %31, align 4
  br label %308

308:                                              ; preds = %304, %297
  %309 = load i32, i32* %40, align 4
  %310 = load i32, i32* %37, align 4
  %311 = add nsw i32 %310, %309
  store i32 %311, i32* %37, align 4
  %312 = load i32, i32* %29, align 4
  %313 = icmp sge i32 %311, %312
  br i1 %313, label %314, label %321

314:                                              ; preds = %308
  %315 = load i32, i32* %29, align 4
  %316 = load i32, i32* %37, align 4
  %317 = sub nsw i32 %316, %315
  store i32 %317, i32* %37, align 4
  %318 = load i32, i32* %39, align 4
  %319 = load i32, i32* %36, align 4
  %320 = add nsw i32 %319, %318
  store i32 %320, i32* %36, align 4
  br label %325

321:                                              ; preds = %308
  %322 = load i32, i32* %38, align 4
  %323 = load i32, i32* %36, align 4
  %324 = add nsw i32 %323, %322
  store i32 %324, i32* %36, align 4
  br label %325

325:                                              ; preds = %321, %314
  br label %326

326:                                              ; preds = %325
  %327 = load i32, i32* %41, align 4
  %328 = add nsw i32 %327, 1
  store i32 %328, i32* %41, align 4
  %329 = load i32, i32* %28, align 4
  %330 = icmp slt i32 %328, %329
  br i1 %330, label %252, label %331

331:                                              ; preds = %326
  %332 = load i32, i32* %41, align 4
  %333 = load i32, i32* %44, align 4
  %334 = icmp ne i32 %332, %333
  br i1 %334, label %335, label %363

335:                                              ; preds = %331
  %336 = load i32, i32* %17, align 4
  %337 = icmp ne i32 %336, 0
  br i1 %337, label %338, label %350

338:                                              ; preds = %335
  %339 = load i32, i32* %44, align 4
  %340 = load i32, i32* %42, align 4
  %341 = load i32, i32* %41, align 4
  %342 = load i32, i32* %44, align 4
  %343 = sub nsw i32 %341, %342
  %344 = load i32, i32* %43, align 4
  %345 = load i32, i32* %42, align 4
  %346 = sub nsw i32 %344, %345
  %347 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %18, align 8
  %348 = load %struct.gs_state_s*, %struct.gs_state_s** %19, align 8
  %349 = call i32 @gz_fill_rectangle(i32 %339, i32 %340, i32 %343, i32 %346, %struct.gx_device_color_s* %347, %struct.gs_state_s* %348)
  br label %362

350:                                              ; preds = %335
  %351 = load i32, i32* %42, align 4
  %352 = load i32, i32* %44, align 4
  %353 = load i32, i32* %43, align 4
  %354 = load i32, i32* %42, align 4
  %355 = sub nsw i32 %353, %354
  %356 = load i32, i32* %41, align 4
  %357 = load i32, i32* %44, align 4
  %358 = sub nsw i32 %356, %357
  %359 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %18, align 8
  %360 = load %struct.gs_state_s*, %struct.gs_state_s** %19, align 8
  %361 = call i32 @gz_fill_rectangle(i32 %351, i32 %352, i32 %355, i32 %358, %struct.gx_device_color_s* %359, %struct.gs_state_s* %360)
  br label %362

362:                                              ; preds = %350, %338
  br label %363

363:                                              ; preds = %362, %331
  store i32 0, i32* %10, align 4
  br label %364

364:                                              ; preds = %363, %218, %122, %90
  %365 = load i32, i32* %10, align 4
  ret i32 %365
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gz_draw_line_fixed(i64 %0, i64 %1, i64 %2, i64 %3, %struct.gx_device_color_s* %4, %struct.gs_state_s* %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca %struct.gx_device_color_s*, align 8
  %13 = alloca %struct.gs_state_s*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca %struct.gx_device_s*, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  store i64 %0, i64* %8, align 8
  store i64 %1, i64* %9, align 8
  store i64 %2, i64* %10, align 8
  store i64 %3, i64* %11, align 8
  store %struct.gx_device_color_s* %4, %struct.gx_device_color_s** %12, align 8
  store %struct.gs_state_s* %5, %struct.gs_state_s** %13, align 8
  %22 = load i64, i64* %8, align 8
  %23 = ashr i64 %22, 12
  %24 = trunc i64 %23 to i32
  store i32 %24, i32* %14, align 4
  %25 = load i64, i64* %9, align 8
  %26 = ashr i64 %25, 12
  %27 = trunc i64 %26 to i32
  store i32 %27, i32* %15, align 4
  %28 = load i64, i64* %10, align 8
  %29 = ashr i64 %28, 12
  %30 = trunc i64 %29 to i32
  store i32 %30, i32* %16, align 4
  %31 = load i64, i64* %11, align 8
  %32 = ashr i64 %31, 12
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %17, align 4
  %34 = load i32, i32* %17, align 4
  %35 = load i32, i32* %15, align 4
  %36 = icmp eq i32 %34, %35
  br i1 %36, label %37, label %66

37:                                               ; preds = %6
  %38 = load i32, i32* %14, align 4
  %39 = load i32, i32* %16, align 4
  %40 = icmp sle i32 %38, %39
  br i1 %40, label %41, label %53

41:                                               ; preds = %37
  %42 = load i32, i32* %14, align 4
  %43 = load i32, i32* %15, align 4
  %44 = load i64, i64* %10, align 8
  %45 = add nsw i64 %44, 4095
  %46 = ashr i64 %45, 12
  %47 = trunc i64 %46 to i32
  %48 = load i32, i32* %14, align 4
  %49 = sub nsw i32 %47, %48
  %50 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %12, align 8
  %51 = load %struct.gs_state_s*, %struct.gs_state_s** %13, align 8
  %52 = call i32 @gz_fill_rectangle(i32 %42, i32 %43, i32 %49, i32 1, %struct.gx_device_color_s* %50, %struct.gs_state_s* %51)
  br label %65

53:                                               ; preds = %37
  %54 = load i32, i32* %16, align 4
  %55 = load i32, i32* %15, align 4
  %56 = load i64, i64* %8, align 8
  %57 = add nsw i64 %56, 4095
  %58 = ashr i64 %57, 12
  %59 = trunc i64 %58 to i32
  %60 = load i32, i32* %16, align 4
  %61 = sub nsw i32 %59, %60
  %62 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %12, align 8
  %63 = load %struct.gs_state_s*, %struct.gs_state_s** %13, align 8
  %64 = call i32 @gz_fill_rectangle(i32 %54, i32 %55, i32 %61, i32 1, %struct.gx_device_color_s* %62, %struct.gs_state_s* %63)
  br label %65

65:                                               ; preds = %53, %41
  br label %160

66:                                               ; preds = %6
  %67 = load %struct.gs_state_s*, %struct.gs_state_s** %13, align 8
  %68 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %67, i32 0, i32 22
  %69 = load %struct.device_s*, %struct.device_s** %68, align 8
  %70 = getelementptr inbounds %struct.device_s, %struct.device_s* %69, i32 0, i32 0
  %71 = load %struct.gx_device_s*, %struct.gx_device_s** %70, align 8
  store %struct.gx_device_s* %71, %struct.gx_device_s** %18, align 8
  %72 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %12, align 8
  %73 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %72, i32 0, i32 2
  %74 = load i32, i32* %73, align 8
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %93

76:                                               ; preds = %66
  %77 = load %struct.gx_device_s*, %struct.gx_device_s** %18, align 8
  %78 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %77, i32 0, i32 1
  %79 = load %struct.gx_device_procs_s*, %struct.gx_device_procs_s** %78, align 8
  %80 = getelementptr inbounds %struct.gx_device_procs_s, %struct.gx_device_procs_s* %79, i32 0, i32 11
  %81 = load i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)*, i32 (%struct.gx_device_s*, i32, i32, i32, i32, i64)** %80, align 8
  %82 = load %struct.gx_device_s*, %struct.gx_device_s** %18, align 8
  %83 = load i32, i32* %14, align 4
  %84 = load i32, i32* %15, align 4
  %85 = load i32, i32* %16, align 4
  %86 = load i32, i32* %17, align 4
  %87 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %12, align 8
  %88 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %87, i32 0, i32 0
  %89 = load i64, i64* %88, align 8
  %90 = call i32 %81(%struct.gx_device_s* %82, i32 %83, i32 %84, i32 %85, i32 %86, i64 %89)
  %91 = icmp sge i32 %90, 0
  br i1 %91, label %92, label %93

92:                                               ; preds = %76
  store i32 0, i32* %7, align 4
  br label %161

93:                                               ; preds = %76, %66
  %94 = load i64, i64* %11, align 8
  %95 = load i64, i64* %9, align 8
  %96 = sub nsw i64 %94, %95
  store i64 %96, i64* %19, align 8
  %97 = load i64, i64* %10, align 8
  %98 = load i64, i64* %8, align 8
  %99 = sub nsw i64 %97, %98
  store i64 %99, i64* %20, align 8
  %100 = load i64, i64* %20, align 8
  %101 = icmp slt i64 %100, 0
  br i1 %101, label %102, label %105

102:                                              ; preds = %93
  %103 = load i64, i64* %20, align 8
  %104 = sub nsw i64 0, %103
  br label %107

105:                                              ; preds = %93
  %106 = load i64, i64* %20, align 8
  br label %107

107:                                              ; preds = %105, %102
  %108 = phi i64 [ %104, %102 ], [ %106, %105 ]
  %109 = load i64, i64* %19, align 8
  %110 = icmp slt i64 %109, 0
  br i1 %110, label %111, label %114

111:                                              ; preds = %107
  %112 = load i64, i64* %19, align 8
  %113 = sub nsw i64 0, %112
  br label %116

114:                                              ; preds = %107
  %115 = load i64, i64* %19, align 8
  br label %116

116:                                              ; preds = %114, %111
  %117 = phi i64 [ %113, %111 ], [ %115, %114 ]
  %118 = icmp sle i64 %108, %117
  br i1 %118, label %119, label %139

119:                                              ; preds = %116
  %120 = load i64, i64* %19, align 8
  %121 = icmp slt i64 %120, 0
  br i1 %121, label %122, label %131

122:                                              ; preds = %119
  %123 = load i64, i64* %8, align 8
  store i64 %123, i64* %21, align 8
  %124 = load i64, i64* %10, align 8
  store i64 %124, i64* %8, align 8
  %125 = load i64, i64* %21, align 8
  store i64 %125, i64* %10, align 8
  %126 = load i64, i64* %9, align 8
  store i64 %126, i64* %21, align 8
  %127 = load i64, i64* %11, align 8
  store i64 %127, i64* %9, align 8
  %128 = load i64, i64* %21, align 8
  store i64 %128, i64* %11, align 8
  %129 = load i64, i64* %19, align 8
  %130 = sub nsw i64 0, %129
  store i64 %130, i64* %19, align 8
  br label %131

131:                                              ; preds = %122, %119
  %132 = load i64, i64* %8, align 8
  %133 = load i64, i64* %9, align 8
  %134 = load i64, i64* %10, align 8
  %135 = load i64, i64* %19, align 8
  %136 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %12, align 8
  %137 = load %struct.gs_state_s*, %struct.gs_state_s** %13, align 8
  %138 = call i32 @gz_fill_trapezoid_fixed(i64 %132, i64 1, i64 %133, i64 %134, i64 1, i64 %135, i32 0, %struct.gx_device_color_s* %136, %struct.gs_state_s* %137)
  br label %159

139:                                              ; preds = %116
  %140 = load i64, i64* %20, align 8
  %141 = icmp slt i64 %140, 0
  br i1 %141, label %142, label %151

142:                                              ; preds = %139
  %143 = load i64, i64* %8, align 8
  store i64 %143, i64* %21, align 8
  %144 = load i64, i64* %10, align 8
  store i64 %144, i64* %8, align 8
  %145 = load i64, i64* %21, align 8
  store i64 %145, i64* %10, align 8
  %146 = load i64, i64* %9, align 8
  store i64 %146, i64* %21, align 8
  %147 = load i64, i64* %11, align 8
  store i64 %147, i64* %9, align 8
  %148 = load i64, i64* %21, align 8
  store i64 %148, i64* %11, align 8
  %149 = load i64, i64* %20, align 8
  %150 = sub nsw i64 0, %149
  store i64 %150, i64* %20, align 8
  br label %151

151:                                              ; preds = %142, %139
  %152 = load i64, i64* %9, align 8
  %153 = load i64, i64* %8, align 8
  %154 = load i64, i64* %11, align 8
  %155 = load i64, i64* %20, align 8
  %156 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %12, align 8
  %157 = load %struct.gs_state_s*, %struct.gs_state_s** %13, align 8
  %158 = call i32 @gz_fill_trapezoid_fixed(i64 %152, i64 1, i64 %153, i64 %154, i64 1, i64 %155, i32 1, %struct.gx_device_color_s* %156, %struct.gs_state_s* %157)
  br label %159

159:                                              ; preds = %151, %131
  br label %160

160:                                              ; preds = %159, %65
  store i32 0, i32* %7, align 4
  br label %161

161:                                              ; preds = %160, %92
  %162 = load i32, i32* %7, align 4
  ret i32 %162
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_default_draw_line(%struct.gx_device_s* %0, i32 %1, i32 %2, i32 %3, i32 %4, i64 %5) #0 {
  %7 = alloca %struct.gx_device_s*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i64, align 8
  store %struct.gx_device_s* %0, %struct.gx_device_s** %7, align 8
  store i32 %1, i32* %8, align 4
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store i32 %4, i32* %11, align 4
  store i64 %5, i64* %12, align 8
  ret i32 -1
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_default_fill_trapezoid(%struct.gx_device_s* %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i64 %7) #0 {
  %9 = alloca %struct.gx_device_s*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i64, align 8
  store %struct.gx_device_s* %0, %struct.gx_device_s** %9, align 8
  store i32 %1, i32* %10, align 4
  store i32 %2, i32* %11, align 4
  store i32 %3, i32* %12, align 4
  store i32 %4, i32* %13, align 4
  store i32 %5, i32* %14, align 4
  store i32 %6, i32* %15, align 4
  store i64 %7, i64* %16, align 8
  ret i32 -1
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_default_tile_trapezoid(%struct.gx_device_s* %0, %struct.gx_bitmap_s* %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i64 %8, i64 %9) #0 {
  %11 = alloca %struct.gx_device_s*, align 8
  %12 = alloca %struct.gx_bitmap_s*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  store %struct.gx_device_s* %0, %struct.gx_device_s** %11, align 8
  store %struct.gx_bitmap_s* %1, %struct.gx_bitmap_s** %12, align 8
  store i32 %2, i32* %13, align 4
  store i32 %3, i32* %14, align 4
  store i32 %4, i32* %15, align 4
  store i32 %5, i32* %16, align 4
  store i32 %6, i32* %17, align 4
  store i32 %7, i32* %18, align 4
  store i64 %8, i64* %19, align 8
  store i64 %9, i64* %20, align 8
  ret i32 -1
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_default_tile_trapezoid_color(%struct.gx_device_s* %0, %struct.gx_bitmap_s* %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7) #0 {
  %9 = alloca %struct.gx_device_s*, align 8
  %10 = alloca %struct.gx_bitmap_s*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  store %struct.gx_device_s* %0, %struct.gx_device_s** %9, align 8
  store %struct.gx_bitmap_s* %1, %struct.gx_bitmap_s** %10, align 8
  store i32 %2, i32* %11, align 4
  store i32 %3, i32* %12, align 4
  store i32 %4, i32* %13, align 4
  store i32 %5, i32* %14, align 4
  store i32 %6, i32* %15, align 4
  store i32 %7, i32* %16, align 4
  ret i32 -1
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_fill_path(%struct.gx_path_s* %0, %struct.gx_device_color_s* %1, %struct.gs_state_s* %2, i32 %3, i64 %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca %struct.gx_path_s*, align 8
  %8 = alloca %struct.gx_device_color_s*, align 8
  %9 = alloca %struct.gs_state_s*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i64, align 8
  %12 = alloca %struct.gx_path_s*, align 8
  %13 = alloca %struct.gx_path_s*, align 8
  %14 = alloca %struct.gx_path_s, align 8
  %15 = alloca i32, align 4
  %16 = alloca %struct.line_list_s, align 8
  %17 = alloca i32, align 4
  %18 = alloca %struct.gs_fixed_rect_s, align 8
  store %struct.gx_path_s* %0, %struct.gx_path_s** %7, align 8
  store %struct.gx_device_color_s* %1, %struct.gx_device_color_s** %8, align 8
  store %struct.gs_state_s* %2, %struct.gs_state_s** %9, align 8
  store i32 %3, i32* %10, align 4
  store i64 %4, i64* %11, align 8
  %19 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  %20 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %19, i32 0, i32 8
  %21 = load %struct.gx_path_s*, %struct.gx_path_s** %20, align 8
  store %struct.gx_path_s* %21, %struct.gx_path_s** %12, align 8
  %22 = load %struct.gx_path_s*, %struct.gx_path_s** %7, align 8
  %23 = call i32 @gx_path_close_subpath(%struct.gx_path_s* %22)
  %24 = load %struct.gx_path_s*, %struct.gx_path_s** %7, align 8
  %25 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %24, i32 0, i32 8
  %26 = load i32, i32* %25, align 8
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %30, label %28

28:                                               ; preds = %5
  %29 = load %struct.gx_path_s*, %struct.gx_path_s** %7, align 8
  store %struct.gx_path_s* %29, %struct.gx_path_s** %13, align 8
  br label %41

30:                                               ; preds = %5
  %31 = load %struct.gx_path_s*, %struct.gx_path_s** %7, align 8
  %32 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  %33 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %32, i32 0, i32 21
  %34 = load float, float* %33, align 8
  %35 = fpext float %34 to double
  %36 = call i32 @gx_path_flatten(%struct.gx_path_s* %31, %struct.gx_path_s* %14, double %35)
  store i32 %36, i32* %15, align 4
  %37 = icmp slt i32 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %30
  %39 = load i32, i32* %15, align 4
  store i32 %39, i32* %6, align 4
  br label %216

40:                                               ; preds = %30
  store %struct.gx_path_s* %14, %struct.gx_path_s** %13, align 8
  br label %41

41:                                               ; preds = %40, %28
  %42 = load %struct.gx_path_s*, %struct.gx_path_s** %13, align 8
  %43 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %42, i32 0, i32 7
  %44 = load i32, i32* %43, align 4
  %45 = load %struct.gx_path_s*, %struct.gx_path_s** %13, align 8
  %46 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %45, i32 0, i32 6
  %47 = load i32, i32* %46, align 8
  %48 = add nsw i32 %44, %47
  %49 = load %struct.gx_path_s*, %struct.gx_path_s** %12, align 8
  %50 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %49, i32 0, i32 7
  %51 = load i32, i32* %50, align 4
  %52 = add nsw i32 %48, %51
  %53 = load %struct.gx_path_s*, %struct.gx_path_s** %12, align 8
  %54 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %53, i32 0, i32 6
  %55 = load i32, i32* %54, align 8
  %56 = add nsw i32 %52, %55
  store i32 %56, i32* %17, align 4
  %57 = load i32, i32* %17, align 4
  %58 = call i32 @alloc_line_list(%struct.line_list_s* %16, i32 %57)
  store i32 %58, i32* %15, align 4
  %59 = icmp ne i32 %58, 0
  br i1 %59, label %208, label %60

60:                                               ; preds = %41
  %61 = load %struct.gx_path_s*, %struct.gx_path_s** %13, align 8
  %62 = call i32 @gx_path_bbox(%struct.gx_path_s* %61, %struct.gs_fixed_rect_s* %18)
  %63 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %18, i32 0, i32 1
  %64 = getelementptr inbounds %struct.timeval, %struct.timeval* %63, i32 0, i32 1
  %65 = load i64, i64* %64, align 8
  %66 = load %struct.gx_path_s*, %struct.gx_path_s** %12, align 8
  %67 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %66, i32 0, i32 3
  %68 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %67, i32 0, i32 1
  %69 = getelementptr inbounds %struct.timeval, %struct.timeval* %68, i32 0, i32 1
  %70 = load i64, i64* %69, align 8
  %71 = icmp sle i64 %65, %70
  br i1 %71, label %72, label %104

72:                                               ; preds = %60
  %73 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %18, i32 0, i32 1
  %74 = getelementptr inbounds %struct.timeval, %struct.timeval* %73, i32 0, i32 0
  %75 = load i64, i64* %74, align 8
  %76 = load %struct.gx_path_s*, %struct.gx_path_s** %12, align 8
  %77 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %76, i32 0, i32 3
  %78 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %77, i32 0, i32 1
  %79 = getelementptr inbounds %struct.timeval, %struct.timeval* %78, i32 0, i32 0
  %80 = load i64, i64* %79, align 8
  %81 = icmp sle i64 %75, %80
  br i1 %81, label %82, label %104

82:                                               ; preds = %72
  %83 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %18, i32 0, i32 0
  %84 = getelementptr inbounds %struct.timeval, %struct.timeval* %83, i32 0, i32 1
  %85 = load i64, i64* %84, align 8
  %86 = load %struct.gx_path_s*, %struct.gx_path_s** %12, align 8
  %87 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %86, i32 0, i32 3
  %88 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %87, i32 0, i32 0
  %89 = getelementptr inbounds %struct.timeval, %struct.timeval* %88, i32 0, i32 1
  %90 = load i64, i64* %89, align 8
  %91 = icmp sge i64 %85, %90
  br i1 %91, label %92, label %104

92:                                               ; preds = %82
  %93 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %18, i32 0, i32 0
  %94 = getelementptr inbounds %struct.timeval, %struct.timeval* %93, i32 0, i32 0
  %95 = load i64, i64* %94, align 8
  %96 = load %struct.gx_path_s*, %struct.gx_path_s** %12, align 8
  %97 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %96, i32 0, i32 3
  %98 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %97, i32 0, i32 0
  %99 = getelementptr inbounds %struct.timeval, %struct.timeval* %98, i32 0, i32 0
  %100 = load i64, i64* %99, align 8
  %101 = icmp sge i64 %95, %100
  br i1 %101, label %102, label %104

102:                                              ; preds = %92
  %103 = getelementptr inbounds %struct.line_list_s, %struct.line_list_s* %16, i32 0, i32 7
  store i32 1, i32* %103, align 8
  br label %196

104:                                              ; preds = %92, %82, %72, %60
  %105 = getelementptr inbounds %struct.line_list_s, %struct.line_list_s* %16, i32 0, i32 7
  store i32 0, i32* %105, align 8
  %106 = load %struct.gx_path_s*, %struct.gx_path_s** %12, align 8
  %107 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %106, i32 0, i32 1
  %108 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %107, i32 0, i32 0
  %109 = getelementptr inbounds %struct.timeval, %struct.timeval* %108, i32 0, i32 0
  %110 = load i64, i64* %109, align 8
  %111 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %18, i32 0, i32 0
  %112 = getelementptr inbounds %struct.timeval, %struct.timeval* %111, i32 0, i32 0
  %113 = load i64, i64* %112, align 8
  %114 = icmp sgt i64 %110, %113
  br i1 %114, label %115, label %123

115:                                              ; preds = %104
  %116 = load %struct.gx_path_s*, %struct.gx_path_s** %12, align 8
  %117 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %116, i32 0, i32 1
  %118 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %117, i32 0, i32 0
  %119 = getelementptr inbounds %struct.timeval, %struct.timeval* %118, i32 0, i32 0
  %120 = load i64, i64* %119, align 8
  %121 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %18, i32 0, i32 0
  %122 = getelementptr inbounds %struct.timeval, %struct.timeval* %121, i32 0, i32 0
  store i64 %120, i64* %122, align 8
  br label %123

123:                                              ; preds = %115, %104
  %124 = load %struct.gx_path_s*, %struct.gx_path_s** %12, align 8
  %125 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %124, i32 0, i32 1
  %126 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %125, i32 0, i32 0
  %127 = getelementptr inbounds %struct.timeval, %struct.timeval* %126, i32 0, i32 1
  %128 = load i64, i64* %127, align 8
  %129 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %18, i32 0, i32 0
  %130 = getelementptr inbounds %struct.timeval, %struct.timeval* %129, i32 0, i32 1
  %131 = load i64, i64* %130, align 8
  %132 = icmp sgt i64 %128, %131
  br i1 %132, label %133, label %141

133:                                              ; preds = %123
  %134 = load %struct.gx_path_s*, %struct.gx_path_s** %12, align 8
  %135 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %134, i32 0, i32 1
  %136 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %135, i32 0, i32 0
  %137 = getelementptr inbounds %struct.timeval, %struct.timeval* %136, i32 0, i32 1
  %138 = load i64, i64* %137, align 8
  %139 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %18, i32 0, i32 0
  %140 = getelementptr inbounds %struct.timeval, %struct.timeval* %139, i32 0, i32 1
  store i64 %138, i64* %140, align 8
  br label %141

141:                                              ; preds = %133, %123
  %142 = load %struct.gx_path_s*, %struct.gx_path_s** %12, align 8
  %143 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %142, i32 0, i32 1
  %144 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %143, i32 0, i32 1
  %145 = getelementptr inbounds %struct.timeval, %struct.timeval* %144, i32 0, i32 0
  %146 = load i64, i64* %145, align 8
  %147 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %18, i32 0, i32 1
  %148 = getelementptr inbounds %struct.timeval, %struct.timeval* %147, i32 0, i32 0
  %149 = load i64, i64* %148, align 8
  %150 = icmp slt i64 %146, %149
  br i1 %150, label %151, label %159

151:                                              ; preds = %141
  %152 = load %struct.gx_path_s*, %struct.gx_path_s** %12, align 8
  %153 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %152, i32 0, i32 1
  %154 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %153, i32 0, i32 1
  %155 = getelementptr inbounds %struct.timeval, %struct.timeval* %154, i32 0, i32 0
  %156 = load i64, i64* %155, align 8
  %157 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %18, i32 0, i32 1
  %158 = getelementptr inbounds %struct.timeval, %struct.timeval* %157, i32 0, i32 0
  store i64 %156, i64* %158, align 8
  br label %159

159:                                              ; preds = %151, %141
  %160 = load %struct.gx_path_s*, %struct.gx_path_s** %12, align 8
  %161 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %160, i32 0, i32 1
  %162 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %161, i32 0, i32 1
  %163 = getelementptr inbounds %struct.timeval, %struct.timeval* %162, i32 0, i32 1
  %164 = load i64, i64* %163, align 8
  %165 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %18, i32 0, i32 1
  %166 = getelementptr inbounds %struct.timeval, %struct.timeval* %165, i32 0, i32 1
  %167 = load i64, i64* %166, align 8
  %168 = icmp slt i64 %164, %167
  br i1 %168, label %169, label %177

169:                                              ; preds = %159
  %170 = load %struct.gx_path_s*, %struct.gx_path_s** %12, align 8
  %171 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %170, i32 0, i32 1
  %172 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %171, i32 0, i32 1
  %173 = getelementptr inbounds %struct.timeval, %struct.timeval* %172, i32 0, i32 1
  %174 = load i64, i64* %173, align 8
  %175 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %18, i32 0, i32 1
  %176 = getelementptr inbounds %struct.timeval, %struct.timeval* %175, i32 0, i32 1
  store i64 %174, i64* %176, align 8
  br label %177

177:                                              ; preds = %169, %159
  %178 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %18, i32 0, i32 0
  %179 = getelementptr inbounds %struct.timeval, %struct.timeval* %178, i32 0, i32 0
  %180 = load i64, i64* %179, align 8
  %181 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %18, i32 0, i32 1
  %182 = getelementptr inbounds %struct.timeval, %struct.timeval* %181, i32 0, i32 0
  %183 = load i64, i64* %182, align 8
  %184 = icmp sge i64 %180, %183
  br i1 %184, label %193, label %185

185:                                              ; preds = %177
  %186 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %18, i32 0, i32 0
  %187 = getelementptr inbounds %struct.timeval, %struct.timeval* %186, i32 0, i32 1
  %188 = load i64, i64* %187, align 8
  %189 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %18, i32 0, i32 1
  %190 = getelementptr inbounds %struct.timeval, %struct.timeval* %189, i32 0, i32 1
  %191 = load i64, i64* %190, align 8
  %192 = icmp sge i64 %188, %191
  br i1 %192, label %193, label %194

193:                                              ; preds = %185, %177
  br label %202

194:                                              ; preds = %185
  %195 = load %struct.gx_path_s*, %struct.gx_path_s** %12, align 8
  call void @add_y_list(%struct.gx_path_s* %195, i16 signext 1, %struct.line_list_s* %16, %struct.gs_fixed_rect_s* %18)
  br label %196

196:                                              ; preds = %194, %102
  %197 = load %struct.gx_path_s*, %struct.gx_path_s** %13, align 8
  call void @add_y_list(%struct.gx_path_s* %197, i16 signext 0, %struct.line_list_s* %16, %struct.gs_fixed_rect_s* %18)
  %198 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %8, align 8
  %199 = load i32, i32* %10, align 4
  %200 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  %201 = load i64, i64* %11, align 8
  call void @fill_loop(%struct.gx_device_color_s* %198, i32 %199, %struct.line_list_s* %16, %struct.gs_fixed_rect_s* %18, %struct.gs_state_s* %200, i64 %201)
  br label %202

202:                                              ; preds = %196, %193
  %203 = getelementptr inbounds %struct.line_list_s, %struct.line_list_s* %16, i32 0, i32 0
  %204 = load %struct.active_line_s*, %struct.active_line_s** %203, align 8
  %205 = bitcast %struct.active_line_s* %204 to i8*
  %206 = getelementptr inbounds %struct.line_list_s, %struct.line_list_s* %16, i32 0, i32 1
  %207 = load i32, i32* %206, align 8
  call void @gs_free(i8* %205, i32 %207, i32 88, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.156, i64 0, i64 0))
  br label %208

208:                                              ; preds = %202, %41
  %209 = load %struct.gx_path_s*, %struct.gx_path_s** %13, align 8
  %210 = load %struct.gx_path_s*, %struct.gx_path_s** %7, align 8
  %211 = icmp ne %struct.gx_path_s* %209, %210
  br i1 %211, label %212, label %214

212:                                              ; preds = %208
  %213 = load %struct.gx_path_s*, %struct.gx_path_s** %13, align 8
  call void @gx_path_release(%struct.gx_path_s* %213)
  br label %214

214:                                              ; preds = %212, %208
  %215 = load i32, i32* %15, align 4
  store i32 %215, i32* %6, align 4
  br label %216

216:                                              ; preds = %214, %38
  %217 = load i32, i32* %6, align 4
  ret i32 %217
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @alloc_line_list(%struct.line_list_s* %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.line_list_s*, align 8
  %5 = alloca i32, align 4
  store %struct.line_list_s* %0, %struct.line_list_s** %4, align 8
  store i32 %1, i32* %5, align 4
  %6 = load i32, i32* %5, align 4
  %7 = load %struct.line_list_s*, %struct.line_list_s** %4, align 8
  %8 = getelementptr inbounds %struct.line_list_s, %struct.line_list_s* %7, i32 0, i32 1
  store i32 %6, i32* %8, align 8
  %9 = load i32, i32* %5, align 4
  %10 = call i8* @gs_malloc(i32 %9, i32 88, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.156, i64 0, i64 0))
  %11 = bitcast i8* %10 to %struct.active_line_s*
  %12 = load %struct.line_list_s*, %struct.line_list_s** %4, align 8
  %13 = getelementptr inbounds %struct.line_list_s, %struct.line_list_s* %12, i32 0, i32 0
  store %struct.active_line_s* %11, %struct.active_line_s** %13, align 8
  %14 = load %struct.line_list_s*, %struct.line_list_s** %4, align 8
  %15 = getelementptr inbounds %struct.line_list_s, %struct.line_list_s* %14, i32 0, i32 0
  %16 = load %struct.active_line_s*, %struct.active_line_s** %15, align 8
  %17 = icmp eq %struct.active_line_s* %16, null
  br i1 %17, label %18, label %19

18:                                               ; preds = %2
  store i32 -25, i32* %3, align 4
  br label %29

19:                                               ; preds = %2
  %20 = load %struct.line_list_s*, %struct.line_list_s** %4, align 8
  %21 = getelementptr inbounds %struct.line_list_s, %struct.line_list_s* %20, i32 0, i32 0
  %22 = load %struct.active_line_s*, %struct.active_line_s** %21, align 8
  %23 = load %struct.line_list_s*, %struct.line_list_s** %4, align 8
  %24 = getelementptr inbounds %struct.line_list_s, %struct.line_list_s* %23, i32 0, i32 3
  store %struct.active_line_s* %22, %struct.active_line_s** %24, align 8
  %25 = load %struct.line_list_s*, %struct.line_list_s** %4, align 8
  %26 = getelementptr inbounds %struct.line_list_s, %struct.line_list_s* %25, i32 0, i32 4
  store %struct.active_line_s* null, %struct.active_line_s** %26, align 8
  %27 = load %struct.line_list_s*, %struct.line_list_s** %4, align 8
  %28 = getelementptr inbounds %struct.line_list_s, %struct.line_list_s* %27, i32 0, i32 5
  store %struct.active_line_s* null, %struct.active_line_s** %28, align 8
  store i32 0, i32* %3, align 4
  br label %29

29:                                               ; preds = %19, %18
  %30 = load i32, i32* %3, align 4
  ret i32 %30
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_y_list(%struct.gx_path_s* %0, i16 signext %1, %struct.line_list_s* %2, %struct.gs_fixed_rect_s* %3) #0 {
  %5 = alloca %struct.gx_path_s*, align 8
  %6 = alloca i16, align 2
  %7 = alloca %struct.line_list_s*, align 8
  %8 = alloca %struct.gs_fixed_rect_s*, align 8
  %9 = alloca %struct.segment_s*, align 8
  %10 = alloca %struct.subpath*, align 8
  %11 = alloca %struct.segment_s*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %struct.segment_s*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca i64, align 8
  %22 = alloca i32, align 4
  store %struct.gx_path_s* %0, %struct.gx_path_s** %5, align 8
  store i16 %1, i16* %6, align 2
  store %struct.line_list_s* %2, %struct.line_list_s** %7, align 8
  store %struct.gs_fixed_rect_s* %3, %struct.gs_fixed_rect_s** %8, align 8
  %23 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %24 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %23, i32 0, i32 4
  %25 = load %struct.subpath*, %struct.subpath** %24, align 8
  %26 = bitcast %struct.subpath* %25 to %struct.segment_s*
  store %struct.segment_s* %26, %struct.segment_s** %9, align 8
  %27 = load %struct.gs_fixed_rect_s*, %struct.gs_fixed_rect_s** %8, align 8
  %28 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %27, i32 0, i32 0
  %29 = getelementptr inbounds %struct.timeval, %struct.timeval* %28, i32 0, i32 0
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %15, align 8
  %31 = load %struct.gs_fixed_rect_s*, %struct.gs_fixed_rect_s** %8, align 8
  %32 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %31, i32 0, i32 0
  %33 = getelementptr inbounds %struct.timeval, %struct.timeval* %32, i32 0, i32 1
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %16, align 8
  %35 = load %struct.gs_fixed_rect_s*, %struct.gs_fixed_rect_s** %8, align 8
  %36 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %35, i32 0, i32 1
  %37 = getelementptr inbounds %struct.timeval, %struct.timeval* %36, i32 0, i32 0
  %38 = load i64, i64* %37, align 8
  store i64 %38, i64* %17, align 8
  %39 = load %struct.gs_fixed_rect_s*, %struct.gs_fixed_rect_s** %8, align 8
  %40 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %39, i32 0, i32 1
  %41 = getelementptr inbounds %struct.timeval, %struct.timeval* %40, i32 0, i32 1
  %42 = load i64, i64* %41, align 8
  store i64 %42, i64* %18, align 8
  %43 = load i16, i16* %6, align 2
  %44 = load %struct.line_list_s*, %struct.line_list_s** %7, align 8
  %45 = getelementptr inbounds %struct.line_list_s, %struct.line_list_s* %44, i32 0, i32 2
  store i16 %43, i16* %45, align 4
  br label %46

46:                                               ; preds = %249, %4
  %47 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  %48 = icmp ne %struct.segment_s* %47, null
  br i1 %48, label %49, label %255

49:                                               ; preds = %46
  %50 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  %51 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %50, i32 0, i32 2
  %52 = load i32, i32* %51, align 8
  switch i32 %52, label %59 [
    i32 0, label %53
  ]

53:                                               ; preds = %49
  %54 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  %55 = bitcast %struct.segment_s* %54 to %struct.subpath*
  store %struct.subpath* %55, %struct.subpath** %10, align 8
  %56 = load %struct.subpath*, %struct.subpath** %10, align 8
  %57 = getelementptr inbounds %struct.subpath, %struct.subpath* %56, i32 0, i32 4
  %58 = load %struct.segment_s*, %struct.segment_s** %57, align 8
  store %struct.segment_s* %58, %struct.segment_s** %11, align 8
  store i32 0, i32* %13, align 4
  br label %249

59:                                               ; preds = %49
  %60 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  %61 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %60, i32 0, i32 3
  %62 = getelementptr inbounds %struct.timeval, %struct.timeval* %61, i32 0, i32 1
  %63 = load i64, i64* %62, align 8
  store i64 %63, i64* %20, align 8
  %64 = load %struct.segment_s*, %struct.segment_s** %14, align 8
  %65 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %64, i32 0, i32 3
  %66 = getelementptr inbounds %struct.timeval, %struct.timeval* %65, i32 0, i32 1
  %67 = load i64, i64* %66, align 8
  store i64 %67, i64* %21, align 8
  %68 = load %struct.segment_s*, %struct.segment_s** %14, align 8
  %69 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %68, i32 0, i32 3
  %70 = getelementptr inbounds %struct.timeval, %struct.timeval* %69, i32 0, i32 0
  %71 = load i64, i64* %70, align 8
  %72 = load i64, i64* %17, align 8
  %73 = icmp sgt i64 %71, %72
  br i1 %73, label %74, label %82

74:                                               ; preds = %59
  %75 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  %76 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %75, i32 0, i32 3
  %77 = getelementptr inbounds %struct.timeval, %struct.timeval* %76, i32 0, i32 0
  %78 = load i64, i64* %77, align 8
  %79 = load i64, i64* %17, align 8
  %80 = icmp sgt i64 %78, %79
  br i1 %80, label %81, label %82

81:                                               ; preds = %74
  br label %119

82:                                               ; preds = %74, %59
  %83 = load i64, i64* %20, align 8
  %84 = load i64, i64* %21, align 8
  %85 = sub nsw i64 %83, %84
  store i64 %85, i64* %19, align 8
  %86 = icmp sgt i64 %85, 0
  br i1 %86, label %87, label %99

87:                                               ; preds = %82
  %88 = load i64, i64* %20, align 8
  %89 = load i64, i64* %16, align 8
  %90 = icmp sle i64 %88, %89
  br i1 %90, label %95, label %91

91:                                               ; preds = %87
  %92 = load i64, i64* %21, align 8
  %93 = load i64, i64* %18, align 8
  %94 = icmp sge i64 %92, %93
  br label %95

95:                                               ; preds = %91, %87
  %96 = phi i1 [ true, %87 ], [ %94, %91 ]
  %97 = zext i1 %96 to i64
  %98 = select i1 %96, i32 0, i32 1
  br label %117

99:                                               ; preds = %82
  %100 = load i64, i64* %19, align 8
  %101 = icmp slt i64 %100, 0
  br i1 %101, label %102, label %114

102:                                              ; preds = %99
  %103 = load i64, i64* %21, align 8
  %104 = load i64, i64* %16, align 8
  %105 = icmp sle i64 %103, %104
  br i1 %105, label %110, label %106

106:                                              ; preds = %102
  %107 = load i64, i64* %20, align 8
  %108 = load i64, i64* %18, align 8
  %109 = icmp sge i64 %107, %108
  br label %110

110:                                              ; preds = %106, %102
  %111 = phi i1 [ true, %102 ], [ %109, %106 ]
  %112 = zext i1 %111 to i64
  %113 = select i1 %111, i32 0, i32 -1
  br label %115

114:                                              ; preds = %99
  br label %115

115:                                              ; preds = %114, %110
  %116 = phi i32 [ %113, %110 ], [ 0, %114 ]
  br label %117

117:                                              ; preds = %115, %95
  %118 = phi i32 [ %98, %95 ], [ %116, %115 ]
  br label %119

119:                                              ; preds = %117, %81
  %120 = phi i32 [ 0, %81 ], [ %118, %117 ]
  store i32 %120, i32* %13, align 4
  %121 = load i32, i32* %13, align 4
  %122 = load i32, i32* %12, align 4
  %123 = icmp sgt i32 %121, %122
  br i1 %123, label %124, label %143

124:                                              ; preds = %119
  %125 = load i32, i32* %12, align 4
  %126 = icmp ne i32 %125, 0
  br i1 %126, label %127, label %134

127:                                              ; preds = %124
  %128 = load %struct.segment_s*, %struct.segment_s** %14, align 8
  %129 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %128, i32 0, i32 0
  %130 = load %struct.segment_s*, %struct.segment_s** %129, align 8
  %131 = load %struct.segment_s*, %struct.segment_s** %14, align 8
  %132 = load i32, i32* %12, align 4
  %133 = load %struct.line_list_s*, %struct.line_list_s** %7, align 8
  call void @add_y_line(%struct.segment_s* %130, %struct.segment_s* %131, i32 %132, %struct.line_list_s* %133)
  br label %134

134:                                              ; preds = %127, %124
  %135 = load i32, i32* %13, align 4
  %136 = icmp ne i32 %135, 0
  br i1 %136, label %137, label %142

137:                                              ; preds = %134
  %138 = load %struct.segment_s*, %struct.segment_s** %14, align 8
  %139 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  %140 = load i32, i32* %13, align 4
  %141 = load %struct.line_list_s*, %struct.line_list_s** %7, align 8
  call void @add_y_line(%struct.segment_s* %138, %struct.segment_s* %139, i32 %140, %struct.line_list_s* %141)
  br label %142

142:                                              ; preds = %137, %134
  br label %143

143:                                              ; preds = %142, %119
  %144 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  %145 = load %struct.segment_s*, %struct.segment_s** %11, align 8
  %146 = icmp eq %struct.segment_s* %144, %145
  br i1 %146, label %147, label %248

147:                                              ; preds = %143
  %148 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  %149 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %148, i32 0, i32 2
  %150 = load i32, i32* %149, align 8
  %151 = icmp ne i32 %150, 2
  br i1 %151, label %152, label %238

152:                                              ; preds = %147
  %153 = load %struct.subpath*, %struct.subpath** %10, align 8
  %154 = getelementptr inbounds %struct.subpath, %struct.subpath* %153, i32 0, i32 3
  %155 = getelementptr inbounds %struct.timeval, %struct.timeval* %154, i32 0, i32 1
  %156 = load i64, i64* %155, align 8
  store i64 %156, i64* %21, align 8
  %157 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  %158 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %157, i32 0, i32 3
  %159 = getelementptr inbounds %struct.timeval, %struct.timeval* %158, i32 0, i32 0
  %160 = load i64, i64* %159, align 8
  %161 = load i64, i64* %17, align 8
  %162 = icmp sgt i64 %160, %161
  br i1 %162, label %163, label %171

163:                                              ; preds = %152
  %164 = load %struct.subpath*, %struct.subpath** %10, align 8
  %165 = getelementptr inbounds %struct.subpath, %struct.subpath* %164, i32 0, i32 3
  %166 = getelementptr inbounds %struct.timeval, %struct.timeval* %165, i32 0, i32 0
  %167 = load i64, i64* %166, align 8
  %168 = load i64, i64* %17, align 8
  %169 = icmp sgt i64 %167, %168
  br i1 %169, label %170, label %171

170:                                              ; preds = %163
  br label %208

171:                                              ; preds = %163, %152
  %172 = load i64, i64* %21, align 8
  %173 = load i64, i64* %20, align 8
  %174 = sub nsw i64 %172, %173
  store i64 %174, i64* %19, align 8
  %175 = icmp sgt i64 %174, 0
  br i1 %175, label %176, label %188

176:                                              ; preds = %171
  %177 = load i64, i64* %21, align 8
  %178 = load i64, i64* %16, align 8
  %179 = icmp sle i64 %177, %178
  br i1 %179, label %184, label %180

180:                                              ; preds = %176
  %181 = load i64, i64* %20, align 8
  %182 = load i64, i64* %18, align 8
  %183 = icmp sge i64 %181, %182
  br label %184

184:                                              ; preds = %180, %176
  %185 = phi i1 [ true, %176 ], [ %183, %180 ]
  %186 = zext i1 %185 to i64
  %187 = select i1 %185, i32 0, i32 1
  br label %206

188:                                              ; preds = %171
  %189 = load i64, i64* %19, align 8
  %190 = icmp slt i64 %189, 0
  br i1 %190, label %191, label %203

191:                                              ; preds = %188
  %192 = load i64, i64* %20, align 8
  %193 = load i64, i64* %16, align 8
  %194 = icmp sle i64 %192, %193
  br i1 %194, label %199, label %195

195:                                              ; preds = %191
  %196 = load i64, i64* %21, align 8
  %197 = load i64, i64* %18, align 8
  %198 = icmp sge i64 %196, %197
  br label %199

199:                                              ; preds = %195, %191
  %200 = phi i1 [ true, %191 ], [ %198, %195 ]
  %201 = zext i1 %200 to i64
  %202 = select i1 %200, i32 0, i32 -1
  br label %204

203:                                              ; preds = %188
  br label %204

204:                                              ; preds = %203, %199
  %205 = phi i32 [ %202, %199 ], [ 0, %203 ]
  br label %206

206:                                              ; preds = %204, %184
  %207 = phi i32 [ %187, %184 ], [ %205, %204 ]
  br label %208

208:                                              ; preds = %206, %170
  %209 = phi i32 [ 0, %170 ], [ %207, %206 ]
  store i32 %209, i32* %22, align 4
  %210 = load i32, i32* %22, align 4
  %211 = load i32, i32* %13, align 4
  %212 = icmp sgt i32 %210, %211
  br i1 %212, label %213, label %221

213:                                              ; preds = %208
  %214 = load i32, i32* %13, align 4
  %215 = icmp ne i32 %214, 0
  br i1 %215, label %216, label %221

216:                                              ; preds = %213
  %217 = load %struct.segment_s*, %struct.segment_s** %14, align 8
  %218 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  %219 = load i32, i32* %13, align 4
  %220 = load %struct.line_list_s*, %struct.line_list_s** %7, align 8
  call void @add_y_line(%struct.segment_s* %217, %struct.segment_s* %218, i32 %219, %struct.line_list_s* %220)
  br label %221

221:                                              ; preds = %216, %213, %208
  %222 = load i32, i32* %22, align 4
  %223 = load i32, i32* %13, align 4
  %224 = icmp sgt i32 %222, %223
  br i1 %224, label %225, label %228

225:                                              ; preds = %221
  %226 = load i32, i32* %22, align 4
  %227 = icmp ne i32 %226, 0
  br i1 %227, label %231, label %228

228:                                              ; preds = %225, %221
  %229 = load i32, i32* %22, align 4
  %230 = icmp slt i32 %229, 0
  br i1 %230, label %231, label %237

231:                                              ; preds = %228, %225
  %232 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  %233 = load %struct.subpath*, %struct.subpath** %10, align 8
  %234 = bitcast %struct.subpath* %233 to %struct.segment_s*
  %235 = load i32, i32* %22, align 4
  %236 = load %struct.line_list_s*, %struct.line_list_s** %7, align 8
  call void @add_y_line(%struct.segment_s* %232, %struct.segment_s* %234, i32 %235, %struct.line_list_s* %236)
  br label %237

237:                                              ; preds = %231, %228
  br label %247

238:                                              ; preds = %147
  %239 = load i32, i32* %13, align 4
  %240 = icmp slt i32 %239, 0
  br i1 %240, label %241, label %246

241:                                              ; preds = %238
  %242 = load %struct.segment_s*, %struct.segment_s** %14, align 8
  %243 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  %244 = load i32, i32* %13, align 4
  %245 = load %struct.line_list_s*, %struct.line_list_s** %7, align 8
  call void @add_y_line(%struct.segment_s* %242, %struct.segment_s* %243, i32 %244, %struct.line_list_s* %245)
  br label %246

246:                                              ; preds = %241, %238
  br label %247

247:                                              ; preds = %246, %237
  br label %248

248:                                              ; preds = %247, %143
  br label %249

249:                                              ; preds = %248, %53
  %250 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  store %struct.segment_s* %250, %struct.segment_s** %14, align 8
  %251 = load i32, i32* %13, align 4
  store i32 %251, i32* %12, align 4
  %252 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  %253 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %252, i32 0, i32 1
  %254 = load %struct.segment_s*, %struct.segment_s** %253, align 8
  store %struct.segment_s* %254, %struct.segment_s** %9, align 8
  br label %46

255:                                              ; preds = %46
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @fill_loop(%struct.gx_device_color_s* %0, i32 %1, %struct.line_list_s* %2, %struct.gs_fixed_rect_s* %3, %struct.gs_state_s* %4, i64 %5) #0 {
  %7 = alloca %struct.gx_device_color_s*, align 8
  %8 = alloca i32, align 4
  %9 = alloca %struct.line_list_s*, align 8
  %10 = alloca %struct.gs_fixed_rect_s*, align 8
  %11 = alloca %struct.gs_state_s*, align 8
  %12 = alloca i64, align 8
  %13 = alloca %struct.active_line_s*, align 8
  %14 = alloca %struct.timeval, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i32, align 4
  %18 = alloca %struct.active_line_s*, align 8
  %19 = alloca %struct.active_line_s*, align 8
  %20 = alloca %struct.active_line_s*, align 8
  %21 = alloca i64, align 8
  %22 = alloca %struct.active_line_s*, align 8
  %23 = alloca i64, align 8
  %24 = alloca %struct.active_line_s*, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca [2 x i32], align 4
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca %struct.active_line_s*, align 8
  store %struct.gx_device_color_s* %0, %struct.gx_device_color_s** %7, align 8
  store i32 %1, i32* %8, align 4
  store %struct.line_list_s* %2, %struct.line_list_s** %9, align 8
  store %struct.gs_fixed_rect_s* %3, %struct.gs_fixed_rect_s** %10, align 8
  store %struct.gs_state_s* %4, %struct.gs_state_s** %11, align 8
  store i64 %5, i64* %12, align 8
  %32 = load %struct.line_list_s*, %struct.line_list_s** %9, align 8
  %33 = getelementptr inbounds %struct.line_list_s, %struct.line_list_s* %32, i32 0, i32 4
  %34 = load %struct.active_line_s*, %struct.active_line_s** %33, align 8
  store %struct.active_line_s* %34, %struct.active_line_s** %13, align 8
  %35 = load %struct.active_line_s*, %struct.active_line_s** %13, align 8
  %36 = icmp eq %struct.active_line_s* %35, null
  br i1 %36, label %37, label %38

37:                                               ; preds = %6
  br label %693

38:                                               ; preds = %6
  %39 = load %struct.gs_fixed_rect_s*, %struct.gs_fixed_rect_s** %10, align 8
  %40 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %39, i32 0, i32 1
  %41 = bitcast %struct.timeval* %14 to i8*
  %42 = bitcast %struct.timeval* %40 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* align 8 %42, i64 16, i1 false)
  %43 = load %struct.active_line_s*, %struct.active_line_s** %13, align 8
  %44 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %43, i32 0, i32 0
  %45 = getelementptr inbounds %struct.timeval, %struct.timeval* %44, i32 0, i32 1
  %46 = load i64, i64* %45, align 8
  store i64 %46, i64* %15, align 8
  %47 = load %struct.line_list_s*, %struct.line_list_s** %9, align 8
  %48 = getelementptr inbounds %struct.line_list_s, %struct.line_list_s* %47, i32 0, i32 6
  %49 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %48, i32 0, i32 10
  store %struct.active_line_s* null, %struct.active_line_s** %49, align 8
  %50 = load %struct.line_list_s*, %struct.line_list_s** %9, align 8
  %51 = getelementptr inbounds %struct.line_list_s, %struct.line_list_s* %50, i32 0, i32 6
  %52 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %51, i32 0, i32 8
  store i16 -4, i16* %52, align 2
  br label %53

53:                                               ; preds = %691, %89, %38
  %54 = load i64, i64* %15, align 8
  %55 = getelementptr inbounds %struct.timeval, %struct.timeval* %14, i32 0, i32 1
  %56 = load i64, i64* %55, align 8
  %57 = icmp sge i64 %54, %56
  br i1 %57, label %58, label %59

58:                                               ; preds = %53
  br label %693

59:                                               ; preds = %53
  br label %60

60:                                               ; preds = %72, %59
  %61 = load %struct.active_line_s*, %struct.active_line_s** %13, align 8
  %62 = icmp ne %struct.active_line_s* %61, null
  br i1 %62, label %63, label %70

63:                                               ; preds = %60
  %64 = load %struct.active_line_s*, %struct.active_line_s** %13, align 8
  %65 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %64, i32 0, i32 0
  %66 = getelementptr inbounds %struct.timeval, %struct.timeval* %65, i32 0, i32 1
  %67 = load i64, i64* %66, align 8
  %68 = load i64, i64* %15, align 8
  %69 = icmp eq i64 %67, %68
  br label %70

70:                                               ; preds = %63, %60
  %71 = phi i1 [ false, %60 ], [ %69, %63 ]
  br i1 %71, label %72, label %79

72:                                               ; preds = %70
  %73 = load %struct.active_line_s*, %struct.active_line_s** %13, align 8
  %74 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %73, i32 0, i32 10
  %75 = load %struct.active_line_s*, %struct.active_line_s** %74, align 8
  store %struct.active_line_s* %75, %struct.active_line_s** %22, align 8
  %76 = load %struct.active_line_s*, %struct.active_line_s** %13, align 8
  %77 = load %struct.line_list_s*, %struct.line_list_s** %9, align 8
  call void @insert_x_new(%struct.active_line_s* %76, %struct.line_list_s* %77)
  %78 = load %struct.active_line_s*, %struct.active_line_s** %22, align 8
  store %struct.active_line_s* %78, %struct.active_line_s** %13, align 8
  br label %60

79:                                               ; preds = %70
  %80 = load %struct.line_list_s*, %struct.line_list_s** %9, align 8
  %81 = getelementptr inbounds %struct.line_list_s, %struct.line_list_s* %80, i32 0, i32 6
  %82 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %81, i32 0, i32 10
  %83 = load %struct.active_line_s*, %struct.active_line_s** %82, align 8
  %84 = icmp eq %struct.active_line_s* %83, null
  br i1 %84, label %85, label %94

85:                                               ; preds = %79
  %86 = load %struct.active_line_s*, %struct.active_line_s** %13, align 8
  %87 = icmp eq %struct.active_line_s* %86, null
  br i1 %87, label %88, label %89

88:                                               ; preds = %85
  br label %693

89:                                               ; preds = %85
  %90 = load %struct.active_line_s*, %struct.active_line_s** %13, align 8
  %91 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %90, i32 0, i32 0
  %92 = getelementptr inbounds %struct.timeval, %struct.timeval* %91, i32 0, i32 1
  %93 = load i64, i64* %92, align 8
  store i64 %93, i64* %15, align 8
  br label %53

94:                                               ; preds = %79
  %95 = load %struct.active_line_s*, %struct.active_line_s** %13, align 8
  %96 = icmp ne %struct.active_line_s* %95, null
  br i1 %96, label %97, label %102

97:                                               ; preds = %94
  %98 = load %struct.active_line_s*, %struct.active_line_s** %13, align 8
  %99 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %98, i32 0, i32 0
  %100 = getelementptr inbounds %struct.timeval, %struct.timeval* %99, i32 0, i32 1
  %101 = load i64, i64* %100, align 8
  br label %103

102:                                              ; preds = %94
  br label %103

103:                                              ; preds = %102, %97
  %104 = phi i64 [ %101, %97 ], [ 2147483647, %102 ]
  store i64 %104, i64* %16, align 8
  %105 = load %struct.line_list_s*, %struct.line_list_s** %9, align 8
  %106 = getelementptr inbounds %struct.line_list_s, %struct.line_list_s* %105, i32 0, i32 6
  %107 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %106, i32 0, i32 10
  %108 = load %struct.active_line_s*, %struct.active_line_s** %107, align 8
  store %struct.active_line_s* %108, %struct.active_line_s** %19, align 8
  br label %109

109:                                              ; preds = %125, %103
  %110 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %111 = icmp ne %struct.active_line_s* %110, null
  br i1 %111, label %112, label %129

112:                                              ; preds = %109
  %113 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %114 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %113, i32 0, i32 1
  %115 = getelementptr inbounds %struct.timeval, %struct.timeval* %114, i32 0, i32 1
  %116 = load i64, i64* %115, align 8
  %117 = load i64, i64* %16, align 8
  %118 = icmp slt i64 %116, %117
  br i1 %118, label %119, label %124

119:                                              ; preds = %112
  %120 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %121 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %120, i32 0, i32 1
  %122 = getelementptr inbounds %struct.timeval, %struct.timeval* %121, i32 0, i32 1
  %123 = load i64, i64* %122, align 8
  store i64 %123, i64* %16, align 8
  br label %124

124:                                              ; preds = %119, %112
  br label %125

125:                                              ; preds = %124
  %126 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %127 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %126, i32 0, i32 10
  %128 = load %struct.active_line_s*, %struct.active_line_s** %127, align 8
  store %struct.active_line_s* %128, %struct.active_line_s** %19, align 8
  br label %109

129:                                              ; preds = %109
  store i32 0, i32* %17, align 4
  store i64 -2147483648, i64* %21, align 8
  %130 = load %struct.line_list_s*, %struct.line_list_s** %9, align 8
  %131 = getelementptr inbounds %struct.line_list_s, %struct.line_list_s* %130, i32 0, i32 6
  %132 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %131, i32 0, i32 10
  %133 = load %struct.active_line_s*, %struct.active_line_s** %132, align 8
  store %struct.active_line_s* %133, %struct.active_line_s** %20, align 8
  %134 = load %struct.active_line_s*, %struct.active_line_s** %20, align 8
  store %struct.active_line_s* %134, %struct.active_line_s** %19, align 8
  br label %135

135:                                              ; preds = %447, %129
  %136 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %137 = icmp ne %struct.active_line_s* %136, null
  br i1 %137, label %138, label %452

138:                                              ; preds = %135
  %139 = load i64, i64* %16, align 8
  %140 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %141 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %140, i32 0, i32 1
  %142 = getelementptr inbounds %struct.timeval, %struct.timeval* %141, i32 0, i32 1
  %143 = load i64, i64* %142, align 8
  %144 = icmp eq i64 %139, %143
  br i1 %144, label %145, label %150

145:                                              ; preds = %138
  %146 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %147 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %146, i32 0, i32 1
  %148 = getelementptr inbounds %struct.timeval, %struct.timeval* %147, i32 0, i32 0
  %149 = load i64, i64* %148, align 8
  br label %221

150:                                              ; preds = %138
  %151 = load i64, i64* %16, align 8
  %152 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %153 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %152, i32 0, i32 2
  %154 = load i64, i64* %153, align 8
  %155 = icmp sle i64 %151, %154
  br i1 %155, label %156, label %183

156:                                              ; preds = %150
  %157 = load i64, i64* %16, align 8
  %158 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %159 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %158, i32 0, i32 0
  %160 = getelementptr inbounds %struct.timeval, %struct.timeval* %159, i32 0, i32 1
  %161 = load i64, i64* %160, align 8
  %162 = sub nsw i64 %157, %161
  %163 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %164 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %163, i32 0, i32 1
  %165 = getelementptr inbounds %struct.timeval, %struct.timeval* %164, i32 0, i32 0
  %166 = load i64, i64* %165, align 8
  %167 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %168 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %167, i32 0, i32 0
  %169 = getelementptr inbounds %struct.timeval, %struct.timeval* %168, i32 0, i32 0
  %170 = load i64, i64* %169, align 8
  %171 = sub nsw i64 %166, %170
  %172 = mul nsw i64 %162, %171
  %173 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %174 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %173, i32 0, i32 1
  %175 = getelementptr inbounds %struct.timeval, %struct.timeval* %174, i32 0, i32 1
  %176 = load i64, i64* %175, align 8
  %177 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %178 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %177, i32 0, i32 0
  %179 = getelementptr inbounds %struct.timeval, %struct.timeval* %178, i32 0, i32 1
  %180 = load i64, i64* %179, align 8
  %181 = sub nsw i64 %176, %180
  %182 = sdiv i64 %172, %181
  br label %214

183:                                              ; preds = %150
  %184 = load i64, i64* %16, align 8
  %185 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %186 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %185, i32 0, i32 0
  %187 = getelementptr inbounds %struct.timeval, %struct.timeval* %186, i32 0, i32 1
  %188 = load i64, i64* %187, align 8
  %189 = sub nsw i64 %184, %188
  %190 = sitofp i64 %189 to double
  %191 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %192 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %191, i32 0, i32 1
  %193 = getelementptr inbounds %struct.timeval, %struct.timeval* %192, i32 0, i32 0
  %194 = load i64, i64* %193, align 8
  %195 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %196 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %195, i32 0, i32 0
  %197 = getelementptr inbounds %struct.timeval, %struct.timeval* %196, i32 0, i32 0
  %198 = load i64, i64* %197, align 8
  %199 = sub nsw i64 %194, %198
  %200 = sitofp i64 %199 to double
  %201 = fmul double %190, %200
  %202 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %203 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %202, i32 0, i32 1
  %204 = getelementptr inbounds %struct.timeval, %struct.timeval* %203, i32 0, i32 1
  %205 = load i64, i64* %204, align 8
  %206 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %207 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %206, i32 0, i32 0
  %208 = getelementptr inbounds %struct.timeval, %struct.timeval* %207, i32 0, i32 1
  %209 = load i64, i64* %208, align 8
  %210 = sub nsw i64 %205, %209
  %211 = sitofp i64 %210 to double
  %212 = fdiv double %201, %211
  %213 = fptosi double %212 to i64
  br label %214

214:                                              ; preds = %183, %156
  %215 = phi i64 [ %182, %156 ], [ %213, %183 ]
  %216 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %217 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %216, i32 0, i32 0
  %218 = getelementptr inbounds %struct.timeval, %struct.timeval* %217, i32 0, i32 0
  %219 = load i64, i64* %218, align 8
  %220 = add nsw i64 %215, %219
  br label %221

221:                                              ; preds = %214, %145
  %222 = phi i64 [ %149, %145 ], [ %220, %214 ]
  store i64 %222, i64* %23, align 8
  %223 = load i64, i64* %23, align 8
  %224 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %225 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %224, i32 0, i32 4
  store i64 %223, i64* %225, align 8
  %226 = load i64, i64* %23, align 8
  %227 = load i64, i64* %21, align 8
  %228 = icmp slt i64 %226, %227
  br i1 %228, label %229, label %429

229:                                              ; preds = %221
  %230 = load %struct.active_line_s*, %struct.active_line_s** %18, align 8
  %231 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %232 = call i64 @find_cross_y(%struct.active_line_s* %230, %struct.active_line_s* %231)
  store i64 %232, i64* %16, align 8
  br label %233

233:                                              ; preds = %406, %229
  %234 = load i64, i64* %16, align 8
  %235 = load %struct.active_line_s*, %struct.active_line_s** %18, align 8
  %236 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %235, i32 0, i32 1
  %237 = getelementptr inbounds %struct.timeval, %struct.timeval* %236, i32 0, i32 1
  %238 = load i64, i64* %237, align 8
  %239 = icmp eq i64 %234, %238
  br i1 %239, label %240, label %245

240:                                              ; preds = %233
  %241 = load %struct.active_line_s*, %struct.active_line_s** %18, align 8
  %242 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %241, i32 0, i32 1
  %243 = getelementptr inbounds %struct.timeval, %struct.timeval* %242, i32 0, i32 0
  %244 = load i64, i64* %243, align 8
  br label %316

245:                                              ; preds = %233
  %246 = load i64, i64* %16, align 8
  %247 = load %struct.active_line_s*, %struct.active_line_s** %18, align 8
  %248 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %247, i32 0, i32 2
  %249 = load i64, i64* %248, align 8
  %250 = icmp sle i64 %246, %249
  br i1 %250, label %251, label %278

251:                                              ; preds = %245
  %252 = load i64, i64* %16, align 8
  %253 = load %struct.active_line_s*, %struct.active_line_s** %18, align 8
  %254 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %253, i32 0, i32 0
  %255 = getelementptr inbounds %struct.timeval, %struct.timeval* %254, i32 0, i32 1
  %256 = load i64, i64* %255, align 8
  %257 = sub nsw i64 %252, %256
  %258 = load %struct.active_line_s*, %struct.active_line_s** %18, align 8
  %259 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %258, i32 0, i32 1
  %260 = getelementptr inbounds %struct.timeval, %struct.timeval* %259, i32 0, i32 0
  %261 = load i64, i64* %260, align 8
  %262 = load %struct.active_line_s*, %struct.active_line_s** %18, align 8
  %263 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %262, i32 0, i32 0
  %264 = getelementptr inbounds %struct.timeval, %struct.timeval* %263, i32 0, i32 0
  %265 = load i64, i64* %264, align 8
  %266 = sub nsw i64 %261, %265
  %267 = mul nsw i64 %257, %266
  %268 = load %struct.active_line_s*, %struct.active_line_s** %18, align 8
  %269 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %268, i32 0, i32 1
  %270 = getelementptr inbounds %struct.timeval, %struct.timeval* %269, i32 0, i32 1
  %271 = load i64, i64* %270, align 8
  %272 = load %struct.active_line_s*, %struct.active_line_s** %18, align 8
  %273 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %272, i32 0, i32 0
  %274 = getelementptr inbounds %struct.timeval, %struct.timeval* %273, i32 0, i32 1
  %275 = load i64, i64* %274, align 8
  %276 = sub nsw i64 %271, %275
  %277 = sdiv i64 %267, %276
  br label %309

278:                                              ; preds = %245
  %279 = load i64, i64* %16, align 8
  %280 = load %struct.active_line_s*, %struct.active_line_s** %18, align 8
  %281 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %280, i32 0, i32 0
  %282 = getelementptr inbounds %struct.timeval, %struct.timeval* %281, i32 0, i32 1
  %283 = load i64, i64* %282, align 8
  %284 = sub nsw i64 %279, %283
  %285 = sitofp i64 %284 to double
  %286 = load %struct.active_line_s*, %struct.active_line_s** %18, align 8
  %287 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %286, i32 0, i32 1
  %288 = getelementptr inbounds %struct.timeval, %struct.timeval* %287, i32 0, i32 0
  %289 = load i64, i64* %288, align 8
  %290 = load %struct.active_line_s*, %struct.active_line_s** %18, align 8
  %291 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %290, i32 0, i32 0
  %292 = getelementptr inbounds %struct.timeval, %struct.timeval* %291, i32 0, i32 0
  %293 = load i64, i64* %292, align 8
  %294 = sub nsw i64 %289, %293
  %295 = sitofp i64 %294 to double
  %296 = fmul double %285, %295
  %297 = load %struct.active_line_s*, %struct.active_line_s** %18, align 8
  %298 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %297, i32 0, i32 1
  %299 = getelementptr inbounds %struct.timeval, %struct.timeval* %298, i32 0, i32 1
  %300 = load i64, i64* %299, align 8
  %301 = load %struct.active_line_s*, %struct.active_line_s** %18, align 8
  %302 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %301, i32 0, i32 0
  %303 = getelementptr inbounds %struct.timeval, %struct.timeval* %302, i32 0, i32 1
  %304 = load i64, i64* %303, align 8
  %305 = sub nsw i64 %300, %304
  %306 = sitofp i64 %305 to double
  %307 = fdiv double %296, %306
  %308 = fptosi double %307 to i64
  br label %309

309:                                              ; preds = %278, %251
  %310 = phi i64 [ %277, %251 ], [ %308, %278 ]
  %311 = load %struct.active_line_s*, %struct.active_line_s** %18, align 8
  %312 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %311, i32 0, i32 0
  %313 = getelementptr inbounds %struct.timeval, %struct.timeval* %312, i32 0, i32 0
  %314 = load i64, i64* %313, align 8
  %315 = add nsw i64 %310, %314
  br label %316

316:                                              ; preds = %309, %240
  %317 = phi i64 [ %244, %240 ], [ %315, %309 ]
  store i64 %317, i64* %21, align 8
  %318 = load i64, i64* %16, align 8
  %319 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %320 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %319, i32 0, i32 1
  %321 = getelementptr inbounds %struct.timeval, %struct.timeval* %320, i32 0, i32 1
  %322 = load i64, i64* %321, align 8
  %323 = icmp eq i64 %318, %322
  br i1 %323, label %324, label %329

324:                                              ; preds = %316
  %325 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %326 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %325, i32 0, i32 1
  %327 = getelementptr inbounds %struct.timeval, %struct.timeval* %326, i32 0, i32 0
  %328 = load i64, i64* %327, align 8
  br label %400

329:                                              ; preds = %316
  %330 = load i64, i64* %16, align 8
  %331 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %332 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %331, i32 0, i32 2
  %333 = load i64, i64* %332, align 8
  %334 = icmp sle i64 %330, %333
  br i1 %334, label %335, label %362

335:                                              ; preds = %329
  %336 = load i64, i64* %16, align 8
  %337 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %338 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %337, i32 0, i32 0
  %339 = getelementptr inbounds %struct.timeval, %struct.timeval* %338, i32 0, i32 1
  %340 = load i64, i64* %339, align 8
  %341 = sub nsw i64 %336, %340
  %342 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %343 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %342, i32 0, i32 1
  %344 = getelementptr inbounds %struct.timeval, %struct.timeval* %343, i32 0, i32 0
  %345 = load i64, i64* %344, align 8
  %346 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %347 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %346, i32 0, i32 0
  %348 = getelementptr inbounds %struct.timeval, %struct.timeval* %347, i32 0, i32 0
  %349 = load i64, i64* %348, align 8
  %350 = sub nsw i64 %345, %349
  %351 = mul nsw i64 %341, %350
  %352 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %353 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %352, i32 0, i32 1
  %354 = getelementptr inbounds %struct.timeval, %struct.timeval* %353, i32 0, i32 1
  %355 = load i64, i64* %354, align 8
  %356 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %357 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %356, i32 0, i32 0
  %358 = getelementptr inbounds %struct.timeval, %struct.timeval* %357, i32 0, i32 1
  %359 = load i64, i64* %358, align 8
  %360 = sub nsw i64 %355, %359
  %361 = sdiv i64 %351, %360
  br label %393

362:                                              ; preds = %329
  %363 = load i64, i64* %16, align 8
  %364 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %365 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %364, i32 0, i32 0
  %366 = getelementptr inbounds %struct.timeval, %struct.timeval* %365, i32 0, i32 1
  %367 = load i64, i64* %366, align 8
  %368 = sub nsw i64 %363, %367
  %369 = sitofp i64 %368 to double
  %370 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %371 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %370, i32 0, i32 1
  %372 = getelementptr inbounds %struct.timeval, %struct.timeval* %371, i32 0, i32 0
  %373 = load i64, i64* %372, align 8
  %374 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %375 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %374, i32 0, i32 0
  %376 = getelementptr inbounds %struct.timeval, %struct.timeval* %375, i32 0, i32 0
  %377 = load i64, i64* %376, align 8
  %378 = sub nsw i64 %373, %377
  %379 = sitofp i64 %378 to double
  %380 = fmul double %369, %379
  %381 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %382 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %381, i32 0, i32 1
  %383 = getelementptr inbounds %struct.timeval, %struct.timeval* %382, i32 0, i32 1
  %384 = load i64, i64* %383, align 8
  %385 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %386 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %385, i32 0, i32 0
  %387 = getelementptr inbounds %struct.timeval, %struct.timeval* %386, i32 0, i32 1
  %388 = load i64, i64* %387, align 8
  %389 = sub nsw i64 %384, %388
  %390 = sitofp i64 %389 to double
  %391 = fdiv double %380, %390
  %392 = fptosi double %391 to i64
  br label %393

393:                                              ; preds = %362, %335
  %394 = phi i64 [ %361, %335 ], [ %392, %362 ]
  %395 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %396 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %395, i32 0, i32 0
  %397 = getelementptr inbounds %struct.timeval, %struct.timeval* %396, i32 0, i32 0
  %398 = load i64, i64* %397, align 8
  %399 = add nsw i64 %394, %398
  br label %400

400:                                              ; preds = %393, %324
  %401 = phi i64 [ %328, %324 ], [ %399, %393 ]
  store i64 %401, i64* %23, align 8
  %402 = load i64, i64* %23, align 8
  %403 = load i64, i64* %21, align 8
  %404 = icmp sle i64 %402, %403
  br i1 %404, label %405, label %406

405:                                              ; preds = %400
  br label %409

406:                                              ; preds = %400
  %407 = load i64, i64* %16, align 8
  %408 = add nsw i64 %407, 1
  store i64 %408, i64* %16, align 8
  br label %233

409:                                              ; preds = %405
  %410 = load i64, i64* %21, align 8
  %411 = load %struct.active_line_s*, %struct.active_line_s** %18, align 8
  %412 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %411, i32 0, i32 4
  store i64 %410, i64* %412, align 8
  %413 = load i64, i64* %23, align 8
  %414 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %415 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %414, i32 0, i32 4
  store i64 %413, i64* %415, align 8
  %416 = load %struct.active_line_s*, %struct.active_line_s** %18, align 8
  store %struct.active_line_s* %416, %struct.active_line_s** %20, align 8
  %417 = load i32, i32* %17, align 4
  %418 = add nsw i32 %417, 4
  store i32 %418, i32* %17, align 4
  %419 = load i32, i32* %17, align 4
  %420 = add nsw i32 %419, 3
  %421 = trunc i32 %420 to i16
  %422 = load %struct.active_line_s*, %struct.active_line_s** %18, align 8
  %423 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %422, i32 0, i32 8
  store i16 %421, i16* %423, align 2
  %424 = load i32, i32* %17, align 4
  %425 = add nsw i32 %424, 1
  %426 = trunc i32 %425 to i16
  %427 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %428 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %427, i32 0, i32 8
  store i16 %426, i16* %428, align 2
  br label %445

429:                                              ; preds = %221
  %430 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %431 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %430, i32 0, i32 1
  %432 = getelementptr inbounds %struct.timeval, %struct.timeval* %431, i32 0, i32 1
  %433 = load i64, i64* %432, align 8
  %434 = load i64, i64* %16, align 8
  %435 = icmp eq i64 %433, %434
  br i1 %435, label %436, label %441

436:                                              ; preds = %429
  %437 = load i32, i32* %17, align 4
  %438 = trunc i32 %437 to i16
  %439 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %440 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %439, i32 0, i32 8
  store i16 %438, i16* %440, align 2
  br label %444

441:                                              ; preds = %429
  %442 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %443 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %442, i32 0, i32 8
  store i16 -2, i16* %443, align 2
  br label %444

444:                                              ; preds = %441, %436
  br label %445

445:                                              ; preds = %444, %409
  %446 = load i64, i64* %23, align 8
  store i64 %446, i64* %21, align 8
  br label %447

447:                                              ; preds = %445
  %448 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  store %struct.active_line_s* %448, %struct.active_line_s** %18, align 8
  %449 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %450 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %449, i32 0, i32 10
  %451 = load %struct.active_line_s*, %struct.active_line_s** %450, align 8
  store %struct.active_line_s* %451, %struct.active_line_s** %19, align 8
  br label %135

452:                                              ; preds = %135
  %453 = load %struct.line_list_s*, %struct.line_list_s** %9, align 8
  %454 = getelementptr inbounds %struct.line_list_s, %struct.line_list_s* %453, i32 0, i32 6
  %455 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %454, i32 0, i32 10
  %456 = load %struct.active_line_s*, %struct.active_line_s** %455, align 8
  store %struct.active_line_s* %456, %struct.active_line_s** %19, align 8
  br label %457

457:                                              ; preds = %548, %452
  %458 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %459 = load %struct.active_line_s*, %struct.active_line_s** %20, align 8
  %460 = icmp ne %struct.active_line_s* %458, %459
  br i1 %460, label %461, label %552

461:                                              ; preds = %457
  %462 = load i64, i64* %16, align 8
  %463 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %464 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %463, i32 0, i32 1
  %465 = getelementptr inbounds %struct.timeval, %struct.timeval* %464, i32 0, i32 1
  %466 = load i64, i64* %465, align 8
  %467 = icmp eq i64 %462, %466
  br i1 %467, label %468, label %473

468:                                              ; preds = %461
  %469 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %470 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %469, i32 0, i32 1
  %471 = getelementptr inbounds %struct.timeval, %struct.timeval* %470, i32 0, i32 0
  %472 = load i64, i64* %471, align 8
  br label %544

473:                                              ; preds = %461
  %474 = load i64, i64* %16, align 8
  %475 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %476 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %475, i32 0, i32 2
  %477 = load i64, i64* %476, align 8
  %478 = icmp sle i64 %474, %477
  br i1 %478, label %479, label %506

479:                                              ; preds = %473
  %480 = load i64, i64* %16, align 8
  %481 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %482 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %481, i32 0, i32 0
  %483 = getelementptr inbounds %struct.timeval, %struct.timeval* %482, i32 0, i32 1
  %484 = load i64, i64* %483, align 8
  %485 = sub nsw i64 %480, %484
  %486 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %487 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %486, i32 0, i32 1
  %488 = getelementptr inbounds %struct.timeval, %struct.timeval* %487, i32 0, i32 0
  %489 = load i64, i64* %488, align 8
  %490 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %491 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %490, i32 0, i32 0
  %492 = getelementptr inbounds %struct.timeval, %struct.timeval* %491, i32 0, i32 0
  %493 = load i64, i64* %492, align 8
  %494 = sub nsw i64 %489, %493
  %495 = mul nsw i64 %485, %494
  %496 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %497 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %496, i32 0, i32 1
  %498 = getelementptr inbounds %struct.timeval, %struct.timeval* %497, i32 0, i32 1
  %499 = load i64, i64* %498, align 8
  %500 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %501 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %500, i32 0, i32 0
  %502 = getelementptr inbounds %struct.timeval, %struct.timeval* %501, i32 0, i32 1
  %503 = load i64, i64* %502, align 8
  %504 = sub nsw i64 %499, %503
  %505 = sdiv i64 %495, %504
  br label %537

506:                                              ; preds = %473
  %507 = load i64, i64* %16, align 8
  %508 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %509 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %508, i32 0, i32 0
  %510 = getelementptr inbounds %struct.timeval, %struct.timeval* %509, i32 0, i32 1
  %511 = load i64, i64* %510, align 8
  %512 = sub nsw i64 %507, %511
  %513 = sitofp i64 %512 to double
  %514 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %515 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %514, i32 0, i32 1
  %516 = getelementptr inbounds %struct.timeval, %struct.timeval* %515, i32 0, i32 0
  %517 = load i64, i64* %516, align 8
  %518 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %519 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %518, i32 0, i32 0
  %520 = getelementptr inbounds %struct.timeval, %struct.timeval* %519, i32 0, i32 0
  %521 = load i64, i64* %520, align 8
  %522 = sub nsw i64 %517, %521
  %523 = sitofp i64 %522 to double
  %524 = fmul double %513, %523
  %525 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %526 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %525, i32 0, i32 1
  %527 = getelementptr inbounds %struct.timeval, %struct.timeval* %526, i32 0, i32 1
  %528 = load i64, i64* %527, align 8
  %529 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %530 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %529, i32 0, i32 0
  %531 = getelementptr inbounds %struct.timeval, %struct.timeval* %530, i32 0, i32 1
  %532 = load i64, i64* %531, align 8
  %533 = sub nsw i64 %528, %532
  %534 = sitofp i64 %533 to double
  %535 = fdiv double %524, %534
  %536 = fptosi double %535 to i64
  br label %537

537:                                              ; preds = %506, %479
  %538 = phi i64 [ %505, %479 ], [ %536, %506 ]
  %539 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %540 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %539, i32 0, i32 0
  %541 = getelementptr inbounds %struct.timeval, %struct.timeval* %540, i32 0, i32 0
  %542 = load i64, i64* %541, align 8
  %543 = add nsw i64 %538, %542
  br label %544

544:                                              ; preds = %537, %468
  %545 = phi i64 [ %472, %468 ], [ %543, %537 ]
  %546 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %547 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %546, i32 0, i32 4
  store i64 %545, i64* %547, align 8
  br label %548

548:                                              ; preds = %544
  %549 = load %struct.active_line_s*, %struct.active_line_s** %19, align 8
  %550 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %549, i32 0, i32 10
  %551 = load %struct.active_line_s*, %struct.active_line_s** %550, align 8
  store %struct.active_line_s* %551, %struct.active_line_s** %19, align 8
  br label %457

552:                                              ; preds = %457
  %553 = load %struct.line_list_s*, %struct.line_list_s** %9, align 8
  %554 = getelementptr inbounds %struct.line_list_s, %struct.line_list_s* %553, i32 0, i32 6
  %555 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %554, i32 0, i32 10
  %556 = load %struct.active_line_s*, %struct.active_line_s** %555, align 8
  store %struct.active_line_s* %556, %struct.active_line_s** %24, align 8
  %557 = load i64, i64* %16, align 8
  %558 = load i64, i64* %15, align 8
  %559 = sub nsw i64 %557, %558
  store i64 %559, i64* %25, align 8
  %560 = getelementptr inbounds [2 x i32], [2 x i32]* %28, i64 0, i64 0
  store i32 0, i32* %560, align 4
  %561 = load %struct.line_list_s*, %struct.line_list_s** %9, align 8
  %562 = getelementptr inbounds %struct.line_list_s, %struct.line_list_s* %561, i32 0, i32 7
  %563 = load i32, i32* %562, align 8
  %564 = getelementptr inbounds [2 x i32], [2 x i32]* %28, i64 0, i64 1
  store i32 %563, i32* %564, align 4
  br label %565

565:                                              ; preds = %689, %552
  %566 = load %struct.active_line_s*, %struct.active_line_s** %24, align 8
  %567 = icmp ne %struct.active_line_s* %566, null
  br i1 %567, label %568, label %691

568:                                              ; preds = %565
  %569 = load %struct.active_line_s*, %struct.active_line_s** %24, align 8
  %570 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %569, i32 0, i32 3
  %571 = load i64, i64* %570, align 8
  store i64 %571, i64* %29, align 8
  %572 = load %struct.active_line_s*, %struct.active_line_s** %24, align 8
  %573 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %572, i32 0, i32 4
  %574 = load i64, i64* %573, align 8
  store i64 %574, i64* %30, align 8
  %575 = load %struct.active_line_s*, %struct.active_line_s** %24, align 8
  %576 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %575, i32 0, i32 10
  %577 = load %struct.active_line_s*, %struct.active_line_s** %576, align 8
  store %struct.active_line_s* %577, %struct.active_line_s** %31, align 8
  %578 = getelementptr inbounds [2 x i32], [2 x i32]* %28, i64 0, i64 0
  %579 = load i32, i32* %578, align 4
  %580 = load i32, i32* %8, align 4
  %581 = and i32 %579, %580
  %582 = icmp ne i32 %581, 0
  br i1 %582, label %583, label %640

583:                                              ; preds = %568
  %584 = getelementptr inbounds [2 x i32], [2 x i32]* %28, i64 0, i64 1
  %585 = load i32, i32* %584, align 4
  %586 = load %struct.gs_state_s*, %struct.gs_state_s** %11, align 8
  %587 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %586, i32 0, i32 9
  %588 = load i32, i32* %587, align 8
  %589 = and i32 %585, %588
  %590 = icmp ne i32 %589, 0
  br i1 %590, label %591, label %640

591:                                              ; preds = %583
  %592 = load %struct.active_line_s*, %struct.active_line_s** %24, align 8
  %593 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %592, i32 0, i32 6
  %594 = load i32, i32* %593, align 8
  %595 = load %struct.active_line_s*, %struct.active_line_s** %24, align 8
  %596 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %595, i32 0, i32 7
  %597 = load i16, i16* %596, align 4
  %598 = sext i16 %597 to i64
  %599 = getelementptr inbounds [2 x i32], [2 x i32]* %28, i64 0, i64 %598
  %600 = load i32, i32* %599, align 4
  %601 = add nsw i32 %600, %594
  store i32 %601, i32* %599, align 4
  %602 = getelementptr inbounds [2 x i32], [2 x i32]* %28, i64 0, i64 0
  %603 = load i32, i32* %602, align 4
  %604 = load i32, i32* %8, align 4
  %605 = and i32 %603, %604
  %606 = icmp ne i32 %605, 0
  br i1 %606, label %607, label %615

607:                                              ; preds = %591
  %608 = getelementptr inbounds [2 x i32], [2 x i32]* %28, i64 0, i64 1
  %609 = load i32, i32* %608, align 4
  %610 = load %struct.gs_state_s*, %struct.gs_state_s** %11, align 8
  %611 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %610, i32 0, i32 9
  %612 = load i32, i32* %611, align 8
  %613 = and i32 %609, %612
  %614 = icmp ne i32 %613, 0
  br i1 %614, label %639, label %615

615:                                              ; preds = %607, %591
  %616 = load i64, i64* %26, align 8
  %617 = load i64, i64* %12, align 8
  %618 = add nsw i64 %616, %617
  %619 = load i64, i64* %29, align 8
  %620 = load i64, i64* %26, align 8
  %621 = sub nsw i64 %619, %620
  %622 = load i64, i64* %12, align 8
  %623 = shl i64 %622, 1
  %624 = sub nsw i64 %621, %623
  %625 = load i64, i64* %15, align 8
  %626 = load i64, i64* %27, align 8
  %627 = load i64, i64* %12, align 8
  %628 = add nsw i64 %626, %627
  %629 = load i64, i64* %30, align 8
  %630 = load i64, i64* %27, align 8
  %631 = sub nsw i64 %629, %630
  %632 = load i64, i64* %12, align 8
  %633 = shl i64 %632, 1
  %634 = sub nsw i64 %631, %633
  %635 = load i64, i64* %25, align 8
  %636 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %7, align 8
  %637 = load %struct.gs_state_s*, %struct.gs_state_s** %11, align 8
  %638 = call i32 (i64, i64, i64, i64, i64, i64, i32, %struct.gx_device_color_s*, %struct.gs_state_s*, ...) bitcast (i32 (i64, i64, i64, i64, i64, i64, i32, %struct.gx_device_color_s*, %struct.gs_state_s*)* @gz_fill_trapezoid_fixed to i32 (i64, i64, i64, i64, i64, i64, i32, %struct.gx_device_color_s*, %struct.gs_state_s*, ...)*)(i64 %618, i64 %624, i64 %625, i64 %628, i64 %634, i64 %635, i32 0, %struct.gx_device_color_s* %636, %struct.gs_state_s* %637)
  br label %639

639:                                              ; preds = %615, %607
  br label %668

640:                                              ; preds = %583, %568
  %641 = load %struct.active_line_s*, %struct.active_line_s** %24, align 8
  %642 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %641, i32 0, i32 6
  %643 = load i32, i32* %642, align 8
  %644 = load %struct.active_line_s*, %struct.active_line_s** %24, align 8
  %645 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %644, i32 0, i32 7
  %646 = load i16, i16* %645, align 4
  %647 = sext i16 %646 to i64
  %648 = getelementptr inbounds [2 x i32], [2 x i32]* %28, i64 0, i64 %647
  %649 = load i32, i32* %648, align 4
  %650 = add nsw i32 %649, %643
  store i32 %650, i32* %648, align 4
  %651 = getelementptr inbounds [2 x i32], [2 x i32]* %28, i64 0, i64 0
  %652 = load i32, i32* %651, align 4
  %653 = load i32, i32* %8, align 4
  %654 = and i32 %652, %653
  %655 = icmp ne i32 %654, 0
  br i1 %655, label %656, label %667

656:                                              ; preds = %640
  %657 = getelementptr inbounds [2 x i32], [2 x i32]* %28, i64 0, i64 1
  %658 = load i32, i32* %657, align 4
  %659 = load %struct.gs_state_s*, %struct.gs_state_s** %11, align 8
  %660 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %659, i32 0, i32 9
  %661 = load i32, i32* %660, align 8
  %662 = and i32 %658, %661
  %663 = icmp ne i32 %662, 0
  br i1 %663, label %664, label %667

664:                                              ; preds = %656
  %665 = load i64, i64* %29, align 8
  store i64 %665, i64* %26, align 8
  %666 = load i64, i64* %30, align 8
  store i64 %666, i64* %27, align 8
  br label %667

667:                                              ; preds = %664, %656, %640
  br label %668

668:                                              ; preds = %667, %639
  %669 = load i64, i64* %30, align 8
  %670 = load %struct.active_line_s*, %struct.active_line_s** %24, align 8
  %671 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %670, i32 0, i32 3
  store i64 %669, i64* %671, align 8
  %672 = load %struct.active_line_s*, %struct.active_line_s** %24, align 8
  %673 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %672, i32 0, i32 8
  %674 = load i16, i16* %673, align 2
  %675 = sext i16 %674 to i32
  %676 = load i32, i32* %17, align 4
  %677 = icmp sge i32 %675, %676
  br i1 %677, label %678, label %689

678:                                              ; preds = %668
  %679 = load %struct.active_line_s*, %struct.active_line_s** %24, align 8
  %680 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %679, i32 0, i32 8
  %681 = load i16, i16* %680, align 2
  %682 = sext i16 %681 to i32
  %683 = and i32 %682, 3
  switch i32 %683, label %688 [
    i32 1, label %684
    i32 0, label %686
  ]

684:                                              ; preds = %678
  %685 = load %struct.active_line_s*, %struct.active_line_s** %24, align 8
  call void @swap_group(%struct.active_line_s* %685)
  br label %688

686:                                              ; preds = %678
  %687 = load %struct.active_line_s*, %struct.active_line_s** %24, align 8
  call void @ended_line(%struct.active_line_s* %687)
  br label %688

688:                                              ; preds = %686, %684, %678
  br label %689

689:                                              ; preds = %688, %668
  %690 = load %struct.active_line_s*, %struct.active_line_s** %31, align 8
  store %struct.active_line_s* %690, %struct.active_line_s** %24, align 8
  br label %565

691:                                              ; preds = %565
  %692 = load i64, i64* %16, align 8
  store i64 %692, i64* %15, align 8
  br label %53

693:                                              ; preds = %88, %58, %37
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @insert_x_new(%struct.active_line_s* %0, %struct.line_list_s* %1) #0 {
  %3 = alloca %struct.active_line_s*, align 8
  %4 = alloca %struct.line_list_s*, align 8
  %5 = alloca %struct.active_line_s*, align 8
  %6 = alloca %struct.active_line_s*, align 8
  %7 = alloca i64, align 8
  store %struct.active_line_s* %0, %struct.active_line_s** %3, align 8
  store %struct.line_list_s* %1, %struct.line_list_s** %4, align 8
  %8 = load %struct.line_list_s*, %struct.line_list_s** %4, align 8
  %9 = getelementptr inbounds %struct.line_list_s, %struct.line_list_s* %8, i32 0, i32 6
  store %struct.active_line_s* %9, %struct.active_line_s** %6, align 8
  %10 = load %struct.active_line_s*, %struct.active_line_s** %3, align 8
  %11 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %10, i32 0, i32 0
  %12 = getelementptr inbounds %struct.timeval, %struct.timeval* %11, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  store i64 %13, i64* %7, align 8
  br label %14

14:                                               ; preds = %59, %2
  %15 = load %struct.active_line_s*, %struct.active_line_s** %6, align 8
  %16 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %15, i32 0, i32 10
  %17 = load %struct.active_line_s*, %struct.active_line_s** %16, align 8
  store %struct.active_line_s* %17, %struct.active_line_s** %5, align 8
  %18 = icmp ne %struct.active_line_s* %17, null
  br i1 %18, label %19, label %57

19:                                               ; preds = %14
  %20 = load %struct.active_line_s*, %struct.active_line_s** %5, align 8
  %21 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %20, i32 0, i32 3
  %22 = load i64, i64* %21, align 8
  %23 = load i64, i64* %7, align 8
  %24 = icmp slt i64 %22, %23
  br i1 %24, label %55, label %25

25:                                               ; preds = %19
  %26 = load %struct.active_line_s*, %struct.active_line_s** %5, align 8
  %27 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %26, i32 0, i32 3
  %28 = load i64, i64* %27, align 8
  %29 = load i64, i64* %7, align 8
  %30 = icmp eq i64 %28, %29
  br i1 %30, label %31, label %53

31:                                               ; preds = %25
  %32 = load %struct.active_line_s*, %struct.active_line_s** %5, align 8
  %33 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %32, i32 0, i32 0
  %34 = getelementptr inbounds %struct.timeval, %struct.timeval* %33, i32 0, i32 0
  %35 = load i64, i64* %34, align 8
  %36 = load %struct.active_line_s*, %struct.active_line_s** %3, align 8
  %37 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %36, i32 0, i32 0
  %38 = getelementptr inbounds %struct.timeval, %struct.timeval* %37, i32 0, i32 0
  %39 = load i64, i64* %38, align 8
  %40 = icmp sgt i64 %35, %39
  br i1 %40, label %51, label %41

41:                                               ; preds = %31
  %42 = load %struct.active_line_s*, %struct.active_line_s** %5, align 8
  %43 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %42, i32 0, i32 1
  %44 = getelementptr inbounds %struct.timeval, %struct.timeval* %43, i32 0, i32 0
  %45 = load i64, i64* %44, align 8
  %46 = load %struct.active_line_s*, %struct.active_line_s** %3, align 8
  %47 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %46, i32 0, i32 1
  %48 = getelementptr inbounds %struct.timeval, %struct.timeval* %47, i32 0, i32 0
  %49 = load i64, i64* %48, align 8
  %50 = icmp slt i64 %45, %49
  br label %51

51:                                               ; preds = %41, %31
  %52 = phi i1 [ true, %31 ], [ %50, %41 ]
  br label %53

53:                                               ; preds = %51, %25
  %54 = phi i1 [ false, %25 ], [ %52, %51 ]
  br label %55

55:                                               ; preds = %53, %19
  %56 = phi i1 [ true, %19 ], [ %54, %53 ]
  br label %57

57:                                               ; preds = %55, %14
  %58 = phi i1 [ false, %14 ], [ %56, %55 ]
  br i1 %58, label %59, label %61

59:                                               ; preds = %57
  %60 = load %struct.active_line_s*, %struct.active_line_s** %5, align 8
  store %struct.active_line_s* %60, %struct.active_line_s** %6, align 8
  br label %14

61:                                               ; preds = %57
  %62 = load %struct.active_line_s*, %struct.active_line_s** %5, align 8
  %63 = load %struct.active_line_s*, %struct.active_line_s** %3, align 8
  %64 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %63, i32 0, i32 10
  store %struct.active_line_s* %62, %struct.active_line_s** %64, align 8
  %65 = load %struct.active_line_s*, %struct.active_line_s** %6, align 8
  %66 = load %struct.active_line_s*, %struct.active_line_s** %3, align 8
  %67 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %66, i32 0, i32 9
  store %struct.active_line_s* %65, %struct.active_line_s** %67, align 8
  %68 = load %struct.active_line_s*, %struct.active_line_s** %5, align 8
  %69 = icmp ne %struct.active_line_s* %68, null
  br i1 %69, label %70, label %74

70:                                               ; preds = %61
  %71 = load %struct.active_line_s*, %struct.active_line_s** %3, align 8
  %72 = load %struct.active_line_s*, %struct.active_line_s** %5, align 8
  %73 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %72, i32 0, i32 9
  store %struct.active_line_s* %71, %struct.active_line_s** %73, align 8
  br label %74

74:                                               ; preds = %70, %61
  %75 = load %struct.active_line_s*, %struct.active_line_s** %3, align 8
  %76 = load %struct.active_line_s*, %struct.active_line_s** %6, align 8
  %77 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %76, i32 0, i32 10
  store %struct.active_line_s* %75, %struct.active_line_s** %77, align 8
  %78 = load i64, i64* %7, align 8
  %79 = load %struct.active_line_s*, %struct.active_line_s** %3, align 8
  %80 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %79, i32 0, i32 3
  store i64 %78, i64* %80, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i64 @find_cross_y(%struct.active_line_s* %0, %struct.active_line_s* %1) #0 {
  %3 = alloca %struct.active_line_s*, align 8
  %4 = alloca %struct.active_line_s*, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  store %struct.active_line_s* %0, %struct.active_line_s** %3, align 8
  store %struct.active_line_s* %1, %struct.active_line_s** %4, align 8
  %7 = load %struct.active_line_s*, %struct.active_line_s** %3, align 8
  %8 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %7, i32 0, i32 1
  %9 = getelementptr inbounds %struct.timeval, %struct.timeval* %8, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = load %struct.active_line_s*, %struct.active_line_s** %3, align 8
  %12 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %11, i32 0, i32 0
  %13 = getelementptr inbounds %struct.timeval, %struct.timeval* %12, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = sub nsw i64 %10, %14
  %16 = sitofp i64 %15 to double
  store double %16, double* %5, align 8
  %17 = load %struct.active_line_s*, %struct.active_line_s** %4, align 8
  %18 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %17, i32 0, i32 1
  %19 = getelementptr inbounds %struct.timeval, %struct.timeval* %18, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = load %struct.active_line_s*, %struct.active_line_s** %4, align 8
  %22 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %21, i32 0, i32 0
  %23 = getelementptr inbounds %struct.timeval, %struct.timeval* %22, i32 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = sub nsw i64 %20, %24
  %26 = sitofp i64 %25 to double
  store double %26, double* %6, align 8
  %27 = load %struct.active_line_s*, %struct.active_line_s** %3, align 8
  %28 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %27, i32 0, i32 0
  %29 = getelementptr inbounds %struct.timeval, %struct.timeval* %28, i32 0, i32 0
  %30 = load i64, i64* %29, align 8
  %31 = sitofp i64 %30 to double
  %32 = load %struct.active_line_s*, %struct.active_line_s** %3, align 8
  %33 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %32, i32 0, i32 1
  %34 = getelementptr inbounds %struct.timeval, %struct.timeval* %33, i32 0, i32 1
  %35 = load i64, i64* %34, align 8
  %36 = sitofp i64 %35 to double
  %37 = fmul double %31, %36
  %38 = load %struct.active_line_s*, %struct.active_line_s** %3, align 8
  %39 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %38, i32 0, i32 0
  %40 = getelementptr inbounds %struct.timeval, %struct.timeval* %39, i32 0, i32 1
  %41 = load i64, i64* %40, align 8
  %42 = sitofp i64 %41 to double
  %43 = load %struct.active_line_s*, %struct.active_line_s** %3, align 8
  %44 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %43, i32 0, i32 1
  %45 = getelementptr inbounds %struct.timeval, %struct.timeval* %44, i32 0, i32 0
  %46 = load i64, i64* %45, align 8
  %47 = sitofp i64 %46 to double
  %48 = fmul double %42, %47
  %49 = fsub double %37, %48
  %50 = load double, double* %6, align 8
  %51 = fmul double %49, %50
  %52 = load %struct.active_line_s*, %struct.active_line_s** %4, align 8
  %53 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %52, i32 0, i32 0
  %54 = getelementptr inbounds %struct.timeval, %struct.timeval* %53, i32 0, i32 0
  %55 = load i64, i64* %54, align 8
  %56 = sitofp i64 %55 to double
  %57 = load %struct.active_line_s*, %struct.active_line_s** %4, align 8
  %58 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %57, i32 0, i32 1
  %59 = getelementptr inbounds %struct.timeval, %struct.timeval* %58, i32 0, i32 1
  %60 = load i64, i64* %59, align 8
  %61 = sitofp i64 %60 to double
  %62 = fmul double %56, %61
  %63 = load %struct.active_line_s*, %struct.active_line_s** %4, align 8
  %64 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %63, i32 0, i32 0
  %65 = getelementptr inbounds %struct.timeval, %struct.timeval* %64, i32 0, i32 1
  %66 = load i64, i64* %65, align 8
  %67 = sitofp i64 %66 to double
  %68 = load %struct.active_line_s*, %struct.active_line_s** %4, align 8
  %69 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %68, i32 0, i32 1
  %70 = getelementptr inbounds %struct.timeval, %struct.timeval* %69, i32 0, i32 0
  %71 = load i64, i64* %70, align 8
  %72 = sitofp i64 %71 to double
  %73 = fmul double %67, %72
  %74 = fsub double %62, %73
  %75 = load double, double* %5, align 8
  %76 = fmul double %74, %75
  %77 = fsub double %51, %76
  %78 = load %struct.active_line_s*, %struct.active_line_s** %4, align 8
  %79 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %78, i32 0, i32 1
  %80 = getelementptr inbounds %struct.timeval, %struct.timeval* %79, i32 0, i32 0
  %81 = load i64, i64* %80, align 8
  %82 = load %struct.active_line_s*, %struct.active_line_s** %4, align 8
  %83 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %82, i32 0, i32 0
  %84 = getelementptr inbounds %struct.timeval, %struct.timeval* %83, i32 0, i32 0
  %85 = load i64, i64* %84, align 8
  %86 = sub nsw i64 %81, %85
  %87 = sitofp i64 %86 to double
  %88 = load double, double* %5, align 8
  %89 = fmul double %87, %88
  %90 = load %struct.active_line_s*, %struct.active_line_s** %3, align 8
  %91 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %90, i32 0, i32 1
  %92 = getelementptr inbounds %struct.timeval, %struct.timeval* %91, i32 0, i32 0
  %93 = load i64, i64* %92, align 8
  %94 = load %struct.active_line_s*, %struct.active_line_s** %3, align 8
  %95 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %94, i32 0, i32 0
  %96 = getelementptr inbounds %struct.timeval, %struct.timeval* %95, i32 0, i32 0
  %97 = load i64, i64* %96, align 8
  %98 = sub nsw i64 %93, %97
  %99 = sitofp i64 %98 to double
  %100 = load double, double* %6, align 8
  %101 = fmul double %99, %100
  %102 = fsub double %89, %101
  %103 = fdiv double %77, %102
  %104 = fptosi double %103 to i64
  ret i64 %104
}

; Function Attrs: noinline nounwind uwtable
define internal void @swap_group(%struct.active_line_s* %0) #0 {
  %2 = alloca %struct.active_line_s*, align 8
  %3 = alloca %struct.active_line_s*, align 8
  %4 = alloca %struct.active_line_s*, align 8
  %5 = alloca %struct.active_line_s*, align 8
  %6 = alloca %struct.active_line_s*, align 8
  %7 = alloca %struct.active_line_s*, align 8
  store %struct.active_line_s* %0, %struct.active_line_s** %2, align 8
  %8 = load %struct.active_line_s*, %struct.active_line_s** %2, align 8
  store %struct.active_line_s* %8, %struct.active_line_s** %4, align 8
  %9 = load %struct.active_line_s*, %struct.active_line_s** %2, align 8
  %10 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %9, i32 0, i32 10
  %11 = load %struct.active_line_s*, %struct.active_line_s** %10, align 8
  store %struct.active_line_s* %11, %struct.active_line_s** %6, align 8
  br label %12

12:                                               ; preds = %21, %1
  %13 = load %struct.active_line_s*, %struct.active_line_s** %2, align 8
  %14 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %13, i32 0, i32 9
  %15 = load %struct.active_line_s*, %struct.active_line_s** %14, align 8
  store %struct.active_line_s* %15, %struct.active_line_s** %3, align 8
  %16 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %15, i32 0, i32 8
  %17 = load i16, i16* %16, align 2
  %18 = sext i16 %17 to i32
  %19 = and i32 %18, 3
  %20 = icmp eq i32 %19, 3
  br i1 %20, label %21, label %23

21:                                               ; preds = %12
  %22 = load %struct.active_line_s*, %struct.active_line_s** %3, align 8
  store %struct.active_line_s* %22, %struct.active_line_s** %2, align 8
  br label %12

23:                                               ; preds = %12
  %24 = load %struct.active_line_s*, %struct.active_line_s** %2, align 8
  store %struct.active_line_s* %24, %struct.active_line_s** %5, align 8
  %25 = load %struct.active_line_s*, %struct.active_line_s** %4, align 8
  %26 = load %struct.active_line_s*, %struct.active_line_s** %3, align 8
  %27 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %26, i32 0, i32 10
  store %struct.active_line_s* %25, %struct.active_line_s** %27, align 8
  %28 = load %struct.active_line_s*, %struct.active_line_s** %6, align 8
  %29 = icmp ne %struct.active_line_s* %28, null
  br i1 %29, label %30, label %34

30:                                               ; preds = %23
  %31 = load %struct.active_line_s*, %struct.active_line_s** %5, align 8
  %32 = load %struct.active_line_s*, %struct.active_line_s** %6, align 8
  %33 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %32, i32 0, i32 9
  store %struct.active_line_s* %31, %struct.active_line_s** %33, align 8
  br label %34

34:                                               ; preds = %30, %23
  %35 = load %struct.active_line_s*, %struct.active_line_s** %6, align 8
  %36 = load %struct.active_line_s*, %struct.active_line_s** %5, align 8
  %37 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %36, i32 0, i32 9
  store %struct.active_line_s* %35, %struct.active_line_s** %37, align 8
  %38 = load %struct.active_line_s*, %struct.active_line_s** %3, align 8
  %39 = load %struct.active_line_s*, %struct.active_line_s** %4, align 8
  %40 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %39, i32 0, i32 10
  store %struct.active_line_s* %38, %struct.active_line_s** %40, align 8
  br label %41

41:                                               ; preds = %54, %34
  %42 = load %struct.active_line_s*, %struct.active_line_s** %2, align 8
  %43 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %42, i32 0, i32 10
  %44 = load %struct.active_line_s*, %struct.active_line_s** %43, align 8
  store %struct.active_line_s* %44, %struct.active_line_s** %7, align 8
  %45 = load %struct.active_line_s*, %struct.active_line_s** %2, align 8
  %46 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %45, i32 0, i32 9
  %47 = load %struct.active_line_s*, %struct.active_line_s** %46, align 8
  %48 = load %struct.active_line_s*, %struct.active_line_s** %2, align 8
  %49 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %48, i32 0, i32 10
  store %struct.active_line_s* %47, %struct.active_line_s** %49, align 8
  %50 = load %struct.active_line_s*, %struct.active_line_s** %7, align 8
  %51 = load %struct.active_line_s*, %struct.active_line_s** %2, align 8
  %52 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %51, i32 0, i32 9
  store %struct.active_line_s* %50, %struct.active_line_s** %52, align 8
  %53 = load %struct.active_line_s*, %struct.active_line_s** %7, align 8
  store %struct.active_line_s* %53, %struct.active_line_s** %2, align 8
  br label %54

54:                                               ; preds = %41
  %55 = load %struct.active_line_s*, %struct.active_line_s** %2, align 8
  %56 = load %struct.active_line_s*, %struct.active_line_s** %3, align 8
  %57 = icmp ne %struct.active_line_s* %55, %56
  br i1 %57, label %41, label %58

58:                                               ; preds = %54
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @ended_line(%struct.active_line_s* %0) #0 {
  %2 = alloca %struct.active_line_s*, align 8
  %3 = alloca %struct.segment_s*, align 8
  %4 = alloca %struct.segment_s*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %struct.timeval, align 8
  %7 = alloca %struct.active_line_s*, align 8
  store %struct.active_line_s* %0, %struct.active_line_s** %2, align 8
  %8 = load %struct.active_line_s*, %struct.active_line_s** %2, align 8
  %9 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %8, i32 0, i32 5
  %10 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  store %struct.segment_s* %10, %struct.segment_s** %3, align 8
  %11 = load %struct.segment_s*, %struct.segment_s** %3, align 8
  %12 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %11, i32 0, i32 3
  %13 = getelementptr inbounds %struct.timeval, %struct.timeval* %12, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  store i64 %14, i64* %5, align 8
  %15 = load %struct.active_line_s*, %struct.active_line_s** %2, align 8
  %16 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %15, i32 0, i32 6
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, 1
  br i1 %18, label %19, label %33

19:                                               ; preds = %1
  %20 = load %struct.segment_s*, %struct.segment_s** %3, align 8
  %21 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %20, i32 0, i32 1
  %22 = load %struct.segment_s*, %struct.segment_s** %21, align 8
  store %struct.segment_s* %22, %struct.segment_s** %4, align 8
  %23 = load %struct.segment_s*, %struct.segment_s** %4, align 8
  %24 = icmp eq %struct.segment_s* %23, null
  br i1 %24, label %30, label %25

25:                                               ; preds = %19
  %26 = load %struct.segment_s*, %struct.segment_s** %4, align 8
  %27 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %26, i32 0, i32 2
  %28 = load i32, i32* %27, align 8
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %32

30:                                               ; preds = %25, %19
  %31 = load %struct.segment_s*, %struct.segment_s** %3, align 8
  store %struct.segment_s* %31, %struct.segment_s** %4, align 8
  br label %32

32:                                               ; preds = %30, %25
  br label %46

33:                                               ; preds = %1
  %34 = load %struct.segment_s*, %struct.segment_s** %3, align 8
  %35 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %34, i32 0, i32 2
  %36 = load i32, i32* %35, align 8
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %33
  %39 = load %struct.segment_s*, %struct.segment_s** %3, align 8
  br label %44

40:                                               ; preds = %33
  %41 = load %struct.segment_s*, %struct.segment_s** %3, align 8
  %42 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %41, i32 0, i32 0
  %43 = load %struct.segment_s*, %struct.segment_s** %42, align 8
  br label %44

44:                                               ; preds = %40, %38
  %45 = phi %struct.segment_s* [ %39, %38 ], [ %43, %40 ]
  store %struct.segment_s* %45, %struct.segment_s** %4, align 8
  br label %46

46:                                               ; preds = %44, %32
  %47 = load %struct.segment_s*, %struct.segment_s** %4, align 8
  %48 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %47, i32 0, i32 3
  %49 = getelementptr inbounds %struct.timeval, %struct.timeval* %48, i32 0, i32 1
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds %struct.timeval, %struct.timeval* %6, i32 0, i32 1
  store i64 %50, i64* %51, align 8
  %52 = getelementptr inbounds %struct.timeval, %struct.timeval* %6, i32 0, i32 1
  %53 = load i64, i64* %52, align 8
  %54 = load i64, i64* %5, align 8
  %55 = icmp sle i64 %53, %54
  br i1 %55, label %56, label %74

56:                                               ; preds = %46
  %57 = load %struct.active_line_s*, %struct.active_line_s** %2, align 8
  %58 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %57, i32 0, i32 10
  %59 = load %struct.active_line_s*, %struct.active_line_s** %58, align 8
  store %struct.active_line_s* %59, %struct.active_line_s** %7, align 8
  %60 = load %struct.active_line_s*, %struct.active_line_s** %7, align 8
  %61 = load %struct.active_line_s*, %struct.active_line_s** %2, align 8
  %62 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %61, i32 0, i32 9
  %63 = load %struct.active_line_s*, %struct.active_line_s** %62, align 8
  %64 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %63, i32 0, i32 10
  store %struct.active_line_s* %60, %struct.active_line_s** %64, align 8
  %65 = load %struct.active_line_s*, %struct.active_line_s** %7, align 8
  %66 = icmp ne %struct.active_line_s* %65, null
  br i1 %66, label %67, label %73

67:                                               ; preds = %56
  %68 = load %struct.active_line_s*, %struct.active_line_s** %2, align 8
  %69 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %68, i32 0, i32 9
  %70 = load %struct.active_line_s*, %struct.active_line_s** %69, align 8
  %71 = load %struct.active_line_s*, %struct.active_line_s** %7, align 8
  %72 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %71, i32 0, i32 9
  store %struct.active_line_s* %70, %struct.active_line_s** %72, align 8
  br label %73

73:                                               ; preds = %67, %56
  br label %127

74:                                               ; preds = %46
  %75 = load %struct.segment_s*, %struct.segment_s** %4, align 8
  %76 = load %struct.active_line_s*, %struct.active_line_s** %2, align 8
  %77 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %76, i32 0, i32 5
  store %struct.segment_s* %75, %struct.segment_s** %77, align 8
  %78 = load %struct.segment_s*, %struct.segment_s** %4, align 8
  %79 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %78, i32 0, i32 3
  %80 = getelementptr inbounds %struct.timeval, %struct.timeval* %79, i32 0, i32 0
  %81 = load i64, i64* %80, align 8
  %82 = getelementptr inbounds %struct.timeval, %struct.timeval* %6, i32 0, i32 0
  store i64 %81, i64* %82, align 8
  %83 = getelementptr inbounds %struct.timeval, %struct.timeval* %6, i32 0, i32 0
  %84 = load i64, i64* %83, align 8
  %85 = load %struct.active_line_s*, %struct.active_line_s** %2, align 8
  %86 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %85, i32 0, i32 1
  %87 = getelementptr inbounds %struct.timeval, %struct.timeval* %86, i32 0, i32 0
  %88 = load i64, i64* %87, align 8
  %89 = icmp sgt i64 %84, %88
  br i1 %89, label %90, label %98

90:                                               ; preds = %74
  %91 = getelementptr inbounds %struct.timeval, %struct.timeval* %6, i32 0, i32 0
  %92 = load i64, i64* %91, align 8
  %93 = load %struct.active_line_s*, %struct.active_line_s** %2, align 8
  %94 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %93, i32 0, i32 1
  %95 = getelementptr inbounds %struct.timeval, %struct.timeval* %94, i32 0, i32 0
  %96 = load i64, i64* %95, align 8
  %97 = sub nsw i64 %92, %96
  br label %106

98:                                               ; preds = %74
  %99 = load %struct.active_line_s*, %struct.active_line_s** %2, align 8
  %100 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %99, i32 0, i32 1
  %101 = getelementptr inbounds %struct.timeval, %struct.timeval* %100, i32 0, i32 0
  %102 = load i64, i64* %101, align 8
  %103 = getelementptr inbounds %struct.timeval, %struct.timeval* %6, i32 0, i32 0
  %104 = load i64, i64* %103, align 8
  %105 = sub nsw i64 %102, %104
  br label %106

106:                                              ; preds = %98, %90
  %107 = phi i64 [ %97, %90 ], [ %105, %98 ]
  %108 = or i64 %107, 1
  %109 = sdiv i64 2147483647, %108
  %110 = load %struct.active_line_s*, %struct.active_line_s** %2, align 8
  %111 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %110, i32 0, i32 1
  %112 = getelementptr inbounds %struct.timeval, %struct.timeval* %111, i32 0, i32 1
  %113 = load i64, i64* %112, align 8
  %114 = add nsw i64 %109, %113
  %115 = load %struct.active_line_s*, %struct.active_line_s** %2, align 8
  %116 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %115, i32 0, i32 2
  store i64 %114, i64* %116, align 8
  %117 = load %struct.active_line_s*, %struct.active_line_s** %2, align 8
  %118 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %117, i32 0, i32 0
  %119 = load %struct.active_line_s*, %struct.active_line_s** %2, align 8
  %120 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %119, i32 0, i32 1
  %121 = bitcast %struct.timeval* %118 to i8*
  %122 = bitcast %struct.timeval* %120 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %121, i8* align 8 %122, i64 16, i1 false)
  %123 = load %struct.active_line_s*, %struct.active_line_s** %2, align 8
  %124 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %123, i32 0, i32 1
  %125 = bitcast %struct.timeval* %124 to i8*
  %126 = bitcast %struct.timeval* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %125, i8* align 8 %126, i64 16, i1 false)
  br label %127

127:                                              ; preds = %106, %73
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_y_line(%struct.segment_s* %0, %struct.segment_s* %1, i32 %2, %struct.line_list_s* %3) #0 {
  %5 = alloca %struct.segment_s*, align 8
  %6 = alloca %struct.segment_s*, align 8
  %7 = alloca i32, align 4
  %8 = alloca %struct.line_list_s*, align 8
  %9 = alloca %struct.timeval, align 8
  %10 = alloca %struct.timeval, align 8
  %11 = alloca %struct.active_line_s*, align 8
  %12 = alloca i64, align 8
  %13 = alloca %struct.active_line_s*, align 8
  %14 = alloca %struct.active_line_s*, align 8
  store %struct.segment_s* %0, %struct.segment_s** %5, align 8
  store %struct.segment_s* %1, %struct.segment_s** %6, align 8
  store i32 %2, i32* %7, align 4
  store %struct.line_list_s* %3, %struct.line_list_s** %8, align 8
  %15 = load %struct.line_list_s*, %struct.line_list_s** %8, align 8
  %16 = getelementptr inbounds %struct.line_list_s, %struct.line_list_s* %15, i32 0, i32 3
  %17 = load %struct.active_line_s*, %struct.active_line_s** %16, align 8
  %18 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %17, i32 1
  store %struct.active_line_s* %18, %struct.active_line_s** %16, align 8
  store %struct.active_line_s* %17, %struct.active_line_s** %11, align 8
  %19 = load %struct.segment_s*, %struct.segment_s** %6, align 8
  %20 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %19, i32 0, i32 3
  %21 = getelementptr inbounds %struct.timeval, %struct.timeval* %20, i32 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %struct.timeval, %struct.timeval* %9, i32 0, i32 0
  store i64 %22, i64* %23, align 8
  %24 = load %struct.segment_s*, %struct.segment_s** %6, align 8
  %25 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %24, i32 0, i32 3
  %26 = getelementptr inbounds %struct.timeval, %struct.timeval* %25, i32 0, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %struct.timeval, %struct.timeval* %9, i32 0, i32 1
  store i64 %27, i64* %28, align 8
  %29 = load %struct.segment_s*, %struct.segment_s** %5, align 8
  %30 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %29, i32 0, i32 3
  %31 = getelementptr inbounds %struct.timeval, %struct.timeval* %30, i32 0, i32 0
  %32 = load i64, i64* %31, align 8
  %33 = getelementptr inbounds %struct.timeval, %struct.timeval* %10, i32 0, i32 0
  store i64 %32, i64* %33, align 8
  %34 = load %struct.segment_s*, %struct.segment_s** %5, align 8
  %35 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %34, i32 0, i32 3
  %36 = getelementptr inbounds %struct.timeval, %struct.timeval* %35, i32 0, i32 1
  %37 = load i64, i64* %36, align 8
  %38 = getelementptr inbounds %struct.timeval, %struct.timeval* %10, i32 0, i32 1
  store i64 %37, i64* %38, align 8
  %39 = load %struct.line_list_s*, %struct.line_list_s** %8, align 8
  %40 = getelementptr inbounds %struct.line_list_s, %struct.line_list_s* %39, i32 0, i32 2
  %41 = load i16, i16* %40, align 4
  %42 = load %struct.active_line_s*, %struct.active_line_s** %11, align 8
  %43 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %42, i32 0, i32 7
  store i16 %41, i16* %43, align 4
  %44 = load i32, i32* %7, align 4
  %45 = load %struct.active_line_s*, %struct.active_line_s** %11, align 8
  %46 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %45, i32 0, i32 6
  store i32 %44, i32* %46, align 8
  %47 = icmp sgt i32 %44, 0
  br i1 %47, label %48, label %88

48:                                               ; preds = %4
  %49 = getelementptr inbounds %struct.timeval, %struct.timeval* %10, i32 0, i32 1
  %50 = load i64, i64* %49, align 8
  store i64 %50, i64* %12, align 8
  %51 = getelementptr inbounds %struct.timeval, %struct.timeval* %9, i32 0, i32 0
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds %struct.timeval, %struct.timeval* %10, i32 0, i32 0
  %54 = load i64, i64* %53, align 8
  %55 = icmp sgt i64 %52, %54
  br i1 %55, label %56, label %62

56:                                               ; preds = %48
  %57 = getelementptr inbounds %struct.timeval, %struct.timeval* %9, i32 0, i32 0
  %58 = load i64, i64* %57, align 8
  %59 = getelementptr inbounds %struct.timeval, %struct.timeval* %10, i32 0, i32 0
  %60 = load i64, i64* %59, align 8
  %61 = sub nsw i64 %58, %60
  br label %68

62:                                               ; preds = %48
  %63 = getelementptr inbounds %struct.timeval, %struct.timeval* %10, i32 0, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = getelementptr inbounds %struct.timeval, %struct.timeval* %9, i32 0, i32 0
  %66 = load i64, i64* %65, align 8
  %67 = sub nsw i64 %64, %66
  br label %68

68:                                               ; preds = %62, %56
  %69 = phi i64 [ %61, %56 ], [ %67, %62 ]
  %70 = or i64 %69, 1
  %71 = sdiv i64 2147483647, %70
  %72 = getelementptr inbounds %struct.timeval, %struct.timeval* %10, i32 0, i32 1
  %73 = load i64, i64* %72, align 8
  %74 = add nsw i64 %71, %73
  %75 = load %struct.active_line_s*, %struct.active_line_s** %11, align 8
  %76 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %75, i32 0, i32 2
  store i64 %74, i64* %76, align 8
  %77 = load %struct.active_line_s*, %struct.active_line_s** %11, align 8
  %78 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %77, i32 0, i32 0
  %79 = bitcast %struct.timeval* %78 to i8*
  %80 = bitcast %struct.timeval* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %79, i8* align 8 %80, i64 16, i1 false)
  %81 = load %struct.active_line_s*, %struct.active_line_s** %11, align 8
  %82 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %81, i32 0, i32 1
  %83 = bitcast %struct.timeval* %82 to i8*
  %84 = bitcast %struct.timeval* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %83, i8* align 8 %84, i64 16, i1 false)
  %85 = load %struct.segment_s*, %struct.segment_s** %6, align 8
  %86 = load %struct.active_line_s*, %struct.active_line_s** %11, align 8
  %87 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %86, i32 0, i32 5
  store %struct.segment_s* %85, %struct.segment_s** %87, align 8
  br label %128

88:                                               ; preds = %4
  %89 = getelementptr inbounds %struct.timeval, %struct.timeval* %9, i32 0, i32 1
  %90 = load i64, i64* %89, align 8
  store i64 %90, i64* %12, align 8
  %91 = getelementptr inbounds %struct.timeval, %struct.timeval* %10, i32 0, i32 0
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %struct.timeval, %struct.timeval* %9, i32 0, i32 0
  %94 = load i64, i64* %93, align 8
  %95 = icmp sgt i64 %92, %94
  br i1 %95, label %96, label %102

96:                                               ; preds = %88
  %97 = getelementptr inbounds %struct.timeval, %struct.timeval* %10, i32 0, i32 0
  %98 = load i64, i64* %97, align 8
  %99 = getelementptr inbounds %struct.timeval, %struct.timeval* %9, i32 0, i32 0
  %100 = load i64, i64* %99, align 8
  %101 = sub nsw i64 %98, %100
  br label %108

102:                                              ; preds = %88
  %103 = getelementptr inbounds %struct.timeval, %struct.timeval* %9, i32 0, i32 0
  %104 = load i64, i64* %103, align 8
  %105 = getelementptr inbounds %struct.timeval, %struct.timeval* %10, i32 0, i32 0
  %106 = load i64, i64* %105, align 8
  %107 = sub nsw i64 %104, %106
  br label %108

108:                                              ; preds = %102, %96
  %109 = phi i64 [ %101, %96 ], [ %107, %102 ]
  %110 = or i64 %109, 1
  %111 = sdiv i64 2147483647, %110
  %112 = getelementptr inbounds %struct.timeval, %struct.timeval* %9, i32 0, i32 1
  %113 = load i64, i64* %112, align 8
  %114 = add nsw i64 %111, %113
  %115 = load %struct.active_line_s*, %struct.active_line_s** %11, align 8
  %116 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %115, i32 0, i32 2
  store i64 %114, i64* %116, align 8
  %117 = load %struct.active_line_s*, %struct.active_line_s** %11, align 8
  %118 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %117, i32 0, i32 0
  %119 = bitcast %struct.timeval* %118 to i8*
  %120 = bitcast %struct.timeval* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %119, i8* align 8 %120, i64 16, i1 false)
  %121 = load %struct.active_line_s*, %struct.active_line_s** %11, align 8
  %122 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %121, i32 0, i32 1
  %123 = bitcast %struct.timeval* %122 to i8*
  %124 = bitcast %struct.timeval* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %123, i8* align 8 %124, i64 16, i1 false)
  %125 = load %struct.segment_s*, %struct.segment_s** %5, align 8
  %126 = load %struct.active_line_s*, %struct.active_line_s** %11, align 8
  %127 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %126, i32 0, i32 5
  store %struct.segment_s* %125, %struct.segment_s** %127, align 8
  br label %128

128:                                              ; preds = %108, %68
  %129 = load %struct.line_list_s*, %struct.line_list_s** %8, align 8
  %130 = getelementptr inbounds %struct.line_list_s, %struct.line_list_s* %129, i32 0, i32 5
  %131 = load %struct.active_line_s*, %struct.active_line_s** %130, align 8
  store %struct.active_line_s* %131, %struct.active_line_s** %13, align 8
  %132 = load %struct.active_line_s*, %struct.active_line_s** %13, align 8
  %133 = icmp eq %struct.active_line_s* %132, null
  br i1 %133, label %134, label %142

134:                                              ; preds = %128
  %135 = load %struct.active_line_s*, %struct.active_line_s** %11, align 8
  %136 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %135, i32 0, i32 9
  store %struct.active_line_s* null, %struct.active_line_s** %136, align 8
  %137 = load %struct.active_line_s*, %struct.active_line_s** %11, align 8
  %138 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %137, i32 0, i32 10
  store %struct.active_line_s* null, %struct.active_line_s** %138, align 8
  %139 = load %struct.active_line_s*, %struct.active_line_s** %11, align 8
  %140 = load %struct.line_list_s*, %struct.line_list_s** %8, align 8
  %141 = getelementptr inbounds %struct.line_list_s, %struct.line_list_s* %140, i32 0, i32 4
  store %struct.active_line_s* %139, %struct.active_line_s** %141, align 8
  br label %222

142:                                              ; preds = %128
  %143 = load i64, i64* %12, align 8
  %144 = load %struct.active_line_s*, %struct.active_line_s** %13, align 8
  %145 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %144, i32 0, i32 0
  %146 = getelementptr inbounds %struct.timeval, %struct.timeval* %145, i32 0, i32 1
  %147 = load i64, i64* %146, align 8
  %148 = icmp sge i64 %143, %147
  br i1 %148, label %149, label %183

149:                                              ; preds = %142
  br label %150

150:                                              ; preds = %164, %149
  %151 = load %struct.active_line_s*, %struct.active_line_s** %13, align 8
  %152 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %151, i32 0, i32 10
  %153 = load %struct.active_line_s*, %struct.active_line_s** %152, align 8
  store %struct.active_line_s* %153, %struct.active_line_s** %14, align 8
  %154 = icmp ne %struct.active_line_s* %153, null
  br i1 %154, label %155, label %162

155:                                              ; preds = %150
  %156 = load i64, i64* %12, align 8
  %157 = load %struct.active_line_s*, %struct.active_line_s** %14, align 8
  %158 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %157, i32 0, i32 0
  %159 = getelementptr inbounds %struct.timeval, %struct.timeval* %158, i32 0, i32 1
  %160 = load i64, i64* %159, align 8
  %161 = icmp sgt i64 %156, %160
  br label %162

162:                                              ; preds = %155, %150
  %163 = phi i1 [ false, %150 ], [ %161, %155 ]
  br i1 %163, label %164, label %166

164:                                              ; preds = %162
  %165 = load %struct.active_line_s*, %struct.active_line_s** %14, align 8
  store %struct.active_line_s* %165, %struct.active_line_s** %13, align 8
  br label %150

166:                                              ; preds = %162
  %167 = load %struct.active_line_s*, %struct.active_line_s** %14, align 8
  %168 = load %struct.active_line_s*, %struct.active_line_s** %11, align 8
  %169 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %168, i32 0, i32 10
  store %struct.active_line_s* %167, %struct.active_line_s** %169, align 8
  %170 = load %struct.active_line_s*, %struct.active_line_s** %13, align 8
  %171 = load %struct.active_line_s*, %struct.active_line_s** %11, align 8
  %172 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %171, i32 0, i32 9
  store %struct.active_line_s* %170, %struct.active_line_s** %172, align 8
  %173 = load %struct.active_line_s*, %struct.active_line_s** %11, align 8
  %174 = load %struct.active_line_s*, %struct.active_line_s** %13, align 8
  %175 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %174, i32 0, i32 10
  store %struct.active_line_s* %173, %struct.active_line_s** %175, align 8
  %176 = load %struct.active_line_s*, %struct.active_line_s** %14, align 8
  %177 = icmp ne %struct.active_line_s* %176, null
  br i1 %177, label %178, label %182

178:                                              ; preds = %166
  %179 = load %struct.active_line_s*, %struct.active_line_s** %11, align 8
  %180 = load %struct.active_line_s*, %struct.active_line_s** %14, align 8
  %181 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %180, i32 0, i32 9
  store %struct.active_line_s* %179, %struct.active_line_s** %181, align 8
  br label %182

182:                                              ; preds = %178, %166
  br label %221

183:                                              ; preds = %142
  br label %184

184:                                              ; preds = %198, %183
  %185 = load %struct.active_line_s*, %struct.active_line_s** %13, align 8
  %186 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %185, i32 0, i32 9
  %187 = load %struct.active_line_s*, %struct.active_line_s** %186, align 8
  store %struct.active_line_s* %187, %struct.active_line_s** %14, align 8
  %188 = icmp ne %struct.active_line_s* %187, null
  br i1 %188, label %189, label %196

189:                                              ; preds = %184
  %190 = load i64, i64* %12, align 8
  %191 = load %struct.active_line_s*, %struct.active_line_s** %14, align 8
  %192 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %191, i32 0, i32 0
  %193 = getelementptr inbounds %struct.timeval, %struct.timeval* %192, i32 0, i32 1
  %194 = load i64, i64* %193, align 8
  %195 = icmp slt i64 %190, %194
  br label %196

196:                                              ; preds = %189, %184
  %197 = phi i1 [ false, %184 ], [ %195, %189 ]
  br i1 %197, label %198, label %200

198:                                              ; preds = %196
  %199 = load %struct.active_line_s*, %struct.active_line_s** %14, align 8
  store %struct.active_line_s* %199, %struct.active_line_s** %13, align 8
  br label %184

200:                                              ; preds = %196
  %201 = load %struct.active_line_s*, %struct.active_line_s** %14, align 8
  %202 = load %struct.active_line_s*, %struct.active_line_s** %11, align 8
  %203 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %202, i32 0, i32 9
  store %struct.active_line_s* %201, %struct.active_line_s** %203, align 8
  %204 = load %struct.active_line_s*, %struct.active_line_s** %13, align 8
  %205 = load %struct.active_line_s*, %struct.active_line_s** %11, align 8
  %206 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %205, i32 0, i32 10
  store %struct.active_line_s* %204, %struct.active_line_s** %206, align 8
  %207 = load %struct.active_line_s*, %struct.active_line_s** %11, align 8
  %208 = load %struct.active_line_s*, %struct.active_line_s** %13, align 8
  %209 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %208, i32 0, i32 9
  store %struct.active_line_s* %207, %struct.active_line_s** %209, align 8
  %210 = load %struct.active_line_s*, %struct.active_line_s** %14, align 8
  %211 = icmp ne %struct.active_line_s* %210, null
  br i1 %211, label %212, label %216

212:                                              ; preds = %200
  %213 = load %struct.active_line_s*, %struct.active_line_s** %11, align 8
  %214 = load %struct.active_line_s*, %struct.active_line_s** %14, align 8
  %215 = getelementptr inbounds %struct.active_line_s, %struct.active_line_s* %214, i32 0, i32 10
  store %struct.active_line_s* %213, %struct.active_line_s** %215, align 8
  br label %220

216:                                              ; preds = %200
  %217 = load %struct.active_line_s*, %struct.active_line_s** %11, align 8
  %218 = load %struct.line_list_s*, %struct.line_list_s** %8, align 8
  %219 = getelementptr inbounds %struct.line_list_s, %struct.line_list_s* %218, i32 0, i32 4
  store %struct.active_line_s* %217, %struct.active_line_s** %219, align 8
  br label %220

220:                                              ; preds = %216, %212
  br label %221

221:                                              ; preds = %220, %182
  br label %222

222:                                              ; preds = %221, %134
  %223 = load %struct.active_line_s*, %struct.active_line_s** %11, align 8
  %224 = load %struct.line_list_s*, %struct.line_list_s** %8, align 8
  %225 = getelementptr inbounds %struct.line_list_s, %struct.line_list_s* %224, i32 0, i32 5
  store %struct.active_line_s* %223, %struct.active_line_s** %225, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_ht_construct_order(%struct.ht_bit_s* %0, i32 %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.ht_bit_s*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store %struct.ht_bit_s* %0, %struct.ht_bit_s** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  %12 = load i32, i32* %6, align 4
  %13 = load i32, i32* %7, align 4
  %14 = mul nsw i32 %12, %13
  store i32 %14, i32* %9, align 4
  %15 = load i32, i32* %6, align 4
  %16 = sub nsw i32 0, %15
  %17 = and i32 %16, 31
  store i32 %17, i32* %10, align 4
  %18 = load i32, i32* %6, align 4
  %19 = load i32, i32* %10, align 4
  %20 = add nsw i32 %18, %19
  %21 = sdiv i32 %20, 8
  %22 = load i32, i32* %7, align 4
  %23 = mul nsw i32 %21, %22
  %24 = icmp sgt i32 %23, 1000
  br i1 %24, label %25, label %26

25:                                               ; preds = %3
  store i32 -13, i32* %4, align 4
  br label %87

26:                                               ; preds = %3
  store %struct.ht_bit_s* null, %struct.ht_bit_s** getelementptr inbounds (%struct.gx_ht_cache_s, %struct.gx_ht_cache_s* @cache, i32 0, i32 2), align 8
  store i8* getelementptr inbounds ([1000 x i8], [1000 x i8]* @cache_bits, i64 0, i64 0), i8** getelementptr inbounds (%struct.gx_ht_cache_s, %struct.gx_ht_cache_s* @cache, i32 0, i32 0), align 8
  store i32 1000, i32* getelementptr inbounds (%struct.gx_ht_cache_s, %struct.gx_ht_cache_s* @cache, i32 0, i32 1), align 8
  store i32 0, i32* %8, align 4
  br label %27

27:                                               ; preds = %83, %26
  %28 = load i32, i32* %8, align 4
  %29 = load i32, i32* %9, align 4
  %30 = icmp ult i32 %28, %29
  br i1 %30, label %31, label %86

31:                                               ; preds = %27
  %32 = load %struct.ht_bit_s*, %struct.ht_bit_s** %5, align 8
  %33 = load i32, i32* %8, align 4
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds %struct.ht_bit_s, %struct.ht_bit_s* %32, i64 %34
  %36 = getelementptr inbounds %struct.ht_bit_s, %struct.ht_bit_s* %35, i32 0, i32 0
  %37 = load i16, i16* %36, align 2
  %38 = zext i16 %37 to i32
  store i32 %38, i32* %11, align 4
  %39 = load i32, i32* %11, align 4
  %40 = load i32, i32* %6, align 4
  %41 = sdiv i32 %39, %40
  %42 = load i32, i32* %10, align 4
  %43 = mul nsw i32 %41, %42
  %44 = load i32, i32* %11, align 4
  %45 = add nsw i32 %44, %43
  store i32 %45, i32* %11, align 4
  %46 = load i32, i32* %11, align 4
  %47 = ashr i32 %46, 4
  %48 = shl i32 %47, 1
  %49 = trunc i32 %48 to i16
  %50 = load %struct.ht_bit_s*, %struct.ht_bit_s** %5, align 8
  %51 = load i32, i32* %8, align 4
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds %struct.ht_bit_s, %struct.ht_bit_s* %50, i64 %52
  %54 = getelementptr inbounds %struct.ht_bit_s, %struct.ht_bit_s* %53, i32 0, i32 0
  store i16 %49, i16* %54, align 2
  %55 = load i32, i32* %6, align 4
  %56 = icmp sle i32 %55, 8
  br i1 %56, label %57, label %68

57:                                               ; preds = %31
  %58 = load i32, i32* %6, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds [9 x i16*], [9 x i16*]* @multi_bits, i64 0, i64 %59
  %61 = load i16*, i16** %60, align 8
  %62 = load i32, i32* %11, align 4
  %63 = and i32 %62, 15
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds i16, i16* %61, i64 %64
  %66 = load i16, i16* %65, align 2
  %67 = zext i16 %66 to i32
  br label %75

68:                                               ; preds = %31
  %69 = load i32, i32* %11, align 4
  %70 = and i32 %69, 15
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i16, i16* bitcast ([32 x i8]* @single_bits8 to i16*), i64 %71
  %73 = load i16, i16* %72, align 2
  %74 = zext i16 %73 to i32
  br label %75

75:                                               ; preds = %68, %57
  %76 = phi i32 [ %67, %57 ], [ %74, %68 ]
  %77 = trunc i32 %76 to i16
  %78 = load %struct.ht_bit_s*, %struct.ht_bit_s** %5, align 8
  %79 = load i32, i32* %8, align 4
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds %struct.ht_bit_s, %struct.ht_bit_s* %78, i64 %80
  %82 = getelementptr inbounds %struct.ht_bit_s, %struct.ht_bit_s* %81, i32 0, i32 1
  store i16 %77, i16* %82, align 2
  br label %83

83:                                               ; preds = %75
  %84 = load i32, i32* %8, align 4
  %85 = add i32 %84, 1
  store i32 %85, i32* %8, align 4
  br label %27

86:                                               ; preds = %27
  store i32 0, i32* %4, align 4
  br label %87

87:                                               ; preds = %86, %25
  %88 = load i32, i32* %4, align 4
  ret i32 %88
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gx_color_load(%struct.gx_device_color_s* %0, %struct.gs_state_s* %1) #0 {
  %3 = alloca %struct.gx_device_color_s*, align 8
  %4 = alloca %struct.gs_state_s*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct.halftone_s*, align 8
  %7 = alloca %struct.bit_tile_s*, align 8
  store %struct.gx_device_color_s* %0, %struct.gx_device_color_s** %3, align 8
  store %struct.gs_state_s* %1, %struct.gs_state_s** %4, align 8
  %8 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %3, align 8
  %9 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %8, i32 0, i32 2
  %10 = load i32, i32* %9, align 8
  store i32 %10, i32* %5, align 4
  %11 = load i32, i32* %5, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  br label %45

14:                                               ; preds = %2
  %15 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %16 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %15, i32 0, i32 11
  %17 = load %struct.halftone_s*, %struct.halftone_s** %16, align 8
  store %struct.halftone_s* %17, %struct.halftone_s** %6, align 8
  %18 = load %struct.ht_bit_s*, %struct.ht_bit_s** getelementptr inbounds (%struct.gx_ht_cache_s, %struct.gx_ht_cache_s* @cache, i32 0, i32 2), align 8
  %19 = load %struct.halftone_s*, %struct.halftone_s** %6, align 8
  %20 = getelementptr inbounds %struct.halftone_s, %struct.halftone_s* %19, i32 0, i32 4
  %21 = load %struct.ht_bit_s*, %struct.ht_bit_s** %20, align 8
  %22 = icmp ne %struct.ht_bit_s* %18, %21
  br i1 %22, label %23, label %25

23:                                               ; preds = %14
  %24 = load %struct.halftone_s*, %struct.halftone_s** %6, align 8
  call void @init_ht(%struct.gx_ht_cache_s* @cache, %struct.halftone_s* %24)
  br label %25

25:                                               ; preds = %23, %14
  %26 = load i32, i32* %5, align 4
  %27 = load i32, i32* getelementptr inbounds (%struct.gx_ht_cache_s, %struct.gx_ht_cache_s* @cache, i32 0, i32 4), align 4
  %28 = sdiv i32 %26, %27
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds [25 x %struct.bit_tile_s], [25 x %struct.bit_tile_s]* getelementptr inbounds (%struct.gx_ht_cache_s, %struct.gx_ht_cache_s* @cache, i32 0, i32 5), i64 0, i64 %29
  store %struct.bit_tile_s* %30, %struct.bit_tile_s** %7, align 8
  %31 = load %struct.bit_tile_s*, %struct.bit_tile_s** %7, align 8
  %32 = getelementptr inbounds %struct.bit_tile_s, %struct.bit_tile_s* %31, i32 0, i32 0
  %33 = load i32, i32* %32, align 8
  %34 = load i32, i32* %5, align 4
  %35 = icmp ne i32 %33, %34
  br i1 %35, label %36, label %40

36:                                               ; preds = %25
  %37 = load %struct.bit_tile_s*, %struct.bit_tile_s** %7, align 8
  %38 = load i32, i32* %5, align 4
  %39 = load %struct.halftone_s*, %struct.halftone_s** %6, align 8
  call void @render_ht(%struct.bit_tile_s* %37, i32 %38, %struct.halftone_s* %39)
  br label %40

40:                                               ; preds = %36, %25
  %41 = load %struct.bit_tile_s*, %struct.bit_tile_s** %7, align 8
  %42 = getelementptr inbounds %struct.bit_tile_s, %struct.bit_tile_s* %41, i32 0, i32 1
  %43 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %3, align 8
  %44 = getelementptr inbounds %struct.gx_device_color_s, %struct.gx_device_color_s* %43, i32 0, i32 3
  store %struct.gx_bitmap_s* %42, %struct.gx_bitmap_s** %44, align 8
  br label %45

45:                                               ; preds = %40, %13
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_ht(%struct.gx_ht_cache_s* %0, %struct.halftone_s* %1) #0 {
  %3 = alloca %struct.gx_ht_cache_s*, align 8
  %4 = alloca %struct.halftone_s*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca %struct.bit_tile_s*, align 8
  store %struct.gx_ht_cache_s* %0, %struct.gx_ht_cache_s** %3, align 8
  store %struct.halftone_s* %1, %struct.halftone_s** %4, align 8
  %15 = load %struct.halftone_s*, %struct.halftone_s** %4, align 8
  %16 = getelementptr inbounds %struct.halftone_s, %struct.halftone_s* %15, i32 0, i32 2
  %17 = load i32, i32* %16, align 8
  store i32 %17, i32* %5, align 4
  %18 = load %struct.halftone_s*, %struct.halftone_s** %4, align 8
  %19 = getelementptr inbounds %struct.halftone_s, %struct.halftone_s* %18, i32 0, i32 3
  %20 = load i32, i32* %19, align 4
  store i32 %20, i32* %6, align 4
  %21 = load i32, i32* %5, align 4
  %22 = load i32, i32* %6, align 4
  %23 = mul nsw i32 %21, %22
  store i32 %23, i32* %7, align 4
  %24 = load i32, i32* %5, align 4
  %25 = icmp sle i32 %24, 8
  br i1 %25, label %26, label %31

26:                                               ; preds = %2
  %27 = load i32, i32* %5, align 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds [9 x i32], [9 x i32]* @init_ht.up_to_16, i64 0, i64 %28
  %30 = load i32, i32* %29, align 4
  br label %33

31:                                               ; preds = %2
  %32 = load i32, i32* %5, align 4
  br label %33

33:                                               ; preds = %31, %26
  %34 = phi i32 [ %30, %26 ], [ %32, %31 ]
  store i32 %34, i32* %8, align 4
  %35 = load i32, i32* %5, align 4
  %36 = add nsw i32 %35, 31
  %37 = ashr i32 %36, 5
  %38 = shl i32 %37, 2
  store i32 %38, i32* %9, align 4
  %39 = load i32, i32* %9, align 4
  %40 = load i32, i32* %6, align 4
  %41 = mul i32 %39, %40
  store i32 %41, i32* %10, align 4
  %42 = load %struct.gx_ht_cache_s*, %struct.gx_ht_cache_s** %3, align 8
  %43 = getelementptr inbounds %struct.gx_ht_cache_s, %struct.gx_ht_cache_s* %42, i32 0, i32 0
  %44 = load i8*, i8** %43, align 8
  store i8* %44, i8** %13, align 8
  %45 = load i32, i32* %10, align 4
  %46 = udiv i32 1000, %45
  store i32 %46, i32* %11, align 4
  %47 = load i32, i32* %11, align 4
  %48 = load i32, i32* %7, align 4
  %49 = icmp sgt i32 %47, %48
  br i1 %49, label %50, label %52

50:                                               ; preds = %33
  %51 = load i32, i32* %7, align 4
  store i32 %51, i32* %11, align 4
  br label %52

52:                                               ; preds = %50, %33
  %53 = load i32, i32* %11, align 4
  %54 = icmp sgt i32 %53, 25
  br i1 %54, label %55, label %56

55:                                               ; preds = %52
  store i32 25, i32* %11, align 4
  br label %56

56:                                               ; preds = %55, %52
  store i32 0, i32* %12, align 4
  br label %57

57:                                               ; preds = %89, %56
  %58 = load i32, i32* %12, align 4
  %59 = load i32, i32* %11, align 4
  %60 = icmp slt i32 %58, %59
  br i1 %60, label %61, label %92

61:                                               ; preds = %57
  %62 = load %struct.gx_ht_cache_s*, %struct.gx_ht_cache_s** %3, align 8
  %63 = getelementptr inbounds %struct.gx_ht_cache_s, %struct.gx_ht_cache_s* %62, i32 0, i32 5
  %64 = load i32, i32* %12, align 4
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds [25 x %struct.bit_tile_s], [25 x %struct.bit_tile_s]* %63, i64 0, i64 %65
  store %struct.bit_tile_s* %66, %struct.bit_tile_s** %14, align 8
  %67 = load %struct.bit_tile_s*, %struct.bit_tile_s** %14, align 8
  %68 = getelementptr inbounds %struct.bit_tile_s, %struct.bit_tile_s* %67, i32 0, i32 0
  store i32 -1, i32* %68, align 8
  %69 = load i8*, i8** %13, align 8
  %70 = load %struct.bit_tile_s*, %struct.bit_tile_s** %14, align 8
  %71 = getelementptr inbounds %struct.bit_tile_s, %struct.bit_tile_s* %70, i32 0, i32 1
  %72 = getelementptr inbounds %struct.gx_bitmap_s, %struct.gx_bitmap_s* %71, i32 0, i32 0
  store i8* %69, i8** %72, align 8
  %73 = load i32, i32* %9, align 4
  %74 = load %struct.bit_tile_s*, %struct.bit_tile_s** %14, align 8
  %75 = getelementptr inbounds %struct.bit_tile_s, %struct.bit_tile_s* %74, i32 0, i32 1
  %76 = getelementptr inbounds %struct.gx_bitmap_s, %struct.gx_bitmap_s* %75, i32 0, i32 1
  store i32 %73, i32* %76, align 8
  %77 = load i32, i32* %8, align 4
  %78 = load %struct.bit_tile_s*, %struct.bit_tile_s** %14, align 8
  %79 = getelementptr inbounds %struct.bit_tile_s, %struct.bit_tile_s* %78, i32 0, i32 1
  %80 = getelementptr inbounds %struct.gx_bitmap_s, %struct.gx_bitmap_s* %79, i32 0, i32 2
  store i32 %77, i32* %80, align 4
  %81 = load i32, i32* %6, align 4
  %82 = load %struct.bit_tile_s*, %struct.bit_tile_s** %14, align 8
  %83 = getelementptr inbounds %struct.bit_tile_s, %struct.bit_tile_s* %82, i32 0, i32 1
  %84 = getelementptr inbounds %struct.gx_bitmap_s, %struct.gx_bitmap_s* %83, i32 0, i32 3
  store i32 %81, i32* %84, align 8
  %85 = load i32, i32* %10, align 4
  %86 = load i8*, i8** %13, align 8
  %87 = zext i32 %85 to i64
  %88 = getelementptr inbounds i8, i8* %86, i64 %87
  store i8* %88, i8** %13, align 8
  br label %89

89:                                               ; preds = %61
  %90 = load i32, i32* %12, align 4
  %91 = add nsw i32 %90, 1
  store i32 %91, i32* %12, align 4
  br label %57

92:                                               ; preds = %57
  %93 = load %struct.halftone_s*, %struct.halftone_s** %4, align 8
  %94 = getelementptr inbounds %struct.halftone_s, %struct.halftone_s* %93, i32 0, i32 4
  %95 = load %struct.ht_bit_s*, %struct.ht_bit_s** %94, align 8
  %96 = load %struct.gx_ht_cache_s*, %struct.gx_ht_cache_s** %3, align 8
  %97 = getelementptr inbounds %struct.gx_ht_cache_s, %struct.gx_ht_cache_s* %96, i32 0, i32 2
  store %struct.ht_bit_s* %95, %struct.ht_bit_s** %97, align 8
  %98 = load i32, i32* %11, align 4
  %99 = load %struct.gx_ht_cache_s*, %struct.gx_ht_cache_s** %3, align 8
  %100 = getelementptr inbounds %struct.gx_ht_cache_s, %struct.gx_ht_cache_s* %99, i32 0, i32 3
  store i32 %98, i32* %100, align 8
  %101 = load i32, i32* %7, align 4
  %102 = load i32, i32* %11, align 4
  %103 = add nsw i32 %101, %102
  %104 = sub nsw i32 %103, 1
  %105 = load i32, i32* %11, align 4
  %106 = sdiv i32 %104, %105
  %107 = load %struct.gx_ht_cache_s*, %struct.gx_ht_cache_s** %3, align 8
  %108 = getelementptr inbounds %struct.gx_ht_cache_s, %struct.gx_ht_cache_s* %107, i32 0, i32 4
  store i32 %106, i32* %108, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @render_ht(%struct.bit_tile_s* %0, i32 %1, %struct.halftone_s* %2) #0 {
  %4 = alloca %struct.bit_tile_s*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct.halftone_s*, align 8
  %7 = alloca %struct.ht_bit_s*, align 8
  %8 = alloca %struct.ht_bit_s*, align 8
  %9 = alloca %struct.ht_bit_s*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store %struct.bit_tile_s* %0, %struct.bit_tile_s** %4, align 8
  store i32 %1, i32* %5, align 4
  store %struct.halftone_s* %2, %struct.halftone_s** %6, align 8
  %13 = load %struct.halftone_s*, %struct.halftone_s** %6, align 8
  %14 = getelementptr inbounds %struct.halftone_s, %struct.halftone_s* %13, i32 0, i32 4
  %15 = load %struct.ht_bit_s*, %struct.ht_bit_s** %14, align 8
  store %struct.ht_bit_s* %15, %struct.ht_bit_s** %7, align 8
  %16 = load %struct.bit_tile_s*, %struct.bit_tile_s** %4, align 8
  %17 = getelementptr inbounds %struct.bit_tile_s, %struct.bit_tile_s* %16, i32 0, i32 1
  %18 = getelementptr inbounds %struct.gx_bitmap_s, %struct.gx_bitmap_s* %17, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  store i8* %19, i8** %10, align 8
  %20 = load %struct.bit_tile_s*, %struct.bit_tile_s** %4, align 8
  %21 = getelementptr inbounds %struct.bit_tile_s, %struct.bit_tile_s* %20, i32 0, i32 0
  %22 = load i32, i32* %21, align 8
  store i32 %22, i32* %11, align 4
  %23 = load i32, i32* %11, align 4
  %24 = icmp slt i32 %23, 0
  br i1 %24, label %25, label %53

25:                                               ; preds = %3
  %26 = load %struct.bit_tile_s*, %struct.bit_tile_s** %4, align 8
  %27 = getelementptr inbounds %struct.bit_tile_s, %struct.bit_tile_s* %26, i32 0, i32 1
  %28 = getelementptr inbounds %struct.gx_bitmap_s, %struct.gx_bitmap_s* %27, i32 0, i32 1
  %29 = load i32, i32* %28, align 8
  %30 = load %struct.bit_tile_s*, %struct.bit_tile_s** %4, align 8
  %31 = getelementptr inbounds %struct.bit_tile_s, %struct.bit_tile_s* %30, i32 0, i32 1
  %32 = getelementptr inbounds %struct.gx_bitmap_s, %struct.gx_bitmap_s* %31, i32 0, i32 3
  %33 = load i32, i32* %32, align 8
  %34 = mul nsw i32 %29, %33
  store i32 %34, i32* %12, align 4
  %35 = load i32, i32* %5, align 4
  %36 = load %struct.halftone_s*, %struct.halftone_s** %6, align 8
  %37 = getelementptr inbounds %struct.halftone_s, %struct.halftone_s* %36, i32 0, i32 5
  %38 = load i32, i32* %37, align 8
  %39 = ashr i32 %38, 1
  %40 = icmp sge i32 %35, %39
  br i1 %40, label %41, label %48

41:                                               ; preds = %25
  %42 = load %struct.halftone_s*, %struct.halftone_s** %6, align 8
  %43 = getelementptr inbounds %struct.halftone_s, %struct.halftone_s* %42, i32 0, i32 5
  %44 = load i32, i32* %43, align 8
  store i32 %44, i32* %11, align 4
  %45 = load i8*, i8** %10, align 8
  %46 = load i32, i32* %12, align 4
  %47 = zext i32 %46 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %45, i8 -1, i64 %47, i1 false)
  br label %52

48:                                               ; preds = %25
  store i32 0, i32* %11, align 4
  %49 = load i8*, i8** %10, align 8
  %50 = load i32, i32* %12, align 4
  %51 = zext i32 %50 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %49, i8 0, i64 %51, i1 false)
  br label %52

52:                                               ; preds = %48, %41
  br label %53

53:                                               ; preds = %52, %3
  %54 = load i32, i32* %5, align 4
  %55 = load i32, i32* %11, align 4
  %56 = icmp sgt i32 %54, %55
  br i1 %56, label %57, label %66

57:                                               ; preds = %53
  %58 = load %struct.ht_bit_s*, %struct.ht_bit_s** %7, align 8
  %59 = load i32, i32* %11, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds %struct.ht_bit_s, %struct.ht_bit_s* %58, i64 %60
  store %struct.ht_bit_s* %61, %struct.ht_bit_s** %8, align 8
  %62 = load %struct.ht_bit_s*, %struct.ht_bit_s** %7, align 8
  %63 = load i32, i32* %5, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds %struct.ht_bit_s, %struct.ht_bit_s* %62, i64 %64
  store %struct.ht_bit_s* %65, %struct.ht_bit_s** %9, align 8
  br label %75

66:                                               ; preds = %53
  %67 = load %struct.ht_bit_s*, %struct.ht_bit_s** %7, align 8
  %68 = load i32, i32* %5, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds %struct.ht_bit_s, %struct.ht_bit_s* %67, i64 %69
  store %struct.ht_bit_s* %70, %struct.ht_bit_s** %8, align 8
  %71 = load %struct.ht_bit_s*, %struct.ht_bit_s** %7, align 8
  %72 = load i32, i32* %11, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds %struct.ht_bit_s, %struct.ht_bit_s* %71, i64 %73
  store %struct.ht_bit_s* %74, %struct.ht_bit_s** %9, align 8
  br label %75

75:                                               ; preds = %66, %57
  br label %76

76:                                               ; preds = %92, %75
  %77 = load %struct.ht_bit_s*, %struct.ht_bit_s** %8, align 8
  %78 = getelementptr inbounds %struct.ht_bit_s, %struct.ht_bit_s* %77, i32 0, i32 1
  %79 = load i16, i16* %78, align 2
  %80 = zext i16 %79 to i32
  %81 = load i8*, i8** %10, align 8
  %82 = load %struct.ht_bit_s*, %struct.ht_bit_s** %8, align 8
  %83 = getelementptr inbounds %struct.ht_bit_s, %struct.ht_bit_s* %82, i32 0, i32 0
  %84 = load i16, i16* %83, align 2
  %85 = zext i16 %84 to i64
  %86 = getelementptr inbounds i8, i8* %81, i64 %85
  %87 = bitcast i8* %86 to i16*
  %88 = load i16, i16* %87, align 2
  %89 = zext i16 %88 to i32
  %90 = xor i32 %89, %80
  %91 = trunc i32 %90 to i16
  store i16 %91, i16* %87, align 2
  br label %92

92:                                               ; preds = %76
  %93 = load %struct.ht_bit_s*, %struct.ht_bit_s** %8, align 8
  %94 = getelementptr inbounds %struct.ht_bit_s, %struct.ht_bit_s* %93, i32 1
  store %struct.ht_bit_s* %94, %struct.ht_bit_s** %8, align 8
  %95 = load %struct.ht_bit_s*, %struct.ht_bit_s** %9, align 8
  %96 = icmp ult %struct.ht_bit_s* %94, %95
  br i1 %96, label %76, label %97

97:                                               ; preds = %92
  %98 = load i32, i32* %5, align 4
  %99 = load %struct.bit_tile_s*, %struct.bit_tile_s** %4, align 8
  %100 = getelementptr inbounds %struct.bit_tile_s, %struct.bit_tile_s* %99, i32 0, i32 0
  store i32 %98, i32* %100, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_path_current_point(%struct.gx_path_s* %0, %struct.timeval* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.gx_path_s*, align 8
  %5 = alloca %struct.timeval*, align 8
  store %struct.gx_path_s* %0, %struct.gx_path_s** %4, align 8
  store %struct.timeval* %1, %struct.timeval** %5, align 8
  %6 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %7 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %6, i32 0, i32 10
  %8 = load i8, i8* %7, align 8
  %9 = icmp ne i8 %8, 0
  br i1 %9, label %11, label %10

10:                                               ; preds = %2
  store i32 -14, i32* %3, align 4
  br label %24

11:                                               ; preds = %2
  %12 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %13 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.timeval, %struct.timeval* %13, i32 0, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = load %struct.timeval*, %struct.timeval** %5, align 8
  %17 = getelementptr inbounds %struct.timeval, %struct.timeval* %16, i32 0, i32 0
  store i64 %15, i64* %17, align 8
  %18 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %19 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %18, i32 0, i32 9
  %20 = getelementptr inbounds %struct.timeval, %struct.timeval* %19, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = load %struct.timeval*, %struct.timeval** %5, align 8
  %23 = getelementptr inbounds %struct.timeval, %struct.timeval* %22, i32 0, i32 1
  store i64 %21, i64* %23, align 8
  store i32 0, i32* %3, align 4
  br label %24

24:                                               ; preds = %11, %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_path_bbox(%struct.gx_path_s* %0, %struct.gs_fixed_rect_s* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.gx_path_s*, align 8
  %5 = alloca %struct.gs_fixed_rect_s*, align 8
  %6 = alloca %struct.gs_fixed_rect_s, align 8
  %7 = alloca %struct.segment_s*, align 8
  store %struct.gx_path_s* %0, %struct.gx_path_s** %4, align 8
  store %struct.gs_fixed_rect_s* %1, %struct.gs_fixed_rect_s** %5, align 8
  %8 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %9 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %8, i32 0, i32 4
  %10 = load %struct.subpath*, %struct.subpath** %9, align 8
  %11 = icmp eq %struct.subpath* %10, null
  br i1 %11, label %12, label %21

12:                                               ; preds = %2
  %13 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %14 = load %struct.gs_fixed_rect_s*, %struct.gs_fixed_rect_s** %5, align 8
  %15 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %14, i32 0, i32 0
  %16 = call i32 @gx_path_current_point(%struct.gx_path_s* %13, %struct.timeval* %15)
  %17 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %18 = load %struct.gs_fixed_rect_s*, %struct.gs_fixed_rect_s** %5, align 8
  %19 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %18, i32 0, i32 1
  %20 = call i32 @gx_path_current_point(%struct.gx_path_s* %17, %struct.timeval* %19)
  store i32 %20, i32* %3, align 4
  br label %316

21:                                               ; preds = %2
  %22 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %23 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %22, i32 0, i32 2
  %24 = load %struct.segment_s*, %struct.segment_s** %23, align 8
  %25 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %26 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %25, i32 0, i32 5
  %27 = load %struct.subpath*, %struct.subpath** %26, align 8
  %28 = getelementptr inbounds %struct.subpath, %struct.subpath* %27, i32 0, i32 4
  %29 = load %struct.segment_s*, %struct.segment_s** %28, align 8
  %30 = icmp eq %struct.segment_s* %24, %29
  br i1 %30, label %31, label %37

31:                                               ; preds = %21
  %32 = load %struct.gs_fixed_rect_s*, %struct.gs_fixed_rect_s** %5, align 8
  %33 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %34 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %33, i32 0, i32 1
  %35 = bitcast %struct.gs_fixed_rect_s* %32 to i8*
  %36 = bitcast %struct.gs_fixed_rect_s* %34 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 32, i1 false)
  br label %315

37:                                               ; preds = %21
  %38 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %39 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %38, i32 0, i32 2
  %40 = load %struct.segment_s*, %struct.segment_s** %39, align 8
  store %struct.segment_s* %40, %struct.segment_s** %7, align 8
  %41 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %42 = icmp eq %struct.segment_s* %41, null
  br i1 %42, label %43, label %64

43:                                               ; preds = %37
  %44 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %45 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %44, i32 0, i32 4
  %46 = load %struct.subpath*, %struct.subpath** %45, align 8
  %47 = bitcast %struct.subpath* %46 to %struct.segment_s*
  store %struct.segment_s* %47, %struct.segment_s** %7, align 8
  %48 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %49 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %48, i32 0, i32 3
  %50 = getelementptr inbounds %struct.timeval, %struct.timeval* %49, i32 0, i32 0
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %6, i32 0, i32 1
  %53 = getelementptr inbounds %struct.timeval, %struct.timeval* %52, i32 0, i32 0
  store i64 %51, i64* %53, align 8
  %54 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %6, i32 0, i32 0
  %55 = getelementptr inbounds %struct.timeval, %struct.timeval* %54, i32 0, i32 0
  store i64 %51, i64* %55, align 8
  %56 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %57 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %56, i32 0, i32 3
  %58 = getelementptr inbounds %struct.timeval, %struct.timeval* %57, i32 0, i32 1
  %59 = load i64, i64* %58, align 8
  %60 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %6, i32 0, i32 1
  %61 = getelementptr inbounds %struct.timeval, %struct.timeval* %60, i32 0, i32 1
  store i64 %59, i64* %61, align 8
  %62 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %6, i32 0, i32 0
  %63 = getelementptr inbounds %struct.timeval, %struct.timeval* %62, i32 0, i32 1
  store i64 %59, i64* %63, align 8
  br label %72

64:                                               ; preds = %37
  %65 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %66 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %65, i32 0, i32 1
  %67 = bitcast %struct.gs_fixed_rect_s* %6 to i8*
  %68 = bitcast %struct.gs_fixed_rect_s* %66 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %67, i8* align 8 %68, i64 32, i1 false)
  %69 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %70 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %69, i32 0, i32 1
  %71 = load %struct.segment_s*, %struct.segment_s** %70, align 8
  store %struct.segment_s* %71, %struct.segment_s** %7, align 8
  br label %72

72:                                               ; preds = %64, %43
  br label %73

73:                                               ; preds = %296, %72
  %74 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %75 = icmp ne %struct.segment_s* %74, null
  br i1 %75, label %76, label %300

76:                                               ; preds = %73
  %77 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %78 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %77, i32 0, i32 2
  %79 = load i32, i32* %78, align 8
  switch i32 %79, label %229 [
    i32 3, label %80
  ]

80:                                               ; preds = %76
  %81 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %82 = bitcast %struct.segment_s* %81 to %struct.curve_segment*
  %83 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %82, i32 0, i32 4
  %84 = getelementptr inbounds %struct.timeval, %struct.timeval* %83, i32 0, i32 0
  %85 = load i64, i64* %84, align 8
  %86 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %6, i32 0, i32 0
  %87 = getelementptr inbounds %struct.timeval, %struct.timeval* %86, i32 0, i32 0
  %88 = load i64, i64* %87, align 8
  %89 = icmp slt i64 %85, %88
  br i1 %89, label %90, label %98

90:                                               ; preds = %80
  %91 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %92 = bitcast %struct.segment_s* %91 to %struct.curve_segment*
  %93 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %92, i32 0, i32 4
  %94 = getelementptr inbounds %struct.timeval, %struct.timeval* %93, i32 0, i32 0
  %95 = load i64, i64* %94, align 8
  %96 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %6, i32 0, i32 0
  %97 = getelementptr inbounds %struct.timeval, %struct.timeval* %96, i32 0, i32 0
  store i64 %95, i64* %97, align 8
  br label %117

98:                                               ; preds = %80
  %99 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %100 = bitcast %struct.segment_s* %99 to %struct.curve_segment*
  %101 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %100, i32 0, i32 4
  %102 = getelementptr inbounds %struct.timeval, %struct.timeval* %101, i32 0, i32 0
  %103 = load i64, i64* %102, align 8
  %104 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %6, i32 0, i32 1
  %105 = getelementptr inbounds %struct.timeval, %struct.timeval* %104, i32 0, i32 0
  %106 = load i64, i64* %105, align 8
  %107 = icmp sgt i64 %103, %106
  br i1 %107, label %108, label %116

108:                                              ; preds = %98
  %109 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %110 = bitcast %struct.segment_s* %109 to %struct.curve_segment*
  %111 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %110, i32 0, i32 4
  %112 = getelementptr inbounds %struct.timeval, %struct.timeval* %111, i32 0, i32 0
  %113 = load i64, i64* %112, align 8
  %114 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %6, i32 0, i32 1
  %115 = getelementptr inbounds %struct.timeval, %struct.timeval* %114, i32 0, i32 0
  store i64 %113, i64* %115, align 8
  br label %116

116:                                              ; preds = %108, %98
  br label %117

117:                                              ; preds = %116, %90
  %118 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %119 = bitcast %struct.segment_s* %118 to %struct.curve_segment*
  %120 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %119, i32 0, i32 4
  %121 = getelementptr inbounds %struct.timeval, %struct.timeval* %120, i32 0, i32 1
  %122 = load i64, i64* %121, align 8
  %123 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %6, i32 0, i32 0
  %124 = getelementptr inbounds %struct.timeval, %struct.timeval* %123, i32 0, i32 1
  %125 = load i64, i64* %124, align 8
  %126 = icmp slt i64 %122, %125
  br i1 %126, label %127, label %135

127:                                              ; preds = %117
  %128 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %129 = bitcast %struct.segment_s* %128 to %struct.curve_segment*
  %130 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %129, i32 0, i32 4
  %131 = getelementptr inbounds %struct.timeval, %struct.timeval* %130, i32 0, i32 1
  %132 = load i64, i64* %131, align 8
  %133 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %6, i32 0, i32 0
  %134 = getelementptr inbounds %struct.timeval, %struct.timeval* %133, i32 0, i32 1
  store i64 %132, i64* %134, align 8
  br label %154

135:                                              ; preds = %117
  %136 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %137 = bitcast %struct.segment_s* %136 to %struct.curve_segment*
  %138 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %137, i32 0, i32 4
  %139 = getelementptr inbounds %struct.timeval, %struct.timeval* %138, i32 0, i32 1
  %140 = load i64, i64* %139, align 8
  %141 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %6, i32 0, i32 1
  %142 = getelementptr inbounds %struct.timeval, %struct.timeval* %141, i32 0, i32 1
  %143 = load i64, i64* %142, align 8
  %144 = icmp sgt i64 %140, %143
  br i1 %144, label %145, label %153

145:                                              ; preds = %135
  %146 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %147 = bitcast %struct.segment_s* %146 to %struct.curve_segment*
  %148 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %147, i32 0, i32 4
  %149 = getelementptr inbounds %struct.timeval, %struct.timeval* %148, i32 0, i32 1
  %150 = load i64, i64* %149, align 8
  %151 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %6, i32 0, i32 1
  %152 = getelementptr inbounds %struct.timeval, %struct.timeval* %151, i32 0, i32 1
  store i64 %150, i64* %152, align 8
  br label %153

153:                                              ; preds = %145, %135
  br label %154

154:                                              ; preds = %153, %127
  %155 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %156 = bitcast %struct.segment_s* %155 to %struct.curve_segment*
  %157 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %156, i32 0, i32 5
  %158 = getelementptr inbounds %struct.timeval, %struct.timeval* %157, i32 0, i32 0
  %159 = load i64, i64* %158, align 8
  %160 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %6, i32 0, i32 0
  %161 = getelementptr inbounds %struct.timeval, %struct.timeval* %160, i32 0, i32 0
  %162 = load i64, i64* %161, align 8
  %163 = icmp slt i64 %159, %162
  br i1 %163, label %164, label %172

164:                                              ; preds = %154
  %165 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %166 = bitcast %struct.segment_s* %165 to %struct.curve_segment*
  %167 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %166, i32 0, i32 5
  %168 = getelementptr inbounds %struct.timeval, %struct.timeval* %167, i32 0, i32 0
  %169 = load i64, i64* %168, align 8
  %170 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %6, i32 0, i32 0
  %171 = getelementptr inbounds %struct.timeval, %struct.timeval* %170, i32 0, i32 0
  store i64 %169, i64* %171, align 8
  br label %191

172:                                              ; preds = %154
  %173 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %174 = bitcast %struct.segment_s* %173 to %struct.curve_segment*
  %175 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %174, i32 0, i32 5
  %176 = getelementptr inbounds %struct.timeval, %struct.timeval* %175, i32 0, i32 0
  %177 = load i64, i64* %176, align 8
  %178 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %6, i32 0, i32 1
  %179 = getelementptr inbounds %struct.timeval, %struct.timeval* %178, i32 0, i32 0
  %180 = load i64, i64* %179, align 8
  %181 = icmp sgt i64 %177, %180
  br i1 %181, label %182, label %190

182:                                              ; preds = %172
  %183 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %184 = bitcast %struct.segment_s* %183 to %struct.curve_segment*
  %185 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %184, i32 0, i32 5
  %186 = getelementptr inbounds %struct.timeval, %struct.timeval* %185, i32 0, i32 0
  %187 = load i64, i64* %186, align 8
  %188 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %6, i32 0, i32 1
  %189 = getelementptr inbounds %struct.timeval, %struct.timeval* %188, i32 0, i32 0
  store i64 %187, i64* %189, align 8
  br label %190

190:                                              ; preds = %182, %172
  br label %191

191:                                              ; preds = %190, %164
  %192 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %193 = bitcast %struct.segment_s* %192 to %struct.curve_segment*
  %194 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %193, i32 0, i32 5
  %195 = getelementptr inbounds %struct.timeval, %struct.timeval* %194, i32 0, i32 1
  %196 = load i64, i64* %195, align 8
  %197 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %6, i32 0, i32 0
  %198 = getelementptr inbounds %struct.timeval, %struct.timeval* %197, i32 0, i32 1
  %199 = load i64, i64* %198, align 8
  %200 = icmp slt i64 %196, %199
  br i1 %200, label %201, label %209

201:                                              ; preds = %191
  %202 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %203 = bitcast %struct.segment_s* %202 to %struct.curve_segment*
  %204 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %203, i32 0, i32 5
  %205 = getelementptr inbounds %struct.timeval, %struct.timeval* %204, i32 0, i32 1
  %206 = load i64, i64* %205, align 8
  %207 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %6, i32 0, i32 0
  %208 = getelementptr inbounds %struct.timeval, %struct.timeval* %207, i32 0, i32 1
  store i64 %206, i64* %208, align 8
  br label %228

209:                                              ; preds = %191
  %210 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %211 = bitcast %struct.segment_s* %210 to %struct.curve_segment*
  %212 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %211, i32 0, i32 5
  %213 = getelementptr inbounds %struct.timeval, %struct.timeval* %212, i32 0, i32 1
  %214 = load i64, i64* %213, align 8
  %215 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %6, i32 0, i32 1
  %216 = getelementptr inbounds %struct.timeval, %struct.timeval* %215, i32 0, i32 1
  %217 = load i64, i64* %216, align 8
  %218 = icmp sgt i64 %214, %217
  br i1 %218, label %219, label %227

219:                                              ; preds = %209
  %220 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %221 = bitcast %struct.segment_s* %220 to %struct.curve_segment*
  %222 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %221, i32 0, i32 5
  %223 = getelementptr inbounds %struct.timeval, %struct.timeval* %222, i32 0, i32 1
  %224 = load i64, i64* %223, align 8
  %225 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %6, i32 0, i32 1
  %226 = getelementptr inbounds %struct.timeval, %struct.timeval* %225, i32 0, i32 1
  store i64 %224, i64* %226, align 8
  br label %227

227:                                              ; preds = %219, %209
  br label %228

228:                                              ; preds = %227, %201
  br label %229

229:                                              ; preds = %228, %76
  %230 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %231 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %230, i32 0, i32 3
  %232 = getelementptr inbounds %struct.timeval, %struct.timeval* %231, i32 0, i32 0
  %233 = load i64, i64* %232, align 8
  %234 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %6, i32 0, i32 0
  %235 = getelementptr inbounds %struct.timeval, %struct.timeval* %234, i32 0, i32 0
  %236 = load i64, i64* %235, align 8
  %237 = icmp slt i64 %233, %236
  br i1 %237, label %238, label %245

238:                                              ; preds = %229
  %239 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %240 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %239, i32 0, i32 3
  %241 = getelementptr inbounds %struct.timeval, %struct.timeval* %240, i32 0, i32 0
  %242 = load i64, i64* %241, align 8
  %243 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %6, i32 0, i32 0
  %244 = getelementptr inbounds %struct.timeval, %struct.timeval* %243, i32 0, i32 0
  store i64 %242, i64* %244, align 8
  br label %262

245:                                              ; preds = %229
  %246 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %247 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %246, i32 0, i32 3
  %248 = getelementptr inbounds %struct.timeval, %struct.timeval* %247, i32 0, i32 0
  %249 = load i64, i64* %248, align 8
  %250 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %6, i32 0, i32 1
  %251 = getelementptr inbounds %struct.timeval, %struct.timeval* %250, i32 0, i32 0
  %252 = load i64, i64* %251, align 8
  %253 = icmp sgt i64 %249, %252
  br i1 %253, label %254, label %261

254:                                              ; preds = %245
  %255 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %256 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %255, i32 0, i32 3
  %257 = getelementptr inbounds %struct.timeval, %struct.timeval* %256, i32 0, i32 0
  %258 = load i64, i64* %257, align 8
  %259 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %6, i32 0, i32 1
  %260 = getelementptr inbounds %struct.timeval, %struct.timeval* %259, i32 0, i32 0
  store i64 %258, i64* %260, align 8
  br label %261

261:                                              ; preds = %254, %245
  br label %262

262:                                              ; preds = %261, %238
  %263 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %264 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %263, i32 0, i32 3
  %265 = getelementptr inbounds %struct.timeval, %struct.timeval* %264, i32 0, i32 1
  %266 = load i64, i64* %265, align 8
  %267 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %6, i32 0, i32 0
  %268 = getelementptr inbounds %struct.timeval, %struct.timeval* %267, i32 0, i32 1
  %269 = load i64, i64* %268, align 8
  %270 = icmp slt i64 %266, %269
  br i1 %270, label %271, label %278

271:                                              ; preds = %262
  %272 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %273 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %272, i32 0, i32 3
  %274 = getelementptr inbounds %struct.timeval, %struct.timeval* %273, i32 0, i32 1
  %275 = load i64, i64* %274, align 8
  %276 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %6, i32 0, i32 0
  %277 = getelementptr inbounds %struct.timeval, %struct.timeval* %276, i32 0, i32 1
  store i64 %275, i64* %277, align 8
  br label %295

278:                                              ; preds = %262
  %279 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %280 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %279, i32 0, i32 3
  %281 = getelementptr inbounds %struct.timeval, %struct.timeval* %280, i32 0, i32 1
  %282 = load i64, i64* %281, align 8
  %283 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %6, i32 0, i32 1
  %284 = getelementptr inbounds %struct.timeval, %struct.timeval* %283, i32 0, i32 1
  %285 = load i64, i64* %284, align 8
  %286 = icmp sgt i64 %282, %285
  br i1 %286, label %287, label %294

287:                                              ; preds = %278
  %288 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %289 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %288, i32 0, i32 3
  %290 = getelementptr inbounds %struct.timeval, %struct.timeval* %289, i32 0, i32 1
  %291 = load i64, i64* %290, align 8
  %292 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %6, i32 0, i32 1
  %293 = getelementptr inbounds %struct.timeval, %struct.timeval* %292, i32 0, i32 1
  store i64 %291, i64* %293, align 8
  br label %294

294:                                              ; preds = %287, %278
  br label %295

295:                                              ; preds = %294, %271
  br label %296

296:                                              ; preds = %295
  %297 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %298 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %297, i32 0, i32 1
  %299 = load %struct.segment_s*, %struct.segment_s** %298, align 8
  store %struct.segment_s* %299, %struct.segment_s** %7, align 8
  br label %73

300:                                              ; preds = %73
  %301 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %302 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %301, i32 0, i32 1
  %303 = bitcast %struct.gs_fixed_rect_s* %302 to i8*
  %304 = bitcast %struct.gs_fixed_rect_s* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %303, i8* align 8 %304, i64 32, i1 false)
  %305 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %306 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %305, i32 0, i32 5
  %307 = load %struct.subpath*, %struct.subpath** %306, align 8
  %308 = getelementptr inbounds %struct.subpath, %struct.subpath* %307, i32 0, i32 4
  %309 = load %struct.segment_s*, %struct.segment_s** %308, align 8
  %310 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %311 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %310, i32 0, i32 2
  store %struct.segment_s* %309, %struct.segment_s** %311, align 8
  %312 = load %struct.gs_fixed_rect_s*, %struct.gs_fixed_rect_s** %5, align 8
  %313 = bitcast %struct.gs_fixed_rect_s* %312 to i8*
  %314 = bitcast %struct.gs_fixed_rect_s* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %313, i8* align 8 %314, i64 32, i1 false)
  br label %315

315:                                              ; preds = %300, %31
  store i32 0, i32* %3, align 4
  br label %316

316:                                              ; preds = %315, %12
  %317 = load i32, i32* %3, align 4
  ret i32 %317
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_path_has_curves(%struct.gx_path_s* %0) #0 {
  %2 = alloca %struct.gx_path_s*, align 8
  store %struct.gx_path_s* %0, %struct.gx_path_s** %2, align 8
  %3 = load %struct.gx_path_s*, %struct.gx_path_s** %2, align 8
  %4 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %3, i32 0, i32 8
  %5 = load i32, i32* %4, align 8
  %6 = icmp ne i32 %5, 0
  %7 = zext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_path_is_void(%struct.gx_path_s* %0) #0 {
  %2 = alloca %struct.gx_path_s*, align 8
  store %struct.gx_path_s* %0, %struct.gx_path_s** %2, align 8
  %3 = load %struct.gx_path_s*, %struct.gx_path_s** %2, align 8
  %4 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %3, i32 0, i32 7
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  %7 = zext i1 %6 to i32
  ret i32 %7
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_path_is_rectangle(%struct.gx_path_s* %0, %struct.gs_fixed_rect_s* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.gx_path_s*, align 8
  %5 = alloca %struct.gs_fixed_rect_s*, align 8
  %6 = alloca %struct.subpath*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca %struct.segment_s*, align 8
  %10 = alloca %struct.segment_s*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca %struct.segment_s*, align 8
  store %struct.gx_path_s* %0, %struct.gx_path_s** %4, align 8
  store %struct.gs_fixed_rect_s* %1, %struct.gs_fixed_rect_s** %5, align 8
  %14 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %15 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %14, i32 0, i32 6
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %16, 1
  br i1 %17, label %18, label %164

18:                                               ; preds = %2
  %19 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %20 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %19, i32 0, i32 7
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 4
  br i1 %22, label %23, label %164

23:                                               ; preds = %18
  %24 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %25 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %24, i32 0, i32 8
  %26 = load i32, i32* %25, align 8
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %164

28:                                               ; preds = %23
  %29 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %30 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %29, i32 0, i32 4
  %31 = load %struct.subpath*, %struct.subpath** %30, align 8
  store %struct.subpath* %31, %struct.subpath** %6, align 8
  %32 = getelementptr inbounds %struct.subpath, %struct.subpath* %31, i32 0, i32 4
  %33 = load %struct.segment_s*, %struct.segment_s** %32, align 8
  %34 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %33, i32 0, i32 2
  %35 = load i32, i32* %34, align 8
  %36 = icmp eq i32 %35, 2
  br i1 %36, label %37, label %164

37:                                               ; preds = %28
  %38 = load %struct.subpath*, %struct.subpath** %6, align 8
  %39 = getelementptr inbounds %struct.subpath, %struct.subpath* %38, i32 0, i32 3
  %40 = getelementptr inbounds %struct.timeval, %struct.timeval* %39, i32 0, i32 0
  %41 = load i64, i64* %40, align 8
  store i64 %41, i64* %7, align 8
  %42 = load %struct.subpath*, %struct.subpath** %6, align 8
  %43 = getelementptr inbounds %struct.subpath, %struct.subpath* %42, i32 0, i32 3
  %44 = getelementptr inbounds %struct.timeval, %struct.timeval* %43, i32 0, i32 1
  %45 = load i64, i64* %44, align 8
  store i64 %45, i64* %8, align 8
  %46 = load %struct.subpath*, %struct.subpath** %6, align 8
  %47 = getelementptr inbounds %struct.subpath, %struct.subpath* %46, i32 0, i32 1
  %48 = load %struct.segment_s*, %struct.segment_s** %47, align 8
  store %struct.segment_s* %48, %struct.segment_s** %9, align 8
  %49 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  %50 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %49, i32 0, i32 1
  %51 = load %struct.segment_s*, %struct.segment_s** %50, align 8
  store %struct.segment_s* %51, %struct.segment_s** %10, align 8
  %52 = load %struct.segment_s*, %struct.segment_s** %10, align 8
  %53 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %52, i32 0, i32 3
  %54 = getelementptr inbounds %struct.timeval, %struct.timeval* %53, i32 0, i32 0
  %55 = load i64, i64* %54, align 8
  store i64 %55, i64* %11, align 8
  %56 = load %struct.segment_s*, %struct.segment_s** %10, align 8
  %57 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %56, i32 0, i32 3
  %58 = getelementptr inbounds %struct.timeval, %struct.timeval* %57, i32 0, i32 1
  %59 = load i64, i64* %58, align 8
  store i64 %59, i64* %12, align 8
  %60 = load %struct.segment_s*, %struct.segment_s** %10, align 8
  %61 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %60, i32 0, i32 1
  %62 = load %struct.segment_s*, %struct.segment_s** %61, align 8
  store %struct.segment_s* %62, %struct.segment_s** %13, align 8
  %63 = load i64, i64* %7, align 8
  %64 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  %65 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %64, i32 0, i32 3
  %66 = getelementptr inbounds %struct.timeval, %struct.timeval* %65, i32 0, i32 0
  %67 = load i64, i64* %66, align 8
  %68 = icmp eq i64 %63, %67
  br i1 %68, label %69, label %90

69:                                               ; preds = %37
  %70 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  %71 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %70, i32 0, i32 3
  %72 = getelementptr inbounds %struct.timeval, %struct.timeval* %71, i32 0, i32 1
  %73 = load i64, i64* %72, align 8
  %74 = load i64, i64* %12, align 8
  %75 = icmp eq i64 %73, %74
  br i1 %75, label %76, label %90

76:                                               ; preds = %69
  %77 = load i64, i64* %11, align 8
  %78 = load %struct.segment_s*, %struct.segment_s** %13, align 8
  %79 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %78, i32 0, i32 3
  %80 = getelementptr inbounds %struct.timeval, %struct.timeval* %79, i32 0, i32 0
  %81 = load i64, i64* %80, align 8
  %82 = icmp eq i64 %77, %81
  br i1 %82, label %83, label %90

83:                                               ; preds = %76
  %84 = load %struct.segment_s*, %struct.segment_s** %13, align 8
  %85 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %84, i32 0, i32 3
  %86 = getelementptr inbounds %struct.timeval, %struct.timeval* %85, i32 0, i32 1
  %87 = load i64, i64* %86, align 8
  %88 = load i64, i64* %8, align 8
  %89 = icmp eq i64 %87, %88
  br i1 %89, label %118, label %90

90:                                               ; preds = %83, %76, %69, %37
  %91 = load i64, i64* %7, align 8
  %92 = load %struct.segment_s*, %struct.segment_s** %13, align 8
  %93 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %92, i32 0, i32 3
  %94 = getelementptr inbounds %struct.timeval, %struct.timeval* %93, i32 0, i32 0
  %95 = load i64, i64* %94, align 8
  %96 = icmp eq i64 %91, %95
  br i1 %96, label %97, label %163

97:                                               ; preds = %90
  %98 = load %struct.segment_s*, %struct.segment_s** %13, align 8
  %99 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %98, i32 0, i32 3
  %100 = getelementptr inbounds %struct.timeval, %struct.timeval* %99, i32 0, i32 1
  %101 = load i64, i64* %100, align 8
  %102 = load i64, i64* %12, align 8
  %103 = icmp eq i64 %101, %102
  br i1 %103, label %104, label %163

104:                                              ; preds = %97
  %105 = load i64, i64* %11, align 8
  %106 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  %107 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %106, i32 0, i32 3
  %108 = getelementptr inbounds %struct.timeval, %struct.timeval* %107, i32 0, i32 0
  %109 = load i64, i64* %108, align 8
  %110 = icmp eq i64 %105, %109
  br i1 %110, label %111, label %163

111:                                              ; preds = %104
  %112 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  %113 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %112, i32 0, i32 3
  %114 = getelementptr inbounds %struct.timeval, %struct.timeval* %113, i32 0, i32 1
  %115 = load i64, i64* %114, align 8
  %116 = load i64, i64* %8, align 8
  %117 = icmp eq i64 %115, %116
  br i1 %117, label %118, label %163

118:                                              ; preds = %111, %83
  %119 = load i64, i64* %7, align 8
  %120 = load i64, i64* %11, align 8
  %121 = icmp slt i64 %119, %120
  br i1 %121, label %122, label %131

122:                                              ; preds = %118
  %123 = load i64, i64* %7, align 8
  %124 = load %struct.gs_fixed_rect_s*, %struct.gs_fixed_rect_s** %5, align 8
  %125 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %124, i32 0, i32 0
  %126 = getelementptr inbounds %struct.timeval, %struct.timeval* %125, i32 0, i32 0
  store i64 %123, i64* %126, align 8
  %127 = load i64, i64* %11, align 8
  %128 = load %struct.gs_fixed_rect_s*, %struct.gs_fixed_rect_s** %5, align 8
  %129 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %128, i32 0, i32 1
  %130 = getelementptr inbounds %struct.timeval, %struct.timeval* %129, i32 0, i32 0
  store i64 %127, i64* %130, align 8
  br label %140

131:                                              ; preds = %118
  %132 = load i64, i64* %11, align 8
  %133 = load %struct.gs_fixed_rect_s*, %struct.gs_fixed_rect_s** %5, align 8
  %134 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %133, i32 0, i32 0
  %135 = getelementptr inbounds %struct.timeval, %struct.timeval* %134, i32 0, i32 0
  store i64 %132, i64* %135, align 8
  %136 = load i64, i64* %7, align 8
  %137 = load %struct.gs_fixed_rect_s*, %struct.gs_fixed_rect_s** %5, align 8
  %138 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %137, i32 0, i32 1
  %139 = getelementptr inbounds %struct.timeval, %struct.timeval* %138, i32 0, i32 0
  store i64 %136, i64* %139, align 8
  br label %140

140:                                              ; preds = %131, %122
  %141 = load i64, i64* %8, align 8
  %142 = load i64, i64* %12, align 8
  %143 = icmp slt i64 %141, %142
  br i1 %143, label %144, label %153

144:                                              ; preds = %140
  %145 = load i64, i64* %8, align 8
  %146 = load %struct.gs_fixed_rect_s*, %struct.gs_fixed_rect_s** %5, align 8
  %147 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %146, i32 0, i32 0
  %148 = getelementptr inbounds %struct.timeval, %struct.timeval* %147, i32 0, i32 1
  store i64 %145, i64* %148, align 8
  %149 = load i64, i64* %12, align 8
  %150 = load %struct.gs_fixed_rect_s*, %struct.gs_fixed_rect_s** %5, align 8
  %151 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %150, i32 0, i32 1
  %152 = getelementptr inbounds %struct.timeval, %struct.timeval* %151, i32 0, i32 1
  store i64 %149, i64* %152, align 8
  br label %162

153:                                              ; preds = %140
  %154 = load i64, i64* %12, align 8
  %155 = load %struct.gs_fixed_rect_s*, %struct.gs_fixed_rect_s** %5, align 8
  %156 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %155, i32 0, i32 0
  %157 = getelementptr inbounds %struct.timeval, %struct.timeval* %156, i32 0, i32 1
  store i64 %154, i64* %157, align 8
  %158 = load i64, i64* %8, align 8
  %159 = load %struct.gs_fixed_rect_s*, %struct.gs_fixed_rect_s** %5, align 8
  %160 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %159, i32 0, i32 1
  %161 = getelementptr inbounds %struct.timeval, %struct.timeval* %160, i32 0, i32 1
  store i64 %158, i64* %161, align 8
  br label %162

162:                                              ; preds = %153, %144
  store i32 1, i32* %3, align 4
  br label %165

163:                                              ; preds = %111, %104, %97, %90
  br label %164

164:                                              ; preds = %163, %28, %23, %18, %2
  store i32 0, i32* %3, align 4
  br label %165

165:                                              ; preds = %164, %162
  %166 = load i32, i32* %3, align 4
  ret i32 %166
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_cpath_box_for_check(%struct.gx_path_s* %0, %struct.gs_fixed_rect_s* %1) #0 {
  %3 = alloca %struct.gx_path_s*, align 8
  %4 = alloca %struct.gs_fixed_rect_s*, align 8
  store %struct.gx_path_s* %0, %struct.gx_path_s** %3, align 8
  store %struct.gs_fixed_rect_s* %1, %struct.gs_fixed_rect_s** %4, align 8
  %5 = load %struct.gs_fixed_rect_s*, %struct.gs_fixed_rect_s** %4, align 8
  %6 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %7 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %6, i32 0, i32 3
  %8 = bitcast %struct.gs_fixed_rect_s* %5 to i8*
  %9 = bitcast %struct.gs_fixed_rect_s* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 32, i1 false)
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_cpath_includes_rectangle(%struct.gx_path_s* %0, i64 %1, i64 %2, i64 %3, i64 %4) #0 {
  %6 = alloca %struct.gx_path_s*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  store %struct.gx_path_s* %0, %struct.gx_path_s** %6, align 8
  store i64 %1, i64* %7, align 8
  store i64 %2, i64* %8, align 8
  store i64 %3, i64* %9, align 8
  store i64 %4, i64* %10, align 8
  %11 = load i64, i64* %7, align 8
  %12 = load i64, i64* %9, align 8
  %13 = icmp sle i64 %11, %12
  br i1 %13, label %14, label %30

14:                                               ; preds = %5
  %15 = load %struct.gx_path_s*, %struct.gx_path_s** %6, align 8
  %16 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %15, i32 0, i32 3
  %17 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %16, i32 0, i32 0
  %18 = getelementptr inbounds %struct.timeval, %struct.timeval* %17, i32 0, i32 0
  %19 = load i64, i64* %18, align 8
  %20 = load i64, i64* %7, align 8
  %21 = icmp sle i64 %19, %20
  br i1 %21, label %22, label %91

22:                                               ; preds = %14
  %23 = load i64, i64* %9, align 8
  %24 = load %struct.gx_path_s*, %struct.gx_path_s** %6, align 8
  %25 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %24, i32 0, i32 3
  %26 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %25, i32 0, i32 1
  %27 = getelementptr inbounds %struct.timeval, %struct.timeval* %26, i32 0, i32 0
  %28 = load i64, i64* %27, align 8
  %29 = icmp sle i64 %23, %28
  br i1 %29, label %46, label %91

30:                                               ; preds = %5
  %31 = load %struct.gx_path_s*, %struct.gx_path_s** %6, align 8
  %32 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %31, i32 0, i32 3
  %33 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %32, i32 0, i32 0
  %34 = getelementptr inbounds %struct.timeval, %struct.timeval* %33, i32 0, i32 0
  %35 = load i64, i64* %34, align 8
  %36 = load i64, i64* %9, align 8
  %37 = icmp sle i64 %35, %36
  br i1 %37, label %38, label %91

38:                                               ; preds = %30
  %39 = load i64, i64* %7, align 8
  %40 = load %struct.gx_path_s*, %struct.gx_path_s** %6, align 8
  %41 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %40, i32 0, i32 3
  %42 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %41, i32 0, i32 1
  %43 = getelementptr inbounds %struct.timeval, %struct.timeval* %42, i32 0, i32 0
  %44 = load i64, i64* %43, align 8
  %45 = icmp sle i64 %39, %44
  br i1 %45, label %46, label %91

46:                                               ; preds = %38, %22
  %47 = load i64, i64* %8, align 8
  %48 = load i64, i64* %10, align 8
  %49 = icmp sle i64 %47, %48
  br i1 %49, label %50, label %69

50:                                               ; preds = %46
  %51 = load %struct.gx_path_s*, %struct.gx_path_s** %6, align 8
  %52 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %51, i32 0, i32 3
  %53 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %52, i32 0, i32 0
  %54 = getelementptr inbounds %struct.timeval, %struct.timeval* %53, i32 0, i32 1
  %55 = load i64, i64* %54, align 8
  %56 = load i64, i64* %8, align 8
  %57 = icmp sle i64 %55, %56
  br i1 %57, label %58, label %66

58:                                               ; preds = %50
  %59 = load i64, i64* %10, align 8
  %60 = load %struct.gx_path_s*, %struct.gx_path_s** %6, align 8
  %61 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %60, i32 0, i32 3
  %62 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %61, i32 0, i32 1
  %63 = getelementptr inbounds %struct.timeval, %struct.timeval* %62, i32 0, i32 1
  %64 = load i64, i64* %63, align 8
  %65 = icmp sle i64 %59, %64
  br label %66

66:                                               ; preds = %58, %50
  %67 = phi i1 [ false, %50 ], [ %65, %58 ]
  %68 = zext i1 %67 to i32
  br label %88

69:                                               ; preds = %46
  %70 = load %struct.gx_path_s*, %struct.gx_path_s** %6, align 8
  %71 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %70, i32 0, i32 3
  %72 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %71, i32 0, i32 0
  %73 = getelementptr inbounds %struct.timeval, %struct.timeval* %72, i32 0, i32 1
  %74 = load i64, i64* %73, align 8
  %75 = load i64, i64* %10, align 8
  %76 = icmp sle i64 %74, %75
  br i1 %76, label %77, label %85

77:                                               ; preds = %69
  %78 = load i64, i64* %8, align 8
  %79 = load %struct.gx_path_s*, %struct.gx_path_s** %6, align 8
  %80 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %79, i32 0, i32 3
  %81 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %80, i32 0, i32 1
  %82 = getelementptr inbounds %struct.timeval, %struct.timeval* %81, i32 0, i32 1
  %83 = load i64, i64* %82, align 8
  %84 = icmp sle i64 %78, %83
  br label %85

85:                                               ; preds = %77, %69
  %86 = phi i1 [ false, %69 ], [ %84, %77 ]
  %87 = zext i1 %86 to i32
  br label %88

88:                                               ; preds = %85, %66
  %89 = phi i32 [ %68, %66 ], [ %87, %85 ]
  %90 = icmp ne i32 %89, 0
  br label %91

91:                                               ; preds = %88, %38, %30, %22, %14
  %92 = phi i1 [ false, %38 ], [ false, %30 ], [ false, %22 ], [ false, %14 ], [ %90, %88 ]
  %93 = zext i1 %92 to i32
  ret i32 %93
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_path_copy(%struct.gx_path_s* %0, %struct.gx_path_s* %1) #0 {
  %3 = alloca %struct.gx_path_s*, align 8
  %4 = alloca %struct.gx_path_s*, align 8
  store %struct.gx_path_s* %0, %struct.gx_path_s** %3, align 8
  store %struct.gx_path_s* %1, %struct.gx_path_s** %4, align 8
  %5 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %6 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %7 = call i32 @copy_path(%struct.gx_path_s* %5, %struct.gx_path_s* %6, i32 (%struct.gx_path_s*, i64, i64, i64, i64, i64, i64)* @gx_path_add_curve)
  ret i32 %7
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @copy_path(%struct.gx_path_s* %0, %struct.gx_path_s* %1, i32 (%struct.gx_path_s*, i64, i64, i64, i64, i64, i64)* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.gx_path_s*, align 8
  %6 = alloca %struct.gx_path_s*, align 8
  %7 = alloca i32 (%struct.gx_path_s*, i64, i64, i64, i64, i64, i64)*, align 8
  %8 = alloca %struct.gx_path_s, align 8
  %9 = alloca %struct.segment_s*, align 8
  %10 = alloca i32, align 4
  %11 = alloca %struct.curve_segment*, align 8
  store %struct.gx_path_s* %0, %struct.gx_path_s** %5, align 8
  store %struct.gx_path_s* %1, %struct.gx_path_s** %6, align 8
  store i32 (%struct.gx_path_s*, i64, i64, i64, i64, i64, i64)* %2, i32 (%struct.gx_path_s*, i64, i64, i64, i64, i64, i64)** %7, align 8
  %12 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %13 = bitcast %struct.gx_path_s* %8 to i8*
  %14 = bitcast %struct.gx_path_s* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 144, i1 false)
  %15 = load %struct.gx_path_s*, %struct.gx_path_s** %6, align 8
  %16 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %17 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %16, i32 0, i32 0
  call void @gx_path_init(%struct.gx_path_s* %15, %struct.gs_memory_procs* %17)
  %18 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %8, i32 0, i32 4
  %19 = load %struct.subpath*, %struct.subpath** %18, align 8
  %20 = bitcast %struct.subpath* %19 to %struct.segment_s*
  store %struct.segment_s* %20, %struct.segment_s** %9, align 8
  br label %21

21:                                               ; preds = %97, %3
  %22 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  %23 = icmp ne %struct.segment_s* %22, null
  br i1 %23, label %24, label %101

24:                                               ; preds = %21
  %25 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  %26 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %25, i32 0, i32 2
  %27 = load i32, i32* %26, align 8
  switch i32 %27, label %83 [
    i32 0, label %28
    i32 3, label %39
    i32 1, label %69
    i32 2, label %80
  ]

28:                                               ; preds = %24
  %29 = load %struct.gx_path_s*, %struct.gx_path_s** %6, align 8
  %30 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  %31 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %30, i32 0, i32 3
  %32 = getelementptr inbounds %struct.timeval, %struct.timeval* %31, i32 0, i32 0
  %33 = load i64, i64* %32, align 8
  %34 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  %35 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %34, i32 0, i32 3
  %36 = getelementptr inbounds %struct.timeval, %struct.timeval* %35, i32 0, i32 1
  %37 = load i64, i64* %36, align 8
  %38 = call i32 @gx_path_add_point(%struct.gx_path_s* %29, i64 %33, i64 %37)
  store i32 %38, i32* %10, align 4
  br label %83

39:                                               ; preds = %24
  %40 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  %41 = bitcast %struct.segment_s* %40 to %struct.curve_segment*
  store %struct.curve_segment* %41, %struct.curve_segment** %11, align 8
  %42 = load i32 (%struct.gx_path_s*, i64, i64, i64, i64, i64, i64)*, i32 (%struct.gx_path_s*, i64, i64, i64, i64, i64, i64)** %7, align 8
  %43 = load %struct.gx_path_s*, %struct.gx_path_s** %6, align 8
  %44 = load %struct.curve_segment*, %struct.curve_segment** %11, align 8
  %45 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %44, i32 0, i32 4
  %46 = getelementptr inbounds %struct.timeval, %struct.timeval* %45, i32 0, i32 0
  %47 = load i64, i64* %46, align 8
  %48 = load %struct.curve_segment*, %struct.curve_segment** %11, align 8
  %49 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %48, i32 0, i32 4
  %50 = getelementptr inbounds %struct.timeval, %struct.timeval* %49, i32 0, i32 1
  %51 = load i64, i64* %50, align 8
  %52 = load %struct.curve_segment*, %struct.curve_segment** %11, align 8
  %53 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %52, i32 0, i32 5
  %54 = getelementptr inbounds %struct.timeval, %struct.timeval* %53, i32 0, i32 0
  %55 = load i64, i64* %54, align 8
  %56 = load %struct.curve_segment*, %struct.curve_segment** %11, align 8
  %57 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %56, i32 0, i32 5
  %58 = getelementptr inbounds %struct.timeval, %struct.timeval* %57, i32 0, i32 1
  %59 = load i64, i64* %58, align 8
  %60 = load %struct.curve_segment*, %struct.curve_segment** %11, align 8
  %61 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %60, i32 0, i32 3
  %62 = getelementptr inbounds %struct.timeval, %struct.timeval* %61, i32 0, i32 0
  %63 = load i64, i64* %62, align 8
  %64 = load %struct.curve_segment*, %struct.curve_segment** %11, align 8
  %65 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %64, i32 0, i32 3
  %66 = getelementptr inbounds %struct.timeval, %struct.timeval* %65, i32 0, i32 1
  %67 = load i64, i64* %66, align 8
  %68 = call i32 %42(%struct.gx_path_s* %43, i64 %47, i64 %51, i64 %55, i64 %59, i64 %63, i64 %67)
  store i32 %68, i32* %10, align 4
  br label %83

69:                                               ; preds = %24
  %70 = load %struct.gx_path_s*, %struct.gx_path_s** %6, align 8
  %71 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  %72 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %71, i32 0, i32 3
  %73 = getelementptr inbounds %struct.timeval, %struct.timeval* %72, i32 0, i32 0
  %74 = load i64, i64* %73, align 8
  %75 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  %76 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %75, i32 0, i32 3
  %77 = getelementptr inbounds %struct.timeval, %struct.timeval* %76, i32 0, i32 1
  %78 = load i64, i64* %77, align 8
  %79 = call i32 @gx_path_add_line(%struct.gx_path_s* %70, i64 %74, i64 %78)
  store i32 %79, i32* %10, align 4
  br label %83

80:                                               ; preds = %24
  %81 = load %struct.gx_path_s*, %struct.gx_path_s** %6, align 8
  %82 = call i32 @gx_path_close_subpath(%struct.gx_path_s* %81)
  store i32 %82, i32* %10, align 4
  br label %83

83:                                               ; preds = %80, %69, %39, %28, %24
  %84 = load i32, i32* %10, align 4
  %85 = icmp ne i32 %84, 0
  br i1 %85, label %86, label %97

86:                                               ; preds = %83
  %87 = load %struct.gx_path_s*, %struct.gx_path_s** %6, align 8
  call void @gx_path_release(%struct.gx_path_s* %87)
  %88 = load %struct.gx_path_s*, %struct.gx_path_s** %6, align 8
  %89 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %90 = icmp eq %struct.gx_path_s* %88, %89
  br i1 %90, label %91, label %95

91:                                               ; preds = %86
  %92 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %93 = bitcast %struct.gx_path_s* %92 to i8*
  %94 = bitcast %struct.gx_path_s* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %93, i8* align 8 %94, i64 144, i1 false)
  br label %95

95:                                               ; preds = %91, %86
  %96 = load i32, i32* %10, align 4
  store i32 %96, i32* %4, align 4
  br label %107

97:                                               ; preds = %83
  %98 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  %99 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %98, i32 0, i32 1
  %100 = load %struct.segment_s*, %struct.segment_s** %99, align 8
  store %struct.segment_s* %100, %struct.segment_s** %9, align 8
  br label %21

101:                                              ; preds = %21
  %102 = load %struct.gx_path_s*, %struct.gx_path_s** %6, align 8
  %103 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %102, i32 0, i32 9
  %104 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %8, i32 0, i32 9
  %105 = bitcast %struct.timeval* %103 to i8*
  %106 = bitcast %struct.timeval* %104 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %105, i8* align 8 %106, i64 16, i1 false)
  store i32 0, i32* %4, align 4
  br label %107

107:                                              ; preds = %101, %95
  %108 = load i32, i32* %4, align 4
  ret i32 %108
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_path_merge(%struct.gx_path_s* %0, %struct.gx_path_s* %1) #0 {
  %3 = alloca %struct.gx_path_s*, align 8
  %4 = alloca %struct.gx_path_s*, align 8
  %5 = alloca %struct.subpath*, align 8
  %6 = alloca %struct.subpath*, align 8
  store %struct.gx_path_s* %0, %struct.gx_path_s** %3, align 8
  store %struct.gx_path_s* %1, %struct.gx_path_s** %4, align 8
  %7 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %8 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %7, i32 0, i32 5
  %9 = load %struct.subpath*, %struct.subpath** %8, align 8
  store %struct.subpath* %9, %struct.subpath** %5, align 8
  %10 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %11 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %10, i32 0, i32 5
  %12 = load %struct.subpath*, %struct.subpath** %11, align 8
  store %struct.subpath* %12, %struct.subpath** %6, align 8
  %13 = load %struct.subpath*, %struct.subpath** %6, align 8
  %14 = icmp ne %struct.subpath* %13, null
  br i1 %14, label %15, label %25

15:                                               ; preds = %2
  %16 = load %struct.subpath*, %struct.subpath** %5, align 8
  %17 = getelementptr inbounds %struct.subpath, %struct.subpath* %16, i32 0, i32 4
  %18 = load %struct.segment_s*, %struct.segment_s** %17, align 8
  %19 = load %struct.subpath*, %struct.subpath** %6, align 8
  %20 = getelementptr inbounds %struct.subpath, %struct.subpath* %19, i32 0, i32 4
  %21 = load %struct.segment_s*, %struct.segment_s** %20, align 8
  %22 = icmp ne %struct.segment_s* %18, %21
  br i1 %22, label %23, label %25

23:                                               ; preds = %15
  %24 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  call void @gx_path_release(%struct.gx_path_s* %24)
  br label %25

25:                                               ; preds = %23, %15, %2
  %26 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %27 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %28 = bitcast %struct.gx_path_s* %26 to i8*
  %29 = bitcast %struct.gx_path_s* %27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* align 8 %29, i64 144, i1 false)
  %30 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %31 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %30, i32 0, i32 12
  store i8 1, i8* %31, align 2
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_path_translate(%struct.gx_path_s* %0, i64 %1, i64 %2) #0 {
  %4 = alloca %struct.gx_path_s*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca %struct.segment_s*, align 8
  %8 = alloca %struct.curve_segment*, align 8
  store %struct.gx_path_s* %0, %struct.gx_path_s** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  %9 = load i64, i64* %5, align 8
  %10 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %11 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %10, i32 0, i32 1
  %12 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %11, i32 0, i32 0
  %13 = getelementptr inbounds %struct.timeval, %struct.timeval* %12, i32 0, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = add nsw i64 %14, %9
  store i64 %15, i64* %13, align 8
  %16 = load i64, i64* %6, align 8
  %17 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %18 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %17, i32 0, i32 1
  %19 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %18, i32 0, i32 0
  %20 = getelementptr inbounds %struct.timeval, %struct.timeval* %19, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = add nsw i64 %21, %16
  store i64 %22, i64* %20, align 8
  %23 = load i64, i64* %5, align 8
  %24 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %25 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %24, i32 0, i32 1
  %26 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %25, i32 0, i32 1
  %27 = getelementptr inbounds %struct.timeval, %struct.timeval* %26, i32 0, i32 0
  %28 = load i64, i64* %27, align 8
  %29 = add nsw i64 %28, %23
  store i64 %29, i64* %27, align 8
  %30 = load i64, i64* %6, align 8
  %31 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %32 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %31, i32 0, i32 1
  %33 = getelementptr inbounds %struct.gs_fixed_rect_s, %struct.gs_fixed_rect_s* %32, i32 0, i32 1
  %34 = getelementptr inbounds %struct.timeval, %struct.timeval* %33, i32 0, i32 1
  %35 = load i64, i64* %34, align 8
  %36 = add nsw i64 %35, %30
  store i64 %36, i64* %34, align 8
  %37 = load i64, i64* %5, align 8
  %38 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %39 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %38, i32 0, i32 9
  %40 = getelementptr inbounds %struct.timeval, %struct.timeval* %39, i32 0, i32 0
  %41 = load i64, i64* %40, align 8
  %42 = add nsw i64 %41, %37
  store i64 %42, i64* %40, align 8
  %43 = load i64, i64* %6, align 8
  %44 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %45 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %44, i32 0, i32 9
  %46 = getelementptr inbounds %struct.timeval, %struct.timeval* %45, i32 0, i32 1
  %47 = load i64, i64* %46, align 8
  %48 = add nsw i64 %47, %43
  store i64 %48, i64* %46, align 8
  %49 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %50 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %49, i32 0, i32 4
  %51 = load %struct.subpath*, %struct.subpath** %50, align 8
  %52 = bitcast %struct.subpath* %51 to %struct.segment_s*
  store %struct.segment_s* %52, %struct.segment_s** %7, align 8
  br label %53

53:                                               ; preds = %100, %3
  %54 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %55 = icmp ne %struct.segment_s* %54, null
  br i1 %55, label %56, label %104

56:                                               ; preds = %53
  %57 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %58 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %57, i32 0, i32 2
  %59 = load i32, i32* %58, align 8
  switch i32 %59, label %87 [
    i32 3, label %60
  ]

60:                                               ; preds = %56
  %61 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %62 = bitcast %struct.segment_s* %61 to %struct.curve_segment*
  store %struct.curve_segment* %62, %struct.curve_segment** %8, align 8
  %63 = load i64, i64* %5, align 8
  %64 = load %struct.curve_segment*, %struct.curve_segment** %8, align 8
  %65 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %64, i32 0, i32 4
  %66 = getelementptr inbounds %struct.timeval, %struct.timeval* %65, i32 0, i32 0
  %67 = load i64, i64* %66, align 8
  %68 = add nsw i64 %67, %63
  store i64 %68, i64* %66, align 8
  %69 = load i64, i64* %6, align 8
  %70 = load %struct.curve_segment*, %struct.curve_segment** %8, align 8
  %71 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %70, i32 0, i32 4
  %72 = getelementptr inbounds %struct.timeval, %struct.timeval* %71, i32 0, i32 1
  %73 = load i64, i64* %72, align 8
  %74 = add nsw i64 %73, %69
  store i64 %74, i64* %72, align 8
  %75 = load i64, i64* %5, align 8
  %76 = load %struct.curve_segment*, %struct.curve_segment** %8, align 8
  %77 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %76, i32 0, i32 5
  %78 = getelementptr inbounds %struct.timeval, %struct.timeval* %77, i32 0, i32 0
  %79 = load i64, i64* %78, align 8
  %80 = add nsw i64 %79, %75
  store i64 %80, i64* %78, align 8
  %81 = load i64, i64* %6, align 8
  %82 = load %struct.curve_segment*, %struct.curve_segment** %8, align 8
  %83 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %82, i32 0, i32 5
  %84 = getelementptr inbounds %struct.timeval, %struct.timeval* %83, i32 0, i32 1
  %85 = load i64, i64* %84, align 8
  %86 = add nsw i64 %85, %81
  store i64 %86, i64* %84, align 8
  br label %87

87:                                               ; preds = %60, %56
  %88 = load i64, i64* %5, align 8
  %89 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %90 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %89, i32 0, i32 3
  %91 = getelementptr inbounds %struct.timeval, %struct.timeval* %90, i32 0, i32 0
  %92 = load i64, i64* %91, align 8
  %93 = add nsw i64 %92, %88
  store i64 %93, i64* %91, align 8
  %94 = load i64, i64* %6, align 8
  %95 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %96 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %95, i32 0, i32 3
  %97 = getelementptr inbounds %struct.timeval, %struct.timeval* %96, i32 0, i32 1
  %98 = load i64, i64* %97, align 8
  %99 = add nsw i64 %98, %94
  store i64 %99, i64* %97, align 8
  br label %100

100:                                              ; preds = %87
  %101 = load %struct.segment_s*, %struct.segment_s** %7, align 8
  %102 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %101, i32 0, i32 1
  %103 = load %struct.segment_s*, %struct.segment_s** %102, align 8
  store %struct.segment_s* %103, %struct.segment_s** %7, align 8
  br label %53

104:                                              ; preds = %53
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_path_flatten(%struct.gx_path_s* %0, %struct.gx_path_s* %1, double %2) #0 {
  %4 = alloca %struct.gx_path_s*, align 8
  %5 = alloca %struct.gx_path_s*, align 8
  %6 = alloca double, align 8
  %7 = alloca float, align 4
  store %struct.gx_path_s* %0, %struct.gx_path_s** %4, align 8
  store %struct.gx_path_s* %1, %struct.gx_path_s** %5, align 8
  store double %2, double* %6, align 8
  %8 = load double, double* %6, align 8
  %9 = fmul double %8, 4.096000e+03
  %10 = fptrunc double %9 to float
  store float %10, float* %7, align 4
  %11 = load float, float* %7, align 4
  %12 = fptosi float %11 to i64
  store i64 %12, i64* @scaled_flat, align 8
  %13 = load float, float* %7, align 4
  %14 = fpext float %13 to double
  %15 = fmul double %14, 4.500000e-01
  %16 = fptrunc double %15 to float
  store float %16, float* @scaled_flat_sq, align 4
  %17 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %18 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %19 = call i32 @copy_path(%struct.gx_path_s* %17, %struct.gx_path_s* %18, i32 (%struct.gx_path_s*, i64, i64, i64, i64, i64, i64)* @flatten_curve)
  ret i32 %19
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @flatten_curve(%struct.gx_path_s* %0, i64 %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6) #0 {
  %8 = alloca i32, align 4
  %9 = alloca %struct.gx_path_s*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  %18 = alloca i64, align 8
  %19 = alloca i64, align 8
  %20 = alloca float, align 4
  %21 = alloca i64, align 8
  %22 = alloca i64, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca i64, align 8
  %28 = alloca i64, align 8
  %29 = alloca i32, align 4
  store %struct.gx_path_s* %0, %struct.gx_path_s** %9, align 8
  store i64 %1, i64* %10, align 8
  store i64 %2, i64* %11, align 8
  store i64 %3, i64* %12, align 8
  store i64 %4, i64* %13, align 8
  store i64 %5, i64* %14, align 8
  store i64 %6, i64* %15, align 8
  %30 = load %struct.gx_path_s*, %struct.gx_path_s** %9, align 8
  %31 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %30, i32 0, i32 9
  %32 = getelementptr inbounds %struct.timeval, %struct.timeval* %31, i32 0, i32 0
  %33 = load i64, i64* %32, align 8
  store i64 %33, i64* %16, align 8
  %34 = load %struct.gx_path_s*, %struct.gx_path_s** %9, align 8
  %35 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %34, i32 0, i32 9
  %36 = getelementptr inbounds %struct.timeval, %struct.timeval* %35, i32 0, i32 1
  %37 = load i64, i64* %36, align 8
  store i64 %37, i64* %17, align 8
  br label %38

38:                                               ; preds = %253, %7
  %39 = load i64, i64* %14, align 8
  %40 = load i64, i64* %16, align 8
  %41 = sub nsw i64 %39, %40
  store i64 %41, i64* %18, align 8
  %42 = load i64, i64* %15, align 8
  %43 = load i64, i64* %17, align 8
  %44 = sub nsw i64 %42, %43
  store i64 %44, i64* %19, align 8
  %45 = load i64, i64* %18, align 8
  %46 = icmp slt i64 %45, 0
  br i1 %46, label %47, label %50

47:                                               ; preds = %38
  %48 = load i64, i64* %18, align 8
  %49 = sub nsw i64 0, %48
  br label %52

50:                                               ; preds = %38
  %51 = load i64, i64* %18, align 8
  br label %52

52:                                               ; preds = %50, %47
  %53 = phi i64 [ %49, %47 ], [ %51, %50 ]
  %54 = load i64, i64* %19, align 8
  %55 = icmp slt i64 %54, 0
  br i1 %55, label %56, label %59

56:                                               ; preds = %52
  %57 = load i64, i64* %19, align 8
  %58 = sub nsw i64 0, %57
  br label %61

59:                                               ; preds = %52
  %60 = load i64, i64* %19, align 8
  br label %61

61:                                               ; preds = %59, %56
  %62 = phi i64 [ %58, %56 ], [ %60, %59 ]
  %63 = icmp sge i64 %53, %62
  br i1 %63, label %64, label %131

64:                                               ; preds = %61
  %65 = load i64, i64* %18, align 8
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %67, label %68

67:                                               ; preds = %64
  store i32 0, i32* %8, align 4
  br label %254

68:                                               ; preds = %64
  %69 = load i64, i64* %19, align 8
  %70 = sitofp i64 %69 to float
  %71 = load i64, i64* %18, align 8
  %72 = sitofp i64 %71 to float
  %73 = fdiv float %70, %72
  store float %73, float* %20, align 4
  %74 = load float, float* %20, align 4
  %75 = load float, float* %20, align 4
  %76 = fmul float %74, %75
  %77 = load float, float* @scaled_flat_sq, align 4
  %78 = fmul float %76, %77
  %79 = fptosi float %78 to i64
  %80 = load i64, i64* @scaled_flat, align 8
  %81 = add nsw i64 %79, %80
  store i64 %81, i64* %21, align 8
  %82 = load float, float* %20, align 4
  %83 = load i64, i64* %10, align 8
  %84 = load i64, i64* %16, align 8
  %85 = sub nsw i64 %83, %84
  %86 = sitofp i64 %85 to float
  %87 = fmul float %82, %86
  %88 = fptosi float %87 to i64
  %89 = load i64, i64* %11, align 8
  %90 = sub nsw i64 %88, %89
  %91 = load i64, i64* %17, align 8
  %92 = add nsw i64 %90, %91
  store i64 %92, i64* %22, align 8
  %93 = icmp slt i64 %92, 0
  br i1 %93, label %94, label %97

94:                                               ; preds = %68
  %95 = load i64, i64* %22, align 8
  %96 = sub nsw i64 0, %95
  br label %99

97:                                               ; preds = %68
  %98 = load i64, i64* %22, align 8
  br label %99

99:                                               ; preds = %97, %94
  %100 = phi i64 [ %96, %94 ], [ %98, %97 ]
  %101 = load i64, i64* %21, align 8
  %102 = icmp sle i64 %100, %101
  br i1 %102, label %103, label %130

103:                                              ; preds = %99
  %104 = load float, float* %20, align 4
  %105 = load i64, i64* %12, align 8
  %106 = load i64, i64* %16, align 8
  %107 = sub nsw i64 %105, %106
  %108 = sitofp i64 %107 to float
  %109 = fmul float %104, %108
  %110 = fptosi float %109 to i64
  %111 = load i64, i64* %13, align 8
  %112 = sub nsw i64 %110, %111
  %113 = load i64, i64* %17, align 8
  %114 = add nsw i64 %112, %113
  store i64 %114, i64* %22, align 8
  %115 = icmp slt i64 %114, 0
  br i1 %115, label %116, label %119

116:                                              ; preds = %103
  %117 = load i64, i64* %22, align 8
  %118 = sub nsw i64 0, %117
  br label %121

119:                                              ; preds = %103
  %120 = load i64, i64* %22, align 8
  br label %121

121:                                              ; preds = %119, %116
  %122 = phi i64 [ %118, %116 ], [ %120, %119 ]
  %123 = load i64, i64* %21, align 8
  %124 = icmp sle i64 %122, %123
  br i1 %124, label %125, label %130

125:                                              ; preds = %121
  %126 = load %struct.gx_path_s*, %struct.gx_path_s** %9, align 8
  %127 = load i64, i64* %14, align 8
  %128 = load i64, i64* %15, align 8
  %129 = call i32 @gx_path_add_line(%struct.gx_path_s* %126, i64 %127, i64 %128)
  store i32 %129, i32* %8, align 4
  br label %254

130:                                              ; preds = %121, %99
  br label %194

131:                                              ; preds = %61
  %132 = load i64, i64* %18, align 8
  %133 = sitofp i64 %132 to float
  %134 = load i64, i64* %19, align 8
  %135 = sitofp i64 %134 to float
  %136 = fdiv float %133, %135
  store float %136, float* %20, align 4
  %137 = load float, float* %20, align 4
  %138 = load float, float* %20, align 4
  %139 = fmul float %137, %138
  %140 = load float, float* @scaled_flat_sq, align 4
  %141 = fmul float %139, %140
  %142 = fptosi float %141 to i64
  %143 = load i64, i64* @scaled_flat, align 8
  %144 = add nsw i64 %142, %143
  store i64 %144, i64* %21, align 8
  %145 = load float, float* %20, align 4
  %146 = load i64, i64* %11, align 8
  %147 = load i64, i64* %17, align 8
  %148 = sub nsw i64 %146, %147
  %149 = sitofp i64 %148 to float
  %150 = fmul float %145, %149
  %151 = fptosi float %150 to i64
  %152 = load i64, i64* %10, align 8
  %153 = sub nsw i64 %151, %152
  %154 = load i64, i64* %16, align 8
  %155 = add nsw i64 %153, %154
  store i64 %155, i64* %22, align 8
  %156 = icmp slt i64 %155, 0
  br i1 %156, label %157, label %160

157:                                              ; preds = %131
  %158 = load i64, i64* %22, align 8
  %159 = sub nsw i64 0, %158
  br label %162

160:                                              ; preds = %131
  %161 = load i64, i64* %22, align 8
  br label %162

162:                                              ; preds = %160, %157
  %163 = phi i64 [ %159, %157 ], [ %161, %160 ]
  %164 = load i64, i64* %21, align 8
  %165 = icmp sle i64 %163, %164
  br i1 %165, label %166, label %193

166:                                              ; preds = %162
  %167 = load float, float* %20, align 4
  %168 = load i64, i64* %13, align 8
  %169 = load i64, i64* %17, align 8
  %170 = sub nsw i64 %168, %169
  %171 = sitofp i64 %170 to float
  %172 = fmul float %167, %171
  %173 = fptosi float %172 to i64
  %174 = load i64, i64* %12, align 8
  %175 = sub nsw i64 %173, %174
  %176 = load i64, i64* %16, align 8
  %177 = add nsw i64 %175, %176
  store i64 %177, i64* %22, align 8
  %178 = icmp slt i64 %177, 0
  br i1 %178, label %179, label %182

179:                                              ; preds = %166
  %180 = load i64, i64* %22, align 8
  %181 = sub nsw i64 0, %180
  br label %184

182:                                              ; preds = %166
  %183 = load i64, i64* %22, align 8
  br label %184

184:                                              ; preds = %182, %179
  %185 = phi i64 [ %181, %179 ], [ %183, %182 ]
  %186 = load i64, i64* %21, align 8
  %187 = icmp sle i64 %185, %186
  br i1 %187, label %188, label %193

188:                                              ; preds = %184
  %189 = load %struct.gx_path_s*, %struct.gx_path_s** %9, align 8
  %190 = load i64, i64* %14, align 8
  %191 = load i64, i64* %15, align 8
  %192 = call i32 @gx_path_add_line(%struct.gx_path_s* %189, i64 %190, i64 %191)
  store i32 %192, i32* %8, align 4
  br label %254

193:                                              ; preds = %184, %162
  br label %194

194:                                              ; preds = %193, %130
  %195 = load i64, i64* %16, align 8
  %196 = load i64, i64* %10, align 8
  %197 = add nsw i64 %195, %196
  %198 = ashr i64 %197, 1
  store i64 %198, i64* %23, align 8
  %199 = load i64, i64* %17, align 8
  %200 = load i64, i64* %11, align 8
  %201 = add nsw i64 %199, %200
  %202 = ashr i64 %201, 1
  store i64 %202, i64* %24, align 8
  %203 = load i64, i64* %10, align 8
  %204 = load i64, i64* %12, align 8
  %205 = add nsw i64 %203, %204
  %206 = ashr i64 %205, 1
  store i64 %206, i64* %25, align 8
  %207 = load i64, i64* %11, align 8
  %208 = load i64, i64* %13, align 8
  %209 = add nsw i64 %207, %208
  %210 = ashr i64 %209, 1
  store i64 %210, i64* %26, align 8
  %211 = load i64, i64* %23, align 8
  %212 = load i64, i64* %25, align 8
  %213 = add nsw i64 %211, %212
  %214 = ashr i64 %213, 1
  store i64 %214, i64* %27, align 8
  %215 = load i64, i64* %24, align 8
  %216 = load i64, i64* %26, align 8
  %217 = add nsw i64 %215, %216
  %218 = ashr i64 %217, 1
  store i64 %218, i64* %28, align 8
  %219 = load i64, i64* %12, align 8
  %220 = load i64, i64* %14, align 8
  %221 = add nsw i64 %219, %220
  %222 = ashr i64 %221, 1
  store i64 %222, i64* %12, align 8
  %223 = load i64, i64* %13, align 8
  %224 = load i64, i64* %15, align 8
  %225 = add nsw i64 %223, %224
  %226 = ashr i64 %225, 1
  store i64 %226, i64* %13, align 8
  %227 = load i64, i64* %25, align 8
  %228 = load i64, i64* %12, align 8
  %229 = add nsw i64 %227, %228
  %230 = ashr i64 %229, 1
  store i64 %230, i64* %10, align 8
  %231 = load i64, i64* %26, align 8
  %232 = load i64, i64* %13, align 8
  %233 = add nsw i64 %231, %232
  %234 = ashr i64 %233, 1
  store i64 %234, i64* %11, align 8
  %235 = load %struct.gx_path_s*, %struct.gx_path_s** %9, align 8
  %236 = load i64, i64* %23, align 8
  %237 = load i64, i64* %24, align 8
  %238 = load i64, i64* %27, align 8
  %239 = load i64, i64* %28, align 8
  %240 = load i64, i64* %27, align 8
  %241 = load i64, i64* %10, align 8
  %242 = add nsw i64 %240, %241
  %243 = ashr i64 %242, 1
  store i64 %243, i64* %16, align 8
  %244 = load i64, i64* %28, align 8
  %245 = load i64, i64* %11, align 8
  %246 = add nsw i64 %244, %245
  %247 = ashr i64 %246, 1
  store i64 %247, i64* %17, align 8
  %248 = call i32 @flatten_curve(%struct.gx_path_s* %235, i64 %236, i64 %237, i64 %238, i64 %239, i64 %243, i64 %247)
  store i32 %248, i32* %29, align 4
  %249 = load i32, i32* %29, align 4
  %250 = icmp slt i32 %249, 0
  br i1 %250, label %251, label %253

251:                                              ; preds = %194
  %252 = load i32, i32* %29, align 4
  store i32 %252, i32* %8, align 4
  br label %254

253:                                              ; preds = %194
  br label %38

254:                                              ; preds = %251, %188, %125, %67
  %255 = load i32, i32* %8, align 4
  ret i32 %255
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gx_path_init(%struct.gx_path_s* %0, %struct.gs_memory_procs* %1) #0 {
  %3 = alloca %struct.gx_path_s*, align 8
  %4 = alloca %struct.gs_memory_procs*, align 8
  store %struct.gx_path_s* %0, %struct.gx_path_s** %3, align 8
  store %struct.gs_memory_procs* %1, %struct.gs_memory_procs** %4, align 8
  %5 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %6 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %5, i32 0, i32 0
  %7 = load %struct.gs_memory_procs*, %struct.gs_memory_procs** %4, align 8
  %8 = bitcast %struct.gs_memory_procs* %6 to i8*
  %9 = bitcast %struct.gs_memory_procs* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 16, i1 false)
  %10 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %11 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %10, i32 0, i32 2
  store %struct.segment_s* null, %struct.segment_s** %11, align 8
  %12 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %13 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %12, i32 0, i32 10
  store i8 0, i8* %13, align 8
  %14 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %15 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %14, i32 0, i32 5
  store %struct.subpath* null, %struct.subpath** %15, align 8
  %16 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %17 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %16, i32 0, i32 4
  store %struct.subpath* null, %struct.subpath** %17, align 8
  %18 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %19 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %18, i32 0, i32 6
  store i32 0, i32* %19, align 8
  %20 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %21 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %20, i32 0, i32 7
  store i32 0, i32* %21, align 4
  %22 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %23 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %22, i32 0, i32 8
  store i32 0, i32* %23, align 8
  %24 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %25 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %24, i32 0, i32 11
  store i8 0, i8* %25, align 1
  %26 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %27 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %26, i32 0, i32 12
  store i8 0, i8* %27, align 2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gx_path_release(%struct.gx_path_s* %0) #0 {
  %2 = alloca %struct.gx_path_s*, align 8
  %3 = alloca %struct.segment_s*, align 8
  %4 = alloca %struct.segment_s*, align 8
  %5 = alloca i32, align 4
  store %struct.gx_path_s* %0, %struct.gx_path_s** %2, align 8
  %6 = load %struct.gx_path_s*, %struct.gx_path_s** %2, align 8
  %7 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %6, i32 0, i32 4
  %8 = load %struct.subpath*, %struct.subpath** %7, align 8
  %9 = icmp eq %struct.subpath* %8, null
  br i1 %9, label %10, label %11

10:                                               ; preds = %1
  br label %56

11:                                               ; preds = %1
  %12 = load %struct.gx_path_s*, %struct.gx_path_s** %2, align 8
  %13 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %12, i32 0, i32 12
  %14 = load i8, i8* %13, align 2
  %15 = icmp ne i8 %14, 0
  br i1 %15, label %16, label %17

16:                                               ; preds = %11
  br label %56

17:                                               ; preds = %11
  %18 = load %struct.gx_path_s*, %struct.gx_path_s** %2, align 8
  %19 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %18, i32 0, i32 5
  %20 = load %struct.subpath*, %struct.subpath** %19, align 8
  %21 = getelementptr inbounds %struct.subpath, %struct.subpath* %20, i32 0, i32 4
  %22 = load %struct.segment_s*, %struct.segment_s** %21, align 8
  store %struct.segment_s* %22, %struct.segment_s** %3, align 8
  br label %23

23:                                               ; preds = %44, %17
  %24 = load %struct.segment_s*, %struct.segment_s** %3, align 8
  %25 = icmp ne %struct.segment_s* %24, null
  br i1 %25, label %26, label %53

26:                                               ; preds = %23
  %27 = load %struct.segment_s*, %struct.segment_s** %3, align 8
  %28 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %27, i32 0, i32 0
  %29 = load %struct.segment_s*, %struct.segment_s** %28, align 8
  store %struct.segment_s* %29, %struct.segment_s** %4, align 8
  %30 = load %struct.segment_s*, %struct.segment_s** %3, align 8
  %31 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %30, i32 0, i32 2
  %32 = load i32, i32* %31, align 8
  switch i32 %32, label %36 [
    i32 0, label %33
    i32 1, label %34
    i32 2, label %34
    i32 3, label %35
  ]

33:                                               ; preds = %26
  store i32 64, i32* %5, align 4
  br label %44

34:                                               ; preds = %26, %26
  store i32 40, i32* %5, align 4
  br label %44

35:                                               ; preds = %26
  store i32 72, i32* %5, align 4
  br label %44

36:                                               ; preds = %26
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %38 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.183, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1.184, i64 0, i64 0), i32 75)
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %40 = load %struct.segment_s*, %struct.segment_s** %3, align 8
  %41 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %40, i32 0, i32 2
  %42 = load i32, i32* %41, align 8
  %43 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %39, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2.185, i64 0, i64 0), i32 %42)
  call void @exit(i32 1) #10
  unreachable

44:                                               ; preds = %35, %34, %33
  %45 = load %struct.gx_path_s*, %struct.gx_path_s** %2, align 8
  %46 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %45, i32 0, i32 0
  %47 = getelementptr inbounds %struct.gs_memory_procs, %struct.gs_memory_procs* %46, i32 0, i32 1
  %48 = load void (i8*, i32, i32, i8*)*, void (i8*, i32, i32, i8*)** %47, align 8
  %49 = load %struct.segment_s*, %struct.segment_s** %3, align 8
  %50 = bitcast %struct.segment_s* %49 to i8*
  %51 = load i32, i32* %5, align 4
  call void %48(i8* %50, i32 1, i32 %51, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3.186, i64 0, i64 0))
  %52 = load %struct.segment_s*, %struct.segment_s** %4, align 8
  store %struct.segment_s* %52, %struct.segment_s** %3, align 8
  br label %23

53:                                               ; preds = %23
  %54 = load %struct.gx_path_s*, %struct.gx_path_s** %2, align 8
  %55 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %54, i32 0, i32 4
  store %struct.subpath* null, %struct.subpath** %55, align 8
  br label %56

56:                                               ; preds = %53, %16, %10
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gx_path_share(%struct.gx_path_s* %0) #0 {
  %2 = alloca %struct.gx_path_s*, align 8
  store %struct.gx_path_s* %0, %struct.gx_path_s** %2, align 8
  %3 = load %struct.gx_path_s*, %struct.gx_path_s** %2, align 8
  %4 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %3, i32 0, i32 4
  %5 = load %struct.subpath*, %struct.subpath** %4, align 8
  %6 = icmp ne %struct.subpath* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %1
  %8 = load %struct.gx_path_s*, %struct.gx_path_s** %2, align 8
  %9 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %8, i32 0, i32 12
  store i8 1, i8* %9, align 2
  br label %10

10:                                               ; preds = %7, %1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_path_new_subpath(%struct.gx_path_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.gx_path_s*, align 8
  %4 = alloca %struct.subpath*, align 8
  %5 = alloca %struct.subpath*, align 8
  %6 = alloca %struct.segment_s*, align 8
  store %struct.gx_path_s* %0, %struct.gx_path_s** %3, align 8
  %7 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %8 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %7, i32 0, i32 5
  %9 = load %struct.subpath*, %struct.subpath** %8, align 8
  store %struct.subpath* %9, %struct.subpath** %4, align 8
  %10 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %11 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %10, i32 0, i32 12
  %12 = load i8, i8* %11, align 2
  %13 = icmp ne i8 %12, 0
  br i1 %13, label %14, label %20

14:                                               ; preds = %1
  %15 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %16 = call %struct.subpath* @path_alloc_copy(%struct.gx_path_s* %15)
  store %struct.subpath* %16, %struct.subpath** %4, align 8
  %17 = icmp ne %struct.subpath* %16, null
  br i1 %17, label %19, label %18

18:                                               ; preds = %14
  store i32 -13, i32* %2, align 4
  br label %79

19:                                               ; preds = %14
  br label %20

20:                                               ; preds = %19, %1
  %21 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %22 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %21, i32 0, i32 0
  %23 = getelementptr inbounds %struct.gs_memory_procs, %struct.gs_memory_procs* %22, i32 0, i32 0
  %24 = load i8* (i32, i32, i8*)*, i8* (i32, i32, i8*)** %23, align 8
  %25 = call i8* %24(i32 1, i32 64, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4.189, i64 0, i64 0))
  %26 = bitcast i8* %25 to %struct.subpath*
  store %struct.subpath* %26, %struct.subpath** %5, align 8
  %27 = icmp ne %struct.subpath* %26, null
  br i1 %27, label %29, label %28

28:                                               ; preds = %20
  store i32 -13, i32* %2, align 4
  br label %79

29:                                               ; preds = %20
  %30 = load %struct.subpath*, %struct.subpath** %5, align 8
  %31 = getelementptr inbounds %struct.subpath, %struct.subpath* %30, i32 0, i32 2
  store i32 0, i32* %31, align 8
  %32 = load %struct.subpath*, %struct.subpath** %5, align 8
  %33 = getelementptr inbounds %struct.subpath, %struct.subpath* %32, i32 0, i32 1
  store %struct.segment_s* null, %struct.segment_s** %33, align 8
  %34 = load %struct.subpath*, %struct.subpath** %5, align 8
  %35 = bitcast %struct.subpath* %34 to %struct.segment_s*
  %36 = load %struct.subpath*, %struct.subpath** %5, align 8
  %37 = getelementptr inbounds %struct.subpath, %struct.subpath* %36, i32 0, i32 4
  store %struct.segment_s* %35, %struct.segment_s** %37, align 8
  %38 = load %struct.subpath*, %struct.subpath** %5, align 8
  %39 = getelementptr inbounds %struct.subpath, %struct.subpath* %38, i32 0, i32 6
  store i32 0, i32* %39, align 4
  %40 = load %struct.subpath*, %struct.subpath** %5, align 8
  %41 = getelementptr inbounds %struct.subpath, %struct.subpath* %40, i32 0, i32 5
  store i32 0, i32* %41, align 8
  %42 = load %struct.subpath*, %struct.subpath** %5, align 8
  %43 = getelementptr inbounds %struct.subpath, %struct.subpath* %42, i32 0, i32 7
  store i8 0, i8* %43, align 8
  %44 = load %struct.subpath*, %struct.subpath** %5, align 8
  %45 = getelementptr inbounds %struct.subpath, %struct.subpath* %44, i32 0, i32 3
  %46 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %47 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %46, i32 0, i32 9
  %48 = bitcast %struct.timeval* %45 to i8*
  %49 = bitcast %struct.timeval* %47 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* align 8 %49, i64 16, i1 false)
  %50 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %51 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %50, i32 0, i32 11
  store i8 1, i8* %51, align 1
  %52 = load %struct.subpath*, %struct.subpath** %4, align 8
  %53 = icmp ne %struct.subpath* %52, null
  br i1 %53, label %60, label %54

54:                                               ; preds = %29
  %55 = load %struct.subpath*, %struct.subpath** %5, align 8
  %56 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %57 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %56, i32 0, i32 4
  store %struct.subpath* %55, %struct.subpath** %57, align 8
  %58 = load %struct.subpath*, %struct.subpath** %5, align 8
  %59 = getelementptr inbounds %struct.subpath, %struct.subpath* %58, i32 0, i32 0
  store %struct.segment_s* null, %struct.segment_s** %59, align 8
  br label %71

60:                                               ; preds = %29
  %61 = load %struct.subpath*, %struct.subpath** %4, align 8
  %62 = getelementptr inbounds %struct.subpath, %struct.subpath* %61, i32 0, i32 4
  %63 = load %struct.segment_s*, %struct.segment_s** %62, align 8
  store %struct.segment_s* %63, %struct.segment_s** %6, align 8
  %64 = load %struct.subpath*, %struct.subpath** %5, align 8
  %65 = bitcast %struct.subpath* %64 to %struct.segment_s*
  %66 = load %struct.segment_s*, %struct.segment_s** %6, align 8
  %67 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %66, i32 0, i32 1
  store %struct.segment_s* %65, %struct.segment_s** %67, align 8
  %68 = load %struct.segment_s*, %struct.segment_s** %6, align 8
  %69 = load %struct.subpath*, %struct.subpath** %5, align 8
  %70 = getelementptr inbounds %struct.subpath, %struct.subpath* %69, i32 0, i32 0
  store %struct.segment_s* %68, %struct.segment_s** %70, align 8
  br label %71

71:                                               ; preds = %60, %54
  %72 = load %struct.subpath*, %struct.subpath** %5, align 8
  %73 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %74 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %73, i32 0, i32 5
  store %struct.subpath* %72, %struct.subpath** %74, align 8
  %75 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %76 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %75, i32 0, i32 6
  %77 = load i32, i32* %76, align 8
  %78 = add nsw i32 %77, 1
  store i32 %78, i32* %76, align 8
  store i32 0, i32* %2, align 4
  br label %79

79:                                               ; preds = %71, %28, %18
  %80 = load i32, i32* %2, align 4
  ret i32 %80
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.subpath* @path_alloc_copy(%struct.gx_path_s* %0) #0 {
  %2 = alloca %struct.subpath*, align 8
  %3 = alloca %struct.gx_path_s*, align 8
  %4 = alloca %struct.gx_path_s, align 8
  %5 = alloca i32, align 4
  store %struct.gx_path_s* %0, %struct.gx_path_s** %3, align 8
  %6 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %7 = call i32 @gx_path_copy(%struct.gx_path_s* %6, %struct.gx_path_s* %4)
  store i32 %7, i32* %5, align 4
  %8 = load i32, i32* %5, align 4
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %1
  store %struct.subpath* null, %struct.subpath** %2, align 8
  br label %20

11:                                               ; preds = %1
  %12 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %13 = bitcast %struct.gx_path_s* %12 to i8*
  %14 = bitcast %struct.gx_path_s* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 144, i1 false)
  %15 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %16 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %15, i32 0, i32 12
  store i8 0, i8* %16, align 2
  %17 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %18 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %17, i32 0, i32 5
  %19 = load %struct.subpath*, %struct.subpath** %18, align 8
  store %struct.subpath* %19, %struct.subpath** %2, align 8
  br label %20

20:                                               ; preds = %11, %10
  %21 = load %struct.subpath*, %struct.subpath** %2, align 8
  ret %struct.subpath* %21
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_path_add_point(%struct.gx_path_s* %0, i64 %1, i64 %2) #0 {
  %4 = alloca %struct.gx_path_s*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store %struct.gx_path_s* %0, %struct.gx_path_s** %4, align 8
  store i64 %1, i64* %5, align 8
  store i64 %2, i64* %6, align 8
  %7 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %8 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %7, i32 0, i32 11
  store i8 0, i8* %8, align 1
  %9 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %10 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %9, i32 0, i32 10
  store i8 1, i8* %10, align 8
  %11 = load i64, i64* %5, align 8
  %12 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %13 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %12, i32 0, i32 9
  %14 = getelementptr inbounds %struct.timeval, %struct.timeval* %13, i32 0, i32 0
  store i64 %11, i64* %14, align 8
  %15 = load i64, i64* %6, align 8
  %16 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %17 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %16, i32 0, i32 9
  %18 = getelementptr inbounds %struct.timeval, %struct.timeval* %17, i32 0, i32 1
  store i64 %15, i64* %18, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_path_add_relative_point(%struct.gx_path_s* %0, i64 %1, i64 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.gx_path_s*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store %struct.gx_path_s* %0, %struct.gx_path_s** %5, align 8
  store i64 %1, i64* %6, align 8
  store i64 %2, i64* %7, align 8
  %8 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %9 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %8, i32 0, i32 10
  %10 = load i8, i8* %9, align 8
  %11 = icmp ne i8 %10, 0
  br i1 %11, label %13, label %12

12:                                               ; preds = %3
  store i32 -14, i32* %4, align 4
  br label %28

13:                                               ; preds = %3
  %14 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %15 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %14, i32 0, i32 11
  store i8 0, i8* %15, align 1
  %16 = load i64, i64* %6, align 8
  %17 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %18 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %17, i32 0, i32 9
  %19 = getelementptr inbounds %struct.timeval, %struct.timeval* %18, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = add nsw i64 %20, %16
  store i64 %21, i64* %19, align 8
  %22 = load i64, i64* %7, align 8
  %23 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %24 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %23, i32 0, i32 9
  %25 = getelementptr inbounds %struct.timeval, %struct.timeval* %24, i32 0, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = add nsw i64 %26, %22
  store i64 %27, i64* %25, align 8
  store i32 0, i32* %4, align 4
  br label %28

28:                                               ; preds = %13, %12
  %29 = load i32, i32* %4, align 4
  ret i32 %29
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_path_add_line(%struct.gx_path_s* %0, i64 %1, i64 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.gx_path_s*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca %struct.subpath*, align 8
  %9 = alloca %struct.segment_s*, align 8
  %10 = alloca i32, align 4
  %11 = alloca %struct.segment_s*, align 8
  store %struct.gx_path_s* %0, %struct.gx_path_s** %5, align 8
  store i64 %1, i64* %6, align 8
  store i64 %2, i64* %7, align 8
  %12 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %13 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %12, i32 0, i32 5
  %14 = load %struct.subpath*, %struct.subpath** %13, align 8
  store %struct.subpath* %14, %struct.subpath** %8, align 8
  %15 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %16 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %15, i32 0, i32 11
  %17 = load i8, i8* %16, align 1
  %18 = icmp ne i8 %17, 0
  br i1 %18, label %36, label %19

19:                                               ; preds = %3
  %20 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %21 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %20, i32 0, i32 10
  %22 = load i8, i8* %21, align 8
  %23 = icmp ne i8 %22, 0
  br i1 %23, label %25, label %24

24:                                               ; preds = %19
  store i32 -14, i32* %4, align 4
  br label %97

25:                                               ; preds = %19
  %26 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %27 = call i32 @gx_path_new_subpath(%struct.gx_path_s* %26)
  store i32 %27, i32* %10, align 4
  %28 = load i32, i32* %10, align 4
  %29 = icmp slt i32 %28, 0
  br i1 %29, label %30, label %32

30:                                               ; preds = %25
  %31 = load i32, i32* %10, align 4
  store i32 %31, i32* %4, align 4
  br label %97

32:                                               ; preds = %25
  %33 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %34 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %33, i32 0, i32 5
  %35 = load %struct.subpath*, %struct.subpath** %34, align 8
  store %struct.subpath* %35, %struct.subpath** %8, align 8
  br label %36

36:                                               ; preds = %32, %3
  %37 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %38 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %37, i32 0, i32 12
  %39 = load i8, i8* %38, align 2
  %40 = icmp ne i8 %39, 0
  br i1 %40, label %41, label %47

41:                                               ; preds = %36
  %42 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %43 = call %struct.subpath* @path_alloc_copy(%struct.gx_path_s* %42)
  store %struct.subpath* %43, %struct.subpath** %8, align 8
  %44 = icmp ne %struct.subpath* %43, null
  br i1 %44, label %46, label %45

45:                                               ; preds = %41
  store i32 -13, i32* %4, align 4
  br label %97

46:                                               ; preds = %41
  br label %47

47:                                               ; preds = %46, %36
  %48 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %49 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %48, i32 0, i32 0
  %50 = getelementptr inbounds %struct.gs_memory_procs, %struct.gs_memory_procs* %49, i32 0, i32 0
  %51 = load i8* (i32, i32, i8*)*, i8* (i32, i32, i8*)** %50, align 8
  %52 = call i8* %51(i32 1, i32 40, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5.196, i64 0, i64 0))
  %53 = bitcast i8* %52 to %struct.segment_s*
  store %struct.segment_s* %53, %struct.segment_s** %9, align 8
  %54 = icmp ne %struct.segment_s* %53, null
  br i1 %54, label %56, label %55

55:                                               ; preds = %47
  store i32 -13, i32* %4, align 4
  br label %97

56:                                               ; preds = %47
  %57 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  %58 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %57, i32 0, i32 2
  store i32 1, i32* %58, align 8
  %59 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  %60 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %59, i32 0, i32 1
  store %struct.segment_s* null, %struct.segment_s** %60, align 8
  %61 = load %struct.subpath*, %struct.subpath** %8, align 8
  %62 = getelementptr inbounds %struct.subpath, %struct.subpath* %61, i32 0, i32 4
  %63 = load %struct.segment_s*, %struct.segment_s** %62, align 8
  store %struct.segment_s* %63, %struct.segment_s** %11, align 8
  %64 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  %65 = bitcast %struct.segment_s* %64 to %struct.segment_s*
  %66 = load %struct.segment_s*, %struct.segment_s** %11, align 8
  %67 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %66, i32 0, i32 1
  store %struct.segment_s* %65, %struct.segment_s** %67, align 8
  %68 = load %struct.segment_s*, %struct.segment_s** %11, align 8
  %69 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  %70 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %69, i32 0, i32 0
  store %struct.segment_s* %68, %struct.segment_s** %70, align 8
  %71 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  %72 = bitcast %struct.segment_s* %71 to %struct.segment_s*
  %73 = load %struct.subpath*, %struct.subpath** %8, align 8
  %74 = getelementptr inbounds %struct.subpath, %struct.subpath* %73, i32 0, i32 4
  store %struct.segment_s* %72, %struct.segment_s** %74, align 8
  %75 = load i64, i64* %6, align 8
  %76 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %77 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %76, i32 0, i32 9
  %78 = getelementptr inbounds %struct.timeval, %struct.timeval* %77, i32 0, i32 0
  store i64 %75, i64* %78, align 8
  %79 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  %80 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %79, i32 0, i32 3
  %81 = getelementptr inbounds %struct.timeval, %struct.timeval* %80, i32 0, i32 0
  store i64 %75, i64* %81, align 8
  %82 = load i64, i64* %7, align 8
  %83 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %84 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %83, i32 0, i32 9
  %85 = getelementptr inbounds %struct.timeval, %struct.timeval* %84, i32 0, i32 1
  store i64 %82, i64* %85, align 8
  %86 = load %struct.segment_s*, %struct.segment_s** %9, align 8
  %87 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %86, i32 0, i32 3
  %88 = getelementptr inbounds %struct.timeval, %struct.timeval* %87, i32 0, i32 1
  store i64 %82, i64* %88, align 8
  %89 = load %struct.subpath*, %struct.subpath** %8, align 8
  %90 = getelementptr inbounds %struct.subpath, %struct.subpath* %89, i32 0, i32 5
  %91 = load i32, i32* %90, align 8
  %92 = add nsw i32 %91, 1
  store i32 %92, i32* %90, align 8
  %93 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %94 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %93, i32 0, i32 7
  %95 = load i32, i32* %94, align 4
  %96 = add nsw i32 %95, 1
  store i32 %96, i32* %94, align 4
  store i32 0, i32* %4, align 4
  br label %97

97:                                               ; preds = %56, %55, %45, %30, %24
  %98 = load i32, i32* %4, align 4
  ret i32 %98
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_path_add_rectangle(%struct.gx_path_s* %0, i64 %1, i64 %2, i64 %3, i64 %4) #0 {
  %6 = alloca %struct.gx_path_s*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  store %struct.gx_path_s* %0, %struct.gx_path_s** %6, align 8
  store i64 %1, i64* %7, align 8
  store i64 %2, i64* %8, align 8
  store i64 %3, i64* %9, align 8
  store i64 %4, i64* %10, align 8
  %11 = load %struct.gx_path_s*, %struct.gx_path_s** %6, align 8
  %12 = load i64, i64* %7, align 8
  %13 = load i64, i64* %8, align 8
  %14 = load i64, i64* %7, align 8
  %15 = load i64, i64* %10, align 8
  %16 = load i64, i64* %9, align 8
  %17 = load i64, i64* %10, align 8
  %18 = call i32 @gx_path_add_pgram(%struct.gx_path_s* %11, i64 %12, i64 %13, i64 %14, i64 %15, i64 %16, i64 %17)
  ret i32 %18
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_path_add_pgram(%struct.gx_path_s* %0, i64 %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6) #0 {
  %8 = alloca i32, align 4
  %9 = alloca %struct.gx_path_s*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i32, align 4
  store %struct.gx_path_s* %0, %struct.gx_path_s** %9, align 8
  store i64 %1, i64* %10, align 8
  store i64 %2, i64* %11, align 8
  store i64 %3, i64* %12, align 8
  store i64 %4, i64* %13, align 8
  store i64 %5, i64* %14, align 8
  store i64 %6, i64* %15, align 8
  %17 = load %struct.gx_path_s*, %struct.gx_path_s** %9, align 8
  %18 = load i64, i64* %10, align 8
  %19 = load i64, i64* %11, align 8
  %20 = call i32 @gx_path_add_point(%struct.gx_path_s* %17, i64 %18, i64 %19)
  store i32 %20, i32* %16, align 4
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %52, label %22

22:                                               ; preds = %7
  %23 = load %struct.gx_path_s*, %struct.gx_path_s** %9, align 8
  %24 = load i64, i64* %12, align 8
  %25 = load i64, i64* %13, align 8
  %26 = call i32 @gx_path_add_line(%struct.gx_path_s* %23, i64 %24, i64 %25)
  store i32 %26, i32* %16, align 4
  %27 = icmp slt i32 %26, 0
  br i1 %27, label %52, label %28

28:                                               ; preds = %22
  %29 = load %struct.gx_path_s*, %struct.gx_path_s** %9, align 8
  %30 = load i64, i64* %14, align 8
  %31 = load i64, i64* %15, align 8
  %32 = call i32 @gx_path_add_line(%struct.gx_path_s* %29, i64 %30, i64 %31)
  store i32 %32, i32* %16, align 4
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %52, label %34

34:                                               ; preds = %28
  %35 = load %struct.gx_path_s*, %struct.gx_path_s** %9, align 8
  %36 = load i64, i64* %10, align 8
  %37 = load i64, i64* %14, align 8
  %38 = add nsw i64 %36, %37
  %39 = load i64, i64* %12, align 8
  %40 = sub nsw i64 %38, %39
  %41 = load i64, i64* %11, align 8
  %42 = load i64, i64* %15, align 8
  %43 = add nsw i64 %41, %42
  %44 = load i64, i64* %13, align 8
  %45 = sub nsw i64 %43, %44
  %46 = call i32 @gx_path_add_line(%struct.gx_path_s* %35, i64 %40, i64 %45)
  store i32 %46, i32* %16, align 4
  %47 = icmp slt i32 %46, 0
  br i1 %47, label %52, label %48

48:                                               ; preds = %34
  %49 = load %struct.gx_path_s*, %struct.gx_path_s** %9, align 8
  %50 = call i32 @gx_path_close_subpath(%struct.gx_path_s* %49)
  store i32 %50, i32* %16, align 4
  %51 = icmp slt i32 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %48, %34, %28, %22, %7
  %53 = load i32, i32* %16, align 4
  store i32 %53, i32* %8, align 4
  br label %55

54:                                               ; preds = %48
  store i32 0, i32* %8, align 4
  br label %55

55:                                               ; preds = %54, %52
  %56 = load i32, i32* %8, align 4
  ret i32 %56
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_path_close_subpath(%struct.gx_path_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.gx_path_s*, align 8
  %4 = alloca %struct.subpath*, align 8
  %5 = alloca %struct.segment_s*, align 8
  %6 = alloca %struct.segment_s*, align 8
  store %struct.gx_path_s* %0, %struct.gx_path_s** %3, align 8
  %7 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %8 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %7, i32 0, i32 5
  %9 = load %struct.subpath*, %struct.subpath** %8, align 8
  store %struct.subpath* %9, %struct.subpath** %4, align 8
  %10 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %11 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %10, i32 0, i32 11
  %12 = load i8, i8* %11, align 1
  %13 = icmp ne i8 %12, 0
  br i1 %13, label %15, label %14

14:                                               ; preds = %1
  store i32 0, i32* %2, align 4
  br label %130

15:                                               ; preds = %1
  %16 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %17 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %16, i32 0, i32 9
  %18 = getelementptr inbounds %struct.timeval, %struct.timeval* %17, i32 0, i32 0
  %19 = load i64, i64* %18, align 8
  %20 = load %struct.subpath*, %struct.subpath** %4, align 8
  %21 = getelementptr inbounds %struct.subpath, %struct.subpath* %20, i32 0, i32 3
  %22 = getelementptr inbounds %struct.timeval, %struct.timeval* %21, i32 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = icmp eq i64 %19, %23
  br i1 %24, label %25, label %58

25:                                               ; preds = %15
  %26 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %27 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %26, i32 0, i32 9
  %28 = getelementptr inbounds %struct.timeval, %struct.timeval* %27, i32 0, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = load %struct.subpath*, %struct.subpath** %4, align 8
  %31 = getelementptr inbounds %struct.subpath, %struct.subpath* %30, i32 0, i32 3
  %32 = getelementptr inbounds %struct.timeval, %struct.timeval* %31, i32 0, i32 1
  %33 = load i64, i64* %32, align 8
  %34 = icmp eq i64 %29, %33
  br i1 %34, label %35, label %58

35:                                               ; preds = %25
  %36 = load %struct.subpath*, %struct.subpath** %4, align 8
  %37 = getelementptr inbounds %struct.subpath, %struct.subpath* %36, i32 0, i32 4
  %38 = load %struct.segment_s*, %struct.segment_s** %37, align 8
  %39 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %38, i32 0, i32 2
  %40 = load i32, i32* %39, align 8
  %41 = icmp eq i32 %40, 1
  br i1 %41, label %42, label %58

42:                                               ; preds = %35
  %43 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %44 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %43, i32 0, i32 12
  %45 = load i8, i8* %44, align 2
  %46 = icmp ne i8 %45, 0
  br i1 %46, label %47, label %53

47:                                               ; preds = %42
  %48 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %49 = call %struct.subpath* @path_alloc_copy(%struct.gx_path_s* %48)
  %50 = icmp ne %struct.subpath* null, %49
  br i1 %50, label %52, label %51

51:                                               ; preds = %47
  store i32 -13, i32* %2, align 4
  br label %130

52:                                               ; preds = %47
  br label %53

53:                                               ; preds = %52, %42
  %54 = load %struct.subpath*, %struct.subpath** %4, align 8
  %55 = getelementptr inbounds %struct.subpath, %struct.subpath* %54, i32 0, i32 4
  %56 = load %struct.segment_s*, %struct.segment_s** %55, align 8
  %57 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %56, i32 0, i32 2
  store i32 2, i32* %57, align 8
  store %struct.segment_s* null, %struct.segment_s** %5, align 8
  br label %125

58:                                               ; preds = %35, %25, %15
  %59 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %60 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %59, i32 0, i32 12
  %61 = load i8, i8* %60, align 2
  %62 = icmp ne i8 %61, 0
  br i1 %62, label %63, label %69

63:                                               ; preds = %58
  %64 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %65 = call %struct.subpath* @path_alloc_copy(%struct.gx_path_s* %64)
  store %struct.subpath* %65, %struct.subpath** %4, align 8
  %66 = icmp ne %struct.subpath* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %63
  store i32 -13, i32* %2, align 4
  br label %130

68:                                               ; preds = %63
  br label %69

69:                                               ; preds = %68, %58
  %70 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %71 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %70, i32 0, i32 0
  %72 = getelementptr inbounds %struct.gs_memory_procs, %struct.gs_memory_procs* %71, i32 0, i32 0
  %73 = load i8* (i32, i32, i8*)*, i8* (i32, i32, i8*)** %72, align 8
  %74 = call i8* %73(i32 1, i32 40, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7.203, i64 0, i64 0))
  %75 = bitcast i8* %74 to %struct.segment_s*
  store %struct.segment_s* %75, %struct.segment_s** %5, align 8
  %76 = icmp ne %struct.segment_s* %75, null
  br i1 %76, label %78, label %77

77:                                               ; preds = %69
  store i32 -13, i32* %2, align 4
  br label %130

78:                                               ; preds = %69
  %79 = load %struct.segment_s*, %struct.segment_s** %5, align 8
  %80 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %79, i32 0, i32 2
  store i32 2, i32* %80, align 8
  %81 = load %struct.segment_s*, %struct.segment_s** %5, align 8
  %82 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %81, i32 0, i32 1
  store %struct.segment_s* null, %struct.segment_s** %82, align 8
  %83 = load %struct.subpath*, %struct.subpath** %4, align 8
  %84 = getelementptr inbounds %struct.subpath, %struct.subpath* %83, i32 0, i32 4
  %85 = load %struct.segment_s*, %struct.segment_s** %84, align 8
  store %struct.segment_s* %85, %struct.segment_s** %6, align 8
  %86 = load %struct.segment_s*, %struct.segment_s** %5, align 8
  %87 = bitcast %struct.segment_s* %86 to %struct.segment_s*
  %88 = load %struct.segment_s*, %struct.segment_s** %6, align 8
  %89 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %88, i32 0, i32 1
  store %struct.segment_s* %87, %struct.segment_s** %89, align 8
  %90 = load %struct.segment_s*, %struct.segment_s** %6, align 8
  %91 = load %struct.segment_s*, %struct.segment_s** %5, align 8
  %92 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %91, i32 0, i32 0
  store %struct.segment_s* %90, %struct.segment_s** %92, align 8
  %93 = load %struct.segment_s*, %struct.segment_s** %5, align 8
  %94 = bitcast %struct.segment_s* %93 to %struct.segment_s*
  %95 = load %struct.subpath*, %struct.subpath** %4, align 8
  %96 = getelementptr inbounds %struct.subpath, %struct.subpath* %95, i32 0, i32 4
  store %struct.segment_s* %94, %struct.segment_s** %96, align 8
  %97 = load %struct.subpath*, %struct.subpath** %4, align 8
  %98 = getelementptr inbounds %struct.subpath, %struct.subpath* %97, i32 0, i32 3
  %99 = getelementptr inbounds %struct.timeval, %struct.timeval* %98, i32 0, i32 0
  %100 = load i64, i64* %99, align 8
  %101 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %102 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %101, i32 0, i32 9
  %103 = getelementptr inbounds %struct.timeval, %struct.timeval* %102, i32 0, i32 0
  store i64 %100, i64* %103, align 8
  %104 = load %struct.segment_s*, %struct.segment_s** %5, align 8
  %105 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %104, i32 0, i32 3
  %106 = getelementptr inbounds %struct.timeval, %struct.timeval* %105, i32 0, i32 0
  store i64 %100, i64* %106, align 8
  %107 = load %struct.subpath*, %struct.subpath** %4, align 8
  %108 = getelementptr inbounds %struct.subpath, %struct.subpath* %107, i32 0, i32 3
  %109 = getelementptr inbounds %struct.timeval, %struct.timeval* %108, i32 0, i32 1
  %110 = load i64, i64* %109, align 8
  %111 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %112 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %111, i32 0, i32 9
  %113 = getelementptr inbounds %struct.timeval, %struct.timeval* %112, i32 0, i32 1
  store i64 %110, i64* %113, align 8
  %114 = load %struct.segment_s*, %struct.segment_s** %5, align 8
  %115 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %114, i32 0, i32 3
  %116 = getelementptr inbounds %struct.timeval, %struct.timeval* %115, i32 0, i32 1
  store i64 %110, i64* %116, align 8
  %117 = load %struct.subpath*, %struct.subpath** %4, align 8
  %118 = getelementptr inbounds %struct.subpath, %struct.subpath* %117, i32 0, i32 5
  %119 = load i32, i32* %118, align 8
  %120 = add nsw i32 %119, 1
  store i32 %120, i32* %118, align 8
  %121 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %122 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %121, i32 0, i32 7
  %123 = load i32, i32* %122, align 4
  %124 = add nsw i32 %123, 1
  store i32 %124, i32* %122, align 4
  br label %125

125:                                              ; preds = %78, %53
  %126 = load %struct.subpath*, %struct.subpath** %4, align 8
  %127 = getelementptr inbounds %struct.subpath, %struct.subpath* %126, i32 0, i32 7
  store i8 1, i8* %127, align 8
  %128 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %129 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %128, i32 0, i32 11
  store i8 0, i8* %129, align 1
  store i32 0, i32* %2, align 4
  br label %130

130:                                              ; preds = %125, %77, %67, %51, %14
  %131 = load i32, i32* %2, align 4
  ret i32 %131
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_path_add_curve(%struct.gx_path_s* %0, i64 %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6) #0 {
  %8 = alloca i32, align 4
  %9 = alloca %struct.gx_path_s*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca %struct.subpath*, align 8
  %17 = alloca %struct.curve_segment*, align 8
  %18 = alloca i32, align 4
  %19 = alloca %struct.segment_s*, align 8
  store %struct.gx_path_s* %0, %struct.gx_path_s** %9, align 8
  store i64 %1, i64* %10, align 8
  store i64 %2, i64* %11, align 8
  store i64 %3, i64* %12, align 8
  store i64 %4, i64* %13, align 8
  store i64 %5, i64* %14, align 8
  store i64 %6, i64* %15, align 8
  %20 = load %struct.gx_path_s*, %struct.gx_path_s** %9, align 8
  %21 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %20, i32 0, i32 5
  %22 = load %struct.subpath*, %struct.subpath** %21, align 8
  store %struct.subpath* %22, %struct.subpath** %16, align 8
  %23 = load %struct.gx_path_s*, %struct.gx_path_s** %9, align 8
  %24 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %23, i32 0, i32 11
  %25 = load i8, i8* %24, align 1
  %26 = icmp ne i8 %25, 0
  br i1 %26, label %44, label %27

27:                                               ; preds = %7
  %28 = load %struct.gx_path_s*, %struct.gx_path_s** %9, align 8
  %29 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %28, i32 0, i32 10
  %30 = load i8, i8* %29, align 8
  %31 = icmp ne i8 %30, 0
  br i1 %31, label %33, label %32

32:                                               ; preds = %27
  store i32 -14, i32* %8, align 4
  br label %125

33:                                               ; preds = %27
  %34 = load %struct.gx_path_s*, %struct.gx_path_s** %9, align 8
  %35 = call i32 @gx_path_new_subpath(%struct.gx_path_s* %34)
  store i32 %35, i32* %18, align 4
  %36 = load i32, i32* %18, align 4
  %37 = icmp slt i32 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %33
  %39 = load i32, i32* %18, align 4
  store i32 %39, i32* %8, align 4
  br label %125

40:                                               ; preds = %33
  %41 = load %struct.gx_path_s*, %struct.gx_path_s** %9, align 8
  %42 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %41, i32 0, i32 5
  %43 = load %struct.subpath*, %struct.subpath** %42, align 8
  store %struct.subpath* %43, %struct.subpath** %16, align 8
  br label %44

44:                                               ; preds = %40, %7
  %45 = load %struct.gx_path_s*, %struct.gx_path_s** %9, align 8
  %46 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %45, i32 0, i32 12
  %47 = load i8, i8* %46, align 2
  %48 = icmp ne i8 %47, 0
  br i1 %48, label %49, label %55

49:                                               ; preds = %44
  %50 = load %struct.gx_path_s*, %struct.gx_path_s** %9, align 8
  %51 = call %struct.subpath* @path_alloc_copy(%struct.gx_path_s* %50)
  store %struct.subpath* %51, %struct.subpath** %16, align 8
  %52 = icmp ne %struct.subpath* %51, null
  br i1 %52, label %54, label %53

53:                                               ; preds = %49
  store i32 -13, i32* %8, align 4
  br label %125

54:                                               ; preds = %49
  br label %55

55:                                               ; preds = %54, %44
  %56 = load %struct.gx_path_s*, %struct.gx_path_s** %9, align 8
  %57 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %56, i32 0, i32 0
  %58 = getelementptr inbounds %struct.gs_memory_procs, %struct.gs_memory_procs* %57, i32 0, i32 0
  %59 = load i8* (i32, i32, i8*)*, i8* (i32, i32, i8*)** %58, align 8
  %60 = call i8* %59(i32 1, i32 72, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6.206, i64 0, i64 0))
  %61 = bitcast i8* %60 to %struct.curve_segment*
  store %struct.curve_segment* %61, %struct.curve_segment** %17, align 8
  %62 = icmp ne %struct.curve_segment* %61, null
  br i1 %62, label %64, label %63

63:                                               ; preds = %55
  store i32 -13, i32* %8, align 4
  br label %125

64:                                               ; preds = %55
  %65 = load %struct.curve_segment*, %struct.curve_segment** %17, align 8
  %66 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %65, i32 0, i32 2
  store i32 3, i32* %66, align 8
  %67 = load %struct.curve_segment*, %struct.curve_segment** %17, align 8
  %68 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %67, i32 0, i32 1
  store %struct.segment_s* null, %struct.segment_s** %68, align 8
  %69 = load %struct.subpath*, %struct.subpath** %16, align 8
  %70 = getelementptr inbounds %struct.subpath, %struct.subpath* %69, i32 0, i32 4
  %71 = load %struct.segment_s*, %struct.segment_s** %70, align 8
  store %struct.segment_s* %71, %struct.segment_s** %19, align 8
  %72 = load %struct.curve_segment*, %struct.curve_segment** %17, align 8
  %73 = bitcast %struct.curve_segment* %72 to %struct.segment_s*
  %74 = load %struct.segment_s*, %struct.segment_s** %19, align 8
  %75 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %74, i32 0, i32 1
  store %struct.segment_s* %73, %struct.segment_s** %75, align 8
  %76 = load %struct.segment_s*, %struct.segment_s** %19, align 8
  %77 = load %struct.curve_segment*, %struct.curve_segment** %17, align 8
  %78 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %77, i32 0, i32 0
  store %struct.segment_s* %76, %struct.segment_s** %78, align 8
  %79 = load %struct.curve_segment*, %struct.curve_segment** %17, align 8
  %80 = bitcast %struct.curve_segment* %79 to %struct.segment_s*
  %81 = load %struct.subpath*, %struct.subpath** %16, align 8
  %82 = getelementptr inbounds %struct.subpath, %struct.subpath* %81, i32 0, i32 4
  store %struct.segment_s* %80, %struct.segment_s** %82, align 8
  %83 = load i64, i64* %10, align 8
  %84 = load %struct.curve_segment*, %struct.curve_segment** %17, align 8
  %85 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %84, i32 0, i32 4
  %86 = getelementptr inbounds %struct.timeval, %struct.timeval* %85, i32 0, i32 0
  store i64 %83, i64* %86, align 8
  %87 = load i64, i64* %11, align 8
  %88 = load %struct.curve_segment*, %struct.curve_segment** %17, align 8
  %89 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %88, i32 0, i32 4
  %90 = getelementptr inbounds %struct.timeval, %struct.timeval* %89, i32 0, i32 1
  store i64 %87, i64* %90, align 8
  %91 = load i64, i64* %12, align 8
  %92 = load %struct.curve_segment*, %struct.curve_segment** %17, align 8
  %93 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %92, i32 0, i32 5
  %94 = getelementptr inbounds %struct.timeval, %struct.timeval* %93, i32 0, i32 0
  store i64 %91, i64* %94, align 8
  %95 = load i64, i64* %13, align 8
  %96 = load %struct.curve_segment*, %struct.curve_segment** %17, align 8
  %97 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %96, i32 0, i32 5
  %98 = getelementptr inbounds %struct.timeval, %struct.timeval* %97, i32 0, i32 1
  store i64 %95, i64* %98, align 8
  %99 = load i64, i64* %14, align 8
  %100 = load %struct.gx_path_s*, %struct.gx_path_s** %9, align 8
  %101 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %100, i32 0, i32 9
  %102 = getelementptr inbounds %struct.timeval, %struct.timeval* %101, i32 0, i32 0
  store i64 %99, i64* %102, align 8
  %103 = load %struct.curve_segment*, %struct.curve_segment** %17, align 8
  %104 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %103, i32 0, i32 3
  %105 = getelementptr inbounds %struct.timeval, %struct.timeval* %104, i32 0, i32 0
  store i64 %99, i64* %105, align 8
  %106 = load i64, i64* %15, align 8
  %107 = load %struct.gx_path_s*, %struct.gx_path_s** %9, align 8
  %108 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %107, i32 0, i32 9
  %109 = getelementptr inbounds %struct.timeval, %struct.timeval* %108, i32 0, i32 1
  store i64 %106, i64* %109, align 8
  %110 = load %struct.curve_segment*, %struct.curve_segment** %17, align 8
  %111 = getelementptr inbounds %struct.curve_segment, %struct.curve_segment* %110, i32 0, i32 3
  %112 = getelementptr inbounds %struct.timeval, %struct.timeval* %111, i32 0, i32 1
  store i64 %106, i64* %112, align 8
  %113 = load %struct.subpath*, %struct.subpath** %16, align 8
  %114 = getelementptr inbounds %struct.subpath, %struct.subpath* %113, i32 0, i32 6
  %115 = load i32, i32* %114, align 4
  %116 = add nsw i32 %115, 1
  store i32 %116, i32* %114, align 4
  %117 = load %struct.gx_path_s*, %struct.gx_path_s** %9, align 8
  %118 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %117, i32 0, i32 7
  %119 = load i32, i32* %118, align 4
  %120 = add nsw i32 %119, 1
  store i32 %120, i32* %118, align 4
  %121 = load %struct.gx_path_s*, %struct.gx_path_s** %9, align 8
  %122 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %121, i32 0, i32 8
  %123 = load i32, i32* %122, align 8
  %124 = add nsw i32 %123, 1
  store i32 %124, i32* %122, align 8
  store i32 0, i32* %8, align 4
  br label %125

125:                                              ; preds = %64, %63, %53, %38, %32
  %126 = load i32, i32* %8, align 4
  ret i32 %126
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_path_add_arc(%struct.gx_path_s* %0, i64 %1, i64 %2, i64 %3, i64 %4, i64 %5, i64 %6) #0 {
  %8 = alloca %struct.gx_path_s*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  store %struct.gx_path_s* %0, %struct.gx_path_s** %8, align 8
  store i64 %1, i64* %9, align 8
  store i64 %2, i64* %10, align 8
  store i64 %3, i64* %11, align 8
  store i64 %4, i64* %12, align 8
  store i64 %5, i64* %13, align 8
  store i64 %6, i64* %14, align 8
  %17 = load i64, i64* %13, align 8
  %18 = sitofp i64 %17 to double
  %19 = fmul double %18, 5.500000e-01
  %20 = fptosi double %19 to i64
  store i64 %20, i64* %15, align 8
  %21 = load i64, i64* %14, align 8
  %22 = sitofp i64 %21 to double
  %23 = fmul double %22, 5.500000e-01
  %24 = fptosi double %23 to i64
  store i64 %24, i64* %16, align 8
  %25 = load %struct.gx_path_s*, %struct.gx_path_s** %8, align 8
  %26 = load i64, i64* %9, align 8
  %27 = sitofp i64 %26 to double
  %28 = fmul double %27, 0x3FDCCCCCCCCCCCCC
  %29 = fptosi double %28 to i64
  %30 = load i64, i64* %15, align 8
  %31 = add nsw i64 %29, %30
  %32 = load i64, i64* %10, align 8
  %33 = sitofp i64 %32 to double
  %34 = fmul double %33, 0x3FDCCCCCCCCCCCCC
  %35 = fptosi double %34 to i64
  %36 = load i64, i64* %16, align 8
  %37 = add nsw i64 %35, %36
  %38 = load i64, i64* %11, align 8
  %39 = sitofp i64 %38 to double
  %40 = fmul double %39, 0x3FDCCCCCCCCCCCCC
  %41 = fptosi double %40 to i64
  %42 = load i64, i64* %15, align 8
  %43 = add nsw i64 %41, %42
  %44 = load i64, i64* %12, align 8
  %45 = sitofp i64 %44 to double
  %46 = fmul double %45, 0x3FDCCCCCCCCCCCCC
  %47 = fptosi double %46 to i64
  %48 = load i64, i64* %16, align 8
  %49 = add nsw i64 %47, %48
  %50 = load i64, i64* %11, align 8
  %51 = load i64, i64* %12, align 8
  %52 = call i32 @gx_path_add_curve(%struct.gx_path_s* %25, i64 %31, i64 %37, i64 %43, i64 %49, i64 %50, i64 %51)
  ret i32 %52
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_stroke_fill(%struct.gx_path_s* %0, %struct.gs_state_s* %1) #0 {
  %3 = alloca %struct.gx_path_s*, align 8
  %4 = alloca %struct.gs_state_s*, align 8
  %5 = alloca i32, align 4
  store %struct.gx_path_s* %0, %struct.gx_path_s** %3, align 8
  store %struct.gs_state_s* %1, %struct.gs_state_s** %4, align 8
  store %struct.gx_path_s* null, %struct.gx_path_s** @stroke_path, align 8
  %6 = load %struct.gx_path_s*, %struct.gx_path_s** %3, align 8
  %7 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %8 = call i32 @stroke(%struct.gx_path_s* %6, i32 (i32, %struct.partial_line_s*, %struct.partial_line_s*, %struct.gs_state_s*)* @stroke_fill, %struct.gs_state_s* %7)
  store i32 %8, i32* %5, align 4
  %9 = load %struct.gx_path_s*, %struct.gx_path_s** @stroke_path, align 8
  %10 = icmp ne %struct.gx_path_s* %9, null
  br i1 %10, label %11, label %23

11:                                               ; preds = %2
  %12 = load i32, i32* %5, align 4
  %13 = icmp sge i32 %12, 0
  br i1 %13, label %14, label %21

14:                                               ; preds = %11
  %15 = load %struct.gx_path_s*, %struct.gx_path_s** @stroke_path, align 8
  %16 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %17 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %16, i32 0, i32 14
  %18 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %17, align 8
  %19 = load %struct.gs_state_s*, %struct.gs_state_s** %4, align 8
  %20 = call i32 (%struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, i32, i64, ...) bitcast (i32 (%struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, i32, i64)* @gx_fill_path to i32 (%struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, i32, i64, ...)*)(%struct.gx_path_s* %15, %struct.gx_device_color_s* %18, %struct.gs_state_s* %19, i32 -1, i64 0)
  store i32 %20, i32* %5, align 4
  br label %21

21:                                               ; preds = %14, %11
  %22 = load %struct.gx_path_s*, %struct.gx_path_s** @stroke_path, align 8
  call void @gx_path_release(%struct.gx_path_s* %22)
  br label %23

23:                                               ; preds = %21, %2
  %24 = load i32, i32* %5, align 4
  ret i32 %24
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @stroke_fill(i32 %0, %struct.partial_line_s* %1, %struct.partial_line_s* %2, %struct.gs_state_s* %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca %struct.partial_line_s*, align 8
  %8 = alloca %struct.partial_line_s*, align 8
  %9 = alloca %struct.gs_state_s*, align 8
  store i32 %0, i32* %6, align 4
  store %struct.partial_line_s* %1, %struct.partial_line_s** %7, align 8
  store %struct.partial_line_s* %2, %struct.partial_line_s** %8, align 8
  store %struct.gs_state_s* %3, %struct.gs_state_s** %9, align 8
  %10 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %11 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %10, i32 0, i32 4
  %12 = load i32, i32* %11, align 8
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %81

14:                                               ; preds = %4
  %15 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  %16 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %15, i32 0, i32 8
  %17 = load %struct.gx_path_s*, %struct.gx_path_s** %16, align 8
  %18 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %19 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %18, i32 0, i32 0
  %20 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %19, i32 0, i32 0
  %21 = getelementptr inbounds %struct.timeval, %struct.timeval* %20, i32 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %24 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %23, i32 0, i32 0
  %25 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %24, i32 0, i32 0
  %26 = getelementptr inbounds %struct.timeval, %struct.timeval* %25, i32 0, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %29 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %28, i32 0, i32 1
  %30 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %29, i32 0, i32 0
  %31 = getelementptr inbounds %struct.timeval, %struct.timeval* %30, i32 0, i32 0
  %32 = load i64, i64* %31, align 8
  %33 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %34 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %33, i32 0, i32 1
  %35 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %34, i32 0, i32 0
  %36 = getelementptr inbounds %struct.timeval, %struct.timeval* %35, i32 0, i32 1
  %37 = load i64, i64* %36, align 8
  %38 = call i32 @gx_cpath_includes_rectangle(%struct.gx_path_s* %17, i64 %22, i64 %27, i64 %32, i64 %37)
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %40, label %66

40:                                               ; preds = %14
  %41 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %42 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %41, i32 0, i32 0
  %43 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %42, i32 0, i32 0
  %44 = getelementptr inbounds %struct.timeval, %struct.timeval* %43, i32 0, i32 0
  %45 = load i64, i64* %44, align 8
  %46 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %47 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %46, i32 0, i32 0
  %48 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %47, i32 0, i32 0
  %49 = getelementptr inbounds %struct.timeval, %struct.timeval* %48, i32 0, i32 1
  %50 = load i64, i64* %49, align 8
  %51 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %52 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %51, i32 0, i32 1
  %53 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %52, i32 0, i32 0
  %54 = getelementptr inbounds %struct.timeval, %struct.timeval* %53, i32 0, i32 0
  %55 = load i64, i64* %54, align 8
  %56 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %57 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %56, i32 0, i32 1
  %58 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %57, i32 0, i32 0
  %59 = getelementptr inbounds %struct.timeval, %struct.timeval* %58, i32 0, i32 1
  %60 = load i64, i64* %59, align 8
  %61 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  %62 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %61, i32 0, i32 14
  %63 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %62, align 8
  %64 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  %65 = call i32 (i64, i64, i64, i64, %struct.gx_device_color_s*, %struct.gs_state_s*, ...) bitcast (i32 (i64, i64, i64, i64, %struct.gx_device_color_s*, %struct.gs_state_s*)* @gz_draw_line_fixed to i32 (i64, i64, i64, i64, %struct.gx_device_color_s*, %struct.gs_state_s*, ...)*)(i64 %45, i64 %50, i64 %55, i64 %60, %struct.gx_device_color_s* %63, %struct.gs_state_s* %64)
  store i32 %65, i32* %5, align 4
  br label %105

66:                                               ; preds = %14
  %67 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %68 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %67, i32 0, i32 2
  %69 = getelementptr inbounds %struct.timeval, %struct.timeval* %68, i32 0, i32 0
  store i64 1024, i64* %69, align 8
  %70 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %71 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %70, i32 0, i32 2
  %72 = getelementptr inbounds %struct.timeval, %struct.timeval* %71, i32 0, i32 1
  store i64 1024, i64* %72, align 8
  %73 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %74 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %73, i32 0, i32 3
  %75 = getelementptr inbounds %struct.timeval, %struct.timeval* %74, i32 0, i32 0
  store i64 512, i64* %75, align 8
  %76 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %77 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %76, i32 0, i32 3
  %78 = getelementptr inbounds %struct.timeval, %struct.timeval* %77, i32 0, i32 1
  store i64 512, i64* %78, align 8
  %79 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %80 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  call void @compute_caps(%struct.partial_line_s* %79, %struct.gs_state_s* %80)
  br label %81

81:                                               ; preds = %66, %4
  %82 = load %struct.gx_path_s*, %struct.gx_path_s** @stroke_path, align 8
  %83 = icmp eq %struct.gx_path_s* %82, null
  br i1 %83, label %84, label %88

84:                                               ; preds = %81
  store %struct.gx_path_s* @stroke_path_body, %struct.gx_path_s** @stroke_path, align 8
  %85 = load %struct.gx_path_s*, %struct.gx_path_s** @stroke_path, align 8
  %86 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  %87 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %86, i32 0, i32 1
  call void @gx_path_init(%struct.gx_path_s* %85, %struct.gs_memory_procs* %87)
  br label %88

88:                                               ; preds = %84, %81
  %89 = load i32, i32* %6, align 4
  %90 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %91 = load %struct.partial_line_s*, %struct.partial_line_s** %8, align 8
  %92 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  %93 = call i32 @stroke_add(i32 %89, %struct.partial_line_s* %90, %struct.partial_line_s* %91, %struct.gs_state_s* %92)
  %94 = load %struct.gx_path_s*, %struct.gx_path_s** @stroke_path, align 8
  %95 = icmp eq %struct.gx_path_s* %94, @stroke_path_body
  br i1 %95, label %96, label %104

96:                                               ; preds = %88
  %97 = load %struct.gx_path_s*, %struct.gx_path_s** @stroke_path, align 8
  %98 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  %99 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %98, i32 0, i32 14
  %100 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %99, align 8
  %101 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  %102 = call i32 (%struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, i32, i64, ...) bitcast (i32 (%struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, i32, i64)* @gx_fill_path to i32 (%struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, i32, i64, ...)*)(%struct.gx_path_s* %97, %struct.gx_device_color_s* %100, %struct.gs_state_s* %101, i32 -1, i64 0)
  %103 = load %struct.gx_path_s*, %struct.gx_path_s** @stroke_path, align 8
  call void @gx_path_release(%struct.gx_path_s* %103)
  store %struct.gx_path_s* null, %struct.gx_path_s** @stroke_path, align 8
  br label %104

104:                                              ; preds = %96, %88
  store i32 0, i32* %5, align 4
  br label %105

105:                                              ; preds = %104, %40
  %106 = load i32, i32* %5, align 4
  ret i32 %106
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @stroke(%struct.gx_path_s* %0, i32 (i32, %struct.partial_line_s*, %struct.partial_line_s*, %struct.gs_state_s*)* %1, %struct.gs_state_s* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.gx_path_s*, align 8
  %6 = alloca i32 (i32, %struct.partial_line_s*, %struct.partial_line_s*, %struct.gs_state_s*)*, align 8
  %7 = alloca %struct.gs_state_s*, align 8
  %8 = alloca %struct.subpath*, align 8
  %9 = alloca i32, align 4
  %10 = alloca %struct.dash_params_s*, align 8
  %11 = alloca float*, align 8
  %12 = alloca i32, align 4
  %13 = alloca %struct.gx_path_s, align 8
  %14 = alloca i32, align 4
  %15 = alloca float, align 4
  %16 = alloca float, align 4
  %17 = alloca float, align 4
  %18 = alloca i32, align 4
  %19 = alloca float, align 4
  %20 = alloca float, align 4
  %21 = alloca float, align 4
  %22 = alloca i32, align 4
  %23 = alloca %struct.segment_s*, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca %struct.partial_line_s, align 8
  %27 = alloca %struct.partial_line_s, align 8
  %28 = alloca %struct.partial_line_s, align 8
  %29 = alloca i32, align 4
  %30 = alloca i8, align 1
  %31 = alloca i32, align 4
  %32 = alloca float, align 4
  %33 = alloca i32, align 4
  %34 = alloca i64, align 8
  %35 = alloca i64, align 8
  %36 = alloca i64, align 8
  %37 = alloca i64, align 8
  %38 = alloca float, align 4
  %39 = alloca %struct.gs_point_s, align 4
  %40 = alloca float, align 4
  %41 = alloca float, align 4
  %42 = alloca float, align 4
  %43 = alloca float, align 4
  %44 = alloca float, align 4
  %45 = alloca float, align 4
  %46 = alloca i64, align 8
  %47 = alloca i64, align 8
  store %struct.gx_path_s* %0, %struct.gx_path_s** %5, align 8
  store i32 (i32, %struct.partial_line_s*, %struct.partial_line_s*, %struct.gs_state_s*)* %1, i32 (i32, %struct.partial_line_s*, %struct.partial_line_s*, %struct.gs_state_s*)** %6, align 8
  store %struct.gs_state_s* %2, %struct.gs_state_s** %7, align 8
  %48 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  %49 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %48, i32 0, i32 10
  %50 = load %struct.line_params_s*, %struct.line_params_s** %49, align 8
  %51 = getelementptr inbounds %struct.line_params_s, %struct.line_params_s* %50, i32 0, i32 5
  store %struct.dash_params_s* %51, %struct.dash_params_s** %10, align 8
  %52 = load %struct.dash_params_s*, %struct.dash_params_s** %10, align 8
  %53 = getelementptr inbounds %struct.dash_params_s, %struct.dash_params_s* %52, i32 0, i32 0
  %54 = load float*, float** %53, align 8
  store float* %54, float** %11, align 8
  %55 = load %struct.dash_params_s*, %struct.dash_params_s** %10, align 8
  %56 = getelementptr inbounds %struct.dash_params_s, %struct.dash_params_s* %55, i32 0, i32 1
  %57 = load i32, i32* %56, align 8
  store i32 %57, i32* %12, align 4
  %58 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  %59 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %58, i32 0, i32 2
  %60 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %59, i32 0, i32 2
  %61 = bitcast float* %60 to i64*
  %62 = load i64, i64* %61, align 8
  %63 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  %64 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %63, i32 0, i32 2
  %65 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %64, i32 0, i32 4
  %66 = bitcast float* %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = or i64 %62, %67
  %69 = shl i64 %68, 1
  %70 = icmp eq i64 %69, 0
  %71 = xor i1 %70, true
  %72 = zext i1 %71 to i32
  store i32 %72, i32* %14, align 4
  %73 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  %74 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %73, i32 0, i32 10
  %75 = load %struct.line_params_s*, %struct.line_params_s** %74, align 8
  %76 = getelementptr inbounds %struct.line_params_s, %struct.line_params_s* %75, i32 0, i32 0
  %77 = load float, float* %76, align 8
  store float %77, float* %15, align 4
  %78 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  %79 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %78, i32 0, i32 2
  %80 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %79, i32 0, i32 0
  %81 = load float, float* %80, align 8
  store float %81, float* %16, align 4
  %82 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  %83 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %82, i32 0, i32 2
  %84 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %83, i32 0, i32 6
  %85 = load float, float* %84, align 8
  store float %85, float* %17, align 4
  %86 = bitcast float* %15 to i64*
  %87 = load i64, i64* %86, align 4
  %88 = shl i64 %87, 1
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %90, label %91

90:                                               ; preds = %3
  store i32 1, i32* %18, align 4
  store float 0x3F847AE140000000, float* %15, align 4
  br label %125

91:                                               ; preds = %3
  %92 = load i32, i32* %14, align 4
  %93 = icmp ne i32 %92, 0
  br i1 %93, label %94, label %95

94:                                               ; preds = %91
  store i32 0, i32* %18, align 4
  br label %124

95:                                               ; preds = %91
  %96 = load float, float* %16, align 4
  store float %96, float* %20, align 4
  %97 = load float, float* %17, align 4
  store float %97, float* %21, align 4
  %98 = load float, float* %20, align 4
  %99 = fcmp olt float %98, 0.000000e+00
  br i1 %99, label %100, label %103

100:                                              ; preds = %95
  %101 = load float, float* %20, align 4
  %102 = fneg float %101
  store float %102, float* %20, align 4
  br label %103

103:                                              ; preds = %100, %95
  %104 = load float, float* %21, align 4
  %105 = fcmp olt float %104, 0.000000e+00
  br i1 %105, label %106, label %109

106:                                              ; preds = %103
  %107 = load float, float* %21, align 4
  %108 = fneg float %107
  store float %108, float* %21, align 4
  br label %109

109:                                              ; preds = %106, %103
  %110 = load float, float* %20, align 4
  %111 = load float, float* %21, align 4
  %112 = fcmp ogt float %110, %111
  br i1 %112, label %113, label %115

113:                                              ; preds = %109
  %114 = load float, float* %20, align 4
  br label %117

115:                                              ; preds = %109
  %116 = load float, float* %21, align 4
  br label %117

117:                                              ; preds = %115, %113
  %118 = phi float [ %114, %113 ], [ %116, %115 ]
  %119 = load float, float* %15, align 4
  %120 = fmul float %118, %119
  %121 = fpext float %120 to double
  %122 = fcmp olt double %121, 7.500000e-01
  %123 = zext i1 %122 to i32
  store i32 %123, i32* %18, align 4
  br label %124

124:                                              ; preds = %117, %94
  br label %125

125:                                              ; preds = %124, %90
  %126 = load i32, i32* %18, align 4
  %127 = icmp ne i32 %126, 0
  br i1 %127, label %131, label %128

128:                                              ; preds = %125
  %129 = load float, float* %15, align 4
  %130 = fmul float %129, 4.096000e+03
  store float %130, float* %19, align 4
  br label %131

131:                                              ; preds = %128, %125
  %132 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %133 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %132, i32 0, i32 8
  %134 = load i32, i32* %133, align 8
  %135 = icmp ne i32 %134, 0
  br i1 %135, label %144, label %136

136:                                              ; preds = %131
  %137 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %138 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %137, i32 0, i32 4
  %139 = load %struct.subpath*, %struct.subpath** %138, align 8
  store %struct.subpath* %139, %struct.subpath** %8, align 8
  %140 = load %struct.subpath*, %struct.subpath** %8, align 8
  %141 = icmp ne %struct.subpath* %140, null
  br i1 %141, label %143, label %142

142:                                              ; preds = %136
  store i32 0, i32* %4, align 4
  br label %700

143:                                              ; preds = %136
  br label %157

144:                                              ; preds = %131
  %145 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %146 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  %147 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %146, i32 0, i32 21
  %148 = load float, float* %147, align 8
  %149 = fpext float %148 to double
  %150 = call i32 @gx_path_flatten(%struct.gx_path_s* %145, %struct.gx_path_s* %13, double %149)
  store i32 %150, i32* %9, align 4
  %151 = icmp slt i32 %150, 0
  br i1 %151, label %152, label %154

152:                                              ; preds = %144
  %153 = load i32, i32* %9, align 4
  store i32 %153, i32* %4, align 4
  br label %700

154:                                              ; preds = %144
  %155 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %13, i32 0, i32 4
  %156 = load %struct.subpath*, %struct.subpath** %155, align 8
  store %struct.subpath* %156, %struct.subpath** %8, align 8
  br label %157

157:                                              ; preds = %154, %143
  br label %158

158:                                              ; preds = %692, %157
  %159 = load %struct.subpath*, %struct.subpath** %8, align 8
  %160 = icmp ne %struct.subpath* %159, null
  br i1 %160, label %161, label %693

161:                                              ; preds = %158
  %162 = load %struct.subpath*, %struct.subpath** %8, align 8
  %163 = getelementptr inbounds %struct.subpath, %struct.subpath* %162, i32 0, i32 5
  %164 = load i32, i32* %163, align 8
  store i32 %164, i32* %22, align 4
  %165 = load %struct.subpath*, %struct.subpath** %8, align 8
  %166 = getelementptr inbounds %struct.subpath, %struct.subpath* %165, i32 0, i32 1
  %167 = load %struct.segment_s*, %struct.segment_s** %166, align 8
  %168 = bitcast %struct.segment_s* %167 to %struct.segment_s*
  store %struct.segment_s* %168, %struct.segment_s** %23, align 8
  %169 = load %struct.subpath*, %struct.subpath** %8, align 8
  %170 = getelementptr inbounds %struct.subpath, %struct.subpath* %169, i32 0, i32 3
  %171 = getelementptr inbounds %struct.timeval, %struct.timeval* %170, i32 0, i32 0
  %172 = load i64, i64* %171, align 8
  store i64 %172, i64* %24, align 8
  %173 = load %struct.subpath*, %struct.subpath** %8, align 8
  %174 = getelementptr inbounds %struct.subpath, %struct.subpath* %173, i32 0, i32 3
  %175 = getelementptr inbounds %struct.timeval, %struct.timeval* %174, i32 0, i32 1
  %176 = load i64, i64* %175, align 8
  store i64 %176, i64* %25, align 8
  store i32 0, i32* %29, align 4
  %177 = load %struct.dash_params_s*, %struct.dash_params_s** %10, align 8
  %178 = getelementptr inbounds %struct.dash_params_s, %struct.dash_params_s* %177, i32 0, i32 3
  %179 = load i32, i32* %178, align 8
  %180 = trunc i32 %179 to i8
  store i8 %180, i8* %30, align 1
  %181 = load %struct.dash_params_s*, %struct.dash_params_s** %10, align 8
  %182 = getelementptr inbounds %struct.dash_params_s, %struct.dash_params_s* %181, i32 0, i32 4
  %183 = load i32, i32* %182, align 4
  store i32 %183, i32* %31, align 4
  %184 = load %struct.dash_params_s*, %struct.dash_params_s** %10, align 8
  %185 = getelementptr inbounds %struct.dash_params_s, %struct.dash_params_s* %184, i32 0, i32 5
  %186 = load float, float* %185, align 8
  store float %186, float* %32, align 4
  store i32 0, i32* %33, align 4
  br label %187

187:                                              ; preds = %645, %161
  %188 = load i32, i32* %22, align 4
  %189 = add nsw i32 %188, -1
  store i32 %189, i32* %22, align 4
  %190 = icmp ne i32 %188, 0
  br i1 %190, label %191, label %652

191:                                              ; preds = %187
  %192 = load %struct.segment_s*, %struct.segment_s** %23, align 8
  %193 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %192, i32 0, i32 3
  %194 = getelementptr inbounds %struct.timeval, %struct.timeval* %193, i32 0, i32 0
  %195 = load i64, i64* %194, align 8
  store i64 %195, i64* %34, align 8
  %196 = load %struct.segment_s*, %struct.segment_s** %23, align 8
  %197 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %196, i32 0, i32 3
  %198 = getelementptr inbounds %struct.timeval, %struct.timeval* %197, i32 0, i32 1
  %199 = load i64, i64* %198, align 8
  store i64 %199, i64* %35, align 8
  %200 = load i64, i64* %34, align 8
  %201 = load i64, i64* %24, align 8
  %202 = icmp eq i64 %200, %201
  br i1 %202, label %203, label %208

203:                                              ; preds = %191
  %204 = load i64, i64* %35, align 8
  %205 = load i64, i64* %25, align 8
  %206 = icmp eq i64 %204, %205
  br i1 %206, label %207, label %208

207:                                              ; preds = %203
  br label %645

208:                                              ; preds = %203, %191
  %209 = load i32, i32* %18, align 4
  %210 = icmp ne i32 %209, 0
  br i1 %210, label %211, label %214

211:                                              ; preds = %208
  %212 = load i32, i32* %12, align 4
  %213 = icmp ne i32 %212, 0
  br i1 %213, label %214, label %416

214:                                              ; preds = %211, %208
  %215 = load i64, i64* %34, align 8
  %216 = load i64, i64* %24, align 8
  %217 = sub nsw i64 %215, %216
  store i64 %217, i64* %36, align 8
  %218 = load i64, i64* %35, align 8
  %219 = load i64, i64* %25, align 8
  %220 = sub nsw i64 %218, %219
  store i64 %220, i64* %37, align 8
  %221 = load i32, i32* %14, align 4
  %222 = icmp ne i32 %221, 0
  br i1 %222, label %223, label %232

223:                                              ; preds = %214
  %224 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  %225 = load i64, i64* %36, align 8
  %226 = sitofp i64 %225 to float
  %227 = fpext float %226 to double
  %228 = load i64, i64* %37, align 8
  %229 = sitofp i64 %228 to float
  %230 = fpext float %229 to double
  %231 = call i32 (%struct.gs_state_s*, double, double, %struct.gs_point_s*, ...) bitcast (i32 (%struct.gs_state_s*, double, double, %struct.gs_point_s*)* @gs_idtransform to i32 (%struct.gs_state_s*, double, double, %struct.gs_point_s*, ...)*)(%struct.gs_state_s* %224, double %227, double %230, %struct.gs_point_s* %39)
  br label %243

232:                                              ; preds = %214
  %233 = load i64, i64* %36, align 8
  %234 = sitofp i64 %233 to float
  %235 = load float, float* %16, align 4
  %236 = fdiv float %234, %235
  %237 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %39, i32 0, i32 0
  store float %236, float* %237, align 4
  %238 = load i64, i64* %37, align 8
  %239 = sitofp i64 %238 to float
  %240 = load float, float* %17, align 4
  %241 = fdiv float %239, %240
  %242 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %39, i32 0, i32 1
  store float %241, float* %242, align 4
  br label %243

243:                                              ; preds = %232, %223
  %244 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %39, i32 0, i32 0
  %245 = load float, float* %244, align 4
  %246 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %39, i32 0, i32 0
  %247 = load float, float* %246, align 4
  %248 = fmul float %245, %247
  %249 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %39, i32 0, i32 1
  %250 = load float, float* %249, align 4
  %251 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %39, i32 0, i32 1
  %252 = load float, float* %251, align 4
  %253 = fmul float %250, %252
  %254 = fadd float %248, %253
  %255 = fpext float %254 to double
  %256 = call double @sqrt(double %255) #9
  %257 = fptrunc double %256 to float
  store float %257, float* %38, align 4
  %258 = load i32, i32* %18, align 4
  %259 = icmp ne i32 %258, 0
  br i1 %259, label %405, label %260

260:                                              ; preds = %243
  %261 = load float, float* %19, align 4
  %262 = load float, float* %38, align 4
  %263 = fdiv float %261, %262
  store float %263, float* %40, align 4
  %264 = load float, float* %40, align 4
  %265 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %39, i32 0, i32 0
  %266 = load float, float* %265, align 4
  %267 = fmul float %266, %264
  store float %267, float* %265, align 4
  %268 = load float, float* %40, align 4
  %269 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %39, i32 0, i32 1
  %270 = load float, float* %269, align 4
  %271 = fmul float %270, %268
  store float %271, float* %269, align 4
  %272 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %39, i32 0, i32 1
  %273 = load float, float* %272, align 4
  %274 = load float, float* %16, align 4
  %275 = fmul float %273, %274
  %276 = fptosi float %275 to i64
  %277 = sub nsw i64 0, %276
  %278 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 2
  %279 = getelementptr inbounds %struct.timeval, %struct.timeval* %278, i32 0, i32 0
  store i64 %277, i64* %279, align 8
  %280 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %39, i32 0, i32 0
  %281 = load float, float* %280, align 4
  %282 = load float, float* %17, align 4
  %283 = fmul float %281, %282
  %284 = fptosi float %283 to i64
  %285 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 2
  %286 = getelementptr inbounds %struct.timeval, %struct.timeval* %285, i32 0, i32 1
  store i64 %284, i64* %286, align 8
  %287 = load i32, i32* %14, align 4
  %288 = icmp ne i32 %287, 0
  br i1 %288, label %289, label %314

289:                                              ; preds = %260
  %290 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %39, i32 0, i32 0
  %291 = load float, float* %290, align 4
  %292 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  %293 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %292, i32 0, i32 2
  %294 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %293, i32 0, i32 4
  %295 = load float, float* %294, align 8
  %296 = fmul float %291, %295
  %297 = fptosi float %296 to i64
  %298 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 2
  %299 = getelementptr inbounds %struct.timeval, %struct.timeval* %298, i32 0, i32 0
  %300 = load i64, i64* %299, align 8
  %301 = add nsw i64 %300, %297
  store i64 %301, i64* %299, align 8
  %302 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %39, i32 0, i32 1
  %303 = load float, float* %302, align 4
  %304 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  %305 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %304, i32 0, i32 2
  %306 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %305, i32 0, i32 2
  %307 = load float, float* %306, align 8
  %308 = fmul float %303, %307
  %309 = fptosi float %308 to i64
  %310 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 2
  %311 = getelementptr inbounds %struct.timeval, %struct.timeval* %310, i32 0, i32 1
  %312 = load i64, i64* %311, align 8
  %313 = sub nsw i64 %312, %309
  store i64 %313, i64* %311, align 8
  br label %314

314:                                              ; preds = %289, %260
  %315 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 2
  %316 = getelementptr inbounds %struct.timeval, %struct.timeval* %315, i32 0, i32 0
  %317 = load i64, i64* %316, align 8
  %318 = icmp slt i64 %317, 0
  br i1 %318, label %319, label %324

319:                                              ; preds = %314
  %320 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 2
  %321 = getelementptr inbounds %struct.timeval, %struct.timeval* %320, i32 0, i32 0
  %322 = load i64, i64* %321, align 8
  %323 = sub nsw i64 0, %322
  br label %328

324:                                              ; preds = %314
  %325 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 2
  %326 = getelementptr inbounds %struct.timeval, %struct.timeval* %325, i32 0, i32 0
  %327 = load i64, i64* %326, align 8
  br label %328

328:                                              ; preds = %324, %319
  %329 = phi i64 [ %323, %319 ], [ %327, %324 ]
  %330 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 2
  %331 = getelementptr inbounds %struct.timeval, %struct.timeval* %330, i32 0, i32 1
  %332 = load i64, i64* %331, align 8
  %333 = icmp slt i64 %332, 0
  br i1 %333, label %334, label %339

334:                                              ; preds = %328
  %335 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 2
  %336 = getelementptr inbounds %struct.timeval, %struct.timeval* %335, i32 0, i32 1
  %337 = load i64, i64* %336, align 8
  %338 = sub nsw i64 0, %337
  br label %343

339:                                              ; preds = %328
  %340 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 2
  %341 = getelementptr inbounds %struct.timeval, %struct.timeval* %340, i32 0, i32 1
  %342 = load i64, i64* %341, align 8
  br label %343

343:                                              ; preds = %339, %334
  %344 = phi i64 [ %338, %334 ], [ %342, %339 ]
  %345 = add nsw i64 %329, %344
  %346 = icmp slt i64 %345, 3072
  %347 = zext i1 %346 to i32
  %348 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 4
  store i32 %347, i32* %348, align 8
  %349 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 4
  %350 = load i32, i32* %349, align 8
  %351 = icmp ne i32 %350, 0
  br i1 %351, label %352, label %361

352:                                              ; preds = %343
  %353 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 2
  %354 = getelementptr inbounds %struct.timeval, %struct.timeval* %353, i32 0, i32 1
  store i64 0, i64* %354, align 8
  %355 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 2
  %356 = getelementptr inbounds %struct.timeval, %struct.timeval* %355, i32 0, i32 0
  store i64 0, i64* %356, align 8
  %357 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 3
  %358 = getelementptr inbounds %struct.timeval, %struct.timeval* %357, i32 0, i32 1
  store i64 0, i64* %358, align 8
  %359 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 3
  %360 = getelementptr inbounds %struct.timeval, %struct.timeval* %359, i32 0, i32 0
  store i64 0, i64* %360, align 8
  br label %404

361:                                              ; preds = %343
  %362 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %39, i32 0, i32 0
  %363 = load float, float* %362, align 4
  %364 = load float, float* %16, align 4
  %365 = fmul float %363, %364
  %366 = fptosi float %365 to i64
  %367 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 3
  %368 = getelementptr inbounds %struct.timeval, %struct.timeval* %367, i32 0, i32 0
  store i64 %366, i64* %368, align 8
  %369 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %39, i32 0, i32 1
  %370 = load float, float* %369, align 4
  %371 = load float, float* %17, align 4
  %372 = fmul float %370, %371
  %373 = fptosi float %372 to i64
  %374 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 3
  %375 = getelementptr inbounds %struct.timeval, %struct.timeval* %374, i32 0, i32 1
  store i64 %373, i64* %375, align 8
  %376 = load i32, i32* %14, align 4
  %377 = icmp ne i32 %376, 0
  br i1 %377, label %378, label %403

378:                                              ; preds = %361
  %379 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %39, i32 0, i32 1
  %380 = load float, float* %379, align 4
  %381 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  %382 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %381, i32 0, i32 2
  %383 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %382, i32 0, i32 4
  %384 = load float, float* %383, align 8
  %385 = fmul float %380, %384
  %386 = fptosi float %385 to i64
  %387 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 3
  %388 = getelementptr inbounds %struct.timeval, %struct.timeval* %387, i32 0, i32 0
  %389 = load i64, i64* %388, align 8
  %390 = add nsw i64 %389, %386
  store i64 %390, i64* %388, align 8
  %391 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %39, i32 0, i32 0
  %392 = load float, float* %391, align 4
  %393 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  %394 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %393, i32 0, i32 2
  %395 = getelementptr inbounds %struct.gs_matrix_fixed_s, %struct.gs_matrix_fixed_s* %394, i32 0, i32 2
  %396 = load float, float* %395, align 8
  %397 = fmul float %392, %396
  %398 = fptosi float %397 to i64
  %399 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 3
  %400 = getelementptr inbounds %struct.timeval, %struct.timeval* %399, i32 0, i32 1
  %401 = load i64, i64* %400, align 8
  %402 = add nsw i64 %401, %398
  store i64 %402, i64* %400, align 8
  br label %403

403:                                              ; preds = %378, %361
  br label %404

404:                                              ; preds = %403, %352
  br label %415

405:                                              ; preds = %243
  %406 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 2
  %407 = getelementptr inbounds %struct.timeval, %struct.timeval* %406, i32 0, i32 1
  store i64 0, i64* %407, align 8
  %408 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 2
  %409 = getelementptr inbounds %struct.timeval, %struct.timeval* %408, i32 0, i32 0
  store i64 0, i64* %409, align 8
  %410 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 3
  %411 = getelementptr inbounds %struct.timeval, %struct.timeval* %410, i32 0, i32 1
  store i64 0, i64* %411, align 8
  %412 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 3
  %413 = getelementptr inbounds %struct.timeval, %struct.timeval* %412, i32 0, i32 0
  store i64 0, i64* %413, align 8
  %414 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 4
  store i32 1, i32* %414, align 8
  br label %415

415:                                              ; preds = %405, %404
  br label %426

416:                                              ; preds = %211
  %417 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 2
  %418 = getelementptr inbounds %struct.timeval, %struct.timeval* %417, i32 0, i32 1
  store i64 0, i64* %418, align 8
  %419 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 2
  %420 = getelementptr inbounds %struct.timeval, %struct.timeval* %419, i32 0, i32 0
  store i64 0, i64* %420, align 8
  %421 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 3
  %422 = getelementptr inbounds %struct.timeval, %struct.timeval* %421, i32 0, i32 1
  store i64 0, i64* %422, align 8
  %423 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 3
  %424 = getelementptr inbounds %struct.timeval, %struct.timeval* %423, i32 0, i32 0
  store i64 0, i64* %424, align 8
  %425 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 4
  store i32 1, i32* %425, align 8
  br label %426

426:                                              ; preds = %416, %415
  %427 = load i32, i32* %12, align 4
  %428 = icmp ne i32 %427, 0
  br i1 %428, label %429, label %596

429:                                              ; preds = %426
  %430 = load float, float* %38, align 4
  %431 = fmul float %430, 0x3F30000000000000
  store float %431, float* %41, align 4
  %432 = load float, float* %41, align 4
  store float %432, float* %42, align 4
  %433 = load i64, i64* %36, align 8
  %434 = sitofp i64 %433 to float
  store float %434, float* %43, align 4
  %435 = load i64, i64* %37, align 8
  %436 = sitofp i64 %435 to float
  store float %436, float* %44, align 4
  br label %437

437:                                              ; preds = %533, %429
  %438 = load float, float* %42, align 4
  %439 = load float, float* %32, align 4
  %440 = fcmp ogt float %438, %439
  br i1 %440, label %441, label %541

441:                                              ; preds = %437
  %442 = load float, float* %32, align 4
  %443 = load float, float* %41, align 4
  %444 = fdiv float %442, %443
  store float %444, float* %45, align 4
  %445 = load i64, i64* %24, align 8
  %446 = load float, float* %43, align 4
  %447 = load float, float* %45, align 4
  %448 = fmul float %446, %447
  %449 = fptosi float %448 to i64
  %450 = add nsw i64 %445, %449
  store i64 %450, i64* %46, align 8
  %451 = load i64, i64* %25, align 8
  %452 = load float, float* %44, align 4
  %453 = load float, float* %45, align 4
  %454 = fmul float %452, %453
  %455 = fptosi float %454 to i64
  %456 = add nsw i64 %451, %455
  store i64 %456, i64* %47, align 8
  %457 = load i8, i8* %30, align 1
  %458 = icmp ne i8 %457, 0
  br i1 %458, label %459, label %507

459:                                              ; preds = %441
  %460 = load i64, i64* %24, align 8
  %461 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 0
  %462 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %461, i32 0, i32 0
  %463 = getelementptr inbounds %struct.timeval, %struct.timeval* %462, i32 0, i32 0
  store i64 %460, i64* %463, align 8
  %464 = load i64, i64* %25, align 8
  %465 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 0
  %466 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %465, i32 0, i32 0
  %467 = getelementptr inbounds %struct.timeval, %struct.timeval* %466, i32 0, i32 1
  store i64 %464, i64* %467, align 8
  %468 = load i64, i64* %46, align 8
  %469 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 1
  %470 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %469, i32 0, i32 0
  %471 = getelementptr inbounds %struct.timeval, %struct.timeval* %470, i32 0, i32 0
  store i64 %468, i64* %471, align 8
  %472 = load i64, i64* %47, align 8
  %473 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 1
  %474 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %473, i32 0, i32 0
  %475 = getelementptr inbounds %struct.timeval, %struct.timeval* %474, i32 0, i32 1
  store i64 %472, i64* %475, align 8
  %476 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 4
  %477 = load i32, i32* %476, align 8
  %478 = icmp ne i32 %477, 0
  br i1 %478, label %479, label %480

479:                                              ; preds = %459
  br label %482

480:                                              ; preds = %459
  %481 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  call void @compute_caps(%struct.partial_line_s* %26, %struct.gs_state_s* %481)
  br label %482

482:                                              ; preds = %480, %479
  %483 = phi i32 [ 0, %479 ], [ 0, %480 ]
  %484 = load i32, i32* %29, align 4
  %485 = add nsw i32 %484, 1
  store i32 %485, i32* %29, align 4
  %486 = icmp eq i32 %484, 0
  br i1 %486, label %487, label %490

487:                                              ; preds = %482
  %488 = bitcast %struct.partial_line_s* %28 to i8*
  %489 = bitcast %struct.partial_line_s* %26 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %488, i8* align 8 %489, i64 168, i1 false)
  br label %491

490:                                              ; preds = %482
  br label %491

491:                                              ; preds = %490, %487
  %492 = phi i32 [ 0, %487 ], [ 0, %490 ]
  %493 = load i32, i32* %33, align 4
  %494 = add nsw i32 %493, 1
  store i32 %494, i32* %33, align 4
  %495 = icmp ne i32 %493, 0
  br i1 %495, label %496, label %502

496:                                              ; preds = %491
  %497 = load i32 (i32, %struct.partial_line_s*, %struct.partial_line_s*, %struct.gs_state_s*)*, i32 (i32, %struct.partial_line_s*, %struct.partial_line_s*, %struct.gs_state_s*)** %6, align 8
  %498 = load i32, i32* %33, align 4
  %499 = sub nsw i32 %498, 2
  %500 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  %501 = call i32 %497(i32 %499, %struct.partial_line_s* %27, %struct.partial_line_s* %26, %struct.gs_state_s* %500)
  br label %503

502:                                              ; preds = %491
  br label %503

503:                                              ; preds = %502, %496
  %504 = phi i32 [ %501, %496 ], [ 0, %502 ]
  %505 = bitcast %struct.partial_line_s* %27 to i8*
  %506 = bitcast %struct.partial_line_s* %26 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %505, i8* align 8 %506, i64 168, i1 false)
  br label %507

507:                                              ; preds = %503, %441
  %508 = load float, float* %32, align 4
  %509 = load float, float* %42, align 4
  %510 = fsub float %509, %508
  store float %510, float* %42, align 4
  %511 = load i8, i8* %30, align 1
  %512 = icmp ne i8 %511, 0
  %513 = xor i1 %512, true
  %514 = zext i1 %513 to i32
  %515 = trunc i32 %514 to i8
  store i8 %515, i8* %30, align 1
  %516 = icmp ne i8 %515, 0
  br i1 %516, label %527, label %517

517:                                              ; preds = %507
  %518 = load i32, i32* %33, align 4
  %519 = icmp ne i32 %518, 0
  br i1 %519, label %520, label %526

520:                                              ; preds = %517
  %521 = load i32 (i32, %struct.partial_line_s*, %struct.partial_line_s*, %struct.gs_state_s*)*, i32 (i32, %struct.partial_line_s*, %struct.partial_line_s*, %struct.gs_state_s*)** %6, align 8
  %522 = load i32, i32* %33, align 4
  %523 = sub nsw i32 %522, 1
  %524 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  %525 = call i32 %521(i32 %523, %struct.partial_line_s* %27, %struct.partial_line_s* null, %struct.gs_state_s* %524)
  store i32 0, i32* %33, align 4
  br label %526

526:                                              ; preds = %520, %517
  br label %527

527:                                              ; preds = %526, %507
  %528 = load i32, i32* %31, align 4
  %529 = add nsw i32 %528, 1
  store i32 %529, i32* %31, align 4
  %530 = load i32, i32* %12, align 4
  %531 = icmp eq i32 %529, %530
  br i1 %531, label %532, label %533

532:                                              ; preds = %527
  store i32 0, i32* %31, align 4
  br label %533

533:                                              ; preds = %532, %527
  %534 = load float*, float** %11, align 8
  %535 = load i32, i32* %31, align 4
  %536 = sext i32 %535 to i64
  %537 = getelementptr inbounds float, float* %534, i64 %536
  %538 = load float, float* %537, align 4
  store float %538, float* %32, align 4
  %539 = load i64, i64* %46, align 8
  store i64 %539, i64* %24, align 8
  %540 = load i64, i64* %47, align 8
  store i64 %540, i64* %25, align 8
  br label %437

541:                                              ; preds = %437
  %542 = load i8, i8* %30, align 1
  %543 = icmp ne i8 %542, 0
  br i1 %543, label %544, label %592

544:                                              ; preds = %541
  %545 = load i64, i64* %24, align 8
  %546 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 0
  %547 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %546, i32 0, i32 0
  %548 = getelementptr inbounds %struct.timeval, %struct.timeval* %547, i32 0, i32 0
  store i64 %545, i64* %548, align 8
  %549 = load i64, i64* %25, align 8
  %550 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 0
  %551 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %550, i32 0, i32 0
  %552 = getelementptr inbounds %struct.timeval, %struct.timeval* %551, i32 0, i32 1
  store i64 %549, i64* %552, align 8
  %553 = load i64, i64* %34, align 8
  %554 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 1
  %555 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %554, i32 0, i32 0
  %556 = getelementptr inbounds %struct.timeval, %struct.timeval* %555, i32 0, i32 0
  store i64 %553, i64* %556, align 8
  %557 = load i64, i64* %35, align 8
  %558 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 1
  %559 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %558, i32 0, i32 0
  %560 = getelementptr inbounds %struct.timeval, %struct.timeval* %559, i32 0, i32 1
  store i64 %557, i64* %560, align 8
  %561 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 4
  %562 = load i32, i32* %561, align 8
  %563 = icmp ne i32 %562, 0
  br i1 %563, label %564, label %565

564:                                              ; preds = %544
  br label %567

565:                                              ; preds = %544
  %566 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  call void @compute_caps(%struct.partial_line_s* %26, %struct.gs_state_s* %566)
  br label %567

567:                                              ; preds = %565, %564
  %568 = phi i32 [ 0, %564 ], [ 0, %565 ]
  %569 = load i32, i32* %29, align 4
  %570 = add nsw i32 %569, 1
  store i32 %570, i32* %29, align 4
  %571 = icmp eq i32 %569, 0
  br i1 %571, label %572, label %575

572:                                              ; preds = %567
  %573 = bitcast %struct.partial_line_s* %28 to i8*
  %574 = bitcast %struct.partial_line_s* %26 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %573, i8* align 8 %574, i64 168, i1 false)
  br label %576

575:                                              ; preds = %567
  br label %576

576:                                              ; preds = %575, %572
  %577 = phi i32 [ 0, %572 ], [ 0, %575 ]
  %578 = load i32, i32* %33, align 4
  %579 = add nsw i32 %578, 1
  store i32 %579, i32* %33, align 4
  %580 = icmp ne i32 %578, 0
  br i1 %580, label %581, label %587

581:                                              ; preds = %576
  %582 = load i32 (i32, %struct.partial_line_s*, %struct.partial_line_s*, %struct.gs_state_s*)*, i32 (i32, %struct.partial_line_s*, %struct.partial_line_s*, %struct.gs_state_s*)** %6, align 8
  %583 = load i32, i32* %33, align 4
  %584 = sub nsw i32 %583, 2
  %585 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  %586 = call i32 %582(i32 %584, %struct.partial_line_s* %27, %struct.partial_line_s* %26, %struct.gs_state_s* %585)
  br label %588

587:                                              ; preds = %576
  br label %588

588:                                              ; preds = %587, %581
  %589 = phi i32 [ %586, %581 ], [ 0, %587 ]
  %590 = bitcast %struct.partial_line_s* %27 to i8*
  %591 = bitcast %struct.partial_line_s* %26 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %590, i8* align 8 %591, i64 168, i1 false)
  br label %592

592:                                              ; preds = %588, %541
  %593 = load float, float* %42, align 4
  %594 = load float, float* %32, align 4
  %595 = fsub float %594, %593
  store float %595, float* %32, align 4
  br label %644

596:                                              ; preds = %426
  %597 = load i64, i64* %24, align 8
  %598 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 0
  %599 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %598, i32 0, i32 0
  %600 = getelementptr inbounds %struct.timeval, %struct.timeval* %599, i32 0, i32 0
  store i64 %597, i64* %600, align 8
  %601 = load i64, i64* %25, align 8
  %602 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 0
  %603 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %602, i32 0, i32 0
  %604 = getelementptr inbounds %struct.timeval, %struct.timeval* %603, i32 0, i32 1
  store i64 %601, i64* %604, align 8
  %605 = load i64, i64* %34, align 8
  %606 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 1
  %607 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %606, i32 0, i32 0
  %608 = getelementptr inbounds %struct.timeval, %struct.timeval* %607, i32 0, i32 0
  store i64 %605, i64* %608, align 8
  %609 = load i64, i64* %35, align 8
  %610 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 1
  %611 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %610, i32 0, i32 0
  %612 = getelementptr inbounds %struct.timeval, %struct.timeval* %611, i32 0, i32 1
  store i64 %609, i64* %612, align 8
  %613 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 4
  %614 = load i32, i32* %613, align 8
  %615 = icmp ne i32 %614, 0
  br i1 %615, label %616, label %617

616:                                              ; preds = %596
  br label %619

617:                                              ; preds = %596
  %618 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  call void @compute_caps(%struct.partial_line_s* %26, %struct.gs_state_s* %618)
  br label %619

619:                                              ; preds = %617, %616
  %620 = phi i32 [ 0, %616 ], [ 0, %617 ]
  %621 = load i32, i32* %29, align 4
  %622 = add nsw i32 %621, 1
  store i32 %622, i32* %29, align 4
  %623 = icmp eq i32 %621, 0
  br i1 %623, label %624, label %627

624:                                              ; preds = %619
  %625 = bitcast %struct.partial_line_s* %28 to i8*
  %626 = bitcast %struct.partial_line_s* %26 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %625, i8* align 8 %626, i64 168, i1 false)
  br label %628

627:                                              ; preds = %619
  br label %628

628:                                              ; preds = %627, %624
  %629 = phi i32 [ 0, %624 ], [ 0, %627 ]
  %630 = load i32, i32* %33, align 4
  %631 = add nsw i32 %630, 1
  store i32 %631, i32* %33, align 4
  %632 = icmp ne i32 %630, 0
  br i1 %632, label %633, label %639

633:                                              ; preds = %628
  %634 = load i32 (i32, %struct.partial_line_s*, %struct.partial_line_s*, %struct.gs_state_s*)*, i32 (i32, %struct.partial_line_s*, %struct.partial_line_s*, %struct.gs_state_s*)** %6, align 8
  %635 = load i32, i32* %33, align 4
  %636 = sub nsw i32 %635, 2
  %637 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  %638 = call i32 %634(i32 %636, %struct.partial_line_s* %27, %struct.partial_line_s* %26, %struct.gs_state_s* %637)
  br label %640

639:                                              ; preds = %628
  br label %640

640:                                              ; preds = %639, %633
  %641 = phi i32 [ %638, %633 ], [ 0, %639 ]
  %642 = bitcast %struct.partial_line_s* %27 to i8*
  %643 = bitcast %struct.partial_line_s* %26 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %642, i8* align 8 %643, i64 168, i1 false)
  br label %644

644:                                              ; preds = %640, %592
  br label %645

645:                                              ; preds = %644, %207
  %646 = load %struct.segment_s*, %struct.segment_s** %23, align 8
  %647 = getelementptr inbounds %struct.segment_s, %struct.segment_s* %646, i32 0, i32 1
  %648 = load %struct.segment_s*, %struct.segment_s** %647, align 8
  %649 = bitcast %struct.segment_s* %648 to %struct.segment_s*
  store %struct.segment_s* %649, %struct.segment_s** %23, align 8
  %650 = load i64, i64* %34, align 8
  store i64 %650, i64* %24, align 8
  %651 = load i64, i64* %35, align 8
  store i64 %651, i64* %25, align 8
  br label %187

652:                                              ; preds = %187
  %653 = load i32, i32* %33, align 4
  %654 = icmp ne i32 %653, 0
  br i1 %654, label %655, label %679

655:                                              ; preds = %652
  %656 = load i32 (i32, %struct.partial_line_s*, %struct.partial_line_s*, %struct.gs_state_s*)*, i32 (i32, %struct.partial_line_s*, %struct.partial_line_s*, %struct.gs_state_s*)** %6, align 8
  %657 = load i32, i32* %33, align 4
  %658 = sub nsw i32 %657, 1
  %659 = load %struct.subpath*, %struct.subpath** %8, align 8
  %660 = getelementptr inbounds %struct.subpath, %struct.subpath* %659, i32 0, i32 7
  %661 = load i8, i8* %660, align 8
  %662 = sext i8 %661 to i32
  %663 = icmp ne i32 %662, 0
  br i1 %663, label %664, label %674

664:                                              ; preds = %655
  %665 = load i8, i8* %30, align 1
  %666 = sext i8 %665 to i32
  %667 = icmp ne i32 %666, 0
  br i1 %667, label %668, label %674

668:                                              ; preds = %664
  %669 = load %struct.dash_params_s*, %struct.dash_params_s** %10, align 8
  %670 = getelementptr inbounds %struct.dash_params_s, %struct.dash_params_s* %669, i32 0, i32 3
  %671 = load i32, i32* %670, align 8
  %672 = icmp ne i32 %671, 0
  br i1 %672, label %673, label %674

673:                                              ; preds = %668
  br label %675

674:                                              ; preds = %668, %664, %655
  br label %675

675:                                              ; preds = %674, %673
  %676 = phi %struct.partial_line_s* [ %28, %673 ], [ null, %674 ]
  %677 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  %678 = call i32 %656(i32 %658, %struct.partial_line_s* %27, %struct.partial_line_s* %676, %struct.gs_state_s* %677)
  br label %679

679:                                              ; preds = %675, %652
  %680 = load %struct.segment_s*, %struct.segment_s** %23, align 8
  %681 = bitcast %struct.segment_s* %680 to %struct.subpath*
  store %struct.subpath* %681, %struct.subpath** %8, align 8
  %682 = load %struct.gx_path_s*, %struct.gx_path_s** @stroke_path, align 8
  %683 = icmp eq %struct.gx_path_s* %682, @stroke_path_body
  br i1 %683, label %684, label %692

684:                                              ; preds = %679
  %685 = load %struct.gx_path_s*, %struct.gx_path_s** @stroke_path, align 8
  %686 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  %687 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %686, i32 0, i32 14
  %688 = load %struct.gx_device_color_s*, %struct.gx_device_color_s** %687, align 8
  %689 = load %struct.gs_state_s*, %struct.gs_state_s** %7, align 8
  %690 = call i32 (%struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, i32, i64, ...) bitcast (i32 (%struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, i32, i64)* @gx_fill_path to i32 (%struct.gx_path_s*, %struct.gx_device_color_s*, %struct.gs_state_s*, i32, i64, ...)*)(%struct.gx_path_s* %685, %struct.gx_device_color_s* %688, %struct.gs_state_s* %689, i32 -1, i64 0)
  %691 = load %struct.gx_path_s*, %struct.gx_path_s** @stroke_path, align 8
  call void @gx_path_release(%struct.gx_path_s* %691)
  store %struct.gx_path_s* null, %struct.gx_path_s** @stroke_path, align 8
  br label %692

692:                                              ; preds = %684, %679
  br label %158

693:                                              ; preds = %158
  %694 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  %695 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %694, i32 0, i32 8
  %696 = load i32, i32* %695, align 8
  %697 = icmp ne i32 %696, 0
  br i1 %697, label %698, label %699

698:                                              ; preds = %693
  call void @gx_path_release(%struct.gx_path_s* %13)
  br label %699

699:                                              ; preds = %698, %693
  store i32 0, i32* %4, align 4
  br label %700

700:                                              ; preds = %699, %152, %142
  %701 = load i32, i32* %4, align 4
  ret i32 %701
}

; Function Attrs: noinline nounwind uwtable
define internal void @compute_caps(%struct.partial_line_s* %0, %struct.gs_state_s* %1) #0 {
  %3 = alloca %struct.partial_line_s*, align 8
  %4 = alloca %struct.gs_state_s*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store %struct.partial_line_s* %0, %struct.partial_line_s** %3, align 8
  store %struct.gs_state_s* %1, %struct.gs_state_s** %4, align 8
  %7 = load %struct.partial_line_s*, %struct.partial_line_s** %3, align 8
  %8 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %7, i32 0, i32 2
  %9 = getelementptr inbounds %struct.timeval, %struct.timeval* %8, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %5, align 8
  %11 = load %struct.partial_line_s*, %struct.partial_line_s** %3, align 8
  %12 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %11, i32 0, i32 2
  %13 = getelementptr inbounds %struct.timeval, %struct.timeval* %12, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  store i64 %14, i64* %6, align 8
  %15 = load %struct.partial_line_s*, %struct.partial_line_s** %3, align 8
  %16 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %15, i32 0, i32 0
  %17 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %16, i32 0, i32 0
  %18 = getelementptr inbounds %struct.timeval, %struct.timeval* %17, i32 0, i32 0
  %19 = load i64, i64* %18, align 8
  %20 = load i64, i64* %5, align 8
  %21 = sub nsw i64 %19, %20
  %22 = load %struct.partial_line_s*, %struct.partial_line_s** %3, align 8
  %23 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %22, i32 0, i32 0
  %24 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %23, i32 0, i32 1
  %25 = getelementptr inbounds %struct.timeval, %struct.timeval* %24, i32 0, i32 0
  store i64 %21, i64* %25, align 8
  %26 = load %struct.partial_line_s*, %struct.partial_line_s** %3, align 8
  %27 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %26, i32 0, i32 0
  %28 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %27, i32 0, i32 0
  %29 = getelementptr inbounds %struct.timeval, %struct.timeval* %28, i32 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = load i64, i64* %6, align 8
  %32 = sub nsw i64 %30, %31
  %33 = load %struct.partial_line_s*, %struct.partial_line_s** %3, align 8
  %34 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %33, i32 0, i32 0
  %35 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %34, i32 0, i32 1
  %36 = getelementptr inbounds %struct.timeval, %struct.timeval* %35, i32 0, i32 1
  store i64 %32, i64* %36, align 8
  %37 = load %struct.partial_line_s*, %struct.partial_line_s** %3, align 8
  %38 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %37, i32 0, i32 0
  %39 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %38, i32 0, i32 0
  %40 = getelementptr inbounds %struct.timeval, %struct.timeval* %39, i32 0, i32 0
  %41 = load i64, i64* %40, align 8
  %42 = load i64, i64* %5, align 8
  %43 = add nsw i64 %41, %42
  %44 = load %struct.partial_line_s*, %struct.partial_line_s** %3, align 8
  %45 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %44, i32 0, i32 0
  %46 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %45, i32 0, i32 2
  %47 = getelementptr inbounds %struct.timeval, %struct.timeval* %46, i32 0, i32 0
  store i64 %43, i64* %47, align 8
  %48 = load %struct.partial_line_s*, %struct.partial_line_s** %3, align 8
  %49 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %48, i32 0, i32 0
  %50 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %49, i32 0, i32 0
  %51 = getelementptr inbounds %struct.timeval, %struct.timeval* %50, i32 0, i32 1
  %52 = load i64, i64* %51, align 8
  %53 = load i64, i64* %6, align 8
  %54 = add nsw i64 %52, %53
  %55 = load %struct.partial_line_s*, %struct.partial_line_s** %3, align 8
  %56 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %55, i32 0, i32 0
  %57 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %56, i32 0, i32 2
  %58 = getelementptr inbounds %struct.timeval, %struct.timeval* %57, i32 0, i32 1
  store i64 %54, i64* %58, align 8
  %59 = load %struct.partial_line_s*, %struct.partial_line_s** %3, align 8
  %60 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %59, i32 0, i32 1
  %61 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %60, i32 0, i32 0
  %62 = getelementptr inbounds %struct.timeval, %struct.timeval* %61, i32 0, i32 0
  %63 = load i64, i64* %62, align 8
  %64 = load i64, i64* %5, align 8
  %65 = add nsw i64 %63, %64
  %66 = load %struct.partial_line_s*, %struct.partial_line_s** %3, align 8
  %67 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %66, i32 0, i32 1
  %68 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %67, i32 0, i32 1
  %69 = getelementptr inbounds %struct.timeval, %struct.timeval* %68, i32 0, i32 0
  store i64 %65, i64* %69, align 8
  %70 = load %struct.partial_line_s*, %struct.partial_line_s** %3, align 8
  %71 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %70, i32 0, i32 1
  %72 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %71, i32 0, i32 0
  %73 = getelementptr inbounds %struct.timeval, %struct.timeval* %72, i32 0, i32 1
  %74 = load i64, i64* %73, align 8
  %75 = load i64, i64* %6, align 8
  %76 = add nsw i64 %74, %75
  %77 = load %struct.partial_line_s*, %struct.partial_line_s** %3, align 8
  %78 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %77, i32 0, i32 1
  %79 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %78, i32 0, i32 1
  %80 = getelementptr inbounds %struct.timeval, %struct.timeval* %79, i32 0, i32 1
  store i64 %76, i64* %80, align 8
  %81 = load %struct.partial_line_s*, %struct.partial_line_s** %3, align 8
  %82 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %81, i32 0, i32 1
  %83 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %82, i32 0, i32 0
  %84 = getelementptr inbounds %struct.timeval, %struct.timeval* %83, i32 0, i32 0
  %85 = load i64, i64* %84, align 8
  %86 = load i64, i64* %5, align 8
  %87 = sub nsw i64 %85, %86
  %88 = load %struct.partial_line_s*, %struct.partial_line_s** %3, align 8
  %89 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %88, i32 0, i32 1
  %90 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %89, i32 0, i32 2
  %91 = getelementptr inbounds %struct.timeval, %struct.timeval* %90, i32 0, i32 0
  store i64 %87, i64* %91, align 8
  %92 = load %struct.partial_line_s*, %struct.partial_line_s** %3, align 8
  %93 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %92, i32 0, i32 1
  %94 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %93, i32 0, i32 0
  %95 = getelementptr inbounds %struct.timeval, %struct.timeval* %94, i32 0, i32 1
  %96 = load i64, i64* %95, align 8
  %97 = load i64, i64* %6, align 8
  %98 = sub nsw i64 %96, %97
  %99 = load %struct.partial_line_s*, %struct.partial_line_s** %3, align 8
  %100 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %99, i32 0, i32 1
  %101 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %100, i32 0, i32 2
  %102 = getelementptr inbounds %struct.timeval, %struct.timeval* %101, i32 0, i32 1
  store i64 %98, i64* %102, align 8
  %103 = load %struct.partial_line_s*, %struct.partial_line_s** %3, align 8
  %104 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %103, i32 0, i32 3
  %105 = getelementptr inbounds %struct.timeval, %struct.timeval* %104, i32 0, i32 0
  %106 = load i64, i64* %105, align 8
  %107 = sub nsw i64 0, %106
  %108 = load %struct.partial_line_s*, %struct.partial_line_s** %3, align 8
  %109 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %108, i32 0, i32 0
  %110 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %109, i32 0, i32 3
  %111 = getelementptr inbounds %struct.timeval, %struct.timeval* %110, i32 0, i32 0
  store i64 %107, i64* %111, align 8
  %112 = load %struct.partial_line_s*, %struct.partial_line_s** %3, align 8
  %113 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %112, i32 0, i32 3
  %114 = getelementptr inbounds %struct.timeval, %struct.timeval* %113, i32 0, i32 1
  %115 = load i64, i64* %114, align 8
  %116 = sub nsw i64 0, %115
  %117 = load %struct.partial_line_s*, %struct.partial_line_s** %3, align 8
  %118 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %117, i32 0, i32 0
  %119 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %118, i32 0, i32 3
  %120 = getelementptr inbounds %struct.timeval, %struct.timeval* %119, i32 0, i32 1
  store i64 %116, i64* %120, align 8
  %121 = load %struct.partial_line_s*, %struct.partial_line_s** %3, align 8
  %122 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %121, i32 0, i32 3
  %123 = getelementptr inbounds %struct.timeval, %struct.timeval* %122, i32 0, i32 0
  %124 = load i64, i64* %123, align 8
  %125 = load %struct.partial_line_s*, %struct.partial_line_s** %3, align 8
  %126 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %125, i32 0, i32 1
  %127 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %126, i32 0, i32 3
  %128 = getelementptr inbounds %struct.timeval, %struct.timeval* %127, i32 0, i32 0
  store i64 %124, i64* %128, align 8
  %129 = load %struct.partial_line_s*, %struct.partial_line_s** %3, align 8
  %130 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %129, i32 0, i32 3
  %131 = getelementptr inbounds %struct.timeval, %struct.timeval* %130, i32 0, i32 1
  %132 = load i64, i64* %131, align 8
  %133 = load %struct.partial_line_s*, %struct.partial_line_s** %3, align 8
  %134 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %133, i32 0, i32 1
  %135 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %134, i32 0, i32 3
  %136 = getelementptr inbounds %struct.timeval, %struct.timeval* %135, i32 0, i32 1
  store i64 %132, i64* %136, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @stroke_add(i32 %0, %struct.partial_line_s* %1, %struct.partial_line_s* %2, %struct.gs_state_s* %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca %struct.partial_line_s*, align 8
  %8 = alloca %struct.partial_line_s*, align 8
  %9 = alloca %struct.gs_state_s*, align 8
  %10 = alloca %struct.gx_path_s*, align 8
  %11 = alloca i32, align 4
  %12 = alloca %struct.timeval, align 8
  %13 = alloca %struct.timeval, align 8
  %14 = alloca float, align 4
  %15 = alloca float, align 4
  %16 = alloca float, align 4
  %17 = alloca float, align 4
  %18 = alloca float, align 4
  %19 = alloca float, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca %struct.timeval*, align 8
  %23 = alloca i64, align 8
  %24 = alloca i64, align 8
  %25 = alloca i64, align 8
  %26 = alloca i64, align 8
  %27 = alloca float, align 4
  %28 = alloca float, align 4
  %29 = alloca float, align 4
  %30 = alloca float, align 4
  %31 = alloca float, align 4
  %32 = alloca float, align 4
  %33 = alloca float, align 4
  %34 = alloca float, align 4
  %35 = alloca float, align 4
  %36 = alloca i32, align 4
  %37 = alloca i32, align 4
  store i32 %0, i32* %6, align 4
  store %struct.partial_line_s* %1, %struct.partial_line_s** %7, align 8
  store %struct.partial_line_s* %2, %struct.partial_line_s** %8, align 8
  store %struct.gs_state_s* %3, %struct.gs_state_s** %9, align 8
  %38 = load %struct.gx_path_s*, %struct.gx_path_s** @stroke_path, align 8
  store %struct.gx_path_s* %38, %struct.gx_path_s** %10, align 8
  %39 = load %struct.gx_path_s*, %struct.gx_path_s** %10, align 8
  %40 = icmp eq %struct.gx_path_s* %39, null
  br i1 %40, label %41, label %42

41:                                               ; preds = %4
  store i32 0, i32* %5, align 4
  br label %436

42:                                               ; preds = %4
  %43 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %44 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %43, i32 0, i32 4
  %45 = load i32, i32* %44, align 8
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %47, label %50

47:                                               ; preds = %42
  %48 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %49 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  call void @compute_caps(%struct.partial_line_s* %48, %struct.gs_state_s* %49)
  br label %50

50:                                               ; preds = %47, %42
  %51 = load %struct.gx_path_s*, %struct.gx_path_s** %10, align 8
  %52 = load i32, i32* %6, align 4
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %60

54:                                               ; preds = %50
  %55 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  %56 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %55, i32 0, i32 10
  %57 = load %struct.line_params_s*, %struct.line_params_s** %56, align 8
  %58 = getelementptr inbounds %struct.line_params_s, %struct.line_params_s* %57, i32 0, i32 1
  %59 = load i32, i32* %58, align 4
  br label %61

60:                                               ; preds = %50
  br label %61

61:                                               ; preds = %60, %54
  %62 = phi i32 [ %59, %54 ], [ 0, %60 ]
  %63 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %64 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %63, i32 0, i32 0
  %65 = call i32 @add_capped(%struct.gx_path_s* %51, i32 %62, i32 (%struct.gx_path_s*, i64, i64)* @gx_path_add_point, %struct.endpoint_s* %64)
  store i32 %65, i32* %11, align 4
  %66 = icmp slt i32 %65, 0
  br i1 %66, label %67, label %69

67:                                               ; preds = %61
  %68 = load i32, i32* %11, align 4
  store i32 %68, i32* %5, align 4
  br label %436

69:                                               ; preds = %61
  %70 = load %struct.partial_line_s*, %struct.partial_line_s** %8, align 8
  %71 = icmp eq %struct.partial_line_s* %70, null
  br i1 %71, label %72, label %82

72:                                               ; preds = %69
  %73 = load %struct.gx_path_s*, %struct.gx_path_s** %10, align 8
  %74 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  %75 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %74, i32 0, i32 10
  %76 = load %struct.line_params_s*, %struct.line_params_s** %75, align 8
  %77 = getelementptr inbounds %struct.line_params_s, %struct.line_params_s* %76, i32 0, i32 1
  %78 = load i32, i32* %77, align 4
  %79 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %80 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %79, i32 0, i32 1
  %81 = call i32 @add_capped(%struct.gx_path_s* %73, i32 %78, i32 (%struct.gx_path_s*, i64, i64)* @gx_path_add_line, %struct.endpoint_s* %80)
  store i32 %81, i32* %11, align 4
  br label %426

82:                                               ; preds = %69
  %83 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  %84 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %83, i32 0, i32 10
  %85 = load %struct.line_params_s*, %struct.line_params_s** %84, align 8
  %86 = getelementptr inbounds %struct.line_params_s, %struct.line_params_s* %85, i32 0, i32 2
  %87 = load i32, i32* %86, align 8
  %88 = icmp eq i32 %87, 1
  br i1 %88, label %89, label %94

89:                                               ; preds = %82
  %90 = load %struct.gx_path_s*, %struct.gx_path_s** %10, align 8
  %91 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %92 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %91, i32 0, i32 1
  %93 = call i32 @add_capped(%struct.gx_path_s* %90, i32 1, i32 (%struct.gx_path_s*, i64, i64)* @gx_path_add_line, %struct.endpoint_s* %92)
  store i32 %93, i32* %11, align 4
  br label %425

94:                                               ; preds = %82
  %95 = load %struct.partial_line_s*, %struct.partial_line_s** %8, align 8
  %96 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %95, i32 0, i32 4
  %97 = load i32, i32* %96, align 8
  %98 = icmp ne i32 %97, 0
  br i1 %98, label %99, label %104

99:                                               ; preds = %94
  %100 = load %struct.gx_path_s*, %struct.gx_path_s** %10, align 8
  %101 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %102 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %101, i32 0, i32 1
  %103 = call i32 @add_capped(%struct.gx_path_s* %100, i32 0, i32 (%struct.gx_path_s*, i64, i64)* @gx_path_add_line, %struct.endpoint_s* %102)
  store i32 %103, i32* %11, align 4
  br label %424

104:                                              ; preds = %94
  %105 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %106 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %105, i32 0, i32 2
  %107 = getelementptr inbounds %struct.timeval, %struct.timeval* %106, i32 0, i32 0
  %108 = load i64, i64* %107, align 8
  %109 = sitofp i64 %108 to float
  store float %109, float* %14, align 4
  %110 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %111 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %110, i32 0, i32 2
  %112 = getelementptr inbounds %struct.timeval, %struct.timeval* %111, i32 0, i32 1
  %113 = load i64, i64* %112, align 8
  %114 = sitofp i64 %113 to float
  store float %114, float* %15, align 4
  %115 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %116 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %115, i32 0, i32 1
  %117 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %116, i32 0, i32 3
  %118 = getelementptr inbounds %struct.timeval, %struct.timeval* %117, i32 0, i32 0
  %119 = load i64, i64* %118, align 8
  %120 = sitofp i64 %119 to float
  store float %120, float* %16, align 4
  %121 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %122 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %121, i32 0, i32 1
  %123 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %122, i32 0, i32 3
  %124 = getelementptr inbounds %struct.timeval, %struct.timeval* %123, i32 0, i32 1
  %125 = load i64, i64* %124, align 8
  %126 = sitofp i64 %125 to float
  store float %126, float* %17, align 4
  %127 = load %struct.partial_line_s*, %struct.partial_line_s** %8, align 8
  %128 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %127, i32 0, i32 2
  %129 = getelementptr inbounds %struct.timeval, %struct.timeval* %128, i32 0, i32 0
  %130 = load i64, i64* %129, align 8
  %131 = sitofp i64 %130 to float
  store float %131, float* %18, align 4
  %132 = load %struct.partial_line_s*, %struct.partial_line_s** %8, align 8
  %133 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %132, i32 0, i32 2
  %134 = getelementptr inbounds %struct.timeval, %struct.timeval* %133, i32 0, i32 1
  %135 = load i64, i64* %134, align 8
  %136 = sitofp i64 %135 to float
  store float %136, float* %19, align 4
  %137 = load float, float* %16, align 4
  %138 = load float, float* %15, align 4
  %139 = fmul float %137, %138
  %140 = load float, float* %17, align 4
  %141 = load float, float* %14, align 4
  %142 = fmul float %140, %141
  %143 = fcmp oge float %139, %142
  %144 = zext i1 %143 to i32
  store i32 %144, i32* %20, align 4
  %145 = load float, float* %18, align 4
  %146 = load float, float* %15, align 4
  %147 = fmul float %145, %146
  %148 = load float, float* %19, align 4
  %149 = load float, float* %14, align 4
  %150 = fmul float %148, %149
  %151 = fcmp oge float %147, %150
  %152 = zext i1 %151 to i32
  store i32 %152, i32* %21, align 4
  %153 = load i32, i32* %20, align 4
  %154 = load i32, i32* %21, align 4
  %155 = icmp eq i32 %153, %154
  br i1 %155, label %156, label %160

156:                                              ; preds = %104
  %157 = load %struct.partial_line_s*, %struct.partial_line_s** %8, align 8
  %158 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %157, i32 0, i32 0
  %159 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %158, i32 0, i32 2
  br label %164

160:                                              ; preds = %104
  %161 = load %struct.partial_line_s*, %struct.partial_line_s** %8, align 8
  %162 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %161, i32 0, i32 0
  %163 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %162, i32 0, i32 1
  br label %164

164:                                              ; preds = %160, %156
  %165 = phi %struct.timeval* [ %159, %156 ], [ %163, %160 ]
  store %struct.timeval* %165, %struct.timeval** %22, align 8
  %166 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %167 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %166, i32 0, i32 1
  %168 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %167, i32 0, i32 1
  %169 = getelementptr inbounds %struct.timeval, %struct.timeval* %168, i32 0, i32 0
  %170 = load i64, i64* %169, align 8
  %171 = getelementptr inbounds %struct.timeval, %struct.timeval* %12, i32 0, i32 0
  store i64 %170, i64* %171, align 8
  %172 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %173 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %172, i32 0, i32 1
  %174 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %173, i32 0, i32 1
  %175 = getelementptr inbounds %struct.timeval, %struct.timeval* %174, i32 0, i32 1
  %176 = load i64, i64* %175, align 8
  %177 = getelementptr inbounds %struct.timeval, %struct.timeval* %12, i32 0, i32 1
  store i64 %176, i64* %177, align 8
  %178 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %179 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %178, i32 0, i32 1
  %180 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %179, i32 0, i32 2
  %181 = getelementptr inbounds %struct.timeval, %struct.timeval* %180, i32 0, i32 0
  %182 = load i64, i64* %181, align 8
  %183 = getelementptr inbounds %struct.timeval, %struct.timeval* %13, i32 0, i32 0
  store i64 %182, i64* %183, align 8
  %184 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %185 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %184, i32 0, i32 1
  %186 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %185, i32 0, i32 2
  %187 = getelementptr inbounds %struct.timeval, %struct.timeval* %186, i32 0, i32 1
  %188 = load i64, i64* %187, align 8
  %189 = getelementptr inbounds %struct.timeval, %struct.timeval* %13, i32 0, i32 1
  store i64 %188, i64* %189, align 8
  %190 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  %191 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %190, i32 0, i32 10
  %192 = load %struct.line_params_s*, %struct.line_params_s** %191, align 8
  %193 = getelementptr inbounds %struct.line_params_s, %struct.line_params_s* %192, i32 0, i32 2
  %194 = load i32, i32* %193, align 8
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %196, label %395

196:                                              ; preds = %164
  %197 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %198 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %197, i32 0, i32 1
  %199 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %198, i32 0, i32 3
  %200 = getelementptr inbounds %struct.timeval, %struct.timeval* %199, i32 0, i32 0
  %201 = load i64, i64* %200, align 8
  store i64 %201, i64* %23, align 8
  %202 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %203 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %202, i32 0, i32 1
  %204 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %203, i32 0, i32 3
  %205 = getelementptr inbounds %struct.timeval, %struct.timeval* %204, i32 0, i32 1
  %206 = load i64, i64* %205, align 8
  store i64 %206, i64* %24, align 8
  %207 = load %struct.partial_line_s*, %struct.partial_line_s** %8, align 8
  %208 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %207, i32 0, i32 1
  %209 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %208, i32 0, i32 3
  %210 = getelementptr inbounds %struct.timeval, %struct.timeval* %209, i32 0, i32 0
  %211 = load i64, i64* %210, align 8
  store i64 %211, i64* %25, align 8
  %212 = load %struct.partial_line_s*, %struct.partial_line_s** %8, align 8
  %213 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %212, i32 0, i32 1
  %214 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %213, i32 0, i32 3
  %215 = getelementptr inbounds %struct.timeval, %struct.timeval* %214, i32 0, i32 1
  %216 = load i64, i64* %215, align 8
  store i64 %216, i64* %26, align 8
  %217 = load %struct.gs_state_s*, %struct.gs_state_s** %9, align 8
  %218 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %217, i32 0, i32 10
  %219 = load %struct.line_params_s*, %struct.line_params_s** %218, align 8
  %220 = getelementptr inbounds %struct.line_params_s, %struct.line_params_s* %219, i32 0, i32 4
  %221 = load float, float* %220, align 8
  store float %221, float* %33, align 4
  %222 = load i64, i64* %23, align 8
  %223 = icmp slt i64 %222, 0
  br i1 %223, label %224, label %229

224:                                              ; preds = %196
  %225 = load i64, i64* %23, align 8
  %226 = sub nsw i64 0, %225
  store i64 %226, i64* %23, align 8
  %227 = load i64, i64* %25, align 8
  %228 = sub nsw i64 0, %227
  store i64 %228, i64* %25, align 8
  br label %229

229:                                              ; preds = %224, %196
  %230 = load i64, i64* %24, align 8
  %231 = icmp slt i64 %230, 0
  br i1 %231, label %232, label %237

232:                                              ; preds = %229
  %233 = load i64, i64* %24, align 8
  %234 = sub nsw i64 0, %233
  store i64 %234, i64* %24, align 8
  %235 = load i64, i64* %26, align 8
  %236 = sub nsw i64 0, %235
  store i64 %236, i64* %26, align 8
  br label %237

237:                                              ; preds = %232, %229
  %238 = load i64, i64* %23, align 8
  %239 = sitofp i64 %238 to float
  store float %239, float* %27, align 4
  %240 = load i64, i64* %24, align 8
  %241 = sitofp i64 %240 to float
  store float %241, float* %28, align 4
  %242 = load i64, i64* %25, align 8
  %243 = sitofp i64 %242 to float
  store float %243, float* %29, align 4
  %244 = load i64, i64* %26, align 8
  %245 = sitofp i64 %244 to float
  store float %245, float* %30, align 4
  %246 = load float, float* %29, align 4
  %247 = load float, float* %28, align 4
  %248 = fmul float %246, %247
  %249 = load float, float* %27, align 4
  %250 = load float, float* %30, align 4
  %251 = fmul float %249, %250
  %252 = fsub float %248, %251
  store float %252, float* %31, align 4
  %253 = load float, float* %27, align 4
  %254 = load float, float* %29, align 4
  %255 = fmul float %253, %254
  %256 = load float, float* %28, align 4
  %257 = load float, float* %30, align 4
  %258 = fmul float %256, %257
  %259 = fadd float %255, %258
  store float %259, float* %32, align 4
  %260 = load i64, i64* %25, align 8
  %261 = icmp sge i64 %260, 0
  br i1 %261, label %262, label %290

262:                                              ; preds = %237
  %263 = load i64, i64* %26, align 8
  %264 = icmp sge i64 %263, 0
  br i1 %264, label %265, label %278

265:                                              ; preds = %262
  %266 = load float, float* %31, align 4
  %267 = fcmp ogt float %266, 0.000000e+00
  br i1 %267, label %268, label %271

268:                                              ; preds = %265
  %269 = load float, float* %31, align 4
  %270 = fneg float %269
  store float %270, float* %31, align 4
  br label %271

271:                                              ; preds = %268, %265
  %272 = load float, float* %32, align 4
  %273 = fcmp olt float %272, 0.000000e+00
  br i1 %273, label %274, label %277

274:                                              ; preds = %271
  %275 = load float, float* %32, align 4
  %276 = fneg float %275
  store float %276, float* %32, align 4
  br label %277

277:                                              ; preds = %274, %271
  br label %289

278:                                              ; preds = %262
  %279 = load float, float* %31, align 4
  %280 = fneg float %279
  store float %280, float* %31, align 4
  %281 = load float, float* %32, align 4
  %282 = fcmp olt float %281, 0.000000e+00
  br i1 %282, label %283, label %288

283:                                              ; preds = %278
  %284 = load float, float* %31, align 4
  %285 = fneg float %284
  store float %285, float* %31, align 4
  %286 = load float, float* %32, align 4
  %287 = fneg float %286
  store float %287, float* %32, align 4
  br label %288

288:                                              ; preds = %283, %278
  br label %289

289:                                              ; preds = %288, %277
  br label %316

290:                                              ; preds = %237
  %291 = load i64, i64* %26, align 8
  %292 = icmp sge i64 %291, 0
  br i1 %292, label %293, label %302

293:                                              ; preds = %290
  %294 = load float, float* %32, align 4
  %295 = fcmp olt float %294, 0.000000e+00
  br i1 %295, label %296, label %301

296:                                              ; preds = %293
  %297 = load float, float* %31, align 4
  %298 = fneg float %297
  store float %298, float* %31, align 4
  %299 = load float, float* %32, align 4
  %300 = fneg float %299
  store float %300, float* %32, align 4
  br label %301

301:                                              ; preds = %296, %293
  br label %315

302:                                              ; preds = %290
  %303 = load float, float* %31, align 4
  %304 = fcmp olt float %303, 0.000000e+00
  br i1 %304, label %305, label %308

305:                                              ; preds = %302
  %306 = load float, float* %31, align 4
  %307 = fneg float %306
  store float %307, float* %31, align 4
  br label %308

308:                                              ; preds = %305, %302
  %309 = load float, float* %32, align 4
  %310 = fcmp olt float %309, 0.000000e+00
  br i1 %310, label %311, label %314

311:                                              ; preds = %308
  %312 = load float, float* %32, align 4
  %313 = fneg float %312
  store float %313, float* %32, align 4
  br label %314

314:                                              ; preds = %311, %308
  br label %315

315:                                              ; preds = %314, %301
  br label %316

316:                                              ; preds = %315, %289
  %317 = load float, float* %31, align 4
  %318 = fcmp oge float %317, 0.000000e+00
  br i1 %318, label %319, label %328

319:                                              ; preds = %316
  %320 = load float, float* %33, align 4
  %321 = fcmp ogt float %320, 0.000000e+00
  br i1 %321, label %322, label %394

322:                                              ; preds = %319
  %323 = load float, float* %31, align 4
  %324 = load float, float* %32, align 4
  %325 = load float, float* %33, align 4
  %326 = fmul float %324, %325
  %327 = fcmp oge float %323, %326
  br i1 %327, label %337, label %394

328:                                              ; preds = %316
  %329 = load float, float* %33, align 4
  %330 = fcmp ogt float %329, 0.000000e+00
  br i1 %330, label %337, label %331

331:                                              ; preds = %328
  %332 = load float, float* %31, align 4
  %333 = load float, float* %32, align 4
  %334 = load float, float* %33, align 4
  %335 = fmul float %333, %334
  %336 = fcmp oge float %332, %335
  br i1 %336, label %337, label %394

337:                                              ; preds = %331, %328, %322
  %338 = load %struct.partial_line_s*, %struct.partial_line_s** %8, align 8
  %339 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %338, i32 0, i32 0
  %340 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %339, i32 0, i32 3
  %341 = getelementptr inbounds %struct.timeval, %struct.timeval* %340, i32 0, i32 0
  %342 = load i64, i64* %341, align 8
  %343 = sitofp i64 %342 to float
  store float %343, float* %34, align 4
  %344 = load %struct.partial_line_s*, %struct.partial_line_s** %8, align 8
  %345 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %344, i32 0, i32 0
  %346 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %345, i32 0, i32 3
  %347 = getelementptr inbounds %struct.timeval, %struct.timeval* %346, i32 0, i32 1
  %348 = load i64, i64* %347, align 8
  %349 = sitofp i64 %348 to float
  store float %349, float* %35, align 4
  %350 = load float, float* %34, align 4
  %351 = load float, float* %19, align 4
  %352 = fmul float %350, %351
  %353 = load float, float* %35, align 4
  %354 = load float, float* %18, align 4
  %355 = fmul float %353, %354
  %356 = fcmp oge float %352, %355
  %357 = zext i1 %356 to i32
  store i32 %357, i32* %36, align 4
  %358 = load float, float* %14, align 4
  %359 = fneg float %358
  %360 = load float, float* %19, align 4
  %361 = fmul float %359, %360
  %362 = load float, float* %15, align 4
  %363 = fneg float %362
  %364 = load float, float* %18, align 4
  %365 = fmul float %363, %364
  %366 = fcmp oge float %361, %365
  %367 = zext i1 %366 to i32
  store i32 %367, i32* %37, align 4
  %368 = load i32, i32* %36, align 4
  %369 = load i32, i32* %37, align 4
  %370 = icmp eq i32 %368, %369
  br i1 %370, label %371, label %382

371:                                              ; preds = %337
  %372 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %373 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %372, i32 0, i32 1
  %374 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %373, i32 0, i32 2
  %375 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %376 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %375, i32 0, i32 1
  %377 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %376, i32 0, i32 3
  %378 = load %struct.timeval*, %struct.timeval** %22, align 8
  %379 = load %struct.partial_line_s*, %struct.partial_line_s** %8, align 8
  %380 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %379, i32 0, i32 0
  %381 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %380, i32 0, i32 3
  call void @line_intersect(%struct.timeval* %374, %struct.timeval* %377, %struct.timeval* %378, %struct.timeval* %381, %struct.timeval* %13)
  br label %393

382:                                              ; preds = %337
  %383 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %384 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %383, i32 0, i32 1
  %385 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %384, i32 0, i32 1
  %386 = load %struct.partial_line_s*, %struct.partial_line_s** %7, align 8
  %387 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %386, i32 0, i32 1
  %388 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %387, i32 0, i32 3
  %389 = load %struct.timeval*, %struct.timeval** %22, align 8
  %390 = load %struct.partial_line_s*, %struct.partial_line_s** %8, align 8
  %391 = getelementptr inbounds %struct.partial_line_s, %struct.partial_line_s* %390, i32 0, i32 0
  %392 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %391, i32 0, i32 3
  call void @line_intersect(%struct.timeval* %385, %struct.timeval* %388, %struct.timeval* %389, %struct.timeval* %392, %struct.timeval* %12)
  br label %393

393:                                              ; preds = %382, %371
  br label %394

394:                                              ; preds = %393, %331, %322, %319
  br label %395

395:                                              ; preds = %394, %164
  %396 = load %struct.gx_path_s*, %struct.gx_path_s** %10, align 8
  %397 = getelementptr inbounds %struct.timeval, %struct.timeval* %12, i32 0, i32 0
  %398 = load i64, i64* %397, align 8
  %399 = getelementptr inbounds %struct.timeval, %struct.timeval* %12, i32 0, i32 1
  %400 = load i64, i64* %399, align 8
  %401 = call i32 @gx_path_add_line(%struct.gx_path_s* %396, i64 %398, i64 %400)
  store i32 %401, i32* %11, align 4
  %402 = icmp slt i32 %401, 0
  br i1 %402, label %421, label %403

403:                                              ; preds = %395
  %404 = load %struct.gx_path_s*, %struct.gx_path_s** %10, align 8
  %405 = load %struct.timeval*, %struct.timeval** %22, align 8
  %406 = getelementptr inbounds %struct.timeval, %struct.timeval* %405, i32 0, i32 0
  %407 = load i64, i64* %406, align 8
  %408 = load %struct.timeval*, %struct.timeval** %22, align 8
  %409 = getelementptr inbounds %struct.timeval, %struct.timeval* %408, i32 0, i32 1
  %410 = load i64, i64* %409, align 8
  %411 = call i32 @gx_path_add_line(%struct.gx_path_s* %404, i64 %407, i64 %410)
  store i32 %411, i32* %11, align 4
  %412 = icmp slt i32 %411, 0
  br i1 %412, label %421, label %413

413:                                              ; preds = %403
  %414 = load %struct.gx_path_s*, %struct.gx_path_s** %10, align 8
  %415 = getelementptr inbounds %struct.timeval, %struct.timeval* %13, i32 0, i32 0
  %416 = load i64, i64* %415, align 8
  %417 = getelementptr inbounds %struct.timeval, %struct.timeval* %13, i32 0, i32 1
  %418 = load i64, i64* %417, align 8
  %419 = call i32 @gx_path_add_line(%struct.gx_path_s* %414, i64 %416, i64 %418)
  store i32 %419, i32* %11, align 4
  %420 = icmp slt i32 %419, 0
  br i1 %420, label %421, label %423

421:                                              ; preds = %413, %403, %395
  %422 = load i32, i32* %11, align 4
  store i32 %422, i32* %5, align 4
  br label %436

423:                                              ; preds = %413
  br label %424

424:                                              ; preds = %423, %99
  br label %425

425:                                              ; preds = %424, %89
  br label %426

426:                                              ; preds = %425, %72
  %427 = load i32, i32* %11, align 4
  %428 = icmp slt i32 %427, 0
  br i1 %428, label %433, label %429

429:                                              ; preds = %426
  %430 = load %struct.gx_path_s*, %struct.gx_path_s** %10, align 8
  %431 = call i32 @gx_path_close_subpath(%struct.gx_path_s* %430)
  store i32 %431, i32* %11, align 4
  %432 = icmp slt i32 %431, 0
  br i1 %432, label %433, label %435

433:                                              ; preds = %429, %426
  %434 = load i32, i32* %11, align 4
  store i32 %434, i32* %5, align 4
  br label %436

435:                                              ; preds = %429
  store i32 0, i32* %5, align 4
  br label %436

436:                                              ; preds = %435, %433, %421, %67, %41
  %437 = load i32, i32* %5, align 4
  ret i32 %437
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @add_capped(%struct.gx_path_s* %0, i32 %1, i32 (%struct.gx_path_s*, i64, i64)* %2, %struct.endpoint_s* %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.gx_path_s*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32 (%struct.gx_path_s*, i64, i64)*, align 8
  %9 = alloca %struct.endpoint_s*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  store %struct.gx_path_s* %0, %struct.gx_path_s** %6, align 8
  store i32 %1, i32* %7, align 4
  store i32 (%struct.gx_path_s*, i64, i64)* %2, i32 (%struct.gx_path_s*, i64, i64)** %8, align 8
  store %struct.endpoint_s* %3, %struct.endpoint_s** %9, align 8
  %13 = load i32, i32* %7, align 4
  switch i32 %13, label %188 [
    i32 1, label %14
    i32 2, label %112
    i32 0, label %160
  ]

14:                                               ; preds = %4
  %15 = load %struct.endpoint_s*, %struct.endpoint_s** %9, align 8
  %16 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %15, i32 0, i32 0
  %17 = getelementptr inbounds %struct.timeval, %struct.timeval* %16, i32 0, i32 0
  %18 = load i64, i64* %17, align 8
  %19 = load %struct.endpoint_s*, %struct.endpoint_s** %9, align 8
  %20 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %19, i32 0, i32 3
  %21 = getelementptr inbounds %struct.timeval, %struct.timeval* %20, i32 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = add nsw i64 %18, %22
  store i64 %23, i64* %11, align 8
  %24 = load %struct.endpoint_s*, %struct.endpoint_s** %9, align 8
  %25 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %24, i32 0, i32 0
  %26 = getelementptr inbounds %struct.timeval, %struct.timeval* %25, i32 0, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = load %struct.endpoint_s*, %struct.endpoint_s** %9, align 8
  %29 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %28, i32 0, i32 3
  %30 = getelementptr inbounds %struct.timeval, %struct.timeval* %29, i32 0, i32 1
  %31 = load i64, i64* %30, align 8
  %32 = add nsw i64 %27, %31
  store i64 %32, i64* %12, align 8
  %33 = load i32 (%struct.gx_path_s*, i64, i64)*, i32 (%struct.gx_path_s*, i64, i64)** %8, align 8
  %34 = load %struct.gx_path_s*, %struct.gx_path_s** %6, align 8
  %35 = load %struct.endpoint_s*, %struct.endpoint_s** %9, align 8
  %36 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %35, i32 0, i32 1
  %37 = getelementptr inbounds %struct.timeval, %struct.timeval* %36, i32 0, i32 0
  %38 = load i64, i64* %37, align 8
  %39 = load %struct.endpoint_s*, %struct.endpoint_s** %9, align 8
  %40 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %39, i32 0, i32 1
  %41 = getelementptr inbounds %struct.timeval, %struct.timeval* %40, i32 0, i32 1
  %42 = load i64, i64* %41, align 8
  %43 = call i32 %33(%struct.gx_path_s* %34, i64 %38, i64 %42)
  store i32 %43, i32* %10, align 4
  %44 = icmp slt i32 %43, 0
  br i1 %44, label %109, label %45

45:                                               ; preds = %14
  %46 = load %struct.gx_path_s*, %struct.gx_path_s** %6, align 8
  %47 = load %struct.endpoint_s*, %struct.endpoint_s** %9, align 8
  %48 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %47, i32 0, i32 1
  %49 = getelementptr inbounds %struct.timeval, %struct.timeval* %48, i32 0, i32 0
  %50 = load i64, i64* %49, align 8
  %51 = load %struct.endpoint_s*, %struct.endpoint_s** %9, align 8
  %52 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %51, i32 0, i32 1
  %53 = getelementptr inbounds %struct.timeval, %struct.timeval* %52, i32 0, i32 1
  %54 = load i64, i64* %53, align 8
  %55 = load i64, i64* %11, align 8
  %56 = load i64, i64* %12, align 8
  %57 = load %struct.endpoint_s*, %struct.endpoint_s** %9, align 8
  %58 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %57, i32 0, i32 1
  %59 = getelementptr inbounds %struct.timeval, %struct.timeval* %58, i32 0, i32 0
  %60 = load i64, i64* %59, align 8
  %61 = load %struct.endpoint_s*, %struct.endpoint_s** %9, align 8
  %62 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %61, i32 0, i32 3
  %63 = getelementptr inbounds %struct.timeval, %struct.timeval* %62, i32 0, i32 0
  %64 = load i64, i64* %63, align 8
  %65 = add nsw i64 %60, %64
  %66 = load %struct.endpoint_s*, %struct.endpoint_s** %9, align 8
  %67 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %66, i32 0, i32 1
  %68 = getelementptr inbounds %struct.timeval, %struct.timeval* %67, i32 0, i32 1
  %69 = load i64, i64* %68, align 8
  %70 = load %struct.endpoint_s*, %struct.endpoint_s** %9, align 8
  %71 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %70, i32 0, i32 3
  %72 = getelementptr inbounds %struct.timeval, %struct.timeval* %71, i32 0, i32 1
  %73 = load i64, i64* %72, align 8
  %74 = add nsw i64 %69, %73
  %75 = call i32 @gx_path_add_arc(%struct.gx_path_s* %46, i64 %50, i64 %54, i64 %55, i64 %56, i64 %65, i64 %74)
  store i32 %75, i32* %10, align 4
  %76 = icmp slt i32 %75, 0
  br i1 %76, label %109, label %77

77:                                               ; preds = %45
  %78 = load %struct.gx_path_s*, %struct.gx_path_s** %6, align 8
  %79 = load i64, i64* %11, align 8
  %80 = load i64, i64* %12, align 8
  %81 = load %struct.endpoint_s*, %struct.endpoint_s** %9, align 8
  %82 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %81, i32 0, i32 2
  %83 = getelementptr inbounds %struct.timeval, %struct.timeval* %82, i32 0, i32 0
  %84 = load i64, i64* %83, align 8
  %85 = load %struct.endpoint_s*, %struct.endpoint_s** %9, align 8
  %86 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %85, i32 0, i32 2
  %87 = getelementptr inbounds %struct.timeval, %struct.timeval* %86, i32 0, i32 1
  %88 = load i64, i64* %87, align 8
  %89 = load %struct.endpoint_s*, %struct.endpoint_s** %9, align 8
  %90 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %89, i32 0, i32 2
  %91 = getelementptr inbounds %struct.timeval, %struct.timeval* %90, i32 0, i32 0
  %92 = load i64, i64* %91, align 8
  %93 = load %struct.endpoint_s*, %struct.endpoint_s** %9, align 8
  %94 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %93, i32 0, i32 3
  %95 = getelementptr inbounds %struct.timeval, %struct.timeval* %94, i32 0, i32 0
  %96 = load i64, i64* %95, align 8
  %97 = add nsw i64 %92, %96
  %98 = load %struct.endpoint_s*, %struct.endpoint_s** %9, align 8
  %99 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %98, i32 0, i32 2
  %100 = getelementptr inbounds %struct.timeval, %struct.timeval* %99, i32 0, i32 1
  %101 = load i64, i64* %100, align 8
  %102 = load %struct.endpoint_s*, %struct.endpoint_s** %9, align 8
  %103 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %102, i32 0, i32 3
  %104 = getelementptr inbounds %struct.timeval, %struct.timeval* %103, i32 0, i32 1
  %105 = load i64, i64* %104, align 8
  %106 = add nsw i64 %101, %105
  %107 = call i32 @gx_path_add_arc(%struct.gx_path_s* %78, i64 %79, i64 %80, i64 %84, i64 %88, i64 %97, i64 %106)
  store i32 %107, i32* %10, align 4
  %108 = icmp slt i32 %107, 0
  br i1 %108, label %109, label %111

109:                                              ; preds = %77, %45, %14
  %110 = load i32, i32* %10, align 4
  store i32 %110, i32* %5, align 4
  br label %190

111:                                              ; preds = %77
  br label %188

112:                                              ; preds = %4
  %113 = load i32 (%struct.gx_path_s*, i64, i64)*, i32 (%struct.gx_path_s*, i64, i64)** %8, align 8
  %114 = load %struct.gx_path_s*, %struct.gx_path_s** %6, align 8
  %115 = load %struct.endpoint_s*, %struct.endpoint_s** %9, align 8
  %116 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %115, i32 0, i32 1
  %117 = getelementptr inbounds %struct.timeval, %struct.timeval* %116, i32 0, i32 0
  %118 = load i64, i64* %117, align 8
  %119 = load %struct.endpoint_s*, %struct.endpoint_s** %9, align 8
  %120 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %119, i32 0, i32 3
  %121 = getelementptr inbounds %struct.timeval, %struct.timeval* %120, i32 0, i32 0
  %122 = load i64, i64* %121, align 8
  %123 = add nsw i64 %118, %122
  %124 = load %struct.endpoint_s*, %struct.endpoint_s** %9, align 8
  %125 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %124, i32 0, i32 1
  %126 = getelementptr inbounds %struct.timeval, %struct.timeval* %125, i32 0, i32 1
  %127 = load i64, i64* %126, align 8
  %128 = load %struct.endpoint_s*, %struct.endpoint_s** %9, align 8
  %129 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %128, i32 0, i32 3
  %130 = getelementptr inbounds %struct.timeval, %struct.timeval* %129, i32 0, i32 1
  %131 = load i64, i64* %130, align 8
  %132 = add nsw i64 %127, %131
  %133 = call i32 %113(%struct.gx_path_s* %114, i64 %123, i64 %132)
  store i32 %133, i32* %10, align 4
  %134 = icmp slt i32 %133, 0
  br i1 %134, label %157, label %135

135:                                              ; preds = %112
  %136 = load %struct.gx_path_s*, %struct.gx_path_s** %6, align 8
  %137 = load %struct.endpoint_s*, %struct.endpoint_s** %9, align 8
  %138 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %137, i32 0, i32 2
  %139 = getelementptr inbounds %struct.timeval, %struct.timeval* %138, i32 0, i32 0
  %140 = load i64, i64* %139, align 8
  %141 = load %struct.endpoint_s*, %struct.endpoint_s** %9, align 8
  %142 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %141, i32 0, i32 3
  %143 = getelementptr inbounds %struct.timeval, %struct.timeval* %142, i32 0, i32 0
  %144 = load i64, i64* %143, align 8
  %145 = add nsw i64 %140, %144
  %146 = load %struct.endpoint_s*, %struct.endpoint_s** %9, align 8
  %147 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %146, i32 0, i32 2
  %148 = getelementptr inbounds %struct.timeval, %struct.timeval* %147, i32 0, i32 1
  %149 = load i64, i64* %148, align 8
  %150 = load %struct.endpoint_s*, %struct.endpoint_s** %9, align 8
  %151 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %150, i32 0, i32 3
  %152 = getelementptr inbounds %struct.timeval, %struct.timeval* %151, i32 0, i32 1
  %153 = load i64, i64* %152, align 8
  %154 = add nsw i64 %149, %153
  %155 = call i32 @gx_path_add_line(%struct.gx_path_s* %136, i64 %145, i64 %154)
  store i32 %155, i32* %10, align 4
  %156 = icmp slt i32 %155, 0
  br i1 %156, label %157, label %159

157:                                              ; preds = %135, %112
  %158 = load i32, i32* %10, align 4
  store i32 %158, i32* %5, align 4
  br label %190

159:                                              ; preds = %135
  br label %188

160:                                              ; preds = %4
  %161 = load i32 (%struct.gx_path_s*, i64, i64)*, i32 (%struct.gx_path_s*, i64, i64)** %8, align 8
  %162 = load %struct.gx_path_s*, %struct.gx_path_s** %6, align 8
  %163 = load %struct.endpoint_s*, %struct.endpoint_s** %9, align 8
  %164 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %163, i32 0, i32 1
  %165 = getelementptr inbounds %struct.timeval, %struct.timeval* %164, i32 0, i32 0
  %166 = load i64, i64* %165, align 8
  %167 = load %struct.endpoint_s*, %struct.endpoint_s** %9, align 8
  %168 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %167, i32 0, i32 1
  %169 = getelementptr inbounds %struct.timeval, %struct.timeval* %168, i32 0, i32 1
  %170 = load i64, i64* %169, align 8
  %171 = call i32 %161(%struct.gx_path_s* %162, i64 %166, i64 %170)
  store i32 %171, i32* %10, align 4
  %172 = icmp slt i32 %171, 0
  br i1 %172, label %185, label %173

173:                                              ; preds = %160
  %174 = load %struct.gx_path_s*, %struct.gx_path_s** %6, align 8
  %175 = load %struct.endpoint_s*, %struct.endpoint_s** %9, align 8
  %176 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %175, i32 0, i32 2
  %177 = getelementptr inbounds %struct.timeval, %struct.timeval* %176, i32 0, i32 0
  %178 = load i64, i64* %177, align 8
  %179 = load %struct.endpoint_s*, %struct.endpoint_s** %9, align 8
  %180 = getelementptr inbounds %struct.endpoint_s, %struct.endpoint_s* %179, i32 0, i32 2
  %181 = getelementptr inbounds %struct.timeval, %struct.timeval* %180, i32 0, i32 1
  %182 = load i64, i64* %181, align 8
  %183 = call i32 @gx_path_add_line(%struct.gx_path_s* %174, i64 %178, i64 %182)
  store i32 %183, i32* %10, align 4
  %184 = icmp slt i32 %183, 0
  br i1 %184, label %185, label %187

185:                                              ; preds = %173, %160
  %186 = load i32, i32* %10, align 4
  store i32 %186, i32* %5, align 4
  br label %190

187:                                              ; preds = %173
  br label %188

188:                                              ; preds = %187, %159, %111, %4
  %189 = load i32, i32* %10, align 4
  store i32 %189, i32* %5, align 4
  br label %190

190:                                              ; preds = %188, %185, %157, %109
  %191 = load i32, i32* %5, align 4
  ret i32 %191
}

; Function Attrs: noinline nounwind uwtable
define internal void @line_intersect(%struct.timeval* %0, %struct.timeval* %1, %struct.timeval* %2, %struct.timeval* %3, %struct.timeval* %4) #0 {
  %6 = alloca %struct.timeval*, align 8
  %7 = alloca %struct.timeval*, align 8
  %8 = alloca %struct.timeval*, align 8
  %9 = alloca %struct.timeval*, align 8
  %10 = alloca %struct.timeval*, align 8
  %11 = alloca float, align 4
  %12 = alloca float, align 4
  %13 = alloca float, align 4
  %14 = alloca float, align 4
  %15 = alloca float, align 4
  %16 = alloca float, align 4
  %17 = alloca float, align 4
  %18 = alloca float, align 4
  %19 = alloca double, align 8
  %20 = alloca double, align 8
  %21 = alloca double, align 8
  store %struct.timeval* %0, %struct.timeval** %6, align 8
  store %struct.timeval* %1, %struct.timeval** %7, align 8
  store %struct.timeval* %2, %struct.timeval** %8, align 8
  store %struct.timeval* %3, %struct.timeval** %9, align 8
  store %struct.timeval* %4, %struct.timeval** %10, align 8
  %22 = load %struct.timeval*, %struct.timeval** %6, align 8
  %23 = getelementptr inbounds %struct.timeval, %struct.timeval* %22, i32 0, i32 0
  %24 = load i64, i64* %23, align 8
  %25 = sitofp i64 %24 to float
  store float %25, float* %11, align 4
  %26 = load %struct.timeval*, %struct.timeval** %6, align 8
  %27 = getelementptr inbounds %struct.timeval, %struct.timeval* %26, i32 0, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = sitofp i64 %28 to float
  store float %29, float* %12, align 4
  %30 = load %struct.timeval*, %struct.timeval** %7, align 8
  %31 = getelementptr inbounds %struct.timeval, %struct.timeval* %30, i32 0, i32 0
  %32 = load i64, i64* %31, align 8
  %33 = sitofp i64 %32 to float
  store float %33, float* %13, align 4
  %34 = load %struct.timeval*, %struct.timeval** %7, align 8
  %35 = getelementptr inbounds %struct.timeval, %struct.timeval* %34, i32 0, i32 1
  %36 = load i64, i64* %35, align 8
  %37 = sitofp i64 %36 to float
  store float %37, float* %14, align 4
  %38 = load %struct.timeval*, %struct.timeval** %8, align 8
  %39 = getelementptr inbounds %struct.timeval, %struct.timeval* %38, i32 0, i32 0
  %40 = load i64, i64* %39, align 8
  %41 = sitofp i64 %40 to float
  store float %41, float* %15, align 4
  %42 = load %struct.timeval*, %struct.timeval** %8, align 8
  %43 = getelementptr inbounds %struct.timeval, %struct.timeval* %42, i32 0, i32 1
  %44 = load i64, i64* %43, align 8
  %45 = sitofp i64 %44 to float
  store float %45, float* %16, align 4
  %46 = load %struct.timeval*, %struct.timeval** %9, align 8
  %47 = getelementptr inbounds %struct.timeval, %struct.timeval* %46, i32 0, i32 0
  %48 = load i64, i64* %47, align 8
  %49 = sitofp i64 %48 to float
  store float %49, float* %17, align 4
  %50 = load %struct.timeval*, %struct.timeval** %9, align 8
  %51 = getelementptr inbounds %struct.timeval, %struct.timeval* %50, i32 0, i32 1
  %52 = load i64, i64* %51, align 8
  %53 = sitofp i64 %52 to float
  store float %53, float* %18, align 4
  %54 = load float, float* %13, align 4
  %55 = load float, float* %18, align 4
  %56 = fmul float %54, %55
  %57 = load float, float* %17, align 4
  %58 = load float, float* %14, align 4
  %59 = fmul float %57, %58
  %60 = fsub float %56, %59
  %61 = fpext float %60 to double
  store double %61, double* %19, align 8
  %62 = load float, float* %14, align 4
  %63 = load float, float* %11, align 4
  %64 = fmul float %62, %63
  %65 = load float, float* %13, align 4
  %66 = load float, float* %12, align 4
  %67 = fmul float %65, %66
  %68 = fsub float %64, %67
  %69 = fpext float %68 to double
  store double %69, double* %20, align 8
  %70 = load float, float* %18, align 4
  %71 = load float, float* %15, align 4
  %72 = fmul float %70, %71
  %73 = load float, float* %17, align 4
  %74 = load float, float* %16, align 4
  %75 = fmul float %73, %74
  %76 = fsub float %72, %75
  %77 = fpext float %76 to double
  store double %77, double* %21, align 8
  %78 = load float, float* %13, align 4
  %79 = fpext float %78 to double
  %80 = load double, double* %21, align 8
  %81 = fmul double %79, %80
  %82 = load float, float* %17, align 4
  %83 = fpext float %82 to double
  %84 = load double, double* %20, align 8
  %85 = fmul double %83, %84
  %86 = fsub double %81, %85
  %87 = load double, double* %19, align 8
  %88 = fdiv double %86, %87
  %89 = fptosi double %88 to i64
  %90 = load %struct.timeval*, %struct.timeval** %10, align 8
  %91 = getelementptr inbounds %struct.timeval, %struct.timeval* %90, i32 0, i32 0
  store i64 %89, i64* %91, align 8
  %92 = load float, float* %14, align 4
  %93 = fpext float %92 to double
  %94 = load double, double* %21, align 8
  %95 = fmul double %93, %94
  %96 = load float, float* %18, align 4
  %97 = fpext float %96 to double
  %98 = load double, double* %20, align 8
  %99 = fmul double %97, %98
  %100 = fsub double %95, %99
  %101 = load double, double* %19, align 8
  %102 = fdiv double %100, %101
  %103 = fptosi double %102 to i64
  %104 = load %struct.timeval*, %struct.timeval** %10, align 8
  %105 = getelementptr inbounds %struct.timeval, %struct.timeval* %104, i32 0, i32 1
  store i64 %103, i64* %105, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @gx_stroke_add(%struct.gx_path_s* %0, %struct.gx_path_s* %1, %struct.gs_state_s* %2) #0 {
  %4 = alloca %struct.gx_path_s*, align 8
  %5 = alloca %struct.gx_path_s*, align 8
  %6 = alloca %struct.gs_state_s*, align 8
  store %struct.gx_path_s* %0, %struct.gx_path_s** %4, align 8
  store %struct.gx_path_s* %1, %struct.gx_path_s** %5, align 8
  store %struct.gs_state_s* %2, %struct.gs_state_s** %6, align 8
  %7 = load %struct.gx_path_s*, %struct.gx_path_s** %5, align 8
  store %struct.gx_path_s* %7, %struct.gx_path_s** @stroke_path, align 8
  %8 = load %struct.gx_path_s*, %struct.gx_path_s** %4, align 8
  %9 = load %struct.gs_state_s*, %struct.gs_state_s** %6, align 8
  %10 = call i32 @stroke(%struct.gx_path_s* %8, i32 (i32, %struct.partial_line_s*, %struct.partial_line_s*, %struct.gs_state_s*)* @stroke_add, %struct.gs_state_s* %9)
  ret i32 %10
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @alloc_init(i8* (i32, i32, i8*)* %0, void (i8*, i32, i32, i8*)* %1, i32 %2) #0 {
  %4 = alloca i8* (i32, i32, i8*)*, align 8
  %5 = alloca void (i8*, i32, i32, i8*)*, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.alloc_state_s*, align 8
  store i8* (i32, i32, i8*)* %0, i8* (i32, i32, i8*)** %4, align 8
  store void (i8*, i32, i32, i8*)* %1, void (i8*, i32, i32, i8*)** %5, align 8
  store i32 %2, i32* %6, align 4
  store %struct.alloc_state_s* @as_current, %struct.alloc_state_s** %7, align 8
  %8 = load %struct.alloc_state_s*, %struct.alloc_state_s** %7, align 8
  %9 = bitcast %struct.alloc_state_s* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 392, i1 false)
  %10 = load i32, i32* %6, align 4
  %11 = load %struct.alloc_state_s*, %struct.alloc_state_s** %7, align 8
  %12 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %11, i32 0, i32 2
  store i32 %10, i32* %12, align 8
  %13 = load %struct.alloc_state_s*, %struct.alloc_state_s** %7, align 8
  %14 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %13, i32 0, i32 3
  store i32 8, i32* %14, align 4
  %15 = load i8* (i32, i32, i8*)*, i8* (i32, i32, i8*)** %4, align 8
  %16 = load %struct.alloc_state_s*, %struct.alloc_state_s** %7, align 8
  %17 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %16, i32 0, i32 4
  store i8* (i32, i32, i8*)* %15, i8* (i32, i32, i8*)** %17, align 8
  %18 = load void (i8*, i32, i32, i8*)*, void (i8*, i32, i32, i8*)** %5, align 8
  %19 = load %struct.alloc_state_s*, %struct.alloc_state_s** %7, align 8
  %20 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %19, i32 0, i32 5
  store void (i8*, i32, i32, i8*)* %18, void (i8*, i32, i32, i8*)** %20, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @alloc_status(i64* %0, i64* %1) #0 {
  %3 = alloca i64*, align 8
  %4 = alloca i64*, align 8
  %5 = alloca %struct.alloc_state_s*, align 8
  store i64* %0, i64** %3, align 8
  store i64* %1, i64** %4, align 8
  store %struct.alloc_state_s* @as_current, %struct.alloc_state_s** %5, align 8
  %6 = load %struct.alloc_state_s*, %struct.alloc_state_s** %5, align 8
  %7 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %6, i32 0, i32 0
  %8 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %7, i32 0, i32 1
  %9 = load i8*, i8** %8, align 8
  %10 = load %struct.alloc_state_s*, %struct.alloc_state_s** %5, align 8
  %11 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %10, i32 0, i32 0
  %12 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %11, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = ptrtoint i8* %9 to i64
  %15 = ptrtoint i8* %13 to i64
  %16 = sub i64 %14, %15
  %17 = load %struct.alloc_state_s*, %struct.alloc_state_s** %5, align 8
  %18 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %17, i32 0, i32 0
  %19 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %18, i32 0, i32 3
  %20 = load i8*, i8** %19, align 8
  %21 = load %struct.alloc_state_s*, %struct.alloc_state_s** %5, align 8
  %22 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %21, i32 0, i32 0
  %23 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %22, i32 0, i32 2
  %24 = load i8*, i8** %23, align 8
  %25 = ptrtoint i8* %20 to i64
  %26 = ptrtoint i8* %24 to i64
  %27 = sub i64 %25, %26
  %28 = add nsw i64 %16, %27
  %29 = load %struct.alloc_state_s*, %struct.alloc_state_s** %5, align 8
  %30 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %29, i32 0, i32 6
  %31 = load i64, i64* %30, align 8
  %32 = add nsw i64 %28, %31
  %33 = load i64*, i64** %3, align 8
  store i64 %32, i64* %33, align 8
  %34 = load %struct.alloc_state_s*, %struct.alloc_state_s** %5, align 8
  %35 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %34, i32 0, i32 0
  %36 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %35, i32 0, i32 3
  %37 = load i8*, i8** %36, align 8
  %38 = load %struct.alloc_state_s*, %struct.alloc_state_s** %5, align 8
  %39 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %38, i32 0, i32 0
  %40 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %39, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = ptrtoint i8* %37 to i64
  %43 = ptrtoint i8* %41 to i64
  %44 = sub i64 %42, %43
  %45 = load %struct.alloc_state_s*, %struct.alloc_state_s** %5, align 8
  %46 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %45, i32 0, i32 7
  %47 = load i64, i64* %46, align 8
  %48 = add nsw i64 %44, %47
  %49 = load i64*, i64** %4, align 8
  store i64 %48, i64* %49, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @alloc(i32 %0, i32 %1, i8* %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca %struct.alloc_state_s*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i8**, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  store i32 %0, i32* %5, align 4
  store i32 %1, i32* %6, align 4
  store i8* %2, i8** %7, align 8
  store %struct.alloc_state_s* @as_current, %struct.alloc_state_s** %8, align 8
  %16 = load i32, i32* %5, align 4
  %17 = load i32, i32* %6, align 4
  %18 = mul i32 %16, %17
  store i32 %18, i32* %9, align 4
  %19 = load i32, i32* %9, align 4
  %20 = load %struct.alloc_state_s*, %struct.alloc_state_s** %8, align 8
  %21 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %20, i32 0, i32 3
  %22 = load i32, i32* %21, align 4
  %23 = icmp uge i32 %19, %22
  br i1 %23, label %24, label %34

24:                                               ; preds = %3
  %25 = load %struct.alloc_state_s*, %struct.alloc_state_s** %8, align 8
  %26 = load i32, i32* %9, align 4
  %27 = load i8*, i8** %7, align 8
  %28 = call i8* @alloc_large(%struct.alloc_state_s* %25, i32 %26, i8* %27)
  store i8* %28, i8** %12, align 8
  %29 = load i8*, i8** %12, align 8
  %30 = icmp ne i8* %29, null
  br i1 %30, label %31, label %33

31:                                               ; preds = %24
  %32 = load i8*, i8** %12, align 8
  store i8* %32, i8** %4, align 8
  br label %109

33:                                               ; preds = %24
  br label %34

34:                                               ; preds = %33, %3
  %35 = load i32, i32* %9, align 4
  %36 = add i32 %35, 7
  %37 = and i32 %36, -8
  store i32 %37, i32* %10, align 4
  %38 = load i32, i32* %10, align 4
  %39 = icmp ule i32 %38, 255
  br i1 %39, label %40, label %58

40:                                               ; preds = %34
  %41 = load %struct.alloc_state_s*, %struct.alloc_state_s** %8, align 8
  %42 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %41, i32 0, i32 9
  %43 = load i32, i32* %10, align 4
  %44 = lshr i32 %43, 3
  %45 = zext i32 %44 to i64
  %46 = getelementptr inbounds [32 x i8*], [32 x i8*]* %42, i64 0, i64 %45
  store i8** %46, i8*** %13, align 8
  %47 = load i8**, i8*** %13, align 8
  %48 = load i8*, i8** %47, align 8
  store i8* %48, i8** %14, align 8
  %49 = load i8*, i8** %14, align 8
  %50 = icmp ne i8* %49, null
  br i1 %50, label %51, label %57

51:                                               ; preds = %40
  %52 = load i8*, i8** %14, align 8
  %53 = bitcast i8* %52 to i8**
  %54 = load i8*, i8** %53, align 8
  %55 = load i8**, i8*** %13, align 8
  store i8* %54, i8** %55, align 8
  %56 = load i8*, i8** %14, align 8
  store i8* %56, i8** %4, align 8
  br label %109

57:                                               ; preds = %40
  br label %58

58:                                               ; preds = %57, %34
  %59 = load %struct.alloc_state_s*, %struct.alloc_state_s** %8, align 8
  %60 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %59, i32 0, i32 0
  %61 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %60, i32 0, i32 2
  %62 = load i8*, i8** %61, align 8
  %63 = load %struct.alloc_state_s*, %struct.alloc_state_s** %8, align 8
  %64 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %63, i32 0, i32 0
  %65 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %64, i32 0, i32 1
  %66 = load i8*, i8** %65, align 8
  %67 = ptrtoint i8* %62 to i64
  %68 = ptrtoint i8* %66 to i64
  %69 = sub i64 %67, %68
  %70 = trunc i64 %69 to i32
  store i32 %70, i32* %11, align 4
  %71 = load i32, i32* %10, align 4
  %72 = load i32, i32* %11, align 4
  %73 = icmp ugt i32 %71, %72
  br i1 %73, label %74, label %80

74:                                               ; preds = %58
  %75 = load %struct.alloc_state_s*, %struct.alloc_state_s** %8, align 8
  %76 = call i32 @alloc_add_chunk(%struct.alloc_state_s* %75)
  %77 = icmp ne i32 %76, 0
  br i1 %77, label %79, label %78

78:                                               ; preds = %74
  store i8* null, i8** %4, align 8
  br label %109

79:                                               ; preds = %74
  br label %80

80:                                               ; preds = %79, %58
  %81 = load i32, i32* %6, align 4
  %82 = icmp eq i32 %81, 1
  br i1 %82, label %83, label %96

83:                                               ; preds = %80
  %84 = load i32, i32* %9, align 4
  %85 = load %struct.alloc_state_s*, %struct.alloc_state_s** %8, align 8
  %86 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %85, i32 0, i32 0
  %87 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %86, i32 0, i32 2
  %88 = load i8*, i8** %87, align 8
  %89 = zext i32 %84 to i64
  %90 = sub i64 0, %89
  %91 = getelementptr inbounds i8, i8* %88, i64 %90
  store i8* %91, i8** %87, align 8
  %92 = load %struct.alloc_state_s*, %struct.alloc_state_s** %8, align 8
  %93 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %92, i32 0, i32 0
  %94 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %93, i32 0, i32 2
  %95 = load i8*, i8** %94, align 8
  store i8* %95, i8** %4, align 8
  br label %109

96:                                               ; preds = %80
  %97 = load %struct.alloc_state_s*, %struct.alloc_state_s** %8, align 8
  %98 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %97, i32 0, i32 0
  %99 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %98, i32 0, i32 1
  %100 = load i8*, i8** %99, align 8
  store i8* %100, i8** %15, align 8
  %101 = load i32, i32* %10, align 4
  %102 = load %struct.alloc_state_s*, %struct.alloc_state_s** %8, align 8
  %103 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %102, i32 0, i32 0
  %104 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %103, i32 0, i32 1
  %105 = load i8*, i8** %104, align 8
  %106 = zext i32 %101 to i64
  %107 = getelementptr inbounds i8, i8* %105, i64 %106
  store i8* %107, i8** %104, align 8
  %108 = load i8*, i8** %15, align 8
  store i8* %108, i8** %4, align 8
  br label %109

109:                                              ; preds = %96, %83, %78, %51, %31
  %110 = load i8*, i8** %4, align 8
  ret i8* %110
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @alloc_large(%struct.alloc_state_s* %0, i32 %1, i8* %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca %struct.alloc_state_s*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca %struct.alloc_block_s*, align 8
  %9 = alloca i8*, align 8
  store %struct.alloc_state_s* %0, %struct.alloc_state_s** %5, align 8
  store i32 %1, i32* %6, align 4
  store i8* %2, i8** %7, align 8
  %10 = load %struct.alloc_state_s*, %struct.alloc_state_s** %5, align 8
  %11 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %10, i32 0, i32 4
  %12 = load i8* (i32, i32, i8*)*, i8* (i32, i32, i8*)** %11, align 8
  %13 = load i32, i32* %6, align 4
  %14 = add i32 24, %13
  %15 = load i8*, i8** %7, align 8
  %16 = call i8* %12(i32 1, i32 %14, i8* %15)
  %17 = bitcast i8* %16 to %struct.alloc_block_s*
  store %struct.alloc_block_s* %17, %struct.alloc_block_s** %8, align 8
  %18 = load %struct.alloc_block_s*, %struct.alloc_block_s** %8, align 8
  %19 = icmp eq %struct.alloc_block_s* %18, null
  br i1 %19, label %20, label %21

20:                                               ; preds = %3
  store i8* null, i8** %4, align 8
  br label %45

21:                                               ; preds = %3
  %22 = load %struct.alloc_block_s*, %struct.alloc_block_s** %8, align 8
  %23 = bitcast %struct.alloc_block_s* %22 to i8*
  %24 = getelementptr inbounds i8, i8* %23, i64 24
  store i8* %24, i8** %9, align 8
  %25 = load %struct.alloc_state_s*, %struct.alloc_state_s** %5, align 8
  %26 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %25, i32 0, i32 10
  %27 = load %struct.alloc_block_s*, %struct.alloc_block_s** %26, align 8
  %28 = load %struct.alloc_block_s*, %struct.alloc_block_s** %8, align 8
  %29 = getelementptr inbounds %struct.alloc_block_s, %struct.alloc_block_s* %28, i32 0, i32 0
  store %struct.alloc_block_s* %27, %struct.alloc_block_s** %29, align 8
  %30 = load i32, i32* %6, align 4
  %31 = load %struct.alloc_block_s*, %struct.alloc_block_s** %8, align 8
  %32 = getelementptr inbounds %struct.alloc_block_s, %struct.alloc_block_s* %31, i32 0, i32 1
  store i32 %30, i32* %32, align 8
  %33 = load %struct.alloc_state_s*, %struct.alloc_state_s** %5, align 8
  %34 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %33, i32 0, i32 12
  %35 = load i32, i32* %34, align 8
  %36 = load %struct.alloc_block_s*, %struct.alloc_block_s** %8, align 8
  %37 = getelementptr inbounds %struct.alloc_block_s, %struct.alloc_block_s* %36, i32 0, i32 2
  store i32 %35, i32* %37, align 4
  %38 = load %struct.alloc_state_s*, %struct.alloc_state_s** %5, align 8
  %39 = load %struct.alloc_block_s*, %struct.alloc_block_s** %8, align 8
  %40 = getelementptr inbounds %struct.alloc_block_s, %struct.alloc_block_s* %39, i32 0, i32 3
  store %struct.alloc_state_s* %38, %struct.alloc_state_s** %40, align 8
  %41 = load %struct.alloc_block_s*, %struct.alloc_block_s** %8, align 8
  %42 = load %struct.alloc_state_s*, %struct.alloc_state_s** %5, align 8
  %43 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %42, i32 0, i32 10
  store %struct.alloc_block_s* %41, %struct.alloc_block_s** %43, align 8
  %44 = load i8*, i8** %9, align 8
  store i8* %44, i8** %4, align 8
  br label %45

45:                                               ; preds = %21, %20
  %46 = load i8*, i8** %4, align 8
  ret i8* %46
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @alloc_add_chunk(%struct.alloc_state_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.alloc_state_s*, align 8
  %4 = alloca i8*, align 8
  store %struct.alloc_state_s* %0, %struct.alloc_state_s** %3, align 8
  %5 = load %struct.alloc_state_s*, %struct.alloc_state_s** %3, align 8
  %6 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %5, i32 0, i32 4
  %7 = load i8* (i32, i32, i8*)*, i8* (i32, i32, i8*)** %6, align 8
  %8 = load %struct.alloc_state_s*, %struct.alloc_state_s** %3, align 8
  %9 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %8, i32 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = call i8* %7(i32 1, i32 %10, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5.215, i64 0, i64 0))
  store i8* %11, i8** %4, align 8
  %12 = load i8*, i8** %4, align 8
  %13 = icmp eq i8* %12, null
  br i1 %13, label %14, label %15

14:                                               ; preds = %1
  store i32 0, i32* %2, align 4
  br label %73

15:                                               ; preds = %1
  %16 = load %struct.alloc_state_s*, %struct.alloc_state_s** %3, align 8
  %17 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %16, i32 0, i32 6
  %18 = load %struct.alloc_state_s*, %struct.alloc_state_s** %3, align 8
  %19 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %18, i32 0, i32 7
  call void @alloc_status(i64* %17, i64* %19)
  %20 = load %struct.alloc_state_s*, %struct.alloc_state_s** %3, align 8
  %21 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %20, i32 0, i32 8
  %22 = load i32, i32* %21, align 8
  %23 = add i32 %22, 1
  store i32 %23, i32* %21, align 8
  %24 = load %struct.alloc_state_s*, %struct.alloc_state_s** %3, align 8
  %25 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %24, i32 0, i32 1
  %26 = load %struct.alloc_chunk_s*, %struct.alloc_chunk_s** %25, align 8
  %27 = icmp ne %struct.alloc_chunk_s* %26, null
  br i1 %27, label %28, label %36

28:                                               ; preds = %15
  %29 = load %struct.alloc_state_s*, %struct.alloc_state_s** %3, align 8
  %30 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %29, i32 0, i32 1
  %31 = load %struct.alloc_chunk_s*, %struct.alloc_chunk_s** %30, align 8
  %32 = load %struct.alloc_state_s*, %struct.alloc_state_s** %3, align 8
  %33 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %32, i32 0, i32 0
  %34 = bitcast %struct.alloc_chunk_s* %31 to i8*
  %35 = bitcast %struct.alloc_chunk_s* %33 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 %35, i64 48, i1 false)
  br label %36

36:                                               ; preds = %28, %15
  %37 = load i8*, i8** %4, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 48
  %39 = load %struct.alloc_state_s*, %struct.alloc_state_s** %3, align 8
  %40 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %39, i32 0, i32 0
  %41 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %40, i32 0, i32 1
  store i8* %38, i8** %41, align 8
  %42 = load %struct.alloc_state_s*, %struct.alloc_state_s** %3, align 8
  %43 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %42, i32 0, i32 0
  %44 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %43, i32 0, i32 0
  store i8* %38, i8** %44, align 8
  %45 = load i8*, i8** %4, align 8
  %46 = load %struct.alloc_state_s*, %struct.alloc_state_s** %3, align 8
  %47 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %46, i32 0, i32 2
  %48 = load i32, i32* %47, align 8
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %45, i64 %49
  %51 = load %struct.alloc_state_s*, %struct.alloc_state_s** %3, align 8
  %52 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %51, i32 0, i32 0
  %53 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %52, i32 0, i32 2
  store i8* %50, i8** %53, align 8
  %54 = load %struct.alloc_state_s*, %struct.alloc_state_s** %3, align 8
  %55 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %54, i32 0, i32 0
  %56 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %55, i32 0, i32 3
  store i8* %50, i8** %56, align 8
  %57 = load %struct.alloc_state_s*, %struct.alloc_state_s** %3, align 8
  %58 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %57, i32 0, i32 1
  %59 = load %struct.alloc_chunk_s*, %struct.alloc_chunk_s** %58, align 8
  %60 = load %struct.alloc_state_s*, %struct.alloc_state_s** %3, align 8
  %61 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %60, i32 0, i32 0
  %62 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %61, i32 0, i32 5
  store %struct.alloc_chunk_s* %59, %struct.alloc_chunk_s** %62, align 8
  %63 = load %struct.alloc_state_s*, %struct.alloc_state_s** %3, align 8
  %64 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %63, i32 0, i32 12
  %65 = load i32, i32* %64, align 8
  %66 = load %struct.alloc_state_s*, %struct.alloc_state_s** %3, align 8
  %67 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %66, i32 0, i32 0
  %68 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %67, i32 0, i32 4
  store i32 %65, i32* %68, align 8
  %69 = load i8*, i8** %4, align 8
  %70 = bitcast i8* %69 to %struct.alloc_chunk_s*
  %71 = load %struct.alloc_state_s*, %struct.alloc_state_s** %3, align 8
  %72 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %71, i32 0, i32 1
  store %struct.alloc_chunk_s* %70, %struct.alloc_chunk_s** %72, align 8
  store i32 1, i32* %2, align 4
  br label %73

73:                                               ; preds = %36, %14
  %74 = load i32, i32* %2, align 4
  ret i32 %74
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @alloc_free(i8* %0, i32 %1, i32 %2, i8* %3) #0 {
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca %struct.alloc_state_s*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca %struct.alloc_chunk_s*, align 8
  %14 = alloca i8**, align 8
  store i8* %0, i8** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store i8* %3, i8** %8, align 8
  store %struct.alloc_state_s* @as_current, %struct.alloc_state_s** %9, align 8
  %15 = load i32, i32* %6, align 4
  %16 = load i32, i32* %7, align 4
  %17 = mul i32 %15, %16
  store i32 %17, i32* %10, align 4
  %18 = load i32, i32* %10, align 4
  %19 = load %struct.alloc_state_s*, %struct.alloc_state_s** %9, align 8
  %20 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %19, i32 0, i32 3
  %21 = load i32, i32* %20, align 4
  %22 = icmp uge i32 %18, %21
  br i1 %22, label %23, label %27

23:                                               ; preds = %4
  %24 = load i8*, i8** %5, align 8
  %25 = load i32, i32* %10, align 4
  %26 = load i8*, i8** %8, align 8
  call void @alloc_free_large(i8* %24, i32 %25, i8* %26)
  br label %212

27:                                               ; preds = %4
  %28 = load i8*, i8** %5, align 8
  %29 = load %struct.alloc_state_s*, %struct.alloc_state_s** %9, align 8
  %30 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %29, i32 0, i32 0
  %31 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %30, i32 0, i32 2
  %32 = load i8*, i8** %31, align 8
  %33 = icmp eq i8* %28, %32
  br i1 %33, label %34, label %67

34:                                               ; preds = %27
  %35 = load %struct.alloc_state_s*, %struct.alloc_state_s** %9, align 8
  %36 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %35, i32 0, i32 12
  %37 = load i32, i32* %36, align 8
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %58, label %39

39:                                               ; preds = %34
  %40 = load %struct.alloc_state_s*, %struct.alloc_state_s** %9, align 8
  %41 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %40, i32 0, i32 0
  %42 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %41, i32 0, i32 4
  %43 = load i32, i32* %42, align 8
  %44 = load %struct.alloc_state_s*, %struct.alloc_state_s** %9, align 8
  %45 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %44, i32 0, i32 12
  %46 = load i32, i32* %45, align 8
  %47 = icmp sge i32 %43, %46
  br i1 %47, label %58, label %48

48:                                               ; preds = %39
  %49 = load i8*, i8** %5, align 8
  %50 = load %struct.alloc_state_s*, %struct.alloc_state_s** %9, align 8
  %51 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %50, i32 0, i32 11
  %52 = load %struct.alloc_save_s*, %struct.alloc_save_s** %51, align 8
  %53 = getelementptr inbounds %struct.alloc_save_s, %struct.alloc_save_s* %52, i32 0, i32 0
  %54 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %53, i32 0, i32 0
  %55 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %54, i32 0, i32 2
  %56 = load i8*, i8** %55, align 8
  %57 = icmp ult i8* %49, %56
  br i1 %57, label %58, label %66

58:                                               ; preds = %48, %39, %34
  %59 = load i32, i32* %10, align 4
  %60 = load %struct.alloc_state_s*, %struct.alloc_state_s** %9, align 8
  %61 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %60, i32 0, i32 0
  %62 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %61, i32 0, i32 2
  %63 = load i8*, i8** %62, align 8
  %64 = zext i32 %59 to i64
  %65 = getelementptr inbounds i8, i8* %63, i64 %64
  store i8* %65, i8** %62, align 8
  br label %66

66:                                               ; preds = %58, %48
  br label %212

67:                                               ; preds = %27
  %68 = load i8*, i8** %5, align 8
  %69 = load i32, i32* %10, align 4
  %70 = add i32 %69, 7
  %71 = and i32 %70, -8
  store i32 %71, i32* %11, align 4
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds i8, i8* %68, i64 %72
  %74 = load %struct.alloc_state_s*, %struct.alloc_state_s** %9, align 8
  %75 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %74, i32 0, i32 0
  %76 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %75, i32 0, i32 1
  %77 = load i8*, i8** %76, align 8
  %78 = icmp eq i8* %73, %77
  br i1 %78, label %79, label %109

79:                                               ; preds = %67
  %80 = load %struct.alloc_state_s*, %struct.alloc_state_s** %9, align 8
  %81 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %80, i32 0, i32 12
  %82 = load i32, i32* %81, align 8
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %103, label %84

84:                                               ; preds = %79
  %85 = load %struct.alloc_state_s*, %struct.alloc_state_s** %9, align 8
  %86 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %85, i32 0, i32 0
  %87 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %86, i32 0, i32 4
  %88 = load i32, i32* %87, align 8
  %89 = load %struct.alloc_state_s*, %struct.alloc_state_s** %9, align 8
  %90 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %89, i32 0, i32 12
  %91 = load i32, i32* %90, align 8
  %92 = icmp sge i32 %88, %91
  br i1 %92, label %103, label %93

93:                                               ; preds = %84
  %94 = load i8*, i8** %5, align 8
  %95 = load %struct.alloc_state_s*, %struct.alloc_state_s** %9, align 8
  %96 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %95, i32 0, i32 11
  %97 = load %struct.alloc_save_s*, %struct.alloc_save_s** %96, align 8
  %98 = getelementptr inbounds %struct.alloc_save_s, %struct.alloc_save_s* %97, i32 0, i32 0
  %99 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %98, i32 0, i32 0
  %100 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %99, i32 0, i32 1
  %101 = load i8*, i8** %100, align 8
  %102 = icmp uge i8* %94, %101
  br i1 %102, label %103, label %108

103:                                              ; preds = %93, %84, %79
  %104 = load i8*, i8** %5, align 8
  %105 = load %struct.alloc_state_s*, %struct.alloc_state_s** %9, align 8
  %106 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %105, i32 0, i32 0
  %107 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %106, i32 0, i32 1
  store i8* %104, i8** %107, align 8
  br label %108

108:                                              ; preds = %103, %93
  br label %212

109:                                              ; preds = %67
  %110 = load %struct.alloc_state_s*, %struct.alloc_state_s** %9, align 8
  %111 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %110, i32 0, i32 0
  %112 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %111, i32 0, i32 0
  %113 = load i8*, i8** %112, align 8
  %114 = load i8*, i8** %5, align 8
  %115 = icmp ule i8* %113, %114
  br i1 %115, label %116, label %123

116:                                              ; preds = %109
  %117 = load i8*, i8** %5, align 8
  %118 = load %struct.alloc_state_s*, %struct.alloc_state_s** %9, align 8
  %119 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %118, i32 0, i32 0
  %120 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %119, i32 0, i32 3
  %121 = load i8*, i8** %120, align 8
  %122 = icmp ult i8* %117, %121
  br i1 %122, label %180, label %123

123:                                              ; preds = %116, %109
  %124 = load %struct.alloc_state_s*, %struct.alloc_state_s** %9, align 8
  %125 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %124, i32 0, i32 12
  %126 = load i32, i32* %125, align 8
  store i32 %126, i32* %12, align 4
  %127 = load %struct.alloc_state_s*, %struct.alloc_state_s** %9, align 8
  %128 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %127, i32 0, i32 0
  %129 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %128, i32 0, i32 5
  %130 = load %struct.alloc_chunk_s*, %struct.alloc_chunk_s** %129, align 8
  store %struct.alloc_chunk_s* %130, %struct.alloc_chunk_s** %13, align 8
  br label %131

131:                                              ; preds = %175, %123
  %132 = load %struct.alloc_chunk_s*, %struct.alloc_chunk_s** %13, align 8
  %133 = icmp ne %struct.alloc_chunk_s* %132, null
  br i1 %133, label %134, label %174

134:                                              ; preds = %131
  %135 = load %struct.alloc_chunk_s*, %struct.alloc_chunk_s** %13, align 8
  %136 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %135, i32 0, i32 4
  %137 = load i32, i32* %136, align 8
  %138 = load i32, i32* %12, align 4
  %139 = sub nsw i32 %137, %138
  switch i32 %139, label %173 [
    i32 0, label %140
    i32 -1, label %161
  ]

140:                                              ; preds = %134
  %141 = load %struct.alloc_chunk_s*, %struct.alloc_chunk_s** %13, align 8
  %142 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %141, i32 0, i32 0
  %143 = load i8*, i8** %142, align 8
  %144 = load i8*, i8** %5, align 8
  %145 = icmp ule i8* %143, %144
  br i1 %145, label %146, label %160

146:                                              ; preds = %140
  %147 = load i8*, i8** %5, align 8
  %148 = load %struct.alloc_chunk_s*, %struct.alloc_chunk_s** %13, align 8
  %149 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %148, i32 0, i32 3
  %150 = load i8*, i8** %149, align 8
  %151 = icmp ult i8* %147, %150
  br i1 %151, label %152, label %160

152:                                              ; preds = %146
  %153 = load i8*, i8** %5, align 8
  %154 = load %struct.alloc_chunk_s*, %struct.alloc_chunk_s** %13, align 8
  %155 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %154, i32 0, i32 1
  %156 = load i8*, i8** %155, align 8
  %157 = icmp ult i8* %153, %156
  br i1 %157, label %158, label %159

158:                                              ; preds = %152
  br label %179

159:                                              ; preds = %152
  br label %173

160:                                              ; preds = %146, %140
  br label %175

161:                                              ; preds = %134
  %162 = load i8*, i8** %5, align 8
  %163 = load %struct.alloc_state_s*, %struct.alloc_state_s** %9, align 8
  %164 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %163, i32 0, i32 11
  %165 = load %struct.alloc_save_s*, %struct.alloc_save_s** %164, align 8
  %166 = getelementptr inbounds %struct.alloc_save_s, %struct.alloc_save_s* %165, i32 0, i32 0
  %167 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %166, i32 0, i32 0
  %168 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %167, i32 0, i32 1
  %169 = load i8*, i8** %168, align 8
  %170 = icmp ult i8* %162, %169
  br i1 %170, label %171, label %172

171:                                              ; preds = %161
  br label %179

172:                                              ; preds = %161
  br label %173

173:                                              ; preds = %172, %159, %134
  br label %174

174:                                              ; preds = %173, %131
  br label %212

175:                                              ; preds = %160
  %176 = load %struct.alloc_chunk_s*, %struct.alloc_chunk_s** %13, align 8
  %177 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %176, i32 0, i32 5
  %178 = load %struct.alloc_chunk_s*, %struct.alloc_chunk_s** %177, align 8
  store %struct.alloc_chunk_s* %178, %struct.alloc_chunk_s** %13, align 8
  br label %131

179:                                              ; preds = %171, %158
  br label %189

180:                                              ; preds = %116
  %181 = load i8*, i8** %5, align 8
  %182 = load %struct.alloc_state_s*, %struct.alloc_state_s** %9, align 8
  %183 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %182, i32 0, i32 0
  %184 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %183, i32 0, i32 1
  %185 = load i8*, i8** %184, align 8
  %186 = icmp uge i8* %181, %185
  br i1 %186, label %187, label %188

187:                                              ; preds = %180
  br label %212

188:                                              ; preds = %180
  br label %189

189:                                              ; preds = %188, %179
  br label %190

190:                                              ; preds = %189
  br label %191

191:                                              ; preds = %190
  br label %192

192:                                              ; preds = %191
  %193 = load i32, i32* %11, align 4
  %194 = icmp ule i32 %193, 255
  br i1 %194, label %195, label %212

195:                                              ; preds = %192
  %196 = load i32, i32* %11, align 4
  %197 = zext i32 %196 to i64
  %198 = icmp uge i64 %197, 8
  br i1 %198, label %199, label %212

199:                                              ; preds = %195
  %200 = load %struct.alloc_state_s*, %struct.alloc_state_s** %9, align 8
  %201 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %200, i32 0, i32 9
  %202 = load i32, i32* %11, align 4
  %203 = lshr i32 %202, 3
  %204 = zext i32 %203 to i64
  %205 = getelementptr inbounds [32 x i8*], [32 x i8*]* %201, i64 0, i64 %204
  store i8** %205, i8*** %14, align 8
  %206 = load i8**, i8*** %14, align 8
  %207 = load i8*, i8** %206, align 8
  %208 = load i8*, i8** %5, align 8
  %209 = bitcast i8* %208 to i8**
  store i8* %207, i8** %209, align 8
  %210 = load i8*, i8** %5, align 8
  %211 = load i8**, i8*** %14, align 8
  store i8* %210, i8** %211, align 8
  br label %212

212:                                              ; preds = %199, %195, %192, %187, %174, %108, %66, %23
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @alloc_free_large(i8* %0, i32 %1, i8* %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca %struct.alloc_block_s**, align 8
  %8 = alloca %struct.alloc_block_s*, align 8
  %9 = alloca %struct.alloc_state_s*, align 8
  store i8* %0, i8** %4, align 8
  store i32 %1, i32* %5, align 4
  store i8* %2, i8** %6, align 8
  %10 = load i8*, i8** %4, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 -24
  %12 = bitcast i8* %11 to %struct.alloc_block_s*
  store %struct.alloc_block_s* %12, %struct.alloc_block_s** %8, align 8
  %13 = load %struct.alloc_block_s*, %struct.alloc_block_s** %8, align 8
  %14 = getelementptr inbounds %struct.alloc_block_s, %struct.alloc_block_s* %13, i32 0, i32 3
  %15 = load %struct.alloc_state_s*, %struct.alloc_state_s** %14, align 8
  store %struct.alloc_state_s* %15, %struct.alloc_state_s** %9, align 8
  %16 = load %struct.alloc_block_s*, %struct.alloc_block_s** %8, align 8
  %17 = getelementptr inbounds %struct.alloc_block_s, %struct.alloc_block_s* %16, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = load %struct.alloc_state_s*, %struct.alloc_state_s** %9, align 8
  %20 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %19, i32 0, i32 12
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %18, %21
  br i1 %22, label %23, label %55

23:                                               ; preds = %3
  %24 = load %struct.alloc_state_s*, %struct.alloc_state_s** %9, align 8
  %25 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %24, i32 0, i32 10
  store %struct.alloc_block_s** %25, %struct.alloc_block_s*** %7, align 8
  br label %26

26:                                               ; preds = %51, %23
  %27 = load %struct.alloc_block_s**, %struct.alloc_block_s*** %7, align 8
  %28 = load %struct.alloc_block_s*, %struct.alloc_block_s** %27, align 8
  %29 = icmp ne %struct.alloc_block_s* %28, null
  br i1 %29, label %30, label %54

30:                                               ; preds = %26
  %31 = load %struct.alloc_block_s**, %struct.alloc_block_s*** %7, align 8
  %32 = load %struct.alloc_block_s*, %struct.alloc_block_s** %31, align 8
  store %struct.alloc_block_s* %32, %struct.alloc_block_s** %8, align 8
  %33 = load %struct.alloc_block_s*, %struct.alloc_block_s** %8, align 8
  %34 = bitcast %struct.alloc_block_s* %33 to i8*
  %35 = getelementptr inbounds i8, i8* %34, i64 24
  %36 = load i8*, i8** %4, align 8
  %37 = icmp eq i8* %35, %36
  br i1 %37, label %38, label %50

38:                                               ; preds = %30
  %39 = load %struct.alloc_block_s*, %struct.alloc_block_s** %8, align 8
  %40 = getelementptr inbounds %struct.alloc_block_s, %struct.alloc_block_s* %39, i32 0, i32 0
  %41 = load %struct.alloc_block_s*, %struct.alloc_block_s** %40, align 8
  %42 = load %struct.alloc_block_s**, %struct.alloc_block_s*** %7, align 8
  store %struct.alloc_block_s* %41, %struct.alloc_block_s** %42, align 8
  %43 = load %struct.alloc_state_s*, %struct.alloc_state_s** %9, align 8
  %44 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %43, i32 0, i32 5
  %45 = load void (i8*, i32, i32, i8*)*, void (i8*, i32, i32, i8*)** %44, align 8
  %46 = load %struct.alloc_block_s*, %struct.alloc_block_s** %8, align 8
  %47 = bitcast %struct.alloc_block_s* %46 to i8*
  %48 = load i32, i32* %5, align 4
  %49 = add i32 %48, 24
  call void %45(i8* %47, i32 1, i32 %49, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6.216, i64 0, i64 0))
  br label %55

50:                                               ; preds = %30
  br label %51

51:                                               ; preds = %50
  %52 = load %struct.alloc_block_s*, %struct.alloc_block_s** %8, align 8
  %53 = getelementptr inbounds %struct.alloc_block_s, %struct.alloc_block_s* %52, i32 0, i32 0
  store %struct.alloc_block_s** %53, %struct.alloc_block_s*** %7, align 8
  br label %26

54:                                               ; preds = %26
  br label %55

55:                                               ; preds = %54, %38, %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @alloc_grow(i8* %0, i32 %1, i32 %2, i32 %3, i8* %4) #0 {
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  %12 = alloca %struct.alloc_state_s*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i8*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  store i8* %0, i8** %7, align 8
  store i32 %1, i32* %8, align 4
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store i8* %4, i8** %11, align 8
  store %struct.alloc_state_s* @as_current, %struct.alloc_state_s** %12, align 8
  %20 = load i32, i32* %8, align 4
  %21 = load i32, i32* %10, align 4
  %22 = mul i32 %20, %21
  store i32 %22, i32* %13, align 4
  %23 = load i32, i32* %9, align 4
  %24 = load i32, i32* %10, align 4
  %25 = mul i32 %23, %24
  store i32 %25, i32* %14, align 4
  %26 = load i32, i32* %14, align 4
  %27 = load i32, i32* %13, align 4
  %28 = icmp eq i32 %26, %27
  br i1 %28, label %29, label %31

29:                                               ; preds = %5
  %30 = load i8*, i8** %7, align 8
  store i8* %30, i8** %6, align 8
  br label %146

31:                                               ; preds = %5
  %32 = load i32, i32* %14, align 4
  %33 = load %struct.alloc_state_s*, %struct.alloc_state_s** %12, align 8
  %34 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %33, i32 0, i32 3
  %35 = load i32, i32* %34, align 4
  %36 = icmp ult i32 %32, %35
  br i1 %36, label %37, label %128

37:                                               ; preds = %31
  %38 = load i8*, i8** %7, align 8
  %39 = load %struct.alloc_state_s*, %struct.alloc_state_s** %12, align 8
  %40 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %39, i32 0, i32 0
  %41 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %40, i32 0, i32 2
  %42 = load i8*, i8** %41, align 8
  %43 = icmp eq i8* %38, %42
  br i1 %43, label %44, label %83

44:                                               ; preds = %37
  %45 = load i32, i32* %14, align 4
  %46 = load i32, i32* %13, align 4
  %47 = sub i32 %45, %46
  store i32 %47, i32* %18, align 4
  %48 = load i32, i32* %18, align 4
  %49 = zext i32 %48 to i64
  %50 = load %struct.alloc_state_s*, %struct.alloc_state_s** %12, align 8
  %51 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %50, i32 0, i32 0
  %52 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %51, i32 0, i32 2
  %53 = load i8*, i8** %52, align 8
  %54 = load %struct.alloc_state_s*, %struct.alloc_state_s** %12, align 8
  %55 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %54, i32 0, i32 0
  %56 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %55, i32 0, i32 1
  %57 = load i8*, i8** %56, align 8
  %58 = ptrtoint i8* %53 to i64
  %59 = ptrtoint i8* %57 to i64
  %60 = sub i64 %58, %59
  %61 = icmp sle i64 %49, %60
  br i1 %61, label %62, label %82

62:                                               ; preds = %44
  %63 = load i32, i32* %18, align 4
  %64 = load %struct.alloc_state_s*, %struct.alloc_state_s** %12, align 8
  %65 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %64, i32 0, i32 0
  %66 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %65, i32 0, i32 2
  %67 = load i8*, i8** %66, align 8
  %68 = zext i32 %63 to i64
  %69 = sub i64 0, %68
  %70 = getelementptr inbounds i8, i8* %67, i64 %69
  store i8* %70, i8** %66, align 8
  %71 = load %struct.alloc_state_s*, %struct.alloc_state_s** %12, align 8
  %72 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %71, i32 0, i32 0
  %73 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %72, i32 0, i32 2
  %74 = load i8*, i8** %73, align 8
  %75 = load i8*, i8** %7, align 8
  %76 = load i32, i32* %13, align 4
  %77 = zext i32 %76 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %74, i8* align 1 %75, i64 %77, i1 false)
  %78 = load %struct.alloc_state_s*, %struct.alloc_state_s** %12, align 8
  %79 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %78, i32 0, i32 0
  %80 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %79, i32 0, i32 2
  %81 = load i8*, i8** %80, align 8
  store i8* %81, i8** %6, align 8
  br label %146

82:                                               ; preds = %44
  br label %83

83:                                               ; preds = %82, %37
  %84 = load i32, i32* %13, align 4
  %85 = add i32 %84, 7
  %86 = and i32 %85, -8
  store i32 %86, i32* %16, align 4
  %87 = load i32, i32* %14, align 4
  %88 = add i32 %87, 7
  %89 = and i32 %88, -8
  store i32 %89, i32* %17, align 4
  %90 = load i8*, i8** %7, align 8
  %91 = load i32, i32* %16, align 4
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds i8, i8* %90, i64 %92
  %94 = load %struct.alloc_state_s*, %struct.alloc_state_s** %12, align 8
  %95 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %94, i32 0, i32 0
  %96 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %95, i32 0, i32 1
  %97 = load i8*, i8** %96, align 8
  %98 = icmp eq i8* %93, %97
  br i1 %98, label %99, label %127

99:                                               ; preds = %83
  %100 = load i32, i32* %17, align 4
  %101 = load i32, i32* %16, align 4
  %102 = sub i32 %100, %101
  store i32 %102, i32* %19, align 4
  %103 = load i32, i32* %19, align 4
  %104 = zext i32 %103 to i64
  %105 = load %struct.alloc_state_s*, %struct.alloc_state_s** %12, align 8
  %106 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %105, i32 0, i32 0
  %107 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %106, i32 0, i32 2
  %108 = load i8*, i8** %107, align 8
  %109 = load %struct.alloc_state_s*, %struct.alloc_state_s** %12, align 8
  %110 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %109, i32 0, i32 0
  %111 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %110, i32 0, i32 1
  %112 = load i8*, i8** %111, align 8
  %113 = ptrtoint i8* %108 to i64
  %114 = ptrtoint i8* %112 to i64
  %115 = sub i64 %113, %114
  %116 = icmp sle i64 %104, %115
  br i1 %116, label %117, label %126

117:                                              ; preds = %99
  %118 = load i32, i32* %19, align 4
  %119 = load %struct.alloc_state_s*, %struct.alloc_state_s** %12, align 8
  %120 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %119, i32 0, i32 0
  %121 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %120, i32 0, i32 1
  %122 = load i8*, i8** %121, align 8
  %123 = zext i32 %118 to i64
  %124 = getelementptr inbounds i8, i8* %122, i64 %123
  store i8* %124, i8** %121, align 8
  %125 = load i8*, i8** %7, align 8
  store i8* %125, i8** %6, align 8
  br label %146

126:                                              ; preds = %99
  br label %127

127:                                              ; preds = %126, %83
  br label %128

128:                                              ; preds = %127, %31
  %129 = load i32, i32* %9, align 4
  %130 = load i32, i32* %10, align 4
  %131 = load i8*, i8** %11, align 8
  %132 = call i8* @alloc(i32 %129, i32 %130, i8* %131)
  store i8* %132, i8** %15, align 8
  %133 = load i8*, i8** %15, align 8
  %134 = icmp eq i8* %133, null
  br i1 %134, label %135, label %136

135:                                              ; preds = %128
  store i8* null, i8** %6, align 8
  br label %146

136:                                              ; preds = %128
  %137 = load i8*, i8** %15, align 8
  %138 = load i8*, i8** %7, align 8
  %139 = load i32, i32* %13, align 4
  %140 = zext i32 %139 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %137, i8* align 1 %138, i64 %140, i1 false)
  %141 = load i8*, i8** %7, align 8
  %142 = load i32, i32* %8, align 4
  %143 = load i32, i32* %10, align 4
  %144 = load i8*, i8** %11, align 8
  call void @alloc_free(i8* %141, i32 %142, i32 %143, i8* %144)
  %145 = load i8*, i8** %15, align 8
  store i8* %145, i8** %6, align 8
  br label %146

146:                                              ; preds = %136, %135, %117, %62, %29
  %147 = load i8*, i8** %6, align 8
  ret i8* %147
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @alloc_shrink(i8* %0, i32 %1, i32 %2, i32 %3, i8* %4) #0 {
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  %12 = alloca %struct.alloc_state_s*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i32, align 4
  store i8* %0, i8** %7, align 8
  store i32 %1, i32* %8, align 4
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store i8* %4, i8** %11, align 8
  store %struct.alloc_state_s* @as_current, %struct.alloc_state_s** %12, align 8
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %10, align 4
  %21 = mul i32 %19, %20
  store i32 %21, i32* %13, align 4
  %22 = load i32, i32* %9, align 4
  %23 = load i32, i32* %10, align 4
  %24 = mul i32 %22, %23
  store i32 %24, i32* %14, align 4
  %25 = load i32, i32* %14, align 4
  %26 = load i32, i32* %13, align 4
  %27 = icmp eq i32 %25, %26
  br i1 %27, label %28, label %30

28:                                               ; preds = %5
  %29 = load i8*, i8** %7, align 8
  store i8* %29, i8** %6, align 8
  br label %102

30:                                               ; preds = %5
  %31 = load i32, i32* %13, align 4
  %32 = load %struct.alloc_state_s*, %struct.alloc_state_s** %12, align 8
  %33 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %32, i32 0, i32 3
  %34 = load i32, i32* %33, align 4
  %35 = icmp uge i32 %31, %34
  br i1 %35, label %36, label %55

36:                                               ; preds = %30
  %37 = load i32, i32* %9, align 4
  %38 = load i32, i32* %10, align 4
  %39 = load i8*, i8** %11, align 8
  %40 = call i8* @alloc(i32 %37, i32 %38, i8* %39)
  store i8* %40, i8** %15, align 8
  %41 = load i8*, i8** %15, align 8
  %42 = icmp eq i8* %41, null
  br i1 %42, label %43, label %45

43:                                               ; preds = %36
  %44 = load i8*, i8** %7, align 8
  store i8* %44, i8** %6, align 8
  br label %102

45:                                               ; preds = %36
  %46 = load i8*, i8** %15, align 8
  %47 = load i8*, i8** %7, align 8
  %48 = load i32, i32* %14, align 4
  %49 = zext i32 %48 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %46, i8* align 1 %47, i64 %49, i1 false)
  %50 = load i8*, i8** %7, align 8
  %51 = load i32, i32* %8, align 4
  %52 = load i32, i32* %10, align 4
  %53 = load i8*, i8** %11, align 8
  call void @alloc_free(i8* %50, i32 %51, i32 %52, i8* %53)
  %54 = load i8*, i8** %15, align 8
  store i8* %54, i8** %6, align 8
  br label %102

55:                                               ; preds = %30
  %56 = load i8*, i8** %7, align 8
  %57 = load %struct.alloc_state_s*, %struct.alloc_state_s** %12, align 8
  %58 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %57, i32 0, i32 0
  %59 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %58, i32 0, i32 2
  %60 = load i8*, i8** %59, align 8
  %61 = icmp eq i8* %56, %60
  br i1 %61, label %62, label %86

62:                                               ; preds = %55
  %63 = load i8*, i8** %7, align 8
  %64 = load i32, i32* %14, align 4
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds i8, i8* %63, i64 %65
  store i8* %66, i8** %16, align 8
  %67 = load i8*, i8** %7, align 8
  %68 = load i32, i32* %13, align 4
  %69 = zext i32 %68 to i64
  %70 = getelementptr inbounds i8, i8* %67, i64 %69
  store i8* %70, i8** %17, align 8
  br label %71

71:                                               ; preds = %75, %62
  %72 = load i8*, i8** %16, align 8
  %73 = load i8*, i8** %7, align 8
  %74 = icmp ugt i8* %72, %73
  br i1 %74, label %75, label %81

75:                                               ; preds = %71
  %76 = load i8*, i8** %16, align 8
  %77 = getelementptr inbounds i8, i8* %76, i32 -1
  store i8* %77, i8** %16, align 8
  %78 = load i8, i8* %77, align 1
  %79 = load i8*, i8** %17, align 8
  %80 = getelementptr inbounds i8, i8* %79, i32 -1
  store i8* %80, i8** %17, align 8
  store i8 %78, i8* %80, align 1
  br label %71

81:                                               ; preds = %71
  %82 = load i8*, i8** %17, align 8
  %83 = load %struct.alloc_state_s*, %struct.alloc_state_s** %12, align 8
  %84 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %83, i32 0, i32 0
  %85 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %84, i32 0, i32 2
  store i8* %82, i8** %85, align 8
  store i8* %82, i8** %7, align 8
  br label %99

86:                                               ; preds = %55
  %87 = load i32, i32* %14, align 4
  %88 = add i32 %87, 7
  %89 = and i32 %88, -8
  store i32 %89, i32* %18, align 4
  %90 = load i8*, i8** %7, align 8
  %91 = load i32, i32* %18, align 4
  %92 = zext i32 %91 to i64
  %93 = getelementptr inbounds i8, i8* %90, i64 %92
  %94 = load i32, i32* %13, align 4
  %95 = add i32 %94, 7
  %96 = and i32 %95, -8
  %97 = load i32, i32* %18, align 4
  %98 = sub i32 %96, %97
  call void @alloc_free(i8* %93, i32 1, i32 %98, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.217, i64 0, i64 0))
  br label %99

99:                                               ; preds = %86, %81
  br label %100

100:                                              ; preds = %99
  %101 = load i8*, i8** %7, align 8
  store i8* %101, i8** %6, align 8
  br label %102

102:                                              ; preds = %100, %45, %43, %28
  %103 = load i8*, i8** %6, align 8
  ret i8* %103
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.alloc_save_s* @alloc_save_state() #0 {
  %1 = alloca %struct.alloc_save_s*, align 8
  %2 = alloca %struct.alloc_state_s*, align 8
  %3 = alloca %struct.alloc_save_s*, align 8
  store %struct.alloc_state_s* @as_current, %struct.alloc_state_s** %2, align 8
  %4 = call i8* @alloc(i32 1, i32 400, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.218, i64 0, i64 0))
  %5 = bitcast i8* %4 to %struct.alloc_save_s*
  store %struct.alloc_save_s* %5, %struct.alloc_save_s** %3, align 8
  %6 = load %struct.alloc_save_s*, %struct.alloc_save_s** %3, align 8
  %7 = icmp eq %struct.alloc_save_s* %6, null
  br i1 %7, label %8, label %9

8:                                                ; preds = %0
  store %struct.alloc_save_s* null, %struct.alloc_save_s** %1, align 8
  br label %31

9:                                                ; preds = %0
  %10 = load %struct.alloc_save_s*, %struct.alloc_save_s** %3, align 8
  %11 = getelementptr inbounds %struct.alloc_save_s, %struct.alloc_save_s* %10, i32 0, i32 0
  %12 = load %struct.alloc_state_s*, %struct.alloc_state_s** %2, align 8
  %13 = bitcast %struct.alloc_state_s* %11 to i8*
  %14 = bitcast %struct.alloc_state_s* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 %14, i64 392, i1 false)
  %15 = load %struct.alloc_state_s*, %struct.alloc_state_s** %2, align 8
  %16 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %15, i32 0, i32 9
  %17 = getelementptr inbounds [32 x i8*], [32 x i8*]* %16, i64 0, i64 0
  %18 = bitcast i8** %17 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 256, i1 false)
  %19 = load %struct.alloc_state_s*, %struct.alloc_state_s** %2, align 8
  %20 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %19, i32 0, i32 10
  store %struct.alloc_block_s* null, %struct.alloc_block_s** %20, align 8
  %21 = load %struct.alloc_save_s*, %struct.alloc_save_s** %3, align 8
  %22 = load %struct.alloc_state_s*, %struct.alloc_state_s** %2, align 8
  %23 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %22, i32 0, i32 11
  store %struct.alloc_save_s* %21, %struct.alloc_save_s** %23, align 8
  %24 = load %struct.alloc_state_s*, %struct.alloc_state_s** %2, align 8
  %25 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %24, i32 0, i32 12
  %26 = load i32, i32* %25, align 8
  %27 = add nsw i32 %26, 1
  store i32 %27, i32* %25, align 8
  %28 = load %struct.alloc_state_s*, %struct.alloc_state_s** %2, align 8
  %29 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %28, i32 0, i32 13
  store %struct.alloc_change_s* null, %struct.alloc_change_s** %29, align 8
  %30 = load %struct.alloc_save_s*, %struct.alloc_save_s** %3, align 8
  store %struct.alloc_save_s* %30, %struct.alloc_save_s** %1, align 8
  br label %31

31:                                               ; preds = %9, %8
  %32 = load %struct.alloc_save_s*, %struct.alloc_save_s** %1, align 8
  ret %struct.alloc_save_s* %32
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @alloc_save_change(i8* %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct.alloc_state_s*, align 8
  %7 = alloca %struct.alloc_change_s*, align 8
  store i8* %0, i8** %4, align 8
  store i32 %1, i32* %5, align 4
  store %struct.alloc_state_s* @as_current, %struct.alloc_state_s** %6, align 8
  %8 = load %struct.alloc_state_s*, %struct.alloc_state_s** %6, align 8
  %9 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %8, i32 0, i32 12
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  store i32 0, i32* %3, align 4
  br label %44

13:                                               ; preds = %2
  %14 = load i32, i32* %5, align 4
  %15 = zext i32 %14 to i64
  %16 = add i64 24, %15
  %17 = trunc i64 %16 to i32
  %18 = call i8* @alloc(i32 1, i32 %17, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2.219, i64 0, i64 0))
  %19 = bitcast i8* %18 to %struct.alloc_change_s*
  store %struct.alloc_change_s* %19, %struct.alloc_change_s** %7, align 8
  %20 = load %struct.alloc_change_s*, %struct.alloc_change_s** %7, align 8
  %21 = icmp eq %struct.alloc_change_s* %20, null
  br i1 %21, label %22, label %23

22:                                               ; preds = %13
  store i32 -1, i32* %3, align 4
  br label %44

23:                                               ; preds = %13
  %24 = load %struct.alloc_state_s*, %struct.alloc_state_s** %6, align 8
  %25 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %24, i32 0, i32 13
  %26 = load %struct.alloc_change_s*, %struct.alloc_change_s** %25, align 8
  %27 = load %struct.alloc_change_s*, %struct.alloc_change_s** %7, align 8
  %28 = getelementptr inbounds %struct.alloc_change_s, %struct.alloc_change_s* %27, i32 0, i32 0
  store %struct.alloc_change_s* %26, %struct.alloc_change_s** %28, align 8
  %29 = load i8*, i8** %4, align 8
  %30 = load %struct.alloc_change_s*, %struct.alloc_change_s** %7, align 8
  %31 = getelementptr inbounds %struct.alloc_change_s, %struct.alloc_change_s* %30, i32 0, i32 1
  store i8* %29, i8** %31, align 8
  %32 = load i32, i32* %5, align 4
  %33 = load %struct.alloc_change_s*, %struct.alloc_change_s** %7, align 8
  %34 = getelementptr inbounds %struct.alloc_change_s, %struct.alloc_change_s* %33, i32 0, i32 2
  store i32 %32, i32* %34, align 8
  %35 = load %struct.alloc_change_s*, %struct.alloc_change_s** %7, align 8
  %36 = bitcast %struct.alloc_change_s* %35 to i8*
  %37 = getelementptr inbounds i8, i8* %36, i64 24
  %38 = load i8*, i8** %4, align 8
  %39 = load i32, i32* %5, align 4
  %40 = zext i32 %39 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %37, i8* align 1 %38, i64 %40, i1 false)
  %41 = load %struct.alloc_change_s*, %struct.alloc_change_s** %7, align 8
  %42 = load %struct.alloc_state_s*, %struct.alloc_state_s** %6, align 8
  %43 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %42, i32 0, i32 13
  store %struct.alloc_change_s* %41, %struct.alloc_change_s** %43, align 8
  store i32 0, i32* %3, align 4
  br label %44

44:                                               ; preds = %23, %22, %12
  %45 = load i32, i32* %3, align 4
  ret i32 %45
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @alloc_save_level() #0 {
  %1 = load i32, i32* getelementptr inbounds (%struct.alloc_state_s, %struct.alloc_state_s* @as_current, i32 0, i32 12), align 8
  ret i32 %1
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @alloc_is_since_save(i8* %0, %struct.alloc_save_s* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca %struct.alloc_save_s*, align 8
  %6 = alloca %struct.alloc_state_s*, align 8
  %7 = alloca %struct.alloc_chunk_s*, align 8
  %8 = alloca %struct.alloc_state_s*, align 8
  %9 = alloca %struct.alloc_block_s*, align 8
  store i8* %0, i8** %4, align 8
  store %struct.alloc_save_s* %1, %struct.alloc_save_s** %5, align 8
  %10 = load %struct.alloc_save_s*, %struct.alloc_save_s** %5, align 8
  %11 = getelementptr inbounds %struct.alloc_save_s, %struct.alloc_save_s* %10, i32 0, i32 1
  %12 = load %struct.alloc_state_s*, %struct.alloc_state_s** %11, align 8
  store %struct.alloc_state_s* %12, %struct.alloc_state_s** %6, align 8
  %13 = load %struct.alloc_save_s*, %struct.alloc_save_s** %5, align 8
  %14 = getelementptr inbounds %struct.alloc_save_s, %struct.alloc_save_s* %13, i32 0, i32 0
  %15 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %14, i32 0, i32 0
  %16 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %15, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = load i8*, i8** %4, align 8
  %19 = icmp ule i8* %17, %18
  br i1 %19, label %20, label %47

20:                                               ; preds = %2
  %21 = load i8*, i8** %4, align 8
  %22 = load %struct.alloc_save_s*, %struct.alloc_save_s** %5, align 8
  %23 = getelementptr inbounds %struct.alloc_save_s, %struct.alloc_save_s* %22, i32 0, i32 0
  %24 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %23, i32 0, i32 0
  %25 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %24, i32 0, i32 3
  %26 = load i8*, i8** %25, align 8
  %27 = icmp ult i8* %21, %26
  br i1 %27, label %28, label %47

28:                                               ; preds = %20
  %29 = load i8*, i8** %4, align 8
  %30 = load %struct.alloc_save_s*, %struct.alloc_save_s** %5, align 8
  %31 = getelementptr inbounds %struct.alloc_save_s, %struct.alloc_save_s* %30, i32 0, i32 0
  %32 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %31, i32 0, i32 0
  %33 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %32, i32 0, i32 1
  %34 = load i8*, i8** %33, align 8
  %35 = icmp uge i8* %29, %34
  br i1 %35, label %36, label %44

36:                                               ; preds = %28
  %37 = load i8*, i8** %4, align 8
  %38 = load %struct.alloc_save_s*, %struct.alloc_save_s** %5, align 8
  %39 = getelementptr inbounds %struct.alloc_save_s, %struct.alloc_save_s* %38, i32 0, i32 0
  %40 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %39, i32 0, i32 0
  %41 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %40, i32 0, i32 2
  %42 = load i8*, i8** %41, align 8
  %43 = icmp ult i8* %37, %42
  br label %44

44:                                               ; preds = %36, %28
  %45 = phi i1 [ false, %28 ], [ %43, %36 ]
  %46 = zext i1 %45 to i32
  store i32 %46, i32* %3, align 4
  br label %109

47:                                               ; preds = %20, %2
  %48 = load %struct.alloc_state_s*, %struct.alloc_state_s** %6, align 8
  %49 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %48, i32 0, i32 0
  store %struct.alloc_chunk_s* %49, %struct.alloc_chunk_s** %7, align 8
  br label %50

50:                                               ; preds = %72, %47
  %51 = load %struct.alloc_chunk_s*, %struct.alloc_chunk_s** %7, align 8
  %52 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %51, i32 0, i32 4
  %53 = load i32, i32* %52, align 8
  %54 = load %struct.alloc_save_s*, %struct.alloc_save_s** %5, align 8
  %55 = getelementptr inbounds %struct.alloc_save_s, %struct.alloc_save_s* %54, i32 0, i32 0
  %56 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %55, i32 0, i32 12
  %57 = load i32, i32* %56, align 8
  %58 = icmp sgt i32 %53, %57
  br i1 %58, label %59, label %76

59:                                               ; preds = %50
  %60 = load %struct.alloc_chunk_s*, %struct.alloc_chunk_s** %7, align 8
  %61 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %60, i32 0, i32 0
  %62 = load i8*, i8** %61, align 8
  %63 = load i8*, i8** %4, align 8
  %64 = icmp ule i8* %62, %63
  br i1 %64, label %65, label %72

65:                                               ; preds = %59
  %66 = load i8*, i8** %4, align 8
  %67 = load %struct.alloc_chunk_s*, %struct.alloc_chunk_s** %7, align 8
  %68 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %67, i32 0, i32 3
  %69 = load i8*, i8** %68, align 8
  %70 = icmp ult i8* %66, %69
  br i1 %70, label %71, label %72

71:                                               ; preds = %65
  store i32 1, i32* %3, align 4
  br label %109

72:                                               ; preds = %65, %59
  %73 = load %struct.alloc_chunk_s*, %struct.alloc_chunk_s** %7, align 8
  %74 = getelementptr inbounds %struct.alloc_chunk_s, %struct.alloc_chunk_s* %73, i32 0, i32 5
  %75 = load %struct.alloc_chunk_s*, %struct.alloc_chunk_s** %74, align 8
  store %struct.alloc_chunk_s* %75, %struct.alloc_chunk_s** %7, align 8
  br label %50

76:                                               ; preds = %50
  %77 = load %struct.alloc_state_s*, %struct.alloc_state_s** %6, align 8
  store %struct.alloc_state_s* %77, %struct.alloc_state_s** %8, align 8
  br label %78

78:                                               ; preds = %103, %76
  %79 = load %struct.alloc_state_s*, %struct.alloc_state_s** %8, align 8
  %80 = load %struct.alloc_save_s*, %struct.alloc_save_s** %5, align 8
  %81 = getelementptr inbounds %struct.alloc_save_s, %struct.alloc_save_s* %80, i32 0, i32 0
  %82 = icmp ne %struct.alloc_state_s* %79, %81
  br i1 %82, label %83, label %108

83:                                               ; preds = %78
  %84 = load %struct.alloc_state_s*, %struct.alloc_state_s** %8, align 8
  %85 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %84, i32 0, i32 10
  %86 = load %struct.alloc_block_s*, %struct.alloc_block_s** %85, align 8
  store %struct.alloc_block_s* %86, %struct.alloc_block_s** %9, align 8
  br label %87

87:                                               ; preds = %98, %83
  %88 = load %struct.alloc_block_s*, %struct.alloc_block_s** %9, align 8
  %89 = icmp ne %struct.alloc_block_s* %88, null
  br i1 %89, label %90, label %102

90:                                               ; preds = %87
  %91 = load %struct.alloc_block_s*, %struct.alloc_block_s** %9, align 8
  %92 = bitcast %struct.alloc_block_s* %91 to i8*
  %93 = getelementptr inbounds i8, i8* %92, i64 24
  %94 = load i8*, i8** %4, align 8
  %95 = icmp eq i8* %93, %94
  br i1 %95, label %96, label %97

96:                                               ; preds = %90
  store i32 1, i32* %3, align 4
  br label %109

97:                                               ; preds = %90
  br label %98

98:                                               ; preds = %97
  %99 = load %struct.alloc_block_s*, %struct.alloc_block_s** %9, align 8
  %100 = getelementptr inbounds %struct.alloc_block_s, %struct.alloc_block_s* %99, i32 0, i32 0
  %101 = load %struct.alloc_block_s*, %struct.alloc_block_s** %100, align 8
  store %struct.alloc_block_s* %101, %struct.alloc_block_s** %9, align 8
  br label %87

102:                                              ; preds = %87
  br label %103

103:                                              ; preds = %102
  %104 = load %struct.alloc_state_s*, %struct.alloc_state_s** %8, align 8
  %105 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %104, i32 0, i32 11
  %106 = load %struct.alloc_save_s*, %struct.alloc_save_s** %105, align 8
  %107 = getelementptr inbounds %struct.alloc_save_s, %struct.alloc_save_s* %106, i32 0, i32 0
  store %struct.alloc_state_s* %107, %struct.alloc_state_s** %8, align 8
  br label %78

108:                                              ; preds = %78
  store i32 0, i32* %3, align 4
  br label %109

109:                                              ; preds = %108, %96, %71, %44
  %110 = load i32, i32* %3, align 4
  ret i32 %110
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @alloc_restore_state_check(%struct.alloc_save_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.alloc_save_s*, align 8
  %4 = alloca %struct.alloc_save_s*, align 8
  store %struct.alloc_save_s* %0, %struct.alloc_save_s** %3, align 8
  %5 = load %struct.alloc_save_s*, %struct.alloc_save_s** %3, align 8
  %6 = getelementptr inbounds %struct.alloc_save_s, %struct.alloc_save_s* %5, i32 0, i32 1
  %7 = load %struct.alloc_state_s*, %struct.alloc_state_s** %6, align 8
  %8 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %7, i32 0, i32 11
  %9 = load %struct.alloc_save_s*, %struct.alloc_save_s** %8, align 8
  store %struct.alloc_save_s* %9, %struct.alloc_save_s** %4, align 8
  br label %10

10:                                               ; preds = %18, %1
  %11 = load %struct.alloc_save_s*, %struct.alloc_save_s** %4, align 8
  %12 = load %struct.alloc_save_s*, %struct.alloc_save_s** %3, align 8
  %13 = icmp ne %struct.alloc_save_s* %11, %12
  br i1 %13, label %14, label %23

14:                                               ; preds = %10
  %15 = load %struct.alloc_save_s*, %struct.alloc_save_s** %4, align 8
  %16 = icmp eq %struct.alloc_save_s* %15, null
  br i1 %16, label %17, label %18

17:                                               ; preds = %14
  store i32 -1, i32* %2, align 4
  br label %24

18:                                               ; preds = %14
  %19 = load %struct.alloc_save_s*, %struct.alloc_save_s** %4, align 8
  %20 = getelementptr inbounds %struct.alloc_save_s, %struct.alloc_save_s* %19, i32 0, i32 0
  %21 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %20, i32 0, i32 11
  %22 = load %struct.alloc_save_s*, %struct.alloc_save_s** %21, align 8
  store %struct.alloc_save_s* %22, %struct.alloc_save_s** %4, align 8
  br label %10

23:                                               ; preds = %10
  store i32 0, i32* %2, align 4
  br label %24

24:                                               ; preds = %23, %17
  %25 = load i32, i32* %2, align 4
  ret i32 %25
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @alloc_restore_state(%struct.alloc_save_s* %0) #0 {
  %2 = alloca %struct.alloc_save_s*, align 8
  %3 = alloca %struct.alloc_state_s*, align 8
  %4 = alloca %struct.alloc_save_s*, align 8
  %5 = alloca %struct.alloc_chunk_s*, align 8
  %6 = alloca %struct.alloc_block_s*, align 8
  %7 = alloca %struct.alloc_change_s*, align 8
  store %struct.alloc_save_s* %0, %struct.alloc_save_s** %2, align 8
  %8 = load %struct.alloc_save_s*, %struct.alloc_save_s** %2, align 8
  %9 = getelementptr inbounds %struct.alloc_save_s, %struct.alloc_save_s* %8, i32 0, i32 1
  %10 = load %struct.alloc_state_s*, %struct.alloc_state_s** %9, align 8
  store %struct.alloc_state_s* %10, %struct.alloc_state_s** %3, align 8
  br label %11

11:                                               ; preds = %75, %1
  %12 = load %struct.alloc_state_s*, %struct.alloc_state_s** %3, align 8
  %13 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %12, i32 0, i32 11
  %14 = load %struct.alloc_save_s*, %struct.alloc_save_s** %13, align 8
  store %struct.alloc_save_s* %14, %struct.alloc_save_s** %4, align 8
  %15 = load %struct.alloc_state_s*, %struct.alloc_state_s** %3, align 8
  %16 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %15, i32 0, i32 1
  %17 = load %struct.alloc_chunk_s*, %struct.alloc_chunk_s** %16, align 8
  store %struct.alloc_chunk_s* %17, %struct.alloc_chunk_s** %5, align 8
  %18 = load %struct.alloc_chunk_s*, %struct.alloc_chunk_s** %5, align 8
  %19 = load %struct.alloc_state_s*, %struct.alloc_state_s** %3, align 8
  %20 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %19, i32 0, i32 0
  %21 = bitcast %struct.alloc_chunk_s* %18 to i8*
  %22 = bitcast %struct.alloc_chunk_s* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 48, i1 false)
  br label %23

23:                                               ; preds = %28, %11
  %24 = load %struct.alloc_state_s*, %struct.alloc_state_s** %3, align 8
  %25 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %24, i32 0, i32 10
  %26 = load %struct.alloc_block_s*, %struct.alloc_block_s** %25, align 8
  %27 = icmp ne %struct.alloc_block_s* %26, null
  br i1 %27, label %28, label %46

28:                                               ; preds = %23
  %29 = load %struct.alloc_state_s*, %struct.alloc_state_s** %3, align 8
  %30 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %29, i32 0, i32 10
  %31 = load %struct.alloc_block_s*, %struct.alloc_block_s** %30, align 8
  store %struct.alloc_block_s* %31, %struct.alloc_block_s** %6, align 8
  %32 = load %struct.alloc_block_s*, %struct.alloc_block_s** %6, align 8
  %33 = getelementptr inbounds %struct.alloc_block_s, %struct.alloc_block_s* %32, i32 0, i32 0
  %34 = load %struct.alloc_block_s*, %struct.alloc_block_s** %33, align 8
  %35 = load %struct.alloc_state_s*, %struct.alloc_state_s** %3, align 8
  %36 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %35, i32 0, i32 10
  store %struct.alloc_block_s* %34, %struct.alloc_block_s** %36, align 8
  %37 = load %struct.alloc_state_s*, %struct.alloc_state_s** %3, align 8
  %38 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %37, i32 0, i32 5
  %39 = load void (i8*, i32, i32, i8*)*, void (i8*, i32, i32, i8*)** %38, align 8
  %40 = load %struct.alloc_block_s*, %struct.alloc_block_s** %6, align 8
  %41 = bitcast %struct.alloc_block_s* %40 to i8*
  %42 = load %struct.alloc_block_s*, %struct.alloc_block_s** %6, align 8
  %43 = getelementptr inbounds %struct.alloc_block_s, %struct.alloc_block_s* %42, i32 0, i32 1
  %44 = load i32, i32* %43, align 8
  %45 = add i32 24, %44
  call void %39(i8* %41, i32 1, i32 %45, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3.220, i64 0, i64 0))
  br label %23

46:                                               ; preds = %23
  %47 = load %struct.alloc_state_s*, %struct.alloc_state_s** %3, align 8
  %48 = getelementptr inbounds %struct.alloc_state_s, %struct.alloc_state_s* %47, i32 0, i32 13
  %49 = load %struct.alloc_change_s*, %struct.alloc_change_s** %48, align 8
  store %struct.alloc_change_s* %49, %struct.alloc_change_s** %7, align 8
  br label %50

50:                                               ; preds = %53, %46
  %51 = load %struct.alloc_change_s*, %struct.alloc_change_s** %7, align 8
  %52 = icmp ne %struct.alloc_change_s* %51, null
  br i1 %52, label %53, label %67

53:                                               ; preds = %50
  %54 = load %struct.alloc_change_s*, %struct.alloc_change_s** %7, align 8
  %55 = getelementptr inbounds %struct.alloc_change_s, %struct.alloc_change_s* %54, i32 0, i32 1
  %56 = load i8*, i8** %55, align 8
  %57 = load %struct.alloc_change_s*, %struct.alloc_change_s** %7, align 8
  %58 = bitcast %struct.alloc_change_s* %57 to i8*
  %59 = getelementptr inbounds i8, i8* %58, i64 24
  %60 = load %struct.alloc_change_s*, %struct.alloc_change_s** %7, align 8
  %61 = getelementptr inbounds %struct.alloc_change_s, %struct.alloc_change_s* %60, i32 0, i32 2
  %62 = load i32, i32* %61, align 8
  %63 = zext i32 %62 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %56, i8* align 1 %59, i64 %63, i1 false)
  %64 = load %struct.alloc_change_s*, %struct.alloc_change_s** %7, align 8
  %65 = getelementptr inbounds %struct.alloc_change_s, %struct.alloc_change_s* %64, i32 0, i32 0
  %66 = load %struct.alloc_change_s*, %struct.alloc_change_s** %65, align 8
  store %struct.alloc_change_s* %66, %struct.alloc_change_s** %7, align 8
  br label %50

67:                                               ; preds = %50
  %68 = load %struct.alloc_state_s*, %struct.alloc_state_s** %3, align 8
  %69 = load %struct.alloc_save_s*, %struct.alloc_save_s** %4, align 8
  %70 = getelementptr inbounds %struct.alloc_save_s, %struct.alloc_save_s* %69, i32 0, i32 0
  %71 = bitcast %struct.alloc_state_s* %68 to i8*
  %72 = bitcast %struct.alloc_state_s* %70 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %71, i8* align 8 %72, i64 392, i1 false)
  %73 = load %struct.alloc_save_s*, %struct.alloc_save_s** %4, align 8
  %74 = bitcast %struct.alloc_save_s* %73 to i8*
  call void @alloc_free(i8* %74, i32 1, i32 400, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4.221, i64 0, i64 0))
  br label %75

75:                                               ; preds = %67
  %76 = load %struct.alloc_save_s*, %struct.alloc_save_s** %4, align 8
  %77 = load %struct.alloc_save_s*, %struct.alloc_save_s** %2, align 8
  %78 = icmp ne %struct.alloc_save_s* %76, %77
  br i1 %78, label %11, label %79

79:                                               ; preds = %75
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_print_ref(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  %3 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i32 0, i32 2
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  store i32 %7, i32* %3, align 4
  %8 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 1
  %10 = load i16, i16* %9, align 8
  %11 = zext i16 %10 to i32
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.222, i64 0, i64 0), i32 %11)
  %13 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i32 0, i32 1
  %15 = load i16, i16* %14, align 8
  %16 = zext i16 %15 to i32
  %17 = and i32 %16, 255
  %18 = ashr i32 %17, 2
  switch i32 %18, label %126 [
    i32 0, label %19
    i32 1, label %27
    i32 15, label %34
    i32 2, label %41
    i32 3, label %52
    i32 5, label %59
    i32 6, label %65
    i32 7, label %67
    i32 8, label %93
    i32 9, label %95
    i32 10, label %103
    i32 11, label %111
    i32 13, label %118
  ]

19:                                               ; preds = %1
  %20 = load i32, i32* %3, align 4
  %21 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i32 0, i32 0
  %23 = bitcast %union.color_sample* %22 to %struct.ref_s**
  %24 = load %struct.ref_s*, %struct.ref_s** %23, align 8
  %25 = ptrtoint %struct.ref_s* %24 to i64
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1.223, i64 0, i64 0), i32 %20, i64 %25)
  br label %134

27:                                               ; preds = %1
  %28 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i32 0, i32 0
  %30 = bitcast %union.color_sample* %29 to i16*
  %31 = load i16, i16* %30, align 8
  %32 = zext i16 %31 to i32
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2.224, i64 0, i64 0), i32 %32)
  br label %134

34:                                               ; preds = %1
  %35 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %36 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %35, i32 0, i32 0
  %37 = bitcast %union.color_sample* %36 to %struct.gx_device_s**
  %38 = load %struct.gx_device_s*, %struct.gx_device_s** %37, align 8
  %39 = ptrtoint %struct.gx_device_s* %38 to i64
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3.225, i64 0, i64 0), i64 %39)
  br label %134

41:                                               ; preds = %1
  %42 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %43 = call i32 (%struct.ref_s*, ...) bitcast (i32 (%struct.ref_s*)* @dict_length to i32 (%struct.ref_s*, ...)*)(%struct.ref_s* %42)
  %44 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %45 = call i32 (%struct.ref_s*, ...) bitcast (i32 (%struct.ref_s*)* @dict_maxlength to i32 (%struct.ref_s*, ...)*)(%struct.ref_s* %44)
  %46 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %47 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %46, i32 0, i32 0
  %48 = bitcast %union.color_sample* %47 to %struct.dict_s**
  %49 = load %struct.dict_s*, %struct.dict_s** %48, align 8
  %50 = ptrtoint %struct.dict_s* %49 to i64
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4.226, i64 0, i64 0), i32 %43, i32 %45, i64 %50)
  br label %134

52:                                               ; preds = %1
  %53 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %54 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %53, i32 0, i32 0
  %55 = bitcast %union.color_sample* %54 to %struct.file_entry_s**
  %56 = load %struct.file_entry_s*, %struct.file_entry_s** %55, align 8
  %57 = ptrtoint %struct.file_entry_s* %56 to i64
  %58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5.227, i64 0, i64 0), i64 %57)
  br label %134

59:                                               ; preds = %1
  %60 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %61 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %60, i32 0, i32 0
  %62 = bitcast %union.color_sample* %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6.228, i64 0, i64 0), i64 %63)
  br label %134

65:                                               ; preds = %1
  %66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7.229, i64 0, i64 0))
  br label %134

67:                                               ; preds = %1
  %68 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %69 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %68, i32 0, i32 0
  %70 = bitcast %union.color_sample* %69 to %struct.name_s**
  %71 = load %struct.name_s*, %struct.name_s** %70, align 8
  %72 = ptrtoint %struct.name_s* %71 to i64
  %73 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %74 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %73, i32 0, i32 0
  %75 = bitcast %union.color_sample* %74 to %struct.name_s**
  %76 = load %struct.name_s*, %struct.name_s** %75, align 8
  %77 = getelementptr inbounds %struct.name_s, %struct.name_s* %76, i32 0, i32 1
  %78 = load i16, i16* %77, align 8
  %79 = zext i16 %78 to i32
  %80 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8.230, i64 0, i64 0), i64 %72, i32 %79)
  %81 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %82 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %81, i32 0, i32 0
  %83 = bitcast %union.color_sample* %82 to %struct.name_s**
  %84 = load %struct.name_s*, %struct.name_s** %83, align 8
  %85 = getelementptr inbounds %struct.name_s, %struct.name_s* %84, i32 0, i32 3
  %86 = load i8*, i8** %85, align 8
  %87 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %88 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %87, i32 0, i32 0
  %89 = bitcast %union.color_sample* %88 to %struct.name_s**
  %90 = load %struct.name_s*, %struct.name_s** %89, align 8
  %91 = getelementptr inbounds %struct.name_s, %struct.name_s* %90, i32 0, i32 2
  %92 = load i16, i16* %91, align 2
  call void @debug_print_string(i8* %86, i16 zeroext %92)
  br label %134

93:                                               ; preds = %1
  %94 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9.231, i64 0, i64 0))
  br label %134

95:                                               ; preds = %1
  %96 = load i32, i32* %3, align 4
  %97 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %98 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %97, i32 0, i32 0
  %99 = bitcast %union.color_sample* %98 to i32 (%struct.ref_s*)**
  %100 = load i32 (%struct.ref_s*)*, i32 (%struct.ref_s*)** %99, align 8
  %101 = ptrtoint i32 (%struct.ref_s*)* %100 to i64
  %102 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10.232, i64 0, i64 0), i32 %96, i64 %101)
  br label %134

103:                                              ; preds = %1
  %104 = load i32, i32* %3, align 4
  %105 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %106 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %105, i32 0, i32 0
  %107 = bitcast %union.color_sample* %106 to %struct.ref_s**
  %108 = load %struct.ref_s*, %struct.ref_s** %107, align 8
  %109 = ptrtoint %struct.ref_s* %108 to i64
  %110 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.11.233, i64 0, i64 0), i32 %104, i64 %109)
  br label %134

111:                                              ; preds = %1
  %112 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %113 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %112, i32 0, i32 0
  %114 = bitcast %union.color_sample* %113 to float*
  %115 = load float, float* %114, align 8
  %116 = fpext float %115 to double
  %117 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12.234, i64 0, i64 0), double %116)
  br label %134

118:                                              ; preds = %1
  %119 = load i32, i32* %3, align 4
  %120 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %121 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %120, i32 0, i32 0
  %122 = bitcast %union.color_sample* %121 to i8**
  %123 = load i8*, i8** %122, align 8
  %124 = ptrtoint i8* %123 to i64
  %125 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.13.235, i64 0, i64 0), i32 %119, i64 %124)
  br label %134

126:                                              ; preds = %1
  %127 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %128 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %127, i32 0, i32 1
  %129 = load i16, i16* %128, align 8
  %130 = zext i16 %129 to i32
  %131 = and i32 %130, 255
  %132 = ashr i32 %131, 2
  %133 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14.236, i64 0, i64 0), i32 %132)
  br label %134

134:                                              ; preds = %126, %118, %111, %103, %95, %93, %67, %65, %59, %52, %41, %34, %27, %19
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_print_string(i8* %0, i16 zeroext %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i16, align 2
  %5 = alloca i16, align 2
  store i8* %0, i8** %3, align 8
  store i16 %1, i16* %4, align 2
  store i16 0, i16* %5, align 2
  br label %6

6:                                                ; preds = %20, %2
  %7 = load i16, i16* %5, align 2
  %8 = zext i16 %7 to i32
  %9 = load i16, i16* %4, align 2
  %10 = zext i16 %9 to i32
  %11 = icmp slt i32 %8, %10
  br i1 %11, label %12, label %23

12:                                               ; preds = %6
  %13 = load i8*, i8** %3, align 8
  %14 = load i16, i16* %5, align 2
  %15 = zext i16 %14 to i64
  %16 = getelementptr inbounds i8, i8* %13, i64 %15
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = call i32 @putchar(i32 %18)
  br label %20

20:                                               ; preds = %12
  %21 = load i16, i16* %5, align 2
  %22 = add i16 %21, 1
  store i16 %22, i16* %5, align 2
  br label %6

23:                                               ; preds = %6
  ret void
}

declare dso_local i32 @putchar(i32) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_dump_refs(%struct.ref_s* %0, %struct.ref_s* %1, i8* %2) #0 {
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca %struct.ref_s*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca %struct.ref_s*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %4, align 8
  store %struct.ref_s* %1, %struct.ref_s** %5, align 8
  store i8* %2, i8** %6, align 8
  %12 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  store %struct.ref_s* %12, %struct.ref_s** %7, align 8
  %13 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %14 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %15 = icmp ult %struct.ref_s* %13, %14
  br i1 %15, label %16, label %19

16:                                               ; preds = %3
  %17 = load i8*, i8** %6, align 8
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15.239, i64 0, i64 0), i8* %17)
  br label %19

19:                                               ; preds = %16, %3
  br label %20

20:                                               ; preds = %121, %19
  %21 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %22 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %23 = icmp ult %struct.ref_s* %21, %22
  br i1 %23, label %24, label %125

24:                                               ; preds = %20
  %25 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %26 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %25, i32 0, i32 1
  %27 = load i16, i16* %26, align 8
  %28 = zext i16 %27 to i32
  %29 = and i32 %28, 255
  %30 = ashr i32 %29, 2
  store i32 %30, i32* %8, align 4
  %31 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %32 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %31, i32 0, i32 1
  %33 = load i16, i16* %32, align 8
  %34 = zext i16 %33 to i32
  store i32 %34, i32* %9, align 4
  %35 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %36 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %35, i32 0, i32 1
  %37 = load i16, i16* %36, align 8
  %38 = zext i16 %37 to i32
  %39 = and i32 %38, 255
  %40 = ashr i32 %39, 2
  %41 = icmp sge i32 %40, 16
  br i1 %41, label %42, label %43

42:                                               ; preds = %24
  br label %50

43:                                               ; preds = %24
  %44 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %45 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %44, i32 0, i32 1
  %46 = load i16, i16* %45, align 8
  %47 = zext i16 %46 to i32
  %48 = and i32 %47, 255
  %49 = ashr i32 %48, 2
  br label %50

50:                                               ; preds = %43, %42
  %51 = phi i32 [ 9, %42 ], [ %49, %43 ]
  store i32 %51, i32* %10, align 4
  %52 = load i8*, i8** @debug_dump_refs.as, align 8
  store i8* %52, i8** %11, align 8
  %53 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %54 = ptrtoint %struct.ref_s* %53 to i64
  %55 = load i32, i32* %8, align 4
  %56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.31, i64 0, i64 0), i64 %54, i32 %55)
  %57 = load i32, i32* %10, align 4
  %58 = icmp uge i32 %57, 16
  br i1 %58, label %59, label %62

59:                                               ; preds = %50
  %60 = load i32, i32* %10, align 4
  %61 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.32, i64 0, i64 0), i32 %60)
  br label %68

62:                                               ; preds = %50
  %63 = load i32, i32* %10, align 4
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds [16 x i8*], [16 x i8*]* @debug_dump_refs.ts, i64 0, i64 %64
  %66 = load i8*, i8** %65, align 8
  %67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.33, i64 0, i64 0), i8* %66)
  br label %68

68:                                               ; preds = %62, %59
  br label %69

69:                                               ; preds = %91, %68
  %70 = load i8*, i8** %11, align 8
  %71 = load i8, i8* %70, align 1
  %72 = icmp ne i8 %71, 0
  br i1 %72, label %73, label %96

73:                                               ; preds = %69
  %74 = load i8*, i8** %11, align 8
  %75 = load i8, i8* %74, align 1
  %76 = sext i8 %75 to i32
  %77 = icmp ne i32 %76, 46
  br i1 %77, label %78, label %90

78:                                               ; preds = %73
  %79 = load i32, i32* %9, align 4
  %80 = and i32 %79, 1
  %81 = icmp ne i32 %80, 0
  br i1 %81, label %82, label %86

82:                                               ; preds = %78
  %83 = load i8*, i8** %11, align 8
  %84 = load i8, i8* %83, align 1
  %85 = sext i8 %84 to i32
  br label %87

86:                                               ; preds = %78
  br label %87

87:                                               ; preds = %86, %82
  %88 = phi i32 [ %85, %82 ], [ 45, %86 ]
  %89 = call i32 @putchar(i32 %88)
  br label %90

90:                                               ; preds = %87, %73
  br label %91

91:                                               ; preds = %90
  %92 = load i8*, i8** %11, align 8
  %93 = getelementptr inbounds i8, i8* %92, i32 1
  store i8* %93, i8** %11, align 8
  %94 = load i32, i32* %9, align 4
  %95 = lshr i32 %94, 1
  store i32 %95, i32* %9, align 4
  br label %69

96:                                               ; preds = %69
  %97 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %98 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %97, i32 0, i32 2
  %99 = load i16, i16* %98, align 2
  %100 = zext i16 %99 to i32
  %101 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %102 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %101, i32 0, i32 0
  %103 = bitcast %union.color_sample* %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.34, i64 0, i64 0), i32 %100, i64 %104)
  %106 = load i32, i32* %10, align 4
  switch i32 %106, label %120 [
    i32 11, label %107
    i32 5, label %114
  ]

107:                                              ; preds = %96
  %108 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %109 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %108, i32 0, i32 0
  %110 = bitcast %union.color_sample* %109 to float*
  %111 = load float, float* %110, align 8
  %112 = fpext float %111 to double
  %113 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.35.240, i64 0, i64 0), double %112)
  br label %121

114:                                              ; preds = %96
  %115 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %116 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %115, i32 0, i32 0
  %117 = bitcast %union.color_sample* %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.36, i64 0, i64 0), i64 %118)
  br label %121

120:                                              ; preds = %96
  br label %121

121:                                              ; preds = %120, %114, %107
  %122 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.37, i64 0, i64 0))
  %123 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %124 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %123, i32 1
  store %struct.ref_s* %124, %struct.ref_s** %7, align 8
  br label %20

125:                                              ; preds = %20
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @debug_dump_bytes(i8* %0, i8* %1, i8* %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  store i8* %2, i8** %6, align 8
  %9 = load i8*, i8** %4, align 8
  store i8* %9, i8** %7, align 8
  %10 = load i8*, i8** %4, align 8
  %11 = load i8*, i8** %5, align 8
  %12 = icmp ult i8* %10, %11
  br i1 %12, label %13, label %16

13:                                               ; preds = %3
  %14 = load i8*, i8** %6, align 8
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15.239, i64 0, i64 0), i8* %14)
  br label %16

16:                                               ; preds = %13, %3
  br label %17

17:                                               ; preds = %46, %16
  %18 = load i8*, i8** %7, align 8
  %19 = load i8*, i8** %5, align 8
  %20 = icmp ne i8* %18, %19
  br i1 %20, label %21, label %48

21:                                               ; preds = %17
  %22 = load i8*, i8** %7, align 8
  %23 = getelementptr inbounds i8, i8* %22, i64 16
  %24 = load i8*, i8** %5, align 8
  %25 = icmp ult i8* %23, %24
  br i1 %25, label %26, label %29

26:                                               ; preds = %21
  %27 = load i8*, i8** %7, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 16
  br label %31

29:                                               ; preds = %21
  %30 = load i8*, i8** %5, align 8
  br label %31

31:                                               ; preds = %29, %26
  %32 = phi i8* [ %28, %26 ], [ %30, %29 ]
  store i8* %32, i8** %8, align 8
  %33 = load i8*, i8** %7, align 8
  %34 = ptrtoint i8* %33 to i64
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.38, i64 0, i64 0), i64 %34)
  br label %36

36:                                               ; preds = %40, %31
  %37 = load i8*, i8** %7, align 8
  %38 = load i8*, i8** %8, align 8
  %39 = icmp ne i8* %37, %38
  br i1 %39, label %40, label %46

40:                                               ; preds = %36
  %41 = load i8*, i8** %7, align 8
  %42 = getelementptr inbounds i8, i8* %41, i32 1
  store i8* %42, i8** %7, align 8
  %43 = load i8, i8* %41, align 1
  %44 = zext i8 %43 to i32
  %45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.39, i64 0, i64 0), i32 %44)
  br label %36

46:                                               ; preds = %36
  %47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.37, i64 0, i64 0))
  br label %17

48:                                               ; preds = %17
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @dict_create(i32 %0, %struct.ref_s* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca %struct.ref_s*, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.dict_s*, align 8
  %8 = alloca %struct.dict_s*, align 8
  store i32 %0, i32* %4, align 4
  store %struct.ref_s* %1, %struct.ref_s** %5, align 8
  %9 = load i32, i32* %4, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %2
  br label %14

12:                                               ; preds = %2
  %13 = load i32, i32* %4, align 4
  br label %14

14:                                               ; preds = %12, %11
  %15 = phi i32 [ 1, %11 ], [ %13, %12 ]
  %16 = add i32 %15, 1
  store i32 %16, i32* %6, align 4
  %17 = call i8* @alloc(i32 1, i32 32, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.251, i64 0, i64 0))
  %18 = bitcast i8* %17 to %struct.dict_s*
  store %struct.dict_s* %18, %struct.dict_s** %7, align 8
  %19 = load %struct.dict_s*, %struct.dict_s** %7, align 8
  %20 = icmp eq %struct.dict_s* %19, null
  br i1 %20, label %21, label %22

21:                                               ; preds = %14
  store i32 -25, i32* %3, align 4
  br label %80

22:                                               ; preds = %14
  %23 = load i32, i32* %6, align 4
  %24 = call i8* @alloc(i32 %23, i32 32, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1.252, i64 0, i64 0))
  %25 = bitcast i8* %24 to %struct.dict_s*
  store %struct.dict_s* %25, %struct.dict_s** %8, align 8
  %26 = load %struct.dict_s*, %struct.dict_s** %8, align 8
  %27 = icmp eq %struct.dict_s* %26, null
  br i1 %27, label %28, label %31

28:                                               ; preds = %22
  %29 = load %struct.dict_s*, %struct.dict_s** %7, align 8
  %30 = bitcast %struct.dict_s* %29 to i8*
  call void @alloc_free(i8* %30, i32 1, i32 32, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.251, i64 0, i64 0))
  store i32 -25, i32* %3, align 4
  br label %80

31:                                               ; preds = %22
  %32 = load %struct.dict_s*, %struct.dict_s** %7, align 8
  %33 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %32, i32 0, i32 0
  %34 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %33, i32 0, i32 0
  %35 = bitcast %union.color_sample* %34 to i64*
  store i64 0, i64* %35, align 8
  %36 = load %struct.dict_s*, %struct.dict_s** %7, align 8
  %37 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %36, i32 0, i32 0
  %38 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %37, i32 0, i32 1
  store i16 20, i16* %38, align 8
  %39 = load %struct.dict_s*, %struct.dict_s** %8, align 8
  %40 = bitcast %struct.dict_s* %39 to %struct.ref_s*
  %41 = load %struct.dict_s*, %struct.dict_s** %7, align 8
  %42 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %41, i32 0, i32 1
  %43 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %42, i32 0, i32 0
  %44 = bitcast %union.color_sample* %43 to %struct.ref_s**
  store %struct.ref_s* %40, %struct.ref_s** %44, align 8
  %45 = load %struct.dict_s*, %struct.dict_s** %7, align 8
  %46 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %45, i32 0, i32 1
  %47 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %46, i32 0, i32 1
  store i16 770, i16* %47, align 8
  %48 = load i32, i32* %6, align 4
  %49 = mul i32 %48, 2
  %50 = trunc i32 %49 to i16
  %51 = load %struct.dict_s*, %struct.dict_s** %7, align 8
  %52 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %51, i32 0, i32 1
  %53 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %52, i32 0, i32 2
  store i16 %50, i16* %53, align 2
  %54 = load %struct.dict_s*, %struct.dict_s** %7, align 8
  %55 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %56 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %55, i32 0, i32 0
  %57 = bitcast %union.color_sample* %56 to %struct.dict_s**
  store %struct.dict_s* %54, %struct.dict_s** %57, align 8
  %58 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %59 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %58, i32 0, i32 1
  store i16 778, i16* %59, align 8
  %60 = load %struct.dict_s*, %struct.dict_s** %7, align 8
  %61 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %60, i32 0, i32 1
  %62 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %61, i32 0, i32 0
  %63 = bitcast %union.color_sample* %62 to %struct.ref_s**
  %64 = load %struct.ref_s*, %struct.ref_s** %63, align 8
  %65 = bitcast %struct.ref_s* %64 to %struct.dict_s*
  store %struct.dict_s* %65, %struct.dict_s** %8, align 8
  br label %66

66:                                               ; preds = %70, %31
  %67 = load i32, i32* %6, align 4
  %68 = add i32 %67, -1
  store i32 %68, i32* %6, align 4
  %69 = icmp ne i32 %67, 0
  br i1 %69, label %70, label %79

70:                                               ; preds = %66
  %71 = load %struct.dict_s*, %struct.dict_s** %8, align 8
  %72 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %71, i32 0, i32 1
  %73 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %72, i32 0, i32 1
  store i16 32, i16* %73, align 8
  %74 = load %struct.dict_s*, %struct.dict_s** %8, align 8
  %75 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %74, i32 0, i32 0
  %76 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %75, i32 0, i32 1
  store i16 32, i16* %76, align 8
  %77 = load %struct.dict_s*, %struct.dict_s** %8, align 8
  %78 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %77, i32 1
  store %struct.dict_s* %78, %struct.dict_s** %8, align 8
  br label %66

79:                                               ; preds = %66
  store i32 0, i32* %3, align 4
  br label %80

80:                                               ; preds = %79, %28, %21
  %81 = load i32, i32* %3, align 4
  ret i32 %81
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.ref_s* @dict_access_ref(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %4 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %3, i32 0, i32 0
  %5 = bitcast %union.color_sample* %4 to %struct.dict_s**
  %6 = load %struct.dict_s*, %struct.dict_s** %5, align 8
  %7 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %6, i32 0, i32 1
  ret %struct.ref_s* %7
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @dict_lookup(%struct.ref_s* %0, %struct.ref_s* %1, %struct.ref_s* %2, %struct.ref_s** %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.ref_s*, align 8
  %7 = alloca %struct.ref_s*, align 8
  %8 = alloca %struct.ref_s*, align 8
  %9 = alloca %struct.ref_s**, align 8
  %10 = alloca %struct.ref_s*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca %struct.name_s*, align 8
  %14 = alloca i32, align 4
  %15 = alloca %struct.ref_s, align 8
  %16 = alloca i32, align 4
  %17 = alloca %struct.dict_s*, align 8
  %18 = alloca i32, align 4
  %19 = alloca %struct.dict_s*, align 8
  %20 = alloca %struct.dict_s*, align 8
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %6, align 8
  store %struct.ref_s* %1, %struct.ref_s** %7, align 8
  store %struct.ref_s* %2, %struct.ref_s** %8, align 8
  store %struct.ref_s** %3, %struct.ref_s*** %9, align 8
  %23 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  store %struct.ref_s* %23, %struct.ref_s** %10, align 8
  store i32 1, i32* %14, align 4
  %24 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %25 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %24, i32 0, i32 1
  %26 = load i16, i16* %25, align 8
  %27 = zext i16 %26 to i32
  %28 = and i32 %27, 255
  %29 = ashr i32 %28, 2
  switch i32 %29, label %59 [
    i32 7, label %30
    i32 13, label %41
  ]

30:                                               ; preds = %4
  %31 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %32 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %31, i32 0, i32 0
  %33 = bitcast %union.color_sample* %32 to %struct.name_s**
  %34 = load %struct.name_s*, %struct.name_s** %33, align 8
  store %struct.name_s* %34, %struct.name_s** %13, align 8
  br label %35

35:                                               ; preds = %55, %30
  %36 = load %struct.name_s*, %struct.name_s** %13, align 8
  %37 = getelementptr inbounds %struct.name_s, %struct.name_s* %36, i32 0, i32 1
  %38 = load i16, i16* %37, align 8
  %39 = zext i16 %38 to i32
  %40 = mul nsw i32 %39, 40503
  store i32 %40, i32* %11, align 4
  store i32 7, i32* %12, align 4
  br label %78

41:                                               ; preds = %4
  %42 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %43 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %42, i32 0, i32 0
  %44 = bitcast %union.color_sample* %43 to i8**
  %45 = load i8*, i8** %44, align 8
  %46 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %47 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %46, i32 0, i32 2
  %48 = load i16, i16* %47, align 2
  %49 = zext i16 %48 to i32
  %50 = call i32 @name_ref(i8* %45, i32 %49, %struct.ref_s* %15, i32 1)
  store i32 %50, i32* %16, align 4
  %51 = load i32, i32* %16, align 4
  %52 = icmp slt i32 %51, 0
  br i1 %52, label %53, label %55

53:                                               ; preds = %41
  %54 = load i32, i32* %16, align 4
  store i32 %54, i32* %5, align 4
  br label %181

55:                                               ; preds = %41
  %56 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %15, i32 0, i32 0
  %57 = bitcast %union.color_sample* %56 to %struct.name_s**
  %58 = load %struct.name_s*, %struct.name_s** %57, align 8
  store %struct.name_s* %58, %struct.name_s** %13, align 8
  br label %35

59:                                               ; preds = %4
  %60 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %61 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %60, i32 0, i32 1
  %62 = load i16, i16* %61, align 8
  %63 = zext i16 %62 to i32
  %64 = and i32 %63, 255
  %65 = ashr i32 %64, 2
  %66 = icmp sge i32 %65, 16
  br i1 %66, label %67, label %68

67:                                               ; preds = %59
  br label %75

68:                                               ; preds = %59
  %69 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %70 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %69, i32 0, i32 1
  %71 = load i16, i16* %70, align 8
  %72 = zext i16 %71 to i32
  %73 = and i32 %72, 255
  %74 = ashr i32 %73, 2
  br label %75

75:                                               ; preds = %68, %67
  %76 = phi i32 [ 9, %67 ], [ %74, %68 ]
  %77 = mul nsw i32 %76, 99
  store i32 %77, i32* %11, align 4
  store i32 -1, i32* %12, align 4
  br label %78

78:                                               ; preds = %75, %35
  br label %79

79:                                               ; preds = %174, %78
  %80 = load %struct.ref_s*, %struct.ref_s** %10, align 8
  %81 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %80, i32 0, i32 0
  %82 = bitcast %union.color_sample* %81 to %struct.dict_s**
  %83 = load %struct.dict_s*, %struct.dict_s** %82, align 8
  store %struct.dict_s* %83, %struct.dict_s** %17, align 8
  %84 = load %struct.dict_s*, %struct.dict_s** %17, align 8
  %85 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %84, i32 0, i32 1
  %86 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %85, i32 0, i32 2
  %87 = load i16, i16* %86, align 2
  %88 = zext i16 %87 to i32
  %89 = ashr i32 %88, 1
  %90 = sub nsw i32 %89, 1
  store i32 %90, i32* %18, align 4
  %91 = load %struct.dict_s*, %struct.dict_s** %17, align 8
  %92 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %91, i32 0, i32 1
  %93 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %92, i32 0, i32 0
  %94 = bitcast %union.color_sample* %93 to %struct.ref_s**
  %95 = load %struct.ref_s*, %struct.ref_s** %94, align 8
  %96 = bitcast %struct.ref_s* %95 to %struct.dict_s*
  store %struct.dict_s* %96, %struct.dict_s** %19, align 8
  store i32 0, i32* %21, align 4
  %97 = load %struct.dict_s*, %struct.dict_s** %19, align 8
  %98 = load i32, i32* %11, align 4
  %99 = load i32, i32* %18, align 4
  %100 = urem i32 %98, %99
  %101 = zext i32 %100 to i64
  %102 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %97, i64 %101
  %103 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %102, i64 2
  store %struct.dict_s* %103, %struct.dict_s** %20, align 8
  br label %104

104:                                              ; preds = %164, %79
  %105 = load %struct.dict_s*, %struct.dict_s** %20, align 8
  %106 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %105, i32 -1
  store %struct.dict_s* %106, %struct.dict_s** %20, align 8
  %107 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %106, i32 0, i32 0
  %108 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %107, i32 0, i32 1
  %109 = load i16, i16* %108, align 8
  %110 = zext i16 %109 to i32
  %111 = and i32 %110, 255
  %112 = ashr i32 %111, 2
  store i32 %112, i32* %22, align 4
  %113 = load i32, i32* %12, align 4
  %114 = icmp eq i32 %112, %113
  br i1 %114, label %115, label %128

115:                                              ; preds = %104
  %116 = load %struct.dict_s*, %struct.dict_s** %20, align 8
  %117 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %116, i32 0, i32 0
  %118 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %117, i32 0, i32 0
  %119 = bitcast %union.color_sample* %118 to %struct.name_s**
  %120 = load %struct.name_s*, %struct.name_s** %119, align 8
  %121 = load %struct.name_s*, %struct.name_s** %13, align 8
  %122 = icmp eq %struct.name_s* %120, %121
  br i1 %122, label %123, label %127

123:                                              ; preds = %115
  %124 = load %struct.dict_s*, %struct.dict_s** %20, align 8
  %125 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %124, i32 0, i32 1
  %126 = load %struct.ref_s**, %struct.ref_s*** %9, align 8
  store %struct.ref_s* %125, %struct.ref_s** %126, align 8
  store i32 1, i32* %5, align 4
  br label %181

127:                                              ; preds = %115
  br label %164

128:                                              ; preds = %104
  %129 = load i32, i32* %22, align 4
  %130 = icmp eq i32 %129, 8
  br i1 %130, label %131, label %152

131:                                              ; preds = %128
  %132 = load %struct.dict_s*, %struct.dict_s** %20, align 8
  %133 = load %struct.dict_s*, %struct.dict_s** %19, align 8
  %134 = icmp eq %struct.dict_s* %132, %133
  br i1 %134, label %135, label %150

135:                                              ; preds = %131
  %136 = load i32, i32* %21, align 4
  %137 = add nsw i32 %136, 1
  store i32 %137, i32* %21, align 4
  %138 = icmp ne i32 %136, 0
  br i1 %138, label %139, label %144

139:                                              ; preds = %135
  %140 = load i32, i32* %14, align 4
  %141 = icmp sgt i32 %140, 0
  br i1 %141, label %142, label %143

142:                                              ; preds = %139
  store i32 -2, i32* %14, align 4
  br label %143

143:                                              ; preds = %142, %139
  br label %173

144:                                              ; preds = %135
  %145 = load i32, i32* %18, align 4
  %146 = add i32 %145, 1
  %147 = load %struct.dict_s*, %struct.dict_s** %20, align 8
  %148 = zext i32 %146 to i64
  %149 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %147, i64 %148
  store %struct.dict_s* %149, %struct.dict_s** %20, align 8
  br label %151

150:                                              ; preds = %131
  br label %165

151:                                              ; preds = %144
  br label %163

152:                                              ; preds = %128
  %153 = load %struct.dict_s*, %struct.dict_s** %20, align 8
  %154 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %153, i32 0, i32 0
  %155 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %156 = call i32 (%struct.ref_s*, %struct.ref_s*, ...) bitcast (i32 (%struct.ref_s*, %struct.ref_s*)* @obj_eq to i32 (%struct.ref_s*, %struct.ref_s*, ...)*)(%struct.ref_s* %154, %struct.ref_s* %155)
  %157 = icmp ne i32 %156, 0
  br i1 %157, label %158, label %162

158:                                              ; preds = %152
  %159 = load %struct.dict_s*, %struct.dict_s** %20, align 8
  %160 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %159, i32 0, i32 1
  %161 = load %struct.ref_s**, %struct.ref_s*** %9, align 8
  store %struct.ref_s* %160, %struct.ref_s** %161, align 8
  store i32 1, i32* %5, align 4
  br label %181

162:                                              ; preds = %152
  br label %163

163:                                              ; preds = %162, %151
  br label %164

164:                                              ; preds = %163, %127
  br label %104

165:                                              ; preds = %150
  %166 = load i32, i32* %14, align 4
  %167 = icmp sgt i32 %166, 0
  br i1 %167, label %168, label %172

168:                                              ; preds = %165
  %169 = load %struct.dict_s*, %struct.dict_s** %20, align 8
  %170 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %169, i32 0, i32 1
  %171 = load %struct.ref_s**, %struct.ref_s*** %9, align 8
  store %struct.ref_s* %170, %struct.ref_s** %171, align 8
  store i32 0, i32* %14, align 4
  br label %172

172:                                              ; preds = %168, %165
  br label %173

173:                                              ; preds = %172, %143
  br label %174

174:                                              ; preds = %173
  %175 = load %struct.ref_s*, %struct.ref_s** %10, align 8
  %176 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %175, i32 -1
  store %struct.ref_s* %176, %struct.ref_s** %10, align 8
  %177 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %178 = icmp uge %struct.ref_s* %176, %177
  br i1 %178, label %79, label %179

179:                                              ; preds = %174
  %180 = load i32, i32* %14, align 4
  store i32 %180, i32* %5, align 4
  br label %181

181:                                              ; preds = %179, %158, %123, %53
  %182 = load i32, i32* %5, align 4
  ret i32 %182
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @dict_put(%struct.ref_s* %0, %struct.ref_s* %1, %struct.ref_s* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.ref_s*, align 8
  %6 = alloca %struct.ref_s*, align 8
  %7 = alloca %struct.ref_s*, align 8
  %8 = alloca %struct.ref_s*, align 8
  %9 = alloca %struct.dict_s*, align 8
  %10 = alloca %struct.name_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %5, align 8
  store %struct.ref_s* %1, %struct.ref_s** %6, align 8
  store %struct.ref_s* %2, %struct.ref_s** %7, align 8
  %11 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %12 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %13 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %14 = call i32 @dict_lookup(%struct.ref_s* %11, %struct.ref_s* %12, %struct.ref_s* %13, %struct.ref_s** %8)
  %15 = icmp sle i32 %14, 0
  br i1 %15, label %16, label %81

16:                                               ; preds = %3
  %17 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i32 0, i32 0
  %19 = bitcast %union.color_sample* %18 to %struct.dict_s**
  %20 = load %struct.dict_s*, %struct.dict_s** %19, align 8
  store %struct.dict_s* %20, %struct.dict_s** %9, align 8
  %21 = load %struct.dict_s*, %struct.dict_s** %9, align 8
  %22 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %21, i32 0, i32 0
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i32 0, i32 0
  %24 = bitcast %union.color_sample* %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = load %struct.dict_s*, %struct.dict_s** %9, align 8
  %27 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %26, i32 0, i32 1
  %28 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %27, i32 0, i32 2
  %29 = load i16, i16* %28, align 2
  %30 = zext i16 %29 to i32
  %31 = ashr i32 %30, 1
  %32 = sub nsw i32 %31, 1
  %33 = sext i32 %32 to i64
  %34 = icmp eq i64 %25, %33
  br i1 %34, label %35, label %36

35:                                               ; preds = %16
  store i32 -2, i32* %4, align 4
  br label %86

36:                                               ; preds = %16
  %37 = load %struct.dict_s*, %struct.dict_s** %9, align 8
  %38 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %37, i32 0, i32 0
  %39 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %38, i32 0, i32 0
  %40 = bitcast %union.color_sample* %39 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = add nsw i64 %41, 1
  store i64 %42, i64* %40, align 8
  %43 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %44 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %43, i64 -1
  %45 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %46 = bitcast %struct.ref_s* %44 to i8*
  %47 = bitcast %struct.ref_s* %45 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 8 %47, i64 16, i1 false)
  %48 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %49 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %48, i32 0, i32 1
  %50 = load i16, i16* %49, align 8
  %51 = zext i16 %50 to i32
  %52 = and i32 %51, 255
  %53 = ashr i32 %52, 2
  %54 = icmp eq i32 %53, 7
  br i1 %54, label %55, label %80

55:                                               ; preds = %36
  %56 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %57 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %56, i32 0, i32 0
  %58 = bitcast %union.color_sample* %57 to %struct.name_s**
  %59 = load %struct.name_s*, %struct.name_s** %58, align 8
  store %struct.name_s* %59, %struct.name_s** %10, align 8
  %60 = load %struct.name_s*, %struct.name_s** %10, align 8
  %61 = getelementptr inbounds %struct.name_s, %struct.name_s* %60, i32 0, i32 4
  %62 = load %struct.ref_s*, %struct.ref_s** %61, align 8
  %63 = icmp eq %struct.ref_s* %62, null
  br i1 %63, label %64, label %76

64:                                               ; preds = %55
  %65 = load %struct.dict_s*, %struct.dict_s** %9, align 8
  %66 = load %struct.dict_s*, %struct.dict_s** bitcast ([20 x %struct.ref_s]* @dstack to %struct.dict_s**), align 8
  %67 = icmp eq %struct.dict_s* %65, %66
  br i1 %67, label %72, label %68

68:                                               ; preds = %64
  %69 = load %struct.dict_s*, %struct.dict_s** %9, align 8
  %70 = load %struct.dict_s*, %struct.dict_s** bitcast (%union.color_sample* getelementptr inbounds ([20 x %struct.ref_s], [20 x %struct.ref_s]* @dstack, i64 0, i64 1, i32 0) to %struct.dict_s**), align 8
  %71 = icmp eq %struct.dict_s* %69, %70
  br i1 %71, label %72, label %76

72:                                               ; preds = %68, %64
  %73 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %74 = load %struct.name_s*, %struct.name_s** %10, align 8
  %75 = getelementptr inbounds %struct.name_s, %struct.name_s* %74, i32 0, i32 4
  store %struct.ref_s* %73, %struct.ref_s** %75, align 8
  br label %79

76:                                               ; preds = %68, %55
  %77 = load %struct.name_s*, %struct.name_s** %10, align 8
  %78 = getelementptr inbounds %struct.name_s, %struct.name_s* %77, i32 0, i32 4
  store %struct.ref_s* inttoptr (i64 1 to %struct.ref_s*), %struct.ref_s** %78, align 8
  br label %79

79:                                               ; preds = %76, %72
  br label %80

80:                                               ; preds = %79, %36
  br label %81

81:                                               ; preds = %80, %3
  %82 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %83 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %84 = bitcast %struct.ref_s* %82 to i8*
  %85 = bitcast %struct.ref_s* %83 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %84, i8* align 8 %85, i64 16, i1 false)
  store i32 0, i32* %4, align 4
  br label %86

86:                                               ; preds = %81, %35
  %87 = load i32, i32* %4, align 4
  ret i32 %87
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @dict_length(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %4 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %3, i32 0, i32 0
  %5 = bitcast %union.color_sample* %4 to %struct.dict_s**
  %6 = load %struct.dict_s*, %struct.dict_s** %5, align 8
  %7 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %6, i32 0, i32 0
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i32 0, i32 0
  %9 = bitcast %union.color_sample* %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = trunc i64 %10 to i32
  ret i32 %11
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @dict_maxlength(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %4 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %3, i32 0, i32 0
  %5 = bitcast %union.color_sample* %4 to %struct.dict_s**
  %6 = load %struct.dict_s*, %struct.dict_s** %5, align 8
  %7 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i32 0, i32 2
  %9 = load i16, i16* %8, align 2
  %10 = zext i16 %9 to i32
  %11 = ashr i32 %10, 1
  %12 = sub nsw i32 %11, 1
  ret i32 %12
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @dict_copy(%struct.ref_s* %0, %struct.ref_s* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca %struct.ref_s*, align 8
  %6 = alloca %struct.dict_s*, align 8
  %7 = alloca i32, align 4
  %8 = alloca %struct.dict_s*, align 8
  %9 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %4, align 8
  store %struct.ref_s* %1, %struct.ref_s** %5, align 8
  %10 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %11 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %10, i32 0, i32 0
  %12 = bitcast %union.color_sample* %11 to %struct.dict_s**
  %13 = load %struct.dict_s*, %struct.dict_s** %12, align 8
  store %struct.dict_s* %13, %struct.dict_s** %6, align 8
  %14 = load %struct.dict_s*, %struct.dict_s** %6, align 8
  %15 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %14, i32 0, i32 1
  %16 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %15, i32 0, i32 2
  %17 = load i16, i16* %16, align 2
  %18 = zext i16 %17 to i32
  %19 = ashr i32 %18, 1
  %20 = sub nsw i32 %19, 1
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %7, align 4
  %22 = load %struct.dict_s*, %struct.dict_s** %6, align 8
  %23 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %22, i32 0, i32 1
  %24 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %23, i32 0, i32 0
  %25 = bitcast %union.color_sample* %24 to %struct.ref_s**
  %26 = load %struct.ref_s*, %struct.ref_s** %25, align 8
  %27 = bitcast %struct.ref_s* %26 to %struct.dict_s*
  store %struct.dict_s* %27, %struct.dict_s** %8, align 8
  br label %28

28:                                               ; preds = %52, %2
  %29 = load i32, i32* %7, align 4
  %30 = add nsw i32 %29, -1
  store i32 %30, i32* %7, align 4
  %31 = icmp ne i32 %29, 0
  br i1 %31, label %32, label %55

32:                                               ; preds = %28
  %33 = load %struct.dict_s*, %struct.dict_s** %8, align 8
  %34 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %33, i32 0, i32 0
  %35 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %34, i32 0, i32 1
  %36 = load i16, i16* %35, align 8
  %37 = zext i16 %36 to i32
  %38 = and i32 %37, 255
  %39 = ashr i32 %38, 2
  %40 = icmp ne i32 %39, 8
  br i1 %40, label %41, label %52

41:                                               ; preds = %32
  %42 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %43 = load %struct.dict_s*, %struct.dict_s** %8, align 8
  %44 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %43, i32 0, i32 0
  %45 = load %struct.dict_s*, %struct.dict_s** %8, align 8
  %46 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %45, i32 0, i32 1
  %47 = call i32 @dict_put(%struct.ref_s* %42, %struct.ref_s* %44, %struct.ref_s* %46)
  store i32 %47, i32* %9, align 4
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %49, label %51

49:                                               ; preds = %41
  %50 = load i32, i32* %9, align 4
  store i32 %50, i32* %3, align 4
  br label %56

51:                                               ; preds = %41
  br label %52

52:                                               ; preds = %51, %32
  %53 = load %struct.dict_s*, %struct.dict_s** %8, align 8
  %54 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %53, i32 1
  store %struct.dict_s* %54, %struct.dict_s** %8, align 8
  br label %28

55:                                               ; preds = %28
  store i32 0, i32* %3, align 4
  br label %56

56:                                               ; preds = %55, %49
  %57 = load i32, i32* %3, align 4
  ret i32 %57
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @dict_resize(%struct.ref_s* %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct.dict_s*, align 8
  %7 = alloca %struct.ref_s, align 8
  %8 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %4, align 8
  store i32 %1, i32* %5, align 4
  %9 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i32 0, i32 0
  %11 = bitcast %union.color_sample* %10 to %struct.dict_s**
  %12 = load %struct.dict_s*, %struct.dict_s** %11, align 8
  store %struct.dict_s* %12, %struct.dict_s** %6, align 8
  %13 = load i32, i32* %5, align 4
  %14 = call i32 @dict_create(i32 %13, %struct.ref_s* %7)
  store i32 %14, i32* %8, align 4
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %2
  %17 = load i32, i32* %8, align 4
  store i32 %17, i32* %3, align 4
  br label %39

18:                                               ; preds = %2
  %19 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %20 = call i32 @dict_copy(%struct.ref_s* %19, %struct.ref_s* %7)
  %21 = load %struct.dict_s*, %struct.dict_s** %6, align 8
  %22 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %21, i32 0, i32 1
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i32 0, i32 0
  %24 = bitcast %union.color_sample* %23 to %struct.ref_s**
  %25 = load %struct.ref_s*, %struct.ref_s** %24, align 8
  %26 = bitcast %struct.ref_s* %25 to i8*
  %27 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %28 = call i32 @dict_maxlength(%struct.ref_s* %27)
  call void @alloc_free(i8* %26, i32 %28, i32 32, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2.257, i64 0, i64 0))
  %29 = load %struct.dict_s*, %struct.dict_s** %6, align 8
  %30 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i32 0, i32 0
  %31 = bitcast %union.color_sample* %30 to %struct.dict_s**
  %32 = load %struct.dict_s*, %struct.dict_s** %31, align 8
  %33 = bitcast %struct.dict_s* %29 to i8*
  %34 = bitcast %struct.dict_s* %32 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %33, i8* align 8 %34, i64 32, i1 false)
  %35 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i32 0, i32 0
  %36 = bitcast %union.color_sample* %35 to %struct.dict_s**
  %37 = load %struct.dict_s*, %struct.dict_s** %36, align 8
  %38 = bitcast %struct.dict_s* %37 to i8*
  call void @alloc_free(i8* %38, i32 1, i32 32, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3.258, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %39

39:                                               ; preds = %18, %16
  %40 = load i32, i32* %3, align 4
  ret i32 %40
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @dict_first(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %4 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %3, i32 0, i32 0
  %5 = bitcast %union.color_sample* %4 to %struct.dict_s**
  %6 = load %struct.dict_s*, %struct.dict_s** %5, align 8
  %7 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %6, i32 0, i32 1
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i32 0, i32 2
  %9 = load i16, i16* %8, align 2
  %10 = zext i16 %9 to i32
  %11 = ashr i32 %10, 1
  %12 = sub nsw i32 %11, 1
  %13 = add nsw i32 %12, 1
  ret i32 %13
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @dict_next(%struct.ref_s* %0, i32 %1, %struct.ref_s* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.ref_s*, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.ref_s*, align 8
  %8 = alloca %struct.dict_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %5, align 8
  store i32 %1, i32* %6, align 4
  store %struct.ref_s* %2, %struct.ref_s** %7, align 8
  %9 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i32 0, i32 0
  %11 = bitcast %union.color_sample* %10 to %struct.dict_s**
  %12 = load %struct.dict_s*, %struct.dict_s** %11, align 8
  %13 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %12, i32 0, i32 1
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i32 0, i32 0
  %15 = bitcast %union.color_sample* %14 to %struct.ref_s**
  %16 = load %struct.ref_s*, %struct.ref_s** %15, align 8
  %17 = bitcast %struct.ref_s* %16 to %struct.dict_s*
  %18 = load i32, i32* %6, align 4
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %17, i64 %19
  store %struct.dict_s* %20, %struct.dict_s** %8, align 8
  br label %21

21:                                               ; preds = %50, %3
  %22 = load %struct.dict_s*, %struct.dict_s** %8, align 8
  %23 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %22, i32 -1
  store %struct.dict_s* %23, %struct.dict_s** %8, align 8
  %24 = load i32, i32* %6, align 4
  %25 = add nsw i32 %24, -1
  store i32 %25, i32* %6, align 4
  %26 = icmp sge i32 %25, 0
  br i1 %26, label %27, label %51

27:                                               ; preds = %21
  %28 = load %struct.dict_s*, %struct.dict_s** %8, align 8
  %29 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %28, i32 0, i32 0
  %30 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %29, i32 0, i32 1
  %31 = load i16, i16* %30, align 8
  %32 = zext i16 %31 to i32
  %33 = and i32 %32, 255
  %34 = ashr i32 %33, 2
  %35 = icmp ne i32 %34, 8
  br i1 %35, label %36, label %50

36:                                               ; preds = %27
  %37 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %38 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %37, i64 0
  %39 = load %struct.dict_s*, %struct.dict_s** %8, align 8
  %40 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %39, i32 0, i32 0
  %41 = bitcast %struct.ref_s* %38 to i8*
  %42 = bitcast %struct.ref_s* %40 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* align 8 %42, i64 16, i1 false)
  %43 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %44 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %43, i64 1
  %45 = load %struct.dict_s*, %struct.dict_s** %8, align 8
  %46 = getelementptr inbounds %struct.dict_s, %struct.dict_s* %45, i32 0, i32 1
  %47 = bitcast %struct.ref_s* %44 to i8*
  %48 = bitcast %struct.ref_s* %46 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %47, i8* align 8 %48, i64 16, i1 false)
  %49 = load i32, i32* %6, align 4
  store i32 %49, i32* %4, align 4
  br label %52

50:                                               ; preds = %27
  br label %21

51:                                               ; preds = %21
  store i32 -1, i32* %4, align 4
  br label %52

52:                                               ; preds = %51, %36
  %53 = load i32, i32* %4, align 4
  ret i32 %53
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @initial_enter_name(i8* %0, %struct.ref_s* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca %struct.ref_s, align 8
  store i8* %0, i8** %3, align 8
  store %struct.ref_s* %1, %struct.ref_s** %4, align 8
  %6 = load i8*, i8** %3, align 8
  %7 = call i32 (i8*, %struct.ref_s*, ...) bitcast (void (i8*, %struct.ref_s*)* @name_enter to i32 (i8*, %struct.ref_s*, ...)*)(i8* %6, %struct.ref_s* %5)
  %8 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %9 = call i32 @dict_put(%struct.ref_s* getelementptr inbounds ([20 x %struct.ref_s], [20 x %struct.ref_s]* @dstack, i64 0, i64 0), %struct.ref_s* %5, %struct.ref_s* %8)
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %16

11:                                               ; preds = %2
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.261, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.262, i64 0, i64 0), i32 43)
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %15 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2.263, i64 0, i64 0))
  call void @exit(i32 1) #10
  unreachable

16:                                               ; preds = %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @initial_enter_op(i8* %0, i32 (%struct.ref_s*)* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32 (%struct.ref_s*)*, align 8
  %5 = alloca %struct.ref_s, align 8
  store i8* %0, i8** %3, align 8
  store i32 (%struct.ref_s*)* %1, i32 (%struct.ref_s*)** %4, align 8
  %6 = load i32 (%struct.ref_s*)*, i32 (%struct.ref_s*)** %4, align 8
  %7 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i32 0, i32 0
  %8 = bitcast %union.color_sample* %7 to i32 (%struct.ref_s*)**
  store i32 (%struct.ref_s*)* %6, i32 (%struct.ref_s*)** %8, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i32 0, i32 1
  store i16 37, i16* %9, align 8
  %10 = load i8*, i8** %3, align 8
  %11 = load i8, i8* %10, align 1
  %12 = sext i8 %11 to i32
  %13 = sub nsw i32 %12, 48
  %14 = trunc i32 %13 to i16
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i32 0, i32 2
  store i16 %14, i16* %15, align 2
  %16 = call i32 (%struct.ref_s*, ...) bitcast (void (%struct.ref_s*)* @interp_fix_op to i32 (%struct.ref_s*, ...)*)(%struct.ref_s* %5)
  %17 = load i8*, i8** %3, align 8
  %18 = getelementptr inbounds i8, i8* %17, i64 1
  call void @initial_enter_name(i8* %18, %struct.ref_s* %5)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @obj_init() #0 {
  %1 = alloca %struct.ref_s, align 8
  %2 = alloca %struct.ref_s, align 8
  %3 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %1, i32 0, i32 0
  %4 = bitcast %union.color_sample* %3 to i64*
  store i64 0, i64* %4, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %1, i32 0, i32 1
  store i16 24, i16* %5, align 8
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %2, i32 0, i32 0
  %7 = bitcast %union.color_sample* %6 to i64*
  store i64 0, i64* %7, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %2, i32 0, i32 1
  store i16 32, i16* %8, align 8
  %9 = call i32 @dict_create(i32 401, %struct.ref_s* getelementptr inbounds ([20 x %struct.ref_s], [20 x %struct.ref_s]* @dstack, i64 0, i64 0))
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.ref_s* getelementptr inbounds ([20 x %struct.ref_s], [20 x %struct.ref_s]* @dstack, i64 0, i64 1) to i8*), i8* align 8 bitcast ([20 x %struct.ref_s]* @dstack to i8*), i64 16, i1 false)
  call void @initial_enter_name(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3.266, i64 0, i64 0), %struct.ref_s* %1)
  call void @initial_enter_name(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4.267, i64 0, i64 0), %struct.ref_s* %2)
  %10 = call i32 (i8*, %struct.ref_s*, ...) bitcast (void (i8*, %struct.ref_s*)* @name_enter to i32 (i8*, %struct.ref_s*, ...)*)(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5.268, i64 0, i64 0), %struct.ref_s* @name_errordict)
  %11 = call i32 (i8*, %struct.ref_s*, ...) bitcast (void (i8*, %struct.ref_s*)* @name_enter to i32 (i8*, %struct.ref_s*, ...)*)(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6.269, i64 0, i64 0), %struct.ref_s* @name_ErrorNames)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @op_init() #0 {
  call void (...) bitcast (void ()* @zarith_op_init to void (...)*)()
  call void (...) bitcast (void ()* @zarray_op_init to void (...)*)()
  call void (...) bitcast (void ()* @zcontrol_op_init to void (...)*)()
  call void (...) bitcast (void ()* @zdict_op_init to void (...)*)()
  call void (...) bitcast (void ()* @zfile_op_init to void (...)*)()
  call void (...) bitcast (void ()* @zgeneric_op_init to void (...)*)()
  call void (...) bitcast (void ()* @zmath_op_init to void (...)*)()
  call void (...) bitcast (void ()* @zmisc_op_init to void (...)*)()
  call void (...) bitcast (void ()* @zpacked_op_init to void (...)*)()
  call void (...) bitcast (void ()* @zrelbit_op_init to void (...)*)()
  call void (...) bitcast (void ()* @zstack_op_init to void (...)*)()
  call void (...) bitcast (void ()* @zstring_op_init to void (...)*)()
  call void (...) bitcast (void ()* @ztype_op_init to void (...)*)()
  call void (...) bitcast (void ()* @zvmem_op_init to void (...)*)()
  call void (...) bitcast (void ()* @zchar_op_init to void (...)*)()
  call void (...) bitcast (void ()* @zcolor_op_init to void (...)*)()
  call void (...) bitcast (void ()* @zdevice_op_init to void (...)*)()
  call void (...) bitcast (void ()* @zfont_op_init to void (...)*)()
  call void (...) bitcast (void ()* @zgstate_op_init to void (...)*)()
  call void (...) bitcast (void ()* @zht_op_init to void (...)*)()
  call void (...) bitcast (void ()* @zmatrix_op_init to void (...)*)()
  call void (...) bitcast (void ()* @zpaint_op_init to void (...)*)()
  call void (...) bitcast (void ()* @zpath_op_init to void (...)*)()
  call void (...) bitcast (void ()* @zpath2_op_init to void (...)*)()
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @z_op_init(%struct.op_def* %0) #0 {
  %2 = alloca %struct.op_def*, align 8
  %3 = alloca %struct.op_def*, align 8
  store %struct.op_def* %0, %struct.op_def** %2, align 8
  %4 = load %struct.op_def*, %struct.op_def** %2, align 8
  store %struct.op_def* %4, %struct.op_def** %3, align 8
  br label %5

5:                                                ; preds = %10, %1
  %6 = load %struct.op_def*, %struct.op_def** %3, align 8
  %7 = getelementptr inbounds %struct.op_def, %struct.op_def* %6, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = icmp ne i8* %8, null
  br i1 %9, label %10, label %19

10:                                               ; preds = %5
  %11 = load %struct.op_def*, %struct.op_def** %3, align 8
  %12 = getelementptr inbounds %struct.op_def, %struct.op_def* %11, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = load %struct.op_def*, %struct.op_def** %3, align 8
  %15 = getelementptr inbounds %struct.op_def, %struct.op_def* %14, i32 0, i32 1
  %16 = load i32 (%struct.ref_s*)*, i32 (%struct.ref_s*)** %15, align 8
  call void @initial_enter_op(i8* %13, i32 (%struct.ref_s*)* %16)
  %17 = load %struct.op_def*, %struct.op_def** %3, align 8
  %18 = getelementptr inbounds %struct.op_def, %struct.op_def* %17, i32 1
  store %struct.op_def* %18, %struct.op_def** %3, align 8
  br label %5

19:                                               ; preds = %5
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @name_init() #0 {
  %1 = alloca i32, align 4
  %2 = call i8* @alloc(i32 1, i32 6152, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.274, i64 0, i64 0))
  %3 = bitcast i8* %2 to %struct.name_table*
  store %struct.name_table* %3, %struct.name_table** @the_nt, align 8
  %4 = load %struct.name_table*, %struct.name_table** @the_nt, align 8
  %5 = bitcast %struct.name_table* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 6152, i1 false)
  store i32 0, i32* %1, align 4
  br label %6

6:                                                ; preds = %15, %0
  %7 = load i32, i32* %1, align 4
  %8 = icmp ult i32 %7, 256
  br i1 %8, label %9, label %18

9:                                                ; preds = %6
  %10 = load i32, i32* %1, align 4
  %11 = load %struct.name_table*, %struct.name_table** @the_nt, align 8
  %12 = getelementptr inbounds %struct.name_table, %struct.name_table* %11, i32 0, i32 2
  store i32 %10, i32* %12, align 8
  %13 = load %struct.name_table*, %struct.name_table** @the_nt, align 8
  %14 = call i32 @name_alloc_sub(%struct.name_table* %13)
  br label %15

15:                                               ; preds = %9
  %16 = load i32, i32* %1, align 4
  %17 = add i32 %16, 128
  store i32 %17, i32* %1, align 4
  br label %6

18:                                               ; preds = %6
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @name_alloc_sub(%struct.name_table* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.name_table*, align 8
  %4 = alloca %struct.name_s*, align 8
  store %struct.name_table* %0, %struct.name_table** %3, align 8
  %5 = call i8* @alloc(i32 1, i32 4096, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5.275, i64 0, i64 0))
  %6 = bitcast i8* %5 to %struct.name_s*
  store %struct.name_s* %6, %struct.name_s** %4, align 8
  %7 = load %struct.name_s*, %struct.name_s** %4, align 8
  %8 = icmp eq %struct.name_s* %7, null
  br i1 %8, label %9, label %10

9:                                                ; preds = %1
  store i32 -25, i32* %2, align 4
  br label %22

10:                                               ; preds = %1
  %11 = load %struct.name_s*, %struct.name_s** %4, align 8
  %12 = bitcast %struct.name_s* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 4096, i1 false)
  %13 = load %struct.name_s*, %struct.name_s** %4, align 8
  %14 = load %struct.name_table*, %struct.name_table** %3, align 8
  %15 = getelementptr inbounds %struct.name_table, %struct.name_table* %14, i32 0, i32 1
  %16 = load %struct.name_table*, %struct.name_table** %3, align 8
  %17 = getelementptr inbounds %struct.name_table, %struct.name_table* %16, i32 0, i32 2
  %18 = load i32, i32* %17, align 8
  %19 = lshr i32 %18, 7
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds [512 x %struct.name_s*], [512 x %struct.name_s*]* %15, i64 0, i64 %20
  store %struct.name_s* %13, %struct.name_s** %21, align 8
  store i32 0, i32* %2, align 4
  br label %22

22:                                               ; preds = %10, %9
  %23 = load i32, i32* %2, align 4
  ret i32 %23
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @name_ref(i8* %0, i32 %1, %struct.ref_s* %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca %struct.ref_s*, align 8
  %9 = alloca i32, align 4
  %10 = alloca %struct.name_s**, align 8
  %11 = alloca %struct.name_s*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i16, align 2
  %14 = alloca i16, align 2
  %15 = alloca i32, align 4
  store i8* %0, i8** %6, align 8
  store i32 %1, i32* %7, align 4
  store %struct.ref_s* %2, %struct.ref_s** %8, align 8
  store i32 %3, i32* %9, align 4
  %16 = load i32, i32* %7, align 4
  %17 = trunc i32 %16 to i16
  store i16 %17, i16* %13, align 2
  %18 = load i16, i16* %13, align 2
  %19 = zext i16 %18 to i32
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %59

21:                                               ; preds = %4
  %22 = load %struct.name_table*, %struct.name_table** @the_nt, align 8
  %23 = getelementptr inbounds %struct.name_table, %struct.name_table* %22, i32 0, i32 1
  %24 = load i8*, i8** %6, align 8
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i32
  %27 = ashr i32 %26, 7
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds [512 x %struct.name_s*], [512 x %struct.name_s*]* %23, i64 0, i64 %28
  %30 = load %struct.name_s*, %struct.name_s** %29, align 8
  %31 = load i8*, i8** %6, align 8
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = and i32 %33, 127
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds %struct.name_s, %struct.name_s* %30, i64 %35
  store %struct.name_s* %36, %struct.name_s** %11, align 8
  %37 = load %struct.name_s*, %struct.name_s** %11, align 8
  %38 = getelementptr inbounds %struct.name_s, %struct.name_s* %37, i32 0, i32 2
  %39 = load i16, i16* %38, align 2
  %40 = zext i16 %39 to i32
  %41 = icmp ne i32 %40, 0
  br i1 %41, label %42, label %49

42:                                               ; preds = %21
  %43 = load %struct.name_s*, %struct.name_s** %11, align 8
  %44 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %45 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %44, i32 0, i32 0
  %46 = bitcast %union.color_sample* %45 to %struct.name_s**
  store %struct.name_s* %43, %struct.name_s** %46, align 8
  %47 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %48 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %47, i32 0, i32 1
  store i16 28, i16* %48, align 8
  store i32 0, i32* %5, align 4
  br label %181

49:                                               ; preds = %21
  %50 = load i32, i32* %9, align 4
  %51 = icmp slt i32 %50, 0
  br i1 %51, label %52, label %53

52:                                               ; preds = %49
  store i32 -21, i32* %5, align 4
  br label %181

53:                                               ; preds = %49
  %54 = load i8*, i8** %6, align 8
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i16
  %57 = load %struct.name_s*, %struct.name_s** %11, align 8
  %58 = getelementptr inbounds %struct.name_s, %struct.name_s* %57, i32 0, i32 1
  store i16 %56, i16* %58, align 8
  br label %147

59:                                               ; preds = %4
  %60 = load i8*, i8** %6, align 8
  %61 = load i16, i16* %13, align 2
  %62 = zext i16 %61 to i32
  %63 = call i32 (i8*, i32, ...) bitcast (i32 (i8*, i32)* @string_hash to i32 (i8*, i32, ...)*)(i8* %60, i32 %62)
  %64 = trunc i32 %63 to i16
  store i16 %64, i16* %14, align 2
  %65 = load %struct.name_table*, %struct.name_table** @the_nt, align 8
  %66 = getelementptr inbounds %struct.name_table, %struct.name_table* %65, i32 0, i32 0
  %67 = getelementptr inbounds [256 x %struct.name_s*], [256 x %struct.name_s*]* %66, i64 0, i64 0
  %68 = load i16, i16* %14, align 2
  %69 = zext i16 %68 to i32
  %70 = and i32 %69, 255
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds %struct.name_s*, %struct.name_s** %67, i64 %71
  store %struct.name_s** %72, %struct.name_s*** %10, align 8
  br label %73

73:                                               ; preds = %101, %59
  %74 = load %struct.name_s**, %struct.name_s*** %10, align 8
  %75 = load %struct.name_s*, %struct.name_s** %74, align 8
  store %struct.name_s* %75, %struct.name_s** %11, align 8
  %76 = icmp ne %struct.name_s* %75, null
  br i1 %76, label %77, label %104

77:                                               ; preds = %73
  %78 = load %struct.name_s*, %struct.name_s** %11, align 8
  %79 = getelementptr inbounds %struct.name_s, %struct.name_s* %78, i32 0, i32 2
  %80 = load i16, i16* %79, align 2
  %81 = zext i16 %80 to i32
  %82 = load i16, i16* %13, align 2
  %83 = zext i16 %82 to i32
  %84 = icmp eq i32 %81, %83
  br i1 %84, label %85, label %101

85:                                               ; preds = %77
  %86 = load i8*, i8** %6, align 8
  %87 = load %struct.name_s*, %struct.name_s** %11, align 8
  %88 = getelementptr inbounds %struct.name_s, %struct.name_s* %87, i32 0, i32 3
  %89 = load i8*, i8** %88, align 8
  %90 = load i16, i16* %13, align 2
  %91 = zext i16 %90 to i64
  %92 = call i32 @memcmp(i8* %86, i8* %89, i64 %91) #11
  %93 = icmp ne i32 %92, 0
  br i1 %93, label %101, label %94

94:                                               ; preds = %85
  %95 = load %struct.name_s*, %struct.name_s** %11, align 8
  %96 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %97 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %96, i32 0, i32 0
  %98 = bitcast %union.color_sample* %97 to %struct.name_s**
  store %struct.name_s* %95, %struct.name_s** %98, align 8
  %99 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %100 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %99, i32 0, i32 1
  store i16 28, i16* %100, align 8
  store i32 0, i32* %5, align 4
  br label %181

101:                                              ; preds = %85, %77
  %102 = load %struct.name_s*, %struct.name_s** %11, align 8
  %103 = getelementptr inbounds %struct.name_s, %struct.name_s* %102, i32 0, i32 0
  store %struct.name_s** %103, %struct.name_s*** %10, align 8
  br label %73

104:                                              ; preds = %73
  %105 = load i32, i32* %9, align 4
  %106 = icmp slt i32 %105, 0
  br i1 %106, label %107, label %108

107:                                              ; preds = %104
  store i32 -21, i32* %5, align 4
  br label %181

108:                                              ; preds = %104
  %109 = load %struct.name_table*, %struct.name_table** @the_nt, align 8
  %110 = getelementptr inbounds %struct.name_table, %struct.name_table* %109, i32 0, i32 2
  %111 = load i32, i32* %110, align 8
  %112 = and i32 %111, 127
  %113 = icmp ne i32 %112, 0
  br i1 %113, label %122, label %114

114:                                              ; preds = %108
  %115 = load %struct.name_table*, %struct.name_table** @the_nt, align 8
  %116 = call i32 @name_alloc_sub(%struct.name_table* %115)
  store i32 %116, i32* %15, align 4
  %117 = load i32, i32* %15, align 4
  %118 = icmp slt i32 %117, 0
  br i1 %118, label %119, label %121

119:                                              ; preds = %114
  %120 = load i32, i32* %15, align 4
  store i32 %120, i32* %5, align 4
  br label %181

121:                                              ; preds = %114
  br label %122

122:                                              ; preds = %121, %108
  %123 = load %struct.name_table*, %struct.name_table** @the_nt, align 8
  %124 = getelementptr inbounds %struct.name_table, %struct.name_table* %123, i32 0, i32 1
  %125 = load %struct.name_table*, %struct.name_table** @the_nt, align 8
  %126 = getelementptr inbounds %struct.name_table, %struct.name_table* %125, i32 0, i32 2
  %127 = load i32, i32* %126, align 8
  %128 = lshr i32 %127, 7
  %129 = zext i32 %128 to i64
  %130 = getelementptr inbounds [512 x %struct.name_s*], [512 x %struct.name_s*]* %124, i64 0, i64 %129
  %131 = load %struct.name_s*, %struct.name_s** %130, align 8
  %132 = load %struct.name_table*, %struct.name_table** @the_nt, align 8
  %133 = getelementptr inbounds %struct.name_table, %struct.name_table* %132, i32 0, i32 2
  %134 = load i32, i32* %133, align 8
  %135 = and i32 %134, 127
  %136 = zext i32 %135 to i64
  %137 = getelementptr inbounds %struct.name_s, %struct.name_s* %131, i64 %136
  store %struct.name_s* %137, %struct.name_s** %11, align 8
  %138 = load %struct.name_table*, %struct.name_table** @the_nt, align 8
  %139 = getelementptr inbounds %struct.name_table, %struct.name_table* %138, i32 0, i32 2
  %140 = load i32, i32* %139, align 8
  %141 = add i32 %140, 1
  store i32 %141, i32* %139, align 8
  %142 = trunc i32 %140 to i16
  %143 = load %struct.name_s*, %struct.name_s** %11, align 8
  %144 = getelementptr inbounds %struct.name_s, %struct.name_s* %143, i32 0, i32 1
  store i16 %142, i16* %144, align 8
  %145 = load %struct.name_s*, %struct.name_s** %11, align 8
  %146 = load %struct.name_s**, %struct.name_s*** %10, align 8
  store %struct.name_s* %145, %struct.name_s** %146, align 8
  br label %147

147:                                              ; preds = %122, %53
  %148 = load i32, i32* %9, align 4
  %149 = icmp ne i32 %148, 0
  br i1 %149, label %150, label %162

150:                                              ; preds = %147
  %151 = load i16, i16* %13, align 2
  %152 = zext i16 %151 to i32
  %153 = call i8* @alloc(i32 %152, i32 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.278, i64 0, i64 0))
  store i8* %153, i8** %12, align 8
  %154 = load i8*, i8** %12, align 8
  %155 = icmp eq i8* %154, null
  br i1 %155, label %156, label %157

156:                                              ; preds = %150
  store i32 -25, i32* %5, align 4
  br label %181

157:                                              ; preds = %150
  %158 = load i8*, i8** %12, align 8
  %159 = load i8*, i8** %6, align 8
  %160 = load i16, i16* %13, align 2
  %161 = zext i16 %160 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %158, i8* align 1 %159, i64 %161, i1 false)
  br label %164

162:                                              ; preds = %147
  %163 = load i8*, i8** %6, align 8
  store i8* %163, i8** %12, align 8
  br label %164

164:                                              ; preds = %162, %157
  %165 = load i16, i16* %13, align 2
  %166 = load %struct.name_s*, %struct.name_s** %11, align 8
  %167 = getelementptr inbounds %struct.name_s, %struct.name_s* %166, i32 0, i32 2
  store i16 %165, i16* %167, align 2
  %168 = load i8*, i8** %12, align 8
  %169 = load %struct.name_s*, %struct.name_s** %11, align 8
  %170 = getelementptr inbounds %struct.name_s, %struct.name_s* %169, i32 0, i32 3
  store i8* %168, i8** %170, align 8
  %171 = load %struct.name_s*, %struct.name_s** %11, align 8
  %172 = getelementptr inbounds %struct.name_s, %struct.name_s* %171, i32 0, i32 0
  store %struct.name_s* null, %struct.name_s** %172, align 8
  %173 = load %struct.name_s*, %struct.name_s** %11, align 8
  %174 = getelementptr inbounds %struct.name_s, %struct.name_s* %173, i32 0, i32 4
  store %struct.ref_s* null, %struct.ref_s** %174, align 8
  %175 = load %struct.name_s*, %struct.name_s** %11, align 8
  %176 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %177 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %176, i32 0, i32 0
  %178 = bitcast %union.color_sample* %177 to %struct.name_s**
  store %struct.name_s* %175, %struct.name_s** %178, align 8
  %179 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %180 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %179, i32 0, i32 1
  store i16 28, i16* %180, align 8
  store i32 0, i32* %5, align 4
  br label %181

181:                                              ; preds = %164, %156, %119, %107, %94, %52, %42
  %182 = load i32, i32* %5, align 4
  ret i32 %182
}

; Function Attrs: nounwind readonly
declare dso_local i32 @memcmp(i8*, i8*, i64) #5

; Function Attrs: noinline nounwind uwtable
define dso_local void @name_string_ref(%struct.ref_s* %0, %struct.ref_s* %1) #0 {
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca %struct.name_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  store %struct.ref_s* %1, %struct.ref_s** %4, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i32 0, i32 0
  %8 = bitcast %union.color_sample* %7 to %struct.name_s**
  %9 = load %struct.name_s*, %struct.name_s** %8, align 8
  store %struct.name_s* %9, %struct.name_s** %5, align 8
  %10 = load %struct.name_s*, %struct.name_s** %5, align 8
  %11 = getelementptr inbounds %struct.name_s, %struct.name_s* %10, i32 0, i32 3
  %12 = load i8*, i8** %11, align 8
  %13 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i32 0, i32 0
  %15 = bitcast %union.color_sample* %14 to i8**
  store i8* %12, i8** %15, align 8
  %16 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %16, i32 0, i32 1
  store i16 566, i16* %17, align 8
  %18 = load %struct.name_s*, %struct.name_s** %5, align 8
  %19 = getelementptr inbounds %struct.name_s, %struct.name_s* %18, i32 0, i32 2
  %20 = load i16, i16* %19, align 2
  %21 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i32 0, i32 2
  store i16 %20, i16* %22, align 2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @name_enter(i8* %0, %struct.ref_s* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca %struct.ref_s*, align 8
  store i8* %0, i8** %3, align 8
  store %struct.ref_s* %1, %struct.ref_s** %4, align 8
  %5 = load i8*, i8** %3, align 8
  %6 = load i8*, i8** %3, align 8
  %7 = call i64 @strlen(i8* %6) #11
  %8 = trunc i64 %7 to i32
  %9 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %10 = call i32 @name_ref(i8* %5, i32 %8, %struct.ref_s* %9, i32 0)
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %12, label %18

12:                                               ; preds = %2
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2.281, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3.282, i64 0, i64 0), i32 135)
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %16 = load i8*, i8** %3, align 8
  %17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4.283, i64 0, i64 0), i8* %16)
  call void @exit(i32 1) #10
  unreachable

18:                                               ; preds = %2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @name_index_ref(i32 %0, %struct.ref_s* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.ref_s*, align 8
  store i32 %0, i32* %3, align 4
  store %struct.ref_s* %1, %struct.ref_s** %4, align 8
  %5 = load %struct.name_table*, %struct.name_table** @the_nt, align 8
  %6 = getelementptr inbounds %struct.name_table, %struct.name_table* %5, i32 0, i32 1
  %7 = load i32, i32* %3, align 4
  %8 = lshr i32 %7, 7
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds [512 x %struct.name_s*], [512 x %struct.name_s*]* %6, i64 0, i64 %9
  %11 = load %struct.name_s*, %struct.name_s** %10, align 8
  %12 = load i32, i32* %3, align 4
  %13 = and i32 %12, 127
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds %struct.name_s, %struct.name_s* %11, i64 %14
  %16 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %16, i32 0, i32 0
  %18 = bitcast %union.color_sample* %17 to %struct.name_s**
  store %struct.name_s* %15, %struct.name_s** %18, align 8
  %19 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i32 0, i32 1
  store i16 28, i16* %20, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @interp_init(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store %struct.ref_s* getelementptr inbounds ([520 x %struct.ref_s], [520 x %struct.ref_s]* @ostack, i64 0, i64 10), %struct.ref_s** @osbot, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** @osbot, align 8
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i64 -1
  store %struct.ref_s* %6, %struct.ref_s** @osp, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** @osbot, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i64 499
  store %struct.ref_s* %8, %struct.ref_s** @ostop, align 8
  store %struct.ref_s* getelementptr inbounds ([520 x %struct.ref_s], [520 x %struct.ref_s]* @ostack, i64 0, i64 0), %struct.ref_s** %3, align 8
  br label %9

9:                                                ; preds = %19, %1
  %10 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %11 = load %struct.ref_s*, %struct.ref_s** @osbot, align 8
  %12 = icmp ult %struct.ref_s* %10, %11
  br i1 %12, label %13, label %22

13:                                               ; preds = %9
  %14 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 0
  %16 = bitcast %union.color_sample* %15 to i16*
  store i16 0, i16* %16, align 8
  %17 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i32 0, i32 1
  store i16 -4, i16* %18, align 8
  br label %19

19:                                               ; preds = %13
  %20 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %21 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %20, i32 1
  store %struct.ref_s* %21, %struct.ref_s** %3, align 8
  br label %9

22:                                               ; preds = %9
  store i32 1, i32* %4, align 4
  br label %23

23:                                               ; preds = %35, %22
  %24 = load i32, i32* %4, align 4
  %25 = icmp slt i32 %24, 6
  br i1 %25, label %26, label %38

26:                                               ; preds = %23
  %27 = load %struct.ref_s*, %struct.ref_s** @osbot, align 8
  %28 = load i32, i32* %4, align 4
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %27, i64 %29
  %31 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %30, i64 -1
  %32 = load i32, i32* %4, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds [6 x %struct.ref_s*], [6 x %struct.ref_s*]* @osp_nargs, i64 0, i64 %33
  store %struct.ref_s* %31, %struct.ref_s** %34, align 8
  br label %35

35:                                               ; preds = %26
  %36 = load i32, i32* %4, align 4
  %37 = add nsw i32 %36, 1
  store i32 %37, i32* %4, align 4
  br label %23

38:                                               ; preds = %23
  store %struct.ref_s* getelementptr inbounds (%struct.ref_s, %struct.ref_s* getelementptr inbounds ([150 x %struct.ref_s], [150 x %struct.ref_s]* @estack, i64 0, i64 0), i64 -1), %struct.ref_s** @esp, align 8
  store %struct.ref_s* getelementptr inbounds ([150 x %struct.ref_s], [150 x %struct.ref_s]* @estack, i64 0, i64 149), %struct.ref_s** @estop, align 8
  %39 = load i32, i32* %2, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds %struct.ref_s, %struct.ref_s* getelementptr inbounds ([20 x %struct.ref_s], [20 x %struct.ref_s]* @dstack, i64 0, i64 0), i64 %40
  %42 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %41, i64 -1
  store %struct.ref_s* %42, %struct.ref_s** @dsp, align 8
  store %struct.ref_s* getelementptr inbounds ([20 x %struct.ref_s], [20 x %struct.ref_s]* @dstack, i64 0, i64 19), %struct.ref_s** @dstop, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @interp_fix_op(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32 (%struct.ref_s*)*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  store i32 7, i32* %3, align 4
  %5 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i32 0, i32 0
  %7 = bitcast %union.color_sample* %6 to i32 (%struct.ref_s*)**
  %8 = load i32 (%struct.ref_s*)*, i32 (%struct.ref_s*)** %7, align 8
  store i32 (%struct.ref_s*)* %8, i32 (%struct.ref_s*)** %4, align 8
  br label %9

9:                                                ; preds = %22, %1
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, -1
  store i32 %11, i32* %3, align 4
  %12 = icmp sge i32 %11, 0
  br i1 %12, label %13, label %20

13:                                               ; preds = %9
  %14 = load i32 (%struct.ref_s*)*, i32 (%struct.ref_s*)** %4, align 8
  %15 = load i32, i32* %3, align 4
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds [7 x i32 (%struct.ref_s*)*], [7 x i32 (%struct.ref_s*)*]* @special_ops, i64 0, i64 %16
  %18 = load i32 (%struct.ref_s*)*, i32 (%struct.ref_s*)** %17, align 8
  %19 = icmp ne i32 (%struct.ref_s*)* %14, %18
  br label %20

20:                                               ; preds = %13, %9
  %21 = phi i1 [ false, %9 ], [ %19, %13 ]
  br i1 %21, label %22, label %23

22:                                               ; preds = %20
  br label %9

23:                                               ; preds = %20
  %24 = load i32, i32* %3, align 4
  %25 = icmp sge i32 %24, 0
  br i1 %25, label %26, label %38

26:                                               ; preds = %23
  %27 = load i32 (%struct.ref_s*)*, i32 (%struct.ref_s*)** %4, align 8
  %28 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i32 0, i32 0
  %30 = bitcast %union.color_sample* %29 to i32 (%struct.ref_s*)**
  store i32 (%struct.ref_s*)* %27, i32 (%struct.ref_s*)** %30, align 8
  %31 = load i32, i32* %3, align 4
  %32 = add nsw i32 16, %31
  %33 = shl i32 %32, 2
  %34 = add nsw i32 %33, 1
  %35 = trunc i32 %34 to i16
  %36 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %37 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %36, i32 0, i32 1
  store i16 %35, i16* %37, align 8
  br label %38

38:                                               ; preds = %26, %23
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @interpret(%struct.ref_s* %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct.ref_s*, align 8
  %7 = alloca %struct.ref_s, align 8
  %8 = alloca %struct.ref_s*, align 8
  %9 = alloca %struct.ref_s*, align 8
  %10 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %4, align 8
  store i32 %1, i32* %5, align 4
  %11 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  store %struct.ref_s* %11, %struct.ref_s** %6, align 8
  %12 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %13 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %12, i32 1
  store %struct.ref_s* %13, %struct.ref_s** @esp, align 8
  %14 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 0
  %16 = bitcast %union.color_sample* %15 to i32 (%struct.ref_s*)**
  store i32 (%struct.ref_s*)* @interp_exit, i32 (%struct.ref_s*)** %16, align 8
  %17 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i32 0, i32 1
  store i16 37, i16* %18, align 8
  br label %19

19:                                               ; preds = %81, %2
  %20 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %21 = call i32 @interp(%struct.ref_s* %20)
  store i32 %21, i32* %10, align 4
  %22 = load i32, i32* %10, align 4
  %23 = icmp eq i32 %22, -100
  br i1 %23, label %24, label %25

24:                                               ; preds = %19
  store i32 0, i32* %3, align 4
  br label %88

25:                                               ; preds = %19
  %26 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %27 = load %struct.ref_s*, %struct.ref_s** @osbot, align 8
  %28 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %27, i64 -1
  %29 = icmp ult %struct.ref_s* %26, %28
  br i1 %29, label %30, label %33

30:                                               ; preds = %25
  %31 = load %struct.ref_s*, %struct.ref_s** @osbot, align 8
  %32 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %31, i64 -1
  store %struct.ref_s* %32, %struct.ref_s** @osp, align 8
  br label %33

33:                                               ; preds = %30, %25
  %34 = load i32, i32* %5, align 4
  %35 = icmp ne i32 %34, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %33
  %37 = load i32, i32* %10, align 4
  store i32 %37, i32* %3, align 4
  br label %88

38:                                               ; preds = %33
  %39 = call i32 @dict_lookup(%struct.ref_s* getelementptr inbounds ([20 x %struct.ref_s], [20 x %struct.ref_s]* @dstack, i64 0, i64 0), %struct.ref_s* getelementptr inbounds ([20 x %struct.ref_s], [20 x %struct.ref_s]* @dstack, i64 0, i64 0), %struct.ref_s* @name_errordict, %struct.ref_s** %8)
  %40 = icmp sle i32 %39, 0
  br i1 %40, label %46, label %41

41:                                               ; preds = %38
  %42 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %43 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %44 = call i32 @dict_lookup(%struct.ref_s* %42, %struct.ref_s* %43, %struct.ref_s* @name_ErrorNames, %struct.ref_s** %9)
  %45 = icmp sle i32 %44, 0
  br i1 %45, label %46, label %48

46:                                               ; preds = %41, %38
  %47 = load i32, i32* %10, align 4
  store i32 %47, i32* %3, align 4
  br label %88

48:                                               ; preds = %41
  %49 = load i32, i32* %10, align 4
  switch i32 %49, label %52 [
    i32 -3, label %50
    i32 -5, label %50
    i32 -16, label %50
    i32 -25, label %50
  ]

50:                                               ; preds = %48, %48, %48, %48
  %51 = load i32, i32* %10, align 4
  store i32 %51, i32* %3, align 4
  br label %88

52:                                               ; preds = %48
  %53 = load i32, i32* %10, align 4
  %54 = icmp sgt i32 %53, -2
  br i1 %54, label %63, label %55

55:                                               ; preds = %52
  %56 = load i32, i32* %10, align 4
  %57 = sub nsw i32 0, %56
  %58 = load %struct.ref_s*, %struct.ref_s** %9, align 8
  %59 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %58, i32 0, i32 2
  %60 = load i16, i16* %59, align 2
  %61 = zext i16 %60 to i32
  %62 = icmp sgt i32 %57, %61
  br i1 %62, label %63, label %65

63:                                               ; preds = %55, %52
  %64 = load i32, i32* %10, align 4
  store i32 %64, i32* %3, align 4
  br label %88

65:                                               ; preds = %55
  %66 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %67 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %68 = load %struct.ref_s*, %struct.ref_s** %9, align 8
  %69 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %68, i32 0, i32 0
  %70 = bitcast %union.color_sample* %69 to %struct.ref_s**
  %71 = load %struct.ref_s*, %struct.ref_s** %70, align 8
  %72 = load i32, i32* %10, align 4
  %73 = sub nsw i32 0, %72
  %74 = sub nsw i32 %73, 1
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %71, i64 %75
  %77 = call i32 @dict_lookup(%struct.ref_s* %66, %struct.ref_s* %67, %struct.ref_s* %76, %struct.ref_s** %6)
  %78 = icmp sle i32 %77, 0
  br i1 %78, label %79, label %81

79:                                               ; preds = %65
  %80 = load i32, i32* %10, align 4
  store i32 %80, i32* %3, align 4
  br label %88

81:                                               ; preds = %65
  %82 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %83 = bitcast %struct.ref_s* %7 to i8*
  %84 = bitcast %struct.ref_s* %82 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %83, i8* align 8 %84, i64 16, i1 false)
  store %struct.ref_s* %7, %struct.ref_s** %6, align 8
  %85 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %86 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %85, i32 1
  store %struct.ref_s* %86, %struct.ref_s** @osp, align 8
  %87 = bitcast %struct.ref_s* %86 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %87, i8* align 8 bitcast (%struct.ref_s* @error_object to i8*), i64 16, i1 false)
  br label %19

88:                                               ; preds = %79, %63, %50, %46, %36, %24
  %89 = load i32, i32* %3, align 4
  ret i32 %89
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @interp_exit(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  ret i32 -100
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @interp(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct.ref_s*, align 8
  %7 = alloca %struct.ref_s*, align 8
  %8 = alloca i32, align 4
  %9 = alloca %struct.ref_s, align 8
  %10 = alloca %struct.ref_s*, align 8
  %11 = alloca %struct.ref_s*, align 8
  %12 = alloca %struct.ref_s*, align 8
  %13 = alloca %struct.ref_s*, align 8
  %14 = alloca %struct.stream_s*, align 8
  %15 = alloca %struct.stream_s, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %16 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  store %struct.ref_s* %16, %struct.ref_s** %4, align 8
  store i32 0, i32* %5, align 4
  %17 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  store %struct.ref_s* %17, %struct.ref_s** %6, align 8
  %18 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  store %struct.ref_s* %18, %struct.ref_s** %7, align 8
  store %struct.ref_s* %9, %struct.ref_s** %10, align 8
  %19 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %20 = load %struct.ref_s*, %struct.ref_s** @estop, align 8
  %21 = icmp uge %struct.ref_s* %19, %20
  br i1 %21, label %22, label %26

22:                                               ; preds = %1
  %23 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  store %struct.ref_s* %23, %struct.ref_s** @esp, align 8
  %24 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %25 = bitcast %struct.ref_s* %24 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.ref_s* @error_object to i8*), i8* align 8 %25, i64 16, i1 false)
  store i32 -5, i32* %2, align 4
  br label %729

26:                                               ; preds = %1
  %27 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %28 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %27, i32 1
  store %struct.ref_s* %28, %struct.ref_s** %7, align 8
  %29 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %30 = bitcast %struct.ref_s* %28 to i8*
  %31 = bitcast %struct.ref_s* %29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 %31, i64 16, i1 false)
  br label %681

32:                                               ; preds = %728, %704, %692, %685, %631, %573, %532, %513, %491, %425, %345, %275, %256, %238, %214, %179, %115, %83, %59
  br label %33

33:                                               ; preds = %32
  %34 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %35 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %34, i32 0, i32 1
  %36 = load i16, i16* %35, align 8
  %37 = zext i16 %36 to i32
  %38 = and i32 %37, 255
  switch i32 %38, label %666 [
    i32 0, label %39
    i32 1, label %39
    i32 8, label %39
    i32 9, label %39
    i32 12, label %39
    i32 13, label %39
    i32 40, label %39
    i32 41, label %39
    i32 52, label %39
    i32 53, label %39
    i32 2, label %43
    i32 4, label %43
    i32 5, label %43
    i32 10, label %43
    i32 14, label %43
    i32 16, label %43
    i32 17, label %43
    i32 20, label %43
    i32 21, label %43
    i32 24, label %43
    i32 25, label %43
    i32 28, label %43
    i32 32, label %43
    i32 36, label %43
    i32 42, label %43
    i32 44, label %43
    i32 45, label %43
    i32 48, label %43
    i32 49, label %43
    i32 54, label %43
    i32 56, label %43
    i32 57, label %43
    i32 60, label %43
    i32 61, label %43
    i32 65, label %44
    i32 69, label %63
    i32 73, label %87
    i32 77, label %119
    i32 81, label %215
    i32 85, label %242
    i32 89, label %260
    i32 33, label %279
    i32 37, label %280
    i32 29, label %349
    i32 15, label %535
    i32 55, label %596
  ]

39:                                               ; preds = %33, %33, %33, %33, %33, %33, %33, %33, %33, %33
  %40 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  store %struct.ref_s* %40, %struct.ref_s** @esp, align 8
  %41 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %42 = bitcast %struct.ref_s* %41 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.ref_s* @error_object to i8*), i8* align 8 %42, i64 16, i1 false)
  store i32 -7, i32* %2, align 4
  br label %729

43:                                               ; preds = %33, %33, %33, %33, %33, %33, %33, %33, %33, %33, %33, %33, %33, %33, %33, %33, %33, %33, %33, %33, %33, %33, %33, %33
  br label %666

44:                                               ; preds = %33
  %45 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %46 = call i32 @zadd(%struct.ref_s* %45)
  store i32 %46, i32* %8, align 4
  %47 = icmp slt i32 %46, 0
  br i1 %47, label %48, label %53

48:                                               ; preds = %44
  %49 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  store %struct.ref_s* %49, %struct.ref_s** @esp, align 8
  %50 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %51 = bitcast %struct.ref_s* %50 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.ref_s* @error_object to i8*), i8* align 8 %51, i64 16, i1 false)
  %52 = load i32, i32* %8, align 4
  store i32 %52, i32* %2, align 4
  br label %729

53:                                               ; preds = %44
  %54 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %55 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %54, i32 -1
  store %struct.ref_s* %55, %struct.ref_s** %6, align 8
  %56 = load i32, i32* %5, align 4
  %57 = add nsw i32 %56, -1
  store i32 %57, i32* %5, align 4
  %58 = icmp sgt i32 %57, 0
  br i1 %58, label %59, label %62

59:                                               ; preds = %53
  %60 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %61 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %60, i32 1
  store %struct.ref_s* %61, %struct.ref_s** %4, align 8
  br label %32

62:                                               ; preds = %53
  br label %689

63:                                               ; preds = %33
  %64 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %65 = load %struct.ref_s*, %struct.ref_s** getelementptr inbounds ([6 x %struct.ref_s*], [6 x %struct.ref_s*]* @osp_nargs, i64 0, i64 1), align 8
  %66 = icmp ult %struct.ref_s* %64, %65
  br i1 %66, label %67, label %71

67:                                               ; preds = %63
  %68 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  store %struct.ref_s* %68, %struct.ref_s** @esp, align 8
  %69 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %70 = bitcast %struct.ref_s* %69 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.ref_s* @error_object to i8*), i8* align 8 %70, i64 16, i1 false)
  store i32 -17, i32* %2, align 4
  br label %729

71:                                               ; preds = %63
  %72 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %73 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %72, i32 1
  store %struct.ref_s* %73, %struct.ref_s** %6, align 8
  %74 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %75 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %74, i64 0
  %76 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %77 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %76, i64 -1
  %78 = bitcast %struct.ref_s* %75 to i8*
  %79 = bitcast %struct.ref_s* %77 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %78, i8* align 8 %79, i64 16, i1 false)
  %80 = load i32, i32* %5, align 4
  %81 = add nsw i32 %80, -1
  store i32 %81, i32* %5, align 4
  %82 = icmp sgt i32 %81, 0
  br i1 %82, label %83, label %86

83:                                               ; preds = %71
  %84 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %85 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %84, i32 1
  store %struct.ref_s* %85, %struct.ref_s** %4, align 8
  br label %32

86:                                               ; preds = %71
  br label %689

87:                                               ; preds = %33
  %88 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %89 = load %struct.ref_s*, %struct.ref_s** getelementptr inbounds ([6 x %struct.ref_s*], [6 x %struct.ref_s*]* @osp_nargs, i64 0, i64 2), align 16
  %90 = icmp ult %struct.ref_s* %88, %89
  br i1 %90, label %91, label %95

91:                                               ; preds = %87
  %92 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  store %struct.ref_s* %92, %struct.ref_s** @esp, align 8
  %93 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %94 = bitcast %struct.ref_s* %93 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.ref_s* @error_object to i8*), i8* align 8 %94, i64 16, i1 false)
  store i32 -17, i32* %2, align 4
  br label %729

95:                                               ; preds = %87
  %96 = load %struct.ref_s*, %struct.ref_s** %10, align 8
  %97 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %98 = bitcast %struct.ref_s* %96 to i8*
  %99 = bitcast %struct.ref_s* %97 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %98, i8* align 8 %99, i64 16, i1 false)
  %100 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %101 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %100, i64 0
  %102 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %103 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %102, i64 -1
  %104 = bitcast %struct.ref_s* %101 to i8*
  %105 = bitcast %struct.ref_s* %103 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %104, i8* align 8 %105, i64 16, i1 false)
  %106 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %107 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %106, i64 -1
  %108 = load %struct.ref_s*, %struct.ref_s** %10, align 8
  %109 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %108, i64 0
  %110 = bitcast %struct.ref_s* %107 to i8*
  %111 = bitcast %struct.ref_s* %109 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %110, i8* align 8 %111, i64 16, i1 false)
  %112 = load i32, i32* %5, align 4
  %113 = add nsw i32 %112, -1
  store i32 %113, i32* %5, align 4
  %114 = icmp sgt i32 %113, 0
  br i1 %114, label %115, label %118

115:                                              ; preds = %95
  %116 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %117 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %116, i32 1
  store %struct.ref_s* %117, %struct.ref_s** %4, align 8
  br label %32

118:                                              ; preds = %95
  br label %689

119:                                              ; preds = %33
  %120 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %121 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %120, i64 -2
  %122 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %121, i32 0, i32 1
  %123 = load i16, i16* %122, align 8
  %124 = zext i16 %123 to i32
  %125 = and i32 %124, 255
  %126 = ashr i32 %125, 2
  %127 = icmp ne i32 %126, 1
  br i1 %127, label %128, label %132

128:                                              ; preds = %119
  %129 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  store %struct.ref_s* %129, %struct.ref_s** @esp, align 8
  %130 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %131 = bitcast %struct.ref_s* %130 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.ref_s* @error_object to i8*), i8* align 8 %131, i64 16, i1 false)
  store i32 -20, i32* %2, align 4
  br label %729

132:                                              ; preds = %119
  %133 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %134 = load %struct.ref_s*, %struct.ref_s** @estop, align 8
  %135 = icmp uge %struct.ref_s* %133, %134
  br i1 %135, label %136, label %140

136:                                              ; preds = %132
  %137 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  store %struct.ref_s* %137, %struct.ref_s** @esp, align 8
  %138 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %139 = bitcast %struct.ref_s* %138 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.ref_s* @error_object to i8*), i8* align 8 %139, i64 16, i1 false)
  store i32 -5, i32* %2, align 4
  br label %729

140:                                              ; preds = %132
  %141 = load i32, i32* %5, align 4
  %142 = icmp sgt i32 %141, 0
  br i1 %142, label %143, label %154

143:                                              ; preds = %140
  %144 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %145 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %144, i64 1
  %146 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %147 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %146, i32 0, i32 0
  %148 = bitcast %union.color_sample* %147 to %struct.ref_s**
  store %struct.ref_s* %145, %struct.ref_s** %148, align 8
  %149 = load i32, i32* %5, align 4
  %150 = trunc i32 %149 to i16
  %151 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %152 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %151, i32 0, i32 2
  store i16 %150, i16* %152, align 2
  %153 = zext i16 %150 to i32
  br label %155

154:                                              ; preds = %140
  br label %155

155:                                              ; preds = %154, %143
  %156 = phi i32 [ %153, %143 ], [ 0, %154 ]
  %157 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %158 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %157, i64 -3
  store %struct.ref_s* %158, %struct.ref_s** %6, align 8
  %159 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %160 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %159, i64 1
  %161 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %160, i32 0, i32 0
  %162 = bitcast %union.color_sample* %161 to i16*
  %163 = load i16, i16* %162, align 8
  %164 = zext i16 %163 to i32
  %165 = icmp ne i32 %164, 0
  br i1 %165, label %166, label %169

166:                                              ; preds = %155
  %167 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %168 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %167, i64 2
  br label %172

169:                                              ; preds = %155
  %170 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %171 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %170, i64 3
  br label %172

172:                                              ; preds = %169, %166
  %173 = phi %struct.ref_s* [ %168, %166 ], [ %171, %169 ]
  store %struct.ref_s* %173, %struct.ref_s** %11, align 8
  %174 = load %struct.ref_s*, %struct.ref_s** %11, align 8
  %175 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %174, i32 0, i32 1
  %176 = load i16, i16* %175, align 8
  %177 = zext i16 %176 to i32
  %178 = and i32 %177, 255
  switch i32 %178, label %179 [
    i32 3, label %188
    i32 43, label %189
  ]

179:                                              ; preds = %172
  %180 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %181 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %180, i64 1
  %182 = load %struct.ref_s*, %struct.ref_s** %11, align 8
  %183 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %182, i64 0
  %184 = bitcast %struct.ref_s* %181 to i8*
  %185 = bitcast %struct.ref_s* %183 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %184, i8* align 8 %185, i64 16, i1 false)
  %186 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %187 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %186, i64 1
  store %struct.ref_s* %187, %struct.ref_s** %4, align 8
  store i32 0, i32* %5, align 4
  br label %32

188:                                              ; preds = %172
  br label %189

189:                                              ; preds = %188, %172
  br label %190

190:                                              ; preds = %189
  %191 = load %struct.ref_s*, %struct.ref_s** %11, align 8
  %192 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %191, i32 0, i32 0
  %193 = bitcast %union.color_sample* %192 to %struct.ref_s**
  %194 = load %struct.ref_s*, %struct.ref_s** %193, align 8
  store %struct.ref_s* %194, %struct.ref_s** %4, align 8
  %195 = load %struct.ref_s*, %struct.ref_s** %11, align 8
  %196 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %195, i32 0, i32 2
  %197 = load i16, i16* %196, align 2
  %198 = zext i16 %197 to i32
  store i32 %198, i32* %5, align 4
  %199 = load i32, i32* %5, align 4
  %200 = add nsw i32 %199, -1
  store i32 %200, i32* %5, align 4
  %201 = icmp sle i32 %200, 0
  br i1 %201, label %202, label %207

202:                                              ; preds = %190
  %203 = load i32, i32* %5, align 4
  %204 = icmp slt i32 %203, 0
  br i1 %204, label %205, label %206

205:                                              ; preds = %202
  br label %698

206:                                              ; preds = %202
  br label %214

207:                                              ; preds = %190
  %208 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %209 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %208, i32 1
  store %struct.ref_s* %209, %struct.ref_s** %7, align 8
  %210 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %211 = load %struct.ref_s*, %struct.ref_s** %11, align 8
  %212 = bitcast %struct.ref_s* %210 to i8*
  %213 = bitcast %struct.ref_s* %211 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %212, i8* align 8 %213, i64 16, i1 false)
  br label %214

214:                                              ; preds = %207, %206
  br label %32

215:                                              ; preds = %33
  %216 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %217 = call i32 (%struct.ref_s*, i32, ...) bitcast (i32 (%struct.ref_s*, i32)* @obj_compare to i32 (%struct.ref_s*, i32, ...)*)(%struct.ref_s* %216, i32 3)
  store i32 %217, i32* %8, align 4
  %218 = load i32, i32* %8, align 4
  %219 = icmp slt i32 %218, 0
  br i1 %219, label %220, label %225

220:                                              ; preds = %215
  %221 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  store %struct.ref_s* %221, %struct.ref_s** @esp, align 8
  %222 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %223 = bitcast %struct.ref_s* %222 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.ref_s* @error_object to i8*), i8* align 8 %223, i64 16, i1 false)
  %224 = load i32, i32* %8, align 4
  store i32 %224, i32* %2, align 4
  br label %729

225:                                              ; preds = %215
  %226 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %227 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %226, i32 -1
  store %struct.ref_s* %227, %struct.ref_s** %6, align 8
  %228 = load i32, i32* %8, align 4
  %229 = trunc i32 %228 to i16
  %230 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %231 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %230, i32 0, i32 0
  %232 = bitcast %union.color_sample* %231 to i16*
  store i16 %229, i16* %232, align 8
  %233 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %234 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %233, i32 0, i32 1
  store i16 4, i16* %234, align 8
  %235 = load i32, i32* %5, align 4
  %236 = add nsw i32 %235, -1
  store i32 %236, i32* %5, align 4
  %237 = icmp sgt i32 %236, 0
  br i1 %237, label %238, label %241

238:                                              ; preds = %225
  %239 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %240 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %239, i32 1
  store %struct.ref_s* %240, %struct.ref_s** %4, align 8
  br label %32

241:                                              ; preds = %225
  br label %689

242:                                              ; preds = %33
  %243 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %244 = load %struct.ref_s*, %struct.ref_s** getelementptr inbounds ([6 x %struct.ref_s*], [6 x %struct.ref_s*]* @osp_nargs, i64 0, i64 1), align 8
  %245 = icmp ult %struct.ref_s* %243, %244
  br i1 %245, label %246, label %250

246:                                              ; preds = %242
  %247 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  store %struct.ref_s* %247, %struct.ref_s** @esp, align 8
  %248 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %249 = bitcast %struct.ref_s* %248 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.ref_s* @error_object to i8*), i8* align 8 %249, i64 16, i1 false)
  store i32 -17, i32* %2, align 4
  br label %729

250:                                              ; preds = %242
  %251 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %252 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %251, i32 -1
  store %struct.ref_s* %252, %struct.ref_s** %6, align 8
  %253 = load i32, i32* %5, align 4
  %254 = add nsw i32 %253, -1
  store i32 %254, i32* %5, align 4
  %255 = icmp sgt i32 %254, 0
  br i1 %255, label %256, label %259

256:                                              ; preds = %250
  %257 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %258 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %257, i32 1
  store %struct.ref_s* %258, %struct.ref_s** %4, align 8
  br label %32

259:                                              ; preds = %250
  br label %689

260:                                              ; preds = %33
  %261 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %262 = call i32 @zsub(%struct.ref_s* %261)
  store i32 %262, i32* %8, align 4
  %263 = icmp slt i32 %262, 0
  br i1 %263, label %264, label %269

264:                                              ; preds = %260
  %265 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  store %struct.ref_s* %265, %struct.ref_s** @esp, align 8
  %266 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %267 = bitcast %struct.ref_s* %266 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.ref_s* @error_object to i8*), i8* align 8 %267, i64 16, i1 false)
  %268 = load i32, i32* %8, align 4
  store i32 %268, i32* %2, align 4
  br label %729

269:                                              ; preds = %260
  %270 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %271 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %270, i32 -1
  store %struct.ref_s* %271, %struct.ref_s** %6, align 8
  %272 = load i32, i32* %5, align 4
  %273 = add nsw i32 %272, -1
  store i32 %273, i32* %5, align 4
  %274 = icmp sgt i32 %273, 0
  br i1 %274, label %275, label %278

275:                                              ; preds = %269
  %276 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %277 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %276, i32 1
  store %struct.ref_s* %277, %struct.ref_s** %4, align 8
  br label %32

278:                                              ; preds = %269
  br label %689

279:                                              ; preds = %33
  br label %681

280:                                              ; preds = %33
  %281 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  store %struct.ref_s* %281, %struct.ref_s** @esp, align 8
  %282 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  store %struct.ref_s* %282, %struct.ref_s** @osp, align 8
  %283 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %284 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %283, i32 0, i32 0
  %285 = bitcast %union.color_sample* %284 to i32 (%struct.ref_s*)**
  %286 = load i32 (%struct.ref_s*)*, i32 (%struct.ref_s*)** %285, align 8
  %287 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %288 = call i32 %286(%struct.ref_s* %287)
  store i32 %288, i32* %8, align 4
  %289 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  store %struct.ref_s* %289, %struct.ref_s** %6, align 8
  %290 = load i32, i32* %8, align 4
  %291 = icmp ne i32 %290, 0
  br i1 %291, label %292, label %341

292:                                              ; preds = %280
  %293 = load i32, i32* %8, align 4
  switch i32 %293, label %336 [
    i32 1, label %294
    i32 -20, label %323
  ]

294:                                              ; preds = %292
  %295 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %296 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %297 = icmp ugt %struct.ref_s* %295, %296
  br i1 %297, label %298, label %315

298:                                              ; preds = %294
  %299 = load i32, i32* %5, align 4
  %300 = icmp sgt i32 %299, 0
  br i1 %300, label %301, label %312

301:                                              ; preds = %298
  %302 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %303 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %302, i64 1
  %304 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %305 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %304, i32 0, i32 0
  %306 = bitcast %union.color_sample* %305 to %struct.ref_s**
  store %struct.ref_s* %303, %struct.ref_s** %306, align 8
  %307 = load i32, i32* %5, align 4
  %308 = trunc i32 %307 to i16
  %309 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %310 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %309, i32 0, i32 2
  store i16 %308, i16* %310, align 2
  %311 = zext i16 %308 to i32
  br label %313

312:                                              ; preds = %298
  br label %313

313:                                              ; preds = %312, %301
  %314 = phi i32 [ %311, %301 ], [ 0, %312 ]
  br label %321

315:                                              ; preds = %294
  %316 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %317 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %318 = icmp eq %struct.ref_s* %316, %317
  br i1 %318, label %319, label %320

319:                                              ; preds = %315
  br label %681

320:                                              ; preds = %315
  br label %321

321:                                              ; preds = %320, %313
  %322 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  store %struct.ref_s* %322, %struct.ref_s** %7, align 8
  br label %698

323:                                              ; preds = %292
  %324 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %325 = load %struct.ref_s*, %struct.ref_s** @osbot, align 8
  %326 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %325, i64 -1
  %327 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %328 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %327, i32 0, i32 2
  %329 = load i16, i16* %328, align 2
  %330 = zext i16 %329 to i32
  %331 = sext i32 %330 to i64
  %332 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %326, i64 %331
  %333 = icmp ult %struct.ref_s* %324, %332
  br i1 %333, label %334, label %335

334:                                              ; preds = %323
  store i32 -17, i32* %8, align 4
  br label %335

335:                                              ; preds = %334, %323
  br label %336

336:                                              ; preds = %335, %292
  %337 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  store %struct.ref_s* %337, %struct.ref_s** @esp, align 8
  %338 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %339 = bitcast %struct.ref_s* %338 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.ref_s* @error_object to i8*), i8* align 8 %339, i64 16, i1 false)
  %340 = load i32, i32* %8, align 4
  store i32 %340, i32* %2, align 4
  br label %729

341:                                              ; preds = %280
  %342 = load i32, i32* %5, align 4
  %343 = add nsw i32 %342, -1
  store i32 %343, i32* %5, align 4
  %344 = icmp sgt i32 %343, 0
  br i1 %344, label %345, label %348

345:                                              ; preds = %341
  %346 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %347 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %346, i32 1
  store %struct.ref_s* %347, %struct.ref_s** %4, align 8
  br label %32

348:                                              ; preds = %341
  br label %689

349:                                              ; preds = %33
  %350 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %351 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %350, i32 0, i32 0
  %352 = bitcast %union.color_sample* %351 to %struct.name_s**
  %353 = load %struct.name_s*, %struct.name_s** %352, align 8
  %354 = getelementptr inbounds %struct.name_s, %struct.name_s* %353, i32 0, i32 4
  %355 = load %struct.ref_s*, %struct.ref_s** %354, align 8
  store %struct.ref_s* %355, %struct.ref_s** %12, align 8
  %356 = load %struct.ref_s*, %struct.ref_s** %12, align 8
  %357 = ptrtoint %struct.ref_s* %356 to i64
  %358 = icmp ugt i64 %357, 1
  br i1 %358, label %370, label %359

359:                                              ; preds = %349
  %360 = load %struct.ref_s*, %struct.ref_s** @dsp, align 8
  %361 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %362 = call i32 @dict_lookup(%struct.ref_s* getelementptr inbounds ([20 x %struct.ref_s], [20 x %struct.ref_s]* @dstack, i64 0, i64 0), %struct.ref_s* %360, %struct.ref_s* %361, %struct.ref_s** %13)
  %363 = icmp sle i32 %362, 0
  br i1 %363, label %364, label %368

364:                                              ; preds = %359
  %365 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  store %struct.ref_s* %365, %struct.ref_s** @esp, align 8
  %366 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %367 = bitcast %struct.ref_s* %366 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.ref_s* @error_object to i8*), i8* align 8 %367, i64 16, i1 false)
  store i32 -21, i32* %2, align 4
  br label %729

368:                                              ; preds = %359
  %369 = load %struct.ref_s*, %struct.ref_s** %13, align 8
  store %struct.ref_s* %369, %struct.ref_s** %12, align 8
  br label %370

370:                                              ; preds = %368, %349
  %371 = load %struct.ref_s*, %struct.ref_s** %12, align 8
  %372 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %371, i32 0, i32 1
  %373 = load i16, i16* %372, align 8
  %374 = zext i16 %373 to i32
  %375 = and i32 %374, 255
  switch i32 %375, label %517 [
    i32 3, label %376
    i32 43, label %376
    i32 37, label %426
    i32 2, label %495
    i32 4, label %495
    i32 20, label %495
    i32 42, label %495
    i32 44, label %495
    i32 54, label %495
  ]

376:                                              ; preds = %370, %370
  %377 = load i32, i32* %5, align 4
  %378 = icmp sgt i32 %377, 0
  br i1 %378, label %379, label %390

379:                                              ; preds = %376
  %380 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %381 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %380, i64 1
  %382 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %383 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %382, i32 0, i32 0
  %384 = bitcast %union.color_sample* %383 to %struct.ref_s**
  store %struct.ref_s* %381, %struct.ref_s** %384, align 8
  %385 = load i32, i32* %5, align 4
  %386 = trunc i32 %385 to i16
  %387 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %388 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %387, i32 0, i32 2
  store i16 %386, i16* %388, align 2
  %389 = zext i16 %386 to i32
  br label %391

390:                                              ; preds = %376
  br label %391

391:                                              ; preds = %390, %379
  %392 = phi i32 [ %389, %379 ], [ 0, %390 ]
  %393 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %394 = load %struct.ref_s*, %struct.ref_s** @estop, align 8
  %395 = icmp uge %struct.ref_s* %393, %394
  br i1 %395, label %396, label %400

396:                                              ; preds = %391
  %397 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  store %struct.ref_s* %397, %struct.ref_s** @esp, align 8
  %398 = load %struct.ref_s*, %struct.ref_s** %12, align 8
  %399 = bitcast %struct.ref_s* %398 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.ref_s* @error_object to i8*), i8* align 8 %399, i64 16, i1 false)
  store i32 -5, i32* %2, align 4
  br label %729

400:                                              ; preds = %391
  %401 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %402 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %401, i32 1
  store %struct.ref_s* %402, %struct.ref_s** %7, align 8
  %403 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %404 = load %struct.ref_s*, %struct.ref_s** %12, align 8
  %405 = bitcast %struct.ref_s* %403 to i8*
  %406 = bitcast %struct.ref_s* %404 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %405, i8* align 8 %406, i64 16, i1 false)
  %407 = load %struct.ref_s*, %struct.ref_s** %12, align 8
  %408 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %407, i32 0, i32 0
  %409 = bitcast %union.color_sample* %408 to %struct.ref_s**
  %410 = load %struct.ref_s*, %struct.ref_s** %409, align 8
  store %struct.ref_s* %410, %struct.ref_s** %4, align 8
  %411 = load %struct.ref_s*, %struct.ref_s** %12, align 8
  %412 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %411, i32 0, i32 2
  %413 = load i16, i16* %412, align 2
  %414 = zext i16 %413 to i32
  %415 = sub nsw i32 %414, 1
  store i32 %415, i32* %5, align 4
  %416 = load i32, i32* %5, align 4
  %417 = icmp sle i32 %416, 0
  br i1 %417, label %418, label %425

418:                                              ; preds = %400
  %419 = load i32, i32* %5, align 4
  %420 = icmp slt i32 %419, 0
  br i1 %420, label %421, label %422

421:                                              ; preds = %418
  br label %698

422:                                              ; preds = %418
  %423 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %424 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %423, i32 -1
  store %struct.ref_s* %424, %struct.ref_s** %7, align 8
  br label %425

425:                                              ; preds = %422, %400
  br label %32

426:                                              ; preds = %370
  %427 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  store %struct.ref_s* %427, %struct.ref_s** @esp, align 8
  %428 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  store %struct.ref_s* %428, %struct.ref_s** @osp, align 8
  %429 = load %struct.ref_s*, %struct.ref_s** %12, align 8
  %430 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %429, i32 0, i32 0
  %431 = bitcast %union.color_sample* %430 to i32 (%struct.ref_s*)**
  %432 = load i32 (%struct.ref_s*)*, i32 (%struct.ref_s*)** %431, align 8
  %433 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %434 = call i32 %432(%struct.ref_s* %433)
  store i32 %434, i32* %8, align 4
  %435 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  store %struct.ref_s* %435, %struct.ref_s** %6, align 8
  %436 = load i32, i32* %8, align 4
  %437 = icmp ne i32 %436, 0
  br i1 %437, label %438, label %487

438:                                              ; preds = %426
  %439 = load i32, i32* %8, align 4
  switch i32 %439, label %482 [
    i32 1, label %440
    i32 -20, label %469
  ]

440:                                              ; preds = %438
  %441 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %442 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %443 = icmp ugt %struct.ref_s* %441, %442
  br i1 %443, label %444, label %461

444:                                              ; preds = %440
  %445 = load i32, i32* %5, align 4
  %446 = icmp sgt i32 %445, 0
  br i1 %446, label %447, label %458

447:                                              ; preds = %444
  %448 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %449 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %448, i64 1
  %450 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %451 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %450, i32 0, i32 0
  %452 = bitcast %union.color_sample* %451 to %struct.ref_s**
  store %struct.ref_s* %449, %struct.ref_s** %452, align 8
  %453 = load i32, i32* %5, align 4
  %454 = trunc i32 %453 to i16
  %455 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %456 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %455, i32 0, i32 2
  store i16 %454, i16* %456, align 2
  %457 = zext i16 %454 to i32
  br label %459

458:                                              ; preds = %444
  br label %459

459:                                              ; preds = %458, %447
  %460 = phi i32 [ %457, %447 ], [ 0, %458 ]
  br label %467

461:                                              ; preds = %440
  %462 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %463 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %464 = icmp eq %struct.ref_s* %462, %463
  br i1 %464, label %465, label %466

465:                                              ; preds = %461
  br label %681

466:                                              ; preds = %461
  br label %467

467:                                              ; preds = %466, %459
  %468 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  store %struct.ref_s* %468, %struct.ref_s** %7, align 8
  br label %698

469:                                              ; preds = %438
  %470 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %471 = load %struct.ref_s*, %struct.ref_s** @osbot, align 8
  %472 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %471, i64 -1
  %473 = load %struct.ref_s*, %struct.ref_s** %12, align 8
  %474 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %473, i32 0, i32 2
  %475 = load i16, i16* %474, align 2
  %476 = zext i16 %475 to i32
  %477 = sext i32 %476 to i64
  %478 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %472, i64 %477
  %479 = icmp ult %struct.ref_s* %470, %478
  br i1 %479, label %480, label %481

480:                                              ; preds = %469
  store i32 -17, i32* %8, align 4
  br label %481

481:                                              ; preds = %480, %469
  br label %482

482:                                              ; preds = %481, %438
  %483 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  store %struct.ref_s* %483, %struct.ref_s** @esp, align 8
  %484 = load %struct.ref_s*, %struct.ref_s** %12, align 8
  %485 = bitcast %struct.ref_s* %484 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.ref_s* @error_object to i8*), i8* align 8 %485, i64 16, i1 false)
  %486 = load i32, i32* %8, align 4
  store i32 %486, i32* %2, align 4
  br label %729

487:                                              ; preds = %426
  %488 = load i32, i32* %5, align 4
  %489 = add nsw i32 %488, -1
  store i32 %489, i32* %5, align 4
  %490 = icmp sgt i32 %489, 0
  br i1 %490, label %491, label %494

491:                                              ; preds = %487
  %492 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %493 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %492, i32 1
  store %struct.ref_s* %493, %struct.ref_s** %4, align 8
  br label %32

494:                                              ; preds = %487
  br label %689

495:                                              ; preds = %370, %370, %370, %370, %370, %370
  %496 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %497 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %498 = icmp uge %struct.ref_s* %496, %497
  br i1 %498, label %499, label %503

499:                                              ; preds = %495
  %500 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  store %struct.ref_s* %500, %struct.ref_s** @esp, align 8
  %501 = load %struct.ref_s*, %struct.ref_s** %12, align 8
  %502 = bitcast %struct.ref_s* %501 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.ref_s* @error_object to i8*), i8* align 8 %502, i64 16, i1 false)
  store i32 -16, i32* %2, align 4
  br label %729

503:                                              ; preds = %495
  %504 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %505 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %504, i32 1
  store %struct.ref_s* %505, %struct.ref_s** %6, align 8
  %506 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %507 = load %struct.ref_s*, %struct.ref_s** %12, align 8
  %508 = bitcast %struct.ref_s* %506 to i8*
  %509 = bitcast %struct.ref_s* %507 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %508, i8* align 8 %509, i64 16, i1 false)
  %510 = load i32, i32* %5, align 4
  %511 = add nsw i32 %510, -1
  store i32 %511, i32* %5, align 4
  %512 = icmp sgt i32 %511, 0
  br i1 %512, label %513, label %516

513:                                              ; preds = %503
  %514 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %515 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %514, i32 1
  store %struct.ref_s* %515, %struct.ref_s** %4, align 8
  br label %32

516:                                              ; preds = %503
  br label %689

517:                                              ; preds = %370
  %518 = load i32, i32* %5, align 4
  %519 = icmp sgt i32 %518, 0
  br i1 %519, label %520, label %531

520:                                              ; preds = %517
  %521 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %522 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %521, i64 1
  %523 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %524 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %523, i32 0, i32 0
  %525 = bitcast %union.color_sample* %524 to %struct.ref_s**
  store %struct.ref_s* %522, %struct.ref_s** %525, align 8
  %526 = load i32, i32* %5, align 4
  %527 = trunc i32 %526 to i16
  %528 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %529 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %528, i32 0, i32 2
  store i16 %527, i16* %529, align 2
  %530 = zext i16 %527 to i32
  br label %532

531:                                              ; preds = %517
  br label %532

532:                                              ; preds = %531, %520
  %533 = phi i32 [ %530, %520 ], [ 0, %531 ]
  store i32 0, i32* %5, align 4
  %534 = load %struct.ref_s*, %struct.ref_s** %12, align 8
  store %struct.ref_s* %534, %struct.ref_s** %4, align 8
  br label %32

535:                                              ; preds = %33
  %536 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %537 = call i32 (%struct.ref_s*, %struct.stream_s**, ...) bitcast (i32 (%struct.ref_s*, %struct.stream_s**)* @file_check_read to i32 (%struct.ref_s*, %struct.stream_s**, ...)*)(%struct.ref_s* %536, %struct.stream_s** %14)
  store i32 %537, i32* %8, align 4
  %538 = load i32, i32* %8, align 4
  %539 = icmp slt i32 %538, 0
  br i1 %539, label %540, label %545

540:                                              ; preds = %535
  %541 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  store %struct.ref_s* %541, %struct.ref_s** @esp, align 8
  %542 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %543 = bitcast %struct.ref_s* %542 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.ref_s* @error_object to i8*), i8* align 8 %543, i64 16, i1 false)
  %544 = load i32, i32* %8, align 4
  store i32 %544, i32* %2, align 4
  br label %729

545:                                              ; preds = %535
  %546 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  store %struct.ref_s* %546, %struct.ref_s** @osp, align 8
  %547 = load %struct.stream_s*, %struct.stream_s** %14, align 8
  %548 = call i32 (%struct.stream_s*, i32, %struct.ref_s*, ...) bitcast (i32 (%struct.stream_s*, i32, %struct.ref_s*)* @scan_token to i32 (%struct.stream_s*, i32, %struct.ref_s*, ...)*)(%struct.stream_s* %547, i32 0, %struct.ref_s* %9)
  store i32 %548, i32* %8, align 4
  switch i32 %548, label %591 [
    i32 0, label %549
    i32 1, label %579
  ]

549:                                              ; preds = %545
  %550 = load i32, i32* %5, align 4
  %551 = icmp sgt i32 %550, 0
  br i1 %551, label %552, label %563

552:                                              ; preds = %549
  %553 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %554 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %553, i64 1
  %555 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %556 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %555, i32 0, i32 0
  %557 = bitcast %union.color_sample* %556 to %struct.ref_s**
  store %struct.ref_s* %554, %struct.ref_s** %557, align 8
  %558 = load i32, i32* %5, align 4
  %559 = trunc i32 %558 to i16
  %560 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %561 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %560, i32 0, i32 2
  store i16 %559, i16* %561, align 2
  %562 = zext i16 %559 to i32
  br label %564

563:                                              ; preds = %549
  br label %564

564:                                              ; preds = %563, %552
  %565 = phi i32 [ %562, %552 ], [ 0, %563 ]
  %566 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %567 = load %struct.ref_s*, %struct.ref_s** @estop, align 8
  %568 = icmp uge %struct.ref_s* %566, %567
  br i1 %568, label %569, label %573

569:                                              ; preds = %564
  %570 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  store %struct.ref_s* %570, %struct.ref_s** @esp, align 8
  %571 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %572 = bitcast %struct.ref_s* %571 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.ref_s* @error_object to i8*), i8* align 8 %572, i64 16, i1 false)
  store i32 -5, i32* %2, align 4
  br label %729

573:                                              ; preds = %564
  %574 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %575 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %574, i32 1
  store %struct.ref_s* %575, %struct.ref_s** %7, align 8
  %576 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %577 = bitcast %struct.ref_s* %575 to i8*
  %578 = bitcast %struct.ref_s* %576 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %577, i8* align 8 %578, i64 16, i1 false)
  store %struct.ref_s* %9, %struct.ref_s** %4, align 8
  store i32 0, i32* %5, align 4
  br label %32

579:                                              ; preds = %545
  %580 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %581 = load %struct.stream_s*, %struct.stream_s** %14, align 8
  %582 = call i32 (%struct.ref_s*, %struct.stream_s*, ...) bitcast (i32 (%struct.ref_s*, %struct.stream_s*)* @file_close to i32 (%struct.ref_s*, %struct.stream_s*, ...)*)(%struct.ref_s* %580, %struct.stream_s* %581)
  store i32 %582, i32* %8, align 4
  %583 = load i32, i32* %8, align 4
  %584 = icmp slt i32 %583, 0
  br i1 %584, label %585, label %590

585:                                              ; preds = %579
  %586 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  store %struct.ref_s* %586, %struct.ref_s** @esp, align 8
  %587 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %588 = bitcast %struct.ref_s* %587 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.ref_s* @error_object to i8*), i8* align 8 %588, i64 16, i1 false)
  %589 = load i32, i32* %8, align 4
  store i32 %589, i32* %2, align 4
  br label %729

590:                                              ; preds = %579
  br label %681

591:                                              ; preds = %545
  %592 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  store %struct.ref_s* %592, %struct.ref_s** @esp, align 8
  %593 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %594 = bitcast %struct.ref_s* %593 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.ref_s* @error_object to i8*), i8* align 8 %594, i64 16, i1 false)
  %595 = load i32, i32* %8, align 4
  store i32 %595, i32* %2, align 4
  br label %729

596:                                              ; preds = %33
  %597 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %598 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %597, i32 0, i32 0
  %599 = bitcast %union.color_sample* %598 to i8**
  %600 = load i8*, i8** %599, align 8
  %601 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %602 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %601, i32 0, i32 2
  %603 = load i16, i16* %602, align 2
  %604 = zext i16 %603 to i32
  call void @sread_string(%struct.stream_s* %15, i8* %600, i32 %604)
  %605 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  store %struct.ref_s* %605, %struct.ref_s** @osp, align 8
  %606 = call i32 (%struct.stream_s*, i32, %struct.ref_s*, ...) bitcast (i32 (%struct.stream_s*, i32, %struct.ref_s*)* @scan_token to i32 (%struct.stream_s*, i32, %struct.ref_s*, ...)*)(%struct.stream_s* %15, i32 1, %struct.ref_s* %9)
  store i32 %606, i32* %8, align 4
  switch i32 %606, label %661 [
    i32 0, label %607
    i32 1, label %660
  ]

607:                                              ; preds = %596
  %608 = load i32, i32* %5, align 4
  %609 = icmp sgt i32 %608, 0
  br i1 %609, label %610, label %621

610:                                              ; preds = %607
  %611 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %612 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %611, i64 1
  %613 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %614 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %613, i32 0, i32 0
  %615 = bitcast %union.color_sample* %614 to %struct.ref_s**
  store %struct.ref_s* %612, %struct.ref_s** %615, align 8
  %616 = load i32, i32* %5, align 4
  %617 = trunc i32 %616 to i16
  %618 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %619 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %618, i32 0, i32 2
  store i16 %617, i16* %619, align 2
  %620 = zext i16 %617 to i32
  br label %622

621:                                              ; preds = %607
  br label %622

622:                                              ; preds = %621, %610
  %623 = phi i32 [ %620, %610 ], [ 0, %621 ]
  %624 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %625 = load %struct.ref_s*, %struct.ref_s** @estop, align 8
  %626 = icmp uge %struct.ref_s* %624, %625
  br i1 %626, label %627, label %631

627:                                              ; preds = %622
  %628 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  store %struct.ref_s* %628, %struct.ref_s** @esp, align 8
  %629 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %630 = bitcast %struct.ref_s* %629 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.ref_s* @error_object to i8*), i8* align 8 %630, i64 16, i1 false)
  store i32 -5, i32* %2, align 4
  br label %729

631:                                              ; preds = %622
  %632 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %633 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %632, i32 1
  store %struct.ref_s* %633, %struct.ref_s** %7, align 8
  %634 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %635 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %634, i32 0, i32 1
  %636 = load i16, i16* %635, align 8
  %637 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %638 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %637, i32 0, i32 1
  store i16 %636, i16* %638, align 8
  %639 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %15, i32 0, i32 0
  %640 = load i8*, i8** %639, align 8
  %641 = getelementptr inbounds i8, i8* %640, i64 1
  %642 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %643 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %642, i32 0, i32 0
  %644 = bitcast %union.color_sample* %643 to i8**
  store i8* %641, i8** %644, align 8
  %645 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %15, i32 0, i32 2
  %646 = load i8*, i8** %645, align 8
  %647 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %15, i32 0, i32 3
  %648 = load i32, i32* %647, align 8
  %649 = zext i32 %648 to i64
  %650 = getelementptr inbounds i8, i8* %646, i64 %649
  %651 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %15, i32 0, i32 0
  %652 = load i8*, i8** %651, align 8
  %653 = ptrtoint i8* %650 to i64
  %654 = ptrtoint i8* %652 to i64
  %655 = sub i64 %653, %654
  %656 = sub nsw i64 %655, 1
  %657 = trunc i64 %656 to i16
  %658 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %659 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %658, i32 0, i32 2
  store i16 %657, i16* %659, align 2
  store %struct.ref_s* %9, %struct.ref_s** %4, align 8
  store i32 0, i32* %5, align 4
  br label %32

660:                                              ; preds = %596
  br label %681

661:                                              ; preds = %596
  %662 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  store %struct.ref_s* %662, %struct.ref_s** @esp, align 8
  %663 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %664 = bitcast %struct.ref_s* %663 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.ref_s* @error_object to i8*), i8* align 8 %664, i64 16, i1 false)
  %665 = load i32, i32* %8, align 4
  store i32 %665, i32* %2, align 4
  br label %729

666:                                              ; preds = %43, %33
  %667 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %668 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %669 = icmp uge %struct.ref_s* %667, %668
  br i1 %669, label %670, label %674

670:                                              ; preds = %666
  %671 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  store %struct.ref_s* %671, %struct.ref_s** @esp, align 8
  %672 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %673 = bitcast %struct.ref_s* %672 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.ref_s* @error_object to i8*), i8* align 8 %673, i64 16, i1 false)
  store i32 -16, i32* %2, align 4
  br label %729

674:                                              ; preds = %666
  %675 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %676 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %675, i32 1
  store %struct.ref_s* %676, %struct.ref_s** %6, align 8
  %677 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %678 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %679 = bitcast %struct.ref_s* %677 to i8*
  %680 = bitcast %struct.ref_s* %678 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %679, i8* align 8 %680, i64 16, i1 false)
  br label %681

681:                                              ; preds = %674, %660, %590, %465, %319, %279, %26
  %682 = load i32, i32* %5, align 4
  %683 = add nsw i32 %682, -1
  store i32 %683, i32* %5, align 4
  %684 = icmp sgt i32 %683, 0
  br i1 %684, label %685, label %688

685:                                              ; preds = %681
  %686 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %687 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %686, i32 1
  store %struct.ref_s* %687, %struct.ref_s** %4, align 8
  br label %32

688:                                              ; preds = %681
  br label %689

689:                                              ; preds = %688, %516, %494, %348, %278, %259, %241, %118, %86, %62
  %690 = load i32, i32* %5, align 4
  %691 = icmp ne i32 %690, 0
  br i1 %691, label %697, label %692

692:                                              ; preds = %689
  %693 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %694 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %693, i32 -1
  store %struct.ref_s* %694, %struct.ref_s** %7, align 8
  %695 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %696 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %695, i32 1
  store %struct.ref_s* %696, %struct.ref_s** %4, align 8
  br label %32

697:                                              ; preds = %689
  br label %698

698:                                              ; preds = %726, %697, %467, %421, %321, %205
  %699 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %700 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %699, i32 0, i32 1
  %701 = load i16, i16* %700, align 8
  %702 = zext i16 %701 to i32
  %703 = and i32 %702, 255
  switch i32 %703, label %704 [
    i32 3, label %707
    i32 43, label %708
  ]

704:                                              ; preds = %698
  %705 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %706 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %705, i32 -1
  store %struct.ref_s* %706, %struct.ref_s** %7, align 8
  store %struct.ref_s* %705, %struct.ref_s** %4, align 8
  store i32 0, i32* %5, align 4
  br label %32

707:                                              ; preds = %698
  br label %708

708:                                              ; preds = %707, %698
  br label %709

709:                                              ; preds = %708
  %710 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %711 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %710, i32 0, i32 0
  %712 = bitcast %union.color_sample* %711 to %struct.ref_s**
  %713 = load %struct.ref_s*, %struct.ref_s** %712, align 8
  store %struct.ref_s* %713, %struct.ref_s** %4, align 8
  %714 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %715 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %714, i32 0, i32 2
  %716 = load i16, i16* %715, align 2
  %717 = zext i16 %716 to i32
  %718 = sub nsw i32 %717, 1
  store i32 %718, i32* %5, align 4
  %719 = load i32, i32* %5, align 4
  %720 = icmp sle i32 %719, 0
  br i1 %720, label %721, label %728

721:                                              ; preds = %709
  %722 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %723 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %722, i32 -1
  store %struct.ref_s* %723, %struct.ref_s** %7, align 8
  %724 = load i32, i32* %5, align 4
  %725 = icmp slt i32 %724, 0
  br i1 %725, label %726, label %727

726:                                              ; preds = %721
  br label %698

727:                                              ; preds = %721
  br label %728

728:                                              ; preds = %727, %709
  br label %32

729:                                              ; preds = %670, %661, %627, %591, %585, %569, %540, %499, %482, %396, %364, %336, %264, %246, %220, %136, %128, %91, %67, %48, %39, %22
  %730 = load i32, i32* %2, align 4
  ret i32 %730
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @scan_init() #0 {
  %1 = alloca i8*, align 8
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  store i8* getelementptr inbounds ([257 x i8], [257 x i8]* @scan_char_array, i64 0, i64 1), i8** %1, align 8
  %4 = call i32 @name_ref(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.302, i64 0, i64 0), i32 1, %struct.ref_s* @left_bracket, i32 0)
  %5 = call i32 @name_ref(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1.303, i64 0, i64 0), i32 1, %struct.ref_s* @right_bracket, i32 0)
  %6 = call i32 @name_ref(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.2.304, i64 0, i64 0), i32 0, %struct.ref_s* @empty_name, i32 0)
  %7 = load i8*, i8** %1, align 8
  %8 = getelementptr inbounds i8, i8* %7, i64 -1
  store i8 103, i8* %8, align 1
  %9 = load i8*, i8** %1, align 8
  call void @llvm.memset.p0i8.i64(i8* align 1 %9, i8 100, i64 256, i1 false)
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @scan_init.space_chars, i64 0, i64 0), i8** %3, align 8
  br label %10

10:                                               ; preds = %20, %0
  %11 = load i8*, i8** %3, align 8
  %12 = load i8, i8* %11, align 1
  %13 = icmp ne i8 %12, 0
  br i1 %13, label %14, label %23

14:                                               ; preds = %10
  %15 = load i8*, i8** %1, align 8
  %16 = load i8*, i8** %3, align 8
  %17 = load i8, i8* %16, align 1
  %18 = sext i8 %17 to i64
  %19 = getelementptr inbounds i8, i8* %15, i64 %18
  store i8 101, i8* %19, align 1
  br label %20

20:                                               ; preds = %14
  %21 = load i8*, i8** %3, align 8
  %22 = getelementptr inbounds i8, i8* %21, i32 1
  store i8* %22, i8** %3, align 8
  br label %10

23:                                               ; preds = %10
  %24 = load i8*, i8** %1, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 26
  store i8 101, i8* %25, align 1
  %26 = load i8*, i8** %1, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 11
  store i8 101, i8* %27, align 1
  %28 = load i8*, i8** %1, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 0
  store i8 101, i8* %29, align 1
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @scan_init.stop_chars, i64 0, i64 0), i8** %3, align 8
  br label %30

30:                                               ; preds = %40, %23
  %31 = load i8*, i8** %3, align 8
  %32 = load i8, i8* %31, align 1
  %33 = icmp ne i8 %32, 0
  br i1 %33, label %34, label %43

34:                                               ; preds = %30
  %35 = load i8*, i8** %1, align 8
  %36 = load i8*, i8** %3, align 8
  %37 = load i8, i8* %36, align 1
  %38 = sext i8 %37 to i64
  %39 = getelementptr inbounds i8, i8* %35, i64 %38
  store i8 102, i8* %39, align 1
  br label %40

40:                                               ; preds = %34
  %41 = load i8*, i8** %3, align 8
  %42 = getelementptr inbounds i8, i8* %41, i32 1
  store i8* %42, i8** %3, align 8
  br label %30

43:                                               ; preds = %30
  store i32 0, i32* %2, align 4
  br label %44

44:                                               ; preds = %55, %43
  %45 = load i32, i32* %2, align 4
  %46 = icmp slt i32 %45, 10
  br i1 %46, label %47, label %58

47:                                               ; preds = %44
  %48 = load i32, i32* %2, align 4
  %49 = trunc i32 %48 to i8
  %50 = load i8*, i8** %1, align 8
  %51 = load i32, i32* %2, align 4
  %52 = add nsw i32 48, %51
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i8, i8* %50, i64 %53
  store i8 %49, i8* %54, align 1
  br label %55

55:                                               ; preds = %47
  %56 = load i32, i32* %2, align 4
  %57 = add nsw i32 %56, 1
  store i32 %57, i32* %2, align 4
  br label %44

58:                                               ; preds = %44
  store i32 0, i32* %2, align 4
  br label %59

59:                                               ; preds = %76, %58
  %60 = load i32, i32* %2, align 4
  %61 = icmp slt i32 %60, 26
  br i1 %61, label %62, label %79

62:                                               ; preds = %59
  %63 = load i32, i32* %2, align 4
  %64 = add nsw i32 %63, 10
  %65 = trunc i32 %64 to i8
  %66 = load i8*, i8** %1, align 8
  %67 = load i32, i32* %2, align 4
  %68 = add nsw i32 97, %67
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds i8, i8* %66, i64 %69
  store i8 %65, i8* %70, align 1
  %71 = load i8*, i8** %1, align 8
  %72 = load i32, i32* %2, align 4
  %73 = add nsw i32 65, %72
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i8, i8* %71, i64 %74
  store i8 %65, i8* %75, align 1
  br label %76

76:                                               ; preds = %62
  %77 = load i32, i32* %2, align 4
  %78 = add nsw i32 %77, 1
  store i32 %78, i32* %2, align 4
  br label %59

79:                                               ; preds = %59
  store i32 0, i32* @array_packing, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @scan_token(%struct.stream_s* %0, i32 %1, %struct.ref_s* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.stream_s*, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.ref_s*, align 8
  %8 = alloca %struct.ref_s*, align 8
  %9 = alloca %struct.dynamic_area_s, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i8*, align 8
  %16 = alloca %struct.ref_s*, align 8
  %17 = alloca i32, align 4
  %18 = alloca %struct.ref_s*, align 8
  %19 = alloca i32, align 4
  %20 = alloca %struct.dynamic_area_s, align 8
  %21 = alloca i8*, align 8
  %22 = alloca i8*, align 8
  %23 = alloca %struct.stream_s, align 8
  %24 = alloca %struct.stream_s*, align 8
  %25 = alloca %struct.ref_s*, align 8
  store %struct.stream_s* %0, %struct.stream_s** %5, align 8
  store i32 %1, i32* %6, align 4
  store %struct.ref_s* %2, %struct.ref_s** %7, align 8
  %26 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  store %struct.ref_s* %26, %struct.ref_s** %8, align 8
  store i32 0, i32* %10, align 4
  store i32 0, i32* %11, align 4
  store i8* getelementptr inbounds ([257 x i8], [257 x i8]* @scan_char_array, i64 0, i64 1), i8** %15, align 8
  store i32 0, i32* %6, align 4
  br label %27

27:                                               ; preds = %721, %430, %123, %52, %3
  %28 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %29 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %28, i32 0, i32 0
  %30 = load i8*, i8** %29, align 8
  %31 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %32 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %31, i32 0, i32 1
  %33 = load i8*, i8** %32, align 8
  %34 = icmp ult i8* %30, %33
  br i1 %34, label %35, label %42

35:                                               ; preds = %27
  %36 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %37 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %36, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = getelementptr inbounds i8, i8* %38, i32 1
  store i8* %39, i8** %37, align 8
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  br label %49

42:                                               ; preds = %27
  %43 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %44 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %43, i32 0, i32 7
  %45 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %44, i32 0, i32 0
  %46 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %45, align 8
  %47 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %48 = call i32 %46(%struct.stream_s* %47)
  br label %49

49:                                               ; preds = %42, %35
  %50 = phi i32 [ %41, %35 ], [ %48, %42 ]
  store i32 %50, i32* %12, align 4
  %51 = load i32, i32* %12, align 4
  switch i32 %51, label %438 [
    i32 32, label %52
    i32 12, label %52
    i32 9, label %52
    i32 10, label %52
    i32 13, label %52
    i32 0, label %52
    i32 11, label %52
    i32 26, label %52
    i32 91, label %53
    i32 93, label %62
    i32 60, label %71
    i32 40, label %75
    i32 123, label %80
    i32 62, label %138
    i32 41, label %138
    i32 125, label %139
    i32 47, label %235
    i32 37, label %352
    i32 -1, label %432
    i32 48, label %437
    i32 49, label %437
    i32 50, label %437
    i32 51, label %437
    i32 52, label %437
    i32 53, label %437
    i32 54, label %437
    i32 55, label %437
    i32 56, label %437
    i32 57, label %437
    i32 46, label %437
    i32 43, label %437
    i32 45, label %437
    i32 97, label %439
    i32 98, label %439
    i32 99, label %439
    i32 100, label %439
    i32 101, label %439
    i32 102, label %439
    i32 103, label %439
    i32 104, label %439
    i32 105, label %439
    i32 106, label %439
    i32 107, label %439
    i32 108, label %439
    i32 109, label %439
    i32 110, label %439
    i32 111, label %439
    i32 112, label %439
    i32 113, label %439
    i32 114, label %439
    i32 115, label %439
    i32 116, label %439
    i32 117, label %439
    i32 118, label %439
    i32 119, label %439
    i32 120, label %439
    i32 121, label %439
    i32 122, label %439
    i32 65, label %439
    i32 66, label %439
    i32 67, label %439
    i32 68, label %439
    i32 69, label %439
    i32 70, label %439
    i32 71, label %439
    i32 72, label %439
    i32 73, label %439
    i32 74, label %439
    i32 75, label %439
    i32 76, label %439
    i32 77, label %439
    i32 78, label %439
    i32 79, label %439
    i32 80, label %439
    i32 81, label %439
    i32 82, label %439
    i32 83, label %439
    i32 84, label %439
    i32 85, label %439
    i32 86, label %439
    i32 87, label %439
    i32 88, label %439
    i32 89, label %439
    i32 90, label %439
    i32 95, label %439
  ]

52:                                               ; preds = %49, %49, %49, %49, %49, %49, %49, %49
  br label %27

53:                                               ; preds = %49
  %54 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %55 = bitcast %struct.ref_s* %54 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %55, i8* align 8 bitcast (%struct.ref_s* @left_bracket to i8*), i64 16, i1 false)
  %56 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %57 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %56, i32 0, i32 1
  %58 = load i16, i16* %57, align 8
  %59 = zext i16 %58 to i32
  %60 = or i32 %59, 1
  %61 = trunc i32 %60 to i16
  store i16 %61, i16* %57, align 8
  br label %693

62:                                               ; preds = %49
  %63 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %64 = bitcast %struct.ref_s* %63 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %64, i8* align 8 bitcast (%struct.ref_s* @right_bracket to i8*), i64 16, i1 false)
  %65 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %66 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %65, i32 0, i32 1
  %67 = load i16, i16* %66, align 8
  %68 = zext i16 %67 to i32
  %69 = or i32 %68, 1
  %70 = trunc i32 %69 to i16
  store i16 %70, i16* %66, align 8
  br label %693

71:                                               ; preds = %49
  %72 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %73 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %74 = call i32 @scan_hex_string(%struct.stream_s* %72, %struct.ref_s* %73)
  store i32 %74, i32* %11, align 4
  br label %693

75:                                               ; preds = %49
  %76 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %77 = load i32, i32* %6, align 4
  %78 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %79 = call i32 @scan_string(%struct.stream_s* %76, i32 %77, %struct.ref_s* %78)
  store i32 %79, i32* %11, align 4
  br label %693

80:                                               ; preds = %49
  %81 = load i32, i32* %10, align 4
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %103

83:                                               ; preds = %80
  %84 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %85 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %84, i64 1
  store %struct.ref_s* %85, %struct.ref_s** %8, align 8
  %86 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %87 = bitcast %struct.ref_s* %86 to i8*
  %88 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %9, i32 0, i32 0
  store i8* %87, i8** %88, align 8
  %89 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %90 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %89, i64 1
  %91 = bitcast %struct.ref_s* %90 to i8*
  %92 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %9, i32 0, i32 5
  store i8* %91, i8** %92, align 8
  %93 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %9, i32 0, i32 4
  store i32 0, i32* %93, align 8
  %94 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %9, i32 0, i32 3
  store i32 16, i32* %94, align 4
  %95 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %96 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %97 = ptrtoint %struct.ref_s* %95 to i64
  %98 = ptrtoint %struct.ref_s* %96 to i64
  %99 = sub i64 %97, %98
  %100 = sdiv exact i64 %99, 16
  %101 = trunc i64 %100 to i32
  %102 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %9, i32 0, i32 2
  store i32 %101, i32* %102, align 8
  br label %103

103:                                              ; preds = %83, %80
  %104 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %9, i32 0, i32 5
  %105 = load i8*, i8** %104, align 8
  %106 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %107 = bitcast %struct.ref_s* %106 to i8*
  %108 = ptrtoint i8* %105 to i64
  %109 = ptrtoint i8* %107 to i64
  %110 = sub i64 %108, %109
  %111 = icmp ult i64 %110, 32
  br i1 %111, label %112, label %123

112:                                              ; preds = %103
  %113 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %114 = bitcast %struct.ref_s* %113 to i8*
  %115 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %9, i32 0, i32 1
  store i8* %114, i8** %115, align 8
  %116 = call i32 @dynamic_grow(%struct.dynamic_area_s* %9)
  %117 = icmp ne i32 %116, 0
  br i1 %117, label %119, label %118

118:                                              ; preds = %112
  store i32 -25, i32* %4, align 4
  br label %724

119:                                              ; preds = %112
  %120 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %9, i32 0, i32 1
  %121 = load i8*, i8** %120, align 8
  %122 = bitcast i8* %121 to %struct.ref_s*
  store %struct.ref_s* %122, %struct.ref_s** %8, align 8
  br label %123

123:                                              ; preds = %119, %103
  %124 = load i32, i32* %10, align 4
  %125 = trunc i32 %124 to i16
  %126 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %127 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %126, i32 0, i32 2
  store i16 %125, i16* %127, align 2
  %128 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %129 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %128, i32 1
  store %struct.ref_s* %129, %struct.ref_s** %8, align 8
  %130 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %131 = bitcast %struct.ref_s* %130 to i8*
  %132 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %9, i32 0, i32 0
  %133 = load i8*, i8** %132, align 8
  %134 = ptrtoint i8* %131 to i64
  %135 = ptrtoint i8* %133 to i64
  %136 = sub i64 %134, %135
  %137 = trunc i64 %136 to i32
  store i32 %137, i32* %10, align 4
  br label %27

138:                                              ; preds = %49, %49
  store i32 -18, i32* %11, align 4
  br label %693

139:                                              ; preds = %49
  %140 = load i32, i32* %10, align 4
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %142, label %143

142:                                              ; preds = %139
  store i32 -18, i32* %11, align 4
  br label %693

143:                                              ; preds = %139
  %144 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %9, i32 0, i32 0
  %145 = load i8*, i8** %144, align 8
  %146 = load i32, i32* %10, align 4
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds i8, i8* %145, i64 %147
  %149 = bitcast i8* %148 to %struct.ref_s*
  store %struct.ref_s* %149, %struct.ref_s** %16, align 8
  %150 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %151 = load %struct.ref_s*, %struct.ref_s** %16, align 8
  %152 = ptrtoint %struct.ref_s* %150 to i64
  %153 = ptrtoint %struct.ref_s* %151 to i64
  %154 = sub i64 %152, %153
  %155 = sdiv exact i64 %154, 16
  %156 = trunc i64 %155 to i32
  store i32 %156, i32* %17, align 4
  %157 = load %struct.ref_s*, %struct.ref_s** %16, align 8
  %158 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %157, i64 -1
  store %struct.ref_s* %158, %struct.ref_s** %8, align 8
  %159 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %160 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %159, i32 0, i32 2
  %161 = load i16, i16* %160, align 2
  %162 = zext i16 %161 to i32
  store i32 %162, i32* %10, align 4
  %163 = load i32, i32* %10, align 4
  %164 = icmp eq i32 %163, 0
  br i1 %164, label %165, label %189

165:                                              ; preds = %143
  %166 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %9, i32 0, i32 4
  %167 = load i32, i32* %166, align 8
  %168 = icmp ne i32 %167, 0
  br i1 %168, label %169, label %189

169:                                              ; preds = %165
  %170 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %171 = bitcast %struct.ref_s* %170 to i8*
  %172 = load %struct.ref_s*, %struct.ref_s** %16, align 8
  %173 = bitcast %struct.ref_s* %172 to i8*
  %174 = load i32, i32* %17, align 4
  %175 = zext i32 %174 to i64
  %176 = mul i64 %175, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %171, i8* align 8 %173, i64 %176, i1 false)
  %177 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %178 = bitcast %struct.ref_s* %177 to i8*
  %179 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %9, i32 0, i32 2
  %180 = load i32, i32* %179, align 8
  %181 = load i32, i32* %17, align 4
  %182 = call i8* @alloc_shrink(i8* %178, i32 %180, i32 %181, i32 16, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3.307, i64 0, i64 0))
  %183 = bitcast i8* %182 to %struct.ref_s*
  store %struct.ref_s* %183, %struct.ref_s** %18, align 8
  %184 = load %struct.ref_s*, %struct.ref_s** %18, align 8
  %185 = icmp eq %struct.ref_s* %184, null
  br i1 %185, label %186, label %187

186:                                              ; preds = %169
  store i32 -25, i32* %4, align 4
  br label %724

187:                                              ; preds = %169
  %188 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  store %struct.ref_s* %188, %struct.ref_s** %8, align 8
  br label %209

189:                                              ; preds = %165, %143
  %190 = load i32, i32* %17, align 4
  %191 = call i8* @alloc(i32 %190, i32 16, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4.308, i64 0, i64 0))
  %192 = bitcast i8* %191 to %struct.ref_s*
  store %struct.ref_s* %192, %struct.ref_s** %18, align 8
  %193 = load %struct.ref_s*, %struct.ref_s** %18, align 8
  %194 = icmp eq %struct.ref_s* %193, null
  br i1 %194, label %195, label %196

195:                                              ; preds = %189
  store i32 -25, i32* %4, align 4
  br label %724

196:                                              ; preds = %189
  %197 = load %struct.ref_s*, %struct.ref_s** %18, align 8
  %198 = bitcast %struct.ref_s* %197 to i8*
  %199 = load %struct.ref_s*, %struct.ref_s** %16, align 8
  %200 = bitcast %struct.ref_s* %199 to i8*
  %201 = load i32, i32* %17, align 4
  %202 = zext i32 %201 to i64
  %203 = mul i64 %202, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %198, i8* align 8 %200, i64 %203, i1 false)
  %204 = load i32, i32* %10, align 4
  %205 = icmp eq i32 %204, 0
  br i1 %205, label %206, label %208

206:                                              ; preds = %196
  %207 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  store %struct.ref_s* %207, %struct.ref_s** %8, align 8
  br label %208

208:                                              ; preds = %206, %196
  br label %209

209:                                              ; preds = %208, %187
  %210 = load i32, i32* @array_packing, align 4
  %211 = icmp ne i32 %210, 0
  br i1 %211, label %212, label %223

212:                                              ; preds = %209
  %213 = load %struct.ref_s*, %struct.ref_s** %18, align 8
  %214 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %215 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %214, i32 0, i32 0
  %216 = bitcast %union.color_sample* %215 to %struct.ref_s**
  store %struct.ref_s* %213, %struct.ref_s** %216, align 8
  %217 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %218 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %217, i32 0, i32 1
  store i16 555, i16* %218, align 8
  %219 = load i32, i32* %17, align 4
  %220 = trunc i32 %219 to i16
  %221 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %222 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %221, i32 0, i32 2
  store i16 %220, i16* %222, align 2
  br label %234

223:                                              ; preds = %209
  %224 = load %struct.ref_s*, %struct.ref_s** %18, align 8
  %225 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %226 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %225, i32 0, i32 0
  %227 = bitcast %union.color_sample* %226 to %struct.ref_s**
  store %struct.ref_s* %224, %struct.ref_s** %227, align 8
  %228 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %229 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %228, i32 0, i32 1
  store i16 771, i16* %229, align 8
  %230 = load i32, i32* %17, align 4
  %231 = trunc i32 %230 to i16
  %232 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %233 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %232, i32 0, i32 2
  store i16 %231, i16* %233, align 2
  br label %234

234:                                              ; preds = %223, %212
  br label %693

235:                                              ; preds = %49
  %236 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %237 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %236, i32 0, i32 0
  %238 = load i8*, i8** %237, align 8
  %239 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %240 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %239, i32 0, i32 1
  %241 = load i8*, i8** %240, align 8
  %242 = icmp ult i8* %238, %241
  br i1 %242, label %243, label %250

243:                                              ; preds = %235
  %244 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %245 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %244, i32 0, i32 0
  %246 = load i8*, i8** %245, align 8
  %247 = getelementptr inbounds i8, i8* %246, i32 1
  store i8* %247, i8** %245, align 8
  %248 = load i8, i8* %247, align 1
  %249 = zext i8 %248 to i32
  br label %257

250:                                              ; preds = %235
  %251 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %252 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %251, i32 0, i32 7
  %253 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %252, i32 0, i32 0
  %254 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %253, align 8
  %255 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %256 = call i32 %254(%struct.stream_s* %255)
  br label %257

257:                                              ; preds = %250, %243
  %258 = phi i32 [ %249, %243 ], [ %256, %250 ]
  store i32 %258, i32* %12, align 4
  %259 = load i32, i32* %12, align 4
  %260 = icmp eq i32 %259, 47
  br i1 %260, label %261, label %285

261:                                              ; preds = %257
  store i32 2, i32* %13, align 4
  %262 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %263 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %262, i32 0, i32 0
  %264 = load i8*, i8** %263, align 8
  %265 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %266 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %265, i32 0, i32 1
  %267 = load i8*, i8** %266, align 8
  %268 = icmp ult i8* %264, %267
  br i1 %268, label %269, label %276

269:                                              ; preds = %261
  %270 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %271 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %270, i32 0, i32 0
  %272 = load i8*, i8** %271, align 8
  %273 = getelementptr inbounds i8, i8* %272, i32 1
  store i8* %273, i8** %271, align 8
  %274 = load i8, i8* %273, align 1
  %275 = zext i8 %274 to i32
  br label %283

276:                                              ; preds = %261
  %277 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %278 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %277, i32 0, i32 7
  %279 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %278, i32 0, i32 0
  %280 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %279, align 8
  %281 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %282 = call i32 %280(%struct.stream_s* %281)
  br label %283

283:                                              ; preds = %276, %269
  %284 = phi i32 [ %275, %269 ], [ %282, %276 ]
  store i32 %284, i32* %12, align 4
  br label %286

285:                                              ; preds = %257
  store i32 1, i32* %13, align 4
  br label %286

286:                                              ; preds = %285, %283
  store i32 0, i32* %14, align 4
  %287 = load i8*, i8** %15, align 8
  %288 = load i32, i32* %12, align 4
  %289 = sext i32 %288 to i64
  %290 = getelementptr inbounds i8, i8* %287, i64 %289
  %291 = load i8, i8* %290, align 1
  %292 = zext i8 %291 to i32
  switch i32 %292, label %294 [
    i32 100, label %293
    i32 103, label %295
    i32 102, label %298
    i32 101, label %313
  ]

293:                                              ; preds = %286
  br label %294

294:                                              ; preds = %293, %286
  br label %440

295:                                              ; preds = %286
  %296 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %297 = bitcast %struct.ref_s* %296 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %297, i8* align 8 bitcast (%struct.ref_s* @empty_name to i8*), i64 16, i1 false)
  br label %657

298:                                              ; preds = %286
  %299 = load i32, i32* %12, align 4
  switch i32 %299, label %306 [
    i32 91, label %300
    i32 93, label %303
  ]

300:                                              ; preds = %298
  %301 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %302 = bitcast %struct.ref_s* %301 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %302, i8* align 8 bitcast (%struct.ref_s* @left_bracket to i8*), i64 16, i1 false)
  br label %657

303:                                              ; preds = %298
  %304 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %305 = bitcast %struct.ref_s* %304 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %305, i8* align 8 bitcast (%struct.ref_s* @right_bracket to i8*), i64 16, i1 false)
  br label %657

306:                                              ; preds = %298
  %307 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %308 = bitcast %struct.ref_s* %307 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %308, i8* align 8 bitcast (%struct.ref_s* @empty_name to i8*), i64 16, i1 false)
  %309 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %310 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %309, i32 0, i32 0
  %311 = load i8*, i8** %310, align 8
  %312 = getelementptr inbounds i8, i8* %311, i32 -1
  store i8* %312, i8** %310, align 8
  br label %657

313:                                              ; preds = %286
  %314 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %315 = bitcast %struct.ref_s* %314 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %315, i8* align 8 bitcast (%struct.ref_s* @empty_name to i8*), i64 16, i1 false)
  %316 = load i32, i32* %12, align 4
  %317 = icmp eq i32 %316, 13
  br i1 %317, label %318, label %351

318:                                              ; preds = %313
  %319 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %320 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %319, i32 0, i32 0
  %321 = load i8*, i8** %320, align 8
  %322 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %323 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %322, i32 0, i32 1
  %324 = load i8*, i8** %323, align 8
  %325 = icmp ult i8* %321, %324
  br i1 %325, label %326, label %333

326:                                              ; preds = %318
  %327 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %328 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %327, i32 0, i32 0
  %329 = load i8*, i8** %328, align 8
  %330 = getelementptr inbounds i8, i8* %329, i32 1
  store i8* %330, i8** %328, align 8
  %331 = load i8, i8* %330, align 1
  %332 = zext i8 %331 to i32
  br label %340

333:                                              ; preds = %318
  %334 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %335 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %334, i32 0, i32 7
  %336 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %335, i32 0, i32 0
  %337 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %336, align 8
  %338 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %339 = call i32 %337(%struct.stream_s* %338)
  br label %340

340:                                              ; preds = %333, %326
  %341 = phi i32 [ %332, %326 ], [ %339, %333 ]
  store i32 %341, i32* %12, align 4
  %342 = icmp ne i32 %341, 10
  br i1 %342, label %343, label %351

343:                                              ; preds = %340
  %344 = load i32, i32* %12, align 4
  %345 = icmp ne i32 %344, -1
  br i1 %345, label %346, label %351

346:                                              ; preds = %343
  %347 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %348 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %347, i32 0, i32 0
  %349 = load i8*, i8** %348, align 8
  %350 = getelementptr inbounds i8, i8* %349, i32 -1
  store i8* %350, i8** %348, align 8
  br label %351

351:                                              ; preds = %346, %343, %340, %313
  br label %657

352:                                              ; preds = %49
  br label %353

353:                                              ; preds = %389, %352
  %354 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %355 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %354, i32 0, i32 0
  %356 = load i8*, i8** %355, align 8
  %357 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %358 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %357, i32 0, i32 1
  %359 = load i8*, i8** %358, align 8
  %360 = icmp ult i8* %356, %359
  br i1 %360, label %361, label %368

361:                                              ; preds = %353
  %362 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %363 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %362, i32 0, i32 0
  %364 = load i8*, i8** %363, align 8
  %365 = getelementptr inbounds i8, i8* %364, i32 1
  store i8* %365, i8** %363, align 8
  %366 = load i8, i8* %365, align 1
  %367 = zext i8 %366 to i32
  br label %375

368:                                              ; preds = %353
  %369 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %370 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %369, i32 0, i32 7
  %371 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %370, i32 0, i32 0
  %372 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %371, align 8
  %373 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %374 = call i32 %372(%struct.stream_s* %373)
  br label %375

375:                                              ; preds = %368, %361
  %376 = phi i32 [ %367, %361 ], [ %374, %368 ]
  store i32 %376, i32* %12, align 4
  br label %377

377:                                              ; preds = %375
  %378 = load i32, i32* %12, align 4
  %379 = icmp ne i32 %378, 12
  br i1 %379, label %380, label %389

380:                                              ; preds = %377
  %381 = load i32, i32* %12, align 4
  %382 = icmp ne i32 %381, 10
  br i1 %382, label %383, label %389

383:                                              ; preds = %380
  %384 = load i32, i32* %12, align 4
  %385 = icmp ne i32 %384, 13
  br i1 %385, label %386, label %389

386:                                              ; preds = %383
  %387 = load i32, i32* %12, align 4
  %388 = icmp ne i32 %387, -1
  br label %389

389:                                              ; preds = %386, %383, %380, %377
  %390 = phi i1 [ false, %383 ], [ false, %380 ], [ false, %377 ], [ %388, %386 ]
  br i1 %390, label %353, label %391

391:                                              ; preds = %389
  %392 = load i32, i32* %12, align 4
  %393 = icmp eq i32 %392, 13
  br i1 %393, label %394, label %427

394:                                              ; preds = %391
  %395 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %396 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %395, i32 0, i32 0
  %397 = load i8*, i8** %396, align 8
  %398 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %399 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %398, i32 0, i32 1
  %400 = load i8*, i8** %399, align 8
  %401 = icmp ult i8* %397, %400
  br i1 %401, label %402, label %409

402:                                              ; preds = %394
  %403 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %404 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %403, i32 0, i32 0
  %405 = load i8*, i8** %404, align 8
  %406 = getelementptr inbounds i8, i8* %405, i32 1
  store i8* %406, i8** %404, align 8
  %407 = load i8, i8* %406, align 1
  %408 = zext i8 %407 to i32
  br label %416

409:                                              ; preds = %394
  %410 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %411 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %410, i32 0, i32 7
  %412 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %411, i32 0, i32 0
  %413 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %412, align 8
  %414 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %415 = call i32 %413(%struct.stream_s* %414)
  br label %416

416:                                              ; preds = %409, %402
  %417 = phi i32 [ %408, %402 ], [ %415, %409 ]
  store i32 %417, i32* %19, align 4
  %418 = icmp ne i32 %417, 10
  br i1 %418, label %419, label %427

419:                                              ; preds = %416
  %420 = load i32, i32* %19, align 4
  %421 = icmp ne i32 %420, -1
  br i1 %421, label %422, label %427

422:                                              ; preds = %419
  %423 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %424 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %423, i32 0, i32 0
  %425 = load i8*, i8** %424, align 8
  %426 = getelementptr inbounds i8, i8* %425, i32 -1
  store i8* %426, i8** %424, align 8
  br label %427

427:                                              ; preds = %422, %419, %416, %391
  %428 = load i32, i32* %12, align 4
  %429 = icmp ne i32 %428, -1
  br i1 %429, label %430, label %431

430:                                              ; preds = %427
  br label %27

431:                                              ; preds = %427
  br label %432

432:                                              ; preds = %431, %49
  %433 = load i32, i32* %10, align 4
  %434 = icmp ne i32 %433, 0
  %435 = zext i1 %434 to i64
  %436 = select i1 %434, i32 -18, i32 1
  store i32 %436, i32* %11, align 4
  br label %693

437:                                              ; preds = %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49
  store i32 1, i32* %14, align 4
  store i32 0, i32* %13, align 4
  br label %440

438:                                              ; preds = %49
  br label %439

439:                                              ; preds = %438, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49, %49
  store i32 0, i32* %14, align 4
  store i32 0, i32* %13, align 4
  br label %440

440:                                              ; preds = %439, %437, %294
  %441 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %442 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %441, i32 0, i32 0
  %443 = load i8*, i8** %442, align 8
  %444 = getelementptr inbounds i8, i8* %443, i64 1
  store i8* %444, i8** %21, align 8
  %445 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %446 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %445, i32 0, i32 1
  %447 = load i8*, i8** %446, align 8
  %448 = getelementptr inbounds i8, i8* %447, i64 1
  %449 = getelementptr inbounds i8, i8* %448, i64 -1
  store i8* %449, i8** %22, align 8
  %450 = load i8*, i8** %21, align 8
  %451 = getelementptr inbounds i8, i8* %450, i64 -1
  %452 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %20, i32 0, i32 0
  store i8* %451, i8** %452, align 8
  %453 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %20, i32 0, i32 4
  store i32 0, i32* %453, align 8
  br label %454

454:                                              ; preds = %486, %440
  %455 = load i8*, i8** %21, align 8
  %456 = load i8*, i8** %22, align 8
  %457 = icmp uge i8* %455, %456
  br i1 %457, label %458, label %481

458:                                              ; preds = %454
  %459 = load i8*, i8** %21, align 8
  %460 = getelementptr inbounds i8, i8* %459, i64 -1
  %461 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %462 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %461, i32 0, i32 0
  store i8* %460, i8** %462, align 8
  %463 = load i8*, i8** %21, align 8
  %464 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %20, i32 0, i32 5
  store i8* %463, i8** %464, align 8
  %465 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %20, i32 0, i32 1
  store i8* %463, i8** %465, align 8
  %466 = load i8*, i8** %21, align 8
  %467 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %20, i32 0, i32 0
  %468 = load i8*, i8** %467, align 8
  %469 = ptrtoint i8* %466 to i64
  %470 = ptrtoint i8* %468 to i64
  %471 = sub i64 %469, %470
  %472 = trunc i64 %471 to i32
  %473 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %20, i32 0, i32 2
  store i32 %472, i32* %473, align 8
  %474 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %20, i32 0, i32 3
  store i32 1, i32* %474, align 4
  %475 = call i32 @dynamic_grow(%struct.dynamic_area_s* %20)
  %476 = icmp ne i32 %475, 0
  br i1 %476, label %478, label %477

477:                                              ; preds = %458
  store i32 -25, i32* %4, align 4
  br label %724

478:                                              ; preds = %458
  %479 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %20, i32 0, i32 1
  %480 = load i8*, i8** %479, align 8
  store i8* %480, i8** %21, align 8
  br label %501

481:                                              ; preds = %454
  %482 = load i8*, i8** %21, align 8
  %483 = getelementptr inbounds i8, i8* %482, i32 1
  store i8* %483, i8** %21, align 8
  %484 = load i8, i8* %482, align 1
  %485 = zext i8 %484 to i32
  store i32 %485, i32* %12, align 4
  br label %486

486:                                              ; preds = %481
  %487 = load i8*, i8** %15, align 8
  %488 = load i32, i32* %12, align 4
  %489 = sext i32 %488 to i64
  %490 = getelementptr inbounds i8, i8* %487, i64 %489
  %491 = load i8, i8* %490, align 1
  %492 = zext i8 %491 to i32
  %493 = icmp sle i32 %492, 100
  br i1 %493, label %454, label %494

494:                                              ; preds = %486
  %495 = load i8*, i8** %21, align 8
  %496 = getelementptr inbounds i8, i8* %495, i64 -1
  %497 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %498 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %497, i32 0, i32 0
  store i8* %496, i8** %498, align 8
  %499 = load i8*, i8** %21, align 8
  %500 = getelementptr inbounds i8, i8* %499, i32 -1
  store i8* %500, i8** %21, align 8
  br label %552

501:                                              ; preds = %478
  br label %502

502:                                              ; preds = %546, %501
  %503 = load i8*, i8** %15, align 8
  %504 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %505 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %504, i32 0, i32 0
  %506 = load i8*, i8** %505, align 8
  %507 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %508 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %507, i32 0, i32 1
  %509 = load i8*, i8** %508, align 8
  %510 = icmp ult i8* %506, %509
  br i1 %510, label %511, label %518

511:                                              ; preds = %502
  %512 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %513 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %512, i32 0, i32 0
  %514 = load i8*, i8** %513, align 8
  %515 = getelementptr inbounds i8, i8* %514, i32 1
  store i8* %515, i8** %513, align 8
  %516 = load i8, i8* %515, align 1
  %517 = zext i8 %516 to i32
  br label %525

518:                                              ; preds = %502
  %519 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %520 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %519, i32 0, i32 7
  %521 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %520, i32 0, i32 0
  %522 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %521, align 8
  %523 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %524 = call i32 %522(%struct.stream_s* %523)
  br label %525

525:                                              ; preds = %518, %511
  %526 = phi i32 [ %517, %511 ], [ %524, %518 ]
  store i32 %526, i32* %12, align 4
  %527 = sext i32 %526 to i64
  %528 = getelementptr inbounds i8, i8* %503, i64 %527
  %529 = load i8, i8* %528, align 1
  %530 = zext i8 %529 to i32
  %531 = icmp sle i32 %530, 100
  br i1 %531, label %532, label %551

532:                                              ; preds = %525
  %533 = load i8*, i8** %21, align 8
  %534 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %20, i32 0, i32 5
  %535 = load i8*, i8** %534, align 8
  %536 = icmp eq i8* %533, %535
  br i1 %536, label %537, label %546

537:                                              ; preds = %532
  %538 = load i8*, i8** %21, align 8
  %539 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %20, i32 0, i32 1
  store i8* %538, i8** %539, align 8
  %540 = call i32 @dynamic_grow(%struct.dynamic_area_s* %20)
  %541 = icmp ne i32 %540, 0
  br i1 %541, label %543, label %542

542:                                              ; preds = %537
  store i32 -25, i32* %4, align 4
  br label %724

543:                                              ; preds = %537
  %544 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %20, i32 0, i32 1
  %545 = load i8*, i8** %544, align 8
  store i8* %545, i8** %21, align 8
  br label %546

546:                                              ; preds = %543, %532
  %547 = load i32, i32* %12, align 4
  %548 = trunc i32 %547 to i8
  %549 = load i8*, i8** %21, align 8
  %550 = getelementptr inbounds i8, i8* %549, i32 1
  store i8* %550, i8** %21, align 8
  store i8 %548, i8* %549, align 1
  br label %502

551:                                              ; preds = %525
  br label %552

552:                                              ; preds = %551, %494
  %553 = load i8*, i8** %15, align 8
  %554 = load i32, i32* %12, align 4
  %555 = sext i32 %554 to i64
  %556 = getelementptr inbounds i8, i8* %553, i64 %555
  %557 = load i8, i8* %556, align 1
  %558 = zext i8 %557 to i32
  switch i32 %558, label %602 [
    i32 102, label %559
    i32 101, label %564
    i32 103, label %601
  ]

559:                                              ; preds = %552
  %560 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %561 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %560, i32 0, i32 0
  %562 = load i8*, i8** %561, align 8
  %563 = getelementptr inbounds i8, i8* %562, i32 -1
  store i8* %563, i8** %561, align 8
  br label %564

564:                                              ; preds = %559, %552
  %565 = load i32, i32* %12, align 4
  %566 = icmp eq i32 %565, 13
  br i1 %566, label %567, label %600

567:                                              ; preds = %564
  %568 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %569 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %568, i32 0, i32 0
  %570 = load i8*, i8** %569, align 8
  %571 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %572 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %571, i32 0, i32 1
  %573 = load i8*, i8** %572, align 8
  %574 = icmp ult i8* %570, %573
  br i1 %574, label %575, label %582

575:                                              ; preds = %567
  %576 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %577 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %576, i32 0, i32 0
  %578 = load i8*, i8** %577, align 8
  %579 = getelementptr inbounds i8, i8* %578, i32 1
  store i8* %579, i8** %577, align 8
  %580 = load i8, i8* %579, align 1
  %581 = zext i8 %580 to i32
  br label %589

582:                                              ; preds = %567
  %583 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %584 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %583, i32 0, i32 7
  %585 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %584, i32 0, i32 0
  %586 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %585, align 8
  %587 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %588 = call i32 %586(%struct.stream_s* %587)
  br label %589

589:                                              ; preds = %582, %575
  %590 = phi i32 [ %581, %575 ], [ %588, %582 ]
  store i32 %590, i32* %12, align 4
  %591 = icmp ne i32 %590, 10
  br i1 %591, label %592, label %600

592:                                              ; preds = %589
  %593 = load i32, i32* %12, align 4
  %594 = icmp ne i32 %593, -1
  br i1 %594, label %595, label %600

595:                                              ; preds = %592
  %596 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %597 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %596, i32 0, i32 0
  %598 = load i8*, i8** %597, align 8
  %599 = getelementptr inbounds i8, i8* %598, i32 -1
  store i8* %599, i8** %597, align 8
  br label %600

600:                                              ; preds = %595, %592, %589, %564
  br label %601

601:                                              ; preds = %600, %552
  br label %602

602:                                              ; preds = %601, %552
  %603 = load i32, i32* %14, align 4
  %604 = icmp ne i32 %603, 0
  br i1 %604, label %605, label %634

605:                                              ; preds = %602
  store %struct.stream_s* %23, %struct.stream_s** %24, align 8
  %606 = load %struct.stream_s*, %struct.stream_s** %24, align 8
  %607 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %20, i32 0, i32 0
  %608 = load i8*, i8** %607, align 8
  %609 = load i8*, i8** %21, align 8
  %610 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %20, i32 0, i32 0
  %611 = load i8*, i8** %610, align 8
  %612 = ptrtoint i8* %609 to i64
  %613 = ptrtoint i8* %611 to i64
  %614 = sub i64 %612, %613
  %615 = trunc i64 %614 to i32
  call void @sread_string(%struct.stream_s* %606, i8* %608, i32 %615)
  %616 = load %struct.stream_s*, %struct.stream_s** %24, align 8
  %617 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %618 = call i32 @scan_number(%struct.stream_s* %616, %struct.ref_s* %617)
  store i32 %618, i32* %11, align 4
  %619 = load i32, i32* %11, align 4
  %620 = icmp ne i32 %619, -18
  br i1 %620, label %621, label %633

621:                                              ; preds = %605
  %622 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %20, i32 0, i32 4
  %623 = load i32, i32* %622, align 8
  %624 = icmp ne i32 %623, 0
  br i1 %624, label %625, label %632

625:                                              ; preds = %621
  %626 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %20, i32 0, i32 0
  %627 = load i8*, i8** %626, align 8
  %628 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %20, i32 0, i32 2
  %629 = load i32, i32* %628, align 8
  %630 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %20, i32 0, i32 3
  %631 = load i32, i32* %630, align 4
  call void @alloc_free(i8* %627, i32 %629, i32 %631, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.309, i64 0, i64 0))
  br label %632

632:                                              ; preds = %625, %621
  br label %657

633:                                              ; preds = %605
  br label %634

634:                                              ; preds = %633, %602
  %635 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %20, i32 0, i32 0
  %636 = load i8*, i8** %635, align 8
  %637 = load i8*, i8** %21, align 8
  %638 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %20, i32 0, i32 0
  %639 = load i8*, i8** %638, align 8
  %640 = ptrtoint i8* %637 to i64
  %641 = ptrtoint i8* %639 to i64
  %642 = sub i64 %640, %641
  %643 = trunc i64 %642 to i32
  %644 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %645 = call i32 @name_ref(i8* %636, i32 %643, %struct.ref_s* %644, i32 1)
  store i32 %645, i32* %11, align 4
  %646 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %20, i32 0, i32 4
  %647 = load i32, i32* %646, align 8
  %648 = icmp ne i32 %647, 0
  br i1 %648, label %649, label %656

649:                                              ; preds = %634
  %650 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %20, i32 0, i32 0
  %651 = load i8*, i8** %650, align 8
  %652 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %20, i32 0, i32 2
  %653 = load i32, i32* %652, align 8
  %654 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %20, i32 0, i32 3
  %655 = load i32, i32* %654, align 4
  call void @alloc_free(i8* %651, i32 %653, i32 %655, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.309, i64 0, i64 0))
  br label %656

656:                                              ; preds = %649, %634
  br label %657

657:                                              ; preds = %656, %632, %351, %306, %303, %300, %295
  %658 = load i32, i32* %11, align 4
  %659 = icmp slt i32 %658, 0
  br i1 %659, label %660, label %662

660:                                              ; preds = %657
  %661 = load i32, i32* %11, align 4
  store i32 %661, i32* %4, align 4
  br label %724

662:                                              ; preds = %657
  %663 = load i32, i32* %13, align 4
  switch i32 %663, label %692 [
    i32 0, label %664
    i32 1, label %680
    i32 2, label %681
  ]

664:                                              ; preds = %662
  %665 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %666 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %665, i32 0, i32 1
  %667 = load i16, i16* %666, align 8
  %668 = zext i16 %667 to i32
  %669 = and i32 %668, 255
  %670 = ashr i32 %669, 2
  %671 = icmp eq i32 %670, 7
  br i1 %671, label %672, label %679

672:                                              ; preds = %664
  %673 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %674 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %673, i32 0, i32 1
  %675 = load i16, i16* %674, align 8
  %676 = zext i16 %675 to i32
  %677 = or i32 %676, 1
  %678 = trunc i32 %677 to i16
  store i16 %678, i16* %674, align 8
  br label %679

679:                                              ; preds = %672, %664
  br label %680

680:                                              ; preds = %679, %662
  br label %692

681:                                              ; preds = %662
  %682 = load %struct.ref_s*, %struct.ref_s** @dsp, align 8
  %683 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %684 = call i32 @dict_lookup(%struct.ref_s* getelementptr inbounds ([20 x %struct.ref_s], [20 x %struct.ref_s]* @dstack, i64 0, i64 0), %struct.ref_s* %682, %struct.ref_s* %683, %struct.ref_s** %25)
  %685 = icmp sle i32 %684, 0
  br i1 %685, label %686, label %687

686:                                              ; preds = %681
  store i32 -21, i32* %4, align 4
  br label %724

687:                                              ; preds = %681
  %688 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %689 = load %struct.ref_s*, %struct.ref_s** %25, align 8
  %690 = bitcast %struct.ref_s* %688 to i8*
  %691 = bitcast %struct.ref_s* %689 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %690, i8* align 8 %691, i64 16, i1 false)
  br label %692

692:                                              ; preds = %687, %680, %662
  br label %693

693:                                              ; preds = %692, %432, %234, %142, %138, %75, %71, %62, %53
  %694 = load i32, i32* %10, align 4
  %695 = icmp eq i32 %694, 0
  br i1 %695, label %699, label %696

696:                                              ; preds = %693
  %697 = load i32, i32* %11, align 4
  %698 = icmp slt i32 %697, 0
  br i1 %698, label %699, label %701

699:                                              ; preds = %696, %693
  %700 = load i32, i32* %11, align 4
  store i32 %700, i32* %4, align 4
  br label %724

701:                                              ; preds = %696
  %702 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %9, i32 0, i32 5
  %703 = load i8*, i8** %702, align 8
  %704 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %705 = bitcast %struct.ref_s* %704 to i8*
  %706 = ptrtoint i8* %703 to i64
  %707 = ptrtoint i8* %705 to i64
  %708 = sub i64 %706, %707
  %709 = icmp ult i64 %708, 32
  br i1 %709, label %710, label %721

710:                                              ; preds = %701
  %711 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %712 = bitcast %struct.ref_s* %711 to i8*
  %713 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %9, i32 0, i32 1
  store i8* %712, i8** %713, align 8
  %714 = call i32 @dynamic_grow(%struct.dynamic_area_s* %9)
  %715 = icmp ne i32 %714, 0
  br i1 %715, label %717, label %716

716:                                              ; preds = %710
  store i32 -25, i32* %4, align 4
  br label %724

717:                                              ; preds = %710
  %718 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %9, i32 0, i32 1
  %719 = load i8*, i8** %718, align 8
  %720 = bitcast i8* %719 to %struct.ref_s*
  store %struct.ref_s* %720, %struct.ref_s** %8, align 8
  br label %721

721:                                              ; preds = %717, %701
  %722 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %723 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %722, i32 1
  store %struct.ref_s* %723, %struct.ref_s** %8, align 8
  br label %27

724:                                              ; preds = %716, %699, %686, %660, %542, %477, %195, %186, %118
  %725 = load i32, i32* %4, align 4
  ret i32 %725
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @scan_hex_string(%struct.stream_s* %0, %struct.ref_s* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.stream_s*, align 8
  %5 = alloca %struct.ref_s*, align 8
  %6 = alloca %struct.dynamic_area_s, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  store %struct.stream_s* %0, %struct.stream_s** %4, align 8
  store %struct.ref_s* %1, %struct.ref_s** %5, align 8
  %13 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %6, i32 0, i32 2
  store i32 100, i32* %13, align 8
  %14 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %6, i32 0, i32 3
  store i32 1, i32* %14, align 4
  %15 = call i8* @alloc(i32 100, i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.309, i64 0, i64 0))
  %16 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %6, i32 0, i32 0
  store i8* %15, i8** %16, align 8
  %17 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %6, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds i8, i8* %18, i64 100
  %20 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %6, i32 0, i32 5
  store i8* %19, i8** %20, align 8
  %21 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %6, i32 0, i32 4
  store i32 1, i32* %21, align 8
  %22 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %6, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %6, i32 0, i32 1
  store i8* %23, i8** %24, align 8
  store i8* %23, i8** %11, align 8
  store i8* getelementptr inbounds ([257 x i8], [257 x i8]* @scan_char_array, i64 0, i64 1), i8** %12, align 8
  %25 = load i8*, i8** %11, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %27, label %28

27:                                               ; preds = %2
  store i32 -25, i32* %3, align 4
  br label %157

28:                                               ; preds = %2
  br label %29

29:                                               ; preds = %107, %28
  br label %30

30:                                               ; preds = %144, %29
  %31 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %32 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %31, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %35 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %34, i32 0, i32 1
  %36 = load i8*, i8** %35, align 8
  %37 = icmp ult i8* %33, %36
  br i1 %37, label %38, label %45

38:                                               ; preds = %30
  %39 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %40 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %39, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds i8, i8* %41, i32 1
  store i8* %42, i8** %40, align 8
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  br label %52

45:                                               ; preds = %30
  %46 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %47 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %46, i32 0, i32 7
  %48 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %47, i32 0, i32 0
  %49 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %48, align 8
  %50 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %51 = call i32 %49(%struct.stream_s* %50)
  br label %52

52:                                               ; preds = %45, %38
  %53 = phi i32 [ %44, %38 ], [ %51, %45 ]
  store i32 %53, i32* %7, align 4
  %54 = load i8*, i8** %12, align 8
  %55 = load i32, i32* %7, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i8, i8* %54, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  store i32 %59, i32* %9, align 4
  %60 = icmp slt i32 %59, 16
  br i1 %60, label %61, label %143

61:                                               ; preds = %52
  br label %62

62:                                               ; preds = %116, %61
  %63 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %64 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %63, i32 0, i32 0
  %65 = load i8*, i8** %64, align 8
  %66 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %67 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %66, i32 0, i32 1
  %68 = load i8*, i8** %67, align 8
  %69 = icmp ult i8* %65, %68
  br i1 %69, label %70, label %77

70:                                               ; preds = %62
  %71 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %72 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %71, i32 0, i32 0
  %73 = load i8*, i8** %72, align 8
  %74 = getelementptr inbounds i8, i8* %73, i32 1
  store i8* %74, i8** %72, align 8
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  br label %84

77:                                               ; preds = %62
  %78 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %79 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %78, i32 0, i32 7
  %80 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %79, i32 0, i32 0
  %81 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %80, align 8
  %82 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %83 = call i32 %81(%struct.stream_s* %82)
  br label %84

84:                                               ; preds = %77, %70
  %85 = phi i32 [ %76, %70 ], [ %83, %77 ]
  store i32 %85, i32* %8, align 4
  %86 = load i8*, i8** %12, align 8
  %87 = load i32, i32* %8, align 4
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds i8, i8* %86, i64 %88
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  store i32 %91, i32* %10, align 4
  %92 = icmp slt i32 %91, 16
  br i1 %92, label %93, label %115

93:                                               ; preds = %84
  %94 = load i8*, i8** %11, align 8
  %95 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %6, i32 0, i32 5
  %96 = load i8*, i8** %95, align 8
  %97 = icmp eq i8* %94, %96
  br i1 %97, label %98, label %107

98:                                               ; preds = %93
  %99 = load i8*, i8** %11, align 8
  %100 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %6, i32 0, i32 1
  store i8* %99, i8** %100, align 8
  %101 = call i32 @dynamic_grow(%struct.dynamic_area_s* %6)
  %102 = icmp ne i32 %101, 0
  br i1 %102, label %104, label %103

103:                                              ; preds = %98
  store i32 -25, i32* %3, align 4
  br label %157

104:                                              ; preds = %98
  %105 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %6, i32 0, i32 1
  %106 = load i8*, i8** %105, align 8
  store i8* %106, i8** %11, align 8
  br label %107

107:                                              ; preds = %104, %93
  %108 = load i32, i32* %9, align 4
  %109 = shl i32 %108, 4
  %110 = load i32, i32* %10, align 4
  %111 = add nsw i32 %109, %110
  %112 = trunc i32 %111 to i8
  %113 = load i8*, i8** %11, align 8
  %114 = getelementptr inbounds i8, i8* %113, i32 1
  store i8* %114, i8** %11, align 8
  store i8 %112, i8* %113, align 1
  br label %29

115:                                              ; preds = %84
  br label %116

116:                                              ; preds = %115
  %117 = load i32, i32* %10, align 4
  %118 = icmp eq i32 %117, 101
  br i1 %118, label %62, label %119

119:                                              ; preds = %116
  %120 = load i32, i32* %8, align 4
  %121 = icmp ne i32 %120, 62
  br i1 %121, label %122, label %123

122:                                              ; preds = %119
  store i32 -18, i32* %3, align 4
  br label %157

123:                                              ; preds = %119
  %124 = load i8*, i8** %11, align 8
  %125 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %6, i32 0, i32 5
  %126 = load i8*, i8** %125, align 8
  %127 = icmp eq i8* %124, %126
  br i1 %127, label %128, label %137

128:                                              ; preds = %123
  %129 = load i8*, i8** %11, align 8
  %130 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %6, i32 0, i32 1
  store i8* %129, i8** %130, align 8
  %131 = call i32 @dynamic_grow(%struct.dynamic_area_s* %6)
  %132 = icmp ne i32 %131, 0
  br i1 %132, label %134, label %133

133:                                              ; preds = %128
  store i32 -25, i32* %3, align 4
  br label %157

134:                                              ; preds = %128
  %135 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %6, i32 0, i32 1
  %136 = load i8*, i8** %135, align 8
  store i8* %136, i8** %11, align 8
  br label %137

137:                                              ; preds = %134, %123
  %138 = load i32, i32* %9, align 4
  %139 = shl i32 %138, 4
  %140 = trunc i32 %139 to i8
  %141 = load i8*, i8** %11, align 8
  %142 = getelementptr inbounds i8, i8* %141, i32 1
  store i8* %142, i8** %11, align 8
  store i8 %140, i8* %141, align 1
  br label %152

143:                                              ; preds = %52
  br label %144

144:                                              ; preds = %143
  %145 = load i32, i32* %9, align 4
  %146 = icmp eq i32 %145, 101
  br i1 %146, label %30, label %147

147:                                              ; preds = %144
  %148 = load i32, i32* %7, align 4
  %149 = icmp ne i32 %148, 62
  br i1 %149, label %150, label %151

150:                                              ; preds = %147
  store i32 -18, i32* %3, align 4
  br label %157

151:                                              ; preds = %147
  br label %152

152:                                              ; preds = %151, %137
  %153 = load i8*, i8** %11, align 8
  %154 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %6, i32 0, i32 1
  store i8* %153, i8** %154, align 8
  %155 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %156 = call i32 @mk_string(%struct.ref_s* %155, %struct.dynamic_area_s* %6)
  store i32 %156, i32* %3, align 4
  br label %157

157:                                              ; preds = %152, %150, %133, %122, %103, %27
  %158 = load i32, i32* %3, align 4
  ret i32 %158
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @scan_string(%struct.stream_s* %0, i32 %1, %struct.ref_s* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.stream_s*, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.ref_s*, align 8
  %8 = alloca %struct.dynamic_area_s, align 8
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store %struct.stream_s* %0, %struct.stream_s** %5, align 8
  store i32 %1, i32* %6, align 4
  store %struct.ref_s* %2, %struct.ref_s** %7, align 8
  %13 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %8, i32 0, i32 2
  store i32 100, i32* %13, align 8
  %14 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %8, i32 0, i32 3
  store i32 1, i32* %14, align 4
  %15 = call i8* @alloc(i32 100, i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.309, i64 0, i64 0))
  %16 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %8, i32 0, i32 0
  store i8* %15, i8** %16, align 8
  %17 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %8, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds i8, i8* %18, i64 100
  %20 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %8, i32 0, i32 5
  store i8* %19, i8** %20, align 8
  %21 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %8, i32 0, i32 4
  store i32 1, i32* %21, align 8
  %22 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %8, i32 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %8, i32 0, i32 1
  store i8* %23, i8** %24, align 8
  store i8* %23, i8** %10, align 8
  store i32 0, i32* %11, align 4
  %25 = load i8*, i8** %10, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %27, label %28

27:                                               ; preds = %3
  store i32 -25, i32* %4, align 4
  br label %219

28:                                               ; preds = %3
  br label %29

29:                                               ; preds = %108, %28
  br label %30

30:                                               ; preds = %209, %29
  %31 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %32 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %31, i32 0, i32 0
  %33 = load i8*, i8** %32, align 8
  %34 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %35 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %34, i32 0, i32 1
  %36 = load i8*, i8** %35, align 8
  %37 = icmp ult i8* %33, %36
  br i1 %37, label %38, label %45

38:                                               ; preds = %30
  %39 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %40 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %39, i32 0, i32 0
  %41 = load i8*, i8** %40, align 8
  %42 = getelementptr inbounds i8, i8* %41, i32 1
  store i8* %42, i8** %40, align 8
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  br label %52

45:                                               ; preds = %30
  %46 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %47 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %46, i32 0, i32 7
  %48 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %47, i32 0, i32 0
  %49 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %48, align 8
  %50 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %51 = call i32 %49(%struct.stream_s* %50)
  br label %52

52:                                               ; preds = %45, %38
  %53 = phi i32 [ %44, %38 ], [ %51, %45 ]
  store i32 %53, i32* %9, align 4
  %54 = load i32, i32* %9, align 4
  %55 = icmp eq i32 %54, -1
  br i1 %55, label %56, label %57

56:                                               ; preds = %52
  store i32 -18, i32* %4, align 4
  br label %219

57:                                               ; preds = %52
  %58 = load i32, i32* %9, align 4
  %59 = icmp eq i32 %58, 40
  br i1 %59, label %60, label %63

60:                                               ; preds = %57
  %61 = load i32, i32* %11, align 4
  %62 = add nsw i32 %61, 1
  store i32 %62, i32* %11, align 4
  br label %194

63:                                               ; preds = %57
  %64 = load i32, i32* %9, align 4
  %65 = icmp eq i32 %64, 41
  br i1 %65, label %66, label %72

66:                                               ; preds = %63
  %67 = load i32, i32* %11, align 4
  %68 = add nsw i32 %67, -1
  store i32 %68, i32* %11, align 4
  %69 = icmp slt i32 %68, 0
  br i1 %69, label %70, label %71

70:                                               ; preds = %66
  br label %214

71:                                               ; preds = %66
  br label %193

72:                                               ; preds = %63
  %73 = load i32, i32* %9, align 4
  %74 = icmp eq i32 %73, 92
  br i1 %74, label %75, label %192

75:                                               ; preds = %72
  %76 = load i32, i32* %6, align 4
  %77 = icmp ne i32 %76, 0
  br i1 %77, label %192, label %78

78:                                               ; preds = %75
  %79 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %80 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %79, i32 0, i32 0
  %81 = load i8*, i8** %80, align 8
  %82 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %83 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %82, i32 0, i32 1
  %84 = load i8*, i8** %83, align 8
  %85 = icmp ult i8* %81, %84
  br i1 %85, label %86, label %93

86:                                               ; preds = %78
  %87 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %88 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %87, i32 0, i32 0
  %89 = load i8*, i8** %88, align 8
  %90 = getelementptr inbounds i8, i8* %89, i32 1
  store i8* %90, i8** %88, align 8
  %91 = load i8, i8* %90, align 1
  %92 = zext i8 %91 to i32
  br label %100

93:                                               ; preds = %78
  %94 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %95 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %94, i32 0, i32 7
  %96 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %95, i32 0, i32 0
  %97 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %96, align 8
  %98 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %99 = call i32 %97(%struct.stream_s* %98)
  br label %100

100:                                              ; preds = %93, %86
  %101 = phi i32 [ %92, %86 ], [ %99, %93 ]
  store i32 %101, i32* %9, align 4
  %102 = load i32, i32* %9, align 4
  switch i32 %102, label %190 [
    i32 110, label %103
    i32 114, label %104
    i32 116, label %105
    i32 98, label %106
    i32 102, label %107
    i32 10, label %108
    i32 48, label %109
    i32 49, label %109
    i32 50, label %109
    i32 51, label %109
    i32 52, label %109
    i32 53, label %109
    i32 54, label %109
    i32 55, label %109
  ]

103:                                              ; preds = %100
  store i32 10, i32* %9, align 4
  br label %191

104:                                              ; preds = %100
  store i32 13, i32* %9, align 4
  br label %191

105:                                              ; preds = %100
  store i32 9, i32* %9, align 4
  br label %191

106:                                              ; preds = %100
  store i32 8, i32* %9, align 4
  br label %191

107:                                              ; preds = %100
  store i32 12, i32* %9, align 4
  br label %191

108:                                              ; preds = %100
  br label %29

109:                                              ; preds = %100, %100, %100, %100, %100, %100, %100, %100
  %110 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %111 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %110, i32 0, i32 0
  %112 = load i8*, i8** %111, align 8
  %113 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %114 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %113, i32 0, i32 1
  %115 = load i8*, i8** %114, align 8
  %116 = icmp ult i8* %112, %115
  br i1 %116, label %117, label %124

117:                                              ; preds = %109
  %118 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %119 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %118, i32 0, i32 0
  %120 = load i8*, i8** %119, align 8
  %121 = getelementptr inbounds i8, i8* %120, i32 1
  store i8* %121, i8** %119, align 8
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i32
  br label %131

124:                                              ; preds = %109
  %125 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %126 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %125, i32 0, i32 7
  %127 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %126, i32 0, i32 0
  %128 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %127, align 8
  %129 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %130 = call i32 %128(%struct.stream_s* %129)
  br label %131

131:                                              ; preds = %124, %117
  %132 = phi i32 [ %123, %117 ], [ %130, %124 ]
  store i32 %132, i32* %12, align 4
  %133 = load i32, i32* %9, align 4
  %134 = sub nsw i32 %133, 48
  store i32 %134, i32* %9, align 4
  %135 = load i32, i32* %12, align 4
  %136 = icmp sge i32 %135, 48
  br i1 %136, label %137, label %181

137:                                              ; preds = %131
  %138 = load i32, i32* %12, align 4
  %139 = icmp sle i32 %138, 55
  br i1 %139, label %140, label %181

140:                                              ; preds = %137
  %141 = load i32, i32* %9, align 4
  %142 = shl i32 %141, 3
  %143 = load i32, i32* %12, align 4
  %144 = add nsw i32 %142, %143
  %145 = sub nsw i32 %144, 48
  store i32 %145, i32* %9, align 4
  %146 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %147 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %146, i32 0, i32 0
  %148 = load i8*, i8** %147, align 8
  %149 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %150 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %149, i32 0, i32 1
  %151 = load i8*, i8** %150, align 8
  %152 = icmp ult i8* %148, %151
  br i1 %152, label %153, label %160

153:                                              ; preds = %140
  %154 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %155 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %154, i32 0, i32 0
  %156 = load i8*, i8** %155, align 8
  %157 = getelementptr inbounds i8, i8* %156, i32 1
  store i8* %157, i8** %155, align 8
  %158 = load i8, i8* %157, align 1
  %159 = zext i8 %158 to i32
  br label %167

160:                                              ; preds = %140
  %161 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %162 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %161, i32 0, i32 7
  %163 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %162, i32 0, i32 0
  %164 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %163, align 8
  %165 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %166 = call i32 %164(%struct.stream_s* %165)
  br label %167

167:                                              ; preds = %160, %153
  %168 = phi i32 [ %159, %153 ], [ %166, %160 ]
  store i32 %168, i32* %12, align 4
  %169 = load i32, i32* %12, align 4
  %170 = icmp sge i32 %169, 48
  br i1 %170, label %171, label %180

171:                                              ; preds = %167
  %172 = load i32, i32* %12, align 4
  %173 = icmp sle i32 %172, 55
  br i1 %173, label %174, label %180

174:                                              ; preds = %171
  %175 = load i32, i32* %9, align 4
  %176 = shl i32 %175, 3
  %177 = load i32, i32* %12, align 4
  %178 = add nsw i32 %176, %177
  %179 = sub nsw i32 %178, 48
  store i32 %179, i32* %9, align 4
  br label %191

180:                                              ; preds = %171, %167
  br label %181

181:                                              ; preds = %180, %137, %131
  %182 = load i32, i32* %12, align 4
  %183 = icmp eq i32 %182, -1
  br i1 %183, label %184, label %185

184:                                              ; preds = %181
  store i32 -18, i32* %4, align 4
  br label %219

185:                                              ; preds = %181
  %186 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %187 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %186, i32 0, i32 0
  %188 = load i8*, i8** %187, align 8
  %189 = getelementptr inbounds i8, i8* %188, i32 -1
  store i8* %189, i8** %187, align 8
  br label %191

190:                                              ; preds = %100
  br label %191

191:                                              ; preds = %190, %185, %174, %107, %106, %105, %104, %103
  br label %192

192:                                              ; preds = %191, %75, %72
  br label %193

193:                                              ; preds = %192, %71
  br label %194

194:                                              ; preds = %193, %60
  br label %195

195:                                              ; preds = %194
  %196 = load i8*, i8** %10, align 8
  %197 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %8, i32 0, i32 5
  %198 = load i8*, i8** %197, align 8
  %199 = icmp eq i8* %196, %198
  br i1 %199, label %200, label %209

200:                                              ; preds = %195
  %201 = load i8*, i8** %10, align 8
  %202 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %8, i32 0, i32 1
  store i8* %201, i8** %202, align 8
  %203 = call i32 @dynamic_grow(%struct.dynamic_area_s* %8)
  %204 = icmp ne i32 %203, 0
  br i1 %204, label %206, label %205

205:                                              ; preds = %200
  store i32 -25, i32* %4, align 4
  br label %219

206:                                              ; preds = %200
  %207 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %8, i32 0, i32 1
  %208 = load i8*, i8** %207, align 8
  store i8* %208, i8** %10, align 8
  br label %209

209:                                              ; preds = %206, %195
  %210 = load i32, i32* %9, align 4
  %211 = trunc i32 %210 to i8
  %212 = load i8*, i8** %10, align 8
  %213 = getelementptr inbounds i8, i8* %212, i32 1
  store i8* %213, i8** %10, align 8
  store i8 %211, i8* %212, align 1
  br label %30

214:                                              ; preds = %70
  %215 = load i8*, i8** %10, align 8
  %216 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %8, i32 0, i32 1
  store i8* %215, i8** %216, align 8
  %217 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %218 = call i32 @mk_string(%struct.ref_s* %217, %struct.dynamic_area_s* %8)
  store i32 %218, i32* %4, align 4
  br label %219

219:                                              ; preds = %214, %205, %184, %56, %27
  %220 = load i32, i32* %4, align 4
  ret i32 %220
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @dynamic_grow(%struct.dynamic_area_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.dynamic_area_s*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  store %struct.dynamic_area_s* %0, %struct.dynamic_area_s** %3, align 8
  %10 = load %struct.dynamic_area_s*, %struct.dynamic_area_s** %3, align 8
  %11 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %10, i32 0, i32 2
  %12 = load i32, i32* %11, align 8
  store i32 %12, i32* %4, align 4
  %13 = load i32, i32* %4, align 4
  %14 = load %struct.dynamic_area_s*, %struct.dynamic_area_s** %3, align 8
  %15 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %14, i32 0, i32 3
  %16 = load i32, i32* %15, align 4
  %17 = mul i32 %13, %16
  %18 = zext i32 %17 to i64
  store i64 %18, i64* %5, align 8
  %19 = load %struct.dynamic_area_s*, %struct.dynamic_area_s** %3, align 8
  %20 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %19, i32 0, i32 1
  %21 = load i8*, i8** %20, align 8
  %22 = load %struct.dynamic_area_s*, %struct.dynamic_area_s** %3, align 8
  %23 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %22, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = ptrtoint i8* %21 to i64
  %26 = ptrtoint i8* %24 to i64
  %27 = sub i64 %25, %26
  %28 = trunc i64 %27 to i32
  store i32 %28, i32* %7, align 4
  %29 = load i64, i64* %5, align 8
  %30 = icmp ult i64 %29, 10
  br i1 %30, label %31, label %32

31:                                               ; preds = %1
  br label %41

32:                                               ; preds = %1
  %33 = load i64, i64* %5, align 8
  %34 = icmp uge i64 %33, 2147483647
  br i1 %34, label %35, label %36

35:                                               ; preds = %32
  br label %39

36:                                               ; preds = %32
  %37 = load i64, i64* %5, align 8
  %38 = shl i64 %37, 1
  br label %39

39:                                               ; preds = %36, %35
  %40 = phi i64 [ -1, %35 ], [ %38, %36 ]
  br label %41

41:                                               ; preds = %39, %31
  %42 = phi i64 [ 20, %31 ], [ %40, %39 ]
  store i64 %42, i64* %5, align 8
  %43 = load i64, i64* %5, align 8
  %44 = load %struct.dynamic_area_s*, %struct.dynamic_area_s** %3, align 8
  %45 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %44, i32 0, i32 3
  %46 = load i32, i32* %45, align 4
  %47 = zext i32 %46 to i64
  %48 = udiv i64 %43, %47
  store i64 %48, i64* %6, align 8
  %49 = load %struct.dynamic_area_s*, %struct.dynamic_area_s** %3, align 8
  %50 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %49, i32 0, i32 4
  %51 = load i32, i32* %50, align 8
  %52 = icmp ne i32 %51, 0
  br i1 %52, label %53, label %83

53:                                               ; preds = %41
  %54 = load %struct.dynamic_area_s*, %struct.dynamic_area_s** %3, align 8
  %55 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %54, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = load i32, i32* %4, align 4
  %58 = load i64, i64* %6, align 8
  %59 = trunc i64 %58 to i32
  %60 = load %struct.dynamic_area_s*, %struct.dynamic_area_s** %3, align 8
  %61 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %60, i32 0, i32 3
  %62 = load i32, i32* %61, align 4
  %63 = call i8* @alloc_grow(i8* %56, i32 %57, i32 %59, i32 %62, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.309, i64 0, i64 0))
  %64 = load %struct.dynamic_area_s*, %struct.dynamic_area_s** %3, align 8
  %65 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %64, i32 0, i32 0
  store i8* %63, i8** %65, align 8
  %66 = load %struct.dynamic_area_s*, %struct.dynamic_area_s** %3, align 8
  %67 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %66, i32 0, i32 0
  %68 = load i8*, i8** %67, align 8
  %69 = icmp eq i8* %68, null
  br i1 %69, label %70, label %71

70:                                               ; preds = %53
  store i32 0, i32* %2, align 4
  br label %140

71:                                               ; preds = %53
  %72 = load i64, i64* %6, align 8
  %73 = trunc i64 %72 to i32
  %74 = load %struct.dynamic_area_s*, %struct.dynamic_area_s** %3, align 8
  %75 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %74, i32 0, i32 2
  store i32 %73, i32* %75, align 8
  %76 = load %struct.dynamic_area_s*, %struct.dynamic_area_s** %3, align 8
  %77 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %76, i32 0, i32 0
  %78 = load i8*, i8** %77, align 8
  %79 = load i64, i64* %5, align 8
  %80 = getelementptr inbounds i8, i8* %78, i64 %79
  %81 = load %struct.dynamic_area_s*, %struct.dynamic_area_s** %3, align 8
  %82 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %81, i32 0, i32 5
  store i8* %80, i8** %82, align 8
  br label %131

83:                                               ; preds = %41
  %84 = load %struct.dynamic_area_s*, %struct.dynamic_area_s** %3, align 8
  %85 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %84, i32 0, i32 0
  %86 = load i8*, i8** %85, align 8
  store i8* %86, i8** %8, align 8
  %87 = load i64, i64* %5, align 8
  %88 = trunc i64 %87 to i32
  store i32 %88, i32* %9, align 4
  %89 = load i64, i64* %6, align 8
  %90 = trunc i64 %89 to i32
  %91 = load %struct.dynamic_area_s*, %struct.dynamic_area_s** %3, align 8
  %92 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %91, i32 0, i32 2
  store i32 %90, i32* %92, align 8
  %93 = load %struct.dynamic_area_s*, %struct.dynamic_area_s** %3, align 8
  %94 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %93, i32 0, i32 3
  %95 = load i32, i32* %94, align 4
  %96 = load %struct.dynamic_area_s*, %struct.dynamic_area_s** %3, align 8
  %97 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %96, i32 0, i32 3
  store i32 %95, i32* %97, align 4
  %98 = call i8* @alloc(i32 %90, i32 %95, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.309, i64 0, i64 0))
  %99 = load %struct.dynamic_area_s*, %struct.dynamic_area_s** %3, align 8
  %100 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %99, i32 0, i32 0
  store i8* %98, i8** %100, align 8
  %101 = load %struct.dynamic_area_s*, %struct.dynamic_area_s** %3, align 8
  %102 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %101, i32 0, i32 0
  %103 = load i8*, i8** %102, align 8
  %104 = load i64, i64* %6, align 8
  %105 = load %struct.dynamic_area_s*, %struct.dynamic_area_s** %3, align 8
  %106 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %105, i32 0, i32 3
  %107 = load i32, i32* %106, align 4
  %108 = zext i32 %107 to i64
  %109 = mul i64 %104, %108
  %110 = getelementptr inbounds i8, i8* %103, i64 %109
  %111 = load %struct.dynamic_area_s*, %struct.dynamic_area_s** %3, align 8
  %112 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %111, i32 0, i32 5
  store i8* %110, i8** %112, align 8
  %113 = load %struct.dynamic_area_s*, %struct.dynamic_area_s** %3, align 8
  %114 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %113, i32 0, i32 4
  store i32 1, i32* %114, align 8
  %115 = load %struct.dynamic_area_s*, %struct.dynamic_area_s** %3, align 8
  %116 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %115, i32 0, i32 0
  %117 = load i8*, i8** %116, align 8
  %118 = load %struct.dynamic_area_s*, %struct.dynamic_area_s** %3, align 8
  %119 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %118, i32 0, i32 1
  store i8* %117, i8** %119, align 8
  %120 = icmp ne i8* %117, null
  br i1 %120, label %122, label %121

121:                                              ; preds = %83
  store i32 0, i32* %2, align 4
  br label %140

122:                                              ; preds = %83
  %123 = load %struct.dynamic_area_s*, %struct.dynamic_area_s** %3, align 8
  %124 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %123, i32 0, i32 0
  %125 = load i8*, i8** %124, align 8
  %126 = load i8*, i8** %8, align 8
  %127 = load i32, i32* %9, align 4
  %128 = zext i32 %127 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %125, i8* align 1 %126, i64 %128, i1 false)
  %129 = load %struct.dynamic_area_s*, %struct.dynamic_area_s** %3, align 8
  %130 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %129, i32 0, i32 4
  store i32 1, i32* %130, align 8
  br label %131

131:                                              ; preds = %122, %71
  %132 = load %struct.dynamic_area_s*, %struct.dynamic_area_s** %3, align 8
  %133 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %132, i32 0, i32 0
  %134 = load i8*, i8** %133, align 8
  %135 = load i32, i32* %7, align 4
  %136 = zext i32 %135 to i64
  %137 = getelementptr inbounds i8, i8* %134, i64 %136
  %138 = load %struct.dynamic_area_s*, %struct.dynamic_area_s** %3, align 8
  %139 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %138, i32 0, i32 1
  store i8* %137, i8** %139, align 8
  store i32 1, i32* %2, align 4
  br label %140

140:                                              ; preds = %131, %121, %70
  %141 = load i32, i32* %2, align 4
  ret i32 %141
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @scan_number(%struct.stream_s* %0, %struct.ref_s* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.stream_s*, align 8
  %5 = alloca %struct.ref_s*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca double, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i64, align 8
  store %struct.stream_s* %0, %struct.stream_s** %4, align 8
  store %struct.ref_s* %1, %struct.ref_s** %5, align 8
  store i32 0, i32* %6, align 4
  store i32 0, i32* %9, align 4
  %14 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %15 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %14, i32 0, i32 0
  %16 = load i8*, i8** %15, align 8
  %17 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %18 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %17, i32 0, i32 1
  %19 = load i8*, i8** %18, align 8
  %20 = icmp ult i8* %16, %19
  br i1 %20, label %21, label %28

21:                                               ; preds = %2
  %22 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %23 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %22, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds i8, i8* %24, i32 1
  store i8* %25, i8** %23, align 8
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i32
  br label %35

28:                                               ; preds = %2
  %29 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %30 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %29, i32 0, i32 7
  %31 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %30, i32 0, i32 0
  %32 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %31, align 8
  %33 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %34 = call i32 %32(%struct.stream_s* %33)
  br label %35

35:                                               ; preds = %28, %21
  %36 = phi i32 [ %27, %21 ], [ %34, %28 ]
  store i32 %36, i32* %11, align 4
  switch i32 %36, label %85 [
    i32 43, label %37
    i32 45, label %61
  ]

37:                                               ; preds = %35
  store i32 1, i32* %6, align 4
  %38 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %39 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %38, i32 0, i32 0
  %40 = load i8*, i8** %39, align 8
  %41 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %42 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %41, i32 0, i32 1
  %43 = load i8*, i8** %42, align 8
  %44 = icmp ult i8* %40, %43
  br i1 %44, label %45, label %52

45:                                               ; preds = %37
  %46 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %47 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %46, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = getelementptr inbounds i8, i8* %48, i32 1
  store i8* %49, i8** %47, align 8
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  br label %59

52:                                               ; preds = %37
  %53 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %54 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %53, i32 0, i32 7
  %55 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %54, i32 0, i32 0
  %56 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %55, align 8
  %57 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %58 = call i32 %56(%struct.stream_s* %57)
  br label %59

59:                                               ; preds = %52, %45
  %60 = phi i32 [ %51, %45 ], [ %58, %52 ]
  store i32 %60, i32* %11, align 4
  br label %85

61:                                               ; preds = %35
  store i32 -1, i32* %6, align 4
  %62 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %63 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %62, i32 0, i32 0
  %64 = load i8*, i8** %63, align 8
  %65 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %66 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %65, i32 0, i32 1
  %67 = load i8*, i8** %66, align 8
  %68 = icmp ult i8* %64, %67
  br i1 %68, label %69, label %76

69:                                               ; preds = %61
  %70 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %71 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %70, i32 0, i32 0
  %72 = load i8*, i8** %71, align 8
  %73 = getelementptr inbounds i8, i8* %72, i32 1
  store i8* %73, i8** %71, align 8
  %74 = load i8, i8* %73, align 1
  %75 = zext i8 %74 to i32
  br label %83

76:                                               ; preds = %61
  %77 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %78 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %77, i32 0, i32 7
  %79 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %78, i32 0, i32 0
  %80 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %79, align 8
  %81 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %82 = call i32 %80(%struct.stream_s* %81)
  br label %83

83:                                               ; preds = %76, %69
  %84 = phi i32 [ %75, %69 ], [ %82, %76 ]
  store i32 %84, i32* %11, align 4
  br label %85

85:                                               ; preds = %83, %59, %35
  %86 = call i16** @__ctype_b_loc() #13
  %87 = load i16*, i16** %86, align 8
  %88 = load i32, i32* %11, align 4
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i16, i16* %87, i64 %89
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  %93 = and i32 %92, 2048
  %94 = icmp ne i32 %93, 0
  br i1 %94, label %134, label %95

95:                                               ; preds = %85
  %96 = load i32, i32* %11, align 4
  %97 = icmp ne i32 %96, 46
  br i1 %97, label %98, label %99

98:                                               ; preds = %95
  store i32 -18, i32* %3, align 4
  br label %608

99:                                               ; preds = %95
  %100 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %101 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %100, i32 0, i32 0
  %102 = load i8*, i8** %101, align 8
  %103 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %104 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %103, i32 0, i32 1
  %105 = load i8*, i8** %104, align 8
  %106 = icmp ult i8* %102, %105
  br i1 %106, label %107, label %114

107:                                              ; preds = %99
  %108 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %109 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %108, i32 0, i32 0
  %110 = load i8*, i8** %109, align 8
  %111 = getelementptr inbounds i8, i8* %110, i32 1
  store i8* %111, i8** %109, align 8
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i32
  br label %121

114:                                              ; preds = %99
  %115 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %116 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %115, i32 0, i32 7
  %117 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %116, i32 0, i32 0
  %118 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %117, align 8
  %119 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %120 = call i32 %118(%struct.stream_s* %119)
  br label %121

121:                                              ; preds = %114, %107
  %122 = phi i32 [ %113, %107 ], [ %120, %114 ]
  store i32 %122, i32* %11, align 4
  %123 = call i16** @__ctype_b_loc() #13
  %124 = load i16*, i16** %123, align 8
  %125 = load i32, i32* %11, align 4
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds i16, i16* %124, i64 %126
  %128 = load i16, i16* %127, align 2
  %129 = zext i16 %128 to i32
  %130 = and i32 %129, 2048
  %131 = icmp ne i32 %130, 0
  br i1 %131, label %133, label %132

132:                                              ; preds = %121
  store i32 -18, i32* %3, align 4
  br label %608

133:                                              ; preds = %121
  store i64 0, i64* %7, align 8
  br label %323

134:                                              ; preds = %85
  %135 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %136 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %135, i32 0, i32 0
  %137 = load i8*, i8** %136, align 8
  %138 = getelementptr inbounds i8, i8* %137, i32 -1
  store i8* %138, i8** %136, align 8
  %139 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %140 = call i32 @scan_int(%struct.stream_s* %139, i32 10, i64* %7, double* %8)
  store i32 %140, i32* %10, align 4
  %141 = icmp ne i32 %140, 0
  br i1 %141, label %142, label %212

142:                                              ; preds = %134
  %143 = load i32, i32* %10, align 4
  %144 = icmp slt i32 %143, 0
  br i1 %144, label %145, label %147

145:                                              ; preds = %142
  %146 = load i32, i32* %10, align 4
  store i32 %146, i32* %3, align 4
  br label %608

147:                                              ; preds = %142
  %148 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %149 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %148, i32 0, i32 0
  %150 = load i8*, i8** %149, align 8
  %151 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %152 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %151, i32 0, i32 1
  %153 = load i8*, i8** %152, align 8
  %154 = icmp ult i8* %150, %153
  br i1 %154, label %155, label %162

155:                                              ; preds = %147
  %156 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %157 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %156, i32 0, i32 0
  %158 = load i8*, i8** %157, align 8
  %159 = getelementptr inbounds i8, i8* %158, i32 1
  store i8* %159, i8** %157, align 8
  %160 = load i8, i8* %159, align 1
  %161 = zext i8 %160 to i32
  br label %169

162:                                              ; preds = %147
  %163 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %164 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %163, i32 0, i32 7
  %165 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %164, i32 0, i32 0
  %166 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %165, align 8
  %167 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %168 = call i32 %166(%struct.stream_s* %167)
  br label %169

169:                                              ; preds = %162, %155
  %170 = phi i32 [ %161, %155 ], [ %168, %162 ]
  store i32 %170, i32* %11, align 4
  switch i32 %170, label %171 [
    i32 46, label %172
    i32 -1, label %196
  ]

171:                                              ; preds = %169
  store i32 -18, i32* %3, align 4
  br label %608

172:                                              ; preds = %169
  %173 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %174 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %173, i32 0, i32 0
  %175 = load i8*, i8** %174, align 8
  %176 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %177 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %176, i32 0, i32 1
  %178 = load i8*, i8** %177, align 8
  %179 = icmp ult i8* %175, %178
  br i1 %179, label %180, label %187

180:                                              ; preds = %172
  %181 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %182 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %181, i32 0, i32 0
  %183 = load i8*, i8** %182, align 8
  %184 = getelementptr inbounds i8, i8* %183, i32 1
  store i8* %184, i8** %182, align 8
  %185 = load i8, i8* %184, align 1
  %186 = zext i8 %185 to i32
  br label %194

187:                                              ; preds = %172
  %188 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %189 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %188, i32 0, i32 7
  %190 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %189, i32 0, i32 0
  %191 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %190, align 8
  %192 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %193 = call i32 %191(%struct.stream_s* %192)
  br label %194

194:                                              ; preds = %187, %180
  %195 = phi i32 [ %186, %180 ], [ %193, %187 ]
  store i32 %195, i32* %11, align 4
  br label %404

196:                                              ; preds = %169
  %197 = load i32, i32* %6, align 4
  %198 = icmp slt i32 %197, 0
  br i1 %198, label %199, label %202

199:                                              ; preds = %196
  %200 = load double, double* %8, align 8
  %201 = fneg double %200
  br label %204

202:                                              ; preds = %196
  %203 = load double, double* %8, align 8
  br label %204

204:                                              ; preds = %202, %199
  %205 = phi double [ %201, %199 ], [ %203, %202 ]
  %206 = fptrunc double %205 to float
  %207 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %208 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %207, i32 0, i32 0
  %209 = bitcast %union.color_sample* %208 to float*
  store float %206, float* %209, align 8
  %210 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %211 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %210, i32 0, i32 1
  store i16 44, i16* %211, align 8
  store i32 0, i32* %3, align 4
  br label %608

212:                                              ; preds = %134
  %213 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %214 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %213, i32 0, i32 0
  %215 = load i8*, i8** %214, align 8
  %216 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %217 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %216, i32 0, i32 1
  %218 = load i8*, i8** %217, align 8
  %219 = icmp ult i8* %215, %218
  br i1 %219, label %220, label %227

220:                                              ; preds = %212
  %221 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %222 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %221, i32 0, i32 0
  %223 = load i8*, i8** %222, align 8
  %224 = getelementptr inbounds i8, i8* %223, i32 1
  store i8* %224, i8** %222, align 8
  %225 = load i8, i8* %224, align 1
  %226 = zext i8 %225 to i32
  br label %234

227:                                              ; preds = %212
  %228 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %229 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %228, i32 0, i32 7
  %230 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %229, i32 0, i32 0
  %231 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %230, align 8
  %232 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %233 = call i32 %231(%struct.stream_s* %232)
  br label %234

234:                                              ; preds = %227, %220
  %235 = phi i32 [ %226, %220 ], [ %233, %227 ]
  store i32 %235, i32* %11, align 4
  switch i32 %235, label %236 [
    i32 46, label %237
    i32 35, label %261
    i32 -1, label %307
  ]

236:                                              ; preds = %234
  store i32 -18, i32* %3, align 4
  br label %608

237:                                              ; preds = %234
  %238 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %239 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %238, i32 0, i32 0
  %240 = load i8*, i8** %239, align 8
  %241 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %242 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %241, i32 0, i32 1
  %243 = load i8*, i8** %242, align 8
  %244 = icmp ult i8* %240, %243
  br i1 %244, label %245, label %252

245:                                              ; preds = %237
  %246 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %247 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %246, i32 0, i32 0
  %248 = load i8*, i8** %247, align 8
  %249 = getelementptr inbounds i8, i8* %248, i32 1
  store i8* %249, i8** %247, align 8
  %250 = load i8, i8* %249, align 1
  %251 = zext i8 %250 to i32
  br label %259

252:                                              ; preds = %237
  %253 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %254 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %253, i32 0, i32 7
  %255 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %254, i32 0, i32 0
  %256 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %255, align 8
  %257 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %258 = call i32 %256(%struct.stream_s* %257)
  br label %259

259:                                              ; preds = %252, %245
  %260 = phi i32 [ %251, %245 ], [ %258, %252 ]
  store i32 %260, i32* %11, align 4
  br label %323

261:                                              ; preds = %234
  %262 = load i32, i32* %6, align 4
  %263 = icmp ne i32 %262, 0
  br i1 %263, label %270, label %264

264:                                              ; preds = %261
  %265 = load i64, i64* %7, align 8
  %266 = icmp slt i64 %265, 2
  br i1 %266, label %270, label %267

267:                                              ; preds = %264
  %268 = load i64, i64* %7, align 8
  %269 = icmp sgt i64 %268, 36
  br i1 %269, label %270, label %271

270:                                              ; preds = %267, %264, %261
  store i32 -18, i32* %3, align 4
  br label %608

271:                                              ; preds = %267
  %272 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %273 = load i64, i64* %7, align 8
  %274 = trunc i64 %273 to i32
  %275 = call i32 @scan_int(%struct.stream_s* %272, i32 %274, i64* %7, double* null)
  store i32 %275, i32* %10, align 4
  %276 = load i32, i32* %10, align 4
  %277 = icmp ne i32 %276, 0
  br i1 %277, label %278, label %280

278:                                              ; preds = %271
  %279 = load i32, i32* %10, align 4
  store i32 %279, i32* %3, align 4
  br label %608

280:                                              ; preds = %271
  %281 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %282 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %281, i32 0, i32 0
  %283 = load i8*, i8** %282, align 8
  %284 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %285 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %284, i32 0, i32 1
  %286 = load i8*, i8** %285, align 8
  %287 = icmp ult i8* %283, %286
  br i1 %287, label %288, label %295

288:                                              ; preds = %280
  %289 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %290 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %289, i32 0, i32 0
  %291 = load i8*, i8** %290, align 8
  %292 = getelementptr inbounds i8, i8* %291, i32 1
  store i8* %292, i8** %290, align 8
  %293 = load i8, i8* %292, align 1
  %294 = zext i8 %293 to i32
  br label %302

295:                                              ; preds = %280
  %296 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %297 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %296, i32 0, i32 7
  %298 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %297, i32 0, i32 0
  %299 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %298, align 8
  %300 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %301 = call i32 %299(%struct.stream_s* %300)
  br label %302

302:                                              ; preds = %295, %288
  %303 = phi i32 [ %294, %288 ], [ %301, %295 ]
  %304 = icmp ne i32 %303, -1
  br i1 %304, label %305, label %306

305:                                              ; preds = %302
  store i32 -18, i32* %3, align 4
  br label %608

306:                                              ; preds = %302
  br label %307

307:                                              ; preds = %306, %234
  br label %308

308:                                              ; preds = %307
  %309 = load i32, i32* %6, align 4
  %310 = icmp slt i32 %309, 0
  br i1 %310, label %311, label %314

311:                                              ; preds = %308
  %312 = load i64, i64* %7, align 8
  %313 = sub nsw i64 0, %312
  br label %316

314:                                              ; preds = %308
  %315 = load i64, i64* %7, align 8
  br label %316

316:                                              ; preds = %314, %311
  %317 = phi i64 [ %313, %311 ], [ %315, %314 ]
  %318 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %319 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %318, i32 0, i32 0
  %320 = bitcast %union.color_sample* %319 to i64*
  store i64 %317, i64* %320, align 8
  %321 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %322 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %321, i32 0, i32 1
  store i16 20, i16* %322, align 8
  store i32 0, i32* %3, align 4
  br label %608

323:                                              ; preds = %259, %133
  br label %324

324:                                              ; preds = %368, %323
  %325 = call i16** @__ctype_b_loc() #13
  %326 = load i16*, i16** %325, align 8
  %327 = load i32, i32* %11, align 4
  %328 = sext i32 %327 to i64
  %329 = getelementptr inbounds i16, i16* %326, i64 %328
  %330 = load i16, i16* %329, align 2
  %331 = zext i16 %330 to i32
  %332 = and i32 %331, 2048
  %333 = icmp ne i32 %332, 0
  br i1 %333, label %334, label %372

334:                                              ; preds = %324
  %335 = load i64, i64* %7, align 8
  %336 = icmp uge i64 %335, 922337203685477579
  br i1 %336, label %337, label %340

337:                                              ; preds = %334
  %338 = load i64, i64* %7, align 8
  %339 = sitofp i64 %338 to double
  store double %339, double* %8, align 8
  br label %404

340:                                              ; preds = %334
  %341 = load i64, i64* %7, align 8
  %342 = mul nsw i64 %341, 10
  %343 = load i32, i32* %11, align 4
  %344 = sub nsw i32 %343, 48
  %345 = sext i32 %344 to i64
  %346 = add nsw i64 %342, %345
  store i64 %346, i64* %7, align 8
  %347 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %348 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %347, i32 0, i32 0
  %349 = load i8*, i8** %348, align 8
  %350 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %351 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %350, i32 0, i32 1
  %352 = load i8*, i8** %351, align 8
  %353 = icmp ult i8* %349, %352
  br i1 %353, label %354, label %361

354:                                              ; preds = %340
  %355 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %356 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %355, i32 0, i32 0
  %357 = load i8*, i8** %356, align 8
  %358 = getelementptr inbounds i8, i8* %357, i32 1
  store i8* %358, i8** %356, align 8
  %359 = load i8, i8* %358, align 1
  %360 = zext i8 %359 to i32
  br label %368

361:                                              ; preds = %340
  %362 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %363 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %362, i32 0, i32 7
  %364 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %363, i32 0, i32 0
  %365 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %364, align 8
  %366 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %367 = call i32 %365(%struct.stream_s* %366)
  br label %368

368:                                              ; preds = %361, %354
  %369 = phi i32 [ %360, %354 ], [ %367, %361 ]
  store i32 %369, i32* %11, align 4
  %370 = load i32, i32* %9, align 4
  %371 = add nsw i32 %370, -1
  store i32 %371, i32* %9, align 4
  br label %324

372:                                              ; preds = %324
  %373 = load i32, i32* %6, align 4
  %374 = icmp slt i32 %373, 0
  br i1 %374, label %375, label %378

375:                                              ; preds = %372
  %376 = load i64, i64* %7, align 8
  %377 = sub nsw i64 0, %376
  store i64 %377, i64* %7, align 8
  br label %378

378:                                              ; preds = %375, %372
  %379 = load i32, i32* %11, align 4
  %380 = icmp eq i32 %379, 101
  br i1 %380, label %401, label %381

381:                                              ; preds = %378
  %382 = load i32, i32* %11, align 4
  %383 = icmp eq i32 %382, 69
  br i1 %383, label %401, label %384

384:                                              ; preds = %381
  %385 = load i32, i32* %9, align 4
  %386 = icmp slt i32 %385, -6
  br i1 %386, label %401, label %387

387:                                              ; preds = %384
  %388 = load i64, i64* %7, align 8
  %389 = sitofp i64 %388 to float
  %390 = load i32, i32* %9, align 4
  %391 = sub nsw i32 0, %390
  %392 = sext i32 %391 to i64
  %393 = getelementptr inbounds [7 x float], [7 x float]* @scan_number.powers_10, i64 0, i64 %392
  %394 = load float, float* %393, align 4
  %395 = fdiv float %389, %394
  %396 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %397 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %396, i32 0, i32 0
  %398 = bitcast %union.color_sample* %397 to float*
  store float %395, float* %398, align 8
  %399 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %400 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %399, i32 0, i32 1
  store i16 44, i16* %400, align 8
  store i32 0, i32* %3, align 4
  br label %608

401:                                              ; preds = %384, %381, %378
  %402 = load i64, i64* %7, align 8
  %403 = sitofp i64 %402 to double
  store double %403, double* %8, align 8
  br label %454

404:                                              ; preds = %337, %194
  br label %405

405:                                              ; preds = %443, %404
  %406 = call i16** @__ctype_b_loc() #13
  %407 = load i16*, i16** %406, align 8
  %408 = load i32, i32* %11, align 4
  %409 = sext i32 %408 to i64
  %410 = getelementptr inbounds i16, i16* %407, i64 %409
  %411 = load i16, i16* %410, align 2
  %412 = zext i16 %411 to i32
  %413 = and i32 %412, 2048
  %414 = icmp ne i32 %413, 0
  br i1 %414, label %415, label %447

415:                                              ; preds = %405
  %416 = load double, double* %8, align 8
  %417 = fmul double %416, 1.000000e+01
  %418 = load i32, i32* %11, align 4
  %419 = sub nsw i32 %418, 48
  %420 = sitofp i32 %419 to double
  %421 = fadd double %417, %420
  store double %421, double* %8, align 8
  %422 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %423 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %422, i32 0, i32 0
  %424 = load i8*, i8** %423, align 8
  %425 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %426 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %425, i32 0, i32 1
  %427 = load i8*, i8** %426, align 8
  %428 = icmp ult i8* %424, %427
  br i1 %428, label %429, label %436

429:                                              ; preds = %415
  %430 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %431 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %430, i32 0, i32 0
  %432 = load i8*, i8** %431, align 8
  %433 = getelementptr inbounds i8, i8* %432, i32 1
  store i8* %433, i8** %431, align 8
  %434 = load i8, i8* %433, align 1
  %435 = zext i8 %434 to i32
  br label %443

436:                                              ; preds = %415
  %437 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %438 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %437, i32 0, i32 7
  %439 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %438, i32 0, i32 0
  %440 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %439, align 8
  %441 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %442 = call i32 %440(%struct.stream_s* %441)
  br label %443

443:                                              ; preds = %436, %429
  %444 = phi i32 [ %435, %429 ], [ %442, %436 ]
  store i32 %444, i32* %11, align 4
  %445 = load i32, i32* %9, align 4
  %446 = add nsw i32 %445, -1
  store i32 %446, i32* %9, align 4
  br label %405

447:                                              ; preds = %405
  %448 = load i32, i32* %6, align 4
  %449 = icmp slt i32 %448, 0
  br i1 %449, label %450, label %453

450:                                              ; preds = %447
  %451 = load double, double* %8, align 8
  %452 = fneg double %451
  store double %452, double* %8, align 8
  br label %453

453:                                              ; preds = %450, %447
  br label %454

454:                                              ; preds = %453, %401
  %455 = load i32, i32* %11, align 4
  %456 = icmp eq i32 %455, 101
  br i1 %456, label %460, label %457

457:                                              ; preds = %454
  %458 = load i32, i32* %11, align 4
  %459 = icmp eq i32 %458, 69
  br i1 %459, label %460, label %542

460:                                              ; preds = %457, %454
  store i32 0, i32* %12, align 4
  %461 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %462 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %461, i32 0, i32 0
  %463 = load i8*, i8** %462, align 8
  %464 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %465 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %464, i32 0, i32 1
  %466 = load i8*, i8** %465, align 8
  %467 = icmp ult i8* %463, %466
  br i1 %467, label %468, label %475

468:                                              ; preds = %460
  %469 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %470 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %469, i32 0, i32 0
  %471 = load i8*, i8** %470, align 8
  %472 = getelementptr inbounds i8, i8* %471, i32 1
  store i8* %472, i8** %470, align 8
  %473 = load i8, i8* %472, align 1
  %474 = zext i8 %473 to i32
  br label %482

475:                                              ; preds = %460
  %476 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %477 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %476, i32 0, i32 7
  %478 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %477, i32 0, i32 0
  %479 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %478, align 8
  %480 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %481 = call i32 %479(%struct.stream_s* %480)
  br label %482

482:                                              ; preds = %475, %468
  %483 = phi i32 [ %474, %468 ], [ %481, %475 ]
  store i32 %483, i32* %11, align 4
  switch i32 %483, label %486 [
    i32 43, label %484
    i32 45, label %485
  ]

484:                                              ; preds = %482
  br label %491

485:                                              ; preds = %482
  store i32 1, i32* %12, align 4
  br label %491

486:                                              ; preds = %482
  %487 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %488 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %487, i32 0, i32 0
  %489 = load i8*, i8** %488, align 8
  %490 = getelementptr inbounds i8, i8* %489, i32 -1
  store i8* %490, i8** %488, align 8
  br label %491

491:                                              ; preds = %486, %485, %484
  %492 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %493 = call i32 @scan_int(%struct.stream_s* %492, i32 10, i64* %13, double* null)
  store i32 %493, i32* %10, align 4
  %494 = load i32, i32* %10, align 4
  %495 = icmp slt i32 %494, 0
  br i1 %495, label %496, label %498

496:                                              ; preds = %491
  %497 = load i32, i32* %10, align 4
  store i32 %497, i32* %3, align 4
  br label %608

498:                                              ; preds = %491
  %499 = load i32, i32* %10, align 4
  %500 = icmp sgt i32 %499, 0
  br i1 %500, label %504, label %501

501:                                              ; preds = %498
  %502 = load i64, i64* %13, align 8
  %503 = icmp sgt i64 %502, 999
  br i1 %503, label %504, label %505

504:                                              ; preds = %501, %498
  store i32 -13, i32* %3, align 4
  br label %608

505:                                              ; preds = %501
  %506 = load i32, i32* %12, align 4
  %507 = icmp ne i32 %506, 0
  br i1 %507, label %508, label %513

508:                                              ; preds = %505
  %509 = load i64, i64* %13, align 8
  %510 = trunc i64 %509 to i32
  %511 = load i32, i32* %9, align 4
  %512 = sub nsw i32 %511, %510
  store i32 %512, i32* %9, align 4
  br label %518

513:                                              ; preds = %505
  %514 = load i64, i64* %13, align 8
  %515 = trunc i64 %514 to i32
  %516 = load i32, i32* %9, align 4
  %517 = add nsw i32 %516, %515
  store i32 %517, i32* %9, align 4
  br label %518

518:                                              ; preds = %513, %508
  %519 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %520 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %519, i32 0, i32 0
  %521 = load i8*, i8** %520, align 8
  %522 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %523 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %522, i32 0, i32 1
  %524 = load i8*, i8** %523, align 8
  %525 = icmp ult i8* %521, %524
  br i1 %525, label %526, label %533

526:                                              ; preds = %518
  %527 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %528 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %527, i32 0, i32 0
  %529 = load i8*, i8** %528, align 8
  %530 = getelementptr inbounds i8, i8* %529, i32 1
  store i8* %530, i8** %528, align 8
  %531 = load i8, i8* %530, align 1
  %532 = zext i8 %531 to i32
  br label %540

533:                                              ; preds = %518
  %534 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %535 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %534, i32 0, i32 7
  %536 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %535, i32 0, i32 0
  %537 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %536, align 8
  %538 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %539 = call i32 %537(%struct.stream_s* %538)
  br label %540

540:                                              ; preds = %533, %526
  %541 = phi i32 [ %532, %526 ], [ %539, %533 ]
  store i32 %541, i32* %11, align 4
  br label %542

542:                                              ; preds = %540, %457
  %543 = load i32, i32* %11, align 4
  %544 = icmp ne i32 %543, -1
  br i1 %544, label %545, label %546

545:                                              ; preds = %542
  store i32 -18, i32* %3, align 4
  br label %608

546:                                              ; preds = %542
  %547 = load i32, i32* %9, align 4
  %548 = icmp sgt i32 %547, 0
  br i1 %548, label %549, label %572

549:                                              ; preds = %546
  br label %550

550:                                              ; preds = %553, %549
  %551 = load i32, i32* %9, align 4
  %552 = icmp sgt i32 %551, 6
  br i1 %552, label %553, label %560

553:                                              ; preds = %550
  %554 = load float, float* getelementptr inbounds ([7 x float], [7 x float]* @scan_number.powers_10, i64 0, i64 6), align 8
  %555 = fpext float %554 to double
  %556 = load double, double* %8, align 8
  %557 = fmul double %556, %555
  store double %557, double* %8, align 8
  %558 = load i32, i32* %9, align 4
  %559 = sub nsw i32 %558, 6
  store i32 %559, i32* %9, align 4
  br label %550

560:                                              ; preds = %550
  %561 = load i32, i32* %9, align 4
  %562 = icmp sgt i32 %561, 0
  br i1 %562, label %563, label %571

563:                                              ; preds = %560
  %564 = load i32, i32* %9, align 4
  %565 = sext i32 %564 to i64
  %566 = getelementptr inbounds [7 x float], [7 x float]* @scan_number.powers_10, i64 0, i64 %565
  %567 = load float, float* %566, align 4
  %568 = fpext float %567 to double
  %569 = load double, double* %8, align 8
  %570 = fmul double %569, %568
  store double %570, double* %8, align 8
  br label %571

571:                                              ; preds = %563, %560
  br label %600

572:                                              ; preds = %546
  %573 = load i32, i32* %9, align 4
  %574 = icmp slt i32 %573, 0
  br i1 %574, label %575, label %599

575:                                              ; preds = %572
  br label %576

576:                                              ; preds = %579, %575
  %577 = load i32, i32* %9, align 4
  %578 = icmp slt i32 %577, -6
  br i1 %578, label %579, label %586

579:                                              ; preds = %576
  %580 = load float, float* getelementptr inbounds ([7 x float], [7 x float]* @scan_number.powers_10, i64 0, i64 6), align 8
  %581 = fpext float %580 to double
  %582 = load double, double* %8, align 8
  %583 = fdiv double %582, %581
  store double %583, double* %8, align 8
  %584 = load i32, i32* %9, align 4
  %585 = add nsw i32 %584, 6
  store i32 %585, i32* %9, align 4
  br label %576

586:                                              ; preds = %576
  %587 = load i32, i32* %9, align 4
  %588 = icmp slt i32 %587, 0
  br i1 %588, label %589, label %598

589:                                              ; preds = %586
  %590 = load i32, i32* %9, align 4
  %591 = sub nsw i32 0, %590
  %592 = sext i32 %591 to i64
  %593 = getelementptr inbounds [7 x float], [7 x float]* @scan_number.powers_10, i64 0, i64 %592
  %594 = load float, float* %593, align 4
  %595 = fpext float %594 to double
  %596 = load double, double* %8, align 8
  %597 = fdiv double %596, %595
  store double %597, double* %8, align 8
  br label %598

598:                                              ; preds = %589, %586
  br label %599

599:                                              ; preds = %598, %572
  br label %600

600:                                              ; preds = %599, %571
  %601 = load double, double* %8, align 8
  %602 = fptrunc double %601 to float
  %603 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %604 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %603, i32 0, i32 0
  %605 = bitcast %union.color_sample* %604 to float*
  store float %602, float* %605, align 8
  %606 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %607 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %606, i32 0, i32 1
  store i16 44, i16* %607, align 8
  store i32 0, i32* %3, align 4
  br label %608

608:                                              ; preds = %600, %545, %504, %496, %387, %316, %305, %278, %270, %236, %204, %171, %145, %132, %98
  %609 = load i32, i32* %3, align 4
  ret i32 %609
}

; Function Attrs: nounwind readnone
declare dso_local i16** @__ctype_b_loc() #7

; Function Attrs: noinline nounwind uwtable
define internal i32 @scan_int(%struct.stream_s* %0, i32 %1, i64* %2, double* %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.stream_s*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i64*, align 8
  %9 = alloca double*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca double, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i8*, align 8
  store %struct.stream_s* %0, %struct.stream_s** %6, align 8
  store i32 %1, i32* %7, align 4
  store i64* %2, i64** %8, align 8
  store double* %3, double** %9, align 8
  store i32 0, i32* %10, align 4
  store i8* getelementptr inbounds ([257 x i8], [257 x i8]* @scan_char_array, i64 0, i64 1), i8** %16, align 8
  %17 = load i32, i32* %7, align 4
  %18 = icmp eq i32 %17, 10
  br i1 %18, label %19, label %20

19:                                               ; preds = %4
  store i32 214748364, i32* %11, align 4
  store i32 7, i32* %12, align 4
  br label %25

20:                                               ; preds = %4
  %21 = load i32, i32* %7, align 4
  %22 = udiv i32 2147483647, %21
  store i32 %22, i32* %11, align 4
  %23 = load i32, i32* %7, align 4
  %24 = urem i32 2147483647, %23
  store i32 %24, i32* %12, align 4
  br label %25

25:                                               ; preds = %20, %19
  br label %26

26:                                               ; preds = %83, %25
  %27 = load %struct.stream_s*, %struct.stream_s** %6, align 8
  %28 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %27, i32 0, i32 0
  %29 = load i8*, i8** %28, align 8
  %30 = load %struct.stream_s*, %struct.stream_s** %6, align 8
  %31 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %30, i32 0, i32 1
  %32 = load i8*, i8** %31, align 8
  %33 = icmp ult i8* %29, %32
  br i1 %33, label %34, label %41

34:                                               ; preds = %26
  %35 = load %struct.stream_s*, %struct.stream_s** %6, align 8
  %36 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %35, i32 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds i8, i8* %37, i32 1
  store i8* %38, i8** %36, align 8
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  br label %48

41:                                               ; preds = %26
  %42 = load %struct.stream_s*, %struct.stream_s** %6, align 8
  %43 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %42, i32 0, i32 7
  %44 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %43, i32 0, i32 0
  %45 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %44, align 8
  %46 = load %struct.stream_s*, %struct.stream_s** %6, align 8
  %47 = call i32 %45(%struct.stream_s* %46)
  br label %48

48:                                               ; preds = %41, %34
  %49 = phi i32 [ %40, %34 ], [ %47, %41 ]
  store i32 %49, i32* %14, align 4
  %50 = load i8*, i8** %16, align 8
  %51 = load i32, i32* %14, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i8, i8* %50, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  store i32 %55, i32* %15, align 4
  %56 = load i32, i32* %7, align 4
  %57 = icmp sge i32 %55, %56
  br i1 %57, label %58, label %70

58:                                               ; preds = %48
  %59 = load i32, i32* %14, align 4
  %60 = icmp ne i32 %59, -1
  br i1 %60, label %61, label %66

61:                                               ; preds = %58
  %62 = load %struct.stream_s*, %struct.stream_s** %6, align 8
  %63 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %62, i32 0, i32 0
  %64 = load i8*, i8** %63, align 8
  %65 = getelementptr inbounds i8, i8* %64, i32 -1
  store i8* %65, i8** %63, align 8
  br label %66

66:                                               ; preds = %61, %58
  %67 = load i32, i32* %10, align 4
  %68 = sext i32 %67 to i64
  %69 = load i64*, i64** %8, align 8
  store i64 %68, i64* %69, align 8
  store i32 0, i32* %5, align 4
  br label %153

70:                                               ; preds = %48
  %71 = load i32, i32* %10, align 4
  %72 = load i32, i32* %11, align 4
  %73 = icmp sge i32 %71, %72
  br i1 %73, label %74, label %83

74:                                               ; preds = %70
  %75 = load i32, i32* %10, align 4
  %76 = load i32, i32* %11, align 4
  %77 = icmp sgt i32 %75, %76
  br i1 %77, label %82, label %78

78:                                               ; preds = %74
  %79 = load i32, i32* %15, align 4
  %80 = load i32, i32* %12, align 4
  %81 = icmp sgt i32 %79, %80
  br i1 %81, label %82, label %83

82:                                               ; preds = %78, %74
  br label %89

83:                                               ; preds = %78, %70
  %84 = load i32, i32* %10, align 4
  %85 = load i32, i32* %7, align 4
  %86 = mul nsw i32 %84, %85
  %87 = load i32, i32* %15, align 4
  %88 = add nsw i32 %86, %87
  store i32 %88, i32* %10, align 4
  br label %26

89:                                               ; preds = %82
  %90 = load double*, double** %9, align 8
  %91 = icmp eq double* %90, null
  br i1 %91, label %92, label %93

92:                                               ; preds = %89
  store i32 -13, i32* %5, align 4
  br label %153

93:                                               ; preds = %89
  %94 = load i32, i32* %10, align 4
  %95 = sitofp i32 %94 to double
  %96 = load i32, i32* %7, align 4
  %97 = sitofp i32 %96 to double
  %98 = fmul double %95, %97
  %99 = load i32, i32* %15, align 4
  %100 = sitofp i32 %99 to double
  %101 = fadd double %98, %100
  store double %101, double* %13, align 8
  br label %102

102:                                              ; preds = %145, %93
  %103 = load %struct.stream_s*, %struct.stream_s** %6, align 8
  %104 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %103, i32 0, i32 0
  %105 = load i8*, i8** %104, align 8
  %106 = load %struct.stream_s*, %struct.stream_s** %6, align 8
  %107 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %106, i32 0, i32 1
  %108 = load i8*, i8** %107, align 8
  %109 = icmp ult i8* %105, %108
  br i1 %109, label %110, label %117

110:                                              ; preds = %102
  %111 = load %struct.stream_s*, %struct.stream_s** %6, align 8
  %112 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %111, i32 0, i32 0
  %113 = load i8*, i8** %112, align 8
  %114 = getelementptr inbounds i8, i8* %113, i32 1
  store i8* %114, i8** %112, align 8
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i32
  br label %124

117:                                              ; preds = %102
  %118 = load %struct.stream_s*, %struct.stream_s** %6, align 8
  %119 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %118, i32 0, i32 7
  %120 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %119, i32 0, i32 0
  %121 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %120, align 8
  %122 = load %struct.stream_s*, %struct.stream_s** %6, align 8
  %123 = call i32 %121(%struct.stream_s* %122)
  br label %124

124:                                              ; preds = %117, %110
  %125 = phi i32 [ %116, %110 ], [ %123, %117 ]
  store i32 %125, i32* %14, align 4
  %126 = load i8*, i8** %16, align 8
  %127 = load i32, i32* %14, align 4
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds i8, i8* %126, i64 %128
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i32
  store i32 %131, i32* %15, align 4
  %132 = load i32, i32* %7, align 4
  %133 = icmp sge i32 %131, %132
  br i1 %133, label %134, label %145

134:                                              ; preds = %124
  %135 = load i32, i32* %14, align 4
  %136 = icmp ne i32 %135, -1
  br i1 %136, label %137, label %142

137:                                              ; preds = %134
  %138 = load %struct.stream_s*, %struct.stream_s** %6, align 8
  %139 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %138, i32 0, i32 0
  %140 = load i8*, i8** %139, align 8
  %141 = getelementptr inbounds i8, i8* %140, i32 -1
  store i8* %141, i8** %139, align 8
  br label %142

142:                                              ; preds = %137, %134
  %143 = load double, double* %13, align 8
  %144 = load double*, double** %9, align 8
  store double %143, double* %144, align 8
  store i32 1, i32* %5, align 4
  br label %153

145:                                              ; preds = %124
  %146 = load double, double* %13, align 8
  %147 = load i32, i32* %7, align 4
  %148 = sitofp i32 %147 to double
  %149 = fmul double %146, %148
  %150 = load i32, i32* %15, align 4
  %151 = sitofp i32 %150 to double
  %152 = fadd double %149, %151
  store double %152, double* %13, align 8
  br label %102

153:                                              ; preds = %142, %92, %66
  %154 = load i32, i32* %5, align 4
  ret i32 %154
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @mk_string(%struct.ref_s* %0, %struct.dynamic_area_s* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca %struct.dynamic_area_s*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %4, align 8
  store %struct.dynamic_area_s* %1, %struct.dynamic_area_s** %5, align 8
  %8 = load %struct.dynamic_area_s*, %struct.dynamic_area_s** %5, align 8
  %9 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %8, i32 0, i32 1
  %10 = load i8*, i8** %9, align 8
  %11 = load %struct.dynamic_area_s*, %struct.dynamic_area_s** %5, align 8
  %12 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %11, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = ptrtoint i8* %10 to i64
  %15 = ptrtoint i8* %13 to i64
  %16 = sub i64 %14, %15
  %17 = trunc i64 %16 to i32
  store i32 %17, i32* %6, align 4
  %18 = load %struct.dynamic_area_s*, %struct.dynamic_area_s** %5, align 8
  %19 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %18, i32 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = load %struct.dynamic_area_s*, %struct.dynamic_area_s** %5, align 8
  %22 = getelementptr inbounds %struct.dynamic_area_s, %struct.dynamic_area_s* %21, i32 0, i32 2
  %23 = load i32, i32* %22, align 8
  %24 = load i32, i32* %6, align 4
  %25 = call i8* @alloc_shrink(i8* %20, i32 %23, i32 %24, i32 1, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.310, i64 0, i64 0))
  store i8* %25, i8** %7, align 8
  %26 = load i8*, i8** %7, align 8
  %27 = icmp eq i8* %26, null
  br i1 %27, label %28, label %29

28:                                               ; preds = %2
  store i32 -25, i32* %3, align 4
  br label %40

29:                                               ; preds = %2
  %30 = load i8*, i8** %7, align 8
  %31 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %32 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %31, i32 0, i32 0
  %33 = bitcast %union.color_sample* %32 to i8**
  store i8* %30, i8** %33, align 8
  %34 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %35 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %34, i32 0, i32 1
  store i16 822, i16* %35, align 8
  %36 = load i32, i32* %6, align 4
  %37 = trunc i32 %36 to i16
  %38 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %39 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %38, i32 0, i32 2
  store i16 %37, i16* %39, align 2
  store i32 0, i32* %3, align 4
  br label %40

40:                                               ; preds = %29, %28
  %41 = load i32, i32* %3, align 4
  ret i32 %41
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @refcpy(%struct.ref_s* %0, %struct.ref_s* %1, i32 %2) #0 {
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca %struct.ref_s*, align 8
  %6 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %4, align 8
  store %struct.ref_s* %1, %struct.ref_s** %5, align 8
  store i32 %2, i32* %6, align 4
  br label %7

7:                                                ; preds = %11, %3
  %8 = load i32, i32* %6, align 4
  %9 = add i32 %8, -1
  store i32 %9, i32* %6, align 4
  %10 = icmp ne i32 %8, 0
  br i1 %10, label %11, label %18

11:                                               ; preds = %7
  %12 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %13 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %12, i32 1
  store %struct.ref_s* %13, %struct.ref_s** %4, align 8
  %14 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 1
  store %struct.ref_s* %15, %struct.ref_s** %5, align 8
  %16 = bitcast %struct.ref_s* %12 to i8*
  %17 = bitcast %struct.ref_s* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %17, i64 16, i1 false)
  br label %7

18:                                               ; preds = %7
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @obj_eq(%struct.ref_s* %0, %struct.ref_s* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca %struct.ref_s*, align 8
  %6 = alloca %struct.ref_s, align 8
  %7 = alloca %struct.gs_color_s*, align 8
  %8 = alloca %struct.gs_color_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %4, align 8
  store %struct.ref_s* %1, %struct.ref_s** %5, align 8
  %9 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i32 0, i32 1
  %11 = load i16, i16* %10, align 8
  %12 = zext i16 %11 to i32
  %13 = and i32 %12, 255
  %14 = ashr i32 %13, 2
  %15 = icmp sge i32 %14, 16
  br i1 %15, label %16, label %17

16:                                               ; preds = %2
  br label %24

17:                                               ; preds = %2
  %18 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i32 0, i32 1
  %20 = load i16, i16* %19, align 8
  %21 = zext i16 %20 to i32
  %22 = and i32 %21, 255
  %23 = ashr i32 %22, 2
  br label %24

24:                                               ; preds = %17, %16
  %25 = phi i32 [ 9, %16 ], [ %23, %17 ]
  %26 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %27 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %26, i32 0, i32 1
  %28 = load i16, i16* %27, align 8
  %29 = zext i16 %28 to i32
  %30 = and i32 %29, 255
  %31 = ashr i32 %30, 2
  %32 = icmp sge i32 %31, 16
  br i1 %32, label %33, label %34

33:                                               ; preds = %24
  br label %41

34:                                               ; preds = %24
  %35 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %36 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %35, i32 0, i32 1
  %37 = load i16, i16* %36, align 8
  %38 = zext i16 %37 to i32
  %39 = and i32 %38, 255
  %40 = ashr i32 %39, 2
  br label %41

41:                                               ; preds = %34, %33
  %42 = phi i32 [ 9, %33 ], [ %40, %34 ]
  %43 = icmp ne i32 %25, %42
  br i1 %43, label %44, label %121

44:                                               ; preds = %41
  %45 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %46 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %45, i32 0, i32 1
  %47 = load i16, i16* %46, align 8
  %48 = zext i16 %47 to i32
  %49 = and i32 %48, 255
  %50 = ashr i32 %49, 2
  switch i32 %50, label %119 [
    i32 5, label %51
    i32 11, label %73
    i32 7, label %95
    i32 13, label %107
  ]

51:                                               ; preds = %44
  %52 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %53 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %52, i32 0, i32 1
  %54 = load i16, i16* %53, align 8
  %55 = zext i16 %54 to i32
  %56 = and i32 %55, 255
  %57 = ashr i32 %56, 2
  %58 = icmp eq i32 %57, 11
  br i1 %58, label %59, label %70

59:                                               ; preds = %51
  %60 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %61 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %60, i32 0, i32 0
  %62 = bitcast %union.color_sample* %61 to float*
  %63 = load float, float* %62, align 8
  %64 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %65 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %64, i32 0, i32 0
  %66 = bitcast %union.color_sample* %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = sitofp i64 %67 to float
  %69 = fcmp oeq float %63, %68
  br label %70

70:                                               ; preds = %59, %51
  %71 = phi i1 [ false, %51 ], [ %69, %59 ]
  %72 = zext i1 %71 to i32
  store i32 %72, i32* %3, align 4
  br label %340

73:                                               ; preds = %44
  %74 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %75 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %74, i32 0, i32 1
  %76 = load i16, i16* %75, align 8
  %77 = zext i16 %76 to i32
  %78 = and i32 %77, 255
  %79 = ashr i32 %78, 2
  %80 = icmp eq i32 %79, 5
  br i1 %80, label %81, label %92

81:                                               ; preds = %73
  %82 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %83 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %82, i32 0, i32 0
  %84 = bitcast %union.color_sample* %83 to i64*
  %85 = load i64, i64* %84, align 8
  %86 = sitofp i64 %85 to float
  %87 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %88 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %87, i32 0, i32 0
  %89 = bitcast %union.color_sample* %88 to float*
  %90 = load float, float* %89, align 8
  %91 = fcmp oeq float %86, %90
  br label %92

92:                                               ; preds = %81, %73
  %93 = phi i1 [ false, %73 ], [ %91, %81 ]
  %94 = zext i1 %93 to i32
  store i32 %94, i32* %3, align 4
  br label %340

95:                                               ; preds = %44
  %96 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %97 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %96, i32 0, i32 1
  %98 = load i16, i16* %97, align 8
  %99 = zext i16 %98 to i32
  %100 = and i32 %99, 255
  %101 = ashr i32 %100, 2
  %102 = icmp ne i32 %101, 13
  br i1 %102, label %103, label %104

103:                                              ; preds = %95
  store i32 0, i32* %3, align 4
  br label %340

104:                                              ; preds = %95
  %105 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %106 = call %struct.ref_s* bitcast (void (%struct.ref_s*, %struct.ref_s*)* @name_string_ref to %struct.ref_s* (%struct.ref_s*, %struct.ref_s*)*)(%struct.ref_s* %105, %struct.ref_s* %6)
  store %struct.ref_s* %6, %struct.ref_s** %4, align 8
  br label %120

107:                                              ; preds = %44
  %108 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %109 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %108, i32 0, i32 1
  %110 = load i16, i16* %109, align 8
  %111 = zext i16 %110 to i32
  %112 = and i32 %111, 255
  %113 = ashr i32 %112, 2
  %114 = icmp ne i32 %113, 7
  br i1 %114, label %115, label %116

115:                                              ; preds = %107
  store i32 0, i32* %3, align 4
  br label %340

116:                                              ; preds = %107
  %117 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %118 = call %struct.ref_s* bitcast (void (%struct.ref_s*, %struct.ref_s*)* @name_string_ref to %struct.ref_s* (%struct.ref_s*, %struct.ref_s*)*)(%struct.ref_s* %117, %struct.ref_s* %6)
  store %struct.ref_s* %6, %struct.ref_s** %5, align 8
  br label %120

119:                                              ; preds = %44
  store i32 0, i32* %3, align 4
  br label %340

120:                                              ; preds = %116, %104
  br label %121

121:                                              ; preds = %120, %41
  %122 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %123 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %122, i32 0, i32 1
  %124 = load i16, i16* %123, align 8
  %125 = zext i16 %124 to i32
  %126 = and i32 %125, 255
  %127 = ashr i32 %126, 2
  %128 = icmp sge i32 %127, 16
  br i1 %128, label %129, label %130

129:                                              ; preds = %121
  br label %137

130:                                              ; preds = %121
  %131 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %132 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %131, i32 0, i32 1
  %133 = load i16, i16* %132, align 8
  %134 = zext i16 %133 to i32
  %135 = and i32 %134, 255
  %136 = ashr i32 %135, 2
  br label %137

137:                                              ; preds = %130, %129
  %138 = phi i32 [ 9, %129 ], [ %136, %130 ]
  switch i32 %138, label %339 [
    i32 0, label %139
    i32 10, label %139
    i32 1, label %162
    i32 2, label %175
    i32 3, label %186
    i32 4, label %197
    i32 5, label %208
    i32 6, label %219
    i32 8, label %219
    i32 7, label %220
    i32 9, label %231
    i32 11, label %244
    i32 12, label %255
    i32 13, label %266
    i32 14, label %287
    i32 15, label %328
  ]

139:                                              ; preds = %137, %137
  %140 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %141 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %140, i32 0, i32 0
  %142 = bitcast %union.color_sample* %141 to %struct.ref_s**
  %143 = load %struct.ref_s*, %struct.ref_s** %142, align 8
  %144 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %145 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %144, i32 0, i32 0
  %146 = bitcast %union.color_sample* %145 to %struct.ref_s**
  %147 = load %struct.ref_s*, %struct.ref_s** %146, align 8
  %148 = icmp eq %struct.ref_s* %143, %147
  br i1 %148, label %149, label %159

149:                                              ; preds = %139
  %150 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %151 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %150, i32 0, i32 2
  %152 = load i16, i16* %151, align 2
  %153 = zext i16 %152 to i32
  %154 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %155 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %154, i32 0, i32 2
  %156 = load i16, i16* %155, align 2
  %157 = zext i16 %156 to i32
  %158 = icmp eq i32 %153, %157
  br label %159

159:                                              ; preds = %149, %139
  %160 = phi i1 [ false, %139 ], [ %158, %149 ]
  %161 = zext i1 %160 to i32
  store i32 %161, i32* %3, align 4
  br label %340

162:                                              ; preds = %137
  %163 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %164 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %163, i32 0, i32 0
  %165 = bitcast %union.color_sample* %164 to i16*
  %166 = load i16, i16* %165, align 8
  %167 = zext i16 %166 to i32
  %168 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %169 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %168, i32 0, i32 0
  %170 = bitcast %union.color_sample* %169 to i16*
  %171 = load i16, i16* %170, align 8
  %172 = zext i16 %171 to i32
  %173 = icmp eq i32 %167, %172
  %174 = zext i1 %173 to i32
  store i32 %174, i32* %3, align 4
  br label %340

175:                                              ; preds = %137
  %176 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %177 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %176, i32 0, i32 0
  %178 = bitcast %union.color_sample* %177 to %struct.dict_s**
  %179 = load %struct.dict_s*, %struct.dict_s** %178, align 8
  %180 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %181 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %180, i32 0, i32 0
  %182 = bitcast %union.color_sample* %181 to %struct.dict_s**
  %183 = load %struct.dict_s*, %struct.dict_s** %182, align 8
  %184 = icmp eq %struct.dict_s* %179, %183
  %185 = zext i1 %184 to i32
  store i32 %185, i32* %3, align 4
  br label %340

186:                                              ; preds = %137
  %187 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %188 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %187, i32 0, i32 0
  %189 = bitcast %union.color_sample* %188 to %struct.file_entry_s**
  %190 = load %struct.file_entry_s*, %struct.file_entry_s** %189, align 8
  %191 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %192 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %191, i32 0, i32 0
  %193 = bitcast %union.color_sample* %192 to %struct.file_entry_s**
  %194 = load %struct.file_entry_s*, %struct.file_entry_s** %193, align 8
  %195 = icmp eq %struct.file_entry_s* %190, %194
  %196 = zext i1 %195 to i32
  store i32 %196, i32* %3, align 4
  br label %340

197:                                              ; preds = %137
  %198 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %199 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %198, i32 0, i32 0
  %200 = bitcast %union.color_sample* %199 to %struct.gs_font_s**
  %201 = load %struct.gs_font_s*, %struct.gs_font_s** %200, align 8
  %202 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %203 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %202, i32 0, i32 0
  %204 = bitcast %union.color_sample* %203 to %struct.gs_font_s**
  %205 = load %struct.gs_font_s*, %struct.gs_font_s** %204, align 8
  %206 = icmp eq %struct.gs_font_s* %201, %205
  %207 = zext i1 %206 to i32
  store i32 %207, i32* %3, align 4
  br label %340

208:                                              ; preds = %137
  %209 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %210 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %209, i32 0, i32 0
  %211 = bitcast %union.color_sample* %210 to i64*
  %212 = load i64, i64* %211, align 8
  %213 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %214 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %213, i32 0, i32 0
  %215 = bitcast %union.color_sample* %214 to i64*
  %216 = load i64, i64* %215, align 8
  %217 = icmp eq i64 %212, %216
  %218 = zext i1 %217 to i32
  store i32 %218, i32* %3, align 4
  br label %340

219:                                              ; preds = %137, %137
  store i32 1, i32* %3, align 4
  br label %340

220:                                              ; preds = %137
  %221 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %222 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %221, i32 0, i32 0
  %223 = bitcast %union.color_sample* %222 to %struct.name_s**
  %224 = load %struct.name_s*, %struct.name_s** %223, align 8
  %225 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %226 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %225, i32 0, i32 0
  %227 = bitcast %union.color_sample* %226 to %struct.name_s**
  %228 = load %struct.name_s*, %struct.name_s** %227, align 8
  %229 = icmp eq %struct.name_s* %224, %228
  %230 = zext i1 %229 to i32
  store i32 %230, i32* %3, align 4
  br label %340

231:                                              ; preds = %137
  %232 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %233 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %232, i32 0, i32 0
  %234 = bitcast %union.color_sample* %233 to i32 (%struct.ref_s*)**
  %235 = load i32 (%struct.ref_s*)*, i32 (%struct.ref_s*)** %234, align 8
  %236 = ptrtoint i32 (%struct.ref_s*)* %235 to i64
  %237 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %238 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %237, i32 0, i32 0
  %239 = bitcast %union.color_sample* %238 to i32 (%struct.ref_s*)**
  %240 = load i32 (%struct.ref_s*)*, i32 (%struct.ref_s*)** %239, align 8
  %241 = ptrtoint i32 (%struct.ref_s*)* %240 to i64
  %242 = icmp eq i64 %236, %241
  %243 = zext i1 %242 to i32
  store i32 %243, i32* %3, align 4
  br label %340

244:                                              ; preds = %137
  %245 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %246 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %245, i32 0, i32 0
  %247 = bitcast %union.color_sample* %246 to float*
  %248 = load float, float* %247, align 8
  %249 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %250 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %249, i32 0, i32 0
  %251 = bitcast %union.color_sample* %250 to float*
  %252 = load float, float* %251, align 8
  %253 = fcmp oeq float %248, %252
  %254 = zext i1 %253 to i32
  store i32 %254, i32* %3, align 4
  br label %340

255:                                              ; preds = %137
  %256 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %257 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %256, i32 0, i32 0
  %258 = bitcast %union.color_sample* %257 to %struct.vm_save_s**
  %259 = load %struct.vm_save_s*, %struct.vm_save_s** %258, align 8
  %260 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %261 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %260, i32 0, i32 0
  %262 = bitcast %union.color_sample* %261 to %struct.vm_save_s**
  %263 = load %struct.vm_save_s*, %struct.vm_save_s** %262, align 8
  %264 = icmp eq %struct.vm_save_s* %259, %263
  %265 = zext i1 %264 to i32
  store i32 %265, i32* %3, align 4
  br label %340

266:                                              ; preds = %137
  %267 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %268 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %267, i32 0, i32 0
  %269 = bitcast %union.color_sample* %268 to i8**
  %270 = load i8*, i8** %269, align 8
  %271 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %272 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %271, i32 0, i32 2
  %273 = load i16, i16* %272, align 2
  %274 = zext i16 %273 to i32
  %275 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %276 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %275, i32 0, i32 0
  %277 = bitcast %union.color_sample* %276 to i8**
  %278 = load i8*, i8** %277, align 8
  %279 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %280 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %279, i32 0, i32 2
  %281 = load i16, i16* %280, align 2
  %282 = zext i16 %281 to i32
  %283 = call i32 @bytes_compare(i8* %270, i32 %274, i8* %278, i32 %282)
  %284 = icmp ne i32 %283, 0
  %285 = xor i1 %284, true
  %286 = zext i1 %285 to i32
  store i32 %286, i32* %3, align 4
  br label %340

287:                                              ; preds = %137
  %288 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %289 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %288, i32 0, i32 0
  %290 = bitcast %union.color_sample* %289 to %struct.gs_color_s**
  %291 = load %struct.gs_color_s*, %struct.gs_color_s** %290, align 8
  store %struct.gs_color_s* %291, %struct.gs_color_s** %7, align 8
  %292 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %293 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %292, i32 0, i32 0
  %294 = bitcast %union.color_sample* %293 to %struct.gs_color_s**
  %295 = load %struct.gs_color_s*, %struct.gs_color_s** %294, align 8
  store %struct.gs_color_s* %295, %struct.gs_color_s** %8, align 8
  %296 = load %struct.gs_color_s*, %struct.gs_color_s** %7, align 8
  %297 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %296, i32 0, i32 0
  %298 = load i16, i16* %297, align 2
  %299 = zext i16 %298 to i32
  %300 = load %struct.gs_color_s*, %struct.gs_color_s** %8, align 8
  %301 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %300, i32 0, i32 0
  %302 = load i16, i16* %301, align 2
  %303 = zext i16 %302 to i32
  %304 = icmp eq i32 %299, %303
  br i1 %304, label %305, label %325

305:                                              ; preds = %287
  %306 = load %struct.gs_color_s*, %struct.gs_color_s** %7, align 8
  %307 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %306, i32 0, i32 1
  %308 = load i16, i16* %307, align 2
  %309 = zext i16 %308 to i32
  %310 = load %struct.gs_color_s*, %struct.gs_color_s** %8, align 8
  %311 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %310, i32 0, i32 1
  %312 = load i16, i16* %311, align 2
  %313 = zext i16 %312 to i32
  %314 = icmp eq i32 %309, %313
  br i1 %314, label %315, label %325

315:                                              ; preds = %305
  %316 = load %struct.gs_color_s*, %struct.gs_color_s** %7, align 8
  %317 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %316, i32 0, i32 2
  %318 = load i16, i16* %317, align 2
  %319 = zext i16 %318 to i32
  %320 = load %struct.gs_color_s*, %struct.gs_color_s** %8, align 8
  %321 = getelementptr inbounds %struct.gs_color_s, %struct.gs_color_s* %320, i32 0, i32 2
  %322 = load i16, i16* %321, align 2
  %323 = zext i16 %322 to i32
  %324 = icmp eq i32 %319, %323
  br label %325

325:                                              ; preds = %315, %305, %287
  %326 = phi i1 [ false, %305 ], [ false, %287 ], [ %324, %315 ]
  %327 = zext i1 %326 to i32
  store i32 %327, i32* %3, align 4
  br label %340

328:                                              ; preds = %137
  %329 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %330 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %329, i32 0, i32 0
  %331 = bitcast %union.color_sample* %330 to %struct.gx_device_s**
  %332 = load %struct.gx_device_s*, %struct.gx_device_s** %331, align 8
  %333 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %334 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %333, i32 0, i32 0
  %335 = bitcast %union.color_sample* %334 to %struct.gx_device_s**
  %336 = load %struct.gx_device_s*, %struct.gx_device_s** %335, align 8
  %337 = icmp eq %struct.gx_device_s* %332, %336
  %338 = zext i1 %337 to i32
  store i32 %338, i32* %3, align 4
  br label %340

339:                                              ; preds = %137
  store i32 0, i32* %3, align 4
  br label %340

340:                                              ; preds = %339, %328, %325, %266, %255, %244, %231, %220, %219, %208, %197, %186, %175, %162, %159, %119, %115, %103, %92, %70
  %341 = load i32, i32* %3, align 4
  ret i32 %341
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @bytes_compare(i8* %0, i32 %1, i8* %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  store i8* %0, i8** %6, align 8
  store i32 %1, i32* %7, align 4
  store i8* %2, i8** %8, align 8
  store i32 %3, i32* %9, align 4
  %13 = load i32, i32* %7, align 4
  store i32 %13, i32* %10, align 4
  %14 = load i32, i32* %9, align 4
  %15 = load i32, i32* %10, align 4
  %16 = icmp ult i32 %14, %15
  br i1 %16, label %17, label %19

17:                                               ; preds = %4
  %18 = load i32, i32* %9, align 4
  store i32 %18, i32* %10, align 4
  br label %19

19:                                               ; preds = %17, %4
  %20 = load i8*, i8** %6, align 8
  store i8* %20, i8** %11, align 8
  %21 = load i8*, i8** %8, align 8
  store i8* %21, i8** %12, align 8
  br label %22

22:                                               ; preds = %48, %19
  %23 = load i32, i32* %10, align 4
  %24 = add i32 %23, -1
  store i32 %24, i32* %10, align 4
  %25 = icmp ne i32 %23, 0
  br i1 %25, label %26, label %49

26:                                               ; preds = %22
  %27 = load i8*, i8** %11, align 8
  %28 = getelementptr inbounds i8, i8* %27, i32 1
  store i8* %28, i8** %11, align 8
  %29 = load i8, i8* %27, align 1
  %30 = zext i8 %29 to i32
  %31 = load i8*, i8** %12, align 8
  %32 = getelementptr inbounds i8, i8* %31, i32 1
  store i8* %32, i8** %12, align 8
  %33 = load i8, i8* %31, align 1
  %34 = zext i8 %33 to i32
  %35 = icmp ne i32 %30, %34
  br i1 %35, label %36, label %48

36:                                               ; preds = %26
  %37 = load i8*, i8** %11, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 -1
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i32
  %41 = load i8*, i8** %12, align 8
  %42 = getelementptr inbounds i8, i8* %41, i64 -1
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = icmp slt i32 %40, %44
  %46 = zext i1 %45 to i64
  %47 = select i1 %45, i32 -1, i32 1
  store i32 %47, i32* %5, align 4
  br label %62

48:                                               ; preds = %26
  br label %22

49:                                               ; preds = %22
  %50 = load i32, i32* %7, align 4
  %51 = load i32, i32* %9, align 4
  %52 = icmp eq i32 %50, %51
  br i1 %52, label %53, label %54

53:                                               ; preds = %49
  br label %60

54:                                               ; preds = %49
  %55 = load i32, i32* %7, align 4
  %56 = load i32, i32* %9, align 4
  %57 = icmp ult i32 %55, %56
  %58 = zext i1 %57 to i64
  %59 = select i1 %57, i32 -1, i32 1
  br label %60

60:                                               ; preds = %54, %53
  %61 = phi i32 [ 0, %53 ], [ %59, %54 ]
  store i32 %61, i32* %5, align 4
  br label %62

62:                                               ; preds = %60, %36
  %63 = load i32, i32* %5, align 4
  ret i32 %63
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @string_hash(i8* %0, i32 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  store i32 %1, i32* %4, align 4
  %8 = load i8*, i8** %3, align 8
  store i8* %8, i8** %5, align 8
  store i32 0, i32* %6, align 4
  %9 = load i32, i32* %4, align 4
  store i32 %9, i32* %7, align 4
  br label %10

10:                                               ; preds = %14, %2
  %11 = load i32, i32* %7, align 4
  %12 = add i32 %11, -1
  store i32 %12, i32* %7, align 4
  %13 = icmp ne i32 %11, 0
  br i1 %13, label %14, label %22

14:                                               ; preds = %10
  %15 = load i32, i32* %6, align 4
  %16 = mul i32 %15, 19
  %17 = load i8*, i8** %5, align 8
  %18 = getelementptr inbounds i8, i8* %17, i32 1
  store i8* %18, i8** %5, align 8
  %19 = load i8, i8* %17, align 1
  %20 = zext i8 %19 to i32
  %21 = add i32 %16, %20
  store i32 %21, i32* %6, align 4
  br label %10

22:                                               ; preds = %10
  %23 = load i32, i32* %6, align 4
  ret i32 %23
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @string_to_ref(i8* %0, %struct.ref_s* %1, i8* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca %struct.ref_s*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  store i8* %0, i8** %5, align 8
  store %struct.ref_s* %1, %struct.ref_s** %6, align 8
  store i8* %2, i8** %7, align 8
  %10 = load i8*, i8** %5, align 8
  %11 = call i64 @strlen(i8* %10) #11
  %12 = trunc i64 %11 to i32
  store i32 %12, i32* %8, align 4
  %13 = load i32, i32* %8, align 4
  %14 = load i8*, i8** %7, align 8
  %15 = call i8* @alloc(i32 %13, i32 1, i8* %14)
  store i8* %15, i8** %9, align 8
  %16 = load i8*, i8** %9, align 8
  %17 = icmp eq i8* %16, null
  br i1 %17, label %18, label %19

18:                                               ; preds = %3
  store i32 -25, i32* %4, align 4
  br label %34

19:                                               ; preds = %3
  %20 = load i8*, i8** %9, align 8
  %21 = load i8*, i8** %5, align 8
  %22 = load i32, i32* %8, align 4
  %23 = zext i32 %22 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %20, i8* align 1 %21, i64 %23, i1 false)
  %24 = load i8*, i8** %9, align 8
  %25 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %26 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %25, i32 0, i32 0
  %27 = bitcast %union.color_sample* %26 to i8**
  store i8* %24, i8** %27, align 8
  %28 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i32 0, i32 1
  store i16 822, i16* %29, align 8
  %30 = load i32, i32* %8, align 4
  %31 = trunc i32 %30 to i16
  %32 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %33 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %32, i32 0, i32 2
  store i16 %31, i16* %33, align 2
  store i32 0, i32* %4, align 4
  br label %34

34:                                               ; preds = %19, %18
  %35 = load i32, i32* %4, align 4
  ret i32 %35
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @ref_to_string(%struct.ref_s* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %4, align 8
  store i8* %1, i8** %5, align 8
  %8 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 2
  %10 = load i16, i16* %9, align 2
  %11 = zext i16 %10 to i32
  store i32 %11, i32* %6, align 4
  %12 = load i32, i32* %6, align 4
  %13 = add i32 %12, 1
  %14 = load i8*, i8** %5, align 8
  %15 = call i8* @alloc(i32 %13, i32 1, i8* %14)
  store i8* %15, i8** %7, align 8
  %16 = load i8*, i8** %7, align 8
  %17 = icmp eq i8* %16, null
  br i1 %17, label %18, label %19

18:                                               ; preds = %2
  store i8* null, i8** %3, align 8
  br label %32

19:                                               ; preds = %2
  %20 = load i8*, i8** %7, align 8
  %21 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i32 0, i32 0
  %23 = bitcast %union.color_sample* %22 to i8**
  %24 = load i8*, i8** %23, align 8
  %25 = load i32, i32* %6, align 4
  %26 = zext i32 %25 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %20, i8* align 1 %24, i64 %26, i1 false)
  %27 = load i8*, i8** %7, align 8
  %28 = load i32, i32* %6, align 4
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %27, i64 %29
  store i8 0, i8* %30, align 1
  %31 = load i8*, i8** %7, align 8
  store i8* %31, i8** %3, align 8
  br label %32

32:                                               ; preds = %19, %18
  %33 = load i8*, i8** %3, align 8
  ret i8* %33
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @num_params(%struct.ref_s* %0, i32 %1, float* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.ref_s*, align 8
  %6 = alloca i32, align 4
  %7 = alloca float*, align 8
  %8 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %5, align 8
  store i32 %1, i32* %6, align 4
  store float* %2, float** %7, align 8
  store i32 0, i32* %8, align 4
  br label %9

9:                                                ; preds = %52, %3
  %10 = load i32, i32* %6, align 4
  %11 = add nsw i32 %10, -1
  store i32 %11, i32* %6, align 4
  %12 = icmp sge i32 %11, 0
  br i1 %12, label %13, label %55

13:                                               ; preds = %9
  %14 = load i32, i32* %8, align 4
  %15 = shl i32 %14, 1
  store i32 %15, i32* %8, align 4
  %16 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %16, i32 0, i32 1
  %18 = load i16, i16* %17, align 8
  %19 = zext i16 %18 to i32
  %20 = and i32 %19, 255
  %21 = ashr i32 %20, 2
  switch i32 %21, label %51 [
    i32 11, label %22
    i32 5, label %35
  ]

22:                                               ; preds = %13
  %23 = load float*, float** %7, align 8
  %24 = icmp ne float* %23, null
  br i1 %24, label %25, label %34

25:                                               ; preds = %22
  %26 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %27 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %26, i32 0, i32 0
  %28 = bitcast %union.color_sample* %27 to float*
  %29 = load float, float* %28, align 8
  %30 = load float*, float** %7, align 8
  %31 = load i32, i32* %6, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds float, float* %30, i64 %32
  store float %29, float* %33, align 4
  br label %34

34:                                               ; preds = %25, %22
  br label %52

35:                                               ; preds = %13
  %36 = load float*, float** %7, align 8
  %37 = icmp ne float* %36, null
  br i1 %37, label %38, label %48

38:                                               ; preds = %35
  %39 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %40 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %39, i32 0, i32 0
  %41 = bitcast %union.color_sample* %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = sitofp i64 %42 to float
  %44 = load float*, float** %7, align 8
  %45 = load i32, i32* %6, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds float, float* %44, i64 %46
  store float %43, float* %47, align 4
  br label %48

48:                                               ; preds = %38, %35
  %49 = load i32, i32* %8, align 4
  %50 = add nsw i32 %49, 1
  store i32 %50, i32* %8, align 4
  br label %52

51:                                               ; preds = %13
  store i32 -20, i32* %4, align 4
  br label %57

52:                                               ; preds = %48, %34
  %53 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %54 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %53, i32 -1
  store %struct.ref_s* %54, %struct.ref_s** %5, align 8
  br label %9

55:                                               ; preds = %9
  %56 = load i32, i32* %8, align 4
  store i32 %56, i32* %4, align 4
  br label %57

57:                                               ; preds = %55, %51
  %58 = load i32, i32* %4, align 4
  ret i32 %58
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @real_param(%struct.ref_s* %0, float* %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.ref_s*, align 8
  %6 = alloca float*, align 8
  %7 = alloca i32, align 4
  %8 = alloca float, align 4
  store %struct.ref_s* %0, %struct.ref_s** %5, align 8
  store float* %1, float** %6, align 8
  store i32 %2, i32* %7, align 4
  %9 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i32 0, i32 1
  %11 = load i16, i16* %10, align 8
  %12 = zext i16 %11 to i32
  %13 = and i32 %12, 255
  %14 = ashr i32 %13, 2
  switch i32 %14, label %26 [
    i32 5, label %15
    i32 11, label %21
  ]

15:                                               ; preds = %3
  %16 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %16, i32 0, i32 0
  %18 = bitcast %union.color_sample* %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sitofp i64 %19 to float
  store float %20, float* %8, align 4
  br label %27

21:                                               ; preds = %3
  %22 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i32 0, i32 0
  %24 = bitcast %union.color_sample* %23 to float*
  %25 = load float, float* %24, align 8
  store float %25, float* %8, align 4
  br label %27

26:                                               ; preds = %3
  store i32 -20, i32* %4, align 4
  br label %55

27:                                               ; preds = %21, %15
  %28 = load i32, i32* %7, align 4
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %30, label %52

30:                                               ; preds = %27
  %31 = load float, float* %8, align 4
  %32 = fpext float %31 to double
  %33 = fcmp olt double %32, 0.000000e+00
  br i1 %33, label %34, label %40

34:                                               ; preds = %30
  %35 = load float, float* %8, align 4
  %36 = fpext float %35 to double
  %37 = fcmp olt double %36, -1.000000e-05
  br i1 %37, label %38, label %39

38:                                               ; preds = %34
  store i32 -15, i32* %4, align 4
  br label %55

39:                                               ; preds = %34
  store float 0.000000e+00, float* %8, align 4
  br label %51

40:                                               ; preds = %30
  %41 = load float, float* %8, align 4
  %42 = fpext float %41 to double
  %43 = fcmp ogt double %42, 1.000000e+00
  br i1 %43, label %44, label %50

44:                                               ; preds = %40
  %45 = load float, float* %8, align 4
  %46 = fpext float %45 to double
  %47 = fcmp ogt double %46, 1.000010e+00
  br i1 %47, label %48, label %49

48:                                               ; preds = %44
  store i32 -15, i32* %4, align 4
  br label %55

49:                                               ; preds = %44
  store float 1.000000e+00, float* %8, align 4
  br label %50

50:                                               ; preds = %49, %40
  br label %51

51:                                               ; preds = %50, %39
  br label %52

52:                                               ; preds = %51, %27
  %53 = load float, float* %8, align 4
  %54 = load float*, float** %6, align 8
  store float %53, float* %54, align 4
  store i32 0, i32* %4, align 4
  br label %55

55:                                               ; preds = %52, %48, %38, %26
  %56 = load i32, i32* %4, align 4
  ret i32 %56
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @read_matrix(%struct.ref_s* %0, %struct.gs_matrix_s* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca %struct.gs_matrix_s*, align 8
  %6 = alloca %struct.ref_s*, align 8
  %7 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %4, align 8
  store %struct.gs_matrix_s* %1, %struct.gs_matrix_s** %5, align 8
  %8 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 1
  %10 = load i16, i16* %9, align 8
  %11 = zext i16 %10 to i32
  %12 = and i32 %11, 255
  %13 = ashr i32 %12, 2
  switch i32 %13, label %14 [
    i32 0, label %15
    i32 10, label %15
  ]

14:                                               ; preds = %2
  store i32 -20, i32* %3, align 4
  br label %72

15:                                               ; preds = %2, %2
  br label %16

16:                                               ; preds = %15
  %17 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i32 0, i32 2
  %19 = load i16, i16* %18, align 2
  %20 = zext i16 %19 to i32
  %21 = icmp ne i32 %20, 6
  br i1 %21, label %22, label %23

22:                                               ; preds = %16
  store i32 -15, i32* %3, align 4
  br label %72

23:                                               ; preds = %16
  %24 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %25 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %24, i32 0, i32 1
  %26 = load i16, i16* %25, align 8
  %27 = zext i16 %26 to i32
  %28 = and i32 %27, 512
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %31, label %30

30:                                               ; preds = %23
  store i32 -7, i32* %3, align 4
  br label %72

31:                                               ; preds = %23
  %32 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %5, align 8
  %33 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %34 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %33, i32 0, i32 0
  %35 = bitcast %union.color_sample* %34 to %struct.ref_s**
  %36 = load %struct.ref_s*, %struct.ref_s** %35, align 8
  %37 = bitcast %struct.ref_s* %36 to %struct.gs_matrix_s*
  %38 = bitcast %struct.gs_matrix_s* %32 to i8*
  %39 = bitcast %struct.gs_matrix_s* %37 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %38, i8* align 8 %39, i64 96, i1 false)
  %40 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %5, align 8
  %41 = bitcast %struct.gs_matrix_s* %40 to %struct.ref_s*
  store %struct.ref_s* %41, %struct.ref_s** %6, align 8
  store i32 0, i32* %7, align 4
  br label %42

42:                                               ; preds = %68, %31
  %43 = load i32, i32* %7, align 4
  %44 = icmp slt i32 %43, 6
  br i1 %44, label %45, label %71

45:                                               ; preds = %42
  %46 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %47 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %46, i32 0, i32 1
  %48 = load i16, i16* %47, align 8
  %49 = zext i16 %48 to i32
  %50 = and i32 %49, 255
  %51 = ashr i32 %50, 2
  switch i32 %51, label %52 [
    i32 5, label %53
    i32 11, label %64
  ]

52:                                               ; preds = %45
  store i32 -20, i32* %3, align 4
  br label %72

53:                                               ; preds = %45
  %54 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %55 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %54, i32 0, i32 0
  %56 = bitcast %union.color_sample* %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = sitofp i64 %57 to float
  %59 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %60 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %59, i32 0, i32 0
  %61 = bitcast %union.color_sample* %60 to float*
  store float %58, float* %61, align 8
  %62 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %63 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %62, i32 0, i32 1
  store i16 44, i16* %63, align 8
  br label %64

64:                                               ; preds = %53, %45
  br label %65

65:                                               ; preds = %64
  %66 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %67 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %66, i32 1
  store %struct.ref_s* %67, %struct.ref_s** %6, align 8
  br label %68

68:                                               ; preds = %65
  %69 = load i32, i32* %7, align 4
  %70 = add nsw i32 %69, 1
  store i32 %70, i32* %7, align 4
  br label %42

71:                                               ; preds = %42
  store i32 0, i32* %3, align 4
  br label %72

72:                                               ; preds = %71, %52, %30, %22, %14
  %73 = load i32, i32* %3, align 4
  ret i32 %73
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @write_matrix(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = zext i16 %8 to i32
  %10 = and i32 %9, 255
  %11 = ashr i32 %10, 2
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %58

14:                                               ; preds = %1
  %15 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %16 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %15, i32 0, i32 2
  %17 = load i16, i16* %16, align 2
  %18 = zext i16 %17 to i32
  %19 = icmp ne i32 %18, 6
  br i1 %19, label %20, label %21

20:                                               ; preds = %14
  store i32 -15, i32* %2, align 4
  br label %58

21:                                               ; preds = %14
  %22 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i32 0, i32 1
  %24 = load i16, i16* %23, align 8
  %25 = zext i16 %24 to i32
  %26 = and i32 %25, 256
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %29, label %28

28:                                               ; preds = %21
  store i32 -7, i32* %2, align 4
  br label %58

29:                                               ; preds = %21
  %30 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %31 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %30, i32 0, i32 0
  %32 = bitcast %union.color_sample* %31 to %struct.ref_s**
  %33 = load %struct.ref_s*, %struct.ref_s** %32, align 8
  store %struct.ref_s* %33, %struct.ref_s** %4, align 8
  store i32 5, i32* %5, align 4
  br label %34

34:                                               ; preds = %52, %29
  %35 = load i32, i32* %5, align 4
  %36 = icmp sge i32 %35, 0
  br i1 %36, label %37, label %57

37:                                               ; preds = %34
  %38 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %39 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %38, i32 0, i32 1
  %40 = load i16, i16* %39, align 8
  %41 = zext i16 %40 to i32
  %42 = and i32 %41, 255
  %43 = ashr i32 %42, 2
  switch i32 %43, label %44 [
    i32 11, label %50
    i32 5, label %50
  ]

44:                                               ; preds = %37
  %45 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %46 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %45, i32 0, i32 0
  %47 = bitcast %union.color_sample* %46 to i64*
  store i64 0, i64* %47, align 8
  %48 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %49 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %48, i32 0, i32 1
  store i16 20, i16* %49, align 8
  br label %50

50:                                               ; preds = %44, %37, %37
  br label %51

51:                                               ; preds = %50
  br label %52

52:                                               ; preds = %51
  %53 = load i32, i32* %5, align 4
  %54 = add nsw i32 %53, -1
  store i32 %54, i32* %5, align 4
  %55 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %56 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %55, i32 1
  store %struct.ref_s* %56, %struct.ref_s** %4, align 8
  br label %34

57:                                               ; preds = %34
  store i32 0, i32* %2, align 4
  br label %58

58:                                               ; preds = %57, %28, %20, %13
  %59 = load i32, i32* %2, align 4
  ret i32 %59
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sread_string(%struct.stream_s* %0, i8* %1, i32 %2) #0 {
  %4 = alloca %struct.stream_s*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  store %struct.stream_s* %0, %struct.stream_s** %4, align 8
  store i8* %1, i8** %5, align 8
  store i32 %2, i32* %6, align 4
  %7 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %8 = load i8*, i8** %5, align 8
  %9 = load i32, i32* %6, align 4
  call void @ssinit(%struct.stream_s* %7, i8* %8, i32 %9, %struct.stream_procs* @sread_string.p)
  %10 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %11 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %10, i32 0, i32 4
  store i8 0, i8* %11, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @ssinit(%struct.stream_s* %0, i8* %1, i32 %2, %struct.stream_procs* %3) #0 {
  %5 = alloca %struct.stream_s*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca %struct.stream_procs*, align 8
  store %struct.stream_s* %0, %struct.stream_s** %5, align 8
  store i8* %1, i8** %6, align 8
  store i32 %2, i32* %7, align 4
  store %struct.stream_procs* %3, %struct.stream_procs** %8, align 8
  %9 = load i8*, i8** %6, align 8
  %10 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %11 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %10, i32 0, i32 2
  store i8* %9, i8** %11, align 8
  %12 = load i8*, i8** %6, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 -1
  %14 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %15 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %14, i32 0, i32 0
  store i8* %13, i8** %15, align 8
  %16 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %17 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %16, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  %19 = load i32, i32* %7, align 4
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %18, i64 %20
  %22 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %23 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %22, i32 0, i32 1
  store i8* %21, i8** %23, align 8
  %24 = load i32, i32* %7, align 4
  %25 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %26 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %25, i32 0, i32 3
  store i32 %24, i32* %26, align 8
  %27 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %28 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %27, i32 0, i32 5
  store i8 1, i8* %28, align 1
  %29 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %30 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %29, i32 0, i32 6
  store i64 0, i64* %30, align 8
  %31 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %32 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %31, i32 0, i32 7
  %33 = load %struct.stream_procs*, %struct.stream_procs** %8, align 8
  %34 = bitcast %struct.stream_procs* %32 to i8*
  %35 = bitcast %struct.stream_procs* %33 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 %35, i64 48, i1 false)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @ssread(%struct.stream_s* %0) #0 {
  %2 = alloca %struct.stream_s*, align 8
  store %struct.stream_s* %0, %struct.stream_s** %2, align 8
  %3 = load %struct.stream_s*, %struct.stream_s** %2, align 8
  %4 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %3, i32 0, i32 1
  %5 = load i8*, i8** %4, align 8
  %6 = load %struct.stream_s*, %struct.stream_s** %2, align 8
  %7 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %6, i32 0, i32 0
  store i8* %5, i8** %7, align 8
  ret i32 -1
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @ssavailable(%struct.stream_s* %0, i64* %1) #0 {
  %3 = alloca %struct.stream_s*, align 8
  %4 = alloca i64*, align 8
  store %struct.stream_s* %0, %struct.stream_s** %3, align 8
  store i64* %1, i64** %4, align 8
  %5 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %6 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %5, i32 0, i32 1
  %7 = load i8*, i8** %6, align 8
  %8 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %9 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %8, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = ptrtoint i8* %7 to i64
  %12 = ptrtoint i8* %10 to i64
  %13 = sub i64 %11, %12
  %14 = load i64*, i64** %4, align 8
  store i64 %13, i64* %14, align 8
  %15 = load i64*, i64** %4, align 8
  %16 = load i64, i64* %15, align 8
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %18, label %20

18:                                               ; preds = %2
  %19 = load i64*, i64** %4, align 8
  store i64 -1, i64* %19, align 8
  br label %20

20:                                               ; preds = %18, %2
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @ssseek(%struct.stream_s* %0, i64 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.stream_s*, align 8
  %5 = alloca i64, align 8
  store %struct.stream_s* %0, %struct.stream_s** %4, align 8
  store i64 %1, i64* %5, align 8
  %6 = load i64, i64* %5, align 8
  %7 = icmp slt i64 %6, 0
  br i1 %7, label %15, label %8

8:                                                ; preds = %2
  %9 = load i64, i64* %5, align 8
  %10 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %11 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %10, i32 0, i32 3
  %12 = load i32, i32* %11, align 8
  %13 = zext i32 %12 to i64
  %14 = icmp sgt i64 %9, %13
  br i1 %14, label %15, label %16

15:                                               ; preds = %8, %2
  store i32 -1, i32* %3, align 4
  br label %25

16:                                               ; preds = %8
  %17 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %18 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %17, i32 0, i32 2
  %19 = load i8*, i8** %18, align 8
  %20 = load i64, i64* %5, align 8
  %21 = getelementptr inbounds i8, i8* %19, i64 %20
  %22 = getelementptr inbounds i8, i8* %21, i64 -1
  %23 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %24 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %23, i32 0, i32 0
  store i8* %22, i8** %24, align 8
  store i32 0, i32* %3, align 4
  br label %25

25:                                               ; preds = %16, %15
  %26 = load i32, i32* %3, align 4
  ret i32 %26
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snull(%struct.stream_s* %0) #0 {
  %2 = alloca %struct.stream_s*, align 8
  store %struct.stream_s* %0, %struct.stream_s** %2, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @swrite_string(%struct.stream_s* %0, i8* %1, i32 %2) #0 {
  %4 = alloca %struct.stream_s*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  store %struct.stream_s* %0, %struct.stream_s** %4, align 8
  store i8* %1, i8** %5, align 8
  store i32 %2, i32* %6, align 4
  %7 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %8 = load i8*, i8** %5, align 8
  %9 = load i32, i32* %6, align 4
  call void @ssinit(%struct.stream_s* %7, i8* %8, i32 %9, %struct.stream_procs* @swrite_string.p)
  %10 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %11 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %10, i32 0, i32 4
  store i8 1, i8* %11, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sswrite(%struct.stream_s* %0, i8 zeroext %1) #0 {
  %3 = alloca %struct.stream_s*, align 8
  %4 = alloca i8, align 1
  store %struct.stream_s* %0, %struct.stream_s** %3, align 8
  store i8 %1, i8* %4, align 1
  %5 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %6 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %5, i32 0, i32 1
  %7 = load i8*, i8** %6, align 8
  %8 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %9 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %8, i32 0, i32 0
  store i8* %7, i8** %9, align 8
  ret i32 -1
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @snoavailable(%struct.stream_s* %0, i64* %1) #0 {
  %3 = alloca %struct.stream_s*, align 8
  %4 = alloca i64*, align 8
  store %struct.stream_s* %0, %struct.stream_s** %3, align 8
  store i64* %1, i64** %4, align 8
  ret i32 -1
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sread_file(%struct.stream_s* %0, %struct._IO_FILE* %1, i8* %2, i32 %3) #0 {
  %5 = alloca %struct.stream_s*, align 8
  %6 = alloca %struct._IO_FILE*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  store %struct.stream_s* %0, %struct.stream_s** %5, align 8
  store %struct._IO_FILE* %1, %struct._IO_FILE** %6, align 8
  store i8* %2, i8** %7, align 8
  store i32 %3, i32* %8, align 4
  %9 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8
  %11 = load i8*, i8** %7, align 8
  %12 = load i32, i32* %8, align 4
  call void @sfinit(%struct.stream_s* %9, %struct._IO_FILE* %10, i8* %11, i32 %12, %struct.stream_procs* @sread_file.p)
  %13 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %14 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %13, i32 0, i32 4
  store i8 0, i8* %14, align 4
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  %17 = icmp eq %struct._IO_FILE* %15, %16
  %18 = zext i1 %17 to i64
  %19 = select i1 %17, i32 -1, i32 0
  %20 = sext i32 %19 to i64
  %21 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %22 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %21, i32 0, i32 6
  store i64 %20, i64* %22, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @sfinit(%struct.stream_s* %0, %struct._IO_FILE* %1, i8* %2, i32 %3, %struct.stream_procs* %4) #0 {
  %6 = alloca %struct.stream_s*, align 8
  %7 = alloca %struct._IO_FILE*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  %10 = alloca %struct.stream_procs*, align 8
  store %struct.stream_s* %0, %struct.stream_s** %6, align 8
  store %struct._IO_FILE* %1, %struct._IO_FILE** %7, align 8
  store i8* %2, i8** %8, align 8
  store i32 %3, i32* %9, align 4
  store %struct.stream_procs* %4, %struct.stream_procs** %10, align 8
  %11 = load i8*, i8** %8, align 8
  %12 = load %struct.stream_s*, %struct.stream_s** %6, align 8
  %13 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %12, i32 0, i32 2
  store i8* %11, i8** %13, align 8
  %14 = load i8*, i8** %8, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 -1
  %16 = load %struct.stream_s*, %struct.stream_s** %6, align 8
  %17 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %16, i32 0, i32 0
  store i8* %15, i8** %17, align 8
  %18 = load i32, i32* %9, align 4
  %19 = load %struct.stream_s*, %struct.stream_s** %6, align 8
  %20 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %19, i32 0, i32 3
  store i32 %18, i32* %20, align 8
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8
  %22 = load %struct.stream_s*, %struct.stream_s** %6, align 8
  %23 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %22, i32 0, i32 9
  store %struct._IO_FILE* %21, %struct._IO_FILE** %23, align 8
  %24 = load %struct.stream_s*, %struct.stream_s** %6, align 8
  %25 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %24, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = load %struct.stream_s*, %struct.stream_s** %6, align 8
  %28 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %27, i32 0, i32 1
  store i8* %26, i8** %28, align 8
  %29 = load %struct.stream_s*, %struct.stream_s** %6, align 8
  %30 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %29, i32 0, i32 5
  store i8 0, i8* %30, align 1
  %31 = load %struct.stream_s*, %struct.stream_s** %6, align 8
  %32 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %31, i32 0, i32 7
  %33 = load %struct.stream_procs*, %struct.stream_procs** %10, align 8
  %34 = bitcast %struct.stream_procs* %32 to i8*
  %35 = bitcast %struct.stream_procs* %33 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 %35, i64 48, i1 false)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sfread(%struct.stream_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.stream_s*, align 8
  %4 = alloca i32, align 4
  store %struct.stream_s* %0, %struct.stream_s** %3, align 8
  %5 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %6 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %5, i32 0, i32 5
  %7 = load i8, i8* %6, align 1
  %8 = icmp ne i8 %7, 0
  br i1 %8, label %9, label %15

9:                                                ; preds = %1
  %10 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %11 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %10, i32 0, i32 1
  %12 = load i8*, i8** %11, align 8
  %13 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %14 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %13, i32 0, i32 0
  store i8* %12, i8** %14, align 8
  store i32 -1, i32* %2, align 4
  br label %87

15:                                               ; preds = %1
  %16 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %17 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %16, i32 0, i32 6
  %18 = load i64, i64* %17, align 8
  %19 = icmp sge i64 %18, 0
  br i1 %19, label %20, label %27

20:                                               ; preds = %15
  %21 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %22 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %21, i32 0, i32 9
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %22, align 8
  %24 = call i64 @ftell(%struct._IO_FILE* %23)
  %25 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %26 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %25, i32 0, i32 6
  store i64 %24, i64* %26, align 8
  br label %27

27:                                               ; preds = %20, %15
  %28 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %29 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %28, i32 0, i32 2
  %30 = load i8*, i8** %29, align 8
  %31 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %32 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %31, i32 0, i32 3
  %33 = load i32, i32* %32, align 8
  %34 = zext i32 %33 to i64
  %35 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %36 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %35, i32 0, i32 9
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** %36, align 8
  %38 = call i64 @fread(i8* %30, i64 1, i64 %34, %struct._IO_FILE* %37)
  %39 = trunc i64 %38 to i32
  store i32 %39, i32* %4, align 4
  %40 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %41 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %40, i32 0, i32 2
  %42 = load i8*, i8** %41, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 -1
  %44 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %45 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %44, i32 0, i32 0
  store i8* %43, i8** %45, align 8
  %46 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %47 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %46, i32 0, i32 9
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** %47, align 8
  %49 = call i32 @feof(%struct._IO_FILE* %48) #9
  %50 = trunc i32 %49 to i8
  %51 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %52 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %51, i32 0, i32 5
  store i8 %50, i8* %52, align 1
  %53 = load i32, i32* %4, align 4
  %54 = icmp sgt i32 %53, 0
  br i1 %54, label %55, label %70

55:                                               ; preds = %27
  %56 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %57 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %56, i32 0, i32 0
  %58 = load i8*, i8** %57, align 8
  %59 = load i32, i32* %4, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds i8, i8* %58, i64 %60
  %62 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %63 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %62, i32 0, i32 1
  store i8* %61, i8** %63, align 8
  %64 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %65 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %64, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  %67 = getelementptr inbounds i8, i8* %66, i32 1
  store i8* %67, i8** %65, align 8
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  store i32 %69, i32* %2, align 4
  br label %87

70:                                               ; preds = %27
  %71 = load i32, i32* %4, align 4
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %81

73:                                               ; preds = %70
  %74 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %75 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %74, i32 0, i32 0
  %76 = load i8*, i8** %75, align 8
  %77 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %78 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %77, i32 0, i32 1
  store i8* %76, i8** %78, align 8
  %79 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %80 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %79, i32 0, i32 5
  store i8 1, i8* %80, align 1
  store i32 -1, i32* %2, align 4
  br label %87

81:                                               ; preds = %70
  %82 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %83 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %82, i32 0, i32 0
  %84 = load i8*, i8** %83, align 8
  %85 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %86 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %85, i32 0, i32 1
  store i8* %84, i8** %86, align 8
  store i32 0, i32* %2, align 4
  br label %87

87:                                               ; preds = %81, %73, %55, %9
  %88 = load i32, i32* %2, align 4
  ret i32 %88
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sfavailable(%struct.stream_s* %0, i64* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.stream_s*, align 8
  %5 = alloca i64*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store %struct.stream_s* %0, %struct.stream_s** %4, align 8
  store i64* %1, i64** %5, align 8
  %8 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %9 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %8, i32 0, i32 1
  %10 = load i8*, i8** %9, align 8
  %11 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %12 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %11, i32 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = ptrtoint i8* %10 to i64
  %15 = ptrtoint i8* %13 to i64
  %16 = sub i64 %14, %15
  %17 = load i64*, i64** %5, align 8
  store i64 %16, i64* %17, align 8
  %18 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %19 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %18, i32 0, i32 6
  %20 = load i64, i64* %19, align 8
  %21 = icmp sge i64 %20, 0
  br i1 %21, label %22, label %58

22:                                               ; preds = %2
  %23 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %24 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %23, i32 0, i32 9
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** %24, align 8
  %26 = call i64 @ftell(%struct._IO_FILE* %25)
  store i64 %26, i64* %6, align 8
  %27 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %28 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %27, i32 0, i32 9
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** %28, align 8
  %30 = call i32 @fseek(%struct._IO_FILE* %29, i64 0, i32 2)
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %22
  store i32 -1, i32* %3, align 4
  br label %72

33:                                               ; preds = %22
  %34 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %35 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %34, i32 0, i32 9
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** %35, align 8
  %37 = call i64 @ftell(%struct._IO_FILE* %36)
  store i64 %37, i64* %7, align 8
  %38 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %39 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %38, i32 0, i32 9
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** %39, align 8
  %41 = load i64, i64* %6, align 8
  %42 = call i32 @fseek(%struct._IO_FILE* %40, i64 %41, i32 0)
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %44, label %45

44:                                               ; preds = %33
  store i32 -1, i32* %3, align 4
  br label %72

45:                                               ; preds = %33
  %46 = load i64, i64* %7, align 8
  %47 = load i64, i64* %6, align 8
  %48 = sub nsw i64 %46, %47
  %49 = load i64*, i64** %5, align 8
  %50 = load i64, i64* %49, align 8
  %51 = add nsw i64 %50, %48
  store i64 %51, i64* %49, align 8
  %52 = load i64*, i64** %5, align 8
  %53 = load i64, i64* %52, align 8
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %55, label %57

55:                                               ; preds = %45
  %56 = load i64*, i64** %5, align 8
  store i64 -1, i64* %56, align 8
  br label %57

57:                                               ; preds = %55, %45
  br label %71

58:                                               ; preds = %2
  %59 = load i64*, i64** %5, align 8
  %60 = load i64, i64* %59, align 8
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %62, label %70

62:                                               ; preds = %58
  %63 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %64 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %63, i32 0, i32 9
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** %64, align 8
  %66 = call i32 @feof(%struct._IO_FILE* %65) #9
  %67 = icmp ne i32 %66, 0
  br i1 %67, label %68, label %70

68:                                               ; preds = %62
  %69 = load i64*, i64** %5, align 8
  store i64 -1, i64* %69, align 8
  br label %70

70:                                               ; preds = %68, %62, %58
  br label %71

71:                                               ; preds = %70, %57
  store i32 0, i32* %3, align 4
  br label %72

72:                                               ; preds = %71, %44, %32
  %73 = load i32, i32* %3, align 4
  ret i32 %73
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @srseek(%struct.stream_s* %0, i64 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.stream_s*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  store %struct.stream_s* %0, %struct.stream_s** %4, align 8
  store i64 %1, i64* %5, align 8
  %8 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %9 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %8, i32 0, i32 1
  %10 = load i8*, i8** %9, align 8
  %11 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %12 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %11, i32 0, i32 2
  %13 = load i8*, i8** %12, align 8
  %14 = ptrtoint i8* %10 to i64
  %15 = ptrtoint i8* %13 to i64
  %16 = sub i64 %14, %15
  %17 = add nsw i64 %16, 1
  %18 = trunc i64 %17 to i32
  store i32 %18, i32* %6, align 4
  %19 = load i64, i64* %5, align 8
  %20 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %21 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %20, i32 0, i32 6
  %22 = load i64, i64* %21, align 8
  %23 = sub nsw i64 %19, %22
  store i64 %23, i64* %7, align 8
  %24 = load i64, i64* %7, align 8
  %25 = icmp sge i64 %24, 0
  br i1 %25, label %26, label %40

26:                                               ; preds = %2
  %27 = load i64, i64* %7, align 8
  %28 = load i32, i32* %6, align 4
  %29 = zext i32 %28 to i64
  %30 = icmp sle i64 %27, %29
  br i1 %30, label %31, label %40

31:                                               ; preds = %26
  %32 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %33 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %32, i32 0, i32 2
  %34 = load i8*, i8** %33, align 8
  %35 = load i64, i64* %7, align 8
  %36 = getelementptr inbounds i8, i8* %34, i64 %35
  %37 = getelementptr inbounds i8, i8* %36, i64 -1
  %38 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %39 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %38, i32 0, i32 0
  store i8* %37, i8** %39, align 8
  store i32 0, i32* %3, align 4
  br label %59

40:                                               ; preds = %26, %2
  %41 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %42 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %41, i32 0, i32 9
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** %42, align 8
  %44 = load i64, i64* %5, align 8
  %45 = call i32 @fseek(%struct._IO_FILE* %43, i64 %44, i32 0)
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %40
  store i32 -1, i32* %3, align 4
  br label %59

48:                                               ; preds = %40
  %49 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %50 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %49, i32 0, i32 2
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr inbounds i8, i8* %51, i64 -1
  %53 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %54 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %53, i32 0, i32 0
  store i8* %52, i8** %54, align 8
  %55 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %56 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %55, i32 0, i32 1
  store i8* %52, i8** %56, align 8
  %57 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %58 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %57, i32 0, i32 5
  store i8 0, i8* %58, align 1
  store i32 0, i32* %3, align 4
  br label %59

59:                                               ; preds = %48, %47, %31
  %60 = load i32, i32* %3, align 4
  ret i32 %60
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @srclose(%struct.stream_s* %0) #0 {
  %2 = alloca %struct.stream_s*, align 8
  store %struct.stream_s* %0, %struct.stream_s** %2, align 8
  %3 = load %struct.stream_s*, %struct.stream_s** %2, align 8
  %4 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %3, i32 0, i32 9
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** %4, align 8
  %6 = call i32 @fclose(%struct._IO_FILE* %5)
  ret i32 %6
}

declare dso_local i32 @fclose(%struct._IO_FILE*) #3

declare dso_local i32 @fseek(%struct._IO_FILE*, i64, i32) #3

declare dso_local i64 @ftell(%struct._IO_FILE*) #3

; Function Attrs: nounwind
declare dso_local i32 @feof(%struct._IO_FILE*) #2

declare dso_local i64 @fread(i8*, i64, i64, %struct._IO_FILE*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @swrite_file(%struct.stream_s* %0, %struct._IO_FILE* %1, i8* %2, i32 %3) #0 {
  %5 = alloca %struct.stream_s*, align 8
  %6 = alloca %struct._IO_FILE*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  store %struct.stream_s* %0, %struct.stream_s** %5, align 8
  store %struct._IO_FILE* %1, %struct._IO_FILE** %6, align 8
  store i8* %2, i8** %7, align 8
  store i32 %3, i32* %8, align 4
  %9 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8
  %11 = load i8*, i8** %7, align 8
  %12 = load i32, i32* %8, align 4
  call void @sfinit(%struct.stream_s* %9, %struct._IO_FILE* %10, i8* %11, i32 %12, %struct.stream_procs* @swrite_file.p)
  %13 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %14 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %13, i32 0, i32 4
  store i8 1, i8* %14, align 4
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %17 = icmp eq %struct._IO_FILE* %15, %16
  br i1 %17, label %22, label %18

18:                                               ; preds = %4
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %21 = icmp eq %struct._IO_FILE* %19, %20
  br label %22

22:                                               ; preds = %18, %4
  %23 = phi i1 [ true, %4 ], [ %21, %18 ]
  %24 = zext i1 %23 to i64
  %25 = select i1 %23, i32 -1, i32 0
  %26 = sext i32 %25 to i64
  %27 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %28 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %27, i32 0, i32 6
  store i64 %26, i64* %28, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sfwrite(%struct.stream_s* %0, i8 zeroext %1) #0 {
  %3 = alloca %struct.stream_s*, align 8
  %4 = alloca i8, align 1
  store %struct.stream_s* %0, %struct.stream_s** %3, align 8
  store i8 %1, i8* %4, align 1
  %5 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %6 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %5, i32 0, i32 2
  %7 = load i8*, i8** %6, align 8
  %8 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %9 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %8, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 1
  %12 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %13 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %12, i32 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = ptrtoint i8* %11 to i64
  %16 = ptrtoint i8* %14 to i64
  %17 = sub i64 %15, %16
  %18 = trunc i64 %17 to i32
  %19 = zext i32 %18 to i64
  %20 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %21 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %20, i32 0, i32 9
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** %21, align 8
  %23 = call i64 @fwrite(i8* %7, i64 1, i64 %19, %struct._IO_FILE* %22)
  %24 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %25 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %24, i32 0, i32 6
  %26 = load i64, i64* %25, align 8
  %27 = icmp sge i64 %26, 0
  br i1 %27, label %28, label %35

28:                                               ; preds = %2
  %29 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %30 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %29, i32 0, i32 9
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** %30, align 8
  %32 = call i64 @ftell(%struct._IO_FILE* %31)
  %33 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %34 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %33, i32 0, i32 6
  store i64 %32, i64* %34, align 8
  br label %35

35:                                               ; preds = %28, %2
  %36 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %37 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %36, i32 0, i32 2
  %38 = load i8*, i8** %37, align 8
  %39 = getelementptr inbounds i8, i8* %38, i64 -1
  %40 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %41 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %40, i32 0, i32 0
  store i8* %39, i8** %41, align 8
  %42 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %43 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %42, i32 0, i32 0
  %44 = load i8*, i8** %43, align 8
  %45 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %46 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %45, i32 0, i32 3
  %47 = load i32, i32* %46, align 8
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i8, i8* %44, i64 %48
  %50 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %51 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %50, i32 0, i32 1
  store i8* %49, i8** %51, align 8
  %52 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %53 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %52, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %56 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %55, i32 0, i32 1
  %57 = load i8*, i8** %56, align 8
  %58 = icmp ult i8* %54, %57
  br i1 %58, label %59, label %66

59:                                               ; preds = %35
  %60 = load i8, i8* %4, align 1
  %61 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %62 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %61, i32 0, i32 0
  %63 = load i8*, i8** %62, align 8
  %64 = getelementptr inbounds i8, i8* %63, i32 1
  store i8* %64, i8** %62, align 8
  store i8 %60, i8* %64, align 1
  %65 = zext i8 %60 to i32
  br label %74

66:                                               ; preds = %35
  %67 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %68 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %67, i32 0, i32 7
  %69 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %68, i32 0, i32 1
  %70 = load i32 (%struct.stream_s*, i8)*, i32 (%struct.stream_s*, i8)** %69, align 8
  %71 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %72 = load i8, i8* %4, align 1
  %73 = call i32 %70(%struct.stream_s* %71, i8 zeroext %72)
  br label %74

74:                                               ; preds = %66, %59
  %75 = phi i32 [ %65, %59 ], [ %73, %66 ]
  ret i32 %75
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @swseek(%struct.stream_s* %0, i64 %1) #0 {
  %3 = alloca %struct.stream_s*, align 8
  %4 = alloca i64, align 8
  store %struct.stream_s* %0, %struct.stream_s** %3, align 8
  store i64 %1, i64* %4, align 8
  ret i32 -1
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @swflush(%struct.stream_s* %0) #0 {
  %2 = alloca %struct.stream_s*, align 8
  %3 = alloca i32, align 4
  store %struct.stream_s* %0, %struct.stream_s** %2, align 8
  %4 = load %struct.stream_s*, %struct.stream_s** %2, align 8
  %5 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %4, i32 0, i32 2
  %6 = load i8*, i8** %5, align 8
  %7 = load %struct.stream_s*, %struct.stream_s** %2, align 8
  %8 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %7, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 1
  %11 = load %struct.stream_s*, %struct.stream_s** %2, align 8
  %12 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %11, i32 0, i32 2
  %13 = load i8*, i8** %12, align 8
  %14 = ptrtoint i8* %10 to i64
  %15 = ptrtoint i8* %13 to i64
  %16 = sub i64 %14, %15
  %17 = trunc i64 %16 to i32
  %18 = zext i32 %17 to i64
  %19 = load %struct.stream_s*, %struct.stream_s** %2, align 8
  %20 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %19, i32 0, i32 9
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** %20, align 8
  %22 = call i64 @fwrite(i8* %6, i64 1, i64 %18, %struct._IO_FILE* %21)
  %23 = trunc i64 %22 to i32
  store i32 %23, i32* %3, align 4
  %24 = load %struct.stream_s*, %struct.stream_s** %2, align 8
  %25 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %24, i32 0, i32 9
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** %25, align 8
  %27 = call i32 @fflush(%struct._IO_FILE* %26)
  %28 = load %struct.stream_s*, %struct.stream_s** %2, align 8
  %29 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %28, i32 0, i32 9
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** %29, align 8
  %31 = call i64 @ftell(%struct._IO_FILE* %30)
  %32 = load %struct.stream_s*, %struct.stream_s** %2, align 8
  %33 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %32, i32 0, i32 6
  store i64 %31, i64* %33, align 8
  %34 = load %struct.stream_s*, %struct.stream_s** %2, align 8
  %35 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %34, i32 0, i32 2
  %36 = load i8*, i8** %35, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 -1
  %38 = load %struct.stream_s*, %struct.stream_s** %2, align 8
  %39 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %38, i32 0, i32 0
  store i8* %37, i8** %39, align 8
  %40 = load %struct.stream_s*, %struct.stream_s** %2, align 8
  %41 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %40, i32 0, i32 0
  %42 = load i8*, i8** %41, align 8
  %43 = load %struct.stream_s*, %struct.stream_s** %2, align 8
  %44 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %43, i32 0, i32 3
  %45 = load i32, i32* %44, align 8
  %46 = zext i32 %45 to i64
  %47 = getelementptr inbounds i8, i8* %42, i64 %46
  %48 = load %struct.stream_s*, %struct.stream_s** %2, align 8
  %49 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %48, i32 0, i32 1
  store i8* %47, i8** %49, align 8
  %50 = load i32, i32* %3, align 4
  ret i32 %50
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @swclose(%struct.stream_s* %0) #0 {
  %2 = alloca %struct.stream_s*, align 8
  store %struct.stream_s* %0, %struct.stream_s** %2, align 8
  %3 = load %struct.stream_s*, %struct.stream_s** %2, align 8
  %4 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %3, i32 0, i32 2
  %5 = load i8*, i8** %4, align 8
  %6 = load %struct.stream_s*, %struct.stream_s** %2, align 8
  %7 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %6, i32 0, i32 0
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds i8, i8* %8, i64 1
  %10 = load %struct.stream_s*, %struct.stream_s** %2, align 8
  %11 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %10, i32 0, i32 2
  %12 = load i8*, i8** %11, align 8
  %13 = ptrtoint i8* %9 to i64
  %14 = ptrtoint i8* %12 to i64
  %15 = sub i64 %13, %14
  %16 = trunc i64 %15 to i32
  %17 = zext i32 %16 to i64
  %18 = load %struct.stream_s*, %struct.stream_s** %2, align 8
  %19 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %18, i32 0, i32 9
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %19, align 8
  %21 = call i64 @fwrite(i8* %5, i64 1, i64 %17, %struct._IO_FILE* %20)
  %22 = load %struct.stream_s*, %struct.stream_s** %2, align 8
  %23 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %22, i32 0, i32 9
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** %23, align 8
  %25 = call i32 @fclose(%struct._IO_FILE* %24)
  ret i32 %25
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sread_decrypt(%struct.stream_s* %0, %struct.stream_s* %1, i8* %2, i32 %3, i16 zeroext %4) #0 {
  %6 = alloca %struct.stream_s*, align 8
  %7 = alloca %struct.stream_s*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i16, align 2
  store %struct.stream_s* %0, %struct.stream_s** %6, align 8
  store %struct.stream_s* %1, %struct.stream_s** %7, align 8
  store i8* %2, i8** %8, align 8
  store i32 %3, i32* %9, align 4
  store i16 %4, i16* %10, align 2
  %11 = load %struct.stream_s*, %struct.stream_s** %6, align 8
  %12 = load i8*, i8** %8, align 8
  %13 = load i32, i32* %9, align 4
  call void @sfinit(%struct.stream_s* %11, %struct._IO_FILE* null, i8* %12, i32 %13, %struct.stream_procs* @sread_decrypt.p)
  %14 = load %struct.stream_s*, %struct.stream_s** %6, align 8
  %15 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %14, i32 0, i32 4
  store i8 0, i8* %15, align 4
  %16 = load %struct.stream_s*, %struct.stream_s** %6, align 8
  %17 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %16, i32 0, i32 6
  store i64 -1, i64* %17, align 8
  %18 = load %struct.stream_s*, %struct.stream_s** %7, align 8
  %19 = load %struct.stream_s*, %struct.stream_s** %6, align 8
  %20 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %19, i32 0, i32 10
  store %struct.stream_s* %18, %struct.stream_s** %20, align 8
  %21 = load i16, i16* %10, align 2
  %22 = load %struct.stream_s*, %struct.stream_s** %6, align 8
  %23 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %22, i32 0, i32 11
  store i16 %21, i16* %23, align 8
  %24 = load %struct.stream_s*, %struct.stream_s** %6, align 8
  %25 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %24, i32 0, i32 12
  store i32 -1, i32* %25, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sxread(%struct.stream_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.stream_s*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct.stream_s, align 8
  store %struct.stream_s* %0, %struct.stream_s** %3, align 8
  %7 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %8 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %7, i32 0, i32 2
  %9 = load i8*, i8** %8, align 8
  store i8* %9, i8** %4, align 8
  %10 = load i8*, i8** %4, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 -1
  %12 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %13 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %12, i32 0, i32 0
  store i8* %11, i8** %13, align 8
  br label %14

14:                                               ; preds = %43, %1
  %15 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %16 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %15, i32 0, i32 10
  %17 = load %struct.stream_s*, %struct.stream_s** %16, align 8
  %18 = load i8*, i8** %4, align 8
  %19 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %20 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %19, i32 0, i32 3
  %21 = load i32, i32* %20, align 8
  %22 = call i32 @sgets(%struct.stream_s* %17, i8* %18, i32 %21)
  store i32 %22, i32* %5, align 4
  %23 = load i32, i32* %5, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %33

25:                                               ; preds = %14
  %26 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %27 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %26, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %30 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %29, i32 0, i32 1
  store i8* %28, i8** %30, align 8
  %31 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %32 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %31, i32 0, i32 5
  store i8 1, i8* %32, align 1
  store i32 -1, i32* %2, align 4
  br label %65

33:                                               ; preds = %14
  %34 = load i8*, i8** %4, align 8
  %35 = load i32, i32* %5, align 4
  call void @sread_string(%struct.stream_s* %6, i8* %34, i32 %35)
  %36 = load i8*, i8** %4, align 8
  %37 = load i32, i32* %5, align 4
  %38 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %39 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %38, i32 0, i32 12
  %40 = call i32 @sreadhex(%struct.stream_s* %6, i8* %36, i32 %37, i32* %5, i32* %39)
  %41 = load i32, i32* %5, align 4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %44

43:                                               ; preds = %33
  br label %14

44:                                               ; preds = %33
  %45 = load i8*, i8** %4, align 8
  %46 = load i8*, i8** %4, align 8
  %47 = load i32, i32* %5, align 4
  %48 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %49 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %48, i32 0, i32 11
  %50 = call i32 @gs_type1_decrypt(i8* %45, i8* %46, i32 %47, i16* %49)
  %51 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %52 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %51, i32 0, i32 0
  %53 = load i8*, i8** %52, align 8
  %54 = load i32, i32* %5, align 4
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds i8, i8* %53, i64 %55
  %57 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %58 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %57, i32 0, i32 1
  store i8* %56, i8** %58, align 8
  %59 = load %struct.stream_s*, %struct.stream_s** %3, align 8
  %60 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %59, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = getelementptr inbounds i8, i8* %61, i32 1
  store i8* %62, i8** %60, align 8
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  store i32 %64, i32* %2, align 4
  br label %65

65:                                               ; preds = %44, %25
  %66 = load i32, i32* %2, align 4
  ret i32 %66
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sxavailable(%struct.stream_s* %0, i64* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.stream_s*, align 8
  %5 = alloca i64*, align 8
  store %struct.stream_s* %0, %struct.stream_s** %4, align 8
  store i64* %1, i64** %5, align 8
  %6 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %7 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %6, i32 0, i32 10
  %8 = load %struct.stream_s*, %struct.stream_s** %7, align 8
  %9 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %8, i32 0, i32 7
  %10 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %9, i32 0, i32 2
  %11 = load i32 (%struct.stream_s*, i64*)*, i32 (%struct.stream_s*, i64*)** %10, align 8
  %12 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %13 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %12, i32 0, i32 10
  %14 = load %struct.stream_s*, %struct.stream_s** %13, align 8
  %15 = load i64*, i64** %5, align 8
  %16 = call i32 %11(%struct.stream_s* %14, i64* %15)
  %17 = icmp slt i32 %16, 0
  br i1 %17, label %18, label %19

18:                                               ; preds = %2
  store i32 -1, i32* %3, align 4
  br label %28

19:                                               ; preds = %2
  %20 = load i64*, i64** %5, align 8
  %21 = load i64, i64* %20, align 8
  %22 = icmp sge i64 %21, 0
  br i1 %22, label %23, label %27

23:                                               ; preds = %19
  %24 = load i64*, i64** %5, align 8
  %25 = load i64, i64* %24, align 8
  %26 = sdiv i64 %25, 2
  store i64 %26, i64* %24, align 8
  br label %27

27:                                               ; preds = %23, %19
  store i32 0, i32* %3, align 4
  br label %28

28:                                               ; preds = %27, %18
  %29 = load i32, i32* %3, align 4
  ret i32 %29
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @sgets(%struct.stream_s* %0, i8* %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.stream_s*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store %struct.stream_s* %0, %struct.stream_s** %5, align 8
  store i8* %1, i8** %6, align 8
  store i32 %2, i32* %7, align 4
  %11 = load i32, i32* %7, align 4
  store i32 %11, i32* %8, align 4
  br label %12

12:                                               ; preds = %94, %3
  %13 = load i32, i32* %8, align 4
  %14 = icmp ugt i32 %13, 0
  br i1 %14, label %15, label %95

15:                                               ; preds = %12
  %16 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %17 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %16, i32 0, i32 1
  %18 = load i8*, i8** %17, align 8
  %19 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %20 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %19, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = ptrtoint i8* %18 to i64
  %23 = ptrtoint i8* %21 to i64
  %24 = sub i64 %22, %23
  %25 = trunc i64 %24 to i32
  store i32 %25, i32* %9, align 4
  %26 = load i32, i32* %9, align 4
  %27 = icmp ugt i32 %26, 0
  br i1 %27, label %28, label %55

28:                                               ; preds = %15
  %29 = load i32, i32* %9, align 4
  %30 = load i32, i32* %8, align 4
  %31 = icmp ugt i32 %29, %30
  br i1 %31, label %32, label %34

32:                                               ; preds = %28
  %33 = load i32, i32* %8, align 4
  store i32 %33, i32* %9, align 4
  br label %34

34:                                               ; preds = %32, %28
  %35 = load i8*, i8** %6, align 8
  %36 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %37 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %36, i32 0, i32 0
  %38 = load i8*, i8** %37, align 8
  %39 = getelementptr inbounds i8, i8* %38, i64 1
  %40 = load i32, i32* %9, align 4
  %41 = zext i32 %40 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %35, i8* align 1 %39, i64 %41, i1 false)
  %42 = load i32, i32* %9, align 4
  %43 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %44 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %43, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = zext i32 %42 to i64
  %47 = getelementptr inbounds i8, i8* %45, i64 %46
  store i8* %47, i8** %44, align 8
  %48 = load i32, i32* %9, align 4
  %49 = load i8*, i8** %6, align 8
  %50 = zext i32 %48 to i64
  %51 = getelementptr inbounds i8, i8* %49, i64 %50
  store i8* %51, i8** %6, align 8
  %52 = load i32, i32* %9, align 4
  %53 = load i32, i32* %8, align 4
  %54 = sub i32 %53, %52
  store i32 %54, i32* %8, align 4
  br label %94

55:                                               ; preds = %15
  %56 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %57 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %56, i32 0, i32 0
  %58 = load i8*, i8** %57, align 8
  %59 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %60 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %59, i32 0, i32 1
  %61 = load i8*, i8** %60, align 8
  %62 = icmp ult i8* %58, %61
  br i1 %62, label %63, label %70

63:                                               ; preds = %55
  %64 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %65 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %64, i32 0, i32 0
  %66 = load i8*, i8** %65, align 8
  %67 = getelementptr inbounds i8, i8* %66, i32 1
  store i8* %67, i8** %65, align 8
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  br label %77

70:                                               ; preds = %55
  %71 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %72 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %71, i32 0, i32 7
  %73 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %72, i32 0, i32 0
  %74 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %73, align 8
  %75 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %76 = call i32 %74(%struct.stream_s* %75)
  br label %77

77:                                               ; preds = %70, %63
  %78 = phi i32 [ %69, %63 ], [ %76, %70 ]
  store i32 %78, i32* %10, align 4
  %79 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %80 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %79, i32 0, i32 5
  %81 = load i8, i8* %80, align 1
  %82 = icmp ne i8 %81, 0
  br i1 %82, label %83, label %87

83:                                               ; preds = %77
  %84 = load i32, i32* %7, align 4
  %85 = load i32, i32* %8, align 4
  %86 = sub i32 %84, %85
  store i32 %86, i32* %4, align 4
  br label %97

87:                                               ; preds = %77
  %88 = load i32, i32* %10, align 4
  %89 = trunc i32 %88 to i8
  %90 = load i8*, i8** %6, align 8
  %91 = getelementptr inbounds i8, i8* %90, i32 1
  store i8* %91, i8** %6, align 8
  store i8 %89, i8* %90, align 1
  %92 = load i32, i32* %8, align 4
  %93 = add i32 %92, -1
  store i32 %93, i32* %8, align 4
  br label %94

94:                                               ; preds = %87, %34
  br label %12

95:                                               ; preds = %12
  %96 = load i32, i32* %7, align 4
  store i32 %96, i32* %4, align 4
  br label %97

97:                                               ; preds = %95, %83
  %98 = load i32, i32* %4, align 4
  ret i32 %98
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @sreadhex(%struct.stream_s* %0, i8* %1, i32 %2, i32* %3, i32* %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca %struct.stream_s*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32*, align 8
  %11 = alloca i32*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i8, align 1
  %15 = alloca i8, align 1
  %16 = alloca i8*, align 8
  store %struct.stream_s* %0, %struct.stream_s** %7, align 8
  store i8* %1, i8** %8, align 8
  store i32 %2, i32* %9, align 4
  store i32* %3, i32** %10, align 8
  store i32* %4, i32** %11, align 8
  %17 = load i8*, i8** %8, align 8
  store i8* %17, i8** %12, align 8
  %18 = load i8*, i8** %12, align 8
  %19 = load i32, i32* %9, align 4
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %18, i64 %20
  store i8* %21, i8** %13, align 8
  %22 = load i32*, i32** %11, align 8
  %23 = load i32, i32* %22, align 4
  %24 = trunc i32 %23 to i8
  store i8 %24, i8* %14, align 1
  store i8* getelementptr inbounds ([257 x i8], [257 x i8]* @scan_char_array, i64 0, i64 1), i8** %16, align 8
  %25 = load i32, i32* %9, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %29

27:                                               ; preds = %5
  %28 = load i32*, i32** %10, align 8
  store i32 0, i32* %28, align 4
  store i32 0, i32* %6, align 4
  br label %139

29:                                               ; preds = %5
  %30 = load i8, i8* %14, align 1
  %31 = zext i8 %30 to i32
  %32 = icmp sle i32 %31, 15
  br i1 %32, label %33, label %34

33:                                               ; preds = %29
  br label %74

34:                                               ; preds = %29
  br label %35

35:                                               ; preds = %127, %34
  br label %36

36:                                               ; preds = %72, %35
  %37 = load i8*, i8** %16, align 8
  %38 = load %struct.stream_s*, %struct.stream_s** %7, align 8
  %39 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %38, i32 0, i32 0
  %40 = load i8*, i8** %39, align 8
  %41 = load %struct.stream_s*, %struct.stream_s** %7, align 8
  %42 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %41, i32 0, i32 1
  %43 = load i8*, i8** %42, align 8
  %44 = icmp ult i8* %40, %43
  br i1 %44, label %45, label %52

45:                                               ; preds = %36
  %46 = load %struct.stream_s*, %struct.stream_s** %7, align 8
  %47 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %46, i32 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = getelementptr inbounds i8, i8* %48, i32 1
  store i8* %49, i8** %47, align 8
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i32
  br label %59

52:                                               ; preds = %36
  %53 = load %struct.stream_s*, %struct.stream_s** %7, align 8
  %54 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %53, i32 0, i32 7
  %55 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %54, i32 0, i32 0
  %56 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %55, align 8
  %57 = load %struct.stream_s*, %struct.stream_s** %7, align 8
  %58 = call i32 %56(%struct.stream_s* %57)
  br label %59

59:                                               ; preds = %52, %45
  %60 = phi i32 [ %51, %45 ], [ %58, %52 ]
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i8, i8* %37, i64 %61
  %63 = load i8, i8* %62, align 1
  store i8 %63, i8* %14, align 1
  %64 = zext i8 %63 to i32
  %65 = icmp sgt i32 %64, 15
  br i1 %65, label %66, label %73

66:                                               ; preds = %59
  %67 = load i8, i8* %14, align 1
  %68 = zext i8 %67 to i32
  %69 = icmp eq i32 %68, 103
  br i1 %69, label %70, label %72

70:                                               ; preds = %66
  %71 = load i32*, i32** %11, align 8
  store i32 -1, i32* %71, align 4
  br label %131

72:                                               ; preds = %66
  br label %36

73:                                               ; preds = %59
  br label %74

74:                                               ; preds = %73, %33
  br label %75

75:                                               ; preds = %113, %74
  %76 = load i8*, i8** %16, align 8
  %77 = load %struct.stream_s*, %struct.stream_s** %7, align 8
  %78 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %77, i32 0, i32 0
  %79 = load i8*, i8** %78, align 8
  %80 = load %struct.stream_s*, %struct.stream_s** %7, align 8
  %81 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %80, i32 0, i32 1
  %82 = load i8*, i8** %81, align 8
  %83 = icmp ult i8* %79, %82
  br i1 %83, label %84, label %91

84:                                               ; preds = %75
  %85 = load %struct.stream_s*, %struct.stream_s** %7, align 8
  %86 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %85, i32 0, i32 0
  %87 = load i8*, i8** %86, align 8
  %88 = getelementptr inbounds i8, i8* %87, i32 1
  store i8* %88, i8** %86, align 8
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  br label %98

91:                                               ; preds = %75
  %92 = load %struct.stream_s*, %struct.stream_s** %7, align 8
  %93 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %92, i32 0, i32 7
  %94 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %93, i32 0, i32 0
  %95 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %94, align 8
  %96 = load %struct.stream_s*, %struct.stream_s** %7, align 8
  %97 = call i32 %95(%struct.stream_s* %96)
  br label %98

98:                                               ; preds = %91, %84
  %99 = phi i32 [ %90, %84 ], [ %97, %91 ]
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds i8, i8* %76, i64 %100
  %102 = load i8, i8* %101, align 1
  store i8 %102, i8* %15, align 1
  %103 = zext i8 %102 to i32
  %104 = icmp sgt i32 %103, 15
  br i1 %104, label %105, label %114

105:                                              ; preds = %98
  %106 = load i8, i8* %15, align 1
  %107 = zext i8 %106 to i32
  %108 = icmp eq i32 %107, 103
  br i1 %108, label %109, label %113

109:                                              ; preds = %105
  %110 = load i8, i8* %14, align 1
  %111 = zext i8 %110 to i32
  %112 = load i32*, i32** %11, align 8
  store i32 %111, i32* %112, align 4
  br label %131

113:                                              ; preds = %105
  br label %75

114:                                              ; preds = %98
  %115 = load i8, i8* %14, align 1
  %116 = zext i8 %115 to i32
  %117 = shl i32 %116, 4
  %118 = load i8, i8* %15, align 1
  %119 = zext i8 %118 to i32
  %120 = add nsw i32 %117, %119
  %121 = trunc i32 %120 to i8
  %122 = load i8*, i8** %12, align 8
  %123 = getelementptr inbounds i8, i8* %122, i32 1
  store i8* %123, i8** %12, align 8
  store i8 %121, i8* %122, align 1
  %124 = load i8*, i8** %12, align 8
  %125 = load i8*, i8** %13, align 8
  %126 = icmp ult i8* %124, %125
  br i1 %126, label %127, label %128

127:                                              ; preds = %114
  br label %35

128:                                              ; preds = %114
  %129 = load i32, i32* %9, align 4
  %130 = load i32*, i32** %10, align 8
  store i32 %129, i32* %130, align 4
  store i32 0, i32* %6, align 4
  br label %139

131:                                              ; preds = %109, %70
  %132 = load i8*, i8** %12, align 8
  %133 = load i8*, i8** %8, align 8
  %134 = ptrtoint i8* %132 to i64
  %135 = ptrtoint i8* %133 to i64
  %136 = sub i64 %134, %135
  %137 = trunc i64 %136 to i32
  %138 = load i32*, i32** %10, align 8
  store i32 %137, i32* %138, align 4
  store i32 1, i32* %6, align 4
  br label %139

139:                                              ; preds = %131, %128, %27
  %140 = load i32, i32* %6, align 4
  ret i32 %140
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @sungetc(%struct.stream_s* %0, i8 zeroext %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.stream_s*, align 8
  %5 = alloca i8, align 1
  store %struct.stream_s* %0, %struct.stream_s** %4, align 8
  store i8 %1, i8* %5, align 1
  %6 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %7 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %6, i32 0, i32 4
  %8 = load i8, i8* %7, align 4
  %9 = sext i8 %8 to i32
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %19, label %11

11:                                               ; preds = %2
  %12 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %13 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %12, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %16 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %15, i32 0, i32 2
  %17 = load i8*, i8** %16, align 8
  %18 = icmp ult i8* %14, %17
  br i1 %18, label %19, label %20

19:                                               ; preds = %11, %2
  store i32 -1, i32* %3, align 4
  br label %26

20:                                               ; preds = %11
  %21 = load i8, i8* %5, align 1
  %22 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %23 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %22, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds i8, i8* %24, i32 -1
  store i8* %25, i8** %23, align 8
  store i8 %21, i8* %24, align 1
  store i32 0, i32* %3, align 4
  br label %26

26:                                               ; preds = %20, %19
  %27 = load i32, i32* %3, align 4
  ret i32 %27
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @sputs(%struct.stream_s* %0, i8* %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.stream_s*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8, align 1
  store %struct.stream_s* %0, %struct.stream_s** %5, align 8
  store i8* %1, i8** %6, align 8
  store i32 %2, i32* %7, align 4
  %11 = load i32, i32* %7, align 4
  store i32 %11, i32* %8, align 4
  br label %12

12:                                               ; preds = %94, %3
  %13 = load i32, i32* %8, align 4
  %14 = icmp ugt i32 %13, 0
  br i1 %14, label %15, label %95

15:                                               ; preds = %12
  %16 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %17 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %16, i32 0, i32 1
  %18 = load i8*, i8** %17, align 8
  %19 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %20 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %19, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = ptrtoint i8* %18 to i64
  %23 = ptrtoint i8* %21 to i64
  %24 = sub i64 %22, %23
  %25 = trunc i64 %24 to i32
  store i32 %25, i32* %9, align 4
  %26 = load i32, i32* %9, align 4
  %27 = icmp ugt i32 %26, 0
  br i1 %27, label %28, label %55

28:                                               ; preds = %15
  %29 = load i32, i32* %9, align 4
  %30 = load i32, i32* %8, align 4
  %31 = icmp ugt i32 %29, %30
  br i1 %31, label %32, label %34

32:                                               ; preds = %28
  %33 = load i32, i32* %8, align 4
  store i32 %33, i32* %9, align 4
  br label %34

34:                                               ; preds = %32, %28
  %35 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %36 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %35, i32 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  %39 = load i8*, i8** %6, align 8
  %40 = load i32, i32* %9, align 4
  %41 = zext i32 %40 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %38, i8* align 1 %39, i64 %41, i1 false)
  %42 = load i32, i32* %9, align 4
  %43 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %44 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %43, i32 0, i32 0
  %45 = load i8*, i8** %44, align 8
  %46 = zext i32 %42 to i64
  %47 = getelementptr inbounds i8, i8* %45, i64 %46
  store i8* %47, i8** %44, align 8
  %48 = load i32, i32* %9, align 4
  %49 = load i8*, i8** %6, align 8
  %50 = zext i32 %48 to i64
  %51 = getelementptr inbounds i8, i8* %49, i64 %50
  store i8* %51, i8** %6, align 8
  %52 = load i32, i32* %9, align 4
  %53 = load i32, i32* %8, align 4
  %54 = sub i32 %53, %52
  store i32 %54, i32* %8, align 4
  br label %94

55:                                               ; preds = %15
  %56 = load i8*, i8** %6, align 8
  %57 = getelementptr inbounds i8, i8* %56, i32 1
  store i8* %57, i8** %6, align 8
  %58 = load i8, i8* %56, align 1
  store i8 %58, i8* %10, align 1
  %59 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %60 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %59, i32 0, i32 0
  %61 = load i8*, i8** %60, align 8
  %62 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %63 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %62, i32 0, i32 1
  %64 = load i8*, i8** %63, align 8
  %65 = icmp ult i8* %61, %64
  br i1 %65, label %66, label %73

66:                                               ; preds = %55
  %67 = load i8, i8* %10, align 1
  %68 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %69 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %68, i32 0, i32 0
  %70 = load i8*, i8** %69, align 8
  %71 = getelementptr inbounds i8, i8* %70, i32 1
  store i8* %71, i8** %69, align 8
  store i8 %67, i8* %71, align 1
  %72 = zext i8 %67 to i32
  br label %81

73:                                               ; preds = %55
  %74 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %75 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %74, i32 0, i32 7
  %76 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %75, i32 0, i32 1
  %77 = load i32 (%struct.stream_s*, i8)*, i32 (%struct.stream_s*, i8)** %76, align 8
  %78 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %79 = load i8, i8* %10, align 1
  %80 = call i32 %77(%struct.stream_s* %78, i8 zeroext %79)
  br label %81

81:                                               ; preds = %73, %66
  %82 = phi i32 [ %72, %66 ], [ %80, %73 ]
  %83 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %84 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %83, i32 0, i32 5
  %85 = load i8, i8* %84, align 1
  %86 = icmp ne i8 %85, 0
  br i1 %86, label %87, label %91

87:                                               ; preds = %81
  %88 = load i32, i32* %7, align 4
  %89 = load i32, i32* %8, align 4
  %90 = sub i32 %88, %89
  store i32 %90, i32* %4, align 4
  br label %97

91:                                               ; preds = %81
  %92 = load i32, i32* %8, align 4
  %93 = add i32 %92, -1
  store i32 %93, i32* %8, align 4
  br label %94

94:                                               ; preds = %91, %34
  br label %12

95:                                               ; preds = %12
  %96 = load i32, i32* %7, align 4
  store i32 %96, i32* %4, align 4
  br label %97

97:                                               ; preds = %95, %87
  %98 = load i32, i32* %4, align 4
  ret i32 %98
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @strupr(i8* %0) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct._IO_FILE* @trace_open_map(i8* %0, i64* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i64*, align 8
  store i8* %0, i8** %3, align 8
  store i64* %1, i64** %4, align 8
  ret %struct._IO_FILE* null
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @trace_next_symbol(i8** %0, %struct._IO_FILE* %1) #0 {
  %3 = alloca i8**, align 8
  %4 = alloca %struct._IO_FILE*, align 8
  store i8** %0, i8*** %3, align 8
  store %struct._IO_FILE* %1, %struct._IO_FILE** %4, align 8
  ret i8* null
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @trace_find_symbol(i8* %0, %struct._IO_FILE* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca %struct._IO_FILE*, align 8
  store i8* %0, i8** %3, align 8
  store %struct._IO_FILE* %1, %struct._IO_FILE** %4, align 8
  ret i8* null
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @trace_name(i8* %0, %struct._IO_FILE* %1, i8* %2, i32 %3) #0 {
  %5 = alloca i8*, align 8
  %6 = alloca %struct._IO_FILE*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  store i8* %0, i8** %5, align 8
  store %struct._IO_FILE* %1, %struct._IO_FILE** %6, align 8
  store i8* %2, i8** %7, align 8
  store i32 %3, i32* %8, align 4
  ret i32 -1
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @trace(void (...)* %0, i8* %1, i8* %2, i32 %3) #0 {
  %5 = alloca void (...)*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  store void (...)* %0, void (...)** %5, align 8
  store i8* %1, i8** %6, align 8
  store i8* %2, i8** %7, align 8
  store i32 %3, i32* %8, align 4
  ret i32 -1
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @stack_top_frame() #0 {
  %1 = alloca [1 x %struct.__jmp_buf_tag], align 16
  %2 = getelementptr inbounds [1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* %1, i64 0, i64 0
  %3 = call i32 @_setjmp(%struct.__jmp_buf_tag* %2) #14
  %4 = getelementptr inbounds [1 x %struct.__jmp_buf_tag], [1 x %struct.__jmp_buf_tag]* %1, i64 0, i64 0
  %5 = bitcast %struct.__jmp_buf_tag* %4 to i8*
  %6 = call i8* @stack_next_frame(i8* %5)
  ret i8* %6
}

; Function Attrs: nounwind returns_twice
declare dso_local i32 @_setjmp(%struct.__jmp_buf_tag*) #8

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @stack_next_frame(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  %5 = load i8*, i8** %3, align 8
  %6 = bitcast i8* %5 to i8**
  %7 = getelementptr inbounds i8*, i8** %6, i64 3
  %8 = load i8*, i8** %7, align 8
  store i8* %8, i8** %4, align 8
  %9 = load i8*, i8** %4, align 8
  %10 = load i8*, i8** %3, align 8
  %11 = icmp ult i8* %9, %10
  br i1 %11, label %12, label %13

12:                                               ; preds = %1
  store i8* null, i8** %2, align 8
  br label %15

13:                                               ; preds = %1
  %14 = load i8*, i8** %4, align 8
  store i8* %14, i8** %2, align 8
  br label %15

15:                                               ; preds = %13, %12
  %16 = load i8*, i8** %2, align 8
  ret i8* %16
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @stack_return(i8* %0) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds i8, i8* %3, i64 16
  %5 = bitcast i8* %4 to i64*
  %6 = load i64, i64* %5, align 8
  ret i64 %6
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zadd(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i64, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i32 0, i32 1
  %7 = load i16, i16* %6, align 8
  %8 = zext i16 %7 to i32
  %9 = and i32 %8, 255
  %10 = ashr i32 %9, 2
  switch i32 %10, label %11 [
    i32 11, label %12
    i32 5, label %52
  ]

11:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %121

12:                                               ; preds = %1
  %13 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i64 -1
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 1
  %16 = load i16, i16* %15, align 8
  %17 = zext i16 %16 to i32
  %18 = and i32 %17, 255
  %19 = ashr i32 %18, 2
  switch i32 %19, label %20 [
    i32 11, label %21
    i32 5, label %32
  ]

20:                                               ; preds = %12
  store i32 -20, i32* %2, align 4
  br label %121

21:                                               ; preds = %12
  %22 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i32 0, i32 0
  %24 = bitcast %union.color_sample* %23 to float*
  %25 = load float, float* %24, align 8
  %26 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %27 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %26, i64 -1
  %28 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %27, i32 0, i32 0
  %29 = bitcast %union.color_sample* %28 to float*
  %30 = load float, float* %29, align 8
  %31 = fadd float %30, %25
  store float %31, float* %29, align 8
  br label %51

32:                                               ; preds = %12
  %33 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %34 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %33, i64 -1
  %35 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %34, i32 0, i32 0
  %36 = bitcast %union.color_sample* %35 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = sitofp i64 %37 to float
  %39 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %40 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %39, i32 0, i32 0
  %41 = bitcast %union.color_sample* %40 to float*
  %42 = load float, float* %41, align 8
  %43 = fadd float %38, %42
  %44 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %45 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %44, i64 -1
  %46 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %45, i32 0, i32 0
  %47 = bitcast %union.color_sample* %46 to float*
  store float %43, float* %47, align 8
  %48 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %49 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %48, i64 -1
  %50 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %49, i32 0, i32 1
  store i16 44, i16* %50, align 8
  br label %51

51:                                               ; preds = %32, %21
  br label %118

52:                                               ; preds = %1
  %53 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %54 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %53, i64 -1
  %55 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %54, i32 0, i32 1
  %56 = load i16, i16* %55, align 8
  %57 = zext i16 %56 to i32
  %58 = and i32 %57, 255
  %59 = ashr i32 %58, 2
  switch i32 %59, label %60 [
    i32 11, label %61
    i32 5, label %73
  ]

60:                                               ; preds = %52
  store i32 -20, i32* %2, align 4
  br label %121

61:                                               ; preds = %52
  %62 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %63 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %62, i32 0, i32 0
  %64 = bitcast %union.color_sample* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = sitofp i64 %65 to float
  %67 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %68 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %67, i64 -1
  %69 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %68, i32 0, i32 0
  %70 = bitcast %union.color_sample* %69 to float*
  %71 = load float, float* %70, align 8
  %72 = fadd float %71, %66
  store float %72, float* %70, align 8
  br label %117

73:                                               ; preds = %52
  %74 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %75 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %74, i32 0, i32 0
  %76 = bitcast %union.color_sample* %75 to i64*
  %77 = load i64, i64* %76, align 8
  store i64 %77, i64* %4, align 8
  %78 = load i64, i64* %4, align 8
  %79 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %80 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %79, i64 -1
  %81 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %80, i32 0, i32 0
  %82 = bitcast %union.color_sample* %81 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = add nsw i64 %83, %78
  store i64 %84, i64* %82, align 8
  %85 = load i64, i64* %4, align 8
  %86 = xor i64 %84, %85
  %87 = icmp slt i64 %86, 0
  br i1 %87, label %88, label %116

88:                                               ; preds = %73
  %89 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %90 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %89, i64 -1
  %91 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %90, i32 0, i32 0
  %92 = bitcast %union.color_sample* %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = load i64, i64* %4, align 8
  %95 = sub nsw i64 %93, %94
  %96 = load i64, i64* %4, align 8
  %97 = xor i64 %95, %96
  %98 = icmp sge i64 %97, 0
  br i1 %98, label %99, label %116

99:                                               ; preds = %88
  %100 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %101 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %100, i64 -1
  %102 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %101, i32 0, i32 0
  %103 = bitcast %union.color_sample* %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = sitofp i64 %104 to float
  %106 = load i64, i64* %4, align 8
  %107 = sitofp i64 %106 to float
  %108 = fsub float %105, %107
  %109 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %110 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %109, i64 -1
  %111 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %110, i32 0, i32 0
  %112 = bitcast %union.color_sample* %111 to float*
  store float %108, float* %112, align 8
  %113 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %114 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %113, i64 -1
  %115 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %114, i32 0, i32 1
  store i16 44, i16* %115, align 8
  br label %116

116:                                              ; preds = %99, %88, %73
  br label %117

117:                                              ; preds = %116, %61
  br label %118

118:                                              ; preds = %117, %51
  %119 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %120 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %119, i64 -1
  store %struct.ref_s* %120, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %121

121:                                              ; preds = %118, %60, %20, %11
  %122 = load i32, i32* %2, align 4
  ret i32 %122
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zdiv(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i64 -1
  store %struct.ref_s* %6, %struct.ref_s** %4, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = zext i16 %9 to i32
  %11 = and i32 %10, 255
  %12 = ashr i32 %11, 2
  switch i32 %12, label %13 [
    i32 11, label %14
    i32 5, label %56
  ]

13:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %103

14:                                               ; preds = %1
  %15 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %16 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %15, i32 0, i32 0
  %17 = bitcast %union.color_sample* %16 to float*
  %18 = load float, float* %17, align 8
  %19 = fcmp oeq float %18, 0.000000e+00
  br i1 %19, label %20, label %21

20:                                               ; preds = %14
  store i32 -23, i32* %2, align 4
  br label %103

21:                                               ; preds = %14
  %22 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i32 0, i32 1
  %24 = load i16, i16* %23, align 8
  %25 = zext i16 %24 to i32
  %26 = and i32 %25, 255
  %27 = ashr i32 %26, 2
  switch i32 %27, label %28 [
    i32 11, label %29
    i32 5, label %39
  ]

28:                                               ; preds = %21
  store i32 -20, i32* %2, align 4
  br label %103

29:                                               ; preds = %21
  %30 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %31 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %30, i32 0, i32 0
  %32 = bitcast %union.color_sample* %31 to float*
  %33 = load float, float* %32, align 8
  %34 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %35 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %34, i32 0, i32 0
  %36 = bitcast %union.color_sample* %35 to float*
  %37 = load float, float* %36, align 8
  %38 = fdiv float %37, %33
  store float %38, float* %36, align 8
  br label %55

39:                                               ; preds = %21
  %40 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %41 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %40, i32 0, i32 0
  %42 = bitcast %union.color_sample* %41 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = sitofp i64 %43 to float
  %45 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %46 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %45, i32 0, i32 0
  %47 = bitcast %union.color_sample* %46 to float*
  %48 = load float, float* %47, align 8
  %49 = fdiv float %44, %48
  %50 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %51 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %50, i32 0, i32 0
  %52 = bitcast %union.color_sample* %51 to float*
  store float %49, float* %52, align 8
  %53 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %54 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %53, i32 0, i32 1
  store i16 44, i16* %54, align 8
  br label %55

55:                                               ; preds = %39, %29
  br label %100

56:                                               ; preds = %1
  %57 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %58 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %57, i32 0, i32 0
  %59 = bitcast %union.color_sample* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %62, label %63

62:                                               ; preds = %56
  store i32 -23, i32* %2, align 4
  br label %103

63:                                               ; preds = %56
  %64 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %65 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %64, i32 0, i32 1
  %66 = load i16, i16* %65, align 8
  %67 = zext i16 %66 to i32
  %68 = and i32 %67, 255
  %69 = ashr i32 %68, 2
  switch i32 %69, label %70 [
    i32 11, label %71
    i32 5, label %82
  ]

70:                                               ; preds = %63
  store i32 -20, i32* %2, align 4
  br label %103

71:                                               ; preds = %63
  %72 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %73 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %72, i32 0, i32 0
  %74 = bitcast %union.color_sample* %73 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = sitofp i64 %75 to float
  %77 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %78 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %77, i32 0, i32 0
  %79 = bitcast %union.color_sample* %78 to float*
  %80 = load float, float* %79, align 8
  %81 = fdiv float %80, %76
  store float %81, float* %79, align 8
  br label %99

82:                                               ; preds = %63
  %83 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %84 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %83, i32 0, i32 0
  %85 = bitcast %union.color_sample* %84 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = sitofp i64 %86 to float
  %88 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %89 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %88, i32 0, i32 0
  %90 = bitcast %union.color_sample* %89 to i64*
  %91 = load i64, i64* %90, align 8
  %92 = sitofp i64 %91 to float
  %93 = fdiv float %87, %92
  %94 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %95 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %94, i32 0, i32 0
  %96 = bitcast %union.color_sample* %95 to float*
  store float %93, float* %96, align 8
  %97 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %98 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %97, i32 0, i32 1
  store i16 44, i16* %98, align 8
  br label %99

99:                                               ; preds = %82, %71
  br label %100

100:                                              ; preds = %99, %55
  %101 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %102 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %101, i64 -1
  store %struct.ref_s* %102, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %103

103:                                              ; preds = %100, %70, %62, %28, %20, %13
  %104 = load i32, i32* %2, align 4
  ret i32 %104
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zmul(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca float, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %9 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i32 0, i32 1
  %11 = load i16, i16* %10, align 8
  %12 = zext i16 %11 to i32
  %13 = and i32 %12, 255
  %14 = ashr i32 %13, 2
  switch i32 %14, label %15 [
    i32 11, label %16
    i32 5, label %56
  ]

15:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %155

16:                                               ; preds = %1
  %17 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i64 -1
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i32 0, i32 1
  %20 = load i16, i16* %19, align 8
  %21 = zext i16 %20 to i32
  %22 = and i32 %21, 255
  %23 = ashr i32 %22, 2
  switch i32 %23, label %24 [
    i32 11, label %25
    i32 5, label %36
  ]

24:                                               ; preds = %16
  store i32 -20, i32* %2, align 4
  br label %155

25:                                               ; preds = %16
  %26 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %27 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %26, i32 0, i32 0
  %28 = bitcast %union.color_sample* %27 to float*
  %29 = load float, float* %28, align 8
  %30 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %31 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %30, i64 -1
  %32 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %31, i32 0, i32 0
  %33 = bitcast %union.color_sample* %32 to float*
  %34 = load float, float* %33, align 8
  %35 = fmul float %34, %29
  store float %35, float* %33, align 8
  br label %55

36:                                               ; preds = %16
  %37 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %38 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %37, i64 -1
  %39 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %38, i32 0, i32 0
  %40 = bitcast %union.color_sample* %39 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sitofp i64 %41 to float
  %43 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %44 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %43, i32 0, i32 0
  %45 = bitcast %union.color_sample* %44 to float*
  %46 = load float, float* %45, align 8
  %47 = fmul float %42, %46
  %48 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %49 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %48, i64 -1
  %50 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %49, i32 0, i32 0
  %51 = bitcast %union.color_sample* %50 to float*
  store float %47, float* %51, align 8
  %52 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %53 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %52, i64 -1
  %54 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %53, i32 0, i32 1
  store i16 44, i16* %54, align 8
  br label %55

55:                                               ; preds = %36, %25
  br label %152

56:                                               ; preds = %1
  %57 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %58 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %57, i64 -1
  %59 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %58, i32 0, i32 1
  %60 = load i16, i16* %59, align 8
  %61 = zext i16 %60 to i32
  %62 = and i32 %61, 255
  %63 = ashr i32 %62, 2
  switch i32 %63, label %64 [
    i32 11, label %65
    i32 5, label %77
  ]

64:                                               ; preds = %56
  store i32 -20, i32* %2, align 4
  br label %155

65:                                               ; preds = %56
  %66 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %67 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %66, i32 0, i32 0
  %68 = bitcast %union.color_sample* %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = sitofp i64 %69 to float
  %71 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %72 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %71, i64 -1
  %73 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %72, i32 0, i32 0
  %74 = bitcast %union.color_sample* %73 to float*
  %75 = load float, float* %74, align 8
  %76 = fmul float %75, %70
  store float %76, float* %74, align 8
  br label %151

77:                                               ; preds = %56
  %78 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %79 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %78, i64 -1
  %80 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %79, i32 0, i32 0
  %81 = bitcast %union.color_sample* %80 to i64*
  %82 = load i64, i64* %81, align 8
  store i64 %82, i64* %4, align 8
  %83 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %84 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %83, i32 0, i32 0
  %85 = bitcast %union.color_sample* %84 to i64*
  %86 = load i64, i64* %85, align 8
  store i64 %86, i64* %5, align 8
  %87 = load i64, i64* %4, align 8
  %88 = icmp sge i64 %87, 0
  br i1 %88, label %89, label %91

89:                                               ; preds = %77
  %90 = load i64, i64* %4, align 8
  br label %94

91:                                               ; preds = %77
  %92 = load i64, i64* %4, align 8
  %93 = sub nsw i64 0, %92
  br label %94

94:                                               ; preds = %91, %89
  %95 = phi i64 [ %90, %89 ], [ %93, %91 ]
  store i64 %95, i64* %6, align 8
  %96 = load i64, i64* %5, align 8
  %97 = icmp sge i64 %96, 0
  br i1 %97, label %98, label %100

98:                                               ; preds = %94
  %99 = load i64, i64* %5, align 8
  br label %103

100:                                              ; preds = %94
  %101 = load i64, i64* %5, align 8
  %102 = sub nsw i64 0, %101
  br label %103

103:                                              ; preds = %100, %98
  %104 = phi i64 [ %99, %98 ], [ %102, %100 ]
  store i64 %104, i64* %7, align 8
  %105 = load i64, i64* %6, align 8
  %106 = icmp sgt i64 %105, 32767
  br i1 %106, label %110, label %107

107:                                              ; preds = %103
  %108 = load i64, i64* %7, align 8
  %109 = icmp sgt i64 %108, 32767
  br i1 %109, label %110, label %142

110:                                              ; preds = %107, %103
  %111 = load i64, i64* %6, align 8
  %112 = icmp ne i64 %111, 0
  br i1 %112, label %113, label %142

113:                                              ; preds = %110
  %114 = load i64, i64* %7, align 8
  %115 = load i64, i64* %6, align 8
  %116 = sdiv i64 2147483647, %115
  %117 = icmp sgt i64 %114, %116
  br i1 %117, label %118, label %142

118:                                              ; preds = %113
  %119 = load i64, i64* %4, align 8
  %120 = sitofp i64 %119 to float
  %121 = load i64, i64* %5, align 8
  %122 = sitofp i64 %121 to float
  %123 = fmul float %120, %122
  store float %123, float* %8, align 4
  %124 = load i64, i64* %4, align 8
  %125 = load i64, i64* %5, align 8
  %126 = mul nsw i64 %124, %125
  %127 = icmp ne i64 %126, -2147483648
  br i1 %127, label %131, label %128

128:                                              ; preds = %118
  %129 = load float, float* %8, align 4
  %130 = fcmp une float %129, 0xC1E0000000000000
  br label %131

131:                                              ; preds = %128, %118
  %132 = phi i1 [ true, %118 ], [ %130, %128 ]
  br i1 %132, label %133, label %142

133:                                              ; preds = %131
  %134 = load float, float* %8, align 4
  %135 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %136 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %135, i64 -1
  %137 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %136, i32 0, i32 0
  %138 = bitcast %union.color_sample* %137 to float*
  store float %134, float* %138, align 8
  %139 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %140 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %139, i64 -1
  %141 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %140, i32 0, i32 1
  store i16 44, i16* %141, align 8
  br label %150

142:                                              ; preds = %131, %113, %110, %107
  %143 = load i64, i64* %4, align 8
  %144 = load i64, i64* %5, align 8
  %145 = mul nsw i64 %143, %144
  %146 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %147 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %146, i64 -1
  %148 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %147, i32 0, i32 0
  %149 = bitcast %union.color_sample* %148 to i64*
  store i64 %145, i64* %149, align 8
  br label %150

150:                                              ; preds = %142, %133
  br label %151

151:                                              ; preds = %150, %65
  br label %152

152:                                              ; preds = %151, %55
  %153 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %154 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %153, i64 -1
  store %struct.ref_s* %154, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %155

155:                                              ; preds = %152, %64, %24, %15
  %156 = load i32, i32* %2, align 4
  ret i32 %156
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zsub(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i64, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i32 0, i32 1
  %7 = load i16, i16* %6, align 8
  %8 = zext i16 %7 to i32
  %9 = and i32 %8, 255
  %10 = ashr i32 %9, 2
  switch i32 %10, label %11 [
    i32 11, label %12
    i32 5, label %52
  ]

11:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %121

12:                                               ; preds = %1
  %13 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i64 -1
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 1
  %16 = load i16, i16* %15, align 8
  %17 = zext i16 %16 to i32
  %18 = and i32 %17, 255
  %19 = ashr i32 %18, 2
  switch i32 %19, label %20 [
    i32 11, label %21
    i32 5, label %32
  ]

20:                                               ; preds = %12
  store i32 -20, i32* %2, align 4
  br label %121

21:                                               ; preds = %12
  %22 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i32 0, i32 0
  %24 = bitcast %union.color_sample* %23 to float*
  %25 = load float, float* %24, align 8
  %26 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %27 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %26, i64 -1
  %28 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %27, i32 0, i32 0
  %29 = bitcast %union.color_sample* %28 to float*
  %30 = load float, float* %29, align 8
  %31 = fsub float %30, %25
  store float %31, float* %29, align 8
  br label %51

32:                                               ; preds = %12
  %33 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %34 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %33, i64 -1
  %35 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %34, i32 0, i32 0
  %36 = bitcast %union.color_sample* %35 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = sitofp i64 %37 to float
  %39 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %40 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %39, i32 0, i32 0
  %41 = bitcast %union.color_sample* %40 to float*
  %42 = load float, float* %41, align 8
  %43 = fsub float %38, %42
  %44 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %45 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %44, i64 -1
  %46 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %45, i32 0, i32 0
  %47 = bitcast %union.color_sample* %46 to float*
  store float %43, float* %47, align 8
  %48 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %49 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %48, i64 -1
  %50 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %49, i32 0, i32 1
  store i16 44, i16* %50, align 8
  br label %51

51:                                               ; preds = %32, %21
  br label %118

52:                                               ; preds = %1
  %53 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %54 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %53, i64 -1
  %55 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %54, i32 0, i32 1
  %56 = load i16, i16* %55, align 8
  %57 = zext i16 %56 to i32
  %58 = and i32 %57, 255
  %59 = ashr i32 %58, 2
  switch i32 %59, label %60 [
    i32 11, label %61
    i32 5, label %73
  ]

60:                                               ; preds = %52
  store i32 -20, i32* %2, align 4
  br label %121

61:                                               ; preds = %52
  %62 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %63 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %62, i32 0, i32 0
  %64 = bitcast %union.color_sample* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = sitofp i64 %65 to float
  %67 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %68 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %67, i64 -1
  %69 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %68, i32 0, i32 0
  %70 = bitcast %union.color_sample* %69 to float*
  %71 = load float, float* %70, align 8
  %72 = fsub float %71, %66
  store float %72, float* %70, align 8
  br label %117

73:                                               ; preds = %52
  %74 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %75 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %74, i64 -1
  %76 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %75, i32 0, i32 0
  %77 = bitcast %union.color_sample* %76 to i64*
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %4, align 8
  %79 = load i64, i64* %4, align 8
  %80 = load i64, i64* %4, align 8
  %81 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %82 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %81, i32 0, i32 0
  %83 = bitcast %union.color_sample* %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = sub nsw i64 %80, %84
  %86 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %87 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %86, i64 -1
  %88 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %87, i32 0, i32 0
  %89 = bitcast %union.color_sample* %88 to i64*
  store i64 %85, i64* %89, align 8
  %90 = xor i64 %79, %85
  %91 = icmp slt i64 %90, 0
  br i1 %91, label %92, label %116

92:                                               ; preds = %73
  %93 = load i64, i64* %4, align 8
  %94 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %95 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %94, i32 0, i32 0
  %96 = bitcast %union.color_sample* %95 to i64*
  %97 = load i64, i64* %96, align 8
  %98 = xor i64 %93, %97
  %99 = icmp slt i64 %98, 0
  br i1 %99, label %100, label %116

100:                                              ; preds = %92
  %101 = load i64, i64* %4, align 8
  %102 = sitofp i64 %101 to float
  %103 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %104 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %103, i32 0, i32 0
  %105 = bitcast %union.color_sample* %104 to i64*
  %106 = load i64, i64* %105, align 8
  %107 = sitofp i64 %106 to float
  %108 = fsub float %102, %107
  %109 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %110 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %109, i64 -1
  %111 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %110, i32 0, i32 0
  %112 = bitcast %union.color_sample* %111 to float*
  store float %108, float* %112, align 8
  %113 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %114 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %113, i64 -1
  %115 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %114, i32 0, i32 1
  store i16 44, i16* %115, align 8
  br label %116

116:                                              ; preds = %100, %92, %73
  br label %117

117:                                              ; preds = %116, %61
  br label %118

118:                                              ; preds = %117, %51
  %119 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %120 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %119, i64 -1
  store %struct.ref_s* %120, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %121

121:                                              ; preds = %118, %60, %20, %11
  %122 = load i32, i32* %2, align 4
  ret i32 %122
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zidiv(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s, align 8
  %5 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i64 -1
  %8 = bitcast %struct.ref_s* %4 to i8*
  %9 = bitcast %struct.ref_s* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 16, i1 false)
  %10 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %11 = call i32 @zdiv(%struct.ref_s* %10)
  store i32 %11, i32* %5, align 4
  %12 = load i32, i32* %5, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %1
  %15 = load i32, i32* %5, align 4
  store i32 %15, i32* %2, align 4
  br label %30

16:                                               ; preds = %1
  %17 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i64 -1
  %19 = call i32 (%struct.ref_s*, ...) bitcast (i32 (%struct.ref_s*)* @zcvi to i32 (%struct.ref_s*, ...)*)(%struct.ref_s* %18)
  store i32 %19, i32* %5, align 4
  %20 = load i32, i32* %5, align 4
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %22, label %28

22:                                               ; preds = %16
  %23 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %24 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %23, i64 -1
  %25 = bitcast %struct.ref_s* %24 to i8*
  %26 = bitcast %struct.ref_s* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 16, i1 false)
  %27 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  store %struct.ref_s* %27, %struct.ref_s** @osp, align 8
  br label %28

28:                                               ; preds = %22, %16
  %29 = load i32, i32* %5, align 4
  store i32 %29, i32* %2, align 4
  br label %30

30:                                               ; preds = %28, %14
  %31 = load i32, i32* %2, align 4
  ret i32 %31
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zmod(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i64 -1
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i32 0, i32 1
  %7 = load i16, i16* %6, align 8
  %8 = zext i16 %7 to i32
  %9 = and i32 %8, 252
  %10 = icmp eq i32 %9, 20
  br i1 %10, label %12, label %11

11:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %40

12:                                               ; preds = %1
  %13 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i32 0, i32 1
  %15 = load i16, i16* %14, align 8
  %16 = zext i16 %15 to i32
  %17 = and i32 %16, 252
  %18 = icmp eq i32 %17, 20
  br i1 %18, label %20, label %19

19:                                               ; preds = %12
  store i32 -20, i32* %2, align 4
  br label %40

20:                                               ; preds = %12
  %21 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i32 0, i32 0
  %23 = bitcast %union.color_sample* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %26, label %27

26:                                               ; preds = %20
  store i32 -23, i32* %2, align 4
  br label %40

27:                                               ; preds = %20
  %28 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i32 0, i32 0
  %30 = bitcast %union.color_sample* %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %33 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %32, i64 -1
  %34 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %33, i32 0, i32 0
  %35 = bitcast %union.color_sample* %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = srem i64 %36, %31
  store i64 %37, i64* %35, align 8
  %38 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %39 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %38, i64 -1
  store %struct.ref_s* %39, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %40

40:                                               ; preds = %27, %26, %19, %11
  %41 = load i32, i32* %2, align 4
  ret i32 %41
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zneg(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i32 0, i32 1
  %6 = load i16, i16* %5, align 8
  %7 = zext i16 %6 to i32
  %8 = and i32 %7, 255
  %9 = ashr i32 %8, 2
  switch i32 %9, label %10 [
    i32 11, label %11
    i32 5, label %20
  ]

10:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %43

11:                                               ; preds = %1
  %12 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %13 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %12, i32 0, i32 0
  %14 = bitcast %union.color_sample* %13 to float*
  %15 = load float, float* %14, align 8
  %16 = fneg float %15
  %17 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i32 0, i32 0
  %19 = bitcast %union.color_sample* %18 to float*
  store float %16, float* %19, align 8
  br label %42

20:                                               ; preds = %1
  %21 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i32 0, i32 0
  %23 = bitcast %union.color_sample* %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = icmp eq i64 %24, -2147483648
  br i1 %25, label %26, label %32

26:                                               ; preds = %20
  %27 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %28 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %27, i32 0, i32 0
  %29 = bitcast %union.color_sample* %28 to float*
  store float 0x41E0000000000000, float* %29, align 8
  %30 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %31 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %30, i32 0, i32 1
  store i16 44, i16* %31, align 8
  br label %41

32:                                               ; preds = %20
  %33 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %34 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %33, i32 0, i32 0
  %35 = bitcast %union.color_sample* %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = sub nsw i64 0, %36
  %38 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %39 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %38, i32 0, i32 0
  %40 = bitcast %union.color_sample* %39 to i64*
  store i64 %37, i64* %40, align 8
  br label %41

41:                                               ; preds = %32, %26
  br label %42

42:                                               ; preds = %41, %11
  store i32 0, i32* %2, align 4
  br label %43

43:                                               ; preds = %42, %10
  %44 = load i32, i32* %2, align 4
  ret i32 %44
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zceiling(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i32 0, i32 1
  %6 = load i16, i16* %5, align 8
  %7 = zext i16 %6 to i32
  %8 = and i32 %7, 255
  %9 = ashr i32 %8, 2
  switch i32 %9, label %10 [
    i32 11, label %11
    i32 5, label %22
  ]

10:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %24

11:                                               ; preds = %1
  %12 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %13 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %12, i32 0, i32 0
  %14 = bitcast %union.color_sample* %13 to float*
  %15 = load float, float* %14, align 8
  %16 = fpext float %15 to double
  %17 = call double @llvm.ceil.f64(double %16)
  %18 = fptrunc double %17 to float
  %19 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i32 0, i32 0
  %21 = bitcast %union.color_sample* %20 to float*
  store float %18, float* %21, align 8
  br label %22

22:                                               ; preds = %11, %1
  br label %23

23:                                               ; preds = %22
  store i32 0, i32* %2, align 4
  br label %24

24:                                               ; preds = %23, %10
  %25 = load i32, i32* %2, align 4
  ret i32 %25
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.ceil.f64(double) #6

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zfloor(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i32 0, i32 1
  %6 = load i16, i16* %5, align 8
  %7 = zext i16 %6 to i32
  %8 = and i32 %7, 255
  %9 = ashr i32 %8, 2
  switch i32 %9, label %10 [
    i32 11, label %11
    i32 5, label %22
  ]

10:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %24

11:                                               ; preds = %1
  %12 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %13 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %12, i32 0, i32 0
  %14 = bitcast %union.color_sample* %13 to float*
  %15 = load float, float* %14, align 8
  %16 = fpext float %15 to double
  %17 = call double @llvm.floor.f64(double %16)
  %18 = fptrunc double %17 to float
  %19 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i32 0, i32 0
  %21 = bitcast %union.color_sample* %20 to float*
  store float %18, float* %21, align 8
  br label %22

22:                                               ; preds = %11, %1
  br label %23

23:                                               ; preds = %22
  store i32 0, i32* %2, align 4
  br label %24

24:                                               ; preds = %23, %10
  %25 = load i32, i32* %2, align 4
  ret i32 %25
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zround(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i32 0, i32 1
  %6 = load i16, i16* %5, align 8
  %7 = zext i16 %6 to i32
  %8 = and i32 %7, 255
  %9 = ashr i32 %8, 2
  switch i32 %9, label %10 [
    i32 11, label %11
    i32 5, label %23
  ]

10:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %25

11:                                               ; preds = %1
  %12 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %13 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %12, i32 0, i32 0
  %14 = bitcast %union.color_sample* %13 to float*
  %15 = load float, float* %14, align 8
  %16 = fpext float %15 to double
  %17 = fadd double %16, 5.000000e-01
  %18 = call double @llvm.floor.f64(double %17)
  %19 = fptrunc double %18 to float
  %20 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %21 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %20, i32 0, i32 0
  %22 = bitcast %union.color_sample* %21 to float*
  store float %19, float* %22, align 8
  br label %23

23:                                               ; preds = %11, %1
  br label %24

24:                                               ; preds = %23
  store i32 0, i32* %2, align 4
  br label %25

25:                                               ; preds = %24, %10
  %26 = load i32, i32* %2, align 4
  ret i32 %26
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ztruncate(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i32 0, i32 1
  %6 = load i16, i16* %5, align 8
  %7 = zext i16 %6 to i32
  %8 = and i32 %7, 255
  %9 = ashr i32 %8, 2
  switch i32 %9, label %10 [
    i32 11, label %11
    i32 5, label %38
  ]

10:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %40

11:                                               ; preds = %1
  %12 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %13 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %12, i32 0, i32 0
  %14 = bitcast %union.color_sample* %13 to float*
  %15 = load float, float* %14, align 8
  %16 = fpext float %15 to double
  %17 = fcmp olt double %16, 0.000000e+00
  br i1 %17, label %18, label %25

18:                                               ; preds = %11
  %19 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i32 0, i32 0
  %21 = bitcast %union.color_sample* %20 to float*
  %22 = load float, float* %21, align 8
  %23 = fpext float %22 to double
  %24 = call double @llvm.ceil.f64(double %23)
  br label %32

25:                                               ; preds = %11
  %26 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %27 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %26, i32 0, i32 0
  %28 = bitcast %union.color_sample* %27 to float*
  %29 = load float, float* %28, align 8
  %30 = fpext float %29 to double
  %31 = call double @llvm.floor.f64(double %30)
  br label %32

32:                                               ; preds = %25, %18
  %33 = phi double [ %24, %18 ], [ %31, %25 ]
  %34 = fptrunc double %33 to float
  %35 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %36 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %35, i32 0, i32 0
  %37 = bitcast %union.color_sample* %36 to float*
  store float %34, float* %37, align 8
  br label %38

38:                                               ; preds = %32, %1
  br label %39

39:                                               ; preds = %38
  store i32 0, i32* %2, align 4
  br label %40

40:                                               ; preds = %39, %10
  %41 = load i32, i32* %2, align 4
  ret i32 %41
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @zarith_op_init() #0 {
  %1 = call i32 (%struct.op_def*, ...) bitcast (void (%struct.op_def*)* @z_op_init to i32 (%struct.op_def*, ...)*)(%struct.op_def* getelementptr inbounds ([12 x %struct.op_def], [12 x %struct.op_def]* @zarith_op_init.my_defs, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zarray(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i16, align 2
  %6 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = call i32 @make_array(%struct.ref_s* %7, i32 0, i32 770, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.348, i64 0, i64 0))
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %11, label %13

11:                                               ; preds = %1
  %12 = load i32, i32* %4, align 4
  store i32 %12, i32* %2, align 4
  br label %30

13:                                               ; preds = %1
  %14 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 2
  %16 = load i16, i16* %15, align 2
  store i16 %16, i16* %5, align 2
  %17 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i32 0, i32 0
  %19 = bitcast %union.color_sample* %18 to %struct.ref_s**
  %20 = load %struct.ref_s*, %struct.ref_s** %19, align 8
  store %struct.ref_s* %20, %struct.ref_s** %6, align 8
  br label %21

21:                                               ; preds = %25, %13
  %22 = load i16, i16* %5, align 2
  %23 = add i16 %22, -1
  store i16 %23, i16* %5, align 2
  %24 = icmp ne i16 %22, 0
  br i1 %24, label %25, label %29

25:                                               ; preds = %21
  %26 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %27 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %26, i32 1
  store %struct.ref_s* %27, %struct.ref_s** %6, align 8
  %28 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %26, i32 0, i32 1
  store i16 32, i16* %28, align 8
  br label %21

29:                                               ; preds = %21
  store i32 0, i32* %2, align 4
  br label %30

30:                                               ; preds = %29, %11
  %31 = load i32, i32* %2, align 4
  ret i32 %31
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @make_array(%struct.ref_s* %0, i32 %1, i32 %2, i8* %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca %struct.ref_s*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca %struct.ref_s*, align 8
  %11 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %6, align 8
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i8* %3, i8** %9, align 8
  %12 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %13 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %12, i32 0, i32 1
  %14 = load i16, i16* %13, align 8
  %15 = zext i16 %14 to i32
  %16 = and i32 %15, 252
  %17 = icmp eq i32 %16, 20
  br i1 %17, label %19, label %18

18:                                               ; preds = %4
  store i32 -20, i32* %5, align 4
  br label %61

19:                                               ; preds = %4
  %20 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %21 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %20, i32 0, i32 0
  %22 = bitcast %union.color_sample* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = icmp slt i64 %23, 0
  br i1 %24, label %31, label %25

25:                                               ; preds = %19
  %26 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %27 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %26, i32 0, i32 0
  %28 = bitcast %union.color_sample* %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = icmp ugt i64 %29, 268435454
  br i1 %30, label %31, label %32

31:                                               ; preds = %25, %19
  store i32 -15, i32* %5, align 4
  br label %61

32:                                               ; preds = %25
  %33 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %34 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %33, i32 0, i32 0
  %35 = bitcast %union.color_sample* %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = trunc i64 %36 to i32
  store i32 %37, i32* %11, align 4
  %38 = load i32, i32* %11, align 4
  %39 = load i8*, i8** %9, align 8
  %40 = call i8* @alloc(i32 %38, i32 16, i8* %39)
  %41 = bitcast i8* %40 to %struct.ref_s*
  store %struct.ref_s* %41, %struct.ref_s** %10, align 8
  %42 = load %struct.ref_s*, %struct.ref_s** %10, align 8
  %43 = icmp eq %struct.ref_s* %42, null
  br i1 %43, label %44, label %45

44:                                               ; preds = %32
  store i32 -25, i32* %5, align 4
  br label %61

45:                                               ; preds = %32
  %46 = load %struct.ref_s*, %struct.ref_s** %10, align 8
  %47 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %48 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %47, i32 0, i32 0
  %49 = bitcast %union.color_sample* %48 to %struct.ref_s**
  store %struct.ref_s* %46, %struct.ref_s** %49, align 8
  %50 = load i32, i32* %7, align 4
  %51 = shl i32 %50, 2
  %52 = load i32, i32* %8, align 4
  %53 = add nsw i32 %51, %52
  %54 = trunc i32 %53 to i16
  %55 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %56 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %55, i32 0, i32 1
  store i16 %54, i16* %56, align 8
  %57 = load i32, i32* %11, align 4
  %58 = trunc i32 %57 to i16
  %59 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %60 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %59, i32 0, i32 2
  store i16 %58, i16* %60, align 2
  store i32 0, i32* %5, align 4
  br label %61

61:                                               ; preds = %45, %44, %31, %18
  %62 = load i32, i32* %5, align 4
  ret i32 %62
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zaload(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i32 0, i32 1
  %7 = load i16, i16* %6, align 8
  %8 = zext i16 %7 to i32
  %9 = and i32 %8, 255
  %10 = ashr i32 %9, 2
  switch i32 %10, label %11 [
    i32 0, label %12
    i32 10, label %12
  ]

11:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %68

12:                                               ; preds = %1, %1
  br label %13

13:                                               ; preds = %12
  %14 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 1
  %16 = load i16, i16* %15, align 8
  %17 = zext i16 %16 to i32
  %18 = xor i32 %17, -1
  %19 = and i32 %18, 512
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %13
  store i32 -7, i32* %2, align 4
  br label %68

22:                                               ; preds = %13
  %23 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %24 = bitcast %struct.ref_s* %4 to i8*
  %25 = bitcast %struct.ref_s* %23 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %25, i64 16, i1 false)
  %26 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i32 0, i32 2
  %27 = load i16, i16* %26, align 2
  %28 = zext i16 %27 to i64
  %29 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %30 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %31 = ptrtoint %struct.ref_s* %29 to i64
  %32 = ptrtoint %struct.ref_s* %30 to i64
  %33 = sub i64 %31, %32
  %34 = sdiv exact i64 %33, 16
  %35 = icmp sgt i64 %28, %34
  br i1 %35, label %36, label %37

36:                                               ; preds = %22
  store i32 -15, i32* %2, align 4
  br label %68

37:                                               ; preds = %22
  %38 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %39 = bitcast %struct.ref_s* %38 to i8*
  %40 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i32 0, i32 0
  %41 = bitcast %union.color_sample* %40 to %struct.ref_s**
  %42 = load %struct.ref_s*, %struct.ref_s** %41, align 8
  %43 = bitcast %struct.ref_s* %42 to i8*
  %44 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i32 0, i32 2
  %45 = load i16, i16* %44, align 2
  %46 = zext i16 %45 to i64
  %47 = mul i64 %46, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %39, i8* align 1 %43, i64 %47, i1 false)
  %48 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i32 0, i32 2
  %49 = load i16, i16* %48, align 2
  %50 = zext i16 %49 to i32
  %51 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %52 = sext i32 %50 to i64
  %53 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %51, i64 %52
  store %struct.ref_s* %53, %struct.ref_s** %3, align 8
  store %struct.ref_s* %53, %struct.ref_s** @osp, align 8
  %54 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %55 = icmp ugt %struct.ref_s* %53, %54
  br i1 %55, label %56, label %64

56:                                               ; preds = %37
  %57 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i32 0, i32 2
  %58 = load i16, i16* %57, align 2
  %59 = zext i16 %58 to i32
  %60 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %61 = sext i32 %59 to i64
  %62 = sub i64 0, %61
  %63 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %60, i64 %62
  store %struct.ref_s* %63, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %68

64:                                               ; preds = %37
  %65 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %66 = bitcast %struct.ref_s* %65 to i8*
  %67 = bitcast %struct.ref_s* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %66, i8* align 8 %67, i64 16, i1 false)
  store i32 0, i32* %2, align 4
  br label %68

68:                                               ; preds = %64, %56, %36, %21, %11
  %69 = load i32, i32* %2, align 4
  ret i32 %69
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zastore(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i64, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i32 0, i32 1
  %7 = load i16, i16* %6, align 8
  %8 = zext i16 %7 to i32
  %9 = and i32 %8, 252
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %12, label %11

11:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %57

12:                                               ; preds = %1
  %13 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i32 0, i32 1
  %15 = load i16, i16* %14, align 8
  %16 = zext i16 %15 to i32
  %17 = xor i32 %16, -1
  %18 = and i32 %17, 256
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %20, label %21

20:                                               ; preds = %12
  store i32 -7, i32* %2, align 4
  br label %57

21:                                               ; preds = %12
  %22 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i32 0, i32 2
  %24 = load i16, i16* %23, align 2
  %25 = zext i16 %24 to i64
  store i64 %25, i64* %4, align 8
  %26 = load i64, i64* %4, align 8
  %27 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %28 = load %struct.ref_s*, %struct.ref_s** @osbot, align 8
  %29 = ptrtoint %struct.ref_s* %27 to i64
  %30 = ptrtoint %struct.ref_s* %28 to i64
  %31 = sub i64 %29, %30
  %32 = sdiv exact i64 %31, 16
  %33 = icmp ugt i64 %26, %32
  br i1 %33, label %34, label %35

34:                                               ; preds = %21
  store i32 -17, i32* %2, align 4
  br label %57

35:                                               ; preds = %21
  %36 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %37 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %36, i32 0, i32 0
  %38 = bitcast %union.color_sample* %37 to %struct.ref_s**
  %39 = load %struct.ref_s*, %struct.ref_s** %38, align 8
  %40 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %41 = load i64, i64* %4, align 8
  %42 = sub i64 0, %41
  %43 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %40, i64 %42
  %44 = load i64, i64* %4, align 8
  %45 = call i32 (%struct.ref_s*, %struct.ref_s*, i64, ...) bitcast (void (%struct.ref_s*, %struct.ref_s*, i32)* @refcpy to i32 (%struct.ref_s*, %struct.ref_s*, i64, ...)*)(%struct.ref_s* %39, %struct.ref_s* %43, i64 %44)
  %46 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %47 = load i64, i64* %4, align 8
  %48 = sub i64 0, %47
  %49 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %46, i64 %48
  %50 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %51 = bitcast %struct.ref_s* %49 to i8*
  %52 = bitcast %struct.ref_s* %50 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %51, i8* align 8 %52, i64 16, i1 false)
  %53 = load i64, i64* %4, align 8
  %54 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %55 = sub i64 0, %53
  %56 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %54, i64 %55
  store %struct.ref_s* %56, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %57

57:                                               ; preds = %35, %34, %20, %11
  %58 = load i32, i32* %2, align 4
  ret i32 %58
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @zarray_op_init() #0 {
  %1 = call i32 (%struct.op_def*, ...) bitcast (void (%struct.op_def*)* @z_op_init to i32 (%struct.op_def*, ...)*)(%struct.op_def* getelementptr inbounds ([4 x %struct.op_def], [4 x %struct.op_def]* @zarray_op_init.my_defs, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zshow(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = call i32 @setup_show(%struct.ref_s* %5, i32 (%struct.ref_s*)* @finish_show)
  store i32 %6, i32* %4, align 4
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %9, label %11

9:                                                ; preds = %1
  %10 = load i32, i32* %4, align 4
  store i32 %10, i32* %2, align 4
  br label %37

11:                                               ; preds = %1
  %12 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %13 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %12, i32 0, i32 0
  %14 = bitcast %union.color_sample* %13 to i8**
  %15 = load i8*, i8** %14, align 8
  %16 = bitcast i8* %15 to %struct.gs_show_enum_s*
  %17 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %18 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i32 0, i32 0
  %20 = bitcast %union.color_sample* %19 to i8**
  %21 = load i8*, i8** %20, align 8
  %22 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i32 0, i32 2
  %24 = load i16, i16* %23, align 2
  %25 = zext i16 %24 to i32
  %26 = call i32 @gs_show_n_init(%struct.gs_show_enum_s* %16, %struct.gs_state_s* %17, i8* %21, i32 %25)
  store i32 %26, i32* %4, align 4
  %27 = icmp slt i32 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %11
  call void @free_show()
  %29 = load i32, i32* %4, align 4
  store i32 %29, i32* %2, align 4
  br label %37

30:                                               ; preds = %11
  %31 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %32 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %31, i64 -1
  store %struct.ref_s* %32, %struct.ref_s** @osp, align 8
  %33 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %34 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %33, i32 -1
  store %struct.ref_s* %34, %struct.ref_s** %3, align 8
  %35 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %36 = call i32 @show_continue(%struct.ref_s* %35)
  store i32 %36, i32* %2, align 4
  br label %37

37:                                               ; preds = %30, %28, %9
  %38 = load i32, i32* %2, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @finish_show(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @setup_show(%struct.ref_s* %0, i32 (%struct.ref_s*)* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca i32 (%struct.ref_s*)*, align 8
  %6 = alloca %struct.gs_show_enum_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %4, align 8
  store i32 (%struct.ref_s*)* %1, i32 (%struct.ref_s*)** %5, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = zext i16 %9 to i32
  %11 = and i32 %10, 252
  %12 = icmp eq i32 %11, 52
  br i1 %12, label %14, label %13

13:                                               ; preds = %2
  store i32 -20, i32* %3, align 4
  br label %73

14:                                               ; preds = %2
  %15 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %16 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %15, i32 0, i32 1
  %17 = load i16, i16* %16, align 8
  %18 = zext i16 %17 to i32
  %19 = xor i32 %18, -1
  %20 = and i32 %19, 512
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %14
  store i32 -7, i32* %3, align 4
  br label %73

23:                                               ; preds = %14
  %24 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %25 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %24, i64 6
  %26 = load %struct.ref_s*, %struct.ref_s** @estop, align 8
  %27 = icmp ugt %struct.ref_s* %25, %26
  br i1 %27, label %28, label %29

28:                                               ; preds = %23
  store i32 -5, i32* %3, align 4
  br label %73

29:                                               ; preds = %23
  %30 = load i32, i32* @gs_show_enum_sizeof, align 4
  %31 = call i8* @alloc(i32 1, i32 %30, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.12.355, i64 0, i64 0))
  %32 = bitcast i8* %31 to %struct.gs_show_enum_s*
  store %struct.gs_show_enum_s* %32, %struct.gs_show_enum_s** %6, align 8
  %33 = icmp eq %struct.gs_show_enum_s* %32, null
  br i1 %33, label %34, label %35

34:                                               ; preds = %29
  store i32 -25, i32* %3, align 4
  br label %73

35:                                               ; preds = %29
  %36 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %37 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %36, i32 1
  store %struct.ref_s* %37, %struct.ref_s** @esp, align 8
  %38 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %39 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %38, i32 0, i32 0
  %40 = bitcast %union.color_sample* %39 to i16*
  store i16 1, i16* %40, align 8
  %41 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %42 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %41, i32 0, i32 1
  store i16 33, i16* %42, align 8
  %43 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %44 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %43, i32 1
  store %struct.ref_s* %44, %struct.ref_s** @esp, align 8
  %45 = load i32 (%struct.ref_s*)*, i32 (%struct.ref_s*)** %5, align 8
  %46 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %47 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %46, i32 0, i32 0
  %48 = bitcast %union.color_sample* %47 to i32 (%struct.ref_s*)**
  store i32 (%struct.ref_s*)* %45, i32 (%struct.ref_s*)** %48, align 8
  %49 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %50 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %49, i32 0, i32 1
  store i16 37, i16* %50, align 8
  %51 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %52 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %51, i32 0, i32 2
  store i16 0, i16* %52, align 2
  %53 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %54 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %53, i32 1
  store %struct.ref_s* %54, %struct.ref_s** @esp, align 8
  %55 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %56 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %55, i32 0, i32 0
  %57 = bitcast %union.color_sample* %56 to i16*
  store i16 0, i16* %57, align 8
  %58 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %59 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %58, i32 0, i32 1
  store i16 32, i16* %59, align 8
  %60 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %61 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %60, i32 1
  store %struct.ref_s* %61, %struct.ref_s** @esp, align 8
  %62 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %6, align 8
  %63 = bitcast %struct.gs_show_enum_s* %62 to i8*
  %64 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %65 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %64, i32 0, i32 0
  %66 = bitcast %union.color_sample* %65 to i8**
  store i8* %63, i8** %66, align 8
  %67 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %68 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %67, i32 0, i32 1
  store i16 52, i16* %68, align 8
  %69 = load i32, i32* @gs_show_enum_sizeof, align 4
  %70 = trunc i32 %69 to i16
  %71 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %72 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %71, i32 0, i32 2
  store i16 %70, i16* %72, align 2
  store i32 1, i32* %3, align 4
  br label %73

73:                                               ; preds = %35, %34, %28, %22, %13
  %74 = load i32, i32* %3, align 4
  ret i32 %74
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_show() #0 {
  %1 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %2 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %1, i32 0, i32 0
  %3 = bitcast %union.color_sample* %2 to i8**
  %4 = load i8*, i8** %3, align 8
  %5 = bitcast i8* %4 to %struct.gs_show_enum_s*
  %6 = bitcast %struct.gs_show_enum_s* %5 to i8*
  %7 = load i32, i32* @gs_show_enum_sizeof, align 4
  call void @alloc_free(i8* %6, i32 1, i32 %7, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13.354, i64 0, i64 0))
  %8 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i64 -4
  store %struct.ref_s* %9, %struct.ref_s** @esp, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @show_continue(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.gs_show_enum_s*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct.ref_s*, align 8
  %7 = alloca %struct.font_data_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %8 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 0
  %10 = bitcast %union.color_sample* %9 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = bitcast i8* %11 to %struct.gs_show_enum_s*
  store %struct.gs_show_enum_s* %12, %struct.gs_show_enum_s** %4, align 8
  %13 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %4, align 8
  %14 = call i32 @gs_show_next(%struct.gs_show_enum_s* %13)
  store i32 %14, i32* %5, align 4
  %15 = load i32, i32* %5, align 4
  switch i32 %15, label %117 [
    i32 0, label %16
    i32 2, label %31
    i32 1, label %74
  ]

16:                                               ; preds = %1
  %17 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i64 -2
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i32 0, i32 0
  %20 = bitcast %union.color_sample* %19 to i32 (%struct.ref_s*)**
  %21 = load i32 (%struct.ref_s*)*, i32 (%struct.ref_s*)** %20, align 8
  %22 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %23 = call i32 %21(%struct.ref_s* %22)
  store i32 %23, i32* %5, align 4
  call void @free_show()
  %24 = load i32, i32* %5, align 4
  %25 = icmp sge i32 %24, 0
  br i1 %25, label %26, label %27

26:                                               ; preds = %16
  br label %29

27:                                               ; preds = %16
  %28 = load i32, i32* %5, align 4
  br label %29

29:                                               ; preds = %27, %26
  %30 = phi i32 [ 1, %26 ], [ %28, %27 ]
  store i32 %30, i32* %2, align 4
  br label %119

31:                                               ; preds = %1
  %32 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %33 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %32, i64 -1
  store %struct.ref_s* %33, %struct.ref_s** %6, align 8
  %34 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %35 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %34, i64 2
  store %struct.ref_s* %35, %struct.ref_s** %3, align 8
  store %struct.ref_s* %35, %struct.ref_s** @osp, align 8
  %36 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %37 = icmp ugt %struct.ref_s* %35, %36
  br i1 %37, label %38, label %41

38:                                               ; preds = %31
  %39 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %40 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %39, i64 -2
  store %struct.ref_s* %40, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %119

41:                                               ; preds = %31
  %42 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %4, align 8
  %43 = call zeroext i8 @gs_kshow_previous_char(%struct.gs_show_enum_s* %42)
  %44 = zext i8 %43 to i64
  %45 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %46 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %45, i64 -1
  %47 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %46, i32 0, i32 0
  %48 = bitcast %union.color_sample* %47 to i64*
  store i64 %44, i64* %48, align 8
  %49 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %50 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %49, i64 -1
  %51 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %50, i32 0, i32 1
  store i16 20, i16* %51, align 8
  %52 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %4, align 8
  %53 = call zeroext i8 @gs_kshow_next_char(%struct.gs_show_enum_s* %52)
  %54 = zext i8 %53 to i64
  %55 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %56 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %55, i32 0, i32 0
  %57 = bitcast %union.color_sample* %56 to i64*
  store i64 %54, i64* %57, align 8
  %58 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %59 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %58, i32 0, i32 1
  store i16 20, i16* %59, align 8
  %60 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %61 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %60, i32 1
  store %struct.ref_s* %61, %struct.ref_s** @esp, align 8
  %62 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %63 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %62, i32 0, i32 0
  %64 = bitcast %union.color_sample* %63 to i32 (%struct.ref_s*)**
  store i32 (%struct.ref_s*)* @show_continue, i32 (%struct.ref_s*)** %64, align 8
  %65 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %66 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %65, i32 0, i32 1
  store i16 37, i16* %66, align 8
  %67 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %68 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %67, i32 0, i32 2
  store i16 0, i16* %68, align 2
  %69 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %70 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %69, i32 1
  store %struct.ref_s* %70, %struct.ref_s** @esp, align 8
  %71 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %72 = bitcast %struct.ref_s* %70 to i8*
  %73 = bitcast %struct.ref_s* %71 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %72, i8* align 8 %73, i64 16, i1 false)
  store i32 1, i32* %2, align 4
  br label %119

74:                                               ; preds = %1
  %75 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %76 = call %struct.gs_font_s* @gs_currentfont(%struct.gs_state_s* %75)
  %77 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %76, i32 0, i32 4
  %78 = load i8*, i8** %77, align 8
  %79 = bitcast i8* %78 to %struct.font_data_s*
  store %struct.font_data_s* %79, %struct.font_data_s** %7, align 8
  %80 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %81 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %80, i64 2
  store %struct.ref_s* %81, %struct.ref_s** %3, align 8
  store %struct.ref_s* %81, %struct.ref_s** @osp, align 8
  %82 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %83 = icmp ugt %struct.ref_s* %81, %82
  br i1 %83, label %84, label %87

84:                                               ; preds = %74
  %85 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %86 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %85, i64 -2
  store %struct.ref_s* %86, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %119

87:                                               ; preds = %74
  %88 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %89 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %88, i64 -1
  %90 = load %struct.font_data_s*, %struct.font_data_s** %7, align 8
  %91 = getelementptr inbounds %struct.font_data_s, %struct.font_data_s* %90, i32 0, i32 0
  %92 = bitcast %struct.ref_s* %89 to i8*
  %93 = bitcast %struct.ref_s* %91 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %92, i8* align 8 %93, i64 16, i1 false)
  %94 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %4, align 8
  %95 = call zeroext i8 @gs_show_current_char(%struct.gs_show_enum_s* %94)
  %96 = zext i8 %95 to i64
  %97 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %98 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %97, i32 0, i32 0
  %99 = bitcast %union.color_sample* %98 to i64*
  store i64 %96, i64* %99, align 8
  %100 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %101 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %100, i32 0, i32 1
  store i16 20, i16* %101, align 8
  %102 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %103 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %102, i32 1
  store %struct.ref_s* %103, %struct.ref_s** @esp, align 8
  %104 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %105 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %104, i32 0, i32 0
  %106 = bitcast %union.color_sample* %105 to i32 (%struct.ref_s*)**
  store i32 (%struct.ref_s*)* @show_continue, i32 (%struct.ref_s*)** %106, align 8
  %107 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %108 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %107, i32 0, i32 1
  store i16 37, i16* %108, align 8
  %109 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %110 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %109, i32 0, i32 2
  store i16 0, i16* %110, align 2
  %111 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %112 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %111, i32 1
  store %struct.ref_s* %112, %struct.ref_s** @esp, align 8
  %113 = load %struct.font_data_s*, %struct.font_data_s** %7, align 8
  %114 = getelementptr inbounds %struct.font_data_s, %struct.font_data_s* %113, i32 0, i32 1
  %115 = bitcast %struct.ref_s* %112 to i8*
  %116 = bitcast %struct.ref_s* %114 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %115, i8* align 8 %116, i64 16, i1 false)
  store i32 1, i32* %2, align 4
  br label %119

117:                                              ; preds = %1
  call void @free_show()
  %118 = load i32, i32* %5, align 4
  store i32 %118, i32* %2, align 4
  br label %119

119:                                              ; preds = %117, %87, %84, %41, %38, %29
  %120 = load i32, i32* %2, align 4
  ret i32 %120
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zashow(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  %5 = alloca [2 x float], align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i64 -1
  %8 = getelementptr inbounds [2 x float], [2 x float]* %5, i64 0, i64 0
  %9 = call i32 (%struct.ref_s*, i32, float*, ...) bitcast (i32 (%struct.ref_s*, i32, float*)* @num_params to i32 (%struct.ref_s*, i32, float*, ...)*)(%struct.ref_s* %7, i32 2, float* %8)
  store i32 %9, i32* %4, align 4
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %15, label %11

11:                                               ; preds = %1
  %12 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %13 = call i32 @setup_show(%struct.ref_s* %12, i32 (%struct.ref_s*)* @finish_show)
  store i32 %13, i32* %4, align 4
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %11, %1
  %16 = load i32, i32* %4, align 4
  store i32 %16, i32* %2, align 4
  br label %49

17:                                               ; preds = %11
  %18 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i32 0, i32 0
  %20 = bitcast %union.color_sample* %19 to i8**
  %21 = load i8*, i8** %20, align 8
  %22 = bitcast i8* %21 to %struct.gs_show_enum_s*
  %23 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %24 = getelementptr inbounds [2 x float], [2 x float]* %5, i64 0, i64 0
  %25 = load float, float* %24, align 4
  %26 = fpext float %25 to double
  %27 = getelementptr inbounds [2 x float], [2 x float]* %5, i64 0, i64 1
  %28 = load float, float* %27, align 4
  %29 = fpext float %28 to double
  %30 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %31 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %30, i32 0, i32 0
  %32 = bitcast %union.color_sample* %31 to i8**
  %33 = load i8*, i8** %32, align 8
  %34 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %35 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %34, i32 0, i32 2
  %36 = load i16, i16* %35, align 2
  %37 = zext i16 %36 to i32
  %38 = call i32 @gs_ashow_n_init(%struct.gs_show_enum_s* %22, %struct.gs_state_s* %23, double %26, double %29, i8* %33, i32 %37)
  store i32 %38, i32* %4, align 4
  %39 = icmp slt i32 %38, 0
  br i1 %39, label %40, label %42

40:                                               ; preds = %17
  call void @free_show()
  %41 = load i32, i32* %4, align 4
  store i32 %41, i32* %2, align 4
  br label %49

42:                                               ; preds = %17
  %43 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %44 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %43, i64 -3
  store %struct.ref_s* %44, %struct.ref_s** @osp, align 8
  %45 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %46 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %45, i64 -3
  store %struct.ref_s* %46, %struct.ref_s** %3, align 8
  %47 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %48 = call i32 @show_continue(%struct.ref_s* %47)
  store i32 %48, i32* %2, align 4
  br label %49

49:                                               ; preds = %42, %40, %15
  %50 = load i32, i32* %2, align 4
  ret i32 %50
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zwidthshow(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  %5 = alloca [2 x float], align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i64 -1
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = zext i16 %9 to i32
  %11 = and i32 %10, 252
  %12 = icmp eq i32 %11, 20
  br i1 %12, label %14, label %13

13:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %72

14:                                               ; preds = %1
  %15 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %16 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %15, i64 -1
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %16, i32 0, i32 0
  %18 = bitcast %union.color_sample* %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = icmp ugt i64 %19, 255
  br i1 %20, label %21, label %22

21:                                               ; preds = %14
  store i32 -15, i32* %2, align 4
  br label %72

22:                                               ; preds = %14
  %23 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %24 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %23, i64 -2
  %25 = getelementptr inbounds [2 x float], [2 x float]* %5, i64 0, i64 0
  %26 = call i32 (%struct.ref_s*, i32, float*, ...) bitcast (i32 (%struct.ref_s*, i32, float*)* @num_params to i32 (%struct.ref_s*, i32, float*, ...)*)(%struct.ref_s* %24, i32 2, float* %25)
  store i32 %26, i32* %4, align 4
  %27 = icmp slt i32 %26, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %22
  %29 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %30 = call i32 @setup_show(%struct.ref_s* %29, i32 (%struct.ref_s*)* @finish_show)
  store i32 %30, i32* %4, align 4
  %31 = icmp slt i32 %30, 0
  br i1 %31, label %32, label %34

32:                                               ; preds = %28, %22
  %33 = load i32, i32* %4, align 4
  store i32 %33, i32* %2, align 4
  br label %72

34:                                               ; preds = %28
  %35 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %36 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %35, i32 0, i32 0
  %37 = bitcast %union.color_sample* %36 to i8**
  %38 = load i8*, i8** %37, align 8
  %39 = bitcast i8* %38 to %struct.gs_show_enum_s*
  %40 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %41 = getelementptr inbounds [2 x float], [2 x float]* %5, i64 0, i64 0
  %42 = load float, float* %41, align 4
  %43 = fpext float %42 to double
  %44 = getelementptr inbounds [2 x float], [2 x float]* %5, i64 0, i64 1
  %45 = load float, float* %44, align 4
  %46 = fpext float %45 to double
  %47 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %48 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %47, i64 -1
  %49 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %48, i32 0, i32 0
  %50 = bitcast %union.color_sample* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = trunc i64 %51 to i8
  %53 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %54 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %53, i32 0, i32 0
  %55 = bitcast %union.color_sample* %54 to i8**
  %56 = load i8*, i8** %55, align 8
  %57 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %58 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %57, i32 0, i32 2
  %59 = load i16, i16* %58, align 2
  %60 = zext i16 %59 to i32
  %61 = call i32 @gs_widthshow_n_init(%struct.gs_show_enum_s* %39, %struct.gs_state_s* %40, double %43, double %46, i8 signext %52, i8* %56, i32 %60)
  store i32 %61, i32* %4, align 4
  %62 = icmp slt i32 %61, 0
  br i1 %62, label %63, label %65

63:                                               ; preds = %34
  call void @free_show()
  %64 = load i32, i32* %4, align 4
  store i32 %64, i32* %2, align 4
  br label %72

65:                                               ; preds = %34
  %66 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %67 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %66, i64 -4
  store %struct.ref_s* %67, %struct.ref_s** @osp, align 8
  %68 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %69 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %68, i64 -4
  store %struct.ref_s* %69, %struct.ref_s** %3, align 8
  %70 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %71 = call i32 @show_continue(%struct.ref_s* %70)
  store i32 %71, i32* %2, align 4
  br label %72

72:                                               ; preds = %65, %63, %32, %21, %13
  %73 = load i32, i32* %2, align 4
  ret i32 %73
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zawidthshow(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  %5 = alloca [2 x float], align 4
  %6 = alloca [2 x float], align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i64 -3
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 1
  %10 = load i16, i16* %9, align 8
  %11 = zext i16 %10 to i32
  %12 = and i32 %11, 252
  %13 = icmp eq i32 %12, 20
  br i1 %13, label %15, label %14

14:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %85

15:                                               ; preds = %1
  %16 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %16, i64 -3
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i32 0, i32 0
  %19 = bitcast %union.color_sample* %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = icmp ugt i64 %20, 255
  br i1 %21, label %22, label %23

22:                                               ; preds = %15
  store i32 -15, i32* %2, align 4
  br label %85

23:                                               ; preds = %15
  %24 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %25 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %24, i64 -4
  %26 = getelementptr inbounds [2 x float], [2 x float]* %5, i64 0, i64 0
  %27 = call i32 (%struct.ref_s*, i32, float*, ...) bitcast (i32 (%struct.ref_s*, i32, float*)* @num_params to i32 (%struct.ref_s*, i32, float*, ...)*)(%struct.ref_s* %25, i32 2, float* %26)
  store i32 %27, i32* %4, align 4
  %28 = icmp slt i32 %27, 0
  br i1 %28, label %39, label %29

29:                                               ; preds = %23
  %30 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %31 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %30, i64 -1
  %32 = getelementptr inbounds [2 x float], [2 x float]* %6, i64 0, i64 0
  %33 = call i32 (%struct.ref_s*, i32, float*, ...) bitcast (i32 (%struct.ref_s*, i32, float*)* @num_params to i32 (%struct.ref_s*, i32, float*, ...)*)(%struct.ref_s* %31, i32 2, float* %32)
  store i32 %33, i32* %4, align 4
  %34 = icmp slt i32 %33, 0
  br i1 %34, label %39, label %35

35:                                               ; preds = %29
  %36 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %37 = call i32 @setup_show(%struct.ref_s* %36, i32 (%struct.ref_s*)* @finish_show)
  store i32 %37, i32* %4, align 4
  %38 = icmp slt i32 %37, 0
  br i1 %38, label %39, label %41

39:                                               ; preds = %35, %29, %23
  %40 = load i32, i32* %4, align 4
  store i32 %40, i32* %2, align 4
  br label %85

41:                                               ; preds = %35
  %42 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %43 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %42, i32 0, i32 0
  %44 = bitcast %union.color_sample* %43 to i8**
  %45 = load i8*, i8** %44, align 8
  %46 = bitcast i8* %45 to %struct.gs_show_enum_s*
  %47 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %48 = getelementptr inbounds [2 x float], [2 x float]* %5, i64 0, i64 0
  %49 = load float, float* %48, align 4
  %50 = fpext float %49 to double
  %51 = getelementptr inbounds [2 x float], [2 x float]* %5, i64 0, i64 1
  %52 = load float, float* %51, align 4
  %53 = fpext float %52 to double
  %54 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %55 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %54, i64 -3
  %56 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %55, i32 0, i32 0
  %57 = bitcast %union.color_sample* %56 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = trunc i64 %58 to i8
  %60 = getelementptr inbounds [2 x float], [2 x float]* %6, i64 0, i64 0
  %61 = load float, float* %60, align 4
  %62 = fpext float %61 to double
  %63 = getelementptr inbounds [2 x float], [2 x float]* %6, i64 0, i64 1
  %64 = load float, float* %63, align 4
  %65 = fpext float %64 to double
  %66 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %67 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %66, i32 0, i32 0
  %68 = bitcast %union.color_sample* %67 to i8**
  %69 = load i8*, i8** %68, align 8
  %70 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %71 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %70, i32 0, i32 2
  %72 = load i16, i16* %71, align 2
  %73 = zext i16 %72 to i32
  %74 = call i32 @gs_awidthshow_n_init(%struct.gs_show_enum_s* %46, %struct.gs_state_s* %47, double %50, double %53, i8 signext %59, double %62, double %65, i8* %69, i32 %73)
  store i32 %74, i32* %4, align 4
  %75 = icmp slt i32 %74, 0
  br i1 %75, label %76, label %78

76:                                               ; preds = %41
  call void @free_show()
  %77 = load i32, i32* %4, align 4
  store i32 %77, i32* %2, align 4
  br label %85

78:                                               ; preds = %41
  %79 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %80 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %79, i64 -6
  store %struct.ref_s* %80, %struct.ref_s** @osp, align 8
  %81 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %82 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %81, i64 -6
  store %struct.ref_s* %82, %struct.ref_s** %3, align 8
  %83 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %84 = call i32 @show_continue(%struct.ref_s* %83)
  store i32 %84, i32* %2, align 4
  br label %85

85:                                               ; preds = %78, %76, %39, %22, %14
  %86 = load i32, i32* %2, align 4
  ret i32 %86
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zkshow(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i64 -1
  %7 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = zext i16 %8 to i32
  %10 = and i32 %9, 255
  %11 = ashr i32 %10, 2
  switch i32 %11, label %12 [
    i32 0, label %13
    i32 10, label %13
  ]

12:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %62

13:                                               ; preds = %1, %1
  br label %14

14:                                               ; preds = %13
  %15 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %16 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %15, i64 -1
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %16, i32 0, i32 1
  %18 = load i16, i16* %17, align 8
  %19 = zext i16 %18 to i32
  %20 = xor i32 %19, -1
  %21 = and i32 %20, 3
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %23, label %24

23:                                               ; preds = %14
  store i32 -7, i32* %2, align 4
  br label %62

24:                                               ; preds = %14
  %25 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %26 = call i32 @setup_show(%struct.ref_s* %25, i32 (%struct.ref_s*)* @finish_show)
  store i32 %26, i32* %4, align 4
  %27 = icmp slt i32 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %24
  %29 = load i32, i32* %4, align 4
  store i32 %29, i32* %2, align 4
  br label %62

30:                                               ; preds = %24
  %31 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %32 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %31, i32 0, i32 0
  %33 = bitcast %union.color_sample* %32 to i8**
  %34 = load i8*, i8** %33, align 8
  %35 = bitcast i8* %34 to %struct.gs_show_enum_s*
  %36 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %37 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %38 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %37, i32 0, i32 0
  %39 = bitcast %union.color_sample* %38 to i8**
  %40 = load i8*, i8** %39, align 8
  %41 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %42 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %41, i32 0, i32 2
  %43 = load i16, i16* %42, align 2
  %44 = zext i16 %43 to i32
  %45 = call i32 @gs_kshow_n_init(%struct.gs_show_enum_s* %35, %struct.gs_state_s* %36, i8* %40, i32 %44)
  store i32 %45, i32* %4, align 4
  %46 = icmp slt i32 %45, 0
  br i1 %46, label %47, label %49

47:                                               ; preds = %30
  call void @free_show()
  %48 = load i32, i32* %4, align 4
  store i32 %48, i32* %2, align 4
  br label %62

49:                                               ; preds = %30
  %50 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %51 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %50, i64 -1
  %52 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %53 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %52, i64 -1
  %54 = bitcast %struct.ref_s* %51 to i8*
  %55 = bitcast %struct.ref_s* %53 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* align 8 %55, i64 16, i1 false)
  %56 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %57 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %56, i64 -2
  store %struct.ref_s* %57, %struct.ref_s** @osp, align 8
  %58 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %59 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %58, i64 -2
  store %struct.ref_s* %59, %struct.ref_s** %3, align 8
  %60 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %61 = call i32 @show_continue(%struct.ref_s* %60)
  store i32 %61, i32* %2, align 4
  br label %62

62:                                               ; preds = %49, %47, %28, %23, %12
  %63 = load i32, i32* %2, align 4
  ret i32 %63
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zstringwidth(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = call i32 @setup_show(%struct.ref_s* %5, i32 (%struct.ref_s*)* @finish_stringwidth)
  store i32 %6, i32* %4, align 4
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %9, label %11

9:                                                ; preds = %1
  %10 = load i32, i32* %4, align 4
  store i32 %10, i32* %2, align 4
  br label %37

11:                                               ; preds = %1
  %12 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %13 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %12, i32 0, i32 0
  %14 = bitcast %union.color_sample* %13 to i8**
  %15 = load i8*, i8** %14, align 8
  %16 = bitcast i8* %15 to %struct.gs_show_enum_s*
  %17 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %18 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i32 0, i32 0
  %20 = bitcast %union.color_sample* %19 to i8**
  %21 = load i8*, i8** %20, align 8
  %22 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i32 0, i32 2
  %24 = load i16, i16* %23, align 2
  %25 = zext i16 %24 to i32
  %26 = call i32 @gs_stringwidth_n_init(%struct.gs_show_enum_s* %16, %struct.gs_state_s* %17, i8* %21, i32 %25)
  store i32 %26, i32* %4, align 4
  %27 = icmp slt i32 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %11
  call void @free_show()
  %29 = load i32, i32* %4, align 4
  store i32 %29, i32* %2, align 4
  br label %37

30:                                               ; preds = %11
  %31 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %32 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %31, i64 -1
  store %struct.ref_s* %32, %struct.ref_s** @osp, align 8
  %33 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %34 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %33, i32 -1
  store %struct.ref_s* %34, %struct.ref_s** %3, align 8
  %35 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %36 = call i32 @show_continue(%struct.ref_s* %35)
  store i32 %36, i32* %2, align 4
  br label %37

37:                                               ; preds = %30, %28, %9
  %38 = load i32, i32* %2, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @finish_stringwidth(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.gs_point_s, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i32 0, i32 0
  %7 = bitcast %union.color_sample* %6 to i8**
  %8 = load i8*, i8** %7, align 8
  %9 = bitcast i8* %8 to %struct.gs_show_enum_s*
  call void @gs_show_width(%struct.gs_show_enum_s* %9, %struct.gs_point_s* %4)
  %10 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %11 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %10, i64 2
  store %struct.ref_s* %11, %struct.ref_s** %3, align 8
  store %struct.ref_s* %11, %struct.ref_s** @osp, align 8
  %12 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %13 = icmp ugt %struct.ref_s* %11, %12
  br i1 %13, label %14, label %17

14:                                               ; preds = %1
  %15 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %16 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %15, i64 -2
  store %struct.ref_s* %16, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %34

17:                                               ; preds = %1
  %18 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %4, i32 0, i32 0
  %19 = load float, float* %18, align 4
  %20 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %21 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %20, i64 -1
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i32 0, i32 0
  %23 = bitcast %union.color_sample* %22 to float*
  store float %19, float* %23, align 8
  %24 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %25 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %24, i64 -1
  %26 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %25, i32 0, i32 1
  store i16 44, i16* %26, align 8
  %27 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %4, i32 0, i32 1
  %28 = load float, float* %27, align 4
  %29 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %30 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %29, i32 0, i32 0
  %31 = bitcast %union.color_sample* %30 to float*
  store float %28, float* %31, align 8
  %32 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %33 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %32, i32 0, i32 1
  store i16 44, i16* %33, align 8
  store i32 0, i32* %2, align 4
  br label %34

34:                                               ; preds = %17, %14
  %35 = load i32, i32* %2, align 4
  ret i32 %35
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcharpath(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i32 0, i32 1
  %7 = load i16, i16* %6, align 8
  %8 = zext i16 %7 to i32
  %9 = and i32 %8, 252
  %10 = icmp eq i32 %9, 4
  br i1 %10, label %12, label %11

11:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %53

12:                                               ; preds = %1
  %13 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i64 -1
  %15 = call i32 @setup_show(%struct.ref_s* %14, i32 (%struct.ref_s*)* @finish_show)
  store i32 %15, i32* %4, align 4
  %16 = load i32, i32* %4, align 4
  %17 = icmp slt i32 %16, 0
  br i1 %17, label %18, label %20

18:                                               ; preds = %12
  %19 = load i32, i32* %4, align 4
  store i32 %19, i32* %2, align 4
  br label %53

20:                                               ; preds = %12
  %21 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i32 0, i32 0
  %23 = bitcast %union.color_sample* %22 to i8**
  %24 = load i8*, i8** %23, align 8
  %25 = bitcast i8* %24 to %struct.gs_show_enum_s*
  %26 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %27 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %28 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %27, i64 -1
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i32 0, i32 0
  %30 = bitcast %union.color_sample* %29 to i8**
  %31 = load i8*, i8** %30, align 8
  %32 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %33 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %32, i64 -1
  %34 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %33, i32 0, i32 2
  %35 = load i16, i16* %34, align 2
  %36 = zext i16 %35 to i32
  %37 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %38 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %37, i32 0, i32 0
  %39 = bitcast %union.color_sample* %38 to i16*
  %40 = load i16, i16* %39, align 8
  %41 = zext i16 %40 to i32
  %42 = call i32 @gs_charpath_n_init(%struct.gs_show_enum_s* %25, %struct.gs_state_s* %26, i8* %31, i32 %36, i32 %41)
  store i32 %42, i32* %4, align 4
  %43 = icmp slt i32 %42, 0
  br i1 %43, label %44, label %46

44:                                               ; preds = %20
  call void @free_show()
  %45 = load i32, i32* %4, align 4
  store i32 %45, i32* %2, align 4
  br label %53

46:                                               ; preds = %20
  %47 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %48 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %47, i64 -2
  store %struct.ref_s* %48, %struct.ref_s** @osp, align 8
  %49 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %50 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %49, i64 -2
  store %struct.ref_s* %50, %struct.ref_s** %3, align 8
  %51 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %52 = call i32 @show_continue(%struct.ref_s* %51)
  store i32 %52, i32* %2, align 4
  br label %53

53:                                               ; preds = %46, %44, %18, %11
  %54 = load i32, i32* %2, align 4
  ret i32 %54
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zsetcachedevice(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca [6 x float], align 16
  %5 = alloca i32, align 4
  %6 = alloca %struct.gs_show_enum_s*, align 8
  %7 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  store i32 6, i32* %5, align 4
  %8 = call %struct.gs_show_enum_s* @find_show()
  store %struct.gs_show_enum_s* %8, %struct.gs_show_enum_s** %6, align 8
  %9 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %10 = getelementptr inbounds [6 x float], [6 x float]* %4, i64 0, i64 0
  %11 = call i32 (%struct.ref_s*, i32, float*, ...) bitcast (i32 (%struct.ref_s*, i32, float*)* @num_params to i32 (%struct.ref_s*, i32, float*, ...)*)(%struct.ref_s* %9, i32 6, float* %10)
  store i32 %11, i32* %7, align 4
  %12 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %6, align 8
  %13 = icmp eq %struct.gs_show_enum_s* %12, null
  br i1 %13, label %14, label %15

14:                                               ; preds = %1
  store i32 -21, i32* %2, align 4
  br label %82

15:                                               ; preds = %1
  %16 = load i32, i32* %7, align 4
  %17 = icmp slt i32 %16, 0
  br i1 %17, label %18, label %52

18:                                               ; preds = %15
  %19 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i32 0, i32 1
  %21 = load i16, i16* %20, align 8
  %22 = zext i16 %21 to i32
  %23 = and i32 %22, 255
  %24 = ashr i32 %23, 2
  switch i32 %24, label %25 [
    i32 0, label %26
    i32 10, label %26
  ]

25:                                               ; preds = %18
  store i32 -20, i32* %2, align 4
  br label %82

26:                                               ; preds = %18, %18
  br label %27

27:                                               ; preds = %26
  %28 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i32 0, i32 2
  %30 = load i16, i16* %29, align 2
  %31 = zext i16 %30 to i32
  %32 = icmp ne i32 %31, 4
  br i1 %32, label %49, label %33

33:                                               ; preds = %27
  %34 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %35 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %34, i64 -1
  %36 = getelementptr inbounds [6 x float], [6 x float]* %4, i64 0, i64 0
  %37 = call i32 (%struct.ref_s*, i32, float*, ...) bitcast (i32 (%struct.ref_s*, i32, float*)* @num_params to i32 (%struct.ref_s*, i32, float*, ...)*)(%struct.ref_s* %35, i32 2, float* %36)
  %38 = icmp slt i32 %37, 0
  br i1 %38, label %49, label %39

39:                                               ; preds = %33
  %40 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %41 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %40, i32 0, i32 0
  %42 = bitcast %union.color_sample* %41 to %struct.ref_s**
  %43 = load %struct.ref_s*, %struct.ref_s** %42, align 8
  %44 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %43, i64 3
  %45 = getelementptr inbounds [6 x float], [6 x float]* %4, i64 0, i64 0
  %46 = getelementptr inbounds float, float* %45, i64 2
  %47 = call i32 (%struct.ref_s*, i32, float*, ...) bitcast (i32 (%struct.ref_s*, i32, float*)* @num_params to i32 (%struct.ref_s*, i32, float*, ...)*)(%struct.ref_s* %44, i32 4, float* %46)
  %48 = icmp slt i32 %47, 0
  br i1 %48, label %49, label %51

49:                                               ; preds = %39, %33, %27
  %50 = load i32, i32* %7, align 4
  store i32 %50, i32* %2, align 4
  br label %82

51:                                               ; preds = %39
  store i32 3, i32* %5, align 4
  br label %52

52:                                               ; preds = %51, %15
  %53 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %6, align 8
  %54 = getelementptr inbounds [6 x float], [6 x float]* %4, i64 0, i64 0
  %55 = load float, float* %54, align 16
  %56 = fpext float %55 to double
  %57 = getelementptr inbounds [6 x float], [6 x float]* %4, i64 0, i64 1
  %58 = load float, float* %57, align 4
  %59 = fpext float %58 to double
  %60 = getelementptr inbounds [6 x float], [6 x float]* %4, i64 0, i64 2
  %61 = load float, float* %60, align 8
  %62 = fpext float %61 to double
  %63 = getelementptr inbounds [6 x float], [6 x float]* %4, i64 0, i64 3
  %64 = load float, float* %63, align 4
  %65 = fpext float %64 to double
  %66 = getelementptr inbounds [6 x float], [6 x float]* %4, i64 0, i64 4
  %67 = load float, float* %66, align 16
  %68 = fpext float %67 to double
  %69 = getelementptr inbounds [6 x float], [6 x float]* %4, i64 0, i64 5
  %70 = load float, float* %69, align 4
  %71 = fpext float %70 to double
  %72 = call i32 @gs_setcachedevice(%struct.gs_show_enum_s* %53, double %56, double %59, double %62, double %65, double %68, double %71)
  store i32 %72, i32* %7, align 4
  %73 = icmp slt i32 %72, 0
  br i1 %73, label %74, label %76

74:                                               ; preds = %52
  %75 = load i32, i32* %7, align 4
  store i32 %75, i32* %2, align 4
  br label %82

76:                                               ; preds = %52
  %77 = load i32, i32* %5, align 4
  %78 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %79 = sext i32 %77 to i64
  %80 = sub i64 0, %79
  %81 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %78, i64 %80
  store %struct.ref_s* %81, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %82

82:                                               ; preds = %76, %74, %49, %25, %14
  %83 = load i32, i32* %2, align 4
  ret i32 %83
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gs_show_enum_s* @find_show() #0 {
  %1 = alloca %struct.gs_show_enum_s*, align 8
  %2 = alloca %struct.ref_s*, align 8
  %3 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  store %struct.ref_s* %3, %struct.ref_s** %2, align 8
  br label %4

4:                                                ; preds = %27, %0
  %5 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i32 0, i32 1
  %7 = load i16, i16* %6, align 8
  %8 = zext i16 %7 to i32
  %9 = and i32 %8, 255
  %10 = ashr i32 %9, 2
  %11 = icmp eq i32 %10, 8
  br i1 %11, label %12, label %19

12:                                               ; preds = %4
  %13 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i32 0, i32 0
  %15 = bitcast %union.color_sample* %14 to i16*
  %16 = load i16, i16* %15, align 8
  %17 = zext i16 %16 to i32
  %18 = icmp eq i32 %17, 1
  br label %19

19:                                               ; preds = %12, %4
  %20 = phi i1 [ false, %4 ], [ %18, %12 ]
  %21 = xor i1 %20, true
  br i1 %21, label %22, label %28

22:                                               ; preds = %19
  %23 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %24 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %23, i32 -1
  store %struct.ref_s* %24, %struct.ref_s** %2, align 8
  %25 = icmp ult %struct.ref_s* %24, getelementptr inbounds ([150 x %struct.ref_s], [150 x %struct.ref_s]* @estack, i64 0, i64 0)
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  store %struct.gs_show_enum_s* null, %struct.gs_show_enum_s** %1, align 8
  br label %35

27:                                               ; preds = %22
  br label %4

28:                                               ; preds = %19
  %29 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %30 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %29, i64 3
  %31 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %30, i32 0, i32 0
  %32 = bitcast %union.color_sample* %31 to i8**
  %33 = load i8*, i8** %32, align 8
  %34 = bitcast i8* %33 to %struct.gs_show_enum_s*
  store %struct.gs_show_enum_s* %34, %struct.gs_show_enum_s** %1, align 8
  br label %35

35:                                               ; preds = %28, %26
  %36 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %1, align 8
  ret %struct.gs_show_enum_s* %36
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zsetcharwidth(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca [2 x float], align 4
  %5 = alloca %struct.gs_show_enum_s*, align 8
  %6 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %7 = call %struct.gs_show_enum_s* @find_show()
  store %struct.gs_show_enum_s* %7, %struct.gs_show_enum_s** %5, align 8
  %8 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %9 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 0
  %10 = call i32 (%struct.ref_s*, i32, float*, ...) bitcast (i32 (%struct.ref_s*, i32, float*)* @num_params to i32 (%struct.ref_s*, i32, float*, ...)*)(%struct.ref_s* %8, i32 2, float* %9)
  store i32 %10, i32* %6, align 4
  %11 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %12 = icmp eq %struct.gs_show_enum_s* %11, null
  br i1 %12, label %13, label %14

13:                                               ; preds = %1
  store i32 -21, i32* %2, align 4
  br label %32

14:                                               ; preds = %1
  %15 = load i32, i32* %6, align 4
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %27, label %17

17:                                               ; preds = %14
  %18 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %19 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 0
  %20 = load float, float* %19, align 4
  %21 = fpext float %20 to double
  %22 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 1
  %23 = load float, float* %22, align 4
  %24 = fpext float %23 to double
  %25 = call i32 @gs_setcharwidth(%struct.gs_show_enum_s* %18, double %21, double %24)
  store i32 %25, i32* %6, align 4
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %27, label %29

27:                                               ; preds = %17, %14
  %28 = load i32, i32* %6, align 4
  store i32 %28, i32* %2, align 4
  br label %32

29:                                               ; preds = %17
  %30 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %31 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %30, i64 -2
  store %struct.ref_s* %31, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %32

32:                                               ; preds = %29, %27, %13
  %33 = load i32, i32* %2, align 4
  ret i32 %33
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ztype1addpath(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  %5 = alloca %struct.gs_show_enum_s*, align 8
  %6 = alloca %struct.gs_font_s*, align 8
  %7 = alloca %struct.font_data_s*, align 8
  %8 = alloca %struct.gs_type1_state_s*, align 8
  %9 = alloca i64, align 8
  %10 = alloca %struct.timeval, align 8
  %11 = alloca %struct.timeval, align 8
  %12 = alloca i32, align 4
  %13 = alloca %struct.gs_type1_data_s, align 8
  %14 = alloca %struct.z1_data, align 8
  %15 = alloca i8*, align 8
  %16 = alloca %struct.ref_s*, align 8
  %17 = alloca %struct.gx_path_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %18 = call %struct.gs_show_enum_s* @find_show()
  store %struct.gs_show_enum_s* %18, %struct.gs_show_enum_s** %5, align 8
  %19 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %20 = call %struct.gs_font_s* @gs_currentfont(%struct.gs_state_s* %19)
  store %struct.gs_font_s* %20, %struct.gs_font_s** %6, align 8
  %21 = load %struct.gs_font_s*, %struct.gs_font_s** %6, align 8
  %22 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %21, i32 0, i32 4
  %23 = load i8*, i8** %22, align 8
  %24 = bitcast i8* %23 to %struct.font_data_s*
  store %struct.font_data_s* %24, %struct.font_data_s** %7, align 8
  store i8* null, i8** %15, align 8
  %25 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %26 = icmp eq %struct.gs_show_enum_s* %25, null
  br i1 %26, label %27, label %28

27:                                               ; preds = %1
  store i32 -21, i32* %2, align 4
  br label %207

28:                                               ; preds = %1
  %29 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %30 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %29, i32 0, i32 1
  %31 = load i16, i16* %30, align 8
  %32 = zext i16 %31 to i32
  %33 = and i32 %32, 252
  %34 = icmp eq i32 %33, 52
  br i1 %34, label %36, label %35

35:                                               ; preds = %28
  store i32 -20, i32* %2, align 4
  br label %207

36:                                               ; preds = %28
  %37 = load %struct.font_data_s*, %struct.font_data_s** %7, align 8
  %38 = getelementptr inbounds %struct.font_data_s, %struct.font_data_s* %37, i32 0, i32 5
  %39 = bitcast %struct.gs_type1_data_s* %13 to i8*
  %40 = bitcast %struct.gs_type1_data_s* %38 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 32, i1 false)
  %41 = load %struct.font_data_s*, %struct.font_data_s** %7, align 8
  %42 = getelementptr inbounds %struct.z1_data, %struct.z1_data* %14, i32 0, i32 0
  store %struct.font_data_s* %41, %struct.font_data_s** %42, align 8
  %43 = getelementptr inbounds %struct.z1_data, %struct.z1_data* %14, i32 0, i32 2
  %44 = getelementptr inbounds [2 x i64], [2 x i64]* %43, i64 0, i64 0
  %45 = getelementptr inbounds %struct.z1_data, %struct.z1_data* %14, i32 0, i32 1
  store i64* %44, i64** %45, align 8
  %46 = bitcast %struct.z1_data* %14 to i8*
  %47 = getelementptr inbounds %struct.gs_type1_data_s, %struct.gs_type1_data_s* %13, i32 0, i32 2
  store i8* %46, i8** %47, align 8
  %48 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %49 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %48, i32 0, i32 2
  %50 = load i16, i16* %49, align 2
  %51 = zext i16 %50 to i32
  %52 = getelementptr inbounds %struct.gs_type1_data_s, %struct.gs_type1_data_s* %13, i32 0, i32 3
  %53 = load i32, i32* %52, align 8
  %54 = icmp sle i32 %51, %53
  br i1 %54, label %55, label %58

55:                                               ; preds = %36
  %56 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %57 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %56, i64 -1
  store %struct.ref_s* %57, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %207

58:                                               ; preds = %36
  %59 = load i32, i32* @gs_type1_state_sizeof, align 4
  %60 = call i8* @alloc(i32 1, i32 %59, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.356, i64 0, i64 0))
  %61 = bitcast i8* %60 to %struct.gs_type1_state_s*
  store %struct.gs_type1_state_s* %61, %struct.gs_type1_state_s** %8, align 8
  %62 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %8, align 8
  %63 = icmp eq %struct.gs_type1_state_s* %62, null
  br i1 %63, label %64, label %65

64:                                               ; preds = %58
  store i32 -25, i32* %2, align 4
  br label %207

65:                                               ; preds = %58
  %66 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %8, align 8
  %67 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %68 = load %struct.gs_show_enum_s*, %struct.gs_show_enum_s** %5, align 8
  %69 = call i32 @gs_show_in_charpath(%struct.gs_show_enum_s* %68)
  %70 = load %struct.gs_font_s*, %struct.gs_font_s** %6, align 8
  %71 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %70, i32 0, i32 11
  %72 = load i32, i32* %71, align 4
  %73 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %74 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %73, i32 0, i32 0
  %75 = bitcast %union.color_sample* %74 to i8**
  %76 = load i8*, i8** %75, align 8
  %77 = call i32 @gs_type1_init(%struct.gs_type1_state_s* %66, %struct.gs_show_enum_s* %67, i32 %69, i32 %72, i8* %76, %struct.gs_type1_data_s* %13)
  store i32 %77, i32* %4, align 4
  %78 = load i32, i32* %4, align 4
  %79 = icmp slt i32 %78, 0
  br i1 %79, label %80, label %85

80:                                               ; preds = %65
  %81 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %8, align 8
  %82 = bitcast %struct.gs_type1_state_s* %81 to i8*
  %83 = load i32, i32* @gs_type1_state_sizeof, align 4
  call void @alloc_free(i8* %82, i32 1, i32 %83, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.356, i64 0, i64 0))
  %84 = load i32, i32* %4, align 4
  store i32 %84, i32* %2, align 4
  br label %207

85:                                               ; preds = %65
  br label %86

86:                                               ; preds = %186, %185, %178, %146, %132, %85
  %87 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %8, align 8
  %88 = load i8*, i8** %15, align 8
  %89 = call i32 @gs_type1_interpret(%struct.gs_type1_state_s* %87, i8* %88)
  store i32 %89, i32* %4, align 4
  store i8* null, i8** %15, align 8
  %90 = load i32, i32* %4, align 4
  %91 = icmp sgt i32 %90, 0
  br i1 %91, label %92, label %196

92:                                               ; preds = %86
  %93 = load i32, i32* %4, align 4
  %94 = and i32 %93, 1
  %95 = icmp ne i32 %94, 0
  br i1 %95, label %96, label %137

96:                                               ; preds = %92
  %97 = load i32, i32* %4, align 4
  %98 = ashr i32 %97, 1
  store i32 %98, i32* %4, align 4
  %99 = load i32, i32* %4, align 4
  %100 = load %struct.font_data_s*, %struct.font_data_s** %7, align 8
  %101 = getelementptr inbounds %struct.font_data_s, %struct.font_data_s* %100, i32 0, i32 2
  %102 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %101, i32 0, i32 2
  %103 = load i16, i16* %102, align 2
  %104 = zext i16 %103 to i32
  %105 = icmp sge i32 %99, %104
  br i1 %105, label %106, label %107

106:                                              ; preds = %96
  store i32 -15, i32* %2, align 4
  br label %207

107:                                              ; preds = %96
  %108 = load %struct.font_data_s*, %struct.font_data_s** %7, align 8
  %109 = getelementptr inbounds %struct.font_data_s, %struct.font_data_s* %108, i32 0, i32 3
  %110 = load %struct.font_data_s*, %struct.font_data_s** %7, align 8
  %111 = getelementptr inbounds %struct.font_data_s, %struct.font_data_s* %110, i32 0, i32 3
  %112 = load %struct.font_data_s*, %struct.font_data_s** %7, align 8
  %113 = getelementptr inbounds %struct.font_data_s, %struct.font_data_s* %112, i32 0, i32 2
  %114 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %113, i32 0, i32 0
  %115 = bitcast %union.color_sample* %114 to %struct.ref_s**
  %116 = load %struct.ref_s*, %struct.ref_s** %115, align 8
  %117 = load i32, i32* %4, align 4
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %116, i64 %118
  %120 = call i32 @dict_lookup(%struct.ref_s* %109, %struct.ref_s* %111, %struct.ref_s* %119, %struct.ref_s** %16)
  %121 = icmp sle i32 %120, 0
  br i1 %121, label %122, label %123

122:                                              ; preds = %107
  store i32 -21, i32* %2, align 4
  br label %207

123:                                              ; preds = %107
  %124 = load %struct.ref_s*, %struct.ref_s** %16, align 8
  %125 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %124, i32 0, i32 1
  %126 = load i16, i16* %125, align 8
  %127 = zext i16 %126 to i32
  %128 = and i32 %127, 255
  %129 = ashr i32 %128, 2
  %130 = icmp ne i32 %129, 13
  br i1 %130, label %131, label %132

131:                                              ; preds = %123
  store i32 -10, i32* %2, align 4
  br label %207

132:                                              ; preds = %123
  %133 = load %struct.ref_s*, %struct.ref_s** %16, align 8
  %134 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %133, i32 0, i32 0
  %135 = bitcast %union.color_sample* %134 to i8**
  %136 = load i8*, i8** %135, align 8
  store i8* %136, i8** %15, align 8
  br label %86

137:                                              ; preds = %92
  %138 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %139 = getelementptr inbounds %struct.gs_state_s, %struct.gs_state_s* %138, i32 0, i32 7
  %140 = load %struct.gx_path_s*, %struct.gx_path_s** %139, align 8
  store %struct.gx_path_s* %140, %struct.gx_path_s** %17, align 8
  %141 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %8, align 8
  %142 = call i32 @gs_type1_pop(%struct.gs_type1_state_s* %141, i64* %9)
  %143 = load i32, i32* %4, align 4
  %144 = ashr i32 %143, 1
  %145 = sub nsw i32 %144, 1
  switch i32 %145, label %194 [
    i32 0, label %146
    i32 1, label %178
    i32 2, label %185
    i32 3, label %186
  ]

146:                                              ; preds = %137
  %147 = load %struct.gx_path_s*, %struct.gx_path_s** %17, align 8
  %148 = call i32 @gx_path_current_point(%struct.gx_path_s* %147, %struct.timeval* %11)
  %149 = load %struct.gx_path_s*, %struct.gx_path_s** %17, align 8
  %150 = getelementptr inbounds %struct.timeval, %struct.timeval* %10, i32 0, i32 0
  %151 = load i64, i64* %150, align 8
  %152 = getelementptr inbounds %struct.timeval, %struct.timeval* %10, i32 0, i32 1
  %153 = load i64, i64* %152, align 8
  %154 = call i32 @gx_path_add_point(%struct.gx_path_s* %149, i64 %151, i64 %153)
  %155 = load i32, i32* %12, align 4
  %156 = trunc i32 %155 to i8
  %157 = load %struct.gx_path_s*, %struct.gx_path_s** %17, align 8
  %158 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %157, i32 0, i32 11
  store i8 %156, i8* %158, align 1
  %159 = load %struct.gx_path_s*, %struct.gx_path_s** %17, align 8
  %160 = getelementptr inbounds %struct.timeval, %struct.timeval* %11, i32 0, i32 0
  %161 = load i64, i64* %160, align 8
  %162 = getelementptr inbounds %struct.timeval, %struct.timeval* %11, i32 0, i32 1
  %163 = load i64, i64* %162, align 8
  %164 = call i32 @gx_path_add_line(%struct.gx_path_s* %159, i64 %161, i64 %163)
  %165 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %8, align 8
  %166 = getelementptr inbounds %struct.z1_data, %struct.z1_data* %14, i32 0, i32 2
  %167 = getelementptr inbounds [2 x i64], [2 x i64]* %166, i64 0, i64 0
  %168 = call i32 @gs_type1_pop(%struct.gs_type1_state_s* %165, i64* %167)
  %169 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %8, align 8
  %170 = getelementptr inbounds %struct.z1_data, %struct.z1_data* %14, i32 0, i32 2
  %171 = getelementptr inbounds [2 x i64], [2 x i64]* %170, i64 0, i64 1
  %172 = call i32 @gs_type1_pop(%struct.gs_type1_state_s* %169, i64* %171)
  %173 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %8, align 8
  %174 = call i32 @gs_type1_pop(%struct.gs_type1_state_s* %173, i64* %9)
  %175 = getelementptr inbounds %struct.z1_data, %struct.z1_data* %14, i32 0, i32 2
  %176 = getelementptr inbounds [2 x i64], [2 x i64]* %175, i64 0, i64 2
  %177 = getelementptr inbounds %struct.z1_data, %struct.z1_data* %14, i32 0, i32 1
  store i64* %176, i64** %177, align 8
  br label %86

178:                                              ; preds = %137
  %179 = load %struct.gx_path_s*, %struct.gx_path_s** %17, align 8
  %180 = call i32 @gx_path_current_point(%struct.gx_path_s* %179, %struct.timeval* %10)
  %181 = load %struct.gx_path_s*, %struct.gx_path_s** %17, align 8
  %182 = getelementptr inbounds %struct.gx_path_s, %struct.gx_path_s* %181, i32 0, i32 11
  %183 = load i8, i8* %182, align 1
  %184 = sext i8 %183 to i32
  store i32 %184, i32* %12, align 4
  br label %86

185:                                              ; preds = %137
  br label %86

186:                                              ; preds = %137
  %187 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %8, align 8
  %188 = call i32 @gs_type1_pop(%struct.gs_type1_state_s* %187, i64* %9)
  %189 = getelementptr inbounds %struct.z1_data, %struct.z1_data* %14, i32 0, i32 2
  %190 = getelementptr inbounds [2 x i64], [2 x i64]* %189, i64 0, i64 0
  store i64 12288, i64* %190, align 8
  %191 = getelementptr inbounds %struct.z1_data, %struct.z1_data* %14, i32 0, i32 2
  %192 = getelementptr inbounds [2 x i64], [2 x i64]* %191, i64 0, i64 1
  %193 = getelementptr inbounds %struct.z1_data, %struct.z1_data* %14, i32 0, i32 1
  store i64* %192, i64** %193, align 8
  br label %86

194:                                              ; preds = %137
  store i32 -15, i32* %4, align 4
  br label %195

195:                                              ; preds = %194
  br label %196

196:                                              ; preds = %195, %86
  %197 = load %struct.gs_type1_state_s*, %struct.gs_type1_state_s** %8, align 8
  %198 = bitcast %struct.gs_type1_state_s* %197 to i8*
  %199 = load i32, i32* @gs_type1_state_sizeof, align 4
  call void @alloc_free(i8* %198, i32 1, i32 %199, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.356, i64 0, i64 0))
  %200 = load i32, i32* %4, align 4
  %201 = icmp sge i32 %200, 0
  br i1 %201, label %202, label %205

202:                                              ; preds = %196
  %203 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %204 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %203, i64 -1
  store %struct.ref_s* %204, %struct.ref_s** @osp, align 8
  br label %205

205:                                              ; preds = %202, %196
  %206 = load i32, i32* %4, align 4
  store i32 %206, i32* %2, align 4
  br label %207

207:                                              ; preds = %205, %131, %122, %106, %80, %64, %55, %35, %27
  %208 = load i32, i32* %2, align 4
  ret i32 %208
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ztype1imagepath(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca [4 x float], align 16
  %5 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i64 -7
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = zext i16 %9 to i32
  %11 = and i32 %10, 252
  %12 = icmp eq i32 %11, 52
  br i1 %12, label %14, label %13

13:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %114

14:                                               ; preds = %1
  %15 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %16 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %15, i64 -6
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %16, i32 0, i32 1
  %18 = load i16, i16* %17, align 8
  %19 = zext i16 %18 to i32
  %20 = and i32 %19, 252
  %21 = icmp eq i32 %20, 20
  br i1 %21, label %23, label %22

22:                                               ; preds = %14
  store i32 -20, i32* %2, align 4
  br label %114

23:                                               ; preds = %14
  %24 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %25 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %24, i64 -5
  %26 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %25, i32 0, i32 1
  %27 = load i16, i16* %26, align 8
  %28 = zext i16 %27 to i32
  %29 = and i32 %28, 252
  %30 = icmp eq i32 %29, 20
  br i1 %30, label %32, label %31

31:                                               ; preds = %23
  store i32 -20, i32* %2, align 4
  br label %114

32:                                               ; preds = %23
  %33 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %34 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %33, i64 -1
  %35 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 0, i64 0
  %36 = call i32 (%struct.ref_s*, i32, float*, ...) bitcast (i32 (%struct.ref_s*, i32, float*)* @num_params to i32 (%struct.ref_s*, i32, float*, ...)*)(%struct.ref_s* %34, i32 4, float* %35)
  store i32 %36, i32* %5, align 4
  %37 = icmp slt i32 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %32
  %39 = load i32, i32* %5, align 4
  store i32 %39, i32* %2, align 4
  br label %114

40:                                               ; preds = %32
  %41 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %42 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %41, i32 0, i32 1
  %43 = load i16, i16* %42, align 8
  %44 = zext i16 %43 to i32
  %45 = and i32 %44, 252
  %46 = icmp eq i32 %45, 52
  br i1 %46, label %48, label %47

47:                                               ; preds = %40
  store i32 -20, i32* %2, align 4
  br label %114

48:                                               ; preds = %40
  %49 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %50 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %49, i32 0, i32 1
  %51 = load i16, i16* %50, align 8
  %52 = zext i16 %51 to i32
  %53 = xor i32 %52, -1
  %54 = and i32 %53, 256
  %55 = icmp ne i32 %54, 0
  br i1 %55, label %56, label %57

56:                                               ; preds = %48
  store i32 -7, i32* %2, align 4
  br label %114

57:                                               ; preds = %48
  %58 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %59 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %60 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %59, i64 -7
  %61 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %60, i32 0, i32 0
  %62 = bitcast %union.color_sample* %61 to i8**
  %63 = load i8*, i8** %62, align 8
  %64 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %65 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %64, i64 -6
  %66 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %65, i32 0, i32 0
  %67 = bitcast %union.color_sample* %66 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = trunc i64 %68 to i32
  %70 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %71 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %70, i64 -5
  %72 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %71, i32 0, i32 0
  %73 = bitcast %union.color_sample* %72 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = trunc i64 %74 to i32
  %76 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 0, i64 0
  %77 = load float, float* %76, align 16
  %78 = fpext float %77 to double
  %79 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 0, i64 1
  %80 = load float, float* %79, align 4
  %81 = fpext float %80 to double
  %82 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 0, i64 2
  %83 = load float, float* %82, align 8
  %84 = fpext float %83 to double
  %85 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 0, i64 3
  %86 = load float, float* %85, align 4
  %87 = fpext float %86 to double
  %88 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %89 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %88, i32 0, i32 0
  %90 = bitcast %union.color_sample* %89 to i8**
  %91 = load i8*, i8** %90, align 8
  %92 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %93 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %92, i32 0, i32 2
  %94 = load i16, i16* %93, align 2
  %95 = zext i16 %94 to i32
  %96 = call i32 @gs_type1imagepath(%struct.gs_state_s* %58, i8* %63, i32 %69, i32 %75, double %78, double %81, double %84, double %87, i8* %91, i32 %95)
  store i32 %96, i32* %5, align 4
  %97 = load i32, i32* %5, align 4
  %98 = icmp slt i32 %97, 0
  br i1 %98, label %99, label %101

99:                                               ; preds = %57
  %100 = load i32, i32* %5, align 4
  store i32 %100, i32* %2, align 4
  br label %114

101:                                              ; preds = %57
  %102 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %103 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %102, i64 -7
  %104 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %105 = bitcast %struct.ref_s* %103 to i8*
  %106 = bitcast %struct.ref_s* %104 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %105, i8* align 8 %106, i64 16, i1 false)
  %107 = load i32, i32* %5, align 4
  %108 = trunc i32 %107 to i16
  %109 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %110 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %109, i64 -7
  %111 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %110, i32 0, i32 2
  store i16 %108, i16* %111, align 2
  %112 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %113 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %112, i64 -7
  store %struct.ref_s* %113, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %114

114:                                              ; preds = %101, %99, %56, %47, %38, %31, %22, %13
  %115 = load i32, i32* %2, align 4
  ret i32 %115
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @z1_subr_proc(%struct.gs_type1_data_s* %0, i32 %1, i8** %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.gs_type1_data_s*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8**, align 8
  %8 = alloca %struct.font_data_s*, align 8
  %9 = alloca %struct.ref_s*, align 8
  store %struct.gs_type1_data_s* %0, %struct.gs_type1_data_s** %5, align 8
  store i32 %1, i32* %6, align 4
  store i8** %2, i8*** %7, align 8
  %10 = load %struct.gs_type1_data_s*, %struct.gs_type1_data_s** %5, align 8
  %11 = getelementptr inbounds %struct.gs_type1_data_s, %struct.gs_type1_data_s* %10, i32 0, i32 2
  %12 = load i8*, i8** %11, align 8
  %13 = bitcast i8* %12 to %struct.z1_data*
  %14 = getelementptr inbounds %struct.z1_data, %struct.z1_data* %13, i32 0, i32 0
  %15 = load %struct.font_data_s*, %struct.font_data_s** %14, align 8
  store %struct.font_data_s* %15, %struct.font_data_s** %8, align 8
  %16 = load i32, i32* %6, align 4
  %17 = icmp slt i32 %16, 0
  br i1 %17, label %26, label %18

18:                                               ; preds = %3
  %19 = load i32, i32* %6, align 4
  %20 = load %struct.font_data_s*, %struct.font_data_s** %8, align 8
  %21 = getelementptr inbounds %struct.font_data_s, %struct.font_data_s* %20, i32 0, i32 4
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i32 0, i32 2
  %23 = load i16, i16* %22, align 2
  %24 = zext i16 %23 to i32
  %25 = icmp sge i32 %19, %24
  br i1 %25, label %26, label %27

26:                                               ; preds = %18, %3
  store i32 -15, i32* %4, align 4
  br label %49

27:                                               ; preds = %18
  %28 = load %struct.font_data_s*, %struct.font_data_s** %8, align 8
  %29 = getelementptr inbounds %struct.font_data_s, %struct.font_data_s* %28, i32 0, i32 4
  %30 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %29, i32 0, i32 0
  %31 = bitcast %union.color_sample* %30 to %struct.ref_s**
  %32 = load %struct.ref_s*, %struct.ref_s** %31, align 8
  %33 = load i32, i32* %6, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %32, i64 %34
  store %struct.ref_s* %35, %struct.ref_s** %9, align 8
  %36 = load %struct.ref_s*, %struct.ref_s** %9, align 8
  %37 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %36, i32 0, i32 1
  %38 = load i16, i16* %37, align 8
  %39 = zext i16 %38 to i32
  %40 = and i32 %39, 252
  %41 = icmp eq i32 %40, 52
  br i1 %41, label %43, label %42

42:                                               ; preds = %27
  store i32 -20, i32* %4, align 4
  br label %49

43:                                               ; preds = %27
  %44 = load %struct.ref_s*, %struct.ref_s** %9, align 8
  %45 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %44, i32 0, i32 0
  %46 = bitcast %union.color_sample* %45 to i8**
  %47 = load i8*, i8** %46, align 8
  %48 = load i8**, i8*** %7, align 8
  store i8* %47, i8** %48, align 8
  store i32 0, i32* %4, align 4
  br label %49

49:                                               ; preds = %43, %42, %26
  %50 = load i32, i32* %4, align 4
  ret i32 %50
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @z1_pop_proc(%struct.gs_type1_data_s* %0, i64* %1) #0 {
  %3 = alloca %struct.gs_type1_data_s*, align 8
  %4 = alloca i64*, align 8
  store %struct.gs_type1_data_s* %0, %struct.gs_type1_data_s** %3, align 8
  store i64* %1, i64** %4, align 8
  %5 = load %struct.gs_type1_data_s*, %struct.gs_type1_data_s** %3, align 8
  %6 = getelementptr inbounds %struct.gs_type1_data_s, %struct.gs_type1_data_s* %5, i32 0, i32 2
  %7 = load i8*, i8** %6, align 8
  %8 = bitcast i8* %7 to %struct.z1_data*
  %9 = getelementptr inbounds %struct.z1_data, %struct.z1_data* %8, i32 0, i32 1
  %10 = load i64*, i64** %9, align 8
  %11 = getelementptr inbounds i64, i64* %10, i32 -1
  store i64* %11, i64** %9, align 8
  %12 = load i64, i64* %11, align 8
  %13 = load i64*, i64** %4, align 8
  store i64 %12, i64* %13, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @zchar_op_init() #0 {
  %1 = call i32 (%struct.op_def*, ...) bitcast (void (%struct.op_def*)* @z_op_init to i32 (%struct.op_def*, ...)*)(%struct.op_def* getelementptr inbounds ([12 x %struct.op_def], [12 x %struct.op_def]* @zchar_op_init.my_defs, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcurrentgscolor(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i64 1
  store %struct.ref_s* %6, %struct.ref_s** %3, align 8
  store %struct.ref_s* %6, %struct.ref_s** @osp, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %8 = icmp ugt %struct.ref_s* %6, %7
  br i1 %8, label %9, label %12

9:                                                ; preds = %1
  %10 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %11 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %10, i64 -1
  store %struct.ref_s* %11, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %29

12:                                               ; preds = %1
  %13 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %14 = call i32 @make_color(%struct.ref_s* %13)
  store i32 %14, i32* %4, align 4
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %24, label %16

16:                                               ; preds = %12
  %17 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %18 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i32 0, i32 0
  %20 = bitcast %union.color_sample* %19 to %struct.gs_color_s**
  %21 = load %struct.gs_color_s*, %struct.gs_color_s** %20, align 8
  %22 = call i32 @gs_currentgscolor(%struct.gs_state_s* %17, %struct.gs_color_s* %21)
  store i32 %22, i32* %4, align 4
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %16, %12
  %25 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %26 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %25, i64 -1
  store %struct.ref_s* %26, %struct.ref_s** @osp, align 8
  br label %27

27:                                               ; preds = %24, %16
  %28 = load i32, i32* %4, align 4
  store i32 %28, i32* %2, align 4
  br label %29

29:                                               ; preds = %27, %9
  %30 = load i32, i32* %2, align 4
  ret i32 %30
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @make_color(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.gs_color_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load i32, i32* @gs_color_sizeof, align 4
  %6 = call i8* @alloc(i32 1, i32 %5, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2.370, i64 0, i64 0))
  %7 = bitcast i8* %6 to %struct.gs_color_s*
  store %struct.gs_color_s* %7, %struct.gs_color_s** %4, align 8
  %8 = load %struct.gs_color_s*, %struct.gs_color_s** %4, align 8
  %9 = icmp eq %struct.gs_color_s* %8, null
  br i1 %9, label %10, label %11

10:                                               ; preds = %1
  store i32 -25, i32* %2, align 4
  br label %18

11:                                               ; preds = %1
  %12 = load %struct.gs_color_s*, %struct.gs_color_s** %4, align 8
  %13 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i32 0, i32 0
  %15 = bitcast %union.color_sample* %14 to %struct.gs_color_s**
  store %struct.gs_color_s* %12, %struct.gs_color_s** %15, align 8
  %16 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %16, i32 0, i32 1
  store i16 56, i16* %17, align 8
  store i32 0, i32* %2, align 4
  br label %18

18:                                               ; preds = %11, %10
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zsetgscolor(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i32 0, i32 1
  %7 = load i16, i16* %6, align 8
  %8 = zext i16 %7 to i32
  %9 = and i32 %8, 252
  %10 = icmp eq i32 %9, 56
  br i1 %10, label %12, label %11

11:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %25

12:                                               ; preds = %1
  %13 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %14 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 0
  %16 = bitcast %union.color_sample* %15 to %struct.gs_color_s**
  %17 = load %struct.gs_color_s*, %struct.gs_color_s** %16, align 8
  %18 = call i32 @gs_setgscolor(%struct.gs_state_s* %13, %struct.gs_color_s* %17)
  store i32 %18, i32* %4, align 4
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %12
  %21 = load i32, i32* %4, align 4
  store i32 %21, i32* %2, align 4
  br label %25

22:                                               ; preds = %12
  %23 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %24 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %23, i64 -1
  store %struct.ref_s* %24, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %25

25:                                               ; preds = %22, %20, %11
  %26 = load i32, i32* %2, align 4
  ret i32 %26
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @zcolor_op_init() #0 {
  %1 = call i32 (%struct.op_def*, ...) bitcast (void (%struct.op_def*)* @z_op_init to i32 (%struct.op_def*, ...)*)(%struct.op_def* getelementptr inbounds ([3 x %struct.op_def], [3 x %struct.op_def]* @zcolor_op_init.my_defs, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zexec(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** getelementptr inbounds ([6 x %struct.ref_s*], [6 x %struct.ref_s*]* @osp_nargs, i64 0, i64 0), align 16
  %6 = icmp ult %struct.ref_s* %4, %5
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  store i32 -17, i32* %2, align 4
  br label %23

8:                                                ; preds = %1
  %9 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i64 1
  %11 = load %struct.ref_s*, %struct.ref_s** @estop, align 8
  %12 = icmp ugt %struct.ref_s* %10, %11
  br i1 %12, label %13, label %14

13:                                               ; preds = %8
  store i32 -5, i32* %2, align 4
  br label %23

14:                                               ; preds = %8
  %15 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %16 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %15, i32 1
  store %struct.ref_s* %16, %struct.ref_s** @esp, align 8
  %17 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %18 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %19 = bitcast %struct.ref_s* %17 to i8*
  %20 = bitcast %struct.ref_s* %18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 16, i1 false)
  %21 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i64 -1
  store %struct.ref_s* %22, %struct.ref_s** @osp, align 8
  store i32 1, i32* %2, align 4
  br label %23

23:                                               ; preds = %14, %13, %7
  %24 = load i32, i32* %2, align 4
  ret i32 %24
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zif(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i64 -1
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i32 0, i32 1
  %7 = load i16, i16* %6, align 8
  %8 = zext i16 %7 to i32
  %9 = and i32 %8, 252
  %10 = icmp eq i32 %9, 4
  br i1 %10, label %12, label %11

11:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %35

12:                                               ; preds = %1
  %13 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i64 -1
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 0
  %16 = bitcast %union.color_sample* %15 to i16*
  %17 = load i16, i16* %16, align 8
  %18 = icmp ne i16 %17, 0
  br i1 %18, label %19, label %32

19:                                               ; preds = %12
  %20 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %21 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %20, i64 1
  %22 = load %struct.ref_s*, %struct.ref_s** @estop, align 8
  %23 = icmp ugt %struct.ref_s* %21, %22
  br i1 %23, label %24, label %25

24:                                               ; preds = %19
  store i32 -5, i32* %2, align 4
  br label %35

25:                                               ; preds = %19
  %26 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %27 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %26, i32 1
  store %struct.ref_s* %27, %struct.ref_s** @esp, align 8
  %28 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %29 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %30 = bitcast %struct.ref_s* %28 to i8*
  %31 = bitcast %struct.ref_s* %29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 %31, i64 16, i1 false)
  br label %32

32:                                               ; preds = %25, %12
  %33 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %34 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %33, i64 -2
  store %struct.ref_s* %34, %struct.ref_s** @osp, align 8
  store i32 1, i32* %2, align 4
  br label %35

35:                                               ; preds = %32, %24, %11
  %36 = load i32, i32* %2, align 4
  ret i32 %36
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zifelse(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i64 -2
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i32 0, i32 1
  %7 = load i16, i16* %6, align 8
  %8 = zext i16 %7 to i32
  %9 = and i32 %8, 252
  %10 = icmp eq i32 %9, 4
  br i1 %10, label %12, label %11

11:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %42

12:                                               ; preds = %1
  %13 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i64 1
  %15 = load %struct.ref_s*, %struct.ref_s** @estop, align 8
  %16 = icmp ugt %struct.ref_s* %14, %15
  br i1 %16, label %17, label %18

17:                                               ; preds = %12
  store i32 -5, i32* %2, align 4
  br label %42

18:                                               ; preds = %12
  %19 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i32 1
  store %struct.ref_s* %20, %struct.ref_s** @esp, align 8
  %21 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i64 -2
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i32 0, i32 0
  %24 = bitcast %union.color_sample* %23 to i16*
  %25 = load i16, i16* %24, align 8
  %26 = icmp ne i16 %25, 0
  br i1 %26, label %27, label %34

27:                                               ; preds = %18
  %28 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i64 0
  %30 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %31 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %30, i64 -1
  %32 = bitcast %struct.ref_s* %29 to i8*
  %33 = bitcast %struct.ref_s* %31 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %33, i64 16, i1 false)
  br label %39

34:                                               ; preds = %18
  %35 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %36 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %37 = bitcast %struct.ref_s* %35 to i8*
  %38 = bitcast %struct.ref_s* %36 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 16, i1 false)
  br label %39

39:                                               ; preds = %34, %27
  %40 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %41 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %40, i64 -3
  store %struct.ref_s* %41, %struct.ref_s** @osp, align 8
  store i32 1, i32* %2, align 4
  br label %42

42:                                               ; preds = %39, %17, %11
  %43 = load i32, i32* %2, align 4
  ret i32 %43
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zfor(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i64 -1
  %7 = call i32 @num_params(%struct.ref_s* %6, i32 3, float* null)
  store i32 %7, i32* %4, align 4
  %8 = load i32, i32* %4, align 4
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %1
  %11 = load i32, i32* %4, align 4
  store i32 %11, i32* %2, align 4
  br label %115

12:                                               ; preds = %1
  %13 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i64 7
  %15 = load %struct.ref_s*, %struct.ref_s** @estop, align 8
  %16 = icmp ugt %struct.ref_s* %14, %15
  br i1 %16, label %17, label %18

17:                                               ; preds = %12
  store i32 -5, i32* %2, align 4
  br label %115

18:                                               ; preds = %12
  %19 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i32 1
  store %struct.ref_s* %20, %struct.ref_s** @esp, align 8
  %21 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i32 0, i32 0
  %23 = bitcast %union.color_sample* %22 to i16*
  store i16 2, i16* %23, align 8
  %24 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %25 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %24, i32 0, i32 1
  store i16 33, i16* %25, align 8
  %26 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %27 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %26, i32 1
  store %struct.ref_s* %27, %struct.ref_s** @esp, align 8
  %28 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i64 -3
  %30 = bitcast %struct.ref_s* %27 to i8*
  %31 = bitcast %struct.ref_s* %29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 %31, i64 16, i1 false)
  %32 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %33 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %32, i32 1
  store %struct.ref_s* %33, %struct.ref_s** @esp, align 8
  %34 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %35 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %34, i64 -2
  %36 = bitcast %struct.ref_s* %33 to i8*
  %37 = bitcast %struct.ref_s* %35 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 %37, i64 16, i1 false)
  %38 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %39 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %38, i32 1
  store %struct.ref_s* %39, %struct.ref_s** @esp, align 8
  %40 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %41 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %40, i64 -1
  %42 = bitcast %struct.ref_s* %39 to i8*
  %43 = bitcast %struct.ref_s* %41 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* align 8 %43, i64 16, i1 false)
  %44 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %45 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %44, i32 1
  store %struct.ref_s* %45, %struct.ref_s** @esp, align 8
  %46 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %47 = bitcast %struct.ref_s* %45 to i8*
  %48 = bitcast %struct.ref_s* %46 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %47, i8* align 8 %48, i64 16, i1 false)
  %49 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %50 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %49, i64 -4
  store %struct.ref_s* %50, %struct.ref_s** @osp, align 8
  %51 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %52 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %51, i64 -4
  store %struct.ref_s* %52, %struct.ref_s** %3, align 8
  %53 = load i32, i32* %4, align 4
  %54 = icmp eq i32 %53, 7
  br i1 %54, label %55, label %58

55:                                               ; preds = %18
  %56 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %57 = call i32 @for_int_continue(%struct.ref_s* %56)
  store i32 %57, i32* %2, align 4
  br label %115

58:                                               ; preds = %18
  %59 = load i32, i32* %4, align 4
  %60 = and i32 %59, 1
  %61 = icmp ne i32 %60, 0
  br i1 %61, label %62, label %76

62:                                               ; preds = %58
  %63 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %64 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %63, i64 -3
  %65 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %64, i32 0, i32 0
  %66 = bitcast %union.color_sample* %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = sitofp i64 %67 to float
  %69 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %70 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %69, i64 -3
  %71 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %70, i32 0, i32 0
  %72 = bitcast %union.color_sample* %71 to float*
  store float %68, float* %72, align 8
  %73 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %74 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %73, i64 -3
  %75 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %74, i32 0, i32 1
  store i16 44, i16* %75, align 8
  br label %76

76:                                               ; preds = %62, %58
  %77 = load i32, i32* %4, align 4
  %78 = and i32 %77, 2
  %79 = icmp ne i32 %78, 0
  br i1 %79, label %80, label %94

80:                                               ; preds = %76
  %81 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %82 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %81, i64 -2
  %83 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %82, i32 0, i32 0
  %84 = bitcast %union.color_sample* %83 to i64*
  %85 = load i64, i64* %84, align 8
  %86 = sitofp i64 %85 to float
  %87 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %88 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %87, i64 -2
  %89 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %88, i32 0, i32 0
  %90 = bitcast %union.color_sample* %89 to float*
  store float %86, float* %90, align 8
  %91 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %92 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %91, i64 -2
  %93 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %92, i32 0, i32 1
  store i16 44, i16* %93, align 8
  br label %94

94:                                               ; preds = %80, %76
  %95 = load i32, i32* %4, align 4
  %96 = and i32 %95, 4
  %97 = icmp ne i32 %96, 0
  br i1 %97, label %98, label %112

98:                                               ; preds = %94
  %99 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %100 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %99, i64 -1
  %101 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %100, i32 0, i32 0
  %102 = bitcast %union.color_sample* %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = sitofp i64 %103 to float
  %105 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %106 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %105, i64 -1
  %107 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %106, i32 0, i32 0
  %108 = bitcast %union.color_sample* %107 to float*
  store float %104, float* %108, align 8
  %109 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %110 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %109, i64 -1
  %111 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %110, i32 0, i32 1
  store i16 44, i16* %111, align 8
  br label %112

112:                                              ; preds = %98, %94
  %113 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %114 = call i32 @for_real_continue(%struct.ref_s* %113)
  store i32 %114, i32* %2, align 4
  br label %115

115:                                              ; preds = %112, %55, %17, %10
  %116 = load i32, i32* %2, align 4
  ret i32 %116
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @for_int_continue(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i64 -3
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 0
  %10 = bitcast %union.color_sample* %9 to i64*
  %11 = load i64, i64* %10, align 8
  store i64 %11, i64* %5, align 8
  %12 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %13 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %12, i64 -2
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i32 0, i32 0
  %15 = bitcast %union.color_sample* %14 to i64*
  %16 = load i64, i64* %15, align 8
  store i64 %16, i64* %6, align 8
  %17 = load i64, i64* %6, align 8
  %18 = icmp sge i64 %17, 0
  br i1 %18, label %19, label %27

19:                                               ; preds = %1
  %20 = load i64, i64* %5, align 8
  %21 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i64 -1
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i32 0, i32 0
  %24 = bitcast %union.color_sample* %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = icmp sgt i64 %20, %25
  br i1 %26, label %35, label %38

27:                                               ; preds = %1
  %28 = load i64, i64* %5, align 8
  %29 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %30 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %29, i64 -1
  %31 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %30, i32 0, i32 0
  %32 = bitcast %union.color_sample* %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = icmp slt i64 %28, %33
  br i1 %34, label %35, label %38

35:                                               ; preds = %27, %19
  %36 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %37 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %36, i64 -5
  store %struct.ref_s* %37, %struct.ref_s** @esp, align 8
  store i32 1, i32* %2, align 4
  br label %75

38:                                               ; preds = %27, %19
  %39 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %40 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %39, i64 1
  store %struct.ref_s* %40, %struct.ref_s** %3, align 8
  store %struct.ref_s* %40, %struct.ref_s** @osp, align 8
  %41 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %42 = icmp ugt %struct.ref_s* %40, %41
  br i1 %42, label %43, label %46

43:                                               ; preds = %38
  %44 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %45 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %44, i64 -1
  store %struct.ref_s* %45, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %75

46:                                               ; preds = %38
  %47 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %48 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %49 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %48, i64 -3
  %50 = bitcast %struct.ref_s* %47 to i8*
  %51 = bitcast %struct.ref_s* %49 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %51, i64 16, i1 false)
  %52 = load i64, i64* %5, align 8
  %53 = load i64, i64* %6, align 8
  %54 = add nsw i64 %52, %53
  %55 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %56 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %55, i64 -3
  %57 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %56, i32 0, i32 0
  %58 = bitcast %union.color_sample* %57 to i64*
  store i64 %54, i64* %58, align 8
  %59 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %60 = bitcast %struct.ref_s* %4 to i8*
  %61 = bitcast %struct.ref_s* %59 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %60, i8* align 8 %61, i64 16, i1 false)
  %62 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %63 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %62, i32 1
  store %struct.ref_s* %63, %struct.ref_s** @esp, align 8
  %64 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %65 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %64, i32 0, i32 0
  %66 = bitcast %union.color_sample* %65 to i32 (%struct.ref_s*)**
  store i32 (%struct.ref_s*)* @for_int_continue, i32 (%struct.ref_s*)** %66, align 8
  %67 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %68 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %67, i32 0, i32 1
  store i16 37, i16* %68, align 8
  %69 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %70 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %69, i32 0, i32 2
  store i16 0, i16* %70, align 2
  %71 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %72 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %71, i32 1
  store %struct.ref_s* %72, %struct.ref_s** @esp, align 8
  %73 = bitcast %struct.ref_s* %72 to i8*
  %74 = bitcast %struct.ref_s* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %73, i8* align 8 %74, i64 16, i1 false)
  store i32 1, i32* %2, align 4
  br label %75

75:                                               ; preds = %46, %43, %35
  %76 = load i32, i32* %2, align 4
  ret i32 %76
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @for_real_continue(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s, align 8
  %5 = alloca float, align 4
  %6 = alloca float, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i64 -3
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 0
  %10 = bitcast %union.color_sample* %9 to float*
  %11 = load float, float* %10, align 8
  store float %11, float* %5, align 4
  %12 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %13 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %12, i64 -2
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i32 0, i32 0
  %15 = bitcast %union.color_sample* %14 to float*
  %16 = load float, float* %15, align 8
  store float %16, float* %6, align 4
  %17 = load float, float* %6, align 4
  %18 = fcmp oge float %17, 0.000000e+00
  br i1 %18, label %19, label %27

19:                                               ; preds = %1
  %20 = load float, float* %5, align 4
  %21 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i64 -1
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i32 0, i32 0
  %24 = bitcast %union.color_sample* %23 to float*
  %25 = load float, float* %24, align 8
  %26 = fcmp ogt float %20, %25
  br i1 %26, label %35, label %38

27:                                               ; preds = %1
  %28 = load float, float* %5, align 4
  %29 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %30 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %29, i64 -1
  %31 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %30, i32 0, i32 0
  %32 = bitcast %union.color_sample* %31 to float*
  %33 = load float, float* %32, align 8
  %34 = fcmp olt float %28, %33
  br i1 %34, label %35, label %38

35:                                               ; preds = %27, %19
  %36 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %37 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %36, i64 -5
  store %struct.ref_s* %37, %struct.ref_s** @esp, align 8
  store i32 1, i32* %2, align 4
  br label %75

38:                                               ; preds = %27, %19
  %39 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %40 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %39, i64 1
  store %struct.ref_s* %40, %struct.ref_s** %3, align 8
  store %struct.ref_s* %40, %struct.ref_s** @osp, align 8
  %41 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %42 = icmp ugt %struct.ref_s* %40, %41
  br i1 %42, label %43, label %46

43:                                               ; preds = %38
  %44 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %45 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %44, i64 -1
  store %struct.ref_s* %45, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %75

46:                                               ; preds = %38
  %47 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %48 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %49 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %48, i64 -3
  %50 = bitcast %struct.ref_s* %47 to i8*
  %51 = bitcast %struct.ref_s* %49 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %51, i64 16, i1 false)
  %52 = load float, float* %5, align 4
  %53 = load float, float* %6, align 4
  %54 = fadd float %52, %53
  %55 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %56 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %55, i64 -3
  %57 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %56, i32 0, i32 0
  %58 = bitcast %union.color_sample* %57 to float*
  store float %54, float* %58, align 8
  %59 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %60 = bitcast %struct.ref_s* %4 to i8*
  %61 = bitcast %struct.ref_s* %59 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %60, i8* align 8 %61, i64 16, i1 false)
  %62 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %63 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %62, i32 1
  store %struct.ref_s* %63, %struct.ref_s** @esp, align 8
  %64 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %65 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %64, i32 0, i32 0
  %66 = bitcast %union.color_sample* %65 to i32 (%struct.ref_s*)**
  store i32 (%struct.ref_s*)* @for_real_continue, i32 (%struct.ref_s*)** %66, align 8
  %67 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %68 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %67, i32 0, i32 1
  store i16 37, i16* %68, align 8
  %69 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %70 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %69, i32 0, i32 2
  store i16 0, i16* %70, align 2
  %71 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %72 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %71, i32 1
  store %struct.ref_s* %72, %struct.ref_s** @esp, align 8
  %73 = bitcast %struct.ref_s* %72 to i8*
  %74 = bitcast %struct.ref_s* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %73, i8* align 8 %74, i64 16, i1 false)
  store i32 1, i32* %2, align 4
  br label %75

75:                                               ; preds = %46, %43, %35
  %76 = load i32, i32* %2, align 4
  ret i32 %76
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zrepeat(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i64 -1
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i32 0, i32 1
  %7 = load i16, i16* %6, align 8
  %8 = zext i16 %7 to i32
  %9 = and i32 %8, 252
  %10 = icmp eq i32 %9, 20
  br i1 %10, label %12, label %11

11:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %50

12:                                               ; preds = %1
  %13 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i64 -1
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 0
  %16 = bitcast %union.color_sample* %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = icmp slt i64 %17, 0
  br i1 %18, label %19, label %20

19:                                               ; preds = %12
  store i32 -15, i32* %2, align 4
  br label %50

20:                                               ; preds = %12
  %21 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i64 5
  %23 = load %struct.ref_s*, %struct.ref_s** @estop, align 8
  %24 = icmp ugt %struct.ref_s* %22, %23
  br i1 %24, label %25, label %26

25:                                               ; preds = %20
  store i32 -5, i32* %2, align 4
  br label %50

26:                                               ; preds = %20
  %27 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %28 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %27, i32 1
  store %struct.ref_s* %28, %struct.ref_s** @esp, align 8
  %29 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %30 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %29, i32 0, i32 0
  %31 = bitcast %union.color_sample* %30 to i16*
  store i16 2, i16* %31, align 8
  %32 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %33 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %32, i32 0, i32 1
  store i16 33, i16* %33, align 8
  %34 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %35 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %34, i32 1
  store %struct.ref_s* %35, %struct.ref_s** @esp, align 8
  %36 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %37 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %36, i64 -1
  %38 = bitcast %struct.ref_s* %35 to i8*
  %39 = bitcast %struct.ref_s* %37 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %38, i8* align 8 %39, i64 16, i1 false)
  %40 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %41 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %40, i32 1
  store %struct.ref_s* %41, %struct.ref_s** @esp, align 8
  %42 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %43 = bitcast %struct.ref_s* %41 to i8*
  %44 = bitcast %struct.ref_s* %42 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %43, i8* align 8 %44, i64 16, i1 false)
  %45 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %46 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %45, i64 -2
  store %struct.ref_s* %46, %struct.ref_s** @osp, align 8
  %47 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %48 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %47, i64 -2
  %49 = call i32 @repeat_continue(%struct.ref_s* %48)
  store i32 %49, i32* %2, align 4
  br label %50

50:                                               ; preds = %26, %25, %19, %11
  %51 = load i32, i32* %2, align 4
  ret i32 %51
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @repeat_continue(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  %3 = alloca %struct.ref_s, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %5 = bitcast %struct.ref_s* %3 to i8*
  %6 = bitcast %struct.ref_s* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 16, i1 false)
  %7 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i64 -1
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 0
  %10 = bitcast %union.color_sample* %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = add nsw i64 %11, -1
  store i64 %12, i64* %10, align 8
  %13 = icmp sge i64 %12, 0
  br i1 %13, label %14, label %28

14:                                               ; preds = %1
  %15 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %16 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %15, i32 1
  store %struct.ref_s* %16, %struct.ref_s** @esp, align 8
  %17 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i32 0, i32 0
  %19 = bitcast %union.color_sample* %18 to i32 (%struct.ref_s*)**
  store i32 (%struct.ref_s*)* @repeat_continue, i32 (%struct.ref_s*)** %19, align 8
  %20 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %21 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %20, i32 0, i32 1
  store i16 37, i16* %21, align 8
  %22 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i32 0, i32 2
  store i16 0, i16* %23, align 2
  %24 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %25 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %24, i32 1
  store %struct.ref_s* %25, %struct.ref_s** @esp, align 8
  %26 = bitcast %struct.ref_s* %25 to i8*
  %27 = bitcast %struct.ref_s* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 16, i1 false)
  br label %31

28:                                               ; preds = %1
  %29 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %30 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %29, i64 -3
  store %struct.ref_s* %30, %struct.ref_s** @esp, align 8
  br label %31

31:                                               ; preds = %28, %14
  ret i32 1
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zloop(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** getelementptr inbounds ([6 x %struct.ref_s*], [6 x %struct.ref_s*]* @osp_nargs, i64 0, i64 0), align 16
  %6 = icmp ult %struct.ref_s* %4, %5
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  store i32 -17, i32* %2, align 4
  br label %32

8:                                                ; preds = %1
  %9 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i64 4
  %11 = load %struct.ref_s*, %struct.ref_s** @estop, align 8
  %12 = icmp ugt %struct.ref_s* %10, %11
  br i1 %12, label %13, label %14

13:                                               ; preds = %8
  store i32 -5, i32* %2, align 4
  br label %32

14:                                               ; preds = %8
  %15 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %16 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %15, i32 1
  store %struct.ref_s* %16, %struct.ref_s** @esp, align 8
  %17 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i32 0, i32 0
  %19 = bitcast %union.color_sample* %18 to i16*
  store i16 2, i16* %19, align 8
  %20 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %21 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %20, i32 0, i32 1
  store i16 33, i16* %21, align 8
  %22 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i32 1
  store %struct.ref_s* %23, %struct.ref_s** @esp, align 8
  %24 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %25 = bitcast %struct.ref_s* %23 to i8*
  %26 = bitcast %struct.ref_s* %24 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 16, i1 false)
  %27 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %28 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %27, i64 -1
  store %struct.ref_s* %28, %struct.ref_s** @osp, align 8
  %29 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %30 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %29, i64 -1
  %31 = call i32 @loop_continue(%struct.ref_s* %30)
  store i32 %31, i32* %2, align 4
  br label %32

32:                                               ; preds = %14, %13, %7
  %33 = load i32, i32* %2, align 4
  ret i32 %33
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @loop_continue(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  %3 = alloca %struct.ref_s, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %5 = bitcast %struct.ref_s* %3 to i8*
  %6 = bitcast %struct.ref_s* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %5, i8* align 8 %6, i64 16, i1 false)
  %7 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i32 1
  store %struct.ref_s* %8, %struct.ref_s** @esp, align 8
  %9 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i32 0, i32 0
  %11 = bitcast %union.color_sample* %10 to i32 (%struct.ref_s*)**
  store i32 (%struct.ref_s*)* @loop_continue, i32 (%struct.ref_s*)** %11, align 8
  %12 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %13 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %12, i32 0, i32 1
  store i16 37, i16* %13, align 8
  %14 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 2
  store i16 0, i16* %15, align 2
  %16 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %16, i32 1
  store %struct.ref_s* %17, %struct.ref_s** @esp, align 8
  %18 = bitcast %struct.ref_s* %17 to i8*
  %19 = bitcast %struct.ref_s* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %18, i8* align 8 %19, i64 16, i1 false)
  ret i32 1
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zexit(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  store %struct.ref_s* %5, %struct.ref_s** %4, align 8
  br label %6

6:                                                ; preds = %31, %1
  %7 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %8 = icmp uge %struct.ref_s* %7, getelementptr inbounds ([150 x %struct.ref_s], [150 x %struct.ref_s]* @estack, i64 0, i64 0)
  br i1 %8, label %9, label %32

9:                                                ; preds = %6
  %10 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %11 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %10, i32 0, i32 1
  %12 = load i16, i16* %11, align 8
  %13 = zext i16 %12 to i32
  %14 = and i32 %13, 255
  %15 = ashr i32 %14, 2
  %16 = icmp eq i32 %15, 8
  br i1 %16, label %17, label %28

17:                                               ; preds = %9
  %18 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i32 -1
  store %struct.ref_s* %19, %struct.ref_s** %4, align 8
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i32 0, i32 0
  %21 = bitcast %union.color_sample* %20 to i16*
  %22 = load i16, i16* %21, align 8
  %23 = zext i16 %22 to i32
  switch i32 %23, label %27 [
    i32 2, label %24
    i32 3, label %26
  ]

24:                                               ; preds = %17
  %25 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  store %struct.ref_s* %25, %struct.ref_s** @esp, align 8
  store i32 1, i32* %2, align 4
  br label %33

26:                                               ; preds = %17
  store i32 -8, i32* %2, align 4
  br label %33

27:                                               ; preds = %17
  br label %31

28:                                               ; preds = %9
  %29 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %30 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %29, i32 -1
  store %struct.ref_s* %30, %struct.ref_s** %4, align 8
  br label %31

31:                                               ; preds = %28, %27
  br label %6

32:                                               ; preds = %6
  store i32 -8, i32* %2, align 4
  br label %33

33:                                               ; preds = %32, %26, %24
  %34 = load i32, i32* %2, align 4
  ret i32 %34
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zstop(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  store %struct.ref_s* %5, %struct.ref_s** %4, align 8
  br label %6

6:                                                ; preds = %40, %1
  %7 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %8 = icmp uge %struct.ref_s* %7, getelementptr inbounds ([150 x %struct.ref_s], [150 x %struct.ref_s]* @estack, i64 0, i64 0)
  br i1 %8, label %9, label %43

9:                                                ; preds = %6
  %10 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %11 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %10, i32 0, i32 1
  %12 = load i16, i16* %11, align 8
  %13 = zext i16 %12 to i32
  %14 = and i32 %13, 255
  %15 = ashr i32 %14, 2
  %16 = icmp eq i32 %15, 8
  br i1 %16, label %17, label %40

17:                                               ; preds = %9
  %18 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i32 0, i32 0
  %20 = bitcast %union.color_sample* %19 to i16*
  %21 = load i16, i16* %20, align 8
  %22 = zext i16 %21 to i32
  %23 = icmp eq i32 %22, 3
  br i1 %23, label %24, label %40

24:                                               ; preds = %17
  %25 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %26 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %25, i64 -1
  store %struct.ref_s* %26, %struct.ref_s** @esp, align 8
  %27 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %28 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %27, i64 1
  store %struct.ref_s* %28, %struct.ref_s** %3, align 8
  store %struct.ref_s* %28, %struct.ref_s** @osp, align 8
  %29 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %30 = icmp ugt %struct.ref_s* %28, %29
  br i1 %30, label %31, label %34

31:                                               ; preds = %24
  %32 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %33 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %32, i64 -1
  store %struct.ref_s* %33, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %44

34:                                               ; preds = %24
  %35 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %36 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %35, i32 0, i32 0
  %37 = bitcast %union.color_sample* %36 to i16*
  store i16 1, i16* %37, align 8
  %38 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %39 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %38, i32 0, i32 1
  store i16 4, i16* %39, align 8
  store i32 1, i32* %2, align 4
  br label %44

40:                                               ; preds = %17, %9
  %41 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %42 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %41, i32 -1
  store %struct.ref_s* %42, %struct.ref_s** %4, align 8
  br label %6

43:                                               ; preds = %6
  store i32 -8, i32* %2, align 4
  br label %44

44:                                               ; preds = %43, %34, %31
  %45 = load i32, i32* %2, align 4
  ret i32 %45
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zstopped(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** getelementptr inbounds ([6 x %struct.ref_s*], [6 x %struct.ref_s*]* @osp_nargs, i64 0, i64 0), align 16
  %6 = icmp ult %struct.ref_s* %4, %5
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  store i32 -17, i32* %2, align 4
  br label %36

8:                                                ; preds = %1
  %9 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i64 3
  %11 = load %struct.ref_s*, %struct.ref_s** @estop, align 8
  %12 = icmp ugt %struct.ref_s* %10, %11
  br i1 %12, label %13, label %14

13:                                               ; preds = %8
  store i32 -5, i32* %2, align 4
  br label %36

14:                                               ; preds = %8
  %15 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %16 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %15, i32 1
  store %struct.ref_s* %16, %struct.ref_s** @esp, align 8
  %17 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i32 0, i32 0
  %19 = bitcast %union.color_sample* %18 to i16*
  store i16 3, i16* %19, align 8
  %20 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %21 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %20, i32 0, i32 1
  store i16 33, i16* %21, align 8
  %22 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i32 1
  store %struct.ref_s* %23, %struct.ref_s** @esp, align 8
  %24 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %25 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %24, i32 0, i32 0
  %26 = bitcast %union.color_sample* %25 to i16*
  store i16 0, i16* %26, align 8
  %27 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %28 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %27, i32 0, i32 1
  store i16 4, i16* %28, align 8
  %29 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %30 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %29, i32 1
  store %struct.ref_s* %30, %struct.ref_s** @esp, align 8
  %31 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %32 = bitcast %struct.ref_s* %30 to i8*
  %33 = bitcast %struct.ref_s* %31 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %33, i64 16, i1 false)
  %34 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %35 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %34, i64 -1
  store %struct.ref_s* %35, %struct.ref_s** @osp, align 8
  store i32 1, i32* %2, align 4
  br label %36

36:                                               ; preds = %14, %13, %7
  %37 = load i32, i32* %2, align 4
  ret i32 %37
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcountexecstack(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i64 1
  store %struct.ref_s* %5, %struct.ref_s** %3, align 8
  store %struct.ref_s* %5, %struct.ref_s** @osp, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %7 = icmp ugt %struct.ref_s* %5, %6
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i64 -1
  store %struct.ref_s* %10, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %22

11:                                               ; preds = %1
  %12 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %13 = ptrtoint %struct.ref_s* %12 to i64
  %14 = sub i64 %13, ptrtoint ([150 x %struct.ref_s]* @estack to i64)
  %15 = sdiv exact i64 %14, 16
  %16 = add nsw i64 %15, 1
  %17 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i32 0, i32 0
  %19 = bitcast %union.color_sample* %18 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %21 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %20, i32 0, i32 1
  store i16 20, i16* %21, align 8
  store i32 0, i32* %2, align 4
  br label %22

22:                                               ; preds = %11, %8
  %23 = load i32, i32* %2, align 4
  ret i32 %23
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zexecstack(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %6 = ptrtoint %struct.ref_s* %5 to i64
  %7 = sub i64 %6, ptrtoint ([150 x %struct.ref_s]* @estack to i64)
  %8 = sdiv exact i64 %7, 16
  %9 = add nsw i64 %8, 1
  %10 = trunc i64 %9 to i32
  store i32 %10, i32* %4, align 4
  %11 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %12 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %11, i32 0, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = zext i16 %13 to i32
  %15 = and i32 %14, 252
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %18, label %17

17:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %59

18:                                               ; preds = %1
  %19 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i32 0, i32 1
  %21 = load i16, i16* %20, align 8
  %22 = zext i16 %21 to i32
  %23 = xor i32 %22, -1
  %24 = and i32 %23, 256
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %27

26:                                               ; preds = %18
  store i32 -7, i32* %2, align 4
  br label %59

27:                                               ; preds = %18
  %28 = load i32, i32* %4, align 4
  %29 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %30 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %29, i32 0, i32 2
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = icmp sgt i32 %28, %32
  br i1 %33, label %34, label %35

34:                                               ; preds = %27
  store i32 -15, i32* %2, align 4
  br label %59

35:                                               ; preds = %27
  %36 = load %struct.ref_s*, %struct.ref_s** @estop, align 8
  %37 = icmp uge %struct.ref_s* getelementptr inbounds ([150 x %struct.ref_s], [150 x %struct.ref_s]* @estack, i64 0, i64 0), %36
  br i1 %37, label %38, label %39

38:                                               ; preds = %35
  store i32 -5, i32* %2, align 4
  br label %59

39:                                               ; preds = %35
  %40 = load i32, i32* %4, align 4
  %41 = trunc i32 %40 to i16
  %42 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %43 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %42, i32 0, i32 2
  store i16 %41, i16* %43, align 2
  %44 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %45 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %44, i32 0, i32 1
  %46 = load i16, i16* %45, align 8
  %47 = zext i16 %46 to i32
  %48 = or i32 %47, 32768
  %49 = trunc i32 %48 to i16
  store i16 %49, i16* %45, align 8
  %50 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %51 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %50, i32 1
  store %struct.ref_s* %51, %struct.ref_s** @esp, align 8
  %52 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %53 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %52, i32 0, i32 0
  %54 = bitcast %union.color_sample* %53 to i32 (%struct.ref_s*)**
  store i32 (%struct.ref_s*)* @continue_execstack, i32 (%struct.ref_s*)** %54, align 8
  %55 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %56 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %55, i32 0, i32 1
  store i16 37, i16* %56, align 8
  %57 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %58 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %57, i32 0, i32 2
  store i16 0, i16* %58, align 2
  store i32 1, i32* %2, align 4
  br label %59

59:                                               ; preds = %39, %38, %34, %26, %17
  %60 = load i32, i32* %2, align 4
  ret i32 %60
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @continue_execstack(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  %3 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i32 0, i32 2
  %6 = load i16, i16* %5, align 2
  %7 = zext i16 %6 to i32
  store i32 %7, i32* %3, align 4
  %8 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 0
  %10 = bitcast %union.color_sample* %9 to %struct.ref_s**
  %11 = load %struct.ref_s*, %struct.ref_s** %10, align 8
  %12 = load i32, i32* %3, align 4
  %13 = call i32 (%struct.ref_s*, %struct.ref_s*, i32, ...) bitcast (void (%struct.ref_s*, %struct.ref_s*, i32)* @refcpy to i32 (%struct.ref_s*, %struct.ref_s*, i32, ...)*)(%struct.ref_s* %11, %struct.ref_s* getelementptr inbounds ([150 x %struct.ref_s], [150 x %struct.ref_s]* @estack, i64 0, i64 0), i32 %12)
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zquit(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = call i32 (i32, ...) bitcast (void (i32)* @gs_exit to i32 (i32, ...)*)(i32 0)
  %5 = load i32, i32* %2, align 4
  ret i32 %5
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @zcontrol_op_init() #0 {
  %1 = call i32 (%struct.op_def*, ...) bitcast (void (%struct.op_def*)* @z_op_init to i32 (%struct.op_def*, ...)*)(%struct.op_def* getelementptr inbounds ([13 x %struct.op_def], [13 x %struct.op_def]* @zcontrol_op_init.my_defs, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcopypage(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %4 = call i32 @gs_copypage(%struct.gs_state_s* %3)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcopyscanlines(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca %struct.ref_s*, align 8
  %6 = alloca %struct.gx_device_s*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %9 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i64 -1
  store %struct.ref_s* %10, %struct.ref_s** %4, align 8
  %11 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %12 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %11, i64 -2
  store %struct.ref_s* %12, %struct.ref_s** %5, align 8
  %13 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i32 0, i32 1
  %15 = load i16, i16* %14, align 8
  %16 = zext i16 %15 to i32
  %17 = and i32 %16, 252
  %18 = icmp eq i32 %17, 60
  br i1 %18, label %20, label %19

19:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %102

20:                                               ; preds = %1
  %21 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i32 0, i32 0
  %23 = bitcast %union.color_sample* %22 to %struct.gx_device_s**
  %24 = load %struct.gx_device_s*, %struct.gx_device_s** %23, align 8
  store %struct.gx_device_s* %24, %struct.gx_device_s** %6, align 8
  %25 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %26 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %25, i32 0, i32 1
  %27 = load i16, i16* %26, align 8
  %28 = zext i16 %27 to i32
  %29 = and i32 %28, 252
  %30 = icmp eq i32 %29, 20
  br i1 %30, label %32, label %31

31:                                               ; preds = %20
  store i32 -20, i32* %2, align 4
  br label %102

32:                                               ; preds = %20
  %33 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %34 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %33, i32 0, i32 0
  %35 = bitcast %union.color_sample* %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = icmp slt i64 %36, 0
  br i1 %37, label %48, label %38

38:                                               ; preds = %32
  %39 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %40 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %39, i32 0, i32 0
  %41 = bitcast %union.color_sample* %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = load %struct.gx_device_s*, %struct.gx_device_s** %6, align 8
  %44 = getelementptr inbounds %struct.gx_device_s, %struct.gx_device_s* %43, i32 0, i32 4
  %45 = load i32, i32* %44, align 4
  %46 = sext i32 %45 to i64
  %47 = icmp sgt i64 %42, %46
  br i1 %47, label %48, label %49

48:                                               ; preds = %38, %32
  store i32 -15, i32* %2, align 4
  br label %102

49:                                               ; preds = %38
  %50 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %51 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %50, i32 0, i32 1
  %52 = load i16, i16* %51, align 8
  %53 = zext i16 %52 to i32
  %54 = and i32 %53, 252
  %55 = icmp eq i32 %54, 52
  br i1 %55, label %57, label %56

56:                                               ; preds = %49
  store i32 -20, i32* %2, align 4
  br label %102

57:                                               ; preds = %49
  %58 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %59 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %58, i32 0, i32 1
  %60 = load i16, i16* %59, align 8
  %61 = zext i16 %60 to i32
  %62 = xor i32 %61, -1
  %63 = and i32 %62, 256
  %64 = icmp ne i32 %63, 0
  br i1 %64, label %65, label %66

65:                                               ; preds = %57
  store i32 -7, i32* %2, align 4
  br label %102

66:                                               ; preds = %57
  %67 = load %struct.gx_device_s*, %struct.gx_device_s** %6, align 8
  %68 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %69 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %68, i32 0, i32 0
  %70 = bitcast %union.color_sample* %69 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = trunc i64 %71 to i32
  %73 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %74 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %73, i32 0, i32 0
  %75 = bitcast %union.color_sample* %74 to i8**
  %76 = load i8*, i8** %75, align 8
  %77 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %78 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %77, i32 0, i32 2
  %79 = load i16, i16* %78, align 2
  %80 = zext i16 %79 to i32
  %81 = call i32 @gs_copyscanlines(%struct.gx_device_s* %67, i32 %72, i8* %76, i32 %80, i32* null, i32* %8)
  store i32 %81, i32* %7, align 4
  %82 = load i32, i32* %7, align 4
  %83 = icmp slt i32 %82, 0
  br i1 %83, label %84, label %85

84:                                               ; preds = %66
  store i32 -20, i32* %2, align 4
  br label %102

85:                                               ; preds = %66
  %86 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %87 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %88 = bitcast %struct.ref_s* %86 to i8*
  %89 = bitcast %struct.ref_s* %87 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %88, i8* align 8 %89, i64 16, i1 false)
  %90 = load i32, i32* %8, align 4
  %91 = trunc i32 %90 to i16
  %92 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %93 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %92, i32 0, i32 2
  store i16 %91, i16* %93, align 2
  %94 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %95 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %94, i32 0, i32 1
  %96 = load i16, i16* %95, align 8
  %97 = zext i16 %96 to i32
  %98 = or i32 %97, 32768
  %99 = trunc i32 %98 to i16
  store i16 %99, i16* %95, align 8
  %100 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %101 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %100, i64 -2
  store %struct.ref_s* %101, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %102

102:                                              ; preds = %85, %84, %65, %56, %48, %31, %19
  %103 = load i32, i32* %2, align 4
  ret i32 %103
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcurrentdevice(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.gx_device_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %6 = call %struct.gx_device_s* @gs_currentdevice(%struct.gs_state_s* %5)
  store %struct.gx_device_s* %6, %struct.gx_device_s** %4, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i64 1
  store %struct.ref_s* %8, %struct.ref_s** %3, align 8
  store %struct.ref_s* %8, %struct.ref_s** @osp, align 8
  %9 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %10 = icmp ugt %struct.ref_s* %8, %9
  br i1 %10, label %11, label %14

11:                                               ; preds = %1
  %12 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %13 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %12, i64 -1
  store %struct.ref_s* %13, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %21

14:                                               ; preds = %1
  %15 = load %struct.gx_device_s*, %struct.gx_device_s** %4, align 8
  %16 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %16, i32 0, i32 0
  %18 = bitcast %union.color_sample* %17 to %struct.gx_device_s**
  store %struct.gx_device_s* %15, %struct.gx_device_s** %18, align 8
  %19 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i32 0, i32 1
  store i16 60, i16* %20, align 8
  store i32 0, i32* %2, align 4
  br label %21

21:                                               ; preds = %14, %11
  %22 = load i32, i32* %2, align 4
  ret i32 %22
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zdevicename(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = zext i16 %8 to i32
  %10 = and i32 %9, 252
  %11 = icmp eq i32 %10, 60
  br i1 %11, label %13, label %12

12:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %27

13:                                               ; preds = %1
  %14 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 0
  %16 = bitcast %union.color_sample* %15 to %struct.gx_device_s**
  %17 = load %struct.gx_device_s*, %struct.gx_device_s** %16, align 8
  %18 = call i8* @gs_devicename(%struct.gx_device_s* %17)
  store i8* %18, i8** %4, align 8
  %19 = load i8*, i8** %4, align 8
  %20 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %21 = call i32 (i8*, %struct.ref_s*, i8*, ...) bitcast (i32 (i8*, %struct.ref_s*, i8*)* @string_to_ref to i32 (i8*, %struct.ref_s*, i8*, ...)*)(i8* %19, %struct.ref_s* %20, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.391, i64 0, i64 0))
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %5, align 4
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %13
  %25 = load i32, i32* %5, align 4
  store i32 %25, i32* %2, align 4
  br label %27

26:                                               ; preds = %13
  store i32 0, i32* %2, align 4
  br label %27

27:                                               ; preds = %26, %24, %12
  %28 = load i32, i32* %2, align 4
  ret i32 %28
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zdeviceparams(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  %5 = alloca %struct.ref_s*, align 8
  %6 = alloca %struct.gs_matrix_s, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %9 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %10 = call i32 (%struct.ref_s*, ...) bitcast (i32 (%struct.ref_s*)* @write_matrix to i32 (%struct.ref_s*, ...)*)(%struct.ref_s* %9)
  store i32 %10, i32* %4, align 4
  %11 = load i32, i32* %4, align 4
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %13, label %15

13:                                               ; preds = %1
  %14 = load i32, i32* %4, align 4
  store i32 %14, i32* %2, align 4
  br label %119

15:                                               ; preds = %1
  %16 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %16, i64 -1
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i32 0, i32 1
  %19 = load i16, i16* %18, align 8
  %20 = zext i16 %19 to i32
  %21 = and i32 %20, 252
  %22 = icmp eq i32 %21, 60
  br i1 %22, label %24, label %23

23:                                               ; preds = %15
  store i32 -20, i32* %2, align 4
  br label %119

24:                                               ; preds = %15
  %25 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %26 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %25, i64 -1
  %27 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %26, i32 0, i32 0
  %28 = bitcast %union.color_sample* %27 to %struct.gx_device_s**
  %29 = load %struct.gx_device_s*, %struct.gx_device_s** %28, align 8
  call void @gs_deviceparams(%struct.gx_device_s* %29, %struct.gs_matrix_s* %6, i32* %7, i32* %8)
  %30 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %31 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %30, i32 0, i32 0
  %32 = bitcast %union.color_sample* %31 to %struct.ref_s**
  %33 = load %struct.ref_s*, %struct.ref_s** %32, align 8
  store %struct.ref_s* %33, %struct.ref_s** %5, align 8
  %34 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %6, i32 0, i32 0
  %35 = load float, float* %34, align 8
  %36 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %37 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %36, i64 0
  %38 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %37, i32 0, i32 0
  %39 = bitcast %union.color_sample* %38 to float*
  store float %35, float* %39, align 8
  %40 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %41 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %40, i64 0
  %42 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %41, i32 0, i32 1
  store i16 44, i16* %42, align 8
  %43 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %6, i32 0, i32 2
  %44 = load float, float* %43, align 8
  %45 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %46 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %45, i64 1
  %47 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %46, i32 0, i32 0
  %48 = bitcast %union.color_sample* %47 to float*
  store float %44, float* %48, align 8
  %49 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %50 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %49, i64 1
  %51 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %50, i32 0, i32 1
  store i16 44, i16* %51, align 8
  %52 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %6, i32 0, i32 4
  %53 = load float, float* %52, align 8
  %54 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %55 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %54, i64 2
  %56 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %55, i32 0, i32 0
  %57 = bitcast %union.color_sample* %56 to float*
  store float %53, float* %57, align 8
  %58 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %59 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %58, i64 2
  %60 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %59, i32 0, i32 1
  store i16 44, i16* %60, align 8
  %61 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %6, i32 0, i32 6
  %62 = load float, float* %61, align 8
  %63 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %64 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %63, i64 3
  %65 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %64, i32 0, i32 0
  %66 = bitcast %union.color_sample* %65 to float*
  store float %62, float* %66, align 8
  %67 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %68 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %67, i64 3
  %69 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %68, i32 0, i32 1
  store i16 44, i16* %69, align 8
  %70 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %6, i32 0, i32 8
  %71 = load float, float* %70, align 8
  %72 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %73 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %72, i64 4
  %74 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %73, i32 0, i32 0
  %75 = bitcast %union.color_sample* %74 to float*
  store float %71, float* %75, align 8
  %76 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %77 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %76, i64 4
  %78 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %77, i32 0, i32 1
  store i16 44, i16* %78, align 8
  %79 = getelementptr inbounds %struct.gs_matrix_s, %struct.gs_matrix_s* %6, i32 0, i32 10
  %80 = load float, float* %79, align 8
  %81 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %82 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %81, i64 5
  %83 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %82, i32 0, i32 0
  %84 = bitcast %union.color_sample* %83 to float*
  store float %80, float* %84, align 8
  %85 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %86 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %85, i64 5
  %87 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %86, i32 0, i32 1
  store i16 44, i16* %87, align 8
  %88 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %89 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %88, i64 2
  store %struct.ref_s* %89, %struct.ref_s** %3, align 8
  store %struct.ref_s* %89, %struct.ref_s** @osp, align 8
  %90 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %91 = icmp ugt %struct.ref_s* %89, %90
  br i1 %91, label %92, label %95

92:                                               ; preds = %24
  %93 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %94 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %93, i64 -2
  store %struct.ref_s* %94, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %119

95:                                               ; preds = %24
  %96 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %97 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %96, i64 -3
  %98 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %97, i32 0, i32 0
  %99 = bitcast %union.color_sample* %98 to i64*
  store i64 0, i64* %99, align 8
  %100 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %101 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %100, i64 -3
  %102 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %101, i32 0, i32 1
  store i16 24, i16* %102, align 8
  %103 = load i32, i32* %7, align 4
  %104 = sext i32 %103 to i64
  %105 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %106 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %105, i64 -1
  %107 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %106, i32 0, i32 0
  %108 = bitcast %union.color_sample* %107 to i64*
  store i64 %104, i64* %108, align 8
  %109 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %110 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %109, i64 -1
  %111 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %110, i32 0, i32 1
  store i16 20, i16* %111, align 8
  %112 = load i32, i32* %8, align 4
  %113 = sext i32 %112 to i64
  %114 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %115 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %114, i32 0, i32 0
  %116 = bitcast %union.color_sample* %115 to i64*
  store i64 %113, i64* %116, align 8
  %117 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %118 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %117, i32 0, i32 1
  store i16 20, i16* %118, align 8
  store i32 0, i32* %2, align 4
  br label %119

119:                                              ; preds = %95, %92, %23, %13
  %120 = load i32, i32* %2, align 4
  ret i32 %120
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zflushpage(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %4 = call i32 @gs_flushpage(%struct.gs_state_s* %3)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zgetdevice(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.gx_device_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i32 0, i32 1
  %7 = load i16, i16* %6, align 8
  %8 = zext i16 %7 to i32
  %9 = and i32 %8, 252
  %10 = icmp eq i32 %9, 20
  br i1 %10, label %12, label %11

11:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %42

12:                                               ; preds = %1
  %13 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i32 0, i32 0
  %15 = bitcast %union.color_sample* %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i32 0, i32 0
  %19 = bitcast %union.color_sample* %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = trunc i64 %20 to i32
  %22 = sext i32 %21 to i64
  %23 = icmp ne i64 %16, %22
  br i1 %23, label %24, label %25

24:                                               ; preds = %12
  store i32 -15, i32* %2, align 4
  br label %42

25:                                               ; preds = %12
  %26 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %27 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %26, i32 0, i32 0
  %28 = bitcast %union.color_sample* %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = trunc i64 %29 to i32
  %31 = call %struct.gx_device_s* @gs_getdevice(i32 %30)
  store %struct.gx_device_s* %31, %struct.gx_device_s** %4, align 8
  %32 = load %struct.gx_device_s*, %struct.gx_device_s** %4, align 8
  %33 = icmp eq %struct.gx_device_s* %32, null
  br i1 %33, label %34, label %35

34:                                               ; preds = %25
  store i32 -15, i32* %2, align 4
  br label %42

35:                                               ; preds = %25
  %36 = load %struct.gx_device_s*, %struct.gx_device_s** %4, align 8
  %37 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %38 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %37, i32 0, i32 0
  %39 = bitcast %union.color_sample* %38 to %struct.gx_device_s**
  store %struct.gx_device_s* %36, %struct.gx_device_s** %39, align 8
  %40 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %41 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %40, i32 0, i32 1
  store i16 60, i16* %41, align 8
  store i32 0, i32* %2, align 4
  br label %42

42:                                               ; preds = %35, %34, %24, %11
  %43 = load i32, i32* %2, align 4
  ret i32 %43
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zmakedevice(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.gs_matrix_s, align 8
  %5 = alloca %struct.gx_device_s*, align 8
  %6 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i64 -3
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 1
  %10 = load i16, i16* %9, align 8
  %11 = zext i16 %10 to i32
  %12 = and i32 %11, 252
  %13 = icmp eq i32 %12, 60
  br i1 %13, label %15, label %14

14:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %86

15:                                               ; preds = %1
  %16 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %16, i64 -1
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i32 0, i32 1
  %19 = load i16, i16* %18, align 8
  %20 = zext i16 %19 to i32
  %21 = and i32 %20, 252
  %22 = icmp eq i32 %21, 20
  br i1 %22, label %24, label %23

23:                                               ; preds = %15
  store i32 -20, i32* %2, align 4
  br label %86

24:                                               ; preds = %15
  %25 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %26 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %25, i32 0, i32 1
  %27 = load i16, i16* %26, align 8
  %28 = zext i16 %27 to i32
  %29 = and i32 %28, 252
  %30 = icmp eq i32 %29, 20
  br i1 %30, label %32, label %31

31:                                               ; preds = %24
  store i32 -20, i32* %2, align 4
  br label %86

32:                                               ; preds = %24
  %33 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %34 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %33, i64 -1
  %35 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %34, i32 0, i32 0
  %36 = bitcast %union.color_sample* %35 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = icmp ugt i64 %37, 2147483647
  br i1 %38, label %45, label %39

39:                                               ; preds = %32
  %40 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %41 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %40, i32 0, i32 0
  %42 = bitcast %union.color_sample* %41 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = icmp ugt i64 %43, 2147483647
  br i1 %44, label %45, label %46

45:                                               ; preds = %39, %32
  store i32 -15, i32* %2, align 4
  br label %86

46:                                               ; preds = %39
  %47 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %48 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %47, i64 -2
  %49 = call i32 (%struct.ref_s*, %struct.gs_matrix_s*, ...) bitcast (i32 (%struct.ref_s*, %struct.gs_matrix_s*)* @read_matrix to i32 (%struct.ref_s*, %struct.gs_matrix_s*, ...)*)(%struct.ref_s* %48, %struct.gs_matrix_s* %4)
  store i32 %49, i32* %6, align 4
  %50 = icmp slt i32 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %46
  %52 = load i32, i32* %6, align 4
  store i32 %52, i32* %2, align 4
  br label %86

53:                                               ; preds = %46
  %54 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %55 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %54, i64 -3
  %56 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %55, i32 0, i32 0
  %57 = bitcast %union.color_sample* %56 to %struct.gx_device_s**
  %58 = load %struct.gx_device_s*, %struct.gx_device_s** %57, align 8
  %59 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %60 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %59, i64 -1
  %61 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %60, i32 0, i32 0
  %62 = bitcast %union.color_sample* %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = trunc i64 %63 to i32
  %65 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %66 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %65, i32 0, i32 0
  %67 = bitcast %union.color_sample* %66 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = trunc i64 %68 to i32
  %70 = call i32 @gs_makedevice(%struct.gx_device_s** %5, %struct.gx_device_s* %58, %struct.gs_matrix_s* %4, i32 %64, i32 %69, i8* (i32, i32, i8*)* @alloc)
  store i32 %70, i32* %6, align 4
  %71 = load i32, i32* %6, align 4
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %84

73:                                               ; preds = %53
  %74 = load %struct.gx_device_s*, %struct.gx_device_s** %5, align 8
  %75 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %76 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %75, i64 -3
  %77 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %76, i32 0, i32 0
  %78 = bitcast %union.color_sample* %77 to %struct.gx_device_s**
  store %struct.gx_device_s* %74, %struct.gx_device_s** %78, align 8
  %79 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %80 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %79, i64 -3
  %81 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %80, i32 0, i32 1
  store i16 60, i16* %81, align 8
  %82 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %83 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %82, i64 -3
  store %struct.ref_s* %83, %struct.ref_s** @osp, align 8
  br label %84

84:                                               ; preds = %73, %53
  %85 = load i32, i32* %6, align 4
  store i32 %85, i32* %2, align 4
  br label %86

86:                                               ; preds = %84, %51, %45, %31, %23, %14
  %87 = load i32, i32* %2, align 4
  ret i32 %87
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zmakeimagedevice(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.gs_matrix_s, align 8
  %5 = alloca %struct.gx_device_s*, align 8
  %6 = alloca [768 x float], align 16
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.ref_s*, align 8
  %11 = alloca float*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %12 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %13 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %12, i64 -2
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i32 0, i32 1
  %15 = load i16, i16* %14, align 8
  %16 = zext i16 %15 to i32
  %17 = and i32 %16, 252
  %18 = icmp eq i32 %17, 20
  br i1 %18, label %20, label %19

19:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %145

20:                                               ; preds = %1
  %21 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i64 -1
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i32 0, i32 1
  %24 = load i16, i16* %23, align 8
  %25 = zext i16 %24 to i32
  %26 = and i32 %25, 252
  %27 = icmp eq i32 %26, 20
  br i1 %27, label %29, label %28

28:                                               ; preds = %20
  store i32 -20, i32* %2, align 4
  br label %145

29:                                               ; preds = %20
  %30 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %31 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %30, i32 0, i32 1
  %32 = load i16, i16* %31, align 8
  %33 = zext i16 %32 to i32
  %34 = and i32 %33, 255
  %35 = ashr i32 %34, 2
  %36 = icmp eq i32 %35, 8
  br i1 %36, label %37, label %38

37:                                               ; preds = %29
  store i32 -24, i32* %7, align 4
  br label %52

38:                                               ; preds = %29
  %39 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %40 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %39, i32 0, i32 1
  %41 = load i16, i16* %40, align 8
  %42 = zext i16 %41 to i32
  %43 = and i32 %42, 255
  %44 = ashr i32 %43, 2
  switch i32 %44, label %45 [
    i32 0, label %46
    i32 10, label %46
  ]

45:                                               ; preds = %38
  store i32 -20, i32* %2, align 4
  br label %145

46:                                               ; preds = %38, %38
  br label %47

47:                                               ; preds = %46
  %48 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %49 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %48, i32 0, i32 2
  %50 = load i16, i16* %49, align 2
  %51 = zext i16 %50 to i32
  store i32 %51, i32* %7, align 4
  br label %52

52:                                               ; preds = %47, %37
  %53 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %54 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %53, i64 -2
  %55 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %54, i32 0, i32 0
  %56 = bitcast %union.color_sample* %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = icmp ugt i64 %57, 2147483647
  br i1 %58, label %69, label %59

59:                                               ; preds = %52
  %60 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %61 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %60, i64 -1
  %62 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %61, i32 0, i32 0
  %63 = bitcast %union.color_sample* %62 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = icmp ugt i64 %64, 2147483647
  br i1 %65, label %69, label %66

66:                                               ; preds = %59
  %67 = load i32, i32* %7, align 4
  %68 = icmp sgt i32 %67, 256
  br i1 %68, label %69, label %70

69:                                               ; preds = %66, %59, %52
  store i32 -15, i32* %2, align 4
  br label %145

70:                                               ; preds = %66
  %71 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %72 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %71, i64 -3
  %73 = call i32 (%struct.ref_s*, %struct.gs_matrix_s*, ...) bitcast (i32 (%struct.ref_s*, %struct.gs_matrix_s*)* @read_matrix to i32 (%struct.ref_s*, %struct.gs_matrix_s*, ...)*)(%struct.ref_s* %72, %struct.gs_matrix_s* %4)
  store i32 %73, i32* %8, align 4
  %74 = icmp slt i32 %73, 0
  br i1 %74, label %75, label %77

75:                                               ; preds = %70
  %76 = load i32, i32* %8, align 4
  store i32 %76, i32* %2, align 4
  br label %145

77:                                               ; preds = %70
  %78 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %79 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %78, i32 0, i32 0
  %80 = bitcast %union.color_sample* %79 to %struct.ref_s**
  %81 = load %struct.ref_s*, %struct.ref_s** %80, align 8
  store %struct.ref_s* %81, %struct.ref_s** %10, align 8
  %82 = getelementptr inbounds [768 x float], [768 x float]* %6, i64 0, i64 0
  store float* %82, float** %11, align 8
  store i32 0, i32* %9, align 4
  br label %83

83:                                               ; preds = %107, %77
  %84 = load i32, i32* %9, align 4
  %85 = load i32, i32* %7, align 4
  %86 = icmp slt i32 %84, %85
  br i1 %86, label %87, label %114

87:                                               ; preds = %83
  %88 = load %struct.ref_s*, %struct.ref_s** %10, align 8
  %89 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %88, i32 0, i32 1
  %90 = load i16, i16* %89, align 8
  %91 = zext i16 %90 to i32
  %92 = and i32 %91, 252
  %93 = icmp eq i32 %92, 56
  br i1 %93, label %95, label %94

94:                                               ; preds = %87
  store i32 -20, i32* %2, align 4
  br label %145

95:                                               ; preds = %87
  %96 = load %struct.ref_s*, %struct.ref_s** %10, align 8
  %97 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %96, i32 0, i32 0
  %98 = bitcast %union.color_sample* %97 to %struct.gs_color_s**
  %99 = load %struct.gs_color_s*, %struct.gs_color_s** %98, align 8
  %100 = load float*, float** %11, align 8
  %101 = call i32 (%struct.gs_color_s*, float*, ...) bitcast (i32 (%struct.gs_color_s*, float*)* @gs_colorrgb to i32 (%struct.gs_color_s*, float*, ...)*)(%struct.gs_color_s* %99, float* %100)
  store i32 %101, i32* %8, align 4
  %102 = load i32, i32* %8, align 4
  %103 = icmp slt i32 %102, 0
  br i1 %103, label %104, label %106

104:                                              ; preds = %95
  %105 = load i32, i32* %8, align 4
  store i32 %105, i32* %2, align 4
  br label %145

106:                                              ; preds = %95
  br label %107

107:                                              ; preds = %106
  %108 = load i32, i32* %9, align 4
  %109 = add nsw i32 %108, 1
  store i32 %109, i32* %9, align 4
  %110 = load %struct.ref_s*, %struct.ref_s** %10, align 8
  %111 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %110, i32 1
  store %struct.ref_s* %111, %struct.ref_s** %10, align 8
  %112 = load float*, float** %11, align 8
  %113 = getelementptr inbounds float, float* %112, i64 3
  store float* %113, float** %11, align 8
  br label %83

114:                                              ; preds = %83
  %115 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %116 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %115, i64 -2
  %117 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %116, i32 0, i32 0
  %118 = bitcast %union.color_sample* %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = trunc i64 %119 to i32
  %121 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %122 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %121, i64 -1
  %123 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %122, i32 0, i32 0
  %124 = bitcast %union.color_sample* %123 to i64*
  %125 = load i64, i64* %124, align 8
  %126 = trunc i64 %125 to i32
  %127 = getelementptr inbounds [768 x float], [768 x float]* %6, i64 0, i64 0
  %128 = load i32, i32* %7, align 4
  %129 = call i32 @gs_makeimagedevice(%struct.gx_device_s** %5, %struct.gs_matrix_s* %4, i32 %120, i32 %126, float* %127, i32 %128, i8* (i32, i32, i8*)* @alloc)
  store i32 %129, i32* %8, align 4
  %130 = load i32, i32* %8, align 4
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %132, label %143

132:                                              ; preds = %114
  %133 = load %struct.gx_device_s*, %struct.gx_device_s** %5, align 8
  %134 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %135 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %134, i64 -3
  %136 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %135, i32 0, i32 0
  %137 = bitcast %union.color_sample* %136 to %struct.gx_device_s**
  store %struct.gx_device_s* %133, %struct.gx_device_s** %137, align 8
  %138 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %139 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %138, i64 -3
  %140 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %139, i32 0, i32 1
  store i16 60, i16* %140, align 8
  %141 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %142 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %141, i64 -3
  store %struct.ref_s* %142, %struct.ref_s** @osp, align 8
  br label %143

143:                                              ; preds = %132, %114
  %144 = load i32, i32* %8, align 4
  store i32 %144, i32* %2, align 4
  br label %145

145:                                              ; preds = %143, %104, %94, %75, %69, %45, %28, %19
  %146 = load i32, i32* %2, align 4
  ret i32 %146
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @znulldevice(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  call void @gs_nulldevice(%struct.gs_state_s* %3)
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zsetdevice(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i32 0, i32 1
  %7 = load i16, i16* %6, align 8
  %8 = zext i16 %7 to i32
  %9 = and i32 %8, 252
  %10 = icmp eq i32 %9, 60
  br i1 %10, label %12, label %11

11:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %26

12:                                               ; preds = %1
  %13 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %14 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 0
  %16 = bitcast %union.color_sample* %15 to %struct.gx_device_s**
  %17 = load %struct.gx_device_s*, %struct.gx_device_s** %16, align 8
  %18 = call i32 @gs_setdevice(%struct.gs_state_s* %13, %struct.gx_device_s* %17)
  store i32 %18, i32* %4, align 4
  %19 = load i32, i32* %4, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %24

21:                                               ; preds = %12
  %22 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i64 -1
  store %struct.ref_s* %23, %struct.ref_s** @osp, align 8
  br label %24

24:                                               ; preds = %21, %12
  %25 = load i32, i32* %4, align 4
  store i32 %25, i32* %2, align 4
  br label %26

26:                                               ; preds = %24, %11
  %27 = load i32, i32* %2, align 4
  ret i32 %27
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @zdevice_op_init() #0 {
  %1 = call i32 (%struct.op_def*, ...) bitcast (void (%struct.op_def*)* @z_op_init to i32 (%struct.op_def*, ...)*)(%struct.op_def* getelementptr inbounds ([12 x %struct.op_def], [12 x %struct.op_def]* @zdevice_op_init.my_defs, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zdict(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i32 0, i32 1
  %6 = load i16, i16* %5, align 8
  %7 = zext i16 %6 to i32
  %8 = and i32 %7, 252
  %9 = icmp eq i32 %8, 20
  br i1 %9, label %11, label %10

10:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %34

11:                                               ; preds = %1
  %12 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %13 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %12, i32 0, i32 0
  %14 = bitcast %union.color_sample* %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = icmp slt i64 %15, 0
  br i1 %16, label %25, label %17

17:                                               ; preds = %11
  %18 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i32 0, i32 0
  %20 = bitcast %union.color_sample* %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = load i32, i32* @dict_max_size, align 4
  %23 = zext i32 %22 to i64
  %24 = icmp sgt i64 %21, %23
  br i1 %24, label %25, label %26

25:                                               ; preds = %17, %11
  store i32 -15, i32* %2, align 4
  br label %34

26:                                               ; preds = %17
  %27 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %28 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %27, i32 0, i32 0
  %29 = bitcast %union.color_sample* %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = trunc i64 %30 to i32
  %32 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %33 = call i32 @dict_create(i32 %31, %struct.ref_s* %32)
  store i32 %33, i32* %2, align 4
  br label %34

34:                                               ; preds = %26, %25, %10
  %35 = load i32, i32* %2, align 4
  ret i32 %35
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zmaxlength(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i32 0, i32 1
  %6 = load i16, i16* %5, align 8
  %7 = zext i16 %6 to i32
  %8 = and i32 %7, 252
  %9 = icmp eq i32 %8, 8
  br i1 %9, label %11, label %10

10:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %30

11:                                               ; preds = %1
  %12 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %13 = call %struct.ref_s* @dict_access_ref(%struct.ref_s* %12)
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i32 0, i32 1
  %15 = load i16, i16* %14, align 8
  %16 = zext i16 %15 to i32
  %17 = xor i32 %16, -1
  %18 = and i32 %17, 512
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %20, label %21

20:                                               ; preds = %11
  store i32 -7, i32* %2, align 4
  br label %30

21:                                               ; preds = %11
  %22 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %23 = call i32 @dict_maxlength(%struct.ref_s* %22)
  %24 = zext i32 %23 to i64
  %25 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %26 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %25, i32 0, i32 0
  %27 = bitcast %union.color_sample* %26 to i64*
  store i64 %24, i64* %27, align 8
  %28 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i32 0, i32 1
  store i16 20, i16* %29, align 8
  store i32 0, i32* %2, align 4
  br label %30

30:                                               ; preds = %21, %20, %10
  %31 = load i32, i32* %2, align 4
  ret i32 %31
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zsetmaxlength(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i64 -1
  store %struct.ref_s* %8, %struct.ref_s** %6, align 8
  %9 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i32 0, i32 1
  %11 = load i16, i16* %10, align 8
  %12 = zext i16 %11 to i32
  %13 = and i32 %12, 252
  %14 = icmp eq i32 %13, 8
  br i1 %14, label %16, label %15

15:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %73

16:                                               ; preds = %1
  %17 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %18 = call %struct.ref_s* @dict_access_ref(%struct.ref_s* %17)
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i32 0, i32 1
  %20 = load i16, i16* %19, align 8
  %21 = zext i16 %20 to i32
  %22 = xor i32 %21, -1
  %23 = and i32 %22, 256
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %25, label %26

25:                                               ; preds = %16
  store i32 -7, i32* %2, align 4
  br label %73

26:                                               ; preds = %16
  %27 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %28 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %27, i32 0, i32 1
  %29 = load i16, i16* %28, align 8
  %30 = zext i16 %29 to i32
  %31 = and i32 %30, 252
  %32 = icmp eq i32 %31, 20
  br i1 %32, label %34, label %33

33:                                               ; preds = %26
  store i32 -20, i32* %2, align 4
  br label %73

34:                                               ; preds = %26
  %35 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %36 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %35, i32 0, i32 0
  %37 = bitcast %union.color_sample* %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = icmp slt i64 %38, 0
  br i1 %39, label %48, label %40

40:                                               ; preds = %34
  %41 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %42 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %41, i32 0, i32 0
  %43 = bitcast %union.color_sample* %42 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = load i32, i32* @dict_max_size, align 4
  %46 = zext i32 %45 to i64
  %47 = icmp sgt i64 %44, %46
  br i1 %47, label %48, label %49

48:                                               ; preds = %40, %34
  store i32 -15, i32* %2, align 4
  br label %73

49:                                               ; preds = %40
  %50 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %51 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %50, i32 0, i32 0
  %52 = bitcast %union.color_sample* %51 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = trunc i64 %53 to i32
  store i32 %54, i32* %4, align 4
  %55 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %56 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %55, i64 -1
  %57 = call i32 @dict_length(%struct.ref_s* %56)
  %58 = load i32, i32* %4, align 4
  %59 = icmp ugt i32 %57, %58
  br i1 %59, label %60, label %61

60:                                               ; preds = %49
  store i32 -2, i32* %2, align 4
  br label %73

61:                                               ; preds = %49
  %62 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %63 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %62, i64 -1
  %64 = load i32, i32* %4, align 4
  %65 = call i32 @dict_resize(%struct.ref_s* %63, i32 %64)
  store i32 %65, i32* %5, align 4
  %66 = load i32, i32* %5, align 4
  %67 = icmp sge i32 %66, 0
  br i1 %67, label %68, label %71

68:                                               ; preds = %61
  %69 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %70 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %69, i64 -2
  store %struct.ref_s* %70, %struct.ref_s** @osp, align 8
  br label %71

71:                                               ; preds = %68, %61
  %72 = load i32, i32* %5, align 4
  store i32 %72, i32* %2, align 4
  br label %73

73:                                               ; preds = %71, %60, %48, %33, %25, %15
  %74 = load i32, i32* %2, align 4
  ret i32 %74
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zbegin(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i32 0, i32 1
  %6 = load i16, i16* %5, align 8
  %7 = zext i16 %6 to i32
  %8 = and i32 %7, 252
  %9 = icmp eq i32 %8, 8
  br i1 %9, label %11, label %10

10:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %34

11:                                               ; preds = %1
  %12 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %13 = call %struct.ref_s* @dict_access_ref(%struct.ref_s* %12)
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i32 0, i32 1
  %15 = load i16, i16* %14, align 8
  %16 = zext i16 %15 to i32
  %17 = xor i32 %16, -1
  %18 = and i32 %17, 512
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %20, label %21

20:                                               ; preds = %11
  store i32 -7, i32* %2, align 4
  br label %34

21:                                               ; preds = %11
  %22 = load %struct.ref_s*, %struct.ref_s** @dsp, align 8
  %23 = load %struct.ref_s*, %struct.ref_s** @dstop, align 8
  %24 = icmp eq %struct.ref_s* %22, %23
  br i1 %24, label %25, label %26

25:                                               ; preds = %21
  store i32 -3, i32* %2, align 4
  br label %34

26:                                               ; preds = %21
  %27 = load %struct.ref_s*, %struct.ref_s** @dsp, align 8
  %28 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %27, i32 1
  store %struct.ref_s* %28, %struct.ref_s** @dsp, align 8
  %29 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %30 = bitcast %struct.ref_s* %28 to i8*
  %31 = bitcast %struct.ref_s* %29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %30, i8* align 8 %31, i64 16, i1 false)
  %32 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %33 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %32, i64 -1
  store %struct.ref_s* %33, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %34

34:                                               ; preds = %26, %25, %20, %10
  %35 = load i32, i32* %2, align 4
  ret i32 %35
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zend(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** @dsp, align 8
  %5 = icmp eq %struct.ref_s* %4, getelementptr inbounds ([20 x %struct.ref_s], [20 x %struct.ref_s]* @dstack, i64 0, i64 1)
  br i1 %5, label %6, label %7

6:                                                ; preds = %1
  store i32 -4, i32* %2, align 4
  br label %10

7:                                                ; preds = %1
  %8 = load %struct.ref_s*, %struct.ref_s** @dsp, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 -1
  store %struct.ref_s* %9, %struct.ref_s** @dsp, align 8
  store i32 0, i32* %2, align 4
  br label %10

10:                                               ; preds = %7, %6
  %11 = load i32, i32* %2, align 4
  ret i32 %11
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zdef(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** getelementptr inbounds ([6 x %struct.ref_s*], [6 x %struct.ref_s*]* @osp_nargs, i64 0, i64 1), align 8
  %7 = icmp ult %struct.ref_s* %5, %6
  br i1 %7, label %8, label %9

8:                                                ; preds = %1
  store i32 -17, i32* %2, align 4
  br label %42

9:                                                ; preds = %1
  %10 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %11 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %10, i64 -1
  %12 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %11, i32 0, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = zext i16 %13 to i32
  %15 = and i32 %14, 255
  %16 = ashr i32 %15, 2
  %17 = icmp eq i32 %16, 8
  br i1 %17, label %18, label %19

18:                                               ; preds = %9
  store i32 -20, i32* %2, align 4
  br label %42

19:                                               ; preds = %9
  %20 = load %struct.ref_s*, %struct.ref_s** @dsp, align 8
  %21 = call %struct.ref_s* @dict_access_ref(%struct.ref_s* %20)
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i32 0, i32 1
  %23 = load i16, i16* %22, align 8
  %24 = zext i16 %23 to i32
  %25 = xor i32 %24, -1
  %26 = and i32 %25, 256
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %28, label %29

28:                                               ; preds = %19
  store i32 -7, i32* %2, align 4
  br label %42

29:                                               ; preds = %19
  %30 = load %struct.ref_s*, %struct.ref_s** @dsp, align 8
  %31 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %32 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %31, i64 -1
  %33 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %34 = call i32 @dict_put(%struct.ref_s* %30, %struct.ref_s* %32, %struct.ref_s* %33)
  store i32 %34, i32* %4, align 4
  %35 = load i32, i32* %4, align 4
  %36 = icmp ne i32 %35, 0
  br i1 %36, label %40, label %37

37:                                               ; preds = %29
  %38 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %39 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %38, i64 -2
  store %struct.ref_s* %39, %struct.ref_s** @osp, align 8
  br label %40

40:                                               ; preds = %37, %29
  %41 = load i32, i32* %4, align 4
  store i32 %41, i32* %2, align 4
  br label %42

42:                                               ; preds = %40, %28, %18, %8
  %43 = load i32, i32* %2, align 4
  ret i32 %43
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zload(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** getelementptr inbounds ([6 x %struct.ref_s*], [6 x %struct.ref_s*]* @osp_nargs, i64 0, i64 0), align 16
  %7 = icmp ult %struct.ref_s* %5, %6
  br i1 %7, label %8, label %9

8:                                                ; preds = %1
  store i32 -17, i32* %2, align 4
  br label %29

9:                                                ; preds = %1
  %10 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %11 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %10, i32 0, i32 1
  %12 = load i16, i16* %11, align 8
  %13 = zext i16 %12 to i32
  %14 = and i32 %13, 255
  %15 = ashr i32 %14, 2
  %16 = icmp eq i32 %15, 8
  br i1 %16, label %17, label %18

17:                                               ; preds = %9
  store i32 -20, i32* %2, align 4
  br label %29

18:                                               ; preds = %9
  %19 = load %struct.ref_s*, %struct.ref_s** @dsp, align 8
  %20 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %21 = call i32 @dict_lookup(%struct.ref_s* getelementptr inbounds ([20 x %struct.ref_s], [20 x %struct.ref_s]* @dstack, i64 0, i64 0), %struct.ref_s* %19, %struct.ref_s* %20, %struct.ref_s** %4)
  %22 = icmp sle i32 %21, 0
  br i1 %22, label %23, label %24

23:                                               ; preds = %18
  store i32 -21, i32* %2, align 4
  br label %29

24:                                               ; preds = %18
  %25 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %26 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %27 = bitcast %struct.ref_s* %25 to i8*
  %28 = bitcast %struct.ref_s* %26 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %27, i8* align 8 %28, i64 16, i1 false)
  store i32 0, i32* %2, align 4
  br label %29

29:                                               ; preds = %24, %23, %17, %8
  %30 = load i32, i32* %2, align 4
  ret i32 %30
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zstore(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** getelementptr inbounds ([6 x %struct.ref_s*], [6 x %struct.ref_s*]* @osp_nargs, i64 0, i64 1), align 8
  %8 = icmp ult %struct.ref_s* %6, %7
  br i1 %8, label %9, label %10

9:                                                ; preds = %1
  store i32 -17, i32* %2, align 4
  br label %45

10:                                               ; preds = %1
  %11 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %12 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %11, i64 -1
  %13 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %12, i32 0, i32 1
  %14 = load i16, i16* %13, align 8
  %15 = zext i16 %14 to i32
  %16 = and i32 %15, 255
  %17 = ashr i32 %16, 2
  %18 = icmp eq i32 %17, 8
  br i1 %18, label %19, label %20

19:                                               ; preds = %10
  store i32 -20, i32* %2, align 4
  br label %45

20:                                               ; preds = %10
  %21 = load %struct.ref_s*, %struct.ref_s** @dsp, align 8
  %22 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i64 -1
  %24 = call i32 @dict_lookup(%struct.ref_s* getelementptr inbounds ([20 x %struct.ref_s], [20 x %struct.ref_s]* @dstack, i64 0, i64 0), %struct.ref_s* %21, %struct.ref_s* %23, %struct.ref_s** %4)
  %25 = icmp sle i32 %24, 0
  br i1 %25, label %26, label %37

26:                                               ; preds = %20
  %27 = load %struct.ref_s*, %struct.ref_s** @dsp, align 8
  %28 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i64 -1
  %30 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %31 = call i32 @dict_put(%struct.ref_s* %27, %struct.ref_s* %29, %struct.ref_s* %30)
  store i32 %31, i32* %5, align 4
  %32 = load i32, i32* %5, align 4
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %34, label %36

34:                                               ; preds = %26
  %35 = load i32, i32* %5, align 4
  store i32 %35, i32* %2, align 4
  br label %45

36:                                               ; preds = %26
  br label %42

37:                                               ; preds = %20
  %38 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %39 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %40 = bitcast %struct.ref_s* %38 to i8*
  %41 = bitcast %struct.ref_s* %39 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %40, i8* align 8 %41, i64 16, i1 false)
  br label %42

42:                                               ; preds = %37, %36
  %43 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %44 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %43, i64 -2
  store %struct.ref_s* %44, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %45

45:                                               ; preds = %42, %34, %19, %9
  %46 = load i32, i32* %2, align 4
  ret i32 %46
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zknown(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i64 -1
  store %struct.ref_s* %7, %struct.ref_s** %4, align 8
  %8 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 1
  %10 = load i16, i16* %9, align 8
  %11 = zext i16 %10 to i32
  %12 = and i32 %11, 252
  %13 = icmp eq i32 %12, 8
  br i1 %13, label %15, label %14

14:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %52

15:                                               ; preds = %1
  %16 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %17 = call %struct.ref_s* @dict_access_ref(%struct.ref_s* %16)
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i32 0, i32 1
  %19 = load i16, i16* %18, align 8
  %20 = zext i16 %19 to i32
  %21 = xor i32 %20, -1
  %22 = and i32 %21, 512
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %15
  store i32 -7, i32* %2, align 4
  br label %52

25:                                               ; preds = %15
  %26 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %27 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %26, i32 0, i32 1
  %28 = load i16, i16* %27, align 8
  %29 = zext i16 %28 to i32
  %30 = and i32 %29, 255
  %31 = ashr i32 %30, 2
  %32 = icmp eq i32 %31, 8
  br i1 %32, label %33, label %34

33:                                               ; preds = %25
  br label %42

34:                                               ; preds = %25
  %35 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %36 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %37 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %38 = call i32 @dict_lookup(%struct.ref_s* %35, %struct.ref_s* %36, %struct.ref_s* %37, %struct.ref_s** %5)
  %39 = icmp sgt i32 %38, 0
  %40 = zext i1 %39 to i64
  %41 = select i1 %39, i32 1, i32 0
  br label %42

42:                                               ; preds = %34, %33
  %43 = phi i32 [ 0, %33 ], [ %41, %34 ]
  %44 = trunc i32 %43 to i16
  %45 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %46 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %45, i32 0, i32 0
  %47 = bitcast %union.color_sample* %46 to i16*
  store i16 %44, i16* %47, align 8
  %48 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %49 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %48, i32 0, i32 1
  store i16 4, i16* %49, align 8
  %50 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %51 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %50, i64 -1
  store %struct.ref_s* %51, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %52

52:                                               ; preds = %42, %24, %14
  %53 = load i32, i32* %2, align 4
  ret i32 %53
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zwhere(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** @dsp, align 8
  store %struct.ref_s* %6, %struct.ref_s** %4, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = load %struct.ref_s*, %struct.ref_s** getelementptr inbounds ([6 x %struct.ref_s*], [6 x %struct.ref_s*]* @osp_nargs, i64 0, i64 0), align 16
  %9 = icmp ult %struct.ref_s* %7, %8
  br i1 %9, label %10, label %11

10:                                               ; preds = %1
  store i32 -17, i32* %2, align 4
  br label %72

11:                                               ; preds = %1
  %12 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %13 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %12, i32 0, i32 1
  %14 = load i16, i16* %13, align 8
  %15 = zext i16 %14 to i32
  %16 = and i32 %15, 255
  %17 = ashr i32 %16, 2
  %18 = icmp eq i32 %17, 8
  br i1 %18, label %19, label %25

19:                                               ; preds = %11
  %20 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %21 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %20, i32 0, i32 0
  %22 = bitcast %union.color_sample* %21 to i16*
  store i16 0, i16* %22, align 8
  %23 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %24 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %23, i32 0, i32 1
  store i16 4, i16* %24, align 8
  store i32 0, i32* %2, align 4
  br label %72

25:                                               ; preds = %11
  br label %26

26:                                               ; preds = %53, %25
  %27 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %28 = call %struct.ref_s* @dict_access_ref(%struct.ref_s* %27)
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i32 0, i32 1
  %30 = load i16, i16* %29, align 8
  %31 = zext i16 %30 to i32
  %32 = xor i32 %31, -1
  %33 = and i32 %32, 512
  %34 = icmp ne i32 %33, 0
  br i1 %34, label %35, label %36

35:                                               ; preds = %26
  store i32 -7, i32* %2, align 4
  br label %72

36:                                               ; preds = %26
  %37 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %38 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %39 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %40 = call i32 @dict_lookup(%struct.ref_s* %37, %struct.ref_s* %38, %struct.ref_s* %39, %struct.ref_s** %5)
  %41 = icmp sgt i32 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %36
  br label %54

43:                                               ; preds = %36
  %44 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %45 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %44, i32 -1
  store %struct.ref_s* %45, %struct.ref_s** %4, align 8
  %46 = icmp ult %struct.ref_s* %45, getelementptr inbounds ([20 x %struct.ref_s], [20 x %struct.ref_s]* @dstack, i64 0, i64 0)
  br i1 %46, label %47, label %53

47:                                               ; preds = %43
  %48 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %49 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %48, i32 0, i32 0
  %50 = bitcast %union.color_sample* %49 to i16*
  store i16 0, i16* %50, align 8
  %51 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %52 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %51, i32 0, i32 1
  store i16 4, i16* %52, align 8
  store i32 0, i32* %2, align 4
  br label %72

53:                                               ; preds = %43
  br label %26

54:                                               ; preds = %42
  %55 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %56 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %57 = bitcast %struct.ref_s* %55 to i8*
  %58 = bitcast %struct.ref_s* %56 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %57, i8* align 8 %58, i64 16, i1 false)
  %59 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %60 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %59, i64 1
  store %struct.ref_s* %60, %struct.ref_s** %3, align 8
  store %struct.ref_s* %60, %struct.ref_s** @osp, align 8
  %61 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %62 = icmp ugt %struct.ref_s* %60, %61
  br i1 %62, label %63, label %66

63:                                               ; preds = %54
  %64 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %65 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %64, i64 -1
  store %struct.ref_s* %65, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %72

66:                                               ; preds = %54
  %67 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %68 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %67, i32 0, i32 0
  %69 = bitcast %union.color_sample* %68 to i16*
  store i16 1, i16* %69, align 8
  %70 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %71 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %70, i32 0, i32 1
  store i16 4, i16* %71, align 8
  store i32 0, i32* %2, align 4
  br label %72

72:                                               ; preds = %66, %63, %47, %35, %19, %10
  %73 = load i32, i32* %2, align 4
  ret i32 %73
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcopy_dict(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i64 -1
  store %struct.ref_s* %6, %struct.ref_s** %4, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = zext i16 %9 to i32
  %11 = and i32 %10, 252
  %12 = icmp eq i32 %11, 8
  br i1 %12, label %14, label %13

13:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %56

14:                                               ; preds = %1
  %15 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %16 = call %struct.ref_s* @dict_access_ref(%struct.ref_s* %15)
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %16, i32 0, i32 1
  %18 = load i16, i16* %17, align 8
  %19 = zext i16 %18 to i32
  %20 = xor i32 %19, -1
  %21 = and i32 %20, 512
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %23, label %24

23:                                               ; preds = %14
  store i32 -7, i32* %2, align 4
  br label %56

24:                                               ; preds = %14
  %25 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %26 = call %struct.ref_s* @dict_access_ref(%struct.ref_s* %25)
  %27 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %26, i32 0, i32 1
  %28 = load i16, i16* %27, align 8
  %29 = zext i16 %28 to i32
  %30 = xor i32 %29, -1
  %31 = and i32 %30, 256
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %24
  store i32 -7, i32* %2, align 4
  br label %56

34:                                               ; preds = %24
  %35 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %36 = call i32 @dict_length(%struct.ref_s* %35)
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %44, label %38

38:                                               ; preds = %34
  %39 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %40 = call i32 @dict_maxlength(%struct.ref_s* %39)
  %41 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %42 = call i32 @dict_maxlength(%struct.ref_s* %41)
  %43 = icmp ult i32 %40, %42
  br i1 %43, label %44, label %45

44:                                               ; preds = %38, %34
  store i32 -15, i32* %2, align 4
  br label %56

45:                                               ; preds = %38
  %46 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %47 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %48 = call i32 @dict_copy(%struct.ref_s* %46, %struct.ref_s* %47)
  %49 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %50 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %49, i64 -1
  %51 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %52 = bitcast %struct.ref_s* %50 to i8*
  %53 = bitcast %struct.ref_s* %51 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 16, i1 false)
  %54 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %55 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %54, i64 -1
  store %struct.ref_s* %55, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %56

56:                                               ; preds = %45, %44, %33, %23, %13
  %57 = load i32, i32* %2, align 4
  ret i32 %57
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcurrentdict(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i64 1
  store %struct.ref_s* %5, %struct.ref_s** %3, align 8
  store %struct.ref_s* %5, %struct.ref_s** @osp, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %7 = icmp ugt %struct.ref_s* %5, %6
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i64 -1
  store %struct.ref_s* %10, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %16

11:                                               ; preds = %1
  %12 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %13 = load %struct.ref_s*, %struct.ref_s** @dsp, align 8
  %14 = bitcast %struct.ref_s* %12 to i8*
  %15 = bitcast %struct.ref_s* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %14, i8* align 8 %15, i64 16, i1 false)
  store i32 0, i32* %2, align 4
  br label %16

16:                                               ; preds = %11, %8
  %17 = load i32, i32* %2, align 4
  ret i32 %17
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcountdictstack(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i64 1
  store %struct.ref_s* %5, %struct.ref_s** %3, align 8
  store %struct.ref_s* %5, %struct.ref_s** @osp, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %7 = icmp ugt %struct.ref_s* %5, %6
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i64 -1
  store %struct.ref_s* %10, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %22

11:                                               ; preds = %1
  %12 = load %struct.ref_s*, %struct.ref_s** @dsp, align 8
  %13 = ptrtoint %struct.ref_s* %12 to i64
  %14 = sub i64 %13, ptrtoint ([20 x %struct.ref_s]* @dstack to i64)
  %15 = sdiv exact i64 %14, 16
  %16 = add nsw i64 %15, 1
  %17 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i32 0, i32 0
  %19 = bitcast %union.color_sample* %18 to i64*
  store i64 %16, i64* %19, align 8
  %20 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %21 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %20, i32 0, i32 1
  store i16 20, i16* %21, align 8
  store i32 0, i32* %2, align 4
  br label %22

22:                                               ; preds = %11, %8
  %23 = load i32, i32* %2, align 4
  ret i32 %23
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zdictstack(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** @dsp, align 8
  %6 = ptrtoint %struct.ref_s* %5 to i64
  %7 = sub i64 %6, ptrtoint ([20 x %struct.ref_s]* @dstack to i64)
  %8 = sdiv exact i64 %7, 16
  %9 = add nsw i64 %8, 1
  %10 = trunc i64 %9 to i32
  store i32 %10, i32* %4, align 4
  %11 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %12 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %11, i32 0, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = zext i16 %13 to i32
  %15 = and i32 %14, 252
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %18, label %17

17:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %52

18:                                               ; preds = %1
  %19 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i32 0, i32 1
  %21 = load i16, i16* %20, align 8
  %22 = zext i16 %21 to i32
  %23 = xor i32 %22, -1
  %24 = and i32 %23, 256
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %27

26:                                               ; preds = %18
  store i32 -7, i32* %2, align 4
  br label %52

27:                                               ; preds = %18
  %28 = load i32, i32* %4, align 4
  %29 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %30 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %29, i32 0, i32 2
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = icmp sgt i32 %28, %32
  br i1 %33, label %34, label %35

34:                                               ; preds = %27
  store i32 -15, i32* %2, align 4
  br label %52

35:                                               ; preds = %27
  %36 = load i32, i32* %4, align 4
  %37 = trunc i32 %36 to i16
  %38 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %39 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %38, i32 0, i32 2
  store i16 %37, i16* %39, align 2
  %40 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %41 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %40, i32 0, i32 1
  %42 = load i16, i16* %41, align 8
  %43 = zext i16 %42 to i32
  %44 = or i32 %43, 32768
  %45 = trunc i32 %44 to i16
  store i16 %45, i16* %41, align 8
  %46 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %47 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %46, i32 0, i32 0
  %48 = bitcast %union.color_sample* %47 to %struct.ref_s**
  %49 = load %struct.ref_s*, %struct.ref_s** %48, align 8
  %50 = load i32, i32* %4, align 4
  %51 = call i32 (%struct.ref_s*, %struct.ref_s*, i32, ...) bitcast (void (%struct.ref_s*, %struct.ref_s*, i32)* @refcpy to i32 (%struct.ref_s*, %struct.ref_s*, i32, ...)*)(%struct.ref_s* %49, %struct.ref_s* getelementptr inbounds ([20 x %struct.ref_s], [20 x %struct.ref_s]* @dstack, i64 0, i64 0), i32 %50)
  store i32 0, i32* %2, align 4
  br label %52

52:                                               ; preds = %35, %34, %26, %17
  %53 = load i32, i32* %2, align 4
  ret i32 %53
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @zdict_op_init() #0 {
  %1 = call i32 (%struct.op_def*, ...) bitcast (void (%struct.op_def*)* @z_op_init to i32 (%struct.op_def*, ...)*)(%struct.op_def* getelementptr inbounds ([14 x %struct.op_def], [14 x %struct.op_def]* @zdict_op_init.my_defs, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @zfile_init() #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.ref_s*, align 8
  %3 = load %struct.stream_s*, %struct.stream_s** getelementptr inbounds ([5 x %struct.file_entry_s], [5 x %struct.file_entry_s]* @std_files, i64 0, i64 0, i32 0), align 16
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  call void @sread_file(%struct.stream_s* %3, %struct._IO_FILE* %4, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @stdin_buf, i64 0, i64 0), i32 1)
  %5 = load %struct.stream_s*, %struct.stream_s** getelementptr inbounds ([5 x %struct.file_entry_s], [5 x %struct.file_entry_s]* @std_files, i64 0, i64 1, i32 0), align 16
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  call void @swrite_file(%struct.stream_s* %5, %struct._IO_FILE* %6, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @stdout_buf, i64 0, i64 0), i32 128)
  %7 = load %struct.stream_s*, %struct.stream_s** getelementptr inbounds ([5 x %struct.file_entry_s], [5 x %struct.file_entry_s]* @std_files, i64 0, i64 2, i32 0), align 16
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  call void @swrite_file(%struct.stream_s* %7, %struct._IO_FILE* %8, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @stderr_buf, i64 0, i64 0), i32 128)
  store i32 0, i32* %1, align 4
  br label %9

9:                                                ; preds = %36, %0
  %10 = load i32, i32* %1, align 4
  %11 = icmp slt i32 %10, 5
  br i1 %11, label %12, label %39

12:                                               ; preds = %9
  %13 = load i32, i32* %1, align 4
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds [5 x %struct.file_entry_s], [5 x %struct.file_entry_s]* @std_files, i64 0, i64 %14
  %16 = getelementptr inbounds %struct.file_entry_s, %struct.file_entry_s* %15, i32 0, i32 2
  store %struct.ref_s* %16, %struct.ref_s** %2, align 8
  %17 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i32 0, i32 0
  %19 = bitcast %union.color_sample* %18 to i64*
  store i64 0, i64* %19, align 8
  %20 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %21 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %20, i32 0, i32 1
  store i16 32, i16* %21, align 8
  %22 = load i32, i32* %1, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds [5 x i8*], [5 x i8*]* @std_file_names, i64 0, i64 %23
  %25 = load i8*, i8** %24, align 8
  %26 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %27 = call i32 (i8*, %struct.ref_s*, i8*, ...) bitcast (i32 (i8*, %struct.ref_s*, i8*)* @string_to_ref to i32 (i8*, %struct.ref_s*, i8*, ...)*)(i8* %25, %struct.ref_s* %26, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.424, i64 0, i64 0))
  %28 = icmp slt i32 %27, 0
  br i1 %28, label %29, label %35

29:                                               ; preds = %12
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %31 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1.425, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2.426, i64 0, i64 0), i32 149)
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %33 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3.427, i64 0, i64 0))
  %34 = call i32 (i32, ...) bitcast (void (i32)* @gs_exit to i32 (i32, ...)*)(i32 1)
  br label %35

35:                                               ; preds = %29, %12
  br label %36

36:                                               ; preds = %35
  %37 = load i32, i32* %1, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, i32* %1, align 4
  br label %9

39:                                               ; preds = %9
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zfile(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca %struct.ref_s, align 8
  %6 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i64 -1
  %9 = bitcast %struct.ref_s* %5 to i8*
  %10 = bitcast %struct.ref_s* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 16, i1 false)
  %11 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i32 0, i32 1
  %12 = load i16, i16* %11, align 8
  %13 = zext i16 %12 to i32
  %14 = and i32 %13, 252
  %15 = icmp eq i32 %14, 52
  br i1 %15, label %17, label %16

16:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %74

17:                                               ; preds = %1
  %18 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i32 0, i32 1
  %20 = load i16, i16* %19, align 8
  %21 = zext i16 %20 to i32
  %22 = and i32 %21, 252
  %23 = icmp eq i32 %22, 52
  br i1 %23, label %25, label %24

24:                                               ; preds = %17
  store i32 -20, i32* %2, align 4
  br label %74

25:                                               ; preds = %17
  %26 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %27 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %26, i32 0, i32 2
  %28 = load i16, i16* %27, align 2
  %29 = zext i16 %28 to i32
  %30 = icmp ne i32 %29, 1
  br i1 %30, label %31, label %32

31:                                               ; preds = %25
  store i32 -9, i32* %2, align 4
  br label %74

32:                                               ; preds = %25
  %33 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %34 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %33, i32 0, i32 0
  %35 = bitcast %union.color_sample* %34 to i8**
  %36 = load i8*, i8** %35, align 8
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  switch i32 %38, label %41 [
    i32 114, label %39
    i32 119, label %40
  ]

39:                                               ; preds = %32
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4.430, i64 0, i64 0), i8** %4, align 8
  br label %42

40:                                               ; preds = %32
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5.431, i64 0, i64 0), i8** %4, align 8
  br label %42

41:                                               ; preds = %32
  store i32 -9, i32* %2, align 4
  br label %74

42:                                               ; preds = %40, %39
  %43 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %44 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %43, i64 -1
  %45 = load i8*, i8** %4, align 8
  %46 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %47 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %46, i64 -1
  %48 = call i32 @open_std_file(%struct.ref_s* %44, i8* %45, %struct.ref_s* %47)
  store i32 %48, i32* %6, align 4
  %49 = load i32, i32* %6, align 4
  switch i32 %49, label %53 [
    i32 0, label %50
    i32 -22, label %55
  ]

50:                                               ; preds = %42
  %51 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %52 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %51, i64 -1
  store %struct.ref_s* %52, %struct.ref_s** @osp, align 8
  br label %53

53:                                               ; preds = %50, %42
  %54 = load i32, i32* %6, align 4
  store i32 %54, i32* %2, align 4
  br label %74

55:                                               ; preds = %42
  br label %56

56:                                               ; preds = %55
  %57 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i32 0, i32 0
  %58 = bitcast %union.color_sample* %57 to i8**
  %59 = load i8*, i8** %58, align 8
  %60 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i32 0, i32 2
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i32
  %63 = load i8*, i8** %4, align 8
  %64 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %65 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %64, i64 -1
  %66 = call i32 @file_open(i8* %59, i32 %62, i8* %63, %struct.ref_s* %65)
  store i32 %66, i32* %6, align 4
  %67 = load i32, i32* %6, align 4
  %68 = icmp sge i32 %67, 0
  br i1 %68, label %69, label %72

69:                                               ; preds = %56
  %70 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %71 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %70, i64 -1
  store %struct.ref_s* %71, %struct.ref_s** @osp, align 8
  br label %72

72:                                               ; preds = %69, %56
  %73 = load i32, i32* %6, align 4
  store i32 %73, i32* %2, align 4
  br label %74

74:                                               ; preds = %72, %53, %41, %31, %24, %16
  %75 = load i32, i32* %2, align 4
  ret i32 %75
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @open_std_file(%struct.ref_s* %0, i8* %1, %struct.ref_s* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.ref_s*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca %struct.ref_s*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.file_entry_s*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %5, align 8
  store i8* %1, i8** %6, align 8
  store %struct.ref_s* %2, %struct.ref_s** %7, align 8
  store i32 0, i32* %8, align 4
  br label %13

13:                                               ; preds = %82, %3
  %14 = load i32, i32* %8, align 4
  %15 = icmp slt i32 %14, 5
  br i1 %15, label %16, label %85

16:                                               ; preds = %13
  %17 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i32 0, i32 0
  %19 = bitcast %union.color_sample* %18 to i8**
  %20 = load i8*, i8** %19, align 8
  %21 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i32 0, i32 2
  %23 = load i16, i16* %22, align 2
  %24 = zext i16 %23 to i32
  %25 = load i32, i32* %8, align 4
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds [5 x i8*], [5 x i8*]* @std_file_names, i64 0, i64 %26
  %28 = load i8*, i8** %27, align 8
  %29 = load i32, i32* %8, align 4
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds [5 x i8*], [5 x i8*]* @std_file_names, i64 0, i64 %30
  %32 = load i8*, i8** %31, align 8
  %33 = call i64 @strlen(i8* %32) #11
  %34 = call i32 (i8*, i32, i8*, i64, ...) bitcast (i32 (i8*, i32, i8*, i32)* @bytes_compare to i32 (i8*, i32, i8*, i64, ...)*)(i8* %20, i32 %24, i8* %28, i64 %33)
  %35 = icmp ne i32 %34, 0
  br i1 %35, label %81, label %36

36:                                               ; preds = %16
  %37 = load i8*, i8** %6, align 8
  %38 = load i8, i8* %37, align 1
  %39 = sext i8 %38 to i32
  %40 = icmp eq i32 %39, 114
  %41 = zext i1 %40 to i64
  %42 = select i1 %40, i32 514, i32 258
  store i32 %42, i32* %9, align 4
  %43 = load i32, i32* %8, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [5 x %struct.file_entry_s], [5 x %struct.file_entry_s]* @std_files, i64 0, i64 %44
  store %struct.file_entry_s* %45, %struct.file_entry_s** %10, align 8
  %46 = load i32, i32* %9, align 4
  %47 = load i32, i32* %8, align 4
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds [5 x i32], [5 x i32]* @std_file_attrs, i64 0, i64 %48
  %50 = load i32, i32* %49, align 4
  %51 = icmp ne i32 %46, %50
  br i1 %51, label %52, label %53

52:                                               ; preds = %36
  store i32 -7, i32* %4, align 4
  br label %86

53:                                               ; preds = %36
  %54 = load %struct.file_entry_s*, %struct.file_entry_s** %10, align 8
  %55 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %56 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %55, i32 0, i32 0
  %57 = bitcast %union.color_sample* %56 to %struct.file_entry_s**
  store %struct.file_entry_s* %54, %struct.file_entry_s** %57, align 8
  %58 = load i32, i32* %9, align 4
  %59 = add nsw i32 12, %58
  %60 = trunc i32 %59 to i16
  %61 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %62 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %61, i32 0, i32 1
  store i16 %60, i16* %62, align 8
  %63 = load i32, i32* %8, align 4
  switch i32 %63, label %80 [
    i32 3, label %64
    i32 4, label %64
  ]

64:                                               ; preds = %53, %53
  %65 = call i32 @zreadline_stdin(i8* getelementptr inbounds ([160 x i8], [160 x i8]* @lineedit_buf, i64 0, i64 0), i32 160, i32* %11)
  store i32 %65, i32* %12, align 4
  %66 = load i32, i32* %12, align 4
  %67 = icmp slt i32 %66, 0
  br i1 %67, label %68, label %70

68:                                               ; preds = %64
  %69 = load i32, i32* %12, align 4
  store i32 %69, i32* %4, align 4
  br label %86

70:                                               ; preds = %64
  %71 = load i32, i32* %8, align 4
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds [5 x %struct.stream_s], [5 x %struct.stream_s]* @std_file_streams, i64 0, i64 %72
  %74 = load %struct.file_entry_s*, %struct.file_entry_s** %10, align 8
  %75 = getelementptr inbounds %struct.file_entry_s, %struct.file_entry_s* %74, i32 0, i32 0
  store %struct.stream_s* %73, %struct.stream_s** %75, align 8
  %76 = load %struct.file_entry_s*, %struct.file_entry_s** %10, align 8
  %77 = getelementptr inbounds %struct.file_entry_s, %struct.file_entry_s* %76, i32 0, i32 0
  %78 = load %struct.stream_s*, %struct.stream_s** %77, align 8
  %79 = load i32, i32* %11, align 4
  call void @sread_string(%struct.stream_s* %78, i8* getelementptr inbounds ([160 x i8], [160 x i8]* @lineedit_buf, i64 0, i64 0), i32 %79)
  store i32 0, i32* %4, align 4
  br label %86

80:                                               ; preds = %53
  store i32 0, i32* %4, align 4
  br label %86

81:                                               ; preds = %16
  br label %82

82:                                               ; preds = %81
  %83 = load i32, i32* %8, align 4
  %84 = add nsw i32 %83, 1
  store i32 %84, i32* %8, align 4
  br label %13

85:                                               ; preds = %13
  store i32 -22, i32* %4, align 4
  br label %86

86:                                               ; preds = %85, %80, %70, %68, %52
  %87 = load i32, i32* %4, align 4
  ret i32 %87
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @file_open(i8* %0, i32 %1, i8* %2, %struct.ref_s* %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca %struct.ref_s*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca %struct.stream_s*, align 8
  %12 = alloca %struct.file_entry_s*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca %struct._IO_FILE*, align 8
  store i8* %0, i8** %6, align 8
  store i32 %1, i32* %7, align 4
  store i8* %2, i8** %8, align 8
  store %struct.ref_s* %3, %struct.ref_s** %9, align 8
  %16 = load i32, i32* %7, align 4
  %17 = icmp uge i32 %16, 512
  br i1 %17, label %18, label %19

18:                                               ; preds = %4
  store i32 -13, i32* %5, align 4
  br label %112

19:                                               ; preds = %4
  %20 = call i8* @alloc(i32 1, i32 32, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.37.432, i64 0, i64 0))
  %21 = bitcast i8* %20 to %struct.file_entry_s*
  store %struct.file_entry_s* %21, %struct.file_entry_s** %12, align 8
  %22 = load %struct.file_entry_s*, %struct.file_entry_s** %12, align 8
  %23 = icmp eq %struct.file_entry_s* %22, null
  br i1 %23, label %24, label %25

24:                                               ; preds = %19
  store i32 -25, i32* %5, align 4
  br label %112

25:                                               ; preds = %19
  %26 = call i8* @alloc(i32 512, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.38.433, i64 0, i64 0))
  store i8* %26, i8** %10, align 8
  %27 = load i8*, i8** %10, align 8
  %28 = icmp eq i8* %27, null
  br i1 %28, label %29, label %32

29:                                               ; preds = %25
  %30 = load %struct.file_entry_s*, %struct.file_entry_s** %12, align 8
  %31 = bitcast %struct.file_entry_s* %30 to i8*
  call void @alloc_free(i8* %31, i32 1, i32 32, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.37.432, i64 0, i64 0))
  store i32 -25, i32* %5, align 4
  br label %112

32:                                               ; preds = %25
  %33 = call i8* @alloc(i32 1, i32 120, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.39.434, i64 0, i64 0))
  %34 = bitcast i8* %33 to %struct.stream_s*
  store %struct.stream_s* %34, %struct.stream_s** %11, align 8
  %35 = load %struct.stream_s*, %struct.stream_s** %11, align 8
  %36 = icmp eq %struct.stream_s* %35, null
  br i1 %36, label %37, label %41

37:                                               ; preds = %32
  %38 = load i8*, i8** %10, align 8
  call void @alloc_free(i8* %38, i32 512, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.38.433, i64 0, i64 0))
  %39 = load %struct.file_entry_s*, %struct.file_entry_s** %12, align 8
  %40 = bitcast %struct.file_entry_s* %39 to i8*
  call void @alloc_free(i8* %40, i32 1, i32 32, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.37.432, i64 0, i64 0))
  store i32 -25, i32* %5, align 4
  br label %112

41:                                               ; preds = %32
  %42 = load i8*, i8** %6, align 8
  %43 = icmp ne i8* %42, null
  br i1 %43, label %44, label %86

44:                                               ; preds = %41
  %45 = load i8*, i8** %10, align 8
  store i8* %45, i8** %14, align 8
  %46 = load i8*, i8** %14, align 8
  %47 = load i8*, i8** %6, align 8
  %48 = load i32, i32* %7, align 4
  %49 = zext i32 %48 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %46, i8* align 1 %47, i64 %49, i1 false)
  %50 = load i8*, i8** %14, align 8
  %51 = load i32, i32* %7, align 4
  %52 = zext i32 %51 to i64
  %53 = getelementptr inbounds i8, i8* %50, i64 %52
  store i8 0, i8* %53, align 1
  %54 = load i8*, i8** %14, align 8
  %55 = load i8*, i8** %8, align 8
  %56 = call %struct._IO_FILE* @fopen(i8* %54, i8* %55)
  store %struct._IO_FILE* %56, %struct._IO_FILE** %15, align 8
  store i32 -22, i32* %13, align 4
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8
  %58 = icmp eq %struct._IO_FILE* %57, null
  br i1 %58, label %65, label %59

59:                                               ; preds = %44
  %60 = load i8*, i8** %14, align 8
  %61 = load %struct.file_entry_s*, %struct.file_entry_s** %12, align 8
  %62 = getelementptr inbounds %struct.file_entry_s, %struct.file_entry_s* %61, i32 0, i32 2
  %63 = call i32 (i8*, %struct.ref_s*, i8*, ...) bitcast (i32 (i8*, %struct.ref_s*, i8*)* @string_to_ref to i32 (i8*, %struct.ref_s*, i8*, ...)*)(i8* %60, %struct.ref_s* %62, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.40, i64 0, i64 0))
  store i32 %63, i32* %13, align 4
  %64 = icmp slt i32 %63, 0
  br i1 %64, label %65, label %72

65:                                               ; preds = %59, %44
  %66 = load %struct.stream_s*, %struct.stream_s** %11, align 8
  %67 = bitcast %struct.stream_s* %66 to i8*
  call void @alloc_free(i8* %67, i32 1, i32 120, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.39.434, i64 0, i64 0))
  %68 = load i8*, i8** %10, align 8
  call void @alloc_free(i8* %68, i32 512, i32 1, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.38.433, i64 0, i64 0))
  %69 = load %struct.file_entry_s*, %struct.file_entry_s** %12, align 8
  %70 = bitcast %struct.file_entry_s* %69 to i8*
  call void @alloc_free(i8* %70, i32 1, i32 32, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.37.432, i64 0, i64 0))
  %71 = load i32, i32* %13, align 4
  store i32 %71, i32* %5, align 4
  br label %112

72:                                               ; preds = %59
  %73 = load i8*, i8** %8, align 8
  %74 = load i8, i8* %73, align 1
  %75 = sext i8 %74 to i32
  %76 = icmp eq i32 %75, 114
  br i1 %76, label %77, label %81

77:                                               ; preds = %72
  %78 = load %struct.stream_s*, %struct.stream_s** %11, align 8
  %79 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8
  %80 = load i8*, i8** %10, align 8
  call void @sread_file(%struct.stream_s* %78, %struct._IO_FILE* %79, i8* %80, i32 512)
  br label %85

81:                                               ; preds = %72
  %82 = load %struct.stream_s*, %struct.stream_s** %11, align 8
  %83 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8
  %84 = load i8*, i8** %10, align 8
  call void @swrite_file(%struct.stream_s* %82, %struct._IO_FILE* %83, i8* %84, i32 512)
  br label %85

85:                                               ; preds = %81, %77
  br label %92

86:                                               ; preds = %41
  %87 = load i8*, i8** %10, align 8
  %88 = load %struct.stream_s*, %struct.stream_s** %11, align 8
  %89 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %88, i32 0, i32 2
  store i8* %87, i8** %89, align 8
  %90 = load %struct.stream_s*, %struct.stream_s** %11, align 8
  %91 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %90, i32 0, i32 3
  store i32 512, i32* %91, align 8
  br label %92

92:                                               ; preds = %86, %85
  %93 = load %struct.stream_s*, %struct.stream_s** %11, align 8
  %94 = load %struct.file_entry_s*, %struct.file_entry_s** %12, align 8
  %95 = getelementptr inbounds %struct.file_entry_s, %struct.file_entry_s* %94, i32 0, i32 0
  store %struct.stream_s* %93, %struct.stream_s** %95, align 8
  %96 = load %struct.file_entry_s*, %struct.file_entry_s** %12, align 8
  %97 = getelementptr inbounds %struct.file_entry_s, %struct.file_entry_s* %96, i32 0, i32 1
  store i32 1, i32* %97, align 8
  %98 = load %struct.file_entry_s*, %struct.file_entry_s** %12, align 8
  %99 = load %struct.ref_s*, %struct.ref_s** %9, align 8
  %100 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %99, i32 0, i32 0
  %101 = bitcast %union.color_sample* %100 to %struct.file_entry_s**
  store %struct.file_entry_s* %98, %struct.file_entry_s** %101, align 8
  %102 = load i8*, i8** %8, align 8
  %103 = load i8, i8* %102, align 1
  %104 = sext i8 %103 to i32
  %105 = icmp eq i32 %104, 114
  %106 = zext i1 %105 to i64
  %107 = select i1 %105, i32 514, i32 258
  %108 = add nsw i32 12, %107
  %109 = trunc i32 %108 to i16
  %110 = load %struct.ref_s*, %struct.ref_s** %9, align 8
  %111 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %110, i32 0, i32 1
  store i16 %109, i16* %111, align 8
  store i32 0, i32* %5, align 4
  br label %112

112:                                              ; preds = %92, %65, %37, %29, %24, %18
  %113 = load i32, i32* %5, align 4
  ret i32 %113
}

declare dso_local %struct._IO_FILE* @fopen(i8*, i8*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zreadline_stdin(i8* %0, i32 %1, i32* %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32*, align 8
  store i8* %0, i8** %4, align 8
  store i32 %1, i32* %5, align 4
  store i32* %2, i32** %6, align 8
  %7 = load i8*, i8** %4, align 8
  %8 = load i32, i32* %5, align 4
  %9 = load i32*, i32** %6, align 8
  %10 = load %struct.stream_s*, %struct.stream_s** getelementptr inbounds ([5 x %struct.file_entry_s], [5 x %struct.file_entry_s]* @std_files, i64 0, i64 0, i32 0), align 16
  %11 = call i32 @zreadline_from(i8* %7, i32 %8, i32* %9, %struct.stream_s* %10)
  ret i32 %11
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zreadline_from(i8* %0, i32 %1, i32* %2, %struct.stream_s* %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32*, align 8
  %9 = alloca %struct.stream_s*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i8* %0, i8** %6, align 8
  store i32 %1, i32* %7, align 4
  store i32* %2, i32** %8, align 8
  store %struct.stream_s* %3, %struct.stream_s** %9, align 8
  store i32 0, i32* %10, align 4
  br label %12

12:                                               ; preds = %81, %4
  %13 = load i32, i32* %10, align 4
  %14 = load i32, i32* %7, align 4
  %15 = icmp ult i32 %13, %14
  br i1 %15, label %16, label %88

16:                                               ; preds = %12
  %17 = load %struct.stream_s*, %struct.stream_s** %9, align 8
  %18 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %17, i32 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = load %struct.stream_s*, %struct.stream_s** %9, align 8
  %21 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %20, i32 0, i32 1
  %22 = load i8*, i8** %21, align 8
  %23 = icmp ult i8* %19, %22
  br i1 %23, label %24, label %31

24:                                               ; preds = %16
  %25 = load %struct.stream_s*, %struct.stream_s** %9, align 8
  %26 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %25, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = getelementptr inbounds i8, i8* %27, i32 1
  store i8* %28, i8** %26, align 8
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  br label %38

31:                                               ; preds = %16
  %32 = load %struct.stream_s*, %struct.stream_s** %9, align 8
  %33 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %32, i32 0, i32 7
  %34 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %33, i32 0, i32 0
  %35 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %34, align 8
  %36 = load %struct.stream_s*, %struct.stream_s** %9, align 8
  %37 = call i32 %35(%struct.stream_s* %36)
  br label %38

38:                                               ; preds = %31, %24
  %39 = phi i32 [ %30, %24 ], [ %37, %31 ]
  store i32 %39, i32* %11, align 4
  switch i32 %39, label %81 [
    i32 13, label %40
    i32 10, label %75
    i32 -1, label %78
  ]

40:                                               ; preds = %38
  %41 = load %struct.stream_s*, %struct.stream_s** %9, align 8
  %42 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %41, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = load %struct.stream_s*, %struct.stream_s** %9, align 8
  %45 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %44, i32 0, i32 1
  %46 = load i8*, i8** %45, align 8
  %47 = icmp ult i8* %43, %46
  br i1 %47, label %48, label %55

48:                                               ; preds = %40
  %49 = load %struct.stream_s*, %struct.stream_s** %9, align 8
  %50 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %49, i32 0, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr inbounds i8, i8* %51, i32 1
  store i8* %52, i8** %50, align 8
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  br label %62

55:                                               ; preds = %40
  %56 = load %struct.stream_s*, %struct.stream_s** %9, align 8
  %57 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %56, i32 0, i32 7
  %58 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %57, i32 0, i32 0
  %59 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %58, align 8
  %60 = load %struct.stream_s*, %struct.stream_s** %9, align 8
  %61 = call i32 %59(%struct.stream_s* %60)
  br label %62

62:                                               ; preds = %55, %48
  %63 = phi i32 [ %54, %48 ], [ %61, %55 ]
  store i32 %63, i32* %11, align 4
  %64 = load i32, i32* %11, align 4
  %65 = icmp ne i32 %64, 10
  br i1 %65, label %66, label %74

66:                                               ; preds = %62
  %67 = load i32, i32* %11, align 4
  %68 = icmp ne i32 %67, -1
  br i1 %68, label %69, label %74

69:                                               ; preds = %66
  %70 = load %struct.stream_s*, %struct.stream_s** %9, align 8
  %71 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %70, i32 0, i32 0
  %72 = load i8*, i8** %71, align 8
  %73 = getelementptr inbounds i8, i8* %72, i32 -1
  store i8* %73, i8** %71, align 8
  br label %74

74:                                               ; preds = %69, %66, %62
  br label %75

75:                                               ; preds = %74, %38
  %76 = load i32, i32* %10, align 4
  %77 = load i32*, i32** %8, align 8
  store i32 %76, i32* %77, align 4
  store i32 1, i32* %5, align 4
  br label %89

78:                                               ; preds = %38
  %79 = load i32, i32* %10, align 4
  %80 = load i32*, i32** %8, align 8
  store i32 %79, i32* %80, align 4
  store i32 0, i32* %5, align 4
  br label %89

81:                                               ; preds = %38
  %82 = load i32, i32* %11, align 4
  %83 = trunc i32 %82 to i8
  %84 = load i8*, i8** %6, align 8
  %85 = getelementptr inbounds i8, i8* %84, i32 1
  store i8* %85, i8** %6, align 8
  store i8 %83, i8* %84, align 1
  %86 = load i32, i32* %10, align 4
  %87 = add i32 %86, 1
  store i32 %87, i32* %10, align 4
  br label %12

88:                                               ; preds = %12
  store i32 -15, i32* %5, align 4
  br label %89

89:                                               ; preds = %88, %78, %75
  %90 = load i32, i32* %5, align 4
  ret i32 %90
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zclosefile(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.stream_s*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct.file_entry_s*, align 8
  %7 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %8 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 1
  %10 = load i16, i16* %9, align 8
  %11 = zext i16 %10 to i32
  %12 = and i32 %11, 255
  %13 = ashr i32 %12, 2
  %14 = icmp ne i32 %13, 3
  br i1 %14, label %15, label %16

15:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %59

16:                                               ; preds = %1
  %17 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i32 0, i32 0
  %19 = bitcast %union.color_sample* %18 to %struct.file_entry_s**
  %20 = load %struct.file_entry_s*, %struct.file_entry_s** %19, align 8
  store %struct.file_entry_s* %20, %struct.file_entry_s** %6, align 8
  %21 = load %struct.file_entry_s*, %struct.file_entry_s** %6, align 8
  %22 = getelementptr inbounds %struct.file_entry_s, %struct.file_entry_s* %21, i32 0, i32 0
  %23 = load %struct.stream_s*, %struct.stream_s** %22, align 8
  store %struct.stream_s* %23, %struct.stream_s** %4, align 8
  %24 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %25 = icmp eq %struct.stream_s* %24, null
  br i1 %25, label %26, label %27

26:                                               ; preds = %16
  store i32 -7, i32* %2, align 4
  br label %59

27:                                               ; preds = %16
  %28 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %29 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %30 = call i32 @file_close(%struct.ref_s* %28, %struct.stream_s* %29)
  store i32 %30, i32* %5, align 4
  %31 = icmp sge i32 %30, 0
  br i1 %31, label %32, label %57

32:                                               ; preds = %27
  %33 = call %struct.ref_s* @get_current_file()
  store %struct.ref_s* %33, %struct.ref_s** %7, align 8
  %34 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %35 = icmp ne %struct.ref_s* %34, null
  br i1 %35, label %36, label %54

36:                                               ; preds = %32
  %37 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %38 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %37, i32 0, i32 0
  %39 = bitcast %union.color_sample* %38 to %struct.file_entry_s**
  %40 = load %struct.file_entry_s*, %struct.file_entry_s** %39, align 8
  %41 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %42 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %41, i32 0, i32 0
  %43 = bitcast %union.color_sample* %42 to %struct.file_entry_s**
  %44 = load %struct.file_entry_s*, %struct.file_entry_s** %43, align 8
  %45 = icmp eq %struct.file_entry_s* %40, %44
  br i1 %45, label %46, label %54

46:                                               ; preds = %36
  %47 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %48 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %47, i32 0, i32 0
  %49 = bitcast %union.color_sample* %48 to %struct.ref_s**
  store %struct.ref_s* null, %struct.ref_s** %49, align 8
  %50 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %51 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %50, i32 0, i32 1
  store i16 3, i16* %51, align 8
  %52 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %53 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %52, i32 0, i32 2
  store i16 0, i16* %53, align 2
  br label %54

54:                                               ; preds = %46, %36, %32
  %55 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %56 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %55, i64 -1
  store %struct.ref_s* %56, %struct.ref_s** @osp, align 8
  br label %57

57:                                               ; preds = %54, %27
  %58 = load i32, i32* %5, align 4
  store i32 %58, i32* %2, align 4
  br label %59

59:                                               ; preds = %57, %26, %15
  %60 = load i32, i32* %2, align 4
  ret i32 %60
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @file_close(%struct.ref_s* %0, %struct.stream_s* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca %struct.stream_s*, align 8
  %6 = alloca %struct.file_entry_s*, align 8
  %7 = alloca i8*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %4, align 8
  store %struct.stream_s* %1, %struct.stream_s** %5, align 8
  %8 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 0
  %10 = bitcast %union.color_sample* %9 to %struct.file_entry_s**
  %11 = load %struct.file_entry_s*, %struct.file_entry_s** %10, align 8
  store %struct.file_entry_s* %11, %struct.file_entry_s** %6, align 8
  %12 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %13 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %12, i32 0, i32 2
  %14 = load i8*, i8** %13, align 8
  store i8* %14, i8** %7, align 8
  %15 = load %struct.file_entry_s*, %struct.file_entry_s** %6, align 8
  %16 = getelementptr inbounds %struct.file_entry_s, %struct.file_entry_s* %15, i32 0, i32 1
  %17 = load i32, i32* %16, align 8
  switch i32 %17, label %26 [
    i32 0, label %18
    i32 -1, label %19
  ]

18:                                               ; preds = %2
  store i32 -7, i32* %3, align 4
  br label %42

19:                                               ; preds = %2
  %20 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %21 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %20, i32 0, i32 7
  %22 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %21, i32 0, i32 5
  %23 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %22, align 8
  %24 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %25 = call i32 %23(%struct.stream_s* %24)
  br label %39

26:                                               ; preds = %2
  %27 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %28 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %27, i32 0, i32 7
  %29 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %28, i32 0, i32 5
  %30 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %29, align 8
  %31 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %32 = call i32 %30(%struct.stream_s* %31)
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %26
  store i32 -12, i32* %3, align 4
  br label %42

35:                                               ; preds = %26
  %36 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %37 = bitcast %struct.stream_s* %36 to i8*
  call void @alloc_free(i8* %37, i32 1, i32 120, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.41.437, i64 0, i64 0))
  %38 = load i8*, i8** %7, align 8
  call void @alloc_free(i8* %38, i32 512, i32 1, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.42, i64 0, i64 0))
  br label %39

39:                                               ; preds = %35, %19
  %40 = load %struct.file_entry_s*, %struct.file_entry_s** %6, align 8
  %41 = getelementptr inbounds %struct.file_entry_s, %struct.file_entry_s* %40, i32 0, i32 0
  store %struct.stream_s* null, %struct.stream_s** %41, align 8
  store i32 0, i32* %3, align 4
  br label %42

42:                                               ; preds = %39, %34, %18
  %43 = load i32, i32* %3, align 4
  ret i32 %43
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.ref_s* @get_current_file() #0 {
  %1 = alloca %struct.ref_s*, align 8
  %2 = alloca %struct.ref_s*, align 8
  %3 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  store %struct.ref_s* %3, %struct.ref_s** %2, align 8
  br label %4

4:                                                ; preds = %25, %0
  %5 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %6 = icmp uge %struct.ref_s* %5, getelementptr inbounds ([150 x %struct.ref_s], [150 x %struct.ref_s]* @estack, i64 0, i64 0)
  br i1 %6, label %7, label %28

7:                                                ; preds = %4
  %8 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 1
  %10 = load i16, i16* %9, align 8
  %11 = zext i16 %10 to i32
  %12 = and i32 %11, 255
  %13 = ashr i32 %12, 2
  %14 = icmp eq i32 %13, 3
  br i1 %14, label %15, label %25

15:                                               ; preds = %7
  %16 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %16, i32 0, i32 1
  %18 = load i16, i16* %17, align 8
  %19 = zext i16 %18 to i32
  %20 = xor i32 %19, -1
  %21 = and i32 %20, 1
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %25, label %23

23:                                               ; preds = %15
  %24 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  store %struct.ref_s* %24, %struct.ref_s** %1, align 8
  br label %29

25:                                               ; preds = %15, %7
  %26 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %27 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %26, i32 -1
  store %struct.ref_s* %27, %struct.ref_s** %2, align 8
  br label %4

28:                                               ; preds = %4
  store %struct.ref_s* null, %struct.ref_s** %1, align 8
  br label %29

29:                                               ; preds = %28, %23
  %30 = load %struct.ref_s*, %struct.ref_s** %1, align 8
  ret %struct.ref_s* %30
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zread(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.stream_s*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct.file_entry_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = zext i16 %9 to i32
  %11 = and i32 %10, 255
  %12 = ashr i32 %11, 2
  %13 = icmp ne i32 %12, 3
  br i1 %13, label %14, label %15

14:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %94

15:                                               ; preds = %1
  %16 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %16, i32 0, i32 0
  %18 = bitcast %union.color_sample* %17 to %struct.file_entry_s**
  %19 = load %struct.file_entry_s*, %struct.file_entry_s** %18, align 8
  store %struct.file_entry_s* %19, %struct.file_entry_s** %6, align 8
  %20 = load %struct.file_entry_s*, %struct.file_entry_s** %6, align 8
  %21 = getelementptr inbounds %struct.file_entry_s, %struct.file_entry_s* %20, i32 0, i32 0
  %22 = load %struct.stream_s*, %struct.stream_s** %21, align 8
  store %struct.stream_s* %22, %struct.stream_s** %4, align 8
  %23 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %24 = icmp eq %struct.stream_s* %23, null
  br i1 %24, label %30, label %25

25:                                               ; preds = %15
  %26 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %27 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %26, i32 0, i32 4
  %28 = load i8, i8* %27, align 4
  %29 = icmp ne i8 %28, 0
  br i1 %29, label %30, label %31

30:                                               ; preds = %25, %15
  store i32 -7, i32* %2, align 4
  br label %94

31:                                               ; preds = %25
  %32 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %33 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %32, i32 0, i32 1
  %34 = load i16, i16* %33, align 8
  %35 = zext i16 %34 to i32
  %36 = xor i32 %35, -1
  %37 = and i32 %36, 512
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %39, label %40

39:                                               ; preds = %31
  store i32 -7, i32* %2, align 4
  br label %94

40:                                               ; preds = %31
  %41 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %42 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %41, i32 0, i32 0
  %43 = load i8*, i8** %42, align 8
  %44 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %45 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %44, i32 0, i32 1
  %46 = load i8*, i8** %45, align 8
  %47 = icmp ult i8* %43, %46
  br i1 %47, label %48, label %55

48:                                               ; preds = %40
  %49 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %50 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %49, i32 0, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr inbounds i8, i8* %51, i32 1
  store i8* %52, i8** %50, align 8
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  br label %62

55:                                               ; preds = %40
  %56 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %57 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %56, i32 0, i32 7
  %58 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %57, i32 0, i32 0
  %59 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %58, align 8
  %60 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %61 = call i32 %59(%struct.stream_s* %60)
  br label %62

62:                                               ; preds = %55, %48
  %63 = phi i32 [ %54, %48 ], [ %61, %55 ]
  store i32 %63, i32* %5, align 4
  %64 = load i32, i32* %5, align 4
  %65 = icmp eq i32 %64, -1
  br i1 %65, label %66, label %72

66:                                               ; preds = %62
  %67 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %68 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %67, i32 0, i32 0
  %69 = bitcast %union.color_sample* %68 to i16*
  store i16 0, i16* %69, align 8
  %70 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %71 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %70, i32 0, i32 1
  store i16 4, i16* %71, align 8
  br label %93

72:                                               ; preds = %62
  %73 = load i32, i32* %5, align 4
  %74 = sext i32 %73 to i64
  %75 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %76 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %75, i32 0, i32 0
  %77 = bitcast %union.color_sample* %76 to i64*
  store i64 %74, i64* %77, align 8
  %78 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %79 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %78, i32 0, i32 1
  store i16 20, i16* %79, align 8
  %80 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %81 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %80, i64 1
  store %struct.ref_s* %81, %struct.ref_s** %3, align 8
  store %struct.ref_s* %81, %struct.ref_s** @osp, align 8
  %82 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %83 = icmp ugt %struct.ref_s* %81, %82
  br i1 %83, label %84, label %87

84:                                               ; preds = %72
  %85 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %86 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %85, i64 -1
  store %struct.ref_s* %86, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %94

87:                                               ; preds = %72
  %88 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %89 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %88, i32 0, i32 0
  %90 = bitcast %union.color_sample* %89 to i16*
  store i16 1, i16* %90, align 8
  %91 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %92 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %91, i32 0, i32 1
  store i16 4, i16* %92, align 8
  br label %93

93:                                               ; preds = %87, %66
  store i32 0, i32* %2, align 4
  br label %94

94:                                               ; preds = %93, %84, %39, %30, %14
  %95 = load i32, i32* %2, align 4
  ret i32 %95
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zunread(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.stream_s*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %struct.file_entry_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i64 -1
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 1
  %10 = load i16, i16* %9, align 8
  %11 = zext i16 %10 to i32
  %12 = and i32 %11, 255
  %13 = ashr i32 %12, 2
  %14 = icmp ne i32 %13, 3
  br i1 %14, label %15, label %16

15:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %59

16:                                               ; preds = %1
  %17 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i64 -1
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i32 0, i32 0
  %20 = bitcast %union.color_sample* %19 to %struct.file_entry_s**
  %21 = load %struct.file_entry_s*, %struct.file_entry_s** %20, align 8
  store %struct.file_entry_s* %21, %struct.file_entry_s** %6, align 8
  %22 = load %struct.file_entry_s*, %struct.file_entry_s** %6, align 8
  %23 = getelementptr inbounds %struct.file_entry_s, %struct.file_entry_s* %22, i32 0, i32 0
  %24 = load %struct.stream_s*, %struct.stream_s** %23, align 8
  store %struct.stream_s* %24, %struct.stream_s** %4, align 8
  %25 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %26 = icmp eq %struct.stream_s* %25, null
  br i1 %26, label %32, label %27

27:                                               ; preds = %16
  %28 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %29 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %28, i32 0, i32 4
  %30 = load i8, i8* %29, align 4
  %31 = icmp ne i8 %30, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %27, %16
  store i32 -7, i32* %2, align 4
  br label %59

33:                                               ; preds = %27
  %34 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %35 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %34, i32 0, i32 1
  %36 = load i16, i16* %35, align 8
  %37 = zext i16 %36 to i32
  %38 = and i32 %37, 252
  %39 = icmp eq i32 %38, 20
  br i1 %39, label %41, label %40

40:                                               ; preds = %33
  store i32 -20, i32* %2, align 4
  br label %59

41:                                               ; preds = %33
  %42 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %43 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %42, i32 0, i32 0
  %44 = bitcast %union.color_sample* %43 to i64*
  %45 = load i64, i64* %44, align 8
  store i64 %45, i64* %5, align 8
  %46 = load i64, i64* %5, align 8
  %47 = icmp ugt i64 %46, 255
  br i1 %47, label %48, label %49

48:                                               ; preds = %41
  store i32 -15, i32* %2, align 4
  br label %59

49:                                               ; preds = %41
  %50 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %51 = load i64, i64* %5, align 8
  %52 = trunc i64 %51 to i8
  %53 = call i32 @sungetc(%struct.stream_s* %50, i8 zeroext %52)
  %54 = icmp slt i32 %53, 0
  br i1 %54, label %55, label %56

55:                                               ; preds = %49
  store i32 -12, i32* %2, align 4
  br label %59

56:                                               ; preds = %49
  %57 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %58 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %57, i64 -2
  store %struct.ref_s* %58, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %59

59:                                               ; preds = %56, %55, %48, %40, %32, %15
  %60 = load i32, i32* %2, align 4
  ret i32 %60
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zwrite(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.stream_s*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %struct.file_entry_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i64 -1
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 1
  %10 = load i16, i16* %9, align 8
  %11 = zext i16 %10 to i32
  %12 = and i32 %11, 255
  %13 = ashr i32 %12, 2
  %14 = icmp ne i32 %13, 3
  br i1 %14, label %15, label %16

15:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %88

16:                                               ; preds = %1
  %17 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i64 -1
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i32 0, i32 0
  %20 = bitcast %union.color_sample* %19 to %struct.file_entry_s**
  %21 = load %struct.file_entry_s*, %struct.file_entry_s** %20, align 8
  store %struct.file_entry_s* %21, %struct.file_entry_s** %6, align 8
  %22 = load %struct.file_entry_s*, %struct.file_entry_s** %6, align 8
  %23 = getelementptr inbounds %struct.file_entry_s, %struct.file_entry_s* %22, i32 0, i32 0
  %24 = load %struct.stream_s*, %struct.stream_s** %23, align 8
  store %struct.stream_s* %24, %struct.stream_s** %4, align 8
  %25 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %26 = icmp eq %struct.stream_s* %25, null
  br i1 %26, label %32, label %27

27:                                               ; preds = %16
  %28 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %29 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %28, i32 0, i32 4
  %30 = load i8, i8* %29, align 4
  %31 = icmp ne i8 %30, 0
  br i1 %31, label %33, label %32

32:                                               ; preds = %27, %16
  store i32 -7, i32* %2, align 4
  br label %88

33:                                               ; preds = %27
  %34 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %35 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %34, i64 -1
  %36 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %35, i32 0, i32 1
  %37 = load i16, i16* %36, align 8
  %38 = zext i16 %37 to i32
  %39 = xor i32 %38, -1
  %40 = and i32 %39, 256
  %41 = icmp ne i32 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %33
  store i32 -7, i32* %2, align 4
  br label %88

43:                                               ; preds = %33
  %44 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %45 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %44, i32 0, i32 1
  %46 = load i16, i16* %45, align 8
  %47 = zext i16 %46 to i32
  %48 = and i32 %47, 252
  %49 = icmp eq i32 %48, 20
  br i1 %49, label %51, label %50

50:                                               ; preds = %43
  store i32 -20, i32* %2, align 4
  br label %88

51:                                               ; preds = %43
  %52 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %53 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %52, i32 0, i32 0
  %54 = bitcast %union.color_sample* %53 to i64*
  %55 = load i64, i64* %54, align 8
  store i64 %55, i64* %5, align 8
  %56 = load i64, i64* %5, align 8
  %57 = icmp ugt i64 %56, 255
  br i1 %57, label %58, label %59

58:                                               ; preds = %51
  store i32 -15, i32* %2, align 4
  br label %88

59:                                               ; preds = %51
  %60 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %61 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %60, i32 0, i32 0
  %62 = load i8*, i8** %61, align 8
  %63 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %64 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %63, i32 0, i32 1
  %65 = load i8*, i8** %64, align 8
  %66 = icmp ult i8* %62, %65
  br i1 %66, label %67, label %75

67:                                               ; preds = %59
  %68 = load i64, i64* %5, align 8
  %69 = trunc i64 %68 to i8
  %70 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %71 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %70, i32 0, i32 0
  %72 = load i8*, i8** %71, align 8
  %73 = getelementptr inbounds i8, i8* %72, i32 1
  store i8* %73, i8** %71, align 8
  store i8 %69, i8* %73, align 1
  %74 = zext i8 %69 to i32
  br label %84

75:                                               ; preds = %59
  %76 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %77 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %76, i32 0, i32 7
  %78 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %77, i32 0, i32 1
  %79 = load i32 (%struct.stream_s*, i8)*, i32 (%struct.stream_s*, i8)** %78, align 8
  %80 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %81 = load i64, i64* %5, align 8
  %82 = trunc i64 %81 to i8
  %83 = call i32 %79(%struct.stream_s* %80, i8 zeroext %82)
  br label %84

84:                                               ; preds = %75, %67
  %85 = phi i32 [ %74, %67 ], [ %83, %75 ]
  %86 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %87 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %86, i64 -2
  store %struct.ref_s* %87, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %88

88:                                               ; preds = %84, %58, %50, %42, %32, %15
  %89 = load i32, i32* %2, align 4
  ret i32 %89
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zreadhexstring(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.stream_s, align 8
  %5 = alloca %struct.stream_s*, align 8
  %6 = alloca %struct.ref_s*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.file_entry_s*, align 8
  %11 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %12 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %13 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %12, i64 -1
  store %struct.ref_s* %13, %struct.ref_s** %6, align 8
  store i32 -1, i32* %7, align 4
  %14 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 1
  %16 = load i16, i16* %15, align 8
  %17 = zext i16 %16 to i32
  %18 = and i32 %17, 255
  %19 = ashr i32 %18, 2
  switch i32 %19, label %20 [
    i32 3, label %21
    i32 13, label %56
  ]

20:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %166

21:                                               ; preds = %1
  %22 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i32 0, i32 1
  %24 = load i16, i16* %23, align 8
  %25 = zext i16 %24 to i32
  %26 = and i32 %25, 255
  %27 = ashr i32 %26, 2
  %28 = icmp ne i32 %27, 3
  br i1 %28, label %29, label %30

29:                                               ; preds = %21
  store i32 -20, i32* %2, align 4
  br label %166

30:                                               ; preds = %21
  %31 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %32 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %31, i32 0, i32 0
  %33 = bitcast %union.color_sample* %32 to %struct.file_entry_s**
  %34 = load %struct.file_entry_s*, %struct.file_entry_s** %33, align 8
  store %struct.file_entry_s* %34, %struct.file_entry_s** %10, align 8
  %35 = load %struct.file_entry_s*, %struct.file_entry_s** %10, align 8
  %36 = getelementptr inbounds %struct.file_entry_s, %struct.file_entry_s* %35, i32 0, i32 0
  %37 = load %struct.stream_s*, %struct.stream_s** %36, align 8
  store %struct.stream_s* %37, %struct.stream_s** %5, align 8
  %38 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %39 = icmp eq %struct.stream_s* %38, null
  br i1 %39, label %45, label %40

40:                                               ; preds = %30
  %41 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %42 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %41, i32 0, i32 4
  %43 = load i8, i8* %42, align 4
  %44 = icmp ne i8 %43, 0
  br i1 %44, label %45, label %46

45:                                               ; preds = %40, %30
  store i32 -7, i32* %2, align 4
  br label %166

46:                                               ; preds = %40
  %47 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %48 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %47, i32 0, i32 1
  %49 = load i16, i16* %48, align 8
  %50 = zext i16 %49 to i32
  %51 = xor i32 %50, -1
  %52 = and i32 %51, 512
  %53 = icmp ne i32 %52, 0
  br i1 %53, label %54, label %55

54:                                               ; preds = %46
  store i32 -7, i32* %2, align 4
  br label %166

55:                                               ; preds = %46
  br label %66

56:                                               ; preds = %1
  store %struct.stream_s* %4, %struct.stream_s** %5, align 8
  %57 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %58 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %59 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %58, i32 0, i32 0
  %60 = bitcast %union.color_sample* %59 to i8**
  %61 = load i8*, i8** %60, align 8
  %62 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %63 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %62, i32 0, i32 2
  %64 = load i16, i16* %63, align 2
  %65 = zext i16 %64 to i32
  call void @sread_string(%struct.stream_s* %57, i8* %61, i32 %65)
  br label %66

66:                                               ; preds = %56, %55
  %67 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %68 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %67, i32 0, i32 1
  %69 = load i16, i16* %68, align 8
  %70 = zext i16 %69 to i32
  %71 = and i32 %70, 252
  %72 = icmp eq i32 %71, 52
  br i1 %72, label %74, label %73

73:                                               ; preds = %66
  store i32 -20, i32* %2, align 4
  br label %166

74:                                               ; preds = %66
  %75 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %76 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %75, i32 0, i32 1
  %77 = load i16, i16* %76, align 8
  %78 = zext i16 %77 to i32
  %79 = xor i32 %78, -1
  %80 = and i32 %79, 256
  %81 = icmp ne i32 %80, 0
  br i1 %81, label %82, label %83

82:                                               ; preds = %74
  store i32 -7, i32* %2, align 4
  br label %166

83:                                               ; preds = %74
  %84 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %85 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %86 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %85, i32 0, i32 0
  %87 = bitcast %union.color_sample* %86 to i8**
  %88 = load i8*, i8** %87, align 8
  %89 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %90 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %89, i32 0, i32 2
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i32
  %93 = call i32 @sreadhex(%struct.stream_s* %84, i8* %88, i32 %92, i32* %9, i32* %7)
  store i32 %93, i32* %8, align 4
  %94 = load i32, i32* %8, align 4
  switch i32 %94, label %107 [
    i32 1, label %95
    i32 0, label %106
  ]

95:                                               ; preds = %83
  %96 = load i32, i32* %9, align 4
  %97 = trunc i32 %96 to i16
  %98 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %99 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %98, i32 0, i32 2
  store i16 %97, i16* %99, align 2
  %100 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %101 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %100, i32 0, i32 1
  %102 = load i16, i16* %101, align 8
  %103 = zext i16 %102 to i32
  %104 = or i32 %103, 32768
  %105 = trunc i32 %104 to i16
  store i16 %105, i16* %101, align 8
  br label %108

106:                                              ; preds = %83
  br label %108

107:                                              ; preds = %83
  store i32 -12, i32* %2, align 4
  br label %166

108:                                              ; preds = %106, %95
  %109 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %110 = icmp eq %struct.stream_s* %109, %4
  br i1 %110, label %111, label %152

111:                                              ; preds = %108
  %112 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %4, i32 0, i32 0
  %113 = load i8*, i8** %112, align 8
  %114 = getelementptr inbounds i8, i8* %113, i64 1
  %115 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %4, i32 0, i32 2
  %116 = load i8*, i8** %115, align 8
  %117 = ptrtoint i8* %114 to i64
  %118 = ptrtoint i8* %116 to i64
  %119 = sub i64 %117, %118
  %120 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %4, i32 0, i32 6
  %121 = load i64, i64* %120, align 8
  %122 = add nsw i64 %119, %121
  %123 = trunc i64 %122 to i32
  store i32 %123, i32* %11, align 4
  %124 = load i32, i32* %11, align 4
  %125 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %126 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %125, i32 0, i32 2
  %127 = load i16, i16* %126, align 2
  %128 = zext i16 %127 to i32
  %129 = sub i32 %128, %124
  %130 = trunc i32 %129 to i16
  store i16 %130, i16* %126, align 2
  %131 = load i32, i32* %11, align 4
  %132 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %133 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %132, i32 0, i32 0
  %134 = bitcast %union.color_sample* %133 to i8**
  %135 = load i8*, i8** %134, align 8
  %136 = zext i32 %131 to i64
  %137 = getelementptr inbounds i8, i8* %135, i64 %136
  store i8* %137, i8** %134, align 8
  %138 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %139 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %138, i32 0, i32 1
  %140 = load i16, i16* %139, align 8
  %141 = zext i16 %140 to i32
  %142 = or i32 %141, 32768
  %143 = trunc i32 %142 to i16
  store i16 %143, i16* %139, align 8
  %144 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %145 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %144, i64 1
  store %struct.ref_s* %145, %struct.ref_s** %3, align 8
  store %struct.ref_s* %145, %struct.ref_s** @osp, align 8
  %146 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %147 = icmp ugt %struct.ref_s* %145, %146
  br i1 %147, label %148, label %151

148:                                              ; preds = %111
  %149 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %150 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %149, i64 -1
  store %struct.ref_s* %150, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %166

151:                                              ; preds = %111
  br label %157

152:                                              ; preds = %108
  %153 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %154 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %155 = bitcast %struct.ref_s* %153 to i8*
  %156 = bitcast %struct.ref_s* %154 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %155, i8* align 8 %156, i64 16, i1 false)
  br label %157

157:                                              ; preds = %152, %151
  %158 = load i32, i32* %8, align 4
  %159 = sub nsw i32 1, %158
  %160 = trunc i32 %159 to i16
  %161 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %162 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %161, i32 0, i32 0
  %163 = bitcast %union.color_sample* %162 to i16*
  store i16 %160, i16* %163, align 8
  %164 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %165 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %164, i32 0, i32 1
  store i16 4, i16* %165, align 8
  store i32 0, i32* %2, align 4
  br label %166

166:                                              ; preds = %157, %148, %107, %82, %73, %54, %45, %29, %20
  %167 = load i32, i32* %2, align 4
  ret i32 %167
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zwritehexstring(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.stream_s*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.file_entry_s*, align 8
  %8 = alloca i8, align 1
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %9 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i64 -1
  %11 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %10, i32 0, i32 1
  %12 = load i16, i16* %11, align 8
  %13 = zext i16 %12 to i32
  %14 = and i32 %13, 255
  %15 = ashr i32 %14, 2
  %16 = icmp ne i32 %15, 3
  br i1 %16, label %17, label %18

17:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %154

18:                                               ; preds = %1
  %19 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i64 -1
  %21 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %20, i32 0, i32 0
  %22 = bitcast %union.color_sample* %21 to %struct.file_entry_s**
  %23 = load %struct.file_entry_s*, %struct.file_entry_s** %22, align 8
  store %struct.file_entry_s* %23, %struct.file_entry_s** %7, align 8
  %24 = load %struct.file_entry_s*, %struct.file_entry_s** %7, align 8
  %25 = getelementptr inbounds %struct.file_entry_s, %struct.file_entry_s* %24, i32 0, i32 0
  %26 = load %struct.stream_s*, %struct.stream_s** %25, align 8
  store %struct.stream_s* %26, %struct.stream_s** %4, align 8
  %27 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %28 = icmp eq %struct.stream_s* %27, null
  br i1 %28, label %34, label %29

29:                                               ; preds = %18
  %30 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %31 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %30, i32 0, i32 4
  %32 = load i8, i8* %31, align 4
  %33 = icmp ne i8 %32, 0
  br i1 %33, label %35, label %34

34:                                               ; preds = %29, %18
  store i32 -7, i32* %2, align 4
  br label %154

35:                                               ; preds = %29
  %36 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %37 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %36, i64 -1
  %38 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %37, i32 0, i32 1
  %39 = load i16, i16* %38, align 8
  %40 = zext i16 %39 to i32
  %41 = xor i32 %40, -1
  %42 = and i32 %41, 256
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %44, label %45

44:                                               ; preds = %35
  store i32 -7, i32* %2, align 4
  br label %154

45:                                               ; preds = %35
  %46 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %47 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %46, i32 0, i32 1
  %48 = load i16, i16* %47, align 8
  %49 = zext i16 %48 to i32
  %50 = and i32 %49, 252
  %51 = icmp eq i32 %50, 52
  br i1 %51, label %53, label %52

52:                                               ; preds = %45
  store i32 -20, i32* %2, align 4
  br label %154

53:                                               ; preds = %45
  %54 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %55 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %54, i32 0, i32 1
  %56 = load i16, i16* %55, align 8
  %57 = zext i16 %56 to i32
  %58 = xor i32 %57, -1
  %59 = and i32 %58, 512
  %60 = icmp ne i32 %59, 0
  br i1 %60, label %61, label %62

61:                                               ; preds = %53
  store i32 -7, i32* %2, align 4
  br label %154

62:                                               ; preds = %53
  %63 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %64 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %63, i32 0, i32 0
  %65 = bitcast %union.color_sample* %64 to i8**
  %66 = load i8*, i8** %65, align 8
  store i8* %66, i8** %5, align 8
  %67 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %68 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %67, i32 0, i32 2
  %69 = load i16, i16* %68, align 2
  %70 = zext i16 %69 to i32
  store i32 %70, i32* %6, align 4
  br label %71

71:                                               ; preds = %149, %62
  %72 = load i32, i32* %6, align 4
  %73 = add i32 %72, -1
  store i32 %73, i32* %6, align 4
  %74 = icmp ne i32 %72, 0
  br i1 %74, label %75, label %151

75:                                               ; preds = %71
  %76 = load i8*, i8** %5, align 8
  %77 = getelementptr inbounds i8, i8* %76, i32 1
  store i8* %77, i8** %5, align 8
  %78 = load i8, i8* %76, align 1
  store i8 %78, i8* %8, align 1
  %79 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %80 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %79, i32 0, i32 0
  %81 = load i8*, i8** %80, align 8
  %82 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %83 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %82, i32 0, i32 1
  %84 = load i8*, i8** %83, align 8
  %85 = icmp ult i8* %81, %84
  br i1 %85, label %86, label %99

86:                                               ; preds = %75
  %87 = load i8*, i8** @zwritehexstring.hex_digits, align 8
  %88 = load i8, i8* %8, align 1
  %89 = zext i8 %88 to i32
  %90 = ashr i32 %89, 4
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds i8, i8* %87, i64 %91
  %93 = load i8, i8* %92, align 1
  %94 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %95 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %94, i32 0, i32 0
  %96 = load i8*, i8** %95, align 8
  %97 = getelementptr inbounds i8, i8* %96, i32 1
  store i8* %97, i8** %95, align 8
  store i8 %93, i8* %97, align 1
  %98 = zext i8 %93 to i32
  br label %113

99:                                               ; preds = %75
  %100 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %101 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %100, i32 0, i32 7
  %102 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %101, i32 0, i32 1
  %103 = load i32 (%struct.stream_s*, i8)*, i32 (%struct.stream_s*, i8)** %102, align 8
  %104 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %105 = load i8*, i8** @zwritehexstring.hex_digits, align 8
  %106 = load i8, i8* %8, align 1
  %107 = zext i8 %106 to i32
  %108 = ashr i32 %107, 4
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i8, i8* %105, i64 %109
  %111 = load i8, i8* %110, align 1
  %112 = call i32 %103(%struct.stream_s* %104, i8 zeroext %111)
  br label %113

113:                                              ; preds = %99, %86
  %114 = phi i32 [ %98, %86 ], [ %112, %99 ]
  %115 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %116 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %115, i32 0, i32 0
  %117 = load i8*, i8** %116, align 8
  %118 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %119 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %118, i32 0, i32 1
  %120 = load i8*, i8** %119, align 8
  %121 = icmp ult i8* %117, %120
  br i1 %121, label %122, label %135

122:                                              ; preds = %113
  %123 = load i8*, i8** @zwritehexstring.hex_digits, align 8
  %124 = load i8, i8* %8, align 1
  %125 = zext i8 %124 to i32
  %126 = and i32 %125, 15
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds i8, i8* %123, i64 %127
  %129 = load i8, i8* %128, align 1
  %130 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %131 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %130, i32 0, i32 0
  %132 = load i8*, i8** %131, align 8
  %133 = getelementptr inbounds i8, i8* %132, i32 1
  store i8* %133, i8** %131, align 8
  store i8 %129, i8* %133, align 1
  %134 = zext i8 %129 to i32
  br label %149

135:                                              ; preds = %113
  %136 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %137 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %136, i32 0, i32 7
  %138 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %137, i32 0, i32 1
  %139 = load i32 (%struct.stream_s*, i8)*, i32 (%struct.stream_s*, i8)** %138, align 8
  %140 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %141 = load i8*, i8** @zwritehexstring.hex_digits, align 8
  %142 = load i8, i8* %8, align 1
  %143 = zext i8 %142 to i32
  %144 = and i32 %143, 15
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds i8, i8* %141, i64 %145
  %147 = load i8, i8* %146, align 1
  %148 = call i32 %139(%struct.stream_s* %140, i8 zeroext %147)
  br label %149

149:                                              ; preds = %135, %122
  %150 = phi i32 [ %134, %122 ], [ %148, %135 ]
  br label %71

151:                                              ; preds = %71
  %152 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %153 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %152, i64 -2
  store %struct.ref_s* %153, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %154

154:                                              ; preds = %151, %61, %52, %44, %34, %17
  %155 = load i32, i32* %2, align 4
  ret i32 %155
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zreadstring(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.stream_s*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca %struct.file_entry_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %8 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i64 -1
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i32 0, i32 1
  %11 = load i16, i16* %10, align 8
  %12 = zext i16 %11 to i32
  %13 = and i32 %12, 255
  %14 = ashr i32 %13, 2
  %15 = icmp ne i32 %14, 3
  br i1 %15, label %16, label %17

16:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %99

17:                                               ; preds = %1
  %18 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i64 -1
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i32 0, i32 0
  %21 = bitcast %union.color_sample* %20 to %struct.file_entry_s**
  %22 = load %struct.file_entry_s*, %struct.file_entry_s** %21, align 8
  store %struct.file_entry_s* %22, %struct.file_entry_s** %7, align 8
  %23 = load %struct.file_entry_s*, %struct.file_entry_s** %7, align 8
  %24 = getelementptr inbounds %struct.file_entry_s, %struct.file_entry_s* %23, i32 0, i32 0
  %25 = load %struct.stream_s*, %struct.stream_s** %24, align 8
  store %struct.stream_s* %25, %struct.stream_s** %4, align 8
  %26 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %27 = icmp eq %struct.stream_s* %26, null
  br i1 %27, label %33, label %28

28:                                               ; preds = %17
  %29 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %30 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %29, i32 0, i32 4
  %31 = load i8, i8* %30, align 4
  %32 = icmp ne i8 %31, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %28, %17
  store i32 -7, i32* %2, align 4
  br label %99

34:                                               ; preds = %28
  %35 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %36 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %35, i64 -1
  %37 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %36, i32 0, i32 1
  %38 = load i16, i16* %37, align 8
  %39 = zext i16 %38 to i32
  %40 = xor i32 %39, -1
  %41 = and i32 %40, 512
  %42 = icmp ne i32 %41, 0
  br i1 %42, label %43, label %44

43:                                               ; preds = %34
  store i32 -7, i32* %2, align 4
  br label %99

44:                                               ; preds = %34
  %45 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %46 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %45, i32 0, i32 1
  %47 = load i16, i16* %46, align 8
  %48 = zext i16 %47 to i32
  %49 = and i32 %48, 252
  %50 = icmp eq i32 %49, 52
  br i1 %50, label %52, label %51

51:                                               ; preds = %44
  store i32 -20, i32* %2, align 4
  br label %99

52:                                               ; preds = %44
  %53 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %54 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %53, i32 0, i32 1
  %55 = load i16, i16* %54, align 8
  %56 = zext i16 %55 to i32
  %57 = xor i32 %56, -1
  %58 = and i32 %57, 256
  %59 = icmp ne i32 %58, 0
  br i1 %59, label %60, label %61

60:                                               ; preds = %52
  store i32 -7, i32* %2, align 4
  br label %99

61:                                               ; preds = %52
  %62 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %63 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %62, i32 0, i32 2
  %64 = load i16, i16* %63, align 2
  %65 = zext i16 %64 to i32
  store i32 %65, i32* %5, align 4
  %66 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %67 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %68 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %67, i32 0, i32 0
  %69 = bitcast %union.color_sample* %68 to i8**
  %70 = load i8*, i8** %69, align 8
  %71 = load i32, i32* %5, align 4
  %72 = call i32 @sgets(%struct.stream_s* %66, i8* %70, i32 %71)
  store i32 %72, i32* %6, align 4
  %73 = load i32, i32* %6, align 4
  %74 = trunc i32 %73 to i16
  %75 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %76 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %75, i32 0, i32 2
  store i16 %74, i16* %76, align 2
  %77 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %78 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %77, i32 0, i32 1
  %79 = load i16, i16* %78, align 8
  %80 = zext i16 %79 to i32
  %81 = or i32 %80, 32768
  %82 = trunc i32 %81 to i16
  store i16 %82, i16* %78, align 8
  %83 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %84 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %83, i64 -1
  %85 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %86 = bitcast %struct.ref_s* %84 to i8*
  %87 = bitcast %struct.ref_s* %85 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %86, i8* align 8 %87, i64 16, i1 false)
  %88 = load i32, i32* %6, align 4
  %89 = load i32, i32* %5, align 4
  %90 = icmp eq i32 %88, %89
  %91 = zext i1 %90 to i64
  %92 = select i1 %90, i32 1, i32 0
  %93 = trunc i32 %92 to i16
  %94 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %95 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %94, i32 0, i32 0
  %96 = bitcast %union.color_sample* %95 to i16*
  store i16 %93, i16* %96, align 8
  %97 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %98 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %97, i32 0, i32 1
  store i16 4, i16* %98, align 8
  store i32 0, i32* %2, align 4
  br label %99

99:                                               ; preds = %61, %60, %51, %43, %33, %16
  %100 = load i32, i32* %2, align 4
  ret i32 %100
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zwritestring(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.stream_s*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct.file_entry_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i64 -1
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 1
  %10 = load i16, i16* %9, align 8
  %11 = zext i16 %10 to i32
  %12 = and i32 %11, 255
  %13 = ashr i32 %12, 2
  %14 = icmp ne i32 %13, 3
  br i1 %14, label %15, label %16

15:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %54

16:                                               ; preds = %1
  %17 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i64 -1
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i32 0, i32 0
  %20 = bitcast %union.color_sample* %19 to %struct.file_entry_s**
  %21 = load %struct.file_entry_s*, %struct.file_entry_s** %20, align 8
  store %struct.file_entry_s* %21, %struct.file_entry_s** %6, align 8
  %22 = load %struct.file_entry_s*, %struct.file_entry_s** %6, align 8
  %23 = getelementptr inbounds %struct.file_entry_s, %struct.file_entry_s* %22, i32 0, i32 0
  %24 = load %struct.stream_s*, %struct.stream_s** %23, align 8
  store %struct.stream_s* %24, %struct.stream_s** %4, align 8
  %25 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %26 = icmp eq %struct.stream_s* %25, null
  br i1 %26, label %32, label %27

27:                                               ; preds = %16
  %28 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %29 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %28, i32 0, i32 4
  %30 = load i8, i8* %29, align 4
  %31 = icmp ne i8 %30, 0
  br i1 %31, label %33, label %32

32:                                               ; preds = %27, %16
  store i32 -7, i32* %2, align 4
  br label %54

33:                                               ; preds = %27
  %34 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %35 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %34, i64 -1
  %36 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %35, i32 0, i32 1
  %37 = load i16, i16* %36, align 8
  %38 = zext i16 %37 to i32
  %39 = xor i32 %38, -1
  %40 = and i32 %39, 256
  %41 = icmp ne i32 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %33
  store i32 -7, i32* %2, align 4
  br label %54

43:                                               ; preds = %33
  %44 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %45 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %46 = call i32 @write_string(%struct.ref_s* %44, %struct.stream_s* %45)
  store i32 %46, i32* %5, align 4
  %47 = load i32, i32* %5, align 4
  %48 = icmp sge i32 %47, 0
  br i1 %48, label %49, label %52

49:                                               ; preds = %43
  %50 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %51 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %50, i64 -2
  store %struct.ref_s* %51, %struct.ref_s** @osp, align 8
  br label %52

52:                                               ; preds = %49, %43
  %53 = load i32, i32* %5, align 4
  store i32 %53, i32* %2, align 4
  br label %54

54:                                               ; preds = %52, %42, %32, %15
  %55 = load i32, i32* %2, align 4
  ret i32 %55
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @write_string(%struct.ref_s* %0, %struct.stream_s* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca %struct.stream_s*, align 8
  %6 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %4, align 8
  store %struct.stream_s* %1, %struct.stream_s** %5, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = zext i16 %9 to i32
  %11 = and i32 %10, 252
  %12 = icmp eq i32 %11, 52
  br i1 %12, label %14, label %13

13:                                               ; preds = %2
  store i32 -20, i32* %3, align 4
  br label %39

14:                                               ; preds = %2
  %15 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %16 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %15, i32 0, i32 1
  %17 = load i16, i16* %16, align 8
  %18 = zext i16 %17 to i32
  %19 = xor i32 %18, -1
  %20 = and i32 %19, 512
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %14
  store i32 -7, i32* %3, align 4
  br label %39

23:                                               ; preds = %14
  %24 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %25 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %24, i32 0, i32 2
  %26 = load i16, i16* %25, align 2
  %27 = zext i16 %26 to i32
  store i32 %27, i32* %6, align 4
  %28 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %29 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %30 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %29, i32 0, i32 0
  %31 = bitcast %union.color_sample* %30 to i8**
  %32 = load i8*, i8** %31, align 8
  %33 = load i32, i32* %6, align 4
  %34 = call i32 @sputs(%struct.stream_s* %28, i8* %32, i32 %33)
  %35 = load i32, i32* %6, align 4
  %36 = icmp ne i32 %34, %35
  br i1 %36, label %37, label %38

37:                                               ; preds = %23
  store i32 -12, i32* %3, align 4
  br label %39

38:                                               ; preds = %23
  store i32 0, i32* %3, align 4
  br label %39

39:                                               ; preds = %38, %37, %22, %13
  %40 = load i32, i32* %3, align 4
  ret i32 %40
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zreadline(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.stream_s*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca %struct.file_entry_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %8 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i64 -1
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i32 0, i32 1
  %11 = load i16, i16* %10, align 8
  %12 = zext i16 %11 to i32
  %13 = and i32 %12, 255
  %14 = ashr i32 %13, 2
  %15 = icmp ne i32 %14, 3
  br i1 %15, label %16, label %17

16:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %99

17:                                               ; preds = %1
  %18 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i64 -1
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i32 0, i32 0
  %21 = bitcast %union.color_sample* %20 to %struct.file_entry_s**
  %22 = load %struct.file_entry_s*, %struct.file_entry_s** %21, align 8
  store %struct.file_entry_s* %22, %struct.file_entry_s** %7, align 8
  %23 = load %struct.file_entry_s*, %struct.file_entry_s** %7, align 8
  %24 = getelementptr inbounds %struct.file_entry_s, %struct.file_entry_s* %23, i32 0, i32 0
  %25 = load %struct.stream_s*, %struct.stream_s** %24, align 8
  store %struct.stream_s* %25, %struct.stream_s** %4, align 8
  %26 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %27 = icmp eq %struct.stream_s* %26, null
  br i1 %27, label %33, label %28

28:                                               ; preds = %17
  %29 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %30 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %29, i32 0, i32 4
  %31 = load i8, i8* %30, align 4
  %32 = icmp ne i8 %31, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %28, %17
  store i32 -7, i32* %2, align 4
  br label %99

34:                                               ; preds = %28
  %35 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %36 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %35, i64 -1
  %37 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %36, i32 0, i32 1
  %38 = load i16, i16* %37, align 8
  %39 = zext i16 %38 to i32
  %40 = xor i32 %39, -1
  %41 = and i32 %40, 512
  %42 = icmp ne i32 %41, 0
  br i1 %42, label %43, label %44

43:                                               ; preds = %34
  store i32 -7, i32* %2, align 4
  br label %99

44:                                               ; preds = %34
  %45 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %46 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %45, i32 0, i32 1
  %47 = load i16, i16* %46, align 8
  %48 = zext i16 %47 to i32
  %49 = and i32 %48, 252
  %50 = icmp eq i32 %49, 52
  br i1 %50, label %52, label %51

51:                                               ; preds = %44
  store i32 -20, i32* %2, align 4
  br label %99

52:                                               ; preds = %44
  %53 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %54 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %53, i32 0, i32 1
  %55 = load i16, i16* %54, align 8
  %56 = zext i16 %55 to i32
  %57 = xor i32 %56, -1
  %58 = and i32 %57, 256
  %59 = icmp ne i32 %58, 0
  br i1 %59, label %60, label %61

60:                                               ; preds = %52
  store i32 -7, i32* %2, align 4
  br label %99

61:                                               ; preds = %52
  %62 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %63 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %62, i32 0, i32 0
  %64 = bitcast %union.color_sample* %63 to i8**
  %65 = load i8*, i8** %64, align 8
  %66 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %67 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %66, i32 0, i32 2
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %71 = call i32 @zreadline_from(i8* %65, i32 %69, i32* %5, %struct.stream_s* %70)
  store i32 %71, i32* %6, align 4
  %72 = load i32, i32* %6, align 4
  %73 = icmp slt i32 %72, 0
  br i1 %73, label %74, label %76

74:                                               ; preds = %61
  %75 = load i32, i32* %6, align 4
  store i32 %75, i32* %2, align 4
  br label %99

76:                                               ; preds = %61
  %77 = load i32, i32* %5, align 4
  %78 = trunc i32 %77 to i16
  %79 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %80 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %79, i32 0, i32 2
  store i16 %78, i16* %80, align 2
  %81 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %82 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %81, i32 0, i32 1
  %83 = load i16, i16* %82, align 8
  %84 = zext i16 %83 to i32
  %85 = or i32 %84, 32768
  %86 = trunc i32 %85 to i16
  store i16 %86, i16* %82, align 8
  %87 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %88 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %87, i64 -1
  %89 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %90 = bitcast %struct.ref_s* %88 to i8*
  %91 = bitcast %struct.ref_s* %89 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %90, i8* align 8 %91, i64 16, i1 false)
  %92 = load i32, i32* %6, align 4
  %93 = trunc i32 %92 to i16
  %94 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %95 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %94, i32 0, i32 0
  %96 = bitcast %union.color_sample* %95 to i16*
  store i16 %93, i16* %96, align 8
  %97 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %98 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %97, i32 0, i32 1
  store i16 4, i16* %98, align 8
  store i32 0, i32* %2, align 4
  br label %99

99:                                               ; preds = %76, %74, %60, %51, %43, %33, %16
  %100 = load i32, i32* %2, align 4
  ret i32 %100
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ztoken_file(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.stream_s*, align 8
  %5 = alloca %struct.ref_s, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.file_entry_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %8 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 1
  %10 = load i16, i16* %9, align 8
  %11 = zext i16 %10 to i32
  %12 = and i32 %11, 255
  %13 = ashr i32 %12, 2
  %14 = icmp ne i32 %13, 3
  br i1 %14, label %15, label %16

15:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %69

16:                                               ; preds = %1
  %17 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i32 0, i32 0
  %19 = bitcast %union.color_sample* %18 to %struct.file_entry_s**
  %20 = load %struct.file_entry_s*, %struct.file_entry_s** %19, align 8
  store %struct.file_entry_s* %20, %struct.file_entry_s** %7, align 8
  %21 = load %struct.file_entry_s*, %struct.file_entry_s** %7, align 8
  %22 = getelementptr inbounds %struct.file_entry_s, %struct.file_entry_s* %21, i32 0, i32 0
  %23 = load %struct.stream_s*, %struct.stream_s** %22, align 8
  store %struct.stream_s* %23, %struct.stream_s** %4, align 8
  %24 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %25 = icmp eq %struct.stream_s* %24, null
  br i1 %25, label %31, label %26

26:                                               ; preds = %16
  %27 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %28 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %27, i32 0, i32 4
  %29 = load i8, i8* %28, align 4
  %30 = icmp ne i8 %29, 0
  br i1 %30, label %31, label %32

31:                                               ; preds = %26, %16
  store i32 -7, i32* %2, align 4
  br label %69

32:                                               ; preds = %26
  %33 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %34 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %33, i32 0, i32 1
  %35 = load i16, i16* %34, align 8
  %36 = zext i16 %35 to i32
  %37 = xor i32 %36, -1
  %38 = and i32 %37, 512
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %40, label %41

40:                                               ; preds = %32
  store i32 -7, i32* %2, align 4
  br label %69

41:                                               ; preds = %32
  %42 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %43 = call i32 (%struct.stream_s*, i32, %struct.ref_s*, ...) bitcast (i32 (%struct.stream_s*, i32, %struct.ref_s*)* @scan_token to i32 (%struct.stream_s*, i32, %struct.ref_s*, ...)*)(%struct.stream_s* %42, i32 0, %struct.ref_s* %5)
  store i32 %43, i32* %6, align 4
  switch i32 %43, label %67 [
    i32 0, label %44
    i32 1, label %61
  ]

44:                                               ; preds = %41
  %45 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %46 = bitcast %struct.ref_s* %45 to i8*
  %47 = bitcast %struct.ref_s* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 8 %47, i64 16, i1 false)
  %48 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %49 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %48, i64 1
  store %struct.ref_s* %49, %struct.ref_s** %3, align 8
  store %struct.ref_s* %49, %struct.ref_s** @osp, align 8
  %50 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %51 = icmp ugt %struct.ref_s* %49, %50
  br i1 %51, label %52, label %55

52:                                               ; preds = %44
  %53 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %54 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %53, i64 -1
  store %struct.ref_s* %54, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %69

55:                                               ; preds = %44
  %56 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %57 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %56, i32 0, i32 0
  %58 = bitcast %union.color_sample* %57 to i16*
  store i16 1, i16* %58, align 8
  %59 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %60 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %59, i32 0, i32 1
  store i16 4, i16* %60, align 8
  store i32 0, i32* %2, align 4
  br label %69

61:                                               ; preds = %41
  %62 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %63 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %62, i32 0, i32 0
  %64 = bitcast %union.color_sample* %63 to i16*
  store i16 0, i16* %64, align 8
  %65 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %66 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %65, i32 0, i32 1
  store i16 4, i16* %66, align 8
  store i32 0, i32* %2, align 4
  br label %69

67:                                               ; preds = %41
  %68 = load i32, i32* %6, align 4
  store i32 %68, i32* %2, align 4
  br label %69

69:                                               ; preds = %67, %61, %55, %52, %40, %31, %15
  %70 = load i32, i32* %2, align 4
  ret i32 %70
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zbytesavailable(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.stream_s*, align 8
  %5 = alloca i64, align 8
  %6 = alloca %struct.file_entry_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = zext i16 %9 to i32
  %11 = and i32 %10, 255
  %12 = ashr i32 %11, 2
  %13 = icmp ne i32 %12, 3
  br i1 %13, label %14, label %15

14:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %47

15:                                               ; preds = %1
  %16 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %16, i32 0, i32 0
  %18 = bitcast %union.color_sample* %17 to %struct.file_entry_s**
  %19 = load %struct.file_entry_s*, %struct.file_entry_s** %18, align 8
  store %struct.file_entry_s* %19, %struct.file_entry_s** %6, align 8
  %20 = load %struct.file_entry_s*, %struct.file_entry_s** %6, align 8
  %21 = getelementptr inbounds %struct.file_entry_s, %struct.file_entry_s* %20, i32 0, i32 0
  %22 = load %struct.stream_s*, %struct.stream_s** %21, align 8
  store %struct.stream_s* %22, %struct.stream_s** %4, align 8
  %23 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %24 = icmp eq %struct.stream_s* %23, null
  br i1 %24, label %30, label %25

25:                                               ; preds = %15
  %26 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %27 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %26, i32 0, i32 4
  %28 = load i8, i8* %27, align 4
  %29 = icmp ne i8 %28, 0
  br i1 %29, label %30, label %31

30:                                               ; preds = %25, %15
  store i32 -7, i32* %2, align 4
  br label %47

31:                                               ; preds = %25
  %32 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %33 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %32, i32 0, i32 7
  %34 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %33, i32 0, i32 2
  %35 = load i32 (%struct.stream_s*, i64*)*, i32 (%struct.stream_s*, i64*)** %34, align 8
  %36 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %37 = call i32 %35(%struct.stream_s* %36, i64* %5)
  %38 = icmp slt i32 %37, 0
  br i1 %38, label %39, label %40

39:                                               ; preds = %31
  store i32 -12, i32* %2, align 4
  br label %47

40:                                               ; preds = %31
  %41 = load i64, i64* %5, align 8
  %42 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %43 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %42, i32 0, i32 0
  %44 = bitcast %union.color_sample* %43 to i64*
  store i64 %41, i64* %44, align 8
  %45 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %46 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %45, i32 0, i32 1
  store i16 20, i16* %46, align 8
  store i32 0, i32* %2, align 4
  br label %47

47:                                               ; preds = %40, %39, %30, %14
  %48 = load i32, i32* %2, align 4
  ret i32 %48
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zflush(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.stream_s*, %struct.stream_s** getelementptr inbounds ([5 x %struct.file_entry_s], [5 x %struct.file_entry_s]* @std_files, i64 0, i64 1, i32 0), align 16
  %4 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %3, i32 0, i32 7
  %5 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %4, i32 0, i32 4
  %6 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %5, align 8
  %7 = load %struct.stream_s*, %struct.stream_s** getelementptr inbounds ([5 x %struct.file_entry_s], [5 x %struct.file_entry_s]* @std_files, i64 0, i64 1, i32 0), align 16
  %8 = call i32 %6(%struct.stream_s* %7)
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zflushfile(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.stream_s*, align 8
  %5 = alloca %struct.file_entry_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = zext i16 %8 to i32
  %10 = and i32 %9, 255
  %11 = ashr i32 %10, 2
  %12 = icmp ne i32 %11, 3
  br i1 %12, label %13, label %14

13:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %44

14:                                               ; preds = %1
  %15 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %16 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %15, i32 0, i32 0
  %17 = bitcast %union.color_sample* %16 to %struct.file_entry_s**
  %18 = load %struct.file_entry_s*, %struct.file_entry_s** %17, align 8
  store %struct.file_entry_s* %18, %struct.file_entry_s** %5, align 8
  %19 = load %struct.file_entry_s*, %struct.file_entry_s** %5, align 8
  %20 = getelementptr inbounds %struct.file_entry_s, %struct.file_entry_s* %19, i32 0, i32 0
  %21 = load %struct.stream_s*, %struct.stream_s** %20, align 8
  store %struct.stream_s* %21, %struct.stream_s** %4, align 8
  %22 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %23 = icmp eq %struct.stream_s* %22, null
  br i1 %23, label %24, label %25

24:                                               ; preds = %14
  store i32 -7, i32* %2, align 4
  br label %44

25:                                               ; preds = %14
  %26 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %27 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %26, i32 0, i32 7
  %28 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %27, i32 0, i32 4
  %29 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %28, align 8
  %30 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %31 = call i32 %29(%struct.stream_s* %30)
  %32 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %33 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %32, i32 0, i32 4
  %34 = load i8, i8* %33, align 4
  %35 = icmp ne i8 %34, 0
  br i1 %35, label %41, label %36

36:                                               ; preds = %25
  %37 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %38 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %37, i32 0, i32 9
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** %38, align 8
  %40 = call i32 @fseek(%struct._IO_FILE* %39, i64 0, i32 2)
  br label %41

41:                                               ; preds = %36, %25
  %42 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %43 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %42, i64 -1
  store %struct.ref_s* %43, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %44

44:                                               ; preds = %41, %24, %13
  %45 = load i32, i32* %2, align 4
  ret i32 %45
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zresetfile(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  ret i32 -21
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zstatus(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i32 0, i32 1
  %6 = load i16, i16* %5, align 8
  %7 = zext i16 %6 to i32
  %8 = and i32 %7, 252
  %9 = icmp eq i32 %8, 12
  br i1 %9, label %11, label %10

10:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %27

11:                                               ; preds = %1
  %12 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %13 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %12, i32 0, i32 0
  %14 = bitcast %union.color_sample* %13 to %struct.file_entry_s**
  %15 = load %struct.file_entry_s*, %struct.file_entry_s** %14, align 8
  %16 = getelementptr inbounds %struct.file_entry_s, %struct.file_entry_s* %15, i32 0, i32 0
  %17 = load %struct.stream_s*, %struct.stream_s** %16, align 8
  %18 = icmp ne %struct.stream_s* %17, null
  %19 = zext i1 %18 to i64
  %20 = select i1 %18, i32 1, i32 0
  %21 = trunc i32 %20 to i16
  %22 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i32 0, i32 0
  %24 = bitcast %union.color_sample* %23 to i16*
  store i16 %21, i16* %24, align 8
  %25 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %26 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %25, i32 0, i32 1
  store i16 4, i16* %26, align 8
  store i32 0, i32* %2, align 4
  br label %27

27:                                               ; preds = %11, %10
  %28 = load i32, i32* %2, align 4
  ret i32 %28
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zrun(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  ret i32 -21
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcurrentfile(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i64 1
  store %struct.ref_s* %6, %struct.ref_s** %3, align 8
  store %struct.ref_s* %6, %struct.ref_s** @osp, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %8 = icmp ugt %struct.ref_s* %6, %7
  br i1 %8, label %9, label %12

9:                                                ; preds = %1
  %10 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %11 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %10, i64 -1
  store %struct.ref_s* %11, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %33

12:                                               ; preds = %1
  %13 = call %struct.ref_s* @get_current_file()
  store %struct.ref_s* %13, %struct.ref_s** %4, align 8
  %14 = icmp eq %struct.ref_s* %13, null
  br i1 %14, label %15, label %21

15:                                               ; preds = %12
  %16 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %16, i32 0, i32 0
  %18 = bitcast %union.color_sample* %17 to %struct.file_entry_s**
  store %struct.file_entry_s* @invalid_file_entry, %struct.file_entry_s** %18, align 8
  %19 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i32 0, i32 1
  store i16 12, i16* %20, align 8
  br label %26

21:                                               ; preds = %12
  %22 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %23 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %24 = bitcast %struct.ref_s* %22 to i8*
  %25 = bitcast %struct.ref_s* %23 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %25, i64 16, i1 false)
  br label %26

26:                                               ; preds = %21, %15
  %27 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %28 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %27, i32 0, i32 1
  %29 = load i16, i16* %28, align 8
  %30 = zext i16 %29 to i32
  %31 = and i32 %30, -2
  %32 = trunc i32 %31 to i16
  store i16 %32, i16* %28, align 8
  store i32 0, i32* %2, align 4
  br label %33

33:                                               ; preds = %26, %9
  %34 = load i32, i32* %2, align 4
  ret i32 %34
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zprint(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  %3 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %5 = load %struct.stream_s*, %struct.stream_s** getelementptr inbounds ([5 x %struct.file_entry_s], [5 x %struct.file_entry_s]* @std_files, i64 0, i64 1, i32 0), align 16
  %6 = call i32 @write_string(%struct.ref_s* %4, %struct.stream_s* %5)
  store i32 %6, i32* %3, align 4
  %7 = load i32, i32* %3, align 4
  %8 = icmp sge i32 %7, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %1
  %10 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %11 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %10, i64 -1
  store %struct.ref_s* %11, %struct.ref_s** @osp, align 8
  br label %12

12:                                               ; preds = %9, %1
  %13 = load i32, i32* %3, align 4
  ret i32 %13
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zecho(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i32 0, i32 1
  %6 = load i16, i16* %5, align 8
  %7 = zext i16 %6 to i32
  %8 = and i32 %7, 252
  %9 = icmp eq i32 %8, 4
  br i1 %9, label %11, label %10

10:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %14

11:                                               ; preds = %1
  %12 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %13 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %12, i64 -1
  store %struct.ref_s* %13, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %14

14:                                               ; preds = %11, %10
  %15 = load i32, i32* %2, align 4
  ret i32 %15
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zsetfileposition(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.stream_s*, align 8
  %5 = alloca %struct.file_entry_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i64 -1
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = zext i16 %9 to i32
  %11 = and i32 %10, 255
  %12 = ashr i32 %11, 2
  %13 = icmp ne i32 %12, 3
  br i1 %13, label %14, label %15

14:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %51

15:                                               ; preds = %1
  %16 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %16, i64 -1
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i32 0, i32 0
  %19 = bitcast %union.color_sample* %18 to %struct.file_entry_s**
  %20 = load %struct.file_entry_s*, %struct.file_entry_s** %19, align 8
  store %struct.file_entry_s* %20, %struct.file_entry_s** %5, align 8
  %21 = load %struct.file_entry_s*, %struct.file_entry_s** %5, align 8
  %22 = getelementptr inbounds %struct.file_entry_s, %struct.file_entry_s* %21, i32 0, i32 0
  %23 = load %struct.stream_s*, %struct.stream_s** %22, align 8
  store %struct.stream_s* %23, %struct.stream_s** %4, align 8
  %24 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %25 = icmp eq %struct.stream_s* %24, null
  br i1 %25, label %26, label %27

26:                                               ; preds = %15
  store i32 -7, i32* %2, align 4
  br label %51

27:                                               ; preds = %15
  %28 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i32 0, i32 1
  %30 = load i16, i16* %29, align 8
  %31 = zext i16 %30 to i32
  %32 = and i32 %31, 252
  %33 = icmp eq i32 %32, 20
  br i1 %33, label %35, label %34

34:                                               ; preds = %27
  store i32 -20, i32* %2, align 4
  br label %51

35:                                               ; preds = %27
  %36 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %37 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %36, i32 0, i32 7
  %38 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %37, i32 0, i32 3
  %39 = load i32 (%struct.stream_s*, i64)*, i32 (%struct.stream_s*, i64)** %38, align 8
  %40 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %41 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %42 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %41, i32 0, i32 0
  %43 = bitcast %union.color_sample* %42 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = call i32 %39(%struct.stream_s* %40, i64 %44)
  %46 = icmp slt i32 %45, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %35
  store i32 -12, i32* %2, align 4
  br label %51

48:                                               ; preds = %35
  %49 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %50 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %49, i64 -2
  store %struct.ref_s* %50, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %51

51:                                               ; preds = %48, %47, %34, %26, %14
  %52 = load i32, i32* %2, align 4
  ret i32 %52
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zfileposition(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.stream_s*, align 8
  %5 = alloca %struct.file_entry_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = zext i16 %8 to i32
  %10 = and i32 %9, 255
  %11 = ashr i32 %10, 2
  %12 = icmp ne i32 %11, 3
  br i1 %12, label %13, label %14

13:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %51

14:                                               ; preds = %1
  %15 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %16 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %15, i32 0, i32 0
  %17 = bitcast %union.color_sample* %16 to %struct.file_entry_s**
  %18 = load %struct.file_entry_s*, %struct.file_entry_s** %17, align 8
  store %struct.file_entry_s* %18, %struct.file_entry_s** %5, align 8
  %19 = load %struct.file_entry_s*, %struct.file_entry_s** %5, align 8
  %20 = getelementptr inbounds %struct.file_entry_s, %struct.file_entry_s* %19, i32 0, i32 0
  %21 = load %struct.stream_s*, %struct.stream_s** %20, align 8
  store %struct.stream_s* %21, %struct.stream_s** %4, align 8
  %22 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %23 = icmp eq %struct.stream_s* %22, null
  br i1 %23, label %24, label %25

24:                                               ; preds = %14
  store i32 -7, i32* %2, align 4
  br label %51

25:                                               ; preds = %14
  %26 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %27 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %26, i32 0, i32 6
  %28 = load i64, i64* %27, align 8
  %29 = icmp sge i64 %28, 0
  br i1 %29, label %31, label %30

30:                                               ; preds = %25
  store i32 -12, i32* %2, align 4
  br label %51

31:                                               ; preds = %25
  %32 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %33 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %32, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  %36 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %37 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %36, i32 0, i32 2
  %38 = load i8*, i8** %37, align 8
  %39 = ptrtoint i8* %35 to i64
  %40 = ptrtoint i8* %38 to i64
  %41 = sub i64 %39, %40
  %42 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %43 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %42, i32 0, i32 6
  %44 = load i64, i64* %43, align 8
  %45 = add nsw i64 %41, %44
  %46 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %47 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %46, i32 0, i32 0
  %48 = bitcast %union.color_sample* %47 to i64*
  store i64 %45, i64* %48, align 8
  %49 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %50 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %49, i32 0, i32 1
  store i16 20, i16* %50, align 8
  store i32 0, i32* %2, align 4
  br label %51

51:                                               ; preds = %31, %30, %24, %13
  %52 = load i32, i32* %2, align 4
  ret i32 %52
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zdeletefile(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = zext i16 %8 to i32
  %10 = and i32 %9, 252
  %11 = icmp eq i32 %10, 52
  br i1 %11, label %13, label %12

12:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %43

13:                                               ; preds = %1
  %14 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 1
  %16 = load i16, i16* %15, align 8
  %17 = zext i16 %16 to i32
  %18 = xor i32 %17, -1
  %19 = and i32 %18, 512
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %13
  store i32 -7, i32* %2, align 4
  br label %43

22:                                               ; preds = %13
  %23 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %24 = call i8* @ref_to_string(%struct.ref_s* %23, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7.441, i64 0, i64 0))
  store i8* %24, i8** %4, align 8
  %25 = load i8*, i8** %4, align 8
  %26 = icmp eq i8* %25, null
  br i1 %26, label %27, label %28

27:                                               ; preds = %22
  store i32 -25, i32* %2, align 4
  br label %43

28:                                               ; preds = %22
  %29 = load i8*, i8** %4, align 8
  %30 = call i32 (i8*, ...) bitcast (i32 (...)* @unlink to i32 (i8*, ...)*)(i8* %29)
  store i32 %30, i32* %5, align 4
  %31 = load i8*, i8** %4, align 8
  %32 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %33 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %32, i32 0, i32 2
  %34 = load i16, i16* %33, align 2
  %35 = zext i16 %34 to i32
  %36 = add nsw i32 %35, 1
  call void @alloc_free(i8* %31, i32 %36, i32 1, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7.441, i64 0, i64 0))
  %37 = load i32, i32* %5, align 4
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %39, label %40

39:                                               ; preds = %28
  store i32 -12, i32* %2, align 4
  br label %43

40:                                               ; preds = %28
  %41 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %42 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %41, i64 -1
  store %struct.ref_s* %42, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %43

43:                                               ; preds = %40, %39, %27, %21, %12
  %44 = load i32, i32* %2, align 4
  ret i32 %44
}

declare dso_local i32 @unlink(...) #3

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zrenamefile(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  store i8* null, i8** %4, align 8
  store i8* null, i8** %5, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = zext i16 %8 to i32
  %10 = and i32 %9, 252
  %11 = icmp eq i32 %10, 52
  br i1 %11, label %13, label %12

12:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %82

13:                                               ; preds = %1
  %14 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 1
  %16 = load i16, i16* %15, align 8
  %17 = zext i16 %16 to i32
  %18 = xor i32 %17, -1
  %19 = and i32 %18, 512
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %13
  store i32 -7, i32* %2, align 4
  br label %82

22:                                               ; preds = %13
  %23 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %24 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %23, i64 -1
  %25 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %24, i32 0, i32 1
  %26 = load i16, i16* %25, align 8
  %27 = zext i16 %26 to i32
  %28 = and i32 %27, 252
  %29 = icmp eq i32 %28, 52
  br i1 %29, label %31, label %30

30:                                               ; preds = %22
  store i32 -20, i32* %2, align 4
  br label %82

31:                                               ; preds = %22
  %32 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %33 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %32, i64 -1
  %34 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %33, i32 0, i32 1
  %35 = load i16, i16* %34, align 8
  %36 = zext i16 %35 to i32
  %37 = xor i32 %36, -1
  %38 = and i32 %37, 512
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %40, label %41

40:                                               ; preds = %31
  store i32 -7, i32* %2, align 4
  br label %82

41:                                               ; preds = %31
  %42 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %43 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %42, i64 -1
  %44 = call i8* @ref_to_string(%struct.ref_s* %43, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8.442, i64 0, i64 0))
  store i8* %44, i8** %4, align 8
  %45 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %46 = call i8* @ref_to_string(%struct.ref_s* %45, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9.443, i64 0, i64 0))
  store i8* %46, i8** %5, align 8
  %47 = load i8*, i8** %4, align 8
  %48 = icmp ne i8* %47, null
  br i1 %48, label %49, label %60

49:                                               ; preds = %41
  %50 = load i8*, i8** %5, align 8
  %51 = icmp ne i8* %50, null
  br i1 %51, label %52, label %60

52:                                               ; preds = %49
  %53 = load i8*, i8** %4, align 8
  %54 = load i8*, i8** %5, align 8
  %55 = call i32 @rename(i8* %53, i8* %54) #9
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %60

57:                                               ; preds = %52
  %58 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %59 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %58, i64 -2
  store %struct.ref_s* %59, %struct.ref_s** @osp, align 8
  br label %60

60:                                               ; preds = %57, %52, %49, %41
  %61 = load i8*, i8** %4, align 8
  %62 = icmp ne i8* %61, null
  br i1 %62, label %63, label %71

63:                                               ; preds = %60
  %64 = load i8*, i8** %4, align 8
  %65 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %66 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %65, i64 -1
  %67 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %66, i32 0, i32 2
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = add nsw i32 %69, 1
  call void @alloc_free(i8* %64, i32 %70, i32 1, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8.442, i64 0, i64 0))
  br label %71

71:                                               ; preds = %63, %60
  %72 = load i8*, i8** %5, align 8
  %73 = icmp ne i8* %72, null
  br i1 %73, label %74, label %81

74:                                               ; preds = %71
  %75 = load i8*, i8** %5, align 8
  %76 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %77 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %76, i32 0, i32 2
  %78 = load i16, i16* %77, align 2
  %79 = zext i16 %78 to i32
  %80 = add nsw i32 %79, 1
  call void @alloc_free(i8* %75, i32 %80, i32 1, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9.443, i64 0, i64 0))
  br label %81

81:                                               ; preds = %74, %71
  store i32 0, i32* %2, align 4
  br label %82

82:                                               ; preds = %81, %40, %30, %21, %12
  %83 = load i32, i32* %2, align 4
  ret i32 %83
}

; Function Attrs: nounwind
declare dso_local i32 @rename(i8*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zfilename(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.stream_s*, align 8
  %5 = alloca %struct.file_entry_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = zext i16 %8 to i32
  %10 = and i32 %9, 255
  %11 = ashr i32 %10, 2
  %12 = icmp ne i32 %11, 3
  br i1 %12, label %13, label %14

13:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %34

14:                                               ; preds = %1
  %15 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %16 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %15, i32 0, i32 0
  %17 = bitcast %union.color_sample* %16 to %struct.file_entry_s**
  %18 = load %struct.file_entry_s*, %struct.file_entry_s** %17, align 8
  store %struct.file_entry_s* %18, %struct.file_entry_s** %5, align 8
  %19 = load %struct.file_entry_s*, %struct.file_entry_s** %5, align 8
  %20 = getelementptr inbounds %struct.file_entry_s, %struct.file_entry_s* %19, i32 0, i32 0
  %21 = load %struct.stream_s*, %struct.stream_s** %20, align 8
  store %struct.stream_s* %21, %struct.stream_s** %4, align 8
  %22 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %23 = icmp eq %struct.stream_s* %22, null
  br i1 %23, label %24, label %25

24:                                               ; preds = %14
  store i32 -7, i32* %2, align 4
  br label %34

25:                                               ; preds = %14
  %26 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %27 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %28 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %27, i32 0, i32 0
  %29 = bitcast %union.color_sample* %28 to %struct.file_entry_s**
  %30 = load %struct.file_entry_s*, %struct.file_entry_s** %29, align 8
  %31 = getelementptr inbounds %struct.file_entry_s, %struct.file_entry_s* %30, i32 0, i32 2
  %32 = bitcast %struct.ref_s* %26 to i8*
  %33 = bitcast %struct.ref_s* %31 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 8 %33, i64 16, i1 false)
  store i32 0, i32* %2, align 4
  br label %34

34:                                               ; preds = %25, %24, %13
  %35 = load i32, i32* %2, align 4
  ret i32 %35
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zfindlibfile(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i32 0, i32 1
  %7 = load i16, i16* %6, align 8
  %8 = zext i16 %7 to i32
  %9 = and i32 %8, 252
  %10 = icmp eq i32 %9, 52
  br i1 %10, label %12, label %11

11:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %62

12:                                               ; preds = %1
  %13 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %14 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %15 = call i32 @open_std_file(%struct.ref_s* %13, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4.430, i64 0, i64 0), %struct.ref_s* %14)
  store i32 %15, i32* %4, align 4
  %16 = load i32, i32* %4, align 4
  switch i32 %16, label %31 [
    i32 0, label %17
    i32 -22, label %33
  ]

17:                                               ; preds = %12
  %18 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i64 1
  store %struct.ref_s* %19, %struct.ref_s** %3, align 8
  store %struct.ref_s* %19, %struct.ref_s** @osp, align 8
  %20 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %21 = icmp ugt %struct.ref_s* %19, %20
  br i1 %21, label %22, label %25

22:                                               ; preds = %17
  %23 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %24 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %23, i64 -1
  store %struct.ref_s* %24, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %62

25:                                               ; preds = %17
  %26 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %27 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %26, i32 0, i32 0
  %28 = bitcast %union.color_sample* %27 to i16*
  store i16 1, i16* %28, align 8
  %29 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %30 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %29, i32 0, i32 1
  store i16 4, i16* %30, align 8
  br label %31

31:                                               ; preds = %25, %12
  %32 = load i32, i32* %4, align 4
  store i32 %32, i32* %2, align 4
  br label %62

33:                                               ; preds = %12
  br label %34

34:                                               ; preds = %33
  %35 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %36 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %35, i32 0, i32 0
  %37 = bitcast %union.color_sample* %36 to i8**
  %38 = load i8*, i8** %37, align 8
  %39 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %40 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %39, i32 0, i32 2
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %44 = call i32 @lib_file_open(i8* %38, i32 %42, %struct.ref_s* %43)
  store i32 %44, i32* %4, align 4
  %45 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %46 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %45, i64 1
  store %struct.ref_s* %46, %struct.ref_s** %3, align 8
  store %struct.ref_s* %46, %struct.ref_s** @osp, align 8
  %47 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %48 = icmp ugt %struct.ref_s* %46, %47
  br i1 %48, label %49, label %52

49:                                               ; preds = %34
  %50 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %51 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %50, i64 -1
  store %struct.ref_s* %51, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %62

52:                                               ; preds = %34
  %53 = load i32, i32* %4, align 4
  %54 = icmp sge i32 %53, 0
  %55 = zext i1 %54 to i32
  %56 = trunc i32 %55 to i16
  %57 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %58 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %57, i32 0, i32 0
  %59 = bitcast %union.color_sample* %58 to i16*
  store i16 %56, i16* %59, align 8
  %60 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %61 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %60, i32 0, i32 1
  store i16 4, i16* %61, align 8
  store i32 0, i32* %2, align 4
  br label %62

62:                                               ; preds = %52, %49, %31, %22, %11
  %63 = load i32, i32* %2, align 4
  ret i32 %63
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @lib_file_open(i8* %0, i32 %1, %struct.ref_s* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.ref_s*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i8**, align 8
  %10 = alloca [4096 x i8], align 16
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i32, align 4
  store i8* %0, i8** %5, align 8
  store i32 %1, i32* %6, align 4
  store %struct.ref_s* %2, %struct.ref_s** %7, align 8
  %16 = load i8*, i8** %5, align 8
  %17 = load i32, i32* %6, align 4
  %18 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %19 = call i32 @file_open(i8* %16, i32 %17, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4.430, i64 0, i64 0), %struct.ref_s* %18)
  store i32 %19, i32* %8, align 4
  %20 = load i32, i32* %8, align 4
  %21 = icmp sge i32 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %3
  %23 = load i32, i32* %8, align 4
  store i32 %23, i32* %4, align 4
  br label %126

24:                                               ; preds = %3
  %25 = load i8*, i8** %5, align 8
  %26 = load i32, i32* %6, align 4
  %27 = call i32 @gp_file_name_is_absolute(i8* %25, i32 %26)
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %29, label %30

29:                                               ; preds = %24
  store i32 -22, i32* %4, align 4
  br label %126

30:                                               ; preds = %24
  %31 = load i8**, i8*** @gs_lib_paths, align 8
  store i8** %31, i8*** %9, align 8
  br label %32

32:                                               ; preds = %121, %30
  %33 = load i8**, i8*** %9, align 8
  %34 = load i8*, i8** %33, align 8
  %35 = icmp ne i8* %34, null
  br i1 %35, label %36, label %124

36:                                               ; preds = %32
  %37 = load i8**, i8*** %9, align 8
  %38 = load i8*, i8** %37, align 8
  store i8* %38, i8** %11, align 8
  br label %39

39:                                               ; preds = %117, %36
  %40 = load i8*, i8** %11, align 8
  store i8* %40, i8** %12, align 8
  br label %41

41:                                               ; preds = %55, %39
  %42 = load i8*, i8** %12, align 8
  %43 = load i8, i8* %42, align 1
  %44 = sext i8 %43 to i32
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %46, label %53

46:                                               ; preds = %41
  %47 = load i8*, i8** %12, align 8
  %48 = load i8, i8* %47, align 1
  %49 = sext i8 %48 to i32
  %50 = load i8, i8* @gp_file_name_list_separator, align 1
  %51 = sext i8 %50 to i32
  %52 = icmp ne i32 %49, %51
  br label %53

53:                                               ; preds = %46, %41
  %54 = phi i1 [ false, %41 ], [ %52, %46 ]
  br i1 %54, label %55, label %58

55:                                               ; preds = %53
  %56 = load i8*, i8** %12, align 8
  %57 = getelementptr inbounds i8, i8* %56, i32 1
  store i8* %57, i8** %12, align 8
  br label %41

58:                                               ; preds = %53
  %59 = load i8*, i8** %12, align 8
  %60 = load i8*, i8** %11, align 8
  %61 = ptrtoint i8* %59 to i64
  %62 = ptrtoint i8* %60 to i64
  %63 = sub i64 %61, %62
  %64 = trunc i64 %63 to i32
  store i32 %64, i32* %13, align 4
  %65 = load i8*, i8** %11, align 8
  %66 = load i32, i32* %13, align 4
  %67 = load i8*, i8** %5, align 8
  %68 = load i32, i32* %6, align 4
  %69 = call i8* @gp_file_name_concat_string(i8* %65, i32 %66, i8* %67, i32 %68)
  store i8* %69, i8** %14, align 8
  %70 = load i32, i32* %13, align 4
  %71 = zext i32 %70 to i64
  %72 = load i8*, i8** %14, align 8
  %73 = call i64 @strlen(i8* %72) #11
  %74 = add i64 %71, %73
  %75 = load i32, i32* %6, align 4
  %76 = zext i32 %75 to i64
  %77 = add i64 %74, %76
  %78 = trunc i64 %77 to i32
  store i32 %78, i32* %15, align 4
  %79 = load i32, i32* %15, align 4
  %80 = icmp sle i32 %79, 4096
  br i1 %80, label %81, label %112

81:                                               ; preds = %58
  %82 = getelementptr inbounds [4096 x i8], [4096 x i8]* %10, i64 0, i64 0
  %83 = load i8*, i8** %11, align 8
  %84 = load i32, i32* %13, align 4
  %85 = zext i32 %84 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %82, i8* align 1 %83, i64 %85, i1 false)
  %86 = getelementptr inbounds [4096 x i8], [4096 x i8]* %10, i64 0, i64 0
  %87 = load i32, i32* %13, align 4
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds i8, i8* %86, i64 %88
  %90 = load i8*, i8** %14, align 8
  %91 = call i8* @strcpy(i8* %89, i8* %90) #9
  %92 = getelementptr inbounds [4096 x i8], [4096 x i8]* %10, i64 0, i64 0
  %93 = load i32, i32* %15, align 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds i8, i8* %92, i64 %94
  %96 = load i32, i32* %6, align 4
  %97 = zext i32 %96 to i64
  %98 = sub i64 0, %97
  %99 = getelementptr inbounds i8, i8* %95, i64 %98
  %100 = load i8*, i8** %5, align 8
  %101 = load i32, i32* %6, align 4
  %102 = zext i32 %101 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %99, i8* align 1 %100, i64 %102, i1 false)
  %103 = getelementptr inbounds [4096 x i8], [4096 x i8]* %10, i64 0, i64 0
  %104 = load i32, i32* %15, align 4
  %105 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %106 = call i32 @file_open(i8* %103, i32 %104, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4.430, i64 0, i64 0), %struct.ref_s* %105)
  store i32 %106, i32* %8, align 4
  %107 = load i32, i32* %8, align 4
  %108 = icmp sge i32 %107, 0
  br i1 %108, label %109, label %111

109:                                              ; preds = %81
  %110 = load i32, i32* %8, align 4
  store i32 %110, i32* %4, align 4
  br label %126

111:                                              ; preds = %81
  br label %112

112:                                              ; preds = %111, %58
  %113 = load i8*, i8** %12, align 8
  %114 = load i8, i8* %113, align 1
  %115 = icmp ne i8 %114, 0
  br i1 %115, label %117, label %116

116:                                              ; preds = %112
  br label %120

117:                                              ; preds = %112
  %118 = load i8*, i8** %12, align 8
  %119 = getelementptr inbounds i8, i8* %118, i64 1
  store i8* %119, i8** %11, align 8
  br label %39

120:                                              ; preds = %116
  br label %121

121:                                              ; preds = %120
  %122 = load i8**, i8*** %9, align 8
  %123 = getelementptr inbounds i8*, i8** %122, i32 1
  store i8** %123, i8*** %9, align 8
  br label %32

124:                                              ; preds = %32
  %125 = load i32, i32* %8, align 4
  store i32 %125, i32* %4, align 4
  br label %126

126:                                              ; preds = %124, %109, %29, %22
  %127 = load i32, i32* %4, align 4
  ret i32 %127
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zwriteppmfile(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.stream_s*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct.file_entry_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i64 -1
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 1
  %10 = load i16, i16* %9, align 8
  %11 = zext i16 %10 to i32
  %12 = and i32 %11, 255
  %13 = ashr i32 %12, 2
  %14 = icmp ne i32 %13, 3
  br i1 %14, label %15, label %16

15:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %82

16:                                               ; preds = %1
  %17 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i64 -1
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i32 0, i32 0
  %20 = bitcast %union.color_sample* %19 to %struct.file_entry_s**
  %21 = load %struct.file_entry_s*, %struct.file_entry_s** %20, align 8
  store %struct.file_entry_s* %21, %struct.file_entry_s** %6, align 8
  %22 = load %struct.file_entry_s*, %struct.file_entry_s** %6, align 8
  %23 = getelementptr inbounds %struct.file_entry_s, %struct.file_entry_s* %22, i32 0, i32 0
  %24 = load %struct.stream_s*, %struct.stream_s** %23, align 8
  store %struct.stream_s* %24, %struct.stream_s** %4, align 8
  %25 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %26 = icmp eq %struct.stream_s* %25, null
  br i1 %26, label %32, label %27

27:                                               ; preds = %16
  %28 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %29 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %28, i32 0, i32 4
  %30 = load i8, i8* %29, align 4
  %31 = icmp ne i8 %30, 0
  br i1 %31, label %33, label %32

32:                                               ; preds = %27, %16
  store i32 -7, i32* %2, align 4
  br label %82

33:                                               ; preds = %27
  %34 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %35 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %34, i64 -1
  %36 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %35, i32 0, i32 1
  %37 = load i16, i16* %36, align 8
  %38 = zext i16 %37 to i32
  %39 = xor i32 %38, -1
  %40 = and i32 %39, 256
  %41 = icmp ne i32 %40, 0
  br i1 %41, label %42, label %43

42:                                               ; preds = %33
  store i32 -7, i32* %2, align 4
  br label %82

43:                                               ; preds = %33
  %44 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %45 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %44, i32 0, i32 1
  %46 = load i16, i16* %45, align 8
  %47 = zext i16 %46 to i32
  %48 = and i32 %47, 252
  %49 = icmp eq i32 %48, 60
  br i1 %49, label %51, label %50

50:                                               ; preds = %43
  store i32 -20, i32* %2, align 4
  br label %82

51:                                               ; preds = %43
  %52 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %53 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %52, i32 0, i32 0
  %54 = bitcast %union.color_sample* %53 to %struct.gx_device_s**
  %55 = load %struct.gx_device_s*, %struct.gx_device_s** %54, align 8
  %56 = call i32 @gs_device_is_memory(%struct.gx_device_s* %55)
  %57 = icmp ne i32 %56, 0
  br i1 %57, label %59, label %58

58:                                               ; preds = %51
  store i32 -20, i32* %2, align 4
  br label %82

59:                                               ; preds = %51
  %60 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %61 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %60, i32 0, i32 7
  %62 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %61, i32 0, i32 4
  %63 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %62, align 8
  %64 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %65 = call i32 %63(%struct.stream_s* %64)
  %66 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %67 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %66, i32 0, i32 0
  %68 = bitcast %union.color_sample* %67 to %struct.gx_device_s**
  %69 = load %struct.gx_device_s*, %struct.gx_device_s** %68, align 8
  %70 = bitcast %struct.gx_device_s* %69 to %struct.gx_device_memory_s*
  %71 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %72 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %71, i32 0, i32 9
  %73 = load %struct._IO_FILE*, %struct._IO_FILE** %72, align 8
  %74 = call i32 (%struct.gx_device_memory_s*, %struct._IO_FILE*, ...) bitcast (i32 (%struct.gx_device_memory_s*, %struct._IO_FILE*)* @gs_writeppmfile to i32 (%struct.gx_device_memory_s*, %struct._IO_FILE*, ...)*)(%struct.gx_device_memory_s* %70, %struct._IO_FILE* %73)
  store i32 %74, i32* %5, align 4
  %75 = load i32, i32* %5, align 4
  %76 = icmp sge i32 %75, 0
  br i1 %76, label %77, label %80

77:                                               ; preds = %59
  %78 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %79 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %78, i64 -2
  store %struct.ref_s* %79, %struct.ref_s** @osp, align 8
  br label %80

80:                                               ; preds = %77, %59
  %81 = load i32, i32* %5, align 4
  store i32 %81, i32* %2, align 4
  br label %82

82:                                               ; preds = %80, %58, %50, %42, %32, %15
  %83 = load i32, i32* %2, align 4
  ret i32 %83
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ztype1decryptfile(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.stream_s*, align 8
  %5 = alloca i16, align 2
  %6 = alloca %struct.ref_s, align 8
  %7 = alloca i32, align 4
  %8 = alloca %struct.stream_s*, align 8
  %9 = alloca %struct.file_entry_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %10 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %11 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %10, i64 -1
  %12 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %11, i32 0, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = zext i16 %13 to i32
  %15 = and i32 %14, 252
  %16 = icmp eq i32 %15, 20
  br i1 %16, label %18, label %17

17:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %91

18:                                               ; preds = %1
  %19 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i64 -1
  %21 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %20, i32 0, i32 0
  %22 = bitcast %union.color_sample* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = trunc i64 %23 to i16
  store i16 %24, i16* %5, align 2
  %25 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %26 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %25, i64 -1
  %27 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %26, i32 0, i32 0
  %28 = bitcast %union.color_sample* %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = load i16, i16* %5, align 2
  %31 = zext i16 %30 to i64
  %32 = icmp ne i64 %29, %31
  br i1 %32, label %33, label %34

33:                                               ; preds = %18
  store i32 -15, i32* %2, align 4
  br label %91

34:                                               ; preds = %18
  %35 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %36 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %35, i32 0, i32 1
  %37 = load i16, i16* %36, align 8
  %38 = zext i16 %37 to i32
  %39 = and i32 %38, 255
  %40 = ashr i32 %39, 2
  %41 = icmp ne i32 %40, 3
  br i1 %41, label %42, label %43

42:                                               ; preds = %34
  store i32 -20, i32* %2, align 4
  br label %91

43:                                               ; preds = %34
  %44 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %45 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %44, i32 0, i32 0
  %46 = bitcast %union.color_sample* %45 to %struct.file_entry_s**
  %47 = load %struct.file_entry_s*, %struct.file_entry_s** %46, align 8
  store %struct.file_entry_s* %47, %struct.file_entry_s** %9, align 8
  %48 = load %struct.file_entry_s*, %struct.file_entry_s** %9, align 8
  %49 = getelementptr inbounds %struct.file_entry_s, %struct.file_entry_s* %48, i32 0, i32 0
  %50 = load %struct.stream_s*, %struct.stream_s** %49, align 8
  store %struct.stream_s* %50, %struct.stream_s** %4, align 8
  %51 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %52 = icmp eq %struct.stream_s* %51, null
  br i1 %52, label %58, label %53

53:                                               ; preds = %43
  %54 = load %struct.stream_s*, %struct.stream_s** %4, align 8
  %55 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %54, i32 0, i32 4
  %56 = load i8, i8* %55, align 4
  %57 = icmp ne i8 %56, 0
  br i1 %57, label %58, label %59

58:                                               ; preds = %53, %43
  store i32 -7, i32* %2, align 4
  br label %91

59:                                               ; preds = %53
  %60 = call i32 @file_open(i8* null, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4.430, i64 0, i64 0), %struct.ref_s* %6)
  store i32 %60, i32* %7, align 4
  %61 = load i32, i32* %7, align 4
  %62 = icmp slt i32 %61, 0
  br i1 %62, label %63, label %65

63:                                               ; preds = %59
  %64 = load i32, i32* %7, align 4
  store i32 %64, i32* %2, align 4
  br label %91

65:                                               ; preds = %59
  %66 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i32 0, i32 0
  %67 = bitcast %union.color_sample* %66 to %struct.file_entry_s**
  %68 = load %struct.file_entry_s*, %struct.file_entry_s** %67, align 8
  %69 = getelementptr inbounds %struct.file_entry_s, %struct.file_entry_s* %68, i32 0, i32 0
  %70 = load %struct.stream_s*, %struct.stream_s** %69, align 8
  store %struct.stream_s* %70, %struct.stream_s** %8, align 8
  %71 = load %struct.stream_s*, %struct.stream_s** %8, align 8
  %72 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %73 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %72, i32 0, i32 0
  %74 = bitcast %union.color_sample* %73 to %struct.file_entry_s**
  %75 = load %struct.file_entry_s*, %struct.file_entry_s** %74, align 8
  %76 = getelementptr inbounds %struct.file_entry_s, %struct.file_entry_s* %75, i32 0, i32 0
  %77 = load %struct.stream_s*, %struct.stream_s** %76, align 8
  %78 = load %struct.stream_s*, %struct.stream_s** %8, align 8
  %79 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %78, i32 0, i32 2
  %80 = load i8*, i8** %79, align 8
  %81 = load %struct.stream_s*, %struct.stream_s** %8, align 8
  %82 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %81, i32 0, i32 3
  %83 = load i32, i32* %82, align 8
  %84 = load i16, i16* %5, align 2
  call void @sread_decrypt(%struct.stream_s* %71, %struct.stream_s* %77, i8* %80, i32 %83, i16 zeroext %84)
  %85 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %86 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %85, i64 -1
  %87 = bitcast %struct.ref_s* %86 to i8*
  %88 = bitcast %struct.ref_s* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %87, i8* align 8 %88, i64 16, i1 false)
  %89 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %90 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %89, i64 -1
  store %struct.ref_s* %90, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %91

91:                                               ; preds = %65, %63, %58, %42, %33, %17
  %92 = load i32, i32* %2, align 4
  ret i32 %92
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @zfile_op_init() #0 {
  %1 = call i32 (%struct.op_def*, ...) bitcast (void (%struct.op_def*)* @z_op_init to i32 (%struct.op_def*, ...)*)(%struct.op_def* getelementptr inbounds ([28 x %struct.op_def], [28 x %struct.op_def]* @zfile_op_init.my_defs, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @file_check_read(%struct.ref_s* %0, %struct.stream_s** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca %struct.stream_s**, align 8
  %6 = alloca %struct.stream_s*, align 8
  %7 = alloca %struct.file_entry_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %4, align 8
  store %struct.stream_s** %1, %struct.stream_s*** %5, align 8
  %8 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 0
  %10 = bitcast %union.color_sample* %9 to %struct.file_entry_s**
  %11 = load %struct.file_entry_s*, %struct.file_entry_s** %10, align 8
  store %struct.file_entry_s* %11, %struct.file_entry_s** %7, align 8
  %12 = load %struct.file_entry_s*, %struct.file_entry_s** %7, align 8
  %13 = getelementptr inbounds %struct.file_entry_s, %struct.file_entry_s* %12, i32 0, i32 0
  %14 = load %struct.stream_s*, %struct.stream_s** %13, align 8
  store %struct.stream_s* %14, %struct.stream_s** %6, align 8
  %15 = load %struct.stream_s*, %struct.stream_s** %6, align 8
  %16 = icmp eq %struct.stream_s* %15, null
  br i1 %16, label %22, label %17

17:                                               ; preds = %2
  %18 = load %struct.stream_s*, %struct.stream_s** %6, align 8
  %19 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %18, i32 0, i32 4
  %20 = load i8, i8* %19, align 4
  %21 = icmp ne i8 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %17, %2
  store i32 -7, i32* %3, align 4
  br label %26

23:                                               ; preds = %17
  %24 = load %struct.stream_s*, %struct.stream_s** %6, align 8
  %25 = load %struct.stream_s**, %struct.stream_s*** %5, align 8
  store %struct.stream_s* %24, %struct.stream_s** %25, align 8
  store i32 0, i32* %3, align 4
  br label %26

26:                                               ; preds = %23, %22
  %27 = load i32, i32* %3, align 4
  ret i32 %27
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @zfont_init() #0 {
  %1 = call %struct.gs_font_dir_s* @gs_font_dir_alloc(i8* (i32, i32, i8*)* @alloc, void (i8*, i32, i32, i8*)* @alloc_free)
  store %struct.gs_font_dir_s* %1, %struct.gs_font_dir_s** @ifont_dir, align 8
  call void @name_enter(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.479, i64 0, i64 0), %struct.ref_s* @name_FontDirectory)
  call void @name_enter(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1.480, i64 0, i64 0), %struct.ref_s* @name_FontMatrix)
  call void @name_enter(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2.481, i64 0, i64 0), %struct.ref_s* @name_FontType)
  call void @name_enter(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3.482, i64 0, i64 0), %struct.ref_s* @name_FontBBox)
  call void @name_enter(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4.483, i64 0, i64 0), %struct.ref_s* @name_Encoding)
  call void @name_enter(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5.484, i64 0, i64 0), %struct.ref_s* @name_PaintType)
  call void @name_enter(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6.485, i64 0, i64 0), %struct.ref_s* @name_UniqueID)
  call void @name_enter(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7.486, i64 0, i64 0), %struct.ref_s* @name_BuildChar)
  call void @name_enter(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8.487, i64 0, i64 0), %struct.ref_s* @name_Type1BuildChar)
  call void @name_enter(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9.488, i64 0, i64 0), %struct.ref_s* @name_Private)
  call void @name_enter(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10.489, i64 0, i64 0), %struct.ref_s* @name_CharStrings)
  call void @name_enter(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11.490, i64 0, i64 0), %struct.ref_s* @name_FID)
  call void @name_enter(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12.491, i64 0, i64 0), %struct.ref_s* @name_Subrs)
  call void @name_enter(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.492, i64 0, i64 0), %struct.ref_s* @name_lenIV)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zdefinefont(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct.ref_s*, align 8
  %7 = alloca %struct.ref_s*, align 8
  %8 = alloca %struct.ref_s*, align 8
  %9 = alloca %struct.ref_s*, align 8
  %10 = alloca %struct.ref_s*, align 8
  %11 = alloca %struct.ref_s*, align 8
  %12 = alloca %struct.ref_s*, align 8
  %13 = alloca %struct.ref_s*, align 8
  %14 = alloca %struct.ref_s*, align 8
  %15 = alloca %struct.ref_s*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i64, align 8
  %18 = alloca i32, align 4
  %19 = alloca %struct.gs_matrix_s, align 8
  %20 = alloca [4 x float], align 16
  %21 = alloca %struct.ref_s*, align 8
  %22 = alloca %struct.ref_s*, align 8
  %23 = alloca %struct.gs_font_s*, align 8
  %24 = alloca %struct.font_data_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %25 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %26 = load %struct.ref_s*, %struct.ref_s** getelementptr inbounds ([6 x %struct.ref_s*], [6 x %struct.ref_s*]* @osp_nargs, i64 0, i64 1), align 8
  %27 = icmp ult %struct.ref_s* %25, %26
  br i1 %27, label %28, label %29

28:                                               ; preds = %1
  store i32 -17, i32* %2, align 4
  br label %459

29:                                               ; preds = %1
  %30 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %31 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %30, i32 0, i32 1
  %32 = load i16, i16* %31, align 8
  %33 = zext i16 %32 to i32
  %34 = and i32 %33, 252
  %35 = icmp eq i32 %34, 8
  br i1 %35, label %37, label %36

36:                                               ; preds = %29
  store i32 -20, i32* %2, align 4
  br label %459

37:                                               ; preds = %29
  %38 = call i32 @dict_lookup(%struct.ref_s* getelementptr inbounds ([20 x %struct.ref_s], [20 x %struct.ref_s]* @dstack, i64 0, i64 0), %struct.ref_s* getelementptr inbounds ([20 x %struct.ref_s], [20 x %struct.ref_s]* @dstack, i64 0, i64 0), %struct.ref_s* @name_FontDirectory, %struct.ref_s** %4)
  %39 = icmp sle i32 %38, 0
  br i1 %39, label %40, label %41

40:                                               ; preds = %37
  store i32 -10, i32* %2, align 4
  br label %459

41:                                               ; preds = %37
  %42 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %43 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %44 = call i32 @dict_lookup(%struct.ref_s* %42, %struct.ref_s* %43, %struct.ref_s* @name_FontMatrix, %struct.ref_s** %7)
  %45 = icmp sle i32 %44, 0
  br i1 %45, label %79, label %46

46:                                               ; preds = %41
  %47 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %48 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %49 = call i32 @dict_lookup(%struct.ref_s* %47, %struct.ref_s* %48, %struct.ref_s* @name_FontType, %struct.ref_s** %8)
  %50 = icmp sle i32 %49, 0
  br i1 %50, label %79, label %51

51:                                               ; preds = %46
  %52 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %53 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %52, i32 0, i32 1
  %54 = load i16, i16* %53, align 8
  %55 = zext i16 %54 to i32
  %56 = and i32 %55, 255
  %57 = ashr i32 %56, 2
  %58 = icmp ne i32 %57, 5
  br i1 %58, label %79, label %59

59:                                               ; preds = %51
  %60 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %61 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %60, i32 0, i32 0
  %62 = bitcast %union.color_sample* %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = icmp ugt i64 %63, 255
  br i1 %64, label %79, label %65

65:                                               ; preds = %59
  %66 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %67 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %68 = call i32 @dict_lookup(%struct.ref_s* %66, %struct.ref_s* %67, %struct.ref_s* @name_FontBBox, %struct.ref_s** %9)
  %69 = icmp sle i32 %68, 0
  br i1 %69, label %79, label %70

70:                                               ; preds = %65
  %71 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %72 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %73 = call i32 @dict_lookup(%struct.ref_s* %71, %struct.ref_s* %72, %struct.ref_s* @name_Encoding, %struct.ref_s** %10)
  %74 = icmp sle i32 %73, 0
  br i1 %74, label %79, label %75

75:                                               ; preds = %70
  %76 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %77 = call i32 (%struct.ref_s*, %struct.gs_matrix_s*, ...) bitcast (i32 (%struct.ref_s*, %struct.gs_matrix_s*)* @read_matrix to i32 (%struct.ref_s*, %struct.gs_matrix_s*, ...)*)(%struct.ref_s* %76, %struct.gs_matrix_s* %19)
  %78 = icmp slt i32 %77, 0
  br i1 %78, label %79, label %80

79:                                               ; preds = %75, %70, %65, %59, %51, %46, %41
  store i32 -10, i32* %2, align 4
  br label %459

80:                                               ; preds = %75
  %81 = load %struct.ref_s*, %struct.ref_s** %9, align 8
  %82 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %81, i32 0, i32 1
  %83 = load i16, i16* %82, align 8
  %84 = zext i16 %83 to i32
  %85 = and i32 %84, 255
  %86 = ashr i32 %85, 2
  switch i32 %86, label %87 [
    i32 0, label %88
    i32 10, label %88
  ]

87:                                               ; preds = %80
  store i32 -10, i32* %2, align 4
  br label %459

88:                                               ; preds = %80, %80
  br label %89

89:                                               ; preds = %88
  %90 = load %struct.ref_s*, %struct.ref_s** %10, align 8
  %91 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %90, i32 0, i32 1
  %92 = load i16, i16* %91, align 8
  %93 = zext i16 %92 to i32
  %94 = and i32 %93, 255
  %95 = ashr i32 %94, 2
  switch i32 %95, label %96 [
    i32 0, label %97
    i32 10, label %97
  ]

96:                                               ; preds = %89
  store i32 -10, i32* %2, align 4
  br label %459

97:                                               ; preds = %89, %89
  br label %98

98:                                               ; preds = %97
  %99 = load %struct.ref_s*, %struct.ref_s** %9, align 8
  %100 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %99, i32 0, i32 2
  %101 = load i16, i16* %100, align 2
  %102 = zext i16 %101 to i32
  %103 = icmp ne i32 %102, 4
  br i1 %103, label %113, label %104

104:                                              ; preds = %98
  %105 = load %struct.ref_s*, %struct.ref_s** %9, align 8
  %106 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %105, i32 0, i32 0
  %107 = bitcast %union.color_sample* %106 to %struct.ref_s**
  %108 = load %struct.ref_s*, %struct.ref_s** %107, align 8
  %109 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %108, i64 3
  %110 = getelementptr inbounds [4 x float], [4 x float]* %20, i64 0, i64 0
  %111 = call i32 @num_params(%struct.ref_s* %109, i32 4, float* %110)
  %112 = icmp slt i32 %111, 0
  br i1 %112, label %113, label %114

113:                                              ; preds = %104, %98
  store i32 -10, i32* %2, align 4
  br label %459

114:                                              ; preds = %104
  %115 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %116 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %117 = call i32 @dict_lookup(%struct.ref_s* %115, %struct.ref_s* %116, %struct.ref_s* @name_PaintType, %struct.ref_s** %12)
  %118 = icmp sle i32 %117, 0
  br i1 %118, label %119, label %120

119:                                              ; preds = %114
  store i32 -1, i32* %16, align 4
  br label %147

120:                                              ; preds = %114
  %121 = load %struct.ref_s*, %struct.ref_s** %12, align 8
  %122 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %121, i32 0, i32 1
  %123 = load i16, i16* %122, align 8
  %124 = zext i16 %123 to i32
  %125 = and i32 %124, 255
  %126 = ashr i32 %125, 2
  %127 = icmp ne i32 %126, 5
  br i1 %127, label %140, label %128

128:                                              ; preds = %120
  %129 = load %struct.ref_s*, %struct.ref_s** %12, align 8
  %130 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %129, i32 0, i32 0
  %131 = bitcast %union.color_sample* %130 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = icmp slt i64 %132, 0
  br i1 %133, label %140, label %134

134:                                              ; preds = %128
  %135 = load %struct.ref_s*, %struct.ref_s** %12, align 8
  %136 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %135, i32 0, i32 0
  %137 = bitcast %union.color_sample* %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = icmp sgt i64 %138, 65535
  br i1 %139, label %140, label %141

140:                                              ; preds = %134, %128, %120
  store i32 -10, i32* %2, align 4
  br label %459

141:                                              ; preds = %134
  %142 = load %struct.ref_s*, %struct.ref_s** %12, align 8
  %143 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %142, i32 0, i32 0
  %144 = bitcast %union.color_sample* %143 to i64*
  %145 = load i64, i64* %144, align 8
  %146 = trunc i64 %145 to i32
  store i32 %146, i32* %16, align 4
  br label %147

147:                                              ; preds = %141, %119
  %148 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %149 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %150 = call i32 @dict_lookup(%struct.ref_s* %148, %struct.ref_s* %149, %struct.ref_s* @name_UniqueID, %struct.ref_s** %13)
  %151 = icmp sle i32 %150, 0
  br i1 %151, label %152, label %153

152:                                              ; preds = %147
  store i64 -1, i64* %17, align 8
  br label %179

153:                                              ; preds = %147
  %154 = load %struct.ref_s*, %struct.ref_s** %13, align 8
  %155 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %154, i32 0, i32 1
  %156 = load i16, i16* %155, align 8
  %157 = zext i16 %156 to i32
  %158 = and i32 %157, 255
  %159 = ashr i32 %158, 2
  %160 = icmp ne i32 %159, 5
  br i1 %160, label %173, label %161

161:                                              ; preds = %153
  %162 = load %struct.ref_s*, %struct.ref_s** %13, align 8
  %163 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %162, i32 0, i32 0
  %164 = bitcast %union.color_sample* %163 to i64*
  %165 = load i64, i64* %164, align 8
  %166 = icmp slt i64 %165, 0
  br i1 %166, label %173, label %167

167:                                              ; preds = %161
  %168 = load %struct.ref_s*, %struct.ref_s** %13, align 8
  %169 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %168, i32 0, i32 0
  %170 = bitcast %union.color_sample* %169 to i64*
  %171 = load i64, i64* %170, align 8
  %172 = icmp sgt i64 %171, 16777215
  br i1 %172, label %173, label %174

173:                                              ; preds = %167, %161, %153
  store i32 -10, i32* %2, align 4
  br label %459

174:                                              ; preds = %167
  %175 = load %struct.ref_s*, %struct.ref_s** %13, align 8
  %176 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %175, i32 0, i32 0
  %177 = bitcast %union.color_sample* %176 to i64*
  %178 = load i64, i64* %177, align 8
  store i64 %178, i64* %17, align 8
  br label %179

179:                                              ; preds = %174, %152
  %180 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %181 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %182 = call i32 @dict_lookup(%struct.ref_s* %180, %struct.ref_s* %181, %struct.ref_s* @name_BuildChar, %struct.ref_s** %14)
  store i32 %182, i32* %5, align 4
  store i8* null, i8** bitcast (%struct.ref_s* @zdefinefont.no_subrs to i8**), align 8
  store i16 52, i16* getelementptr inbounds (%struct.ref_s, %struct.ref_s* @zdefinefont.no_subrs, i32 0, i32 1), align 8
  store i16 0, i16* getelementptr inbounds (%struct.ref_s, %struct.ref_s* @zdefinefont.no_subrs, i32 0, i32 2), align 2
  store %struct.ref_s* @zdefinefont.no_subrs, %struct.ref_s** %15, align 8
  store i64 0, i64* getelementptr inbounds (%struct.ref_s, %struct.ref_s* @zdefinefont.no_charstrings, i32 0, i32 0, i32 0), align 8
  store i16 32, i16* getelementptr inbounds (%struct.ref_s, %struct.ref_s* @zdefinefont.no_charstrings, i32 0, i32 1), align 8
  store %struct.ref_s* @zdefinefont.no_charstrings, %struct.ref_s** %11, align 8
  %183 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %184 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %183, i32 0, i32 0
  %185 = bitcast %union.color_sample* %184 to i64*
  %186 = load i64, i64* %185, align 8
  %187 = icmp eq i64 %186, 1
  br i1 %187, label %188, label %292

188:                                              ; preds = %179
  %189 = load i32, i32* %5, align 4
  %190 = icmp sgt i32 %189, 0
  br i1 %190, label %217, label %191

191:                                              ; preds = %188
  %192 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %193 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %194 = call i32 @dict_lookup(%struct.ref_s* %192, %struct.ref_s* %193, %struct.ref_s* @name_CharStrings, %struct.ref_s** %11)
  %195 = icmp sle i32 %194, 0
  br i1 %195, label %217, label %196

196:                                              ; preds = %191
  %197 = load %struct.ref_s*, %struct.ref_s** %11, align 8
  %198 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %197, i32 0, i32 1
  %199 = load i16, i16* %198, align 8
  %200 = zext i16 %199 to i32
  %201 = and i32 %200, 255
  %202 = ashr i32 %201, 2
  %203 = icmp ne i32 %202, 2
  br i1 %203, label %217, label %204

204:                                              ; preds = %196
  %205 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %206 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %207 = call i32 @dict_lookup(%struct.ref_s* %205, %struct.ref_s* %206, %struct.ref_s* @name_Private, %struct.ref_s** %21)
  %208 = icmp sle i32 %207, 0
  br i1 %208, label %217, label %209

209:                                              ; preds = %204
  %210 = load %struct.ref_s*, %struct.ref_s** %21, align 8
  %211 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %210, i32 0, i32 1
  %212 = load i16, i16* %211, align 8
  %213 = zext i16 %212 to i32
  %214 = and i32 %213, 255
  %215 = ashr i32 %214, 2
  %216 = icmp ne i32 %215, 2
  br i1 %216, label %217, label %218

217:                                              ; preds = %209, %204, %196, %191, %188
  store i32 -10, i32* %2, align 4
  br label %459

218:                                              ; preds = %209
  %219 = load %struct.ref_s*, %struct.ref_s** %21, align 8
  %220 = load %struct.ref_s*, %struct.ref_s** %21, align 8
  %221 = call i32 @dict_lookup(%struct.ref_s* %219, %struct.ref_s* %220, %struct.ref_s* @name_Subrs, %struct.ref_s** %15)
  %222 = icmp sgt i32 %221, 0
  br i1 %222, label %223, label %233

223:                                              ; preds = %218
  %224 = load %struct.ref_s*, %struct.ref_s** %15, align 8
  %225 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %224, i32 0, i32 1
  %226 = load i16, i16* %225, align 8
  %227 = zext i16 %226 to i32
  %228 = and i32 %227, 255
  %229 = ashr i32 %228, 2
  switch i32 %229, label %230 [
    i32 0, label %231
    i32 10, label %231
  ]

230:                                              ; preds = %223
  store i32 -10, i32* %2, align 4
  br label %459

231:                                              ; preds = %223, %223
  br label %232

232:                                              ; preds = %231
  br label %233

233:                                              ; preds = %232, %218
  %234 = load %struct.ref_s*, %struct.ref_s** %21, align 8
  %235 = load %struct.ref_s*, %struct.ref_s** %21, align 8
  %236 = call i32 @dict_lookup(%struct.ref_s* %234, %struct.ref_s* %235, %struct.ref_s* @name_lenIV, %struct.ref_s** %22)
  %237 = icmp sgt i32 %236, 0
  br i1 %237, label %238, label %259

238:                                              ; preds = %233
  %239 = load %struct.ref_s*, %struct.ref_s** %22, align 8
  %240 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %239, i32 0, i32 1
  %241 = load i16, i16* %240, align 8
  %242 = zext i16 %241 to i32
  %243 = and i32 %242, 255
  %244 = ashr i32 %243, 2
  %245 = icmp ne i32 %244, 5
  br i1 %245, label %252, label %246

246:                                              ; preds = %238
  %247 = load %struct.ref_s*, %struct.ref_s** %22, align 8
  %248 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %247, i32 0, i32 0
  %249 = bitcast %union.color_sample* %248 to i64*
  %250 = load i64, i64* %249, align 8
  %251 = icmp ugt i64 %250, 255
  br i1 %251, label %252, label %253

252:                                              ; preds = %246, %238
  store i32 -10, i32* %2, align 4
  br label %459

253:                                              ; preds = %246
  %254 = load %struct.ref_s*, %struct.ref_s** %22, align 8
  %255 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %254, i32 0, i32 0
  %256 = bitcast %union.color_sample* %255 to i64*
  %257 = load i64, i64* %256, align 8
  %258 = trunc i64 %257 to i32
  store i32 %258, i32* %18, align 4
  br label %260

259:                                              ; preds = %233
  store i32 4, i32* %18, align 4
  br label %260

260:                                              ; preds = %259, %253
  %261 = load i64, i64* %17, align 8
  %262 = icmp sge i64 %261, 0
  br i1 %262, label %263, label %285

263:                                              ; preds = %260
  %264 = load %struct.ref_s*, %struct.ref_s** %21, align 8
  %265 = load %struct.ref_s*, %struct.ref_s** %21, align 8
  %266 = call i32 @dict_lookup(%struct.ref_s* %264, %struct.ref_s* %265, %struct.ref_s* @name_UniqueID, %struct.ref_s** %13)
  %267 = icmp sle i32 %266, 0
  br i1 %267, label %283, label %268

268:                                              ; preds = %263
  %269 = load %struct.ref_s*, %struct.ref_s** %13, align 8
  %270 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %269, i32 0, i32 1
  %271 = load i16, i16* %270, align 8
  %272 = zext i16 %271 to i32
  %273 = and i32 %272, 255
  %274 = ashr i32 %273, 2
  %275 = icmp ne i32 %274, 5
  br i1 %275, label %283, label %276

276:                                              ; preds = %268
  %277 = load %struct.ref_s*, %struct.ref_s** %13, align 8
  %278 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %277, i32 0, i32 0
  %279 = bitcast %union.color_sample* %278 to i64*
  %280 = load i64, i64* %279, align 8
  %281 = load i64, i64* %17, align 8
  %282 = icmp ne i64 %280, %281
  br i1 %282, label %283, label %284

283:                                              ; preds = %276, %268, %263
  store i64 -1, i64* %17, align 8
  br label %284

284:                                              ; preds = %283, %276
  br label %285

285:                                              ; preds = %284, %260
  store %struct.ref_s* @name_Type1BuildChar, %struct.ref_s** %14, align 8
  %286 = load %struct.ref_s*, %struct.ref_s** %14, align 8
  %287 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %286, i32 0, i32 1
  %288 = load i16, i16* %287, align 8
  %289 = zext i16 %288 to i32
  %290 = or i32 %289, 1
  %291 = trunc i32 %290 to i16
  store i16 %291, i16* %287, align 8
  br label %315

292:                                              ; preds = %179
  %293 = load i32, i32* %5, align 4
  %294 = icmp sle i32 %293, 0
  br i1 %294, label %295, label %296

295:                                              ; preds = %292
  store i32 -10, i32* %2, align 4
  br label %459

296:                                              ; preds = %292
  %297 = load %struct.ref_s*, %struct.ref_s** %14, align 8
  %298 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %297, i32 0, i32 1
  %299 = load i16, i16* %298, align 8
  %300 = zext i16 %299 to i32
  %301 = and i32 %300, 255
  %302 = ashr i32 %301, 2
  switch i32 %302, label %303 [
    i32 0, label %304
    i32 10, label %304
  ]

303:                                              ; preds = %296
  store i32 -20, i32* %2, align 4
  br label %459

304:                                              ; preds = %296, %296
  br label %305

305:                                              ; preds = %304
  %306 = load %struct.ref_s*, %struct.ref_s** %14, align 8
  %307 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %306, i32 0, i32 1
  %308 = load i16, i16* %307, align 8
  %309 = zext i16 %308 to i32
  %310 = xor i32 %309, -1
  %311 = and i32 %310, 3
  %312 = icmp ne i32 %311, 0
  br i1 %312, label %313, label %314

313:                                              ; preds = %305
  store i32 -7, i32* %2, align 4
  br label %459

314:                                              ; preds = %305
  br label %315

315:                                              ; preds = %314, %285
  %316 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %317 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %318 = call i32 @dict_lookup(%struct.ref_s* %316, %struct.ref_s* %317, %struct.ref_s* @name_FID, %struct.ref_s** %6)
  store i32 %318, i32* %5, align 4
  %319 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %320 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %319, i32 0, i32 1
  %321 = load i16, i16* %320, align 8
  %322 = zext i16 %321 to i32
  %323 = and i32 %322, 256
  %324 = icmp ne i32 %323, 0
  br i1 %324, label %325, label %431

325:                                              ; preds = %315
  %326 = load i32, i32* %5, align 4
  %327 = icmp sgt i32 %326, 0
  br i1 %327, label %328, label %329

328:                                              ; preds = %325
  store i32 -10, i32* %2, align 4
  br label %459

329:                                              ; preds = %325
  %330 = call i8* @alloc(i32 1, i32 184, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14.493, i64 0, i64 0))
  %331 = bitcast i8* %330 to %struct.gs_font_s*
  store %struct.gs_font_s* %331, %struct.gs_font_s** %23, align 8
  %332 = icmp eq %struct.gs_font_s* %331, null
  br i1 %332, label %337, label %333

333:                                              ; preds = %329
  %334 = call i8* @alloc(i32 1, i32 112, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.15.494, i64 0, i64 0))
  %335 = bitcast i8* %334 to %struct.font_data_s*
  store %struct.font_data_s* %335, %struct.font_data_s** %24, align 8
  %336 = icmp eq %struct.font_data_s* %335, null
  br i1 %336, label %337, label %338

337:                                              ; preds = %333, %329
  store i32 -25, i32* %2, align 4
  br label %459

338:                                              ; preds = %333
  %339 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %340 = load %struct.gs_font_s*, %struct.gs_font_s** %23, align 8
  %341 = call i32 @add_FID(%struct.ref_s* %339, %struct.gs_font_s* %340)
  store i32 %341, i32* %5, align 4
  %342 = icmp slt i32 %341, 0
  br i1 %342, label %343, label %345

343:                                              ; preds = %338
  %344 = load i32, i32* %5, align 4
  store i32 %344, i32* %2, align 4
  br label %459

345:                                              ; preds = %338
  %346 = load %struct.font_data_s*, %struct.font_data_s** %24, align 8
  %347 = getelementptr inbounds %struct.font_data_s, %struct.font_data_s* %346, i32 0, i32 0
  %348 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %349 = bitcast %struct.ref_s* %347 to i8*
  %350 = bitcast %struct.ref_s* %348 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %349, i8* align 8 %350, i64 16, i1 false)
  %351 = load %struct.font_data_s*, %struct.font_data_s** %24, align 8
  %352 = getelementptr inbounds %struct.font_data_s, %struct.font_data_s* %351, i32 0, i32 1
  %353 = load %struct.ref_s*, %struct.ref_s** %14, align 8
  %354 = bitcast %struct.ref_s* %352 to i8*
  %355 = bitcast %struct.ref_s* %353 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %354, i8* align 8 %355, i64 16, i1 false)
  %356 = load %struct.font_data_s*, %struct.font_data_s** %24, align 8
  %357 = getelementptr inbounds %struct.font_data_s, %struct.font_data_s* %356, i32 0, i32 2
  %358 = load %struct.ref_s*, %struct.ref_s** %10, align 8
  %359 = bitcast %struct.ref_s* %357 to i8*
  %360 = bitcast %struct.ref_s* %358 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %359, i8* align 8 %360, i64 16, i1 false)
  %361 = load %struct.font_data_s*, %struct.font_data_s** %24, align 8
  %362 = getelementptr inbounds %struct.font_data_s, %struct.font_data_s* %361, i32 0, i32 3
  %363 = load %struct.ref_s*, %struct.ref_s** %11, align 8
  %364 = bitcast %struct.ref_s* %362 to i8*
  %365 = bitcast %struct.ref_s* %363 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %364, i8* align 8 %365, i64 16, i1 false)
  %366 = load %struct.font_data_s*, %struct.font_data_s** %24, align 8
  %367 = getelementptr inbounds %struct.font_data_s, %struct.font_data_s* %366, i32 0, i32 4
  %368 = load %struct.ref_s*, %struct.ref_s** %15, align 8
  %369 = bitcast %struct.ref_s* %367 to i8*
  %370 = bitcast %struct.ref_s* %368 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %369, i8* align 8 %370, i64 16, i1 false)
  %371 = load %struct.font_data_s*, %struct.font_data_s** %24, align 8
  %372 = getelementptr inbounds %struct.font_data_s, %struct.font_data_s* %371, i32 0, i32 5
  %373 = getelementptr inbounds %struct.gs_type1_data_s, %struct.gs_type1_data_s* %372, i32 0, i32 0
  store i32 (%struct.gs_type1_data_s*, i32, i8**)* @z1_subr_proc, i32 (%struct.gs_type1_data_s*, i32, i8**)** %373, align 8
  %374 = load %struct.font_data_s*, %struct.font_data_s** %24, align 8
  %375 = getelementptr inbounds %struct.font_data_s, %struct.font_data_s* %374, i32 0, i32 5
  %376 = getelementptr inbounds %struct.gs_type1_data_s, %struct.gs_type1_data_s* %375, i32 0, i32 1
  store i32 (%struct.gs_type1_data_s*, i64*)* @z1_pop_proc, i32 (%struct.gs_type1_data_s*, i64*)** %376, align 8
  %377 = load %struct.font_data_s*, %struct.font_data_s** %24, align 8
  %378 = bitcast %struct.font_data_s* %377 to i8*
  %379 = load %struct.font_data_s*, %struct.font_data_s** %24, align 8
  %380 = getelementptr inbounds %struct.font_data_s, %struct.font_data_s* %379, i32 0, i32 5
  %381 = getelementptr inbounds %struct.gs_type1_data_s, %struct.gs_type1_data_s* %380, i32 0, i32 2
  store i8* %378, i8** %381, align 8
  %382 = load i32, i32* %18, align 4
  %383 = load %struct.font_data_s*, %struct.font_data_s** %24, align 8
  %384 = getelementptr inbounds %struct.font_data_s, %struct.font_data_s* %383, i32 0, i32 5
  %385 = getelementptr inbounds %struct.gs_type1_data_s, %struct.gs_type1_data_s* %384, i32 0, i32 3
  store i32 %382, i32* %385, align 8
  %386 = load %struct.gs_font_s*, %struct.gs_font_s** %23, align 8
  %387 = load %struct.gs_font_s*, %struct.gs_font_s** %23, align 8
  %388 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %387, i32 0, i32 2
  store %struct.gs_font_s* %386, %struct.gs_font_s** %388, align 8
  %389 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** @ifont_dir, align 8
  %390 = load %struct.gs_font_s*, %struct.gs_font_s** %23, align 8
  %391 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %390, i32 0, i32 3
  store %struct.gs_font_dir_s* %389, %struct.gs_font_dir_s** %391, align 8
  %392 = load %struct.font_data_s*, %struct.font_data_s** %24, align 8
  %393 = bitcast %struct.font_data_s* %392 to i8*
  %394 = load %struct.gs_font_s*, %struct.gs_font_s** %23, align 8
  %395 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %394, i32 0, i32 4
  store i8* %393, i8** %395, align 8
  %396 = load %struct.gs_font_s*, %struct.gs_font_s** %23, align 8
  %397 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %396, i32 0, i32 5
  %398 = bitcast %struct.gs_matrix_s* %397 to i8*
  %399 = bitcast %struct.gs_matrix_s* %19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %398, i8* align 8 %399, i64 96, i1 false)
  %400 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %401 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %400, i32 0, i32 0
  %402 = bitcast %union.color_sample* %401 to i64*
  %403 = load i64, i64* %402, align 8
  %404 = trunc i64 %403 to i32
  %405 = load %struct.gs_font_s*, %struct.gs_font_s** %23, align 8
  %406 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %405, i32 0, i32 6
  store i32 %404, i32* %406, align 8
  %407 = getelementptr inbounds [4 x float], [4 x float]* %20, i64 0, i64 0
  %408 = load float, float* %407, align 16
  %409 = load %struct.gs_font_s*, %struct.gs_font_s** %23, align 8
  %410 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %409, i32 0, i32 7
  store float %408, float* %410, align 4
  %411 = getelementptr inbounds [4 x float], [4 x float]* %20, i64 0, i64 1
  %412 = load float, float* %411, align 4
  %413 = load %struct.gs_font_s*, %struct.gs_font_s** %23, align 8
  %414 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %413, i32 0, i32 8
  store float %412, float* %414, align 8
  %415 = getelementptr inbounds [4 x float], [4 x float]* %20, i64 0, i64 2
  %416 = load float, float* %415, align 8
  %417 = load %struct.gs_font_s*, %struct.gs_font_s** %23, align 8
  %418 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %417, i32 0, i32 9
  store float %416, float* %418, align 4
  %419 = getelementptr inbounds [4 x float], [4 x float]* %20, i64 0, i64 3
  %420 = load float, float* %419, align 4
  %421 = load %struct.gs_font_s*, %struct.gs_font_s** %23, align 8
  %422 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %421, i32 0, i32 10
  store float %420, float* %422, align 8
  %423 = load %struct.gs_font_s*, %struct.gs_font_s** %23, align 8
  %424 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %423, i32 0, i32 13
  store i32 (%struct.gs_show_enum_s*, %struct.gs_state_s*, %struct.gs_font_s*, i32, i8*)* @gs_no_build_char_proc, i32 (%struct.gs_show_enum_s*, %struct.gs_state_s*, %struct.gs_font_s*, i32, i8*)** %424, align 8
  %425 = load i32, i32* %16, align 4
  %426 = load %struct.gs_font_s*, %struct.gs_font_s** %23, align 8
  %427 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %426, i32 0, i32 11
  store i32 %425, i32* %427, align 4
  %428 = load i64, i64* %17, align 8
  %429 = load %struct.gs_font_s*, %struct.gs_font_s** %23, align 8
  %430 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %429, i32 0, i32 12
  store i64 %428, i64* %430, align 8
  br label %436

431:                                              ; preds = %315
  %432 = load i32, i32* %5, align 4
  %433 = icmp sle i32 %432, 0
  br i1 %433, label %434, label %435

434:                                              ; preds = %431
  store i32 -10, i32* %2, align 4
  br label %459

435:                                              ; preds = %431
  br label %436

436:                                              ; preds = %435, %345
  %437 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %438 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %437, i32 0, i32 1
  %439 = load i16, i16* %438, align 8
  %440 = zext i16 %439 to i32
  %441 = and i32 %440, -257
  %442 = trunc i32 %441 to i16
  store i16 %442, i16* %438, align 8
  %443 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %444 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %445 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %444, i64 -1
  %446 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %447 = call i32 @dict_put(%struct.ref_s* %443, %struct.ref_s* %445, %struct.ref_s* %446)
  store i32 %447, i32* %5, align 4
  %448 = icmp slt i32 %447, 0
  br i1 %448, label %449, label %451

449:                                              ; preds = %436
  %450 = load i32, i32* %5, align 4
  store i32 %450, i32* %2, align 4
  br label %459

451:                                              ; preds = %436
  %452 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %453 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %452, i64 -1
  %454 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %455 = bitcast %struct.ref_s* %453 to i8*
  %456 = bitcast %struct.ref_s* %454 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %455, i8* align 8 %456, i64 16, i1 false)
  %457 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %458 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %457, i64 -1
  store %struct.ref_s* %458, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %459

459:                                              ; preds = %451, %449, %434, %343, %337, %328, %313, %303, %295, %252, %230, %217, %173, %140, %113, %96, %87, %79, %40, %36, %28
  %460 = load i32, i32* %2, align 4
  ret i32 %460
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @add_FID(%struct.ref_s* %0, %struct.gs_font_s* %1) #0 {
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.gs_font_s*, align 8
  %5 = alloca %struct.ref_s, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  store %struct.gs_font_s* %1, %struct.gs_font_s** %4, align 8
  %6 = load %struct.gs_font_s*, %struct.gs_font_s** %4, align 8
  %7 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i32 0, i32 0
  %8 = bitcast %union.color_sample* %7 to %struct.gs_font_s**
  store %struct.gs_font_s* %6, %struct.gs_font_s** %8, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i32 0, i32 1
  store i16 16, i16* %9, align 8
  %10 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %11 = call i32 @dict_put(%struct.ref_s* %10, %struct.ref_s* @name_FID, %struct.ref_s* %5)
  ret i32 %11
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zscalefont(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  %5 = alloca float, align 4
  %6 = alloca %struct.gs_matrix_s, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = call i32 @num_params(%struct.ref_s* %7, i32 1, float* %5)
  store i32 %8, i32* %4, align 4
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %1
  %11 = load i32, i32* %4, align 4
  store i32 %11, i32* %2, align 4
  br label %24

12:                                               ; preds = %1
  %13 = load float, float* %5, align 4
  %14 = fpext float %13 to double
  %15 = load float, float* %5, align 4
  %16 = fpext float %15 to double
  %17 = call i32 @gs_make_scaling(double %14, double %16, %struct.gs_matrix_s* %6)
  store i32 %17, i32* %4, align 4
  %18 = icmp slt i32 %17, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %12
  %20 = load i32, i32* %4, align 4
  store i32 %20, i32* %2, align 4
  br label %24

21:                                               ; preds = %12
  %22 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %23 = call i32 @make_font(%struct.ref_s* %22, %struct.gs_matrix_s* %6)
  store i32 %23, i32* %2, align 4
  br label %24

24:                                               ; preds = %21, %19, %10
  %25 = load i32, i32* %2, align 4
  ret i32 %25
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @make_font(%struct.ref_s* %0, %struct.gs_matrix_s* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca %struct.gs_matrix_s*, align 8
  %6 = alloca %struct.ref_s*, align 8
  %7 = alloca %struct.gs_font_s*, align 8
  %8 = alloca %struct.gs_font_s*, align 8
  %9 = alloca %struct.gs_font_s*, align 8
  %10 = alloca %struct.ref_s, align 8
  %11 = alloca %struct.ref_s, align 8
  %12 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %4, align 8
  store %struct.gs_matrix_s* %1, %struct.gs_matrix_s** %5, align 8
  %13 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i64 -1
  store %struct.ref_s* %14, %struct.ref_s** %6, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %11, i32 0, i32 0
  %16 = bitcast %union.color_sample* %15 to i64*
  store i64 6, i64* %16, align 8
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %11, i32 0, i32 1
  store i16 20, i16* %17, align 8
  %18 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %19 = call i32 @font_param(%struct.ref_s* %18, %struct.gs_font_s** %7)
  store i32 %19, i32* %12, align 4
  %20 = icmp slt i32 %19, 0
  br i1 %20, label %46, label %21

21:                                               ; preds = %2
  %22 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** @ifont_dir, align 8
  %23 = load %struct.gs_font_s*, %struct.gs_font_s** %7, align 8
  %24 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %5, align 8
  %25 = call i32 @gs_makefont(%struct.gs_font_dir_s* %22, %struct.gs_font_s* %23, %struct.gs_matrix_s* %24, %struct.gs_font_s** %8, %struct.gs_font_s** %9)
  store i32 %25, i32* %12, align 4
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %46, label %27

27:                                               ; preds = %21
  %28 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %29 = call i32 @dict_maxlength(%struct.ref_s* %28)
  %30 = call i32 @dict_create(i32 %29, %struct.ref_s* %10)
  store i32 %30, i32* %12, align 4
  %31 = icmp slt i32 %30, 0
  br i1 %31, label %46, label %32

32:                                               ; preds = %27
  %33 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %34 = call i32 @dict_copy(%struct.ref_s* %33, %struct.ref_s* %10)
  store i32 %34, i32* %12, align 4
  %35 = icmp slt i32 %34, 0
  br i1 %35, label %46, label %36

36:                                               ; preds = %32
  %37 = call i32 (%struct.ref_s*, ...) bitcast (i32 (%struct.ref_s*)* @zarray to i32 (%struct.ref_s*, ...)*)(%struct.ref_s* %11)
  store i32 %37, i32* %12, align 4
  %38 = icmp slt i32 %37, 0
  br i1 %38, label %46, label %39

39:                                               ; preds = %36
  %40 = call i32 @dict_put(%struct.ref_s* %10, %struct.ref_s* @name_FontMatrix, %struct.ref_s* %11)
  store i32 %40, i32* %12, align 4
  %41 = icmp slt i32 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %39
  %43 = load %struct.gs_font_s*, %struct.gs_font_s** %8, align 8
  %44 = call i32 @add_FID(%struct.ref_s* %10, %struct.gs_font_s* %43)
  store i32 %44, i32* %12, align 4
  %45 = icmp slt i32 %44, 0
  br i1 %45, label %46, label %48

46:                                               ; preds = %42, %39, %36, %32, %27, %21, %2
  %47 = load i32, i32* %12, align 4
  store i32 %47, i32* %3, align 4
  br label %72

48:                                               ; preds = %42
  %49 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %11, i32 0, i32 0
  %50 = bitcast %union.color_sample* %49 to %struct.ref_s**
  %51 = load %struct.ref_s*, %struct.ref_s** %50, align 8
  %52 = bitcast %struct.ref_s* %51 to %struct.gs_matrix_s*
  %53 = load %struct.gs_font_s*, %struct.gs_font_s** %8, align 8
  %54 = getelementptr inbounds %struct.gs_font_s, %struct.gs_font_s* %53, i32 0, i32 5
  %55 = bitcast %struct.gs_matrix_s* %52 to i8*
  %56 = bitcast %struct.gs_matrix_s* %54 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %55, i8* align 8 %56, i64 96, i1 false)
  %57 = load %struct.gs_font_s*, %struct.gs_font_s** %9, align 8
  %58 = icmp ne %struct.gs_font_s* %57, null
  br i1 %58, label %59, label %60

59:                                               ; preds = %48
  br label %60

60:                                               ; preds = %59, %48
  %61 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %62 = bitcast %struct.ref_s* %61 to i8*
  %63 = bitcast %struct.ref_s* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %62, i8* align 8 %63, i64 16, i1 false)
  %64 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %65 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %64, i32 0, i32 1
  %66 = load i16, i16* %65, align 8
  %67 = zext i16 %66 to i32
  %68 = and i32 %67, -257
  %69 = trunc i32 %68 to i16
  store i16 %69, i16* %65, align 8
  %70 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %71 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %70, i64 -1
  store %struct.ref_s* %71, %struct.ref_s** @osp, align 8
  store i32 0, i32* %3, align 4
  br label %72

72:                                               ; preds = %60, %46
  %73 = load i32, i32* %3, align 4
  ret i32 %73
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @font_param(%struct.ref_s* %0, %struct.gs_font_s** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca %struct.gs_font_s**, align 8
  %6 = alloca %struct.ref_s*, align 8
  %7 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %4, align 8
  store %struct.gs_font_s** %1, %struct.gs_font_s*** %5, align 8
  %8 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 1
  %10 = load i16, i16* %9, align 8
  %11 = zext i16 %10 to i32
  %12 = and i32 %11, 252
  %13 = icmp eq i32 %12, 8
  br i1 %13, label %15, label %14

14:                                               ; preds = %2
  store i32 -20, i32* %3, align 4
  br label %33

15:                                               ; preds = %2
  %16 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %17 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %18 = call i32 @dict_lookup(%struct.ref_s* %16, %struct.ref_s* %17, %struct.ref_s* @name_FID, %struct.ref_s** %6)
  store i32 %18, i32* %7, align 4
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %15
  %21 = load i32, i32* %7, align 4
  store i32 %21, i32* %3, align 4
  br label %33

22:                                               ; preds = %15
  %23 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %24 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %23, i32 0, i32 0
  %25 = bitcast %union.color_sample* %24 to %struct.gs_font_s**
  %26 = load %struct.gs_font_s*, %struct.gs_font_s** %25, align 8
  %27 = load %struct.gs_font_s**, %struct.gs_font_s*** %5, align 8
  store %struct.gs_font_s* %26, %struct.gs_font_s** %27, align 8
  %28 = load %struct.gs_font_s**, %struct.gs_font_s*** %5, align 8
  %29 = load %struct.gs_font_s*, %struct.gs_font_s** %28, align 8
  %30 = icmp eq %struct.gs_font_s* %29, null
  br i1 %30, label %31, label %32

31:                                               ; preds = %22
  store i32 -10, i32* %3, align 4
  br label %33

32:                                               ; preds = %22
  store i32 0, i32* %3, align 4
  br label %33

33:                                               ; preds = %32, %31, %20, %14
  %34 = load i32, i32* %3, align 4
  ret i32 %34
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zmakefont(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  %5 = alloca %struct.gs_matrix_s, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = call i32 (%struct.ref_s*, %struct.gs_matrix_s*, ...) bitcast (i32 (%struct.ref_s*, %struct.gs_matrix_s*)* @read_matrix to i32 (%struct.ref_s*, %struct.gs_matrix_s*, ...)*)(%struct.ref_s* %6, %struct.gs_matrix_s* %5)
  store i32 %7, i32* %4, align 4
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %9, label %11

9:                                                ; preds = %1
  %10 = load i32, i32* %4, align 4
  store i32 %10, i32* %2, align 4
  br label %14

11:                                               ; preds = %1
  %12 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %13 = call i32 @make_font(%struct.ref_s* %12, %struct.gs_matrix_s* %5)
  store i32 %13, i32* %2, align 4
  br label %14

14:                                               ; preds = %11, %9
  %15 = load i32, i32* %2, align 4
  ret i32 %15
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zsetfont(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.gs_font_s*, align 8
  %5 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = call i32 @font_param(%struct.ref_s* %6, %struct.gs_font_s** %4)
  store i32 %7, i32* %5, align 4
  %8 = load i32, i32* %5, align 4
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %15, label %10

10:                                               ; preds = %1
  %11 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %12 = load %struct.gs_font_s*, %struct.gs_font_s** %4, align 8
  %13 = call i32 @gs_setfont(%struct.gs_state_s* %11, %struct.gs_font_s* %12)
  store i32 %13, i32* %5, align 4
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %10, %1
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  br label %23

17:                                               ; preds = %10
  %18 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %19 = bitcast %struct.ref_s* %18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.ref_s* getelementptr inbounds (%struct.int_state_s, %struct.int_state_s* @istate, i32 0, i32 4) to i8*), i8* align 8 %19, i64 16, i1 false)
  %20 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %21 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %20, i64 -1
  store %struct.ref_s* %21, %struct.ref_s** @osp, align 8
  %22 = load i32, i32* %5, align 4
  store i32 %22, i32* %2, align 4
  br label %23

23:                                               ; preds = %17, %15
  %24 = load i32, i32* %2, align 4
  ret i32 %24
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcurrentfont(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i64 1
  store %struct.ref_s* %5, %struct.ref_s** %3, align 8
  store %struct.ref_s* %5, %struct.ref_s** @osp, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %7 = icmp ugt %struct.ref_s* %5, %6
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i64 -1
  store %struct.ref_s* %10, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %14

11:                                               ; preds = %1
  %12 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %13 = bitcast %struct.ref_s* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 bitcast (%struct.ref_s* getelementptr inbounds (%struct.int_state_s, %struct.int_state_s* @istate, i32 0, i32 4) to i8*), i64 16, i1 false)
  store i32 0, i32* %2, align 4
  br label %14

14:                                               ; preds = %11, %8
  %15 = load i32, i32* %2, align 4
  ret i32 %15
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcachestatus(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca [7 x i32], align 16
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** @ifont_dir, align 8
  %6 = getelementptr inbounds [7 x i32], [7 x i32]* %4, i64 0, i64 0
  call void @gs_cachestatus(%struct.gs_font_dir_s* %5, i32* %6)
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i64 7
  store %struct.ref_s* %8, %struct.ref_s** %3, align 8
  store %struct.ref_s* %8, %struct.ref_s** @osp, align 8
  %9 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %10 = icmp ugt %struct.ref_s* %8, %9
  br i1 %10, label %11, label %14

11:                                               ; preds = %1
  %12 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %13 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %12, i64 -7
  store %struct.ref_s* %13, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %18

14:                                               ; preds = %1
  %15 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %16 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %15, i64 -6
  %17 = getelementptr inbounds [7 x i32], [7 x i32]* %4, i64 0, i64 0
  call void @make_uint_array(%struct.ref_s* %16, i32* %17, i32 7)
  store i32 0, i32* %2, align 4
  br label %18

18:                                               ; preds = %14, %11
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}

; Function Attrs: noinline nounwind uwtable
define internal void @make_uint_array(%struct.ref_s* %0, i32* %1, i32 %2) #0 {
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca i32*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %4, align 8
  store i32* %1, i32** %5, align 8
  store i32 %2, i32* %6, align 4
  store i32 0, i32* %7, align 4
  br label %8

8:                                                ; preds = %21, %3
  %9 = load i32, i32* %7, align 4
  %10 = load i32, i32* %6, align 4
  %11 = icmp slt i32 %9, %10
  br i1 %11, label %12, label %28

12:                                               ; preds = %8
  %13 = load i32*, i32** %5, align 8
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i64
  %16 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %16, i32 0, i32 0
  %18 = bitcast %union.color_sample* %17 to i64*
  store i64 %15, i64* %18, align 8
  %19 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i32 0, i32 1
  store i16 20, i16* %20, align 8
  br label %21

21:                                               ; preds = %12
  %22 = load i32, i32* %7, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %7, align 4
  %24 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %25 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %24, i32 1
  store %struct.ref_s* %25, %struct.ref_s** %4, align 8
  %26 = load i32*, i32** %5, align 8
  %27 = getelementptr inbounds i32, i32* %26, i32 1
  store i32* %27, i32** %5, align 8
  br label %8

28:                                               ; preds = %8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zsetcachelimit(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = call i32 @num_params(%struct.ref_s* %6, i32 1, float* null)
  store i32 %7, i32* %4, align 4
  %8 = load i32, i32* %4, align 4
  %9 = icmp ne i32 %8, 1
  br i1 %9, label %10, label %18

10:                                               ; preds = %1
  %11 = load i32, i32* %4, align 4
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %13, label %15

13:                                               ; preds = %10
  %14 = load i32, i32* %4, align 4
  br label %16

15:                                               ; preds = %10
  br label %16

16:                                               ; preds = %15, %13
  %17 = phi i32 [ %14, %13 ], [ -20, %15 ]
  store i32 %17, i32* %2, align 4
  br label %36

18:                                               ; preds = %1
  %19 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i32 0, i32 0
  %21 = bitcast %union.color_sample* %20 to i64*
  %22 = load i64, i64* %21, align 8
  store i64 %22, i64* %5, align 8
  %23 = load i64, i64* %5, align 8
  %24 = icmp slt i64 %23, 0
  br i1 %24, label %28, label %25

25:                                               ; preds = %18
  %26 = load i64, i64* %5, align 8
  %27 = icmp sgt i64 %26, 4294967295
  br i1 %27, label %28, label %29

28:                                               ; preds = %25, %18
  store i32 -15, i32* %2, align 4
  br label %36

29:                                               ; preds = %25
  %30 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** @ifont_dir, align 8
  %31 = load i64, i64* %5, align 8
  %32 = trunc i64 %31 to i32
  %33 = call i32 @gs_setcachelimit(%struct.gs_font_dir_s* %30, i32 %32)
  %34 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %35 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %34, i64 -1
  store %struct.ref_s* %35, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %36

36:                                               ; preds = %29, %28, %16
  %37 = load i32, i32* %2, align 4
  ret i32 %37
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zsetcacheparams(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca [2 x i32], align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  store i32 0, i32* %5, align 4
  br label %8

8:                                                ; preds = %63, %1
  %9 = load i32, i32* %5, align 4
  %10 = icmp slt i32 %9, 2
  br i1 %10, label %11, label %23

11:                                               ; preds = %8
  %12 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %13 = load i32, i32* %5, align 4
  %14 = sext i32 %13 to i64
  %15 = sub i64 0, %14
  %16 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %12, i64 %15
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %16, i32 0, i32 1
  %18 = load i16, i16* %17, align 8
  %19 = zext i16 %18 to i32
  %20 = and i32 %19, 255
  %21 = ashr i32 %20, 2
  %22 = icmp ne i32 %21, 6
  br label %23

23:                                               ; preds = %11, %8
  %24 = phi i1 [ false, %8 ], [ %22, %11 ]
  br i1 %24, label %25, label %66

25:                                               ; preds = %23
  %26 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %27 = load i32, i32* %5, align 4
  %28 = sext i32 %27 to i64
  %29 = sub i64 0, %28
  %30 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %26, i64 %29
  %31 = call i32 @num_params(%struct.ref_s* %30, i32 1, float* null)
  store i32 %31, i32* %6, align 4
  %32 = load i32, i32* %6, align 4
  %33 = icmp ne i32 %32, 1
  br i1 %33, label %34, label %42

34:                                               ; preds = %25
  %35 = load i32, i32* %6, align 4
  %36 = icmp slt i32 %35, 0
  br i1 %36, label %37, label %39

37:                                               ; preds = %34
  %38 = load i32, i32* %6, align 4
  br label %40

39:                                               ; preds = %34
  br label %40

40:                                               ; preds = %39, %37
  %41 = phi i32 [ %38, %37 ], [ -20, %39 ]
  store i32 %41, i32* %2, align 4
  br label %90

42:                                               ; preds = %25
  %43 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %44 = load i32, i32* %5, align 4
  %45 = sub nsw i32 0, %44
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %43, i64 %46
  %48 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %47, i32 0, i32 0
  %49 = bitcast %union.color_sample* %48 to i64*
  %50 = load i64, i64* %49, align 8
  store i64 %50, i64* %7, align 8
  %51 = load i64, i64* %7, align 8
  %52 = icmp slt i64 %51, 0
  br i1 %52, label %56, label %53

53:                                               ; preds = %42
  %54 = load i64, i64* %7, align 8
  %55 = icmp sgt i64 %54, 4294967295
  br i1 %55, label %56, label %57

56:                                               ; preds = %53, %42
  store i32 -15, i32* %2, align 4
  br label %90

57:                                               ; preds = %53
  %58 = load i64, i64* %7, align 8
  %59 = trunc i64 %58 to i32
  %60 = load i32, i32* %5, align 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds [2 x i32], [2 x i32]* %4, i64 0, i64 %61
  store i32 %59, i32* %62, align 4
  br label %63

63:                                               ; preds = %57
  %64 = load i32, i32* %5, align 4
  %65 = add nsw i32 %64, 1
  store i32 %65, i32* %5, align 4
  br label %8

66:                                               ; preds = %23
  %67 = load i32, i32* %5, align 4
  switch i32 %67, label %87 [
    i32 2, label %68
    i32 1, label %77
    i32 0, label %86
  ]

68:                                               ; preds = %66
  %69 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** @ifont_dir, align 8
  %70 = getelementptr inbounds [2 x i32], [2 x i32]* %4, i64 0, i64 1
  %71 = load i32, i32* %70, align 4
  %72 = call i32 @gs_setcachelower(%struct.gs_font_dir_s* %69, i32 %71)
  store i32 %72, i32* %6, align 4
  %73 = icmp slt i32 %72, 0
  br i1 %73, label %74, label %76

74:                                               ; preds = %68
  %75 = load i32, i32* %6, align 4
  store i32 %75, i32* %2, align 4
  br label %90

76:                                               ; preds = %68
  br label %77

77:                                               ; preds = %76, %66
  %78 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** @ifont_dir, align 8
  %79 = getelementptr inbounds [2 x i32], [2 x i32]* %4, i64 0, i64 0
  %80 = load i32, i32* %79, align 4
  %81 = call i32 @gs_setcacheupper(%struct.gs_font_dir_s* %78, i32 %80)
  store i32 %81, i32* %6, align 4
  %82 = icmp slt i32 %81, 0
  br i1 %82, label %83, label %85

83:                                               ; preds = %77
  %84 = load i32, i32* %6, align 4
  store i32 %84, i32* %2, align 4
  br label %90

85:                                               ; preds = %77
  br label %86

86:                                               ; preds = %85, %66
  br label %87

87:                                               ; preds = %86, %66
  %88 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %89 = call i32 (%struct.ref_s*, ...) bitcast (i32 (%struct.ref_s*)* @zcleartomark to i32 (%struct.ref_s*, ...)*)(%struct.ref_s* %88)
  store i32 %89, i32* %2, align 4
  br label %90

90:                                               ; preds = %87, %83, %74, %56, %40
  %91 = load i32, i32* %2, align 4
  ret i32 %91
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcurrentcacheparams(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca [2 x i32], align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** @ifont_dir, align 8
  %6 = call i32 @gs_currentcachelower(%struct.gs_font_dir_s* %5)
  %7 = getelementptr inbounds [2 x i32], [2 x i32]* %4, i64 0, i64 0
  store i32 %6, i32* %7, align 4
  %8 = load %struct.gs_font_dir_s*, %struct.gs_font_dir_s** @ifont_dir, align 8
  %9 = call i32 @gs_currentcacheupper(%struct.gs_font_dir_s* %8)
  %10 = getelementptr inbounds [2 x i32], [2 x i32]* %4, i64 0, i64 1
  store i32 %9, i32* %10, align 4
  %11 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %12 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %11, i64 3
  store %struct.ref_s* %12, %struct.ref_s** %3, align 8
  store %struct.ref_s* %12, %struct.ref_s** @osp, align 8
  %13 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %14 = icmp ugt %struct.ref_s* %12, %13
  br i1 %14, label %15, label %18

15:                                               ; preds = %1
  %16 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %16, i64 -3
  store %struct.ref_s* %17, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %29

18:                                               ; preds = %1
  %19 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i64 -2
  %21 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %20, i32 0, i32 0
  %22 = bitcast %union.color_sample* %21 to i64*
  store i64 0, i64* %22, align 8
  %23 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %24 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %23, i64 -2
  %25 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %24, i32 0, i32 1
  store i16 24, i16* %25, align 8
  %26 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %27 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %26, i64 -1
  %28 = getelementptr inbounds [2 x i32], [2 x i32]* %4, i64 0, i64 0
  call void @make_uint_array(%struct.ref_s* %27, i32* %28, i32 2)
  store i32 0, i32* %2, align 4
  br label %29

29:                                               ; preds = %18, %15
  %30 = load i32, i32* %2, align 4
  ret i32 %30
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @zfont_op_init() #0 {
  %1 = call i32 (%struct.op_def*, ...) bitcast (void (%struct.op_def*)* @z_op_init to i32 (%struct.op_def*, ...)*)(%struct.op_def* getelementptr inbounds ([10 x %struct.op_def], [10 x %struct.op_def]* @zfont_op_init.my_defs, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcopy(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = zext i16 %8 to i32
  %10 = and i32 %9, 255
  %11 = ashr i32 %10, 2
  switch i32 %11, label %74 [
    i32 5, label %12
    i32 0, label %66
    i32 10, label %66
    i32 13, label %66
    i32 2, label %71
  ]

12:                                               ; preds = %1
  %13 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i32 0, i32 0
  %15 = bitcast %union.color_sample* %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %18 = load %struct.ref_s*, %struct.ref_s** @osbot, align 8
  %19 = ptrtoint %struct.ref_s* %17 to i64
  %20 = ptrtoint %struct.ref_s* %18 to i64
  %21 = sub i64 %19, %20
  %22 = sdiv exact i64 %21, 16
  %23 = icmp ugt i64 %16, %22
  br i1 %23, label %24, label %25

24:                                               ; preds = %12
  store i32 -15, i32* %2, align 4
  br label %101

25:                                               ; preds = %12
  %26 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %27 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %26, i32 0, i32 0
  %28 = bitcast %union.color_sample* %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = trunc i64 %29 to i32
  store i32 %30, i32* %5, align 4
  %31 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %32 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %31, i64 -1
  %33 = load i32, i32* %5, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %32, i64 %34
  %36 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %37 = icmp ugt %struct.ref_s* %35, %36
  br i1 %37, label %38, label %39

38:                                               ; preds = %25
  store i32 -16, i32* %2, align 4
  br label %101

39:                                               ; preds = %25
  %40 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %41 = bitcast %struct.ref_s* %40 to i8*
  %42 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %43 = load i32, i32* %5, align 4
  %44 = sext i32 %43 to i64
  %45 = sub i64 0, %44
  %46 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %42, i64 %45
  %47 = bitcast %struct.ref_s* %46 to i8*
  %48 = load i32, i32* %5, align 4
  %49 = sext i32 %48 to i64
  %50 = mul i64 %49, 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %41, i8* align 1 %47, i64 %50, i1 false)
  %51 = load i32, i32* %5, align 4
  %52 = sub nsw i32 %51, 1
  %53 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %54 = sext i32 %52 to i64
  %55 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %53, i64 %54
  store %struct.ref_s* %55, %struct.ref_s** %3, align 8
  store %struct.ref_s* %55, %struct.ref_s** @osp, align 8
  %56 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %57 = icmp ugt %struct.ref_s* %55, %56
  br i1 %57, label %58, label %65

58:                                               ; preds = %39
  %59 = load i32, i32* %5, align 4
  %60 = sub nsw i32 %59, 1
  %61 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %62 = sext i32 %60 to i64
  %63 = sub i64 0, %62
  %64 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %61, i64 %63
  store %struct.ref_s* %64, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %101

65:                                               ; preds = %39
  store i32 0, i32* %2, align 4
  br label %101

66:                                               ; preds = %1, %1, %1
  %67 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %68 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %69 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %68, i64 -1
  %70 = call i32 @copy_interval(%struct.ref_s* %67, i32 0, %struct.ref_s* %69)
  store i32 %70, i32* %4, align 4
  br label %75

71:                                               ; preds = %1
  %72 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %73 = call i32 (%struct.ref_s*, ...) bitcast (i32 (%struct.ref_s*)* @zcopy_dict to i32 (%struct.ref_s*, ...)*)(%struct.ref_s* %72)
  store i32 %73, i32* %2, align 4
  br label %101

74:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %101

75:                                               ; preds = %66
  %76 = load i32, i32* %4, align 4
  %77 = icmp ne i32 %76, 0
  br i1 %77, label %78, label %80

78:                                               ; preds = %75
  %79 = load i32, i32* %4, align 4
  store i32 %79, i32* %2, align 4
  br label %101

80:                                               ; preds = %75
  %81 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %82 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %81, i64 -1
  %83 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %82, i32 0, i32 2
  %84 = load i16, i16* %83, align 2
  %85 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %86 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %85, i32 0, i32 2
  store i16 %84, i16* %86, align 2
  %87 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %88 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %87, i64 -1
  %89 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %90 = bitcast %struct.ref_s* %88 to i8*
  %91 = bitcast %struct.ref_s* %89 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %90, i8* align 8 %91, i64 16, i1 false)
  %92 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %93 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %92, i64 -1
  %94 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %93, i32 0, i32 1
  %95 = load i16, i16* %94, align 8
  %96 = zext i16 %95 to i32
  %97 = or i32 %96, 32768
  %98 = trunc i32 %97 to i16
  store i16 %98, i16* %94, align 8
  %99 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %100 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %99, i64 -1
  store %struct.ref_s* %100, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %101

101:                                              ; preds = %80, %78, %74, %71, %65, %58, %38, %24
  %102 = load i32, i32* %2, align 4
  ret i32 %102
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @copy_interval(%struct.ref_s* %0, i32 %1, %struct.ref_s* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.ref_s*, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %5, align 8
  store i32 %1, i32* %6, align 4
  store %struct.ref_s* %2, %struct.ref_s** %7, align 8
  %8 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 1
  %10 = load i16, i16* %9, align 8
  %11 = zext i16 %10 to i32
  %12 = and i32 %11, 255
  %13 = ashr i32 %12, 2
  %14 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 1
  %16 = load i16, i16* %15, align 8
  %17 = zext i16 %16 to i32
  %18 = and i32 %17, 255
  %19 = ashr i32 %18, 2
  %20 = icmp ne i32 %13, %19
  br i1 %20, label %21, label %22

21:                                               ; preds = %3
  store i32 -20, i32* %4, align 4
  br label %94

22:                                               ; preds = %3
  %23 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %24 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %23, i32 0, i32 1
  %25 = load i16, i16* %24, align 8
  %26 = zext i16 %25 to i32
  %27 = xor i32 %26, -1
  %28 = and i32 %27, 512
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %30, label %31

30:                                               ; preds = %22
  store i32 -7, i32* %4, align 4
  br label %94

31:                                               ; preds = %22
  %32 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %33 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %32, i32 0, i32 1
  %34 = load i16, i16* %33, align 8
  %35 = zext i16 %34 to i32
  %36 = xor i32 %35, -1
  %37 = and i32 %36, 256
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %39, label %40

39:                                               ; preds = %31
  store i32 -7, i32* %4, align 4
  br label %94

40:                                               ; preds = %31
  %41 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %42 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %41, i32 0, i32 2
  %43 = load i16, i16* %42, align 2
  %44 = zext i16 %43 to i32
  %45 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %46 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %45, i32 0, i32 2
  %47 = load i16, i16* %46, align 2
  %48 = zext i16 %47 to i32
  %49 = load i32, i32* %6, align 4
  %50 = sub i32 %48, %49
  %51 = icmp ugt i32 %44, %50
  br i1 %51, label %52, label %53

52:                                               ; preds = %40
  store i32 -15, i32* %4, align 4
  br label %94

53:                                               ; preds = %40
  %54 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %55 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %54, i32 0, i32 1
  %56 = load i16, i16* %55, align 8
  %57 = zext i16 %56 to i32
  %58 = and i32 %57, 255
  %59 = ashr i32 %58, 2
  switch i32 %59, label %93 [
    i32 0, label %60
    i32 10, label %60
    i32 13, label %77
  ]

60:                                               ; preds = %53, %53
  %61 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %62 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %61, i32 0, i32 0
  %63 = bitcast %union.color_sample* %62 to %struct.ref_s**
  %64 = load %struct.ref_s*, %struct.ref_s** %63, align 8
  %65 = load i32, i32* %6, align 4
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %64, i64 %66
  %68 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %69 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %68, i32 0, i32 0
  %70 = bitcast %union.color_sample* %69 to %struct.ref_s**
  %71 = load %struct.ref_s*, %struct.ref_s** %70, align 8
  %72 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %73 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %72, i32 0, i32 2
  %74 = load i16, i16* %73, align 2
  %75 = zext i16 %74 to i32
  %76 = call i32 (%struct.ref_s*, %struct.ref_s*, i32, ...) bitcast (void (%struct.ref_s*, %struct.ref_s*, i32)* @refcpy to i32 (%struct.ref_s*, %struct.ref_s*, i32, ...)*)(%struct.ref_s* %67, %struct.ref_s* %71, i32 %75)
  br label %93

77:                                               ; preds = %53
  %78 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %79 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %78, i32 0, i32 0
  %80 = bitcast %union.color_sample* %79 to i8**
  %81 = load i8*, i8** %80, align 8
  %82 = load i32, i32* %6, align 4
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds i8, i8* %81, i64 %83
  %85 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %86 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %85, i32 0, i32 0
  %87 = bitcast %union.color_sample* %86 to i8**
  %88 = load i8*, i8** %87, align 8
  %89 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %90 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %89, i32 0, i32 2
  %91 = load i16, i16* %90, align 2
  %92 = zext i16 %91 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %84, i8* align 1 %88, i64 %92, i1 false)
  br label %93

93:                                               ; preds = %77, %60, %53
  store i32 0, i32* %4, align 4
  br label %94

94:                                               ; preds = %93, %52, %39, %30, %21
  %95 = load i32, i32* %4, align 4
  ret i32 %95
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zlength(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i32 0, i32 1
  %7 = load i16, i16* %6, align 8
  %8 = zext i16 %7 to i32
  %9 = and i32 %8, 255
  %10 = ashr i32 %9, 2
  switch i32 %10, label %60 [
    i32 0, label %11
    i32 10, label %11
    i32 13, label %11
    i32 2, label %30
    i32 7, label %49
  ]

11:                                               ; preds = %1, %1, %1
  %12 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %13 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %12, i32 0, i32 1
  %14 = load i16, i16* %13, align 8
  %15 = zext i16 %14 to i32
  %16 = xor i32 %15, -1
  %17 = and i32 %16, 512
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %20

19:                                               ; preds = %11
  store i32 -7, i32* %2, align 4
  br label %61

20:                                               ; preds = %11
  %21 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i32 0, i32 2
  %23 = load i16, i16* %22, align 2
  %24 = zext i16 %23 to i64
  %25 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %26 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %25, i32 0, i32 0
  %27 = bitcast %union.color_sample* %26 to i64*
  store i64 %24, i64* %27, align 8
  %28 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i32 0, i32 1
  store i16 20, i16* %29, align 8
  store i32 0, i32* %2, align 4
  br label %61

30:                                               ; preds = %1
  %31 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %32 = call %struct.ref_s* @dict_access_ref(%struct.ref_s* %31)
  %33 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %32, i32 0, i32 1
  %34 = load i16, i16* %33, align 8
  %35 = zext i16 %34 to i32
  %36 = xor i32 %35, -1
  %37 = and i32 %36, 512
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %39, label %40

39:                                               ; preds = %30
  store i32 -7, i32* %2, align 4
  br label %61

40:                                               ; preds = %30
  %41 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %42 = call i32 @dict_length(%struct.ref_s* %41)
  %43 = zext i32 %42 to i64
  %44 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %45 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %44, i32 0, i32 0
  %46 = bitcast %union.color_sample* %45 to i64*
  store i64 %43, i64* %46, align 8
  %47 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %48 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %47, i32 0, i32 1
  store i16 20, i16* %48, align 8
  store i32 0, i32* %2, align 4
  br label %61

49:                                               ; preds = %1
  %50 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %51 = call i32 (%struct.ref_s*, %struct.ref_s*, ...) bitcast (void (%struct.ref_s*, %struct.ref_s*)* @name_string_ref to i32 (%struct.ref_s*, %struct.ref_s*, ...)*)(%struct.ref_s* %50, %struct.ref_s* %4)
  %52 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i32 0, i32 2
  %53 = load i16, i16* %52, align 2
  %54 = zext i16 %53 to i64
  %55 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %56 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %55, i32 0, i32 0
  %57 = bitcast %union.color_sample* %56 to i64*
  store i64 %54, i64* %57, align 8
  %58 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %59 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %58, i32 0, i32 1
  store i16 20, i16* %59, align 8
  store i32 0, i32* %2, align 4
  br label %61

60:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %61

61:                                               ; preds = %60, %49, %40, %39, %20, %19
  %62 = load i32, i32* %2, align 4
  ret i32 %62
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zget(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca %struct.ref_s*, align 8
  %6 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i64 -1
  store %struct.ref_s* %8, %struct.ref_s** %4, align 8
  %9 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i32 0, i32 1
  %11 = load i16, i16* %10, align 8
  %12 = zext i16 %11 to i32
  %13 = and i32 %12, 255
  %14 = ashr i32 %13, 2
  switch i32 %14, label %124 [
    i32 2, label %15
    i32 0, label %33
    i32 10, label %33
    i32 13, label %73
  ]

15:                                               ; preds = %1
  %16 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %17 = call %struct.ref_s* @dict_access_ref(%struct.ref_s* %16)
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i32 0, i32 1
  %19 = load i16, i16* %18, align 8
  %20 = zext i16 %19 to i32
  %21 = xor i32 %20, -1
  %22 = and i32 %21, 512
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %15
  store i32 -7, i32* %2, align 4
  br label %133

25:                                               ; preds = %15
  %26 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %27 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %28 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %29 = call i32 @dict_lookup(%struct.ref_s* %26, %struct.ref_s* %27, %struct.ref_s* %28, %struct.ref_s** %5)
  %30 = icmp sle i32 %29, 0
  br i1 %30, label %31, label %32

31:                                               ; preds = %25
  store i32 -21, i32* %2, align 4
  br label %133

32:                                               ; preds = %25
  br label %125

33:                                               ; preds = %1, %1
  %34 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %35 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %34, i32 0, i32 1
  %36 = load i16, i16* %35, align 8
  %37 = zext i16 %36 to i32
  %38 = and i32 %37, 252
  %39 = icmp eq i32 %38, 20
  br i1 %39, label %41, label %40

40:                                               ; preds = %33
  store i32 -20, i32* %2, align 4
  br label %133

41:                                               ; preds = %33
  %42 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %43 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %42, i32 0, i32 1
  %44 = load i16, i16* %43, align 8
  %45 = zext i16 %44 to i32
  %46 = xor i32 %45, -1
  %47 = and i32 %46, 512
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %49, label %50

49:                                               ; preds = %41
  store i32 -7, i32* %2, align 4
  br label %133

50:                                               ; preds = %41
  %51 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %52 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %51, i32 0, i32 0
  %53 = bitcast %union.color_sample* %52 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %56 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %55, i32 0, i32 2
  %57 = load i16, i16* %56, align 2
  %58 = zext i16 %57 to i64
  %59 = icmp uge i64 %54, %58
  br i1 %59, label %60, label %61

60:                                               ; preds = %50
  store i32 -15, i32* %2, align 4
  br label %133

61:                                               ; preds = %50
  %62 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %63 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %62, i32 0, i32 0
  %64 = bitcast %union.color_sample* %63 to %struct.ref_s**
  %65 = load %struct.ref_s*, %struct.ref_s** %64, align 8
  %66 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %67 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %66, i32 0, i32 0
  %68 = bitcast %union.color_sample* %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = trunc i64 %69 to i32
  %71 = zext i32 %70 to i64
  %72 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %65, i64 %71
  store %struct.ref_s* %72, %struct.ref_s** %5, align 8
  br label %125

73:                                               ; preds = %1
  %74 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %75 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %74, i32 0, i32 1
  %76 = load i16, i16* %75, align 8
  %77 = zext i16 %76 to i32
  %78 = and i32 %77, 252
  %79 = icmp eq i32 %78, 20
  br i1 %79, label %81, label %80

80:                                               ; preds = %73
  store i32 -20, i32* %2, align 4
  br label %133

81:                                               ; preds = %73
  %82 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %83 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %82, i32 0, i32 1
  %84 = load i16, i16* %83, align 8
  %85 = zext i16 %84 to i32
  %86 = xor i32 %85, -1
  %87 = and i32 %86, 512
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %89, label %90

89:                                               ; preds = %81
  store i32 -7, i32* %2, align 4
  br label %133

90:                                               ; preds = %81
  %91 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %92 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %91, i32 0, i32 0
  %93 = bitcast %union.color_sample* %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %96 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %95, i32 0, i32 2
  %97 = load i16, i16* %96, align 2
  %98 = zext i16 %97 to i64
  %99 = icmp uge i64 %94, %98
  br i1 %99, label %100, label %101

100:                                              ; preds = %90
  store i32 -15, i32* %2, align 4
  br label %133

101:                                              ; preds = %90
  %102 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %103 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %102, i32 0, i32 0
  %104 = bitcast %union.color_sample* %103 to i8**
  %105 = load i8*, i8** %104, align 8
  %106 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %107 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %106, i32 0, i32 0
  %108 = bitcast %union.color_sample* %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = trunc i64 %109 to i32
  %111 = zext i32 %110 to i64
  %112 = getelementptr inbounds i8, i8* %105, i64 %111
  %113 = load i8, i8* %112, align 1
  %114 = zext i8 %113 to i32
  store i32 %114, i32* %6, align 4
  %115 = load i32, i32* %6, align 4
  %116 = sext i32 %115 to i64
  %117 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %118 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %117, i32 0, i32 0
  %119 = bitcast %union.color_sample* %118 to i64*
  store i64 %116, i64* %119, align 8
  %120 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %121 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %120, i32 0, i32 1
  store i16 20, i16* %121, align 8
  %122 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %123 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %122, i64 -1
  store %struct.ref_s* %123, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %133

124:                                              ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %133

125:                                              ; preds = %61, %32
  %126 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %127 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %126, i64 -1
  %128 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %129 = bitcast %struct.ref_s* %127 to i8*
  %130 = bitcast %struct.ref_s* %128 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %129, i8* align 8 %130, i64 16, i1 false)
  %131 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %132 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %131, i64 -1
  store %struct.ref_s* %132, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %133

133:                                              ; preds = %125, %124, %101, %100, %89, %80, %60, %49, %40, %31, %24
  %134 = load i32, i32* %2, align 4
  ret i32 %134
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zput(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca %struct.ref_s*, align 8
  %6 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i64 -1
  store %struct.ref_s* %8, %struct.ref_s** %4, align 8
  %9 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i64 -1
  store %struct.ref_s* %10, %struct.ref_s** %5, align 8
  %11 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %12 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %11, i32 0, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = zext i16 %13 to i32
  %15 = and i32 %14, 255
  %16 = ashr i32 %15, 2
  switch i32 %16, label %153 [
    i32 2, label %17
    i32 0, label %37
    i32 10, label %86
    i32 13, label %87
  ]

17:                                               ; preds = %1
  %18 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %19 = call %struct.ref_s* @dict_access_ref(%struct.ref_s* %18)
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i32 0, i32 1
  %21 = load i16, i16* %20, align 8
  %22 = zext i16 %21 to i32
  %23 = xor i32 %22, -1
  %24 = and i32 %23, 256
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %27

26:                                               ; preds = %17
  store i32 -7, i32* %2, align 4
  br label %157

27:                                               ; preds = %17
  %28 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %29 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %30 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %31 = call i32 @dict_put(%struct.ref_s* %28, %struct.ref_s* %29, %struct.ref_s* %30)
  store i32 %31, i32* %6, align 4
  %32 = load i32, i32* %6, align 4
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %34, label %36

34:                                               ; preds = %27
  %35 = load i32, i32* %6, align 4
  store i32 %35, i32* %2, align 4
  br label %157

36:                                               ; preds = %27
  br label %154

37:                                               ; preds = %1
  %38 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %39 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %38, i32 0, i32 1
  %40 = load i16, i16* %39, align 8
  %41 = zext i16 %40 to i32
  %42 = and i32 %41, 252
  %43 = icmp eq i32 %42, 20
  br i1 %43, label %45, label %44

44:                                               ; preds = %37
  store i32 -20, i32* %2, align 4
  br label %157

45:                                               ; preds = %37
  %46 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %47 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %46, i32 0, i32 1
  %48 = load i16, i16* %47, align 8
  %49 = zext i16 %48 to i32
  %50 = xor i32 %49, -1
  %51 = and i32 %50, 256
  %52 = icmp ne i32 %51, 0
  br i1 %52, label %53, label %54

53:                                               ; preds = %45
  store i32 -7, i32* %2, align 4
  br label %157

54:                                               ; preds = %45
  %55 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %56 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %55, i32 0, i32 0
  %57 = bitcast %union.color_sample* %56 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = icmp slt i64 %58, 0
  br i1 %59, label %70, label %60

60:                                               ; preds = %54
  %61 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %62 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %61, i32 0, i32 0
  %63 = bitcast %union.color_sample* %62 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %66 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %65, i32 0, i32 2
  %67 = load i16, i16* %66, align 2
  %68 = zext i16 %67 to i64
  %69 = icmp sge i64 %64, %68
  br i1 %69, label %70, label %71

70:                                               ; preds = %60, %54
  store i32 -15, i32* %2, align 4
  br label %157

71:                                               ; preds = %60
  %72 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %73 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %72, i32 0, i32 0
  %74 = bitcast %union.color_sample* %73 to %struct.ref_s**
  %75 = load %struct.ref_s*, %struct.ref_s** %74, align 8
  %76 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %77 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %76, i32 0, i32 0
  %78 = bitcast %union.color_sample* %77 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = trunc i64 %79 to i32
  %81 = zext i32 %80 to i64
  %82 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %75, i64 %81
  %83 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %84 = bitcast %struct.ref_s* %82 to i8*
  %85 = bitcast %struct.ref_s* %83 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %84, i8* align 8 %85, i64 16, i1 false)
  br label %154

86:                                               ; preds = %1
  store i32 -7, i32* %2, align 4
  br label %157

87:                                               ; preds = %1
  %88 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %89 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %88, i32 0, i32 1
  %90 = load i16, i16* %89, align 8
  %91 = zext i16 %90 to i32
  %92 = and i32 %91, 252
  %93 = icmp eq i32 %92, 20
  br i1 %93, label %95, label %94

94:                                               ; preds = %87
  store i32 -20, i32* %2, align 4
  br label %157

95:                                               ; preds = %87
  %96 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %97 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %96, i32 0, i32 1
  %98 = load i16, i16* %97, align 8
  %99 = zext i16 %98 to i32
  %100 = xor i32 %99, -1
  %101 = and i32 %100, 256
  %102 = icmp ne i32 %101, 0
  br i1 %102, label %103, label %104

103:                                              ; preds = %95
  store i32 -7, i32* %2, align 4
  br label %157

104:                                              ; preds = %95
  %105 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %106 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %105, i32 0, i32 0
  %107 = bitcast %union.color_sample* %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = icmp slt i64 %108, 0
  br i1 %109, label %120, label %110

110:                                              ; preds = %104
  %111 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %112 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %111, i32 0, i32 0
  %113 = bitcast %union.color_sample* %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %116 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %115, i32 0, i32 2
  %117 = load i16, i16* %116, align 2
  %118 = zext i16 %117 to i64
  %119 = icmp sge i64 %114, %118
  br i1 %119, label %120, label %121

120:                                              ; preds = %110, %104
  store i32 -15, i32* %2, align 4
  br label %157

121:                                              ; preds = %110
  %122 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %123 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %122, i32 0, i32 1
  %124 = load i16, i16* %123, align 8
  %125 = zext i16 %124 to i32
  %126 = and i32 %125, 252
  %127 = icmp eq i32 %126, 20
  br i1 %127, label %129, label %128

128:                                              ; preds = %121
  store i32 -20, i32* %2, align 4
  br label %157

129:                                              ; preds = %121
  %130 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %131 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %130, i32 0, i32 0
  %132 = bitcast %union.color_sample* %131 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = icmp ugt i64 %133, 255
  br i1 %134, label %135, label %136

135:                                              ; preds = %129
  store i32 -15, i32* %2, align 4
  br label %157

136:                                              ; preds = %129
  %137 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %138 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %137, i32 0, i32 0
  %139 = bitcast %union.color_sample* %138 to i64*
  %140 = load i64, i64* %139, align 8
  %141 = trunc i64 %140 to i8
  %142 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %143 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %142, i32 0, i32 0
  %144 = bitcast %union.color_sample* %143 to i8**
  %145 = load i8*, i8** %144, align 8
  %146 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %147 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %146, i32 0, i32 0
  %148 = bitcast %union.color_sample* %147 to i64*
  %149 = load i64, i64* %148, align 8
  %150 = trunc i64 %149 to i32
  %151 = zext i32 %150 to i64
  %152 = getelementptr inbounds i8, i8* %145, i64 %151
  store i8 %141, i8* %152, align 1
  br label %154

153:                                              ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %157

154:                                              ; preds = %136, %71, %36
  %155 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %156 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %155, i64 -3
  store %struct.ref_s* %156, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %157

157:                                              ; preds = %154, %153, %135, %128, %120, %103, %94, %86, %70, %53, %44, %34, %26
  %158 = load i32, i32* %2, align 4
  ret i32 %158
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zgetinterval(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca %struct.ref_s*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %8 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i64 -1
  store %struct.ref_s* %9, %struct.ref_s** %4, align 8
  %10 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %11 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %10, i64 -1
  store %struct.ref_s* %11, %struct.ref_s** %5, align 8
  %12 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %13 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %12, i32 0, i32 1
  %14 = load i16, i16* %13, align 8
  %15 = zext i16 %14 to i32
  %16 = and i32 %15, 252
  %17 = icmp eq i32 %16, 20
  br i1 %17, label %19, label %18

18:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %116

19:                                               ; preds = %1
  %20 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %21 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %20, i32 0, i32 1
  %22 = load i16, i16* %21, align 8
  %23 = zext i16 %22 to i32
  %24 = and i32 %23, 252
  %25 = icmp eq i32 %24, 20
  br i1 %25, label %27, label %26

26:                                               ; preds = %19
  store i32 -20, i32* %2, align 4
  br label %116

27:                                               ; preds = %19
  %28 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i32 0, i32 1
  %30 = load i16, i16* %29, align 8
  %31 = zext i16 %30 to i32
  %32 = and i32 %31, 255
  %33 = ashr i32 %32, 2
  switch i32 %33, label %34 [
    i32 0, label %35
    i32 10, label %35
    i32 13, label %35
  ]

34:                                               ; preds = %27
  store i32 -20, i32* %2, align 4
  br label %116

35:                                               ; preds = %27, %27, %27
  br label %36

36:                                               ; preds = %35
  %37 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %38 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %37, i32 0, i32 1
  %39 = load i16, i16* %38, align 8
  %40 = zext i16 %39 to i32
  %41 = xor i32 %40, -1
  %42 = and i32 %41, 512
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %44, label %45

44:                                               ; preds = %36
  store i32 -7, i32* %2, align 4
  br label %116

45:                                               ; preds = %36
  %46 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %47 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %46, i32 0, i32 0
  %48 = bitcast %union.color_sample* %47 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %51 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %50, i32 0, i32 2
  %52 = load i16, i16* %51, align 2
  %53 = zext i16 %52 to i64
  %54 = icmp ugt i64 %49, %53
  br i1 %54, label %55, label %56

55:                                               ; preds = %45
  store i32 -15, i32* %2, align 4
  br label %116

56:                                               ; preds = %45
  %57 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %58 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %57, i32 0, i32 0
  %59 = bitcast %union.color_sample* %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = trunc i64 %60 to i32
  store i32 %61, i32* %6, align 4
  %62 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %63 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %62, i32 0, i32 0
  %64 = bitcast %union.color_sample* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %67 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %66, i32 0, i32 2
  %68 = load i16, i16* %67, align 2
  %69 = zext i16 %68 to i32
  %70 = load i32, i32* %6, align 4
  %71 = sub i32 %69, %70
  %72 = zext i32 %71 to i64
  %73 = icmp ugt i64 %65, %72
  br i1 %73, label %74, label %75

74:                                               ; preds = %56
  store i32 -15, i32* %2, align 4
  br label %116

75:                                               ; preds = %56
  %76 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %77 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %76, i32 0, i32 0
  %78 = bitcast %union.color_sample* %77 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = trunc i64 %79 to i32
  store i32 %80, i32* %7, align 4
  %81 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %82 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %81, i32 0, i32 1
  %83 = load i16, i16* %82, align 8
  %84 = zext i16 %83 to i32
  %85 = and i32 %84, 255
  %86 = ashr i32 %85, 2
  switch i32 %86, label %103 [
    i32 0, label %87
    i32 10, label %87
    i32 13, label %95
  ]

87:                                               ; preds = %75, %75
  %88 = load i32, i32* %6, align 4
  %89 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %90 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %89, i32 0, i32 0
  %91 = bitcast %union.color_sample* %90 to %struct.ref_s**
  %92 = load %struct.ref_s*, %struct.ref_s** %91, align 8
  %93 = zext i32 %88 to i64
  %94 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %92, i64 %93
  store %struct.ref_s* %94, %struct.ref_s** %91, align 8
  br label %103

95:                                               ; preds = %75
  %96 = load i32, i32* %6, align 4
  %97 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %98 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %97, i32 0, i32 0
  %99 = bitcast %union.color_sample* %98 to i8**
  %100 = load i8*, i8** %99, align 8
  %101 = zext i32 %96 to i64
  %102 = getelementptr inbounds i8, i8* %100, i64 %101
  store i8* %102, i8** %99, align 8
  br label %103

103:                                              ; preds = %95, %87, %75
  %104 = load i32, i32* %7, align 4
  %105 = trunc i32 %104 to i16
  %106 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %107 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %106, i32 0, i32 2
  store i16 %105, i16* %107, align 2
  %108 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %109 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %108, i32 0, i32 1
  %110 = load i16, i16* %109, align 8
  %111 = zext i16 %110 to i32
  %112 = or i32 %111, 32768
  %113 = trunc i32 %112 to i16
  store i16 %113, i16* %109, align 8
  %114 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %115 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %114, i64 -2
  store %struct.ref_s* %115, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %116

116:                                              ; preds = %103, %74, %55, %44, %34, %26, %18
  %117 = load i32, i32* %2, align 4
  ret i32 %117
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zputinterval(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca %struct.ref_s*, align 8
  %6 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i64 -1
  store %struct.ref_s* %8, %struct.ref_s** %4, align 8
  %9 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i64 -1
  store %struct.ref_s* %10, %struct.ref_s** %5, align 8
  %11 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %12 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %11, i32 0, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = zext i16 %13 to i32
  %15 = and i32 %14, 252
  %16 = icmp eq i32 %15, 20
  br i1 %16, label %18, label %17

17:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %63

18:                                               ; preds = %1
  %19 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i32 0, i32 1
  %21 = load i16, i16* %20, align 8
  %22 = zext i16 %21 to i32
  %23 = and i32 %22, 255
  %24 = ashr i32 %23, 2
  switch i32 %24, label %25 [
    i32 10, label %26
    i32 0, label %27
    i32 13, label %27
  ]

25:                                               ; preds = %18
  store i32 -20, i32* %2, align 4
  br label %63

26:                                               ; preds = %18
  store i32 -7, i32* %2, align 4
  br label %63

27:                                               ; preds = %18, %18
  br label %28

28:                                               ; preds = %27
  %29 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %30 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %29, i32 0, i32 1
  %31 = load i16, i16* %30, align 8
  %32 = zext i16 %31 to i32
  %33 = xor i32 %32, -1
  %34 = and i32 %33, 256
  %35 = icmp ne i32 %34, 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %28
  store i32 -7, i32* %2, align 4
  br label %63

37:                                               ; preds = %28
  %38 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %39 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %38, i32 0, i32 0
  %40 = bitcast %union.color_sample* %39 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %43 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %42, i32 0, i32 2
  %44 = load i16, i16* %43, align 2
  %45 = zext i16 %44 to i64
  %46 = icmp ugt i64 %41, %45
  br i1 %46, label %47, label %48

47:                                               ; preds = %37
  store i32 -15, i32* %2, align 4
  br label %63

48:                                               ; preds = %37
  %49 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %50 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %51 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %50, i32 0, i32 0
  %52 = bitcast %union.color_sample* %51 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = trunc i64 %53 to i32
  %55 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %56 = call i32 @copy_interval(%struct.ref_s* %49, i32 %54, %struct.ref_s* %55)
  store i32 %56, i32* %6, align 4
  %57 = load i32, i32* %6, align 4
  %58 = icmp sge i32 %57, 0
  br i1 %58, label %59, label %62

59:                                               ; preds = %48
  %60 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %61 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %60, i64 -3
  store %struct.ref_s* %61, %struct.ref_s** @osp, align 8
  br label %62

62:                                               ; preds = %59, %48
  store i32 0, i32* %2, align 4
  br label %63

63:                                               ; preds = %62, %47, %36, %26, %25, %17
  %64 = load i32, i32* %2, align 4
  ret i32 %64
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zforall(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32 (%struct.ref_s*)*, align 8
  %5 = alloca %struct.ref_s*, align 8
  %6 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i64 -1
  store %struct.ref_s* %8, %struct.ref_s** %5, align 8
  %9 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i32 0, i32 1
  %11 = load i16, i16* %10, align 8
  %12 = zext i16 %11 to i32
  %13 = and i32 %12, 255
  %14 = ashr i32 %13, 2
  switch i32 %14, label %15 [
    i32 0, label %16
    i32 10, label %16
    i32 13, label %26
    i32 2, label %36
  ]

15:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %89

16:                                               ; preds = %1, %1
  %17 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i32 0, i32 1
  %19 = load i16, i16* %18, align 8
  %20 = zext i16 %19 to i32
  %21 = xor i32 %20, -1
  %22 = and i32 %21, 512
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %16
  store i32 -7, i32* %2, align 4
  br label %89

25:                                               ; preds = %16
  store i32 (%struct.ref_s*)* @array_continue, i32 (%struct.ref_s*)** %4, align 8
  store i32 0, i32* %6, align 4
  br label %49

26:                                               ; preds = %1
  %27 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %28 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %27, i32 0, i32 1
  %29 = load i16, i16* %28, align 8
  %30 = zext i16 %29 to i32
  %31 = xor i32 %30, -1
  %32 = and i32 %31, 512
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %26
  store i32 -7, i32* %2, align 4
  br label %89

35:                                               ; preds = %26
  store i32 (%struct.ref_s*)* @string_continue, i32 (%struct.ref_s*)** %4, align 8
  store i32 0, i32* %6, align 4
  br label %49

36:                                               ; preds = %1
  %37 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %38 = call %struct.ref_s* @dict_access_ref(%struct.ref_s* %37)
  %39 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %38, i32 0, i32 1
  %40 = load i16, i16* %39, align 8
  %41 = zext i16 %40 to i32
  %42 = xor i32 %41, -1
  %43 = and i32 %42, 512
  %44 = icmp ne i32 %43, 0
  br i1 %44, label %45, label %46

45:                                               ; preds = %36
  store i32 -7, i32* %2, align 4
  br label %89

46:                                               ; preds = %36
  store i32 (%struct.ref_s*)* @dict_continue, i32 (%struct.ref_s*)** %4, align 8
  %47 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %48 = call i32 @dict_first(%struct.ref_s* %47)
  store i32 %48, i32* %6, align 4
  br label %49

49:                                               ; preds = %46, %35, %25
  %50 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %51 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %50, i64 6
  %52 = load %struct.ref_s*, %struct.ref_s** @estop, align 8
  %53 = icmp ugt %struct.ref_s* %51, %52
  br i1 %53, label %54, label %55

54:                                               ; preds = %49
  store i32 -5, i32* %2, align 4
  br label %89

55:                                               ; preds = %49
  %56 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %57 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %56, i32 1
  store %struct.ref_s* %57, %struct.ref_s** @esp, align 8
  %58 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %59 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %58, i32 0, i32 0
  %60 = bitcast %union.color_sample* %59 to i16*
  store i16 2, i16* %60, align 8
  %61 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %62 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %61, i32 0, i32 1
  store i16 33, i16* %62, align 8
  %63 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %64 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %63, i32 1
  store %struct.ref_s* %64, %struct.ref_s** @esp, align 8
  %65 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %66 = bitcast %struct.ref_s* %64 to i8*
  %67 = bitcast %struct.ref_s* %65 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %66, i8* align 8 %67, i64 16, i1 false)
  %68 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %69 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %68, i32 1
  store %struct.ref_s* %69, %struct.ref_s** @esp, align 8
  %70 = load i32, i32* %6, align 4
  %71 = zext i32 %70 to i64
  %72 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %73 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %72, i32 0, i32 0
  %74 = bitcast %union.color_sample* %73 to i64*
  store i64 %71, i64* %74, align 8
  %75 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %76 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %75, i32 0, i32 1
  store i16 20, i16* %76, align 8
  %77 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %78 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %77, i32 1
  store %struct.ref_s* %78, %struct.ref_s** @esp, align 8
  %79 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %80 = bitcast %struct.ref_s* %78 to i8*
  %81 = bitcast %struct.ref_s* %79 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %80, i8* align 8 %81, i64 16, i1 false)
  %82 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %83 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %82, i64 -2
  store %struct.ref_s* %83, %struct.ref_s** @osp, align 8
  %84 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %85 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %84, i64 -2
  store %struct.ref_s* %85, %struct.ref_s** %3, align 8
  %86 = load i32 (%struct.ref_s*)*, i32 (%struct.ref_s*)** %4, align 8
  %87 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %88 = call i32 %86(%struct.ref_s* %87)
  store i32 %88, i32* %2, align 4
  br label %89

89:                                               ; preds = %55, %54, %45, %34, %24, %15
  %90 = load i32, i32* %2, align 4
  ret i32 %90
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @array_continue(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i64 -2
  store %struct.ref_s* %6, %struct.ref_s** %4, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i32 0, i32 2
  %9 = load i16, i16* %8, align 2
  %10 = add i16 %9, -1
  store i16 %10, i16* %8, align 2
  %11 = icmp ne i16 %9, 0
  br i1 %11, label %12, label %48

12:                                               ; preds = %1
  %13 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i64 1
  store %struct.ref_s* %14, %struct.ref_s** %3, align 8
  store %struct.ref_s* %14, %struct.ref_s** @osp, align 8
  %15 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %16 = icmp ugt %struct.ref_s* %14, %15
  br i1 %16, label %17, label %20

17:                                               ; preds = %12
  %18 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i64 -1
  store %struct.ref_s* %19, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %52

20:                                               ; preds = %12
  %21 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %22 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i32 0, i32 0
  %24 = bitcast %union.color_sample* %23 to %struct.ref_s**
  %25 = load %struct.ref_s*, %struct.ref_s** %24, align 8
  %26 = bitcast %struct.ref_s* %21 to i8*
  %27 = bitcast %struct.ref_s* %25 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 16, i1 false)
  %28 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i32 0, i32 0
  %30 = bitcast %union.color_sample* %29 to %struct.ref_s**
  %31 = load %struct.ref_s*, %struct.ref_s** %30, align 8
  %32 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %31, i32 1
  store %struct.ref_s* %32, %struct.ref_s** %30, align 8
  %33 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %34 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %33, i32 1
  store %struct.ref_s* %34, %struct.ref_s** @esp, align 8
  %35 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %36 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %35, i32 0, i32 0
  %37 = bitcast %union.color_sample* %36 to i32 (%struct.ref_s*)**
  store i32 (%struct.ref_s*)* @array_continue, i32 (%struct.ref_s*)** %37, align 8
  %38 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %39 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %38, i32 0, i32 1
  store i16 37, i16* %39, align 8
  %40 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %41 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %40, i32 0, i32 2
  store i16 0, i16* %41, align 2
  %42 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %43 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %42, i32 1
  store %struct.ref_s* %43, %struct.ref_s** @esp, align 8
  %44 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %45 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %44, i64 2
  %46 = bitcast %struct.ref_s* %43 to i8*
  %47 = bitcast %struct.ref_s* %45 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %46, i8* align 8 %47, i64 16, i1 false)
  br label %51

48:                                               ; preds = %1
  %49 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %50 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %49, i64 -4
  store %struct.ref_s* %50, %struct.ref_s** @esp, align 8
  br label %51

51:                                               ; preds = %48, %20
  store i32 1, i32* %2, align 4
  br label %52

52:                                               ; preds = %51, %17
  %53 = load i32, i32* %2, align 4
  ret i32 %53
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @string_continue(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i64 -2
  store %struct.ref_s* %6, %struct.ref_s** %4, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i32 0, i32 2
  %9 = load i16, i16* %8, align 2
  %10 = add i16 %9, -1
  store i16 %10, i16* %8, align 2
  %11 = icmp ne i16 %9, 0
  br i1 %11, label %12, label %52

12:                                               ; preds = %1
  %13 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i64 1
  store %struct.ref_s* %14, %struct.ref_s** %3, align 8
  store %struct.ref_s* %14, %struct.ref_s** @osp, align 8
  %15 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %16 = icmp ugt %struct.ref_s* %14, %15
  br i1 %16, label %17, label %20

17:                                               ; preds = %12
  %18 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i64 -1
  store %struct.ref_s* %19, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %56

20:                                               ; preds = %12
  %21 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i32 0, i32 0
  %23 = bitcast %union.color_sample* %22 to i8**
  %24 = load i8*, i8** %23, align 8
  %25 = load i8, i8* %24, align 1
  %26 = zext i8 %25 to i64
  %27 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %28 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %27, i32 0, i32 0
  %29 = bitcast %union.color_sample* %28 to i64*
  store i64 %26, i64* %29, align 8
  %30 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %31 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %30, i32 0, i32 1
  store i16 20, i16* %31, align 8
  %32 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %33 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %32, i32 0, i32 0
  %34 = bitcast %union.color_sample* %33 to i8**
  %35 = load i8*, i8** %34, align 8
  %36 = getelementptr inbounds i8, i8* %35, i32 1
  store i8* %36, i8** %34, align 8
  %37 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %38 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %37, i32 1
  store %struct.ref_s* %38, %struct.ref_s** @esp, align 8
  %39 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %40 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %39, i32 0, i32 0
  %41 = bitcast %union.color_sample* %40 to i32 (%struct.ref_s*)**
  store i32 (%struct.ref_s*)* @string_continue, i32 (%struct.ref_s*)** %41, align 8
  %42 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %43 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %42, i32 0, i32 1
  store i16 37, i16* %43, align 8
  %44 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %45 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %44, i32 0, i32 2
  store i16 0, i16* %45, align 2
  %46 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %47 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %46, i32 1
  store %struct.ref_s* %47, %struct.ref_s** @esp, align 8
  %48 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %49 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %48, i64 2
  %50 = bitcast %struct.ref_s* %47 to i8*
  %51 = bitcast %struct.ref_s* %49 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %50, i8* align 8 %51, i64 16, i1 false)
  br label %55

52:                                               ; preds = %1
  %53 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %54 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %53, i64 -4
  store %struct.ref_s* %54, %struct.ref_s** @esp, align 8
  br label %55

55:                                               ; preds = %52, %20
  store i32 1, i32* %2, align 4
  br label %56

56:                                               ; preds = %55, %17
  %57 = load i32, i32* %2, align 4
  ret i32 %57
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @dict_continue(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %7 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i64 -2
  store %struct.ref_s* %7, %struct.ref_s** %4, align 8
  %8 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i64 -1
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i32 0, i32 0
  %11 = bitcast %union.color_sample* %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = trunc i64 %12 to i32
  store i32 %13, i32* %5, align 4
  %14 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i64 2
  store %struct.ref_s* %15, %struct.ref_s** %3, align 8
  store %struct.ref_s* %15, %struct.ref_s** @osp, align 8
  %16 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %17 = icmp ugt %struct.ref_s* %15, %16
  br i1 %17, label %18, label %21

18:                                               ; preds = %1
  %19 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i64 -2
  store %struct.ref_s* %20, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %56

21:                                               ; preds = %1
  %22 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %23 = load i32, i32* %5, align 4
  %24 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %25 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %24, i64 -1
  %26 = call i32 @dict_next(%struct.ref_s* %22, i32 %23, %struct.ref_s* %25)
  store i32 %26, i32* %5, align 4
  %27 = icmp sge i32 %26, 0
  br i1 %27, label %28, label %50

28:                                               ; preds = %21
  %29 = load i32, i32* %5, align 4
  %30 = sext i32 %29 to i64
  %31 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %32 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %31, i64 -1
  %33 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %32, i32 0, i32 0
  %34 = bitcast %union.color_sample* %33 to i64*
  store i64 %30, i64* %34, align 8
  %35 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %36 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %35, i32 1
  store %struct.ref_s* %36, %struct.ref_s** @esp, align 8
  %37 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %38 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %37, i32 0, i32 0
  %39 = bitcast %union.color_sample* %38 to i32 (%struct.ref_s*)**
  store i32 (%struct.ref_s*)* @dict_continue, i32 (%struct.ref_s*)** %39, align 8
  %40 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %41 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %40, i32 0, i32 1
  store i16 37, i16* %41, align 8
  %42 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %43 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %42, i32 0, i32 2
  store i16 0, i16* %43, align 2
  %44 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %45 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %44, i32 1
  store %struct.ref_s* %45, %struct.ref_s** @esp, align 8
  %46 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %47 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %46, i64 2
  %48 = bitcast %struct.ref_s* %45 to i8*
  %49 = bitcast %struct.ref_s* %47 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* align 8 %49, i64 16, i1 false)
  br label %55

50:                                               ; preds = %21
  %51 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %52 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %51, i64 -2
  store %struct.ref_s* %52, %struct.ref_s** @osp, align 8
  %53 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %54 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %53, i64 -4
  store %struct.ref_s* %54, %struct.ref_s** @esp, align 8
  br label %55

55:                                               ; preds = %50, %28
  store i32 1, i32* %2, align 4
  br label %56

56:                                               ; preds = %55, %18
  %57 = load i32, i32* %2, align 4
  ret i32 %57
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @zgeneric_op_init() #0 {
  %1 = call i32 (%struct.op_def*, ...) bitcast (void (%struct.op_def*)* @z_op_init to i32 (%struct.op_def*, ...)*)(%struct.op_def* getelementptr inbounds ([8 x %struct.op_def], [8 x %struct.op_def]* @zgeneric_op_init.my_defs, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gs_init() #0 {
  %1 = call %struct.gs_state_s* @gs_state_alloc(i8* (i32, i32, i8*)* @alloc, void (i8*, i32, i32, i8*)* @alloc_free)
  store %struct.gs_state_s* %1, %struct.gs_state_s** @igs, align 8
  store %struct.int_state_s* null, %struct.int_state_s** getelementptr inbounds (%struct.int_state_s, %struct.int_state_s* @istate, i32 0, i32 0), align 8
  store i64 0, i64* getelementptr inbounds (%struct.int_state_s, %struct.int_state_s* @istate, i32 0, i32 1, i32 0, i32 0), align 8
  store i16 32, i16* getelementptr inbounds (%struct.int_state_s, %struct.int_state_s* @istate, i32 0, i32 1, i32 1), align 8
  store i64 0, i64* getelementptr inbounds (%struct.int_state_s, %struct.int_state_s* @istate, i32 0, i32 2, i32 0, i32 0), align 8
  store i16 32, i16* getelementptr inbounds (%struct.int_state_s, %struct.int_state_s* @istate, i32 0, i32 2, i32 1), align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zgsave(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.int_state_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = call i8* @alloc(i32 1, i32 72, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.521, i64 0, i64 0))
  %6 = bitcast i8* %5 to %struct.int_state_s*
  store %struct.int_state_s* %6, %struct.int_state_s** %4, align 8
  %7 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %8 = call i32 @gs_gsave(%struct.gs_state_s* %7)
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %1
  %11 = load %struct.int_state_s*, %struct.int_state_s** %4, align 8
  %12 = icmp eq %struct.int_state_s* %11, null
  br i1 %12, label %13, label %14

13:                                               ; preds = %10, %1
  store i32 -13, i32* %2, align 4
  br label %18

14:                                               ; preds = %10
  %15 = load %struct.int_state_s*, %struct.int_state_s** %4, align 8
  %16 = bitcast %struct.int_state_s* %15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 bitcast (%struct.int_state_s* @istate to i8*), i64 72, i1 false)
  %17 = load %struct.int_state_s*, %struct.int_state_s** %4, align 8
  store %struct.int_state_s* %17, %struct.int_state_s** getelementptr inbounds (%struct.int_state_s, %struct.int_state_s* @istate, i32 0, i32 0), align 8
  store i32 0, i32* %2, align 4
  br label %18

18:                                               ; preds = %14, %13
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zgrestore(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  %3 = alloca %struct.int_state_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %4 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %5 = call i32 @gs_grestore(%struct.gs_state_s* %4)
  %6 = icmp sge i32 %5, 0
  br i1 %6, label %7, label %13

7:                                                ; preds = %1
  %8 = load %struct.int_state_s*, %struct.int_state_s** getelementptr inbounds (%struct.int_state_s, %struct.int_state_s* @istate, i32 0, i32 0), align 8
  store %struct.int_state_s* %8, %struct.int_state_s** %3, align 8
  %9 = load %struct.int_state_s*, %struct.int_state_s** %3, align 8
  %10 = bitcast %struct.int_state_s* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.int_state_s* @istate to i8*), i8* align 8 %10, i64 72, i1 false)
  %11 = load %struct.int_state_s*, %struct.int_state_s** %3, align 8
  %12 = bitcast %struct.int_state_s* %11 to i8*
  call void @alloc_free(i8* %12, i32 1, i32 72, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1.522, i64 0, i64 0))
  br label %13

13:                                               ; preds = %7, %1
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zgrestoreall(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  %3 = alloca %struct.int_state_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %4 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %5 = call i32 @gs_grestoreall(%struct.gs_state_s* %4)
  br label %6

6:                                                ; preds = %9, %1
  %7 = load %struct.int_state_s*, %struct.int_state_s** getelementptr inbounds (%struct.int_state_s, %struct.int_state_s* @istate, i32 0, i32 0), align 8
  %8 = icmp ne %struct.int_state_s* %7, null
  br i1 %8, label %9, label %15

9:                                                ; preds = %6
  %10 = load %struct.int_state_s*, %struct.int_state_s** getelementptr inbounds (%struct.int_state_s, %struct.int_state_s* @istate, i32 0, i32 0), align 8
  store %struct.int_state_s* %10, %struct.int_state_s** %3, align 8
  %11 = load %struct.int_state_s*, %struct.int_state_s** %3, align 8
  %12 = bitcast %struct.int_state_s* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.int_state_s* @istate to i8*), i8* align 8 %12, i64 72, i1 false)
  %13 = load %struct.int_state_s*, %struct.int_state_s** %3, align 8
  %14 = bitcast %struct.int_state_s* %13 to i8*
  call void @alloc_free(i8* %14, i32 1, i32 72, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2.523, i64 0, i64 0))
  br label %6

15:                                               ; preds = %6
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zinitgraphics(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %4 = call i32 @gs_initgraphics(%struct.gs_state_s* %3)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zsetlinewidth(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %4 = call i32 @num_param(%struct.ref_s* %3, i32 (%struct.gs_state_s*, double)* @gs_setlinewidth)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @num_param(%struct.ref_s* %0, i32 (%struct.gs_state_s*, double)* %1) #0 {
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32 (%struct.gs_state_s*, double)*, align 8
  %5 = alloca float, align 4
  %6 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  store i32 (%struct.gs_state_s*, double)* %1, i32 (%struct.gs_state_s*, double)** %4, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = call i32 @real_param(%struct.ref_s* %7, float* %5, i32 0)
  store i32 %8, i32* %6, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %17, label %11

11:                                               ; preds = %2
  %12 = load i32 (%struct.gs_state_s*, double)*, i32 (%struct.gs_state_s*, double)** %4, align 8
  %13 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %14 = load float, float* %5, align 4
  %15 = fpext float %14 to double
  %16 = call i32 %12(%struct.gs_state_s* %13, double %15)
  store i32 %16, i32* %6, align 4
  br label %17

17:                                               ; preds = %11, %2
  %18 = load i32, i32* %6, align 4
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %23, label %20

20:                                               ; preds = %17
  %21 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i64 -1
  store %struct.ref_s* %22, %struct.ref_s** @osp, align 8
  br label %23

23:                                               ; preds = %20, %17
  %24 = load i32, i32* %6, align 4
  ret i32 %24
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcurrentlinewidth(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i64 1
  store %struct.ref_s* %5, %struct.ref_s** %3, align 8
  store %struct.ref_s* %5, %struct.ref_s** @osp, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %7 = icmp ugt %struct.ref_s* %5, %6
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i64 -1
  store %struct.ref_s* %10, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %19

11:                                               ; preds = %1
  %12 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %13 = call float @gs_currentlinewidth(%struct.gs_state_s* %12)
  %14 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 0
  %16 = bitcast %union.color_sample* %15 to float*
  store float %13, float* %16, align 8
  %17 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i32 0, i32 1
  store i16 44, i16* %18, align 8
  store i32 0, i32* %2, align 4
  br label %19

19:                                               ; preds = %11, %8
  %20 = load i32, i32* %2, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zsetlinecap(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %6 = call i32 @line_param(%struct.ref_s* %5, i32* %3)
  store i32 %6, i32* %4, align 4
  %7 = load i32, i32* %4, align 4
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %13, label %9

9:                                                ; preds = %1
  %10 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %11 = load i32, i32* %3, align 4
  %12 = call i32 @gs_setlinecap(%struct.gs_state_s* %10, i32 %11)
  store i32 %12, i32* %4, align 4
  br label %13

13:                                               ; preds = %9, %1
  %14 = load i32, i32* %4, align 4
  ret i32 %14
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @line_param(%struct.ref_s* %0, i32* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca i32*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %4, align 8
  store i32* %1, i32** %5, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %7 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = zext i16 %8 to i32
  %10 = and i32 %9, 252
  %11 = icmp eq i32 %10, 20
  br i1 %11, label %13, label %12

12:                                               ; preds = %2
  store i32 -20, i32* %3, align 4
  br label %35

13:                                               ; preds = %2
  %14 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 0
  %16 = bitcast %union.color_sample* %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = icmp slt i64 %17, 0
  br i1 %18, label %25, label %19

19:                                               ; preds = %13
  %20 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %21 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %20, i32 0, i32 0
  %22 = bitcast %union.color_sample* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = icmp sgt i64 %23, 2
  br i1 %24, label %25, label %26

25:                                               ; preds = %19, %13
  store i32 -15, i32* %3, align 4
  br label %35

26:                                               ; preds = %19
  %27 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %28 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %27, i32 0, i32 0
  %29 = bitcast %union.color_sample* %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = trunc i64 %30 to i32
  %32 = load i32*, i32** %5, align 8
  store i32 %31, i32* %32, align 4
  %33 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %34 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %33, i64 -1
  store %struct.ref_s* %34, %struct.ref_s** @osp, align 8
  store i32 0, i32* %3, align 4
  br label %35

35:                                               ; preds = %26, %25, %12
  %36 = load i32, i32* %3, align 4
  ret i32 %36
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcurrentlinecap(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i64 1
  store %struct.ref_s* %5, %struct.ref_s** %3, align 8
  store %struct.ref_s* %5, %struct.ref_s** @osp, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %7 = icmp ugt %struct.ref_s* %5, %6
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i64 -1
  store %struct.ref_s* %10, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %20

11:                                               ; preds = %1
  %12 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %13 = call i32 @gs_currentlinecap(%struct.gs_state_s* %12)
  %14 = sext i32 %13 to i64
  %15 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %16 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %15, i32 0, i32 0
  %17 = bitcast %union.color_sample* %16 to i64*
  store i64 %14, i64* %17, align 8
  %18 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i32 0, i32 1
  store i16 20, i16* %19, align 8
  store i32 0, i32* %2, align 4
  br label %20

20:                                               ; preds = %11, %8
  %21 = load i32, i32* %2, align 4
  ret i32 %21
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zsetlinejoin(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %6 = call i32 @line_param(%struct.ref_s* %5, i32* %3)
  store i32 %6, i32* %4, align 4
  %7 = load i32, i32* %4, align 4
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %13, label %9

9:                                                ; preds = %1
  %10 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %11 = load i32, i32* %3, align 4
  %12 = call i32 @gs_setlinejoin(%struct.gs_state_s* %10, i32 %11)
  store i32 %12, i32* %4, align 4
  br label %13

13:                                               ; preds = %9, %1
  %14 = load i32, i32* %4, align 4
  ret i32 %14
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcurrentlinejoin(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i64 1
  store %struct.ref_s* %5, %struct.ref_s** %3, align 8
  store %struct.ref_s* %5, %struct.ref_s** @osp, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %7 = icmp ugt %struct.ref_s* %5, %6
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i64 -1
  store %struct.ref_s* %10, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %20

11:                                               ; preds = %1
  %12 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %13 = call i32 @gs_currentlinejoin(%struct.gs_state_s* %12)
  %14 = sext i32 %13 to i64
  %15 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %16 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %15, i32 0, i32 0
  %17 = bitcast %union.color_sample* %16 to i64*
  store i64 %14, i64* %17, align 8
  %18 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i32 0, i32 1
  store i16 20, i16* %19, align 8
  store i32 0, i32* %2, align 4
  br label %20

20:                                               ; preds = %11, %8
  %21 = load i32, i32* %2, align 4
  ret i32 %21
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zsetmiterlimit(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %4 = call i32 @num_param(%struct.ref_s* %3, i32 (%struct.gs_state_s*, double)* @gs_setmiterlimit)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcurrentmiterlimit(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i64 1
  store %struct.ref_s* %5, %struct.ref_s** %3, align 8
  store %struct.ref_s* %5, %struct.ref_s** @osp, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %7 = icmp ugt %struct.ref_s* %5, %6
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i64 -1
  store %struct.ref_s* %10, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %19

11:                                               ; preds = %1
  %12 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %13 = call float @gs_currentmiterlimit(%struct.gs_state_s* %12)
  %14 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 0
  %16 = bitcast %union.color_sample* %15 to float*
  store float %13, float* %16, align 8
  %17 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i32 0, i32 1
  store i16 44, i16* %18, align 8
  store i32 0, i32* %2, align 4
  br label %19

19:                                               ; preds = %11, %8
  %20 = load i32, i32* %2, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zsetdash(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca float, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca %struct.ref_s*, align 8
  %8 = alloca float*, align 8
  %9 = alloca float*, align 8
  %10 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %11 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %12 = call i32 @real_param(%struct.ref_s* %11, float* %4, i32 0)
  store i32 %12, i32* %10, align 4
  %13 = load i32, i32* %10, align 4
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %1
  %16 = load i32, i32* %10, align 4
  store i32 %16, i32* %2, align 4
  br label %98

17:                                               ; preds = %1
  %18 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i64 -1
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i32 0, i32 1
  %21 = load i16, i16* %20, align 8
  %22 = zext i16 %21 to i32
  %23 = and i32 %22, 255
  %24 = ashr i32 %23, 2
  switch i32 %24, label %25 [
    i32 0, label %26
    i32 10, label %26
  ]

25:                                               ; preds = %17
  store i32 -20, i32* %2, align 4
  br label %98

26:                                               ; preds = %17, %17
  br label %27

27:                                               ; preds = %26
  %28 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i64 -1
  %30 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %29, i32 0, i32 1
  %31 = load i16, i16* %30, align 8
  %32 = zext i16 %31 to i32
  %33 = xor i32 %32, -1
  %34 = and i32 %33, 512
  %35 = icmp ne i32 %34, 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %27
  store i32 -7, i32* %2, align 4
  br label %98

37:                                               ; preds = %27
  %38 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %39 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %38, i64 -1
  %40 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %39, i32 0, i32 0
  %41 = bitcast %union.color_sample* %40 to %struct.ref_s**
  %42 = load %struct.ref_s*, %struct.ref_s** %41, align 8
  store %struct.ref_s* %42, %struct.ref_s** %7, align 8
  %43 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %44 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %43, i64 -1
  %45 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %44, i32 0, i32 2
  %46 = load i16, i16* %45, align 2
  %47 = zext i16 %46 to i32
  store i32 %47, i32* %5, align 4
  store i32 %47, i32* %6, align 4
  %48 = load i32, i32* %5, align 4
  %49 = call i8* @alloc(i32 %48, i32 4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3.524, i64 0, i64 0))
  %50 = bitcast i8* %49 to float*
  store float* %50, float** %9, align 8
  store float* %50, float** %8, align 8
  br label %51

51:                                               ; preds = %81, %37
  %52 = load i32, i32* %6, align 4
  %53 = add i32 %52, -1
  store i32 %53, i32* %6, align 4
  %54 = icmp ne i32 %52, 0
  br i1 %54, label %55, label %84

55:                                               ; preds = %51
  %56 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %57 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %56, i32 0, i32 1
  %58 = load i16, i16* %57, align 8
  %59 = zext i16 %58 to i32
  %60 = and i32 %59, 255
  %61 = ashr i32 %60, 2
  switch i32 %61, label %77 [
    i32 5, label %62
    i32 11, label %70
  ]

62:                                               ; preds = %55
  %63 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %64 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %63, i32 0, i32 0
  %65 = bitcast %union.color_sample* %64 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = sitofp i64 %66 to float
  %68 = load float*, float** %9, align 8
  %69 = getelementptr inbounds float, float* %68, i32 1
  store float* %69, float** %9, align 8
  store float %67, float* %68, align 4
  br label %81

70:                                               ; preds = %55
  %71 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %72 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %71, i32 0, i32 0
  %73 = bitcast %union.color_sample* %72 to float*
  %74 = load float, float* %73, align 8
  %75 = load float*, float** %9, align 8
  %76 = getelementptr inbounds float, float* %75, i32 1
  store float* %76, float** %9, align 8
  store float %74, float* %75, align 4
  br label %81

77:                                               ; preds = %55
  %78 = load float*, float** %9, align 8
  %79 = bitcast float* %78 to i8*
  %80 = load i32, i32* %5, align 4
  call void @alloc_free(i8* %79, i32 %80, i32 4, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3.524, i64 0, i64 0))
  store i32 -20, i32* %2, align 4
  br label %98

81:                                               ; preds = %70, %62
  %82 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %83 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %82, i32 1
  store %struct.ref_s* %83, %struct.ref_s** %7, align 8
  br label %51

84:                                               ; preds = %51
  %85 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %86 = load float*, float** %8, align 8
  %87 = load i32, i32* %5, align 4
  %88 = load float, float* %4, align 4
  %89 = fpext float %88 to double
  %90 = call i32 @gs_setdash(%struct.gs_state_s* %85, float* %86, i32 %87, double %89)
  store i32 %90, i32* %10, align 4
  %91 = load i32, i32* %10, align 4
  %92 = icmp ne i32 %91, 0
  br i1 %92, label %96, label %93

93:                                               ; preds = %84
  %94 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %95 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %94, i64 -2
  store %struct.ref_s* %95, %struct.ref_s** @osp, align 8
  br label %96

96:                                               ; preds = %93, %84
  %97 = load i32, i32* %10, align 4
  store i32 %97, i32* %2, align 4
  br label %98

98:                                               ; preds = %96, %77, %36, %25, %15
  %99 = load i32, i32* %2, align 4
  ret i32 %99
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcurrentdash(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.ref_s*, align 8
  %7 = alloca %struct.ref_s*, align 8
  %8 = alloca float*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %9 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %10 = call i32 @gs_currentdash_length(%struct.gs_state_s* %9)
  store i32 %10, i32* %4, align 4
  %11 = load i32, i32* %4, align 4
  store i32 %11, i32* %5, align 4
  %12 = load i32, i32* %4, align 4
  %13 = call i8* @alloc(i32 %12, i32 16, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4.525, i64 0, i64 0))
  %14 = bitcast i8* %13 to %struct.ref_s*
  store %struct.ref_s* %14, %struct.ref_s** %6, align 8
  %15 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  store %struct.ref_s* %15, %struct.ref_s** %7, align 8
  %16 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %17 = bitcast %struct.ref_s* %16 to i8*
  %18 = load i32, i32* %4, align 4
  %19 = sext i32 %18 to i64
  %20 = mul i64 %19, 12
  %21 = getelementptr inbounds i8, i8* %17, i64 %20
  %22 = bitcast i8* %21 to float*
  store float* %22, float** %8, align 8
  %23 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %24 = load float*, float** %8, align 8
  %25 = call i32 @gs_currentdash_pattern(%struct.gs_state_s* %23, float* %24)
  br label %26

26:                                               ; preds = %30, %1
  %27 = load i32, i32* %5, align 4
  %28 = add nsw i32 %27, -1
  store i32 %28, i32* %5, align 4
  %29 = icmp ne i32 %27, 0
  br i1 %29, label %30, label %42

30:                                               ; preds = %26
  %31 = load float*, float** %8, align 8
  %32 = load float, float* %31, align 4
  %33 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %34 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %33, i32 0, i32 0
  %35 = bitcast %union.color_sample* %34 to float*
  store float %32, float* %35, align 8
  %36 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %37 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %36, i32 0, i32 1
  store i16 44, i16* %37, align 8
  %38 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %39 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %38, i32 1
  store %struct.ref_s* %39, %struct.ref_s** %7, align 8
  %40 = load float*, float** %8, align 8
  %41 = getelementptr inbounds float, float* %40, i32 1
  store float* %41, float** %8, align 8
  br label %26

42:                                               ; preds = %26
  %43 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %44 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %43, i64 2
  store %struct.ref_s* %44, %struct.ref_s** %3, align 8
  store %struct.ref_s* %44, %struct.ref_s** @osp, align 8
  %45 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %46 = icmp ugt %struct.ref_s* %44, %45
  br i1 %46, label %47, label %50

47:                                               ; preds = %42
  %48 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %49 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %48, i64 -2
  store %struct.ref_s* %49, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %71

50:                                               ; preds = %42
  %51 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %52 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %53 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %52, i64 -1
  %54 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %53, i32 0, i32 0
  %55 = bitcast %union.color_sample* %54 to %struct.ref_s**
  store %struct.ref_s* %51, %struct.ref_s** %55, align 8
  %56 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %57 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %56, i64 -1
  %58 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %57, i32 0, i32 1
  store i16 770, i16* %58, align 8
  %59 = load i32, i32* %4, align 4
  %60 = trunc i32 %59 to i16
  %61 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %62 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %61, i64 -1
  %63 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %62, i32 0, i32 2
  store i16 %60, i16* %63, align 2
  %64 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %65 = call float @gs_currentdash_offset(%struct.gs_state_s* %64)
  %66 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %67 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %66, i32 0, i32 0
  %68 = bitcast %union.color_sample* %67 to float*
  store float %65, float* %68, align 8
  %69 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %70 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %69, i32 0, i32 1
  store i16 44, i16* %70, align 8
  store i32 0, i32* %2, align 4
  br label %71

71:                                               ; preds = %50, %47
  %72 = load i32, i32* %2, align 4
  ret i32 %72
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zsetflat(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %4 = call i32 @num_param(%struct.ref_s* %3, i32 (%struct.gs_state_s*, double)* @gs_setflat)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcurrentflat(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i64 1
  store %struct.ref_s* %5, %struct.ref_s** %3, align 8
  store %struct.ref_s* %5, %struct.ref_s** @osp, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %7 = icmp ugt %struct.ref_s* %5, %6
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i64 -1
  store %struct.ref_s* %10, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %19

11:                                               ; preds = %1
  %12 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %13 = call float @gs_currentflat(%struct.gs_state_s* %12)
  %14 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 0
  %16 = bitcast %union.color_sample* %15 to float*
  store float %13, float* %16, align 8
  %17 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i32 0, i32 1
  store i16 44, i16* %18, align 8
  store i32 0, i32* %2, align 4
  br label %19

19:                                               ; preds = %11, %8
  %20 = load i32, i32* %2, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zsetgray(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %4 = call i32 @num_param(%struct.ref_s* %3, i32 (%struct.gs_state_s*, double)* @gs_setgray)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcurrentgray(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i64 1
  store %struct.ref_s* %5, %struct.ref_s** %3, align 8
  store %struct.ref_s* %5, %struct.ref_s** @osp, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %7 = icmp ugt %struct.ref_s* %5, %6
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i64 -1
  store %struct.ref_s* %10, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %19

11:                                               ; preds = %1
  %12 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %13 = call float @gs_currentgray(%struct.gs_state_s* %12)
  %14 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 0
  %16 = bitcast %union.color_sample* %15 to float*
  store float %13, float* %16, align 8
  %17 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i32 0, i32 1
  store i16 44, i16* %18, align 8
  store i32 0, i32* %2, align 4
  br label %19

19:                                               ; preds = %11, %8
  %20 = load i32, i32* %2, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zsethsbcolor(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  %3 = alloca [3 x float], align 4
  %4 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %6 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 0, i64 0
  %7 = call i32 @num_params(%struct.ref_s* %5, i32 3, float* %6)
  store i32 %7, i32* %4, align 4
  %8 = icmp sge i32 %7, 0
  br i1 %8, label %9, label %25

9:                                                ; preds = %1
  %10 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %11 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 0, i64 0
  %12 = load float, float* %11, align 4
  %13 = fpext float %12 to double
  %14 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 0, i64 1
  %15 = load float, float* %14, align 4
  %16 = fpext float %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call i32 @gs_sethsbcolor(%struct.gs_state_s* %10, double %13, double %16, double %19)
  store i32 %20, i32* %4, align 4
  %21 = icmp sge i32 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %9
  %23 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %24 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %23, i64 -3
  store %struct.ref_s* %24, %struct.ref_s** @osp, align 8
  br label %25

25:                                               ; preds = %22, %9, %1
  %26 = load i32, i32* %4, align 4
  ret i32 %26
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcurrenthsbcolor(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca [3 x float], align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %6 = getelementptr inbounds [3 x float], [3 x float]* %4, i64 0, i64 0
  %7 = call i32 @gs_currenthsbcolor(%struct.gs_state_s* %5, float* %6)
  %8 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i64 3
  store %struct.ref_s* %9, %struct.ref_s** %3, align 8
  store %struct.ref_s* %9, %struct.ref_s** @osp, align 8
  %10 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %11 = icmp ugt %struct.ref_s* %9, %10
  br i1 %11, label %12, label %15

12:                                               ; preds = %1
  %13 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i64 -3
  store %struct.ref_s* %14, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %18

15:                                               ; preds = %1
  %16 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %17 = getelementptr inbounds [3 x float], [3 x float]* %4, i64 0, i64 0
  call void @tri_put(%struct.ref_s* %16, float* %17)
  store i32 0, i32* %2, align 4
  br label %18

18:                                               ; preds = %15, %12
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @tri_put(%struct.ref_s* %0, float* %1) #0 {
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca float*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  store float* %1, float** %4, align 8
  %5 = load float*, float** %4, align 8
  %6 = getelementptr inbounds float, float* %5, i64 0
  %7 = load float, float* %6, align 4
  %8 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i64 -2
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i32 0, i32 0
  %11 = bitcast %union.color_sample* %10 to float*
  store float %7, float* %11, align 8
  %12 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %13 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %12, i64 -2
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i32 0, i32 1
  store i16 44, i16* %14, align 8
  %15 = load float*, float** %4, align 8
  %16 = getelementptr inbounds float, float* %15, i64 1
  %17 = load float, float* %16, align 4
  %18 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i64 -1
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i32 0, i32 0
  %21 = bitcast %union.color_sample* %20 to float*
  store float %17, float* %21, align 8
  %22 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i64 -1
  %24 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %23, i32 0, i32 1
  store i16 44, i16* %24, align 8
  %25 = load float*, float** %4, align 8
  %26 = getelementptr inbounds float, float* %25, i64 2
  %27 = load float, float* %26, align 4
  %28 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i32 0, i32 0
  %30 = bitcast %union.color_sample* %29 to float*
  store float %27, float* %30, align 8
  %31 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %32 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %31, i32 0, i32 1
  store i16 44, i16* %32, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zsetrgbcolor(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  %3 = alloca [3 x float], align 4
  %4 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %6 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 0, i64 0
  %7 = call i32 @num_params(%struct.ref_s* %5, i32 3, float* %6)
  store i32 %7, i32* %4, align 4
  %8 = icmp sge i32 %7, 0
  br i1 %8, label %9, label %25

9:                                                ; preds = %1
  %10 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %11 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 0, i64 0
  %12 = load float, float* %11, align 4
  %13 = fpext float %12 to double
  %14 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 0, i64 1
  %15 = load float, float* %14, align 4
  %16 = fpext float %15 to double
  %17 = getelementptr inbounds [3 x float], [3 x float]* %3, i64 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = fpext float %18 to double
  %20 = call i32 @gs_setrgbcolor(%struct.gs_state_s* %10, double %13, double %16, double %19)
  store i32 %20, i32* %4, align 4
  %21 = icmp sge i32 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %9
  %23 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %24 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %23, i64 -3
  store %struct.ref_s* %24, %struct.ref_s** @osp, align 8
  br label %25

25:                                               ; preds = %22, %9, %1
  %26 = load i32, i32* %4, align 4
  ret i32 %26
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcurrentrgbcolor(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca [3 x float], align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %6 = getelementptr inbounds [3 x float], [3 x float]* %4, i64 0, i64 0
  %7 = call i32 @gs_currentrgbcolor(%struct.gs_state_s* %5, float* %6)
  %8 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i64 3
  store %struct.ref_s* %9, %struct.ref_s** %3, align 8
  store %struct.ref_s* %9, %struct.ref_s** @osp, align 8
  %10 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %11 = icmp ugt %struct.ref_s* %9, %10
  br i1 %11, label %12, label %15

12:                                               ; preds = %1
  %13 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i64 -3
  store %struct.ref_s* %14, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %18

15:                                               ; preds = %1
  %16 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %17 = getelementptr inbounds [3 x float], [3 x float]* %4, i64 0, i64 0
  call void @tri_put(%struct.ref_s* %16, float* %17)
  store i32 0, i32* %2, align 4
  br label %18

18:                                               ; preds = %15, %12
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zsettransfer(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i32 0, i32 1
  %6 = load i16, i16* %5, align 8
  %7 = zext i16 %6 to i32
  %8 = and i32 %7, 255
  %9 = ashr i32 %8, 2
  switch i32 %9, label %10 [
    i32 0, label %11
    i32 10, label %11
  ]

10:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %26

11:                                               ; preds = %1, %1
  br label %12

12:                                               ; preds = %11
  %13 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i32 0, i32 1
  %15 = load i16, i16* %14, align 8
  %16 = zext i16 %15 to i32
  %17 = xor i32 %16, -1
  %18 = and i32 %17, 3
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %20, label %21

20:                                               ; preds = %12
  store i32 -7, i32* %2, align 4
  br label %26

21:                                               ; preds = %12
  %22 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %23 = bitcast %struct.ref_s* %22 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.ref_s* getelementptr inbounds (%struct.int_state_s, %struct.int_state_s* @istate, i32 0, i32 2) to i8*), i8* align 8 %23, i64 16, i1 false)
  %24 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %25 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %24, i64 -1
  store %struct.ref_s* %25, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %26

26:                                               ; preds = %21, %20, %10
  %27 = load i32, i32* %2, align 4
  ret i32 %27
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcurrenttransfer(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i64 1
  store %struct.ref_s* %5, %struct.ref_s** %3, align 8
  store %struct.ref_s* %5, %struct.ref_s** @osp, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %7 = icmp ugt %struct.ref_s* %5, %6
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i64 -1
  store %struct.ref_s* %10, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %14

11:                                               ; preds = %1
  %12 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %13 = bitcast %struct.ref_s* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %13, i8* align 8 bitcast (%struct.ref_s* getelementptr inbounds (%struct.int_state_s, %struct.int_state_s* @istate, i32 0, i32 2) to i8*), i64 16, i1 false)
  store i32 0, i32* %2, align 4
  br label %14

14:                                               ; preds = %11, %8
  %15 = load i32, i32* %2, align 4
  ret i32 %15
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcurrentscreen(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca float, align 4
  %5 = alloca float, align 4
  %6 = alloca float (double, double)*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %7 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %8 = call i32 @gs_currentscreen(%struct.gs_state_s* %7, float* %4, float* %5, float (double, double)** %6)
  %9 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i64 3
  store %struct.ref_s* %10, %struct.ref_s** %3, align 8
  store %struct.ref_s* %10, %struct.ref_s** @osp, align 8
  %11 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %12 = icmp ugt %struct.ref_s* %10, %11
  br i1 %12, label %13, label %16

13:                                               ; preds = %1
  %14 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i64 -3
  store %struct.ref_s* %15, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %35

16:                                               ; preds = %1
  %17 = load float, float* %4, align 4
  %18 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i64 -2
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i32 0, i32 0
  %21 = bitcast %union.color_sample* %20 to float*
  store float %17, float* %21, align 8
  %22 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i64 -2
  %24 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %23, i32 0, i32 1
  store i16 44, i16* %24, align 8
  %25 = load float, float* %5, align 4
  %26 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %27 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %26, i64 -1
  %28 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %27, i32 0, i32 0
  %29 = bitcast %union.color_sample* %28 to float*
  store float %25, float* %29, align 8
  %30 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %31 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %30, i64 -1
  %32 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %31, i32 0, i32 1
  store i16 44, i16* %32, align 8
  %33 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %34 = bitcast %struct.ref_s* %33 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 bitcast (%struct.ref_s* getelementptr inbounds (%struct.int_state_s, %struct.int_state_s* @istate, i32 0, i32 1) to i8*), i64 16, i1 false)
  store i32 0, i32* %2, align 4
  br label %35

35:                                               ; preds = %16, %13
  %36 = load i32, i32* %2, align 4
  ret i32 %36
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @zgstate_op_init() #0 {
  %1 = call i32 (%struct.op_def*, ...) bitcast (void (%struct.op_def*)* @z_op_init to i32 (%struct.op_def*, ...)*)(%struct.op_def* getelementptr inbounds ([26 x %struct.op_def], [26 x %struct.op_def]* @zgstate_op_init.my_defs, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zsetscreen(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca [2 x float], align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.gs_screen_enum_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i64 -1
  %9 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 0
  %10 = call i32 @num_params(%struct.ref_s* %8, i32 2, float* %9)
  store i32 %10, i32* %5, align 4
  %11 = load i32, i32* %5, align 4
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %13, label %15

13:                                               ; preds = %1
  %14 = load i32, i32* %5, align 4
  store i32 %14, i32* %2, align 4
  br label %95

15:                                               ; preds = %1
  %16 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %16, i32 0, i32 1
  %18 = load i16, i16* %17, align 8
  %19 = zext i16 %18 to i32
  %20 = and i32 %19, 255
  %21 = ashr i32 %20, 2
  switch i32 %21, label %22 [
    i32 0, label %23
    i32 10, label %23
  ]

22:                                               ; preds = %15
  store i32 -20, i32* %2, align 4
  br label %95

23:                                               ; preds = %15, %15
  br label %24

24:                                               ; preds = %23
  %25 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %26 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %25, i32 0, i32 1
  %27 = load i16, i16* %26, align 8
  %28 = zext i16 %27 to i32
  %29 = xor i32 %28, -1
  %30 = and i32 %29, 3
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %24
  store i32 -7, i32* %2, align 4
  br label %95

33:                                               ; preds = %24
  %34 = load i32, i32* @gs_screen_enum_sizeof, align 4
  %35 = call i8* @alloc(i32 1, i32 %34, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.553, i64 0, i64 0))
  %36 = bitcast i8* %35 to %struct.gs_screen_enum_s*
  store %struct.gs_screen_enum_s* %36, %struct.gs_screen_enum_s** %6, align 8
  %37 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %6, align 8
  %38 = icmp eq %struct.gs_screen_enum_s* %37, null
  br i1 %38, label %39, label %40

39:                                               ; preds = %33
  store i32 -25, i32* %2, align 4
  br label %95

40:                                               ; preds = %33
  %41 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %6, align 8
  %42 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %43 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 0
  %44 = load float, float* %43, align 4
  %45 = fpext float %44 to double
  %46 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 1
  %47 = load float, float* %46, align 4
  %48 = fpext float %47 to double
  %49 = call i32 @gs_screen_init(%struct.gs_screen_enum_s* %41, %struct.gs_state_s* %42, double %45, double %48)
  store i32 %49, i32* %5, align 4
  %50 = load i32, i32* %5, align 4
  %51 = icmp slt i32 %50, 0
  br i1 %51, label %52, label %57

52:                                               ; preds = %40
  %53 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %6, align 8
  %54 = bitcast %struct.gs_screen_enum_s* %53 to i8*
  %55 = load i32, i32* @gs_screen_enum_sizeof, align 4
  call void @alloc_free(i8* %54, i32 1, i32 %55, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.553, i64 0, i64 0))
  %56 = load i32, i32* %5, align 4
  store i32 %56, i32* %2, align 4
  br label %95

57:                                               ; preds = %40
  %58 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %59 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %58, i64 3
  %60 = load %struct.ref_s*, %struct.ref_s** @estop, align 8
  %61 = icmp ugt %struct.ref_s* %59, %60
  br i1 %61, label %62, label %63

62:                                               ; preds = %57
  store i32 -5, i32* %2, align 4
  br label %95

63:                                               ; preds = %57
  %64 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %65 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %64, i32 1
  store %struct.ref_s* %65, %struct.ref_s** @esp, align 8
  %66 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %67 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %66, i32 0, i32 0
  %68 = bitcast %union.color_sample* %67 to i16*
  store i16 0, i16* %68, align 8
  %69 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %70 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %69, i32 0, i32 1
  store i16 33, i16* %70, align 8
  %71 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %72 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %71, i32 1
  store %struct.ref_s* %72, %struct.ref_s** @esp, align 8
  %73 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %74 = bitcast %struct.ref_s* %72 to i8*
  %75 = bitcast %struct.ref_s* %73 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %74, i8* align 8 %75, i64 16, i1 false)
  %76 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %77 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %76, i32 1
  store %struct.ref_s* %77, %struct.ref_s** @esp, align 8
  %78 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %6, align 8
  %79 = bitcast %struct.gs_screen_enum_s* %78 to i8*
  %80 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %81 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %80, i32 0, i32 0
  %82 = bitcast %union.color_sample* %81 to i8**
  store i8* %79, i8** %82, align 8
  %83 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %84 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %83, i32 0, i32 1
  store i16 52, i16* %84, align 8
  %85 = load i32, i32* @gs_screen_enum_sizeof, align 4
  %86 = trunc i32 %85 to i16
  %87 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %88 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %87, i32 0, i32 2
  store i16 %86, i16* %88, align 2
  %89 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %90 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %89, i64 -3
  store %struct.ref_s* %90, %struct.ref_s** @osp, align 8
  %91 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %92 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %91, i64 -3
  store %struct.ref_s* %92, %struct.ref_s** %3, align 8
  %93 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %94 = call i32 @screen_sample(%struct.ref_s* %93)
  store i32 %94, i32* %2, align 4
  br label %95

95:                                               ; preds = %63, %62, %52, %39, %32, %22, %13
  %96 = load i32, i32* %2, align 4
  ret i32 %96
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @screen_sample(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.gs_screen_enum_s*, align 8
  %5 = alloca %struct.gs_point_s, align 4
  %6 = alloca i32, align 4
  %7 = alloca %struct.ref_s, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %8 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 0
  %10 = bitcast %union.color_sample* %9 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = bitcast i8* %11 to %struct.gs_screen_enum_s*
  store %struct.gs_screen_enum_s* %12, %struct.gs_screen_enum_s** %4, align 8
  %13 = load %struct.gs_screen_enum_s*, %struct.gs_screen_enum_s** %4, align 8
  %14 = call i32 @gs_screen_currentpoint(%struct.gs_screen_enum_s* %13, %struct.gs_point_s* %5)
  store i32 %14, i32* %6, align 4
  %15 = load i32, i32* %6, align 4
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %1
  %18 = load i32, i32* %6, align 4
  store i32 %18, i32* %2, align 4
  br label %70

19:                                               ; preds = %1
  %20 = load i32, i32* %6, align 4
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %22, label %28

22:                                               ; preds = %19
  %23 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %24 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %23, i64 -1
  %25 = bitcast %struct.ref_s* %24 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.ref_s* getelementptr inbounds (%struct.int_state_s, %struct.int_state_s* @istate, i32 0, i32 1) to i8*), i8* align 8 %25, i64 16, i1 false)
  %26 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %27 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %26, i64 -3
  store %struct.ref_s* %27, %struct.ref_s** @esp, align 8
  store i32 1, i32* %2, align 4
  br label %70

28:                                               ; preds = %19
  %29 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %30 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %29, i64 2
  store %struct.ref_s* %30, %struct.ref_s** %3, align 8
  store %struct.ref_s* %30, %struct.ref_s** @osp, align 8
  %31 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %32 = icmp ugt %struct.ref_s* %30, %31
  br i1 %32, label %33, label %36

33:                                               ; preds = %28
  %34 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %35 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %34, i64 -2
  store %struct.ref_s* %35, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %70

36:                                               ; preds = %28
  %37 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %5, i32 0, i32 0
  %38 = load float, float* %37, align 4
  %39 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %40 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %39, i64 -1
  %41 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %40, i32 0, i32 0
  %42 = bitcast %union.color_sample* %41 to float*
  store float %38, float* %42, align 8
  %43 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %44 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %43, i64 -1
  %45 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %44, i32 0, i32 1
  store i16 44, i16* %45, align 8
  %46 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %5, i32 0, i32 1
  %47 = load float, float* %46, align 4
  %48 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %49 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %48, i32 0, i32 0
  %50 = bitcast %union.color_sample* %49 to float*
  store float %47, float* %50, align 8
  %51 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %52 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %51, i32 0, i32 1
  store i16 44, i16* %52, align 8
  %53 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %54 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %53, i64 -1
  %55 = bitcast %struct.ref_s* %7 to i8*
  %56 = bitcast %struct.ref_s* %54 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %55, i8* align 8 %56, i64 16, i1 false)
  %57 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %58 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %57, i32 1
  store %struct.ref_s* %58, %struct.ref_s** @esp, align 8
  %59 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %60 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %59, i32 0, i32 0
  %61 = bitcast %union.color_sample* %60 to i32 (%struct.ref_s*)**
  store i32 (%struct.ref_s*)* @set_screen_continue, i32 (%struct.ref_s*)** %61, align 8
  %62 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %63 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %62, i32 0, i32 1
  store i16 37, i16* %63, align 8
  %64 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %65 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %64, i32 0, i32 2
  store i16 0, i16* %65, align 2
  %66 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %67 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %66, i32 1
  store %struct.ref_s* %67, %struct.ref_s** @esp, align 8
  %68 = bitcast %struct.ref_s* %67 to i8*
  %69 = bitcast %struct.ref_s* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %68, i8* align 8 %69, i64 16, i1 false)
  store i32 1, i32* %2, align 4
  br label %70

70:                                               ; preds = %36, %33, %22, %17
  %71 = load i32, i32* %2, align 4
  ret i32 %71
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @set_screen_continue(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca float, align 4
  %5 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = call i32 @num_params(%struct.ref_s* %6, i32 1, float* %4)
  store i32 %7, i32* %5, align 4
  %8 = load i32, i32* %5, align 4
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %1
  %11 = load i32, i32* %5, align 4
  store i32 %11, i32* %2, align 4
  br label %32

12:                                               ; preds = %1
  %13 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i32 0, i32 0
  %15 = bitcast %union.color_sample* %14 to i8**
  %16 = load i8*, i8** %15, align 8
  %17 = bitcast i8* %16 to %struct.gs_screen_enum_s*
  %18 = load float, float* %4, align 4
  %19 = fpext float %18 to double
  %20 = call i32 @gs_screen_next(%struct.gs_screen_enum_s* %17, double %19)
  store i32 %20, i32* %5, align 4
  %21 = load i32, i32* %5, align 4
  %22 = icmp slt i32 %21, 0
  br i1 %22, label %23, label %25

23:                                               ; preds = %12
  %24 = load i32, i32* %5, align 4
  store i32 %24, i32* %2, align 4
  br label %32

25:                                               ; preds = %12
  %26 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %27 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %26, i64 -1
  store %struct.ref_s* %27, %struct.ref_s** @osp, align 8
  %28 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i32 -1
  store %struct.ref_s* %29, %struct.ref_s** %3, align 8
  %30 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %31 = call i32 @screen_sample(%struct.ref_s* %30)
  store i32 %31, i32* %2, align 4
  br label %32

32:                                               ; preds = %25, %23, %10
  %33 = load i32, i32* %2, align 4
  ret i32 %33
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @zht_op_init() #0 {
  %1 = call i32 (%struct.op_def*, ...) bitcast (void (%struct.op_def*)* @z_op_init to i32 (%struct.op_def*, ...)*)(%struct.op_def* getelementptr inbounds ([2 x %struct.op_def], [2 x %struct.op_def]* @zht_op_init.my_defs, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @zmath_init() #0 {
  store i64 1, i64* @rand_state, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zsqrt(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca float, align 4
  %5 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = call i32 @num_params(%struct.ref_s* %6, i32 1, float* %4)
  store i32 %7, i32* %5, align 4
  %8 = load i32, i32* %5, align 4
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %1
  %11 = load i32, i32* %5, align 4
  store i32 %11, i32* %2, align 4
  br label %27

12:                                               ; preds = %1
  %13 = load float, float* %4, align 4
  %14 = fpext float %13 to double
  %15 = fcmp olt double %14, 0.000000e+00
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  store i32 -15, i32* %2, align 4
  br label %27

17:                                               ; preds = %12
  %18 = load float, float* %4, align 4
  %19 = fpext float %18 to double
  %20 = call double @sqrt(double %19) #9
  %21 = fptrunc double %20 to float
  %22 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i32 0, i32 0
  %24 = bitcast %union.color_sample* %23 to float*
  store float %21, float* %24, align 8
  %25 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %26 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %25, i32 0, i32 1
  store i16 44, i16* %26, align 8
  store i32 0, i32* %2, align 4
  br label %27

27:                                               ; preds = %17, %16, %10
  %28 = load i32, i32* %2, align 4
  ret i32 %28
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zarccos(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca float, align 4
  %5 = alloca float, align 4
  %6 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = call i32 @num_params(%struct.ref_s* %7, i32 1, float* %4)
  store i32 %8, i32* %6, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %11, label %13

11:                                               ; preds = %1
  %12 = load i32, i32* %6, align 4
  store i32 %12, i32* %2, align 4
  br label %26

13:                                               ; preds = %1
  %14 = load float, float* %4, align 4
  %15 = fpext float %14 to double
  %16 = call double @acos(double %15) #9
  %17 = load double, double* @radians_to_degrees, align 8
  %18 = fmul double %16, %17
  %19 = fptrunc double %18 to float
  store float %19, float* %5, align 4
  %20 = load float, float* %5, align 4
  %21 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i32 0, i32 0
  %23 = bitcast %union.color_sample* %22 to float*
  store float %20, float* %23, align 8
  %24 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %25 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %24, i32 0, i32 1
  store i16 44, i16* %25, align 8
  store i32 0, i32* %2, align 4
  br label %26

26:                                               ; preds = %13, %11
  %27 = load i32, i32* %2, align 4
  ret i32 %27
}

; Function Attrs: nounwind
declare dso_local double @acos(double) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zarcsin(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca float, align 4
  %5 = alloca float, align 4
  %6 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = call i32 @num_params(%struct.ref_s* %7, i32 1, float* %4)
  store i32 %8, i32* %6, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %11, label %13

11:                                               ; preds = %1
  %12 = load i32, i32* %6, align 4
  store i32 %12, i32* %2, align 4
  br label %26

13:                                               ; preds = %1
  %14 = load float, float* %4, align 4
  %15 = fpext float %14 to double
  %16 = call double @asin(double %15) #9
  %17 = load double, double* @radians_to_degrees, align 8
  %18 = fmul double %16, %17
  %19 = fptrunc double %18 to float
  store float %19, float* %5, align 4
  %20 = load float, float* %5, align 4
  %21 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i32 0, i32 0
  %23 = bitcast %union.color_sample* %22 to float*
  store float %20, float* %23, align 8
  %24 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %25 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %24, i32 0, i32 1
  store i16 44, i16* %25, align 8
  store i32 0, i32* %2, align 4
  br label %26

26:                                               ; preds = %13, %11
  %27 = load i32, i32* %2, align 4
  ret i32 %27
}

; Function Attrs: nounwind
declare dso_local double @asin(double) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zatan(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca [2 x float], align 4
  %5 = alloca float, align 4
  %6 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 0
  %9 = call i32 @num_params(%struct.ref_s* %7, i32 2, float* %8)
  store i32 %9, i32* %6, align 4
  %10 = load i32, i32* %6, align 4
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %12, label %14

12:                                               ; preds = %1
  %13 = load i32, i32* %6, align 4
  store i32 %13, i32* %2, align 4
  br label %78

14:                                               ; preds = %1
  %15 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 0
  %16 = load float, float* %15, align 4
  %17 = fcmp oeq float %16, 0.000000e+00
  br i1 %17, label %18, label %30

18:                                               ; preds = %14
  %19 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 1
  %20 = load float, float* %19, align 4
  %21 = fcmp oeq float %20, 0.000000e+00
  br i1 %21, label %22, label %23

22:                                               ; preds = %18
  store i32 -23, i32* %2, align 4
  br label %78

23:                                               ; preds = %18
  %24 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 1
  %25 = load float, float* %24, align 4
  %26 = fcmp olt float %25, 0.000000e+00
  %27 = zext i1 %26 to i64
  %28 = select i1 %26, i32 180, i32 0
  %29 = sitofp i32 %28 to float
  store float %29, float* %5, align 4
  br label %67

30:                                               ; preds = %14
  %31 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 0
  %32 = load float, float* %31, align 4
  %33 = fpext float %32 to double
  %34 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 1
  %35 = load float, float* %34, align 4
  %36 = fpext float %35 to double
  %37 = call double @atan2(double %33, double %36) #9
  %38 = load double, double* @radians_to_degrees, align 8
  %39 = fmul double %37, %38
  %40 = fptrunc double %39 to float
  store float %40, float* %5, align 4
  %41 = load float, float* %5, align 4
  %42 = fcmp olt float %41, 0.000000e+00
  br i1 %42, label %43, label %51

43:                                               ; preds = %30
  br label %44

44:                                               ; preds = %47, %43
  %45 = load float, float* %5, align 4
  %46 = fadd float %45, 1.800000e+02
  store float %46, float* %5, align 4
  br label %47

47:                                               ; preds = %44
  %48 = load float, float* %5, align 4
  %49 = fcmp olt float %48, 0.000000e+00
  br i1 %49, label %44, label %50

50:                                               ; preds = %47
  br label %59

51:                                               ; preds = %30
  br label %52

52:                                               ; preds = %55, %51
  %53 = load float, float* %5, align 4
  %54 = fcmp oge float %53, 1.800000e+02
  br i1 %54, label %55, label %58

55:                                               ; preds = %52
  %56 = load float, float* %5, align 4
  %57 = fsub float %56, 1.800000e+02
  store float %57, float* %5, align 4
  br label %52

58:                                               ; preds = %52
  br label %59

59:                                               ; preds = %58, %50
  %60 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 0
  %61 = load float, float* %60, align 4
  %62 = fcmp olt float %61, 0.000000e+00
  br i1 %62, label %63, label %66

63:                                               ; preds = %59
  %64 = load float, float* %5, align 4
  %65 = fadd float %64, 1.800000e+02
  store float %65, float* %5, align 4
  br label %66

66:                                               ; preds = %63, %59
  br label %67

67:                                               ; preds = %66, %23
  %68 = load float, float* %5, align 4
  %69 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %70 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %69, i64 -1
  %71 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %70, i32 0, i32 0
  %72 = bitcast %union.color_sample* %71 to float*
  store float %68, float* %72, align 8
  %73 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %74 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %73, i64 -1
  %75 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %74, i32 0, i32 1
  store i16 44, i16* %75, align 8
  %76 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %77 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %76, i64 -1
  store %struct.ref_s* %77, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %78

78:                                               ; preds = %67, %22, %12
  %79 = load i32, i32* %2, align 4
  ret i32 %79
}

; Function Attrs: nounwind
declare dso_local double @atan2(double, double) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcos(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca float, align 4
  %5 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = call i32 @num_params(%struct.ref_s* %6, i32 1, float* %4)
  store i32 %7, i32* %5, align 4
  %8 = load i32, i32* %5, align 4
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %1
  %11 = load i32, i32* %5, align 4
  store i32 %11, i32* %2, align 4
  br label %24

12:                                               ; preds = %1
  %13 = load float, float* %4, align 4
  %14 = fpext float %13 to double
  %15 = load double, double* @degrees_to_radians, align 8
  %16 = fmul double %14, %15
  %17 = call double @cos(double %16) #9
  %18 = fptrunc double %17 to float
  %19 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i32 0, i32 0
  %21 = bitcast %union.color_sample* %20 to float*
  store float %18, float* %21, align 8
  %22 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i32 0, i32 1
  store i16 44, i16* %23, align 8
  store i32 0, i32* %2, align 4
  br label %24

24:                                               ; preds = %12, %10
  %25 = load i32, i32* %2, align 4
  ret i32 %25
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zsin(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca float, align 4
  %5 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = call i32 @num_params(%struct.ref_s* %6, i32 1, float* %4)
  store i32 %7, i32* %5, align 4
  %8 = load i32, i32* %5, align 4
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %1
  %11 = load i32, i32* %5, align 4
  store i32 %11, i32* %2, align 4
  br label %24

12:                                               ; preds = %1
  %13 = load float, float* %4, align 4
  %14 = fpext float %13 to double
  %15 = load double, double* @degrees_to_radians, align 8
  %16 = fmul double %14, %15
  %17 = call double @sin(double %16) #9
  %18 = fptrunc double %17 to float
  %19 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i32 0, i32 0
  %21 = bitcast %union.color_sample* %20 to float*
  store float %18, float* %21, align 8
  %22 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i32 0, i32 1
  store i16 44, i16* %23, align 8
  store i32 0, i32* %2, align 4
  br label %24

24:                                               ; preds = %12, %10
  %25 = load i32, i32* %2, align 4
  ret i32 %25
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zexp(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca [2 x float], align 4
  %5 = alloca float, align 4
  %6 = alloca double, align 8
  %7 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %8 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %9 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 0
  %10 = call i32 @num_params(%struct.ref_s* %8, i32 2, float* %9)
  store i32 %10, i32* %7, align 4
  %11 = load i32, i32* %7, align 4
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %13, label %15

13:                                               ; preds = %1
  %14 = load i32, i32* %7, align 4
  store i32 %14, i32* %2, align 4
  br label %57

15:                                               ; preds = %1
  %16 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 0
  %17 = load float, float* %16, align 4
  %18 = fpext float %17 to double
  %19 = fcmp oeq double %18, 0.000000e+00
  br i1 %19, label %20, label %26

20:                                               ; preds = %15
  %21 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 1
  %22 = load float, float* %21, align 4
  %23 = fpext float %22 to double
  %24 = fcmp oeq double %23, 0.000000e+00
  br i1 %24, label %25, label %26

25:                                               ; preds = %20
  store i32 -23, i32* %2, align 4
  br label %57

26:                                               ; preds = %20, %15
  %27 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 0
  %28 = load float, float* %27, align 4
  %29 = fpext float %28 to double
  %30 = fcmp olt double %29, 0.000000e+00
  br i1 %30, label %31, label %38

31:                                               ; preds = %26
  %32 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 1
  %33 = load float, float* %32, align 4
  %34 = fpext float %33 to double
  %35 = call double @modf(double %34, double* %6) #9
  %36 = fcmp une double %35, 0.000000e+00
  br i1 %36, label %37, label %38

37:                                               ; preds = %31
  store i32 -23, i32* %2, align 4
  br label %57

38:                                               ; preds = %31, %26
  %39 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 0
  %40 = load float, float* %39, align 4
  %41 = fpext float %40 to double
  %42 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 1
  %43 = load float, float* %42, align 4
  %44 = fpext float %43 to double
  %45 = call double @pow(double %41, double %44) #9
  %46 = fptrunc double %45 to float
  store float %46, float* %5, align 4
  %47 = load float, float* %5, align 4
  %48 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %49 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %48, i64 -1
  %50 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %49, i32 0, i32 0
  %51 = bitcast %union.color_sample* %50 to float*
  store float %47, float* %51, align 8
  %52 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %53 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %52, i64 -1
  %54 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %53, i32 0, i32 1
  store i16 44, i16* %54, align 8
  %55 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %56 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %55, i64 -1
  store %struct.ref_s* %56, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %57

57:                                               ; preds = %38, %37, %25, %13
  %58 = load i32, i32* %2, align 4
  ret i32 %58
}

; Function Attrs: nounwind
declare dso_local double @modf(double, double*) #2

; Function Attrs: nounwind
declare dso_local double @pow(double, double) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zln(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca float, align 4
  %5 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = call i32 @num_params(%struct.ref_s* %6, i32 1, float* %4)
  store i32 %7, i32* %5, align 4
  %8 = load i32, i32* %5, align 4
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %1
  %11 = load i32, i32* %5, align 4
  store i32 %11, i32* %2, align 4
  br label %27

12:                                               ; preds = %1
  %13 = load float, float* %4, align 4
  %14 = fpext float %13 to double
  %15 = fcmp ole double %14, 0.000000e+00
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  store i32 -15, i32* %2, align 4
  br label %27

17:                                               ; preds = %12
  %18 = load float, float* %4, align 4
  %19 = fpext float %18 to double
  %20 = call double @log(double %19) #9
  %21 = fptrunc double %20 to float
  %22 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i32 0, i32 0
  %24 = bitcast %union.color_sample* %23 to float*
  store float %21, float* %24, align 8
  %25 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %26 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %25, i32 0, i32 1
  store i16 44, i16* %26, align 8
  store i32 0, i32* %2, align 4
  br label %27

27:                                               ; preds = %17, %16, %10
  %28 = load i32, i32* %2, align 4
  ret i32 %28
}

; Function Attrs: nounwind
declare dso_local double @log(double) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zlog(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca float, align 4
  %5 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = call i32 @num_params(%struct.ref_s* %6, i32 1, float* %4)
  store i32 %7, i32* %5, align 4
  %8 = load i32, i32* %5, align 4
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %1
  %11 = load i32, i32* %5, align 4
  store i32 %11, i32* %2, align 4
  br label %27

12:                                               ; preds = %1
  %13 = load float, float* %4, align 4
  %14 = fpext float %13 to double
  %15 = fcmp ole double %14, 0.000000e+00
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  store i32 -15, i32* %2, align 4
  br label %27

17:                                               ; preds = %12
  %18 = load float, float* %4, align 4
  %19 = fpext float %18 to double
  %20 = call double @log10(double %19) #9
  %21 = fptrunc double %20 to float
  %22 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i32 0, i32 0
  %24 = bitcast %union.color_sample* %23 to float*
  store float %21, float* %24, align 8
  %25 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %26 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %25, i32 0, i32 1
  store i16 44, i16* %26, align 8
  store i32 0, i32* %2, align 4
  br label %27

27:                                               ; preds = %17, %16, %10
  %28 = load i32, i32* %2, align 4
  ret i32 %28
}

; Function Attrs: nounwind
declare dso_local double @log10(double) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zrand(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i64, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load i64, i64* @rand_state, align 8
  %6 = mul i64 %5, 1103515245
  %7 = add i64 %6, 12345
  store i64 %7, i64* @rand_state, align 8
  %8 = shl i64 %7, 21
  store i64 %8, i64* %4, align 8
  %9 = load i64, i64* @rand_state, align 8
  %10 = mul i64 %9, 1103515245
  %11 = add i64 %10, 12345
  store i64 %11, i64* @rand_state, align 8
  %12 = shl i64 %11, 10
  %13 = load i64, i64* %4, align 8
  %14 = add i64 %13, %12
  store i64 %14, i64* %4, align 8
  %15 = load i64, i64* @rand_state, align 8
  %16 = mul i64 %15, 1103515245
  %17 = add i64 %16, 12345
  store i64 %17, i64* @rand_state, align 8
  %18 = lshr i64 %17, 3
  %19 = load i64, i64* %4, align 8
  %20 = add i64 %19, %18
  store i64 %20, i64* %4, align 8
  %21 = load i64, i64* %4, align 8
  %22 = and i64 %21, 2147483647
  store i64 %22, i64* %4, align 8
  %23 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %24 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %23, i64 1
  store %struct.ref_s* %24, %struct.ref_s** %3, align 8
  store %struct.ref_s* %24, %struct.ref_s** @osp, align 8
  %25 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %26 = icmp ugt %struct.ref_s* %24, %25
  br i1 %26, label %27, label %30

27:                                               ; preds = %1
  %28 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i64 -1
  store %struct.ref_s* %29, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %37

30:                                               ; preds = %1
  %31 = load i64, i64* %4, align 8
  %32 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %33 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %32, i32 0, i32 0
  %34 = bitcast %union.color_sample* %33 to i64*
  store i64 %31, i64* %34, align 8
  %35 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %36 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %35, i32 0, i32 1
  store i16 20, i16* %36, align 8
  store i32 0, i32* %2, align 4
  br label %37

37:                                               ; preds = %30, %27
  %38 = load i32, i32* %2, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zsrand(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i32 0, i32 1
  %6 = load i16, i16* %5, align 8
  %7 = zext i16 %6 to i32
  %8 = and i32 %7, 252
  %9 = icmp eq i32 %8, 20
  br i1 %9, label %11, label %10

10:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %18

11:                                               ; preds = %1
  %12 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %13 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %12, i32 0, i32 0
  %14 = bitcast %union.color_sample* %13 to i64*
  %15 = load i64, i64* %14, align 8
  store i64 %15, i64* @rand_state, align 8
  %16 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %16, i64 -1
  store %struct.ref_s* %17, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %18

18:                                               ; preds = %11, %10
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zrrand(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i64 1
  store %struct.ref_s* %5, %struct.ref_s** %3, align 8
  store %struct.ref_s* %5, %struct.ref_s** @osp, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %7 = icmp ugt %struct.ref_s* %5, %6
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i64 -1
  store %struct.ref_s* %10, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %18

11:                                               ; preds = %1
  %12 = load i64, i64* @rand_state, align 8
  %13 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i32 0, i32 0
  %15 = bitcast %union.color_sample* %14 to i64*
  store i64 %12, i64* %15, align 8
  %16 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %16, i32 0, i32 1
  store i16 20, i16* %17, align 8
  store i32 0, i32* %2, align 4
  br label %18

18:                                               ; preds = %11, %8
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @zmath_op_init() #0 {
  %1 = call i32 (%struct.op_def*, ...) bitcast (void (%struct.op_def*)* @z_op_init to i32 (%struct.op_def*, ...)*)(%struct.op_def* getelementptr inbounds ([13 x %struct.op_def], [13 x %struct.op_def]* @zmath_op_init.my_defs, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @zmatrix_init() #0 {
  %1 = alloca %struct.ref_s*, align 8
  %2 = alloca i32, align 4
  store %struct.ref_s* bitcast (%struct.gs_matrix_s* @gs_identity_matrix to %struct.ref_s*), %struct.ref_s** %1, align 8
  store i32 0, i32* %2, align 4
  br label %3

3:                                                ; preds = %16, %0
  %4 = load i32, i32* %2, align 4
  %5 = icmp slt i32 %4, 6
  br i1 %5, label %6, label %21

6:                                                ; preds = %3
  %7 = load %struct.ref_s*, %struct.ref_s** %1, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i32 0, i32 0
  %9 = bitcast %union.color_sample* %8 to float*
  %10 = load float, float* %9, align 8
  %11 = load %struct.ref_s*, %struct.ref_s** %1, align 8
  %12 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %11, i32 0, i32 0
  %13 = bitcast %union.color_sample* %12 to float*
  store float %10, float* %13, align 8
  %14 = load %struct.ref_s*, %struct.ref_s** %1, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 1
  store i16 44, i16* %15, align 8
  br label %16

16:                                               ; preds = %6
  %17 = load i32, i32* %2, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %2, align 4
  %19 = load %struct.ref_s*, %struct.ref_s** %1, align 8
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i32 1
  store %struct.ref_s* %20, %struct.ref_s** %1, align 8
  br label %3

21:                                               ; preds = %3
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcurrentmatrix(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = call i32 (%struct.ref_s*, ...) bitcast (i32 (%struct.ref_s*)* @write_matrix to i32 (%struct.ref_s*, ...)*)(%struct.ref_s* %5)
  store i32 %6, i32* %4, align 4
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %9, label %11

9:                                                ; preds = %1
  %10 = load i32, i32* %4, align 4
  store i32 %10, i32* %2, align 4
  br label %19

11:                                               ; preds = %1
  %12 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %13 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i32 0, i32 0
  %15 = bitcast %union.color_sample* %14 to %struct.ref_s**
  %16 = load %struct.ref_s*, %struct.ref_s** %15, align 8
  %17 = bitcast %struct.ref_s* %16 to %struct.gs_matrix_s*
  %18 = call i32 @gs_currentmatrix(%struct.gs_state_s* %12, %struct.gs_matrix_s* %17)
  store i32 0, i32* %2, align 4
  br label %19

19:                                               ; preds = %11, %9
  %20 = load i32, i32* %2, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zsetmatrix(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.gs_matrix_s, align 8
  %5 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = call i32 (%struct.ref_s*, %struct.gs_matrix_s*, ...) bitcast (i32 (%struct.ref_s*, %struct.gs_matrix_s*)* @read_matrix to i32 (%struct.ref_s*, %struct.gs_matrix_s*, ...)*)(%struct.ref_s* %6, %struct.gs_matrix_s* %4)
  store i32 %7, i32* %5, align 4
  %8 = load i32, i32* %5, align 4
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %1
  %11 = load i32, i32* %5, align 4
  store i32 %11, i32* %2, align 4
  br label %21

12:                                               ; preds = %1
  %13 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %14 = call i32 @gs_setmatrix(%struct.gs_state_s* %13, %struct.gs_matrix_s* %4)
  store i32 %14, i32* %5, align 4
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %12
  %17 = load i32, i32* %5, align 4
  store i32 %17, i32* %2, align 4
  br label %21

18:                                               ; preds = %12
  %19 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i64 -1
  store %struct.ref_s* %20, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %21

21:                                               ; preds = %18, %16, %10
  %22 = load i32, i32* %2, align 4
  ret i32 %22
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ztranslate(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  %5 = alloca [2 x float], align 4
  %6 = alloca %struct.gs_matrix_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = call i32 (%struct.ref_s*, ...) bitcast (i32 (%struct.ref_s*)* @write_matrix to i32 (%struct.ref_s*, ...)*)(%struct.ref_s* %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %11, label %27

11:                                               ; preds = %1
  %12 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %13 = getelementptr inbounds [2 x float], [2 x float]* %5, i64 0, i64 0
  %14 = call i32 @num_params(%struct.ref_s* %12, i32 2, float* %13)
  store i32 %14, i32* %4, align 4
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %11
  %17 = load i32, i32* %4, align 4
  store i32 %17, i32* %2, align 4
  br label %62

18:                                               ; preds = %11
  %19 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %20 = getelementptr inbounds [2 x float], [2 x float]* %5, i64 0, i64 0
  %21 = load float, float* %20, align 4
  %22 = fpext float %21 to double
  %23 = getelementptr inbounds [2 x float], [2 x float]* %5, i64 0, i64 1
  %24 = load float, float* %23, align 4
  %25 = fpext float %24 to double
  %26 = call i32 @gs_translate(%struct.gs_state_s* %19, double %22, double %25)
  store i32 %26, i32* %4, align 4
  br label %54

27:                                               ; preds = %1
  %28 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i32 0, i32 0
  %30 = bitcast %union.color_sample* %29 to %struct.ref_s**
  %31 = load %struct.ref_s*, %struct.ref_s** %30, align 8
  %32 = bitcast %struct.ref_s* %31 to %struct.gs_matrix_s*
  store %struct.gs_matrix_s* %32, %struct.gs_matrix_s** %6, align 8
  %33 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %34 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %33, i64 -1
  %35 = getelementptr inbounds [2 x float], [2 x float]* %5, i64 0, i64 0
  %36 = call i32 @num_params(%struct.ref_s* %34, i32 2, float* %35)
  store i32 %36, i32* %4, align 4
  %37 = icmp slt i32 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %27
  %39 = load i32, i32* %4, align 4
  store i32 %39, i32* %2, align 4
  br label %62

40:                                               ; preds = %27
  %41 = getelementptr inbounds [2 x float], [2 x float]* %5, i64 0, i64 0
  %42 = load float, float* %41, align 4
  %43 = fpext float %42 to double
  %44 = getelementptr inbounds [2 x float], [2 x float]* %5, i64 0, i64 1
  %45 = load float, float* %44, align 4
  %46 = fpext float %45 to double
  %47 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %48 = call i32 @gs_make_translation(double %43, double %46, %struct.gs_matrix_s* %47)
  store i32 %48, i32* %4, align 4
  %49 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %50 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %49, i64 -2
  %51 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %52 = bitcast %struct.ref_s* %50 to i8*
  %53 = bitcast %struct.ref_s* %51 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 16, i1 false)
  br label %54

54:                                               ; preds = %40, %18
  %55 = load i32, i32* %4, align 4
  %56 = icmp sge i32 %55, 0
  br i1 %56, label %57, label %60

57:                                               ; preds = %54
  %58 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %59 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %58, i64 -2
  store %struct.ref_s* %59, %struct.ref_s** @osp, align 8
  br label %60

60:                                               ; preds = %57, %54
  %61 = load i32, i32* %4, align 4
  store i32 %61, i32* %2, align 4
  br label %62

62:                                               ; preds = %60, %38, %16
  %63 = load i32, i32* %2, align 4
  ret i32 %63
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zscale(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca [2 x float], align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.gs_matrix_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = call i32 (%struct.ref_s*, ...) bitcast (i32 (%struct.ref_s*)* @write_matrix to i32 (%struct.ref_s*, ...)*)(%struct.ref_s* %7)
  store i32 %8, i32* %5, align 4
  %9 = load i32, i32* %5, align 4
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %11, label %27

11:                                               ; preds = %1
  %12 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %13 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 0
  %14 = call i32 @num_params(%struct.ref_s* %12, i32 2, float* %13)
  store i32 %14, i32* %5, align 4
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %11
  %17 = load i32, i32* %5, align 4
  store i32 %17, i32* %2, align 4
  br label %62

18:                                               ; preds = %11
  %19 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %20 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 0
  %21 = load float, float* %20, align 4
  %22 = fpext float %21 to double
  %23 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 1
  %24 = load float, float* %23, align 4
  %25 = fpext float %24 to double
  %26 = call i32 @gs_scale(%struct.gs_state_s* %19, double %22, double %25)
  store i32 %26, i32* %5, align 4
  br label %54

27:                                               ; preds = %1
  %28 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i32 0, i32 0
  %30 = bitcast %union.color_sample* %29 to %struct.ref_s**
  %31 = load %struct.ref_s*, %struct.ref_s** %30, align 8
  %32 = bitcast %struct.ref_s* %31 to %struct.gs_matrix_s*
  store %struct.gs_matrix_s* %32, %struct.gs_matrix_s** %6, align 8
  %33 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %34 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %33, i64 -1
  %35 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 0
  %36 = call i32 @num_params(%struct.ref_s* %34, i32 2, float* %35)
  store i32 %36, i32* %5, align 4
  %37 = icmp slt i32 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %27
  %39 = load i32, i32* %5, align 4
  store i32 %39, i32* %2, align 4
  br label %62

40:                                               ; preds = %27
  %41 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 0
  %42 = load float, float* %41, align 4
  %43 = fpext float %42 to double
  %44 = getelementptr inbounds [2 x float], [2 x float]* %4, i64 0, i64 1
  %45 = load float, float* %44, align 4
  %46 = fpext float %45 to double
  %47 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %48 = call i32 @gs_make_scaling(double %43, double %46, %struct.gs_matrix_s* %47)
  store i32 %48, i32* %5, align 4
  %49 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %50 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %49, i64 -2
  %51 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %52 = bitcast %struct.ref_s* %50 to i8*
  %53 = bitcast %struct.ref_s* %51 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 16, i1 false)
  br label %54

54:                                               ; preds = %40, %18
  %55 = load i32, i32* %5, align 4
  %56 = icmp sge i32 %55, 0
  br i1 %56, label %57, label %60

57:                                               ; preds = %54
  %58 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %59 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %58, i64 -2
  store %struct.ref_s* %59, %struct.ref_s** @osp, align 8
  br label %60

60:                                               ; preds = %57, %54
  %61 = load i32, i32* %5, align 4
  store i32 %61, i32* %2, align 4
  br label %62

62:                                               ; preds = %60, %38, %16
  %63 = load i32, i32* %2, align 4
  ret i32 %63
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zrotate(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  %5 = alloca float, align 4
  %6 = alloca %struct.gs_matrix_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = call i32 (%struct.ref_s*, ...) bitcast (i32 (%struct.ref_s*)* @write_matrix to i32 (%struct.ref_s*, ...)*)(%struct.ref_s* %7)
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %11, label %22

11:                                               ; preds = %1
  %12 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %13 = call i32 @num_params(%struct.ref_s* %12, i32 1, float* %5)
  store i32 %13, i32* %4, align 4
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %11
  %16 = load i32, i32* %4, align 4
  store i32 %16, i32* %2, align 4
  br label %52

17:                                               ; preds = %11
  %18 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %19 = load float, float* %5, align 4
  %20 = fpext float %19 to double
  %21 = call i32 @gs_rotate(%struct.gs_state_s* %18, double %20)
  store i32 %21, i32* %4, align 4
  br label %44

22:                                               ; preds = %1
  %23 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %24 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %23, i32 0, i32 0
  %25 = bitcast %union.color_sample* %24 to %struct.ref_s**
  %26 = load %struct.ref_s*, %struct.ref_s** %25, align 8
  %27 = bitcast %struct.ref_s* %26 to %struct.gs_matrix_s*
  store %struct.gs_matrix_s* %27, %struct.gs_matrix_s** %6, align 8
  %28 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i64 -1
  %30 = call i32 @num_params(%struct.ref_s* %29, i32 1, float* %5)
  store i32 %30, i32* %4, align 4
  %31 = icmp slt i32 %30, 0
  br i1 %31, label %32, label %34

32:                                               ; preds = %22
  %33 = load i32, i32* %4, align 4
  store i32 %33, i32* %2, align 4
  br label %52

34:                                               ; preds = %22
  %35 = load float, float* %5, align 4
  %36 = fpext float %35 to double
  %37 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %6, align 8
  %38 = call i32 @gs_make_rotation(double %36, %struct.gs_matrix_s* %37)
  store i32 %38, i32* %4, align 4
  %39 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %40 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %39, i64 -1
  %41 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %42 = bitcast %struct.ref_s* %40 to i8*
  %43 = bitcast %struct.ref_s* %41 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* align 8 %43, i64 16, i1 false)
  br label %44

44:                                               ; preds = %34, %17
  %45 = load i32, i32* %4, align 4
  %46 = icmp sge i32 %45, 0
  br i1 %46, label %47, label %50

47:                                               ; preds = %44
  %48 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %49 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %48, i64 -1
  store %struct.ref_s* %49, %struct.ref_s** @osp, align 8
  br label %50

50:                                               ; preds = %47, %44
  %51 = load i32, i32* %4, align 4
  store i32 %51, i32* %2, align 4
  br label %52

52:                                               ; preds = %50, %32, %15
  %53 = load i32, i32* %2, align 4
  ret i32 %53
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zconcat(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.gs_matrix_s, align 8
  %5 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = call i32 (%struct.ref_s*, %struct.gs_matrix_s*, ...) bitcast (i32 (%struct.ref_s*, %struct.gs_matrix_s*)* @read_matrix to i32 (%struct.ref_s*, %struct.gs_matrix_s*, ...)*)(%struct.ref_s* %6, %struct.gs_matrix_s* %4)
  store i32 %7, i32* %5, align 4
  %8 = load i32, i32* %5, align 4
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %1
  %11 = load i32, i32* %5, align 4
  store i32 %11, i32* %2, align 4
  br label %22

12:                                               ; preds = %1
  %13 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %14 = call i32 @gs_concat(%struct.gs_state_s* %13, %struct.gs_matrix_s* %4)
  store i32 %14, i32* %5, align 4
  %15 = load i32, i32* %5, align 4
  %16 = icmp slt i32 %15, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %12
  %18 = load i32, i32* %5, align 4
  store i32 %18, i32* %2, align 4
  br label %22

19:                                               ; preds = %12
  %20 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %21 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %20, i64 -1
  store %struct.ref_s* %21, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %22

22:                                               ; preds = %19, %17, %10
  %23 = load i32, i32* %2, align 4
  ret i32 %23
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zconcatmatrix(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.gs_matrix_s, align 8
  %5 = alloca %struct.gs_matrix_s, align 8
  %6 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i64 -2
  %9 = call i32 (%struct.ref_s*, %struct.gs_matrix_s*, ...) bitcast (i32 (%struct.ref_s*, %struct.gs_matrix_s*)* @read_matrix to i32 (%struct.ref_s*, %struct.gs_matrix_s*, ...)*)(%struct.ref_s* %8, %struct.gs_matrix_s* %4)
  store i32 %9, i32* %6, align 4
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %28, label %11

11:                                               ; preds = %1
  %12 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %13 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %12, i64 -1
  %14 = call i32 (%struct.ref_s*, %struct.gs_matrix_s*, ...) bitcast (i32 (%struct.ref_s*, %struct.gs_matrix_s*)* @read_matrix to i32 (%struct.ref_s*, %struct.gs_matrix_s*, ...)*)(%struct.ref_s* %13, %struct.gs_matrix_s* %5)
  store i32 %14, i32* %6, align 4
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %28, label %16

16:                                               ; preds = %11
  %17 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %18 = call i32 (%struct.ref_s*, ...) bitcast (i32 (%struct.ref_s*)* @write_matrix to i32 (%struct.ref_s*, ...)*)(%struct.ref_s* %17)
  store i32 %18, i32* %6, align 4
  %19 = icmp slt i32 %18, 0
  br i1 %19, label %28, label %20

20:                                               ; preds = %16
  %21 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i32 0, i32 0
  %23 = bitcast %union.color_sample* %22 to %struct.ref_s**
  %24 = load %struct.ref_s*, %struct.ref_s** %23, align 8
  %25 = bitcast %struct.ref_s* %24 to %struct.gs_matrix_s*
  %26 = call i32 @gs_matrix_multiply(%struct.gs_matrix_s* %4, %struct.gs_matrix_s* %5, %struct.gs_matrix_s* %25)
  store i32 %26, i32* %6, align 4
  %27 = icmp slt i32 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %20, %16, %11, %1
  %29 = load i32, i32* %6, align 4
  store i32 %29, i32* %2, align 4
  br label %39

30:                                               ; preds = %20
  %31 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %32 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %31, i64 -2
  %33 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %34 = bitcast %struct.ref_s* %32 to i8*
  %35 = bitcast %struct.ref_s* %33 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 %35, i64 16, i1 false)
  %36 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %37 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %36, i64 -2
  store %struct.ref_s* %37, %struct.ref_s** @osp, align 8
  %38 = load i32, i32* %6, align 4
  store i32 %38, i32* %2, align 4
  br label %39

39:                                               ; preds = %30, %28
  %40 = load i32, i32* %2, align 4
  ret i32 %40
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ztransform(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %4 = call i32 @common_transform(%struct.ref_s* %3, i32 (%struct.gs_state_s*, double, double, %struct.gs_point_s*)* @gs_transform, i32 (double, double, %struct.gs_matrix_s*, %struct.gs_point_s*)* @gs_point_transform)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @common_transform(%struct.ref_s* %0, i32 (%struct.gs_state_s*, double, double, %struct.gs_point_s*)* %1, i32 (double, double, %struct.gs_matrix_s*, %struct.gs_point_s*)* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.ref_s*, align 8
  %6 = alloca i32 (%struct.gs_state_s*, double, double, %struct.gs_point_s*)*, align 8
  %7 = alloca i32 (double, double, %struct.gs_matrix_s*, %struct.gs_point_s*)*, align 8
  %8 = alloca [2 x float], align 4
  %9 = alloca %struct.gs_point_s, align 4
  %10 = alloca i32, align 4
  %11 = alloca %struct.gs_matrix_s, align 8
  %12 = alloca %struct.gs_matrix_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %5, align 8
  store i32 (%struct.gs_state_s*, double, double, %struct.gs_point_s*)* %1, i32 (%struct.gs_state_s*, double, double, %struct.gs_point_s*)** %6, align 8
  store i32 (double, double, %struct.gs_matrix_s*, %struct.gs_point_s*)* %2, i32 (double, double, %struct.gs_matrix_s*, %struct.gs_point_s*)** %7, align 8
  %13 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i32 0, i32 1
  %15 = load i16, i16* %14, align 8
  %16 = zext i16 %15 to i32
  %17 = and i32 %16, 255
  %18 = ashr i32 %17, 2
  switch i32 %18, label %61 [
    i32 11, label %19
    i32 5, label %25
    i32 0, label %32
    i32 10, label %32
  ]

19:                                               ; preds = %3
  %20 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %21 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %20, i32 0, i32 0
  %22 = bitcast %union.color_sample* %21 to float*
  %23 = load float, float* %22, align 8
  %24 = getelementptr inbounds [2 x float], [2 x float]* %8, i64 0, i64 1
  store float %23, float* %24, align 4
  br label %62

25:                                               ; preds = %3
  %26 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %27 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %26, i32 0, i32 0
  %28 = bitcast %union.color_sample* %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = sitofp i64 %29 to float
  %31 = getelementptr inbounds [2 x float], [2 x float]* %8, i64 0, i64 1
  store float %30, float* %31, align 4
  br label %62

32:                                               ; preds = %3, %3
  store %struct.gs_matrix_s* %11, %struct.gs_matrix_s** %12, align 8
  %33 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %34 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %12, align 8
  %35 = call i32 (%struct.ref_s*, %struct.gs_matrix_s*, ...) bitcast (i32 (%struct.ref_s*, %struct.gs_matrix_s*)* @read_matrix to i32 (%struct.ref_s*, %struct.gs_matrix_s*, ...)*)(%struct.ref_s* %33, %struct.gs_matrix_s* %34)
  store i32 %35, i32* %10, align 4
  %36 = icmp slt i32 %35, 0
  br i1 %36, label %54, label %37

37:                                               ; preds = %32
  %38 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %39 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %38, i64 -1
  %40 = getelementptr inbounds [2 x float], [2 x float]* %8, i64 0, i64 0
  %41 = call i32 @num_params(%struct.ref_s* %39, i32 2, float* %40)
  store i32 %41, i32* %10, align 4
  %42 = icmp slt i32 %41, 0
  br i1 %42, label %54, label %43

43:                                               ; preds = %37
  %44 = load i32 (double, double, %struct.gs_matrix_s*, %struct.gs_point_s*)*, i32 (double, double, %struct.gs_matrix_s*, %struct.gs_point_s*)** %7, align 8
  %45 = getelementptr inbounds [2 x float], [2 x float]* %8, i64 0, i64 0
  %46 = load float, float* %45, align 4
  %47 = fpext float %46 to double
  %48 = getelementptr inbounds [2 x float], [2 x float]* %8, i64 0, i64 1
  %49 = load float, float* %48, align 4
  %50 = fpext float %49 to double
  %51 = load %struct.gs_matrix_s*, %struct.gs_matrix_s** %12, align 8
  %52 = call i32 %44(double %47, double %50, %struct.gs_matrix_s* %51, %struct.gs_point_s* %9)
  store i32 %52, i32* %10, align 4
  %53 = icmp slt i32 %52, 0
  br i1 %53, label %54, label %56

54:                                               ; preds = %43, %37, %32
  %55 = load i32, i32* %10, align 4
  store i32 %55, i32* %4, align 4
  br label %117

56:                                               ; preds = %43
  %57 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %58 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %57, i32 -1
  store %struct.ref_s* %58, %struct.ref_s** %5, align 8
  %59 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %60 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %59, i64 -1
  store %struct.ref_s* %60, %struct.ref_s** @osp, align 8
  br label %100

61:                                               ; preds = %3
  store i32 -20, i32* %4, align 4
  br label %117

62:                                               ; preds = %25, %19
  %63 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %64 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %63, i64 -1
  %65 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %64, i32 0, i32 1
  %66 = load i16, i16* %65, align 8
  %67 = zext i16 %66 to i32
  %68 = and i32 %67, 255
  %69 = ashr i32 %68, 2
  switch i32 %69, label %85 [
    i32 11, label %70
    i32 5, label %77
  ]

70:                                               ; preds = %62
  %71 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %72 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %71, i64 -1
  %73 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %72, i32 0, i32 0
  %74 = bitcast %union.color_sample* %73 to float*
  %75 = load float, float* %74, align 8
  %76 = getelementptr inbounds [2 x float], [2 x float]* %8, i64 0, i64 0
  store float %75, float* %76, align 4
  br label %86

77:                                               ; preds = %62
  %78 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %79 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %78, i64 -1
  %80 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %79, i32 0, i32 0
  %81 = bitcast %union.color_sample* %80 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = sitofp i64 %82 to float
  %84 = getelementptr inbounds [2 x float], [2 x float]* %8, i64 0, i64 0
  store float %83, float* %84, align 4
  br label %86

85:                                               ; preds = %62
  store i32 -20, i32* %4, align 4
  br label %117

86:                                               ; preds = %77, %70
  %87 = load i32 (%struct.gs_state_s*, double, double, %struct.gs_point_s*)*, i32 (%struct.gs_state_s*, double, double, %struct.gs_point_s*)** %6, align 8
  %88 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %89 = getelementptr inbounds [2 x float], [2 x float]* %8, i64 0, i64 0
  %90 = load float, float* %89, align 4
  %91 = fpext float %90 to double
  %92 = getelementptr inbounds [2 x float], [2 x float]* %8, i64 0, i64 1
  %93 = load float, float* %92, align 4
  %94 = fpext float %93 to double
  %95 = call i32 %87(%struct.gs_state_s* %88, double %91, double %94, %struct.gs_point_s* %9)
  store i32 %95, i32* %10, align 4
  %96 = icmp slt i32 %95, 0
  br i1 %96, label %97, label %99

97:                                               ; preds = %86
  %98 = load i32, i32* %10, align 4
  store i32 %98, i32* %4, align 4
  br label %117

99:                                               ; preds = %86
  br label %100

100:                                              ; preds = %99, %56
  %101 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %9, i32 0, i32 0
  %102 = load float, float* %101, align 4
  %103 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %104 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %103, i64 -1
  %105 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %104, i32 0, i32 0
  %106 = bitcast %union.color_sample* %105 to float*
  store float %102, float* %106, align 8
  %107 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %108 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %107, i64 -1
  %109 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %108, i32 0, i32 1
  store i16 44, i16* %109, align 8
  %110 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %9, i32 0, i32 1
  %111 = load float, float* %110, align 4
  %112 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %113 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %112, i32 0, i32 0
  %114 = bitcast %union.color_sample* %113 to float*
  store float %111, float* %114, align 8
  %115 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %116 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %115, i32 0, i32 1
  store i16 44, i16* %116, align 8
  store i32 0, i32* %4, align 4
  br label %117

117:                                              ; preds = %100, %97, %85, %61, %54
  %118 = load i32, i32* %4, align 4
  ret i32 %118
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zdtransform(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %4 = call i32 @common_transform(%struct.ref_s* %3, i32 (%struct.gs_state_s*, double, double, %struct.gs_point_s*)* @gs_dtransform, i32 (double, double, %struct.gs_matrix_s*, %struct.gs_point_s*)* @gs_distance_transform)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zitransform(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %4 = call i32 @common_transform(%struct.ref_s* %3, i32 (%struct.gs_state_s*, double, double, %struct.gs_point_s*)* @gs_itransform, i32 (double, double, %struct.gs_matrix_s*, %struct.gs_point_s*)* @gs_point_transform_inverse)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zidtransform(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %4 = call i32 @common_transform(%struct.ref_s* %3, i32 (%struct.gs_state_s*, double, double, %struct.gs_point_s*)* @gs_idtransform, i32 (double, double, %struct.gs_matrix_s*, %struct.gs_point_s*)* @gs_distance_transform_inverse)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zinvertmatrix(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.gs_matrix_s, align 8
  %5 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i64 -1
  %8 = call i32 (%struct.ref_s*, %struct.gs_matrix_s*, ...) bitcast (i32 (%struct.ref_s*, %struct.gs_matrix_s*)* @read_matrix to i32 (%struct.ref_s*, %struct.gs_matrix_s*, ...)*)(%struct.ref_s* %7, %struct.gs_matrix_s* %4)
  store i32 %8, i32* %5, align 4
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %22, label %10

10:                                               ; preds = %1
  %11 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %12 = call i32 (%struct.ref_s*, ...) bitcast (i32 (%struct.ref_s*)* @write_matrix to i32 (%struct.ref_s*, ...)*)(%struct.ref_s* %11)
  store i32 %12, i32* %5, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %22, label %14

14:                                               ; preds = %10
  %15 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %16 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %15, i32 0, i32 0
  %17 = bitcast %union.color_sample* %16 to %struct.ref_s**
  %18 = load %struct.ref_s*, %struct.ref_s** %17, align 8
  %19 = bitcast %struct.ref_s* %18 to %struct.gs_matrix_s*
  %20 = call i32 @gs_matrix_invert(%struct.gs_matrix_s* %4, %struct.gs_matrix_s* %19)
  store i32 %20, i32* %5, align 4
  %21 = icmp slt i32 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %14, %10, %1
  %23 = load i32, i32* %5, align 4
  store i32 %23, i32* %2, align 4
  br label %33

24:                                               ; preds = %14
  %25 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %26 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %25, i64 -1
  %27 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %28 = bitcast %struct.ref_s* %26 to i8*
  %29 = bitcast %struct.ref_s* %27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* align 8 %29, i64 16, i1 false)
  %30 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %31 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %30, i64 -1
  store %struct.ref_s* %31, %struct.ref_s** @osp, align 8
  %32 = load i32, i32* %5, align 4
  store i32 %32, i32* %2, align 4
  br label %33

33:                                               ; preds = %24, %22
  %34 = load i32, i32* %2, align 4
  ret i32 %34
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @zmatrix_op_init() #0 {
  %1 = call i32 (%struct.op_def*, ...) bitcast (void (%struct.op_def*)* @z_op_init to i32 (%struct.op_def*, ...)*)(%struct.op_def* getelementptr inbounds ([13 x %struct.op_def], [13 x %struct.op_def]* @zmatrix_op_init.my_defs, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zbind(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca %struct.ref_s*, align 8
  %6 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  store %struct.ref_s* %7, %struct.ref_s** %4, align 8
  %8 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 1
  %10 = load i16, i16* %9, align 8
  %11 = zext i16 %10 to i32
  %12 = and i32 %11, 255
  %13 = ashr i32 %12, 2
  switch i32 %13, label %15 [
    i32 0, label %14
    i32 10, label %14
  ]

14:                                               ; preds = %1, %1
  br label %16

15:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %135

16:                                               ; preds = %14
  %17 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i32 1
  store %struct.ref_s* %18, %struct.ref_s** %4, align 8
  %19 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %20 = bitcast %struct.ref_s* %18 to i8*
  %21 = bitcast %struct.ref_s* %19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 8 %21, i64 16, i1 false)
  br label %22

22:                                               ; preds = %131, %16
  %23 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %24 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %25 = icmp ugt %struct.ref_s* %23, %24
  br i1 %25, label %26, label %134

26:                                               ; preds = %22
  br label %27

27:                                               ; preds = %130, %26
  %28 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i32 0, i32 2
  %30 = load i16, i16* %29, align 2
  %31 = icmp ne i16 %30, 0
  br i1 %31, label %32, label %131

32:                                               ; preds = %27
  %33 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %34 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %33, i32 0, i32 0
  %35 = bitcast %union.color_sample* %34 to %struct.ref_s**
  %36 = load %struct.ref_s*, %struct.ref_s** %35, align 8
  %37 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %36, i32 1
  store %struct.ref_s* %37, %struct.ref_s** %35, align 8
  store %struct.ref_s* %36, %struct.ref_s** %5, align 8
  %38 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %39 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %38, i32 0, i32 2
  %40 = load i16, i16* %39, align 2
  %41 = add i16 %40, -1
  store i16 %41, i16* %39, align 2
  %42 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %43 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %42, i32 0, i32 1
  %44 = load i16, i16* %43, align 8
  %45 = zext i16 %44 to i32
  %46 = and i32 %45, 255
  %47 = ashr i32 %46, 2
  switch i32 %47, label %130 [
    i32 7, label %48
    i32 0, label %95
    i32 10, label %105
  ]

48:                                               ; preds = %32
  %49 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %50 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %49, i32 0, i32 1
  %51 = load i16, i16* %50, align 8
  %52 = zext i16 %51 to i32
  %53 = xor i32 %52, -1
  %54 = and i32 %53, 1
  %55 = icmp ne i32 %54, 0
  br i1 %55, label %94, label %56

56:                                               ; preds = %48
  %57 = load %struct.ref_s*, %struct.ref_s** @dsp, align 8
  %58 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %59 = call i32 @dict_lookup(%struct.ref_s* getelementptr inbounds ([20 x %struct.ref_s], [20 x %struct.ref_s]* @dstack, i64 0, i64 0), %struct.ref_s* %57, %struct.ref_s* %58, %struct.ref_s** %6)
  %60 = icmp sgt i32 %59, 0
  br i1 %60, label %61, label %93

61:                                               ; preds = %56
  %62 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %63 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %62, i32 0, i32 1
  %64 = load i16, i16* %63, align 8
  %65 = zext i16 %64 to i32
  %66 = and i32 %65, 255
  %67 = ashr i32 %66, 2
  %68 = icmp sge i32 %67, 16
  br i1 %68, label %69, label %70

69:                                               ; preds = %61
  br label %77

70:                                               ; preds = %61
  %71 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %72 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %71, i32 0, i32 1
  %73 = load i16, i16* %72, align 8
  %74 = zext i16 %73 to i32
  %75 = and i32 %74, 255
  %76 = ashr i32 %75, 2
  br label %77

77:                                               ; preds = %70, %69
  %78 = phi i32 [ 9, %69 ], [ %76, %70 ]
  %79 = icmp eq i32 %78, 9
  br i1 %79, label %80, label %93

80:                                               ; preds = %77
  %81 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %82 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %81, i32 0, i32 1
  %83 = load i16, i16* %82, align 8
  %84 = zext i16 %83 to i32
  %85 = xor i32 %84, -1
  %86 = and i32 %85, 1
  %87 = icmp ne i32 %86, 0
  br i1 %87, label %93, label %88

88:                                               ; preds = %80
  %89 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %90 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %91 = bitcast %struct.ref_s* %89 to i8*
  %92 = bitcast %struct.ref_s* %90 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %91, i8* align 8 %92, i64 16, i1 false)
  br label %93

93:                                               ; preds = %88, %80, %77, %56
  br label %94

94:                                               ; preds = %93, %48
  br label %130

95:                                               ; preds = %32
  %96 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %97 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %96, i32 0, i32 1
  %98 = load i16, i16* %97, align 8
  %99 = zext i16 %98 to i32
  %100 = xor i32 %99, -1
  %101 = and i32 %100, 256
  %102 = icmp ne i32 %101, 0
  br i1 %102, label %103, label %104

103:                                              ; preds = %95
  br label %130

104:                                              ; preds = %95
  br label %105

105:                                              ; preds = %104, %32
  %106 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %107 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %106, i32 0, i32 1
  %108 = load i16, i16* %107, align 8
  %109 = zext i16 %108 to i32
  %110 = xor i32 %109, -1
  %111 = and i32 %110, 1
  %112 = icmp ne i32 %111, 0
  br i1 %112, label %129, label %113

113:                                              ; preds = %105
  %114 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %115 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %116 = icmp ult %struct.ref_s* %114, %115
  br i1 %116, label %117, label %129

117:                                              ; preds = %113
  %118 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %119 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %118, i32 0, i32 1
  %120 = load i16, i16* %119, align 8
  %121 = zext i16 %120 to i32
  %122 = and i32 %121, -257
  %123 = trunc i32 %122 to i16
  store i16 %123, i16* %119, align 8
  %124 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %125 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %124, i32 1
  store %struct.ref_s* %125, %struct.ref_s** %4, align 8
  %126 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %127 = bitcast %struct.ref_s* %125 to i8*
  %128 = bitcast %struct.ref_s* %126 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %127, i8* align 8 %128, i64 16, i1 false)
  br label %129

129:                                              ; preds = %117, %113, %105
  br label %130

130:                                              ; preds = %129, %103, %94, %32
  br label %27

131:                                              ; preds = %27
  %132 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %133 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %132, i32 -1
  store %struct.ref_s* %133, %struct.ref_s** %4, align 8
  br label %22

134:                                              ; preds = %22
  store i32 0, i32* %2, align 4
  br label %135

135:                                              ; preds = %134, %15
  %136 = load i32, i32* %2, align 4
  ret i32 %136
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcurrenttime(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca [2 x i64], align 16
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds [2 x i64], [2 x i64]* %4, i64 0, i64 0
  %6 = call i32 (i64*, ...) bitcast (void (i64*)* @gs_get_clock to i32 (i64*, ...)*)(i64* %5)
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i64 1
  store %struct.ref_s* %8, %struct.ref_s** %3, align 8
  store %struct.ref_s* %8, %struct.ref_s** @osp, align 8
  %9 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %10 = icmp ugt %struct.ref_s* %8, %9
  br i1 %10, label %11, label %14

11:                                               ; preds = %1
  %12 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %13 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %12, i64 -1
  store %struct.ref_s* %13, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %30

14:                                               ; preds = %1
  %15 = getelementptr inbounds [2 x i64], [2 x i64]* %4, i64 0, i64 0
  %16 = load i64, i64* %15, align 16
  %17 = sitofp i64 %16 to double
  %18 = fmul double %17, 1.440000e+03
  %19 = getelementptr inbounds [2 x i64], [2 x i64]* %4, i64 0, i64 1
  %20 = load i64, i64* %19, align 8
  %21 = sitofp i64 %20 to double
  %22 = fdiv double %21, 6.000000e+04
  %23 = fadd double %18, %22
  %24 = fptrunc double %23 to float
  %25 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %26 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %25, i32 0, i32 0
  %27 = bitcast %union.color_sample* %26 to float*
  store float %24, float* %27, align 8
  %28 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i32 0, i32 1
  store i16 44, i16* %29, align 8
  store i32 0, i32* %2, align 4
  br label %30

30:                                               ; preds = %14, %11
  %31 = load i32, i32* %2, align 4
  ret i32 %31
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zgetenv(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = zext i16 %9 to i32
  %11 = and i32 %10, 252
  %12 = icmp eq i32 %11, 52
  br i1 %12, label %14, label %13

13:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %68

14:                                               ; preds = %1
  %15 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %16 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %15, i32 0, i32 1
  %17 = load i16, i16* %16, align 8
  %18 = zext i16 %17 to i32
  %19 = xor i32 %18, -1
  %20 = and i32 %19, 512
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %22, label %23

22:                                               ; preds = %14
  store i32 -7, i32* %2, align 4
  br label %68

23:                                               ; preds = %14
  %24 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %25 = call i8* @ref_to_string(%struct.ref_s* %24, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.589, i64 0, i64 0))
  store i8* %25, i8** %4, align 8
  %26 = load i8*, i8** %4, align 8
  %27 = icmp eq i8* %26, null
  br i1 %27, label %28, label %29

28:                                               ; preds = %23
  store i32 -25, i32* %2, align 4
  br label %68

29:                                               ; preds = %23
  %30 = load i8*, i8** %4, align 8
  %31 = call i8* @getenv(i8* %30)
  store i8* %31, i8** %5, align 8
  %32 = load i8*, i8** %4, align 8
  %33 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %34 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %33, i32 0, i32 2
  %35 = load i16, i16* %34, align 2
  %36 = zext i16 %35 to i32
  %37 = add nsw i32 %36, 1
  call void @alloc_free(i8* %32, i32 %37, i32 1, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.589, i64 0, i64 0))
  %38 = load i8*, i8** %5, align 8
  %39 = icmp eq i8* %38, null
  br i1 %39, label %40, label %46

40:                                               ; preds = %29
  %41 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %42 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %41, i32 0, i32 0
  %43 = bitcast %union.color_sample* %42 to i16*
  store i16 0, i16* %43, align 8
  %44 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %45 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %44, i32 0, i32 1
  store i16 4, i16* %45, align 8
  store i32 0, i32* %2, align 4
  br label %68

46:                                               ; preds = %29
  %47 = load i8*, i8** %5, align 8
  %48 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %49 = call i32 (i8*, %struct.ref_s*, i8*, ...) bitcast (i32 (i8*, %struct.ref_s*, i8*)* @string_to_ref to i32 (i8*, %struct.ref_s*, i8*, ...)*)(i8* %47, %struct.ref_s* %48, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1.590, i64 0, i64 0))
  store i32 %49, i32* %6, align 4
  %50 = load i32, i32* %6, align 4
  %51 = icmp slt i32 %50, 0
  br i1 %51, label %52, label %54

52:                                               ; preds = %46
  %53 = load i32, i32* %6, align 4
  store i32 %53, i32* %2, align 4
  br label %68

54:                                               ; preds = %46
  %55 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %56 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %55, i64 1
  store %struct.ref_s* %56, %struct.ref_s** %3, align 8
  store %struct.ref_s* %56, %struct.ref_s** @osp, align 8
  %57 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %58 = icmp ugt %struct.ref_s* %56, %57
  br i1 %58, label %59, label %62

59:                                               ; preds = %54
  %60 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %61 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %60, i64 -1
  store %struct.ref_s* %61, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %68

62:                                               ; preds = %54
  %63 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %64 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %63, i32 0, i32 0
  %65 = bitcast %union.color_sample* %64 to i16*
  store i16 1, i16* %65, align 8
  %66 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %67 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %66, i32 0, i32 1
  store i16 4, i16* %67, align 8
  store i32 0, i32* %2, align 4
  br label %68

68:                                               ; preds = %62, %59, %52, %40, %28, %22, %13
  %69 = load i32, i32* %2, align 4
  ret i32 %69
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zsetdebug(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i64 -1
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i32 0, i32 1
  %7 = load i16, i16* %6, align 8
  %8 = zext i16 %7 to i32
  %9 = and i32 %8, 252
  %10 = icmp eq i32 %9, 52
  br i1 %10, label %12, label %11

11:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %33

12:                                               ; preds = %1
  %13 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i64 -1
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 1
  %16 = load i16, i16* %15, align 8
  %17 = zext i16 %16 to i32
  %18 = xor i32 %17, -1
  %19 = and i32 %18, 512
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %12
  store i32 -7, i32* %2, align 4
  br label %33

22:                                               ; preds = %12
  %23 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %24 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %23, i32 0, i32 1
  %25 = load i16, i16* %24, align 8
  %26 = zext i16 %25 to i32
  %27 = and i32 %26, 252
  %28 = icmp eq i32 %27, 4
  br i1 %28, label %30, label %29

29:                                               ; preds = %22
  store i32 -20, i32* %2, align 4
  br label %33

30:                                               ; preds = %22
  %31 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %32 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %31, i64 -2
  store %struct.ref_s* %32, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %33

33:                                               ; preds = %30, %29, %21, %11
  %34 = load i32, i32* %2, align 4
  ret i32 %34
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ztype1encrypt(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %4 = call i32 @type1crypt(%struct.ref_s* %3, i32 (i8*, i8*, i32, i16*)* @gs_type1_encrypt)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @type1crypt(%struct.ref_s* %0, i32 (i8*, i8*, i32, i16*)* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca i32 (i8*, i8*, i32, i16*)*, align 8
  %6 = alloca i16, align 2
  store %struct.ref_s* %0, %struct.ref_s** %4, align 8
  store i32 (i8*, i8*, i32, i16*)* %1, i32 (i8*, i8*, i32, i16*)** %5, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i64 -2
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 1
  %10 = load i16, i16* %9, align 8
  %11 = zext i16 %10 to i32
  %12 = and i32 %11, 252
  %13 = icmp eq i32 %12, 20
  br i1 %13, label %15, label %14

14:                                               ; preds = %2
  store i32 -20, i32* %3, align 4
  br label %122

15:                                               ; preds = %2
  %16 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %16, i64 -2
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i32 0, i32 0
  %19 = bitcast %union.color_sample* %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = trunc i64 %20 to i16
  store i16 %21, i16* %6, align 2
  %22 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i64 -2
  %24 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %23, i32 0, i32 0
  %25 = bitcast %union.color_sample* %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = load i16, i16* %6, align 2
  %28 = zext i16 %27 to i64
  %29 = icmp ne i64 %26, %28
  br i1 %29, label %30, label %31

30:                                               ; preds = %15
  store i32 -15, i32* %3, align 4
  br label %122

31:                                               ; preds = %15
  %32 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %33 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %32, i64 -1
  %34 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %33, i32 0, i32 1
  %35 = load i16, i16* %34, align 8
  %36 = zext i16 %35 to i32
  %37 = and i32 %36, 252
  %38 = icmp eq i32 %37, 52
  br i1 %38, label %40, label %39

39:                                               ; preds = %31
  store i32 -20, i32* %3, align 4
  br label %122

40:                                               ; preds = %31
  %41 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %42 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %41, i64 -1
  %43 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %42, i32 0, i32 1
  %44 = load i16, i16* %43, align 8
  %45 = zext i16 %44 to i32
  %46 = xor i32 %45, -1
  %47 = and i32 %46, 512
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %49, label %50

49:                                               ; preds = %40
  store i32 -7, i32* %3, align 4
  br label %122

50:                                               ; preds = %40
  %51 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %52 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %51, i32 0, i32 1
  %53 = load i16, i16* %52, align 8
  %54 = zext i16 %53 to i32
  %55 = and i32 %54, 252
  %56 = icmp eq i32 %55, 52
  br i1 %56, label %58, label %57

57:                                               ; preds = %50
  store i32 -20, i32* %3, align 4
  br label %122

58:                                               ; preds = %50
  %59 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %60 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %59, i32 0, i32 1
  %61 = load i16, i16* %60, align 8
  %62 = zext i16 %61 to i32
  %63 = xor i32 %62, -1
  %64 = and i32 %63, 256
  %65 = icmp ne i32 %64, 0
  br i1 %65, label %66, label %67

66:                                               ; preds = %58
  store i32 -7, i32* %3, align 4
  br label %122

67:                                               ; preds = %58
  %68 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %69 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %68, i32 0, i32 2
  %70 = load i16, i16* %69, align 2
  %71 = zext i16 %70 to i32
  %72 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %73 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %72, i64 -1
  %74 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %73, i32 0, i32 2
  %75 = load i16, i16* %74, align 2
  %76 = zext i16 %75 to i32
  %77 = icmp slt i32 %71, %76
  br i1 %77, label %78, label %79

78:                                               ; preds = %67
  store i32 -15, i32* %3, align 4
  br label %122

79:                                               ; preds = %67
  %80 = load i32 (i8*, i8*, i32, i16*)*, i32 (i8*, i8*, i32, i16*)** %5, align 8
  %81 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %82 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %81, i32 0, i32 0
  %83 = bitcast %union.color_sample* %82 to i8**
  %84 = load i8*, i8** %83, align 8
  %85 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %86 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %85, i64 -1
  %87 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %86, i32 0, i32 0
  %88 = bitcast %union.color_sample* %87 to i8**
  %89 = load i8*, i8** %88, align 8
  %90 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %91 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %90, i64 -1
  %92 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %91, i32 0, i32 2
  %93 = load i16, i16* %92, align 2
  %94 = zext i16 %93 to i32
  %95 = call i32 %80(i8* %84, i8* %89, i32 %94, i16* %6)
  %96 = load i16, i16* %6, align 2
  %97 = zext i16 %96 to i64
  %98 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %99 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %98, i64 -2
  %100 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %99, i32 0, i32 0
  %101 = bitcast %union.color_sample* %100 to i64*
  store i64 %97, i64* %101, align 8
  %102 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %103 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %102, i64 -1
  %104 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %105 = bitcast %struct.ref_s* %103 to i8*
  %106 = bitcast %struct.ref_s* %104 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %105, i8* align 8 %106, i64 16, i1 false)
  %107 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %108 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %107, i32 0, i32 2
  %109 = load i16, i16* %108, align 2
  %110 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %111 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %110, i64 -1
  %112 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %111, i32 0, i32 2
  store i16 %109, i16* %112, align 2
  %113 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %114 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %113, i64 -1
  %115 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %114, i32 0, i32 1
  %116 = load i16, i16* %115, align 8
  %117 = zext i16 %116 to i32
  %118 = or i32 %117, 32768
  %119 = trunc i32 %118 to i16
  store i16 %119, i16* %115, align 8
  %120 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %121 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %120, i64 -1
  store %struct.ref_s* %121, %struct.ref_s** @osp, align 8
  store i32 0, i32* %3, align 4
  br label %122

122:                                              ; preds = %79, %78, %66, %57, %49, %39, %30, %14
  %123 = load i32, i32* %3, align 4
  ret i32 %123
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ztype1decrypt(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %4 = call i32 @type1crypt(%struct.ref_s* %3, i32 (i8*, i8*, i32, i16*)* @gs_type1_decrypt)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zusertime(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca [2 x i64], align 16
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds [2 x i64], [2 x i64]* %4, i64 0, i64 0
  %6 = call i32 (i64*, ...) bitcast (void (i64*)* @gs_get_clock to i32 (i64*, ...)*)(i64* %5)
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i64 1
  store %struct.ref_s* %8, %struct.ref_s** %3, align 8
  store %struct.ref_s* %8, %struct.ref_s** @osp, align 8
  %9 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %10 = icmp ugt %struct.ref_s* %8, %9
  br i1 %10, label %11, label %14

11:                                               ; preds = %1
  %12 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %13 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %12, i64 -1
  store %struct.ref_s* %13, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %26

14:                                               ; preds = %1
  %15 = getelementptr inbounds [2 x i64], [2 x i64]* %4, i64 0, i64 0
  %16 = load i64, i64* %15, align 16
  %17 = mul nsw i64 %16, 86400000
  %18 = getelementptr inbounds [2 x i64], [2 x i64]* %4, i64 0, i64 1
  %19 = load i64, i64* %18, align 8
  %20 = add nsw i64 %17, %19
  %21 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i32 0, i32 0
  %23 = bitcast %union.color_sample* %22 to i64*
  store i64 %20, i64* %23, align 8
  %24 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %25 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %24, i32 0, i32 1
  store i16 20, i16* %25, align 8
  store i32 0, i32* %2, align 4
  br label %26

26:                                               ; preds = %14, %11
  %27 = load i32, i32* %2, align 4
  ret i32 %27
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @zmisc_op_init() #0 {
  %1 = call i32 (%struct.op_def*, ...) bitcast (void (%struct.op_def*)* @z_op_init to i32 (%struct.op_def*, ...)*)(%struct.op_def* getelementptr inbounds ([8 x %struct.op_def], [8 x %struct.op_def]* @zmisc_op_init.my_defs, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcurrentpacking(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i64 1
  store %struct.ref_s* %5, %struct.ref_s** %3, align 8
  store %struct.ref_s* %5, %struct.ref_s** @osp, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %7 = icmp ugt %struct.ref_s* %5, %6
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i64 -1
  store %struct.ref_s* %10, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %19

11:                                               ; preds = %1
  %12 = load i32, i32* @array_packing, align 4
  %13 = trunc i32 %12 to i16
  %14 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 0
  %16 = bitcast %union.color_sample* %15 to i16*
  store i16 %13, i16* %16, align 8
  %17 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i32 0, i32 1
  store i16 4, i16* %18, align 8
  store i32 0, i32* %2, align 4
  br label %19

19:                                               ; preds = %11, %8
  %20 = load i32, i32* %2, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zpackedarray(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = call i32 @make_array(%struct.ref_s* %6, i32 10, i32 514, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.600, i64 0, i64 0))
  store i32 %7, i32* %4, align 4
  %8 = load i32, i32* %4, align 4
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %1
  %11 = load i32, i32* %4, align 4
  store i32 %11, i32* %2, align 4
  br label %48

12:                                               ; preds = %1
  %13 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i32 0, i32 2
  %15 = load i16, i16* %14, align 2
  %16 = zext i16 %15 to i64
  store i64 %16, i64* %5, align 8
  %17 = load i64, i64* %5, align 8
  %18 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %19 = load %struct.ref_s*, %struct.ref_s** @osbot, align 8
  %20 = ptrtoint %struct.ref_s* %18 to i64
  %21 = ptrtoint %struct.ref_s* %19 to i64
  %22 = sub i64 %20, %21
  %23 = sdiv exact i64 %22, 16
  %24 = icmp ugt i64 %17, %23
  br i1 %24, label %25, label %26

25:                                               ; preds = %12
  store i32 -17, i32* %2, align 4
  br label %48

26:                                               ; preds = %12
  %27 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %28 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %27, i32 0, i32 0
  %29 = bitcast %union.color_sample* %28 to %struct.ref_s**
  %30 = load %struct.ref_s*, %struct.ref_s** %29, align 8
  %31 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %32 = load i64, i64* %5, align 8
  %33 = sub i64 0, %32
  %34 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %31, i64 %33
  %35 = load i64, i64* %5, align 8
  %36 = call i32 (%struct.ref_s*, %struct.ref_s*, i64, ...) bitcast (void (%struct.ref_s*, %struct.ref_s*, i32)* @refcpy to i32 (%struct.ref_s*, %struct.ref_s*, i64, ...)*)(%struct.ref_s* %30, %struct.ref_s* %34, i64 %35)
  %37 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %38 = load i64, i64* %5, align 8
  %39 = sub i64 0, %38
  %40 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %37, i64 %39
  %41 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %42 = bitcast %struct.ref_s* %40 to i8*
  %43 = bitcast %struct.ref_s* %41 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* align 8 %43, i64 16, i1 false)
  %44 = load i64, i64* %5, align 8
  %45 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %46 = sub i64 0, %44
  %47 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %45, i64 %46
  store %struct.ref_s* %47, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %48

48:                                               ; preds = %26, %25, %10
  %49 = load i32, i32* %2, align 4
  ret i32 %49
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zsetpacking(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i32 0, i32 1
  %6 = load i16, i16* %5, align 8
  %7 = zext i16 %6 to i32
  %8 = and i32 %7, 252
  %9 = icmp eq i32 %8, 4
  br i1 %9, label %11, label %10

10:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %19

11:                                               ; preds = %1
  %12 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %13 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %12, i32 0, i32 0
  %14 = bitcast %union.color_sample* %13 to i16*
  %15 = load i16, i16* %14, align 8
  %16 = zext i16 %15 to i32
  store i32 %16, i32* @array_packing, align 4
  %17 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i64 -1
  store %struct.ref_s* %18, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %19

19:                                               ; preds = %11, %10
  %20 = load i32, i32* %2, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @zpacked_op_init() #0 {
  %1 = call i32 (%struct.op_def*, ...) bitcast (void (%struct.op_def*)* @z_op_init to i32 (%struct.op_def*, ...)*)(%struct.op_def* getelementptr inbounds ([4 x %struct.op_def], [4 x %struct.op_def]* @zpacked_op_init.my_defs, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zerasepage(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %4 = call i32 @gs_erasepage(%struct.gs_state_s* %3)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zfill(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %4 = call i32 @gs_fill(%struct.gs_state_s* %3)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zeofill(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %4 = call i32 @gs_eofill(%struct.gs_state_s* %3)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zstroke(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %4 = call i32 @gs_stroke(%struct.gs_state_s* %3)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcolorimage(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.ref_s*, align 8
  %7 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  store i32 7, i32* %5, align 4
  %8 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i64 -2
  store %struct.ref_s* %9, %struct.ref_s** %6, align 8
  %10 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %11 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %10, i32 0, i32 1
  %12 = load i16, i16* %11, align 8
  %13 = zext i16 %12 to i32
  %14 = and i32 %13, 252
  %15 = icmp eq i32 %14, 20
  br i1 %15, label %17, label %16

16:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %103

17:                                               ; preds = %1
  %18 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i64 -1
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i32 0, i32 1
  %21 = load i16, i16* %20, align 8
  %22 = zext i16 %21 to i32
  %23 = and i32 %22, 252
  %24 = icmp eq i32 %23, 4
  br i1 %24, label %26, label %25

25:                                               ; preds = %17
  store i32 -20, i32* %2, align 4
  br label %103

26:                                               ; preds = %17
  %27 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %28 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %27, i32 0, i32 0
  %29 = bitcast %union.color_sample* %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = icmp ugt i64 %30, 4
  br i1 %31, label %32, label %33

32:                                               ; preds = %26
  store i32 -15, i32* %2, align 4
  br label %103

33:                                               ; preds = %26
  %34 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %35 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %34, i32 0, i32 0
  %36 = bitcast %union.color_sample* %35 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = trunc i64 %37 to i32
  store i32 %38, i32* %4, align 4
  switch i32 %38, label %45 [
    i32 1, label %39
    i32 3, label %44
    i32 4, label %44
  ]

39:                                               ; preds = %33
  %40 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %41 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %40, i64 -2
  store %struct.ref_s* %41, %struct.ref_s** @osp, align 8
  %42 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %43 = call i32 @zimage(%struct.ref_s* %42)
  store i32 %43, i32* %2, align 4
  br label %103

44:                                               ; preds = %33, %33
  br label %46

45:                                               ; preds = %33
  store i32 -15, i32* %2, align 4
  br label %103

46:                                               ; preds = %44
  %47 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %48 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %47, i64 -1
  %49 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %48, i32 0, i32 0
  %50 = bitcast %union.color_sample* %49 to i16*
  %51 = load i16, i16* %50, align 8
  %52 = icmp ne i16 %51, 0
  br i1 %52, label %53, label %66

53:                                               ; preds = %46
  %54 = load i32, i32* %4, align 4
  %55 = sub nsw i32 %54, 1
  %56 = load i32, i32* %5, align 4
  %57 = add nsw i32 %56, %55
  store i32 %57, i32* %5, align 4
  %58 = load i32, i32* %4, align 4
  %59 = sub nsw i32 %58, 1
  %60 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %61 = sext i32 %59 to i64
  %62 = sub i64 0, %61
  %63 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %60, i64 %62
  store %struct.ref_s* %63, %struct.ref_s** %6, align 8
  %64 = load i32, i32* %4, align 4
  %65 = sub nsw i32 0, %64
  store i32 %65, i32* %4, align 4
  br label %66

66:                                               ; preds = %53, %46
  %67 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %68 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %67, i64 -2
  %69 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %68, i32 0, i32 1
  %70 = load i16, i16* %69, align 8
  %71 = zext i16 %70 to i32
  %72 = and i32 %71, 252
  %73 = icmp eq i32 %72, 20
  br i1 %73, label %75, label %74

74:                                               ; preds = %66
  store i32 -20, i32* %2, align 4
  br label %103

75:                                               ; preds = %66
  %76 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %77 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %76, i64 -2
  %78 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %77, i32 0, i32 0
  %79 = bitcast %union.color_sample* %78 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = icmp ugt i64 %80, 8
  br i1 %81, label %82, label %83

82:                                               ; preds = %75
  store i32 -15, i32* %2, align 4
  br label %103

83:                                               ; preds = %75
  %84 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %85 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %86 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %85, i64 -2
  %87 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %86, i32 0, i32 0
  %88 = bitcast %union.color_sample* %87 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = trunc i64 %89 to i32
  %91 = load i32, i32* %4, align 4
  %92 = call i32 @image_setup(%struct.ref_s* %84, i32 %90, i32 %91)
  store i32 %92, i32* %7, align 4
  %93 = load i32, i32* %7, align 4
  %94 = icmp sge i32 %93, 0
  br i1 %94, label %95, label %101

95:                                               ; preds = %83
  %96 = load i32, i32* %5, align 4
  %97 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %98 = sext i32 %96 to i64
  %99 = sub i64 0, %98
  %100 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %97, i64 %99
  store %struct.ref_s* %100, %struct.ref_s** @osp, align 8
  br label %101

101:                                              ; preds = %95, %83
  %102 = load i32, i32* %7, align 4
  store i32 %102, i32* %2, align 4
  br label %103

103:                                              ; preds = %101, %82, %74, %45, %39, %32, %25, %16
  %104 = load i32, i32* %2, align 4
  ret i32 %104
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zimage(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i64 -2
  %7 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = zext i16 %8 to i32
  %10 = and i32 %9, 252
  %11 = icmp eq i32 %10, 20
  br i1 %11, label %13, label %12

12:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %37

13:                                               ; preds = %1
  %14 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i64 -2
  %16 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %15, i32 0, i32 0
  %17 = bitcast %union.color_sample* %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = icmp ugt i64 %18, 8
  br i1 %19, label %20, label %21

20:                                               ; preds = %13
  store i32 -15, i32* %2, align 4
  br label %37

21:                                               ; preds = %13
  %22 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %23 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %24 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %23, i64 -2
  %25 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %24, i32 0, i32 0
  %26 = bitcast %union.color_sample* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = trunc i64 %27 to i32
  %29 = call i32 @image_setup(%struct.ref_s* %22, i32 %28, i32 1)
  store i32 %29, i32* %4, align 4
  %30 = load i32, i32* %4, align 4
  %31 = icmp sge i32 %30, 0
  br i1 %31, label %32, label %35

32:                                               ; preds = %21
  %33 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %34 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %33, i64 -5
  store %struct.ref_s* %34, %struct.ref_s** @osp, align 8
  br label %35

35:                                               ; preds = %32, %21
  %36 = load i32, i32* %4, align 4
  store i32 %36, i32* %2, align 4
  br label %37

37:                                               ; preds = %35, %20, %12
  %38 = load i32, i32* %2, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @image_setup(%struct.ref_s* %0, i32 %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.ref_s*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %struct.gs_image_enum_s*, align 8
  %10 = alloca %struct.gs_matrix_s, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  %13 = load i32, i32* %7, align 4
  %14 = icmp slt i32 %13, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %3
  %16 = load i32, i32* %7, align 4
  %17 = xor i32 %16, -1
  br label %19

18:                                               ; preds = %3
  br label %19

19:                                               ; preds = %18, %15
  %20 = phi i32 [ %17, %15 ], [ 0, %18 ]
  store i32 %20, i32* %12, align 4
  %21 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i64 9
  %23 = load %struct.ref_s*, %struct.ref_s** @estop, align 8
  %24 = icmp ugt %struct.ref_s* %22, %23
  br i1 %24, label %25, label %26

25:                                               ; preds = %19
  store i32 -5, i32* %4, align 4
  br label %243

26:                                               ; preds = %19
  %27 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %28 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %27, i64 -4
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i32 0, i32 1
  %30 = load i16, i16* %29, align 8
  %31 = zext i16 %30 to i32
  %32 = and i32 %31, 252
  %33 = icmp eq i32 %32, 20
  br i1 %33, label %35, label %34

34:                                               ; preds = %26
  store i32 -20, i32* %4, align 4
  br label %243

35:                                               ; preds = %26
  %36 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %37 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %36, i64 -3
  %38 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %37, i32 0, i32 1
  %39 = load i16, i16* %38, align 8
  %40 = zext i16 %39 to i32
  %41 = and i32 %40, 252
  %42 = icmp eq i32 %41, 20
  br i1 %42, label %44, label %43

43:                                               ; preds = %35
  store i32 -20, i32* %4, align 4
  br label %243

44:                                               ; preds = %35
  store i32 0, i32* %11, align 4
  br label %45

45:                                               ; preds = %86, %44
  %46 = load i32, i32* %11, align 4
  %47 = load i32, i32* %12, align 4
  %48 = icmp sle i32 %46, %47
  br i1 %48, label %49, label %89

49:                                               ; preds = %45
  %50 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %51 = load i32, i32* %11, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %50, i64 %52
  %54 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %53, i32 0, i32 1
  %55 = load i16, i16* %54, align 8
  %56 = zext i16 %55 to i32
  %57 = and i32 %56, 255
  %58 = ashr i32 %57, 2
  %59 = icmp ne i32 %58, 13
  br i1 %59, label %60, label %85

60:                                               ; preds = %49
  %61 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %62 = load i32, i32* %11, align 4
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %61, i64 %63
  %65 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %64, i32 0, i32 1
  %66 = load i16, i16* %65, align 8
  %67 = zext i16 %66 to i32
  %68 = and i32 %67, 255
  %69 = ashr i32 %68, 2
  switch i32 %69, label %70 [
    i32 0, label %71
    i32 10, label %71
  ]

70:                                               ; preds = %60
  store i32 -20, i32* %4, align 4
  br label %243

71:                                               ; preds = %60, %60
  br label %72

72:                                               ; preds = %71
  %73 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %74 = load i32, i32* %11, align 4
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %73, i64 %75
  %77 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %76, i32 0, i32 1
  %78 = load i16, i16* %77, align 8
  %79 = zext i16 %78 to i32
  %80 = xor i32 %79, -1
  %81 = and i32 %80, 3
  %82 = icmp ne i32 %81, 0
  br i1 %82, label %83, label %84

83:                                               ; preds = %72
  store i32 -7, i32* %4, align 4
  br label %243

84:                                               ; preds = %72
  br label %85

85:                                               ; preds = %84, %49
  br label %86

86:                                               ; preds = %85
  %87 = load i32, i32* %11, align 4
  %88 = add nsw i32 %87, 1
  store i32 %88, i32* %11, align 4
  br label %45

89:                                               ; preds = %45
  %90 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %91 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %90, i64 -4
  %92 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %91, i32 0, i32 0
  %93 = bitcast %union.color_sample* %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = icmp sle i64 %94, 0
  br i1 %95, label %103, label %96

96:                                               ; preds = %89
  %97 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %98 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %97, i64 -3
  %99 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %98, i32 0, i32 0
  %100 = bitcast %union.color_sample* %99 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = icmp slt i64 %101, 0
  br i1 %102, label %103, label %104

103:                                              ; preds = %96, %89
  store i32 -23, i32* %4, align 4
  br label %243

104:                                              ; preds = %96
  %105 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %106 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %105, i64 -3
  %107 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %106, i32 0, i32 0
  %108 = bitcast %union.color_sample* %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %112

111:                                              ; preds = %104
  store i32 0, i32* %4, align 4
  br label %243

112:                                              ; preds = %104
  %113 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %114 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %113, i64 -1
  %115 = call i32 (%struct.ref_s*, %struct.gs_matrix_s*, ...) bitcast (i32 (%struct.ref_s*, %struct.gs_matrix_s*)* @read_matrix to i32 (%struct.ref_s*, %struct.gs_matrix_s*, ...)*)(%struct.ref_s* %114, %struct.gs_matrix_s* %10)
  store i32 %115, i32* %8, align 4
  %116 = icmp slt i32 %115, 0
  br i1 %116, label %117, label %119

117:                                              ; preds = %112
  %118 = load i32, i32* %8, align 4
  store i32 %118, i32* %4, align 4
  br label %243

119:                                              ; preds = %112
  %120 = load i32, i32* @gs_image_enum_sizeof, align 4
  %121 = call i8* @alloc(i32 1, i32 %120, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.7.606, i64 0, i64 0))
  %122 = bitcast i8* %121 to %struct.gs_image_enum_s*
  store %struct.gs_image_enum_s* %122, %struct.gs_image_enum_s** %9, align 8
  %123 = icmp eq %struct.gs_image_enum_s* %122, null
  br i1 %123, label %124, label %125

124:                                              ; preds = %119
  store i32 -25, i32* %4, align 4
  br label %243

125:                                              ; preds = %119
  %126 = load i32, i32* %7, align 4
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %128, label %145

128:                                              ; preds = %125
  %129 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %9, align 8
  %130 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %131 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %132 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %131, i64 -4
  %133 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %132, i32 0, i32 0
  %134 = bitcast %union.color_sample* %133 to i64*
  %135 = load i64, i64* %134, align 8
  %136 = trunc i64 %135 to i32
  %137 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %138 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %137, i64 -3
  %139 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %138, i32 0, i32 0
  %140 = bitcast %union.color_sample* %139 to i64*
  %141 = load i64, i64* %140, align 8
  %142 = trunc i64 %141 to i32
  %143 = load i32, i32* %6, align 4
  %144 = call i32 @gs_imagemask_init(%struct.gs_image_enum_s* %129, %struct.gs_state_s* %130, i32 %136, i32 %142, i32 %143, %struct.gs_matrix_s* %10)
  br label %163

145:                                              ; preds = %125
  %146 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %9, align 8
  %147 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %148 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %149 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %148, i64 -4
  %150 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %149, i32 0, i32 0
  %151 = bitcast %union.color_sample* %150 to i64*
  %152 = load i64, i64* %151, align 8
  %153 = trunc i64 %152 to i32
  %154 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %155 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %154, i64 -3
  %156 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %155, i32 0, i32 0
  %157 = bitcast %union.color_sample* %156 to i64*
  %158 = load i64, i64* %157, align 8
  %159 = trunc i64 %158 to i32
  %160 = load i32, i32* %6, align 4
  %161 = load i32, i32* %7, align 4
  %162 = call i32 @gs_image_init(%struct.gs_image_enum_s* %146, %struct.gs_state_s* %147, i32 %153, i32 %159, i32 %160, i32 %161, %struct.gs_matrix_s* %10)
  br label %163

163:                                              ; preds = %145, %128
  %164 = phi i32 [ %144, %128 ], [ %162, %145 ]
  store i32 %164, i32* %8, align 4
  %165 = load i32, i32* %8, align 4
  %166 = icmp slt i32 %165, 0
  br i1 %166, label %167, label %169

167:                                              ; preds = %163
  %168 = load i32, i32* %8, align 4
  store i32 %168, i32* %4, align 4
  br label %243

169:                                              ; preds = %163
  %170 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %171 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %170, i32 1
  store %struct.ref_s* %171, %struct.ref_s** @esp, align 8
  %172 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %173 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %172, i32 0, i32 0
  %174 = bitcast %union.color_sample* %173 to i16*
  store i16 0, i16* %174, align 8
  %175 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %176 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %175, i32 0, i32 1
  store i16 33, i16* %176, align 8
  %177 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %178 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %177, i32 1
  store %struct.ref_s* %178, %struct.ref_s** @esp, align 8
  store i32 0, i32* %11, align 4
  br label %179

179:                                              ; preds = %201, %169
  %180 = load i32, i32* %11, align 4
  %181 = icmp slt i32 %180, 4
  br i1 %181, label %182, label %206

182:                                              ; preds = %179
  %183 = load i32, i32* %11, align 4
  %184 = load i32, i32* %12, align 4
  %185 = icmp sle i32 %183, %184
  br i1 %185, label %186, label %194

186:                                              ; preds = %182
  %187 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %188 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %189 = load i32, i32* %11, align 4
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %188, i64 %190
  %192 = bitcast %struct.ref_s* %187 to i8*
  %193 = bitcast %struct.ref_s* %191 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %192, i8* align 8 %193, i64 16, i1 false)
  br label %200

194:                                              ; preds = %182
  %195 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %196 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %195, i32 0, i32 0
  %197 = bitcast %union.color_sample* %196 to i64*
  store i64 0, i64* %197, align 8
  %198 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %199 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %198, i32 0, i32 1
  store i16 32, i16* %199, align 8
  br label %200

200:                                              ; preds = %194, %186
  br label %201

201:                                              ; preds = %200
  %202 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %203 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %202, i32 1
  store %struct.ref_s* %203, %struct.ref_s** @esp, align 8
  %204 = load i32, i32* %11, align 4
  %205 = add nsw i32 %204, 1
  store i32 %205, i32* %11, align 4
  br label %179

206:                                              ; preds = %179
  %207 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %208 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %207, i32 0, i32 0
  %209 = bitcast %union.color_sample* %208 to i64*
  store i64 0, i64* %209, align 8
  %210 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %211 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %210, i32 0, i32 1
  store i16 20, i16* %211, align 8
  %212 = load i32, i32* %12, align 4
  %213 = trunc i32 %212 to i16
  %214 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %215 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %214, i32 0, i32 2
  store i16 %213, i16* %215, align 2
  %216 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %217 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %216, i32 1
  store %struct.ref_s* %217, %struct.ref_s** @esp, align 8
  %218 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %9, align 8
  %219 = bitcast %struct.gs_image_enum_s* %218 to i8*
  %220 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %221 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %220, i32 0, i32 0
  %222 = bitcast %union.color_sample* %221 to i8**
  store i8* %219, i8** %222, align 8
  %223 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %224 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %223, i32 0, i32 1
  store i16 52, i16* %224, align 8
  %225 = load i32, i32* @gs_image_enum_sizeof, align 4
  %226 = trunc i32 %225 to i16
  %227 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %228 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %227, i32 0, i32 2
  store i16 %226, i16* %228, align 2
  %229 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %230 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %229, i32 1
  store %struct.ref_s* %230, %struct.ref_s** @esp, align 8
  %231 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %232 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %231, i32 0, i32 0
  %233 = bitcast %union.color_sample* %232 to i32 (%struct.ref_s*)**
  store i32 (%struct.ref_s*)* @image_continue, i32 (%struct.ref_s*)** %233, align 8
  %234 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %235 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %234, i32 0, i32 1
  store i16 37, i16* %235, align 8
  %236 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %237 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %236, i32 0, i32 2
  store i16 0, i16* %237, align 2
  %238 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %239 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %238, i32 1
  store %struct.ref_s* %239, %struct.ref_s** @esp, align 8
  %240 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %241 = bitcast %struct.ref_s* %239 to i8*
  %242 = bitcast %struct.ref_s* %240 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %241, i8* align 8 %242, i64 16, i1 false)
  store i32 1, i32* %4, align 4
  br label %243

243:                                              ; preds = %206, %167, %124, %117, %111, %103, %83, %70, %43, %34, %25
  %244 = load i32, i32* %4, align 4
  ret i32 %244
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @image_continue(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.gs_image_enum_s*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %8 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 0
  %10 = bitcast %union.color_sample* %9 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = bitcast i8* %11 to %struct.gs_image_enum_s*
  store %struct.gs_image_enum_s* %12, %struct.gs_image_enum_s** %4, align 8
  %13 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i32 0, i32 1
  %15 = load i16, i16* %14, align 8
  %16 = zext i16 %15 to i32
  %17 = and i32 %16, 255
  %18 = ashr i32 %17, 2
  %19 = icmp ne i32 %18, 13
  br i1 %19, label %20, label %26

20:                                               ; preds = %1
  %21 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i64 -7
  store %struct.ref_s* %22, %struct.ref_s** @esp, align 8
  %23 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %4, align 8
  %24 = bitcast %struct.gs_image_enum_s* %23 to i8*
  %25 = load i32, i32* @gs_image_enum_sizeof, align 4
  call void @alloc_free(i8* %24, i32 1, i32 %25, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.8.607, i64 0, i64 0))
  store i32 -20, i32* %2, align 4
  br label %94

26:                                               ; preds = %1
  %27 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %4, align 8
  %28 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i32 0, i32 0
  %30 = bitcast %union.color_sample* %29 to i8**
  %31 = load i8*, i8** %30, align 8
  %32 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %33 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %32, i32 0, i32 2
  %34 = load i16, i16* %33, align 2
  %35 = zext i16 %34 to i32
  %36 = call i32 @gs_image_next(%struct.gs_image_enum_s* %27, i8* %31, i32 %35)
  store i32 %36, i32* %5, align 4
  %37 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %38 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %37, i32 0, i32 2
  %39 = load i16, i16* %38, align 2
  %40 = zext i16 %39 to i32
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %45, label %42

42:                                               ; preds = %26
  %43 = load i32, i32* %5, align 4
  %44 = icmp sgt i32 %43, 0
  br i1 %44, label %45, label %51

45:                                               ; preds = %42, %26
  %46 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %47 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %46, i64 -7
  store %struct.ref_s* %47, %struct.ref_s** @esp, align 8
  %48 = load %struct.gs_image_enum_s*, %struct.gs_image_enum_s** %4, align 8
  %49 = bitcast %struct.gs_image_enum_s* %48 to i8*
  %50 = load i32, i32* @gs_image_enum_sizeof, align 4
  call void @alloc_free(i8* %49, i32 1, i32 %50, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9.608, i64 0, i64 0))
  br label %91

51:                                               ; preds = %42
  %52 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %53 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %52, i64 -1
  %54 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %53, i32 0, i32 0
  %55 = bitcast %union.color_sample* %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = add nsw i64 %56, 1
  store i64 %57, i64* %55, align 8
  %58 = trunc i64 %57 to i32
  store i32 %58, i32* %6, align 4
  %59 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %60 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %59, i64 -5
  store %struct.ref_s* %60, %struct.ref_s** %7, align 8
  %61 = load i32, i32* %6, align 4
  %62 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %63 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %62, i64 -1
  %64 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %63, i32 0, i32 2
  %65 = load i16, i16* %64, align 2
  %66 = zext i16 %65 to i32
  %67 = icmp sgt i32 %61, %66
  br i1 %67, label %68, label %73

68:                                               ; preds = %51
  store i32 0, i32* %6, align 4
  %69 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %70 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %69, i64 -1
  %71 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %70, i32 0, i32 0
  %72 = bitcast %union.color_sample* %71 to i64*
  store i64 0, i64* %72, align 8
  br label %73

73:                                               ; preds = %68, %51
  %74 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %75 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %74, i32 1
  store %struct.ref_s* %75, %struct.ref_s** @esp, align 8
  %76 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %77 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %76, i32 0, i32 0
  %78 = bitcast %union.color_sample* %77 to i32 (%struct.ref_s*)**
  store i32 (%struct.ref_s*)* @image_continue, i32 (%struct.ref_s*)** %78, align 8
  %79 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %80 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %79, i32 0, i32 1
  store i16 37, i16* %80, align 8
  %81 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %82 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %81, i32 0, i32 2
  store i16 0, i16* %82, align 2
  %83 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %84 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %83, i32 1
  store %struct.ref_s* %84, %struct.ref_s** @esp, align 8
  %85 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %86 = load i32, i32* %6, align 4
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %85, i64 %87
  %89 = bitcast %struct.ref_s* %84 to i8*
  %90 = bitcast %struct.ref_s* %88 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %89, i8* align 8 %90, i64 16, i1 false)
  br label %91

91:                                               ; preds = %73, %45
  %92 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %93 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %92, i64 -1
  store %struct.ref_s* %93, %struct.ref_s** @osp, align 8
  store i32 1, i32* %2, align 4
  br label %94

94:                                               ; preds = %91, %20
  %95 = load i32, i32* %2, align 4
  ret i32 %95
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zimagemask(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i64 -2
  %7 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = zext i16 %8 to i32
  %10 = and i32 %9, 252
  %11 = icmp eq i32 %10, 4
  br i1 %11, label %13, label %12

12:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %29

13:                                               ; preds = %1
  %14 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %15 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %16 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %15, i64 -2
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %16, i32 0, i32 0
  %18 = bitcast %union.color_sample* %17 to i16*
  %19 = load i16, i16* %18, align 8
  %20 = zext i16 %19 to i32
  %21 = call i32 @image_setup(%struct.ref_s* %14, i32 %20, i32 0)
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %4, align 4
  %23 = icmp sge i32 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %13
  %25 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %26 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %25, i64 -5
  store %struct.ref_s* %26, %struct.ref_s** @osp, align 8
  br label %27

27:                                               ; preds = %24, %13
  %28 = load i32, i32* %4, align 4
  store i32 %28, i32* %2, align 4
  br label %29

29:                                               ; preds = %27, %12
  %30 = load i32, i32* %2, align 4
  ret i32 %30
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @zpaint_op_init() #0 {
  %1 = call i32 (%struct.op_def*, ...) bitcast (void (%struct.op_def*)* @z_op_init to i32 (%struct.op_def*, ...)*)(%struct.op_def* getelementptr inbounds ([8 x %struct.op_def], [8 x %struct.op_def]* @zpaint_op_init.my_defs, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zflattenpath(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %4 = call i32 @gs_flattenpath(%struct.gs_state_s* %3)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zreversepath(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %4 = call i32 @gs_reversepath(%struct.gs_state_s* %3)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zstrokepath(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %4 = call i32 @gs_strokepath(%struct.gs_state_s* %3)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zclippath(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %4 = call i32 @gs_clippath(%struct.gs_state_s* %3)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zpathbbox(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.gs_rect_s, align 4
  %5 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %7 = call i32 @gs_pathbbox(%struct.gs_state_s* %6, %struct.gs_rect_s* %4)
  store i32 %7, i32* %5, align 4
  %8 = load i32, i32* %5, align 4
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %1
  %11 = load i32, i32* %5, align 4
  store i32 %11, i32* %2, align 4
  br label %59

12:                                               ; preds = %1
  %13 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i64 4
  store %struct.ref_s* %14, %struct.ref_s** %3, align 8
  store %struct.ref_s* %14, %struct.ref_s** @osp, align 8
  %15 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %16 = icmp ugt %struct.ref_s* %14, %15
  br i1 %16, label %17, label %20

17:                                               ; preds = %12
  %18 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i64 -4
  store %struct.ref_s* %19, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %59

20:                                               ; preds = %12
  %21 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %4, i32 0, i32 0
  %22 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %21, i32 0, i32 0
  %23 = load float, float* %22, align 4
  %24 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %25 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %24, i64 -3
  %26 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %25, i32 0, i32 0
  %27 = bitcast %union.color_sample* %26 to float*
  store float %23, float* %27, align 8
  %28 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i64 -3
  %30 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %29, i32 0, i32 1
  store i16 44, i16* %30, align 8
  %31 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %4, i32 0, i32 0
  %32 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %31, i32 0, i32 1
  %33 = load float, float* %32, align 4
  %34 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %35 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %34, i64 -2
  %36 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %35, i32 0, i32 0
  %37 = bitcast %union.color_sample* %36 to float*
  store float %33, float* %37, align 8
  %38 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %39 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %38, i64 -2
  %40 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %39, i32 0, i32 1
  store i16 44, i16* %40, align 8
  %41 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %4, i32 0, i32 1
  %42 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %41, i32 0, i32 0
  %43 = load float, float* %42, align 4
  %44 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %45 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %44, i64 -1
  %46 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %45, i32 0, i32 0
  %47 = bitcast %union.color_sample* %46 to float*
  store float %43, float* %47, align 8
  %48 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %49 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %48, i64 -1
  %50 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %49, i32 0, i32 1
  store i16 44, i16* %50, align 8
  %51 = getelementptr inbounds %struct.gs_rect_s, %struct.gs_rect_s* %4, i32 0, i32 1
  %52 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %51, i32 0, i32 1
  %53 = load float, float* %52, align 4
  %54 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %55 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %54, i32 0, i32 0
  %56 = bitcast %union.color_sample* %55 to float*
  store float %53, float* %56, align 8
  %57 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %58 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %57, i32 0, i32 1
  store i16 44, i16* %58, align 8
  store i32 0, i32* %2, align 4
  br label %59

59:                                               ; preds = %20, %17, %10
  %60 = load i32, i32* %2, align 4
  ret i32 %60
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zpathforall(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.gs_path_enum_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** getelementptr inbounds ([6 x %struct.ref_s*], [6 x %struct.ref_s*]* @osp_nargs, i64 0, i64 3), align 8
  %7 = icmp ult %struct.ref_s* %5, %6
  br i1 %7, label %8, label %9

8:                                                ; preds = %1
  store i32 -17, i32* %2, align 4
  br label %69

9:                                                ; preds = %1
  %10 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %11 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %10, i64 8
  %12 = load %struct.ref_s*, %struct.ref_s** @estop, align 8
  %13 = icmp ugt %struct.ref_s* %11, %12
  br i1 %13, label %14, label %15

14:                                               ; preds = %9
  store i32 -5, i32* %2, align 4
  br label %69

15:                                               ; preds = %9
  %16 = load i32, i32* @gs_path_enum_sizeof, align 4
  %17 = call i8* @alloc(i32 1, i32 %16, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.618, i64 0, i64 0))
  %18 = bitcast i8* %17 to %struct.gs_path_enum_s*
  store %struct.gs_path_enum_s* %18, %struct.gs_path_enum_s** %4, align 8
  %19 = icmp eq %struct.gs_path_enum_s* %18, null
  br i1 %19, label %20, label %21

20:                                               ; preds = %15
  store i32 -25, i32* %2, align 4
  br label %69

21:                                               ; preds = %15
  %22 = load %struct.gs_path_enum_s*, %struct.gs_path_enum_s** %4, align 8
  %23 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  call void @gs_path_enum_init(%struct.gs_path_enum_s* %22, %struct.gs_state_s* %23)
  %24 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %25 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %24, i32 1
  store %struct.ref_s* %25, %struct.ref_s** @esp, align 8
  %26 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %27 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %26, i32 0, i32 0
  %28 = bitcast %union.color_sample* %27 to i16*
  store i16 2, i16* %28, align 8
  %29 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %30 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %29, i32 0, i32 1
  store i16 33, i16* %30, align 8
  %31 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %32 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %31, i32 1
  store %struct.ref_s* %32, %struct.ref_s** @esp, align 8
  %33 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %34 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %33, i64 -3
  %35 = bitcast %struct.ref_s* %32 to i8*
  %36 = bitcast %struct.ref_s* %34 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %35, i8* align 8 %36, i64 16, i1 false)
  %37 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %38 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %37, i32 1
  store %struct.ref_s* %38, %struct.ref_s** @esp, align 8
  %39 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %40 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %39, i64 -2
  %41 = bitcast %struct.ref_s* %38 to i8*
  %42 = bitcast %struct.ref_s* %40 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %41, i8* align 8 %42, i64 16, i1 false)
  %43 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %44 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %43, i32 1
  store %struct.ref_s* %44, %struct.ref_s** @esp, align 8
  %45 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %46 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %45, i64 -1
  %47 = bitcast %struct.ref_s* %44 to i8*
  %48 = bitcast %struct.ref_s* %46 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %47, i8* align 8 %48, i64 16, i1 false)
  %49 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %50 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %49, i32 1
  store %struct.ref_s* %50, %struct.ref_s** @esp, align 8
  %51 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %52 = bitcast %struct.ref_s* %50 to i8*
  %53 = bitcast %struct.ref_s* %51 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 16, i1 false)
  %54 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %55 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %54, i32 1
  store %struct.ref_s* %55, %struct.ref_s** @esp, align 8
  %56 = load %struct.gs_path_enum_s*, %struct.gs_path_enum_s** %4, align 8
  %57 = bitcast %struct.gs_path_enum_s* %56 to i8*
  %58 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %59 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %58, i32 0, i32 0
  %60 = bitcast %union.color_sample* %59 to i8**
  store i8* %57, i8** %60, align 8
  %61 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %62 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %61, i32 0, i32 1
  store i16 20, i16* %62, align 8
  %63 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %64 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %63, i64 -4
  store %struct.ref_s* %64, %struct.ref_s** @osp, align 8
  %65 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %66 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %65, i64 -4
  store %struct.ref_s* %66, %struct.ref_s** %3, align 8
  %67 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %68 = call i32 @path_continue(%struct.ref_s* %67)
  store i32 %68, i32* %2, align 4
  br label %69

69:                                               ; preds = %21, %20, %14, %8
  %70 = load i32, i32* %2, align 4
  ret i32 %70
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @path_continue(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.gs_path_enum_s*, align 8
  %5 = alloca [3 x %struct.gs_point_s], align 16
  %6 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i32 0, i32 0
  %9 = bitcast %union.color_sample* %8 to i8**
  %10 = load i8*, i8** %9, align 8
  %11 = bitcast i8* %10 to %struct.gs_path_enum_s*
  store %struct.gs_path_enum_s* %11, %struct.gs_path_enum_s** %4, align 8
  %12 = load %struct.gs_path_enum_s*, %struct.gs_path_enum_s** %4, align 8
  %13 = getelementptr inbounds [3 x %struct.gs_point_s], [3 x %struct.gs_point_s]* %5, i64 0, i64 0
  %14 = call i32 @gs_path_enum_next(%struct.gs_path_enum_s* %12, %struct.gs_point_s* %13)
  store i32 %14, i32* %6, align 4
  %15 = load i32, i32* %6, align 4
  switch i32 %15, label %22 [
    i32 0, label %16
    i32 1, label %24
    i32 2, label %34
    i32 3, label %44
    i32 4, label %54
  ]

16:                                               ; preds = %1
  %17 = load %struct.gs_path_enum_s*, %struct.gs_path_enum_s** %4, align 8
  %18 = bitcast %struct.gs_path_enum_s* %17 to i8*
  %19 = load i32, i32* @gs_path_enum_sizeof, align 4
  call void @alloc_free(i8* %18, i32 1, i32 %19, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.618, i64 0, i64 0))
  %20 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %21 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %20, i64 -6
  store %struct.ref_s* %21, %struct.ref_s** @esp, align 8
  store i32 1, i32* %2, align 4
  br label %78

22:                                               ; preds = %1
  %23 = load i32, i32* %6, align 4
  store i32 %23, i32* %2, align 4
  br label %78

24:                                               ; preds = %1
  %25 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %26 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %25, i64 2
  %27 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %28 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %27, i64 -4
  %29 = bitcast %struct.ref_s* %26 to i8*
  %30 = bitcast %struct.ref_s* %28 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 16, i1 false)
  %31 = getelementptr inbounds [3 x %struct.gs_point_s], [3 x %struct.gs_point_s]* %5, i64 0, i64 0
  %32 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %33 = call i32 @pf_push(%struct.gs_point_s* %31, i32 1, %struct.ref_s* %32)
  store i32 %33, i32* %6, align 4
  br label %61

34:                                               ; preds = %1
  %35 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %36 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %35, i64 2
  %37 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %38 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %37, i64 -3
  %39 = bitcast %struct.ref_s* %36 to i8*
  %40 = bitcast %struct.ref_s* %38 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 16, i1 false)
  %41 = getelementptr inbounds [3 x %struct.gs_point_s], [3 x %struct.gs_point_s]* %5, i64 0, i64 0
  %42 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %43 = call i32 @pf_push(%struct.gs_point_s* %41, i32 1, %struct.ref_s* %42)
  store i32 %43, i32* %6, align 4
  br label %61

44:                                               ; preds = %1
  %45 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %46 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %45, i64 2
  %47 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %48 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %47, i64 -2
  %49 = bitcast %struct.ref_s* %46 to i8*
  %50 = bitcast %struct.ref_s* %48 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %49, i8* align 8 %50, i64 16, i1 false)
  %51 = getelementptr inbounds [3 x %struct.gs_point_s], [3 x %struct.gs_point_s]* %5, i64 0, i64 0
  %52 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %53 = call i32 @pf_push(%struct.gs_point_s* %51, i32 3, %struct.ref_s* %52)
  store i32 %53, i32* %6, align 4
  br label %61

54:                                               ; preds = %1
  %55 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %56 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %55, i64 2
  %57 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %58 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %57, i64 -1
  %59 = bitcast %struct.ref_s* %56 to i8*
  %60 = bitcast %struct.ref_s* %58 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %59, i8* align 8 %60, i64 16, i1 false)
  store i32 0, i32* %6, align 4
  br label %61

61:                                               ; preds = %54, %44, %34, %24
  %62 = load i32, i32* %6, align 4
  %63 = icmp slt i32 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %61
  %65 = load i32, i32* %6, align 4
  store i32 %65, i32* %2, align 4
  br label %78

66:                                               ; preds = %61
  %67 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %68 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %67, i32 1
  store %struct.ref_s* %68, %struct.ref_s** @esp, align 8
  %69 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %70 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %69, i32 0, i32 0
  %71 = bitcast %union.color_sample* %70 to i32 (%struct.ref_s*)**
  store i32 (%struct.ref_s*)* @path_continue, i32 (%struct.ref_s*)** %71, align 8
  %72 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %73 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %72, i32 0, i32 1
  store i16 37, i16* %73, align 8
  %74 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %75 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %74, i32 0, i32 2
  store i16 0, i16* %75, align 2
  %76 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %77 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %76, i32 1
  store %struct.ref_s* %77, %struct.ref_s** @esp, align 8
  store i32 1, i32* %2, align 4
  br label %78

78:                                               ; preds = %66, %64, %22, %16
  %79 = load i32, i32* %2, align 4
  ret i32 %79
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @pf_push(%struct.gs_point_s* %0, i32 %1, %struct.ref_s* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.gs_point_s*, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.ref_s*, align 8
  store %struct.gs_point_s* %0, %struct.gs_point_s** %5, align 8
  store i32 %1, i32* %6, align 4
  store %struct.ref_s* %2, %struct.ref_s** %7, align 8
  br label %8

8:                                                ; preds = %20, %3
  %9 = load i32, i32* %6, align 4
  %10 = add nsw i32 %9, -1
  store i32 %10, i32* %6, align 4
  %11 = icmp ne i32 %9, 0
  br i1 %11, label %12, label %41

12:                                               ; preds = %8
  %13 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i64 2
  store %struct.ref_s* %14, %struct.ref_s** %7, align 8
  store %struct.ref_s* %14, %struct.ref_s** @osp, align 8
  %15 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %16 = icmp ugt %struct.ref_s* %14, %15
  br i1 %16, label %17, label %20

17:                                               ; preds = %12
  %18 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i64 -2
  store %struct.ref_s* %19, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %4, align 4
  br label %42

20:                                               ; preds = %12
  %21 = load %struct.gs_point_s*, %struct.gs_point_s** %5, align 8
  %22 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %21, i32 0, i32 0
  %23 = load float, float* %22, align 4
  %24 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %25 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %24, i64 -1
  %26 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %25, i32 0, i32 0
  %27 = bitcast %union.color_sample* %26 to float*
  store float %23, float* %27, align 8
  %28 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i64 -1
  %30 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %29, i32 0, i32 1
  store i16 44, i16* %30, align 8
  %31 = load %struct.gs_point_s*, %struct.gs_point_s** %5, align 8
  %32 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %31, i32 0, i32 1
  %33 = load float, float* %32, align 4
  %34 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %35 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %34, i32 0, i32 0
  %36 = bitcast %union.color_sample* %35 to float*
  store float %33, float* %36, align 8
  %37 = load %struct.ref_s*, %struct.ref_s** %7, align 8
  %38 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %37, i32 0, i32 1
  store i16 44, i16* %38, align 8
  %39 = load %struct.gs_point_s*, %struct.gs_point_s** %5, align 8
  %40 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %39, i32 1
  store %struct.gs_point_s* %40, %struct.gs_point_s** %5, align 8
  br label %8

41:                                               ; preds = %8
  store i32 0, i32* %4, align 4
  br label %42

42:                                               ; preds = %41, %17
  %43 = load i32, i32* %4, align 4
  ret i32 %43
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zinitclip(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %4 = call i32 @gs_initclip(%struct.gs_state_s* %3)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zclip(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %4 = call i32 @gs_clip(%struct.gs_state_s* %3)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zeoclip(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %4 = call i32 @gs_eoclip(%struct.gs_state_s* %3)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @zpath2_op_init() #0 {
  %1 = call i32 (%struct.op_def*, ...) bitcast (void (%struct.op_def*)* @z_op_init to i32 (%struct.op_def*, ...)*)(%struct.op_def* getelementptr inbounds ([10 x %struct.op_def], [10 x %struct.op_def]* @zpath2_op_init.my_defs, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @znewpath(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %4 = call i32 @gs_newpath(%struct.gs_state_s* %3)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcurrentpoint(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.gs_point_s, align 4
  %5 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %7 = call i32 @gs_currentpoint(%struct.gs_state_s* %6, %struct.gs_point_s* %4)
  store i32 %7, i32* %5, align 4
  %8 = load i32, i32* %5, align 4
  %9 = icmp slt i32 %8, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %1
  %11 = load i32, i32* %5, align 4
  store i32 %11, i32* %2, align 4
  br label %37

12:                                               ; preds = %1
  %13 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i64 2
  store %struct.ref_s* %14, %struct.ref_s** %3, align 8
  store %struct.ref_s* %14, %struct.ref_s** @osp, align 8
  %15 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %16 = icmp ugt %struct.ref_s* %14, %15
  br i1 %16, label %17, label %20

17:                                               ; preds = %12
  %18 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i64 -2
  store %struct.ref_s* %19, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %37

20:                                               ; preds = %12
  %21 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %4, i32 0, i32 0
  %22 = load float, float* %21, align 4
  %23 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %24 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %23, i64 -1
  %25 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %24, i32 0, i32 0
  %26 = bitcast %union.color_sample* %25 to float*
  store float %22, float* %26, align 8
  %27 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %28 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %27, i64 -1
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i32 0, i32 1
  store i16 44, i16* %29, align 8
  %30 = getelementptr inbounds %struct.gs_point_s, %struct.gs_point_s* %4, i32 0, i32 1
  %31 = load float, float* %30, align 4
  %32 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %33 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %32, i32 0, i32 0
  %34 = bitcast %union.color_sample* %33 to float*
  store float %31, float* %34, align 8
  %35 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %36 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %35, i32 0, i32 1
  store i16 44, i16* %36, align 8
  store i32 0, i32* %2, align 4
  br label %37

37:                                               ; preds = %20, %17, %10
  %38 = load i32, i32* %2, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zmoveto(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %4 = call i32 @common_to(%struct.ref_s* %3, i32 (%struct.gs_state_s*, double, double)* @gs_moveto)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @common_to(%struct.ref_s* %0, i32 (%struct.gs_state_s*, double, double)* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca i32 (%struct.gs_state_s*, double, double)*, align 8
  %6 = alloca [2 x float], align 4
  %7 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %4, align 8
  store i32 (%struct.gs_state_s*, double, double)* %1, i32 (%struct.gs_state_s*, double, double)** %5, align 8
  %8 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %9 = getelementptr inbounds [2 x float], [2 x float]* %6, i64 0, i64 0
  %10 = call i32 @num_params(%struct.ref_s* %8, i32 2, float* %9)
  store i32 %10, i32* %7, align 4
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %23, label %12

12:                                               ; preds = %2
  %13 = load i32 (%struct.gs_state_s*, double, double)*, i32 (%struct.gs_state_s*, double, double)** %5, align 8
  %14 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %15 = getelementptr inbounds [2 x float], [2 x float]* %6, i64 0, i64 0
  %16 = load float, float* %15, align 4
  %17 = fpext float %16 to double
  %18 = getelementptr inbounds [2 x float], [2 x float]* %6, i64 0, i64 1
  %19 = load float, float* %18, align 4
  %20 = fpext float %19 to double
  %21 = call i32 %13(%struct.gs_state_s* %14, double %17, double %20)
  store i32 %21, i32* %7, align 4
  %22 = icmp slt i32 %21, 0
  br i1 %22, label %23, label %25

23:                                               ; preds = %12, %2
  %24 = load i32, i32* %7, align 4
  store i32 %24, i32* %3, align 4
  br label %28

25:                                               ; preds = %12
  %26 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %27 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %26, i64 -2
  store %struct.ref_s* %27, %struct.ref_s** @osp, align 8
  store i32 0, i32* %3, align 4
  br label %28

28:                                               ; preds = %25, %23
  %29 = load i32, i32* %3, align 4
  ret i32 %29
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zrmoveto(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %4 = call i32 @common_to(%struct.ref_s* %3, i32 (%struct.gs_state_s*, double, double)* @gs_rmoveto)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zlineto(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %4 = call i32 @common_to(%struct.ref_s* %3, i32 (%struct.gs_state_s*, double, double)* @gs_lineto)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zrlineto(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %4 = call i32 @common_to(%struct.ref_s* %3, i32 (%struct.gs_state_s*, double, double)* @gs_rlineto)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zarc(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %4 = call i32 @common_arc(%struct.ref_s* %3, i32 (%struct.gs_state_s*, double, double, double, double, double)* @gs_arc)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @common_arc(%struct.ref_s* %0, i32 (%struct.gs_state_s*, double, double, double, double, double)* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca i32 (%struct.gs_state_s*, double, double, double, double, double)*, align 8
  %6 = alloca [5 x float], align 16
  %7 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %4, align 8
  store i32 (%struct.gs_state_s*, double, double, double, double, double)* %1, i32 (%struct.gs_state_s*, double, double, double, double, double)** %5, align 8
  %8 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %9 = getelementptr inbounds [5 x float], [5 x float]* %6, i64 0, i64 0
  %10 = call i32 @num_params(%struct.ref_s* %8, i32 5, float* %9)
  store i32 %10, i32* %7, align 4
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = load i32, i32* %7, align 4
  store i32 %13, i32* %3, align 4
  br label %40

14:                                               ; preds = %2
  %15 = load i32 (%struct.gs_state_s*, double, double, double, double, double)*, i32 (%struct.gs_state_s*, double, double, double, double, double)** %5, align 8
  %16 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %17 = getelementptr inbounds [5 x float], [5 x float]* %6, i64 0, i64 0
  %18 = load float, float* %17, align 16
  %19 = fpext float %18 to double
  %20 = getelementptr inbounds [5 x float], [5 x float]* %6, i64 0, i64 1
  %21 = load float, float* %20, align 4
  %22 = fpext float %21 to double
  %23 = getelementptr inbounds [5 x float], [5 x float]* %6, i64 0, i64 2
  %24 = load float, float* %23, align 8
  %25 = fpext float %24 to double
  %26 = getelementptr inbounds [5 x float], [5 x float]* %6, i64 0, i64 3
  %27 = load float, float* %26, align 4
  %28 = fpext float %27 to double
  %29 = getelementptr inbounds [5 x float], [5 x float]* %6, i64 0, i64 4
  %30 = load float, float* %29, align 16
  %31 = fpext float %30 to double
  %32 = call i32 %15(%struct.gs_state_s* %16, double %19, double %22, double %25, double %28, double %31)
  store i32 %32, i32* %7, align 4
  %33 = load i32, i32* %7, align 4
  %34 = icmp sge i32 %33, 0
  br i1 %34, label %35, label %38

35:                                               ; preds = %14
  %36 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %37 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %36, i64 -5
  store %struct.ref_s* %37, %struct.ref_s** @osp, align 8
  br label %38

38:                                               ; preds = %35, %14
  %39 = load i32, i32* %7, align 4
  store i32 %39, i32* %3, align 4
  br label %40

40:                                               ; preds = %38, %12
  %41 = load i32, i32* %3, align 4
  ret i32 %41
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zarcn(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %4 = call i32 @common_arc(%struct.ref_s* %3, i32 (%struct.gs_state_s*, double, double, double, double, double)* @gs_arcn)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zarct(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = call i32 @common_arct(%struct.ref_s* %5, float* null)
  store i32 %6, i32* %4, align 4
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %9, label %11

9:                                                ; preds = %1
  %10 = load i32, i32* %4, align 4
  store i32 %10, i32* %2, align 4
  br label %14

11:                                               ; preds = %1
  %12 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %13 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %12, i64 -5
  store %struct.ref_s* %13, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %14

14:                                               ; preds = %11, %9
  %15 = load i32, i32* %2, align 4
  ret i32 %15
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @common_arct(%struct.ref_s* %0, float* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca float*, align 8
  %6 = alloca [5 x float], align 16
  %7 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %4, align 8
  store float* %1, float** %5, align 8
  %8 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %9 = getelementptr inbounds [5 x float], [5 x float]* %6, i64 0, i64 0
  %10 = call i32 @num_params(%struct.ref_s* %8, i32 5, float* %9)
  store i32 %10, i32* %7, align 4
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = load i32, i32* %7, align 4
  store i32 %13, i32* %3, align 4
  br label %33

14:                                               ; preds = %2
  %15 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %16 = getelementptr inbounds [5 x float], [5 x float]* %6, i64 0, i64 0
  %17 = load float, float* %16, align 16
  %18 = fpext float %17 to double
  %19 = getelementptr inbounds [5 x float], [5 x float]* %6, i64 0, i64 1
  %20 = load float, float* %19, align 4
  %21 = fpext float %20 to double
  %22 = getelementptr inbounds [5 x float], [5 x float]* %6, i64 0, i64 2
  %23 = load float, float* %22, align 8
  %24 = fpext float %23 to double
  %25 = getelementptr inbounds [5 x float], [5 x float]* %6, i64 0, i64 3
  %26 = load float, float* %25, align 4
  %27 = fpext float %26 to double
  %28 = getelementptr inbounds [5 x float], [5 x float]* %6, i64 0, i64 4
  %29 = load float, float* %28, align 16
  %30 = fpext float %29 to double
  %31 = load float*, float** %5, align 8
  %32 = call i32 @gs_arcto(%struct.gs_state_s* %15, double %18, double %21, double %24, double %27, double %30, float* %31)
  store i32 %32, i32* %3, align 4
  br label %33

33:                                               ; preds = %14, %12
  %34 = load i32, i32* %3, align 4
  ret i32 %34
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zarcto(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca [4 x float], align 16
  %5 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 0, i64 0
  %8 = call i32 @common_arct(%struct.ref_s* %6, float* %7)
  store i32 %8, i32* %5, align 4
  %9 = load i32, i32* %5, align 4
  %10 = icmp slt i32 %9, 0
  br i1 %10, label %11, label %13

11:                                               ; preds = %1
  %12 = load i32, i32* %5, align 4
  store i32 %12, i32* %2, align 4
  br label %52

13:                                               ; preds = %1
  %14 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 0, i64 0
  %15 = load float, float* %14, align 16
  %16 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %16, i64 -4
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i32 0, i32 0
  %19 = bitcast %union.color_sample* %18 to float*
  store float %15, float* %19, align 8
  %20 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %21 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %20, i64 -4
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i32 0, i32 1
  store i16 44, i16* %22, align 8
  %23 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 0, i64 1
  %24 = load float, float* %23, align 4
  %25 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %26 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %25, i64 -3
  %27 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %26, i32 0, i32 0
  %28 = bitcast %union.color_sample* %27 to float*
  store float %24, float* %28, align 8
  %29 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %30 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %29, i64 -3
  %31 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %30, i32 0, i32 1
  store i16 44, i16* %31, align 8
  %32 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 0, i64 2
  %33 = load float, float* %32, align 8
  %34 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %35 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %34, i64 -2
  %36 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %35, i32 0, i32 0
  %37 = bitcast %union.color_sample* %36 to float*
  store float %33, float* %37, align 8
  %38 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %39 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %38, i64 -2
  %40 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %39, i32 0, i32 1
  store i16 44, i16* %40, align 8
  %41 = getelementptr inbounds [4 x float], [4 x float]* %4, i64 0, i64 3
  %42 = load float, float* %41, align 4
  %43 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %44 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %43, i64 -1
  %45 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %44, i32 0, i32 0
  %46 = bitcast %union.color_sample* %45 to float*
  store float %42, float* %46, align 8
  %47 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %48 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %47, i64 -1
  %49 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %48, i32 0, i32 1
  store i16 44, i16* %49, align 8
  %50 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %51 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %50, i64 -1
  store %struct.ref_s* %51, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %52

52:                                               ; preds = %13, %11
  %53 = load i32, i32* %2, align 4
  ret i32 %53
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcurveto(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %4 = call i32 @common_curve(%struct.ref_s* %3, i32 (%struct.gs_state_s*, double, double, double, double, double, double)* @gs_curveto)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @common_curve(%struct.ref_s* %0, i32 (%struct.gs_state_s*, double, double, double, double, double, double)* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca i32 (%struct.gs_state_s*, double, double, double, double, double, double)*, align 8
  %6 = alloca [6 x float], align 16
  %7 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %4, align 8
  store i32 (%struct.gs_state_s*, double, double, double, double, double, double)* %1, i32 (%struct.gs_state_s*, double, double, double, double, double, double)** %5, align 8
  %8 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %9 = getelementptr inbounds [6 x float], [6 x float]* %6, i64 0, i64 0
  %10 = call i32 @num_params(%struct.ref_s* %8, i32 6, float* %9)
  store i32 %10, i32* %7, align 4
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = load i32, i32* %7, align 4
  store i32 %13, i32* %3, align 4
  br label %43

14:                                               ; preds = %2
  %15 = load i32 (%struct.gs_state_s*, double, double, double, double, double, double)*, i32 (%struct.gs_state_s*, double, double, double, double, double, double)** %5, align 8
  %16 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %17 = getelementptr inbounds [6 x float], [6 x float]* %6, i64 0, i64 0
  %18 = load float, float* %17, align 16
  %19 = fpext float %18 to double
  %20 = getelementptr inbounds [6 x float], [6 x float]* %6, i64 0, i64 1
  %21 = load float, float* %20, align 4
  %22 = fpext float %21 to double
  %23 = getelementptr inbounds [6 x float], [6 x float]* %6, i64 0, i64 2
  %24 = load float, float* %23, align 8
  %25 = fpext float %24 to double
  %26 = getelementptr inbounds [6 x float], [6 x float]* %6, i64 0, i64 3
  %27 = load float, float* %26, align 4
  %28 = fpext float %27 to double
  %29 = getelementptr inbounds [6 x float], [6 x float]* %6, i64 0, i64 4
  %30 = load float, float* %29, align 16
  %31 = fpext float %30 to double
  %32 = getelementptr inbounds [6 x float], [6 x float]* %6, i64 0, i64 5
  %33 = load float, float* %32, align 4
  %34 = fpext float %33 to double
  %35 = call i32 %15(%struct.gs_state_s* %16, double %19, double %22, double %25, double %28, double %31, double %34)
  store i32 %35, i32* %7, align 4
  %36 = load i32, i32* %7, align 4
  %37 = icmp sge i32 %36, 0
  br i1 %37, label %38, label %41

38:                                               ; preds = %14
  %39 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %40 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %39, i64 -6
  store %struct.ref_s* %40, %struct.ref_s** @osp, align 8
  br label %41

41:                                               ; preds = %38, %14
  %42 = load i32, i32* %7, align 4
  store i32 %42, i32* %3, align 4
  br label %43

43:                                               ; preds = %41, %12
  %44 = load i32, i32* %3, align 4
  ret i32 %44
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zrcurveto(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %4 = call i32 @common_curve(%struct.ref_s* %3, i32 (%struct.gs_state_s*, double, double, double, double, double, double)* @gs_rcurveto)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zclosepath(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %4 = call i32 @gs_closepath(%struct.gs_state_s* %3)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @zpath_op_init() #0 {
  %1 = call i32 (%struct.op_def*, ...) bitcast (void (%struct.op_def*)* @z_op_init to i32 (%struct.op_def*, ...)*)(%struct.op_def* getelementptr inbounds ([14 x %struct.op_def], [14 x %struct.op_def]* @zpath_op_init.my_defs, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zeq(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i64 -1
  store %struct.ref_s* %6, %struct.ref_s** %4, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = zext i16 %9 to i32
  %11 = and i32 %10, 255
  %12 = ashr i32 %11, 2
  switch i32 %12, label %34 [
    i32 13, label %13
    i32 0, label %13
    i32 10, label %13
    i32 2, label %23
  ]

13:                                               ; preds = %1, %1, %1
  %14 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 1
  %16 = load i16, i16* %15, align 8
  %17 = zext i16 %16 to i32
  %18 = xor i32 %17, -1
  %19 = and i32 %18, 512
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %13
  store i32 -7, i32* %2, align 4
  br label %77

22:                                               ; preds = %13
  br label %34

23:                                               ; preds = %1
  %24 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %25 = call %struct.ref_s* @dict_access_ref(%struct.ref_s* %24)
  %26 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %25, i32 0, i32 1
  %27 = load i16, i16* %26, align 8
  %28 = zext i16 %27 to i32
  %29 = xor i32 %28, -1
  %30 = and i32 %29, 512
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %32, label %33

32:                                               ; preds = %23
  store i32 -7, i32* %2, align 4
  br label %77

33:                                               ; preds = %23
  br label %34

34:                                               ; preds = %33, %22, %1
  %35 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %36 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %35, i32 0, i32 1
  %37 = load i16, i16* %36, align 8
  %38 = zext i16 %37 to i32
  %39 = and i32 %38, 255
  %40 = ashr i32 %39, 2
  switch i32 %40, label %62 [
    i32 13, label %41
    i32 0, label %41
    i32 10, label %41
    i32 2, label %51
  ]

41:                                               ; preds = %34, %34, %34
  %42 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %43 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %42, i32 0, i32 1
  %44 = load i16, i16* %43, align 8
  %45 = zext i16 %44 to i32
  %46 = xor i32 %45, -1
  %47 = and i32 %46, 512
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %49, label %50

49:                                               ; preds = %41
  store i32 -7, i32* %2, align 4
  br label %77

50:                                               ; preds = %41
  br label %62

51:                                               ; preds = %34
  %52 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %53 = call %struct.ref_s* @dict_access_ref(%struct.ref_s* %52)
  %54 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %53, i32 0, i32 1
  %55 = load i16, i16* %54, align 8
  %56 = zext i16 %55 to i32
  %57 = xor i32 %56, -1
  %58 = and i32 %57, 512
  %59 = icmp ne i32 %58, 0
  br i1 %59, label %60, label %61

60:                                               ; preds = %51
  store i32 -7, i32* %2, align 4
  br label %77

61:                                               ; preds = %51
  br label %62

62:                                               ; preds = %61, %50, %34
  %63 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %64 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %65 = call i32 (%struct.ref_s*, %struct.ref_s*, ...) bitcast (i32 (%struct.ref_s*, %struct.ref_s*)* @obj_eq to i32 (%struct.ref_s*, %struct.ref_s*, ...)*)(%struct.ref_s* %63, %struct.ref_s* %64)
  %66 = icmp ne i32 %65, 0
  %67 = zext i1 %66 to i64
  %68 = select i1 %66, i32 1, i32 0
  %69 = trunc i32 %68 to i16
  %70 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %71 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %70, i32 0, i32 0
  %72 = bitcast %union.color_sample* %71 to i16*
  store i16 %69, i16* %72, align 8
  %73 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %74 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %73, i32 0, i32 1
  store i16 4, i16* %74, align 8
  %75 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %76 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %75, i64 -1
  store %struct.ref_s* %76, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %77

77:                                               ; preds = %62, %60, %49, %32, %21
  %78 = load i32, i32* %2, align 4
  ret i32 %78
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zne(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  %3 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %5 = call i32 @zeq(%struct.ref_s* %4)
  store i32 %5, i32* %3, align 4
  %6 = load i32, i32* %3, align 4
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %17, label %8

8:                                                ; preds = %1
  %9 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i64 -1
  %11 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %10, i32 0, i32 0
  %12 = bitcast %union.color_sample* %11 to i16*
  %13 = load i16, i16* %12, align 8
  %14 = zext i16 %13 to i32
  %15 = xor i32 %14, 1
  %16 = trunc i32 %15 to i16
  store i16 %16, i16* %12, align 8
  br label %17

17:                                               ; preds = %8, %1
  %18 = load i32, i32* %3, align 4
  ret i32 %18
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zge(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = call i32 @obj_compare(%struct.ref_s* %5, i32 6)
  store i32 %6, i32* %4, align 4
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %9, label %11

9:                                                ; preds = %1
  %10 = load i32, i32* %4, align 4
  store i32 %10, i32* %2, align 4
  br label %23

11:                                               ; preds = %1
  %12 = load i32, i32* %4, align 4
  %13 = trunc i32 %12 to i16
  %14 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i64 -1
  %16 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %15, i32 0, i32 0
  %17 = bitcast %union.color_sample* %16 to i16*
  store i16 %13, i16* %17, align 8
  %18 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i64 -1
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i32 0, i32 1
  store i16 4, i16* %20, align 8
  %21 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i64 -1
  store %struct.ref_s* %22, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %23

23:                                               ; preds = %11, %9
  %24 = load i32, i32* %2, align 4
  ret i32 %24
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @obj_compare(%struct.ref_s* %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca i32, align 4
  %6 = alloca float, align 4
  %7 = alloca float, align 4
  store %struct.ref_s* %0, %struct.ref_s** %4, align 8
  store i32 %1, i32* %5, align 4
  %8 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i64 -1
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i32 0, i32 1
  %11 = load i16, i16* %10, align 8
  %12 = zext i16 %11 to i32
  %13 = and i32 %12, 255
  %14 = ashr i32 %13, 2
  switch i32 %14, label %144 [
    i32 5, label %15
    i32 11, label %67
    i32 13, label %92
  ]

15:                                               ; preds = %2
  %16 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %16, i32 0, i32 1
  %18 = load i16, i16* %17, align 8
  %19 = zext i16 %18 to i32
  %20 = and i32 %19, 255
  %21 = ashr i32 %20, 2
  switch i32 %21, label %65 [
    i32 5, label %22
    i32 11, label %54
  ]

22:                                               ; preds = %15
  %23 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %24 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %23, i64 -1
  %25 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %24, i32 0, i32 0
  %26 = bitcast %union.color_sample* %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i32 0, i32 0
  %30 = bitcast %union.color_sample* %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = icmp sgt i64 %27, %31
  br i1 %32, label %33, label %36

33:                                               ; preds = %22
  %34 = load i32, i32* %5, align 4
  %35 = ashr i32 %34, 2
  store i32 %35, i32* %5, align 4
  br label %51

36:                                               ; preds = %22
  %37 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %38 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %37, i64 -1
  %39 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %38, i32 0, i32 0
  %40 = bitcast %union.color_sample* %39 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %43 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %42, i32 0, i32 0
  %44 = bitcast %union.color_sample* %43 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = icmp eq i64 %41, %45
  br i1 %46, label %47, label %50

47:                                               ; preds = %36
  %48 = load i32, i32* %5, align 4
  %49 = ashr i32 %48, 1
  store i32 %49, i32* %5, align 4
  br label %50

50:                                               ; preds = %47, %36
  br label %51

51:                                               ; preds = %50, %33
  %52 = load i32, i32* %5, align 4
  %53 = and i32 %52, 1
  store i32 %53, i32* %3, align 4
  br label %163

54:                                               ; preds = %15
  %55 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %56 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %55, i64 -1
  %57 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %56, i32 0, i32 0
  %58 = bitcast %union.color_sample* %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = sitofp i64 %59 to float
  store float %60, float* %6, align 4
  %61 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %62 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %61, i32 0, i32 0
  %63 = bitcast %union.color_sample* %62 to float*
  %64 = load float, float* %63, align 8
  store float %64, float* %7, align 4
  br label %66

65:                                               ; preds = %15
  store i32 -20, i32* %3, align 4
  br label %163

66:                                               ; preds = %54
  br label %145

67:                                               ; preds = %2
  %68 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %69 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %68, i64 -1
  %70 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %69, i32 0, i32 0
  %71 = bitcast %union.color_sample* %70 to float*
  %72 = load float, float* %71, align 8
  store float %72, float* %6, align 4
  %73 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %74 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %73, i32 0, i32 1
  %75 = load i16, i16* %74, align 8
  %76 = zext i16 %75 to i32
  %77 = and i32 %76, 255
  %78 = ashr i32 %77, 2
  switch i32 %78, label %90 [
    i32 5, label %79
    i32 11, label %85
  ]

79:                                               ; preds = %67
  %80 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %81 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %80, i32 0, i32 0
  %82 = bitcast %union.color_sample* %81 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = sitofp i64 %83 to float
  store float %84, float* %7, align 4
  br label %91

85:                                               ; preds = %67
  %86 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %87 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %86, i32 0, i32 0
  %88 = bitcast %union.color_sample* %87 to float*
  %89 = load float, float* %88, align 8
  store float %89, float* %7, align 4
  br label %91

90:                                               ; preds = %67
  store i32 -20, i32* %3, align 4
  br label %163

91:                                               ; preds = %85, %79
  br label %145

92:                                               ; preds = %2
  %93 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %94 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %93, i64 -1
  %95 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %94, i32 0, i32 1
  %96 = load i16, i16* %95, align 8
  %97 = zext i16 %96 to i32
  %98 = xor i32 %97, -1
  %99 = and i32 %98, 512
  %100 = icmp ne i32 %99, 0
  br i1 %100, label %101, label %102

101:                                              ; preds = %92
  store i32 -7, i32* %3, align 4
  br label %163

102:                                              ; preds = %92
  %103 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %104 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %103, i32 0, i32 1
  %105 = load i16, i16* %104, align 8
  %106 = zext i16 %105 to i32
  %107 = and i32 %106, 252
  %108 = icmp eq i32 %107, 52
  br i1 %108, label %110, label %109

109:                                              ; preds = %102
  store i32 -20, i32* %3, align 4
  br label %163

110:                                              ; preds = %102
  %111 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %112 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %111, i32 0, i32 1
  %113 = load i16, i16* %112, align 8
  %114 = zext i16 %113 to i32
  %115 = xor i32 %114, -1
  %116 = and i32 %115, 512
  %117 = icmp ne i32 %116, 0
  br i1 %117, label %118, label %119

118:                                              ; preds = %110
  store i32 -7, i32* %3, align 4
  br label %163

119:                                              ; preds = %110
  %120 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %121 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %120, i64 -1
  %122 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %121, i32 0, i32 0
  %123 = bitcast %union.color_sample* %122 to i8**
  %124 = load i8*, i8** %123, align 8
  %125 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %126 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %125, i64 -1
  %127 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %126, i32 0, i32 2
  %128 = load i16, i16* %127, align 2
  %129 = zext i16 %128 to i32
  %130 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %131 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %130, i32 0, i32 0
  %132 = bitcast %union.color_sample* %131 to i8**
  %133 = load i8*, i8** %132, align 8
  %134 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %135 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %134, i32 0, i32 2
  %136 = load i16, i16* %135, align 2
  %137 = zext i16 %136 to i32
  %138 = call i32 (i8*, i32, i8*, i32, ...) bitcast (i32 (i8*, i32, i8*, i32)* @bytes_compare to i32 (i8*, i32, i8*, i32, ...)*)(i8* %124, i32 %129, i8* %133, i32 %137)
  %139 = add nsw i32 %138, 1
  %140 = load i32, i32* %5, align 4
  %141 = ashr i32 %140, %139
  store i32 %141, i32* %5, align 4
  %142 = load i32, i32* %5, align 4
  %143 = and i32 %142, 1
  store i32 %143, i32* %3, align 4
  br label %163

144:                                              ; preds = %2
  store i32 -20, i32* %3, align 4
  br label %163

145:                                              ; preds = %91, %66
  %146 = load float, float* %6, align 4
  %147 = load float, float* %7, align 4
  %148 = fcmp ogt float %146, %147
  br i1 %148, label %149, label %152

149:                                              ; preds = %145
  %150 = load i32, i32* %5, align 4
  %151 = ashr i32 %150, 2
  store i32 %151, i32* %5, align 4
  br label %160

152:                                              ; preds = %145
  %153 = load float, float* %6, align 4
  %154 = load float, float* %7, align 4
  %155 = fcmp oeq float %153, %154
  br i1 %155, label %156, label %159

156:                                              ; preds = %152
  %157 = load i32, i32* %5, align 4
  %158 = ashr i32 %157, 1
  store i32 %158, i32* %5, align 4
  br label %159

159:                                              ; preds = %156, %152
  br label %160

160:                                              ; preds = %159, %149
  %161 = load i32, i32* %5, align 4
  %162 = and i32 %161, 1
  store i32 %162, i32* %3, align 4
  br label %163

163:                                              ; preds = %160, %144, %119, %118, %109, %101, %90, %65, %51
  %164 = load i32, i32* %3, align 4
  ret i32 %164
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zgt(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = call i32 @obj_compare(%struct.ref_s* %5, i32 4)
  store i32 %6, i32* %4, align 4
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %9, label %11

9:                                                ; preds = %1
  %10 = load i32, i32* %4, align 4
  store i32 %10, i32* %2, align 4
  br label %23

11:                                               ; preds = %1
  %12 = load i32, i32* %4, align 4
  %13 = trunc i32 %12 to i16
  %14 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i64 -1
  %16 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %15, i32 0, i32 0
  %17 = bitcast %union.color_sample* %16 to i16*
  store i16 %13, i16* %17, align 8
  %18 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i64 -1
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i32 0, i32 1
  store i16 4, i16* %20, align 8
  %21 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i64 -1
  store %struct.ref_s* %22, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %23

23:                                               ; preds = %11, %9
  %24 = load i32, i32* %2, align 4
  ret i32 %24
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zle(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = call i32 @obj_compare(%struct.ref_s* %5, i32 3)
  store i32 %6, i32* %4, align 4
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %9, label %11

9:                                                ; preds = %1
  %10 = load i32, i32* %4, align 4
  store i32 %10, i32* %2, align 4
  br label %23

11:                                               ; preds = %1
  %12 = load i32, i32* %4, align 4
  %13 = trunc i32 %12 to i16
  %14 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i64 -1
  %16 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %15, i32 0, i32 0
  %17 = bitcast %union.color_sample* %16 to i16*
  store i16 %13, i16* %17, align 8
  %18 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i64 -1
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i32 0, i32 1
  store i16 4, i16* %20, align 8
  %21 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i64 -1
  store %struct.ref_s* %22, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %23

23:                                               ; preds = %11, %9
  %24 = load i32, i32* %2, align 4
  ret i32 %24
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zlt(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = call i32 @obj_compare(%struct.ref_s* %5, i32 1)
  store i32 %6, i32* %4, align 4
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %9, label %11

9:                                                ; preds = %1
  %10 = load i32, i32* %4, align 4
  store i32 %10, i32* %2, align 4
  br label %23

11:                                               ; preds = %1
  %12 = load i32, i32* %4, align 4
  %13 = trunc i32 %12 to i16
  %14 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i64 -1
  %16 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %15, i32 0, i32 0
  %17 = bitcast %union.color_sample* %16 to i16*
  store i16 %13, i16* %17, align 8
  %18 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i64 -1
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i32 0, i32 1
  store i16 4, i16* %20, align 8
  %21 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i64 -1
  store %struct.ref_s* %22, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %23

23:                                               ; preds = %11, %9
  %24 = load i32, i32* %2, align 4
  ret i32 %24
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zmax(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = call i32 @obj_compare(%struct.ref_s* %5, i32 1)
  store i32 %6, i32* %4, align 4
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %9, label %11

9:                                                ; preds = %1
  %10 = load i32, i32* %4, align 4
  store i32 %10, i32* %2, align 4
  br label %24

11:                                               ; preds = %1
  %12 = load i32, i32* %4, align 4
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %21

14:                                               ; preds = %11
  %15 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %16 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %15, i64 -1
  %17 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i64 0
  %19 = bitcast %struct.ref_s* %16 to i8*
  %20 = bitcast %struct.ref_s* %18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 16, i1 false)
  br label %21

21:                                               ; preds = %14, %11
  %22 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i64 -1
  store %struct.ref_s* %23, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %24

24:                                               ; preds = %21, %9
  %25 = load i32, i32* %2, align 4
  ret i32 %25
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zmin(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = call i32 @obj_compare(%struct.ref_s* %5, i32 4)
  store i32 %6, i32* %4, align 4
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %9, label %11

9:                                                ; preds = %1
  %10 = load i32, i32* %4, align 4
  store i32 %10, i32* %2, align 4
  br label %24

11:                                               ; preds = %1
  %12 = load i32, i32* %4, align 4
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %21

14:                                               ; preds = %11
  %15 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %16 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %15, i64 -1
  %17 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i64 0
  %19 = bitcast %struct.ref_s* %16 to i8*
  %20 = bitcast %struct.ref_s* %18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 16, i1 false)
  br label %21

21:                                               ; preds = %14, %11
  %22 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i64 -1
  store %struct.ref_s* %23, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %24

24:                                               ; preds = %21, %9
  %25 = load i32, i32* %2, align 4
  ret i32 %25
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zand(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i64 -1
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i32 0, i32 1
  %7 = load i16, i16* %6, align 8
  %8 = zext i16 %7 to i32
  %9 = and i32 %8, 252
  %10 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %11 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %10, i32 0, i32 1
  %12 = load i16, i16* %11, align 8
  %13 = zext i16 %12 to i32
  %14 = and i32 %13, 255
  %15 = ashr i32 %14, 2
  %16 = shl i32 %15, 2
  %17 = icmp eq i32 %9, %16
  br i1 %17, label %19, label %18

18:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %55

19:                                               ; preds = %1
  %20 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %21 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %20, i32 0, i32 1
  %22 = load i16, i16* %21, align 8
  %23 = zext i16 %22 to i32
  %24 = and i32 %23, 255
  %25 = ashr i32 %24, 2
  switch i32 %25, label %51 [
    i32 1, label %26
    i32 5, label %40
  ]

26:                                               ; preds = %19
  %27 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %28 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %27, i32 0, i32 0
  %29 = bitcast %union.color_sample* %28 to i16*
  %30 = load i16, i16* %29, align 8
  %31 = zext i16 %30 to i32
  %32 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %33 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %32, i64 -1
  %34 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %33, i32 0, i32 0
  %35 = bitcast %union.color_sample* %34 to i16*
  %36 = load i16, i16* %35, align 8
  %37 = zext i16 %36 to i32
  %38 = and i32 %37, %31
  %39 = trunc i32 %38 to i16
  store i16 %39, i16* %35, align 8
  br label %52

40:                                               ; preds = %19
  %41 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %42 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %41, i32 0, i32 0
  %43 = bitcast %union.color_sample* %42 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %46 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %45, i64 -1
  %47 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %46, i32 0, i32 0
  %48 = bitcast %union.color_sample* %47 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = and i64 %49, %44
  store i64 %50, i64* %48, align 8
  br label %52

51:                                               ; preds = %19
  store i32 -20, i32* %2, align 4
  br label %55

52:                                               ; preds = %40, %26
  %53 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %54 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %53, i64 -1
  store %struct.ref_s* %54, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %55

55:                                               ; preds = %52, %51, %18
  %56 = load i32, i32* %2, align 4
  ret i32 %56
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @znot(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i32 0, i32 1
  %6 = load i16, i16* %5, align 8
  %7 = zext i16 %6 to i32
  %8 = and i32 %7, 255
  %9 = ashr i32 %8, 2
  switch i32 %9, label %31 [
    i32 1, label %10
    i32 5, label %22
  ]

10:                                               ; preds = %1
  %11 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %12 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %11, i32 0, i32 0
  %13 = bitcast %union.color_sample* %12 to i16*
  %14 = load i16, i16* %13, align 8
  %15 = icmp ne i16 %14, 0
  %16 = xor i1 %15, true
  %17 = zext i1 %16 to i32
  %18 = trunc i32 %17 to i16
  %19 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i32 0, i32 0
  %21 = bitcast %union.color_sample* %20 to i16*
  store i16 %18, i16* %21, align 8
  br label %32

22:                                               ; preds = %1
  %23 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %24 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %23, i32 0, i32 0
  %25 = bitcast %union.color_sample* %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = xor i64 %26, -1
  %28 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i32 0, i32 0
  %30 = bitcast %union.color_sample* %29 to i64*
  store i64 %27, i64* %30, align 8
  br label %32

31:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %33

32:                                               ; preds = %22, %10
  store i32 0, i32* %2, align 4
  br label %33

33:                                               ; preds = %32, %31
  %34 = load i32, i32* %2, align 4
  ret i32 %34
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zor(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i64 -1
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i32 0, i32 1
  %7 = load i16, i16* %6, align 8
  %8 = zext i16 %7 to i32
  %9 = and i32 %8, 252
  %10 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %11 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %10, i32 0, i32 1
  %12 = load i16, i16* %11, align 8
  %13 = zext i16 %12 to i32
  %14 = and i32 %13, 255
  %15 = ashr i32 %14, 2
  %16 = shl i32 %15, 2
  %17 = icmp eq i32 %9, %16
  br i1 %17, label %19, label %18

18:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %55

19:                                               ; preds = %1
  %20 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %21 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %20, i32 0, i32 1
  %22 = load i16, i16* %21, align 8
  %23 = zext i16 %22 to i32
  %24 = and i32 %23, 255
  %25 = ashr i32 %24, 2
  switch i32 %25, label %51 [
    i32 1, label %26
    i32 5, label %40
  ]

26:                                               ; preds = %19
  %27 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %28 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %27, i32 0, i32 0
  %29 = bitcast %union.color_sample* %28 to i16*
  %30 = load i16, i16* %29, align 8
  %31 = zext i16 %30 to i32
  %32 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %33 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %32, i64 -1
  %34 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %33, i32 0, i32 0
  %35 = bitcast %union.color_sample* %34 to i16*
  %36 = load i16, i16* %35, align 8
  %37 = zext i16 %36 to i32
  %38 = or i32 %37, %31
  %39 = trunc i32 %38 to i16
  store i16 %39, i16* %35, align 8
  br label %52

40:                                               ; preds = %19
  %41 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %42 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %41, i32 0, i32 0
  %43 = bitcast %union.color_sample* %42 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %46 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %45, i64 -1
  %47 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %46, i32 0, i32 0
  %48 = bitcast %union.color_sample* %47 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = or i64 %49, %44
  store i64 %50, i64* %48, align 8
  br label %52

51:                                               ; preds = %19
  store i32 -20, i32* %2, align 4
  br label %55

52:                                               ; preds = %40, %26
  %53 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %54 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %53, i64 -1
  store %struct.ref_s* %54, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %55

55:                                               ; preds = %52, %51, %18
  %56 = load i32, i32* %2, align 4
  ret i32 %56
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zxor(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i64 -1
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i32 0, i32 1
  %7 = load i16, i16* %6, align 8
  %8 = zext i16 %7 to i32
  %9 = and i32 %8, 252
  %10 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %11 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %10, i32 0, i32 1
  %12 = load i16, i16* %11, align 8
  %13 = zext i16 %12 to i32
  %14 = and i32 %13, 255
  %15 = ashr i32 %14, 2
  %16 = shl i32 %15, 2
  %17 = icmp eq i32 %9, %16
  br i1 %17, label %19, label %18

18:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %55

19:                                               ; preds = %1
  %20 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %21 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %20, i32 0, i32 1
  %22 = load i16, i16* %21, align 8
  %23 = zext i16 %22 to i32
  %24 = and i32 %23, 255
  %25 = ashr i32 %24, 2
  switch i32 %25, label %51 [
    i32 1, label %26
    i32 5, label %40
  ]

26:                                               ; preds = %19
  %27 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %28 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %27, i32 0, i32 0
  %29 = bitcast %union.color_sample* %28 to i16*
  %30 = load i16, i16* %29, align 8
  %31 = zext i16 %30 to i32
  %32 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %33 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %32, i64 -1
  %34 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %33, i32 0, i32 0
  %35 = bitcast %union.color_sample* %34 to i16*
  %36 = load i16, i16* %35, align 8
  %37 = zext i16 %36 to i32
  %38 = xor i32 %37, %31
  %39 = trunc i32 %38 to i16
  store i16 %39, i16* %35, align 8
  br label %52

40:                                               ; preds = %19
  %41 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %42 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %41, i32 0, i32 0
  %43 = bitcast %union.color_sample* %42 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %46 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %45, i64 -1
  %47 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %46, i32 0, i32 0
  %48 = bitcast %union.color_sample* %47 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = xor i64 %49, %44
  store i64 %50, i64* %48, align 8
  br label %52

51:                                               ; preds = %19
  store i32 -20, i32* %2, align 4
  br label %55

52:                                               ; preds = %40, %26
  %53 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %54 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %53, i64 -1
  store %struct.ref_s* %54, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %55

55:                                               ; preds = %52, %51, %18
  %56 = load i32, i32* %2, align 4
  ret i32 %56
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zbitshift(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i64 -1
  %7 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = zext i16 %8 to i32
  %10 = and i32 %9, 252
  %11 = icmp eq i32 %10, 20
  br i1 %11, label %13, label %12

12:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %72

13:                                               ; preds = %1
  %14 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 1
  %16 = load i16, i16* %15, align 8
  %17 = zext i16 %16 to i32
  %18 = and i32 %17, 252
  %19 = icmp eq i32 %18, 20
  br i1 %19, label %21, label %20

20:                                               ; preds = %13
  store i32 -20, i32* %2, align 4
  br label %72

21:                                               ; preds = %13
  %22 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i32 0, i32 0
  %24 = bitcast %union.color_sample* %23 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = icmp slt i64 %25, -31
  br i1 %26, label %33, label %27

27:                                               ; preds = %21
  %28 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i32 0, i32 0
  %30 = bitcast %union.color_sample* %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = icmp sgt i64 %31, 31
  br i1 %32, label %33, label %38

33:                                               ; preds = %27, %21
  %34 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %35 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %34, i64 -1
  %36 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %35, i32 0, i32 0
  %37 = bitcast %union.color_sample* %36 to i64*
  store i64 0, i64* %37, align 8
  br label %69

38:                                               ; preds = %27
  %39 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %40 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %39, i32 0, i32 0
  %41 = bitcast %union.color_sample* %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = trunc i64 %42 to i32
  store i32 %43, i32* %4, align 4
  %44 = icmp slt i32 %43, 0
  br i1 %44, label %45, label %59

45:                                               ; preds = %38
  %46 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %47 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %46, i64 -1
  %48 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %47, i32 0, i32 0
  %49 = bitcast %union.color_sample* %48 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = load i32, i32* %4, align 4
  %52 = sub nsw i32 0, %51
  %53 = zext i32 %52 to i64
  %54 = lshr i64 %50, %53
  %55 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %56 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %55, i64 -1
  %57 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %56, i32 0, i32 0
  %58 = bitcast %union.color_sample* %57 to i64*
  store i64 %54, i64* %58, align 8
  br label %68

59:                                               ; preds = %38
  %60 = load i32, i32* %4, align 4
  %61 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %62 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %61, i64 -1
  %63 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %62, i32 0, i32 0
  %64 = bitcast %union.color_sample* %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = zext i32 %60 to i64
  %67 = shl i64 %65, %66
  store i64 %67, i64* %64, align 8
  br label %68

68:                                               ; preds = %59, %45
  br label %69

69:                                               ; preds = %68, %33
  %70 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %71 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %70, i64 -1
  store %struct.ref_s* %71, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %72

72:                                               ; preds = %69, %20, %12
  %73 = load i32, i32* %2, align 4
  ret i32 %73
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @zrelbit_op_init() #0 {
  %1 = call i32 (%struct.op_def*, ...) bitcast (void (%struct.op_def*)* @z_op_init to i32 (%struct.op_def*, ...)*)(%struct.op_def* getelementptr inbounds ([14 x %struct.op_def], [14 x %struct.op_def]* @zrelbit_op_init.my_defs, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zpop(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** getelementptr inbounds ([6 x %struct.ref_s*], [6 x %struct.ref_s*]* @osp_nargs, i64 0, i64 0), align 16
  %6 = icmp ult %struct.ref_s* %4, %5
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  store i32 -17, i32* %2, align 4
  br label %11

8:                                                ; preds = %1
  %9 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i64 -1
  store %struct.ref_s* %10, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %11

11:                                               ; preds = %8, %7
  %12 = load i32, i32* %2, align 4
  ret i32 %12
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zexch(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s, align 8
  %5 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  store %struct.ref_s* %4, %struct.ref_s** %5, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** getelementptr inbounds ([6 x %struct.ref_s*], [6 x %struct.ref_s*]* @osp_nargs, i64 0, i64 1), align 8
  %8 = icmp ult %struct.ref_s* %6, %7
  br i1 %8, label %9, label %10

9:                                                ; preds = %1
  store i32 -17, i32* %2, align 4
  br label %27

10:                                               ; preds = %1
  %11 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %12 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %11, i64 0
  %13 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i64 -1
  %15 = bitcast %struct.ref_s* %12 to i8*
  %16 = bitcast %struct.ref_s* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* align 8 %16, i64 16, i1 false)
  %17 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i64 -1
  %19 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i64 0
  %21 = bitcast %struct.ref_s* %18 to i8*
  %22 = bitcast %struct.ref_s* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 16, i1 false)
  %23 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %24 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %25 = bitcast %struct.ref_s* %23 to i8*
  %26 = bitcast %struct.ref_s* %24 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %25, i8* align 8 %26, i64 16, i1 false)
  store i32 0, i32* %2, align 4
  br label %27

27:                                               ; preds = %10, %9
  %28 = load i32, i32* %2, align 4
  ret i32 %28
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zdup(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** getelementptr inbounds ([6 x %struct.ref_s*], [6 x %struct.ref_s*]* @osp_nargs, i64 0, i64 0), align 16
  %6 = icmp ult %struct.ref_s* %4, %5
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  store i32 -17, i32* %2, align 4
  br label %23

8:                                                ; preds = %1
  %9 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i64 1
  store %struct.ref_s* %10, %struct.ref_s** %3, align 8
  store %struct.ref_s* %10, %struct.ref_s** @osp, align 8
  %11 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %12 = icmp ugt %struct.ref_s* %10, %11
  br i1 %12, label %13, label %16

13:                                               ; preds = %8
  %14 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i64 -1
  store %struct.ref_s* %15, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %23

16:                                               ; preds = %8
  %17 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i64 0
  %19 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i64 -1
  %21 = bitcast %struct.ref_s* %18 to i8*
  %22 = bitcast %struct.ref_s* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 16, i1 false)
  store i32 0, i32* %2, align 4
  br label %23

23:                                               ; preds = %16, %13, %7
  %24 = load i32, i32* %2, align 4
  ret i32 %24
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zindex(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i32 0, i32 1
  %7 = load i16, i16* %6, align 8
  %8 = zext i16 %7 to i32
  %9 = and i32 %8, 252
  %10 = icmp eq i32 %9, 20
  br i1 %10, label %12, label %11

11:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %39

12:                                               ; preds = %1
  %13 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i32 0, i32 0
  %15 = bitcast %union.color_sample* %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %18 = load %struct.ref_s*, %struct.ref_s** @osbot, align 8
  %19 = ptrtoint %struct.ref_s* %17 to i64
  %20 = ptrtoint %struct.ref_s* %18 to i64
  %21 = sub i64 %19, %20
  %22 = sdiv exact i64 %21, 16
  %23 = icmp uge i64 %16, %22
  br i1 %23, label %24, label %25

24:                                               ; preds = %12
  store i32 -15, i32* %2, align 4
  br label %39

25:                                               ; preds = %12
  %26 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %27 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %28 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %27, i32 0, i32 0
  %29 = bitcast %union.color_sample* %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = trunc i64 %30 to i32
  %32 = xor i32 %31, -1
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %26, i64 %33
  store %struct.ref_s* %34, %struct.ref_s** %4, align 8
  %35 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %36 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %37 = bitcast %struct.ref_s* %35 to i8*
  %38 = bitcast %struct.ref_s* %36 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 16, i1 false)
  store i32 0, i32* %2, align 4
  br label %39

39:                                               ; preds = %25, %24, %11
  %40 = load i32, i32* %2, align 4
  ret i32 %40
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zroll(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %struct.ref_s*, align 8
  %10 = alloca %struct.ref_s, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %13 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i64 -1
  store %struct.ref_s* %14, %struct.ref_s** %4, align 8
  %15 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %16 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %15, i32 0, i32 1
  %17 = load i16, i16* %16, align 8
  %18 = zext i16 %17 to i32
  %19 = and i32 %18, 252
  %20 = icmp eq i32 %19, 20
  br i1 %20, label %22, label %21

21:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %132

22:                                               ; preds = %1
  %23 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %24 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %23, i32 0, i32 1
  %25 = load i16, i16* %24, align 8
  %26 = zext i16 %25 to i32
  %27 = and i32 %26, 252
  %28 = icmp eq i32 %27, 20
  br i1 %28, label %30, label %29

29:                                               ; preds = %22
  store i32 -20, i32* %2, align 4
  br label %132

30:                                               ; preds = %22
  %31 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %32 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %31, i32 0, i32 0
  %33 = bitcast %union.color_sample* %32 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %36 = load %struct.ref_s*, %struct.ref_s** @osbot, align 8
  %37 = ptrtoint %struct.ref_s* %35 to i64
  %38 = ptrtoint %struct.ref_s* %36 to i64
  %39 = sub i64 %37, %38
  %40 = sdiv exact i64 %39, 16
  %41 = icmp ugt i64 %34, %40
  br i1 %41, label %42, label %43

42:                                               ; preds = %30
  store i32 -15, i32* %2, align 4
  br label %132

43:                                               ; preds = %30
  %44 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %45 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %44, i32 0, i32 0
  %46 = bitcast %union.color_sample* %45 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = trunc i64 %47 to i32
  store i32 %48, i32* %5, align 4
  %49 = load i32, i32* %5, align 4
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %54

51:                                               ; preds = %43
  %52 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %53 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %52, i64 -2
  store %struct.ref_s* %53, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %132

54:                                               ; preds = %43
  %55 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %56 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %55, i32 0, i32 0
  %57 = bitcast %union.color_sample* %56 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = load i32, i32* %5, align 4
  %60 = sext i32 %59 to i64
  %61 = srem i64 %58, %60
  %62 = trunc i64 %61 to i32
  store i32 %62, i32* %6, align 4
  %63 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %64 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %63, i64 -2
  store %struct.ref_s* %64, %struct.ref_s** @osp, align 8
  %65 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %66 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %65, i64 -2
  store %struct.ref_s* %66, %struct.ref_s** %3, align 8
  %67 = load i32, i32* %6, align 4
  %68 = icmp slt i32 %67, 0
  br i1 %68, label %69, label %73

69:                                               ; preds = %54
  %70 = load i32, i32* %5, align 4
  %71 = load i32, i32* %6, align 4
  %72 = add nsw i32 %71, %70
  store i32 %72, i32* %6, align 4
  br label %78

73:                                               ; preds = %54
  %74 = load i32, i32* %6, align 4
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %77

76:                                               ; preds = %73
  store i32 0, i32* %2, align 4
  br label %132

77:                                               ; preds = %73
  br label %78

78:                                               ; preds = %77, %69
  %79 = load i32, i32* %5, align 4
  %80 = load i32, i32* %6, align 4
  %81 = sub nsw i32 %79, %80
  store i32 %81, i32* %6, align 4
  store i32 0, i32* %7, align 4
  %82 = load i32, i32* %5, align 4
  store i32 %82, i32* %8, align 4
  %83 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %84 = load i32, i32* %5, align 4
  %85 = sext i32 %84 to i64
  %86 = sub i64 0, %85
  %87 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %83, i64 %86
  %88 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %87, i64 1
  store %struct.ref_s* %88, %struct.ref_s** %9, align 8
  br label %89

89:                                               ; preds = %122, %78
  %90 = load i32, i32* %8, align 4
  %91 = icmp ne i32 %90, 0
  br i1 %91, label %92, label %131

92:                                               ; preds = %89
  %93 = load i32, i32* %7, align 4
  store i32 %93, i32* %11, align 4
  %94 = load %struct.ref_s*, %struct.ref_s** %9, align 8
  %95 = load i32, i32* %7, align 4
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %94, i64 %96
  %98 = bitcast %struct.ref_s* %10 to i8*
  %99 = bitcast %struct.ref_s* %97 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %98, i8* align 8 %99, i64 16, i1 false)
  br label %100

100:                                              ; preds = %110, %92
  %101 = load i32, i32* %8, align 4
  %102 = add nsw i32 %101, -1
  store i32 %102, i32* %8, align 4
  %103 = load i32, i32* %11, align 4
  %104 = load i32, i32* %6, align 4
  %105 = add nsw i32 %103, %104
  %106 = load i32, i32* %5, align 4
  %107 = srem i32 %105, %106
  store i32 %107, i32* %12, align 4
  %108 = load i32, i32* %7, align 4
  %109 = icmp ne i32 %107, %108
  br i1 %109, label %110, label %122

110:                                              ; preds = %100
  %111 = load %struct.ref_s*, %struct.ref_s** %9, align 8
  %112 = load i32, i32* %11, align 4
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %111, i64 %113
  %115 = load %struct.ref_s*, %struct.ref_s** %9, align 8
  %116 = load i32, i32* %12, align 4
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %115, i64 %117
  %119 = bitcast %struct.ref_s* %114 to i8*
  %120 = bitcast %struct.ref_s* %118 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %119, i8* align 8 %120, i64 16, i1 false)
  %121 = load i32, i32* %12, align 4
  store i32 %121, i32* %11, align 4
  br label %100

122:                                              ; preds = %100
  %123 = load %struct.ref_s*, %struct.ref_s** %9, align 8
  %124 = load i32, i32* %11, align 4
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %123, i64 %125
  %127 = bitcast %struct.ref_s* %126 to i8*
  %128 = bitcast %struct.ref_s* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %127, i8* align 8 %128, i64 16, i1 false)
  %129 = load i32, i32* %7, align 4
  %130 = add nsw i32 %129, 1
  store i32 %130, i32* %7, align 4
  br label %89

131:                                              ; preds = %89
  store i32 0, i32* %2, align 4
  br label %132

132:                                              ; preds = %131, %76, %51, %42, %29, %21
  %133 = load i32, i32* %2, align 4
  ret i32 %133
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zclear_stack(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.ref_s*, %struct.ref_s** @osbot, align 8
  %4 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %3, i64 -1
  store %struct.ref_s* %4, %struct.ref_s** @osp, align 8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcount(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %4, i64 1
  store %struct.ref_s* %5, %struct.ref_s** %3, align 8
  store %struct.ref_s* %5, %struct.ref_s** @osp, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %7 = icmp ugt %struct.ref_s* %5, %6
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i64 -1
  store %struct.ref_s* %10, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %23

11:                                               ; preds = %1
  %12 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %13 = load %struct.ref_s*, %struct.ref_s** @osbot, align 8
  %14 = ptrtoint %struct.ref_s* %12 to i64
  %15 = ptrtoint %struct.ref_s* %13 to i64
  %16 = sub i64 %14, %15
  %17 = sdiv exact i64 %16, 16
  %18 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i32 0, i32 0
  %20 = bitcast %union.color_sample* %19 to i64*
  store i64 %17, i64* %20, align 8
  %21 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i32 0, i32 1
  store i16 20, i16* %22, align 8
  store i32 0, i32* %2, align 4
  br label %23

23:                                               ; preds = %11, %8
  %24 = load i32, i32* %2, align 4
  ret i32 %24
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcleartomark(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  br label %4

4:                                                ; preds = %19, %1
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** @osbot, align 8
  %7 = icmp uge %struct.ref_s* %5, %6
  br i1 %7, label %8, label %22

8:                                                ; preds = %4
  %9 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i32 0, i32 1
  %11 = load i16, i16* %10, align 8
  %12 = zext i16 %11 to i32
  %13 = and i32 %12, 255
  %14 = ashr i32 %13, 2
  %15 = icmp eq i32 %14, 6
  br i1 %15, label %16, label %19

16:                                               ; preds = %8
  %17 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i64 -1
  store %struct.ref_s* %18, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %23

19:                                               ; preds = %8
  %20 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %21 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %20, i32 -1
  store %struct.ref_s* %21, %struct.ref_s** %3, align 8
  br label %4

22:                                               ; preds = %4
  store i32 -24, i32* %2, align 4
  br label %23

23:                                               ; preds = %22, %16
  %24 = load i32, i32* %2, align 4
  ret i32 %24
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcounttomark(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  store %struct.ref_s* %5, %struct.ref_s** %4, align 8
  br label %6

6:                                                ; preds = %39, %1
  %7 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %8 = load %struct.ref_s*, %struct.ref_s** @osbot, align 8
  %9 = icmp uge %struct.ref_s* %7, %8
  br i1 %9, label %10, label %42

10:                                               ; preds = %6
  %11 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %12 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %11, i32 0, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = zext i16 %13 to i32
  %15 = and i32 %14, 255
  %16 = ashr i32 %15, 2
  %17 = icmp eq i32 %16, 6
  br i1 %17, label %18, label %39

18:                                               ; preds = %10
  %19 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i64 1
  store %struct.ref_s* %20, %struct.ref_s** %3, align 8
  store %struct.ref_s* %20, %struct.ref_s** @osp, align 8
  %21 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %22 = icmp ugt %struct.ref_s* %20, %21
  br i1 %22, label %23, label %26

23:                                               ; preds = %18
  %24 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %25 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %24, i64 -1
  store %struct.ref_s* %25, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %43

26:                                               ; preds = %18
  %27 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %28 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %29 = ptrtoint %struct.ref_s* %27 to i64
  %30 = ptrtoint %struct.ref_s* %28 to i64
  %31 = sub i64 %29, %30
  %32 = sdiv exact i64 %31, 16
  %33 = sub nsw i64 %32, 1
  %34 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %35 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %34, i32 0, i32 0
  %36 = bitcast %union.color_sample* %35 to i64*
  store i64 %33, i64* %36, align 8
  %37 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %38 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %37, i32 0, i32 1
  store i16 20, i16* %38, align 8
  store i32 0, i32* %2, align 4
  br label %43

39:                                               ; preds = %10
  %40 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %41 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %40, i32 -1
  store %struct.ref_s* %41, %struct.ref_s** %4, align 8
  br label %6

42:                                               ; preds = %6
  store i32 -24, i32* %2, align 4
  br label %43

43:                                               ; preds = %42, %26, %23
  %44 = load i32, i32* %2, align 4
  ret i32 %44
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @zstack_op_init() #0 {
  %1 = call i32 (%struct.op_def*, ...) bitcast (void (%struct.op_def*)* @z_op_init to i32 (%struct.op_def*, ...)*)(%struct.op_def* getelementptr inbounds ([10 x %struct.op_def], [10 x %struct.op_def]* @zstack_op_init.my_defs, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zstring(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = zext i16 %8 to i32
  %10 = and i32 %9, 252
  %11 = icmp eq i32 %10, 20
  br i1 %11, label %13, label %12

12:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %51

13:                                               ; preds = %1
  %14 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 0
  %16 = bitcast %union.color_sample* %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = icmp slt i64 %17, 0
  br i1 %18, label %25, label %19

19:                                               ; preds = %13
  %20 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %21 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %20, i32 0, i32 0
  %22 = bitcast %union.color_sample* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = icmp ugt i64 %23, 4294967295
  br i1 %24, label %25, label %26

25:                                               ; preds = %19, %13
  store i32 -15, i32* %2, align 4
  br label %51

26:                                               ; preds = %19
  %27 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %28 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %27, i32 0, i32 0
  %29 = bitcast %union.color_sample* %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = trunc i64 %30 to i32
  store i32 %31, i32* %5, align 4
  %32 = load i32, i32* %5, align 4
  %33 = call i8* @alloc(i32 %32, i32 1, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.683, i64 0, i64 0))
  store i8* %33, i8** %4, align 8
  %34 = load i8*, i8** %4, align 8
  %35 = icmp eq i8* %34, null
  br i1 %35, label %36, label %37

36:                                               ; preds = %26
  store i32 -25, i32* %2, align 4
  br label %51

37:                                               ; preds = %26
  %38 = load i8*, i8** %4, align 8
  %39 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %40 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %39, i32 0, i32 0
  %41 = bitcast %union.color_sample* %40 to i8**
  store i8* %38, i8** %41, align 8
  %42 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %43 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %42, i32 0, i32 1
  store i16 822, i16* %43, align 8
  %44 = load i32, i32* %5, align 4
  %45 = trunc i32 %44 to i16
  %46 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %47 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %46, i32 0, i32 2
  store i16 %45, i16* %47, align 2
  %48 = load i8*, i8** %4, align 8
  %49 = load i32, i32* %5, align 4
  %50 = zext i32 %49 to i64
  call void @llvm.memset.p0i8.i64(i8* align 1 %48, i8 0, i64 %50, i1 false)
  store i32 0, i32* %2, align 4
  br label %51

51:                                               ; preds = %37, %36, %25, %12
  %52 = load i32, i32* %2, align 4
  ret i32 %52
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zanchorsearch(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i64 -1
  store %struct.ref_s* %7, %struct.ref_s** %4, align 8
  %8 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 2
  %10 = load i16, i16* %9, align 2
  %11 = zext i16 %10 to i32
  store i32 %11, i32* %5, align 4
  %12 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %13 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %12, i32 0, i32 1
  %14 = load i16, i16* %13, align 8
  %15 = zext i16 %14 to i32
  %16 = and i32 %15, 252
  %17 = icmp eq i32 %16, 52
  br i1 %17, label %19, label %18

18:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %114

19:                                               ; preds = %1
  %20 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %21 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %20, i32 0, i32 1
  %22 = load i16, i16* %21, align 8
  %23 = zext i16 %22 to i32
  %24 = xor i32 %23, -1
  %25 = and i32 %24, 512
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %28

27:                                               ; preds = %19
  store i32 -7, i32* %2, align 4
  br label %114

28:                                               ; preds = %19
  %29 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %30 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %29, i32 0, i32 1
  %31 = load i16, i16* %30, align 8
  %32 = zext i16 %31 to i32
  %33 = and i32 %32, 252
  %34 = icmp eq i32 %33, 52
  br i1 %34, label %36, label %35

35:                                               ; preds = %28
  store i32 -20, i32* %2, align 4
  br label %114

36:                                               ; preds = %28
  %37 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %38 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %37, i32 0, i32 1
  %39 = load i16, i16* %38, align 8
  %40 = zext i16 %39 to i32
  %41 = xor i32 %40, -1
  %42 = and i32 %41, 512
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %44, label %45

44:                                               ; preds = %36
  store i32 -7, i32* %2, align 4
  br label %114

45:                                               ; preds = %36
  %46 = load i32, i32* %5, align 4
  %47 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %48 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %47, i32 0, i32 2
  %49 = load i16, i16* %48, align 2
  %50 = zext i16 %49 to i32
  %51 = icmp ule i32 %46, %50
  br i1 %51, label %52, label %107

52:                                               ; preds = %45
  %53 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %54 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %53, i32 0, i32 0
  %55 = bitcast %union.color_sample* %54 to i8**
  %56 = load i8*, i8** %55, align 8
  %57 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %58 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %57, i32 0, i32 0
  %59 = bitcast %union.color_sample* %58 to i8**
  %60 = load i8*, i8** %59, align 8
  %61 = load i32, i32* %5, align 4
  %62 = zext i32 %61 to i64
  %63 = call i32 @memcmp(i8* %56, i8* %60, i64 %62) #11
  %64 = icmp ne i32 %63, 0
  br i1 %64, label %107, label %65

65:                                               ; preds = %52
  %66 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %67 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %66, i32 0, i32 1
  %68 = load i16, i16* %67, align 8
  %69 = zext i16 %68 to i32
  %70 = or i32 %69, 32768
  %71 = trunc i32 %70 to i16
  store i16 %71, i16* %67, align 8
  %72 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %73 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %74 = bitcast %struct.ref_s* %72 to i8*
  %75 = bitcast %struct.ref_s* %73 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %74, i8* align 8 %75, i64 16, i1 false)
  %76 = load i32, i32* %5, align 4
  %77 = trunc i32 %76 to i16
  %78 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %79 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %78, i32 0, i32 2
  store i16 %77, i16* %79, align 2
  %80 = load i32, i32* %5, align 4
  %81 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %82 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %81, i32 0, i32 0
  %83 = bitcast %union.color_sample* %82 to i8**
  %84 = load i8*, i8** %83, align 8
  %85 = zext i32 %80 to i64
  %86 = getelementptr inbounds i8, i8* %84, i64 %85
  store i8* %86, i8** %83, align 8
  %87 = load i32, i32* %5, align 4
  %88 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %89 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %88, i32 0, i32 2
  %90 = load i16, i16* %89, align 2
  %91 = zext i16 %90 to i32
  %92 = sub i32 %91, %87
  %93 = trunc i32 %92 to i16
  store i16 %93, i16* %89, align 2
  %94 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %95 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %94, i64 1
  store %struct.ref_s* %95, %struct.ref_s** %3, align 8
  store %struct.ref_s* %95, %struct.ref_s** @osp, align 8
  %96 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %97 = icmp ugt %struct.ref_s* %95, %96
  br i1 %97, label %98, label %101

98:                                               ; preds = %65
  %99 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %100 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %99, i64 -1
  store %struct.ref_s* %100, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %114

101:                                              ; preds = %65
  %102 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %103 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %102, i32 0, i32 0
  %104 = bitcast %union.color_sample* %103 to i16*
  store i16 1, i16* %104, align 8
  %105 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %106 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %105, i32 0, i32 1
  store i16 4, i16* %106, align 8
  br label %113

107:                                              ; preds = %52, %45
  %108 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %109 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %108, i32 0, i32 0
  %110 = bitcast %union.color_sample* %109 to i16*
  store i16 0, i16* %110, align 8
  %111 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %112 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %111, i32 0, i32 1
  store i16 4, i16* %112, align 8
  br label %113

113:                                              ; preds = %107, %101
  store i32 0, i32* %2, align 4
  br label %114

114:                                              ; preds = %113, %98, %44, %35, %27, %18
  %115 = load i32, i32* %2, align 4
  ret i32 %115
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zsearch(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %8 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i64 -1
  store %struct.ref_s* %9, %struct.ref_s** %4, align 8
  %10 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %11 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %10, i32 0, i32 2
  %12 = load i16, i16* %11, align 2
  %13 = zext i16 %12 to i32
  store i32 %13, i32* %5, align 4
  %14 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 1
  %16 = load i16, i16* %15, align 8
  %17 = zext i16 %16 to i32
  %18 = and i32 %17, 252
  %19 = icmp eq i32 %18, 52
  br i1 %19, label %21, label %20

20:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %161

21:                                               ; preds = %1
  %22 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i32 0, i32 1
  %24 = load i16, i16* %23, align 8
  %25 = zext i16 %24 to i32
  %26 = xor i32 %25, -1
  %27 = and i32 %26, 512
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %29, label %30

29:                                               ; preds = %21
  store i32 -7, i32* %2, align 4
  br label %161

30:                                               ; preds = %21
  %31 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %32 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %31, i32 0, i32 1
  %33 = load i16, i16* %32, align 8
  %34 = zext i16 %33 to i32
  %35 = and i32 %34, 252
  %36 = icmp eq i32 %35, 52
  br i1 %36, label %38, label %37

37:                                               ; preds = %30
  store i32 -20, i32* %2, align 4
  br label %161

38:                                               ; preds = %30
  %39 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %40 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %39, i32 0, i32 1
  %41 = load i16, i16* %40, align 8
  %42 = zext i16 %41 to i32
  %43 = xor i32 %42, -1
  %44 = and i32 %43, 512
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %46, label %47

46:                                               ; preds = %38
  store i32 -7, i32* %2, align 4
  br label %161

47:                                               ; preds = %38
  %48 = load i32, i32* %5, align 4
  %49 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %50 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %49, i32 0, i32 2
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = icmp ugt i32 %48, %52
  br i1 %53, label %54, label %60

54:                                               ; preds = %47
  %55 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %56 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %55, i32 0, i32 0
  %57 = bitcast %union.color_sample* %56 to i16*
  store i16 0, i16* %57, align 8
  %58 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %59 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %58, i32 0, i32 1
  store i16 4, i16* %59, align 8
  store i32 0, i32* %2, align 4
  br label %161

60:                                               ; preds = %47
  %61 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %62 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %61, i32 0, i32 2
  %63 = load i16, i16* %62, align 2
  %64 = zext i16 %63 to i32
  %65 = load i32, i32* %5, align 4
  %66 = sub i32 %64, %65
  store i32 %66, i32* %6, align 4
  %67 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %68 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %67, i32 0, i32 0
  %69 = bitcast %union.color_sample* %68 to i8**
  %70 = load i8*, i8** %69, align 8
  store i8* %70, i8** %7, align 8
  br label %71

71:                                               ; preds = %151, %60
  %72 = load i8*, i8** %7, align 8
  %73 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %74 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %73, i32 0, i32 0
  %75 = bitcast %union.color_sample* %74 to i8**
  %76 = load i8*, i8** %75, align 8
  %77 = load i32, i32* %5, align 4
  %78 = zext i32 %77 to i64
  %79 = call i32 @memcmp(i8* %72, i8* %76, i64 %78) #11
  %80 = icmp ne i32 %79, 0
  br i1 %80, label %148, label %81

81:                                               ; preds = %71
  %82 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %83 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %82, i32 0, i32 1
  %84 = load i16, i16* %83, align 8
  %85 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %86 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %85, i32 0, i32 1
  store i16 %84, i16* %86, align 8
  %87 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %88 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %87, i32 0, i32 1
  %89 = load i16, i16* %88, align 8
  %90 = zext i16 %89 to i32
  %91 = or i32 %90, 32768
  %92 = trunc i32 %91 to i16
  store i16 %92, i16* %88, align 8
  %93 = load i8*, i8** %7, align 8
  %94 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %95 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %94, i32 0, i32 0
  %96 = bitcast %union.color_sample* %95 to i8**
  store i8* %93, i8** %96, align 8
  %97 = load i32, i32* %5, align 4
  %98 = trunc i32 %97 to i16
  %99 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %100 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %99, i32 0, i32 2
  store i16 %98, i16* %100, align 2
  %101 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %102 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %101, i64 1
  store %struct.ref_s* %102, %struct.ref_s** %3, align 8
  store %struct.ref_s* %102, %struct.ref_s** @osp, align 8
  %103 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %104 = icmp ugt %struct.ref_s* %102, %103
  br i1 %104, label %105, label %108

105:                                              ; preds = %81
  %106 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %107 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %106, i64 -1
  store %struct.ref_s* %107, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %161

108:                                              ; preds = %81
  %109 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %110 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %111 = bitcast %struct.ref_s* %109 to i8*
  %112 = bitcast %struct.ref_s* %110 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %111, i8* align 8 %112, i64 16, i1 false)
  %113 = load i8*, i8** %7, align 8
  %114 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %115 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %114, i32 0, i32 0
  %116 = bitcast %union.color_sample* %115 to i8**
  %117 = load i8*, i8** %116, align 8
  %118 = ptrtoint i8* %113 to i64
  %119 = ptrtoint i8* %117 to i64
  %120 = sub i64 %118, %119
  %121 = trunc i64 %120 to i16
  %122 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %123 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %122, i32 0, i32 2
  store i16 %121, i16* %123, align 2
  %124 = load i8*, i8** %7, align 8
  %125 = load i32, i32* %5, align 4
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds i8, i8* %124, i64 %126
  %128 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %129 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %128, i32 0, i32 0
  %130 = bitcast %union.color_sample* %129 to i8**
  store i8* %127, i8** %130, align 8
  %131 = load i32, i32* %6, align 4
  %132 = trunc i32 %131 to i16
  %133 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %134 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %133, i32 0, i32 2
  store i16 %132, i16* %134, align 2
  %135 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %136 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %135, i64 1
  store %struct.ref_s* %136, %struct.ref_s** %3, align 8
  store %struct.ref_s* %136, %struct.ref_s** @osp, align 8
  %137 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %138 = icmp ugt %struct.ref_s* %136, %137
  br i1 %138, label %139, label %142

139:                                              ; preds = %108
  %140 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %141 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %140, i64 -1
  store %struct.ref_s* %141, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %161

142:                                              ; preds = %108
  %143 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %144 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %143, i32 0, i32 0
  %145 = bitcast %union.color_sample* %144 to i16*
  store i16 1, i16* %145, align 8
  %146 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %147 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %146, i32 0, i32 1
  store i16 4, i16* %147, align 8
  store i32 0, i32* %2, align 4
  br label %161

148:                                              ; preds = %71
  %149 = load i8*, i8** %7, align 8
  %150 = getelementptr inbounds i8, i8* %149, i32 1
  store i8* %150, i8** %7, align 8
  br label %151

151:                                              ; preds = %148
  %152 = load i32, i32* %6, align 4
  %153 = add i32 %152, -1
  store i32 %153, i32* %6, align 4
  %154 = icmp ne i32 %152, 0
  br i1 %154, label %71, label %155

155:                                              ; preds = %151
  %156 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %157 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %156, i32 0, i32 0
  %158 = bitcast %union.color_sample* %157 to i16*
  store i16 0, i16* %158, align 8
  %159 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %160 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %159, i32 0, i32 1
  store i16 4, i16* %160, align 8
  store i32 0, i32* %2, align 4
  br label %161

161:                                              ; preds = %155, %142, %139, %105, %54, %46, %37, %29, %20
  %162 = load i32, i32* %2, align 4
  ret i32 %162
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ztoken(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.stream_s, align 8
  %5 = alloca %struct.stream_s*, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.ref_s, align 8
  %8 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  store %struct.stream_s* %4, %struct.stream_s** %5, align 8
  %9 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i32 0, i32 1
  %11 = load i16, i16* %10, align 8
  %12 = zext i16 %11 to i32
  %13 = and i32 %12, 255
  %14 = ashr i32 %13, 2
  switch i32 %14, label %15 [
    i32 3, label %16
    i32 13, label %19
  ]

15:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %102

16:                                               ; preds = %1
  %17 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %18 = call i32 (%struct.ref_s*, ...) bitcast (i32 (%struct.ref_s*)* @ztoken_file to i32 (%struct.ref_s*, ...)*)(%struct.ref_s* %17)
  store i32 %18, i32* %2, align 4
  br label %102

19:                                               ; preds = %1
  br label %20

20:                                               ; preds = %19
  %21 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i32 0, i32 1
  %23 = load i16, i16* %22, align 8
  %24 = zext i16 %23 to i32
  %25 = xor i32 %24, -1
  %26 = and i32 %25, 512
  %27 = icmp ne i32 %26, 0
  br i1 %27, label %28, label %29

28:                                               ; preds = %20
  store i32 -7, i32* %2, align 4
  br label %102

29:                                               ; preds = %20
  %30 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %31 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %32 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %31, i32 0, i32 0
  %33 = bitcast %union.color_sample* %32 to i8**
  %34 = load i8*, i8** %33, align 8
  %35 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %36 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %35, i32 0, i32 2
  %37 = load i16, i16* %36, align 2
  %38 = zext i16 %37 to i32
  call void @sread_string(%struct.stream_s* %30, i8* %34, i32 %38)
  %39 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %40 = call i32 (%struct.stream_s*, i32, %struct.ref_s*, ...) bitcast (i32 (%struct.stream_s*, i32, %struct.ref_s*)* @scan_token to i32 (%struct.stream_s*, i32, %struct.ref_s*, ...)*)(%struct.stream_s* %39, i32 1, %struct.ref_s* %7)
  store i32 %40, i32* %6, align 4
  switch i32 %40, label %100 [
    i32 0, label %41
    i32 1, label %94
  ]

41:                                               ; preds = %29
  %42 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %43 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %42, i32 0, i32 0
  %44 = load i8*, i8** %43, align 8
  %45 = getelementptr inbounds i8, i8* %44, i64 1
  %46 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %47 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %46, i32 0, i32 2
  %48 = load i8*, i8** %47, align 8
  %49 = ptrtoint i8* %45 to i64
  %50 = ptrtoint i8* %48 to i64
  %51 = sub i64 %49, %50
  %52 = load %struct.stream_s*, %struct.stream_s** %5, align 8
  %53 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %52, i32 0, i32 6
  %54 = load i64, i64* %53, align 8
  %55 = add nsw i64 %51, %54
  %56 = trunc i64 %55 to i32
  store i32 %56, i32* %8, align 4
  %57 = load i32, i32* %8, align 4
  %58 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %59 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %58, i32 0, i32 0
  %60 = bitcast %union.color_sample* %59 to i8**
  %61 = load i8*, i8** %60, align 8
  %62 = zext i32 %57 to i64
  %63 = getelementptr inbounds i8, i8* %61, i64 %62
  store i8* %63, i8** %60, align 8
  %64 = load i32, i32* %8, align 4
  %65 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %66 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %65, i32 0, i32 2
  %67 = load i16, i16* %66, align 2
  %68 = zext i16 %67 to i32
  %69 = sub i32 %68, %64
  %70 = trunc i32 %69 to i16
  store i16 %70, i16* %66, align 2
  %71 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %72 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %71, i32 0, i32 1
  %73 = load i16, i16* %72, align 8
  %74 = zext i16 %73 to i32
  %75 = or i32 %74, 32768
  %76 = trunc i32 %75 to i16
  store i16 %76, i16* %72, align 8
  %77 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %78 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %77, i64 2
  store %struct.ref_s* %78, %struct.ref_s** %3, align 8
  store %struct.ref_s* %78, %struct.ref_s** @osp, align 8
  %79 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %80 = icmp ugt %struct.ref_s* %78, %79
  br i1 %80, label %81, label %84

81:                                               ; preds = %41
  %82 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %83 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %82, i64 -2
  store %struct.ref_s* %83, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %102

84:                                               ; preds = %41
  %85 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %86 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %85, i64 -1
  %87 = bitcast %struct.ref_s* %86 to i8*
  %88 = bitcast %struct.ref_s* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %87, i8* align 8 %88, i64 16, i1 false)
  %89 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %90 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %89, i32 0, i32 0
  %91 = bitcast %union.color_sample* %90 to i16*
  store i16 1, i16* %91, align 8
  %92 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %93 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %92, i32 0, i32 1
  store i16 4, i16* %93, align 8
  store i32 0, i32* %2, align 4
  br label %102

94:                                               ; preds = %29
  %95 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %96 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %95, i32 0, i32 0
  %97 = bitcast %union.color_sample* %96 to i16*
  store i16 0, i16* %97, align 8
  %98 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %99 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %98, i32 0, i32 1
  store i16 4, i16* %99, align 8
  store i32 0, i32* %2, align 4
  br label %102

100:                                              ; preds = %29
  %101 = load i32, i32* %6, align 4
  store i32 %101, i32* %2, align 4
  br label %102

102:                                              ; preds = %100, %94, %84, %81, %28, %16, %15
  %103 = load i32, i32* %2, align 4
  ret i32 %103
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @zstring_op_init() #0 {
  %1 = call i32 (%struct.op_def*, ...) bitcast (void (%struct.op_def*)* @z_op_init to i32 (%struct.op_def*, ...)*)(%struct.op_def* getelementptr inbounds ([5 x %struct.op_def], [5 x %struct.op_def]* @zstring_op_init.my_defs, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ztypenumber(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** getelementptr inbounds ([6 x %struct.ref_s*], [6 x %struct.ref_s*]* @osp_nargs, i64 0, i64 0), align 16
  %6 = icmp ult %struct.ref_s* %4, %5
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  store i32 -17, i32* %2, align 4
  br label %32

8:                                                ; preds = %1
  %9 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i32 0, i32 1
  %11 = load i16, i16* %10, align 8
  %12 = zext i16 %11 to i32
  %13 = and i32 %12, 255
  %14 = ashr i32 %13, 2
  %15 = icmp sge i32 %14, 16
  br i1 %15, label %16, label %17

16:                                               ; preds = %8
  br label %24

17:                                               ; preds = %8
  %18 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %19 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %18, i32 0, i32 1
  %20 = load i16, i16* %19, align 8
  %21 = zext i16 %20 to i32
  %22 = and i32 %21, 255
  %23 = ashr i32 %22, 2
  br label %24

24:                                               ; preds = %17, %16
  %25 = phi i32 [ 9, %16 ], [ %23, %17 ]
  %26 = sext i32 %25 to i64
  %27 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %28 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %27, i32 0, i32 0
  %29 = bitcast %union.color_sample* %28 to i64*
  store i64 %26, i64* %29, align 8
  %30 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %31 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %30, i32 0, i32 1
  store i16 20, i16* %31, align 8
  store i32 0, i32* %2, align 4
  br label %32

32:                                               ; preds = %24, %7
  %33 = load i32, i32* %2, align 4
  ret i32 %33
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcvlit(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** getelementptr inbounds ([6 x %struct.ref_s*], [6 x %struct.ref_s*]* @osp_nargs, i64 0, i64 0), align 16
  %7 = icmp ult %struct.ref_s* %5, %6
  br i1 %7, label %8, label %9

8:                                                ; preds = %1
  store i32 -17, i32* %2, align 4
  br label %30

9:                                                ; preds = %1
  %10 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %11 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %10, i32 0, i32 1
  %12 = load i16, i16* %11, align 8
  %13 = zext i16 %12 to i32
  %14 = and i32 %13, 255
  %15 = ashr i32 %14, 2
  %16 = icmp eq i32 %15, 2
  br i1 %16, label %17, label %20

17:                                               ; preds = %9
  %18 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %19 = call %struct.ref_s* @dict_access_ref(%struct.ref_s* %18)
  br label %22

20:                                               ; preds = %9
  %21 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  br label %22

22:                                               ; preds = %20, %17
  %23 = phi %struct.ref_s* [ %19, %17 ], [ %21, %20 ]
  store %struct.ref_s* %23, %struct.ref_s** %4, align 8
  %24 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %25 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %24, i32 0, i32 1
  %26 = load i16, i16* %25, align 8
  %27 = zext i16 %26 to i32
  %28 = and i32 %27, -2
  %29 = trunc i32 %28 to i16
  store i16 %29, i16* %25, align 8
  store i32 0, i32* %2, align 4
  br label %30

30:                                               ; preds = %22, %8
  %31 = load i32, i32* %2, align 4
  ret i32 %31
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcvx(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** getelementptr inbounds ([6 x %struct.ref_s*], [6 x %struct.ref_s*]* @osp_nargs, i64 0, i64 0), align 16
  %7 = icmp ult %struct.ref_s* %5, %6
  br i1 %7, label %8, label %9

8:                                                ; preds = %1
  store i32 -17, i32* %2, align 4
  br label %30

9:                                                ; preds = %1
  %10 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %11 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %10, i32 0, i32 1
  %12 = load i16, i16* %11, align 8
  %13 = zext i16 %12 to i32
  %14 = and i32 %13, 255
  %15 = ashr i32 %14, 2
  %16 = icmp eq i32 %15, 2
  br i1 %16, label %17, label %20

17:                                               ; preds = %9
  %18 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %19 = call %struct.ref_s* @dict_access_ref(%struct.ref_s* %18)
  br label %22

20:                                               ; preds = %9
  %21 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  br label %22

22:                                               ; preds = %20, %17
  %23 = phi %struct.ref_s* [ %19, %17 ], [ %21, %20 ]
  store %struct.ref_s* %23, %struct.ref_s** %4, align 8
  %24 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %25 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %24, i32 0, i32 1
  %26 = load i16, i16* %25, align 8
  %27 = zext i16 %26 to i32
  %28 = or i32 %27, 1
  %29 = trunc i32 %28 to i16
  store i16 %29, i16* %25, align 8
  store i32 0, i32* %2, align 4
  br label %30

30:                                               ; preds = %22, %8
  %31 = load i32, i32* %2, align 4
  ret i32 %31
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zxcheck(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** getelementptr inbounds ([6 x %struct.ref_s*], [6 x %struct.ref_s*]* @osp_nargs, i64 0, i64 0), align 16
  %6 = icmp ult %struct.ref_s* %4, %5
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  store i32 -17, i32* %2, align 4
  br label %36

8:                                                ; preds = %1
  %9 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i32 0, i32 1
  %11 = load i16, i16* %10, align 8
  %12 = zext i16 %11 to i32
  %13 = and i32 %12, 255
  %14 = ashr i32 %13, 2
  %15 = icmp eq i32 %14, 2
  br i1 %15, label %16, label %19

16:                                               ; preds = %8
  %17 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %18 = call %struct.ref_s* @dict_access_ref(%struct.ref_s* %17)
  br label %21

19:                                               ; preds = %8
  %20 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  br label %21

21:                                               ; preds = %19, %16
  %22 = phi %struct.ref_s* [ %18, %16 ], [ %20, %19 ]
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i32 0, i32 1
  %24 = load i16, i16* %23, align 8
  %25 = zext i16 %24 to i32
  %26 = and i32 %25, 1
  %27 = icmp ne i32 %26, 0
  %28 = zext i1 %27 to i64
  %29 = select i1 %27, i32 1, i32 0
  %30 = trunc i32 %29 to i16
  %31 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %32 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %31, i32 0, i32 0
  %33 = bitcast %union.color_sample* %32 to i16*
  store i16 %30, i16* %33, align 8
  %34 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %35 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %34, i32 0, i32 1
  store i16 4, i16* %35, align 8
  store i32 0, i32* %2, align 4
  br label %36

36:                                               ; preds = %21, %7
  %37 = load i32, i32* %2, align 4
  ret i32 %37
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zexecuteonly(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %5 = load %struct.ref_s*, %struct.ref_s** getelementptr inbounds ([6 x %struct.ref_s*], [6 x %struct.ref_s*]* @osp_nargs, i64 0, i64 0), align 16
  %6 = icmp ult %struct.ref_s* %4, %5
  br i1 %6, label %7, label %8

7:                                                ; preds = %1
  store i32 -17, i32* %2, align 4
  br label %20

8:                                                ; preds = %1
  %9 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i32 0, i32 1
  %11 = load i16, i16* %10, align 8
  %12 = zext i16 %11 to i32
  %13 = and i32 %12, 255
  %14 = ashr i32 %13, 2
  %15 = icmp eq i32 %14, 2
  br i1 %15, label %16, label %17

16:                                               ; preds = %8
  store i32 -20, i32* %2, align 4
  br label %20

17:                                               ; preds = %8
  %18 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %19 = call i32 @access_check(%struct.ref_s* %18, i32 2, i32 1)
  store i32 %19, i32* %2, align 4
  br label %20

20:                                               ; preds = %17, %16, %7
  %21 = load i32, i32* %2, align 4
  ret i32 %21
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @access_check(%struct.ref_s* %0, i32 %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.ref_s*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  %9 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  store %struct.ref_s* %9, %struct.ref_s** %8, align 8
  %10 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %11 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %10, i32 0, i32 1
  %12 = load i16, i16* %11, align 8
  %13 = zext i16 %12 to i32
  %14 = and i32 %13, 255
  %15 = ashr i32 %14, 2
  switch i32 %15, label %16 [
    i32 2, label %17
    i32 0, label %20
    i32 3, label %20
    i32 10, label %20
    i32 13, label %20
  ]

16:                                               ; preds = %3
  store i32 -20, i32* %4, align 4
  br label %58

17:                                               ; preds = %3
  %18 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  %19 = call %struct.ref_s* @dict_access_ref(%struct.ref_s* %18)
  store %struct.ref_s* %19, %struct.ref_s** %8, align 8
  br label %20

20:                                               ; preds = %17, %3, %3, %3, %3
  br label %21

21:                                               ; preds = %20
  %22 = load i32, i32* %7, align 4
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %24, label %48

24:                                               ; preds = %21
  %25 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %26 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %25, i32 0, i32 1
  %27 = load i16, i16* %26, align 8
  %28 = zext i16 %27 to i32
  %29 = xor i32 %28, -1
  %30 = load i32, i32* %6, align 4
  %31 = and i32 %29, %30
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %24
  store i32 -7, i32* %4, align 4
  br label %58

34:                                               ; preds = %24
  %35 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %36 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %35, i32 0, i32 1
  %37 = load i16, i16* %36, align 8
  %38 = zext i16 %37 to i32
  %39 = and i32 %38, -771
  %40 = trunc i32 %39 to i16
  store i16 %40, i16* %36, align 8
  %41 = load i32, i32* %6, align 4
  %42 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %43 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %42, i32 0, i32 1
  %44 = load i16, i16* %43, align 8
  %45 = zext i16 %44 to i32
  %46 = or i32 %45, %41
  %47 = trunc i32 %46 to i16
  store i16 %47, i16* %43, align 8
  store i32 0, i32* %4, align 4
  br label %58

48:                                               ; preds = %21
  %49 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %50 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %49, i32 0, i32 1
  %51 = load i16, i16* %50, align 8
  %52 = zext i16 %51 to i32
  %53 = load i32, i32* %6, align 4
  %54 = and i32 %52, %53
  %55 = load i32, i32* %6, align 4
  %56 = icmp eq i32 %54, %55
  %57 = zext i1 %56 to i32
  store i32 %57, i32* %4, align 4
  br label %58

58:                                               ; preds = %48, %34, %33, %16
  %59 = load i32, i32* %4, align 4
  ret i32 %59
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @znoaccess(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %4 = call i32 @access_check(%struct.ref_s* %3, i32 0, i32 1)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zreadonly(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %3 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %4 = call i32 @access_check(%struct.ref_s* %3, i32 514, i32 1)
  ret i32 %4
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zrcheck(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  %3 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %5 = call i32 @access_check(%struct.ref_s* %4, i32 512, i32 0)
  store i32 %5, i32* %3, align 4
  %6 = load i32, i32* %3, align 4
  %7 = icmp sge i32 %6, 0
  br i1 %7, label %8, label %16

8:                                                ; preds = %1
  %9 = load i32, i32* %3, align 4
  %10 = trunc i32 %9 to i16
  %11 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %12 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %11, i32 0, i32 0
  %13 = bitcast %union.color_sample* %12 to i16*
  store i16 %10, i16* %13, align 8
  %14 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 1
  store i16 4, i16* %15, align 8
  br label %16

16:                                               ; preds = %8, %1
  %17 = load i32, i32* %3, align 4
  ret i32 %17
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zwcheck(%struct.ref_s* %0) #0 {
  %2 = alloca %struct.ref_s*, align 8
  %3 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %2, align 8
  %4 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %5 = call i32 @access_check(%struct.ref_s* %4, i32 256, i32 0)
  store i32 %5, i32* %3, align 4
  %6 = load i32, i32* %3, align 4
  %7 = icmp sge i32 %6, 0
  br i1 %7, label %8, label %16

8:                                                ; preds = %1
  %9 = load i32, i32* %3, align 4
  %10 = trunc i32 %9 to i16
  %11 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %12 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %11, i32 0, i32 0
  %13 = bitcast %union.color_sample* %12 to i16*
  store i16 %10, i16* %13, align 8
  %14 = load %struct.ref_s*, %struct.ref_s** %2, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 1
  store i16 4, i16* %15, align 8
  br label %16

16:                                               ; preds = %8, %1
  %17 = load i32, i32* %3, align 4
  ret i32 %17
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcvi(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca float, align 4
  %5 = alloca %struct.stream_s, align 8
  %6 = alloca %struct.ref_s, align 8
  %7 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %8 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 1
  %10 = load i16, i16* %9, align 8
  %11 = zext i16 %10 to i32
  %12 = and i32 %11, 255
  %13 = ashr i32 %12, 2
  switch i32 %13, label %20 [
    i32 5, label %14
    i32 11, label %15
    i32 13, label %21
  ]

14:                                               ; preds = %1
  store i32 0, i32* %2, align 4
  br label %97

15:                                               ; preds = %1
  %16 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %16, i32 0, i32 0
  %18 = bitcast %union.color_sample* %17 to float*
  %19 = load float, float* %18, align 8
  store float %19, float* %4, align 4
  br label %80

20:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %97

21:                                               ; preds = %1
  %22 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i32 0, i32 1
  %24 = load i16, i16* %23, align 8
  %25 = zext i16 %24 to i32
  %26 = xor i32 %25, -1
  %27 = and i32 %26, 512
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %29, label %30

29:                                               ; preds = %21
  store i32 -7, i32* %2, align 4
  br label %97

30:                                               ; preds = %21
  %31 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %32 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %31, i32 0, i32 0
  %33 = bitcast %union.color_sample* %32 to i8**
  %34 = load i8*, i8** %33, align 8
  %35 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %36 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %35, i32 0, i32 2
  %37 = load i16, i16* %36, align 2
  %38 = zext i16 %37 to i32
  call void @sread_string(%struct.stream_s* %5, i8* %34, i32 %38)
  %39 = call i32 (%struct.stream_s*, %struct.ref_s*, ...) bitcast (i32 (%struct.stream_s*, %struct.ref_s*)* @scan_number to i32 (%struct.stream_s*, %struct.ref_s*, ...)*)(%struct.stream_s* %5, %struct.ref_s* %6)
  store i32 %39, i32* %7, align 4
  %40 = load i32, i32* %7, align 4
  %41 = icmp ne i32 %40, 0
  br i1 %41, label %42, label %44

42:                                               ; preds = %30
  %43 = load i32, i32* %7, align 4
  store i32 %43, i32* %2, align 4
  br label %97

44:                                               ; preds = %30
  %45 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %5, i32 0, i32 0
  %46 = load i8*, i8** %45, align 8
  %47 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %5, i32 0, i32 1
  %48 = load i8*, i8** %47, align 8
  %49 = icmp ult i8* %46, %48
  br i1 %49, label %50, label %56

50:                                               ; preds = %44
  %51 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %5, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr inbounds i8, i8* %52, i32 1
  store i8* %53, i8** %51, align 8
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i32
  br label %61

56:                                               ; preds = %44
  %57 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %5, i32 0, i32 7
  %58 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %57, i32 0, i32 0
  %59 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %58, align 8
  %60 = call i32 %59(%struct.stream_s* %5)
  br label %61

61:                                               ; preds = %56, %50
  %62 = phi i32 [ %55, %50 ], [ %60, %56 ]
  %63 = icmp ne i32 %62, -1
  br i1 %63, label %64, label %65

64:                                               ; preds = %61
  store i32 -18, i32* %2, align 4
  br label %97

65:                                               ; preds = %61
  %66 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i32 0, i32 1
  %67 = load i16, i16* %66, align 8
  %68 = zext i16 %67 to i32
  %69 = and i32 %68, 255
  %70 = ashr i32 %69, 2
  %71 = icmp eq i32 %70, 5
  br i1 %71, label %72, label %76

72:                                               ; preds = %65
  %73 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %74 = bitcast %struct.ref_s* %73 to i8*
  %75 = bitcast %struct.ref_s* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %74, i8* align 8 %75, i64 16, i1 false)
  store i32 0, i32* %2, align 4
  br label %97

76:                                               ; preds = %65
  %77 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i32 0, i32 0
  %78 = bitcast %union.color_sample* %77 to float*
  %79 = load float, float* %78, align 8
  store float %79, float* %4, align 4
  br label %80

80:                                               ; preds = %76, %15
  %81 = load float, float* %4, align 4
  %82 = fpext float %81 to double
  %83 = fcmp ole double %82, 0xC1E0000000200000
  br i1 %83, label %88, label %84

84:                                               ; preds = %80
  %85 = load float, float* %4, align 4
  %86 = fpext float %85 to double
  %87 = fcmp oge double %86, 0x41E0000000000000
  br i1 %87, label %88, label %89

88:                                               ; preds = %84, %80
  store i32 -15, i32* %2, align 4
  br label %97

89:                                               ; preds = %84
  %90 = load float, float* %4, align 4
  %91 = fptosi float %90 to i64
  %92 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %93 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %92, i32 0, i32 0
  %94 = bitcast %union.color_sample* %93 to i64*
  store i64 %91, i64* %94, align 8
  %95 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %96 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %95, i32 0, i32 1
  store i16 20, i16* %96, align 8
  store i32 0, i32* %2, align 4
  br label %97

97:                                               ; preds = %89, %88, %72, %64, %42, %29, %20, %14
  %98 = load i32, i32* %2, align 4
  ret i32 %98
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcvn(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i32 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = zext i16 %8 to i32
  %10 = and i32 %9, 252
  %11 = icmp eq i32 %10, 52
  br i1 %11, label %13, label %12

12:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %50

13:                                               ; preds = %1
  %14 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 1
  %16 = load i16, i16* %15, align 8
  %17 = zext i16 %16 to i32
  %18 = xor i32 %17, -1
  %19 = and i32 %18, 512
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %13
  store i32 -7, i32* %2, align 4
  br label %50

22:                                               ; preds = %13
  %23 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %24 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %23, i32 0, i32 1
  %25 = load i16, i16* %24, align 8
  %26 = zext i16 %25 to i32
  %27 = and i32 %26, 1
  store i32 %27, i32* %4, align 4
  %28 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i32 0, i32 0
  %30 = bitcast %union.color_sample* %29 to i8**
  %31 = load i8*, i8** %30, align 8
  %32 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %33 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %32, i32 0, i32 2
  %34 = load i16, i16* %33, align 2
  %35 = zext i16 %34 to i32
  %36 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %37 = call i32 @name_ref(i8* %31, i32 %35, %struct.ref_s* %36, i32 1)
  store i32 %37, i32* %5, align 4
  %38 = load i32, i32* %5, align 4
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %40, label %42

40:                                               ; preds = %22
  %41 = load i32, i32* %5, align 4
  store i32 %41, i32* %2, align 4
  br label %50

42:                                               ; preds = %22
  %43 = load i32, i32* %4, align 4
  %44 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %45 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %44, i32 0, i32 1
  %46 = load i16, i16* %45, align 8
  %47 = zext i16 %46 to i32
  %48 = or i32 %47, %43
  %49 = trunc i32 %48 to i16
  store i16 %49, i16* %45, align 8
  store i32 0, i32* %2, align 4
  br label %50

50:                                               ; preds = %42, %40, %21, %12
  %51 = load i32, i32* %2, align 4
  ret i32 %51
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcvr(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.stream_s, align 8
  %5 = alloca %struct.ref_s, align 8
  %6 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %7, i32 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = zext i16 %9 to i32
  %11 = and i32 %10, 255
  %12 = ashr i32 %11, 2
  switch i32 %12, label %25 [
    i32 5, label %13
    i32 11, label %24
    i32 13, label %26
  ]

13:                                               ; preds = %1
  %14 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 0
  %16 = bitcast %union.color_sample* %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sitofp i64 %17 to float
  %19 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i32 0, i32 0
  %21 = bitcast %union.color_sample* %20 to float*
  store float %18, float* %21, align 8
  %22 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i32 0, i32 1
  store i16 44, i16* %23, align 8
  br label %24

24:                                               ; preds = %13, %1
  store i32 0, i32* %2, align 4
  br label %91

25:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %91

26:                                               ; preds = %1
  %27 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %28 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %27, i32 0, i32 1
  %29 = load i16, i16* %28, align 8
  %30 = zext i16 %29 to i32
  %31 = xor i32 %30, -1
  %32 = and i32 %31, 512
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %26
  store i32 -7, i32* %2, align 4
  br label %91

35:                                               ; preds = %26
  %36 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %37 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %36, i32 0, i32 0
  %38 = bitcast %union.color_sample* %37 to i8**
  %39 = load i8*, i8** %38, align 8
  %40 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %41 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %40, i32 0, i32 2
  %42 = load i16, i16* %41, align 2
  %43 = zext i16 %42 to i32
  call void @sread_string(%struct.stream_s* %4, i8* %39, i32 %43)
  %44 = call i32 (%struct.stream_s*, %struct.ref_s*, ...) bitcast (i32 (%struct.stream_s*, %struct.ref_s*)* @scan_number to i32 (%struct.stream_s*, %struct.ref_s*, ...)*)(%struct.stream_s* %4, %struct.ref_s* %5)
  store i32 %44, i32* %6, align 4
  %45 = load i32, i32* %6, align 4
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %47, label %49

47:                                               ; preds = %35
  %48 = load i32, i32* %6, align 4
  store i32 %48, i32* %2, align 4
  br label %91

49:                                               ; preds = %35
  %50 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %4, i32 0, i32 0
  %51 = load i8*, i8** %50, align 8
  %52 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %4, i32 0, i32 1
  %53 = load i8*, i8** %52, align 8
  %54 = icmp ult i8* %51, %53
  br i1 %54, label %55, label %61

55:                                               ; preds = %49
  %56 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %4, i32 0, i32 0
  %57 = load i8*, i8** %56, align 8
  %58 = getelementptr inbounds i8, i8* %57, i32 1
  store i8* %58, i8** %56, align 8
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  br label %66

61:                                               ; preds = %49
  %62 = getelementptr inbounds %struct.stream_s, %struct.stream_s* %4, i32 0, i32 7
  %63 = getelementptr inbounds %struct.stream_procs, %struct.stream_procs* %62, i32 0, i32 0
  %64 = load i32 (%struct.stream_s*)*, i32 (%struct.stream_s*)** %63, align 8
  %65 = call i32 %64(%struct.stream_s* %4)
  br label %66

66:                                               ; preds = %61, %55
  %67 = phi i32 [ %60, %55 ], [ %65, %61 ]
  %68 = icmp ne i32 %67, -1
  br i1 %68, label %69, label %70

69:                                               ; preds = %66
  store i32 -18, i32* %2, align 4
  br label %91

70:                                               ; preds = %66
  %71 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i32 0, i32 1
  %72 = load i16, i16* %71, align 8
  %73 = zext i16 %72 to i32
  %74 = and i32 %73, 255
  %75 = ashr i32 %74, 2
  %76 = icmp eq i32 %75, 11
  br i1 %76, label %77, label %81

77:                                               ; preds = %70
  %78 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %79 = bitcast %struct.ref_s* %78 to i8*
  %80 = bitcast %struct.ref_s* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %79, i8* align 8 %80, i64 16, i1 false)
  store i32 0, i32* %2, align 4
  br label %91

81:                                               ; preds = %70
  %82 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %5, i32 0, i32 0
  %83 = bitcast %union.color_sample* %82 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = sitofp i64 %84 to float
  %86 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %87 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %86, i32 0, i32 0
  %88 = bitcast %union.color_sample* %87 to float*
  store float %85, float* %88, align 8
  %89 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %90 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %89, i32 0, i32 1
  store i16 44, i16* %90, align 8
  store i32 0, i32* %2, align 4
  br label %91

91:                                               ; preds = %81, %77, %69, %47, %34, %25, %24
  %92 = load i32, i32* %2, align 4
  ret i32 %92
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcvrs(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca [31 x i8], align 16
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %11 = getelementptr inbounds [31 x i8], [31 x i8]* %7, i64 0, i64 31
  store i8* %11, i8** %8, align 8
  %12 = load i8*, i8** %8, align 8
  store i8* %12, i8** %9, align 8
  %13 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %14 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %13, i64 -1
  %15 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %14, i32 0, i32 1
  %16 = load i16, i16* %15, align 8
  %17 = zext i16 %16 to i32
  %18 = and i32 %17, 252
  %19 = icmp eq i32 %18, 20
  br i1 %19, label %21, label %20

20:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %159

21:                                               ; preds = %1
  %22 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %23 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %22, i64 -1
  %24 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %23, i32 0, i32 0
  %25 = bitcast %union.color_sample* %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = icmp slt i64 %26, 2
  br i1 %27, label %35, label %28

28:                                               ; preds = %21
  %29 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %30 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %29, i64 -1
  %31 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %30, i32 0, i32 0
  %32 = bitcast %union.color_sample* %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = icmp sgt i64 %33, 36
  br i1 %34, label %35, label %36

35:                                               ; preds = %28, %21
  store i32 -15, i32* %2, align 4
  br label %159

36:                                               ; preds = %28
  %37 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %38 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %37, i64 -1
  %39 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %38, i32 0, i32 0
  %40 = bitcast %union.color_sample* %39 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = trunc i64 %41 to i32
  store i32 %42, i32* %4, align 4
  %43 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %44 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %43, i32 0, i32 1
  %45 = load i16, i16* %44, align 8
  %46 = zext i16 %45 to i32
  %47 = and i32 %46, 252
  %48 = icmp eq i32 %47, 52
  br i1 %48, label %50, label %49

49:                                               ; preds = %36
  store i32 -20, i32* %2, align 4
  br label %159

50:                                               ; preds = %36
  %51 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %52 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %51, i32 0, i32 1
  %53 = load i16, i16* %52, align 8
  %54 = zext i16 %53 to i32
  %55 = xor i32 %54, -1
  %56 = and i32 %55, 256
  %57 = icmp ne i32 %56, 0
  br i1 %57, label %58, label %59

58:                                               ; preds = %50
  store i32 -7, i32* %2, align 4
  br label %159

59:                                               ; preds = %50
  %60 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %61 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %60, i64 -2
  %62 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %61, i32 0, i32 1
  %63 = load i16, i16* %62, align 8
  %64 = zext i16 %63 to i32
  %65 = and i32 %64, 255
  %66 = ashr i32 %65, 2
  switch i32 %66, label %74 [
    i32 5, label %67
    i32 11, label %73
  ]

67:                                               ; preds = %59
  %68 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %69 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %68, i64 -2
  %70 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %69, i32 0, i32 0
  %71 = bitcast %union.color_sample* %70 to i64*
  %72 = load i64, i64* %71, align 8
  store i64 %72, i64* %5, align 8
  br label %75

73:                                               ; preds = %59
  br label %74

74:                                               ; preds = %73, %59
  store i32 -20, i32* %2, align 4
  br label %159

75:                                               ; preds = %67
  %76 = load i64, i64* %5, align 8
  %77 = icmp slt i64 %76, 0
  br i1 %77, label %78, label %81

78:                                               ; preds = %75
  %79 = load i64, i64* %5, align 8
  %80 = sub nsw i64 0, %79
  br label %83

81:                                               ; preds = %75
  %82 = load i64, i64* %5, align 8
  br label %83

83:                                               ; preds = %81, %78
  %84 = phi i64 [ %80, %78 ], [ %82, %81 ]
  store i64 %84, i64* %6, align 8
  br label %85

85:                                               ; preds = %104, %83
  %86 = load i64, i64* %6, align 8
  %87 = load i32, i32* %4, align 4
  %88 = sext i32 %87 to i64
  %89 = urem i64 %86, %88
  %90 = trunc i64 %89 to i32
  store i32 %90, i32* %10, align 4
  %91 = load i32, i32* %10, align 4
  %92 = load i32, i32* %10, align 4
  %93 = icmp slt i32 %92, 10
  %94 = zext i1 %93 to i64
  %95 = select i1 %93, i32 48, i32 55
  %96 = add nsw i32 %91, %95
  %97 = trunc i32 %96 to i8
  %98 = load i8*, i8** %9, align 8
  %99 = getelementptr inbounds i8, i8* %98, i32 -1
  store i8* %99, i8** %9, align 8
  store i8 %97, i8* %99, align 1
  %100 = load i32, i32* %4, align 4
  %101 = sext i32 %100 to i64
  %102 = load i64, i64* %6, align 8
  %103 = udiv i64 %102, %101
  store i64 %103, i64* %6, align 8
  br label %104

104:                                              ; preds = %85
  %105 = load i64, i64* %6, align 8
  %106 = icmp ne i64 %105, 0
  br i1 %106, label %85, label %107

107:                                              ; preds = %104
  %108 = load i64, i64* %5, align 8
  %109 = icmp slt i64 %108, 0
  br i1 %109, label %110, label %113

110:                                              ; preds = %107
  %111 = load i8*, i8** %9, align 8
  %112 = getelementptr inbounds i8, i8* %111, i32 -1
  store i8* %112, i8** %9, align 8
  store i8 45, i8* %112, align 1
  br label %113

113:                                              ; preds = %110, %107
  %114 = load i8*, i8** %8, align 8
  %115 = load i8*, i8** %9, align 8
  %116 = ptrtoint i8* %114 to i64
  %117 = ptrtoint i8* %115 to i64
  %118 = sub i64 %116, %117
  %119 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %120 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %119, i32 0, i32 2
  %121 = load i16, i16* %120, align 2
  %122 = zext i16 %121 to i64
  %123 = icmp sgt i64 %118, %122
  br i1 %123, label %124, label %125

124:                                              ; preds = %113
  store i32 -15, i32* %2, align 4
  br label %159

125:                                              ; preds = %113
  %126 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %127 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %126, i32 0, i32 0
  %128 = bitcast %union.color_sample* %127 to i8**
  %129 = load i8*, i8** %128, align 8
  %130 = load i8*, i8** %9, align 8
  %131 = load i8*, i8** %8, align 8
  %132 = load i8*, i8** %9, align 8
  %133 = ptrtoint i8* %131 to i64
  %134 = ptrtoint i8* %132 to i64
  %135 = sub i64 %133, %134
  %136 = trunc i64 %135 to i32
  %137 = zext i32 %136 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %129, i8* align 1 %130, i64 %137, i1 false)
  %138 = load i8*, i8** %8, align 8
  %139 = load i8*, i8** %9, align 8
  %140 = ptrtoint i8* %138 to i64
  %141 = ptrtoint i8* %139 to i64
  %142 = sub i64 %140, %141
  %143 = trunc i64 %142 to i16
  %144 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %145 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %144, i32 0, i32 2
  store i16 %143, i16* %145, align 2
  %146 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %147 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %146, i32 0, i32 1
  %148 = load i16, i16* %147, align 8
  %149 = zext i16 %148 to i32
  %150 = or i32 %149, 32768
  %151 = trunc i32 %150 to i16
  store i16 %151, i16* %147, align 8
  %152 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %153 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %152, i64 -2
  %154 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %155 = bitcast %struct.ref_s* %153 to i8*
  %156 = bitcast %struct.ref_s* %154 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %155, i8* align 8 %156, i64 16, i1 false)
  %157 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %158 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %157, i64 -2
  store %struct.ref_s* %158, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %159

159:                                              ; preds = %125, %124, %74, %58, %49, %35, %20
  %160 = load i32, i32* %2, align 4
  ret i32 %160
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zcvs(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.ref_s*, align 8
  %5 = alloca [25 x i8], align 16
  %6 = alloca %struct.ref_s, align 8
  %7 = alloca i32, align 4
  %8 = alloca [2 x %struct.ref_s], align 16
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %9 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %10 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %9, i64 -1
  store %struct.ref_s* %10, %struct.ref_s** %4, align 8
  %11 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %12 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %11, i32 0, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = zext i16 %13 to i32
  %15 = and i32 %14, 252
  %16 = icmp eq i32 %15, 52
  br i1 %16, label %18, label %17

17:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %182

18:                                               ; preds = %1
  %19 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %20 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %19, i32 0, i32 1
  %21 = load i16, i16* %20, align 8
  %22 = zext i16 %21 to i32
  %23 = xor i32 %22, -1
  %24 = and i32 %23, 256
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %27

26:                                               ; preds = %18
  store i32 -7, i32* %2, align 4
  br label %182

27:                                               ; preds = %18
  %28 = getelementptr inbounds [25 x i8], [25 x i8]* %5, i64 0, i64 0
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i32 0, i32 0
  %30 = bitcast %union.color_sample* %29 to i8**
  store i8* %28, i8** %30, align 8
  %31 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %32 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %31, i32 0, i32 1
  %33 = load i16, i16* %32, align 8
  %34 = zext i16 %33 to i32
  %35 = and i32 %34, 255
  %36 = ashr i32 %35, 2
  %37 = icmp sge i32 %36, 16
  br i1 %37, label %38, label %39

38:                                               ; preds = %27
  br label %46

39:                                               ; preds = %27
  %40 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %41 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %40, i32 0, i32 1
  %42 = load i16, i16* %41, align 8
  %43 = zext i16 %42 to i32
  %44 = and i32 %43, 255
  %45 = ashr i32 %44, 2
  br label %46

46:                                               ; preds = %39, %38
  %47 = phi i32 [ 9, %38 ], [ %45, %39 ]
  switch i32 %47, label %127 [
    i32 1, label %48
    i32 5, label %59
    i32 7, label %66
    i32 9, label %68
    i32 11, label %106
    i32 13, label %114
  ]

48:                                               ; preds = %46
  %49 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %50 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %49, i32 0, i32 0
  %51 = bitcast %union.color_sample* %50 to i16*
  %52 = load i16, i16* %51, align 8
  %53 = zext i16 %52 to i32
  %54 = icmp ne i32 %53, 0
  %55 = zext i1 %54 to i64
  %56 = select i1 %54, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.692, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.693, i64 0, i64 0)
  %57 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i32 0, i32 0
  %58 = bitcast %union.color_sample* %57 to i8**
  store i8* %56, i8** %58, align 8
  br label %135

59:                                               ; preds = %46
  %60 = getelementptr inbounds [25 x i8], [25 x i8]* %5, i64 0, i64 0
  %61 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %62 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %61, i32 0, i32 0
  %63 = bitcast %union.color_sample* %62 to i64*
  %64 = load i64, i64* %63, align 8
  %65 = call i32 (i8*, i8*, ...) @sprintf(i8* %60, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.694, i64 0, i64 0), i64 %64) #9
  br label %135

66:                                               ; preds = %46
  %67 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  call void @name_string_ref(%struct.ref_s* %67, %struct.ref_s* %6)
  br label %142

68:                                               ; preds = %46
  %69 = call i32 @dict_first(%struct.ref_s* getelementptr inbounds ([20 x %struct.ref_s], [20 x %struct.ref_s]* @dstack, i64 0, i64 0))
  store i32 %69, i32* %7, align 4
  br label %70

70:                                               ; preds = %97, %68
  %71 = load i32, i32* %7, align 4
  %72 = getelementptr inbounds [2 x %struct.ref_s], [2 x %struct.ref_s]* %8, i64 0, i64 0
  %73 = call i32 @dict_next(%struct.ref_s* getelementptr inbounds ([20 x %struct.ref_s], [20 x %struct.ref_s]* @dstack, i64 0, i64 0), i32 %71, %struct.ref_s* %72)
  store i32 %73, i32* %7, align 4
  %74 = icmp sge i32 %73, 0
  br i1 %74, label %75, label %98

75:                                               ; preds = %70
  %76 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %77 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %76, i32 0, i32 0
  %78 = bitcast %union.color_sample* %77 to i32 (%struct.ref_s*)**
  %79 = load i32 (%struct.ref_s*)*, i32 (%struct.ref_s*)** %78, align 8
  %80 = ptrtoint i32 (%struct.ref_s*)* %79 to i64
  %81 = getelementptr inbounds [2 x %struct.ref_s], [2 x %struct.ref_s]* %8, i64 0, i64 1
  %82 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %81, i32 0, i32 0
  %83 = bitcast %union.color_sample* %82 to i32 (%struct.ref_s*)**
  %84 = load i32 (%struct.ref_s*)*, i32 (%struct.ref_s*)** %83, align 16
  %85 = ptrtoint i32 (%struct.ref_s*)* %84 to i64
  %86 = icmp eq i64 %80, %85
  br i1 %86, label %87, label %97

87:                                               ; preds = %75
  %88 = getelementptr inbounds [2 x %struct.ref_s], [2 x %struct.ref_s]* %8, i64 0, i64 0
  %89 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %88, i32 0, i32 1
  %90 = load i16, i16* %89, align 8
  %91 = zext i16 %90 to i32
  %92 = and i32 %91, 255
  %93 = ashr i32 %92, 2
  %94 = icmp eq i32 %93, 7
  br i1 %94, label %95, label %97

95:                                               ; preds = %87
  %96 = getelementptr inbounds [2 x %struct.ref_s], [2 x %struct.ref_s]* %8, i64 0, i64 0
  call void @name_string_ref(%struct.ref_s* %96, %struct.ref_s* %6)
  br label %142

97:                                               ; preds = %87, %75
  br label %70

98:                                               ; preds = %70
  %99 = getelementptr inbounds [25 x i8], [25 x i8]* %5, i64 0, i64 0
  %100 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %101 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %100, i32 0, i32 0
  %102 = bitcast %union.color_sample* %101 to i32 (%struct.ref_s*)**
  %103 = load i32 (%struct.ref_s*)*, i32 (%struct.ref_s*)** %102, align 8
  %104 = ptrtoint i32 (%struct.ref_s*)* %103 to i64
  %105 = call i32 (i8*, i8*, ...) @sprintf(i8* %99, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3.695, i64 0, i64 0), i64 %104) #9
  br label %135

106:                                              ; preds = %46
  %107 = getelementptr inbounds [25 x i8], [25 x i8]* %5, i64 0, i64 0
  %108 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %109 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %108, i32 0, i32 0
  %110 = bitcast %union.color_sample* %109 to float*
  %111 = load float, float* %110, align 8
  %112 = fpext float %111 to double
  %113 = call i32 (i8*, i8*, ...) @sprintf(i8* %107, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4.696, i64 0, i64 0), double %112) #9
  br label %135

114:                                              ; preds = %46
  %115 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %116 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %115, i32 0, i32 1
  %117 = load i16, i16* %116, align 8
  %118 = zext i16 %117 to i32
  %119 = xor i32 %118, -1
  %120 = and i32 %119, 512
  %121 = icmp ne i32 %120, 0
  br i1 %121, label %122, label %123

122:                                              ; preds = %114
  store i32 -7, i32* %2, align 4
  br label %182

123:                                              ; preds = %114
  %124 = load %struct.ref_s*, %struct.ref_s** %4, align 8
  %125 = bitcast %struct.ref_s* %6 to i8*
  %126 = bitcast %struct.ref_s* %124 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %125, i8* align 8 %126, i64 16, i1 false)
  br label %142

127:                                              ; preds = %46
  %128 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %129 = load %struct.ref_s*, %struct.ref_s** getelementptr inbounds ([6 x %struct.ref_s*], [6 x %struct.ref_s*]* @osp_nargs, i64 0, i64 0), align 16
  %130 = icmp ult %struct.ref_s* %128, %129
  br i1 %130, label %131, label %132

131:                                              ; preds = %127
  store i32 -17, i32* %2, align 4
  br label %182

132:                                              ; preds = %127
  %133 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i32 0, i32 0
  %134 = bitcast %union.color_sample* %133 to i8**
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.5.697, i64 0, i64 0), i8** %134, align 8
  br label %135

135:                                              ; preds = %132, %106, %98, %59, %48
  %136 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i32 0, i32 0
  %137 = bitcast %union.color_sample* %136 to i8**
  %138 = load i8*, i8** %137, align 8
  %139 = call i64 @strlen(i8* %138) #11
  %140 = trunc i64 %139 to i16
  %141 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i32 0, i32 2
  store i16 %140, i16* %141, align 2
  br label %142

142:                                              ; preds = %135, %123, %95, %66
  %143 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i32 0, i32 2
  %144 = load i16, i16* %143, align 2
  %145 = zext i16 %144 to i32
  %146 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %147 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %146, i32 0, i32 2
  %148 = load i16, i16* %147, align 2
  %149 = zext i16 %148 to i32
  %150 = icmp sgt i32 %145, %149
  br i1 %150, label %151, label %152

151:                                              ; preds = %142
  store i32 -15, i32* %2, align 4
  br label %182

152:                                              ; preds = %142
  %153 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %154 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %153, i32 0, i32 0
  %155 = bitcast %union.color_sample* %154 to i8**
  %156 = load i8*, i8** %155, align 8
  %157 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i32 0, i32 0
  %158 = bitcast %union.color_sample* %157 to i8**
  %159 = load i8*, i8** %158, align 8
  %160 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i32 0, i32 2
  %161 = load i16, i16* %160, align 2
  %162 = zext i16 %161 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %156, i8* align 1 %159, i64 %162, i1 false)
  %163 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %164 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %163, i64 -1
  %165 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %166 = bitcast %struct.ref_s* %164 to i8*
  %167 = bitcast %struct.ref_s* %165 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %166, i8* align 8 %167, i64 16, i1 false)
  %168 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i32 0, i32 2
  %169 = load i16, i16* %168, align 2
  %170 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %171 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %170, i64 -1
  %172 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %171, i32 0, i32 2
  store i16 %169, i16* %172, align 2
  %173 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %174 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %173, i64 -1
  %175 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %174, i32 0, i32 1
  %176 = load i16, i16* %175, align 8
  %177 = zext i16 %176 to i32
  %178 = or i32 %177, 32768
  %179 = trunc i32 %178 to i16
  store i16 %179, i16* %175, align 8
  %180 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %181 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %180, i64 -1
  store %struct.ref_s* %181, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %182

182:                                              ; preds = %152, %151, %131, %122, %26, %17
  %183 = load i32, i32* %2, align 4
  ret i32 %183
}

; Function Attrs: nounwind
declare dso_local i32 @sprintf(i8*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @ztype_op_init() #0 {
  %1 = call i32 (%struct.op_def*, ...) bitcast (void (%struct.op_def*)* @z_op_init to i32 (%struct.op_def*, ...)*)(%struct.op_def* getelementptr inbounds ([15 x %struct.op_def], [15 x %struct.op_def]* @ztype_op_init.my_defs, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zsave(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i32, align 4
  %5 = alloca %struct.vm_save_s*, align 8
  %6 = alloca %struct.alloc_save_s*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %7 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %8 = call i32 (%struct.ref_s*, ...) bitcast (i32 (%struct.ref_s*)* @zgsave to i32 (%struct.ref_s*, ...)*)(%struct.ref_s* %7)
  store i32 %8, i32* %4, align 4
  %9 = call i8* @alloc(i32 1, i32 24, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.714, i64 0, i64 0))
  %10 = bitcast i8* %9 to %struct.vm_save_s*
  store %struct.vm_save_s* %10, %struct.vm_save_s** %5, align 8
  %11 = call %struct.alloc_save_s* @alloc_save_state()
  store %struct.alloc_save_s* %11, %struct.alloc_save_s** %6, align 8
  %12 = load i32, i32* %4, align 4
  %13 = icmp slt i32 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %1
  %15 = load i32, i32* %4, align 4
  store i32 %15, i32* %2, align 4
  br label %48

16:                                               ; preds = %1
  %17 = load %struct.vm_save_s*, %struct.vm_save_s** %5, align 8
  %18 = icmp eq %struct.vm_save_s* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %16
  %20 = load %struct.alloc_save_s*, %struct.alloc_save_s** %6, align 8
  %21 = icmp eq %struct.alloc_save_s* %20, null
  br i1 %21, label %22, label %23

22:                                               ; preds = %19, %16
  store i32 -25, i32* %2, align 4
  br label %48

23:                                               ; preds = %19
  %24 = load %struct.alloc_save_s*, %struct.alloc_save_s** %6, align 8
  %25 = load %struct.vm_save_s*, %struct.vm_save_s** %5, align 8
  %26 = getelementptr inbounds %struct.vm_save_s, %struct.vm_save_s* %25, i32 0, i32 0
  store %struct.alloc_save_s* %24, %struct.alloc_save_s** %26, align 8
  %27 = load %struct.int_state_s*, %struct.int_state_s** getelementptr inbounds (%struct.int_state_s, %struct.int_state_s* @istate, i32 0, i32 0), align 8
  %28 = load %struct.vm_save_s*, %struct.vm_save_s** %5, align 8
  %29 = getelementptr inbounds %struct.vm_save_s, %struct.vm_save_s* %28, i32 0, i32 1
  store %struct.int_state_s* %27, %struct.int_state_s** %29, align 8
  store %struct.int_state_s* null, %struct.int_state_s** getelementptr inbounds (%struct.int_state_s, %struct.int_state_s* @istate, i32 0, i32 0), align 8
  %30 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %31 = call %struct.gs_state_s* @gs_state_swap_saved(%struct.gs_state_s* %30, %struct.gs_state_s* null)
  %32 = load %struct.vm_save_s*, %struct.vm_save_s** %5, align 8
  %33 = getelementptr inbounds %struct.vm_save_s, %struct.vm_save_s* %32, i32 0, i32 2
  store %struct.gs_state_s* %31, %struct.gs_state_s** %33, align 8
  %34 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %35 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %34, i64 1
  store %struct.ref_s* %35, %struct.ref_s** %3, align 8
  store %struct.ref_s* %35, %struct.ref_s** @osp, align 8
  %36 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %37 = icmp ugt %struct.ref_s* %35, %36
  br i1 %37, label %38, label %41

38:                                               ; preds = %23
  %39 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %40 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %39, i64 -1
  store %struct.ref_s* %40, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %48

41:                                               ; preds = %23
  %42 = load %struct.vm_save_s*, %struct.vm_save_s** %5, align 8
  %43 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %44 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %43, i32 0, i32 0
  %45 = bitcast %union.color_sample* %44 to %struct.vm_save_s**
  store %struct.vm_save_s* %42, %struct.vm_save_s** %45, align 8
  %46 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %47 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %46, i32 0, i32 1
  store i16 48, i16* %47, align 8
  store i32 0, i32* %2, align 4
  br label %48

48:                                               ; preds = %41, %38, %22, %14
  %49 = load i32, i32* %2, align 4
  ret i32 %49
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zrestore(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca %struct.vm_save_s*, align 8
  %5 = alloca %struct.alloc_save_s*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  %8 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %9 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %8, i32 0, i32 1
  %10 = load i16, i16* %9, align 8
  %11 = zext i16 %10 to i32
  %12 = and i32 %11, 252
  %13 = icmp eq i32 %12, 48
  br i1 %13, label %15, label %14

14:                                               ; preds = %1
  store i32 -20, i32* %2, align 4
  br label %69

15:                                               ; preds = %1
  %16 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %16, i32 0, i32 0
  %18 = bitcast %union.color_sample* %17 to %struct.vm_save_s**
  %19 = load %struct.vm_save_s*, %struct.vm_save_s** %18, align 8
  store %struct.vm_save_s* %19, %struct.vm_save_s** %4, align 8
  %20 = load %struct.vm_save_s*, %struct.vm_save_s** %4, align 8
  %21 = getelementptr inbounds %struct.vm_save_s, %struct.vm_save_s* %20, i32 0, i32 0
  %22 = load %struct.alloc_save_s*, %struct.alloc_save_s** %21, align 8
  store %struct.alloc_save_s* %22, %struct.alloc_save_s** %5, align 8
  %23 = load %struct.ref_s*, %struct.ref_s** @osbot, align 8
  %24 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %25 = load %struct.alloc_save_s*, %struct.alloc_save_s** %5, align 8
  %26 = call i32 @restore_check_stack(%struct.ref_s* %23, %struct.ref_s* %24, %struct.alloc_save_s* %25)
  store i32 %26, i32* %7, align 4
  %27 = icmp slt i32 %26, 0
  br i1 %27, label %40, label %28

28:                                               ; preds = %15
  %29 = load %struct.ref_s*, %struct.ref_s** @esp, align 8
  %30 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %29, i64 1
  %31 = load %struct.alloc_save_s*, %struct.alloc_save_s** %5, align 8
  %32 = call i32 @restore_check_stack(%struct.ref_s* getelementptr inbounds ([150 x %struct.ref_s], [150 x %struct.ref_s]* @estack, i64 0, i64 0), %struct.ref_s* %30, %struct.alloc_save_s* %31)
  store i32 %32, i32* %7, align 4
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %40, label %34

34:                                               ; preds = %28
  %35 = load %struct.ref_s*, %struct.ref_s** @dsp, align 8
  %36 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %35, i64 1
  %37 = load %struct.alloc_save_s*, %struct.alloc_save_s** %5, align 8
  %38 = call i32 @restore_check_stack(%struct.ref_s* getelementptr inbounds ([20 x %struct.ref_s], [20 x %struct.ref_s]* @dstack, i64 0, i64 0), %struct.ref_s* %36, %struct.alloc_save_s* %37)
  store i32 %38, i32* %7, align 4
  %39 = icmp slt i32 %38, 0
  br i1 %39, label %40, label %42

40:                                               ; preds = %34, %28, %15
  %41 = load i32, i32* %7, align 4
  store i32 %41, i32* %2, align 4
  br label %69

42:                                               ; preds = %34
  %43 = load %struct.alloc_save_s*, %struct.alloc_save_s** %5, align 8
  %44 = call i32 @alloc_restore_state_check(%struct.alloc_save_s* %43)
  %45 = icmp slt i32 %44, 0
  br i1 %45, label %46, label %47

46:                                               ; preds = %42
  store i32 -11, i32* %2, align 4
  br label %69

47:                                               ; preds = %42
  %48 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %49 = call i32 (%struct.ref_s*, ...) bitcast (i32 (%struct.ref_s*)* @zgrestoreall to i32 (%struct.ref_s*, ...)*)(%struct.ref_s* %48)
  %50 = load %struct.alloc_save_s*, %struct.alloc_save_s** %5, align 8
  call void @alloc_restore_state(%struct.alloc_save_s* %50)
  %51 = load %struct.vm_save_s*, %struct.vm_save_s** %4, align 8
  %52 = getelementptr inbounds %struct.vm_save_s, %struct.vm_save_s* %51, i32 0, i32 1
  %53 = load %struct.int_state_s*, %struct.int_state_s** %52, align 8
  store %struct.int_state_s* %53, %struct.int_state_s** getelementptr inbounds (%struct.int_state_s, %struct.int_state_s* @istate, i32 0, i32 0), align 8
  %54 = load %struct.gs_state_s*, %struct.gs_state_s** @igs, align 8
  %55 = load %struct.vm_save_s*, %struct.vm_save_s** %4, align 8
  %56 = getelementptr inbounds %struct.vm_save_s, %struct.vm_save_s* %55, i32 0, i32 2
  %57 = load %struct.gs_state_s*, %struct.gs_state_s** %56, align 8
  %58 = call %struct.gs_state_s* @gs_state_swap_saved(%struct.gs_state_s* %54, %struct.gs_state_s* %57)
  %59 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %60 = call i32 (%struct.ref_s*, ...) bitcast (i32 (%struct.ref_s*)* @zgrestore to i32 (%struct.ref_s*, ...)*)(%struct.ref_s* %59)
  store i32 %60, i32* %6, align 4
  %61 = icmp slt i32 %60, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %47
  %63 = load i32, i32* %6, align 4
  store i32 %63, i32* %2, align 4
  br label %69

64:                                               ; preds = %47
  %65 = load %struct.vm_save_s*, %struct.vm_save_s** %4, align 8
  %66 = bitcast %struct.vm_save_s* %65 to i8*
  call void @alloc_free(i8* %66, i32 1, i32 24, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1.715, i64 0, i64 0))
  %67 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %68 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %67, i64 -1
  store %struct.ref_s* %68, %struct.ref_s** @osp, align 8
  store i32 0, i32* %2, align 4
  br label %69

69:                                               ; preds = %64, %62, %46, %40, %14
  %70 = load i32, i32* %2, align 4
  ret i32 %70
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @restore_check_stack(%struct.ref_s* %0, %struct.ref_s* %1, %struct.alloc_save_s* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca %struct.ref_s*, align 8
  %6 = alloca %struct.ref_s*, align 8
  %7 = alloca %struct.alloc_save_s*, align 8
  %8 = alloca %struct.ref_s*, align 8
  %9 = alloca i8*, align 8
  store %struct.ref_s* %0, %struct.ref_s** %5, align 8
  store %struct.ref_s* %1, %struct.ref_s** %6, align 8
  store %struct.alloc_save_s* %2, %struct.alloc_save_s** %7, align 8
  %10 = load %struct.ref_s*, %struct.ref_s** %5, align 8
  store %struct.ref_s* %10, %struct.ref_s** %8, align 8
  br label %11

11:                                               ; preds = %77, %3
  %12 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %13 = load %struct.ref_s*, %struct.ref_s** %6, align 8
  %14 = icmp ult %struct.ref_s* %12, %13
  br i1 %14, label %15, label %80

15:                                               ; preds = %11
  %16 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %16, i32 0, i32 1
  %18 = load i16, i16* %17, align 8
  %19 = zext i16 %18 to i32
  %20 = and i32 %19, 255
  %21 = ashr i32 %20, 2
  switch i32 %21, label %69 [
    i32 0, label %22
    i32 10, label %22
    i32 2, label %28
    i32 4, label %34
    i32 7, label %40
    i32 12, label %46
    i32 13, label %52
    i32 14, label %57
    i32 15, label %63
  ]

22:                                               ; preds = %15, %15
  %23 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %24 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %23, i32 0, i32 0
  %25 = bitcast %union.color_sample* %24 to %struct.ref_s**
  %26 = load %struct.ref_s*, %struct.ref_s** %25, align 8
  %27 = bitcast %struct.ref_s* %26 to i8*
  store i8* %27, i8** %9, align 8
  br label %70

28:                                               ; preds = %15
  %29 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %30 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %29, i32 0, i32 0
  %31 = bitcast %union.color_sample* %30 to %struct.dict_s**
  %32 = load %struct.dict_s*, %struct.dict_s** %31, align 8
  %33 = bitcast %struct.dict_s* %32 to i8*
  store i8* %33, i8** %9, align 8
  br label %70

34:                                               ; preds = %15
  %35 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %36 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %35, i32 0, i32 0
  %37 = bitcast %union.color_sample* %36 to %struct.gs_font_s**
  %38 = load %struct.gs_font_s*, %struct.gs_font_s** %37, align 8
  %39 = bitcast %struct.gs_font_s* %38 to i8*
  store i8* %39, i8** %9, align 8
  br label %70

40:                                               ; preds = %15
  %41 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %42 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %41, i32 0, i32 0
  %43 = bitcast %union.color_sample* %42 to %struct.name_s**
  %44 = load %struct.name_s*, %struct.name_s** %43, align 8
  %45 = bitcast %struct.name_s* %44 to i8*
  store i8* %45, i8** %9, align 8
  br label %70

46:                                               ; preds = %15
  %47 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %48 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %47, i32 0, i32 0
  %49 = bitcast %union.color_sample* %48 to %struct.vm_save_s**
  %50 = load %struct.vm_save_s*, %struct.vm_save_s** %49, align 8
  %51 = bitcast %struct.vm_save_s* %50 to i8*
  store i8* %51, i8** %9, align 8
  br label %70

52:                                               ; preds = %15
  %53 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %54 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %53, i32 0, i32 0
  %55 = bitcast %union.color_sample* %54 to i8**
  %56 = load i8*, i8** %55, align 8
  store i8* %56, i8** %9, align 8
  br label %70

57:                                               ; preds = %15
  %58 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %59 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %58, i32 0, i32 0
  %60 = bitcast %union.color_sample* %59 to %struct.gs_color_s**
  %61 = load %struct.gs_color_s*, %struct.gs_color_s** %60, align 8
  %62 = bitcast %struct.gs_color_s* %61 to i8*
  store i8* %62, i8** %9, align 8
  br label %70

63:                                               ; preds = %15
  %64 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %65 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %64, i32 0, i32 0
  %66 = bitcast %union.color_sample* %65 to %struct.gx_device_s**
  %67 = load %struct.gx_device_s*, %struct.gx_device_s** %66, align 8
  %68 = bitcast %struct.gx_device_s* %67 to i8*
  store i8* %68, i8** %9, align 8
  br label %70

69:                                               ; preds = %15
  br label %77

70:                                               ; preds = %63, %57, %52, %46, %40, %34, %28, %22
  %71 = load i8*, i8** %9, align 8
  %72 = load %struct.alloc_save_s*, %struct.alloc_save_s** %7, align 8
  %73 = call i32 @alloc_is_since_save(i8* %71, %struct.alloc_save_s* %72)
  %74 = icmp ne i32 %73, 0
  br i1 %74, label %75, label %76

75:                                               ; preds = %70
  store i32 -11, i32* %4, align 4
  br label %81

76:                                               ; preds = %70
  br label %77

77:                                               ; preds = %76, %69
  %78 = load %struct.ref_s*, %struct.ref_s** %8, align 8
  %79 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %78, i32 1
  store %struct.ref_s* %79, %struct.ref_s** %8, align 8
  br label %11

80:                                               ; preds = %11
  store i32 0, i32* %4, align 4
  br label %81

81:                                               ; preds = %80, %75
  %82 = load i32, i32* %4, align 4
  ret i32 %82
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @zvmstatus(%struct.ref_s* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.ref_s*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  store %struct.ref_s* %0, %struct.ref_s** %3, align 8
  call void @alloc_status(i64* %4, i64* %5)
  %6 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %7 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %6, i64 3
  store %struct.ref_s* %7, %struct.ref_s** %3, align 8
  store %struct.ref_s* %7, %struct.ref_s** @osp, align 8
  %8 = load %struct.ref_s*, %struct.ref_s** @ostop, align 8
  %9 = icmp ugt %struct.ref_s* %7, %8
  br i1 %9, label %10, label %13

10:                                               ; preds = %1
  %11 = load %struct.ref_s*, %struct.ref_s** @osp, align 8
  %12 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %11, i64 -3
  store %struct.ref_s* %12, %struct.ref_s** @osp, align 8
  store i32 -16, i32* %2, align 4
  br label %37

13:                                               ; preds = %1
  %14 = call i32 @alloc_save_level()
  %15 = sext i32 %14 to i64
  %16 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %17 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %16, i64 -2
  %18 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %17, i32 0, i32 0
  %19 = bitcast %union.color_sample* %18 to i64*
  store i64 %15, i64* %19, align 8
  %20 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %21 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %20, i64 -2
  %22 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %21, i32 0, i32 1
  store i16 20, i16* %22, align 8
  %23 = load i64, i64* %4, align 8
  %24 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %25 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %24, i64 -1
  %26 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %25, i32 0, i32 0
  %27 = bitcast %union.color_sample* %26 to i64*
  store i64 %23, i64* %27, align 8
  %28 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %29 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %28, i64 -1
  %30 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %29, i32 0, i32 1
  store i16 20, i16* %30, align 8
  %31 = load i64, i64* %5, align 8
  %32 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %33 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %32, i32 0, i32 0
  %34 = bitcast %union.color_sample* %33 to i64*
  store i64 %31, i64* %34, align 8
  %35 = load %struct.ref_s*, %struct.ref_s** %3, align 8
  %36 = getelementptr inbounds %struct.ref_s, %struct.ref_s* %35, i32 0, i32 1
  store i16 20, i16* %36, align 8
  store i32 0, i32* %2, align 4
  br label %37

37:                                               ; preds = %13, %10
  %38 = load i32, i32* %2, align 4
  ret i32 %38
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @zvmem_op_init() #0 {
  %1 = call i32 (%struct.op_def*, ...) bitcast (void (%struct.op_def*)* @z_op_init to i32 (%struct.op_def*, ...)*)(%struct.op_def* getelementptr inbounds ([4 x %struct.op_def], [4 x %struct.op_def]* @zvmem_op_init.my_defs, i64 0, i64 0))
  ret void
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable willreturn }
attributes #7 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind returns_twice "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { noreturn }
attributes #11 = { nounwind readonly }
attributes #12 = { noreturn nounwind }
attributes #13 = { nounwind readnone }
attributes #14 = { nounwind returns_twice }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}
!llvm.module.flags = !{!1}

!0 = !{!"Debian clang version 10.0.1-++20200708124224+ef32c611aa2-1~exp1~20200707224822.188 "}
!1 = !{i32 1, !"wchar_size", i32 4}
