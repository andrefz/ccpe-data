; ModuleID = 'llvm-link'
source_filename = "llvm-link"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.point = type { i32, i32 }
%struct.bits_counted = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.pict = type { i32, i32, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, float }
%struct.pict_image = type { i8*, i8*, i8* }
%struct.motionvector = type { i32, i32, i32, i32, i32, i32 }
%struct.mb_structure = type { [16 x [16 x i32]], [8 x [8 x i32]], [8 x [8 x i32]] }
%struct.results = type { float, float, float, float }

@mv_outside_frame = common dso_local global i32 0, align 4
@long_vectors = common dso_local global i32 0, align 4
@pels = common dso_local global i32 0, align 4
@lines = common dso_local global i32 0, align 4
@syntax_arith_coding = common dso_local global i32 0, align 4
@cpels = common dso_local global i32 0, align 4
@advanced = common dso_local global i32 0, align 4
@headerlength = common dso_local global i32 0, align 4
@trace = common dso_local global i32 0, align 4
@pb_frames = common dso_local global i32 0, align 4
@target_framerate = common dso_local global float 0.000000e+00, align 4
@tf = common dso_local global %struct._IO_FILE* null, align 8
@__const.CodeOneOrTwo.bquant = private unnamed_addr constant [4 x i32] [i32 5, i32 6, i32 7, i32 8], align 16
@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [38 x i8] c"Couldn't allocate memory for pi_edge\0A\00", align 1
@.str.2 = private unnamed_addr constant [47 x i8] c"MB_Coder: Could not allocate space for iblock\0A\00", align 1
@.str.3 = private unnamed_addr constant [47 x i8] c"MB_Coder: Could not allocate space for rcoeff\0A\00", align 1
@.str.1 = private unnamed_addr constant [40 x i8] c"mb_encode(): Couldn't allocate qcoeff.\0A\00", align 1
@cumf_COD = dso_local global [3 x i32] [i32 16383, i32 6849, i32 0], align 4
@cumf_MCBPC = dso_local global [22 x i32] [i32 16383, i32 4105, i32 3088, i32 2367, i32 1988, i32 1621, i32 1612, i32 1609, i32 1608, i32 496, i32 353, i32 195, i32 77, i32 22, i32 17, i32 12, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0], align 16
@cumf_MCBPC_intra = dso_local global [10 x i32] [i32 16383, i32 7410, i32 6549, i32 5188, i32 442, i32 182, i32 181, i32 141, i32 1, i32 0], align 16
@cumf_MODB = dso_local global [4 x i32] [i32 16383, i32 6062, i32 2130, i32 0], align 16
@cumf_YCBPB = dso_local global [3 x i32] [i32 16383, i32 6062, i32 0], align 4
@cumf_UVCBPB = dso_local global [3 x i32] [i32 16383, i32 491, i32 0], align 4
@cumf_CBPY = dso_local global [17 x i32] [i32 16383, i32 14481, i32 13869, i32 13196, i32 12568, i32 11931, i32 11185, i32 10814, i32 9796, i32 9150, i32 8781, i32 7933, i32 6860, i32 6116, i32 4873, i32 3538, i32 0], align 16
@cumf_CBPY_intra = dso_local global [17 x i32] [i32 16383, i32 13619, i32 13211, i32 12933, i32 12562, i32 12395, i32 11913, i32 11783, i32 11004, i32 10782, i32 10689, i32 9928, i32 9353, i32 8945, i32 8407, i32 7795, i32 0], align 16
@cumf_DQUANT = dso_local global [5 x i32] [i32 16383, i32 12287, i32 8192, i32 4095, i32 0], align 16
@cumf_MVD = dso_local global [65 x i32] [i32 16383, i32 16380, i32 16369, i32 16365, i32 16361, i32 16357, i32 16350, i32 16343, i32 16339, i32 16333, i32 16326, i32 16318, i32 16311, i32 16306, i32 16298, i32 16291, i32 16283, i32 16272, i32 16261, i32 16249, i32 16235, i32 16222, i32 16207, i32 16175, i32 16141, i32 16094, i32 16044, i32 15936, i32 15764, i32 15463, i32 14956, i32 13924, i32 11491, i32 4621, i32 2264, i32 1315, i32 854, i32 583, i32 420, i32 326, i32 273, i32 229, i32 196, i32 166, i32 148, i32 137, i32 123, i32 114, i32 101, i32 91, i32 82, i32 76, i32 66, i32 59, i32 53, i32 46, i32 36, i32 30, i32 26, i32 24, i32 18, i32 14, i32 10, i32 5, i32 0], align 16
@cumf_INTRADC = dso_local global [255 x i32] [i32 16383, i32 16380, i32 16379, i32 16378, i32 16377, i32 16376, i32 16370, i32 16361, i32 16360, i32 16359, i32 16358, i32 16357, i32 16356, i32 16355, i32 16343, i32 16238, i32 16237, i32 16236, i32 16230, i32 16221, i32 16220, i32 16205, i32 16190, i32 16169, i32 16151, i32 16130, i32 16109, i32 16094, i32 16070, i32 16037, i32 16007, i32 15962, i32 15938, i32 15899, i32 15854, i32 15815, i32 15788, i32 15743, i32 15689, i32 15656, i32 15617, i32 15560, i32 15473, i32 15404, i32 15296, i32 15178, i32 15106, i32 14992, i32 14868, i32 14738, i32 14593, i32 14438, i32 14283, i32 14169, i32 14064, i32 14004, i32 13914, i32 13824, i32 13752, i32 13671, i32 13590, i32 13515, i32 13458, i32 13380, i32 13305, i32 13230, i32 13143, i32 13025, i32 12935, i32 12878, i32 12794, i32 12743, i32 12656, i32 12596, i32 12521, i32 12443, i32 12359, i32 12278, i32 12200, i32 12131, i32 12047, i32 12002, i32 11948, i32 11891, i32 11828, i32 11744, i32 11663, i32 11588, i32 11495, i32 11402, i32 11288, i32 11204, i32 11126, i32 11039, i32 10961, i32 10883, i32 10787, i32 10679, i32 10583, i32 10481, i32 10360, i32 10227, i32 10113, i32 9961, i32 9828, i32 9717, i32 9584, i32 9485, i32 9324, i32 9112, i32 9019, i32 8908, i32 8766, i32 8584, i32 8426, i32 8211, i32 7920, i32 7663, i32 7406, i32 7152, i32 6904, i32 6677, i32 6453, i32 6265, i32 6101, i32 5904, i32 5716, i32 5489, i32 5307, i32 5056, i32 4850, i32 4569, i32 4284, i32 3966, i32 3712, i32 3518, i32 3342, i32 3206, i32 3048, i32 2909, i32 2773, i32 2668, i32 2596, i32 2512, i32 2370, i32 2295, i32 2232, i32 2166, i32 2103, i32 2022, i32 1956, i32 1887, i32 1830, i32 1803, i32 1770, i32 1728, i32 1674, i32 1635, i32 1599, i32 1557, i32 1500, i32 1482, i32 1434, i32 1389, i32 1356, i32 1317, i32 1284, i32 1245, i32 1200, i32 1179, i32 1140, i32 1110, i32 1092, i32 1062, i32 1044, i32 1035, i32 1014, i32 1008, i32 993, i32 981, i32 954, i32 936, i32 912, i32 894, i32 876, i32 864, i32 849, i32 828, i32 816, i32 801, i32 792, i32 777, i32 756, i32 732, i32 690, i32 660, i32 642, i32 615, i32 597, i32 576, i32 555, i32 522, i32 489, i32 459, i32 435, i32 411, i32 405, i32 396, i32 387, i32 375, i32 360, i32 354, i32 345, i32 344, i32 329, i32 314, i32 293, i32 278, i32 251, i32 236, i32 230, i32 224, i32 215, i32 214, i32 208, i32 199, i32 193, i32 184, i32 178, i32 169, i32 154, i32 127, i32 100, i32 94, i32 73, i32 37, i32 36, i32 35, i32 34, i32 33, i32 32, i32 31, i32 30, i32 29, i32 28, i32 27, i32 26, i32 20, i32 19, i32 18, i32 17, i32 16, i32 15, i32 9, i32 0], align 16
@cumf_TCOEF1 = dso_local global [104 x i32] [i32 16383, i32 13455, i32 12458, i32 12079, i32 11885, i32 11800, i32 11738, i32 11700, i32 11681, i32 11661, i32 11651, i32 11645, i32 11641, i32 10572, i32 10403, i32 10361, i32 10346, i32 10339, i32 10335, i32 9554, i32 9445, i32 9427, i32 9419, i32 9006, i32 8968, i32 8964, i32 8643, i32 8627, i32 8624, i32 8369, i32 8354, i32 8352, i32 8200, i32 8192, i32 8191, i32 8039, i32 8036, i32 7920, i32 7917, i32 7800, i32 7793, i32 7730, i32 7727, i32 7674, i32 7613, i32 7564, i32 7513, i32 7484, i32 7466, i32 7439, i32 7411, i32 7389, i32 7373, i32 7369, i32 7359, i32 7348, i32 7321, i32 7302, i32 7294, i32 5013, i32 4819, i32 4789, i32 4096, i32 4073, i32 3373, i32 3064, i32 2674, i32 2357, i32 2177, i32 1975, i32 1798, i32 1618, i32 1517, i32 1421, i32 1303, i32 1194, i32 1087, i32 1027, i32 960, i32 890, i32 819, i32 758, i32 707, i32 680, i32 656, i32 613, i32 566, i32 534, i32 505, i32 475, i32 465, i32 449, i32 430, i32 395, i32 358, i32 335, i32 324, i32 303, i32 295, i32 286, i32 272, i32 233, i32 215, i32 0], align 16
@cumf_TCOEF2 = dso_local global [104 x i32] [i32 16383, i32 13582, i32 12709, i32 12402, i32 12262, i32 12188, i32 12150, i32 12131, i32 12125, i32 12117, i32 12113, i32 12108, i32 12104, i32 10567, i32 10180, i32 10070, i32 10019, i32 9998, i32 9987, i32 9158, i32 9037, i32 9010, i32 9005, i32 8404, i32 8323, i32 8312, i32 7813, i32 7743, i32 7726, i32 7394, i32 7366, i32 7364, i32 7076, i32 7062, i32 7060, i32 6810, i32 6797, i32 6614, i32 6602, i32 6459, i32 6454, i32 6304, i32 6303, i32 6200, i32 6121, i32 6059, i32 6012, i32 5973, i32 5928, i32 5893, i32 5871, i32 5847, i32 5823, i32 5809, i32 5796, i32 5781, i32 5771, i32 5763, i32 5752, i32 4754, i32 4654, i32 4631, i32 3934, i32 3873, i32 3477, i32 3095, i32 2758, i32 2502, i32 2257, i32 2054, i32 1869, i32 1715, i32 1599, i32 1431, i32 1305, i32 1174, i32 1059, i32 983, i32 901, i32 839, i32 777, i32 733, i32 683, i32 658, i32 606, i32 565, i32 526, i32 488, i32 456, i32 434, i32 408, i32 380, i32 361, i32 327, i32 310, i32 296, i32 267, i32 259, i32 249, i32 239, i32 230, i32 221, i32 214, i32 0], align 16
@cumf_TCOEF3 = dso_local global [104 x i32] [i32 16383, i32 13532, i32 12677, i32 12342, i32 12195, i32 12112, i32 12059, i32 12034, i32 12020, i32 12008, i32 12003, i32 12002, i32 12001, i32 10586, i32 10297, i32 10224, i32 10202, i32 10195, i32 10191, i32 9223, i32 9046, i32 8999, i32 8987, i32 8275, i32 8148, i32 8113, i32 7552, i32 7483, i32 7468, i32 7066, i32 7003, i32 6989, i32 6671, i32 6642, i32 6631, i32 6359, i32 6327, i32 6114, i32 6103, i32 5929, i32 5918, i32 5792, i32 5785, i32 5672, i32 5580, i32 5507, i32 5461, i32 5414, i32 5382, i32 5354, i32 5330, i32 5312, i32 5288, i32 5273, i32 5261, i32 5247, i32 5235, i32 5227, i32 5219, i32 4357, i32 4277, i32 4272, i32 3847, i32 3819, i32 3455, i32 3119, i32 2829, i32 2550, i32 2313, i32 2104, i32 1881, i32 1711, i32 1565, i32 1366, i32 1219, i32 1068, i32 932, i32 866, i32 799, i32 750, i32 701, i32 662, i32 605, i32 559, i32 513, i32 471, i32 432, i32 403, i32 365, i32 336, i32 312, i32 290, i32 276, i32 266, i32 254, i32 240, i32 228, i32 223, i32 216, i32 206, i32 199, i32 192, i32 189, i32 0], align 16
@cumf_TCOEFr = dso_local global [104 x i32] [i32 16383, i32 13216, i32 12233, i32 11931, i32 11822, i32 11776, i32 11758, i32 11748, i32 11743, i32 11742, i32 11741, i32 11740, i32 11739, i32 10203, i32 9822, i32 9725, i32 9691, i32 9677, i32 9674, i32 8759, i32 8609, i32 8576, i32 8566, i32 7901, i32 7787, i32 7770, i32 7257, i32 7185, i32 7168, i32 6716, i32 6653, i32 6639, i32 6276, i32 6229, i32 6220, i32 5888, i32 5845, i32 5600, i32 5567, i32 5348, i32 5327, i32 5160, i32 5142, i32 5004, i32 4900, i32 4798, i32 4743, i32 4708, i32 4685, i32 4658, i32 4641, i32 4622, i32 4610, i32 4598, i32 4589, i32 4582, i32 4578, i32 4570, i32 4566, i32 3824, i32 3757, i32 3748, i32 3360, i32 3338, i32 3068, i32 2835, i32 2592, i32 2359, i32 2179, i32 1984, i32 1804, i32 1614, i32 1445, i32 1234, i32 1068, i32 870, i32 739, i32 668, i32 616, i32 566, i32 532, i32 489, i32 453, i32 426, i32 385, i32 357, i32 335, i32 316, i32 297, i32 283, i32 274, i32 266, i32 259, i32 251, i32 241, i32 233, i32 226, i32 222, i32 217, i32 214, i32 211, i32 209, i32 208, i32 0], align 16
@cumf_TCOEF1_intra = dso_local global [104 x i32] [i32 16383, i32 13383, i32 11498, i32 10201, i32 9207, i32 8528, i32 8099, i32 7768, i32 7546, i32 7368, i32 7167, i32 6994, i32 6869, i32 6005, i32 5474, i32 5220, i32 5084, i32 4964, i32 4862, i32 4672, i32 4591, i32 4570, i32 4543, i32 4397, i32 4337, i32 4326, i32 4272, i32 4240, i32 4239, i32 4212, i32 4196, i32 4185, i32 4158, i32 4157, i32 4156, i32 4140, i32 4139, i32 4138, i32 4137, i32 4136, i32 4125, i32 4124, i32 4123, i32 4112, i32 4111, i32 4110, i32 4109, i32 4108, i32 4107, i32 4106, i32 4105, i32 4104, i32 4103, i32 4102, i32 4101, i32 4100, i32 4099, i32 4098, i32 4097, i32 3043, i32 2897, i32 2843, i32 1974, i32 1790, i32 1677, i32 1552, i32 1416, i32 1379, i32 1331, i32 1288, i32 1251, i32 1250, i32 1249, i32 1248, i32 1247, i32 1236, i32 1225, i32 1224, i32 1223, i32 1212, i32 1201, i32 1200, i32 1199, i32 1198, i32 1197, i32 1196, i32 1195, i32 1194, i32 1193, i32 1192, i32 1191, i32 1190, i32 1189, i32 1188, i32 1187, i32 1186, i32 1185, i32 1184, i32 1183, i32 1182, i32 1181, i32 1180, i32 1179, i32 0], align 16
@cumf_TCOEF2_intra = dso_local global [104 x i32] [i32 16383, i32 13242, i32 11417, i32 10134, i32 9254, i32 8507, i32 8012, i32 7556, i32 7273, i32 7062, i32 6924, i32 6839, i32 6741, i32 6108, i32 5851, i32 5785, i32 5719, i32 5687, i32 5655, i32 5028, i32 4917, i32 4864, i32 4845, i32 4416, i32 4159, i32 4074, i32 3903, i32 3871, i32 3870, i32 3765, i32 3752, i32 3751, i32 3659, i32 3606, i32 3580, i32 3541, i32 3540, i32 3514, i32 3495, i32 3494, i32 3493, i32 3474, i32 3473, i32 3441, i32 3440, i32 3439, i32 3438, i32 3425, i32 3424, i32 3423, i32 3422, i32 3421, i32 3420, i32 3401, i32 3400, i32 3399, i32 3398, i32 3397, i32 3396, i32 2530, i32 2419, i32 2360, i32 2241, i32 2228, i32 2017, i32 1687, i32 1576, i32 1478, i32 1320, i32 1281, i32 1242, i32 1229, i32 1197, i32 1178, i32 1152, i32 1133, i32 1114, i32 1101, i32 1088, i32 1087, i32 1086, i32 1085, i32 1072, i32 1071, i32 1070, i32 1069, i32 1068, i32 1067, i32 1066, i32 1065, i32 1064, i32 1063, i32 1062, i32 1061, i32 1060, i32 1059, i32 1058, i32 1057, i32 1056, i32 1055, i32 1054, i32 1053, i32 1052, i32 0], align 16
@cumf_TCOEF3_intra = dso_local global [104 x i32] [i32 16383, i32 12741, i32 10950, i32 10071, i32 9493, i32 9008, i32 8685, i32 8516, i32 8385, i32 8239, i32 8209, i32 8179, i32 8141, i32 6628, i32 5980, i32 5634, i32 5503, i32 5396, i32 5327, i32 4857, i32 4642, i32 4550, i32 4481, i32 4235, i32 4166, i32 4151, i32 3967, i32 3922, i32 3907, i32 3676, i32 3500, i32 3324, i32 3247, i32 3246, i32 3245, i32 3183, i32 3168, i32 3084, i32 3069, i32 3031, i32 3030, i32 3029, i32 3014, i32 3013, i32 2990, i32 2975, i32 2974, i32 2973, i32 2958, i32 2943, i32 2928, i32 2927, i32 2926, i32 2925, i32 2924, i32 2923, i32 2922, i32 2921, i32 2920, i32 2397, i32 2298, i32 2283, i32 1891, i32 1799, i32 1591, i32 1445, i32 1338, i32 1145, i32 1068, i32 1006, i32 791, i32 768, i32 661, i32 631, i32 630, i32 615, i32 592, i32 577, i32 576, i32 561, i32 546, i32 523, i32 508, i32 493, i32 492, i32 491, i32 476, i32 475, i32 474, i32 473, i32 472, i32 471, i32 470, i32 469, i32 468, i32 453, i32 452, i32 451, i32 450, i32 449, i32 448, i32 447, i32 446, i32 0], align 16
@cumf_TCOEFr_intra = dso_local global [104 x i32] [i32 16383, i32 12514, i32 10776, i32 9969, i32 9579, i32 9306, i32 9168, i32 9082, i32 9032, i32 9000, i32 8981, i32 8962, i32 8952, i32 7630, i32 7212, i32 7053, i32 6992, i32 6961, i32 6940, i32 6195, i32 5988, i32 5948, i32 5923, i32 5370, i32 5244, i32 5210, i32 4854, i32 4762, i32 4740, i32 4384, i32 4300, i32 4288, i32 4020, i32 3968, i32 3964, i32 3752, i32 3668, i32 3511, i32 3483, i32 3354, i32 3322, i32 3205, i32 3183, i32 3108, i32 3046, i32 2999, i32 2981, i32 2974, i32 2968, i32 2961, i32 2955, i32 2949, i32 2943, i32 2942, i32 2939, i32 2935, i32 2934, i32 2933, i32 2929, i32 2270, i32 2178, i32 2162, i32 1959, i32 1946, i32 1780, i32 1651, i32 1524, i32 1400, i32 1289, i32 1133, i32 1037, i32 942, i32 849, i32 763, i32 711, i32 591, i32 521, i32 503, i32 496, i32 474, i32 461, i32 449, i32 442, i32 436, i32 426, i32 417, i32 407, i32 394, i32 387, i32 377, i32 373, i32 370, i32 367, i32 366, i32 365, i32 364, i32 363, i32 362, i32 358, i32 355, i32 352, i32 351, i32 350, i32 0], align 16
@cumf_SIGN = dso_local global [3 x i32] [i32 16383, i32 8416, i32 0], align 4
@cumf_LAST = dso_local global [3 x i32] [i32 16383, i32 9469, i32 0], align 4
@cumf_LAST_intra = dso_local global [3 x i32] [i32 16383, i32 2820, i32 0], align 4
@cumf_RUN = dso_local global [65 x i32] [i32 16383, i32 15310, i32 14702, i32 13022, i32 11883, i32 11234, i32 10612, i32 10192, i32 9516, i32 9016, i32 8623, i32 8366, i32 7595, i32 7068, i32 6730, i32 6487, i32 6379, i32 6285, i32 6177, i32 6150, i32 6083, i32 5989, i32 5949, i32 5922, i32 5895, i32 5828, i32 5774, i32 5773, i32 5394, i32 5164, i32 5016, i32 4569, i32 4366, i32 4136, i32 4015, i32 3867, i32 3773, i32 3692, i32 3611, i32 3476, i32 3341, i32 3301, i32 2787, i32 2503, i32 2219, i32 1989, i32 1515, i32 1095, i32 934, i32 799, i32 691, i32 583, i32 435, i32 300, i32 246, i32 206, i32 125, i32 124, i32 97, i32 57, i32 30, i32 3, i32 2, i32 1, i32 0], align 16
@cumf_RUN_intra = dso_local global [65 x i32] [i32 16383, i32 10884, i32 8242, i32 7124, i32 5173, i32 4745, i32 4246, i32 3984, i32 3034, i32 2749, i32 2607, i32 2298, i32 966, i32 681, i32 396, i32 349, i32 302, i32 255, i32 254, i32 253, i32 206, i32 159, i32 158, i32 157, i32 156, i32 155, i32 154, i32 153, i32 106, i32 35, i32 34, i32 33, i32 32, i32 31, i32 30, i32 29, i32 28, i32 27, i32 26, i32 25, i32 24, i32 23, i32 22, i32 21, i32 20, i32 19, i32 18, i32 17, i32 16, i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0], align 16
@cumf_LEVEL = dso_local global [255 x i32] [i32 16383, i32 16382, i32 16381, i32 16380, i32 16379, i32 16378, i32 16377, i32 16376, i32 16375, i32 16374, i32 16373, i32 16372, i32 16371, i32 16370, i32 16369, i32 16368, i32 16367, i32 16366, i32 16365, i32 16364, i32 16363, i32 16362, i32 16361, i32 16360, i32 16359, i32 16358, i32 16357, i32 16356, i32 16355, i32 16354, i32 16353, i32 16352, i32 16351, i32 16350, i32 16349, i32 16348, i32 16347, i32 16346, i32 16345, i32 16344, i32 16343, i32 16342, i32 16341, i32 16340, i32 16339, i32 16338, i32 16337, i32 16336, i32 16335, i32 16334, i32 16333, i32 16332, i32 16331, i32 16330, i32 16329, i32 16328, i32 16327, i32 16326, i32 16325, i32 16324, i32 16323, i32 16322, i32 16321, i32 16320, i32 16319, i32 16318, i32 16317, i32 16316, i32 16315, i32 16314, i32 16313, i32 16312, i32 16311, i32 16310, i32 16309, i32 16308, i32 16307, i32 16306, i32 16305, i32 16304, i32 16303, i32 16302, i32 16301, i32 16300, i32 16299, i32 16298, i32 16297, i32 16296, i32 16295, i32 16294, i32 16293, i32 16292, i32 16291, i32 16290, i32 16289, i32 16288, i32 16287, i32 16286, i32 16285, i32 16284, i32 16283, i32 16282, i32 16281, i32 16280, i32 16279, i32 16278, i32 16277, i32 16250, i32 16223, i32 16222, i32 16195, i32 16154, i32 16153, i32 16071, i32 15989, i32 15880, i32 15879, i32 15878, i32 15824, i32 15756, i32 15674, i32 15606, i32 15538, i32 15184, i32 14572, i32 13960, i32 10718, i32 7994, i32 5379, i32 2123, i32 1537, i32 992, i32 693, i32 611, i32 516, i32 448, i32 421, i32 380, i32 353, i32 352, i32 284, i32 257, i32 230, i32 203, i32 162, i32 161, i32 160, i32 133, i32 132, i32 105, i32 104, i32 103, i32 102, i32 101, i32 100, i32 99, i32 98, i32 97, i32 96, i32 95, i32 94, i32 93, i32 92, i32 91, i32 90, i32 89, i32 88, i32 87, i32 86, i32 85, i32 84, i32 83, i32 82, i32 81, i32 80, i32 79, i32 78, i32 77, i32 76, i32 75, i32 74, i32 73, i32 72, i32 71, i32 70, i32 69, i32 68, i32 67, i32 66, i32 65, i32 64, i32 63, i32 62, i32 61, i32 60, i32 59, i32 58, i32 57, i32 56, i32 55, i32 54, i32 53, i32 52, i32 51, i32 50, i32 49, i32 48, i32 47, i32 46, i32 45, i32 44, i32 43, i32 42, i32 41, i32 40, i32 39, i32 38, i32 37, i32 36, i32 35, i32 34, i32 33, i32 32, i32 31, i32 30, i32 29, i32 28, i32 27, i32 26, i32 25, i32 24, i32 23, i32 22, i32 21, i32 20, i32 19, i32 18, i32 17, i32 16, i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0], align 16
@cumf_LEVEL_intra = dso_local global [255 x i32] [i32 16383, i32 16379, i32 16378, i32 16377, i32 16376, i32 16375, i32 16374, i32 16373, i32 16372, i32 16371, i32 16370, i32 16369, i32 16368, i32 16367, i32 16366, i32 16365, i32 16364, i32 16363, i32 16362, i32 16361, i32 16360, i32 16359, i32 16358, i32 16357, i32 16356, i32 16355, i32 16354, i32 16353, i32 16352, i32 16351, i32 16350, i32 16349, i32 16348, i32 16347, i32 16346, i32 16345, i32 16344, i32 16343, i32 16342, i32 16341, i32 16340, i32 16339, i32 16338, i32 16337, i32 16336, i32 16335, i32 16334, i32 16333, i32 16332, i32 16331, i32 16330, i32 16329, i32 16328, i32 16327, i32 16326, i32 16325, i32 16324, i32 16323, i32 16322, i32 16321, i32 16320, i32 16319, i32 16318, i32 16317, i32 16316, i32 16315, i32 16314, i32 16313, i32 16312, i32 16311, i32 16268, i32 16267, i32 16224, i32 16223, i32 16180, i32 16179, i32 16136, i32 16135, i32 16134, i32 16133, i32 16132, i32 16131, i32 16130, i32 16129, i32 16128, i32 16127, i32 16126, i32 16061, i32 16018, i32 16017, i32 16016, i32 16015, i32 16014, i32 15971, i32 15970, i32 15969, i32 15968, i32 15925, i32 15837, i32 15794, i32 15751, i32 15750, i32 15749, i32 15661, i32 15618, i32 15508, i32 15376, i32 15288, i32 15045, i32 14913, i32 14781, i32 14384, i32 13965, i32 13502, i32 13083, i32 12509, i32 12289, i32 12135, i32 11892, i32 11738, i32 11429, i32 11010, i32 10812, i32 10371, i32 9664, i32 9113, i32 8117, i32 8116, i32 8028, i32 6855, i32 5883, i32 4710, i32 4401, i32 4203, i32 3740, i32 3453, i32 3343, i32 3189, i32 2946, i32 2881, i32 2661, i32 2352, i32 2132, i32 1867, i32 1558, i32 1382, i32 1250, i32 1162, i32 1097, i32 1032, i32 967, i32 835, i32 681, i32 549, i32 439, i32 351, i32 350, i32 307, i32 306, i32 305, i32 304, i32 303, i32 302, i32 301, i32 300, i32 299, i32 298, i32 255, i32 212, i32 211, i32 210, i32 167, i32 166, i32 165, i32 164, i32 163, i32 162, i32 161, i32 160, i32 159, i32 158, i32 115, i32 114, i32 113, i32 112, i32 111, i32 68, i32 67, i32 66, i32 65, i32 64, i32 63, i32 62, i32 61, i32 60, i32 59, i32 58, i32 57, i32 56, i32 55, i32 54, i32 53, i32 52, i32 51, i32 50, i32 49, i32 48, i32 47, i32 46, i32 45, i32 44, i32 43, i32 42, i32 41, i32 40, i32 39, i32 38, i32 37, i32 36, i32 35, i32 34, i32 33, i32 32, i32 31, i32 30, i32 29, i32 28, i32 27, i32 26, i32 25, i32 24, i32 23, i32 22, i32 21, i32 20, i32 19, i32 18, i32 17, i32 16, i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0], align 16
@codtab = dso_local global [2 x i32] [i32 0, i32 1], align 4
@mcbpctab = dso_local global [21 x i32] [i32 0, i32 16, i32 32, i32 48, i32 1, i32 17, i32 33, i32 49, i32 2, i32 18, i32 34, i32 50, i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 255], align 16
@mcbpc_intratab = dso_local global [9 x i32] [i32 3, i32 19, i32 35, i32 51, i32 4, i32 20, i32 36, i32 52, i32 255], align 16
@cbpytab = dso_local global [16 x i32] [i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0], align 16
@cbpy_intratab = dso_local global [16 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15], align 16
@dquanttab = dso_local global [4 x i32] [i32 1, i32 0, i32 3, i32 4], align 16
@mvdtab = dso_local global [64 x i32] [i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31], align 16
@intradctab = dso_local global [254 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 255, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199, i32 200, i32 201, i32 202, i32 203, i32 204, i32 205, i32 206, i32 207, i32 208, i32 209, i32 210, i32 211, i32 212, i32 213, i32 214, i32 215, i32 216, i32 217, i32 218, i32 219, i32 220, i32 221, i32 222, i32 223, i32 224, i32 225, i32 226, i32 227, i32 228, i32 229, i32 230, i32 231, i32 232, i32 233, i32 234, i32 235, i32 236, i32 237, i32 238, i32 239, i32 240, i32 241, i32 242, i32 243, i32 244, i32 245, i32 246, i32 247, i32 248, i32 249, i32 250, i32 251, i32 252, i32 253, i32 254], align 16
@tcoeftab = dso_local global [103 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 33, i32 34, i32 35, i32 36, i32 49, i32 50, i32 51, i32 65, i32 66, i32 67, i32 81, i32 82, i32 83, i32 97, i32 98, i32 99, i32 113, i32 114, i32 129, i32 130, i32 145, i32 146, i32 161, i32 162, i32 177, i32 193, i32 209, i32 225, i32 241, i32 257, i32 273, i32 289, i32 305, i32 321, i32 337, i32 353, i32 369, i32 385, i32 401, i32 417, i32 4097, i32 4098, i32 4099, i32 4113, i32 4114, i32 4129, i32 4145, i32 4161, i32 4177, i32 4193, i32 4209, i32 4225, i32 4241, i32 4257, i32 4273, i32 4289, i32 4305, i32 4321, i32 4337, i32 4353, i32 4369, i32 4385, i32 4401, i32 4417, i32 4433, i32 4449, i32 4465, i32 4481, i32 4497, i32 4513, i32 4529, i32 4545, i32 4561, i32 4577, i32 4593, i32 4609, i32 4625, i32 4641, i32 4657, i32 4673, i32 4689, i32 4705, i32 4721, i32 4737, i32 7167], align 16
@signtab = dso_local global [2 x i32] [i32 0, i32 1], align 4
@lasttab = dso_local global [2 x i32] [i32 0, i32 1], align 4
@last_intratab = dso_local global [2 x i32] [i32 0, i32 1], align 4
@runtab = dso_local global [64 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63], align 16
@leveltab = dso_local global [254 x i32] [i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199, i32 200, i32 201, i32 202, i32 203, i32 204, i32 205, i32 206, i32 207, i32 208, i32 209, i32 210, i32 211, i32 212, i32 213, i32 214, i32 215, i32 216, i32 217, i32 218, i32 219, i32 220, i32 221, i32 222, i32 223, i32 224, i32 225, i32 226, i32 227, i32 228, i32 229, i32 230, i32 231, i32 232, i32 233, i32 234, i32 235, i32 236, i32 237, i32 238, i32 239, i32 240, i32 241, i32 242, i32 243, i32 244, i32 245, i32 246, i32 247, i32 248, i32 249, i32 250, i32 251, i32 252, i32 253, i32 254, i32 255, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 34, i32 35, i32 36, i32 37, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 46, i32 47, i32 48, i32 49, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 58, i32 59, i32 60, i32 61, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 70, i32 71, i32 72, i32 73, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 82, i32 83, i32 84, i32 85, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 94, i32 95, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127], align 16
@arith_used = dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [10 x i8] c"MB-nr: %d\00", align 1
@.str.1.5 = private unnamed_addr constant [11 x i8] c"  COD: %d\0A\00", align 1
@.str.2.6 = private unnamed_addr constant [28 x i8] c"CBPCM (CBP=%d) (cbpcm=%d): \00", align 1
@.str.3.7 = private unnamed_addr constant [20 x i8] c"MODB: %d, CBPB: %d\0A\00", align 1
@.str.4.8 = private unnamed_addr constant [26 x i8] c"CBPY (CBP=%d) (cbpy=%d): \00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c"DQUANT: \00", align 1
@.str.6 = private unnamed_addr constant [16 x i8] c"Invalid DQUANT\0A\00", align 1
@.str.7 = private unnamed_addr constant [11 x i8] c"  COD: %d \00", align 1
@.str.8 = private unnamed_addr constant [18 x i8] c"GOB sync (GBSC): \00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"GN: \00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"GFID: \00", align 1
@.str.11 = private unnamed_addr constant [9 x i8] c"GQUANT: \00", align 1
@.str.12 = private unnamed_addr constant [18 x i8] c"Coeffs block %d:\0A\00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"DC: \00", align 1
@.str.14 = private unnamed_addr constant [14 x i8] c"Escape code: \00", align 1
@.str.15 = private unnamed_addr constant [7 x i8] c"last: \00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"run: \00", align 1
@.str.17 = private unnamed_addr constant [8 x i8] c"level: \00", align 1
@.str.18 = private unnamed_addr constant [13 x i8] c"Last coeff: \00", align 1
@.str.19 = private unnamed_addr constant [16 x i8] c"Escape coding:\0A\00", align 1
@.str.20 = private unnamed_addr constant [25 x i8] c"Error in CBP assignment\0A\00", align 1
@.str.21 = private unnamed_addr constant [10 x i8] c"Vectors:\0A\00", align 1
@.str.22 = private unnamed_addr constant [19 x i8] c"(x,y) = (%d,%d) - \00", align 1
@.str.23 = private unnamed_addr constant [19 x i8] c"(Px,Py) = (%d,%d)\0A\00", align 1
@.str.24 = private unnamed_addr constant [27 x i8] c"(x_diff,y_diff) = (%d,%d)\0A\00", align 1
@.str.25 = private unnamed_addr constant [19 x i8] c"PB delta vectors:\0A\00", align 1
@.str.26 = private unnamed_addr constant [22 x i8] c"MVDB (x,y) = (%d,%d)\0A\00", align 1
@.str.27 = private unnamed_addr constant [46 x i8] c"Illegal block number in FindPMV (countbit.c)\0A\00", align 1
@.str.28 = private unnamed_addr constant [21 x i8] c"picture_start_code: \00", align 1
@.str.29 = private unnamed_addr constant [33 x i8] c"Group number in picture header: \00", align 1
@.str.30 = private unnamed_addr constant [17 x i8] c"Time reference: \00", align 1
@.str.31 = private unnamed_addr constant [8 x i8] c"spare: \00", align 1
@.str.32 = private unnamed_addr constant [40 x i8] c"always zero for distinction with H.261\0A\00", align 1
@.str.33 = private unnamed_addr constant [25 x i8] c"split_screen_indicator: \00", align 1
@.str.34 = private unnamed_addr constant [28 x i8] c"document_camera_indicator: \00", align 1
@.str.35 = private unnamed_addr constant [25 x i8] c"freeze_picture_release: \00", align 1
@.str.36 = private unnamed_addr constant [16 x i8] c"source_format: \00", align 1
@.str.37 = private unnamed_addr constant [22 x i8] c"picture_coding_type: \00", align 1
@.str.38 = private unnamed_addr constant [19 x i8] c"mv_outside_frame: \00", align 1
@.str.39 = private unnamed_addr constant [13 x i8] c"sac_coding: \00", align 1
@.str.40 = private unnamed_addr constant [16 x i8] c"adv_pred_mode: \00", align 1
@.str.41 = private unnamed_addr constant [11 x i8] c"PB-coded: \00", align 1
@.str.42 = private unnamed_addr constant [8 x i8] c"QUANT: \00", align 1
@.str.43 = private unnamed_addr constant [6 x i8] c"TRB: \00", align 1
@.str.44 = private unnamed_addr constant [9 x i8] c"BQUANT: \00", align 1
@.str.45 = private unnamed_addr constant [6 x i8] c"PEI: \00", align 1
@zigzag = dso_local global [8 x [8 x i32]] [[8 x i32] [i32 0, i32 1, i32 5, i32 6, i32 14, i32 15, i32 27, i32 28], [8 x i32] [i32 2, i32 4, i32 7, i32 13, i32 16, i32 26, i32 29, i32 42], [8 x i32] [i32 3, i32 8, i32 12, i32 17, i32 25, i32 30, i32 41, i32 43], [8 x i32] [i32 9, i32 11, i32 18, i32 24, i32 31, i32 40, i32 44, i32 53], [8 x i32] [i32 10, i32 19, i32 23, i32 32, i32 39, i32 45, i32 52, i32 54], [8 x i32] [i32 20, i32 22, i32 33, i32 38, i32 46, i32 51, i32 55, i32 60], [8 x i32] [i32 21, i32 34, i32 37, i32 47, i32 50, i32 56, i32 59, i32 61], [8 x i32] [i32 35, i32 36, i32 48, i32 49, i32 57, i32 58, i32 62, i32 63]], align 16
@c = internal global [8 x [8 x double]] zeroinitializer, align 16
@.str.46 = private unnamed_addr constant [35 x i8] c"Couldn't allocate memory to image\0A\00", align 1
@.str.1.47 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str.2.48 = private unnamed_addr constant [31 x i8] c"Unable to open image_file: %s\0A\00", align 1
@.str.3.49 = private unnamed_addr constant [31 x i8] c"Error in seeking image no: %d\0A\00", align 1
@.str.4.50 = private unnamed_addr constant [15 x i8] c"From file: %s\0A\00", align 1
@stdout = external dso_local global %struct._IO_FILE*, align 8
@.str.5.51 = private unnamed_addr constant [22 x i8] c"Reading image no: %d\0A\00", align 1
@.str.6.52 = private unnamed_addr constant [31 x i8] c"Error in reading image no: %d\0A\00", align 1
@.str.11.55 = private unnamed_addr constant [33 x i8] c"Couldn't allocate (PictImage *)\0A\00", align 1
@.str.12.56 = private unnamed_addr constant [40 x i8] c"Couldn't allocate memory for luminance\0A\00", align 1
@.str.13.57 = private unnamed_addr constant [33 x i8] c"Couldn't allocate memory for Cr\0A\00", align 1
@.str.14.58 = private unnamed_addr constant [33 x i8] c"Couldn't allocate memory for Cb\0A\00", align 1
@.str.7.59 = private unnamed_addr constant [3 x i8] c"ab\00", align 1
@.str.8.60 = private unnamed_addr constant [6 x i8] c"%s%s\0A\00", align 1
@.str.9.61 = private unnamed_addr constant [24 x i8] c"Error in opening file: \00", align 1
@.str.10.62 = private unnamed_addr constant [27 x i8] c"Error in writing to file: \00", align 1
@streamfile = common dso_local global %struct._IO_FILE* null, align 8
@.str.65 = private unnamed_addr constant [11 x i8] c"./diff.raw\00", align 1
@.str.1.66 = private unnamed_addr constant [71 x i8] c"\0ATMN (H.263) coder version 1.7, Copyright (C) 1995, 1996 Telenor R&D.\0A\00", align 1
@.str.2.67 = private unnamed_addr constant [174 x i8] c"TMN comes with ABSOLUTELY NO WARRANTY; This is free software, and \0Ayou are welcome to redistribute it under certain conditions; \0ASee accompanying COPYING file for details.\0A\0A\00", align 1
@.str.3.68 = private unnamed_addr constant [13 x i8] c"./stream.263\00", align 1
@.str.4.69 = private unnamed_addr constant [10 x i8] c"./out.raw\00", align 1
@.str.5.70 = private unnamed_addr constant [31 x i8] c"QP out of range - clipping it\0A\00", align 1
@.str.6.71 = private unnamed_addr constant [20 x i8] c"Illegal option: %c\0A\00", align 1
@.str.7.72 = private unnamed_addr constant [33 x i8] c"Encoding format: SQCIF (128x96)\0A\00", align 1
@.str.8.73 = private unnamed_addr constant [33 x i8] c"Encoding format: QCIF (176x144)\0A\00", align 1
@.str.9.74 = private unnamed_addr constant [32 x i8] c"Encoding format: CIF (352x288)\0A\00", align 1
@.str.10.75 = private unnamed_addr constant [33 x i8] c"Encoding format: 4CIF (704x576)\0A\00", align 1
@.str.11.76 = private unnamed_addr constant [36 x i8] c"Encoding format: 16CIF (1408x1152)\0A\00", align 1
@.str.12.77 = private unnamed_addr constant [23 x i8] c"Illegal coding format\0A\00", align 1
@.str.13.78 = private unnamed_addr constant [50 x i8] c"Required input parameter '-i <filename>' missing\0A\00", align 1
@.str.14.79 = private unnamed_addr constant [9 x i8] c"Warning:\00", align 1
@.str.15.80 = private unnamed_addr constant [55 x i8] c"QP is zero. Bitstream will not be correctly decodable\0A\00", align 1
@.str.16.81 = private unnamed_addr constant [54 x i8] c"Warning: Reference frame rate should be 25 or 30 fps\0A\00", align 1
@.str.17.82 = private unnamed_addr constant [29 x i8] c"Encoding frame rate  : %.2f\0A\00", align 1
@.str.18.83 = private unnamed_addr constant [33 x i8] c"Encoding frame rate  : variable\0A\00", align 1
@.str.19.84 = private unnamed_addr constant [29 x i8] c"Reference frame rate : %.2f\0A\00", align 1
@.str.20.85 = private unnamed_addr constant [30 x i8] c"Orig. seq. frame rate: %.2f\0A\0A\00", align 1
@.str.21.86 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.22.87 = private unnamed_addr constant [27 x i8] c"Unable to open streamfile\0A\00", align 1
@.str.23.88 = private unnamed_addr constant [12 x i8] c"trace.intra\00", align 1
@.str.24.89 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.25.90 = private unnamed_addr constant [34 x i8] c"Unable to open tracefile (intra)\0A\00", align 1
@.str.26.91 = private unnamed_addr constant [30 x i8] c"Couldn't open outputfile: %s\0A\00", align 1
@.str.27.92 = private unnamed_addr constant [29 x i8] c"Couldn't open diff-file: %s\0A\00", align 1
@.str.28.93 = private unnamed_addr constant [11 x i8] c"Coding...\0A\00", align 1
@.str.29.94 = private unnamed_addr constant [16 x i8] c"Finished INTRA\0A\00", align 1
@.str.30.95 = private unnamed_addr constant [6 x i8] c"trace\00", align 1
@.str.31.96 = private unnamed_addr constant [38 x i8] c"Unable to open tracefile (non-intra)\0A\00", align 1
@.str.32.97 = private unnamed_addr constant [26 x i8] c"Warning: frameskip > 256\0A\00", align 1
@.str.33.98 = private unnamed_addr constant [32 x i8] c"distance too large for B-frame\0A\00", align 1
@.str.34.99 = private unnamed_addr constant [31 x i8] c"Coding PB frames %d and %d... \00", align 1
@.str.35.100 = private unnamed_addr constant [22 x i8] c"Coding P frame %d... \00", align 1
@.str.36.101 = private unnamed_addr constant [6 x i8] c"done\0A\00", align 1
@.str.37.102 = private unnamed_addr constant [14 x i8] c"Inter QP: %d\0A\00", align 1
@.str.38.103 = private unnamed_addr constant [22 x i8] c"Results for B-frame:\0A\00", align 1
@.str.39.104 = private unnamed_addr constant [22 x i8] c"Results for P-frame:\0A\00", align 1
@.str.40.105 = private unnamed_addr constant [18 x i8] c"\0A==== TOTAL ====\0A\00", align 1
@.str.41.106 = private unnamed_addr constant [21 x i8] c"for %d images of %s\0A\00", align 1
@.str.42.107 = private unnamed_addr constant [40 x i8] c"Frames saved : %d predicted + %d intra\0A\00", align 1
@.str.43.108 = private unnamed_addr constant [16 x i8] c"--------------\0A\00", align 1
@.str.44.109 = private unnamed_addr constant [22 x i8] c"SNR for %d B-frames:\0A\00", align 1
@.str.45.110 = private unnamed_addr constant [22 x i8] c"SNR for %d P-frames:\0A\00", align 1
@.str.46.111 = private unnamed_addr constant [36 x i8] c"Original seq time: %.2f (%.2f) sec\0A\00", align 1
@.str.47 = private unnamed_addr constant [25 x i8] c"Mean quantizer   : %.2f\0A\00", align 1
@.str.48 = private unnamed_addr constant [30 x i8] c"Encoded frames   : %3d (%3d)\0A\00", align 1
@.str.49 = private unnamed_addr constant [28 x i8] c"Mean frame rate  : %.2f Hz\0A\00", align 1
@.str.50 = private unnamed_addr constant [34 x i8] c"Target bit rate  : %.2f kbit/sec\0A\00", align 1
@.str.51 = private unnamed_addr constant [41 x i8] c"Obtained bit rate: %.2f (%.2f) kbit/sec\0A\00", align 1
@.str.52 = private unnamed_addr constant [46 x i8] c"============================================\0A\00", align 1
@.str.53 = private unnamed_addr constant [29 x i8] c"Chose PB - bsad %d, psad %d\0A\00", align 1
@.str.54 = private unnamed_addr constant [30 x i8] c"Chose PP  - bsad %d, psad %d\0A\00", align 1
@.str.88 = private unnamed_addr constant [16 x i8] c"# intra   : %d\0A\00", align 1
@.str.89 = private unnamed_addr constant [16 x i8] c"# inter   : %d\0A\00", align 1
@.str.90 = private unnamed_addr constant [16 x i8] c"# inter4v : %d\0A\00", align 1
@.str.91 = private unnamed_addr constant [13 x i8] c"Coeff_Y: %d\0A\00", align 1
@.str.92 = private unnamed_addr constant [13 x i8] c"Coeff_C: %d\0A\00", align 1
@.str.93 = private unnamed_addr constant [13 x i8] c"Vectors: %d\0A\00", align 1
@.str.94 = private unnamed_addr constant [13 x i8] c"CBPY   : %d\0A\00", align 1
@.str.95 = private unnamed_addr constant [13 x i8] c"MCBPC  : %d\0A\00", align 1
@.str.96 = private unnamed_addr constant [13 x i8] c"MODB   : %d\0A\00", align 1
@.str.97 = private unnamed_addr constant [13 x i8] c"CBPB   : %d\0A\00", align 1
@.str.98 = private unnamed_addr constant [13 x i8] c"COD    : %d\0A\00", align 1
@.str.99 = private unnamed_addr constant [13 x i8] c"DQUANT : %d\0A\00", align 1
@.str.100 = private unnamed_addr constant [13 x i8] c"header : %d\0A\00", align 1
@.str.101 = private unnamed_addr constant [16 x i8] c"==============\0A\00", align 1
@.str.102 = private unnamed_addr constant [13 x i8] c"Total  : %d\0A\00", align 1
@.str.103 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.104 = private unnamed_addr constant [15 x i8] c"SNR_Y  : %.2f\0A\00", align 1
@.str.105 = private unnamed_addr constant [15 x i8] c"SNR_Cb : %.2f\0A\00", align 1
@.str.106 = private unnamed_addr constant [15 x i8] c"SNR_Cr : %.2f\0A\00", align 1
@.str.55 = private unnamed_addr constant [51 x i8] c"Usage:\09tmn [options] -i <filename> [more options]\0A\00", align 1
@.str.56 = private unnamed_addr constant [10 x i8] c"Options:\0A\00", align 1
@.str.57 = private unnamed_addr constant [55 x i8] c"\09-i <filename> original sequence [required parameter]\0A\00", align 1
@.str.58 = private unnamed_addr constant [42 x i8] c"\09-o <filename> reconstructed frames [%s]\0A\00", align 1
@.str.59 = private unnamed_addr constant [44 x i8] c"\09-B <filename> filename for bitstream [%s]\0A\00", align 1
@.str.60 = private unnamed_addr constant [32 x i8] c"\09-a <n> image to start at [%d]\0A\00", align 1
@.str.61 = private unnamed_addr constant [31 x i8] c"\09-b <n> image to stop at [%d]\0A\00", align 1
@.str.62 = private unnamed_addr constant [28 x i8] c"\09-x <n> coding format [%d]\0A\00", align 1
@.str.75 = private unnamed_addr constant [60 x i8] c"\09       n=1: SQCIF n=2: QCIF n=3: CIF n=4: 4CIF n=5: 16CIF\0A\00", align 1
@.str.76 = private unnamed_addr constant [60 x i8] c"\09           128x96   176x144  352x288   704x576  1408x1152\0A\00", align 1
@.str.77 = private unnamed_addr constant [48 x i8] c"\09-s <n> (0..15) integer pel search window [%d]\0A\00", align 1
@.str.63 = private unnamed_addr constant [48 x i8] c"\09-q <n> (1..31) quantization parameter QP [%d]\0A\00", align 1
@.str.64 = private unnamed_addr constant [41 x i8] c"\09-I <n> (1..31) QP for first frame [%d]\0A\00", align 1
@.str.65.112 = private unnamed_addr constant [63 x i8] c"\09-r <n> target bitrate in bits/s, default is variable bitrate\0A\00", align 1
@.str.78 = private unnamed_addr constant [37 x i8] c"\09   -R <f> target frame rate [%.2f]\0A\00", align 1
@.str.66 = private unnamed_addr constant [56 x i8] c"\09-S <n> frames to skip between each encoded frame [%d]\0A\00", align 1
@.str.79 = private unnamed_addr constant [52 x i8] c"\09-Z <n> reference frame rate (25 or 30 fps) [%.1f]\0A\00", align 1
@.str.80 = private unnamed_addr constant [74 x i8] c"\09-O <n> frames skipped in original compared to reference frame rate [%d]\0A\00", align 1
@.str.81 = private unnamed_addr constant [51 x i8] c"\09-e <n> original sequence has n bytes header [%d]\0A\00", align 1
@.str.82 = private unnamed_addr constant [51 x i8] c"\09-g <n> insert sync after each n GOB (slice) [%d]\0A\00", align 1
@.str.83 = private unnamed_addr constant [50 x i8] c"\09       zero above means no extra syncs inserted\0A\00", align 1
@.str.84 = private unnamed_addr constant [46 x i8] c"\09-w write difference image to file \22%s\22 [%s]\0A\00", align 1
@.str.68 = private unnamed_addr constant [4 x i8] c"OFF\00", align 1
@.str.85 = private unnamed_addr constant [54 x i8] c"\09-m write repeated reconstructed frames to disk [%s]\0A\00", align 1
@.str.86 = private unnamed_addr constant [53 x i8] c"\09-t write trace to tracefile trace.intra/trace [%s]\0A\00", align 1
@.str.67 = private unnamed_addr constant [56 x i8] c"\09-D use unrestricted motion vector mode (annex D) [%s]\0A\00", align 1
@.str.69 = private unnamed_addr constant [55 x i8] c"\09-E use syntax-based arithmetic coding (annex E) [%s]\0A\00", align 1
@.str.70 = private unnamed_addr constant [49 x i8] c"\09-F use advanced prediction mode (annex F) [%s]\0A\00", align 1
@.str.71 = private unnamed_addr constant [34 x i8] c"\09-G use PB-frames (annex G) [%s]\0A\00", align 1
@.str.87 = private unnamed_addr constant [41 x i8] c"\09   -Q <n> (0..3) BQUANT parameter [%d]\0A\00", align 1
@.str.72 = private unnamed_addr constant [24 x i8] c"\09-h Prints simple help\0A\00", align 1
@.str.73 = private unnamed_addr constant [26 x i8] c"\09-H Prints advanced help\0A\00", align 1
@.str.74 = private unnamed_addr constant [83 x i8] c"\0A\09Default filenames and other options in square brackets \0A\09are chosen in config.h\0A\00", align 1
@roundtab = internal global [16 x i32] [i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2], align 16
@.str.121 = private unnamed_addr constant [36 x i8] c"Illegal Mode in Predict_P (pred.c)\0A\00", align 1
@__const.FindPredOBMC.Mc = private unnamed_addr constant [8 x [8 x i32]] [[8 x i32] [i32 4, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 4], [8 x i32] [i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5], [8 x i32] [i32 5, i32 5, i32 6, i32 6, i32 6, i32 6, i32 5, i32 5], [8 x i32] [i32 5, i32 5, i32 6, i32 6, i32 6, i32 6, i32 5, i32 5], [8 x i32] [i32 5, i32 5, i32 6, i32 6, i32 6, i32 6, i32 5, i32 5], [8 x i32] [i32 5, i32 5, i32 6, i32 6, i32 6, i32 6, i32 5, i32 5], [8 x i32] [i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5], [8 x i32] [i32 4, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 4]], align 16
@__const.FindPredOBMC.Mt = private unnamed_addr constant [8 x [8 x i32]] [[8 x i32] [i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2], [8 x i32] [i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 1, i32 1], [8 x i32] [i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1], [8 x i32] [i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1], [8 x i32] zeroinitializer, [8 x i32] zeroinitializer, [8 x i32] zeroinitializer, [8 x i32] zeroinitializer], align 16
@__const.FindPredOBMC.Mb = private unnamed_addr constant [8 x [8 x i32]] [[8 x i32] zeroinitializer, [8 x i32] zeroinitializer, [8 x i32] zeroinitializer, [8 x i32] zeroinitializer, [8 x i32] [i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1], [8 x i32] [i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1], [8 x i32] [i32 1, i32 1, i32 2, i32 2, i32 2, i32 2, i32 1, i32 1], [8 x i32] [i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2]], align 16
@__const.FindPredOBMC.Mr = private unnamed_addr constant [8 x [8 x i32]] [[8 x i32] [i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 2], [8 x i32] [i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 2, i32 2], [8 x i32] [i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 2, i32 2], [8 x i32] [i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 2, i32 2], [8 x i32] [i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 2, i32 2], [8 x i32] [i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 2, i32 2], [8 x i32] [i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 2, i32 2], [8 x i32] [i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 2]], align 16
@__const.FindPredOBMC.Ml = private unnamed_addr constant [8 x [8 x i32]] [[8 x i32] [i32 2, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0], [8 x i32] [i32 2, i32 2, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0], [8 x i32] [i32 2, i32 2, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0], [8 x i32] [i32 2, i32 2, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0], [8 x i32] [i32 2, i32 2, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0], [8 x i32] [i32 2, i32 2, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0], [8 x i32] [i32 2, i32 2, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0], [8 x i32] [i32 2, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0]], align 16
@.str.1.122 = private unnamed_addr constant [47 x i8] c"Illegal block number in FindPredOBMC (pred.c)\0A\00", align 1
@outcnt = internal global i32 0, align 4
@bytecnt = internal global i32 0, align 4
@outbfr = internal global i8 0, align 1
@mvtab = internal global [33 x %struct.point] [%struct.point { i32 1, i32 1 }, %struct.point { i32 1, i32 2 }, %struct.point { i32 1, i32 3 }, %struct.point { i32 1, i32 4 }, %struct.point { i32 3, i32 6 }, %struct.point { i32 5, i32 7 }, %struct.point { i32 4, i32 7 }, %struct.point { i32 3, i32 7 }, %struct.point { i32 11, i32 9 }, %struct.point { i32 10, i32 9 }, %struct.point { i32 9, i32 9 }, %struct.point { i32 17, i32 10 }, %struct.point { i32 16, i32 10 }, %struct.point { i32 15, i32 10 }, %struct.point { i32 14, i32 10 }, %struct.point { i32 13, i32 10 }, %struct.point { i32 12, i32 10 }, %struct.point { i32 11, i32 10 }, %struct.point { i32 10, i32 10 }, %struct.point { i32 9, i32 10 }, %struct.point { i32 8, i32 10 }, %struct.point { i32 7, i32 10 }, %struct.point { i32 6, i32 10 }, %struct.point { i32 5, i32 10 }, %struct.point { i32 4, i32 10 }, %struct.point { i32 7, i32 11 }, %struct.point { i32 6, i32 11 }, %struct.point { i32 5, i32 11 }, %struct.point { i32 4, i32 11 }, %struct.point { i32 3, i32 11 }, %struct.point { i32 2, i32 11 }, %struct.point { i32 3, i32 12 }, %struct.point { i32 2, i32 12 }], align 16
@cbpcm_intra_tab = internal global [15 x %struct.point] [%struct.point { i32 1, i32 9 }, %struct.point { i32 1, i32 1 }, %struct.point { i32 1, i32 4 }, %struct.point zeroinitializer, %struct.point zeroinitializer, %struct.point { i32 1, i32 3 }, %struct.point { i32 1, i32 6 }, %struct.point zeroinitializer, %struct.point zeroinitializer, %struct.point { i32 2, i32 3 }, %struct.point { i32 2, i32 6 }, %struct.point zeroinitializer, %struct.point zeroinitializer, %struct.point { i32 3, i32 3 }, %struct.point { i32 3, i32 6 }], align 16
@cbpcm_inter_tab = internal global [29 x %struct.point] [%struct.point { i32 1, i32 1 }, %struct.point { i32 3, i32 3 }, %struct.point { i32 2, i32 3 }, %struct.point { i32 3, i32 5 }, %struct.point { i32 4, i32 6 }, %struct.point { i32 1, i32 9 }, %struct.point zeroinitializer, %struct.point zeroinitializer, %struct.point { i32 3, i32 4 }, %struct.point { i32 7, i32 7 }, %struct.point { i32 5, i32 7 }, %struct.point { i32 4, i32 8 }, %struct.point { i32 4, i32 9 }, %struct.point zeroinitializer, %struct.point zeroinitializer, %struct.point zeroinitializer, %struct.point { i32 2, i32 4 }, %struct.point { i32 6, i32 7 }, %struct.point { i32 4, i32 7 }, %struct.point { i32 3, i32 8 }, %struct.point { i32 3, i32 9 }, %struct.point zeroinitializer, %struct.point zeroinitializer, %struct.point zeroinitializer, %struct.point { i32 5, i32 6 }, %struct.point { i32 5, i32 9 }, %struct.point { i32 5, i32 8 }, %struct.point { i32 3, i32 7 }, %struct.point { i32 2, i32 9 }], align 16
@cbpy_tab = internal global [16 x %struct.point] [%struct.point { i32 3, i32 4 }, %struct.point { i32 5, i32 5 }, %struct.point { i32 4, i32 5 }, %struct.point { i32 9, i32 4 }, %struct.point { i32 3, i32 5 }, %struct.point { i32 7, i32 4 }, %struct.point { i32 2, i32 6 }, %struct.point { i32 11, i32 4 }, %struct.point { i32 2, i32 5 }, %struct.point { i32 3, i32 6 }, %struct.point { i32 5, i32 4 }, %struct.point { i32 10, i32 4 }, %struct.point { i32 4, i32 4 }, %struct.point { i32 8, i32 4 }, %struct.point { i32 6, i32 4 }, %struct.point { i32 3, i32 2 }], align 16
@.str.151 = private unnamed_addr constant [22 x i8] c"last >= 0 && last < 2\00", align 1
@.str.1.152 = private unnamed_addr constant [9 x i8] c"putvlc.c\00", align 1
@__PRETTY_FUNCTION__.put_coeff = private unnamed_addr constant [29 x i8] c"int put_coeff(int, int, int)\00", align 1
@.str.2.153 = private unnamed_addr constant [21 x i8] c"run >= 0 && run < 64\00", align 1
@.str.3.154 = private unnamed_addr constant [25 x i8] c"level > 0 && level < 128\00", align 1
@coeff_tab0 = internal global [2 x [12 x %struct.point]] [[12 x %struct.point] [%struct.point { i32 2, i32 2 }, %struct.point { i32 15, i32 4 }, %struct.point { i32 21, i32 6 }, %struct.point { i32 23, i32 7 }, %struct.point { i32 31, i32 8 }, %struct.point { i32 37, i32 9 }, %struct.point { i32 36, i32 9 }, %struct.point { i32 33, i32 10 }, %struct.point { i32 32, i32 10 }, %struct.point { i32 7, i32 11 }, %struct.point { i32 6, i32 11 }, %struct.point { i32 32, i32 11 }], [12 x %struct.point] [%struct.point { i32 6, i32 3 }, %struct.point { i32 20, i32 6 }, %struct.point { i32 30, i32 8 }, %struct.point { i32 15, i32 10 }, %struct.point { i32 33, i32 11 }, %struct.point { i32 80, i32 12 }, %struct.point zeroinitializer, %struct.point zeroinitializer, %struct.point zeroinitializer, %struct.point zeroinitializer, %struct.point zeroinitializer, %struct.point zeroinitializer]], align 16
@coeff_tab1 = internal global [25 x [4 x %struct.point]] [[4 x %struct.point] [%struct.point { i32 14, i32 4 }, %struct.point { i32 29, i32 8 }, %struct.point { i32 14, i32 10 }, %struct.point { i32 81, i32 12 }], [4 x %struct.point] [%struct.point { i32 13, i32 5 }, %struct.point { i32 35, i32 9 }, %struct.point { i32 13, i32 10 }, %struct.point zeroinitializer], [4 x %struct.point] [%struct.point { i32 12, i32 5 }, %struct.point { i32 34, i32 9 }, %struct.point { i32 82, i32 12 }, %struct.point zeroinitializer], [4 x %struct.point] [%struct.point { i32 11, i32 5 }, %struct.point { i32 12, i32 10 }, %struct.point { i32 83, i32 12 }, %struct.point zeroinitializer], [4 x %struct.point] [%struct.point { i32 19, i32 6 }, %struct.point { i32 11, i32 10 }, %struct.point { i32 84, i32 12 }, %struct.point zeroinitializer], [4 x %struct.point] [%struct.point { i32 18, i32 6 }, %struct.point { i32 10, i32 10 }, %struct.point zeroinitializer, %struct.point zeroinitializer], [4 x %struct.point] [%struct.point { i32 17, i32 6 }, %struct.point { i32 9, i32 10 }, %struct.point zeroinitializer, %struct.point zeroinitializer], [4 x %struct.point] [%struct.point { i32 16, i32 6 }, %struct.point { i32 8, i32 10 }, %struct.point zeroinitializer, %struct.point zeroinitializer], [4 x %struct.point] [%struct.point { i32 22, i32 7 }, %struct.point { i32 85, i32 12 }, %struct.point zeroinitializer, %struct.point zeroinitializer], [4 x %struct.point] [%struct.point { i32 21, i32 7 }, %struct.point zeroinitializer, %struct.point zeroinitializer, %struct.point zeroinitializer], [4 x %struct.point] [%struct.point { i32 20, i32 7 }, %struct.point zeroinitializer, %struct.point zeroinitializer, %struct.point zeroinitializer], [4 x %struct.point] [%struct.point { i32 28, i32 8 }, %struct.point zeroinitializer, %struct.point zeroinitializer, %struct.point zeroinitializer], [4 x %struct.point] [%struct.point { i32 27, i32 8 }, %struct.point zeroinitializer, %struct.point zeroinitializer, %struct.point zeroinitializer], [4 x %struct.point] [%struct.point { i32 33, i32 9 }, %struct.point zeroinitializer, %struct.point zeroinitializer, %struct.point zeroinitializer], [4 x %struct.point] [%struct.point { i32 32, i32 9 }, %struct.point zeroinitializer, %struct.point zeroinitializer, %struct.point zeroinitializer], [4 x %struct.point] [%struct.point { i32 31, i32 9 }, %struct.point zeroinitializer, %struct.point zeroinitializer, %struct.point zeroinitializer], [4 x %struct.point] [%struct.point { i32 30, i32 9 }, %struct.point zeroinitializer, %struct.point zeroinitializer, %struct.point zeroinitializer], [4 x %struct.point] [%struct.point { i32 29, i32 9 }, %struct.point zeroinitializer, %struct.point zeroinitializer, %struct.point zeroinitializer], [4 x %struct.point] [%struct.point { i32 28, i32 9 }, %struct.point zeroinitializer, %struct.point zeroinitializer, %struct.point zeroinitializer], [4 x %struct.point] [%struct.point { i32 27, i32 9 }, %struct.point zeroinitializer, %struct.point zeroinitializer, %struct.point zeroinitializer], [4 x %struct.point] [%struct.point { i32 26, i32 9 }, %struct.point zeroinitializer, %struct.point zeroinitializer, %struct.point zeroinitializer], [4 x %struct.point] [%struct.point { i32 34, i32 11 }, %struct.point zeroinitializer, %struct.point zeroinitializer, %struct.point zeroinitializer], [4 x %struct.point] [%struct.point { i32 35, i32 11 }, %struct.point zeroinitializer, %struct.point zeroinitializer, %struct.point zeroinitializer], [4 x %struct.point] [%struct.point { i32 86, i32 12 }, %struct.point zeroinitializer, %struct.point zeroinitializer, %struct.point zeroinitializer], [4 x %struct.point] [%struct.point { i32 87, i32 12 }, %struct.point zeroinitializer, %struct.point zeroinitializer, %struct.point zeroinitializer]], align 16
@coeff_tab2 = internal global [2 x [3 x %struct.point]] [[3 x %struct.point] [%struct.point { i32 7, i32 4 }, %struct.point { i32 25, i32 9 }, %struct.point { i32 5, i32 11 }], [3 x %struct.point] [%struct.point { i32 15, i32 6 }, %struct.point { i32 4, i32 11 }, %struct.point zeroinitializer]], align 16
@coeff_tab3 = internal global [40 x %struct.point] [%struct.point { i32 14, i32 6 }, %struct.point { i32 13, i32 6 }, %struct.point { i32 12, i32 6 }, %struct.point { i32 19, i32 7 }, %struct.point { i32 18, i32 7 }, %struct.point { i32 17, i32 7 }, %struct.point { i32 16, i32 7 }, %struct.point { i32 26, i32 8 }, %struct.point { i32 25, i32 8 }, %struct.point { i32 24, i32 8 }, %struct.point { i32 23, i32 8 }, %struct.point { i32 22, i32 8 }, %struct.point { i32 21, i32 8 }, %struct.point { i32 20, i32 8 }, %struct.point { i32 19, i32 8 }, %struct.point { i32 24, i32 9 }, %struct.point { i32 23, i32 9 }, %struct.point { i32 22, i32 9 }, %struct.point { i32 21, i32 9 }, %struct.point { i32 20, i32 9 }, %struct.point { i32 19, i32 9 }, %struct.point { i32 18, i32 9 }, %struct.point { i32 17, i32 9 }, %struct.point { i32 7, i32 10 }, %struct.point { i32 6, i32 10 }, %struct.point { i32 5, i32 10 }, %struct.point { i32 4, i32 10 }, %struct.point { i32 36, i32 11 }, %struct.point { i32 37, i32 11 }, %struct.point { i32 38, i32 11 }, %struct.point { i32 39, i32 11 }, %struct.point { i32 88, i32 12 }, %struct.point { i32 89, i32 12 }, %struct.point { i32 90, i32 12 }, %struct.point { i32 91, i32 12 }, %struct.point { i32 92, i32 12 }, %struct.point { i32 93, i32 12 }, %struct.point { i32 94, i32 12 }, %struct.point { i32 95, i32 12 }, %struct.point zeroinitializer], align 16
@B_prev = internal global float 0.000000e+00, align 4
@B_target = internal global float 0.000000e+00, align 4
@global_adj = internal global float 0.000000e+00, align 4
@.str.165 = private unnamed_addr constant [59 x i8] c"No need to call InititializeQuantizer() for Intra picture\0A\00", align 1
@.str.1.166 = private unnamed_addr constant [53 x i8] c"Error (InitializePictureRate): picture type unkown.\0A\00", align 1
@.str.2.167 = private unnamed_addr constant [19 x i8] c"Global adj = %.2f\0A\00", align 1
@.str.3.168 = private unnamed_addr constant [28 x i8] c"meanQP = %.2f   newQP = %d\0A\00", align 1
@.str.4.169 = private unnamed_addr constant [26 x i8] c"Target no. of bits: %.2f\0A\00", align 1
@.str.5.172 = private unnamed_addr constant [47 x i8] c"Error (UpdateQuantizer): picture type unkown.\0A\00", align 1
@high = internal global i64 65535, align 8
@low = internal global i64 0, align 8
@length = internal global i64 0, align 8
@opposite_bits = internal global i64 0, align 8
@zerorun = internal global i64 0, align 8
@.str.1.175 = private unnamed_addr constant [32 x i8] c"PSC emulation ... Bit stuffed.\0A\00", align 1
@.str.178 = private unnamed_addr constant [16 x i8] c"encoder_flush:\0A\00", align 1
@.str.183 = private unnamed_addr constant [11 x i8] c"./diff.raw\00", align 1
@.str.1.184 = private unnamed_addr constant [3 x i8] c"ab\00", align 1

; Function Attrs: noinline nounwind uwtable
define dso_local void @CodeOneOrTwo(%struct.pict_image* %0, %struct.pict_image* %1, %struct.pict_image* %2, %struct.pict_image* %3, i32 %4, i32 %5, %struct.bits_counted* %6, %struct.pict* %7, %struct.pict_image* %8, %struct.pict_image* %9) #0 {
  %11 = alloca %struct.pict_image*, align 8
  %12 = alloca %struct.pict_image*, align 8
  %13 = alloca %struct.pict_image*, align 8
  %14 = alloca %struct.pict_image*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca %struct.bits_counted*, align 8
  %18 = alloca %struct.pict*, align 8
  %19 = alloca %struct.pict_image*, align 8
  %20 = alloca %struct.pict_image*, align 8
  %21 = alloca i8*, align 8
  %22 = alloca i8*, align 8
  %23 = alloca i8*, align 8
  %24 = alloca i8*, align 8
  %25 = alloca %struct.pict_image*, align 8
  %26 = alloca %struct.pict_image*, align 8
  %27 = alloca [6 x [73 x [90 x %struct.motionvector*]]], align 16
  %28 = alloca %struct.motionvector, align 4
  %29 = alloca %struct.mb_structure*, align 8
  %30 = alloca %struct.mb_structure*, align 8
  %31 = alloca %struct.mb_structure*, align 8
  %32 = alloca i32*, align 8
  %33 = alloca i32*, align 8
  %34 = alloca i32, align 4
  %35 = alloca i32, align 4
  %36 = alloca i32, align 4
  %37 = alloca i32, align 4
  %38 = alloca [4 x i32], align 16
  %39 = alloca i32, align 4
  %40 = alloca i32, align 4
  %41 = alloca i32, align 4
  %42 = alloca i32, align 4
  %43 = alloca i32, align 4
  %44 = alloca float, align 4
  %45 = alloca i32, align 4
  %46 = alloca i32, align 4
  %47 = alloca i32, align 4
  %48 = alloca i32, align 4
  %49 = alloca i32, align 4
  %50 = alloca i32, align 4
  store %struct.pict_image* %0, %struct.pict_image** %11, align 8
  store %struct.pict_image* %1, %struct.pict_image** %12, align 8
  store %struct.pict_image* %2, %struct.pict_image** %13, align 8
  store %struct.pict_image* %3, %struct.pict_image** %14, align 8
  store i32 %4, i32* %15, align 4
  store i32 %5, i32* %16, align 4
  store %struct.bits_counted* %6, %struct.bits_counted** %17, align 8
  store %struct.pict* %7, %struct.pict** %18, align 8
  store %struct.pict_image* %8, %struct.pict_image** %19, align 8
  store %struct.pict_image* %9, %struct.pict_image** %20, align 8
  store i8* null, i8** %22, align 8
  store %struct.pict_image* null, %struct.pict_image** %25, align 8
  store %struct.pict_image* null, %struct.pict_image** %26, align 8
  %51 = bitcast %struct.motionvector* %28 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %51, i8 0, i64 24, i1 false)
  store %struct.mb_structure* null, %struct.mb_structure** %30, align 8
  store i32* null, i32** %33, align 8
  store i32 0, i32* %37, align 4
  %52 = bitcast [4 x i32]* %38 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %52, i8* align 16 bitcast ([4 x i32]* @__const.CodeOneOrTwo.bquant to i8*), i64 16, i1 false)
  store float 0.000000e+00, float* %44, align 4
  store i32 0, i32* %45, align 4
  store i32 0, i32* %46, align 4
  %53 = load i32, i32* %15, align 4
  store i32 %53, i32* %50, align 4
  %54 = load %struct.bits_counted*, %struct.bits_counted** %17, align 8
  call void @ZeroBits(%struct.bits_counted* %54)
  %55 = load i32, i32* @mv_outside_frame, align 4
  %56 = icmp ne i32 %55, 0
  br i1 %56, label %57, label %301

57:                                               ; preds = %10
  %58 = load i32, i32* @long_vectors, align 4
  %59 = icmp ne i32 %58, 0
  br i1 %59, label %60, label %61

60:                                               ; preds = %57
  store i32 16, i32* %35, align 4
  br label %62

61:                                               ; preds = %57
  store i32 8, i32* %35, align 4
  br label %62

62:                                               ; preds = %61, %60
  %63 = load i32, i32* @pels, align 4
  %64 = load i32, i32* %35, align 4
  %65 = mul nsw i32 4, %64
  %66 = add nsw i32 %63, %65
  %67 = sext i32 %66 to i64
  %68 = mul i64 1, %67
  %69 = load i32, i32* @lines, align 4
  %70 = load i32, i32* %35, align 4
  %71 = mul nsw i32 4, %70
  %72 = add nsw i32 %69, %71
  %73 = sext i32 %72 to i64
  %74 = mul i64 %68, %73
  %75 = call noalias i8* @malloc(i64 %74) #8
  store i8* %75, i8** %22, align 8
  %76 = load i8*, i8** %22, align 8
  %77 = icmp eq i8* %76, null
  br i1 %77, label %78, label %81

78:                                               ; preds = %62
  %79 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %80 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %79, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str, i64 0, i64 0))
  call void @exit(i32 -1) #9
  unreachable

81:                                               ; preds = %62
  %82 = load %struct.pict_image*, %struct.pict_image** %14, align 8
  %83 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %82, i32 0, i32 0
  %84 = load i8*, i8** %83, align 8
  %85 = load i8*, i8** %22, align 8
  %86 = load i32, i32* @pels, align 4
  %87 = load i32, i32* %35, align 4
  %88 = mul nsw i32 4, %87
  %89 = add nsw i32 %86, %88
  %90 = mul nsw i32 %89, 2
  %91 = load i32, i32* %35, align 4
  %92 = mul nsw i32 %90, %91
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds i8, i8* %85, i64 %93
  %95 = load i32, i32* %35, align 4
  %96 = mul nsw i32 2, %95
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds i8, i8* %94, i64 %97
  %99 = load i32, i32* @pels, align 4
  %100 = load i32, i32* @lines, align 4
  %101 = load i32, i32* %35, align 4
  %102 = mul nsw i32 2, %101
  call void @MakeEdgeImage(i8* %84, i8* %98, i32 %99, i32 %100, i32 %102)
  %103 = load i8*, i8** %22, align 8
  %104 = load i32, i32* @pels, align 4
  %105 = load i32, i32* %35, align 4
  %106 = mul nsw i32 4, %105
  %107 = add nsw i32 %104, %106
  %108 = load i32, i32* @lines, align 4
  %109 = load i32, i32* %35, align 4
  %110 = mul nsw i32 4, %109
  %111 = add nsw i32 %108, %110
  %112 = call i8* @InterpolateImage(i8* %103, i32 %107, i32 %111)
  store i8* %112, i8** %23, align 8
  %113 = load i8*, i8** %22, align 8
  call void @free(i8* %113) #8
  %114 = load i8*, i8** %23, align 8
  %115 = load i32, i32* @pels, align 4
  %116 = mul nsw i32 2, %115
  %117 = load i32, i32* %35, align 4
  %118 = mul nsw i32 8, %117
  %119 = add nsw i32 %116, %118
  %120 = mul nsw i32 %119, 4
  %121 = load i32, i32* %35, align 4
  %122 = mul nsw i32 %120, %121
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds i8, i8* %114, i64 %123
  %125 = load i32, i32* %35, align 4
  %126 = mul nsw i32 4, %125
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds i8, i8* %124, i64 %127
  store i8* %128, i8** %21, align 8
  %129 = load i32, i32* @pels, align 4
  %130 = load i32, i32* %35, align 4
  %131 = mul nsw i32 4, %130
  %132 = add nsw i32 %129, %131
  %133 = load i32, i32* @lines, align 4
  %134 = load i32, i32* %35, align 4
  %135 = mul nsw i32 4, %134
  %136 = add nsw i32 %133, %135
  %137 = mul nsw i32 %132, %136
  %138 = call %struct.pict_image* @InitImage(i32 %137)
  store %struct.pict_image* %138, %struct.pict_image** %26, align 8
  %139 = load %struct.pict_image*, %struct.pict_image** %13, align 8
  %140 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %139, i32 0, i32 0
  %141 = load i8*, i8** %140, align 8
  %142 = load %struct.pict_image*, %struct.pict_image** %26, align 8
  %143 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %142, i32 0, i32 0
  %144 = load i8*, i8** %143, align 8
  %145 = load i32, i32* @pels, align 4
  %146 = load i32, i32* %35, align 4
  %147 = mul nsw i32 4, %146
  %148 = add nsw i32 %145, %147
  %149 = mul nsw i32 %148, 2
  %150 = load i32, i32* %35, align 4
  %151 = mul nsw i32 %149, %150
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds i8, i8* %144, i64 %152
  %154 = load i32, i32* %35, align 4
  %155 = mul nsw i32 2, %154
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds i8, i8* %153, i64 %156
  %158 = load i32, i32* @pels, align 4
  %159 = load i32, i32* @lines, align 4
  %160 = load i32, i32* %35, align 4
  %161 = mul nsw i32 2, %160
  call void @MakeEdgeImage(i8* %141, i8* %157, i32 %158, i32 %159, i32 %161)
  %162 = load %struct.pict_image*, %struct.pict_image** %26, align 8
  %163 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %162, i32 0, i32 0
  %164 = load i8*, i8** %163, align 8
  %165 = load i32, i32* @pels, align 4
  %166 = load i32, i32* %35, align 4
  %167 = mul nsw i32 4, %166
  %168 = add nsw i32 %165, %167
  %169 = mul nsw i32 %168, 2
  %170 = load i32, i32* %35, align 4
  %171 = mul nsw i32 %169, %170
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds i8, i8* %164, i64 %172
  %174 = load i32, i32* %35, align 4
  %175 = mul nsw i32 2, %174
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds i8, i8* %173, i64 %176
  store i8* %177, i8** %24, align 8
  %178 = load %struct.pict_image*, %struct.pict_image** %14, align 8
  %179 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %178, i32 0, i32 0
  %180 = load i8*, i8** %179, align 8
  %181 = load %struct.pict_image*, %struct.pict_image** %26, align 8
  %182 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %181, i32 0, i32 0
  %183 = load i8*, i8** %182, align 8
  %184 = load i32, i32* @pels, align 4
  %185 = load i32, i32* %35, align 4
  %186 = mul nsw i32 4, %185
  %187 = add nsw i32 %184, %186
  %188 = mul nsw i32 %187, 2
  %189 = load i32, i32* %35, align 4
  %190 = mul nsw i32 %188, %189
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds i8, i8* %183, i64 %191
  %193 = load i32, i32* %35, align 4
  %194 = mul nsw i32 2, %193
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds i8, i8* %192, i64 %195
  %197 = load i32, i32* @pels, align 4
  %198 = load i32, i32* @lines, align 4
  %199 = load i32, i32* %35, align 4
  %200 = mul nsw i32 2, %199
  call void @MakeEdgeImage(i8* %180, i8* %196, i32 %197, i32 %198, i32 %200)
  %201 = load %struct.pict_image*, %struct.pict_image** %14, align 8
  %202 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %201, i32 0, i32 1
  %203 = load i8*, i8** %202, align 8
  %204 = load %struct.pict_image*, %struct.pict_image** %26, align 8
  %205 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %204, i32 0, i32 1
  %206 = load i8*, i8** %205, align 8
  %207 = load i32, i32* @pels, align 4
  %208 = sdiv i32 %207, 2
  %209 = load i32, i32* %35, align 4
  %210 = mul nsw i32 2, %209
  %211 = add nsw i32 %208, %210
  %212 = load i32, i32* %35, align 4
  %213 = mul nsw i32 %211, %212
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds i8, i8* %206, i64 %214
  %216 = load i32, i32* %35, align 4
  %217 = sext i32 %216 to i64
  %218 = getelementptr inbounds i8, i8* %215, i64 %217
  %219 = load i32, i32* @pels, align 4
  %220 = sdiv i32 %219, 2
  %221 = load i32, i32* @lines, align 4
  %222 = sdiv i32 %221, 2
  %223 = load i32, i32* %35, align 4
  call void @MakeEdgeImage(i8* %203, i8* %218, i32 %220, i32 %222, i32 %223)
  %224 = load %struct.pict_image*, %struct.pict_image** %14, align 8
  %225 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %224, i32 0, i32 2
  %226 = load i8*, i8** %225, align 8
  %227 = load %struct.pict_image*, %struct.pict_image** %26, align 8
  %228 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %227, i32 0, i32 2
  %229 = load i8*, i8** %228, align 8
  %230 = load i32, i32* @pels, align 4
  %231 = sdiv i32 %230, 2
  %232 = load i32, i32* %35, align 4
  %233 = mul nsw i32 2, %232
  %234 = add nsw i32 %231, %233
  %235 = load i32, i32* %35, align 4
  %236 = mul nsw i32 %234, %235
  %237 = sext i32 %236 to i64
  %238 = getelementptr inbounds i8, i8* %229, i64 %237
  %239 = load i32, i32* %35, align 4
  %240 = sext i32 %239 to i64
  %241 = getelementptr inbounds i8, i8* %238, i64 %240
  %242 = load i32, i32* @pels, align 4
  %243 = sdiv i32 %242, 2
  %244 = load i32, i32* @lines, align 4
  %245 = sdiv i32 %244, 2
  %246 = load i32, i32* %35, align 4
  call void @MakeEdgeImage(i8* %226, i8* %241, i32 %243, i32 %245, i32 %246)
  %247 = call noalias i8* @malloc(i64 24) #8
  %248 = bitcast i8* %247 to %struct.pict_image*
  store %struct.pict_image* %248, %struct.pict_image** %25, align 8
  %249 = load %struct.pict_image*, %struct.pict_image** %26, align 8
  %250 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %249, i32 0, i32 0
  %251 = load i8*, i8** %250, align 8
  %252 = load i32, i32* @pels, align 4
  %253 = load i32, i32* %35, align 4
  %254 = mul nsw i32 4, %253
  %255 = add nsw i32 %252, %254
  %256 = mul nsw i32 %255, 2
  %257 = load i32, i32* %35, align 4
  %258 = mul nsw i32 %256, %257
  %259 = sext i32 %258 to i64
  %260 = getelementptr inbounds i8, i8* %251, i64 %259
  %261 = load i32, i32* %35, align 4
  %262 = mul nsw i32 2, %261
  %263 = sext i32 %262 to i64
  %264 = getelementptr inbounds i8, i8* %260, i64 %263
  %265 = load %struct.pict_image*, %struct.pict_image** %25, align 8
  %266 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %265, i32 0, i32 0
  store i8* %264, i8** %266, align 8
  %267 = load %struct.pict_image*, %struct.pict_image** %26, align 8
  %268 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %267, i32 0, i32 1
  %269 = load i8*, i8** %268, align 8
  %270 = load i32, i32* @pels, align 4
  %271 = sdiv i32 %270, 2
  %272 = load i32, i32* %35, align 4
  %273 = mul nsw i32 2, %272
  %274 = add nsw i32 %271, %273
  %275 = load i32, i32* %35, align 4
  %276 = mul nsw i32 %274, %275
  %277 = sext i32 %276 to i64
  %278 = getelementptr inbounds i8, i8* %269, i64 %277
  %279 = load i32, i32* %35, align 4
  %280 = sext i32 %279 to i64
  %281 = getelementptr inbounds i8, i8* %278, i64 %280
  %282 = load %struct.pict_image*, %struct.pict_image** %25, align 8
  %283 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %282, i32 0, i32 1
  store i8* %281, i8** %283, align 8
  %284 = load %struct.pict_image*, %struct.pict_image** %26, align 8
  %285 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %284, i32 0, i32 2
  %286 = load i8*, i8** %285, align 8
  %287 = load i32, i32* @pels, align 4
  %288 = sdiv i32 %287, 2
  %289 = load i32, i32* %35, align 4
  %290 = mul nsw i32 2, %289
  %291 = add nsw i32 %288, %290
  %292 = load i32, i32* %35, align 4
  %293 = mul nsw i32 %291, %292
  %294 = sext i32 %293 to i64
  %295 = getelementptr inbounds i8, i8* %286, i64 %294
  %296 = load i32, i32* %35, align 4
  %297 = sext i32 %296 to i64
  %298 = getelementptr inbounds i8, i8* %295, i64 %297
  %299 = load %struct.pict_image*, %struct.pict_image** %25, align 8
  %300 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %299, i32 0, i32 2
  store i8* %298, i8** %300, align 8
  br label %313

301:                                              ; preds = %10
  %302 = load %struct.pict_image*, %struct.pict_image** %14, align 8
  %303 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %302, i32 0, i32 0
  %304 = load i8*, i8** %303, align 8
  %305 = load i32, i32* @pels, align 4
  %306 = load i32, i32* @lines, align 4
  %307 = call i8* @InterpolateImage(i8* %304, i32 %305, i32 %306)
  store i8* %307, i8** %23, align 8
  %308 = load i8*, i8** %23, align 8
  store i8* %308, i8** %21, align 8
  %309 = load %struct.pict_image*, %struct.pict_image** %14, align 8
  store %struct.pict_image* %309, %struct.pict_image** %25, align 8
  %310 = load %struct.pict_image*, %struct.pict_image** %13, align 8
  %311 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %310, i32 0, i32 0
  %312 = load i8*, i8** %311, align 8
  store i8* %312, i8** %24, align 8
  br label %313

313:                                              ; preds = %301, %81
  store i32 1, i32* %41, align 4
  br label %314

314:                                              ; preds = %353, %313
  %315 = load i32, i32* %41, align 4
  %316 = load i32, i32* @pels, align 4
  %317 = ashr i32 %316, 4
  %318 = add nsw i32 %317, 1
  %319 = icmp slt i32 %315, %318
  br i1 %319, label %320, label %356

320:                                              ; preds = %314
  store i32 0, i32* %43, align 4
  br label %321

321:                                              ; preds = %342, %320
  %322 = load i32, i32* %43, align 4
  %323 = icmp slt i32 %322, 6
  br i1 %323, label %324, label %345

324:                                              ; preds = %321
  %325 = call noalias i8* @malloc(i64 24) #8
  %326 = bitcast i8* %325 to %struct.motionvector*
  %327 = load i32, i32* %43, align 4
  %328 = sext i32 %327 to i64
  %329 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %27, i64 0, i64 %328
  %330 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %329, i64 0, i64 0
  %331 = load i32, i32* %41, align 4
  %332 = sext i32 %331 to i64
  %333 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %330, i64 0, i64 %332
  store %struct.motionvector* %326, %struct.motionvector** %333, align 8
  %334 = load i32, i32* %43, align 4
  %335 = sext i32 %334 to i64
  %336 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %27, i64 0, i64 %335
  %337 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %336, i64 0, i64 0
  %338 = load i32, i32* %41, align 4
  %339 = sext i32 %338 to i64
  %340 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %337, i64 0, i64 %339
  %341 = load %struct.motionvector*, %struct.motionvector** %340, align 8
  call void @MarkVec(%struct.motionvector* %341)
  br label %342

342:                                              ; preds = %324
  %343 = load i32, i32* %43, align 4
  %344 = add nsw i32 %343, 1
  store i32 %344, i32* %43, align 4
  br label %321

345:                                              ; preds = %321
  %346 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %27, i64 0, i64 0
  %347 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %346, i64 0, i64 0
  %348 = load i32, i32* %41, align 4
  %349 = sext i32 %348 to i64
  %350 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %347, i64 0, i64 %349
  %351 = load %struct.motionvector*, %struct.motionvector** %350, align 8
  %352 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %351, i32 0, i32 5
  store i32 3, i32* %352, align 4
  br label %353

353:                                              ; preds = %345
  %354 = load i32, i32* %41, align 4
  %355 = add nsw i32 %354, 1
  store i32 %355, i32* %41, align 4
  br label %314

356:                                              ; preds = %314
  store i32 0, i32* %41, align 4
  br label %357

357:                                              ; preds = %432, %356
  %358 = load i32, i32* %41, align 4
  %359 = load i32, i32* @lines, align 4
  %360 = ashr i32 %359, 4
  %361 = add nsw i32 %360, 1
  %362 = icmp slt i32 %358, %361
  br i1 %362, label %363, label %435

363:                                              ; preds = %357
  store i32 0, i32* %43, align 4
  br label %364

364:                                              ; preds = %410, %363
  %365 = load i32, i32* %43, align 4
  %366 = icmp slt i32 %365, 6
  br i1 %366, label %367, label %413

367:                                              ; preds = %364
  %368 = call noalias i8* @malloc(i64 24) #8
  %369 = bitcast i8* %368 to %struct.motionvector*
  %370 = load i32, i32* %43, align 4
  %371 = sext i32 %370 to i64
  %372 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %27, i64 0, i64 %371
  %373 = load i32, i32* %41, align 4
  %374 = sext i32 %373 to i64
  %375 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %372, i64 0, i64 %374
  %376 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %375, i64 0, i64 0
  store %struct.motionvector* %369, %struct.motionvector** %376, align 16
  %377 = load i32, i32* %43, align 4
  %378 = sext i32 %377 to i64
  %379 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %27, i64 0, i64 %378
  %380 = load i32, i32* %41, align 4
  %381 = sext i32 %380 to i64
  %382 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %379, i64 0, i64 %381
  %383 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %382, i64 0, i64 0
  %384 = load %struct.motionvector*, %struct.motionvector** %383, align 16
  call void @ZeroVec(%struct.motionvector* %384)
  %385 = call noalias i8* @malloc(i64 24) #8
  %386 = bitcast i8* %385 to %struct.motionvector*
  %387 = load i32, i32* %43, align 4
  %388 = sext i32 %387 to i64
  %389 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %27, i64 0, i64 %388
  %390 = load i32, i32* %41, align 4
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %389, i64 0, i64 %391
  %393 = load i32, i32* @pels, align 4
  %394 = ashr i32 %393, 4
  %395 = add nsw i32 %394, 1
  %396 = sext i32 %395 to i64
  %397 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %392, i64 0, i64 %396
  store %struct.motionvector* %386, %struct.motionvector** %397, align 8
  %398 = load i32, i32* %43, align 4
  %399 = sext i32 %398 to i64
  %400 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %27, i64 0, i64 %399
  %401 = load i32, i32* %41, align 4
  %402 = sext i32 %401 to i64
  %403 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %400, i64 0, i64 %402
  %404 = load i32, i32* @pels, align 4
  %405 = ashr i32 %404, 4
  %406 = add nsw i32 %405, 1
  %407 = sext i32 %406 to i64
  %408 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %403, i64 0, i64 %407
  %409 = load %struct.motionvector*, %struct.motionvector** %408, align 8
  call void @ZeroVec(%struct.motionvector* %409)
  br label %410

410:                                              ; preds = %367
  %411 = load i32, i32* %43, align 4
  %412 = add nsw i32 %411, 1
  store i32 %412, i32* %43, align 4
  br label %364

413:                                              ; preds = %364
  %414 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %27, i64 0, i64 0
  %415 = load i32, i32* %41, align 4
  %416 = sext i32 %415 to i64
  %417 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %414, i64 0, i64 %416
  %418 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %417, i64 0, i64 0
  %419 = load %struct.motionvector*, %struct.motionvector** %418, align 16
  %420 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %419, i32 0, i32 5
  store i32 3, i32* %420, align 4
  %421 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %27, i64 0, i64 0
  %422 = load i32, i32* %41, align 4
  %423 = sext i32 %422 to i64
  %424 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %421, i64 0, i64 %423
  %425 = load i32, i32* @pels, align 4
  %426 = ashr i32 %425, 4
  %427 = add nsw i32 %426, 1
  %428 = sext i32 %427 to i64
  %429 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %424, i64 0, i64 %428
  %430 = load %struct.motionvector*, %struct.motionvector** %429, align 8
  %431 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %430, i32 0, i32 5
  store i32 3, i32* %431, align 4
  br label %432

432:                                              ; preds = %413
  %433 = load i32, i32* %41, align 4
  %434 = add nsw i32 %433, 1
  store i32 %434, i32* %41, align 4
  br label %357

435:                                              ; preds = %357
  %436 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %437 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %436, i32 0, i32 0
  %438 = load i8*, i8** %437, align 8
  %439 = load %struct.pict_image*, %struct.pict_image** %25, align 8
  %440 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %439, i32 0, i32 0
  %441 = load i8*, i8** %440, align 8
  %442 = load i8*, i8** %21, align 8
  %443 = load %struct.pict*, %struct.pict** %18, align 8
  %444 = getelementptr inbounds %struct.pict, %struct.pict* %443, i32 0, i32 14
  %445 = load i32, i32* %444, align 4
  %446 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %27, i64 0, i64 0
  %447 = load %struct.pict*, %struct.pict** %18, align 8
  %448 = getelementptr inbounds %struct.pict, %struct.pict* %447, i32 0, i32 15
  %449 = load i32, i32* %448, align 4
  call void @MotionEstimatePicture(i8* %438, i8* %441, i8* %442, i32 %445, [73 x [90 x %struct.motionvector*]]* %446, i32 %449)
  %450 = load %struct.pict*, %struct.pict** %18, align 8
  %451 = getelementptr inbounds %struct.pict, %struct.pict* %450, i32 0, i32 3
  %452 = load i32, i32* %451, align 4
  %453 = icmp ne i32 %452, 0
  br i1 %453, label %454, label %479

454:                                              ; preds = %435
  %455 = load %struct.pict*, %struct.pict** %18, align 8
  %456 = getelementptr inbounds %struct.pict, %struct.pict* %455, i32 0, i32 3
  %457 = load i32, i32* %456, align 4
  %458 = sitofp i32 %457 to float
  %459 = load %struct.pict*, %struct.pict** %18, align 8
  %460 = getelementptr inbounds %struct.pict, %struct.pict* %459, i32 0, i32 10
  %461 = load i32, i32* %460, align 4
  %462 = icmp ne i32 %461, 0
  br i1 %462, label %463, label %468

463:                                              ; preds = %454
  %464 = load %struct.pict*, %struct.pict** %18, align 8
  %465 = getelementptr inbounds %struct.pict, %struct.pict* %464, i32 0, i32 5
  %466 = load float, float* %465, align 4
  %467 = fdiv float %466, 2.000000e+00
  br label %472

468:                                              ; preds = %454
  %469 = load %struct.pict*, %struct.pict** %18, align 8
  %470 = getelementptr inbounds %struct.pict, %struct.pict* %469, i32 0, i32 5
  %471 = load float, float* %470, align 4
  br label %472

472:                                              ; preds = %468, %463
  %473 = phi float [ %467, %463 ], [ %471, %468 ]
  %474 = load %struct.pict*, %struct.pict** %18, align 8
  %475 = getelementptr inbounds %struct.pict, %struct.pict* %474, i32 0, i32 19
  %476 = load float, float* %475, align 4
  %477 = call i32 @InitializeQuantizer(i32 1, float %458, float %473, float %476)
  store i32 %477, i32* %47, align 4
  %478 = load i32, i32* %47, align 4
  store i32 %478, i32* %48, align 4
  store i32 %478, i32* %50, align 4
  br label %481

479:                                              ; preds = %435
  %480 = load i32, i32* %15, align 4
  store i32 %480, i32* %48, align 4
  store i32 %480, i32* %50, align 4
  store i32 %480, i32* %47, align 4
  br label %481

481:                                              ; preds = %479, %472
  store i32 0, i32* %49, align 4
  store i32 0, i32* %42, align 4
  br label %482

482:                                              ; preds = %1131, %481
  %483 = load i32, i32* %42, align 4
  %484 = load i32, i32* @lines, align 4
  %485 = sdiv i32 %484, 16
  %486 = icmp slt i32 %483, %485
  br i1 %486, label %487, label %1134

487:                                              ; preds = %482
  %488 = load %struct.pict*, %struct.pict** %18, align 8
  %489 = getelementptr inbounds %struct.pict, %struct.pict* %488, i32 0, i32 3
  %490 = load i32, i32* %489, align 4
  %491 = icmp ne i32 %490, 0
  br i1 %491, label %492, label %510

492:                                              ; preds = %487
  %493 = load %struct.bits_counted*, %struct.bits_counted** %17, align 8
  call void @AddBitsPicture(%struct.bits_counted* %493)
  %494 = load i32, i32* %45, align 4
  %495 = load %struct.pict*, %struct.pict** %18, align 8
  %496 = getelementptr inbounds %struct.pict, %struct.pict* %495, i32 0, i32 19
  %497 = load float, float* %496, align 4
  %498 = load %struct.pict*, %struct.pict** %18, align 8
  %499 = getelementptr inbounds %struct.pict, %struct.pict* %498, i32 0, i32 3
  %500 = load i32, i32* %499, align 4
  %501 = sitofp i32 %500 to float
  %502 = load i32, i32* @pels, align 4
  %503 = sdiv i32 %502, 16
  %504 = load i32, i32* @lines, align 4
  %505 = sdiv i32 %504, 16
  %506 = load %struct.bits_counted*, %struct.bits_counted** %17, align 8
  %507 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %506, i32 0, i32 10
  %508 = load i32, i32* %507, align 4
  %509 = call i32 @UpdateQuantizer(i32 %494, float %497, i32 1, float %501, i32 %503, i32 %505, i32 %508)
  store i32 %509, i32* %47, align 4
  br label %510

510:                                              ; preds = %492, %487
  store i32 0, i32* %40, align 4
  %511 = load i32, i32* %42, align 4
  %512 = icmp eq i32 %511, 0
  br i1 %512, label %513, label %524

513:                                              ; preds = %510
  %514 = load i32, i32* %47, align 4
  %515 = load %struct.pict*, %struct.pict** %18, align 8
  %516 = getelementptr inbounds %struct.pict, %struct.pict* %515, i32 0, i32 11
  store i32 %514, i32* %516, align 4
  %517 = load %struct.pict*, %struct.pict** %18, align 8
  %518 = call i32 @CountBitsPicture(%struct.pict* %517)
  %519 = load %struct.bits_counted*, %struct.bits_counted** %17, align 8
  %520 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %519, i32 0, i32 8
  %521 = load i32, i32* %520, align 4
  %522 = add nsw i32 %521, %518
  store i32 %522, i32* %520, align 4
  %523 = load i32, i32* %47, align 4
  store i32 %523, i32* %48, align 4
  store i32 %523, i32* %50, align 4
  br label %546

524:                                              ; preds = %510
  %525 = load %struct.pict*, %struct.pict** %18, align 8
  %526 = getelementptr inbounds %struct.pict, %struct.pict* %525, i32 0, i32 15
  %527 = load i32, i32* %526, align 4
  %528 = icmp ne i32 %527, 0
  br i1 %528, label %529, label %545

529:                                              ; preds = %524
  %530 = load i32, i32* %42, align 4
  %531 = load %struct.pict*, %struct.pict** %18, align 8
  %532 = getelementptr inbounds %struct.pict, %struct.pict* %531, i32 0, i32 15
  %533 = load i32, i32* %532, align 4
  %534 = srem i32 %530, %533
  %535 = icmp eq i32 %534, 0
  br i1 %535, label %536, label %545

536:                                              ; preds = %529
  %537 = load i32, i32* %42, align 4
  %538 = load i32, i32* %47, align 4
  %539 = call i32 @CountBitsSlice(i32 %537, i32 %538)
  %540 = load %struct.bits_counted*, %struct.bits_counted** %17, align 8
  %541 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %540, i32 0, i32 8
  %542 = load i32, i32* %541, align 4
  %543 = add nsw i32 %542, %539
  store i32 %543, i32* %541, align 4
  %544 = load i32, i32* %47, align 4
  store i32 %544, i32* %48, align 4
  store i32 %544, i32* %50, align 4
  store i32 1, i32* %40, align 4
  br label %545

545:                                              ; preds = %536, %529, %524
  br label %546

546:                                              ; preds = %545, %513
  store i32 0, i32* %41, align 4
  br label %547

547:                                              ; preds = %1127, %546
  %548 = load i32, i32* %41, align 4
  %549 = load i32, i32* @pels, align 4
  %550 = sdiv i32 %549, 16
  %551 = icmp slt i32 %548, %550
  br i1 %551, label %552, label %1130

552:                                              ; preds = %547
  %553 = load i32, i32* %47, align 4
  %554 = load i32, i32* %48, align 4
  %555 = sub nsw i32 %553, %554
  store i32 %555, i32* %49, align 4
  %556 = load i32, i32* %49, align 4
  %557 = icmp ne i32 %556, 0
  br i1 %557, label %558, label %577

558:                                              ; preds = %552
  %559 = load i32, i32* %41, align 4
  %560 = icmp ne i32 %559, 0
  br i1 %560, label %561, label %577

561:                                              ; preds = %558
  %562 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %27, i64 0, i64 0
  %563 = load i32, i32* %42, align 4
  %564 = add nsw i32 %563, 1
  %565 = sext i32 %564 to i64
  %566 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %562, i64 0, i64 %565
  %567 = load i32, i32* %41, align 4
  %568 = add nsw i32 %567, 1
  %569 = sext i32 %568 to i64
  %570 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %566, i64 0, i64 %569
  %571 = load %struct.motionvector*, %struct.motionvector** %570, align 8
  %572 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %571, i32 0, i32 5
  %573 = load i32, i32* %572, align 4
  %574 = icmp eq i32 %573, 2
  br i1 %574, label %575, label %577

575:                                              ; preds = %561
  store i32 0, i32* %49, align 4
  %576 = load i32, i32* %48, align 4
  store i32 %576, i32* %50, align 4
  store i32 1, i32* %46, align 4
  br label %579

577:                                              ; preds = %561, %558, %552
  %578 = load i32, i32* %47, align 4
  store i32 %578, i32* %50, align 4
  store i32 0, i32* %46, align 4
  br label %579

579:                                              ; preds = %577, %575
  %580 = load i32, i32* %49, align 4
  %581 = icmp sgt i32 %580, 2
  br i1 %581, label %582, label %586

582:                                              ; preds = %579
  store i32 2, i32* %49, align 4
  %583 = load i32, i32* %48, align 4
  %584 = load i32, i32* %49, align 4
  %585 = add nsw i32 %583, %584
  store i32 %585, i32* %50, align 4
  br label %586

586:                                              ; preds = %582, %579
  %587 = load i32, i32* %49, align 4
  %588 = icmp slt i32 %587, -2
  br i1 %588, label %589, label %593

589:                                              ; preds = %586
  store i32 -2, i32* %49, align 4
  %590 = load i32, i32* %48, align 4
  %591 = load i32, i32* %49, align 4
  %592 = add nsw i32 %590, %591
  store i32 %592, i32* %50, align 4
  br label %593

593:                                              ; preds = %589, %586
  %594 = load i32, i32* %49, align 4
  %595 = load %struct.pict*, %struct.pict** %18, align 8
  %596 = getelementptr inbounds %struct.pict, %struct.pict* %595, i32 0, i32 12
  store i32 %594, i32* %596, align 4
  %597 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %27, i64 0, i64 0
  %598 = load i32, i32* %42, align 4
  %599 = add nsw i32 %598, 1
  %600 = sext i32 %599 to i64
  %601 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %597, i64 0, i64 %600
  %602 = load i32, i32* %41, align 4
  %603 = add nsw i32 %602, 1
  %604 = sext i32 %603 to i64
  %605 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %601, i64 0, i64 %604
  %606 = load %struct.motionvector*, %struct.motionvector** %605, align 8
  %607 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %606, i32 0, i32 5
  %608 = load i32, i32* %607, align 4
  %609 = load %struct.pict*, %struct.pict** %18, align 8
  %610 = getelementptr inbounds %struct.pict, %struct.pict* %609, i32 0, i32 12
  %611 = load i32, i32* %610, align 4
  %612 = call i32 @ModifyMode(i32 %608, i32 %611)
  store i32 %612, i32* %34, align 4
  %613 = load i32, i32* %34, align 4
  %614 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %27, i64 0, i64 0
  %615 = load i32, i32* %42, align 4
  %616 = add nsw i32 %615, 1
  %617 = sext i32 %616 to i64
  %618 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %614, i64 0, i64 %617
  %619 = load i32, i32* %41, align 4
  %620 = add nsw i32 %619, 1
  %621 = sext i32 %620 to i64
  %622 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %618, i64 0, i64 %621
  %623 = load %struct.motionvector*, %struct.motionvector** %622, align 8
  %624 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %623, i32 0, i32 5
  store i32 %613, i32* %624, align 4
  %625 = load i32, i32* %41, align 4
  %626 = load i32, i32* %42, align 4
  %627 = load i32, i32* @pels, align 4
  %628 = sdiv i32 %627, 16
  %629 = mul nsw i32 %626, %628
  %630 = add nsw i32 %625, %629
  %631 = load %struct.pict*, %struct.pict** %18, align 8
  %632 = getelementptr inbounds %struct.pict, %struct.pict* %631, i32 0, i32 13
  store i32 %630, i32* %632, align 4
  %633 = load i32, i32* %34, align 4
  %634 = icmp eq i32 %633, 0
  br i1 %634, label %641, label %635

635:                                              ; preds = %593
  %636 = load i32, i32* %34, align 4
  %637 = icmp eq i32 %636, 1
  br i1 %637, label %641, label %638

638:                                              ; preds = %635
  %639 = load i32, i32* %34, align 4
  %640 = icmp eq i32 %639, 2
  br i1 %640, label %641, label %654

641:                                              ; preds = %638, %635, %593
  %642 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %643 = load %struct.pict_image*, %struct.pict_image** %25, align 8
  %644 = load i8*, i8** %21, align 8
  %645 = load i32, i32* %41, align 4
  %646 = mul nsw i32 %645, 16
  %647 = load i32, i32* %42, align 4
  %648 = mul nsw i32 %647, 16
  %649 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %27, i64 0, i64 0
  %650 = load %struct.pict*, %struct.pict** %18, align 8
  %651 = getelementptr inbounds %struct.pict, %struct.pict* %650, i32 0, i32 10
  %652 = load i32, i32* %651, align 4
  %653 = call %struct.mb_structure* @Predict_P(%struct.pict_image* %642, %struct.pict_image* %643, i8* %644, i32 %646, i32 %648, [73 x [90 x %struct.motionvector*]]* %649, i32 %652)
  store %struct.mb_structure* %653, %struct.mb_structure** %31, align 8
  br label %669

654:                                              ; preds = %638
  %655 = call noalias i8* @malloc(i64 1536) #8
  %656 = bitcast i8* %655 to %struct.mb_structure*
  store %struct.mb_structure* %656, %struct.mb_structure** %31, align 8
  %657 = load i32, i32* %41, align 4
  %658 = mul nsw i32 %657, 16
  %659 = load i32, i32* %42, align 4
  %660 = mul nsw i32 %659, 16
  %661 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %662 = load %struct.mb_structure*, %struct.mb_structure** %31, align 8
  call void @FillLumBlock(i32 %658, i32 %660, %struct.pict_image* %661, %struct.mb_structure* %662)
  %663 = load i32, i32* %41, align 4
  %664 = mul nsw i32 %663, 16
  %665 = load i32, i32* %42, align 4
  %666 = mul nsw i32 %665, 16
  %667 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %668 = load %struct.mb_structure*, %struct.mb_structure** %31, align 8
  call void @FillChromBlock(i32 %664, i32 %666, %struct.pict_image* %667, %struct.mb_structure* %668)
  br label %669

669:                                              ; preds = %654, %641
  %670 = load %struct.mb_structure*, %struct.mb_structure** %31, align 8
  %671 = load i32, i32* %50, align 4
  %672 = load i32, i32* %34, align 4
  %673 = call i32* @MB_Encode(%struct.mb_structure* %670, i32 %671, i32 %672)
  store i32* %673, i32** %32, align 8
  %674 = load i32*, i32** %32, align 8
  %675 = load i32, i32* %34, align 4
  %676 = call i32 @FindCBP(i32* %674, i32 %675, i32 64)
  store i32 %676, i32* %36, align 4
  %677 = load i32, i32* %36, align 4
  %678 = icmp eq i32 %677, 0
  br i1 %678, label %679, label %687

679:                                              ; preds = %669
  %680 = load i32, i32* %34, align 4
  %681 = icmp eq i32 %680, 0
  br i1 %681, label %685, label %682

682:                                              ; preds = %679
  %683 = load i32, i32* %34, align 4
  %684 = icmp eq i32 %683, 1
  br i1 %684, label %685, label %687

685:                                              ; preds = %682, %679
  %686 = load %struct.mb_structure*, %struct.mb_structure** %31, align 8
  call void @ZeroMBlock(%struct.mb_structure* %686)
  br label %693

687:                                              ; preds = %682, %669
  %688 = load i32*, i32** %32, align 8
  %689 = load %struct.mb_structure*, %struct.mb_structure** %31, align 8
  %690 = load i32, i32* %50, align 4
  %691 = load i32, i32* %34, align 4
  %692 = call i32 @MB_Decode(i32* %688, %struct.mb_structure* %689, i32 %690, i32 %691)
  br label %693

693:                                              ; preds = %687, %685
  %694 = load %struct.pict_image*, %struct.pict_image** %25, align 8
  %695 = load i8*, i8** %21, align 8
  %696 = load %struct.mb_structure*, %struct.mb_structure** %31, align 8
  %697 = load i32, i32* %41, align 4
  %698 = mul nsw i32 %697, 16
  %699 = load i32, i32* %42, align 4
  %700 = mul nsw i32 %699, 16
  %701 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %27, i64 0, i64 0
  %702 = load %struct.pict*, %struct.pict** %18, align 8
  %703 = getelementptr inbounds %struct.pict, %struct.pict* %702, i32 0, i32 10
  %704 = load i32, i32* %703, align 4
  %705 = call %struct.mb_structure* @MB_Recon_P(%struct.pict_image* %694, i8* %695, %struct.mb_structure* %696, i32 %698, i32 %700, [73 x [90 x %struct.motionvector*]]* %701, i32 %704)
  store %struct.mb_structure* %705, %struct.mb_structure** %29, align 8
  %706 = load %struct.mb_structure*, %struct.mb_structure** %29, align 8
  call void @Clip(%struct.mb_structure* %706)
  %707 = load %struct.mb_structure*, %struct.mb_structure** %31, align 8
  %708 = bitcast %struct.mb_structure* %707 to i8*
  call void @free(i8* %708) #8
  %709 = load %struct.pict*, %struct.pict** %18, align 8
  %710 = getelementptr inbounds %struct.pict, %struct.pict* %709, i32 0, i32 10
  %711 = load i32, i32* %710, align 4
  %712 = icmp ne i32 %711, 0
  br i1 %712, label %713, label %857

713:                                              ; preds = %693
  %714 = load %struct.pict_image*, %struct.pict_image** %12, align 8
  %715 = load %struct.pict_image*, %struct.pict_image** %25, align 8
  %716 = load i8*, i8** %21, align 8
  %717 = load i32, i32* %41, align 4
  %718 = mul nsw i32 %717, 16
  %719 = load i32, i32* %42, align 4
  %720 = mul nsw i32 %719, 16
  %721 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %27, i64 0, i64 0
  %722 = load %struct.mb_structure*, %struct.mb_structure** %29, align 8
  %723 = load i32, i32* %16, align 4
  %724 = load %struct.pict*, %struct.pict** %18, align 8
  %725 = getelementptr inbounds %struct.pict, %struct.pict* %724, i32 0, i32 18
  %726 = load i32, i32* %725, align 4
  %727 = call %struct.mb_structure* @Predict_B(%struct.pict_image* %714, %struct.pict_image* %715, i8* %716, i32 %718, i32 %720, [73 x [90 x %struct.motionvector*]]* %721, %struct.mb_structure* %722, i32 %723, i32 %726)
  store %struct.mb_structure* %727, %struct.mb_structure** %31, align 8
  %728 = load i32, i32* %50, align 4
  %729 = icmp eq i32 %728, 0
  br i1 %729, label %730, label %731

730:                                              ; preds = %713
  store i32 0, i32* %39, align 4
  br label %783

731:                                              ; preds = %713
  %732 = load %struct.pict*, %struct.pict** %18, align 8
  %733 = getelementptr inbounds %struct.pict, %struct.pict* %732, i32 0, i32 17
  %734 = load i32, i32* %733, align 4
  %735 = sext i32 %734 to i64
  %736 = getelementptr inbounds [4 x i32], [4 x i32]* %38, i64 0, i64 %735
  %737 = load i32, i32* %736, align 4
  %738 = load i32, i32* %50, align 4
  %739 = mul nsw i32 %737, %738
  %740 = sdiv i32 %739, 4
  %741 = icmp slt i32 31, %740
  br i1 %741, label %742, label %743

742:                                              ; preds = %731
  br label %753

743:                                              ; preds = %731
  %744 = load %struct.pict*, %struct.pict** %18, align 8
  %745 = getelementptr inbounds %struct.pict, %struct.pict* %744, i32 0, i32 17
  %746 = load i32, i32* %745, align 4
  %747 = sext i32 %746 to i64
  %748 = getelementptr inbounds [4 x i32], [4 x i32]* %38, i64 0, i64 %747
  %749 = load i32, i32* %748, align 4
  %750 = load i32, i32* %50, align 4
  %751 = mul nsw i32 %749, %750
  %752 = sdiv i32 %751, 4
  br label %753

753:                                              ; preds = %743, %742
  %754 = phi i32 [ 31, %742 ], [ %752, %743 ]
  %755 = icmp sgt i32 1, %754
  br i1 %755, label %756, label %757

756:                                              ; preds = %753
  br label %781

757:                                              ; preds = %753
  %758 = load %struct.pict*, %struct.pict** %18, align 8
  %759 = getelementptr inbounds %struct.pict, %struct.pict* %758, i32 0, i32 17
  %760 = load i32, i32* %759, align 4
  %761 = sext i32 %760 to i64
  %762 = getelementptr inbounds [4 x i32], [4 x i32]* %38, i64 0, i64 %761
  %763 = load i32, i32* %762, align 4
  %764 = load i32, i32* %50, align 4
  %765 = mul nsw i32 %763, %764
  %766 = sdiv i32 %765, 4
  %767 = icmp slt i32 31, %766
  br i1 %767, label %768, label %769

768:                                              ; preds = %757
  br label %779

769:                                              ; preds = %757
  %770 = load %struct.pict*, %struct.pict** %18, align 8
  %771 = getelementptr inbounds %struct.pict, %struct.pict* %770, i32 0, i32 17
  %772 = load i32, i32* %771, align 4
  %773 = sext i32 %772 to i64
  %774 = getelementptr inbounds [4 x i32], [4 x i32]* %38, i64 0, i64 %773
  %775 = load i32, i32* %774, align 4
  %776 = load i32, i32* %50, align 4
  %777 = mul nsw i32 %775, %776
  %778 = sdiv i32 %777, 4
  br label %779

779:                                              ; preds = %769, %768
  %780 = phi i32 [ 31, %768 ], [ %778, %769 ]
  br label %781

781:                                              ; preds = %779, %756
  %782 = phi i32 [ 1, %756 ], [ %780, %779 ]
  store i32 %782, i32* %39, align 4
  br label %783

783:                                              ; preds = %781, %730
  %784 = load %struct.mb_structure*, %struct.mb_structure** %31, align 8
  %785 = load i32, i32* %39, align 4
  %786 = call i32* @MB_Encode(%struct.mb_structure* %784, i32 %785, i32 0)
  store i32* %786, i32** %33, align 8
  %787 = load i32*, i32** %33, align 8
  %788 = call i32 @FindCBP(i32* %787, i32 0, i32 64)
  store i32 %788, i32* %37, align 4
  %789 = load i32, i32* %37, align 4
  %790 = icmp ne i32 %789, 0
  br i1 %790, label %791, label %796

791:                                              ; preds = %783
  %792 = load i32*, i32** %33, align 8
  %793 = load %struct.mb_structure*, %struct.mb_structure** %31, align 8
  %794 = load i32, i32* %39, align 4
  %795 = call i32 @MB_Decode(i32* %792, %struct.mb_structure* %793, i32 %794, i32 0)
  br label %798

796:                                              ; preds = %783
  %797 = load %struct.mb_structure*, %struct.mb_structure** %31, align 8
  call void @ZeroMBlock(%struct.mb_structure* %797)
  br label %798

798:                                              ; preds = %796, %791
  %799 = load %struct.pict_image*, %struct.pict_image** %25, align 8
  %800 = load %struct.mb_structure*, %struct.mb_structure** %31, align 8
  %801 = load i8*, i8** %21, align 8
  %802 = load i32, i32* %41, align 4
  %803 = mul nsw i32 %802, 16
  %804 = load i32, i32* %42, align 4
  %805 = mul nsw i32 %804, 16
  %806 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %27, i64 0, i64 0
  %807 = load %struct.mb_structure*, %struct.mb_structure** %29, align 8
  %808 = load i32, i32* %16, align 4
  %809 = load %struct.pict*, %struct.pict** %18, align 8
  %810 = getelementptr inbounds %struct.pict, %struct.pict* %809, i32 0, i32 18
  %811 = load i32, i32* %810, align 4
  %812 = call %struct.mb_structure* @MB_Recon_B(%struct.pict_image* %799, %struct.mb_structure* %800, i8* %801, i32 %803, i32 %805, [73 x [90 x %struct.motionvector*]]* %806, %struct.mb_structure* %807, i32 %808, i32 %811)
  store %struct.mb_structure* %812, %struct.mb_structure** %30, align 8
  %813 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  call void @Clip(%struct.mb_structure* %813)
  %814 = load i32, i32* %37, align 4
  %815 = icmp ne i32 %814, 0
  br i1 %815, label %816, label %819

816:                                              ; preds = %798
  %817 = load %struct.pict*, %struct.pict** %18, align 8
  %818 = getelementptr inbounds %struct.pict, %struct.pict* %817, i32 0, i32 16
  store i32 2, i32* %818, align 4
  br label %854

819:                                              ; preds = %798
  %820 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %27, i64 0, i64 5
  %821 = load i32, i32* %42, align 4
  %822 = add nsw i32 %821, 1
  %823 = sext i32 %822 to i64
  %824 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %820, i64 0, i64 %823
  %825 = load i32, i32* %41, align 4
  %826 = add nsw i32 %825, 1
  %827 = sext i32 %826 to i64
  %828 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %824, i64 0, i64 %827
  %829 = load %struct.motionvector*, %struct.motionvector** %828, align 8
  %830 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %829, i32 0, i32 0
  %831 = load i32, i32* %830, align 4
  %832 = icmp eq i32 %831, 0
  br i1 %832, label %833, label %850

833:                                              ; preds = %819
  %834 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %27, i64 0, i64 5
  %835 = load i32, i32* %42, align 4
  %836 = add nsw i32 %835, 1
  %837 = sext i32 %836 to i64
  %838 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %834, i64 0, i64 %837
  %839 = load i32, i32* %41, align 4
  %840 = add nsw i32 %839, 1
  %841 = sext i32 %840 to i64
  %842 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %838, i64 0, i64 %841
  %843 = load %struct.motionvector*, %struct.motionvector** %842, align 8
  %844 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %843, i32 0, i32 1
  %845 = load i32, i32* %844, align 4
  %846 = icmp eq i32 %845, 0
  br i1 %846, label %847, label %850

847:                                              ; preds = %833
  %848 = load %struct.pict*, %struct.pict** %18, align 8
  %849 = getelementptr inbounds %struct.pict, %struct.pict* %848, i32 0, i32 16
  store i32 0, i32* %849, align 4
  br label %853

850:                                              ; preds = %833, %819
  %851 = load %struct.pict*, %struct.pict** %18, align 8
  %852 = getelementptr inbounds %struct.pict, %struct.pict* %851, i32 0, i32 16
  store i32 1, i32* %852, align 4
  br label %853

853:                                              ; preds = %850, %847
  br label %854

854:                                              ; preds = %853, %816
  %855 = load %struct.mb_structure*, %struct.mb_structure** %31, align 8
  %856 = bitcast %struct.mb_structure* %855 to i8*
  call void @free(i8* %856) #8
  br label %868

857:                                              ; preds = %693
  %858 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %27, i64 0, i64 5
  %859 = load i32, i32* %42, align 4
  %860 = add nsw i32 %859, 1
  %861 = sext i32 %860 to i64
  %862 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %858, i64 0, i64 %861
  %863 = load i32, i32* %41, align 4
  %864 = add nsw i32 %863, 1
  %865 = sext i32 %864 to i64
  %866 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %862, i64 0, i64 %865
  %867 = load %struct.motionvector*, %struct.motionvector** %866, align 8
  call void @ZeroVec(%struct.motionvector* %867)
  br label %868

868:                                              ; preds = %857, %854
  %869 = load i32, i32* %36, align 4
  %870 = icmp eq i32 %869, 0
  br i1 %870, label %871, label %929

871:                                              ; preds = %868
  %872 = load i32, i32* %37, align 4
  %873 = icmp eq i32 %872, 0
  br i1 %873, label %874, label %929

874:                                              ; preds = %871
  %875 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %27, i64 0, i64 0
  %876 = load i32, i32* %42, align 4
  %877 = add nsw i32 %876, 1
  %878 = sext i32 %877 to i64
  %879 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %875, i64 0, i64 %878
  %880 = load i32, i32* %41, align 4
  %881 = add nsw i32 %880, 1
  %882 = sext i32 %881 to i64
  %883 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %879, i64 0, i64 %882
  %884 = load %struct.motionvector*, %struct.motionvector** %883, align 8
  %885 = call i32 @EqualVec(%struct.motionvector* %884, %struct.motionvector* %28)
  %886 = icmp ne i32 %885, 0
  br i1 %886, label %887, label %929

887:                                              ; preds = %874
  %888 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %27, i64 0, i64 5
  %889 = load i32, i32* %42, align 4
  %890 = add nsw i32 %889, 1
  %891 = sext i32 %890 to i64
  %892 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %888, i64 0, i64 %891
  %893 = load i32, i32* %41, align 4
  %894 = add nsw i32 %893, 1
  %895 = sext i32 %894 to i64
  %896 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %892, i64 0, i64 %895
  %897 = load %struct.motionvector*, %struct.motionvector** %896, align 8
  %898 = call i32 @EqualVec(%struct.motionvector* %897, %struct.motionvector* %28)
  %899 = icmp ne i32 %898, 0
  br i1 %899, label %900, label %929

900:                                              ; preds = %887
  %901 = load i32, i32* %34, align 4
  %902 = icmp eq i32 %901, 0
  br i1 %902, label %906, label %903

903:                                              ; preds = %900
  %904 = load i32, i32* %34, align 4
  %905 = icmp eq i32 %904, 1
  br i1 %905, label %906, label %929

906:                                              ; preds = %903, %900
  %907 = load i32, i32* %34, align 4
  %908 = icmp eq i32 %907, 1
  br i1 %908, label %909, label %913

909:                                              ; preds = %906
  %910 = load i32, i32* %48, align 4
  store i32 %910, i32* %50, align 4
  %911 = load %struct.pict*, %struct.pict** %18, align 8
  %912 = getelementptr inbounds %struct.pict, %struct.pict* %911, i32 0, i32 12
  store i32 0, i32* %912, align 4
  store i32 0, i32* %34, align 4
  br label %913

913:                                              ; preds = %909, %906
  %914 = load i32, i32* @syntax_arith_coding, align 4
  %915 = icmp ne i32 %914, 0
  br i1 %915, label %922, label %916

916:                                              ; preds = %913
  %917 = load i32, i32* %34, align 4
  %918 = load i32, i32* %36, align 4
  %919 = load i32, i32* %37, align 4
  %920 = load %struct.pict*, %struct.pict** %18, align 8
  %921 = load %struct.bits_counted*, %struct.bits_counted** %17, align 8
  call void @CountBitsMB(i32 %917, i32 1, i32 %918, i32 %919, %struct.pict* %920, %struct.bits_counted* %921)
  br label %928

922:                                              ; preds = %913
  %923 = load i32, i32* %34, align 4
  %924 = load i32, i32* %36, align 4
  %925 = load i32, i32* %37, align 4
  %926 = load %struct.pict*, %struct.pict** %18, align 8
  %927 = load %struct.bits_counted*, %struct.bits_counted** %17, align 8
  call void @Count_sac_BitsMB(i32 %923, i32 1, i32 %924, i32 %925, %struct.pict* %926, %struct.bits_counted* %927)
  br label %928

928:                                              ; preds = %922, %916
  br label %1092

929:                                              ; preds = %903, %887, %874, %871, %868
  %930 = load i32, i32* @syntax_arith_coding, align 4
  %931 = icmp ne i32 %930, 0
  br i1 %931, label %1011, label %932

932:                                              ; preds = %929
  %933 = load i32, i32* %34, align 4
  %934 = load i32, i32* %36, align 4
  %935 = load i32, i32* %37, align 4
  %936 = load %struct.pict*, %struct.pict** %18, align 8
  %937 = load %struct.bits_counted*, %struct.bits_counted** %17, align 8
  call void @CountBitsMB(i32 %933, i32 0, i32 %934, i32 %935, %struct.pict* %936, %struct.bits_counted* %937)
  %938 = load i32, i32* %34, align 4
  %939 = icmp eq i32 %938, 0
  br i1 %939, label %943, label %940

940:                                              ; preds = %932
  %941 = load i32, i32* %34, align 4
  %942 = icmp eq i32 %941, 1
  br i1 %942, label %943, label %955

943:                                              ; preds = %940, %932
  %944 = load %struct.bits_counted*, %struct.bits_counted** %17, align 8
  %945 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %944, i32 0, i32 11
  %946 = load i32, i32* %945, align 4
  %947 = add nsw i32 %946, 1
  store i32 %947, i32* %945, align 4
  %948 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %27, i64 0, i64 0
  %949 = load %struct.bits_counted*, %struct.bits_counted** %17, align 8
  %950 = load i32, i32* %41, align 4
  %951 = load i32, i32* %42, align 4
  %952 = load i32, i32* %34, align 4
  %953 = load i32, i32* %40, align 4
  %954 = load %struct.pict*, %struct.pict** %18, align 8
  call void @CountBitsVectors([73 x [90 x %struct.motionvector*]]* %948, %struct.bits_counted* %949, i32 %950, i32 %951, i32 %952, i32 %953, %struct.pict* %954)
  br label %989

955:                                              ; preds = %940
  %956 = load i32, i32* %34, align 4
  %957 = icmp eq i32 %956, 2
  br i1 %957, label %958, label %970

958:                                              ; preds = %955
  %959 = load %struct.bits_counted*, %struct.bits_counted** %17, align 8
  %960 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %959, i32 0, i32 12
  %961 = load i32, i32* %960, align 4
  %962 = add nsw i32 %961, 1
  store i32 %962, i32* %960, align 4
  %963 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %27, i64 0, i64 0
  %964 = load %struct.bits_counted*, %struct.bits_counted** %17, align 8
  %965 = load i32, i32* %41, align 4
  %966 = load i32, i32* %42, align 4
  %967 = load i32, i32* %34, align 4
  %968 = load i32, i32* %40, align 4
  %969 = load %struct.pict*, %struct.pict** %18, align 8
  call void @CountBitsVectors([73 x [90 x %struct.motionvector*]]* %963, %struct.bits_counted* %964, i32 %965, i32 %966, i32 %967, i32 %968, %struct.pict* %969)
  br label %988

970:                                              ; preds = %955
  %971 = load %struct.bits_counted*, %struct.bits_counted** %17, align 8
  %972 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %971, i32 0, i32 13
  %973 = load i32, i32* %972, align 4
  %974 = add nsw i32 %973, 1
  store i32 %974, i32* %972, align 4
  %975 = load %struct.pict*, %struct.pict** %18, align 8
  %976 = getelementptr inbounds %struct.pict, %struct.pict* %975, i32 0, i32 10
  %977 = load i32, i32* %976, align 4
  %978 = icmp ne i32 %977, 0
  br i1 %978, label %979, label %987

979:                                              ; preds = %970
  %980 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %27, i64 0, i64 0
  %981 = load %struct.bits_counted*, %struct.bits_counted** %17, align 8
  %982 = load i32, i32* %41, align 4
  %983 = load i32, i32* %42, align 4
  %984 = load i32, i32* %34, align 4
  %985 = load i32, i32* %40, align 4
  %986 = load %struct.pict*, %struct.pict** %18, align 8
  call void @CountBitsVectors([73 x [90 x %struct.motionvector*]]* %980, %struct.bits_counted* %981, i32 %982, i32 %983, i32 %984, i32 %985, %struct.pict* %986)
  br label %987

987:                                              ; preds = %979, %970
  br label %988

988:                                              ; preds = %987, %958
  br label %989

989:                                              ; preds = %988, %943
  %990 = load i32, i32* %36, align 4
  %991 = icmp ne i32 %990, 0
  br i1 %991, label %998, label %992

992:                                              ; preds = %989
  %993 = load i32, i32* %34, align 4
  %994 = icmp eq i32 %993, 3
  br i1 %994, label %998, label %995

995:                                              ; preds = %992
  %996 = load i32, i32* %34, align 4
  %997 = icmp eq i32 %996, 4
  br i1 %997, label %998, label %1003

998:                                              ; preds = %995, %992, %989
  %999 = load i32*, i32** %32, align 8
  %1000 = load i32, i32* %34, align 4
  %1001 = load i32, i32* %36, align 4
  %1002 = load %struct.bits_counted*, %struct.bits_counted** %17, align 8
  call void @CountBitsCoeff(i32* %999, i32 %1000, i32 %1001, %struct.bits_counted* %1002, i32 64)
  br label %1003

1003:                                             ; preds = %998, %995
  %1004 = load i32, i32* %37, align 4
  %1005 = icmp ne i32 %1004, 0
  br i1 %1005, label %1006, label %1010

1006:                                             ; preds = %1003
  %1007 = load i32*, i32** %33, align 8
  %1008 = load i32, i32* %37, align 4
  %1009 = load %struct.bits_counted*, %struct.bits_counted** %17, align 8
  call void @CountBitsCoeff(i32* %1007, i32 0, i32 %1008, %struct.bits_counted* %1009, i32 64)
  br label %1010

1010:                                             ; preds = %1006, %1003
  br label %1090

1011:                                             ; preds = %929
  %1012 = load i32, i32* %34, align 4
  %1013 = load i32, i32* %36, align 4
  %1014 = load i32, i32* %37, align 4
  %1015 = load %struct.pict*, %struct.pict** %18, align 8
  %1016 = load %struct.bits_counted*, %struct.bits_counted** %17, align 8
  call void @Count_sac_BitsMB(i32 %1012, i32 0, i32 %1013, i32 %1014, %struct.pict* %1015, %struct.bits_counted* %1016)
  %1017 = load i32, i32* %34, align 4
  %1018 = icmp eq i32 %1017, 0
  br i1 %1018, label %1022, label %1019

1019:                                             ; preds = %1011
  %1020 = load i32, i32* %34, align 4
  %1021 = icmp eq i32 %1020, 1
  br i1 %1021, label %1022, label %1034

1022:                                             ; preds = %1019, %1011
  %1023 = load %struct.bits_counted*, %struct.bits_counted** %17, align 8
  %1024 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %1023, i32 0, i32 11
  %1025 = load i32, i32* %1024, align 4
  %1026 = add nsw i32 %1025, 1
  store i32 %1026, i32* %1024, align 4
  %1027 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %27, i64 0, i64 0
  %1028 = load %struct.bits_counted*, %struct.bits_counted** %17, align 8
  %1029 = load i32, i32* %41, align 4
  %1030 = load i32, i32* %42, align 4
  %1031 = load i32, i32* %34, align 4
  %1032 = load i32, i32* %40, align 4
  %1033 = load %struct.pict*, %struct.pict** %18, align 8
  call void @Count_sac_BitsVectors([73 x [90 x %struct.motionvector*]]* %1027, %struct.bits_counted* %1028, i32 %1029, i32 %1030, i32 %1031, i32 %1032, %struct.pict* %1033)
  br label %1068

1034:                                             ; preds = %1019
  %1035 = load i32, i32* %34, align 4
  %1036 = icmp eq i32 %1035, 2
  br i1 %1036, label %1037, label %1049

1037:                                             ; preds = %1034
  %1038 = load %struct.bits_counted*, %struct.bits_counted** %17, align 8
  %1039 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %1038, i32 0, i32 12
  %1040 = load i32, i32* %1039, align 4
  %1041 = add nsw i32 %1040, 1
  store i32 %1041, i32* %1039, align 4
  %1042 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %27, i64 0, i64 0
  %1043 = load %struct.bits_counted*, %struct.bits_counted** %17, align 8
  %1044 = load i32, i32* %41, align 4
  %1045 = load i32, i32* %42, align 4
  %1046 = load i32, i32* %34, align 4
  %1047 = load i32, i32* %40, align 4
  %1048 = load %struct.pict*, %struct.pict** %18, align 8
  call void @Count_sac_BitsVectors([73 x [90 x %struct.motionvector*]]* %1042, %struct.bits_counted* %1043, i32 %1044, i32 %1045, i32 %1046, i32 %1047, %struct.pict* %1048)
  br label %1067

1049:                                             ; preds = %1034
  %1050 = load %struct.bits_counted*, %struct.bits_counted** %17, align 8
  %1051 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %1050, i32 0, i32 13
  %1052 = load i32, i32* %1051, align 4
  %1053 = add nsw i32 %1052, 1
  store i32 %1053, i32* %1051, align 4
  %1054 = load %struct.pict*, %struct.pict** %18, align 8
  %1055 = getelementptr inbounds %struct.pict, %struct.pict* %1054, i32 0, i32 10
  %1056 = load i32, i32* %1055, align 4
  %1057 = icmp ne i32 %1056, 0
  br i1 %1057, label %1058, label %1066

1058:                                             ; preds = %1049
  %1059 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %27, i64 0, i64 0
  %1060 = load %struct.bits_counted*, %struct.bits_counted** %17, align 8
  %1061 = load i32, i32* %41, align 4
  %1062 = load i32, i32* %42, align 4
  %1063 = load i32, i32* %34, align 4
  %1064 = load i32, i32* %40, align 4
  %1065 = load %struct.pict*, %struct.pict** %18, align 8
  call void @Count_sac_BitsVectors([73 x [90 x %struct.motionvector*]]* %1059, %struct.bits_counted* %1060, i32 %1061, i32 %1062, i32 %1063, i32 %1064, %struct.pict* %1065)
  br label %1066

1066:                                             ; preds = %1058, %1049
  br label %1067

1067:                                             ; preds = %1066, %1037
  br label %1068

1068:                                             ; preds = %1067, %1022
  %1069 = load i32, i32* %36, align 4
  %1070 = icmp ne i32 %1069, 0
  br i1 %1070, label %1077, label %1071

1071:                                             ; preds = %1068
  %1072 = load i32, i32* %34, align 4
  %1073 = icmp eq i32 %1072, 3
  br i1 %1073, label %1077, label %1074

1074:                                             ; preds = %1071
  %1075 = load i32, i32* %34, align 4
  %1076 = icmp eq i32 %1075, 4
  br i1 %1076, label %1077, label %1082

1077:                                             ; preds = %1074, %1071, %1068
  %1078 = load i32*, i32** %32, align 8
  %1079 = load i32, i32* %34, align 4
  %1080 = load i32, i32* %36, align 4
  %1081 = load %struct.bits_counted*, %struct.bits_counted** %17, align 8
  call void @Count_sac_BitsCoeff(i32* %1078, i32 %1079, i32 %1080, %struct.bits_counted* %1081, i32 64)
  br label %1082

1082:                                             ; preds = %1077, %1074
  %1083 = load i32, i32* %37, align 4
  %1084 = icmp ne i32 %1083, 0
  br i1 %1084, label %1085, label %1089

1085:                                             ; preds = %1082
  %1086 = load i32*, i32** %33, align 8
  %1087 = load i32, i32* %37, align 4
  %1088 = load %struct.bits_counted*, %struct.bits_counted** %17, align 8
  call void @Count_sac_BitsCoeff(i32* %1086, i32 0, i32 %1087, %struct.bits_counted* %1088, i32 64)
  br label %1089

1089:                                             ; preds = %1085, %1082
  br label %1090

1090:                                             ; preds = %1089, %1010
  %1091 = load i32, i32* %50, align 4
  store i32 %1091, i32* %48, align 4
  br label %1092

1092:                                             ; preds = %1090, %928
  %1093 = load i32, i32* %45, align 4
  %1094 = add nsw i32 %1093, 1
  store i32 %1094, i32* %45, align 4
  %1095 = load i32, i32* %50, align 4
  %1096 = sitofp i32 %1095 to float
  %1097 = load float, float* %44, align 4
  %1098 = fadd float %1097, %1096
  store float %1098, float* %44, align 4
  %1099 = load %struct.pict*, %struct.pict** %18, align 8
  %1100 = getelementptr inbounds %struct.pict, %struct.pict* %1099, i32 0, i32 10
  %1101 = load i32, i32* %1100, align 4
  %1102 = icmp ne i32 %1101, 0
  br i1 %1102, label %1103, label %1108

1103:                                             ; preds = %1092
  %1104 = load i32, i32* %41, align 4
  %1105 = load i32, i32* %42, align 4
  %1106 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  %1107 = load %struct.pict_image*, %struct.pict_image** %19, align 8
  call void @ReconImage(i32 %1104, i32 %1105, %struct.mb_structure* %1106, %struct.pict_image* %1107)
  br label %1108

1108:                                             ; preds = %1103, %1092
  %1109 = load i32, i32* %41, align 4
  %1110 = load i32, i32* %42, align 4
  %1111 = load %struct.mb_structure*, %struct.mb_structure** %29, align 8
  %1112 = load %struct.pict_image*, %struct.pict_image** %20, align 8
  call void @ReconImage(i32 %1109, i32 %1110, %struct.mb_structure* %1111, %struct.pict_image* %1112)
  %1113 = load %struct.mb_structure*, %struct.mb_structure** %29, align 8
  %1114 = bitcast %struct.mb_structure* %1113 to i8*
  call void @free(i8* %1114) #8
  %1115 = load i32*, i32** %32, align 8
  %1116 = bitcast i32* %1115 to i8*
  call void @free(i8* %1116) #8
  %1117 = load %struct.pict*, %struct.pict** %18, align 8
  %1118 = getelementptr inbounds %struct.pict, %struct.pict* %1117, i32 0, i32 10
  %1119 = load i32, i32* %1118, align 4
  %1120 = icmp ne i32 %1119, 0
  br i1 %1120, label %1121, label %1126

1121:                                             ; preds = %1108
  %1122 = load i32*, i32** %33, align 8
  %1123 = bitcast i32* %1122 to i8*
  call void @free(i8* %1123) #8
  %1124 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  %1125 = bitcast %struct.mb_structure* %1124 to i8*
  call void @free(i8* %1125) #8
  br label %1126

1126:                                             ; preds = %1121, %1108
  br label %1127

1127:                                             ; preds = %1126
  %1128 = load i32, i32* %41, align 4
  %1129 = add nsw i32 %1128, 1
  store i32 %1129, i32* %41, align 4
  br label %547

1130:                                             ; preds = %547
  br label %1131

1131:                                             ; preds = %1130
  %1132 = load i32, i32* %42, align 4
  %1133 = add nsw i32 %1132, 1
  store i32 %1133, i32* %42, align 4
  br label %482

1134:                                             ; preds = %482
  %1135 = load float, float* %44, align 4
  %1136 = load i32, i32* %45, align 4
  %1137 = sitofp i32 %1136 to float
  %1138 = fdiv float %1135, %1137
  %1139 = load %struct.pict*, %struct.pict** %18, align 8
  %1140 = getelementptr inbounds %struct.pict, %struct.pict* %1139, i32 0, i32 19
  store float %1138, float* %1140, align 4
  %1141 = load i8*, i8** %23, align 8
  call void @free(i8* %1141) #8
  %1142 = load i32, i32* @mv_outside_frame, align 4
  %1143 = icmp ne i32 %1142, 0
  br i1 %1143, label %1144, label %1148

1144:                                             ; preds = %1134
  %1145 = load %struct.pict_image*, %struct.pict_image** %25, align 8
  %1146 = bitcast %struct.pict_image* %1145 to i8*
  call void @free(i8* %1146) #8
  %1147 = load %struct.pict_image*, %struct.pict_image** %26, align 8
  call void @FreeImage(%struct.pict_image* %1147)
  br label %1148

1148:                                             ; preds = %1144, %1134
  store i32 0, i32* %42, align 4
  br label %1149

1149:                                             ; preds = %1186, %1148
  %1150 = load i32, i32* %42, align 4
  %1151 = load i32, i32* @lines, align 4
  %1152 = ashr i32 %1151, 4
  %1153 = add nsw i32 %1152, 1
  %1154 = icmp slt i32 %1150, %1153
  br i1 %1154, label %1155, label %1189

1155:                                             ; preds = %1149
  store i32 0, i32* %41, align 4
  br label %1156

1156:                                             ; preds = %1182, %1155
  %1157 = load i32, i32* %41, align 4
  %1158 = load i32, i32* @pels, align 4
  %1159 = ashr i32 %1158, 4
  %1160 = add nsw i32 %1159, 2
  %1161 = icmp slt i32 %1157, %1160
  br i1 %1161, label %1162, label %1185

1162:                                             ; preds = %1156
  store i32 0, i32* %43, align 4
  br label %1163

1163:                                             ; preds = %1178, %1162
  %1164 = load i32, i32* %43, align 4
  %1165 = icmp slt i32 %1164, 6
  br i1 %1165, label %1166, label %1181

1166:                                             ; preds = %1163
  %1167 = load i32, i32* %43, align 4
  %1168 = sext i32 %1167 to i64
  %1169 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %27, i64 0, i64 %1168
  %1170 = load i32, i32* %42, align 4
  %1171 = sext i32 %1170 to i64
  %1172 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %1169, i64 0, i64 %1171
  %1173 = load i32, i32* %41, align 4
  %1174 = sext i32 %1173 to i64
  %1175 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %1172, i64 0, i64 %1174
  %1176 = load %struct.motionvector*, %struct.motionvector** %1175, align 8
  %1177 = bitcast %struct.motionvector* %1176 to i8*
  call void @free(i8* %1177) #8
  br label %1178

1178:                                             ; preds = %1166
  %1179 = load i32, i32* %43, align 4
  %1180 = add nsw i32 %1179, 1
  store i32 %1180, i32* %43, align 4
  br label %1163

1181:                                             ; preds = %1163
  br label %1182

1182:                                             ; preds = %1181
  %1183 = load i32, i32* %41, align 4
  %1184 = add nsw i32 %1183, 1
  store i32 %1184, i32* %41, align 4
  br label %1156

1185:                                             ; preds = %1156
  br label %1186

1186:                                             ; preds = %1185
  %1187 = load i32, i32* %42, align 4
  %1188 = add nsw i32 %1187, 1
  store i32 %1188, i32* %42, align 4
  br label %1149

1189:                                             ; preds = %1149
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #4

; Function Attrs: noinline nounwind uwtable
define dso_local void @MakeEdgeImage(i8* %0, i8* %1, i32 %2, i32 %3, i32 %4) #0 {
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i8*, align 8
  %19 = alloca i8*, align 8
  %20 = alloca i8*, align 8
  store i8* %0, i8** %6, align 8
  store i8* %1, i8** %7, align 8
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store i32 %4, i32* %10, align 4
  %21 = load i8*, i8** %7, align 8
  store i8* %21, i8** %13, align 8
  %22 = load i8*, i8** %6, align 8
  store i8* %22, i8** %17, align 8
  store i32 0, i32* %12, align 4
  br label %23

23:                                               ; preds = %43, %5
  %24 = load i32, i32* %12, align 4
  %25 = load i32, i32* %9, align 4
  %26 = icmp slt i32 %24, %25
  br i1 %26, label %27, label %46

27:                                               ; preds = %23
  %28 = load i8*, i8** %13, align 8
  %29 = load i8*, i8** %17, align 8
  %30 = load i32, i32* %8, align 4
  %31 = sext i32 %30 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %28, i8* align 1 %29, i64 %31, i1 false)
  %32 = load i32, i32* %8, align 4
  %33 = load i32, i32* %10, align 4
  %34 = shl i32 %33, 1
  %35 = add nsw i32 %32, %34
  %36 = load i8*, i8** %13, align 8
  %37 = sext i32 %35 to i64
  %38 = getelementptr inbounds i8, i8* %36, i64 %37
  store i8* %38, i8** %13, align 8
  %39 = load i32, i32* %8, align 4
  %40 = load i8*, i8** %17, align 8
  %41 = sext i32 %39 to i64
  %42 = getelementptr inbounds i8, i8* %40, i64 %41
  store i8* %42, i8** %17, align 8
  br label %43

43:                                               ; preds = %27
  %44 = load i32, i32* %12, align 4
  %45 = add nsw i32 %44, 1
  store i32 %45, i32* %12, align 4
  br label %23

46:                                               ; preds = %23
  %47 = load i8*, i8** %7, align 8
  %48 = getelementptr inbounds i8, i8* %47, i64 -1
  store i8* %48, i8** %13, align 8
  %49 = load i8*, i8** %6, align 8
  store i8* %49, i8** %17, align 8
  store i32 0, i32* %12, align 4
  br label %50

50:                                               ; preds = %96, %46
  %51 = load i32, i32* %12, align 4
  %52 = load i32, i32* %9, align 4
  %53 = icmp slt i32 %51, %52
  br i1 %53, label %54, label %99

54:                                               ; preds = %50
  store i32 0, i32* %11, align 4
  br label %55

55:                                               ; preds = %81, %54
  %56 = load i32, i32* %11, align 4
  %57 = load i32, i32* %10, align 4
  %58 = icmp slt i32 %56, %57
  br i1 %58, label %59, label %84

59:                                               ; preds = %55
  %60 = load i8*, i8** %17, align 8
  %61 = load i8, i8* %60, align 1
  %62 = load i8*, i8** %13, align 8
  %63 = load i32, i32* %11, align 4
  %64 = sext i32 %63 to i64
  %65 = sub i64 0, %64
  %66 = getelementptr inbounds i8, i8* %62, i64 %65
  store i8 %61, i8* %66, align 1
  %67 = load i8*, i8** %17, align 8
  %68 = load i32, i32* %8, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds i8, i8* %67, i64 %69
  %71 = getelementptr inbounds i8, i8* %70, i64 -1
  %72 = load i8, i8* %71, align 1
  %73 = load i8*, i8** %13, align 8
  %74 = load i32, i32* %8, align 4
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i8, i8* %73, i64 %75
  %77 = load i32, i32* %11, align 4
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds i8, i8* %76, i64 %78
  %80 = getelementptr inbounds i8, i8* %79, i64 1
  store i8 %72, i8* %80, align 1
  br label %81

81:                                               ; preds = %59
  %82 = load i32, i32* %11, align 4
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* %11, align 4
  br label %55

84:                                               ; preds = %55
  %85 = load i32, i32* %8, align 4
  %86 = load i32, i32* %10, align 4
  %87 = shl i32 %86, 1
  %88 = add nsw i32 %85, %87
  %89 = load i8*, i8** %13, align 8
  %90 = sext i32 %88 to i64
  %91 = getelementptr inbounds i8, i8* %89, i64 %90
  store i8* %91, i8** %13, align 8
  %92 = load i32, i32* %8, align 4
  %93 = load i8*, i8** %17, align 8
  %94 = sext i32 %92 to i64
  %95 = getelementptr inbounds i8, i8* %93, i64 %94
  store i8* %95, i8** %17, align 8
  br label %96

96:                                               ; preds = %84
  %97 = load i32, i32* %12, align 4
  %98 = add nsw i32 %97, 1
  store i32 %98, i32* %12, align 4
  br label %50

99:                                               ; preds = %50
  %100 = load i8*, i8** %7, align 8
  store i8* %100, i8** %13, align 8
  %101 = load i8*, i8** %7, align 8
  %102 = load i32, i32* %8, align 4
  %103 = load i32, i32* %10, align 4
  %104 = shl i32 %103, 1
  %105 = add nsw i32 %102, %104
  %106 = load i32, i32* %9, align 4
  %107 = sub nsw i32 %106, 1
  %108 = mul nsw i32 %105, %107
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i8, i8* %101, i64 %109
  store i8* %110, i8** %14, align 8
  %111 = load i8*, i8** %6, align 8
  store i8* %111, i8** %17, align 8
  %112 = load i8*, i8** %6, align 8
  %113 = load i32, i32* %8, align 4
  %114 = load i32, i32* %9, align 4
  %115 = sub nsw i32 %114, 1
  %116 = mul nsw i32 %113, %115
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds i8, i8* %112, i64 %117
  store i8* %118, i8** %18, align 8
  store i32 0, i32* %12, align 4
  br label %119

119:                                              ; preds = %166, %99
  %120 = load i32, i32* %12, align 4
  %121 = load i32, i32* %10, align 4
  %122 = icmp slt i32 %120, %121
  br i1 %122, label %123, label %169

123:                                              ; preds = %119
  %124 = load i8*, i8** %13, align 8
  %125 = load i32, i32* %8, align 4
  %126 = load i32, i32* %10, align 4
  %127 = shl i32 %126, 1
  %128 = add nsw i32 %125, %127
  %129 = sext i32 %128 to i64
  %130 = sub i64 0, %129
  %131 = getelementptr inbounds i8, i8* %124, i64 %130
  store i8* %131, i8** %13, align 8
  %132 = load i8*, i8** %14, align 8
  %133 = load i32, i32* %8, align 4
  %134 = load i32, i32* %10, align 4
  %135 = shl i32 %134, 1
  %136 = add nsw i32 %133, %135
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds i8, i8* %132, i64 %137
  store i8* %138, i8** %14, align 8
  store i32 0, i32* %11, align 4
  br label %139

139:                                              ; preds = %162, %123
  %140 = load i32, i32* %11, align 4
  %141 = load i32, i32* %8, align 4
  %142 = icmp slt i32 %140, %141
  br i1 %142, label %143, label %165

143:                                              ; preds = %139
  %144 = load i8*, i8** %17, align 8
  %145 = load i32, i32* %11, align 4
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds i8, i8* %144, i64 %146
  %148 = load i8, i8* %147, align 1
  %149 = load i8*, i8** %13, align 8
  %150 = load i32, i32* %11, align 4
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds i8, i8* %149, i64 %151
  store i8 %148, i8* %152, align 1
  %153 = load i8*, i8** %18, align 8
  %154 = load i32, i32* %11, align 4
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds i8, i8* %153, i64 %155
  %157 = load i8, i8* %156, align 1
  %158 = load i8*, i8** %14, align 8
  %159 = load i32, i32* %11, align 4
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds i8, i8* %158, i64 %160
  store i8 %157, i8* %161, align 1
  br label %162

162:                                              ; preds = %143
  %163 = load i32, i32* %11, align 4
  %164 = add nsw i32 %163, 1
  store i32 %164, i32* %11, align 4
  br label %139

165:                                              ; preds = %139
  br label %166

166:                                              ; preds = %165
  %167 = load i32, i32* %12, align 4
  %168 = add nsw i32 %167, 1
  store i32 %168, i32* %12, align 4
  br label %119

169:                                              ; preds = %119
  %170 = load i8*, i8** %7, align 8
  %171 = load i32, i32* %8, align 4
  %172 = load i32, i32* %10, align 4
  %173 = shl i32 %172, 1
  %174 = add nsw i32 %171, %173
  %175 = sext i32 %174 to i64
  %176 = sub i64 0, %175
  %177 = getelementptr inbounds i8, i8* %170, i64 %176
  %178 = getelementptr inbounds i8, i8* %177, i64 -1
  store i8* %178, i8** %13, align 8
  %179 = load i8*, i8** %13, align 8
  %180 = load i32, i32* %8, align 4
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds i8, i8* %179, i64 %181
  %183 = getelementptr inbounds i8, i8* %182, i64 1
  store i8* %183, i8** %14, align 8
  %184 = load i8*, i8** %7, align 8
  %185 = load i32, i32* %8, align 4
  %186 = load i32, i32* %10, align 4
  %187 = shl i32 %186, 1
  %188 = add nsw i32 %185, %187
  %189 = load i32, i32* %9, align 4
  %190 = mul nsw i32 %188, %189
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds i8, i8* %184, i64 %191
  %193 = getelementptr inbounds i8, i8* %192, i64 -1
  store i8* %193, i8** %15, align 8
  %194 = load i8*, i8** %15, align 8
  %195 = load i32, i32* %8, align 4
  %196 = sext i32 %195 to i64
  %197 = getelementptr inbounds i8, i8* %194, i64 %196
  %198 = getelementptr inbounds i8, i8* %197, i64 1
  store i8* %198, i8** %16, align 8
  %199 = load i8*, i8** %6, align 8
  store i8* %199, i8** %17, align 8
  %200 = load i8*, i8** %17, align 8
  %201 = load i32, i32* %8, align 4
  %202 = sext i32 %201 to i64
  %203 = getelementptr inbounds i8, i8* %200, i64 %202
  %204 = getelementptr inbounds i8, i8* %203, i64 -1
  store i8* %204, i8** %18, align 8
  %205 = load i8*, i8** %6, align 8
  %206 = load i32, i32* %8, align 4
  %207 = load i32, i32* %9, align 4
  %208 = sub nsw i32 %207, 1
  %209 = mul nsw i32 %206, %208
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds i8, i8* %205, i64 %210
  store i8* %211, i8** %19, align 8
  %212 = load i8*, i8** %19, align 8
  %213 = load i32, i32* %8, align 4
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds i8, i8* %212, i64 %214
  %216 = getelementptr inbounds i8, i8* %215, i64 -1
  store i8* %216, i8** %20, align 8
  store i32 0, i32* %12, align 4
  br label %217

217:                                              ; preds = %289, %169
  %218 = load i32, i32* %12, align 4
  %219 = load i32, i32* %10, align 4
  %220 = icmp slt i32 %218, %219
  br i1 %220, label %221, label %292

221:                                              ; preds = %217
  store i32 0, i32* %11, align 4
  br label %222

222:                                              ; preds = %253, %221
  %223 = load i32, i32* %11, align 4
  %224 = load i32, i32* %10, align 4
  %225 = icmp slt i32 %223, %224
  br i1 %225, label %226, label %256

226:                                              ; preds = %222
  %227 = load i8*, i8** %17, align 8
  %228 = load i8, i8* %227, align 1
  %229 = load i8*, i8** %13, align 8
  %230 = load i32, i32* %11, align 4
  %231 = sext i32 %230 to i64
  %232 = sub i64 0, %231
  %233 = getelementptr inbounds i8, i8* %229, i64 %232
  store i8 %228, i8* %233, align 1
  %234 = load i8*, i8** %18, align 8
  %235 = load i8, i8* %234, align 1
  %236 = load i8*, i8** %14, align 8
  %237 = load i32, i32* %11, align 4
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds i8, i8* %236, i64 %238
  store i8 %235, i8* %239, align 1
  %240 = load i8*, i8** %19, align 8
  %241 = load i8, i8* %240, align 1
  %242 = load i8*, i8** %15, align 8
  %243 = load i32, i32* %11, align 4
  %244 = sext i32 %243 to i64
  %245 = sub i64 0, %244
  %246 = getelementptr inbounds i8, i8* %242, i64 %245
  store i8 %241, i8* %246, align 1
  %247 = load i8*, i8** %20, align 8
  %248 = load i8, i8* %247, align 1
  %249 = load i8*, i8** %16, align 8
  %250 = load i32, i32* %11, align 4
  %251 = sext i32 %250 to i64
  %252 = getelementptr inbounds i8, i8* %249, i64 %251
  store i8 %248, i8* %252, align 1
  br label %253

253:                                              ; preds = %226
  %254 = load i32, i32* %11, align 4
  %255 = add nsw i32 %254, 1
  store i32 %255, i32* %11, align 4
  br label %222

256:                                              ; preds = %222
  %257 = load i8*, i8** %13, align 8
  %258 = load i32, i32* %8, align 4
  %259 = load i32, i32* %10, align 4
  %260 = shl i32 %259, 1
  %261 = add nsw i32 %258, %260
  %262 = sext i32 %261 to i64
  %263 = sub i64 0, %262
  %264 = getelementptr inbounds i8, i8* %257, i64 %263
  store i8* %264, i8** %13, align 8
  %265 = load i8*, i8** %14, align 8
  %266 = load i32, i32* %8, align 4
  %267 = load i32, i32* %10, align 4
  %268 = shl i32 %267, 1
  %269 = add nsw i32 %266, %268
  %270 = sext i32 %269 to i64
  %271 = sub i64 0, %270
  %272 = getelementptr inbounds i8, i8* %265, i64 %271
  store i8* %272, i8** %14, align 8
  %273 = load i8*, i8** %15, align 8
  %274 = load i32, i32* %8, align 4
  %275 = sext i32 %274 to i64
  %276 = getelementptr inbounds i8, i8* %273, i64 %275
  %277 = load i32, i32* %10, align 4
  %278 = shl i32 %277, 1
  %279 = sext i32 %278 to i64
  %280 = getelementptr inbounds i8, i8* %276, i64 %279
  store i8* %280, i8** %15, align 8
  %281 = load i8*, i8** %16, align 8
  %282 = load i32, i32* %8, align 4
  %283 = sext i32 %282 to i64
  %284 = getelementptr inbounds i8, i8* %281, i64 %283
  %285 = load i32, i32* %10, align 4
  %286 = shl i32 %285, 1
  %287 = sext i32 %286 to i64
  %288 = getelementptr inbounds i8, i8* %284, i64 %287
  store i8* %288, i8** %16, align 8
  br label %289

289:                                              ; preds = %256
  %290 = load i32, i32* %12, align 4
  %291 = add nsw i32 %290, 1
  store i32 %291, i32* %12, align 4
  br label %217

292:                                              ; preds = %217
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @InterpolateImage(i8* %0, i32 %1, i32 %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i8* %0, i8** %4, align 8
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  %12 = load i32, i32* %5, align 4
  %13 = sext i32 %12 to i64
  %14 = mul i64 1, %13
  %15 = load i32, i32* %6, align 4
  %16 = sext i32 %15 to i64
  %17 = mul i64 %14, %16
  %18 = mul i64 %17, 4
  %19 = call noalias i8* @malloc(i64 %18) #8
  store i8* %19, i8** %7, align 8
  %20 = load i8*, i8** %7, align 8
  store i8* %20, i8** %8, align 8
  %21 = load i8*, i8** %4, align 8
  store i8* %21, i8** %9, align 8
  store i32 0, i32* %11, align 4
  br label %22

22:                                               ; preds = %242, %3
  %23 = load i32, i32* %11, align 4
  %24 = load i32, i32* %6, align 4
  %25 = sub nsw i32 %24, 1
  %26 = icmp slt i32 %23, %25
  br i1 %26, label %27, label %245

27:                                               ; preds = %22
  store i32 0, i32* %10, align 4
  br label %28

28:                                               ; preds = %143, %27
  %29 = load i32, i32* %10, align 4
  %30 = load i32, i32* %5, align 4
  %31 = sub nsw i32 %30, 1
  %32 = icmp slt i32 %29, %31
  br i1 %32, label %33, label %146

33:                                               ; preds = %28
  %34 = load i8*, i8** %9, align 8
  %35 = load i32, i32* %10, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %34, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = load i8*, i8** %8, align 8
  %40 = load i32, i32* %10, align 4
  %41 = shl i32 %40, 1
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds i8, i8* %39, i64 %42
  store i8 %38, i8* %43, align 1
  %44 = load i8*, i8** %9, align 8
  %45 = load i32, i32* %10, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i8, i8* %44, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = load i8*, i8** %9, align 8
  %51 = load i32, i32* %10, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i8, i8* %50, i64 %52
  %54 = getelementptr inbounds i8, i8* %53, i64 1
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = add nsw i32 %49, %56
  %58 = add nsw i32 %57, 1
  %59 = ashr i32 %58, 1
  %60 = trunc i32 %59 to i8
  %61 = load i8*, i8** %8, align 8
  %62 = load i32, i32* %10, align 4
  %63 = shl i32 %62, 1
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds i8, i8* %61, i64 %64
  %66 = getelementptr inbounds i8, i8* %65, i64 1
  store i8 %60, i8* %66, align 1
  %67 = load i8*, i8** %9, align 8
  %68 = load i32, i32* %10, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds i8, i8* %67, i64 %69
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i32
  %73 = load i8*, i8** %9, align 8
  %74 = load i32, i32* %10, align 4
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i8, i8* %73, i64 %75
  %77 = load i32, i32* %5, align 4
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds i8, i8* %76, i64 %78
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = add nsw i32 %72, %81
  %83 = add nsw i32 %82, 1
  %84 = ashr i32 %83, 1
  %85 = trunc i32 %84 to i8
  %86 = load i8*, i8** %8, align 8
  %87 = load i32, i32* %10, align 4
  %88 = shl i32 %87, 1
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i8, i8* %86, i64 %89
  %91 = load i32, i32* %5, align 4
  %92 = shl i32 %91, 1
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds i8, i8* %90, i64 %93
  store i8 %85, i8* %94, align 1
  %95 = load i8*, i8** %9, align 8
  %96 = load i32, i32* %10, align 4
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds i8, i8* %95, i64 %97
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = load i8*, i8** %9, align 8
  %102 = load i32, i32* %10, align 4
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds i8, i8* %101, i64 %103
  %105 = getelementptr inbounds i8, i8* %104, i64 1
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = add nsw i32 %100, %107
  %109 = load i8*, i8** %9, align 8
  %110 = load i32, i32* %10, align 4
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds i8, i8* %109, i64 %111
  %113 = load i32, i32* %5, align 4
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds i8, i8* %112, i64 %114
  %116 = load i8, i8* %115, align 1
  %117 = zext i8 %116 to i32
  %118 = add nsw i32 %108, %117
  %119 = load i8*, i8** %9, align 8
  %120 = load i32, i32* %10, align 4
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds i8, i8* %119, i64 %121
  %123 = getelementptr inbounds i8, i8* %122, i64 1
  %124 = load i32, i32* %5, align 4
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds i8, i8* %123, i64 %125
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i32
  %129 = add nsw i32 %118, %128
  %130 = add nsw i32 %129, 2
  %131 = ashr i32 %130, 2
  %132 = trunc i32 %131 to i8
  %133 = load i8*, i8** %8, align 8
  %134 = load i32, i32* %10, align 4
  %135 = shl i32 %134, 1
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds i8, i8* %133, i64 %136
  %138 = getelementptr inbounds i8, i8* %137, i64 1
  %139 = load i32, i32* %5, align 4
  %140 = shl i32 %139, 1
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds i8, i8* %138, i64 %141
  store i8 %132, i8* %142, align 1
  br label %143

143:                                              ; preds = %33
  %144 = load i32, i32* %10, align 4
  %145 = add nsw i32 %144, 1
  store i32 %145, i32* %10, align 4
  br label %28

146:                                              ; preds = %28
  %147 = load i8*, i8** %9, align 8
  %148 = load i32, i32* %5, align 4
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds i8, i8* %147, i64 %149
  %151 = getelementptr inbounds i8, i8* %150, i64 -1
  %152 = load i8, i8* %151, align 1
  %153 = load i8*, i8** %8, align 8
  %154 = load i32, i32* %5, align 4
  %155 = shl i32 %154, 1
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds i8, i8* %153, i64 %156
  %158 = getelementptr inbounds i8, i8* %157, i64 -2
  store i8 %152, i8* %158, align 1
  %159 = load i8*, i8** %9, align 8
  %160 = load i32, i32* %5, align 4
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds i8, i8* %159, i64 %161
  %163 = getelementptr inbounds i8, i8* %162, i64 -1
  %164 = load i8, i8* %163, align 1
  %165 = load i8*, i8** %8, align 8
  %166 = load i32, i32* %5, align 4
  %167 = shl i32 %166, 1
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds i8, i8* %165, i64 %168
  %170 = getelementptr inbounds i8, i8* %169, i64 -1
  store i8 %164, i8* %170, align 1
  %171 = load i8*, i8** %9, align 8
  %172 = load i32, i32* %5, align 4
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds i8, i8* %171, i64 %173
  %175 = getelementptr inbounds i8, i8* %174, i64 -1
  %176 = load i8, i8* %175, align 1
  %177 = zext i8 %176 to i32
  %178 = load i8*, i8** %9, align 8
  %179 = load i32, i32* %5, align 4
  %180 = sext i32 %179 to i64
  %181 = getelementptr inbounds i8, i8* %178, i64 %180
  %182 = load i32, i32* %5, align 4
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds i8, i8* %181, i64 %183
  %185 = getelementptr inbounds i8, i8* %184, i64 -1
  %186 = load i8, i8* %185, align 1
  %187 = zext i8 %186 to i32
  %188 = add nsw i32 %177, %187
  %189 = add nsw i32 %188, 1
  %190 = ashr i32 %189, 1
  %191 = trunc i32 %190 to i8
  %192 = load i8*, i8** %8, align 8
  %193 = load i32, i32* %5, align 4
  %194 = shl i32 %193, 1
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds i8, i8* %192, i64 %195
  %197 = load i32, i32* %5, align 4
  %198 = shl i32 %197, 1
  %199 = sext i32 %198 to i64
  %200 = getelementptr inbounds i8, i8* %196, i64 %199
  %201 = getelementptr inbounds i8, i8* %200, i64 -2
  store i8 %191, i8* %201, align 1
  %202 = load i8*, i8** %9, align 8
  %203 = load i32, i32* %5, align 4
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds i8, i8* %202, i64 %204
  %206 = getelementptr inbounds i8, i8* %205, i64 -1
  %207 = load i8, i8* %206, align 1
  %208 = zext i8 %207 to i32
  %209 = load i8*, i8** %9, align 8
  %210 = load i32, i32* %5, align 4
  %211 = sext i32 %210 to i64
  %212 = getelementptr inbounds i8, i8* %209, i64 %211
  %213 = load i32, i32* %5, align 4
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds i8, i8* %212, i64 %214
  %216 = getelementptr inbounds i8, i8* %215, i64 -1
  %217 = load i8, i8* %216, align 1
  %218 = zext i8 %217 to i32
  %219 = add nsw i32 %208, %218
  %220 = add nsw i32 %219, 1
  %221 = ashr i32 %220, 1
  %222 = trunc i32 %221 to i8
  %223 = load i8*, i8** %8, align 8
  %224 = load i32, i32* %5, align 4
  %225 = shl i32 %224, 1
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds i8, i8* %223, i64 %226
  %228 = load i32, i32* %5, align 4
  %229 = shl i32 %228, 1
  %230 = sext i32 %229 to i64
  %231 = getelementptr inbounds i8, i8* %227, i64 %230
  %232 = getelementptr inbounds i8, i8* %231, i64 -1
  store i8 %222, i8* %232, align 1
  %233 = load i32, i32* %5, align 4
  %234 = shl i32 %233, 2
  %235 = load i8*, i8** %8, align 8
  %236 = sext i32 %234 to i64
  %237 = getelementptr inbounds i8, i8* %235, i64 %236
  store i8* %237, i8** %8, align 8
  %238 = load i32, i32* %5, align 4
  %239 = load i8*, i8** %9, align 8
  %240 = sext i32 %238 to i64
  %241 = getelementptr inbounds i8, i8* %239, i64 %240
  store i8* %241, i8** %9, align 8
  br label %242

242:                                              ; preds = %146
  %243 = load i32, i32* %11, align 4
  %244 = add nsw i32 %243, 1
  store i32 %244, i32* %11, align 4
  br label %22

245:                                              ; preds = %22
  store i32 0, i32* %10, align 4
  br label %246

246:                                              ; preds = %326, %245
  %247 = load i32, i32* %10, align 4
  %248 = load i32, i32* %5, align 4
  %249 = sub nsw i32 %248, 1
  %250 = icmp slt i32 %247, %249
  br i1 %250, label %251, label %329

251:                                              ; preds = %246
  %252 = load i8*, i8** %9, align 8
  %253 = load i32, i32* %10, align 4
  %254 = sext i32 %253 to i64
  %255 = getelementptr inbounds i8, i8* %252, i64 %254
  %256 = load i8, i8* %255, align 1
  %257 = load i8*, i8** %8, align 8
  %258 = load i32, i32* %10, align 4
  %259 = shl i32 %258, 1
  %260 = sext i32 %259 to i64
  %261 = getelementptr inbounds i8, i8* %257, i64 %260
  store i8 %256, i8* %261, align 1
  %262 = load i8*, i8** %9, align 8
  %263 = load i32, i32* %10, align 4
  %264 = sext i32 %263 to i64
  %265 = getelementptr inbounds i8, i8* %262, i64 %264
  %266 = load i8, i8* %265, align 1
  %267 = zext i8 %266 to i32
  %268 = load i8*, i8** %9, align 8
  %269 = load i32, i32* %10, align 4
  %270 = sext i32 %269 to i64
  %271 = getelementptr inbounds i8, i8* %268, i64 %270
  %272 = getelementptr inbounds i8, i8* %271, i64 1
  %273 = load i8, i8* %272, align 1
  %274 = zext i8 %273 to i32
  %275 = add nsw i32 %267, %274
  %276 = add nsw i32 %275, 1
  %277 = ashr i32 %276, 1
  %278 = trunc i32 %277 to i8
  %279 = load i8*, i8** %8, align 8
  %280 = load i32, i32* %10, align 4
  %281 = shl i32 %280, 1
  %282 = sext i32 %281 to i64
  %283 = getelementptr inbounds i8, i8* %279, i64 %282
  %284 = getelementptr inbounds i8, i8* %283, i64 1
  store i8 %278, i8* %284, align 1
  %285 = load i8*, i8** %9, align 8
  %286 = load i32, i32* %10, align 4
  %287 = sext i32 %286 to i64
  %288 = getelementptr inbounds i8, i8* %285, i64 %287
  %289 = load i8, i8* %288, align 1
  %290 = load i8*, i8** %8, align 8
  %291 = load i32, i32* %5, align 4
  %292 = shl i32 %291, 1
  %293 = sext i32 %292 to i64
  %294 = getelementptr inbounds i8, i8* %290, i64 %293
  %295 = load i32, i32* %10, align 4
  %296 = shl i32 %295, 1
  %297 = sext i32 %296 to i64
  %298 = getelementptr inbounds i8, i8* %294, i64 %297
  store i8 %289, i8* %298, align 1
  %299 = load i8*, i8** %9, align 8
  %300 = load i32, i32* %10, align 4
  %301 = sext i32 %300 to i64
  %302 = getelementptr inbounds i8, i8* %299, i64 %301
  %303 = load i8, i8* %302, align 1
  %304 = zext i8 %303 to i32
  %305 = load i8*, i8** %9, align 8
  %306 = load i32, i32* %10, align 4
  %307 = sext i32 %306 to i64
  %308 = getelementptr inbounds i8, i8* %305, i64 %307
  %309 = getelementptr inbounds i8, i8* %308, i64 1
  %310 = load i8, i8* %309, align 1
  %311 = zext i8 %310 to i32
  %312 = add nsw i32 %304, %311
  %313 = add nsw i32 %312, 1
  %314 = ashr i32 %313, 1
  %315 = trunc i32 %314 to i8
  %316 = load i8*, i8** %8, align 8
  %317 = load i32, i32* %5, align 4
  %318 = shl i32 %317, 1
  %319 = sext i32 %318 to i64
  %320 = getelementptr inbounds i8, i8* %316, i64 %319
  %321 = load i32, i32* %10, align 4
  %322 = shl i32 %321, 1
  %323 = sext i32 %322 to i64
  %324 = getelementptr inbounds i8, i8* %320, i64 %323
  %325 = getelementptr inbounds i8, i8* %324, i64 1
  store i8 %315, i8* %325, align 1
  br label %326

326:                                              ; preds = %251
  %327 = load i32, i32* %10, align 4
  %328 = add nsw i32 %327, 1
  store i32 %328, i32* %10, align 4
  br label %246

329:                                              ; preds = %246
  %330 = load i8*, i8** %9, align 8
  %331 = load i32, i32* %5, align 4
  %332 = sext i32 %331 to i64
  %333 = getelementptr inbounds i8, i8* %330, i64 %332
  %334 = getelementptr inbounds i8, i8* %333, i64 -1
  %335 = load i8, i8* %334, align 1
  %336 = load i8*, i8** %8, align 8
  %337 = load i32, i32* %5, align 4
  %338 = shl i32 %337, 1
  %339 = sext i32 %338 to i64
  %340 = getelementptr inbounds i8, i8* %336, i64 %339
  %341 = getelementptr inbounds i8, i8* %340, i64 -2
  store i8 %335, i8* %341, align 1
  %342 = load i8*, i8** %9, align 8
  %343 = load i32, i32* %5, align 4
  %344 = sext i32 %343 to i64
  %345 = getelementptr inbounds i8, i8* %342, i64 %344
  %346 = getelementptr inbounds i8, i8* %345, i64 -1
  %347 = load i8, i8* %346, align 1
  %348 = load i8*, i8** %8, align 8
  %349 = load i32, i32* %5, align 4
  %350 = shl i32 %349, 1
  %351 = sext i32 %350 to i64
  %352 = getelementptr inbounds i8, i8* %348, i64 %351
  %353 = getelementptr inbounds i8, i8* %352, i64 -1
  store i8 %347, i8* %353, align 1
  %354 = load i8*, i8** %9, align 8
  %355 = load i32, i32* %5, align 4
  %356 = sext i32 %355 to i64
  %357 = getelementptr inbounds i8, i8* %354, i64 %356
  %358 = getelementptr inbounds i8, i8* %357, i64 -1
  %359 = load i8, i8* %358, align 1
  %360 = load i8*, i8** %8, align 8
  %361 = load i32, i32* %5, align 4
  %362 = shl i32 %361, 2
  %363 = sext i32 %362 to i64
  %364 = getelementptr inbounds i8, i8* %360, i64 %363
  %365 = getelementptr inbounds i8, i8* %364, i64 -2
  store i8 %359, i8* %365, align 1
  %366 = load i8*, i8** %9, align 8
  %367 = load i32, i32* %5, align 4
  %368 = sext i32 %367 to i64
  %369 = getelementptr inbounds i8, i8* %366, i64 %368
  %370 = getelementptr inbounds i8, i8* %369, i64 -1
  %371 = load i8, i8* %370, align 1
  %372 = load i8*, i8** %8, align 8
  %373 = load i32, i32* %5, align 4
  %374 = shl i32 %373, 2
  %375 = sext i32 %374 to i64
  %376 = getelementptr inbounds i8, i8* %372, i64 %375
  %377 = getelementptr inbounds i8, i8* %376, i64 -1
  store i8 %371, i8* %377, align 1
  %378 = load i8*, i8** %7, align 8
  ret i8* %378
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @MotionEstimatePicture(i8* %0, i8* %1, i8* %2, i32 %3, [73 x [90 x %struct.motionvector*]]* %4, i32 %5) #0 {
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca [73 x [90 x %struct.motionvector*]]*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca [16 x [16 x i32]], align 16
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca %struct.motionvector*, align 8
  %26 = alloca %struct.motionvector*, align 8
  %27 = alloca %struct.motionvector*, align 8
  %28 = alloca %struct.motionvector*, align 8
  %29 = alloca %struct.motionvector*, align 8
  store i8* %0, i8** %7, align 8
  store i8* %1, i8** %8, align 8
  store i8* %2, i8** %9, align 8
  store i32 %3, i32* %10, align 4
  store [73 x [90 x %struct.motionvector*]]* %4, [73 x [90 x %struct.motionvector*]]** %11, align 8
  store i32 %5, i32* %12, align 4
  store i32 2147483647, i32* %21, align 4
  store i32 0, i32* %14, align 4
  br label %30

30:                                               ; preds = %333, %6
  %31 = load i32, i32* %14, align 4
  %32 = load i32, i32* @lines, align 4
  %33 = sdiv i32 %32, 16
  %34 = icmp slt i32 %31, %33
  br i1 %34, label %35, label %336

35:                                               ; preds = %30
  store i32 0, i32* %24, align 4
  %36 = load i32, i32* %12, align 4
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %38, label %44

38:                                               ; preds = %35
  %39 = load i32, i32* %14, align 4
  %40 = load i32, i32* %12, align 4
  %41 = srem i32 %39, %40
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %44

43:                                               ; preds = %38
  store i32 1, i32* %24, align 4
  br label %44

44:                                               ; preds = %43, %38, %35
  store i32 0, i32* %13, align 4
  br label %45

45:                                               ; preds = %329, %44
  %46 = load i32, i32* %13, align 4
  %47 = load i32, i32* @pels, align 4
  %48 = sdiv i32 %47, 16
  %49 = icmp slt i32 %46, %48
  br i1 %49, label %50, label %332

50:                                               ; preds = %45
  store i32 0, i32* %15, align 4
  br label %51

51:                                               ; preds = %69, %50
  %52 = load i32, i32* %15, align 4
  %53 = icmp slt i32 %52, 6
  br i1 %53, label %54, label %72

54:                                               ; preds = %51
  %55 = call noalias i8* @malloc(i64 24) #8
  %56 = bitcast i8* %55 to %struct.motionvector*
  %57 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %11, align 8
  %58 = load i32, i32* %15, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %57, i64 %59
  %61 = load i32, i32* %14, align 4
  %62 = add nsw i32 %61, 1
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %60, i64 0, i64 %63
  %65 = load i32, i32* %13, align 4
  %66 = add nsw i32 %65, 1
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %64, i64 0, i64 %67
  store %struct.motionvector* %56, %struct.motionvector** %68, align 8
  br label %69

69:                                               ; preds = %54
  %70 = load i32, i32* %15, align 4
  %71 = add nsw i32 %70, 1
  store i32 %71, i32* %15, align 4
  br label %51

72:                                               ; preds = %51
  %73 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %11, align 8
  %74 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %73, i64 0
  %75 = load i32, i32* %14, align 4
  %76 = add nsw i32 %75, 1
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %74, i64 0, i64 %77
  %79 = load i32, i32* %13, align 4
  %80 = add nsw i32 %79, 1
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %78, i64 0, i64 %81
  %83 = load %struct.motionvector*, %struct.motionvector** %82, align 8
  store %struct.motionvector* %83, %struct.motionvector** %25, align 8
  %84 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %11, align 8
  %85 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %84, i64 1
  %86 = load i32, i32* %14, align 4
  %87 = add nsw i32 %86, 1
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %85, i64 0, i64 %88
  %90 = load i32, i32* %13, align 4
  %91 = add nsw i32 %90, 1
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %89, i64 0, i64 %92
  %94 = load %struct.motionvector*, %struct.motionvector** %93, align 8
  store %struct.motionvector* %94, %struct.motionvector** %26, align 8
  %95 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %11, align 8
  %96 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %95, i64 2
  %97 = load i32, i32* %14, align 4
  %98 = add nsw i32 %97, 1
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %96, i64 0, i64 %99
  %101 = load i32, i32* %13, align 4
  %102 = add nsw i32 %101, 1
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %100, i64 0, i64 %103
  %105 = load %struct.motionvector*, %struct.motionvector** %104, align 8
  store %struct.motionvector* %105, %struct.motionvector** %27, align 8
  %106 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %11, align 8
  %107 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %106, i64 3
  %108 = load i32, i32* %14, align 4
  %109 = add nsw i32 %108, 1
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %107, i64 0, i64 %110
  %112 = load i32, i32* %13, align 4
  %113 = add nsw i32 %112, 1
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %111, i64 0, i64 %114
  %116 = load %struct.motionvector*, %struct.motionvector** %115, align 8
  store %struct.motionvector* %116, %struct.motionvector** %28, align 8
  %117 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %11, align 8
  %118 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %117, i64 4
  %119 = load i32, i32* %14, align 4
  %120 = add nsw i32 %119, 1
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %118, i64 0, i64 %121
  %123 = load i32, i32* %13, align 4
  %124 = add nsw i32 %123, 1
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %122, i64 0, i64 %125
  %127 = load %struct.motionvector*, %struct.motionvector** %126, align 8
  store %struct.motionvector* %127, %struct.motionvector** %29, align 8
  %128 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %11, align 8
  %129 = load i32, i32* %13, align 4
  %130 = add nsw i32 %129, 1
  %131 = load i32, i32* %14, align 4
  %132 = add nsw i32 %131, 1
  %133 = load i32, i32* %24, align 4
  call void @FindPMV([73 x [90 x %struct.motionvector*]]* %128, i32 %130, i32 %132, i32* %16, i32* %17, i32 0, i32 %133, i32 0)
  %134 = load i32, i32* @long_vectors, align 4
  %135 = icmp ne i32 %134, 0
  br i1 %135, label %136, label %141

136:                                              ; preds = %72
  %137 = load i32, i32* %16, align 4
  %138 = sdiv i32 %137, 2
  store i32 %138, i32* %18, align 4
  %139 = load i32, i32* %17, align 4
  %140 = sdiv i32 %139, 2
  store i32 %140, i32* %19, align 4
  br label %142

141:                                              ; preds = %72
  store i32 0, i32* %19, align 4
  store i32 0, i32* %18, align 4
  br label %142

142:                                              ; preds = %141, %136
  %143 = load i8*, i8** %7, align 8
  %144 = load i8*, i8** %8, align 8
  %145 = load i32, i32* %13, align 4
  %146 = mul nsw i32 %145, 16
  %147 = load i32, i32* %14, align 4
  %148 = mul nsw i32 %147, 16
  %149 = load i32, i32* %18, align 4
  %150 = load i32, i32* %19, align 4
  %151 = load i32, i32* %10, align 4
  %152 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %11, align 8
  call void @MotionEstimation(i8* %143, i8* %144, i32 %146, i32 %148, i32 %149, i32 %150, i32 %151, [73 x [90 x %struct.motionvector*]]* %152, i32* %23)
  %153 = load %struct.motionvector*, %struct.motionvector** %25, align 8
  %154 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %153, i32 0, i32 4
  %155 = load i32, i32* %154, align 4
  store i32 %155, i32* %22, align 4
  %156 = load i32, i32* @advanced, align 4
  %157 = icmp ne i32 %156, 0
  br i1 %157, label %158, label %174

158:                                              ; preds = %142
  %159 = load %struct.motionvector*, %struct.motionvector** %26, align 8
  %160 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %159, i32 0, i32 4
  %161 = load i32, i32* %160, align 4
  %162 = load %struct.motionvector*, %struct.motionvector** %27, align 8
  %163 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %162, i32 0, i32 4
  %164 = load i32, i32* %163, align 4
  %165 = add nsw i32 %161, %164
  %166 = load %struct.motionvector*, %struct.motionvector** %28, align 8
  %167 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %166, i32 0, i32 4
  %168 = load i32, i32* %167, align 4
  %169 = add nsw i32 %165, %168
  %170 = load %struct.motionvector*, %struct.motionvector** %29, align 8
  %171 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %170, i32 0, i32 4
  %172 = load i32, i32* %171, align 4
  %173 = add nsw i32 %169, %172
  store i32 %173, i32* %21, align 4
  br label %174

174:                                              ; preds = %158, %142
  %175 = load i8*, i8** %7, align 8
  %176 = load i32, i32* %13, align 4
  %177 = mul nsw i32 %176, 16
  %178 = load i32, i32* %14, align 4
  %179 = mul nsw i32 %178, 16
  %180 = load i32, i32* %21, align 4
  %181 = load i32, i32* %22, align 4
  %182 = icmp slt i32 %180, %181
  br i1 %182, label %183, label %185

183:                                              ; preds = %174
  %184 = load i32, i32* %21, align 4
  br label %187

185:                                              ; preds = %174
  %186 = load i32, i32* %22, align 4
  br label %187

187:                                              ; preds = %185, %183
  %188 = phi i32 [ %184, %183 ], [ %186, %185 ]
  %189 = call i32 @ChooseMode(i8* %175, i32 %177, i32 %179, i32 %188)
  %190 = load %struct.motionvector*, %struct.motionvector** %25, align 8
  %191 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %190, i32 0, i32 5
  store i32 %189, i32* %191, align 4
  %192 = load %struct.motionvector*, %struct.motionvector** %25, align 8
  %193 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %192, i32 0, i32 5
  %194 = load i32, i32* %193, align 4
  %195 = icmp ne i32 %194, 3
  br i1 %195, label %196, label %306

196:                                              ; preds = %187
  %197 = load i32, i32* %13, align 4
  %198 = mul nsw i32 %197, 16
  %199 = load i32, i32* %14, align 4
  %200 = mul nsw i32 %199, 16
  %201 = load i8*, i8** %7, align 8
  %202 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %20, i64 0, i64 0
  call void @FindMB(i32 %198, i32 %200, i8* %201, [16 x i32]* %202)
  %203 = load i32, i32* %13, align 4
  %204 = mul nsw i32 %203, 16
  %205 = load i32, i32* %14, align 4
  %206 = mul nsw i32 %205, 16
  %207 = load %struct.motionvector*, %struct.motionvector** %25, align 8
  %208 = load i8*, i8** %9, align 8
  %209 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %20, i64 0, i64 0
  %210 = getelementptr inbounds [16 x i32], [16 x i32]* %209, i64 0, i64 0
  call void @FindHalfPel(i32 %204, i32 %206, %struct.motionvector* %207, i8* %208, i32* %210, i32 16, i32 0)
  %211 = load %struct.motionvector*, %struct.motionvector** %25, align 8
  %212 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %211, i32 0, i32 4
  %213 = load i32, i32* %212, align 4
  store i32 %213, i32* %22, align 4
  %214 = load i32, i32* @advanced, align 4
  %215 = icmp ne i32 %214, 0
  br i1 %215, label %216, label %291

216:                                              ; preds = %196
  %217 = load i32, i32* %13, align 4
  %218 = mul nsw i32 %217, 16
  %219 = load i32, i32* %14, align 4
  %220 = mul nsw i32 %219, 16
  %221 = load %struct.motionvector*, %struct.motionvector** %26, align 8
  %222 = load i8*, i8** %9, align 8
  %223 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %20, i64 0, i64 0
  %224 = getelementptr inbounds [16 x i32], [16 x i32]* %223, i64 0, i64 0
  call void @FindHalfPel(i32 %218, i32 %220, %struct.motionvector* %221, i8* %222, i32* %224, i32 8, i32 0)
  %225 = load i32, i32* %13, align 4
  %226 = mul nsw i32 %225, 16
  %227 = load i32, i32* %14, align 4
  %228 = mul nsw i32 %227, 16
  %229 = load %struct.motionvector*, %struct.motionvector** %27, align 8
  %230 = load i8*, i8** %9, align 8
  %231 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %20, i64 0, i64 0
  %232 = getelementptr inbounds [16 x i32], [16 x i32]* %231, i64 0, i64 8
  call void @FindHalfPel(i32 %226, i32 %228, %struct.motionvector* %229, i8* %230, i32* %232, i32 8, i32 1)
  %233 = load i32, i32* %13, align 4
  %234 = mul nsw i32 %233, 16
  %235 = load i32, i32* %14, align 4
  %236 = mul nsw i32 %235, 16
  %237 = load %struct.motionvector*, %struct.motionvector** %28, align 8
  %238 = load i8*, i8** %9, align 8
  %239 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %20, i64 0, i64 8
  %240 = getelementptr inbounds [16 x i32], [16 x i32]* %239, i64 0, i64 0
  call void @FindHalfPel(i32 %234, i32 %236, %struct.motionvector* %237, i8* %238, i32* %240, i32 8, i32 2)
  %241 = load i32, i32* %13, align 4
  %242 = mul nsw i32 %241, 16
  %243 = load i32, i32* %14, align 4
  %244 = mul nsw i32 %243, 16
  %245 = load %struct.motionvector*, %struct.motionvector** %29, align 8
  %246 = load i8*, i8** %9, align 8
  %247 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %20, i64 0, i64 8
  %248 = getelementptr inbounds [16 x i32], [16 x i32]* %247, i64 0, i64 8
  call void @FindHalfPel(i32 %242, i32 %244, %struct.motionvector* %245, i8* %246, i32* %248, i32 8, i32 3)
  %249 = load %struct.motionvector*, %struct.motionvector** %26, align 8
  %250 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %249, i32 0, i32 4
  %251 = load i32, i32* %250, align 4
  %252 = load %struct.motionvector*, %struct.motionvector** %27, align 8
  %253 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %252, i32 0, i32 4
  %254 = load i32, i32* %253, align 4
  %255 = add nsw i32 %251, %254
  %256 = load %struct.motionvector*, %struct.motionvector** %28, align 8
  %257 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %256, i32 0, i32 4
  %258 = load i32, i32* %257, align 4
  %259 = add nsw i32 %255, %258
  %260 = load %struct.motionvector*, %struct.motionvector** %29, align 8
  %261 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %260, i32 0, i32 4
  %262 = load i32, i32* %261, align 4
  %263 = add nsw i32 %259, %262
  store i32 %263, i32* %21, align 4
  %264 = load i32, i32* %21, align 4
  %265 = add nsw i32 %264, 200
  store i32 %265, i32* %21, align 4
  %266 = load i32, i32* %23, align 4
  %267 = load i32, i32* %21, align 4
  %268 = icmp slt i32 %266, %267
  br i1 %268, label %269, label %282

269:                                              ; preds = %216
  %270 = load i32, i32* %23, align 4
  %271 = load i32, i32* %22, align 4
  %272 = icmp slt i32 %270, %271
  br i1 %272, label %273, label %282

273:                                              ; preds = %269
  %274 = load %struct.motionvector*, %struct.motionvector** %25, align 8
  %275 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %274, i32 0, i32 1
  store i32 0, i32* %275, align 4
  %276 = load %struct.motionvector*, %struct.motionvector** %25, align 8
  %277 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %276, i32 0, i32 0
  store i32 0, i32* %277, align 4
  %278 = load %struct.motionvector*, %struct.motionvector** %25, align 8
  %279 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %278, i32 0, i32 3
  store i32 0, i32* %279, align 4
  %280 = load %struct.motionvector*, %struct.motionvector** %25, align 8
  %281 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %280, i32 0, i32 2
  store i32 0, i32* %281, align 4
  br label %290

282:                                              ; preds = %269, %216
  %283 = load i32, i32* %21, align 4
  %284 = load i32, i32* %22, align 4
  %285 = icmp slt i32 %283, %284
  br i1 %285, label %286, label %289

286:                                              ; preds = %282
  %287 = load %struct.motionvector*, %struct.motionvector** %25, align 8
  %288 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %287, i32 0, i32 5
  store i32 2, i32* %288, align 4
  br label %289

289:                                              ; preds = %286, %282
  br label %290

290:                                              ; preds = %289, %273
  br label %305

291:                                              ; preds = %196
  %292 = load i32, i32* %23, align 4
  %293 = load i32, i32* %22, align 4
  %294 = icmp slt i32 %292, %293
  br i1 %294, label %295, label %304

295:                                              ; preds = %291
  %296 = load %struct.motionvector*, %struct.motionvector** %25, align 8
  %297 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %296, i32 0, i32 1
  store i32 0, i32* %297, align 4
  %298 = load %struct.motionvector*, %struct.motionvector** %25, align 8
  %299 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %298, i32 0, i32 0
  store i32 0, i32* %299, align 4
  %300 = load %struct.motionvector*, %struct.motionvector** %25, align 8
  %301 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %300, i32 0, i32 3
  store i32 0, i32* %301, align 4
  %302 = load %struct.motionvector*, %struct.motionvector** %25, align 8
  %303 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %302, i32 0, i32 2
  store i32 0, i32* %303, align 4
  br label %304

304:                                              ; preds = %295, %291
  br label %305

305:                                              ; preds = %304, %290
  br label %328

306:                                              ; preds = %187
  store i32 0, i32* %15, align 4
  br label %307

307:                                              ; preds = %324, %306
  %308 = load i32, i32* %15, align 4
  %309 = icmp slt i32 %308, 5
  br i1 %309, label %310, label %327

310:                                              ; preds = %307
  %311 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %11, align 8
  %312 = load i32, i32* %15, align 4
  %313 = sext i32 %312 to i64
  %314 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %311, i64 %313
  %315 = load i32, i32* %14, align 4
  %316 = add nsw i32 %315, 1
  %317 = sext i32 %316 to i64
  %318 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %314, i64 0, i64 %317
  %319 = load i32, i32* %13, align 4
  %320 = add nsw i32 %319, 1
  %321 = sext i32 %320 to i64
  %322 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %318, i64 0, i64 %321
  %323 = load %struct.motionvector*, %struct.motionvector** %322, align 8
  call void @ZeroVec(%struct.motionvector* %323)
  br label %324

324:                                              ; preds = %310
  %325 = load i32, i32* %15, align 4
  %326 = add nsw i32 %325, 1
  store i32 %326, i32* %15, align 4
  br label %307

327:                                              ; preds = %307
  br label %328

328:                                              ; preds = %327, %305
  br label %329

329:                                              ; preds = %328
  %330 = load i32, i32* %13, align 4
  %331 = add nsw i32 %330, 1
  store i32 %331, i32* %13, align 4
  br label %45

332:                                              ; preds = %45
  br label %333

333:                                              ; preds = %332
  %334 = load i32, i32* %14, align 4
  %335 = add nsw i32 %334, 1
  store i32 %335, i32* %14, align 4
  br label %30

336:                                              ; preds = %30
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @FillLumBlock(i32 %0, i32 %1, %struct.pict_image* %2, %struct.mb_structure* %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca %struct.pict_image*, align 8
  %8 = alloca %struct.mb_structure*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i32 %1, i32* %6, align 4
  store %struct.pict_image* %2, %struct.pict_image** %7, align 8
  store %struct.mb_structure* %3, %struct.mb_structure** %8, align 8
  store i32 0, i32* %9, align 4
  br label %11

11:                                               ; preds = %49, %4
  %12 = load i32, i32* %9, align 4
  %13 = icmp slt i32 %12, 16
  br i1 %13, label %14, label %52

14:                                               ; preds = %11
  store i32 0, i32* %10, align 4
  br label %15

15:                                               ; preds = %45, %14
  %16 = load i32, i32* %10, align 4
  %17 = icmp slt i32 %16, 16
  br i1 %17, label %18, label %48

18:                                               ; preds = %15
  %19 = load %struct.pict_image*, %struct.pict_image** %7, align 8
  %20 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %19, i32 0, i32 0
  %21 = load i8*, i8** %20, align 8
  %22 = load i32, i32* %5, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i8, i8* %21, i64 %23
  %25 = load i32, i32* %10, align 4
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i8, i8* %24, i64 %26
  %28 = load i32, i32* %6, align 4
  %29 = load i32, i32* %9, align 4
  %30 = add nsw i32 %28, %29
  %31 = load i32, i32* @pels, align 4
  %32 = mul nsw i32 %30, %31
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i8, i8* %27, i64 %33
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i32
  %37 = load %struct.mb_structure*, %struct.mb_structure** %8, align 8
  %38 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %37, i32 0, i32 0
  %39 = load i32, i32* %9, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %38, i64 0, i64 %40
  %42 = load i32, i32* %10, align 4
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds [16 x i32], [16 x i32]* %41, i64 0, i64 %43
  store i32 %36, i32* %44, align 4
  br label %45

45:                                               ; preds = %18
  %46 = load i32, i32* %10, align 4
  %47 = add nsw i32 %46, 1
  store i32 %47, i32* %10, align 4
  br label %15

48:                                               ; preds = %15
  br label %49

49:                                               ; preds = %48
  %50 = load i32, i32* %9, align 4
  %51 = add nsw i32 %50, 1
  store i32 %51, i32* %9, align 4
  br label %11

52:                                               ; preds = %11
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @FillChromBlock(i32 %0, i32 %1, %struct.pict_image* %2, %struct.mb_structure* %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca %struct.pict_image*, align 8
  %8 = alloca %struct.mb_structure*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i32 %1, i32* %6, align 4
  store %struct.pict_image* %2, %struct.pict_image** %7, align 8
  store %struct.mb_structure* %3, %struct.mb_structure** %8, align 8
  %13 = load i32, i32* %5, align 4
  %14 = ashr i32 %13, 1
  store i32 %14, i32* %11, align 4
  %15 = load i32, i32* %6, align 4
  %16 = ashr i32 %15, 1
  store i32 %16, i32* %12, align 4
  store i32 0, i32* %9, align 4
  br label %17

17:                                               ; preds = %81, %4
  %18 = load i32, i32* %9, align 4
  %19 = icmp slt i32 %18, 8
  br i1 %19, label %20, label %84

20:                                               ; preds = %17
  store i32 0, i32* %10, align 4
  br label %21

21:                                               ; preds = %77, %20
  %22 = load i32, i32* %10, align 4
  %23 = icmp slt i32 %22, 8
  br i1 %23, label %24, label %80

24:                                               ; preds = %21
  %25 = load %struct.pict_image*, %struct.pict_image** %7, align 8
  %26 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %25, i32 0, i32 1
  %27 = load i8*, i8** %26, align 8
  %28 = load i32, i32* %11, align 4
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i8, i8* %27, i64 %29
  %31 = load i32, i32* %10, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i8, i8* %30, i64 %32
  %34 = load i32, i32* %12, align 4
  %35 = load i32, i32* %9, align 4
  %36 = add nsw i32 %34, %35
  %37 = load i32, i32* @cpels, align 4
  %38 = mul nsw i32 %36, %37
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %33, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = load %struct.mb_structure*, %struct.mb_structure** %8, align 8
  %44 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %43, i32 0, i32 1
  %45 = load i32, i32* %9, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %44, i64 0, i64 %46
  %48 = load i32, i32* %10, align 4
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds [8 x i32], [8 x i32]* %47, i64 0, i64 %49
  store i32 %42, i32* %50, align 4
  %51 = load %struct.pict_image*, %struct.pict_image** %7, align 8
  %52 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %51, i32 0, i32 2
  %53 = load i8*, i8** %52, align 8
  %54 = load i32, i32* %11, align 4
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i8, i8* %53, i64 %55
  %57 = load i32, i32* %10, align 4
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i8, i8* %56, i64 %58
  %60 = load i32, i32* %12, align 4
  %61 = load i32, i32* %9, align 4
  %62 = add nsw i32 %60, %61
  %63 = load i32, i32* @cpels, align 4
  %64 = mul nsw i32 %62, %63
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i8, i8* %59, i64 %65
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i32
  %69 = load %struct.mb_structure*, %struct.mb_structure** %8, align 8
  %70 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %69, i32 0, i32 2
  %71 = load i32, i32* %9, align 4
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %70, i64 0, i64 %72
  %74 = load i32, i32* %10, align 4
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds [8 x i32], [8 x i32]* %73, i64 0, i64 %75
  store i32 %68, i32* %76, align 4
  br label %77

77:                                               ; preds = %24
  %78 = load i32, i32* %10, align 4
  %79 = add nsw i32 %78, 1
  store i32 %79, i32* %10, align 4
  br label %21

80:                                               ; preds = %21
  br label %81

81:                                               ; preds = %80
  %82 = load i32, i32* %9, align 4
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* %9, align 4
  br label %17

84:                                               ; preds = %17
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32* @MB_Encode(%struct.mb_structure* %0, i32 %1, i32 %2) #0 {
  %4 = alloca %struct.mb_structure*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca [64 x i32], align 16
  %14 = alloca [384 x i32], align 16
  %15 = alloca i32*, align 8
  %16 = alloca i32*, align 8
  %17 = alloca i32*, align 8
  store %struct.mb_structure* %0, %struct.mb_structure** %4, align 8
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  %18 = call noalias i8* @malloc(i64 1536) #8
  %19 = bitcast i8* %18 to i32*
  store i32* %19, i32** %16, align 8
  %20 = icmp eq i32* %19, null
  br i1 %20, label %21, label %24

21:                                               ; preds = %3
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %23 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0))
  call void @exit(i32 -1) #9
  unreachable

24:                                               ; preds = %3
  %25 = getelementptr inbounds [384 x i32], [384 x i32]* %14, i64 0, i64 0
  store i32* %25, i32** %15, align 8
  %26 = load i32*, i32** %16, align 8
  store i32* %26, i32** %17, align 8
  store i32 0, i32* %9, align 4
  br label %27

27:                                               ; preds = %88, %24
  %28 = load i32, i32* %9, align 4
  %29 = icmp slt i32 %28, 16
  br i1 %29, label %30, label %91

30:                                               ; preds = %27
  store i32 0, i32* %10, align 4
  br label %31

31:                                               ; preds = %84, %30
  %32 = load i32, i32* %10, align 4
  %33 = icmp slt i32 %32, 16
  br i1 %33, label %34, label %87

34:                                               ; preds = %31
  %35 = load i32, i32* %9, align 4
  store i32 %35, i32* %7, align 4
  store i32 0, i32* %11, align 4
  br label %36

36:                                               ; preds = %67, %34
  %37 = load i32, i32* %11, align 4
  %38 = icmp slt i32 %37, 64
  br i1 %38, label %39, label %72

39:                                               ; preds = %36
  %40 = load i32, i32* %10, align 4
  store i32 %40, i32* %8, align 4
  store i32 0, i32* %12, align 4
  br label %41

41:                                               ; preds = %61, %39
  %42 = load i32, i32* %12, align 4
  %43 = icmp slt i32 %42, 8
  br i1 %43, label %44, label %66

44:                                               ; preds = %41
  %45 = load %struct.mb_structure*, %struct.mb_structure** %4, align 8
  %46 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %45, i32 0, i32 0
  %47 = load i32, i32* %7, align 4
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %46, i64 0, i64 %48
  %50 = load i32, i32* %8, align 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds [16 x i32], [16 x i32]* %49, i64 0, i64 %51
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds [64 x i32], [64 x i32]* %13, i64 0, i64 0
  %55 = load i32, i32* %11, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i32, i32* %54, i64 %56
  %58 = load i32, i32* %12, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i32, i32* %57, i64 %59
  store i32 %53, i32* %60, align 4
  br label %61

61:                                               ; preds = %44
  %62 = load i32, i32* %8, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %8, align 4
  %64 = load i32, i32* %12, align 4
  %65 = add nsw i32 %64, 1
  store i32 %65, i32* %12, align 4
  br label %41

66:                                               ; preds = %41
  br label %67

67:                                               ; preds = %66
  %68 = load i32, i32* %7, align 4
  %69 = add nsw i32 %68, 1
  store i32 %69, i32* %7, align 4
  %70 = load i32, i32* %11, align 4
  %71 = add nsw i32 %70, 8
  store i32 %71, i32* %11, align 4
  br label %36

72:                                               ; preds = %36
  %73 = getelementptr inbounds [64 x i32], [64 x i32]* %13, i64 0, i64 0
  %74 = load i32*, i32** %15, align 8
  %75 = call i32 @Dct(i32* %73, i32* %74)
  %76 = load i32*, i32** %15, align 8
  %77 = load i32*, i32** %17, align 8
  %78 = load i32, i32* %5, align 4
  %79 = load i32, i32* %6, align 4
  call void @Quant(i32* %76, i32* %77, i32 %78, i32 %79)
  %80 = load i32*, i32** %15, align 8
  %81 = getelementptr inbounds i32, i32* %80, i64 64
  store i32* %81, i32** %15, align 8
  %82 = load i32*, i32** %17, align 8
  %83 = getelementptr inbounds i32, i32* %82, i64 64
  store i32* %83, i32** %17, align 8
  br label %84

84:                                               ; preds = %72
  %85 = load i32, i32* %10, align 4
  %86 = add nsw i32 %85, 8
  store i32 %86, i32* %10, align 4
  br label %31

87:                                               ; preds = %31
  br label %88

88:                                               ; preds = %87
  %89 = load i32, i32* %9, align 4
  %90 = add nsw i32 %89, 8
  store i32 %90, i32* %9, align 4
  br label %27

91:                                               ; preds = %27
  store i32 0, i32* %7, align 4
  br label %92

92:                                               ; preds = %121, %91
  %93 = load i32, i32* %7, align 4
  %94 = icmp slt i32 %93, 8
  br i1 %94, label %95, label %124

95:                                               ; preds = %92
  store i32 0, i32* %8, align 4
  br label %96

96:                                               ; preds = %117, %95
  %97 = load i32, i32* %8, align 4
  %98 = icmp slt i32 %97, 8
  br i1 %98, label %99, label %120

99:                                               ; preds = %96
  %100 = load %struct.mb_structure*, %struct.mb_structure** %4, align 8
  %101 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %100, i32 0, i32 2
  %102 = load i32, i32* %7, align 4
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %101, i64 0, i64 %103
  %105 = load i32, i32* %8, align 4
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds [8 x i32], [8 x i32]* %104, i64 0, i64 %106
  %108 = load i32, i32* %107, align 4
  %109 = getelementptr inbounds [64 x i32], [64 x i32]* %13, i64 0, i64 0
  %110 = load i32, i32* %7, align 4
  %111 = mul nsw i32 %110, 8
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds i32, i32* %109, i64 %112
  %114 = load i32, i32* %8, align 4
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds i32, i32* %113, i64 %115
  store i32 %108, i32* %116, align 4
  br label %117

117:                                              ; preds = %99
  %118 = load i32, i32* %8, align 4
  %119 = add nsw i32 %118, 1
  store i32 %119, i32* %8, align 4
  br label %96

120:                                              ; preds = %96
  br label %121

121:                                              ; preds = %120
  %122 = load i32, i32* %7, align 4
  %123 = add nsw i32 %122, 1
  store i32 %123, i32* %7, align 4
  br label %92

124:                                              ; preds = %92
  %125 = getelementptr inbounds [64 x i32], [64 x i32]* %13, i64 0, i64 0
  %126 = load i32*, i32** %15, align 8
  %127 = call i32 @Dct(i32* %125, i32* %126)
  %128 = load i32*, i32** %15, align 8
  %129 = load i32*, i32** %17, align 8
  %130 = load i32, i32* %5, align 4
  %131 = load i32, i32* %6, align 4
  call void @Quant(i32* %128, i32* %129, i32 %130, i32 %131)
  %132 = load i32*, i32** %15, align 8
  %133 = getelementptr inbounds i32, i32* %132, i64 64
  store i32* %133, i32** %15, align 8
  %134 = load i32*, i32** %17, align 8
  %135 = getelementptr inbounds i32, i32* %134, i64 64
  store i32* %135, i32** %17, align 8
  store i32 0, i32* %7, align 4
  br label %136

136:                                              ; preds = %165, %124
  %137 = load i32, i32* %7, align 4
  %138 = icmp slt i32 %137, 8
  br i1 %138, label %139, label %168

139:                                              ; preds = %136
  store i32 0, i32* %8, align 4
  br label %140

140:                                              ; preds = %161, %139
  %141 = load i32, i32* %8, align 4
  %142 = icmp slt i32 %141, 8
  br i1 %142, label %143, label %164

143:                                              ; preds = %140
  %144 = load %struct.mb_structure*, %struct.mb_structure** %4, align 8
  %145 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %144, i32 0, i32 1
  %146 = load i32, i32* %7, align 4
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %145, i64 0, i64 %147
  %149 = load i32, i32* %8, align 4
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds [8 x i32], [8 x i32]* %148, i64 0, i64 %150
  %152 = load i32, i32* %151, align 4
  %153 = getelementptr inbounds [64 x i32], [64 x i32]* %13, i64 0, i64 0
  %154 = load i32, i32* %7, align 4
  %155 = mul nsw i32 %154, 8
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds i32, i32* %153, i64 %156
  %158 = load i32, i32* %8, align 4
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds i32, i32* %157, i64 %159
  store i32 %152, i32* %160, align 4
  br label %161

161:                                              ; preds = %143
  %162 = load i32, i32* %8, align 4
  %163 = add nsw i32 %162, 1
  store i32 %163, i32* %8, align 4
  br label %140

164:                                              ; preds = %140
  br label %165

165:                                              ; preds = %164
  %166 = load i32, i32* %7, align 4
  %167 = add nsw i32 %166, 1
  store i32 %167, i32* %7, align 4
  br label %136

168:                                              ; preds = %136
  %169 = getelementptr inbounds [64 x i32], [64 x i32]* %13, i64 0, i64 0
  %170 = load i32*, i32** %15, align 8
  %171 = call i32 @Dct(i32* %169, i32* %170)
  %172 = load i32*, i32** %15, align 8
  %173 = load i32*, i32** %17, align 8
  %174 = load i32, i32* %5, align 4
  %175 = load i32, i32* %6, align 4
  call void @Quant(i32* %172, i32* %173, i32 %174, i32 %175)
  %176 = load i32*, i32** %16, align 8
  ret i32* %176
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ZeroMBlock(%struct.mb_structure* %0) #0 {
  %2 = alloca %struct.mb_structure*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store %struct.mb_structure* %0, %struct.mb_structure** %2, align 8
  store i32 0, i32* %3, align 4
  br label %5

5:                                                ; preds = %25, %1
  %6 = load i32, i32* %3, align 4
  %7 = icmp slt i32 %6, 16
  br i1 %7, label %8, label %28

8:                                                ; preds = %5
  store i32 0, i32* %4, align 4
  br label %9

9:                                                ; preds = %21, %8
  %10 = load i32, i32* %4, align 4
  %11 = icmp slt i32 %10, 16
  br i1 %11, label %12, label %24

12:                                               ; preds = %9
  %13 = load %struct.mb_structure*, %struct.mb_structure** %2, align 8
  %14 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %13, i32 0, i32 0
  %15 = load i32, i32* %3, align 4
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %14, i64 0, i64 %16
  %18 = load i32, i32* %4, align 4
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds [16 x i32], [16 x i32]* %17, i64 0, i64 %19
  store i32 0, i32* %20, align 4
  br label %21

21:                                               ; preds = %12
  %22 = load i32, i32* %4, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %4, align 4
  br label %9

24:                                               ; preds = %9
  br label %25

25:                                               ; preds = %24
  %26 = load i32, i32* %3, align 4
  %27 = add nsw i32 %26, 1
  store i32 %27, i32* %3, align 4
  br label %5

28:                                               ; preds = %5
  store i32 0, i32* %3, align 4
  br label %29

29:                                               ; preds = %57, %28
  %30 = load i32, i32* %3, align 4
  %31 = icmp slt i32 %30, 8
  br i1 %31, label %32, label %60

32:                                               ; preds = %29
  store i32 0, i32* %4, align 4
  br label %33

33:                                               ; preds = %53, %32
  %34 = load i32, i32* %4, align 4
  %35 = icmp slt i32 %34, 8
  br i1 %35, label %36, label %56

36:                                               ; preds = %33
  %37 = load %struct.mb_structure*, %struct.mb_structure** %2, align 8
  %38 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %37, i32 0, i32 1
  %39 = load i32, i32* %3, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %38, i64 0, i64 %40
  %42 = load i32, i32* %4, align 4
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds [8 x i32], [8 x i32]* %41, i64 0, i64 %43
  store i32 0, i32* %44, align 4
  %45 = load %struct.mb_structure*, %struct.mb_structure** %2, align 8
  %46 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %45, i32 0, i32 2
  %47 = load i32, i32* %3, align 4
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %46, i64 0, i64 %48
  %50 = load i32, i32* %4, align 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds [8 x i32], [8 x i32]* %49, i64 0, i64 %51
  store i32 0, i32* %52, align 4
  br label %53

53:                                               ; preds = %36
  %54 = load i32, i32* %4, align 4
  %55 = add nsw i32 %54, 1
  store i32 %55, i32* %4, align 4
  br label %33

56:                                               ; preds = %33
  br label %57

57:                                               ; preds = %56
  %58 = load i32, i32* %3, align 4
  %59 = add nsw i32 %58, 1
  store i32 %59, i32* %3, align 4
  br label %29

60:                                               ; preds = %29
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @MB_Decode(i32* %0, %struct.mb_structure* %1, i32 %2, i32 %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca %struct.mb_structure*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32*, align 8
  %16 = alloca i32*, align 8
  %17 = alloca i32*, align 8
  %18 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store %struct.mb_structure* %1, %struct.mb_structure** %6, align 8
  store i32 %2, i32* %7, align 4
  store i32 %3, i32* %8, align 4
  %19 = call noalias i8* @malloc(i64 256) #8
  %20 = bitcast i8* %19 to i32*
  store i32* %20, i32** %15, align 8
  %21 = icmp eq i32* %20, null
  br i1 %21, label %22, label %25

22:                                               ; preds = %4
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %24 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0))
  call void @exit(i32 -1) #9
  unreachable

25:                                               ; preds = %4
  %26 = call noalias i8* @malloc(i64 1536) #8
  %27 = bitcast i8* %26 to i32*
  store i32* %27, i32** %17, align 8
  %28 = icmp eq i32* %27, null
  br i1 %28, label %29, label %32

29:                                               ; preds = %25
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %31 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.3, i64 0, i64 0))
  call void @exit(i32 -1) #9
  unreachable

32:                                               ; preds = %25
  store i32 0, i32* %9, align 4
  br label %33

33:                                               ; preds = %53, %32
  %34 = load i32, i32* %9, align 4
  %35 = icmp slt i32 %34, 16
  br i1 %35, label %36, label %56

36:                                               ; preds = %33
  store i32 0, i32* %10, align 4
  br label %37

37:                                               ; preds = %49, %36
  %38 = load i32, i32* %10, align 4
  %39 = icmp slt i32 %38, 16
  br i1 %39, label %40, label %52

40:                                               ; preds = %37
  %41 = load %struct.mb_structure*, %struct.mb_structure** %6, align 8
  %42 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %41, i32 0, i32 0
  %43 = load i32, i32* %10, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %42, i64 0, i64 %44
  %46 = load i32, i32* %9, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds [16 x i32], [16 x i32]* %45, i64 0, i64 %47
  store i32 0, i32* %48, align 4
  br label %49

49:                                               ; preds = %40
  %50 = load i32, i32* %10, align 4
  %51 = add nsw i32 %50, 1
  store i32 %51, i32* %10, align 4
  br label %37

52:                                               ; preds = %37
  br label %53

53:                                               ; preds = %52
  %54 = load i32, i32* %9, align 4
  %55 = add nsw i32 %54, 1
  store i32 %55, i32* %9, align 4
  br label %33

56:                                               ; preds = %33
  store i32 0, i32* %9, align 4
  br label %57

57:                                               ; preds = %85, %56
  %58 = load i32, i32* %9, align 4
  %59 = icmp slt i32 %58, 8
  br i1 %59, label %60, label %88

60:                                               ; preds = %57
  store i32 0, i32* %10, align 4
  br label %61

61:                                               ; preds = %81, %60
  %62 = load i32, i32* %10, align 4
  %63 = icmp slt i32 %62, 8
  br i1 %63, label %64, label %84

64:                                               ; preds = %61
  %65 = load %struct.mb_structure*, %struct.mb_structure** %6, align 8
  %66 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %65, i32 0, i32 2
  %67 = load i32, i32* %10, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %66, i64 0, i64 %68
  %70 = load i32, i32* %9, align 4
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds [8 x i32], [8 x i32]* %69, i64 0, i64 %71
  store i32 0, i32* %72, align 4
  %73 = load %struct.mb_structure*, %struct.mb_structure** %6, align 8
  %74 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %73, i32 0, i32 1
  %75 = load i32, i32* %10, align 4
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %74, i64 0, i64 %76
  %78 = load i32, i32* %9, align 4
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds [8 x i32], [8 x i32]* %77, i64 0, i64 %79
  store i32 0, i32* %80, align 4
  br label %81

81:                                               ; preds = %64
  %82 = load i32, i32* %10, align 4
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* %10, align 4
  br label %61

84:                                               ; preds = %61
  br label %85

85:                                               ; preds = %84
  %86 = load i32, i32* %9, align 4
  %87 = add nsw i32 %86, 1
  store i32 %87, i32* %9, align 4
  br label %57

88:                                               ; preds = %57
  %89 = load i32*, i32** %5, align 8
  store i32* %89, i32** %16, align 8
  %90 = load i32*, i32** %17, align 8
  store i32* %90, i32** %18, align 8
  store i32 0, i32* %11, align 4
  br label %91

91:                                               ; preds = %151, %88
  %92 = load i32, i32* %11, align 4
  %93 = icmp slt i32 %92, 16
  br i1 %93, label %94, label %154

94:                                               ; preds = %91
  store i32 0, i32* %12, align 4
  br label %95

95:                                               ; preds = %147, %94
  %96 = load i32, i32* %12, align 4
  %97 = icmp slt i32 %96, 16
  br i1 %97, label %98, label %150

98:                                               ; preds = %95
  %99 = load i32*, i32** %16, align 8
  %100 = load i32*, i32** %18, align 8
  %101 = load i32, i32* %7, align 4
  %102 = load i32, i32* %8, align 4
  call void @Dequant(i32* %99, i32* %100, i32 %101, i32 %102)
  %103 = load i32*, i32** %18, align 8
  %104 = load i32*, i32** %15, align 8
  call void @idctref(i32* %103, i32* %104)
  %105 = load i32*, i32** %16, align 8
  %106 = getelementptr inbounds i32, i32* %105, i64 64
  store i32* %106, i32** %16, align 8
  %107 = load i32*, i32** %18, align 8
  %108 = getelementptr inbounds i32, i32* %107, i64 64
  store i32* %108, i32** %18, align 8
  %109 = load i32, i32* %11, align 4
  store i32 %109, i32* %9, align 4
  store i32 0, i32* %13, align 4
  br label %110

110:                                              ; preds = %141, %98
  %111 = load i32, i32* %13, align 4
  %112 = icmp slt i32 %111, 64
  br i1 %112, label %113, label %146

113:                                              ; preds = %110
  %114 = load i32, i32* %12, align 4
  store i32 %114, i32* %10, align 4
  store i32 0, i32* %14, align 4
  br label %115

115:                                              ; preds = %135, %113
  %116 = load i32, i32* %14, align 4
  %117 = icmp slt i32 %116, 8
  br i1 %117, label %118, label %140

118:                                              ; preds = %115
  %119 = load i32*, i32** %15, align 8
  %120 = load i32, i32* %13, align 4
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds i32, i32* %119, i64 %121
  %123 = load i32, i32* %14, align 4
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds i32, i32* %122, i64 %124
  %126 = load i32, i32* %125, align 4
  %127 = load %struct.mb_structure*, %struct.mb_structure** %6, align 8
  %128 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %127, i32 0, i32 0
  %129 = load i32, i32* %9, align 4
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %128, i64 0, i64 %130
  %132 = load i32, i32* %10, align 4
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds [16 x i32], [16 x i32]* %131, i64 0, i64 %133
  store i32 %126, i32* %134, align 4
  br label %135

135:                                              ; preds = %118
  %136 = load i32, i32* %10, align 4
  %137 = add nsw i32 %136, 1
  store i32 %137, i32* %10, align 4
  %138 = load i32, i32* %14, align 4
  %139 = add nsw i32 %138, 1
  store i32 %139, i32* %14, align 4
  br label %115

140:                                              ; preds = %115
  br label %141

141:                                              ; preds = %140
  %142 = load i32, i32* %9, align 4
  %143 = add nsw i32 %142, 1
  store i32 %143, i32* %9, align 4
  %144 = load i32, i32* %13, align 4
  %145 = add nsw i32 %144, 8
  store i32 %145, i32* %13, align 4
  br label %110

146:                                              ; preds = %110
  br label %147

147:                                              ; preds = %146
  %148 = load i32, i32* %12, align 4
  %149 = add nsw i32 %148, 8
  store i32 %149, i32* %12, align 4
  br label %95

150:                                              ; preds = %95
  br label %151

151:                                              ; preds = %150
  %152 = load i32, i32* %11, align 4
  %153 = add nsw i32 %152, 8
  store i32 %153, i32* %11, align 4
  br label %91

154:                                              ; preds = %91
  %155 = load i32*, i32** %16, align 8
  %156 = load i32*, i32** %18, align 8
  %157 = load i32, i32* %7, align 4
  %158 = load i32, i32* %8, align 4
  call void @Dequant(i32* %155, i32* %156, i32 %157, i32 %158)
  %159 = load i32*, i32** %18, align 8
  %160 = load i32*, i32** %15, align 8
  call void @idctref(i32* %159, i32* %160)
  %161 = load i32*, i32** %16, align 8
  %162 = getelementptr inbounds i32, i32* %161, i64 64
  store i32* %162, i32** %16, align 8
  %163 = load i32*, i32** %18, align 8
  %164 = getelementptr inbounds i32, i32* %163, i64 64
  store i32* %164, i32** %18, align 8
  store i32 0, i32* %9, align 4
  br label %165

165:                                              ; preds = %194, %154
  %166 = load i32, i32* %9, align 4
  %167 = icmp slt i32 %166, 8
  br i1 %167, label %168, label %197

168:                                              ; preds = %165
  store i32 0, i32* %10, align 4
  br label %169

169:                                              ; preds = %190, %168
  %170 = load i32, i32* %10, align 4
  %171 = icmp slt i32 %170, 8
  br i1 %171, label %172, label %193

172:                                              ; preds = %169
  %173 = load i32*, i32** %15, align 8
  %174 = load i32, i32* %9, align 4
  %175 = mul nsw i32 %174, 8
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds i32, i32* %173, i64 %176
  %178 = load i32, i32* %10, align 4
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds i32, i32* %177, i64 %179
  %181 = load i32, i32* %180, align 4
  %182 = load %struct.mb_structure*, %struct.mb_structure** %6, align 8
  %183 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %182, i32 0, i32 2
  %184 = load i32, i32* %9, align 4
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %183, i64 0, i64 %185
  %187 = load i32, i32* %10, align 4
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds [8 x i32], [8 x i32]* %186, i64 0, i64 %188
  store i32 %181, i32* %189, align 4
  br label %190

190:                                              ; preds = %172
  %191 = load i32, i32* %10, align 4
  %192 = add nsw i32 %191, 1
  store i32 %192, i32* %10, align 4
  br label %169

193:                                              ; preds = %169
  br label %194

194:                                              ; preds = %193
  %195 = load i32, i32* %9, align 4
  %196 = add nsw i32 %195, 1
  store i32 %196, i32* %9, align 4
  br label %165

197:                                              ; preds = %165
  %198 = load i32*, i32** %16, align 8
  %199 = load i32*, i32** %18, align 8
  %200 = load i32, i32* %7, align 4
  %201 = load i32, i32* %8, align 4
  call void @Dequant(i32* %198, i32* %199, i32 %200, i32 %201)
  %202 = load i32*, i32** %18, align 8
  %203 = load i32*, i32** %15, align 8
  call void @idctref(i32* %202, i32* %203)
  store i32 0, i32* %9, align 4
  br label %204

204:                                              ; preds = %233, %197
  %205 = load i32, i32* %9, align 4
  %206 = icmp slt i32 %205, 8
  br i1 %206, label %207, label %236

207:                                              ; preds = %204
  store i32 0, i32* %10, align 4
  br label %208

208:                                              ; preds = %229, %207
  %209 = load i32, i32* %10, align 4
  %210 = icmp slt i32 %209, 8
  br i1 %210, label %211, label %232

211:                                              ; preds = %208
  %212 = load i32*, i32** %15, align 8
  %213 = load i32, i32* %9, align 4
  %214 = mul nsw i32 %213, 8
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds i32, i32* %212, i64 %215
  %217 = load i32, i32* %10, align 4
  %218 = sext i32 %217 to i64
  %219 = getelementptr inbounds i32, i32* %216, i64 %218
  %220 = load i32, i32* %219, align 4
  %221 = load %struct.mb_structure*, %struct.mb_structure** %6, align 8
  %222 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %221, i32 0, i32 1
  %223 = load i32, i32* %9, align 4
  %224 = sext i32 %223 to i64
  %225 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %222, i64 0, i64 %224
  %226 = load i32, i32* %10, align 4
  %227 = sext i32 %226 to i64
  %228 = getelementptr inbounds [8 x i32], [8 x i32]* %225, i64 0, i64 %227
  store i32 %220, i32* %228, align 4
  br label %229

229:                                              ; preds = %211
  %230 = load i32, i32* %10, align 4
  %231 = add nsw i32 %230, 1
  store i32 %231, i32* %10, align 4
  br label %208

232:                                              ; preds = %208
  br label %233

233:                                              ; preds = %232
  %234 = load i32, i32* %9, align 4
  %235 = add nsw i32 %234, 1
  store i32 %235, i32* %9, align 4
  br label %204

236:                                              ; preds = %204
  %237 = load i32*, i32** %15, align 8
  %238 = bitcast i32* %237 to i8*
  call void @free(i8* %238) #8
  %239 = load i32*, i32** %17, align 8
  %240 = bitcast i32* %239 to i8*
  call void @free(i8* %240) #8
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Clip(%struct.mb_structure* %0) #0 {
  %2 = alloca %struct.mb_structure*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store %struct.mb_structure* %0, %struct.mb_structure** %2, align 8
  store i32 0, i32* %4, align 4
  br label %5

5:                                                ; preds = %76, %1
  %6 = load i32, i32* %4, align 4
  %7 = icmp slt i32 %6, 16
  br i1 %7, label %8, label %79

8:                                                ; preds = %5
  store i32 0, i32* %3, align 4
  br label %9

9:                                                ; preds = %72, %8
  %10 = load i32, i32* %3, align 4
  %11 = icmp slt i32 %10, 16
  br i1 %11, label %12, label %75

12:                                               ; preds = %9
  %13 = load %struct.mb_structure*, %struct.mb_structure** %2, align 8
  %14 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %13, i32 0, i32 0
  %15 = load i32, i32* %4, align 4
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %14, i64 0, i64 %16
  %18 = load i32, i32* %3, align 4
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds [16 x i32], [16 x i32]* %17, i64 0, i64 %19
  %21 = load i32, i32* %20, align 4
  %22 = icmp sgt i32 0, %21
  br i1 %22, label %23, label %24

23:                                               ; preds = %12
  br label %34

24:                                               ; preds = %12
  %25 = load %struct.mb_structure*, %struct.mb_structure** %2, align 8
  %26 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %25, i32 0, i32 0
  %27 = load i32, i32* %4, align 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %26, i64 0, i64 %28
  %30 = load i32, i32* %3, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds [16 x i32], [16 x i32]* %29, i64 0, i64 %31
  %33 = load i32, i32* %32, align 4
  br label %34

34:                                               ; preds = %24, %23
  %35 = phi i32 [ 0, %23 ], [ %33, %24 ]
  %36 = icmp slt i32 255, %35
  br i1 %36, label %37, label %38

37:                                               ; preds = %34
  br label %62

38:                                               ; preds = %34
  %39 = load %struct.mb_structure*, %struct.mb_structure** %2, align 8
  %40 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %39, i32 0, i32 0
  %41 = load i32, i32* %4, align 4
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %40, i64 0, i64 %42
  %44 = load i32, i32* %3, align 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds [16 x i32], [16 x i32]* %43, i64 0, i64 %45
  %47 = load i32, i32* %46, align 4
  %48 = icmp sgt i32 0, %47
  br i1 %48, label %49, label %50

49:                                               ; preds = %38
  br label %60

50:                                               ; preds = %38
  %51 = load %struct.mb_structure*, %struct.mb_structure** %2, align 8
  %52 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %51, i32 0, i32 0
  %53 = load i32, i32* %4, align 4
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %52, i64 0, i64 %54
  %56 = load i32, i32* %3, align 4
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds [16 x i32], [16 x i32]* %55, i64 0, i64 %57
  %59 = load i32, i32* %58, align 4
  br label %60

60:                                               ; preds = %50, %49
  %61 = phi i32 [ 0, %49 ], [ %59, %50 ]
  br label %62

62:                                               ; preds = %60, %37
  %63 = phi i32 [ 255, %37 ], [ %61, %60 ]
  %64 = load %struct.mb_structure*, %struct.mb_structure** %2, align 8
  %65 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %64, i32 0, i32 0
  %66 = load i32, i32* %4, align 4
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %65, i64 0, i64 %67
  %69 = load i32, i32* %3, align 4
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds [16 x i32], [16 x i32]* %68, i64 0, i64 %70
  store i32 %63, i32* %71, align 4
  br label %72

72:                                               ; preds = %62
  %73 = load i32, i32* %3, align 4
  %74 = add nsw i32 %73, 1
  store i32 %74, i32* %3, align 4
  br label %9

75:                                               ; preds = %9
  br label %76

76:                                               ; preds = %75
  %77 = load i32, i32* %4, align 4
  %78 = add nsw i32 %77, 1
  store i32 %78, i32* %4, align 4
  br label %5

79:                                               ; preds = %5
  store i32 0, i32* %4, align 4
  br label %80

80:                                               ; preds = %210, %79
  %81 = load i32, i32* %4, align 4
  %82 = icmp slt i32 %81, 8
  br i1 %82, label %83, label %213

83:                                               ; preds = %80
  store i32 0, i32* %3, align 4
  br label %84

84:                                               ; preds = %206, %83
  %85 = load i32, i32* %3, align 4
  %86 = icmp slt i32 %85, 8
  br i1 %86, label %87, label %209

87:                                               ; preds = %84
  %88 = load %struct.mb_structure*, %struct.mb_structure** %2, align 8
  %89 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %88, i32 0, i32 1
  %90 = load i32, i32* %4, align 4
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %89, i64 0, i64 %91
  %93 = load i32, i32* %3, align 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds [8 x i32], [8 x i32]* %92, i64 0, i64 %94
  %96 = load i32, i32* %95, align 4
  %97 = icmp sgt i32 0, %96
  br i1 %97, label %98, label %99

98:                                               ; preds = %87
  br label %109

99:                                               ; preds = %87
  %100 = load %struct.mb_structure*, %struct.mb_structure** %2, align 8
  %101 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %100, i32 0, i32 1
  %102 = load i32, i32* %4, align 4
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %101, i64 0, i64 %103
  %105 = load i32, i32* %3, align 4
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds [8 x i32], [8 x i32]* %104, i64 0, i64 %106
  %108 = load i32, i32* %107, align 4
  br label %109

109:                                              ; preds = %99, %98
  %110 = phi i32 [ 0, %98 ], [ %108, %99 ]
  %111 = icmp slt i32 255, %110
  br i1 %111, label %112, label %113

112:                                              ; preds = %109
  br label %137

113:                                              ; preds = %109
  %114 = load %struct.mb_structure*, %struct.mb_structure** %2, align 8
  %115 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %114, i32 0, i32 1
  %116 = load i32, i32* %4, align 4
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %115, i64 0, i64 %117
  %119 = load i32, i32* %3, align 4
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds [8 x i32], [8 x i32]* %118, i64 0, i64 %120
  %122 = load i32, i32* %121, align 4
  %123 = icmp sgt i32 0, %122
  br i1 %123, label %124, label %125

124:                                              ; preds = %113
  br label %135

125:                                              ; preds = %113
  %126 = load %struct.mb_structure*, %struct.mb_structure** %2, align 8
  %127 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %126, i32 0, i32 1
  %128 = load i32, i32* %4, align 4
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %127, i64 0, i64 %129
  %131 = load i32, i32* %3, align 4
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds [8 x i32], [8 x i32]* %130, i64 0, i64 %132
  %134 = load i32, i32* %133, align 4
  br label %135

135:                                              ; preds = %125, %124
  %136 = phi i32 [ 0, %124 ], [ %134, %125 ]
  br label %137

137:                                              ; preds = %135, %112
  %138 = phi i32 [ 255, %112 ], [ %136, %135 ]
  %139 = load %struct.mb_structure*, %struct.mb_structure** %2, align 8
  %140 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %139, i32 0, i32 1
  %141 = load i32, i32* %4, align 4
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %140, i64 0, i64 %142
  %144 = load i32, i32* %3, align 4
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds [8 x i32], [8 x i32]* %143, i64 0, i64 %145
  store i32 %138, i32* %146, align 4
  %147 = load %struct.mb_structure*, %struct.mb_structure** %2, align 8
  %148 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %147, i32 0, i32 2
  %149 = load i32, i32* %4, align 4
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %148, i64 0, i64 %150
  %152 = load i32, i32* %3, align 4
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds [8 x i32], [8 x i32]* %151, i64 0, i64 %153
  %155 = load i32, i32* %154, align 4
  %156 = icmp sgt i32 0, %155
  br i1 %156, label %157, label %158

157:                                              ; preds = %137
  br label %168

158:                                              ; preds = %137
  %159 = load %struct.mb_structure*, %struct.mb_structure** %2, align 8
  %160 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %159, i32 0, i32 2
  %161 = load i32, i32* %4, align 4
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %160, i64 0, i64 %162
  %164 = load i32, i32* %3, align 4
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds [8 x i32], [8 x i32]* %163, i64 0, i64 %165
  %167 = load i32, i32* %166, align 4
  br label %168

168:                                              ; preds = %158, %157
  %169 = phi i32 [ 0, %157 ], [ %167, %158 ]
  %170 = icmp slt i32 255, %169
  br i1 %170, label %171, label %172

171:                                              ; preds = %168
  br label %196

172:                                              ; preds = %168
  %173 = load %struct.mb_structure*, %struct.mb_structure** %2, align 8
  %174 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %173, i32 0, i32 2
  %175 = load i32, i32* %4, align 4
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %174, i64 0, i64 %176
  %178 = load i32, i32* %3, align 4
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds [8 x i32], [8 x i32]* %177, i64 0, i64 %179
  %181 = load i32, i32* %180, align 4
  %182 = icmp sgt i32 0, %181
  br i1 %182, label %183, label %184

183:                                              ; preds = %172
  br label %194

184:                                              ; preds = %172
  %185 = load %struct.mb_structure*, %struct.mb_structure** %2, align 8
  %186 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %185, i32 0, i32 2
  %187 = load i32, i32* %4, align 4
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %186, i64 0, i64 %188
  %190 = load i32, i32* %3, align 4
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds [8 x i32], [8 x i32]* %189, i64 0, i64 %191
  %193 = load i32, i32* %192, align 4
  br label %194

194:                                              ; preds = %184, %183
  %195 = phi i32 [ 0, %183 ], [ %193, %184 ]
  br label %196

196:                                              ; preds = %194, %171
  %197 = phi i32 [ 255, %171 ], [ %195, %194 ]
  %198 = load %struct.mb_structure*, %struct.mb_structure** %2, align 8
  %199 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %198, i32 0, i32 2
  %200 = load i32, i32* %4, align 4
  %201 = sext i32 %200 to i64
  %202 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %199, i64 0, i64 %201
  %203 = load i32, i32* %3, align 4
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds [8 x i32], [8 x i32]* %202, i64 0, i64 %204
  store i32 %197, i32* %205, align 4
  br label %206

206:                                              ; preds = %196
  %207 = load i32, i32* %3, align 4
  %208 = add nsw i32 %207, 1
  store i32 %208, i32* %3, align 4
  br label %84

209:                                              ; preds = %84
  br label %210

210:                                              ; preds = %209
  %211 = load i32, i32* %4, align 4
  %212 = add nsw i32 %211, 1
  store i32 %212, i32* %4, align 4
  br label %80

213:                                              ; preds = %80
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ReconImage(i32 %0, i32 %1, %struct.mb_structure* %2, %struct.pict_image* %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca %struct.mb_structure*, align 8
  %8 = alloca %struct.pict_image*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i32 %1, i32* %6, align 4
  store %struct.mb_structure* %2, %struct.mb_structure** %7, align 8
  store %struct.pict_image* %3, %struct.pict_image** %8, align 8
  %13 = load i32, i32* %5, align 4
  %14 = mul nsw i32 %13, 16
  store i32 %14, i32* %11, align 4
  %15 = load i32, i32* %6, align 4
  %16 = mul nsw i32 %15, 16
  store i32 %16, i32* %12, align 4
  store i32 0, i32* %9, align 4
  br label %17

17:                                               ; preds = %55, %4
  %18 = load i32, i32* %9, align 4
  %19 = icmp slt i32 %18, 16
  br i1 %19, label %20, label %58

20:                                               ; preds = %17
  store i32 0, i32* %10, align 4
  br label %21

21:                                               ; preds = %51, %20
  %22 = load i32, i32* %10, align 4
  %23 = icmp slt i32 %22, 16
  br i1 %23, label %24, label %54

24:                                               ; preds = %21
  %25 = load %struct.mb_structure*, %struct.mb_structure** %7, align 8
  %26 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %25, i32 0, i32 0
  %27 = load i32, i32* %9, align 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %26, i64 0, i64 %28
  %30 = load i32, i32* %10, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds [16 x i32], [16 x i32]* %29, i64 0, i64 %31
  %33 = load i32, i32* %32, align 4
  %34 = trunc i32 %33 to i8
  %35 = load %struct.pict_image*, %struct.pict_image** %8, align 8
  %36 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %35, i32 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = load i32, i32* %11, align 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %37, i64 %39
  %41 = load i32, i32* %10, align 4
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds i8, i8* %40, i64 %42
  %44 = load i32, i32* %12, align 4
  %45 = load i32, i32* %9, align 4
  %46 = add nsw i32 %44, %45
  %47 = load i32, i32* @pels, align 4
  %48 = mul nsw i32 %46, %47
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %43, i64 %49
  store i8 %34, i8* %50, align 1
  br label %51

51:                                               ; preds = %24
  %52 = load i32, i32* %10, align 4
  %53 = add nsw i32 %52, 1
  store i32 %53, i32* %10, align 4
  br label %21

54:                                               ; preds = %21
  br label %55

55:                                               ; preds = %54
  %56 = load i32, i32* %9, align 4
  %57 = add nsw i32 %56, 1
  store i32 %57, i32* %9, align 4
  br label %17

58:                                               ; preds = %17
  store i32 0, i32* %9, align 4
  br label %59

59:                                               ; preds = %127, %58
  %60 = load i32, i32* %9, align 4
  %61 = icmp slt i32 %60, 8
  br i1 %61, label %62, label %130

62:                                               ; preds = %59
  store i32 0, i32* %10, align 4
  br label %63

63:                                               ; preds = %123, %62
  %64 = load i32, i32* %10, align 4
  %65 = icmp slt i32 %64, 8
  br i1 %65, label %66, label %126

66:                                               ; preds = %63
  %67 = load %struct.mb_structure*, %struct.mb_structure** %7, align 8
  %68 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %67, i32 0, i32 1
  %69 = load i32, i32* %9, align 4
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %68, i64 0, i64 %70
  %72 = load i32, i32* %10, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds [8 x i32], [8 x i32]* %71, i64 0, i64 %73
  %75 = load i32, i32* %74, align 4
  %76 = trunc i32 %75 to i8
  %77 = load %struct.pict_image*, %struct.pict_image** %8, align 8
  %78 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %77, i32 0, i32 1
  %79 = load i8*, i8** %78, align 8
  %80 = load i32, i32* %11, align 4
  %81 = ashr i32 %80, 1
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds i8, i8* %79, i64 %82
  %84 = load i32, i32* %10, align 4
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i8, i8* %83, i64 %85
  %87 = load i32, i32* %12, align 4
  %88 = ashr i32 %87, 1
  %89 = load i32, i32* %9, align 4
  %90 = add nsw i32 %88, %89
  %91 = load i32, i32* @cpels, align 4
  %92 = mul nsw i32 %90, %91
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds i8, i8* %86, i64 %93
  store i8 %76, i8* %94, align 1
  %95 = load %struct.mb_structure*, %struct.mb_structure** %7, align 8
  %96 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %95, i32 0, i32 2
  %97 = load i32, i32* %9, align 4
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %96, i64 0, i64 %98
  %100 = load i32, i32* %10, align 4
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds [8 x i32], [8 x i32]* %99, i64 0, i64 %101
  %103 = load i32, i32* %102, align 4
  %104 = trunc i32 %103 to i8
  %105 = load %struct.pict_image*, %struct.pict_image** %8, align 8
  %106 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %105, i32 0, i32 2
  %107 = load i8*, i8** %106, align 8
  %108 = load i32, i32* %11, align 4
  %109 = ashr i32 %108, 1
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds i8, i8* %107, i64 %110
  %112 = load i32, i32* %10, align 4
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds i8, i8* %111, i64 %113
  %115 = load i32, i32* %12, align 4
  %116 = ashr i32 %115, 1
  %117 = load i32, i32* %9, align 4
  %118 = add nsw i32 %116, %117
  %119 = load i32, i32* @cpels, align 4
  %120 = mul nsw i32 %118, %119
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds i8, i8* %114, i64 %121
  store i8 %104, i8* %122, align 1
  br label %123

123:                                              ; preds = %66
  %124 = load i32, i32* %10, align 4
  %125 = add nsw i32 %124, 1
  store i32 %125, i32* %10, align 4
  br label %63

126:                                              ; preds = %63
  br label %127

127:                                              ; preds = %126
  %128 = load i32, i32* %9, align 4
  %129 = add nsw i32 %128, 1
  store i32 %129, i32* %9, align 4
  br label %59

130:                                              ; preds = %59
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.pict_image* @CodeOneIntra(%struct.pict_image* %0, i32 %1, %struct.bits_counted* %2, %struct.pict* %3) #0 {
  %5 = alloca %struct.pict_image*, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.bits_counted*, align 8
  %8 = alloca %struct.pict*, align 8
  %9 = alloca %struct.pict_image*, align 8
  %10 = alloca %struct.mb_structure*, align 8
  %11 = alloca i32*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  store %struct.pict_image* %0, %struct.pict_image** %5, align 8
  store i32 %1, i32* %6, align 4
  store %struct.bits_counted* %2, %struct.bits_counted** %7, align 8
  store %struct.pict* %3, %struct.pict** %8, align 8
  %17 = call noalias i8* @malloc(i64 1536) #8
  %18 = bitcast i8* %17 to %struct.mb_structure*
  store %struct.mb_structure* %18, %struct.mb_structure** %10, align 8
  store i32 3, i32* %12, align 4
  %19 = load i32, i32* @pels, align 4
  %20 = load i32, i32* @lines, align 4
  %21 = mul nsw i32 %19, %20
  %22 = call %struct.pict_image* @InitImage(i32 %21)
  store %struct.pict_image* %22, %struct.pict_image** %9, align 8
  %23 = load %struct.bits_counted*, %struct.bits_counted** %7, align 8
  call void @ZeroBits(%struct.bits_counted* %23)
  %24 = load i32, i32* %6, align 4
  %25 = load %struct.pict*, %struct.pict** %8, align 8
  %26 = getelementptr inbounds %struct.pict, %struct.pict* %25, i32 0, i32 11
  store i32 %24, i32* %26, align 4
  %27 = load %struct.pict*, %struct.pict** %8, align 8
  %28 = call i32 @CountBitsPicture(%struct.pict* %27)
  %29 = load %struct.bits_counted*, %struct.bits_counted** %7, align 8
  %30 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %29, i32 0, i32 8
  %31 = load i32, i32* %30, align 4
  %32 = add nsw i32 %31, %28
  store i32 %32, i32* %30, align 4
  store i32 0, i32* %14, align 4
  store i32 0, i32* %16, align 4
  br label %33

33:                                               ; preds = %131, %4
  %34 = load i32, i32* %16, align 4
  %35 = load i32, i32* @lines, align 4
  %36 = sdiv i32 %35, 16
  %37 = icmp slt i32 %34, %36
  br i1 %37, label %38, label %134

38:                                               ; preds = %33
  %39 = load %struct.pict*, %struct.pict** %8, align 8
  %40 = getelementptr inbounds %struct.pict, %struct.pict* %39, i32 0, i32 15
  %41 = load i32, i32* %40, align 4
  %42 = icmp ne i32 %41, 0
  br i1 %42, label %43, label %54

43:                                               ; preds = %38
  %44 = load i32, i32* %16, align 4
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %46, label %54

46:                                               ; preds = %43
  %47 = load i32, i32* %16, align 4
  %48 = load i32, i32* %6, align 4
  %49 = call i32 @CountBitsSlice(i32 %47, i32 %48)
  %50 = load %struct.bits_counted*, %struct.bits_counted** %7, align 8
  %51 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %50, i32 0, i32 8
  %52 = load i32, i32* %51, align 4
  %53 = add nsw i32 %52, %49
  store i32 %53, i32* %51, align 4
  br label %54

54:                                               ; preds = %46, %43, %38
  store i32 0, i32* %15, align 4
  br label %55

55:                                               ; preds = %127, %54
  %56 = load i32, i32* %15, align 4
  %57 = load i32, i32* @pels, align 4
  %58 = sdiv i32 %57, 16
  %59 = icmp slt i32 %56, %58
  br i1 %59, label %60, label %130

60:                                               ; preds = %55
  %61 = load i32, i32* %15, align 4
  %62 = load i32, i32* %16, align 4
  %63 = load i32, i32* @pels, align 4
  %64 = sdiv i32 %63, 16
  %65 = mul nsw i32 %62, %64
  %66 = add nsw i32 %61, %65
  %67 = load %struct.pict*, %struct.pict** %8, align 8
  %68 = getelementptr inbounds %struct.pict, %struct.pict* %67, i32 0, i32 13
  store i32 %66, i32* %68, align 4
  %69 = load %struct.bits_counted*, %struct.bits_counted** %7, align 8
  %70 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %69, i32 0, i32 13
  %71 = load i32, i32* %70, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %70, align 4
  %73 = load i32, i32* %15, align 4
  %74 = mul nsw i32 %73, 16
  %75 = load i32, i32* %16, align 4
  %76 = mul nsw i32 %75, 16
  %77 = load %struct.pict_image*, %struct.pict_image** %5, align 8
  %78 = load %struct.mb_structure*, %struct.mb_structure** %10, align 8
  call void @FillLumBlock(i32 %74, i32 %76, %struct.pict_image* %77, %struct.mb_structure* %78)
  %79 = load i32, i32* %15, align 4
  %80 = mul nsw i32 %79, 16
  %81 = load i32, i32* %16, align 4
  %82 = mul nsw i32 %81, 16
  %83 = load %struct.pict_image*, %struct.pict_image** %5, align 8
  %84 = load %struct.mb_structure*, %struct.mb_structure** %10, align 8
  call void @FillChromBlock(i32 %80, i32 %82, %struct.pict_image* %83, %struct.mb_structure* %84)
  %85 = load %struct.mb_structure*, %struct.mb_structure** %10, align 8
  %86 = load i32, i32* %6, align 4
  %87 = load i32, i32* %12, align 4
  %88 = call i32* @MB_Encode(%struct.mb_structure* %85, i32 %86, i32 %87)
  store i32* %88, i32** %11, align 8
  %89 = load i32*, i32** %11, align 8
  %90 = load i32, i32* %12, align 4
  %91 = call i32 @FindCBP(i32* %89, i32 %90, i32 64)
  store i32 %91, i32* %13, align 4
  %92 = load i32, i32* @syntax_arith_coding, align 4
  %93 = icmp ne i32 %92, 0
  br i1 %93, label %104, label %94

94:                                               ; preds = %60
  %95 = load i32, i32* %12, align 4
  %96 = load i32, i32* %14, align 4
  %97 = load i32, i32* %13, align 4
  %98 = load %struct.pict*, %struct.pict** %8, align 8
  %99 = load %struct.bits_counted*, %struct.bits_counted** %7, align 8
  call void @CountBitsMB(i32 %95, i32 %96, i32 %97, i32 0, %struct.pict* %98, %struct.bits_counted* %99)
  %100 = load i32*, i32** %11, align 8
  %101 = load i32, i32* %12, align 4
  %102 = load i32, i32* %13, align 4
  %103 = load %struct.bits_counted*, %struct.bits_counted** %7, align 8
  call void @CountBitsCoeff(i32* %100, i32 %101, i32 %102, %struct.bits_counted* %103, i32 64)
  br label %114

104:                                              ; preds = %60
  %105 = load i32, i32* %12, align 4
  %106 = load i32, i32* %14, align 4
  %107 = load i32, i32* %13, align 4
  %108 = load %struct.pict*, %struct.pict** %8, align 8
  %109 = load %struct.bits_counted*, %struct.bits_counted** %7, align 8
  call void @Count_sac_BitsMB(i32 %105, i32 %106, i32 %107, i32 0, %struct.pict* %108, %struct.bits_counted* %109)
  %110 = load i32*, i32** %11, align 8
  %111 = load i32, i32* %12, align 4
  %112 = load i32, i32* %13, align 4
  %113 = load %struct.bits_counted*, %struct.bits_counted** %7, align 8
  call void @Count_sac_BitsCoeff(i32* %110, i32 %111, i32 %112, %struct.bits_counted* %113, i32 64)
  br label %114

114:                                              ; preds = %104, %94
  %115 = load i32*, i32** %11, align 8
  %116 = load %struct.mb_structure*, %struct.mb_structure** %10, align 8
  %117 = load i32, i32* %6, align 4
  %118 = load i32, i32* %12, align 4
  %119 = call i32 @MB_Decode(i32* %115, %struct.mb_structure* %116, i32 %117, i32 %118)
  %120 = load %struct.mb_structure*, %struct.mb_structure** %10, align 8
  call void @Clip(%struct.mb_structure* %120)
  %121 = load i32, i32* %15, align 4
  %122 = load i32, i32* %16, align 4
  %123 = load %struct.mb_structure*, %struct.mb_structure** %10, align 8
  %124 = load %struct.pict_image*, %struct.pict_image** %9, align 8
  call void @ReconImage(i32 %121, i32 %122, %struct.mb_structure* %123, %struct.pict_image* %124)
  %125 = load i32*, i32** %11, align 8
  %126 = bitcast i32* %125 to i8*
  call void @free(i8* %126) #8
  br label %127

127:                                              ; preds = %114
  %128 = load i32, i32* %15, align 4
  %129 = add nsw i32 %128, 1
  store i32 %129, i32* %15, align 4
  br label %55

130:                                              ; preds = %55
  br label %131

131:                                              ; preds = %130
  %132 = load i32, i32* %16, align 4
  %133 = add nsw i32 %132, 1
  store i32 %133, i32* %16, align 4
  br label %33

134:                                              ; preds = %33
  %135 = load i32, i32* %6, align 4
  %136 = sitofp i32 %135 to float
  %137 = load %struct.pict*, %struct.pict** %8, align 8
  %138 = getelementptr inbounds %struct.pict, %struct.pict* %137, i32 0, i32 19
  store float %136, float* %138, align 4
  %139 = load %struct.mb_structure*, %struct.mb_structure** %10, align 8
  %140 = bitcast %struct.mb_structure* %139 to i8*
  call void @free(i8* %140) #8
  %141 = load %struct.pict_image*, %struct.pict_image** %9, align 8
  ret %struct.pict_image* %141
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CountBitsMB(i32 %0, i32 %1, i32 %2, i32 %3, %struct.pict* %4, %struct.bits_counted* %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca %struct.pict*, align 8
  %12 = alloca %struct.bits_counted*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  store i32 %0, i32* %7, align 4
  store i32 %1, i32* %8, align 4
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store %struct.pict* %4, %struct.pict** %11, align 8
  store %struct.bits_counted* %5, %struct.bits_counted** %12, align 8
  %16 = load i32, i32* @trace, align 4
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %18, label %33

18:                                               ; preds = %6
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %20 = load %struct.pict*, %struct.pict** %11, align 8
  %21 = getelementptr inbounds %struct.pict, %struct.pict* %20, i32 0, i32 13
  %22 = load i32, i32* %21, align 4
  %23 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0), i32 %22)
  %24 = load %struct.pict*, %struct.pict** %11, align 8
  %25 = getelementptr inbounds %struct.pict, %struct.pict* %24, i32 0, i32 7
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %26, 1
  br i1 %27, label %28, label %32

28:                                               ; preds = %18
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %30 = load i32, i32* %8, align 4
  %31 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1.5, i64 0, i64 0), i32 %30)
  br label %32

32:                                               ; preds = %28, %18
  br label %33

33:                                               ; preds = %32, %6
  %34 = load %struct.pict*, %struct.pict** %11, align 8
  %35 = getelementptr inbounds %struct.pict, %struct.pict* %34, i32 0, i32 7
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %36, 1
  br i1 %37, label %38, label %44

38:                                               ; preds = %33
  %39 = load i32, i32* %8, align 4
  call void @putbits(i32 1, i32 %39)
  %40 = load %struct.bits_counted*, %struct.bits_counted** %12, align 8
  %41 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %40, i32 0, i32 7
  %42 = load i32, i32* %41, align 4
  %43 = add nsw i32 %42, 1
  store i32 %43, i32* %41, align 4
  br label %44

44:                                               ; preds = %38, %33
  %45 = load i32, i32* %8, align 4
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %47, label %48

47:                                               ; preds = %44
  br label %175

48:                                               ; preds = %44
  %49 = load i32, i32* %7, align 4
  %50 = load i32, i32* %9, align 4
  %51 = and i32 %50, 3
  %52 = shl i32 %51, 4
  %53 = or i32 %49, %52
  store i32 %53, i32* %14, align 4
  %54 = load i32, i32* @trace, align 4
  %55 = icmp ne i32 %54, 0
  br i1 %55, label %56, label %61

56:                                               ; preds = %48
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %58 = load i32, i32* %9, align 4
  %59 = load i32, i32* %14, align 4
  %60 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %57, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2.6, i64 0, i64 0), i32 %58, i32 %59)
  br label %61

61:                                               ; preds = %56, %48
  %62 = load %struct.pict*, %struct.pict** %11, align 8
  %63 = getelementptr inbounds %struct.pict, %struct.pict* %62, i32 0, i32 7
  %64 = load i32, i32* %63, align 4
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %66, label %70

66:                                               ; preds = %61
  %67 = load i32, i32* %9, align 4
  %68 = load i32, i32* %7, align 4
  %69 = call i32 @put_cbpcm_intra(i32 %67, i32 %68)
  store i32 %69, i32* %15, align 4
  br label %74

70:                                               ; preds = %61
  %71 = load i32, i32* %9, align 4
  %72 = load i32, i32* %7, align 4
  %73 = call i32 @put_cbpcm_inter(i32 %71, i32 %72)
  store i32 %73, i32* %15, align 4
  br label %74

74:                                               ; preds = %70, %66
  %75 = load i32, i32* %15, align 4
  %76 = load %struct.bits_counted*, %struct.bits_counted** %12, align 8
  %77 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %76, i32 0, i32 4
  %78 = load i32, i32* %77, align 4
  %79 = add nsw i32 %78, %75
  store i32 %79, i32* %77, align 4
  %80 = load %struct.pict*, %struct.pict** %11, align 8
  %81 = getelementptr inbounds %struct.pict, %struct.pict* %80, i32 0, i32 10
  %82 = load i32, i32* %81, align 4
  %83 = icmp ne i32 %82, 0
  br i1 %83, label %84, label %119

84:                                               ; preds = %74
  %85 = load %struct.pict*, %struct.pict** %11, align 8
  %86 = getelementptr inbounds %struct.pict, %struct.pict* %85, i32 0, i32 16
  %87 = load i32, i32* %86, align 4
  switch i32 %87, label %108 [
    i32 0, label %88
    i32 1, label %93
    i32 2, label %98
  ]

88:                                               ; preds = %84
  call void @putbits(i32 1, i32 0)
  %89 = load %struct.bits_counted*, %struct.bits_counted** %12, align 8
  %90 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %89, i32 0, i32 5
  %91 = load i32, i32* %90, align 4
  %92 = add nsw i32 %91, 1
  store i32 %92, i32* %90, align 4
  br label %108

93:                                               ; preds = %84
  call void @putbits(i32 2, i32 2)
  %94 = load %struct.bits_counted*, %struct.bits_counted** %12, align 8
  %95 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %94, i32 0, i32 5
  %96 = load i32, i32* %95, align 4
  %97 = add nsw i32 %96, 2
  store i32 %97, i32* %95, align 4
  br label %108

98:                                               ; preds = %84
  call void @putbits(i32 2, i32 3)
  %99 = load %struct.bits_counted*, %struct.bits_counted** %12, align 8
  %100 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %99, i32 0, i32 5
  %101 = load i32, i32* %100, align 4
  %102 = add nsw i32 %101, 2
  store i32 %102, i32* %100, align 4
  %103 = load i32, i32* %10, align 4
  call void @putbits(i32 6, i32 %103)
  %104 = load %struct.bits_counted*, %struct.bits_counted** %12, align 8
  %105 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %104, i32 0, i32 6
  %106 = load i32, i32* %105, align 4
  %107 = add nsw i32 %106, 6
  store i32 %107, i32* %105, align 4
  br label %108

108:                                              ; preds = %98, %93, %88, %84
  %109 = load i32, i32* @trace, align 4
  %110 = icmp ne i32 %109, 0
  br i1 %110, label %111, label %118

111:                                              ; preds = %108
  %112 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %113 = load %struct.pict*, %struct.pict** %11, align 8
  %114 = getelementptr inbounds %struct.pict, %struct.pict* %113, i32 0, i32 16
  %115 = load i32, i32* %114, align 4
  %116 = load i32, i32* %10, align 4
  %117 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %112, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3.7, i64 0, i64 0), i32 %115, i32 %116)
  br label %118

118:                                              ; preds = %111, %108
  br label %119

119:                                              ; preds = %118, %74
  %120 = load i32, i32* %9, align 4
  %121 = ashr i32 %120, 2
  store i32 %121, i32* %13, align 4
  %122 = load i32, i32* %7, align 4
  %123 = icmp eq i32 %122, 3
  br i1 %123, label %127, label %124

124:                                              ; preds = %119
  %125 = load i32, i32* %7, align 4
  %126 = icmp eq i32 %125, 4
  br i1 %126, label %127, label %130

127:                                              ; preds = %124, %119
  %128 = load i32, i32* %13, align 4
  %129 = xor i32 %128, 15
  store i32 %129, i32* %13, align 4
  br label %130

130:                                              ; preds = %127, %124
  %131 = load i32, i32* @trace, align 4
  %132 = icmp ne i32 %131, 0
  br i1 %132, label %133, label %138

133:                                              ; preds = %130
  %134 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %135 = load i32, i32* %9, align 4
  %136 = load i32, i32* %13, align 4
  %137 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %134, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4.8, i64 0, i64 0), i32 %135, i32 %136)
  br label %138

138:                                              ; preds = %133, %130
  %139 = load i32, i32* %9, align 4
  %140 = load i32, i32* %7, align 4
  %141 = call i32 @put_cbpy(i32 %139, i32 %140)
  store i32 %141, i32* %15, align 4
  %142 = load i32, i32* %15, align 4
  %143 = load %struct.bits_counted*, %struct.bits_counted** %12, align 8
  %144 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %143, i32 0, i32 3
  %145 = load i32, i32* %144, align 4
  %146 = add nsw i32 %145, %142
  store i32 %146, i32* %144, align 4
  %147 = load i32, i32* %7, align 4
  %148 = icmp eq i32 %147, 1
  br i1 %148, label %152, label %149

149:                                              ; preds = %138
  %150 = load i32, i32* %7, align 4
  %151 = icmp eq i32 %150, 4
  br i1 %151, label %152, label %174

152:                                              ; preds = %149, %138
  %153 = load i32, i32* @trace, align 4
  %154 = icmp ne i32 %153, 0
  br i1 %154, label %155, label %158

155:                                              ; preds = %152
  %156 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %157 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %156, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0))
  br label %158

158:                                              ; preds = %155, %152
  %159 = load %struct.pict*, %struct.pict** %11, align 8
  %160 = getelementptr inbounds %struct.pict, %struct.pict* %159, i32 0, i32 12
  %161 = load i32, i32* %160, align 4
  switch i32 %161, label %166 [
    i32 -1, label %162
    i32 -2, label %163
    i32 1, label %164
    i32 2, label %165
  ]

162:                                              ; preds = %158
  call void @putbits(i32 2, i32 0)
  br label %169

163:                                              ; preds = %158
  call void @putbits(i32 2, i32 1)
  br label %169

164:                                              ; preds = %158
  call void @putbits(i32 2, i32 2)
  br label %169

165:                                              ; preds = %158
  call void @putbits(i32 2, i32 3)
  br label %169

166:                                              ; preds = %158
  %167 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %168 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %167, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0))
  call void @exit(i32 -1) #9
  unreachable

169:                                              ; preds = %165, %164, %163, %162
  %170 = load %struct.bits_counted*, %struct.bits_counted** %12, align 8
  %171 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %170, i32 0, i32 9
  %172 = load i32, i32* %171, align 4
  %173 = add nsw i32 %172, 2
  store i32 %173, i32* %171, align 4
  br label %174

174:                                              ; preds = %169, %149
  br label %175

175:                                              ; preds = %174, %47
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Count_sac_BitsMB(i32 %0, i32 %1, i32 %2, i32 %3, %struct.pict* %4, %struct.bits_counted* %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca %struct.pict*, align 8
  %12 = alloca %struct.bits_counted*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  store i32 %0, i32* %7, align 4
  store i32 %1, i32* %8, align 4
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store %struct.pict* %4, %struct.pict** %11, align 8
  store %struct.bits_counted* %5, %struct.bits_counted** %12, align 8
  store i32 1, i32* @arith_used, align 4
  %17 = load i32, i32* @trace, align 4
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %34

19:                                               ; preds = %6
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %21 = load %struct.pict*, %struct.pict** %11, align 8
  %22 = getelementptr inbounds %struct.pict, %struct.pict* %21, i32 0, i32 13
  %23 = load i32, i32* %22, align 4
  %24 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %20, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0), i32 %23)
  %25 = load %struct.pict*, %struct.pict** %11, align 8
  %26 = getelementptr inbounds %struct.pict, %struct.pict* %25, i32 0, i32 7
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, 1
  br i1 %28, label %29, label %33

29:                                               ; preds = %19
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %31 = load i32, i32* %8, align 4
  %32 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.7, i64 0, i64 0), i32 %31)
  br label %33

33:                                               ; preds = %29, %19
  br label %34

34:                                               ; preds = %33, %6
  %35 = load %struct.pict*, %struct.pict** %11, align 8
  %36 = getelementptr inbounds %struct.pict, %struct.pict* %35, i32 0, i32 7
  %37 = load i32, i32* %36, align 4
  %38 = icmp eq i32 %37, 1
  br i1 %38, label %39, label %46

39:                                               ; preds = %34
  %40 = load i32, i32* %8, align 4
  %41 = call i32 @AR_Encode(i32 %40, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @cumf_COD, i64 0, i64 0))
  %42 = load %struct.bits_counted*, %struct.bits_counted** %12, align 8
  %43 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %42, i32 0, i32 7
  %44 = load i32, i32* %43, align 4
  %45 = add nsw i32 %44, %41
  store i32 %45, i32* %43, align 4
  br label %46

46:                                               ; preds = %39, %34
  %47 = load i32, i32* %8, align 4
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %49, label %50

49:                                               ; preds = %46
  br label %210

50:                                               ; preds = %46
  %51 = load i32, i32* %7, align 4
  %52 = load i32, i32* %9, align 4
  %53 = and i32 %52, 3
  %54 = shl i32 %53, 4
  %55 = or i32 %51, %54
  store i32 %55, i32* %14, align 4
  %56 = load i32, i32* @trace, align 4
  %57 = icmp ne i32 %56, 0
  br i1 %57, label %58, label %63

58:                                               ; preds = %50
  %59 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %60 = load i32, i32* %9, align 4
  %61 = load i32, i32* %14, align 4
  %62 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %59, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2.6, i64 0, i64 0), i32 %60, i32 %61)
  br label %63

63:                                               ; preds = %58, %50
  %64 = load %struct.pict*, %struct.pict** %11, align 8
  %65 = getelementptr inbounds %struct.pict, %struct.pict* %64, i32 0, i32 7
  %66 = load i32, i32* %65, align 4
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %72

68:                                               ; preds = %63
  %69 = load i32, i32* %14, align 4
  %70 = call i32 @indexfn(i32 %69, i32* getelementptr inbounds ([9 x i32], [9 x i32]* @mcbpc_intratab, i64 0, i64 0), i32 9)
  %71 = call i32 @AR_Encode(i32 %70, i32* getelementptr inbounds ([10 x i32], [10 x i32]* @cumf_MCBPC_intra, i64 0, i64 0))
  store i32 %71, i32* %15, align 4
  br label %76

72:                                               ; preds = %63
  %73 = load i32, i32* %14, align 4
  %74 = call i32 @indexfn(i32 %73, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @mcbpctab, i64 0, i64 0), i32 21)
  %75 = call i32 @AR_Encode(i32 %74, i32* getelementptr inbounds ([22 x i32], [22 x i32]* @cumf_MCBPC, i64 0, i64 0))
  store i32 %75, i32* %15, align 4
  br label %76

76:                                               ; preds = %72, %68
  %77 = load i32, i32* %15, align 4
  %78 = load %struct.bits_counted*, %struct.bits_counted** %12, align 8
  %79 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %78, i32 0, i32 4
  %80 = load i32, i32* %79, align 4
  %81 = add nsw i32 %80, %77
  store i32 %81, i32* %79, align 4
  %82 = load %struct.pict*, %struct.pict** %11, align 8
  %83 = getelementptr inbounds %struct.pict, %struct.pict* %82, i32 0, i32 10
  %84 = load i32, i32* %83, align 4
  %85 = icmp ne i32 %84, 0
  br i1 %85, label %86, label %157

86:                                               ; preds = %76
  %87 = load %struct.pict*, %struct.pict** %11, align 8
  %88 = getelementptr inbounds %struct.pict, %struct.pict* %87, i32 0, i32 16
  %89 = load i32, i32* %88, align 4
  switch i32 %89, label %146 [
    i32 0, label %90
    i32 1, label %96
    i32 2, label %102
  ]

90:                                               ; preds = %86
  %91 = call i32 @AR_Encode(i32 0, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @cumf_MODB, i64 0, i64 0))
  %92 = load %struct.bits_counted*, %struct.bits_counted** %12, align 8
  %93 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %92, i32 0, i32 5
  %94 = load i32, i32* %93, align 4
  %95 = add nsw i32 %94, %91
  store i32 %95, i32* %93, align 4
  br label %146

96:                                               ; preds = %86
  %97 = call i32 @AR_Encode(i32 1, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @cumf_MODB, i64 0, i64 0))
  %98 = load %struct.bits_counted*, %struct.bits_counted** %12, align 8
  %99 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %98, i32 0, i32 5
  %100 = load i32, i32* %99, align 4
  %101 = add nsw i32 %100, %97
  store i32 %101, i32* %99, align 4
  br label %146

102:                                              ; preds = %86
  %103 = call i32 @AR_Encode(i32 2, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @cumf_MODB, i64 0, i64 0))
  %104 = load %struct.bits_counted*, %struct.bits_counted** %12, align 8
  %105 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %104, i32 0, i32 5
  %106 = load i32, i32* %105, align 4
  %107 = add nsw i32 %106, %103
  store i32 %107, i32* %105, align 4
  store i32 5, i32* %16, align 4
  br label %108

108:                                              ; preds = %123, %102
  %109 = load i32, i32* %16, align 4
  %110 = icmp sgt i32 %109, 1
  br i1 %110, label %111, label %126

111:                                              ; preds = %108
  %112 = load i32, i32* %10, align 4
  %113 = load i32, i32* %16, align 4
  %114 = shl i32 1, %113
  %115 = and i32 %112, %114
  %116 = load i32, i32* %16, align 4
  %117 = ashr i32 %115, %116
  %118 = call i32 @AR_Encode(i32 %117, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @cumf_YCBPB, i64 0, i64 0))
  %119 = load %struct.bits_counted*, %struct.bits_counted** %12, align 8
  %120 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %119, i32 0, i32 6
  %121 = load i32, i32* %120, align 4
  %122 = add nsw i32 %121, %118
  store i32 %122, i32* %120, align 4
  br label %123

123:                                              ; preds = %111
  %124 = load i32, i32* %16, align 4
  %125 = add nsw i32 %124, -1
  store i32 %125, i32* %16, align 4
  br label %108

126:                                              ; preds = %108
  store i32 1, i32* %16, align 4
  br label %127

127:                                              ; preds = %142, %126
  %128 = load i32, i32* %16, align 4
  %129 = icmp sgt i32 %128, -1
  br i1 %129, label %130, label %145

130:                                              ; preds = %127
  %131 = load i32, i32* %10, align 4
  %132 = load i32, i32* %16, align 4
  %133 = shl i32 1, %132
  %134 = and i32 %131, %133
  %135 = load i32, i32* %16, align 4
  %136 = ashr i32 %134, %135
  %137 = call i32 @AR_Encode(i32 %136, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @cumf_UVCBPB, i64 0, i64 0))
  %138 = load %struct.bits_counted*, %struct.bits_counted** %12, align 8
  %139 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %138, i32 0, i32 6
  %140 = load i32, i32* %139, align 4
  %141 = add nsw i32 %140, %137
  store i32 %141, i32* %139, align 4
  br label %142

142:                                              ; preds = %130
  %143 = load i32, i32* %16, align 4
  %144 = add nsw i32 %143, -1
  store i32 %144, i32* %16, align 4
  br label %127

145:                                              ; preds = %127
  br label %146

146:                                              ; preds = %145, %96, %90, %86
  %147 = load i32, i32* @trace, align 4
  %148 = icmp ne i32 %147, 0
  br i1 %148, label %149, label %156

149:                                              ; preds = %146
  %150 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %151 = load %struct.pict*, %struct.pict** %11, align 8
  %152 = getelementptr inbounds %struct.pict, %struct.pict* %151, i32 0, i32 16
  %153 = load i32, i32* %152, align 4
  %154 = load i32, i32* %10, align 4
  %155 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %150, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3.7, i64 0, i64 0), i32 %153, i32 %154)
  br label %156

156:                                              ; preds = %149, %146
  br label %157

157:                                              ; preds = %156, %76
  %158 = load i32, i32* %9, align 4
  %159 = ashr i32 %158, 2
  store i32 %159, i32* %13, align 4
  %160 = load i32, i32* %7, align 4
  %161 = icmp eq i32 %160, 3
  br i1 %161, label %165, label %162

162:                                              ; preds = %157
  %163 = load i32, i32* %7, align 4
  %164 = icmp eq i32 %163, 4
  br i1 %164, label %165, label %169

165:                                              ; preds = %162, %157
  %166 = load i32, i32* %13, align 4
  %167 = call i32 @indexfn(i32 %166, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @cbpy_intratab, i64 0, i64 0), i32 16)
  %168 = call i32 @AR_Encode(i32 %167, i32* getelementptr inbounds ([17 x i32], [17 x i32]* @cumf_CBPY_intra, i64 0, i64 0))
  store i32 %168, i32* %15, align 4
  br label %173

169:                                              ; preds = %162
  %170 = load i32, i32* %13, align 4
  %171 = call i32 @indexfn(i32 %170, i32* getelementptr inbounds ([16 x i32], [16 x i32]* @cbpytab, i64 0, i64 0), i32 16)
  %172 = call i32 @AR_Encode(i32 %171, i32* getelementptr inbounds ([17 x i32], [17 x i32]* @cumf_CBPY, i64 0, i64 0))
  store i32 %172, i32* %15, align 4
  br label %173

173:                                              ; preds = %169, %165
  %174 = load i32, i32* @trace, align 4
  %175 = icmp ne i32 %174, 0
  br i1 %175, label %176, label %181

176:                                              ; preds = %173
  %177 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %178 = load i32, i32* %9, align 4
  %179 = load i32, i32* %13, align 4
  %180 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %177, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4.8, i64 0, i64 0), i32 %178, i32 %179)
  br label %181

181:                                              ; preds = %176, %173
  %182 = load i32, i32* %15, align 4
  %183 = load %struct.bits_counted*, %struct.bits_counted** %12, align 8
  %184 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %183, i32 0, i32 3
  %185 = load i32, i32* %184, align 4
  %186 = add nsw i32 %185, %182
  store i32 %186, i32* %184, align 4
  %187 = load i32, i32* %7, align 4
  %188 = icmp eq i32 %187, 1
  br i1 %188, label %192, label %189

189:                                              ; preds = %181
  %190 = load i32, i32* %7, align 4
  %191 = icmp eq i32 %190, 4
  br i1 %191, label %192, label %209

192:                                              ; preds = %189, %181
  %193 = load i32, i32* @trace, align 4
  %194 = icmp ne i32 %193, 0
  br i1 %194, label %195, label %198

195:                                              ; preds = %192
  %196 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %197 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %196, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0))
  br label %198

198:                                              ; preds = %195, %192
  %199 = load %struct.pict*, %struct.pict** %11, align 8
  %200 = getelementptr inbounds %struct.pict, %struct.pict* %199, i32 0, i32 12
  %201 = load i32, i32* %200, align 4
  %202 = add nsw i32 %201, 2
  %203 = call i32 @indexfn(i32 %202, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @dquanttab, i64 0, i64 0), i32 4)
  %204 = call i32 @AR_Encode(i32 %203, i32* getelementptr inbounds ([5 x i32], [5 x i32]* @cumf_DQUANT, i64 0, i64 0))
  %205 = load %struct.bits_counted*, %struct.bits_counted** %12, align 8
  %206 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %205, i32 0, i32 9
  %207 = load i32, i32* %206, align 4
  %208 = add nsw i32 %207, %204
  store i32 %208, i32* %206, align 4
  br label %209

209:                                              ; preds = %198, %189
  br label %210

210:                                              ; preds = %209, %49
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @CountBitsSlice(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 0, i32* %5, align 4
  %6 = load i32, i32* @arith_used, align 4
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %8, label %12

8:                                                ; preds = %2
  %9 = call i32 (...) bitcast (i32 ()* @encoder_flush to i32 (...)*)()
  %10 = load i32, i32* %5, align 4
  %11 = add nsw i32 %10, %9
  store i32 %11, i32* %5, align 4
  store i32 0, i32* @arith_used, align 4
  br label %12

12:                                               ; preds = %8, %2
  %13 = load i32, i32* @trace, align 4
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %15, label %18

15:                                               ; preds = %12
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.8, i64 0, i64 0))
  br label %18

18:                                               ; preds = %15, %12
  call void @putbits(i32 17, i32 1)
  %19 = load i32, i32* %5, align 4
  %20 = add nsw i32 %19, 17
  store i32 %20, i32* %5, align 4
  %21 = load i32, i32* @trace, align 4
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %18
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %25 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 0))
  br label %26

26:                                               ; preds = %23, %18
  %27 = load i32, i32* %3, align 4
  call void @putbits(i32 5, i32 %27)
  %28 = load i32, i32* %5, align 4
  %29 = add nsw i32 %28, 5
  store i32 %29, i32* %5, align 4
  %30 = load i32, i32* @trace, align 4
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %32, label %35

32:                                               ; preds = %26
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %34 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i64 0, i64 0))
  br label %35

35:                                               ; preds = %32, %26
  call void @putbits(i32 2, i32 0)
  %36 = load i32, i32* %5, align 4
  %37 = add nsw i32 %36, 2
  store i32 %37, i32* %5, align 4
  %38 = load i32, i32* @trace, align 4
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %40, label %43

40:                                               ; preds = %35
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %42 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %41, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.11, i64 0, i64 0))
  br label %43

43:                                               ; preds = %40, %35
  %44 = load i32, i32* %4, align 4
  call void @putbits(i32 5, i32 %44)
  %45 = load i32, i32* %5, align 4
  %46 = add nsw i32 %45, 5
  store i32 %46, i32* %5, align 4
  %47 = load i32, i32* %5, align 4
  ret i32 %47
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CountBitsCoeff(i32* %0, i32 %1, i32 %2, %struct.bits_counted* %3, i32 %4) #0 {
  %6 = alloca i32*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %struct.bits_counted*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32* %0, i32** %6, align 8
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store %struct.bits_counted* %3, %struct.bits_counted** %9, align 8
  store i32 %4, i32* %10, align 4
  %12 = load i32, i32* %7, align 4
  %13 = icmp eq i32 %12, 3
  br i1 %13, label %17, label %14

14:                                               ; preds = %5
  %15 = load i32, i32* %7, align 4
  %16 = icmp eq i32 %15, 4
  br i1 %16, label %17, label %52

17:                                               ; preds = %14, %5
  store i32 0, i32* %11, align 4
  br label %18

18:                                               ; preds = %31, %17
  %19 = load i32, i32* %11, align 4
  %20 = icmp slt i32 %19, 4
  br i1 %20, label %21, label %34

21:                                               ; preds = %18
  %22 = load i32, i32* %7, align 4
  %23 = load i32*, i32** %6, align 8
  %24 = load i32, i32* %11, align 4
  %25 = load i32, i32* %10, align 4
  %26 = call i32 @CodeCoeff(i32 %22, i32* %23, i32 %24, i32 %25)
  %27 = load %struct.bits_counted*, %struct.bits_counted** %9, align 8
  %28 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %27, i32 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = add nsw i32 %29, %26
  store i32 %30, i32* %28, align 4
  br label %31

31:                                               ; preds = %21
  %32 = load i32, i32* %11, align 4
  %33 = add nsw i32 %32, 1
  store i32 %33, i32* %11, align 4
  br label %18

34:                                               ; preds = %18
  store i32 4, i32* %11, align 4
  br label %35

35:                                               ; preds = %48, %34
  %36 = load i32, i32* %11, align 4
  %37 = icmp slt i32 %36, 6
  br i1 %37, label %38, label %51

38:                                               ; preds = %35
  %39 = load i32, i32* %7, align 4
  %40 = load i32*, i32** %6, align 8
  %41 = load i32, i32* %11, align 4
  %42 = load i32, i32* %10, align 4
  %43 = call i32 @CodeCoeff(i32 %39, i32* %40, i32 %41, i32 %42)
  %44 = load %struct.bits_counted*, %struct.bits_counted** %9, align 8
  %45 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %44, i32 0, i32 1
  %46 = load i32, i32* %45, align 4
  %47 = add nsw i32 %46, %43
  store i32 %47, i32* %45, align 4
  br label %48

48:                                               ; preds = %38
  %49 = load i32, i32* %11, align 4
  %50 = add nsw i32 %49, 1
  store i32 %50, i32* %11, align 4
  br label %35

51:                                               ; preds = %35
  br label %173

52:                                               ; preds = %14
  store i32 0, i32* %11, align 4
  br label %53

53:                                               ; preds = %109, %52
  %54 = load i32, i32* %11, align 4
  %55 = icmp slt i32 %54, 4
  br i1 %55, label %56, label %112

56:                                               ; preds = %53
  %57 = load i32, i32* %11, align 4
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %63

59:                                               ; preds = %56
  %60 = load i32, i32* %8, align 4
  %61 = and i32 %60, 32
  %62 = icmp ne i32 %61, 0
  br i1 %62, label %98, label %63

63:                                               ; preds = %59, %56
  %64 = load i32, i32* %11, align 4
  %65 = icmp eq i32 %64, 1
  br i1 %65, label %66, label %70

66:                                               ; preds = %63
  %67 = load i32, i32* %8, align 4
  %68 = and i32 %67, 16
  %69 = icmp ne i32 %68, 0
  br i1 %69, label %98, label %70

70:                                               ; preds = %66, %63
  %71 = load i32, i32* %11, align 4
  %72 = icmp eq i32 %71, 2
  br i1 %72, label %73, label %77

73:                                               ; preds = %70
  %74 = load i32, i32* %8, align 4
  %75 = and i32 %74, 8
  %76 = icmp ne i32 %75, 0
  br i1 %76, label %98, label %77

77:                                               ; preds = %73, %70
  %78 = load i32, i32* %11, align 4
  %79 = icmp eq i32 %78, 3
  br i1 %79, label %80, label %84

80:                                               ; preds = %77
  %81 = load i32, i32* %8, align 4
  %82 = and i32 %81, 4
  %83 = icmp ne i32 %82, 0
  br i1 %83, label %98, label %84

84:                                               ; preds = %80, %77
  %85 = load i32, i32* %11, align 4
  %86 = icmp eq i32 %85, 4
  br i1 %86, label %87, label %91

87:                                               ; preds = %84
  %88 = load i32, i32* %8, align 4
  %89 = and i32 %88, 2
  %90 = icmp ne i32 %89, 0
  br i1 %90, label %98, label %91

91:                                               ; preds = %87, %84
  %92 = load i32, i32* %11, align 4
  %93 = icmp eq i32 %92, 5
  br i1 %93, label %94, label %108

94:                                               ; preds = %91
  %95 = load i32, i32* %8, align 4
  %96 = and i32 %95, 1
  %97 = icmp ne i32 %96, 0
  br i1 %97, label %98, label %108

98:                                               ; preds = %94, %87, %80, %73, %66, %59
  %99 = load i32, i32* %7, align 4
  %100 = load i32*, i32** %6, align 8
  %101 = load i32, i32* %11, align 4
  %102 = load i32, i32* %10, align 4
  %103 = call i32 @CodeCoeff(i32 %99, i32* %100, i32 %101, i32 %102)
  %104 = load %struct.bits_counted*, %struct.bits_counted** %9, align 8
  %105 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %104, i32 0, i32 0
  %106 = load i32, i32* %105, align 4
  %107 = add nsw i32 %106, %103
  store i32 %107, i32* %105, align 4
  br label %108

108:                                              ; preds = %98, %94, %91
  br label %109

109:                                              ; preds = %108
  %110 = load i32, i32* %11, align 4
  %111 = add nsw i32 %110, 1
  store i32 %111, i32* %11, align 4
  br label %53

112:                                              ; preds = %53
  store i32 4, i32* %11, align 4
  br label %113

113:                                              ; preds = %169, %112
  %114 = load i32, i32* %11, align 4
  %115 = icmp slt i32 %114, 6
  br i1 %115, label %116, label %172

116:                                              ; preds = %113
  %117 = load i32, i32* %11, align 4
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %119, label %123

119:                                              ; preds = %116
  %120 = load i32, i32* %8, align 4
  %121 = and i32 %120, 32
  %122 = icmp ne i32 %121, 0
  br i1 %122, label %158, label %123

123:                                              ; preds = %119, %116
  %124 = load i32, i32* %11, align 4
  %125 = icmp eq i32 %124, 1
  br i1 %125, label %126, label %130

126:                                              ; preds = %123
  %127 = load i32, i32* %8, align 4
  %128 = and i32 %127, 16
  %129 = icmp ne i32 %128, 0
  br i1 %129, label %158, label %130

130:                                              ; preds = %126, %123
  %131 = load i32, i32* %11, align 4
  %132 = icmp eq i32 %131, 2
  br i1 %132, label %133, label %137

133:                                              ; preds = %130
  %134 = load i32, i32* %8, align 4
  %135 = and i32 %134, 8
  %136 = icmp ne i32 %135, 0
  br i1 %136, label %158, label %137

137:                                              ; preds = %133, %130
  %138 = load i32, i32* %11, align 4
  %139 = icmp eq i32 %138, 3
  br i1 %139, label %140, label %144

140:                                              ; preds = %137
  %141 = load i32, i32* %8, align 4
  %142 = and i32 %141, 4
  %143 = icmp ne i32 %142, 0
  br i1 %143, label %158, label %144

144:                                              ; preds = %140, %137
  %145 = load i32, i32* %11, align 4
  %146 = icmp eq i32 %145, 4
  br i1 %146, label %147, label %151

147:                                              ; preds = %144
  %148 = load i32, i32* %8, align 4
  %149 = and i32 %148, 2
  %150 = icmp ne i32 %149, 0
  br i1 %150, label %158, label %151

151:                                              ; preds = %147, %144
  %152 = load i32, i32* %11, align 4
  %153 = icmp eq i32 %152, 5
  br i1 %153, label %154, label %168

154:                                              ; preds = %151
  %155 = load i32, i32* %8, align 4
  %156 = and i32 %155, 1
  %157 = icmp ne i32 %156, 0
  br i1 %157, label %158, label %168

158:                                              ; preds = %154, %147, %140, %133, %126, %119
  %159 = load i32, i32* %7, align 4
  %160 = load i32*, i32** %6, align 8
  %161 = load i32, i32* %11, align 4
  %162 = load i32, i32* %10, align 4
  %163 = call i32 @CodeCoeff(i32 %159, i32* %160, i32 %161, i32 %162)
  %164 = load %struct.bits_counted*, %struct.bits_counted** %9, align 8
  %165 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %164, i32 0, i32 1
  %166 = load i32, i32* %165, align 4
  %167 = add nsw i32 %166, %163
  store i32 %167, i32* %165, align 4
  br label %168

168:                                              ; preds = %158, %154, %151
  br label %169

169:                                              ; preds = %168
  %170 = load i32, i32* %11, align 4
  %171 = add nsw i32 %170, 1
  store i32 %171, i32* %11, align 4
  br label %113

172:                                              ; preds = %113
  br label %173

173:                                              ; preds = %172, %51
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @CodeCoeff(i32 %0, i32* %1, i32 %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i32* %1, i32** %6, align 8
  store i32 %2, i32* %7, align 4
  store i32 %3, i32* %8, align 4
  store i32 0, i32* %10, align 4
  store i32 0, i32* %12, align 4
  store i32 1, i32* %15, align 4
  store i32 0, i32* %16, align 4
  store i32 0, i32* %17, align 4
  store i32 0, i32* %14, align 4
  store i32 0, i32* %13, align 4
  store i32 0, i32* %11, align 4
  %19 = load i32, i32* @trace, align 4
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %25

21:                                               ; preds = %4
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %23 = load i32, i32* %7, align 4
  %24 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.12, i64 0, i64 0), i32 %23)
  br label %25

25:                                               ; preds = %21, %4
  %26 = load i32, i32* %7, align 4
  %27 = load i32, i32* %8, align 4
  %28 = mul nsw i32 %26, %27
  store i32 %28, i32* %9, align 4
  br label %29

29:                                               ; preds = %156, %25
  %30 = load i32, i32* %9, align 4
  %31 = load i32, i32* %7, align 4
  %32 = add nsw i32 %31, 1
  %33 = load i32, i32* %8, align 4
  %34 = mul nsw i32 %32, %33
  %35 = icmp slt i32 %30, %34
  br i1 %35, label %36, label %159

36:                                               ; preds = %29
  %37 = load i32, i32* %9, align 4
  %38 = load i32, i32* %8, align 4
  %39 = srem i32 %37, %38
  %40 = icmp ne i32 %39, 0
  br i1 %40, label %74, label %41

41:                                               ; preds = %36
  %42 = load i32, i32* %5, align 4
  %43 = icmp eq i32 %42, 3
  br i1 %43, label %47, label %44

44:                                               ; preds = %41
  %45 = load i32, i32* %5, align 4
  %46 = icmp eq i32 %45, 4
  br i1 %46, label %47, label %74

47:                                               ; preds = %44, %41
  %48 = load i32, i32* @trace, align 4
  %49 = icmp ne i32 %48, 0
  br i1 %49, label %50, label %53

50:                                               ; preds = %47
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %52 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %51, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i64 0, i64 0))
  br label %53

53:                                               ; preds = %50, %47
  %54 = load i32*, i32** %6, align 8
  %55 = load i32, i32* %7, align 4
  %56 = load i32, i32* %8, align 4
  %57 = mul nsw i32 %55, %56
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i32, i32* %54, i64 %58
  %60 = load i32, i32* %59, align 4
  %61 = icmp ne i32 %60, 128
  br i1 %61, label %62, label %70

62:                                               ; preds = %53
  %63 = load i32*, i32** %6, align 8
  %64 = load i32, i32* %7, align 4
  %65 = load i32, i32* %8, align 4
  %66 = mul nsw i32 %64, %65
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds i32, i32* %63, i64 %67
  %69 = load i32, i32* %68, align 4
  call void @putbits(i32 8, i32 %69)
  br label %71

70:                                               ; preds = %53
  call void @putbits(i32 8, i32 255)
  br label %71

71:                                               ; preds = %70, %62
  %72 = load i32, i32* %10, align 4
  %73 = add nsw i32 %72, 8
  store i32 %73, i32* %10, align 4
  br label %155

74:                                               ; preds = %44, %36
  store i32 0, i32* %17, align 4
  %75 = load i32*, i32** %6, align 8
  %76 = load i32, i32* %9, align 4
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i32, i32* %75, i64 %77
  %79 = load i32, i32* %78, align 4
  store i32 %79, i32* %14, align 4
  %80 = icmp eq i32 %79, 0
  br i1 %80, label %81, label %84

81:                                               ; preds = %74
  %82 = load i32, i32* %12, align 4
  %83 = add nsw i32 %82, 1
  store i32 %83, i32* %12, align 4
  br label %154

84:                                               ; preds = %74
  %85 = load i32, i32* %14, align 4
  %86 = icmp slt i32 %85, 0
  br i1 %86, label %87, label %90

87:                                               ; preds = %84
  store i32 1, i32* %17, align 4
  %88 = load i32, i32* %14, align 4
  %89 = sub nsw i32 0, %88
  store i32 %89, i32* %14, align 4
  br label %90

90:                                               ; preds = %87, %84
  %91 = load i32, i32* %15, align 4
  %92 = icmp ne i32 %91, 0
  br i1 %92, label %150, label %93

93:                                               ; preds = %90
  %94 = load i32, i32* %13, align 4
  %95 = icmp slt i32 %94, 13
  br i1 %95, label %96, label %103

96:                                               ; preds = %93
  %97 = load i32, i32* %11, align 4
  %98 = icmp slt i32 %97, 64
  br i1 %98, label %99, label %103

99:                                               ; preds = %96
  %100 = load i32, i32* %11, align 4
  %101 = load i32, i32* %13, align 4
  %102 = call i32 @put_coeff(i32 %100, i32 %101, i32 0)
  store i32 %102, i32* %18, align 4
  br label %104

103:                                              ; preds = %96, %93
  store i32 0, i32* %18, align 4
  br label %104

104:                                              ; preds = %103, %99
  %105 = load i32, i32* %18, align 4
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %143

107:                                              ; preds = %104
  %108 = load i32, i32* @trace, align 4
  %109 = icmp ne i32 %108, 0
  br i1 %109, label %110, label %113

110:                                              ; preds = %107
  %111 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %112 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %111, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i64 0, i64 0))
  br label %113

113:                                              ; preds = %110, %107
  %114 = load i32, i32* %16, align 4
  %115 = icmp eq i32 %114, 1
  br i1 %115, label %116, label %120

116:                                              ; preds = %113
  %117 = load i32, i32* %13, align 4
  %118 = xor i32 %117, 255
  %119 = add nsw i32 %118, 1
  store i32 %119, i32* %13, align 4
  br label %120

120:                                              ; preds = %116, %113
  call void @putbits(i32 7, i32 3)
  %121 = load i32, i32* @trace, align 4
  %122 = icmp ne i32 %121, 0
  br i1 %122, label %123, label %126

123:                                              ; preds = %120
  %124 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %125 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %124, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i64 0, i64 0))
  br label %126

126:                                              ; preds = %123, %120
  call void @putbits(i32 1, i32 0)
  %127 = load i32, i32* @trace, align 4
  %128 = icmp ne i32 %127, 0
  br i1 %128, label %129, label %132

129:                                              ; preds = %126
  %130 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %131 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %130, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i64 0, i64 0))
  br label %132

132:                                              ; preds = %129, %126
  %133 = load i32, i32* %11, align 4
  call void @putbits(i32 6, i32 %133)
  %134 = load i32, i32* @trace, align 4
  %135 = icmp ne i32 %134, 0
  br i1 %135, label %136, label %139

136:                                              ; preds = %132
  %137 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %138 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %137, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0))
  br label %139

139:                                              ; preds = %136, %132
  %140 = load i32, i32* %13, align 4
  call void @putbits(i32 8, i32 %140)
  %141 = load i32, i32* %10, align 4
  %142 = add nsw i32 %141, 22
  store i32 %142, i32* %10, align 4
  br label %149

143:                                              ; preds = %104
  %144 = load i32, i32* %16, align 4
  call void @putbits(i32 1, i32 %144)
  %145 = load i32, i32* %18, align 4
  %146 = add nsw i32 %145, 1
  %147 = load i32, i32* %10, align 4
  %148 = add nsw i32 %147, %146
  store i32 %148, i32* %10, align 4
  br label %149

149:                                              ; preds = %143, %139
  br label %150

150:                                              ; preds = %149, %90
  %151 = load i32, i32* %12, align 4
  store i32 %151, i32* %11, align 4
  %152 = load i32, i32* %17, align 4
  store i32 %152, i32* %16, align 4
  %153 = load i32, i32* %14, align 4
  store i32 %153, i32* %13, align 4
  store i32 0, i32* %15, align 4
  store i32 0, i32* %12, align 4
  br label %154

154:                                              ; preds = %150, %81
  br label %155

155:                                              ; preds = %154, %71
  br label %156

156:                                              ; preds = %155
  %157 = load i32, i32* %9, align 4
  %158 = add nsw i32 %157, 1
  store i32 %158, i32* %9, align 4
  br label %29

159:                                              ; preds = %29
  %160 = load i32, i32* %15, align 4
  %161 = icmp ne i32 %160, 0
  br i1 %161, label %225, label %162

162:                                              ; preds = %159
  %163 = load i32, i32* @trace, align 4
  %164 = icmp ne i32 %163, 0
  br i1 %164, label %165, label %168

165:                                              ; preds = %162
  %166 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %167 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %166, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.18, i64 0, i64 0))
  br label %168

168:                                              ; preds = %165, %162
  %169 = load i32, i32* %13, align 4
  %170 = icmp slt i32 %169, 13
  br i1 %170, label %171, label %178

171:                                              ; preds = %168
  %172 = load i32, i32* %11, align 4
  %173 = icmp slt i32 %172, 64
  br i1 %173, label %174, label %178

174:                                              ; preds = %171
  %175 = load i32, i32* %11, align 4
  %176 = load i32, i32* %13, align 4
  %177 = call i32 @put_coeff(i32 %175, i32 %176, i32 1)
  store i32 %177, i32* %18, align 4
  br label %179

178:                                              ; preds = %171, %168
  store i32 0, i32* %18, align 4
  br label %179

179:                                              ; preds = %178, %174
  %180 = load i32, i32* %18, align 4
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %182, label %218

182:                                              ; preds = %179
  %183 = load i32, i32* @trace, align 4
  %184 = icmp ne i32 %183, 0
  br i1 %184, label %185, label %188

185:                                              ; preds = %182
  %186 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %187 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %186, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i64 0, i64 0))
  br label %188

188:                                              ; preds = %185, %182
  %189 = load i32, i32* %16, align 4
  %190 = icmp eq i32 %189, 1
  br i1 %190, label %191, label %195

191:                                              ; preds = %188
  %192 = load i32, i32* %13, align 4
  %193 = xor i32 %192, 255
  %194 = add nsw i32 %193, 1
  store i32 %194, i32* %13, align 4
  br label %195

195:                                              ; preds = %191, %188
  call void @putbits(i32 7, i32 3)
  %196 = load i32, i32* @trace, align 4
  %197 = icmp ne i32 %196, 0
  br i1 %197, label %198, label %201

198:                                              ; preds = %195
  %199 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %200 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %199, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i64 0, i64 0))
  br label %201

201:                                              ; preds = %198, %195
  call void @putbits(i32 1, i32 1)
  %202 = load i32, i32* @trace, align 4
  %203 = icmp ne i32 %202, 0
  br i1 %203, label %204, label %207

204:                                              ; preds = %201
  %205 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %206 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %205, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i64 0, i64 0))
  br label %207

207:                                              ; preds = %204, %201
  %208 = load i32, i32* %11, align 4
  call void @putbits(i32 6, i32 %208)
  %209 = load i32, i32* @trace, align 4
  %210 = icmp ne i32 %209, 0
  br i1 %210, label %211, label %214

211:                                              ; preds = %207
  %212 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %213 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %212, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0))
  br label %214

214:                                              ; preds = %211, %207
  %215 = load i32, i32* %13, align 4
  call void @putbits(i32 8, i32 %215)
  %216 = load i32, i32* %10, align 4
  %217 = add nsw i32 %216, 22
  store i32 %217, i32* %10, align 4
  br label %224

218:                                              ; preds = %179
  %219 = load i32, i32* %16, align 4
  call void @putbits(i32 1, i32 %219)
  %220 = load i32, i32* %18, align 4
  %221 = add nsw i32 %220, 1
  %222 = load i32, i32* %10, align 4
  %223 = add nsw i32 %222, %221
  store i32 %223, i32* %10, align 4
  br label %224

224:                                              ; preds = %218, %214
  br label %225

225:                                              ; preds = %224, %159
  %226 = load i32, i32* %10, align 4
  ret i32 %226
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Count_sac_BitsCoeff(i32* %0, i32 %1, i32 %2, %struct.bits_counted* %3, i32 %4) #0 {
  %6 = alloca i32*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %struct.bits_counted*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32* %0, i32** %6, align 8
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store %struct.bits_counted* %3, %struct.bits_counted** %9, align 8
  store i32 %4, i32* %10, align 4
  store i32 1, i32* @arith_used, align 4
  %12 = load i32, i32* %7, align 4
  %13 = icmp eq i32 %12, 3
  br i1 %13, label %17, label %14

14:                                               ; preds = %5
  %15 = load i32, i32* %7, align 4
  %16 = icmp eq i32 %15, 4
  br i1 %16, label %17, label %52

17:                                               ; preds = %14, %5
  store i32 0, i32* %11, align 4
  br label %18

18:                                               ; preds = %31, %17
  %19 = load i32, i32* %11, align 4
  %20 = icmp slt i32 %19, 4
  br i1 %20, label %21, label %34

21:                                               ; preds = %18
  %22 = load i32, i32* %7, align 4
  %23 = load i32*, i32** %6, align 8
  %24 = load i32, i32* %11, align 4
  %25 = load i32, i32* %10, align 4
  %26 = call i32 @Code_sac_Coeff(i32 %22, i32* %23, i32 %24, i32 %25)
  %27 = load %struct.bits_counted*, %struct.bits_counted** %9, align 8
  %28 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %27, i32 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = add nsw i32 %29, %26
  store i32 %30, i32* %28, align 4
  br label %31

31:                                               ; preds = %21
  %32 = load i32, i32* %11, align 4
  %33 = add nsw i32 %32, 1
  store i32 %33, i32* %11, align 4
  br label %18

34:                                               ; preds = %18
  store i32 4, i32* %11, align 4
  br label %35

35:                                               ; preds = %48, %34
  %36 = load i32, i32* %11, align 4
  %37 = icmp slt i32 %36, 6
  br i1 %37, label %38, label %51

38:                                               ; preds = %35
  %39 = load i32, i32* %7, align 4
  %40 = load i32*, i32** %6, align 8
  %41 = load i32, i32* %11, align 4
  %42 = load i32, i32* %10, align 4
  %43 = call i32 @Code_sac_Coeff(i32 %39, i32* %40, i32 %41, i32 %42)
  %44 = load %struct.bits_counted*, %struct.bits_counted** %9, align 8
  %45 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %44, i32 0, i32 1
  %46 = load i32, i32* %45, align 4
  %47 = add nsw i32 %46, %43
  store i32 %47, i32* %45, align 4
  br label %48

48:                                               ; preds = %38
  %49 = load i32, i32* %11, align 4
  %50 = add nsw i32 %49, 1
  store i32 %50, i32* %11, align 4
  br label %35

51:                                               ; preds = %35
  br label %173

52:                                               ; preds = %14
  store i32 0, i32* %11, align 4
  br label %53

53:                                               ; preds = %109, %52
  %54 = load i32, i32* %11, align 4
  %55 = icmp slt i32 %54, 4
  br i1 %55, label %56, label %112

56:                                               ; preds = %53
  %57 = load i32, i32* %11, align 4
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %63

59:                                               ; preds = %56
  %60 = load i32, i32* %8, align 4
  %61 = and i32 %60, 32
  %62 = icmp ne i32 %61, 0
  br i1 %62, label %98, label %63

63:                                               ; preds = %59, %56
  %64 = load i32, i32* %11, align 4
  %65 = icmp eq i32 %64, 1
  br i1 %65, label %66, label %70

66:                                               ; preds = %63
  %67 = load i32, i32* %8, align 4
  %68 = and i32 %67, 16
  %69 = icmp ne i32 %68, 0
  br i1 %69, label %98, label %70

70:                                               ; preds = %66, %63
  %71 = load i32, i32* %11, align 4
  %72 = icmp eq i32 %71, 2
  br i1 %72, label %73, label %77

73:                                               ; preds = %70
  %74 = load i32, i32* %8, align 4
  %75 = and i32 %74, 8
  %76 = icmp ne i32 %75, 0
  br i1 %76, label %98, label %77

77:                                               ; preds = %73, %70
  %78 = load i32, i32* %11, align 4
  %79 = icmp eq i32 %78, 3
  br i1 %79, label %80, label %84

80:                                               ; preds = %77
  %81 = load i32, i32* %8, align 4
  %82 = and i32 %81, 4
  %83 = icmp ne i32 %82, 0
  br i1 %83, label %98, label %84

84:                                               ; preds = %80, %77
  %85 = load i32, i32* %11, align 4
  %86 = icmp eq i32 %85, 4
  br i1 %86, label %87, label %91

87:                                               ; preds = %84
  %88 = load i32, i32* %8, align 4
  %89 = and i32 %88, 2
  %90 = icmp ne i32 %89, 0
  br i1 %90, label %98, label %91

91:                                               ; preds = %87, %84
  %92 = load i32, i32* %11, align 4
  %93 = icmp eq i32 %92, 5
  br i1 %93, label %94, label %108

94:                                               ; preds = %91
  %95 = load i32, i32* %8, align 4
  %96 = and i32 %95, 1
  %97 = icmp ne i32 %96, 0
  br i1 %97, label %98, label %108

98:                                               ; preds = %94, %87, %80, %73, %66, %59
  %99 = load i32, i32* %7, align 4
  %100 = load i32*, i32** %6, align 8
  %101 = load i32, i32* %11, align 4
  %102 = load i32, i32* %10, align 4
  %103 = call i32 @Code_sac_Coeff(i32 %99, i32* %100, i32 %101, i32 %102)
  %104 = load %struct.bits_counted*, %struct.bits_counted** %9, align 8
  %105 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %104, i32 0, i32 0
  %106 = load i32, i32* %105, align 4
  %107 = add nsw i32 %106, %103
  store i32 %107, i32* %105, align 4
  br label %108

108:                                              ; preds = %98, %94, %91
  br label %109

109:                                              ; preds = %108
  %110 = load i32, i32* %11, align 4
  %111 = add nsw i32 %110, 1
  store i32 %111, i32* %11, align 4
  br label %53

112:                                              ; preds = %53
  store i32 4, i32* %11, align 4
  br label %113

113:                                              ; preds = %169, %112
  %114 = load i32, i32* %11, align 4
  %115 = icmp slt i32 %114, 6
  br i1 %115, label %116, label %172

116:                                              ; preds = %113
  %117 = load i32, i32* %11, align 4
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %119, label %123

119:                                              ; preds = %116
  %120 = load i32, i32* %8, align 4
  %121 = and i32 %120, 32
  %122 = icmp ne i32 %121, 0
  br i1 %122, label %158, label %123

123:                                              ; preds = %119, %116
  %124 = load i32, i32* %11, align 4
  %125 = icmp eq i32 %124, 1
  br i1 %125, label %126, label %130

126:                                              ; preds = %123
  %127 = load i32, i32* %8, align 4
  %128 = and i32 %127, 16
  %129 = icmp ne i32 %128, 0
  br i1 %129, label %158, label %130

130:                                              ; preds = %126, %123
  %131 = load i32, i32* %11, align 4
  %132 = icmp eq i32 %131, 2
  br i1 %132, label %133, label %137

133:                                              ; preds = %130
  %134 = load i32, i32* %8, align 4
  %135 = and i32 %134, 8
  %136 = icmp ne i32 %135, 0
  br i1 %136, label %158, label %137

137:                                              ; preds = %133, %130
  %138 = load i32, i32* %11, align 4
  %139 = icmp eq i32 %138, 3
  br i1 %139, label %140, label %144

140:                                              ; preds = %137
  %141 = load i32, i32* %8, align 4
  %142 = and i32 %141, 4
  %143 = icmp ne i32 %142, 0
  br i1 %143, label %158, label %144

144:                                              ; preds = %140, %137
  %145 = load i32, i32* %11, align 4
  %146 = icmp eq i32 %145, 4
  br i1 %146, label %147, label %151

147:                                              ; preds = %144
  %148 = load i32, i32* %8, align 4
  %149 = and i32 %148, 2
  %150 = icmp ne i32 %149, 0
  br i1 %150, label %158, label %151

151:                                              ; preds = %147, %144
  %152 = load i32, i32* %11, align 4
  %153 = icmp eq i32 %152, 5
  br i1 %153, label %154, label %168

154:                                              ; preds = %151
  %155 = load i32, i32* %8, align 4
  %156 = and i32 %155, 1
  %157 = icmp ne i32 %156, 0
  br i1 %157, label %158, label %168

158:                                              ; preds = %154, %147, %140, %133, %126, %119
  %159 = load i32, i32* %7, align 4
  %160 = load i32*, i32** %6, align 8
  %161 = load i32, i32* %11, align 4
  %162 = load i32, i32* %10, align 4
  %163 = call i32 @Code_sac_Coeff(i32 %159, i32* %160, i32 %161, i32 %162)
  %164 = load %struct.bits_counted*, %struct.bits_counted** %9, align 8
  %165 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %164, i32 0, i32 1
  %166 = load i32, i32* %165, align 4
  %167 = add nsw i32 %166, %163
  store i32 %167, i32* %165, align 4
  br label %168

168:                                              ; preds = %158, %154, %151
  br label %169

169:                                              ; preds = %168
  %170 = load i32, i32* %11, align 4
  %171 = add nsw i32 %170, 1
  store i32 %171, i32* %11, align 4
  br label %113

172:                                              ; preds = %113
  br label %173

173:                                              ; preds = %172, %51
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @Code_sac_Coeff(i32 %0, i32* %1, i32 %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i32* %1, i32** %6, align 8
  store i32 %2, i32* %7, align 4
  store i32 %3, i32* %8, align 4
  store i32 0, i32* %10, align 4
  store i32 0, i32* %14, align 4
  store i32 1, i32* %17, align 4
  store i32 0, i32* %19, align 4
  store i32 0, i32* %12, align 4
  store i32 0, i32* %21, align 4
  store i32 0, i32* %23, align 4
  store i32 0, i32* %16, align 4
  store i32 0, i32* %18, align 4
  store i32 0, i32* %22, align 4
  store i32 0, i32* %20, align 4
  store i32 0, i32* %15, align 4
  store i32 0, i32* %13, align 4
  %25 = load i32, i32* %5, align 4
  %26 = icmp eq i32 %25, 3
  br i1 %26, label %30, label %27

27:                                               ; preds = %4
  %28 = load i32, i32* %5, align 4
  %29 = icmp eq i32 %28, 4
  br label %30

30:                                               ; preds = %27, %4
  %31 = phi i1 [ true, %4 ], [ %29, %27 ]
  %32 = zext i1 %31 to i32
  store i32 %32, i32* %12, align 4
  %33 = load i32, i32* %7, align 4
  %34 = load i32, i32* %8, align 4
  %35 = mul nsw i32 %33, %34
  store i32 %35, i32* %9, align 4
  br label %36

36:                                               ; preds = %207, %30
  %37 = load i32, i32* %9, align 4
  %38 = load i32, i32* %7, align 4
  %39 = add nsw i32 %38, 1
  %40 = load i32, i32* %8, align 4
  %41 = mul nsw i32 %39, %40
  %42 = icmp slt i32 %37, %41
  br i1 %42, label %43, label %210

43:                                               ; preds = %36
  %44 = load i32, i32* %9, align 4
  %45 = load i32, i32* %8, align 4
  %46 = srem i32 %44, %45
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %82, label %48

48:                                               ; preds = %43
  %49 = load i32, i32* %12, align 4
  %50 = icmp ne i32 %49, 0
  br i1 %50, label %51, label %82

51:                                               ; preds = %48
  %52 = load i32, i32* @trace, align 4
  %53 = icmp ne i32 %52, 0
  br i1 %53, label %54, label %57

54:                                               ; preds = %51
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %56 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %55, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i64 0, i64 0))
  br label %57

57:                                               ; preds = %54, %51
  %58 = load i32*, i32** %6, align 8
  %59 = load i32, i32* %7, align 4
  %60 = load i32, i32* %8, align 4
  %61 = mul nsw i32 %59, %60
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds i32, i32* %58, i64 %62
  %64 = load i32, i32* %63, align 4
  %65 = icmp ne i32 %64, 128
  br i1 %65, label %66, label %75

66:                                               ; preds = %57
  %67 = load i32*, i32** %6, align 8
  %68 = load i32, i32* %7, align 4
  %69 = load i32, i32* %8, align 4
  %70 = mul nsw i32 %68, %69
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i32, i32* %67, i64 %71
  %73 = load i32, i32* %72, align 4
  %74 = call i32 @indexfn(i32 %73, i32* getelementptr inbounds ([254 x i32], [254 x i32]* @intradctab, i64 0, i64 0), i32 254)
  store i32 %74, i32* %11, align 4
  br label %77

75:                                               ; preds = %57
  %76 = call i32 @indexfn(i32 255, i32* getelementptr inbounds ([254 x i32], [254 x i32]* @intradctab, i64 0, i64 0), i32 254)
  store i32 %76, i32* %11, align 4
  br label %77

77:                                               ; preds = %75, %66
  %78 = load i32, i32* %11, align 4
  %79 = call i32 @AR_Encode(i32 %78, i32* getelementptr inbounds ([255 x i32], [255 x i32]* @cumf_INTRADC, i64 0, i64 0))
  %80 = load i32, i32* %10, align 4
  %81 = add nsw i32 %80, %79
  store i32 %81, i32* %10, align 4
  br label %206

82:                                               ; preds = %48, %43
  store i32 0, i32* %23, align 4
  %83 = load i32*, i32** %6, align 8
  %84 = load i32, i32* %9, align 4
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i32, i32* %83, i64 %85
  %87 = load i32, i32* %86, align 4
  store i32 %87, i32* %16, align 4
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %92

89:                                               ; preds = %82
  %90 = load i32, i32* %14, align 4
  %91 = add nsw i32 %90, 1
  store i32 %91, i32* %14, align 4
  br label %205

92:                                               ; preds = %82
  %93 = load i32, i32* %16, align 4
  %94 = icmp slt i32 %93, 0
  br i1 %94, label %95, label %98

95:                                               ; preds = %92
  store i32 1, i32* %23, align 4
  %96 = load i32, i32* %16, align 4
  %97 = sub nsw i32 0, %96
  store i32 %97, i32* %16, align 4
  br label %98

98:                                               ; preds = %95, %92
  %99 = load i32, i32* %16, align 4
  %100 = load i32, i32* %14, align 4
  %101 = shl i32 %100, 4
  %102 = or i32 %99, %101
  store i32 %102, i32* %21, align 4
  %103 = load i32, i32* %21, align 4
  store i32 %103, i32* %21, align 4
  %104 = load i32, i32* %19, align 4
  %105 = add nsw i32 %104, 1
  store i32 %105, i32* %19, align 4
  %106 = load i32, i32* %17, align 4
  %107 = icmp ne i32 %106, 0
  br i1 %107, label %199, label %108

108:                                              ; preds = %98
  %109 = load i32, i32* %20, align 4
  %110 = call i32 @indexfn(i32 %109, i32* getelementptr inbounds ([103 x i32], [103 x i32]* @tcoeftab, i64 0, i64 0), i32 103)
  store i32 %110, i32* %11, align 4
  %111 = load i32, i32* %15, align 4
  %112 = icmp slt i32 %111, 13
  br i1 %112, label %113, label %121

113:                                              ; preds = %108
  %114 = load i32, i32* %13, align 4
  %115 = icmp slt i32 %114, 64
  br i1 %115, label %116, label %121

116:                                              ; preds = %113
  %117 = load i32, i32* %11, align 4
  %118 = load i32, i32* %18, align 4
  %119 = load i32, i32* %12, align 4
  %120 = call i32 @CodeTCoef(i32 %117, i32 %118, i32 %119)
  store i32 %120, i32* %24, align 4
  br label %122

121:                                              ; preds = %113, %108
  store i32 -1, i32* %24, align 4
  br label %122

122:                                              ; preds = %121, %116
  %123 = load i32, i32* %24, align 4
  %124 = icmp eq i32 %123, -1
  br i1 %124, label %125, label %189

125:                                              ; preds = %122
  %126 = load i32, i32* @trace, align 4
  %127 = icmp ne i32 %126, 0
  br i1 %127, label %128, label %131

128:                                              ; preds = %125
  %129 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %130 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %129, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.19, i64 0, i64 0))
  br label %131

131:                                              ; preds = %128, %125
  %132 = load i32, i32* %22, align 4
  %133 = icmp eq i32 %132, 1
  br i1 %133, label %134, label %138

134:                                              ; preds = %131
  %135 = load i32, i32* %15, align 4
  %136 = xor i32 %135, 255
  %137 = add nsw i32 %136, 1
  store i32 %137, i32* %15, align 4
  br label %138

138:                                              ; preds = %134, %131
  %139 = call i32 @indexfn(i32 7167, i32* getelementptr inbounds ([103 x i32], [103 x i32]* @tcoeftab, i64 0, i64 0), i32 103)
  store i32 %139, i32* %11, align 4
  %140 = load i32, i32* %11, align 4
  %141 = load i32, i32* %18, align 4
  %142 = load i32, i32* %12, align 4
  %143 = call i32 @CodeTCoef(i32 %140, i32 %141, i32 %142)
  %144 = load i32, i32* %10, align 4
  %145 = add nsw i32 %144, %143
  store i32 %145, i32* %10, align 4
  %146 = load i32, i32* %12, align 4
  %147 = icmp ne i32 %146, 0
  br i1 %147, label %148, label %153

148:                                              ; preds = %138
  %149 = call i32 @indexfn(i32 0, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @lasttab, i64 0, i64 0), i32 2)
  %150 = call i32 @AR_Encode(i32 %149, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @cumf_LAST_intra, i64 0, i64 0))
  %151 = load i32, i32* %10, align 4
  %152 = add nsw i32 %151, %150
  store i32 %152, i32* %10, align 4
  br label %158

153:                                              ; preds = %138
  %154 = call i32 @indexfn(i32 0, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @lasttab, i64 0, i64 0), i32 2)
  %155 = call i32 @AR_Encode(i32 %154, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @cumf_LAST, i64 0, i64 0))
  %156 = load i32, i32* %10, align 4
  %157 = add nsw i32 %156, %155
  store i32 %157, i32* %10, align 4
  br label %158

158:                                              ; preds = %153, %148
  %159 = load i32, i32* %12, align 4
  %160 = icmp ne i32 %159, 0
  br i1 %160, label %161, label %167

161:                                              ; preds = %158
  %162 = load i32, i32* %13, align 4
  %163 = call i32 @indexfn(i32 %162, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @runtab, i64 0, i64 0), i32 64)
  %164 = call i32 @AR_Encode(i32 %163, i32* getelementptr inbounds ([65 x i32], [65 x i32]* @cumf_RUN_intra, i64 0, i64 0))
  %165 = load i32, i32* %10, align 4
  %166 = add nsw i32 %165, %164
  store i32 %166, i32* %10, align 4
  br label %173

167:                                              ; preds = %158
  %168 = load i32, i32* %13, align 4
  %169 = call i32 @indexfn(i32 %168, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @runtab, i64 0, i64 0), i32 64)
  %170 = call i32 @AR_Encode(i32 %169, i32* getelementptr inbounds ([65 x i32], [65 x i32]* @cumf_RUN, i64 0, i64 0))
  %171 = load i32, i32* %10, align 4
  %172 = add nsw i32 %171, %170
  store i32 %172, i32* %10, align 4
  br label %173

173:                                              ; preds = %167, %161
  %174 = load i32, i32* %12, align 4
  %175 = icmp ne i32 %174, 0
  br i1 %175, label %176, label %182

176:                                              ; preds = %173
  %177 = load i32, i32* %15, align 4
  %178 = call i32 @indexfn(i32 %177, i32* getelementptr inbounds ([254 x i32], [254 x i32]* @leveltab, i64 0, i64 0), i32 254)
  %179 = call i32 @AR_Encode(i32 %178, i32* getelementptr inbounds ([255 x i32], [255 x i32]* @cumf_LEVEL_intra, i64 0, i64 0))
  %180 = load i32, i32* %10, align 4
  %181 = add nsw i32 %180, %179
  store i32 %181, i32* %10, align 4
  br label %188

182:                                              ; preds = %173
  %183 = load i32, i32* %15, align 4
  %184 = call i32 @indexfn(i32 %183, i32* getelementptr inbounds ([254 x i32], [254 x i32]* @leveltab, i64 0, i64 0), i32 254)
  %185 = call i32 @AR_Encode(i32 %184, i32* getelementptr inbounds ([255 x i32], [255 x i32]* @cumf_LEVEL, i64 0, i64 0))
  %186 = load i32, i32* %10, align 4
  %187 = add nsw i32 %186, %185
  store i32 %187, i32* %10, align 4
  br label %188

188:                                              ; preds = %182, %176
  br label %198

189:                                              ; preds = %122
  %190 = load i32, i32* %22, align 4
  %191 = call i32 @indexfn(i32 %190, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @signtab, i64 0, i64 0), i32 2)
  %192 = call i32 @AR_Encode(i32 %191, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @cumf_SIGN, i64 0, i64 0))
  %193 = load i32, i32* %10, align 4
  %194 = add nsw i32 %193, %192
  store i32 %194, i32* %10, align 4
  %195 = load i32, i32* %24, align 4
  %196 = load i32, i32* %10, align 4
  %197 = add nsw i32 %196, %195
  store i32 %197, i32* %10, align 4
  br label %198

198:                                              ; preds = %189, %188
  br label %199

199:                                              ; preds = %198, %98
  %200 = load i32, i32* %14, align 4
  store i32 %200, i32* %13, align 4
  %201 = load i32, i32* %23, align 4
  store i32 %201, i32* %22, align 4
  %202 = load i32, i32* %16, align 4
  store i32 %202, i32* %15, align 4
  %203 = load i32, i32* %21, align 4
  store i32 %203, i32* %20, align 4
  %204 = load i32, i32* %19, align 4
  store i32 %204, i32* %18, align 4
  store i32 0, i32* %17, align 4
  store i32 0, i32* %14, align 4
  br label %205

205:                                              ; preds = %199, %89
  br label %206

206:                                              ; preds = %205, %77
  br label %207

207:                                              ; preds = %206
  %208 = load i32, i32* %9, align 4
  %209 = add nsw i32 %208, 1
  store i32 %209, i32* %9, align 4
  br label %36

210:                                              ; preds = %36
  %211 = load i32, i32* %17, align 4
  %212 = icmp ne i32 %211, 0
  br i1 %212, label %312, label %213

213:                                              ; preds = %210
  %214 = load i32, i32* @trace, align 4
  %215 = icmp ne i32 %214, 0
  br i1 %215, label %216, label %219

216:                                              ; preds = %213
  %217 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %218 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %217, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.18, i64 0, i64 0))
  br label %219

219:                                              ; preds = %216, %213
  %220 = load i32, i32* %20, align 4
  %221 = or i32 %220, 4096
  store i32 %221, i32* %20, align 4
  %222 = load i32, i32* %20, align 4
  %223 = call i32 @indexfn(i32 %222, i32* getelementptr inbounds ([103 x i32], [103 x i32]* @tcoeftab, i64 0, i64 0), i32 103)
  store i32 %223, i32* %11, align 4
  %224 = load i32, i32* %15, align 4
  %225 = icmp slt i32 %224, 13
  br i1 %225, label %226, label %234

226:                                              ; preds = %219
  %227 = load i32, i32* %13, align 4
  %228 = icmp slt i32 %227, 64
  br i1 %228, label %229, label %234

229:                                              ; preds = %226
  %230 = load i32, i32* %11, align 4
  %231 = load i32, i32* %18, align 4
  %232 = load i32, i32* %12, align 4
  %233 = call i32 @CodeTCoef(i32 %230, i32 %231, i32 %232)
  store i32 %233, i32* %24, align 4
  br label %235

234:                                              ; preds = %226, %219
  store i32 -1, i32* %24, align 4
  br label %235

235:                                              ; preds = %234, %229
  %236 = load i32, i32* %24, align 4
  %237 = icmp eq i32 %236, -1
  br i1 %237, label %238, label %302

238:                                              ; preds = %235
  %239 = load i32, i32* @trace, align 4
  %240 = icmp ne i32 %239, 0
  br i1 %240, label %241, label %244

241:                                              ; preds = %238
  %242 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %243 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %242, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.19, i64 0, i64 0))
  br label %244

244:                                              ; preds = %241, %238
  %245 = load i32, i32* %22, align 4
  %246 = icmp eq i32 %245, 1
  br i1 %246, label %247, label %251

247:                                              ; preds = %244
  %248 = load i32, i32* %15, align 4
  %249 = xor i32 %248, 255
  %250 = add nsw i32 %249, 1
  store i32 %250, i32* %15, align 4
  br label %251

251:                                              ; preds = %247, %244
  %252 = call i32 @indexfn(i32 7167, i32* getelementptr inbounds ([103 x i32], [103 x i32]* @tcoeftab, i64 0, i64 0), i32 103)
  store i32 %252, i32* %11, align 4
  %253 = load i32, i32* %11, align 4
  %254 = load i32, i32* %18, align 4
  %255 = load i32, i32* %12, align 4
  %256 = call i32 @CodeTCoef(i32 %253, i32 %254, i32 %255)
  %257 = load i32, i32* %10, align 4
  %258 = add nsw i32 %257, %256
  store i32 %258, i32* %10, align 4
  %259 = load i32, i32* %12, align 4
  %260 = icmp ne i32 %259, 0
  br i1 %260, label %261, label %266

261:                                              ; preds = %251
  %262 = call i32 @indexfn(i32 1, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @lasttab, i64 0, i64 0), i32 2)
  %263 = call i32 @AR_Encode(i32 %262, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @cumf_LAST_intra, i64 0, i64 0))
  %264 = load i32, i32* %10, align 4
  %265 = add nsw i32 %264, %263
  store i32 %265, i32* %10, align 4
  br label %271

266:                                              ; preds = %251
  %267 = call i32 @indexfn(i32 1, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @lasttab, i64 0, i64 0), i32 2)
  %268 = call i32 @AR_Encode(i32 %267, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @cumf_LAST, i64 0, i64 0))
  %269 = load i32, i32* %10, align 4
  %270 = add nsw i32 %269, %268
  store i32 %270, i32* %10, align 4
  br label %271

271:                                              ; preds = %266, %261
  %272 = load i32, i32* %12, align 4
  %273 = icmp ne i32 %272, 0
  br i1 %273, label %274, label %280

274:                                              ; preds = %271
  %275 = load i32, i32* %13, align 4
  %276 = call i32 @indexfn(i32 %275, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @runtab, i64 0, i64 0), i32 64)
  %277 = call i32 @AR_Encode(i32 %276, i32* getelementptr inbounds ([65 x i32], [65 x i32]* @cumf_RUN_intra, i64 0, i64 0))
  %278 = load i32, i32* %10, align 4
  %279 = add nsw i32 %278, %277
  store i32 %279, i32* %10, align 4
  br label %286

280:                                              ; preds = %271
  %281 = load i32, i32* %13, align 4
  %282 = call i32 @indexfn(i32 %281, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @runtab, i64 0, i64 0), i32 64)
  %283 = call i32 @AR_Encode(i32 %282, i32* getelementptr inbounds ([65 x i32], [65 x i32]* @cumf_RUN, i64 0, i64 0))
  %284 = load i32, i32* %10, align 4
  %285 = add nsw i32 %284, %283
  store i32 %285, i32* %10, align 4
  br label %286

286:                                              ; preds = %280, %274
  %287 = load i32, i32* %12, align 4
  %288 = icmp ne i32 %287, 0
  br i1 %288, label %289, label %295

289:                                              ; preds = %286
  %290 = load i32, i32* %15, align 4
  %291 = call i32 @indexfn(i32 %290, i32* getelementptr inbounds ([254 x i32], [254 x i32]* @leveltab, i64 0, i64 0), i32 254)
  %292 = call i32 @AR_Encode(i32 %291, i32* getelementptr inbounds ([255 x i32], [255 x i32]* @cumf_LEVEL_intra, i64 0, i64 0))
  %293 = load i32, i32* %10, align 4
  %294 = add nsw i32 %293, %292
  store i32 %294, i32* %10, align 4
  br label %301

295:                                              ; preds = %286
  %296 = load i32, i32* %15, align 4
  %297 = call i32 @indexfn(i32 %296, i32* getelementptr inbounds ([254 x i32], [254 x i32]* @leveltab, i64 0, i64 0), i32 254)
  %298 = call i32 @AR_Encode(i32 %297, i32* getelementptr inbounds ([255 x i32], [255 x i32]* @cumf_LEVEL, i64 0, i64 0))
  %299 = load i32, i32* %10, align 4
  %300 = add nsw i32 %299, %298
  store i32 %300, i32* %10, align 4
  br label %301

301:                                              ; preds = %295, %289
  br label %311

302:                                              ; preds = %235
  %303 = load i32, i32* %22, align 4
  %304 = call i32 @indexfn(i32 %303, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @signtab, i64 0, i64 0), i32 2)
  %305 = call i32 @AR_Encode(i32 %304, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @cumf_SIGN, i64 0, i64 0))
  %306 = load i32, i32* %10, align 4
  %307 = add nsw i32 %306, %305
  store i32 %307, i32* %10, align 4
  %308 = load i32, i32* %24, align 4
  %309 = load i32, i32* %10, align 4
  %310 = add nsw i32 %309, %308
  store i32 %310, i32* %10, align 4
  br label %311

311:                                              ; preds = %302, %301
  br label %312

312:                                              ; preds = %311, %210
  %313 = load i32, i32* %10, align 4
  ret i32 %313
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @CodeTCoef(i32 %0, i32 %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  %8 = load i32, i32* %5, align 4
  switch i32 %8, label %39 [
    i32 1, label %9
    i32 2, label %19
    i32 3, label %29
  ]

9:                                                ; preds = %3
  %10 = load i32, i32* %6, align 4
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %12, label %15

12:                                               ; preds = %9
  %13 = load i32, i32* %4, align 4
  %14 = call i32 @AR_Encode(i32 %13, i32* getelementptr inbounds ([104 x i32], [104 x i32]* @cumf_TCOEF1_intra, i64 0, i64 0))
  store i32 %14, i32* %7, align 4
  br label %18

15:                                               ; preds = %9
  %16 = load i32, i32* %4, align 4
  %17 = call i32 @AR_Encode(i32 %16, i32* getelementptr inbounds ([104 x i32], [104 x i32]* @cumf_TCOEF1, i64 0, i64 0))
  store i32 %17, i32* %7, align 4
  br label %18

18:                                               ; preds = %15, %12
  br label %49

19:                                               ; preds = %3
  %20 = load i32, i32* %6, align 4
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %19
  %23 = load i32, i32* %4, align 4
  %24 = call i32 @AR_Encode(i32 %23, i32* getelementptr inbounds ([104 x i32], [104 x i32]* @cumf_TCOEF2_intra, i64 0, i64 0))
  store i32 %24, i32* %7, align 4
  br label %28

25:                                               ; preds = %19
  %26 = load i32, i32* %4, align 4
  %27 = call i32 @AR_Encode(i32 %26, i32* getelementptr inbounds ([104 x i32], [104 x i32]* @cumf_TCOEF2, i64 0, i64 0))
  store i32 %27, i32* %7, align 4
  br label %28

28:                                               ; preds = %25, %22
  br label %49

29:                                               ; preds = %3
  %30 = load i32, i32* %6, align 4
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %32, label %35

32:                                               ; preds = %29
  %33 = load i32, i32* %4, align 4
  %34 = call i32 @AR_Encode(i32 %33, i32* getelementptr inbounds ([104 x i32], [104 x i32]* @cumf_TCOEF3_intra, i64 0, i64 0))
  store i32 %34, i32* %7, align 4
  br label %38

35:                                               ; preds = %29
  %36 = load i32, i32* %4, align 4
  %37 = call i32 @AR_Encode(i32 %36, i32* getelementptr inbounds ([104 x i32], [104 x i32]* @cumf_TCOEF3, i64 0, i64 0))
  store i32 %37, i32* %7, align 4
  br label %38

38:                                               ; preds = %35, %32
  br label %49

39:                                               ; preds = %3
  %40 = load i32, i32* %6, align 4
  %41 = icmp ne i32 %40, 0
  br i1 %41, label %42, label %45

42:                                               ; preds = %39
  %43 = load i32, i32* %4, align 4
  %44 = call i32 @AR_Encode(i32 %43, i32* getelementptr inbounds ([104 x i32], [104 x i32]* @cumf_TCOEFr_intra, i64 0, i64 0))
  store i32 %44, i32* %7, align 4
  br label %48

45:                                               ; preds = %39
  %46 = load i32, i32* %4, align 4
  %47 = call i32 @AR_Encode(i32 %46, i32* getelementptr inbounds ([104 x i32], [104 x i32]* @cumf_TCOEFr, i64 0, i64 0))
  store i32 %47, i32* %7, align 4
  br label %48

48:                                               ; preds = %45, %42
  br label %49

49:                                               ; preds = %48, %38, %28, %18
  %50 = load i32, i32* %7, align 4
  ret i32 %50
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @FindCBP(i32* %0, i32 %1, i32 %2) #0 {
  %4 = alloca i32*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i32* %0, i32** %4, align 8
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  store i32 0, i32* %9, align 4
  %11 = load i32, i32* %5, align 4
  %12 = icmp eq i32 %11, 3
  br i1 %12, label %16, label %13

13:                                               ; preds = %3
  %14 = load i32, i32* %5, align 4
  %15 = icmp eq i32 %14, 4
  br label %16

16:                                               ; preds = %13, %3
  %17 = phi i1 [ true, %3 ], [ %15, %13 ]
  %18 = zext i1 %17 to i32
  store i32 %18, i32* %10, align 4
  store i32 0, i32* %7, align 4
  br label %19

19:                                               ; preds = %92, %16
  %20 = load i32, i32* %7, align 4
  %21 = icmp slt i32 %20, 6
  br i1 %21, label %22, label %95

22:                                               ; preds = %19
  %23 = load i32, i32* %7, align 4
  %24 = load i32, i32* %6, align 4
  %25 = mul nsw i32 %23, %24
  %26 = load i32, i32* %10, align 4
  %27 = add nsw i32 %25, %26
  store i32 %27, i32* %8, align 4
  br label %28

28:                                               ; preds = %88, %22
  %29 = load i32, i32* %8, align 4
  %30 = load i32, i32* %7, align 4
  %31 = add nsw i32 %30, 1
  %32 = load i32, i32* %6, align 4
  %33 = mul nsw i32 %31, %32
  %34 = icmp slt i32 %29, %33
  br i1 %34, label %35, label %91

35:                                               ; preds = %28
  %36 = load i32*, i32** %4, align 8
  %37 = load i32, i32* %8, align 4
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i32, i32* %36, i64 %38
  %40 = load i32, i32* %39, align 4
  %41 = icmp ne i32 %40, 0
  br i1 %41, label %42, label %87

42:                                               ; preds = %35
  %43 = load i32, i32* %7, align 4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %48

45:                                               ; preds = %42
  %46 = load i32, i32* %9, align 4
  %47 = or i32 %46, 32
  store i32 %47, i32* %9, align 4
  br label %86

48:                                               ; preds = %42
  %49 = load i32, i32* %7, align 4
  %50 = icmp eq i32 %49, 1
  br i1 %50, label %51, label %54

51:                                               ; preds = %48
  %52 = load i32, i32* %9, align 4
  %53 = or i32 %52, 16
  store i32 %53, i32* %9, align 4
  br label %85

54:                                               ; preds = %48
  %55 = load i32, i32* %7, align 4
  %56 = icmp eq i32 %55, 2
  br i1 %56, label %57, label %60

57:                                               ; preds = %54
  %58 = load i32, i32* %9, align 4
  %59 = or i32 %58, 8
  store i32 %59, i32* %9, align 4
  br label %84

60:                                               ; preds = %54
  %61 = load i32, i32* %7, align 4
  %62 = icmp eq i32 %61, 3
  br i1 %62, label %63, label %66

63:                                               ; preds = %60
  %64 = load i32, i32* %9, align 4
  %65 = or i32 %64, 4
  store i32 %65, i32* %9, align 4
  br label %83

66:                                               ; preds = %60
  %67 = load i32, i32* %7, align 4
  %68 = icmp eq i32 %67, 4
  br i1 %68, label %69, label %72

69:                                               ; preds = %66
  %70 = load i32, i32* %9, align 4
  %71 = or i32 %70, 2
  store i32 %71, i32* %9, align 4
  br label %82

72:                                               ; preds = %66
  %73 = load i32, i32* %7, align 4
  %74 = icmp eq i32 %73, 5
  br i1 %74, label %75, label %78

75:                                               ; preds = %72
  %76 = load i32, i32* %9, align 4
  %77 = or i32 %76, 1
  store i32 %77, i32* %9, align 4
  br label %81

78:                                               ; preds = %72
  %79 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %80 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %79, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.20, i64 0, i64 0))
  call void @exit(i32 -1) #9
  unreachable

81:                                               ; preds = %75
  br label %82

82:                                               ; preds = %81, %69
  br label %83

83:                                               ; preds = %82, %63
  br label %84

84:                                               ; preds = %83, %57
  br label %85

85:                                               ; preds = %84, %51
  br label %86

86:                                               ; preds = %85, %45
  br label %91

87:                                               ; preds = %35
  br label %88

88:                                               ; preds = %87
  %89 = load i32, i32* %8, align 4
  %90 = add nsw i32 %89, 1
  store i32 %90, i32* %8, align 4
  br label %28

91:                                               ; preds = %86, %28
  br label %92

92:                                               ; preds = %91
  %93 = load i32, i32* %7, align 4
  %94 = add nsw i32 %93, 1
  store i32 %94, i32* %7, align 4
  br label %19

95:                                               ; preds = %19
  %96 = load i32, i32* %9, align 4
  ret i32 %96
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CountBitsVectors([73 x [90 x %struct.motionvector*]]* %0, %struct.bits_counted* %1, i32 %2, i32 %3, i32 %4, i32 %5, %struct.pict* %6) #0 {
  %8 = alloca [73 x [90 x %struct.motionvector*]]*, align 8
  %9 = alloca %struct.bits_counted*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %struct.pict*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  store [73 x [90 x %struct.motionvector*]]* %0, [73 x [90 x %struct.motionvector*]]** %8, align 8
  store %struct.bits_counted* %1, %struct.bits_counted** %9, align 8
  store i32 %2, i32* %10, align 4
  store i32 %3, i32* %11, align 4
  store i32 %4, i32* %12, align 4
  store i32 %5, i32* %13, align 4
  store %struct.pict* %6, %struct.pict** %14, align 8
  %22 = load i32, i32* %10, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %10, align 4
  %24 = load i32, i32* %11, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %11, align 4
  %26 = load i32, i32* %12, align 4
  %27 = icmp eq i32 %26, 2
  br i1 %27, label %28, label %29

28:                                               ; preds = %7
  store i32 1, i32* %19, align 4
  store i32 4, i32* %20, align 4
  br label %30

29:                                               ; preds = %7
  store i32 0, i32* %19, align 4
  store i32 0, i32* %20, align 4
  br label %30

30:                                               ; preds = %29, %28
  %31 = load i32, i32* %19, align 4
  store i32 %31, i32* %21, align 4
  br label %32

32:                                               ; preds = %283, %30
  %33 = load i32, i32* %21, align 4
  %34 = load i32, i32* %20, align 4
  %35 = icmp sle i32 %33, %34
  br i1 %35, label %36, label %286

36:                                               ; preds = %32
  %37 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %8, align 8
  %38 = load i32, i32* %10, align 4
  %39 = load i32, i32* %11, align 4
  %40 = load i32, i32* %21, align 4
  %41 = load i32, i32* %13, align 4
  call void @FindPMV([73 x [90 x %struct.motionvector*]]* %37, i32 %38, i32 %39, i32* %17, i32* %18, i32 %40, i32 %41, i32 1)
  %42 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %8, align 8
  %43 = load i32, i32* %21, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %42, i64 %44
  %46 = load i32, i32* %11, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %45, i64 0, i64 %47
  %49 = load i32, i32* %10, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %48, i64 0, i64 %50
  %52 = load %struct.motionvector*, %struct.motionvector** %51, align 8
  %53 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %52, i32 0, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = mul nsw i32 2, %54
  %56 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %8, align 8
  %57 = load i32, i32* %21, align 4
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %56, i64 %58
  %60 = load i32, i32* %11, align 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %59, i64 0, i64 %61
  %63 = load i32, i32* %10, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %62, i64 0, i64 %64
  %66 = load %struct.motionvector*, %struct.motionvector** %65, align 8
  %67 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %66, i32 0, i32 2
  %68 = load i32, i32* %67, align 4
  %69 = add nsw i32 %55, %68
  %70 = load i32, i32* %17, align 4
  %71 = sub nsw i32 %69, %70
  store i32 %71, i32* %16, align 4
  %72 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %8, align 8
  %73 = load i32, i32* %21, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %72, i64 %74
  %76 = load i32, i32* %11, align 4
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %75, i64 0, i64 %77
  %79 = load i32, i32* %10, align 4
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %78, i64 0, i64 %80
  %82 = load %struct.motionvector*, %struct.motionvector** %81, align 8
  %83 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %82, i32 0, i32 1
  %84 = load i32, i32* %83, align 4
  %85 = mul nsw i32 2, %84
  %86 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %8, align 8
  %87 = load i32, i32* %21, align 4
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %86, i64 %88
  %90 = load i32, i32* %11, align 4
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %89, i64 0, i64 %91
  %93 = load i32, i32* %10, align 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %92, i64 0, i64 %94
  %96 = load %struct.motionvector*, %struct.motionvector** %95, align 8
  %97 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %96, i32 0, i32 3
  %98 = load i32, i32* %97, align 4
  %99 = add nsw i32 %85, %98
  %100 = load i32, i32* %18, align 4
  %101 = sub nsw i32 %99, %100
  store i32 %101, i32* %15, align 4
  %102 = load i32, i32* @long_vectors, align 4
  %103 = icmp ne i32 %102, 0
  br i1 %103, label %131, label %104

104:                                              ; preds = %36
  %105 = load i32, i32* %16, align 4
  %106 = icmp slt i32 %105, -32
  br i1 %106, label %107, label %110

107:                                              ; preds = %104
  %108 = load i32, i32* %16, align 4
  %109 = add nsw i32 %108, 64
  store i32 %109, i32* %16, align 4
  br label %117

110:                                              ; preds = %104
  %111 = load i32, i32* %16, align 4
  %112 = icmp sgt i32 %111, 31
  br i1 %112, label %113, label %116

113:                                              ; preds = %110
  %114 = load i32, i32* %16, align 4
  %115 = sub nsw i32 %114, 64
  store i32 %115, i32* %16, align 4
  br label %116

116:                                              ; preds = %113, %110
  br label %117

117:                                              ; preds = %116, %107
  %118 = load i32, i32* %15, align 4
  %119 = icmp slt i32 %118, -32
  br i1 %119, label %120, label %123

120:                                              ; preds = %117
  %121 = load i32, i32* %15, align 4
  %122 = add nsw i32 %121, 64
  store i32 %122, i32* %15, align 4
  br label %130

123:                                              ; preds = %117
  %124 = load i32, i32* %15, align 4
  %125 = icmp sgt i32 %124, 31
  br i1 %125, label %126, label %129

126:                                              ; preds = %123
  %127 = load i32, i32* %15, align 4
  %128 = sub nsw i32 %127, 64
  store i32 %128, i32* %15, align 4
  br label %129

129:                                              ; preds = %126, %123
  br label %130

130:                                              ; preds = %129, %120
  br label %170

131:                                              ; preds = %36
  %132 = load i32, i32* %17, align 4
  %133 = icmp slt i32 %132, -31
  br i1 %133, label %134, label %140

134:                                              ; preds = %131
  %135 = load i32, i32* %16, align 4
  %136 = icmp slt i32 %135, -63
  br i1 %136, label %137, label %140

137:                                              ; preds = %134
  %138 = load i32, i32* %16, align 4
  %139 = add nsw i32 %138, 64
  store i32 %139, i32* %16, align 4
  br label %150

140:                                              ; preds = %134, %131
  %141 = load i32, i32* %17, align 4
  %142 = icmp sgt i32 %141, 32
  br i1 %142, label %143, label %149

143:                                              ; preds = %140
  %144 = load i32, i32* %16, align 4
  %145 = icmp sgt i32 %144, 63
  br i1 %145, label %146, label %149

146:                                              ; preds = %143
  %147 = load i32, i32* %16, align 4
  %148 = sub nsw i32 %147, 64
  store i32 %148, i32* %16, align 4
  br label %149

149:                                              ; preds = %146, %143, %140
  br label %150

150:                                              ; preds = %149, %137
  %151 = load i32, i32* %18, align 4
  %152 = icmp slt i32 %151, -31
  br i1 %152, label %153, label %159

153:                                              ; preds = %150
  %154 = load i32, i32* %15, align 4
  %155 = icmp slt i32 %154, -63
  br i1 %155, label %156, label %159

156:                                              ; preds = %153
  %157 = load i32, i32* %15, align 4
  %158 = add nsw i32 %157, 64
  store i32 %158, i32* %15, align 4
  br label %169

159:                                              ; preds = %153, %150
  %160 = load i32, i32* %18, align 4
  %161 = icmp sgt i32 %160, 32
  br i1 %161, label %162, label %168

162:                                              ; preds = %159
  %163 = load i32, i32* %15, align 4
  %164 = icmp sgt i32 %163, 63
  br i1 %164, label %165, label %168

165:                                              ; preds = %162
  %166 = load i32, i32* %15, align 4
  %167 = sub nsw i32 %166, 64
  store i32 %167, i32* %15, align 4
  br label %168

168:                                              ; preds = %165, %162, %159
  br label %169

169:                                              ; preds = %168, %156
  br label %170

170:                                              ; preds = %169, %130
  %171 = load i32, i32* @trace, align 4
  %172 = icmp ne i32 %171, 0
  br i1 %172, label %173, label %176

173:                                              ; preds = %170
  %174 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %175 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %174, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21, i64 0, i64 0))
  br label %176

176:                                              ; preds = %173, %170
  %177 = load i32, i32* %16, align 4
  %178 = icmp slt i32 %177, 0
  br i1 %178, label %179, label %182

179:                                              ; preds = %176
  %180 = load i32, i32* %16, align 4
  %181 = add nsw i32 %180, 64
  store i32 %181, i32* %16, align 4
  br label %182

182:                                              ; preds = %179, %176
  %183 = load i32, i32* %15, align 4
  %184 = icmp slt i32 %183, 0
  br i1 %184, label %185, label %188

185:                                              ; preds = %182
  %186 = load i32, i32* %15, align 4
  %187 = add nsw i32 %186, 64
  store i32 %187, i32* %15, align 4
  br label %188

188:                                              ; preds = %185, %182
  %189 = load i32, i32* %16, align 4
  %190 = call i32 @put_mv(i32 %189)
  %191 = load %struct.bits_counted*, %struct.bits_counted** %9, align 8
  %192 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %191, i32 0, i32 2
  %193 = load i32, i32* %192, align 4
  %194 = add nsw i32 %193, %190
  store i32 %194, i32* %192, align 4
  %195 = load i32, i32* %15, align 4
  %196 = call i32 @put_mv(i32 %195)
  %197 = load %struct.bits_counted*, %struct.bits_counted** %9, align 8
  %198 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %197, i32 0, i32 2
  %199 = load i32, i32* %198, align 4
  %200 = add nsw i32 %199, %196
  store i32 %200, i32* %198, align 4
  %201 = load i32, i32* @trace, align 4
  %202 = icmp ne i32 %201, 0
  br i1 %202, label %203, label %282

203:                                              ; preds = %188
  %204 = load i32, i32* %16, align 4
  %205 = icmp sgt i32 %204, 31
  br i1 %205, label %206, label %209

206:                                              ; preds = %203
  %207 = load i32, i32* %16, align 4
  %208 = sub nsw i32 %207, 64
  store i32 %208, i32* %16, align 4
  br label %209

209:                                              ; preds = %206, %203
  %210 = load i32, i32* %15, align 4
  %211 = icmp sgt i32 %210, 31
  br i1 %211, label %212, label %215

212:                                              ; preds = %209
  %213 = load i32, i32* %15, align 4
  %214 = sub nsw i32 %213, 64
  store i32 %214, i32* %15, align 4
  br label %215

215:                                              ; preds = %212, %209
  %216 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %217 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %8, align 8
  %218 = load i32, i32* %21, align 4
  %219 = sext i32 %218 to i64
  %220 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %217, i64 %219
  %221 = load i32, i32* %11, align 4
  %222 = sext i32 %221 to i64
  %223 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %220, i64 0, i64 %222
  %224 = load i32, i32* %10, align 4
  %225 = sext i32 %224 to i64
  %226 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %223, i64 0, i64 %225
  %227 = load %struct.motionvector*, %struct.motionvector** %226, align 8
  %228 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %227, i32 0, i32 0
  %229 = load i32, i32* %228, align 4
  %230 = mul nsw i32 2, %229
  %231 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %8, align 8
  %232 = load i32, i32* %21, align 4
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %231, i64 %233
  %235 = load i32, i32* %11, align 4
  %236 = sext i32 %235 to i64
  %237 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %234, i64 0, i64 %236
  %238 = load i32, i32* %10, align 4
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %237, i64 0, i64 %239
  %241 = load %struct.motionvector*, %struct.motionvector** %240, align 8
  %242 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %241, i32 0, i32 2
  %243 = load i32, i32* %242, align 4
  %244 = add nsw i32 %230, %243
  %245 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %8, align 8
  %246 = load i32, i32* %21, align 4
  %247 = sext i32 %246 to i64
  %248 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %245, i64 %247
  %249 = load i32, i32* %11, align 4
  %250 = sext i32 %249 to i64
  %251 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %248, i64 0, i64 %250
  %252 = load i32, i32* %10, align 4
  %253 = sext i32 %252 to i64
  %254 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %251, i64 0, i64 %253
  %255 = load %struct.motionvector*, %struct.motionvector** %254, align 8
  %256 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %255, i32 0, i32 1
  %257 = load i32, i32* %256, align 4
  %258 = mul nsw i32 2, %257
  %259 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %8, align 8
  %260 = load i32, i32* %21, align 4
  %261 = sext i32 %260 to i64
  %262 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %259, i64 %261
  %263 = load i32, i32* %11, align 4
  %264 = sext i32 %263 to i64
  %265 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %262, i64 0, i64 %264
  %266 = load i32, i32* %10, align 4
  %267 = sext i32 %266 to i64
  %268 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %265, i64 0, i64 %267
  %269 = load %struct.motionvector*, %struct.motionvector** %268, align 8
  %270 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %269, i32 0, i32 3
  %271 = load i32, i32* %270, align 4
  %272 = add nsw i32 %258, %271
  %273 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %216, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.22, i64 0, i64 0), i32 %244, i32 %272)
  %274 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %275 = load i32, i32* %17, align 4
  %276 = load i32, i32* %18, align 4
  %277 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %274, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.23, i64 0, i64 0), i32 %275, i32 %276)
  %278 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %279 = load i32, i32* %16, align 4
  %280 = load i32, i32* %15, align 4
  %281 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %278, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.24, i64 0, i64 0), i32 %279, i32 %280)
  br label %282

282:                                              ; preds = %215, %188
  br label %283

283:                                              ; preds = %282
  %284 = load i32, i32* %21, align 4
  %285 = add nsw i32 %284, 1
  store i32 %285, i32* %21, align 4
  br label %32

286:                                              ; preds = %32
  %287 = load %struct.pict*, %struct.pict** %14, align 8
  %288 = getelementptr inbounds %struct.pict, %struct.pict* %287, i32 0, i32 10
  %289 = load i32, i32* %288, align 4
  %290 = icmp ne i32 %289, 0
  br i1 %290, label %291, label %375

291:                                              ; preds = %286
  %292 = load %struct.pict*, %struct.pict** %14, align 8
  %293 = getelementptr inbounds %struct.pict, %struct.pict* %292, i32 0, i32 16
  %294 = load i32, i32* %293, align 4
  %295 = icmp eq i32 %294, 1
  br i1 %295, label %301, label %296

296:                                              ; preds = %291
  %297 = load %struct.pict*, %struct.pict** %14, align 8
  %298 = getelementptr inbounds %struct.pict, %struct.pict* %297, i32 0, i32 16
  %299 = load i32, i32* %298, align 4
  %300 = icmp eq i32 %299, 2
  br i1 %300, label %301, label %374

301:                                              ; preds = %296, %291
  %302 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %8, align 8
  %303 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %302, i64 5
  %304 = load i32, i32* %11, align 4
  %305 = sext i32 %304 to i64
  %306 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %303, i64 0, i64 %305
  %307 = load i32, i32* %10, align 4
  %308 = sext i32 %307 to i64
  %309 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %306, i64 0, i64 %308
  %310 = load %struct.motionvector*, %struct.motionvector** %309, align 8
  %311 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %310, i32 0, i32 0
  %312 = load i32, i32* %311, align 4
  store i32 %312, i32* %16, align 4
  %313 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %8, align 8
  %314 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %313, i64 5
  %315 = load i32, i32* %11, align 4
  %316 = sext i32 %315 to i64
  %317 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %314, i64 0, i64 %316
  %318 = load i32, i32* %10, align 4
  %319 = sext i32 %318 to i64
  %320 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %317, i64 0, i64 %319
  %321 = load %struct.motionvector*, %struct.motionvector** %320, align 8
  %322 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %321, i32 0, i32 1
  %323 = load i32, i32* %322, align 4
  store i32 %323, i32* %15, align 4
  %324 = load i32, i32* %16, align 4
  %325 = icmp slt i32 %324, 0
  br i1 %325, label %326, label %329

326:                                              ; preds = %301
  %327 = load i32, i32* %16, align 4
  %328 = add nsw i32 %327, 64
  store i32 %328, i32* %16, align 4
  br label %329

329:                                              ; preds = %326, %301
  %330 = load i32, i32* %15, align 4
  %331 = icmp slt i32 %330, 0
  br i1 %331, label %332, label %335

332:                                              ; preds = %329
  %333 = load i32, i32* %15, align 4
  %334 = add nsw i32 %333, 64
  store i32 %334, i32* %15, align 4
  br label %335

335:                                              ; preds = %332, %329
  %336 = load i32, i32* @trace, align 4
  %337 = icmp ne i32 %336, 0
  br i1 %337, label %338, label %341

338:                                              ; preds = %335
  %339 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %340 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %339, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.25, i64 0, i64 0))
  br label %341

341:                                              ; preds = %338, %335
  %342 = load i32, i32* %16, align 4
  %343 = call i32 @put_mv(i32 %342)
  %344 = load %struct.bits_counted*, %struct.bits_counted** %9, align 8
  %345 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %344, i32 0, i32 2
  %346 = load i32, i32* %345, align 4
  %347 = add nsw i32 %346, %343
  store i32 %347, i32* %345, align 4
  %348 = load i32, i32* %15, align 4
  %349 = call i32 @put_mv(i32 %348)
  %350 = load %struct.bits_counted*, %struct.bits_counted** %9, align 8
  %351 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %350, i32 0, i32 2
  %352 = load i32, i32* %351, align 4
  %353 = add nsw i32 %352, %349
  store i32 %353, i32* %351, align 4
  %354 = load i32, i32* @trace, align 4
  %355 = icmp ne i32 %354, 0
  br i1 %355, label %356, label %373

356:                                              ; preds = %341
  %357 = load i32, i32* %16, align 4
  %358 = icmp sgt i32 %357, 31
  br i1 %358, label %359, label %362

359:                                              ; preds = %356
  %360 = load i32, i32* %16, align 4
  %361 = sub nsw i32 %360, 64
  store i32 %361, i32* %16, align 4
  br label %362

362:                                              ; preds = %359, %356
  %363 = load i32, i32* %15, align 4
  %364 = icmp sgt i32 %363, 31
  br i1 %364, label %365, label %368

365:                                              ; preds = %362
  %366 = load i32, i32* %15, align 4
  %367 = sub nsw i32 %366, 64
  store i32 %367, i32* %15, align 4
  br label %368

368:                                              ; preds = %365, %362
  %369 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %370 = load i32, i32* %16, align 4
  %371 = load i32, i32* %15, align 4
  %372 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %369, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.26, i64 0, i64 0), i32 %370, i32 %371)
  br label %373

373:                                              ; preds = %368, %341
  br label %374

374:                                              ; preds = %373, %296
  br label %375

375:                                              ; preds = %374, %286
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @FindPMV([73 x [90 x %struct.motionvector*]]* %0, i32 %1, i32 %2, i32* %3, i32* %4, i32 %5, i32 %6, i32 %7) #0 {
  %9 = alloca [73 x [90 x %struct.motionvector*]]*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32*, align 8
  %13 = alloca i32*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca i32, align 4
  %31 = alloca i32, align 4
  store [73 x [90 x %struct.motionvector*]]* %0, [73 x [90 x %struct.motionvector*]]** %9, align 8
  store i32 %1, i32* %10, align 4
  store i32 %2, i32* %11, align 4
  store i32* %3, i32** %12, align 8
  store i32* %4, i32** %13, align 8
  store i32 %5, i32* %14, align 4
  store i32 %6, i32* %15, align 4
  store i32 %7, i32* %16, align 4
  store i32 0, i32* %31, align 4
  store i32 0, i32* %30, align 4
  store i32 0, i32* %29, align 4
  %32 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %9, align 8
  %33 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %32, i64 0
  %34 = load i32, i32* %11, align 4
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %33, i64 0, i64 %35
  %37 = load i32, i32* %10, align 4
  %38 = sub nsw i32 %37, 1
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %36, i64 0, i64 %39
  %41 = load %struct.motionvector*, %struct.motionvector** %40, align 8
  %42 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %41, i32 0, i32 5
  %43 = load i32, i32* %42, align 4
  %44 = icmp eq i32 %43, 2
  br i1 %44, label %45, label %46

45:                                               ; preds = %8
  store i32 1, i32* %29, align 4
  br label %46

46:                                               ; preds = %45, %8
  %47 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %9, align 8
  %48 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %47, i64 0
  %49 = load i32, i32* %11, align 4
  %50 = sub nsw i32 %49, 1
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %48, i64 0, i64 %51
  %53 = load i32, i32* %10, align 4
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %52, i64 0, i64 %54
  %56 = load %struct.motionvector*, %struct.motionvector** %55, align 8
  %57 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %56, i32 0, i32 5
  %58 = load i32, i32* %57, align 4
  %59 = icmp eq i32 %58, 2
  br i1 %59, label %60, label %61

60:                                               ; preds = %46
  store i32 1, i32* %30, align 4
  br label %61

61:                                               ; preds = %60, %46
  %62 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %9, align 8
  %63 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %62, i64 0
  %64 = load i32, i32* %11, align 4
  %65 = sub nsw i32 %64, 1
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %63, i64 0, i64 %66
  %68 = load i32, i32* %10, align 4
  %69 = add nsw i32 %68, 1
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %67, i64 0, i64 %70
  %72 = load %struct.motionvector*, %struct.motionvector** %71, align 8
  %73 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %72, i32 0, i32 5
  %74 = load i32, i32* %73, align 4
  %75 = icmp eq i32 %74, 2
  br i1 %75, label %76, label %77

76:                                               ; preds = %61
  store i32 1, i32* %31, align 4
  br label %77

77:                                               ; preds = %76, %61
  %78 = load i32, i32* %14, align 4
  switch i32 %78, label %162 [
    i32 0, label %79
    i32 1, label %102
    i32 2, label %125
    i32 3, label %143
    i32 4, label %155
  ]

79:                                               ; preds = %77
  %80 = load i32, i32* %29, align 4
  %81 = icmp ne i32 %80, 0
  %82 = zext i1 %81 to i64
  %83 = select i1 %81, i32 2, i32 0
  store i32 %83, i32* %26, align 4
  %84 = load i32, i32* %11, align 4
  store i32 %84, i32* %23, align 4
  %85 = load i32, i32* %10, align 4
  %86 = sub nsw i32 %85, 1
  store i32 %86, i32* %20, align 4
  %87 = load i32, i32* %30, align 4
  %88 = icmp ne i32 %87, 0
  %89 = zext i1 %88 to i64
  %90 = select i1 %88, i32 3, i32 0
  store i32 %90, i32* %27, align 4
  %91 = load i32, i32* %11, align 4
  %92 = sub nsw i32 %91, 1
  store i32 %92, i32* %24, align 4
  %93 = load i32, i32* %10, align 4
  store i32 %93, i32* %21, align 4
  %94 = load i32, i32* %31, align 4
  %95 = icmp ne i32 %94, 0
  %96 = zext i1 %95 to i64
  %97 = select i1 %95, i32 3, i32 0
  store i32 %97, i32* %28, align 4
  %98 = load i32, i32* %11, align 4
  %99 = sub nsw i32 %98, 1
  store i32 %99, i32* %25, align 4
  %100 = load i32, i32* %10, align 4
  %101 = add nsw i32 %100, 1
  store i32 %101, i32* %22, align 4
  br label %165

102:                                              ; preds = %77
  %103 = load i32, i32* %29, align 4
  %104 = icmp ne i32 %103, 0
  %105 = zext i1 %104 to i64
  %106 = select i1 %104, i32 2, i32 0
  store i32 %106, i32* %26, align 4
  %107 = load i32, i32* %11, align 4
  store i32 %107, i32* %23, align 4
  %108 = load i32, i32* %10, align 4
  %109 = sub nsw i32 %108, 1
  store i32 %109, i32* %20, align 4
  %110 = load i32, i32* %30, align 4
  %111 = icmp ne i32 %110, 0
  %112 = zext i1 %111 to i64
  %113 = select i1 %111, i32 3, i32 0
  store i32 %113, i32* %27, align 4
  %114 = load i32, i32* %11, align 4
  %115 = sub nsw i32 %114, 1
  store i32 %115, i32* %24, align 4
  %116 = load i32, i32* %10, align 4
  store i32 %116, i32* %21, align 4
  %117 = load i32, i32* %31, align 4
  %118 = icmp ne i32 %117, 0
  %119 = zext i1 %118 to i64
  %120 = select i1 %118, i32 3, i32 0
  store i32 %120, i32* %28, align 4
  %121 = load i32, i32* %11, align 4
  %122 = sub nsw i32 %121, 1
  store i32 %122, i32* %25, align 4
  %123 = load i32, i32* %10, align 4
  %124 = add nsw i32 %123, 1
  store i32 %124, i32* %22, align 4
  br label %165

125:                                              ; preds = %77
  store i32 1, i32* %26, align 4
  %126 = load i32, i32* %11, align 4
  store i32 %126, i32* %23, align 4
  %127 = load i32, i32* %10, align 4
  store i32 %127, i32* %20, align 4
  %128 = load i32, i32* %30, align 4
  %129 = icmp ne i32 %128, 0
  %130 = zext i1 %129 to i64
  %131 = select i1 %129, i32 4, i32 0
  store i32 %131, i32* %27, align 4
  %132 = load i32, i32* %11, align 4
  %133 = sub nsw i32 %132, 1
  store i32 %133, i32* %24, align 4
  %134 = load i32, i32* %10, align 4
  store i32 %134, i32* %21, align 4
  %135 = load i32, i32* %31, align 4
  %136 = icmp ne i32 %135, 0
  %137 = zext i1 %136 to i64
  %138 = select i1 %136, i32 3, i32 0
  store i32 %138, i32* %28, align 4
  %139 = load i32, i32* %11, align 4
  %140 = sub nsw i32 %139, 1
  store i32 %140, i32* %25, align 4
  %141 = load i32, i32* %10, align 4
  %142 = add nsw i32 %141, 1
  store i32 %142, i32* %22, align 4
  br label %165

143:                                              ; preds = %77
  %144 = load i32, i32* %29, align 4
  %145 = icmp ne i32 %144, 0
  %146 = zext i1 %145 to i64
  %147 = select i1 %145, i32 4, i32 0
  store i32 %147, i32* %26, align 4
  %148 = load i32, i32* %11, align 4
  store i32 %148, i32* %23, align 4
  %149 = load i32, i32* %10, align 4
  %150 = sub nsw i32 %149, 1
  store i32 %150, i32* %20, align 4
  store i32 1, i32* %27, align 4
  %151 = load i32, i32* %11, align 4
  store i32 %151, i32* %24, align 4
  %152 = load i32, i32* %10, align 4
  store i32 %152, i32* %21, align 4
  store i32 2, i32* %28, align 4
  %153 = load i32, i32* %11, align 4
  store i32 %153, i32* %25, align 4
  %154 = load i32, i32* %10, align 4
  store i32 %154, i32* %22, align 4
  br label %165

155:                                              ; preds = %77
  store i32 3, i32* %26, align 4
  %156 = load i32, i32* %11, align 4
  store i32 %156, i32* %23, align 4
  %157 = load i32, i32* %10, align 4
  store i32 %157, i32* %20, align 4
  store i32 1, i32* %27, align 4
  %158 = load i32, i32* %11, align 4
  store i32 %158, i32* %24, align 4
  %159 = load i32, i32* %10, align 4
  store i32 %159, i32* %21, align 4
  store i32 2, i32* %28, align 4
  %160 = load i32, i32* %11, align 4
  store i32 %160, i32* %25, align 4
  %161 = load i32, i32* %10, align 4
  store i32 %161, i32* %22, align 4
  br label %165

162:                                              ; preds = %77
  %163 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %164 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %163, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.27, i64 0, i64 0))
  call void @exit(i32 -1) #9
  unreachable

165:                                              ; preds = %155, %143, %125, %102, %79
  %166 = load i32, i32* %16, align 4
  %167 = icmp ne i32 %166, 0
  br i1 %167, label %168, label %253

168:                                              ; preds = %165
  %169 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %9, align 8
  %170 = load i32, i32* %26, align 4
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %169, i64 %171
  %173 = load i32, i32* %23, align 4
  %174 = sext i32 %173 to i64
  %175 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %172, i64 0, i64 %174
  %176 = load i32, i32* %20, align 4
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %175, i64 0, i64 %177
  %179 = load %struct.motionvector*, %struct.motionvector** %178, align 8
  %180 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %179, i32 0, i32 0
  %181 = load i32, i32* %180, align 4
  %182 = mul nsw i32 2, %181
  %183 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %9, align 8
  %184 = load i32, i32* %26, align 4
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %183, i64 %185
  %187 = load i32, i32* %23, align 4
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %186, i64 0, i64 %188
  %190 = load i32, i32* %20, align 4
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %189, i64 0, i64 %191
  %193 = load %struct.motionvector*, %struct.motionvector** %192, align 8
  %194 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %193, i32 0, i32 2
  %195 = load i32, i32* %194, align 4
  %196 = add nsw i32 %182, %195
  store i32 %196, i32* %17, align 4
  %197 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %9, align 8
  %198 = load i32, i32* %27, align 4
  %199 = sext i32 %198 to i64
  %200 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %197, i64 %199
  %201 = load i32, i32* %24, align 4
  %202 = sext i32 %201 to i64
  %203 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %200, i64 0, i64 %202
  %204 = load i32, i32* %21, align 4
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %203, i64 0, i64 %205
  %207 = load %struct.motionvector*, %struct.motionvector** %206, align 8
  %208 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %207, i32 0, i32 0
  %209 = load i32, i32* %208, align 4
  %210 = mul nsw i32 2, %209
  %211 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %9, align 8
  %212 = load i32, i32* %27, align 4
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %211, i64 %213
  %215 = load i32, i32* %24, align 4
  %216 = sext i32 %215 to i64
  %217 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %214, i64 0, i64 %216
  %218 = load i32, i32* %21, align 4
  %219 = sext i32 %218 to i64
  %220 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %217, i64 0, i64 %219
  %221 = load %struct.motionvector*, %struct.motionvector** %220, align 8
  %222 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %221, i32 0, i32 2
  %223 = load i32, i32* %222, align 4
  %224 = add nsw i32 %210, %223
  store i32 %224, i32* %18, align 4
  %225 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %9, align 8
  %226 = load i32, i32* %28, align 4
  %227 = sext i32 %226 to i64
  %228 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %225, i64 %227
  %229 = load i32, i32* %25, align 4
  %230 = sext i32 %229 to i64
  %231 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %228, i64 0, i64 %230
  %232 = load i32, i32* %22, align 4
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %231, i64 0, i64 %233
  %235 = load %struct.motionvector*, %struct.motionvector** %234, align 8
  %236 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %235, i32 0, i32 0
  %237 = load i32, i32* %236, align 4
  %238 = mul nsw i32 2, %237
  %239 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %9, align 8
  %240 = load i32, i32* %28, align 4
  %241 = sext i32 %240 to i64
  %242 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %239, i64 %241
  %243 = load i32, i32* %25, align 4
  %244 = sext i32 %243 to i64
  %245 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %242, i64 0, i64 %244
  %246 = load i32, i32* %22, align 4
  %247 = sext i32 %246 to i64
  %248 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %245, i64 0, i64 %247
  %249 = load %struct.motionvector*, %struct.motionvector** %248, align 8
  %250 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %249, i32 0, i32 2
  %251 = load i32, i32* %250, align 4
  %252 = add nsw i32 %238, %251
  store i32 %252, i32* %19, align 4
  br label %296

253:                                              ; preds = %165
  %254 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %9, align 8
  %255 = load i32, i32* %26, align 4
  %256 = sext i32 %255 to i64
  %257 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %254, i64 %256
  %258 = load i32, i32* %23, align 4
  %259 = sext i32 %258 to i64
  %260 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %257, i64 0, i64 %259
  %261 = load i32, i32* %20, align 4
  %262 = sext i32 %261 to i64
  %263 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %260, i64 0, i64 %262
  %264 = load %struct.motionvector*, %struct.motionvector** %263, align 8
  %265 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %264, i32 0, i32 0
  %266 = load i32, i32* %265, align 4
  %267 = mul nsw i32 2, %266
  store i32 %267, i32* %17, align 4
  %268 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %9, align 8
  %269 = load i32, i32* %27, align 4
  %270 = sext i32 %269 to i64
  %271 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %268, i64 %270
  %272 = load i32, i32* %24, align 4
  %273 = sext i32 %272 to i64
  %274 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %271, i64 0, i64 %273
  %275 = load i32, i32* %21, align 4
  %276 = sext i32 %275 to i64
  %277 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %274, i64 0, i64 %276
  %278 = load %struct.motionvector*, %struct.motionvector** %277, align 8
  %279 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %278, i32 0, i32 0
  %280 = load i32, i32* %279, align 4
  %281 = mul nsw i32 2, %280
  store i32 %281, i32* %18, align 4
  %282 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %9, align 8
  %283 = load i32, i32* %28, align 4
  %284 = sext i32 %283 to i64
  %285 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %282, i64 %284
  %286 = load i32, i32* %25, align 4
  %287 = sext i32 %286 to i64
  %288 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %285, i64 0, i64 %287
  %289 = load i32, i32* %22, align 4
  %290 = sext i32 %289 to i64
  %291 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %288, i64 0, i64 %290
  %292 = load %struct.motionvector*, %struct.motionvector** %291, align 8
  %293 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %292, i32 0, i32 0
  %294 = load i32, i32* %293, align 4
  %295 = mul nsw i32 2, %294
  store i32 %295, i32* %19, align 4
  br label %296

296:                                              ; preds = %253, %168
  %297 = load i32, i32* %15, align 4
  %298 = icmp ne i32 %297, 0
  br i1 %298, label %299, label %309

299:                                              ; preds = %296
  %300 = load i32, i32* %14, align 4
  %301 = icmp eq i32 %300, 0
  br i1 %301, label %308, label %302

302:                                              ; preds = %299
  %303 = load i32, i32* %14, align 4
  %304 = icmp eq i32 %303, 1
  br i1 %304, label %308, label %305

305:                                              ; preds = %302
  %306 = load i32, i32* %14, align 4
  %307 = icmp eq i32 %306, 2
  br i1 %307, label %308, label %309

308:                                              ; preds = %305, %302, %299
  store i32 1998, i32* %18, align 4
  br label %309

309:                                              ; preds = %308, %305, %296
  %310 = load i32, i32* %18, align 4
  %311 = icmp eq i32 %310, 1998
  br i1 %311, label %312, label %314

312:                                              ; preds = %309
  %313 = load i32, i32* %17, align 4
  store i32 %313, i32* %19, align 4
  store i32 %313, i32* %18, align 4
  br label %314

314:                                              ; preds = %312, %309
  %315 = load i32, i32* %17, align 4
  %316 = load i32, i32* %18, align 4
  %317 = add nsw i32 %315, %316
  %318 = load i32, i32* %19, align 4
  %319 = add nsw i32 %317, %318
  %320 = load i32, i32* %17, align 4
  %321 = load i32, i32* %18, align 4
  %322 = load i32, i32* %19, align 4
  %323 = icmp sgt i32 %321, %322
  br i1 %323, label %324, label %326

324:                                              ; preds = %314
  %325 = load i32, i32* %18, align 4
  br label %328

326:                                              ; preds = %314
  %327 = load i32, i32* %19, align 4
  br label %328

328:                                              ; preds = %326, %324
  %329 = phi i32 [ %325, %324 ], [ %327, %326 ]
  %330 = icmp sgt i32 %320, %329
  br i1 %330, label %331, label %333

331:                                              ; preds = %328
  %332 = load i32, i32* %17, align 4
  br label %343

333:                                              ; preds = %328
  %334 = load i32, i32* %18, align 4
  %335 = load i32, i32* %19, align 4
  %336 = icmp sgt i32 %334, %335
  br i1 %336, label %337, label %339

337:                                              ; preds = %333
  %338 = load i32, i32* %18, align 4
  br label %341

339:                                              ; preds = %333
  %340 = load i32, i32* %19, align 4
  br label %341

341:                                              ; preds = %339, %337
  %342 = phi i32 [ %338, %337 ], [ %340, %339 ]
  br label %343

343:                                              ; preds = %341, %331
  %344 = phi i32 [ %332, %331 ], [ %342, %341 ]
  %345 = sub nsw i32 %319, %344
  %346 = load i32, i32* %17, align 4
  %347 = load i32, i32* %18, align 4
  %348 = load i32, i32* %19, align 4
  %349 = icmp slt i32 %347, %348
  br i1 %349, label %350, label %352

350:                                              ; preds = %343
  %351 = load i32, i32* %18, align 4
  br label %354

352:                                              ; preds = %343
  %353 = load i32, i32* %19, align 4
  br label %354

354:                                              ; preds = %352, %350
  %355 = phi i32 [ %351, %350 ], [ %353, %352 ]
  %356 = icmp slt i32 %346, %355
  br i1 %356, label %357, label %359

357:                                              ; preds = %354
  %358 = load i32, i32* %17, align 4
  br label %369

359:                                              ; preds = %354
  %360 = load i32, i32* %18, align 4
  %361 = load i32, i32* %19, align 4
  %362 = icmp slt i32 %360, %361
  br i1 %362, label %363, label %365

363:                                              ; preds = %359
  %364 = load i32, i32* %18, align 4
  br label %367

365:                                              ; preds = %359
  %366 = load i32, i32* %19, align 4
  br label %367

367:                                              ; preds = %365, %363
  %368 = phi i32 [ %364, %363 ], [ %366, %365 ]
  br label %369

369:                                              ; preds = %367, %357
  %370 = phi i32 [ %358, %357 ], [ %368, %367 ]
  %371 = sub nsw i32 %345, %370
  %372 = load i32*, i32** %12, align 8
  store i32 %371, i32* %372, align 4
  %373 = load i32, i32* %16, align 4
  %374 = icmp ne i32 %373, 0
  br i1 %374, label %375, label %460

375:                                              ; preds = %369
  %376 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %9, align 8
  %377 = load i32, i32* %26, align 4
  %378 = sext i32 %377 to i64
  %379 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %376, i64 %378
  %380 = load i32, i32* %23, align 4
  %381 = sext i32 %380 to i64
  %382 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %379, i64 0, i64 %381
  %383 = load i32, i32* %20, align 4
  %384 = sext i32 %383 to i64
  %385 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %382, i64 0, i64 %384
  %386 = load %struct.motionvector*, %struct.motionvector** %385, align 8
  %387 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %386, i32 0, i32 1
  %388 = load i32, i32* %387, align 4
  %389 = mul nsw i32 2, %388
  %390 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %9, align 8
  %391 = load i32, i32* %26, align 4
  %392 = sext i32 %391 to i64
  %393 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %390, i64 %392
  %394 = load i32, i32* %23, align 4
  %395 = sext i32 %394 to i64
  %396 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %393, i64 0, i64 %395
  %397 = load i32, i32* %20, align 4
  %398 = sext i32 %397 to i64
  %399 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %396, i64 0, i64 %398
  %400 = load %struct.motionvector*, %struct.motionvector** %399, align 8
  %401 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %400, i32 0, i32 3
  %402 = load i32, i32* %401, align 4
  %403 = add nsw i32 %389, %402
  store i32 %403, i32* %17, align 4
  %404 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %9, align 8
  %405 = load i32, i32* %27, align 4
  %406 = sext i32 %405 to i64
  %407 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %404, i64 %406
  %408 = load i32, i32* %24, align 4
  %409 = sext i32 %408 to i64
  %410 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %407, i64 0, i64 %409
  %411 = load i32, i32* %21, align 4
  %412 = sext i32 %411 to i64
  %413 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %410, i64 0, i64 %412
  %414 = load %struct.motionvector*, %struct.motionvector** %413, align 8
  %415 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %414, i32 0, i32 1
  %416 = load i32, i32* %415, align 4
  %417 = mul nsw i32 2, %416
  %418 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %9, align 8
  %419 = load i32, i32* %27, align 4
  %420 = sext i32 %419 to i64
  %421 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %418, i64 %420
  %422 = load i32, i32* %24, align 4
  %423 = sext i32 %422 to i64
  %424 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %421, i64 0, i64 %423
  %425 = load i32, i32* %21, align 4
  %426 = sext i32 %425 to i64
  %427 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %424, i64 0, i64 %426
  %428 = load %struct.motionvector*, %struct.motionvector** %427, align 8
  %429 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %428, i32 0, i32 3
  %430 = load i32, i32* %429, align 4
  %431 = add nsw i32 %417, %430
  store i32 %431, i32* %18, align 4
  %432 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %9, align 8
  %433 = load i32, i32* %28, align 4
  %434 = sext i32 %433 to i64
  %435 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %432, i64 %434
  %436 = load i32, i32* %25, align 4
  %437 = sext i32 %436 to i64
  %438 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %435, i64 0, i64 %437
  %439 = load i32, i32* %22, align 4
  %440 = sext i32 %439 to i64
  %441 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %438, i64 0, i64 %440
  %442 = load %struct.motionvector*, %struct.motionvector** %441, align 8
  %443 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %442, i32 0, i32 1
  %444 = load i32, i32* %443, align 4
  %445 = mul nsw i32 2, %444
  %446 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %9, align 8
  %447 = load i32, i32* %28, align 4
  %448 = sext i32 %447 to i64
  %449 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %446, i64 %448
  %450 = load i32, i32* %25, align 4
  %451 = sext i32 %450 to i64
  %452 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %449, i64 0, i64 %451
  %453 = load i32, i32* %22, align 4
  %454 = sext i32 %453 to i64
  %455 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %452, i64 0, i64 %454
  %456 = load %struct.motionvector*, %struct.motionvector** %455, align 8
  %457 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %456, i32 0, i32 3
  %458 = load i32, i32* %457, align 4
  %459 = add nsw i32 %445, %458
  store i32 %459, i32* %19, align 4
  br label %503

460:                                              ; preds = %369
  %461 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %9, align 8
  %462 = load i32, i32* %26, align 4
  %463 = sext i32 %462 to i64
  %464 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %461, i64 %463
  %465 = load i32, i32* %23, align 4
  %466 = sext i32 %465 to i64
  %467 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %464, i64 0, i64 %466
  %468 = load i32, i32* %20, align 4
  %469 = sext i32 %468 to i64
  %470 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %467, i64 0, i64 %469
  %471 = load %struct.motionvector*, %struct.motionvector** %470, align 8
  %472 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %471, i32 0, i32 1
  %473 = load i32, i32* %472, align 4
  %474 = mul nsw i32 2, %473
  store i32 %474, i32* %17, align 4
  %475 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %9, align 8
  %476 = load i32, i32* %27, align 4
  %477 = sext i32 %476 to i64
  %478 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %475, i64 %477
  %479 = load i32, i32* %24, align 4
  %480 = sext i32 %479 to i64
  %481 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %478, i64 0, i64 %480
  %482 = load i32, i32* %21, align 4
  %483 = sext i32 %482 to i64
  %484 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %481, i64 0, i64 %483
  %485 = load %struct.motionvector*, %struct.motionvector** %484, align 8
  %486 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %485, i32 0, i32 1
  %487 = load i32, i32* %486, align 4
  %488 = mul nsw i32 2, %487
  store i32 %488, i32* %18, align 4
  %489 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %9, align 8
  %490 = load i32, i32* %28, align 4
  %491 = sext i32 %490 to i64
  %492 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %489, i64 %491
  %493 = load i32, i32* %25, align 4
  %494 = sext i32 %493 to i64
  %495 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %492, i64 0, i64 %494
  %496 = load i32, i32* %22, align 4
  %497 = sext i32 %496 to i64
  %498 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %495, i64 0, i64 %497
  %499 = load %struct.motionvector*, %struct.motionvector** %498, align 8
  %500 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %499, i32 0, i32 1
  %501 = load i32, i32* %500, align 4
  %502 = mul nsw i32 2, %501
  store i32 %502, i32* %19, align 4
  br label %503

503:                                              ; preds = %460, %375
  %504 = load i32, i32* %15, align 4
  %505 = icmp ne i32 %504, 0
  br i1 %505, label %506, label %516

506:                                              ; preds = %503
  %507 = load i32, i32* %14, align 4
  %508 = icmp eq i32 %507, 0
  br i1 %508, label %515, label %509

509:                                              ; preds = %506
  %510 = load i32, i32* %14, align 4
  %511 = icmp eq i32 %510, 1
  br i1 %511, label %515, label %512

512:                                              ; preds = %509
  %513 = load i32, i32* %14, align 4
  %514 = icmp eq i32 %513, 2
  br i1 %514, label %515, label %516

515:                                              ; preds = %512, %509, %506
  store i32 1998, i32* %18, align 4
  br label %516

516:                                              ; preds = %515, %512, %503
  %517 = load i32, i32* %18, align 4
  %518 = icmp eq i32 %517, 1998
  br i1 %518, label %519, label %521

519:                                              ; preds = %516
  %520 = load i32, i32* %17, align 4
  store i32 %520, i32* %19, align 4
  store i32 %520, i32* %18, align 4
  br label %521

521:                                              ; preds = %519, %516
  %522 = load i32, i32* %17, align 4
  %523 = load i32, i32* %18, align 4
  %524 = add nsw i32 %522, %523
  %525 = load i32, i32* %19, align 4
  %526 = add nsw i32 %524, %525
  %527 = load i32, i32* %17, align 4
  %528 = load i32, i32* %18, align 4
  %529 = load i32, i32* %19, align 4
  %530 = icmp sgt i32 %528, %529
  br i1 %530, label %531, label %533

531:                                              ; preds = %521
  %532 = load i32, i32* %18, align 4
  br label %535

533:                                              ; preds = %521
  %534 = load i32, i32* %19, align 4
  br label %535

535:                                              ; preds = %533, %531
  %536 = phi i32 [ %532, %531 ], [ %534, %533 ]
  %537 = icmp sgt i32 %527, %536
  br i1 %537, label %538, label %540

538:                                              ; preds = %535
  %539 = load i32, i32* %17, align 4
  br label %550

540:                                              ; preds = %535
  %541 = load i32, i32* %18, align 4
  %542 = load i32, i32* %19, align 4
  %543 = icmp sgt i32 %541, %542
  br i1 %543, label %544, label %546

544:                                              ; preds = %540
  %545 = load i32, i32* %18, align 4
  br label %548

546:                                              ; preds = %540
  %547 = load i32, i32* %19, align 4
  br label %548

548:                                              ; preds = %546, %544
  %549 = phi i32 [ %545, %544 ], [ %547, %546 ]
  br label %550

550:                                              ; preds = %548, %538
  %551 = phi i32 [ %539, %538 ], [ %549, %548 ]
  %552 = sub nsw i32 %526, %551
  %553 = load i32, i32* %17, align 4
  %554 = load i32, i32* %18, align 4
  %555 = load i32, i32* %19, align 4
  %556 = icmp slt i32 %554, %555
  br i1 %556, label %557, label %559

557:                                              ; preds = %550
  %558 = load i32, i32* %18, align 4
  br label %561

559:                                              ; preds = %550
  %560 = load i32, i32* %19, align 4
  br label %561

561:                                              ; preds = %559, %557
  %562 = phi i32 [ %558, %557 ], [ %560, %559 ]
  %563 = icmp slt i32 %553, %562
  br i1 %563, label %564, label %566

564:                                              ; preds = %561
  %565 = load i32, i32* %17, align 4
  br label %576

566:                                              ; preds = %561
  %567 = load i32, i32* %18, align 4
  %568 = load i32, i32* %19, align 4
  %569 = icmp slt i32 %567, %568
  br i1 %569, label %570, label %572

570:                                              ; preds = %566
  %571 = load i32, i32* %18, align 4
  br label %574

572:                                              ; preds = %566
  %573 = load i32, i32* %19, align 4
  br label %574

574:                                              ; preds = %572, %570
  %575 = phi i32 [ %571, %570 ], [ %573, %572 ]
  br label %576

576:                                              ; preds = %574, %564
  %577 = phi i32 [ %565, %564 ], [ %575, %574 ]
  %578 = sub nsw i32 %552, %577
  %579 = load i32*, i32** %13, align 8
  store i32 %578, i32* %579, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Count_sac_BitsVectors([73 x [90 x %struct.motionvector*]]* %0, %struct.bits_counted* %1, i32 %2, i32 %3, i32 %4, i32 %5, %struct.pict* %6) #0 {
  %8 = alloca [73 x [90 x %struct.motionvector*]]*, align 8
  %9 = alloca %struct.bits_counted*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %struct.pict*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  store [73 x [90 x %struct.motionvector*]]* %0, [73 x [90 x %struct.motionvector*]]** %8, align 8
  store %struct.bits_counted* %1, %struct.bits_counted** %9, align 8
  store i32 %2, i32* %10, align 4
  store i32 %3, i32* %11, align 4
  store i32 %4, i32* %12, align 4
  store i32 %5, i32* %13, align 4
  store %struct.pict* %6, %struct.pict** %14, align 8
  store i32 1, i32* @arith_used, align 4
  %22 = load i32, i32* %10, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %10, align 4
  %24 = load i32, i32* %11, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %11, align 4
  %26 = load i32, i32* %12, align 4
  %27 = icmp eq i32 %26, 2
  br i1 %27, label %28, label %29

28:                                               ; preds = %7
  store i32 1, i32* %19, align 4
  store i32 4, i32* %20, align 4
  br label %30

29:                                               ; preds = %7
  store i32 0, i32* %19, align 4
  store i32 0, i32* %20, align 4
  br label %30

30:                                               ; preds = %29, %28
  %31 = load i32, i32* %19, align 4
  store i32 %31, i32* %21, align 4
  br label %32

32:                                               ; preds = %285, %30
  %33 = load i32, i32* %21, align 4
  %34 = load i32, i32* %20, align 4
  %35 = icmp sle i32 %33, %34
  br i1 %35, label %36, label %288

36:                                               ; preds = %32
  %37 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %8, align 8
  %38 = load i32, i32* %10, align 4
  %39 = load i32, i32* %11, align 4
  %40 = load i32, i32* %21, align 4
  %41 = load i32, i32* %13, align 4
  call void @FindPMV([73 x [90 x %struct.motionvector*]]* %37, i32 %38, i32 %39, i32* %17, i32* %18, i32 %40, i32 %41, i32 1)
  %42 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %8, align 8
  %43 = load i32, i32* %21, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %42, i64 %44
  %46 = load i32, i32* %11, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %45, i64 0, i64 %47
  %49 = load i32, i32* %10, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %48, i64 0, i64 %50
  %52 = load %struct.motionvector*, %struct.motionvector** %51, align 8
  %53 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %52, i32 0, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = mul nsw i32 2, %54
  %56 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %8, align 8
  %57 = load i32, i32* %21, align 4
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %56, i64 %58
  %60 = load i32, i32* %11, align 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %59, i64 0, i64 %61
  %63 = load i32, i32* %10, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %62, i64 0, i64 %64
  %66 = load %struct.motionvector*, %struct.motionvector** %65, align 8
  %67 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %66, i32 0, i32 2
  %68 = load i32, i32* %67, align 4
  %69 = add nsw i32 %55, %68
  %70 = load i32, i32* %17, align 4
  %71 = sub nsw i32 %69, %70
  store i32 %71, i32* %16, align 4
  %72 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %8, align 8
  %73 = load i32, i32* %21, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %72, i64 %74
  %76 = load i32, i32* %11, align 4
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %75, i64 0, i64 %77
  %79 = load i32, i32* %10, align 4
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %78, i64 0, i64 %80
  %82 = load %struct.motionvector*, %struct.motionvector** %81, align 8
  %83 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %82, i32 0, i32 1
  %84 = load i32, i32* %83, align 4
  %85 = mul nsw i32 2, %84
  %86 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %8, align 8
  %87 = load i32, i32* %21, align 4
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %86, i64 %88
  %90 = load i32, i32* %11, align 4
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %89, i64 0, i64 %91
  %93 = load i32, i32* %10, align 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %92, i64 0, i64 %94
  %96 = load %struct.motionvector*, %struct.motionvector** %95, align 8
  %97 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %96, i32 0, i32 3
  %98 = load i32, i32* %97, align 4
  %99 = add nsw i32 %85, %98
  %100 = load i32, i32* %18, align 4
  %101 = sub nsw i32 %99, %100
  store i32 %101, i32* %15, align 4
  %102 = load i32, i32* @long_vectors, align 4
  %103 = icmp ne i32 %102, 0
  br i1 %103, label %131, label %104

104:                                              ; preds = %36
  %105 = load i32, i32* %16, align 4
  %106 = icmp slt i32 %105, -32
  br i1 %106, label %107, label %110

107:                                              ; preds = %104
  %108 = load i32, i32* %16, align 4
  %109 = add nsw i32 %108, 64
  store i32 %109, i32* %16, align 4
  br label %117

110:                                              ; preds = %104
  %111 = load i32, i32* %16, align 4
  %112 = icmp sgt i32 %111, 31
  br i1 %112, label %113, label %116

113:                                              ; preds = %110
  %114 = load i32, i32* %16, align 4
  %115 = sub nsw i32 %114, 64
  store i32 %115, i32* %16, align 4
  br label %116

116:                                              ; preds = %113, %110
  br label %117

117:                                              ; preds = %116, %107
  %118 = load i32, i32* %15, align 4
  %119 = icmp slt i32 %118, -32
  br i1 %119, label %120, label %123

120:                                              ; preds = %117
  %121 = load i32, i32* %15, align 4
  %122 = add nsw i32 %121, 64
  store i32 %122, i32* %15, align 4
  br label %130

123:                                              ; preds = %117
  %124 = load i32, i32* %15, align 4
  %125 = icmp sgt i32 %124, 31
  br i1 %125, label %126, label %129

126:                                              ; preds = %123
  %127 = load i32, i32* %15, align 4
  %128 = sub nsw i32 %127, 64
  store i32 %128, i32* %15, align 4
  br label %129

129:                                              ; preds = %126, %123
  br label %130

130:                                              ; preds = %129, %120
  br label %170

131:                                              ; preds = %36
  %132 = load i32, i32* %17, align 4
  %133 = icmp slt i32 %132, -31
  br i1 %133, label %134, label %140

134:                                              ; preds = %131
  %135 = load i32, i32* %16, align 4
  %136 = icmp slt i32 %135, -63
  br i1 %136, label %137, label %140

137:                                              ; preds = %134
  %138 = load i32, i32* %16, align 4
  %139 = add nsw i32 %138, 64
  store i32 %139, i32* %16, align 4
  br label %150

140:                                              ; preds = %134, %131
  %141 = load i32, i32* %17, align 4
  %142 = icmp sgt i32 %141, 32
  br i1 %142, label %143, label %149

143:                                              ; preds = %140
  %144 = load i32, i32* %16, align 4
  %145 = icmp sgt i32 %144, 63
  br i1 %145, label %146, label %149

146:                                              ; preds = %143
  %147 = load i32, i32* %16, align 4
  %148 = sub nsw i32 %147, 64
  store i32 %148, i32* %16, align 4
  br label %149

149:                                              ; preds = %146, %143, %140
  br label %150

150:                                              ; preds = %149, %137
  %151 = load i32, i32* %18, align 4
  %152 = icmp slt i32 %151, -31
  br i1 %152, label %153, label %159

153:                                              ; preds = %150
  %154 = load i32, i32* %15, align 4
  %155 = icmp slt i32 %154, -63
  br i1 %155, label %156, label %159

156:                                              ; preds = %153
  %157 = load i32, i32* %15, align 4
  %158 = add nsw i32 %157, 64
  store i32 %158, i32* %15, align 4
  br label %169

159:                                              ; preds = %153, %150
  %160 = load i32, i32* %18, align 4
  %161 = icmp sgt i32 %160, 32
  br i1 %161, label %162, label %168

162:                                              ; preds = %159
  %163 = load i32, i32* %15, align 4
  %164 = icmp sgt i32 %163, 63
  br i1 %164, label %165, label %168

165:                                              ; preds = %162
  %166 = load i32, i32* %15, align 4
  %167 = sub nsw i32 %166, 64
  store i32 %167, i32* %15, align 4
  br label %168

168:                                              ; preds = %165, %162, %159
  br label %169

169:                                              ; preds = %168, %156
  br label %170

170:                                              ; preds = %169, %130
  %171 = load i32, i32* %16, align 4
  %172 = icmp slt i32 %171, 0
  br i1 %172, label %173, label %176

173:                                              ; preds = %170
  %174 = load i32, i32* %16, align 4
  %175 = add nsw i32 %174, 64
  store i32 %175, i32* %16, align 4
  br label %176

176:                                              ; preds = %173, %170
  %177 = load i32, i32* %15, align 4
  %178 = icmp slt i32 %177, 0
  br i1 %178, label %179, label %182

179:                                              ; preds = %176
  %180 = load i32, i32* %15, align 4
  %181 = add nsw i32 %180, 64
  store i32 %181, i32* %15, align 4
  br label %182

182:                                              ; preds = %179, %176
  %183 = load i32, i32* @trace, align 4
  %184 = icmp ne i32 %183, 0
  br i1 %184, label %185, label %188

185:                                              ; preds = %182
  %186 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %187 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %186, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21, i64 0, i64 0))
  br label %188

188:                                              ; preds = %185, %182
  %189 = load i32, i32* %16, align 4
  %190 = call i32 @indexfn(i32 %189, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @mvdtab, i64 0, i64 0), i32 64)
  %191 = call i32 @AR_Encode(i32 %190, i32* getelementptr inbounds ([65 x i32], [65 x i32]* @cumf_MVD, i64 0, i64 0))
  %192 = load %struct.bits_counted*, %struct.bits_counted** %9, align 8
  %193 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %192, i32 0, i32 2
  %194 = load i32, i32* %193, align 4
  %195 = add nsw i32 %194, %191
  store i32 %195, i32* %193, align 4
  %196 = load i32, i32* %15, align 4
  %197 = call i32 @indexfn(i32 %196, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @mvdtab, i64 0, i64 0), i32 64)
  %198 = call i32 @AR_Encode(i32 %197, i32* getelementptr inbounds ([65 x i32], [65 x i32]* @cumf_MVD, i64 0, i64 0))
  %199 = load %struct.bits_counted*, %struct.bits_counted** %9, align 8
  %200 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %199, i32 0, i32 2
  %201 = load i32, i32* %200, align 4
  %202 = add nsw i32 %201, %198
  store i32 %202, i32* %200, align 4
  %203 = load i32, i32* @trace, align 4
  %204 = icmp ne i32 %203, 0
  br i1 %204, label %205, label %284

205:                                              ; preds = %188
  %206 = load i32, i32* %16, align 4
  %207 = icmp sgt i32 %206, 31
  br i1 %207, label %208, label %211

208:                                              ; preds = %205
  %209 = load i32, i32* %16, align 4
  %210 = sub nsw i32 %209, 64
  store i32 %210, i32* %16, align 4
  br label %211

211:                                              ; preds = %208, %205
  %212 = load i32, i32* %15, align 4
  %213 = icmp sgt i32 %212, 31
  br i1 %213, label %214, label %217

214:                                              ; preds = %211
  %215 = load i32, i32* %15, align 4
  %216 = sub nsw i32 %215, 64
  store i32 %216, i32* %15, align 4
  br label %217

217:                                              ; preds = %214, %211
  %218 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %219 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %8, align 8
  %220 = load i32, i32* %21, align 4
  %221 = sext i32 %220 to i64
  %222 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %219, i64 %221
  %223 = load i32, i32* %11, align 4
  %224 = sext i32 %223 to i64
  %225 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %222, i64 0, i64 %224
  %226 = load i32, i32* %10, align 4
  %227 = sext i32 %226 to i64
  %228 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %225, i64 0, i64 %227
  %229 = load %struct.motionvector*, %struct.motionvector** %228, align 8
  %230 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %229, i32 0, i32 0
  %231 = load i32, i32* %230, align 4
  %232 = mul nsw i32 2, %231
  %233 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %8, align 8
  %234 = load i32, i32* %21, align 4
  %235 = sext i32 %234 to i64
  %236 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %233, i64 %235
  %237 = load i32, i32* %11, align 4
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %236, i64 0, i64 %238
  %240 = load i32, i32* %10, align 4
  %241 = sext i32 %240 to i64
  %242 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %239, i64 0, i64 %241
  %243 = load %struct.motionvector*, %struct.motionvector** %242, align 8
  %244 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %243, i32 0, i32 2
  %245 = load i32, i32* %244, align 4
  %246 = add nsw i32 %232, %245
  %247 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %8, align 8
  %248 = load i32, i32* %21, align 4
  %249 = sext i32 %248 to i64
  %250 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %247, i64 %249
  %251 = load i32, i32* %11, align 4
  %252 = sext i32 %251 to i64
  %253 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %250, i64 0, i64 %252
  %254 = load i32, i32* %10, align 4
  %255 = sext i32 %254 to i64
  %256 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %253, i64 0, i64 %255
  %257 = load %struct.motionvector*, %struct.motionvector** %256, align 8
  %258 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %257, i32 0, i32 1
  %259 = load i32, i32* %258, align 4
  %260 = mul nsw i32 2, %259
  %261 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %8, align 8
  %262 = load i32, i32* %21, align 4
  %263 = sext i32 %262 to i64
  %264 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %261, i64 %263
  %265 = load i32, i32* %11, align 4
  %266 = sext i32 %265 to i64
  %267 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %264, i64 0, i64 %266
  %268 = load i32, i32* %10, align 4
  %269 = sext i32 %268 to i64
  %270 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %267, i64 0, i64 %269
  %271 = load %struct.motionvector*, %struct.motionvector** %270, align 8
  %272 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %271, i32 0, i32 3
  %273 = load i32, i32* %272, align 4
  %274 = add nsw i32 %260, %273
  %275 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %218, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.22, i64 0, i64 0), i32 %246, i32 %274)
  %276 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %277 = load i32, i32* %17, align 4
  %278 = load i32, i32* %18, align 4
  %279 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %276, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.23, i64 0, i64 0), i32 %277, i32 %278)
  %280 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %281 = load i32, i32* %16, align 4
  %282 = load i32, i32* %15, align 4
  %283 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %280, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.24, i64 0, i64 0), i32 %281, i32 %282)
  br label %284

284:                                              ; preds = %217, %188
  br label %285

285:                                              ; preds = %284
  %286 = load i32, i32* %21, align 4
  %287 = add nsw i32 %286, 1
  store i32 %287, i32* %21, align 4
  br label %32

288:                                              ; preds = %32
  %289 = load %struct.pict*, %struct.pict** %14, align 8
  %290 = getelementptr inbounds %struct.pict, %struct.pict* %289, i32 0, i32 10
  %291 = load i32, i32* %290, align 4
  %292 = icmp ne i32 %291, 0
  br i1 %292, label %293, label %405

293:                                              ; preds = %288
  %294 = load %struct.pict*, %struct.pict** %14, align 8
  %295 = getelementptr inbounds %struct.pict, %struct.pict* %294, i32 0, i32 16
  %296 = load i32, i32* %295, align 4
  %297 = icmp eq i32 %296, 1
  br i1 %297, label %303, label %298

298:                                              ; preds = %293
  %299 = load %struct.pict*, %struct.pict** %14, align 8
  %300 = getelementptr inbounds %struct.pict, %struct.pict* %299, i32 0, i32 16
  %301 = load i32, i32* %300, align 4
  %302 = icmp eq i32 %301, 2
  br i1 %302, label %303, label %404

303:                                              ; preds = %298, %293
  %304 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %8, align 8
  %305 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %304, i64 5
  %306 = load i32, i32* %11, align 4
  %307 = sext i32 %306 to i64
  %308 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %305, i64 0, i64 %307
  %309 = load i32, i32* %10, align 4
  %310 = sext i32 %309 to i64
  %311 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %308, i64 0, i64 %310
  %312 = load %struct.motionvector*, %struct.motionvector** %311, align 8
  %313 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %312, i32 0, i32 0
  %314 = load i32, i32* %313, align 4
  store i32 %314, i32* %16, align 4
  %315 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %8, align 8
  %316 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %315, i64 5
  %317 = load i32, i32* %11, align 4
  %318 = sext i32 %317 to i64
  %319 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %316, i64 0, i64 %318
  %320 = load i32, i32* %10, align 4
  %321 = sext i32 %320 to i64
  %322 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %319, i64 0, i64 %321
  %323 = load %struct.motionvector*, %struct.motionvector** %322, align 8
  %324 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %323, i32 0, i32 1
  %325 = load i32, i32* %324, align 4
  store i32 %325, i32* %15, align 4
  %326 = load i32, i32* %16, align 4
  %327 = icmp slt i32 %326, -32
  br i1 %327, label %328, label %331

328:                                              ; preds = %303
  %329 = load i32, i32* %16, align 4
  %330 = add nsw i32 %329, 64
  store i32 %330, i32* %16, align 4
  br label %338

331:                                              ; preds = %303
  %332 = load i32, i32* %16, align 4
  %333 = icmp sgt i32 %332, 31
  br i1 %333, label %334, label %337

334:                                              ; preds = %331
  %335 = load i32, i32* %16, align 4
  %336 = sub nsw i32 %335, 64
  store i32 %336, i32* %16, align 4
  br label %337

337:                                              ; preds = %334, %331
  br label %338

338:                                              ; preds = %337, %328
  %339 = load i32, i32* %15, align 4
  %340 = icmp slt i32 %339, -32
  br i1 %340, label %341, label %344

341:                                              ; preds = %338
  %342 = load i32, i32* %15, align 4
  %343 = add nsw i32 %342, 64
  store i32 %343, i32* %15, align 4
  br label %351

344:                                              ; preds = %338
  %345 = load i32, i32* %15, align 4
  %346 = icmp sgt i32 %345, 31
  br i1 %346, label %347, label %350

347:                                              ; preds = %344
  %348 = load i32, i32* %15, align 4
  %349 = sub nsw i32 %348, 64
  store i32 %349, i32* %15, align 4
  br label %350

350:                                              ; preds = %347, %344
  br label %351

351:                                              ; preds = %350, %341
  %352 = load i32, i32* %16, align 4
  %353 = icmp slt i32 %352, 0
  br i1 %353, label %354, label %357

354:                                              ; preds = %351
  %355 = load i32, i32* %16, align 4
  %356 = add nsw i32 %355, 64
  store i32 %356, i32* %16, align 4
  br label %357

357:                                              ; preds = %354, %351
  %358 = load i32, i32* %15, align 4
  %359 = icmp slt i32 %358, 0
  br i1 %359, label %360, label %363

360:                                              ; preds = %357
  %361 = load i32, i32* %15, align 4
  %362 = add nsw i32 %361, 64
  store i32 %362, i32* %15, align 4
  br label %363

363:                                              ; preds = %360, %357
  %364 = load i32, i32* @trace, align 4
  %365 = icmp ne i32 %364, 0
  br i1 %365, label %366, label %369

366:                                              ; preds = %363
  %367 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %368 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %367, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.25, i64 0, i64 0))
  br label %369

369:                                              ; preds = %366, %363
  %370 = load i32, i32* %16, align 4
  %371 = call i32 @indexfn(i32 %370, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @mvdtab, i64 0, i64 0), i32 64)
  %372 = call i32 @AR_Encode(i32 %371, i32* getelementptr inbounds ([65 x i32], [65 x i32]* @cumf_MVD, i64 0, i64 0))
  %373 = load %struct.bits_counted*, %struct.bits_counted** %9, align 8
  %374 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %373, i32 0, i32 2
  %375 = load i32, i32* %374, align 4
  %376 = add nsw i32 %375, %372
  store i32 %376, i32* %374, align 4
  %377 = load i32, i32* %15, align 4
  %378 = call i32 @indexfn(i32 %377, i32* getelementptr inbounds ([64 x i32], [64 x i32]* @mvdtab, i64 0, i64 0), i32 64)
  %379 = call i32 @AR_Encode(i32 %378, i32* getelementptr inbounds ([65 x i32], [65 x i32]* @cumf_MVD, i64 0, i64 0))
  %380 = load %struct.bits_counted*, %struct.bits_counted** %9, align 8
  %381 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %380, i32 0, i32 2
  %382 = load i32, i32* %381, align 4
  %383 = add nsw i32 %382, %379
  store i32 %383, i32* %381, align 4
  %384 = load i32, i32* @trace, align 4
  %385 = icmp ne i32 %384, 0
  br i1 %385, label %386, label %403

386:                                              ; preds = %369
  %387 = load i32, i32* %16, align 4
  %388 = icmp sgt i32 %387, 31
  br i1 %388, label %389, label %392

389:                                              ; preds = %386
  %390 = load i32, i32* %16, align 4
  %391 = sub nsw i32 %390, 64
  store i32 %391, i32* %16, align 4
  br label %392

392:                                              ; preds = %389, %386
  %393 = load i32, i32* %15, align 4
  %394 = icmp sgt i32 %393, 31
  br i1 %394, label %395, label %398

395:                                              ; preds = %392
  %396 = load i32, i32* %15, align 4
  %397 = sub nsw i32 %396, 64
  store i32 %397, i32* %15, align 4
  br label %398

398:                                              ; preds = %395, %392
  %399 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %400 = load i32, i32* %16, align 4
  %401 = load i32, i32* %15, align 4
  %402 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %399, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.26, i64 0, i64 0), i32 %400, i32 %401)
  br label %403

403:                                              ; preds = %398, %369
  br label %404

404:                                              ; preds = %403, %298
  br label %405

405:                                              ; preds = %404, %288
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ZeroBits(%struct.bits_counted* %0) #0 {
  %2 = alloca %struct.bits_counted*, align 8
  store %struct.bits_counted* %0, %struct.bits_counted** %2, align 8
  %3 = load %struct.bits_counted*, %struct.bits_counted** %2, align 8
  %4 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %3, i32 0, i32 0
  store i32 0, i32* %4, align 4
  %5 = load %struct.bits_counted*, %struct.bits_counted** %2, align 8
  %6 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %5, i32 0, i32 1
  store i32 0, i32* %6, align 4
  %7 = load %struct.bits_counted*, %struct.bits_counted** %2, align 8
  %8 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %7, i32 0, i32 2
  store i32 0, i32* %8, align 4
  %9 = load %struct.bits_counted*, %struct.bits_counted** %2, align 8
  %10 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %9, i32 0, i32 3
  store i32 0, i32* %10, align 4
  %11 = load %struct.bits_counted*, %struct.bits_counted** %2, align 8
  %12 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %11, i32 0, i32 4
  store i32 0, i32* %12, align 4
  %13 = load %struct.bits_counted*, %struct.bits_counted** %2, align 8
  %14 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %13, i32 0, i32 5
  store i32 0, i32* %14, align 4
  %15 = load %struct.bits_counted*, %struct.bits_counted** %2, align 8
  %16 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %15, i32 0, i32 6
  store i32 0, i32* %16, align 4
  %17 = load %struct.bits_counted*, %struct.bits_counted** %2, align 8
  %18 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %17, i32 0, i32 7
  store i32 0, i32* %18, align 4
  %19 = load %struct.bits_counted*, %struct.bits_counted** %2, align 8
  %20 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %19, i32 0, i32 9
  store i32 0, i32* %20, align 4
  %21 = load %struct.bits_counted*, %struct.bits_counted** %2, align 8
  %22 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %21, i32 0, i32 8
  store i32 0, i32* %22, align 4
  %23 = load %struct.bits_counted*, %struct.bits_counted** %2, align 8
  %24 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %23, i32 0, i32 10
  store i32 0, i32* %24, align 4
  %25 = load %struct.bits_counted*, %struct.bits_counted** %2, align 8
  %26 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %25, i32 0, i32 11
  store i32 0, i32* %26, align 4
  %27 = load %struct.bits_counted*, %struct.bits_counted** %2, align 8
  %28 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %27, i32 0, i32 12
  store i32 0, i32* %28, align 4
  %29 = load %struct.bits_counted*, %struct.bits_counted** %2, align 8
  %30 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %29, i32 0, i32 13
  store i32 0, i32* %30, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ZeroRes(%struct.results* %0) #0 {
  %2 = alloca %struct.results*, align 8
  store %struct.results* %0, %struct.results** %2, align 8
  %3 = load %struct.results*, %struct.results** %2, align 8
  %4 = getelementptr inbounds %struct.results, %struct.results* %3, i32 0, i32 0
  store float 0.000000e+00, float* %4, align 4
  %5 = load %struct.results*, %struct.results** %2, align 8
  %6 = getelementptr inbounds %struct.results, %struct.results* %5, i32 0, i32 1
  store float 0.000000e+00, float* %6, align 4
  %7 = load %struct.results*, %struct.results** %2, align 8
  %8 = getelementptr inbounds %struct.results, %struct.results* %7, i32 0, i32 2
  store float 0.000000e+00, float* %8, align 4
  %9 = load %struct.results*, %struct.results** %2, align 8
  %10 = getelementptr inbounds %struct.results, %struct.results* %9, i32 0, i32 3
  store float 0.000000e+00, float* %10, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @AddBits(%struct.bits_counted* %0, %struct.bits_counted* %1) #0 {
  %3 = alloca %struct.bits_counted*, align 8
  %4 = alloca %struct.bits_counted*, align 8
  store %struct.bits_counted* %0, %struct.bits_counted** %3, align 8
  store %struct.bits_counted* %1, %struct.bits_counted** %4, align 8
  %5 = load %struct.bits_counted*, %struct.bits_counted** %4, align 8
  %6 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %5, i32 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = load %struct.bits_counted*, %struct.bits_counted** %3, align 8
  %9 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %8, i32 0, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = add nsw i32 %10, %7
  store i32 %11, i32* %9, align 4
  %12 = load %struct.bits_counted*, %struct.bits_counted** %4, align 8
  %13 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %12, i32 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = load %struct.bits_counted*, %struct.bits_counted** %3, align 8
  %16 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %15, i32 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = add nsw i32 %17, %14
  store i32 %18, i32* %16, align 4
  %19 = load %struct.bits_counted*, %struct.bits_counted** %4, align 8
  %20 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %19, i32 0, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = load %struct.bits_counted*, %struct.bits_counted** %3, align 8
  %23 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %22, i32 0, i32 2
  %24 = load i32, i32* %23, align 4
  %25 = add nsw i32 %24, %21
  store i32 %25, i32* %23, align 4
  %26 = load %struct.bits_counted*, %struct.bits_counted** %4, align 8
  %27 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %26, i32 0, i32 3
  %28 = load i32, i32* %27, align 4
  %29 = load %struct.bits_counted*, %struct.bits_counted** %3, align 8
  %30 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %29, i32 0, i32 3
  %31 = load i32, i32* %30, align 4
  %32 = add nsw i32 %31, %28
  store i32 %32, i32* %30, align 4
  %33 = load %struct.bits_counted*, %struct.bits_counted** %4, align 8
  %34 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %33, i32 0, i32 4
  %35 = load i32, i32* %34, align 4
  %36 = load %struct.bits_counted*, %struct.bits_counted** %3, align 8
  %37 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %36, i32 0, i32 4
  %38 = load i32, i32* %37, align 4
  %39 = add nsw i32 %38, %35
  store i32 %39, i32* %37, align 4
  %40 = load %struct.bits_counted*, %struct.bits_counted** %4, align 8
  %41 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %40, i32 0, i32 5
  %42 = load i32, i32* %41, align 4
  %43 = load %struct.bits_counted*, %struct.bits_counted** %3, align 8
  %44 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %43, i32 0, i32 5
  %45 = load i32, i32* %44, align 4
  %46 = add nsw i32 %45, %42
  store i32 %46, i32* %44, align 4
  %47 = load %struct.bits_counted*, %struct.bits_counted** %4, align 8
  %48 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %47, i32 0, i32 6
  %49 = load i32, i32* %48, align 4
  %50 = load %struct.bits_counted*, %struct.bits_counted** %3, align 8
  %51 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %50, i32 0, i32 6
  %52 = load i32, i32* %51, align 4
  %53 = add nsw i32 %52, %49
  store i32 %53, i32* %51, align 4
  %54 = load %struct.bits_counted*, %struct.bits_counted** %4, align 8
  %55 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %54, i32 0, i32 7
  %56 = load i32, i32* %55, align 4
  %57 = load %struct.bits_counted*, %struct.bits_counted** %3, align 8
  %58 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %57, i32 0, i32 7
  %59 = load i32, i32* %58, align 4
  %60 = add nsw i32 %59, %56
  store i32 %60, i32* %58, align 4
  %61 = load %struct.bits_counted*, %struct.bits_counted** %4, align 8
  %62 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %61, i32 0, i32 9
  %63 = load i32, i32* %62, align 4
  %64 = load %struct.bits_counted*, %struct.bits_counted** %3, align 8
  %65 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %64, i32 0, i32 9
  %66 = load i32, i32* %65, align 4
  %67 = add nsw i32 %66, %63
  store i32 %67, i32* %65, align 4
  %68 = load %struct.bits_counted*, %struct.bits_counted** %4, align 8
  %69 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %68, i32 0, i32 8
  %70 = load i32, i32* %69, align 4
  %71 = load %struct.bits_counted*, %struct.bits_counted** %3, align 8
  %72 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %71, i32 0, i32 8
  %73 = load i32, i32* %72, align 4
  %74 = add nsw i32 %73, %70
  store i32 %74, i32* %72, align 4
  %75 = load %struct.bits_counted*, %struct.bits_counted** %4, align 8
  %76 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %75, i32 0, i32 10
  %77 = load i32, i32* %76, align 4
  %78 = load %struct.bits_counted*, %struct.bits_counted** %3, align 8
  %79 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %78, i32 0, i32 10
  %80 = load i32, i32* %79, align 4
  %81 = add nsw i32 %80, %77
  store i32 %81, i32* %79, align 4
  %82 = load %struct.bits_counted*, %struct.bits_counted** %4, align 8
  %83 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %82, i32 0, i32 11
  %84 = load i32, i32* %83, align 4
  %85 = load %struct.bits_counted*, %struct.bits_counted** %3, align 8
  %86 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %85, i32 0, i32 11
  %87 = load i32, i32* %86, align 4
  %88 = add nsw i32 %87, %84
  store i32 %88, i32* %86, align 4
  %89 = load %struct.bits_counted*, %struct.bits_counted** %4, align 8
  %90 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %89, i32 0, i32 12
  %91 = load i32, i32* %90, align 4
  %92 = load %struct.bits_counted*, %struct.bits_counted** %3, align 8
  %93 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %92, i32 0, i32 12
  %94 = load i32, i32* %93, align 4
  %95 = add nsw i32 %94, %91
  store i32 %95, i32* %93, align 4
  %96 = load %struct.bits_counted*, %struct.bits_counted** %4, align 8
  %97 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %96, i32 0, i32 13
  %98 = load i32, i32* %97, align 4
  %99 = load %struct.bits_counted*, %struct.bits_counted** %3, align 8
  %100 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %99, i32 0, i32 13
  %101 = load i32, i32* %100, align 4
  %102 = add nsw i32 %101, %98
  store i32 %102, i32* %100, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @AddRes(%struct.results* %0, %struct.results* %1, %struct.pict* %2) #0 {
  %4 = alloca %struct.results*, align 8
  %5 = alloca %struct.results*, align 8
  %6 = alloca %struct.pict*, align 8
  store %struct.results* %0, %struct.results** %4, align 8
  store %struct.results* %1, %struct.results** %5, align 8
  store %struct.pict* %2, %struct.pict** %6, align 8
  %7 = load %struct.results*, %struct.results** %5, align 8
  %8 = getelementptr inbounds %struct.results, %struct.results* %7, i32 0, i32 0
  %9 = load float, float* %8, align 4
  %10 = load %struct.results*, %struct.results** %4, align 8
  %11 = getelementptr inbounds %struct.results, %struct.results* %10, i32 0, i32 0
  %12 = load float, float* %11, align 4
  %13 = fadd float %12, %9
  store float %13, float* %11, align 4
  %14 = load %struct.results*, %struct.results** %5, align 8
  %15 = getelementptr inbounds %struct.results, %struct.results* %14, i32 0, i32 1
  %16 = load float, float* %15, align 4
  %17 = load %struct.results*, %struct.results** %4, align 8
  %18 = getelementptr inbounds %struct.results, %struct.results* %17, i32 0, i32 1
  %19 = load float, float* %18, align 4
  %20 = fadd float %19, %16
  store float %20, float* %18, align 4
  %21 = load %struct.results*, %struct.results** %5, align 8
  %22 = getelementptr inbounds %struct.results, %struct.results* %21, i32 0, i32 2
  %23 = load float, float* %22, align 4
  %24 = load %struct.results*, %struct.results** %4, align 8
  %25 = getelementptr inbounds %struct.results, %struct.results* %24, i32 0, i32 2
  %26 = load float, float* %25, align 4
  %27 = fadd float %26, %23
  store float %27, float* %25, align 4
  %28 = load %struct.pict*, %struct.pict** %6, align 8
  %29 = getelementptr inbounds %struct.pict, %struct.pict* %28, i32 0, i32 19
  %30 = load float, float* %29, align 4
  %31 = load %struct.results*, %struct.results** %4, align 8
  %32 = getelementptr inbounds %struct.results, %struct.results* %31, i32 0, i32 3
  %33 = load float, float* %32, align 4
  %34 = fadd float %33, %30
  store float %34, float* %32, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @AddBitsPicture(%struct.bits_counted* %0) #0 {
  %2 = alloca %struct.bits_counted*, align 8
  store %struct.bits_counted* %0, %struct.bits_counted** %2, align 8
  %3 = load %struct.bits_counted*, %struct.bits_counted** %2, align 8
  %4 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %3, i32 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = load %struct.bits_counted*, %struct.bits_counted** %2, align 8
  %7 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %6, i32 0, i32 1
  %8 = load i32, i32* %7, align 4
  %9 = add nsw i32 %5, %8
  %10 = load %struct.bits_counted*, %struct.bits_counted** %2, align 8
  %11 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %10, i32 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = add nsw i32 %9, %12
  %14 = load %struct.bits_counted*, %struct.bits_counted** %2, align 8
  %15 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %14, i32 0, i32 3
  %16 = load i32, i32* %15, align 4
  %17 = add nsw i32 %13, %16
  %18 = load %struct.bits_counted*, %struct.bits_counted** %2, align 8
  %19 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %18, i32 0, i32 4
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %17, %20
  %22 = load %struct.bits_counted*, %struct.bits_counted** %2, align 8
  %23 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %22, i32 0, i32 5
  %24 = load i32, i32* %23, align 4
  %25 = add nsw i32 %21, %24
  %26 = load %struct.bits_counted*, %struct.bits_counted** %2, align 8
  %27 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %26, i32 0, i32 6
  %28 = load i32, i32* %27, align 4
  %29 = add nsw i32 %25, %28
  %30 = load %struct.bits_counted*, %struct.bits_counted** %2, align 8
  %31 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %30, i32 0, i32 7
  %32 = load i32, i32* %31, align 4
  %33 = add nsw i32 %29, %32
  %34 = load %struct.bits_counted*, %struct.bits_counted** %2, align 8
  %35 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %34, i32 0, i32 9
  %36 = load i32, i32* %35, align 4
  %37 = add nsw i32 %33, %36
  %38 = load %struct.bits_counted*, %struct.bits_counted** %2, align 8
  %39 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %38, i32 0, i32 8
  %40 = load i32, i32* %39, align 4
  %41 = add nsw i32 %37, %40
  %42 = load %struct.bits_counted*, %struct.bits_counted** %2, align 8
  %43 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %42, i32 0, i32 10
  store i32 %41, i32* %43, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ZeroVec(%struct.motionvector* %0) #0 {
  %2 = alloca %struct.motionvector*, align 8
  store %struct.motionvector* %0, %struct.motionvector** %2, align 8
  %3 = load %struct.motionvector*, %struct.motionvector** %2, align 8
  %4 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %3, i32 0, i32 0
  store i32 0, i32* %4, align 4
  %5 = load %struct.motionvector*, %struct.motionvector** %2, align 8
  %6 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %5, i32 0, i32 1
  store i32 0, i32* %6, align 4
  %7 = load %struct.motionvector*, %struct.motionvector** %2, align 8
  %8 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %7, i32 0, i32 2
  store i32 0, i32* %8, align 4
  %9 = load %struct.motionvector*, %struct.motionvector** %2, align 8
  %10 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %9, i32 0, i32 3
  store i32 0, i32* %10, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @MarkVec(%struct.motionvector* %0) #0 {
  %2 = alloca %struct.motionvector*, align 8
  store %struct.motionvector* %0, %struct.motionvector** %2, align 8
  %3 = load %struct.motionvector*, %struct.motionvector** %2, align 8
  %4 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %3, i32 0, i32 0
  store i32 999, i32* %4, align 4
  %5 = load %struct.motionvector*, %struct.motionvector** %2, align 8
  %6 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %5, i32 0, i32 1
  store i32 999, i32* %6, align 4
  %7 = load %struct.motionvector*, %struct.motionvector** %2, align 8
  %8 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %7, i32 0, i32 2
  store i32 0, i32* %8, align 4
  %9 = load %struct.motionvector*, %struct.motionvector** %2, align 8
  %10 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %9, i32 0, i32 3
  store i32 0, i32* %10, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @CopyVec(%struct.motionvector* %0, %struct.motionvector* %1) #0 {
  %3 = alloca %struct.motionvector*, align 8
  %4 = alloca %struct.motionvector*, align 8
  store %struct.motionvector* %0, %struct.motionvector** %3, align 8
  store %struct.motionvector* %1, %struct.motionvector** %4, align 8
  %5 = load %struct.motionvector*, %struct.motionvector** %4, align 8
  %6 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %5, i32 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = load %struct.motionvector*, %struct.motionvector** %3, align 8
  %9 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %8, i32 0, i32 0
  store i32 %7, i32* %9, align 4
  %10 = load %struct.motionvector*, %struct.motionvector** %4, align 8
  %11 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %10, i32 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = load %struct.motionvector*, %struct.motionvector** %3, align 8
  %14 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %13, i32 0, i32 2
  store i32 %12, i32* %14, align 4
  %15 = load %struct.motionvector*, %struct.motionvector** %4, align 8
  %16 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %15, i32 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = load %struct.motionvector*, %struct.motionvector** %3, align 8
  %19 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %18, i32 0, i32 1
  store i32 %17, i32* %19, align 4
  %20 = load %struct.motionvector*, %struct.motionvector** %4, align 8
  %21 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %20, i32 0, i32 3
  %22 = load i32, i32* %21, align 4
  %23 = load %struct.motionvector*, %struct.motionvector** %3, align 8
  %24 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %23, i32 0, i32 3
  store i32 %22, i32* %24, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @EqualVec(%struct.motionvector* %0, %struct.motionvector* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.motionvector*, align 8
  %5 = alloca %struct.motionvector*, align 8
  store %struct.motionvector* %0, %struct.motionvector** %4, align 8
  store %struct.motionvector* %1, %struct.motionvector** %5, align 8
  %6 = load %struct.motionvector*, %struct.motionvector** %5, align 8
  %7 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %6, i32 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = load %struct.motionvector*, %struct.motionvector** %4, align 8
  %10 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %9, i32 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = icmp ne i32 %8, %11
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  store i32 0, i32* %3, align 4
  br label %42

14:                                               ; preds = %2
  %15 = load %struct.motionvector*, %struct.motionvector** %5, align 8
  %16 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %15, i32 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = load %struct.motionvector*, %struct.motionvector** %4, align 8
  %19 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %18, i32 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = icmp ne i32 %17, %20
  br i1 %21, label %22, label %23

22:                                               ; preds = %14
  store i32 0, i32* %3, align 4
  br label %42

23:                                               ; preds = %14
  %24 = load %struct.motionvector*, %struct.motionvector** %5, align 8
  %25 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %24, i32 0, i32 2
  %26 = load i32, i32* %25, align 4
  %27 = load %struct.motionvector*, %struct.motionvector** %4, align 8
  %28 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %27, i32 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = icmp ne i32 %26, %29
  br i1 %30, label %31, label %32

31:                                               ; preds = %23
  store i32 0, i32* %3, align 4
  br label %42

32:                                               ; preds = %23
  %33 = load %struct.motionvector*, %struct.motionvector** %5, align 8
  %34 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %33, i32 0, i32 3
  %35 = load i32, i32* %34, align 4
  %36 = load %struct.motionvector*, %struct.motionvector** %4, align 8
  %37 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %36, i32 0, i32 3
  %38 = load i32, i32* %37, align 4
  %39 = icmp ne i32 %35, %38
  br i1 %39, label %40, label %41

40:                                               ; preds = %32
  store i32 0, i32* %3, align 4
  br label %42

41:                                               ; preds = %32
  store i32 1, i32* %3, align 4
  br label %42

42:                                               ; preds = %41, %40, %31, %22, %13
  %43 = load i32, i32* %3, align 4
  ret i32 %43
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @CountBitsPicture(%struct.pict* %0) #0 {
  %2 = alloca %struct.pict*, align 8
  %3 = alloca i32, align 4
  store %struct.pict* %0, %struct.pict** %2, align 8
  store i32 0, i32* %3, align 4
  %4 = load i32, i32* @trace, align 4
  %5 = icmp ne i32 %4, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %1
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.28, i64 0, i64 0))
  br label %9

9:                                                ; preds = %6, %1
  call void @putbits(i32 17, i32 1)
  %10 = load i32, i32* %3, align 4
  %11 = add nsw i32 %10, 17
  store i32 %11, i32* %3, align 4
  %12 = load i32, i32* @trace, align 4
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %17

14:                                               ; preds = %9
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.29, i64 0, i64 0))
  br label %17

17:                                               ; preds = %14, %9
  call void @putbits(i32 5, i32 0)
  %18 = load i32, i32* %3, align 4
  %19 = add nsw i32 %18, 5
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* @trace, align 4
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %17
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %24 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.30, i64 0, i64 0))
  br label %25

25:                                               ; preds = %22, %17
  %26 = load %struct.pict*, %struct.pict** %2, align 8
  %27 = getelementptr inbounds %struct.pict, %struct.pict* %26, i32 0, i32 2
  %28 = load i32, i32* %27, align 4
  call void @putbits(i32 8, i32 %28)
  %29 = load i32, i32* %3, align 4
  %30 = add nsw i32 %29, 8
  store i32 %30, i32* %3, align 4
  %31 = load i32, i32* @trace, align 4
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %36

33:                                               ; preds = %25
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %35 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.31, i64 0, i64 0))
  br label %36

36:                                               ; preds = %33, %25
  %37 = load %struct.pict*, %struct.pict** %2, align 8
  %38 = getelementptr inbounds %struct.pict, %struct.pict* %37, i32 0, i32 8
  store i32 1, i32* %38, align 4
  %39 = load %struct.pict*, %struct.pict** %2, align 8
  %40 = getelementptr inbounds %struct.pict, %struct.pict* %39, i32 0, i32 8
  %41 = load i32, i32* %40, align 4
  call void @putbits(i32 1, i32 %41)
  %42 = load i32, i32* %3, align 4
  %43 = add nsw i32 %42, 1
  store i32 %43, i32* %3, align 4
  %44 = load i32, i32* @trace, align 4
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %46, label %49

46:                                               ; preds = %36
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %48 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %47, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.32, i64 0, i64 0))
  br label %49

49:                                               ; preds = %46, %36
  call void @putbits(i32 1, i32 0)
  %50 = load i32, i32* %3, align 4
  %51 = add nsw i32 %50, 1
  store i32 %51, i32* %3, align 4
  %52 = load i32, i32* @trace, align 4
  %53 = icmp ne i32 %52, 0
  br i1 %53, label %54, label %57

54:                                               ; preds = %49
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %56 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %55, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.33, i64 0, i64 0))
  br label %57

57:                                               ; preds = %54, %49
  call void @putbits(i32 1, i32 0)
  %58 = load i32, i32* %3, align 4
  %59 = add nsw i32 %58, 1
  store i32 %59, i32* %3, align 4
  %60 = load i32, i32* @trace, align 4
  %61 = icmp ne i32 %60, 0
  br i1 %61, label %62, label %65

62:                                               ; preds = %57
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %64 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %63, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.34, i64 0, i64 0))
  br label %65

65:                                               ; preds = %62, %57
  call void @putbits(i32 1, i32 0)
  %66 = load i32, i32* %3, align 4
  %67 = add nsw i32 %66, 1
  store i32 %67, i32* %3, align 4
  %68 = load i32, i32* @trace, align 4
  %69 = icmp ne i32 %68, 0
  br i1 %69, label %70, label %73

70:                                               ; preds = %65
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %72 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %71, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.35, i64 0, i64 0))
  br label %73

73:                                               ; preds = %70, %65
  call void @putbits(i32 1, i32 0)
  %74 = load i32, i32* %3, align 4
  %75 = add nsw i32 %74, 1
  store i32 %75, i32* %3, align 4
  %76 = load i32, i32* @trace, align 4
  %77 = icmp ne i32 %76, 0
  br i1 %77, label %78, label %81

78:                                               ; preds = %73
  %79 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %80 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %79, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.36, i64 0, i64 0))
  br label %81

81:                                               ; preds = %78, %73
  %82 = load %struct.pict*, %struct.pict** %2, align 8
  %83 = getelementptr inbounds %struct.pict, %struct.pict* %82, i32 0, i32 6
  %84 = load i32, i32* %83, align 4
  call void @putbits(i32 3, i32 %84)
  %85 = load i32, i32* %3, align 4
  %86 = add nsw i32 %85, 3
  store i32 %86, i32* %3, align 4
  %87 = load i32, i32* @trace, align 4
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %89, label %92

89:                                               ; preds = %81
  %90 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %91 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %90, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.37, i64 0, i64 0))
  br label %92

92:                                               ; preds = %89, %81
  %93 = load %struct.pict*, %struct.pict** %2, align 8
  %94 = getelementptr inbounds %struct.pict, %struct.pict* %93, i32 0, i32 7
  %95 = load i32, i32* %94, align 4
  call void @putbits(i32 1, i32 %95)
  %96 = load i32, i32* %3, align 4
  %97 = add nsw i32 %96, 1
  store i32 %97, i32* %3, align 4
  %98 = load i32, i32* @trace, align 4
  %99 = icmp ne i32 %98, 0
  br i1 %99, label %100, label %103

100:                                              ; preds = %92
  %101 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %102 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %101, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.38, i64 0, i64 0))
  br label %103

103:                                              ; preds = %100, %92
  %104 = load %struct.pict*, %struct.pict** %2, align 8
  %105 = getelementptr inbounds %struct.pict, %struct.pict* %104, i32 0, i32 9
  %106 = load i32, i32* %105, align 4
  call void @putbits(i32 1, i32 %106)
  %107 = load i32, i32* %3, align 4
  %108 = add nsw i32 %107, 1
  store i32 %108, i32* %3, align 4
  %109 = load i32, i32* @trace, align 4
  %110 = icmp ne i32 %109, 0
  br i1 %110, label %111, label %114

111:                                              ; preds = %103
  %112 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %113 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %112, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.39, i64 0, i64 0))
  br label %114

114:                                              ; preds = %111, %103
  %115 = load i32, i32* @syntax_arith_coding, align 4
  call void @putbits(i32 1, i32 %115)
  %116 = load i32, i32* %3, align 4
  %117 = add nsw i32 %116, 1
  store i32 %117, i32* %3, align 4
  %118 = load i32, i32* @trace, align 4
  %119 = icmp ne i32 %118, 0
  br i1 %119, label %120, label %123

120:                                              ; preds = %114
  %121 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %122 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %121, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.40, i64 0, i64 0))
  br label %123

123:                                              ; preds = %120, %114
  %124 = load i32, i32* @advanced, align 4
  call void @putbits(i32 1, i32 %124)
  %125 = load i32, i32* %3, align 4
  %126 = add nsw i32 %125, 1
  store i32 %126, i32* %3, align 4
  %127 = load i32, i32* @trace, align 4
  %128 = icmp ne i32 %127, 0
  br i1 %128, label %129, label %132

129:                                              ; preds = %123
  %130 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %131 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %130, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.41, i64 0, i64 0))
  br label %132

132:                                              ; preds = %129, %123
  %133 = load %struct.pict*, %struct.pict** %2, align 8
  %134 = getelementptr inbounds %struct.pict, %struct.pict* %133, i32 0, i32 10
  %135 = load i32, i32* %134, align 4
  call void @putbits(i32 1, i32 %135)
  %136 = load i32, i32* %3, align 4
  %137 = add nsw i32 %136, 1
  store i32 %137, i32* %3, align 4
  %138 = load i32, i32* @trace, align 4
  %139 = icmp ne i32 %138, 0
  br i1 %139, label %140, label %143

140:                                              ; preds = %132
  %141 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %142 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %141, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.42, i64 0, i64 0))
  br label %143

143:                                              ; preds = %140, %132
  %144 = load %struct.pict*, %struct.pict** %2, align 8
  %145 = getelementptr inbounds %struct.pict, %struct.pict* %144, i32 0, i32 11
  %146 = load i32, i32* %145, align 4
  call void @putbits(i32 5, i32 %146)
  %147 = load i32, i32* %3, align 4
  %148 = add nsw i32 %147, 5
  store i32 %148, i32* %3, align 4
  call void @putbits(i32 1, i32 0)
  %149 = load i32, i32* %3, align 4
  %150 = add nsw i32 %149, 1
  store i32 %150, i32* %3, align 4
  %151 = load %struct.pict*, %struct.pict** %2, align 8
  %152 = getelementptr inbounds %struct.pict, %struct.pict* %151, i32 0, i32 10
  %153 = load i32, i32* %152, align 4
  %154 = icmp ne i32 %153, 0
  br i1 %154, label %155, label %178

155:                                              ; preds = %143
  %156 = load i32, i32* @trace, align 4
  %157 = icmp ne i32 %156, 0
  br i1 %157, label %158, label %161

158:                                              ; preds = %155
  %159 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %160 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %159, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.43, i64 0, i64 0))
  br label %161

161:                                              ; preds = %158, %155
  %162 = load %struct.pict*, %struct.pict** %2, align 8
  %163 = getelementptr inbounds %struct.pict, %struct.pict* %162, i32 0, i32 18
  %164 = load i32, i32* %163, align 4
  call void @putbits(i32 3, i32 %164)
  %165 = load i32, i32* %3, align 4
  %166 = add nsw i32 %165, 3
  store i32 %166, i32* %3, align 4
  %167 = load i32, i32* @trace, align 4
  %168 = icmp ne i32 %167, 0
  br i1 %168, label %169, label %172

169:                                              ; preds = %161
  %170 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %171 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %170, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.44, i64 0, i64 0))
  br label %172

172:                                              ; preds = %169, %161
  %173 = load %struct.pict*, %struct.pict** %2, align 8
  %174 = getelementptr inbounds %struct.pict, %struct.pict* %173, i32 0, i32 17
  %175 = load i32, i32* %174, align 4
  call void @putbits(i32 2, i32 %175)
  %176 = load i32, i32* %3, align 4
  %177 = add nsw i32 %176, 2
  store i32 %177, i32* %3, align 4
  br label %178

178:                                              ; preds = %172, %143
  %179 = load i32, i32* @trace, align 4
  %180 = icmp ne i32 %179, 0
  br i1 %180, label %181, label %184

181:                                              ; preds = %178
  %182 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %183 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %182, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.45, i64 0, i64 0))
  br label %184

184:                                              ; preds = %181, %178
  call void @putbits(i32 1, i32 0)
  %185 = load i32, i32* %3, align 4
  %186 = add nsw i32 %185, 1
  store i32 %186, i32* %3, align 4
  %187 = load i32, i32* %3, align 4
  ret i32 %187
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @Dct(i32* %0, i32* %1) #0 {
  %3 = alloca i32*, align 8
  %4 = alloca i32*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca [8 x float], align 16
  %10 = alloca [8 x float], align 16
  %11 = alloca [8 x [8 x float]], align 16
  %12 = alloca float, align 4
  %13 = alloca float, align 4
  %14 = alloca float, align 4
  %15 = alloca float, align 4
  %16 = alloca float, align 4
  %17 = alloca float, align 4
  %18 = alloca float, align 4
  %19 = alloca float, align 4
  store i32* %0, i32** %3, align 8
  store i32* %1, i32** %4, align 8
  store float 0x3FE6A09E80000000, float* %12, align 4
  store float 0x3FDF6297A0000000, float* %13, align 4
  store float 0x3FDD906C00000000, float* %14, align 4
  store float 0x3FDA9B6620000000, float* %15, align 4
  store float 0x3FD6A09E80000000, float* %16, align 4
  store float 0x3FD1C73B20000000, float* %17, align 4
  store float 0x3FC87DE280000000, float* %18, align 4
  store float 0x3FB8F8B8E0000000, float* %19, align 4
  store i32 0, i32* %6, align 4
  store i32 0, i32* %8, align 4
  br label %20

20:                                               ; preds = %247, %2
  %21 = load i32, i32* %6, align 4
  %22 = icmp slt i32 %21, 8
  br i1 %22, label %23, label %252

23:                                               ; preds = %20
  store i32 0, i32* %7, align 4
  br label %24

24:                                               ; preds = %39, %23
  %25 = load i32, i32* %7, align 4
  %26 = icmp slt i32 %25, 8
  br i1 %26, label %27, label %42

27:                                               ; preds = %24
  %28 = load i32*, i32** %3, align 8
  %29 = load i32, i32* %8, align 4
  %30 = load i32, i32* %7, align 4
  %31 = add nsw i32 %29, %30
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds i32, i32* %28, i64 %32
  %34 = load i32, i32* %33, align 4
  %35 = sitofp i32 %34 to float
  %36 = load i32, i32* %7, align 4
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 %37
  store float %35, float* %38, align 4
  br label %39

39:                                               ; preds = %27
  %40 = load i32, i32* %7, align 4
  %41 = add nsw i32 %40, 1
  store i32 %41, i32* %7, align 4
  br label %24

42:                                               ; preds = %24
  store i32 0, i32* %7, align 4
  br label %43

43:                                               ; preds = %73, %42
  %44 = load i32, i32* %7, align 4
  %45 = icmp slt i32 %44, 4
  br i1 %45, label %46, label %76

46:                                               ; preds = %43
  %47 = load i32, i32* %7, align 4
  %48 = sub nsw i32 7, %47
  store i32 %48, i32* %5, align 4
  %49 = load i32, i32* %7, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 %50
  %52 = load float, float* %51, align 4
  %53 = load i32, i32* %5, align 4
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 %54
  %56 = load float, float* %55, align 4
  %57 = fadd float %52, %56
  %58 = load i32, i32* %7, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 %59
  store float %57, float* %60, align 4
  %61 = load i32, i32* %7, align 4
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 %62
  %64 = load float, float* %63, align 4
  %65 = load i32, i32* %5, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 %66
  %68 = load float, float* %67, align 4
  %69 = fsub float %64, %68
  %70 = load i32, i32* %5, align 4
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 %71
  store float %69, float* %72, align 4
  br label %73

73:                                               ; preds = %46
  %74 = load i32, i32* %7, align 4
  %75 = add nsw i32 %74, 1
  store i32 %75, i32* %7, align 4
  br label %43

76:                                               ; preds = %43
  %77 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 0
  %78 = load float, float* %77, align 16
  %79 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 3
  %80 = load float, float* %79, align 4
  %81 = fadd float %78, %80
  %82 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 0
  store float %81, float* %82, align 16
  %83 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 1
  %84 = load float, float* %83, align 4
  %85 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 2
  %86 = load float, float* %85, align 8
  %87 = fadd float %84, %86
  %88 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 1
  store float %87, float* %88, align 4
  %89 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 1
  %90 = load float, float* %89, align 4
  %91 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 2
  %92 = load float, float* %91, align 8
  %93 = fsub float %90, %92
  %94 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 2
  store float %93, float* %94, align 8
  %95 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 0
  %96 = load float, float* %95, align 16
  %97 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 3
  %98 = load float, float* %97, align 4
  %99 = fsub float %96, %98
  %100 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 3
  store float %99, float* %100, align 4
  %101 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 4
  %102 = load float, float* %101, align 16
  %103 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 4
  store float %102, float* %103, align 16
  %104 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 6
  %105 = load float, float* %104, align 8
  %106 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 5
  %107 = load float, float* %106, align 4
  %108 = fsub float %105, %107
  %109 = load float, float* %12, align 4
  %110 = fmul float %108, %109
  %111 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 5
  store float %110, float* %111, align 4
  %112 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 6
  %113 = load float, float* %112, align 8
  %114 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 5
  %115 = load float, float* %114, align 4
  %116 = fadd float %113, %115
  %117 = load float, float* %12, align 4
  %118 = fmul float %116, %117
  %119 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 6
  store float %118, float* %119, align 8
  %120 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 7
  %121 = load float, float* %120, align 4
  %122 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 7
  store float %121, float* %122, align 4
  %123 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 0
  %124 = load float, float* %123, align 16
  %125 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 1
  %126 = load float, float* %125, align 4
  %127 = fadd float %124, %126
  %128 = load float, float* %16, align 4
  %129 = fmul float %127, %128
  %130 = load i32, i32* %6, align 4
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds [8 x [8 x float]], [8 x [8 x float]]* %11, i64 0, i64 %131
  %133 = getelementptr inbounds [8 x float], [8 x float]* %132, i64 0, i64 0
  store float %129, float* %133, align 16
  %134 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 0
  %135 = load float, float* %134, align 16
  %136 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 1
  %137 = load float, float* %136, align 4
  %138 = fsub float %135, %137
  %139 = load float, float* %16, align 4
  %140 = fmul float %138, %139
  %141 = load i32, i32* %6, align 4
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds [8 x [8 x float]], [8 x [8 x float]]* %11, i64 0, i64 %142
  %144 = getelementptr inbounds [8 x float], [8 x float]* %143, i64 0, i64 4
  store float %140, float* %144, align 16
  %145 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 2
  %146 = load float, float* %145, align 8
  %147 = load float, float* %18, align 4
  %148 = fmul float %146, %147
  %149 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 3
  %150 = load float, float* %149, align 4
  %151 = load float, float* %14, align 4
  %152 = fmul float %150, %151
  %153 = fadd float %148, %152
  %154 = load i32, i32* %6, align 4
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds [8 x [8 x float]], [8 x [8 x float]]* %11, i64 0, i64 %155
  %157 = getelementptr inbounds [8 x float], [8 x float]* %156, i64 0, i64 2
  store float %153, float* %157, align 8
  %158 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 3
  %159 = load float, float* %158, align 4
  %160 = load float, float* %18, align 4
  %161 = fmul float %159, %160
  %162 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 2
  %163 = load float, float* %162, align 8
  %164 = load float, float* %14, align 4
  %165 = fmul float %163, %164
  %166 = fsub float %161, %165
  %167 = load i32, i32* %6, align 4
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds [8 x [8 x float]], [8 x [8 x float]]* %11, i64 0, i64 %168
  %170 = getelementptr inbounds [8 x float], [8 x float]* %169, i64 0, i64 6
  store float %166, float* %170, align 8
  %171 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 4
  %172 = load float, float* %171, align 16
  %173 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 5
  %174 = load float, float* %173, align 4
  %175 = fadd float %172, %174
  %176 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 4
  store float %175, float* %176, align 16
  %177 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 7
  %178 = load float, float* %177, align 4
  %179 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 6
  %180 = load float, float* %179, align 8
  %181 = fadd float %178, %180
  %182 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 7
  store float %181, float* %182, align 4
  %183 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 4
  %184 = load float, float* %183, align 16
  %185 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 5
  %186 = load float, float* %185, align 4
  %187 = fsub float %184, %186
  %188 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 5
  store float %187, float* %188, align 4
  %189 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 7
  %190 = load float, float* %189, align 4
  %191 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 6
  %192 = load float, float* %191, align 8
  %193 = fsub float %190, %192
  %194 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 6
  store float %193, float* %194, align 8
  %195 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 4
  %196 = load float, float* %195, align 16
  %197 = load float, float* %19, align 4
  %198 = fmul float %196, %197
  %199 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 7
  %200 = load float, float* %199, align 4
  %201 = load float, float* %13, align 4
  %202 = fmul float %200, %201
  %203 = fadd float %198, %202
  %204 = load i32, i32* %6, align 4
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds [8 x [8 x float]], [8 x [8 x float]]* %11, i64 0, i64 %205
  %207 = getelementptr inbounds [8 x float], [8 x float]* %206, i64 0, i64 1
  store float %203, float* %207, align 4
  %208 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 5
  %209 = load float, float* %208, align 4
  %210 = load float, float* %15, align 4
  %211 = fmul float %209, %210
  %212 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 6
  %213 = load float, float* %212, align 8
  %214 = load float, float* %17, align 4
  %215 = fmul float %213, %214
  %216 = fadd float %211, %215
  %217 = load i32, i32* %6, align 4
  %218 = sext i32 %217 to i64
  %219 = getelementptr inbounds [8 x [8 x float]], [8 x [8 x float]]* %11, i64 0, i64 %218
  %220 = getelementptr inbounds [8 x float], [8 x float]* %219, i64 0, i64 5
  store float %216, float* %220, align 4
  %221 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 7
  %222 = load float, float* %221, align 4
  %223 = load float, float* %19, align 4
  %224 = fmul float %222, %223
  %225 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 4
  %226 = load float, float* %225, align 16
  %227 = load float, float* %13, align 4
  %228 = fmul float %226, %227
  %229 = fsub float %224, %228
  %230 = load i32, i32* %6, align 4
  %231 = sext i32 %230 to i64
  %232 = getelementptr inbounds [8 x [8 x float]], [8 x [8 x float]]* %11, i64 0, i64 %231
  %233 = getelementptr inbounds [8 x float], [8 x float]* %232, i64 0, i64 7
  store float %229, float* %233, align 4
  %234 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 6
  %235 = load float, float* %234, align 8
  %236 = load float, float* %15, align 4
  %237 = fmul float %235, %236
  %238 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 5
  %239 = load float, float* %238, align 4
  %240 = load float, float* %17, align 4
  %241 = fmul float %239, %240
  %242 = fsub float %237, %241
  %243 = load i32, i32* %6, align 4
  %244 = sext i32 %243 to i64
  %245 = getelementptr inbounds [8 x [8 x float]], [8 x [8 x float]]* %11, i64 0, i64 %244
  %246 = getelementptr inbounds [8 x float], [8 x float]* %245, i64 0, i64 3
  store float %242, float* %246, align 4
  br label %247

247:                                              ; preds = %76
  %248 = load i32, i32* %6, align 4
  %249 = add nsw i32 %248, 1
  store i32 %249, i32* %6, align 4
  %250 = load i32, i32* %8, align 4
  %251 = add nsw i32 %250, 8
  store i32 %251, i32* %8, align 4
  br label %20

252:                                              ; preds = %20
  store i32 0, i32* %6, align 4
  br label %253

253:                                              ; preds = %473, %252
  %254 = load i32, i32* %6, align 4
  %255 = icmp slt i32 %254, 8
  br i1 %255, label %256, label %476

256:                                              ; preds = %253
  store i32 0, i32* %7, align 4
  br label %257

257:                                              ; preds = %299, %256
  %258 = load i32, i32* %7, align 4
  %259 = icmp slt i32 %258, 4
  br i1 %259, label %260, label %302

260:                                              ; preds = %257
  %261 = load i32, i32* %7, align 4
  %262 = sub nsw i32 7, %261
  store i32 %262, i32* %5, align 4
  %263 = load i32, i32* %7, align 4
  %264 = sext i32 %263 to i64
  %265 = getelementptr inbounds [8 x [8 x float]], [8 x [8 x float]]* %11, i64 0, i64 %264
  %266 = load i32, i32* %6, align 4
  %267 = sext i32 %266 to i64
  %268 = getelementptr inbounds [8 x float], [8 x float]* %265, i64 0, i64 %267
  %269 = load float, float* %268, align 4
  %270 = load i32, i32* %5, align 4
  %271 = sext i32 %270 to i64
  %272 = getelementptr inbounds [8 x [8 x float]], [8 x [8 x float]]* %11, i64 0, i64 %271
  %273 = load i32, i32* %6, align 4
  %274 = sext i32 %273 to i64
  %275 = getelementptr inbounds [8 x float], [8 x float]* %272, i64 0, i64 %274
  %276 = load float, float* %275, align 4
  %277 = fadd float %269, %276
  %278 = load i32, i32* %7, align 4
  %279 = sext i32 %278 to i64
  %280 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 %279
  store float %277, float* %280, align 4
  %281 = load i32, i32* %7, align 4
  %282 = sext i32 %281 to i64
  %283 = getelementptr inbounds [8 x [8 x float]], [8 x [8 x float]]* %11, i64 0, i64 %282
  %284 = load i32, i32* %6, align 4
  %285 = sext i32 %284 to i64
  %286 = getelementptr inbounds [8 x float], [8 x float]* %283, i64 0, i64 %285
  %287 = load float, float* %286, align 4
  %288 = load i32, i32* %5, align 4
  %289 = sext i32 %288 to i64
  %290 = getelementptr inbounds [8 x [8 x float]], [8 x [8 x float]]* %11, i64 0, i64 %289
  %291 = load i32, i32* %6, align 4
  %292 = sext i32 %291 to i64
  %293 = getelementptr inbounds [8 x float], [8 x float]* %290, i64 0, i64 %292
  %294 = load float, float* %293, align 4
  %295 = fsub float %287, %294
  %296 = load i32, i32* %5, align 4
  %297 = sext i32 %296 to i64
  %298 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 %297
  store float %295, float* %298, align 4
  br label %299

299:                                              ; preds = %260
  %300 = load i32, i32* %7, align 4
  %301 = add nsw i32 %300, 1
  store i32 %301, i32* %7, align 4
  br label %257

302:                                              ; preds = %257
  %303 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 0
  %304 = load float, float* %303, align 16
  %305 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 3
  %306 = load float, float* %305, align 4
  %307 = fadd float %304, %306
  %308 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 0
  store float %307, float* %308, align 16
  %309 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 1
  %310 = load float, float* %309, align 4
  %311 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 2
  %312 = load float, float* %311, align 8
  %313 = fadd float %310, %312
  %314 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 1
  store float %313, float* %314, align 4
  %315 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 1
  %316 = load float, float* %315, align 4
  %317 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 2
  %318 = load float, float* %317, align 8
  %319 = fsub float %316, %318
  %320 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 2
  store float %319, float* %320, align 8
  %321 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 0
  %322 = load float, float* %321, align 16
  %323 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 3
  %324 = load float, float* %323, align 4
  %325 = fsub float %322, %324
  %326 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 3
  store float %325, float* %326, align 4
  %327 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 4
  %328 = load float, float* %327, align 16
  %329 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 4
  store float %328, float* %329, align 16
  %330 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 6
  %331 = load float, float* %330, align 8
  %332 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 5
  %333 = load float, float* %332, align 4
  %334 = fsub float %331, %333
  %335 = load float, float* %12, align 4
  %336 = fmul float %334, %335
  %337 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 5
  store float %336, float* %337, align 4
  %338 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 6
  %339 = load float, float* %338, align 8
  %340 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 5
  %341 = load float, float* %340, align 4
  %342 = fadd float %339, %341
  %343 = load float, float* %12, align 4
  %344 = fmul float %342, %343
  %345 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 6
  store float %344, float* %345, align 8
  %346 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 7
  %347 = load float, float* %346, align 4
  %348 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 7
  store float %347, float* %348, align 4
  %349 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 0
  %350 = load float, float* %349, align 16
  %351 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 1
  %352 = load float, float* %351, align 4
  %353 = fadd float %350, %352
  %354 = load float, float* %16, align 4
  %355 = fmul float %353, %354
  %356 = getelementptr inbounds [8 x [8 x float]], [8 x [8 x float]]* %11, i64 0, i64 0
  %357 = load i32, i32* %6, align 4
  %358 = sext i32 %357 to i64
  %359 = getelementptr inbounds [8 x float], [8 x float]* %356, i64 0, i64 %358
  store float %355, float* %359, align 4
  %360 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 0
  %361 = load float, float* %360, align 16
  %362 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 1
  %363 = load float, float* %362, align 4
  %364 = fsub float %361, %363
  %365 = load float, float* %16, align 4
  %366 = fmul float %364, %365
  %367 = getelementptr inbounds [8 x [8 x float]], [8 x [8 x float]]* %11, i64 0, i64 4
  %368 = load i32, i32* %6, align 4
  %369 = sext i32 %368 to i64
  %370 = getelementptr inbounds [8 x float], [8 x float]* %367, i64 0, i64 %369
  store float %366, float* %370, align 4
  %371 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 2
  %372 = load float, float* %371, align 8
  %373 = load float, float* %18, align 4
  %374 = fmul float %372, %373
  %375 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 3
  %376 = load float, float* %375, align 4
  %377 = load float, float* %14, align 4
  %378 = fmul float %376, %377
  %379 = fadd float %374, %378
  %380 = getelementptr inbounds [8 x [8 x float]], [8 x [8 x float]]* %11, i64 0, i64 2
  %381 = load i32, i32* %6, align 4
  %382 = sext i32 %381 to i64
  %383 = getelementptr inbounds [8 x float], [8 x float]* %380, i64 0, i64 %382
  store float %379, float* %383, align 4
  %384 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 3
  %385 = load float, float* %384, align 4
  %386 = load float, float* %18, align 4
  %387 = fmul float %385, %386
  %388 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 2
  %389 = load float, float* %388, align 8
  %390 = load float, float* %14, align 4
  %391 = fmul float %389, %390
  %392 = fsub float %387, %391
  %393 = getelementptr inbounds [8 x [8 x float]], [8 x [8 x float]]* %11, i64 0, i64 6
  %394 = load i32, i32* %6, align 4
  %395 = sext i32 %394 to i64
  %396 = getelementptr inbounds [8 x float], [8 x float]* %393, i64 0, i64 %395
  store float %392, float* %396, align 4
  %397 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 4
  %398 = load float, float* %397, align 16
  %399 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 5
  %400 = load float, float* %399, align 4
  %401 = fadd float %398, %400
  %402 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 4
  store float %401, float* %402, align 16
  %403 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 7
  %404 = load float, float* %403, align 4
  %405 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 6
  %406 = load float, float* %405, align 8
  %407 = fadd float %404, %406
  %408 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 7
  store float %407, float* %408, align 4
  %409 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 4
  %410 = load float, float* %409, align 16
  %411 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 5
  %412 = load float, float* %411, align 4
  %413 = fsub float %410, %412
  %414 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 5
  store float %413, float* %414, align 4
  %415 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 7
  %416 = load float, float* %415, align 4
  %417 = getelementptr inbounds [8 x float], [8 x float]* %9, i64 0, i64 6
  %418 = load float, float* %417, align 8
  %419 = fsub float %416, %418
  %420 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 6
  store float %419, float* %420, align 8
  %421 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 4
  %422 = load float, float* %421, align 16
  %423 = load float, float* %19, align 4
  %424 = fmul float %422, %423
  %425 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 7
  %426 = load float, float* %425, align 4
  %427 = load float, float* %13, align 4
  %428 = fmul float %426, %427
  %429 = fadd float %424, %428
  %430 = getelementptr inbounds [8 x [8 x float]], [8 x [8 x float]]* %11, i64 0, i64 1
  %431 = load i32, i32* %6, align 4
  %432 = sext i32 %431 to i64
  %433 = getelementptr inbounds [8 x float], [8 x float]* %430, i64 0, i64 %432
  store float %429, float* %433, align 4
  %434 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 5
  %435 = load float, float* %434, align 4
  %436 = load float, float* %15, align 4
  %437 = fmul float %435, %436
  %438 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 6
  %439 = load float, float* %438, align 8
  %440 = load float, float* %17, align 4
  %441 = fmul float %439, %440
  %442 = fadd float %437, %441
  %443 = getelementptr inbounds [8 x [8 x float]], [8 x [8 x float]]* %11, i64 0, i64 5
  %444 = load i32, i32* %6, align 4
  %445 = sext i32 %444 to i64
  %446 = getelementptr inbounds [8 x float], [8 x float]* %443, i64 0, i64 %445
  store float %442, float* %446, align 4
  %447 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 7
  %448 = load float, float* %447, align 4
  %449 = load float, float* %19, align 4
  %450 = fmul float %448, %449
  %451 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 4
  %452 = load float, float* %451, align 16
  %453 = load float, float* %13, align 4
  %454 = fmul float %452, %453
  %455 = fsub float %450, %454
  %456 = getelementptr inbounds [8 x [8 x float]], [8 x [8 x float]]* %11, i64 0, i64 7
  %457 = load i32, i32* %6, align 4
  %458 = sext i32 %457 to i64
  %459 = getelementptr inbounds [8 x float], [8 x float]* %456, i64 0, i64 %458
  store float %455, float* %459, align 4
  %460 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 6
  %461 = load float, float* %460, align 8
  %462 = load float, float* %15, align 4
  %463 = fmul float %461, %462
  %464 = getelementptr inbounds [8 x float], [8 x float]* %10, i64 0, i64 5
  %465 = load float, float* %464, align 4
  %466 = load float, float* %17, align 4
  %467 = fmul float %465, %466
  %468 = fsub float %463, %467
  %469 = getelementptr inbounds [8 x [8 x float]], [8 x [8 x float]]* %11, i64 0, i64 3
  %470 = load i32, i32* %6, align 4
  %471 = sext i32 %470 to i64
  %472 = getelementptr inbounds [8 x float], [8 x float]* %469, i64 0, i64 %471
  store float %468, float* %472, align 4
  br label %473

473:                                              ; preds = %302
  %474 = load i32, i32* %6, align 4
  %475 = add nsw i32 %474, 1
  store i32 %475, i32* %6, align 4
  br label %253

476:                                              ; preds = %253
  store i32 0, i32* %6, align 4
  br label %477

477:                                              ; preds = %507, %476
  %478 = load i32, i32* %6, align 4
  %479 = icmp slt i32 %478, 8
  br i1 %479, label %480, label %510

480:                                              ; preds = %477
  store i32 0, i32* %7, align 4
  br label %481

481:                                              ; preds = %503, %480
  %482 = load i32, i32* %7, align 4
  %483 = icmp slt i32 %482, 8
  br i1 %483, label %484, label %506

484:                                              ; preds = %481
  %485 = load i32, i32* %6, align 4
  %486 = sext i32 %485 to i64
  %487 = getelementptr inbounds [8 x [8 x float]], [8 x [8 x float]]* %11, i64 0, i64 %486
  %488 = load i32, i32* %7, align 4
  %489 = sext i32 %488 to i64
  %490 = getelementptr inbounds [8 x float], [8 x float]* %487, i64 0, i64 %489
  %491 = load float, float* %490, align 4
  %492 = fptosi float %491 to i32
  %493 = load i32*, i32** %4, align 8
  %494 = load i32, i32* %6, align 4
  %495 = sext i32 %494 to i64
  %496 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* @zigzag, i64 0, i64 %495
  %497 = load i32, i32* %7, align 4
  %498 = sext i32 %497 to i64
  %499 = getelementptr inbounds [8 x i32], [8 x i32]* %496, i64 0, i64 %498
  %500 = load i32, i32* %499, align 4
  %501 = sext i32 %500 to i64
  %502 = getelementptr inbounds i32, i32* %493, i64 %501
  store i32 %492, i32* %502, align 4
  br label %503

503:                                              ; preds = %484
  %504 = load i32, i32* %7, align 4
  %505 = add nsw i32 %504, 1
  store i32 %505, i32* %7, align 4
  br label %481

506:                                              ; preds = %481
  br label %507

507:                                              ; preds = %506
  %508 = load i32, i32* %6, align 4
  %509 = add nsw i32 %508, 1
  store i32 %509, i32* %6, align 4
  br label %477

510:                                              ; preds = %477
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @init_idctref() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca double, align 8
  store i32 0, i32* %1, align 4
  br label %4

4:                                                ; preds = %39, %0
  %5 = load i32, i32* %1, align 4
  %6 = icmp slt i32 %5, 8
  br i1 %6, label %7, label %42

7:                                                ; preds = %4
  %8 = load i32, i32* %1, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %7
  %11 = call double @sqrt(double 1.250000e-01) #8
  br label %13

12:                                               ; preds = %7
  br label %13

13:                                               ; preds = %12, %10
  %14 = phi double [ %11, %10 ], [ 5.000000e-01, %12 ]
  store double %14, double* %3, align 8
  store i32 0, i32* %2, align 4
  br label %15

15:                                               ; preds = %35, %13
  %16 = load i32, i32* %2, align 4
  %17 = icmp slt i32 %16, 8
  br i1 %17, label %18, label %38

18:                                               ; preds = %15
  %19 = load double, double* %3, align 8
  %20 = load i32, i32* %1, align 4
  %21 = sitofp i32 %20 to double
  %22 = fmul double 0x3FD921FB54442D18, %21
  %23 = load i32, i32* %2, align 4
  %24 = sitofp i32 %23 to double
  %25 = fadd double %24, 5.000000e-01
  %26 = fmul double %22, %25
  %27 = call double @cos(double %26) #8
  %28 = fmul double %19, %27
  %29 = load i32, i32* %1, align 4
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds [8 x [8 x double]], [8 x [8 x double]]* @c, i64 0, i64 %30
  %32 = load i32, i32* %2, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds [8 x double], [8 x double]* %31, i64 0, i64 %33
  store double %28, double* %34, align 8
  br label %35

35:                                               ; preds = %18
  %36 = load i32, i32* %2, align 4
  %37 = add nsw i32 %36, 1
  store i32 %37, i32* %2, align 4
  br label %15

38:                                               ; preds = %15
  br label %39

39:                                               ; preds = %38
  %40 = load i32, i32* %1, align 4
  %41 = add nsw i32 %40, 1
  store i32 %41, i32* %1, align 4
  br label %4

42:                                               ; preds = %4
  ret void
}

; Function Attrs: nounwind
declare dso_local double @sqrt(double) #2

; Function Attrs: nounwind
declare dso_local double @cos(double) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @idctref(i32* %0, i32* %1) #0 {
  %3 = alloca i32*, align 8
  %4 = alloca i32*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca double, align 8
  %10 = alloca [64 x double], align 16
  %11 = alloca [64 x i32], align 16
  store i32* %0, i32** %3, align 8
  store i32* %1, i32** %4, align 8
  store i32 0, i32* %5, align 4
  br label %12

12:                                               ; preds = %41, %2
  %13 = load i32, i32* %5, align 4
  %14 = icmp slt i32 %13, 8
  br i1 %14, label %15, label %44

15:                                               ; preds = %12
  store i32 0, i32* %6, align 4
  br label %16

16:                                               ; preds = %37, %15
  %17 = load i32, i32* %6, align 4
  %18 = icmp slt i32 %17, 8
  br i1 %18, label %19, label %40

19:                                               ; preds = %16
  %20 = load i32*, i32** %3, align 8
  %21 = load i32, i32* %5, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* @zigzag, i64 0, i64 %22
  %24 = load i32, i32* %6, align 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds [8 x i32], [8 x i32]* %23, i64 0, i64 %25
  %27 = load i32, i32* %26, align 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i32, i32* %20, i64 %28
  %30 = load i32, i32* %29, align 4
  %31 = load i32, i32* %6, align 4
  %32 = load i32, i32* %5, align 4
  %33 = mul nsw i32 %32, 8
  %34 = add nsw i32 %31, %33
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds [64 x i32], [64 x i32]* %11, i64 0, i64 %35
  store i32 %30, i32* %36, align 4
  br label %37

37:                                               ; preds = %19
  %38 = load i32, i32* %6, align 4
  %39 = add nsw i32 %38, 1
  store i32 %39, i32* %6, align 4
  br label %16

40:                                               ; preds = %16
  br label %41

41:                                               ; preds = %40
  %42 = load i32, i32* %5, align 4
  %43 = add nsw i32 %42, 1
  store i32 %43, i32* %5, align 4
  br label %12

44:                                               ; preds = %12
  store i32 0, i32* %5, align 4
  br label %45

45:                                               ; preds = %90, %44
  %46 = load i32, i32* %5, align 4
  %47 = icmp slt i32 %46, 8
  br i1 %47, label %48, label %93

48:                                               ; preds = %45
  store i32 0, i32* %6, align 4
  br label %49

49:                                               ; preds = %86, %48
  %50 = load i32, i32* %6, align 4
  %51 = icmp slt i32 %50, 8
  br i1 %51, label %52, label %89

52:                                               ; preds = %49
  store double 0.000000e+00, double* %9, align 8
  store i32 0, i32* %7, align 4
  br label %53

53:                                               ; preds = %75, %52
  %54 = load i32, i32* %7, align 4
  %55 = icmp slt i32 %54, 8
  br i1 %55, label %56, label %78

56:                                               ; preds = %53
  %57 = load i32, i32* %7, align 4
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds [8 x [8 x double]], [8 x [8 x double]]* @c, i64 0, i64 %58
  %60 = load i32, i32* %6, align 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds [8 x double], [8 x double]* %59, i64 0, i64 %61
  %63 = load double, double* %62, align 8
  %64 = load i32, i32* %5, align 4
  %65 = mul nsw i32 8, %64
  %66 = load i32, i32* %7, align 4
  %67 = add nsw i32 %65, %66
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds [64 x i32], [64 x i32]* %11, i64 0, i64 %68
  %70 = load i32, i32* %69, align 4
  %71 = sitofp i32 %70 to double
  %72 = fmul double %63, %71
  %73 = load double, double* %9, align 8
  %74 = fadd double %73, %72
  store double %74, double* %9, align 8
  br label %75

75:                                               ; preds = %56
  %76 = load i32, i32* %7, align 4
  %77 = add nsw i32 %76, 1
  store i32 %77, i32* %7, align 4
  br label %53

78:                                               ; preds = %53
  %79 = load double, double* %9, align 8
  %80 = load i32, i32* %5, align 4
  %81 = mul nsw i32 8, %80
  %82 = load i32, i32* %6, align 4
  %83 = add nsw i32 %81, %82
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds [64 x double], [64 x double]* %10, i64 0, i64 %84
  store double %79, double* %85, align 8
  br label %86

86:                                               ; preds = %78
  %87 = load i32, i32* %6, align 4
  %88 = add nsw i32 %87, 1
  store i32 %88, i32* %6, align 4
  br label %49

89:                                               ; preds = %49
  br label %90

90:                                               ; preds = %89
  %91 = load i32, i32* %5, align 4
  %92 = add nsw i32 %91, 1
  store i32 %92, i32* %5, align 4
  br label %45

93:                                               ; preds = %45
  store i32 0, i32* %6, align 4
  br label %94

94:                                               ; preds = %155, %93
  %95 = load i32, i32* %6, align 4
  %96 = icmp slt i32 %95, 8
  br i1 %96, label %97, label %158

97:                                               ; preds = %94
  store i32 0, i32* %5, align 4
  br label %98

98:                                               ; preds = %151, %97
  %99 = load i32, i32* %5, align 4
  %100 = icmp slt i32 %99, 8
  br i1 %100, label %101, label %154

101:                                              ; preds = %98
  store double 0.000000e+00, double* %9, align 8
  store i32 0, i32* %7, align 4
  br label %102

102:                                              ; preds = %123, %101
  %103 = load i32, i32* %7, align 4
  %104 = icmp slt i32 %103, 8
  br i1 %104, label %105, label %126

105:                                              ; preds = %102
  %106 = load i32, i32* %7, align 4
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds [8 x [8 x double]], [8 x [8 x double]]* @c, i64 0, i64 %107
  %109 = load i32, i32* %5, align 4
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds [8 x double], [8 x double]* %108, i64 0, i64 %110
  %112 = load double, double* %111, align 8
  %113 = load i32, i32* %7, align 4
  %114 = mul nsw i32 8, %113
  %115 = load i32, i32* %6, align 4
  %116 = add nsw i32 %114, %115
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds [64 x double], [64 x double]* %10, i64 0, i64 %117
  %119 = load double, double* %118, align 8
  %120 = fmul double %112, %119
  %121 = load double, double* %9, align 8
  %122 = fadd double %121, %120
  store double %122, double* %9, align 8
  br label %123

123:                                              ; preds = %105
  %124 = load i32, i32* %7, align 4
  %125 = add nsw i32 %124, 1
  store i32 %125, i32* %7, align 4
  br label %102

126:                                              ; preds = %102
  %127 = load double, double* %9, align 8
  %128 = fadd double %127, 5.000000e-01
  %129 = call double @llvm.floor.f64(double %128)
  %130 = fptosi double %129 to i32
  store i32 %130, i32* %8, align 4
  %131 = load i32, i32* %8, align 4
  %132 = icmp slt i32 %131, -256
  br i1 %132, label %133, label %134

133:                                              ; preds = %126
  br label %142

134:                                              ; preds = %126
  %135 = load i32, i32* %8, align 4
  %136 = icmp sgt i32 %135, 255
  br i1 %136, label %137, label %138

137:                                              ; preds = %134
  br label %140

138:                                              ; preds = %134
  %139 = load i32, i32* %8, align 4
  br label %140

140:                                              ; preds = %138, %137
  %141 = phi i32 [ 255, %137 ], [ %139, %138 ]
  br label %142

142:                                              ; preds = %140, %133
  %143 = phi i32 [ -256, %133 ], [ %141, %140 ]
  %144 = load i32*, i32** %4, align 8
  %145 = load i32, i32* %5, align 4
  %146 = mul nsw i32 8, %145
  %147 = load i32, i32* %6, align 4
  %148 = add nsw i32 %146, %147
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds i32, i32* %144, i64 %149
  store i32 %143, i32* %150, align 4
  br label %151

151:                                              ; preds = %142
  %152 = load i32, i32* %5, align 4
  %153 = add nsw i32 %152, 1
  store i32 %153, i32* %5, align 4
  br label %98

154:                                              ; preds = %98
  br label %155

155:                                              ; preds = %154
  %156 = load i32, i32* %6, align 4
  %157 = add nsw i32 %156, 1
  store i32 %157, i32* %6, align 4
  br label %94

158:                                              ; preds = %94
  ret void
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.floor.f64(double) #5

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @ReadImage(i8* %0, i32 %1, i32 %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca %struct._IO_FILE*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  store i8* %0, i8** %4, align 8
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  store %struct._IO_FILE* null, %struct._IO_FILE** %7, align 8
  %11 = load i32, i32* @pels, align 4
  %12 = load i32, i32* @lines, align 4
  %13 = mul nsw i32 %11, %12
  %14 = mul nsw i32 %13, 3
  %15 = sdiv i32 %14, 2
  store i32 %15, i32* %8, align 4
  %16 = load i32, i32* %8, align 4
  %17 = sext i32 %16 to i64
  %18 = mul i64 1, %17
  %19 = call noalias i8* @malloc(i64 %18) #8
  store i8* %19, i8** %9, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %21, label %24

21:                                               ; preds = %3
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %23 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.46, i64 0, i64 0))
  call void @exit(i32 -1) #9
  unreachable

24:                                               ; preds = %3
  %25 = load i8*, i8** %4, align 8
  %26 = call %struct._IO_FILE* @fopen(i8* %25, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1.47, i64 0, i64 0))
  store %struct._IO_FILE* %26, %struct._IO_FILE** %7, align 8
  %27 = icmp eq %struct._IO_FILE* %26, null
  br i1 %27, label %28, label %32

28:                                               ; preds = %24
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %30 = load i8*, i8** %4, align 8
  %31 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2.48, i64 0, i64 0), i8* %30)
  call void @exit(i32 -1) #9
  unreachable

32:                                               ; preds = %24
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8
  call void @rewind(%struct._IO_FILE* %33)
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8
  %35 = load i32, i32* %6, align 4
  %36 = load i32, i32* %5, align 4
  %37 = load i32, i32* %8, align 4
  %38 = mul nsw i32 %36, %37
  %39 = add nsw i32 %35, %38
  %40 = sext i32 %39 to i64
  %41 = call i32 @fseek(%struct._IO_FILE* %34, i64 %40, i32 0)
  store i32 %41, i32* %10, align 4
  %42 = load i32, i32* %10, align 4
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %44, label %51

44:                                               ; preds = %32
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %46 = load i32, i32* %5, align 4
  %47 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %45, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3.49, i64 0, i64 0), i32 %46)
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %49 = load i8*, i8** %4, align 8
  %50 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %48, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4.50, i64 0, i64 0), i8* %49)
  call void @exit(i32 -1) #9
  unreachable

51:                                               ; preds = %32
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %53 = load i32, i32* %5, align 4
  %54 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %52, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.5.51, i64 0, i64 0), i32 %53)
  %55 = load i8*, i8** %9, align 8
  %56 = load i32, i32* %8, align 4
  %57 = sext i32 %56 to i64
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8
  %59 = call i64 @fread(i8* %55, i64 1, i64 %57, %struct._IO_FILE* %58)
  %60 = trunc i64 %59 to i32
  store i32 %60, i32* %10, align 4
  %61 = load i32, i32* %8, align 4
  %62 = icmp ne i32 %60, %61
  br i1 %62, label %63, label %70

63:                                               ; preds = %51
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %65 = load i32, i32* %5, align 4
  %66 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %64, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6.52, i64 0, i64 0), i32 %65)
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %68 = load i8*, i8** %4, align 8
  %69 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %67, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4.50, i64 0, i64 0), i8* %68)
  call void @exit(i32 -1) #9
  unreachable

70:                                               ; preds = %51
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8
  %72 = call i32 @fclose(%struct._IO_FILE* %71)
  %73 = load i8*, i8** %9, align 8
  ret i8* %73
}

declare dso_local %struct._IO_FILE* @fopen(i8*, i8*) #3

declare dso_local void @rewind(%struct._IO_FILE*) #3

declare dso_local i32 @fseek(%struct._IO_FILE*, i64, i32) #3

declare dso_local i64 @fread(i8*, i64, i64, %struct._IO_FILE*) #3

declare dso_local i32 @fclose(%struct._IO_FILE*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.pict_image* @FillImage(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca %struct.pict_image*, align 8
  store i8* %0, i8** %2, align 8
  %4 = load i32, i32* @pels, align 4
  %5 = load i32, i32* @lines, align 4
  %6 = mul nsw i32 %4, %5
  %7 = call %struct.pict_image* @InitImage(i32 %6)
  store %struct.pict_image* %7, %struct.pict_image** %3, align 8
  %8 = load %struct.pict_image*, %struct.pict_image** %3, align 8
  %9 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %8, i32 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = load i8*, i8** %2, align 8
  %12 = load i32, i32* @pels, align 4
  %13 = load i32, i32* @lines, align 4
  %14 = mul nsw i32 %12, %13
  %15 = sext i32 %14 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %11, i64 %15, i1 false)
  %16 = load %struct.pict_image*, %struct.pict_image** %3, align 8
  %17 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %16, i32 0, i32 2
  %18 = load i8*, i8** %17, align 8
  %19 = load i8*, i8** %2, align 8
  %20 = load i32, i32* @pels, align 4
  %21 = load i32, i32* @lines, align 4
  %22 = mul nsw i32 %20, %21
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i8, i8* %19, i64 %23
  %25 = load i32, i32* @pels, align 4
  %26 = load i32, i32* @lines, align 4
  %27 = mul nsw i32 %25, %26
  %28 = sdiv i32 %27, 4
  %29 = sext i32 %28 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %18, i8* align 1 %24, i64 %29, i1 false)
  %30 = load %struct.pict_image*, %struct.pict_image** %3, align 8
  %31 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %30, i32 0, i32 1
  %32 = load i8*, i8** %31, align 8
  %33 = load i8*, i8** %2, align 8
  %34 = load i32, i32* @pels, align 4
  %35 = load i32, i32* @lines, align 4
  %36 = mul nsw i32 %34, %35
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds i8, i8* %33, i64 %37
  %39 = load i32, i32* @pels, align 4
  %40 = load i32, i32* @lines, align 4
  %41 = mul nsw i32 %39, %40
  %42 = sdiv i32 %41, 4
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds i8, i8* %38, i64 %43
  %45 = load i32, i32* @pels, align 4
  %46 = load i32, i32* @lines, align 4
  %47 = mul nsw i32 %45, %46
  %48 = sdiv i32 %47, 4
  %49 = sext i32 %48 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %32, i8* align 1 %44, i64 %49, i1 false)
  %50 = load i8*, i8** %2, align 8
  call void @free(i8* %50) #8
  %51 = load %struct.pict_image*, %struct.pict_image** %3, align 8
  ret %struct.pict_image* %51
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.pict_image* @InitImage(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.pict_image*, align 8
  store i32 %0, i32* %2, align 4
  %4 = call noalias i8* @malloc(i64 24) #8
  %5 = bitcast i8* %4 to %struct.pict_image*
  store %struct.pict_image* %5, %struct.pict_image** %3, align 8
  %6 = icmp eq %struct.pict_image* %5, null
  br i1 %6, label %7, label %10

7:                                                ; preds = %1
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %8, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.11.55, i64 0, i64 0))
  call void @exit(i32 -1) #9
  unreachable

10:                                               ; preds = %1
  %11 = load i32, i32* %2, align 4
  %12 = sext i32 %11 to i64
  %13 = mul i64 1, %12
  %14 = call noalias i8* @malloc(i64 %13) #8
  %15 = load %struct.pict_image*, %struct.pict_image** %3, align 8
  %16 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %15, i32 0, i32 0
  store i8* %14, i8** %16, align 8
  %17 = icmp eq i8* %14, null
  br i1 %17, label %18, label %21

18:                                               ; preds = %10
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.12.56, i64 0, i64 0))
  call void @exit(i32 -1) #9
  unreachable

21:                                               ; preds = %10
  %22 = load i32, i32* %2, align 4
  %23 = sext i32 %22 to i64
  %24 = mul i64 1, %23
  %25 = udiv i64 %24, 4
  %26 = call noalias i8* @malloc(i64 %25) #8
  %27 = load %struct.pict_image*, %struct.pict_image** %3, align 8
  %28 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %27, i32 0, i32 1
  store i8* %26, i8** %28, align 8
  %29 = icmp eq i8* %26, null
  br i1 %29, label %30, label %33

30:                                               ; preds = %21
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %32 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %31, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.13.57, i64 0, i64 0))
  call void @exit(i32 -1) #9
  unreachable

33:                                               ; preds = %21
  %34 = load i32, i32* %2, align 4
  %35 = sext i32 %34 to i64
  %36 = mul i64 1, %35
  %37 = udiv i64 %36, 4
  %38 = call noalias i8* @malloc(i64 %37) #8
  %39 = load %struct.pict_image*, %struct.pict_image** %3, align 8
  %40 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %39, i32 0, i32 2
  store i8* %38, i8** %40, align 8
  %41 = icmp eq i8* %38, null
  br i1 %41, label %42, label %45

42:                                               ; preds = %33
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %44 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %43, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.14.58, i64 0, i64 0))
  call void @exit(i32 -1) #9
  unreachable

45:                                               ; preds = %33
  %46 = load %struct.pict_image*, %struct.pict_image** %3, align 8
  ret %struct.pict_image* %46
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @WriteImage(%struct.pict_image* %0, i8* %1) #0 {
  %3 = alloca %struct.pict_image*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct._IO_FILE*, align 8
  store %struct.pict_image* %0, %struct.pict_image** %3, align 8
  store i8* %1, i8** %4, align 8
  %7 = load i8*, i8** %4, align 8
  %8 = call %struct._IO_FILE* @fopen(i8* %7, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7.59, i64 0, i64 0))
  store %struct._IO_FILE* %8, %struct._IO_FILE** %6, align 8
  %9 = icmp eq %struct._IO_FILE* %8, null
  br i1 %9, label %10, label %14

10:                                               ; preds = %2
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %12 = load i8*, i8** %4, align 8
  %13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8.60, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.9.61, i64 0, i64 0), i8* %12)
  call void @exit(i32 -1) #9
  unreachable

14:                                               ; preds = %2
  %15 = load %struct.pict_image*, %struct.pict_image** %3, align 8
  %16 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %15, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = load i32, i32* @pels, align 4
  %19 = load i32, i32* @lines, align 4
  %20 = mul nsw i32 %18, %19
  %21 = sext i32 %20 to i64
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8
  %23 = call i64 @fwrite(i8* %17, i64 1, i64 %21, %struct._IO_FILE* %22)
  %24 = trunc i64 %23 to i32
  store i32 %24, i32* %5, align 4
  %25 = load i32, i32* @pels, align 4
  %26 = load i32, i32* @lines, align 4
  %27 = mul nsw i32 %25, %26
  %28 = icmp ne i32 %24, %27
  br i1 %28, label %29, label %33

29:                                               ; preds = %14
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %31 = load i8*, i8** %4, align 8
  %32 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8.60, i64 0, i64 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.10.62, i64 0, i64 0), i8* %31)
  call void @exit(i32 -1) #9
  unreachable

33:                                               ; preds = %14
  %34 = load %struct.pict_image*, %struct.pict_image** %3, align 8
  %35 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %34, i32 0, i32 2
  %36 = load i8*, i8** %35, align 8
  %37 = load i32, i32* @pels, align 4
  %38 = load i32, i32* @lines, align 4
  %39 = mul nsw i32 %37, %38
  %40 = sdiv i32 %39, 4
  %41 = sext i32 %40 to i64
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8
  %43 = call i64 @fwrite(i8* %36, i64 1, i64 %41, %struct._IO_FILE* %42)
  %44 = trunc i64 %43 to i32
  store i32 %44, i32* %5, align 4
  %45 = load i32, i32* @pels, align 4
  %46 = load i32, i32* @lines, align 4
  %47 = mul nsw i32 %45, %46
  %48 = sdiv i32 %47, 4
  %49 = icmp ne i32 %44, %48
  br i1 %49, label %50, label %54

50:                                               ; preds = %33
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %52 = load i8*, i8** %4, align 8
  %53 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %51, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8.60, i64 0, i64 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.10.62, i64 0, i64 0), i8* %52)
  call void @exit(i32 -1) #9
  unreachable

54:                                               ; preds = %33
  %55 = load %struct.pict_image*, %struct.pict_image** %3, align 8
  %56 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %55, i32 0, i32 1
  %57 = load i8*, i8** %56, align 8
  %58 = load i32, i32* @pels, align 4
  %59 = load i32, i32* @lines, align 4
  %60 = mul nsw i32 %58, %59
  %61 = sdiv i32 %60, 4
  %62 = sext i32 %61 to i64
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8
  %64 = call i64 @fwrite(i8* %57, i64 1, i64 %62, %struct._IO_FILE* %63)
  %65 = trunc i64 %64 to i32
  store i32 %65, i32* %5, align 4
  %66 = load i32, i32* @pels, align 4
  %67 = load i32, i32* @lines, align 4
  %68 = mul nsw i32 %66, %67
  %69 = sdiv i32 %68, 4
  %70 = icmp ne i32 %65, %69
  br i1 %70, label %71, label %75

71:                                               ; preds = %54
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %73 = load i8*, i8** %4, align 8
  %74 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %72, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8.60, i64 0, i64 0), i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.10.62, i64 0, i64 0), i8* %73)
  call void @exit(i32 -1) #9
  unreachable

75:                                               ; preds = %54
  %76 = load %struct._IO_FILE*, %struct._IO_FILE** %6, align 8
  %77 = call i32 @fclose(%struct._IO_FILE* %76)
  ret void
}

declare dso_local i64 @fwrite(i8*, i64, i64, %struct._IO_FILE*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @FreeImage(%struct.pict_image* %0) #0 {
  %2 = alloca %struct.pict_image*, align 8
  store %struct.pict_image* %0, %struct.pict_image** %2, align 8
  %3 = load %struct.pict_image*, %struct.pict_image** %2, align 8
  %4 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %3, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  call void @free(i8* %5) #8
  %6 = load %struct.pict_image*, %struct.pict_image** %2, align 8
  %7 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %6, i32 0, i32 1
  %8 = load i8*, i8** %7, align 8
  call void @free(i8* %8) #8
  %9 = load %struct.pict_image*, %struct.pict_image** %2, align 8
  %10 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %9, i32 0, i32 2
  %11 = load i8*, i8** %10, align 8
  call void @free(i8* %11) #8
  %12 = load %struct.pict_image*, %struct.pict_image** %2, align 8
  %13 = bitcast %struct.pict_image* %12 to i8*
  call void @free(i8* %13) #8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca %struct.pict_image*, align 8
  %6 = alloca %struct.pict_image*, align 8
  %7 = alloca %struct.pict_image*, align 8
  %8 = alloca %struct.pict_image*, align 8
  %9 = alloca %struct.pict_image*, align 8
  %10 = alloca %struct.pict_image*, align 8
  %11 = alloca %struct.pict*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca %struct._IO_FILE*, align 8
  %14 = alloca i32, align 4
  %15 = alloca float, align 4
  %16 = alloca float, align 4
  %17 = alloca float, align 4
  %18 = alloca float, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca i32, align 4
  %31 = alloca i32, align 4
  %32 = alloca i32, align 4
  %33 = alloca i32, align 4
  %34 = alloca i32, align 4
  %35 = alloca i32, align 4
  %36 = alloca i32, align 4
  %37 = alloca i32, align 4
  %38 = alloca i32, align 4
  %39 = alloca i32, align 4
  %40 = alloca i32, align 4
  %41 = alloca %struct.bits_counted*, align 8
  %42 = alloca %struct.bits_counted*, align 8
  %43 = alloca %struct.bits_counted*, align 8
  %44 = alloca %struct.results*, align 8
  %45 = alloca %struct.results*, align 8
  %46 = alloca %struct.results*, align 8
  %47 = alloca i8*, align 8
  %48 = alloca i8*, align 8
  %49 = alloca i8*, align 8
  %50 = alloca i8*, align 8
  %51 = alloca i8*, align 8
  %52 = alloca float, align 4
  %53 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  store %struct.pict_image* null, %struct.pict_image** %5, align 8
  store %struct.pict_image* null, %struct.pict_image** %6, align 8
  store %struct.pict_image* null, %struct.pict_image** %7, align 8
  store %struct.pict_image* null, %struct.pict_image** %8, align 8
  store %struct.pict_image* null, %struct.pict_image** %9, align 8
  store %struct.pict_image* null, %struct.pict_image** %10, align 8
  %54 = call noalias i8* @malloc(i64 80) #8
  %55 = bitcast i8* %54 to %struct.pict*
  store %struct.pict* %55, %struct.pict** %11, align 8
  store i32 0, i32* %19, align 4
  store i32 0, i32* %21, align 4
  store i32 0, i32* %29, align 4
  store i32 0, i32* %30, align 4
  %56 = call noalias i8* @malloc(i64 56) #8
  %57 = bitcast i8* %56 to %struct.bits_counted*
  store %struct.bits_counted* %57, %struct.bits_counted** %41, align 8
  %58 = call noalias i8* @malloc(i64 56) #8
  %59 = bitcast i8* %58 to %struct.bits_counted*
  store %struct.bits_counted* %59, %struct.bits_counted** %42, align 8
  %60 = call noalias i8* @malloc(i64 56) #8
  %61 = bitcast i8* %60 to %struct.bits_counted*
  store %struct.bits_counted* %61, %struct.bits_counted** %43, align 8
  %62 = call noalias i8* @malloc(i64 16) #8
  %63 = bitcast i8* %62 to %struct.results*
  store %struct.results* %63, %struct.results** %44, align 8
  %64 = call noalias i8* @malloc(i64 16) #8
  %65 = bitcast i8* %64 to %struct.results*
  store %struct.results* %65, %struct.results** %45, align 8
  %66 = call noalias i8* @malloc(i64 16) #8
  %67 = bitcast i8* %66 to %struct.results*
  store %struct.results* %67, %struct.results** %46, align 8
  %68 = call noalias i8* @malloc(i64 100) #8
  store i8* %68, i8** %47, align 8
  %69 = call noalias i8* @malloc(i64 100) #8
  store i8* %69, i8** %48, align 8
  %70 = call noalias i8* @malloc(i64 100) #8
  store i8* %70, i8** %49, align 8
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.65, i64 0, i64 0), i8** %50, align 8
  %71 = call noalias i8* @malloc(i64 100) #8
  store i8* %71, i8** %51, align 8
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %73 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %72, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.1.66, i64 0, i64 0))
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %75 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %74, i8* getelementptr inbounds ([174 x i8], [174 x i8]* @.str.2.67, i64 0, i64 0))
  store i32 0, i32* @headerlength, align 4
  call void @init_idctref()
  store i32 0, i32* @advanced, align 4
  store i32 0, i32* @syntax_arith_coding, align 4
  %76 = load %struct.pict*, %struct.pict** %11, align 8
  %77 = getelementptr inbounds %struct.pict, %struct.pict* %76, i32 0, i32 9
  store i32 0, i32* %77, align 4
  store i32 0, i32* @mv_outside_frame, align 4
  store i32 0, i32* @long_vectors, align 4
  store i32 0, i32* @pb_frames, align 4
  store i32 10, i32* %39, align 4
  store i32 10, i32* %40, align 4
  %78 = load %struct.pict*, %struct.pict** %11, align 8
  %79 = getelementptr inbounds %struct.pict, %struct.pict* %78, i32 0, i32 17
  store i32 2, i32* %79, align 4
  %80 = load %struct.pict*, %struct.pict** %11, align 8
  %81 = getelementptr inbounds %struct.pict, %struct.pict* %80, i32 0, i32 6
  store i32 2, i32* %81, align 4
  store float 3.000000e+01, float* %16, align 4
  store i32 3, i32* %36, align 4
  store i32 1, i32* %37, align 4
  %82 = load %struct.pict*, %struct.pict** %11, align 8
  %83 = getelementptr inbounds %struct.pict, %struct.pict* %82, i32 0, i32 5
  store float 1.000000e+01, float* %83, align 4
  %84 = load i8*, i8** %47, align 8
  %85 = getelementptr inbounds i8, i8* %84, i64 0
  store i8 0, i8* %85, align 1
  %86 = load i8*, i8** %48, align 8
  %87 = call i8* @strcpy(i8* %86, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3.68, i64 0, i64 0)) #8
  %88 = load i8*, i8** %49, align 8
  %89 = call i8* @strcpy(i8* %88, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4.69, i64 0, i64 0)) #8
  store i32 0, i32* %34, align 4
  store i32 0, i32* @trace, align 4
  store i32 0, i32* %28, align 4
  %90 = load %struct.pict*, %struct.pict** %11, align 8
  %91 = getelementptr inbounds %struct.pict, %struct.pict* %90, i32 0, i32 14
  store i32 15, i32* %91, align 4
  %92 = load %struct.pict*, %struct.pict** %11, align 8
  %93 = getelementptr inbounds %struct.pict, %struct.pict* %92, i32 0, i32 15
  store i32 0, i32* %93, align 4
  store i32 0, i32* %31, align 4
  store i32 0, i32* %32, align 4
  store i32 0, i32* %22, align 4
  store i32 0, i32* %23, align 4
  store i32 0, i32* %25, align 4
  store i32 0, i32* %24, align 4
  store i32 0, i32* %20, align 4
  %94 = load %struct.pict*, %struct.pict** %11, align 8
  %95 = getelementptr inbounds %struct.pict, %struct.pict* %94, i32 0, i32 10
  store i32 0, i32* %95, align 4
  store i32 1, i32* %27, align 4
  store i32 1, i32* %26, align 4
  %96 = load %struct.pict*, %struct.pict** %11, align 8
  %97 = getelementptr inbounds %struct.pict, %struct.pict* %96, i32 0, i32 2
  store i32 0, i32* %97, align 4
  %98 = load %struct.pict*, %struct.pict** %11, align 8
  %99 = getelementptr inbounds %struct.pict, %struct.pict* %98, i32 0, i32 19
  store float 0.000000e+00, float* %99, align 4
  store i32 1, i32* %14, align 4
  br label %100

100:                                              ; preds = %354, %2
  %101 = load i32, i32* %14, align 4
  %102 = load i32, i32* %3, align 4
  %103 = icmp slt i32 %101, %102
  br i1 %103, label %104, label %357

104:                                              ; preds = %100
  %105 = load i8**, i8*** %4, align 8
  %106 = load i32, i32* %14, align 4
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i8*, i8** %105, i64 %107
  %109 = load i8*, i8** %108, align 8
  %110 = load i8, i8* %109, align 1
  %111 = sext i8 %110 to i32
  %112 = icmp eq i32 %111, 45
  br i1 %112, label %113, label %353

113:                                              ; preds = %104
  %114 = load i8**, i8*** %4, align 8
  %115 = load i32, i32* %14, align 4
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds i8*, i8** %114, i64 %116
  %118 = load i8*, i8** %117, align 8
  %119 = getelementptr inbounds i8, i8* %118, i32 1
  store i8* %119, i8** %117, align 8
  %120 = load i8, i8* %119, align 1
  %121 = sext i8 %120 to i32
  switch i32 %121, label %342 [
    i32 97, label %122
    i32 98, label %130
    i32 83, label %138
    i32 79, label %147
    i32 115, label %156
    i32 111, label %166
    i32 101, label %175
    i32 109, label %183
    i32 105, label %184
    i32 113, label %193
    i32 73, label %229
    i32 119, label %265
    i32 66, label %266
    i32 104, label %275
    i32 72, label %276
    i32 116, label %277
    i32 103, label %278
    i32 68, label %288
    i32 69, label %291
    i32 70, label %292
    i32 71, label %293
    i32 81, label %294
    i32 114, label %304
    i32 82, label %312
    i32 90, label %323
    i32 120, label %332
  ]

122:                                              ; preds = %113
  %123 = load i8**, i8*** %4, align 8
  %124 = load i32, i32* %14, align 4
  %125 = add nsw i32 %124, 1
  store i32 %125, i32* %14, align 4
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds i8*, i8** %123, i64 %126
  %128 = load i8*, i8** %127, align 8
  %129 = call i32 @atoi(i8* %128) #10
  store i32 %129, i32* %31, align 4
  br label %352

130:                                              ; preds = %113
  %131 = load i8**, i8*** %4, align 8
  %132 = load i32, i32* %14, align 4
  %133 = add nsw i32 %132, 1
  store i32 %133, i32* %14, align 4
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds i8*, i8** %131, i64 %134
  %136 = load i8*, i8** %135, align 8
  %137 = call i32 @atoi(i8* %136) #10
  store i32 %137, i32* %32, align 4
  br label %352

138:                                              ; preds = %113
  %139 = load i8**, i8*** %4, align 8
  %140 = load i32, i32* %14, align 4
  %141 = add nsw i32 %140, 1
  store i32 %141, i32* %14, align 4
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds i8*, i8** %139, i64 %142
  %144 = load i8*, i8** %143, align 8
  %145 = call i32 @atoi(i8* %144) #10
  %146 = add nsw i32 %145, 1
  store i32 %146, i32* %36, align 4
  br label %352

147:                                              ; preds = %113
  %148 = load i8**, i8*** %4, align 8
  %149 = load i32, i32* %14, align 4
  %150 = add nsw i32 %149, 1
  store i32 %150, i32* %14, align 4
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds i8*, i8** %148, i64 %151
  %153 = load i8*, i8** %152, align 8
  %154 = call i32 @atoi(i8* %153) #10
  %155 = add nsw i32 %154, 1
  store i32 %155, i32* %37, align 4
  br label %352

156:                                              ; preds = %113
  %157 = load i8**, i8*** %4, align 8
  %158 = load i32, i32* %14, align 4
  %159 = add nsw i32 %158, 1
  store i32 %159, i32* %14, align 4
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds i8*, i8** %157, i64 %160
  %162 = load i8*, i8** %161, align 8
  %163 = call i32 @atoi(i8* %162) #10
  %164 = load %struct.pict*, %struct.pict** %11, align 8
  %165 = getelementptr inbounds %struct.pict, %struct.pict* %164, i32 0, i32 14
  store i32 %163, i32* %165, align 4
  br label %352

166:                                              ; preds = %113
  %167 = load i8*, i8** %49, align 8
  %168 = load i8**, i8*** %4, align 8
  %169 = load i32, i32* %14, align 4
  %170 = add nsw i32 %169, 1
  store i32 %170, i32* %14, align 4
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds i8*, i8** %168, i64 %171
  %173 = load i8*, i8** %172, align 8
  %174 = call i8* @strcpy(i8* %167, i8* %173) #8
  br label %352

175:                                              ; preds = %113
  %176 = load i8**, i8*** %4, align 8
  %177 = load i32, i32* %14, align 4
  %178 = add nsw i32 %177, 1
  store i32 %178, i32* %14, align 4
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds i8*, i8** %176, i64 %179
  %181 = load i8*, i8** %180, align 8
  %182 = call i32 @atoi(i8* %181) #10
  store i32 %182, i32* @headerlength, align 4
  br label %352

183:                                              ; preds = %113
  store i32 1, i32* %28, align 4
  br label %352

184:                                              ; preds = %113
  %185 = load i8*, i8** %47, align 8
  %186 = load i8**, i8*** %4, align 8
  %187 = load i32, i32* %14, align 4
  %188 = add nsw i32 %187, 1
  store i32 %188, i32* %14, align 4
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds i8*, i8** %186, i64 %189
  %191 = load i8*, i8** %190, align 8
  %192 = call i8* @strcpy(i8* %185, i8* %191) #8
  br label %352

193:                                              ; preds = %113
  %194 = load i8**, i8*** %4, align 8
  %195 = load i32, i32* %14, align 4
  %196 = add nsw i32 %195, 1
  store i32 %196, i32* %14, align 4
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds i8*, i8** %194, i64 %197
  %199 = load i8*, i8** %198, align 8
  %200 = call i32 @atoi(i8* %199) #10
  store i32 %200, i32* %39, align 4
  %201 = load i32, i32* %39, align 4
  %202 = icmp sgt i32 %201, 31
  br i1 %202, label %206, label %203

203:                                              ; preds = %193
  %204 = load i32, i32* %39, align 4
  %205 = icmp slt i32 %204, 0
  br i1 %205, label %206, label %228

206:                                              ; preds = %203, %193
  %207 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %208 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %207, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5.70, i64 0, i64 0))
  %209 = load i32, i32* %39, align 4
  %210 = icmp sgt i32 0, %209
  br i1 %210, label %211, label %212

211:                                              ; preds = %206
  br label %214

212:                                              ; preds = %206
  %213 = load i32, i32* %39, align 4
  br label %214

214:                                              ; preds = %212, %211
  %215 = phi i32 [ 0, %211 ], [ %213, %212 ]
  %216 = icmp slt i32 31, %215
  br i1 %216, label %217, label %218

217:                                              ; preds = %214
  br label %226

218:                                              ; preds = %214
  %219 = load i32, i32* %39, align 4
  %220 = icmp sgt i32 0, %219
  br i1 %220, label %221, label %222

221:                                              ; preds = %218
  br label %224

222:                                              ; preds = %218
  %223 = load i32, i32* %39, align 4
  br label %224

224:                                              ; preds = %222, %221
  %225 = phi i32 [ 0, %221 ], [ %223, %222 ]
  br label %226

226:                                              ; preds = %224, %217
  %227 = phi i32 [ 31, %217 ], [ %225, %224 ]
  store i32 %227, i32* %39, align 4
  br label %228

228:                                              ; preds = %226, %203
  br label %352

229:                                              ; preds = %113
  %230 = load i8**, i8*** %4, align 8
  %231 = load i32, i32* %14, align 4
  %232 = add nsw i32 %231, 1
  store i32 %232, i32* %14, align 4
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds i8*, i8** %230, i64 %233
  %235 = load i8*, i8** %234, align 8
  %236 = call i32 @atoi(i8* %235) #10
  store i32 %236, i32* %40, align 4
  %237 = load i32, i32* %40, align 4
  %238 = icmp sgt i32 %237, 31
  br i1 %238, label %242, label %239

239:                                              ; preds = %229
  %240 = load i32, i32* %40, align 4
  %241 = icmp slt i32 %240, 0
  br i1 %241, label %242, label %264

242:                                              ; preds = %239, %229
  %243 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %244 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %243, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5.70, i64 0, i64 0))
  %245 = load i32, i32* %40, align 4
  %246 = icmp sgt i32 0, %245
  br i1 %246, label %247, label %248

247:                                              ; preds = %242
  br label %250

248:                                              ; preds = %242
  %249 = load i32, i32* %40, align 4
  br label %250

250:                                              ; preds = %248, %247
  %251 = phi i32 [ 0, %247 ], [ %249, %248 ]
  %252 = icmp slt i32 31, %251
  br i1 %252, label %253, label %254

253:                                              ; preds = %250
  br label %262

254:                                              ; preds = %250
  %255 = load i32, i32* %40, align 4
  %256 = icmp sgt i32 0, %255
  br i1 %256, label %257, label %258

257:                                              ; preds = %254
  br label %260

258:                                              ; preds = %254
  %259 = load i32, i32* %40, align 4
  br label %260

260:                                              ; preds = %258, %257
  %261 = phi i32 [ 0, %257 ], [ %259, %258 ]
  br label %262

262:                                              ; preds = %260, %253
  %263 = phi i32 [ 31, %253 ], [ %261, %260 ]
  store i32 %263, i32* %40, align 4
  br label %264

264:                                              ; preds = %262, %239
  br label %352

265:                                              ; preds = %113
  store i32 1, i32* %34, align 4
  br label %352

266:                                              ; preds = %113
  %267 = load i8*, i8** %48, align 8
  %268 = load i8**, i8*** %4, align 8
  %269 = load i32, i32* %14, align 4
  %270 = add nsw i32 %269, 1
  store i32 %270, i32* %14, align 4
  %271 = sext i32 %270 to i64
  %272 = getelementptr inbounds i8*, i8** %268, i64 %271
  %273 = load i8*, i8** %272, align 8
  %274 = call i8* @strcpy(i8* %267, i8* %273) #8
  br label %352

275:                                              ; preds = %113
  call void @Help()
  call void @exit(i32 0) #9
  unreachable

276:                                              ; preds = %113
  call void @AdvancedHelp()
  call void @exit(i32 0) #9
  unreachable

277:                                              ; preds = %113
  store i32 1, i32* @trace, align 4
  br label %352

278:                                              ; preds = %113
  %279 = load i8**, i8*** %4, align 8
  %280 = load i32, i32* %14, align 4
  %281 = add nsw i32 %280, 1
  store i32 %281, i32* %14, align 4
  %282 = sext i32 %281 to i64
  %283 = getelementptr inbounds i8*, i8** %279, i64 %282
  %284 = load i8*, i8** %283, align 8
  %285 = call i32 @atoi(i8* %284) #10
  %286 = load %struct.pict*, %struct.pict** %11, align 8
  %287 = getelementptr inbounds %struct.pict, %struct.pict* %286, i32 0, i32 15
  store i32 %285, i32* %287, align 4
  br label %352

288:                                              ; preds = %113
  %289 = load %struct.pict*, %struct.pict** %11, align 8
  %290 = getelementptr inbounds %struct.pict, %struct.pict* %289, i32 0, i32 9
  store i32 1, i32* %290, align 4
  store i32 1, i32* @mv_outside_frame, align 4
  store i32 1, i32* @long_vectors, align 4
  br label %352

291:                                              ; preds = %113
  store i32 1, i32* @syntax_arith_coding, align 4
  br label %352

292:                                              ; preds = %113
  store i32 1, i32* @advanced, align 4
  store i32 1, i32* @mv_outside_frame, align 4
  br label %352

293:                                              ; preds = %113
  store i32 1, i32* @pb_frames, align 4
  br label %352

294:                                              ; preds = %113
  %295 = load i8**, i8*** %4, align 8
  %296 = load i32, i32* %14, align 4
  %297 = add nsw i32 %296, 1
  store i32 %297, i32* %14, align 4
  %298 = sext i32 %297 to i64
  %299 = getelementptr inbounds i8*, i8** %295, i64 %298
  %300 = load i8*, i8** %299, align 8
  %301 = call i32 @atoi(i8* %300) #10
  %302 = load %struct.pict*, %struct.pict** %11, align 8
  %303 = getelementptr inbounds %struct.pict, %struct.pict* %302, i32 0, i32 17
  store i32 %301, i32* %303, align 4
  br label %352

304:                                              ; preds = %113
  %305 = load i8**, i8*** %4, align 8
  %306 = load i32, i32* %14, align 4
  %307 = add nsw i32 %306, 1
  store i32 %307, i32* %14, align 4
  %308 = sext i32 %307 to i64
  %309 = getelementptr inbounds i8*, i8** %305, i64 %308
  %310 = load i8*, i8** %309, align 8
  %311 = call i32 @atoi(i8* %310) #10
  store i32 %311, i32* %22, align 4
  br label %352

312:                                              ; preds = %113
  %313 = load i8**, i8*** %4, align 8
  %314 = load i32, i32* %14, align 4
  %315 = add nsw i32 %314, 1
  store i32 %315, i32* %14, align 4
  %316 = sext i32 %315 to i64
  %317 = getelementptr inbounds i8*, i8** %313, i64 %316
  %318 = load i8*, i8** %317, align 8
  %319 = call double @atof(i8* %318) #10
  %320 = fptrunc double %319 to float
  %321 = load %struct.pict*, %struct.pict** %11, align 8
  %322 = getelementptr inbounds %struct.pict, %struct.pict* %321, i32 0, i32 5
  store float %320, float* %322, align 4
  br label %352

323:                                              ; preds = %113
  %324 = load i8**, i8*** %4, align 8
  %325 = load i32, i32* %14, align 4
  %326 = add nsw i32 %325, 1
  store i32 %326, i32* %14, align 4
  %327 = sext i32 %326 to i64
  %328 = getelementptr inbounds i8*, i8** %324, i64 %327
  %329 = load i8*, i8** %328, align 8
  %330 = call i32 @atoi(i8* %329) #10
  %331 = sitofp i32 %330 to float
  store float %331, float* %16, align 4
  br label %352

332:                                              ; preds = %113
  %333 = load i8**, i8*** %4, align 8
  %334 = load i32, i32* %14, align 4
  %335 = add nsw i32 %334, 1
  store i32 %335, i32* %14, align 4
  %336 = sext i32 %335 to i64
  %337 = getelementptr inbounds i8*, i8** %333, i64 %336
  %338 = load i8*, i8** %337, align 8
  %339 = call i32 @atoi(i8* %338) #10
  %340 = load %struct.pict*, %struct.pict** %11, align 8
  %341 = getelementptr inbounds %struct.pict, %struct.pict* %340, i32 0, i32 6
  store i32 %339, i32* %341, align 4
  br label %352

342:                                              ; preds = %113
  %343 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %344 = load i8**, i8*** %4, align 8
  %345 = load i32, i32* %14, align 4
  %346 = sext i32 %345 to i64
  %347 = getelementptr inbounds i8*, i8** %344, i64 %346
  %348 = load i8*, i8** %347, align 8
  %349 = load i8, i8* %348, align 1
  %350 = sext i8 %349 to i32
  %351 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %343, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6.71, i64 0, i64 0), i32 %350)
  call void @Help()
  call void @exit(i32 -1) #9
  unreachable

352:                                              ; preds = %332, %323, %312, %304, %294, %293, %292, %291, %288, %278, %277, %266, %265, %264, %228, %184, %183, %175, %166, %156, %147, %138, %130, %122
  br label %353

353:                                              ; preds = %352, %104
  br label %354

354:                                              ; preds = %353
  %355 = load i32, i32* %14, align 4
  %356 = add nsw i32 %355, 1
  store i32 %356, i32* %14, align 4
  br label %100

357:                                              ; preds = %100
  %358 = load %struct.pict*, %struct.pict** %11, align 8
  %359 = getelementptr inbounds %struct.pict, %struct.pict* %358, i32 0, i32 6
  %360 = load i32, i32* %359, align 4
  switch i32 %360, label %376 [
    i32 1, label %361
    i32 2, label %364
    i32 3, label %367
    i32 4, label %370
    i32 5, label %373
  ]

361:                                              ; preds = %357
  %362 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %363 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %362, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.7.72, i64 0, i64 0))
  store i32 128, i32* @pels, align 4
  store i32 96, i32* @lines, align 4
  br label %379

364:                                              ; preds = %357
  %365 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %366 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %365, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.8.73, i64 0, i64 0))
  store i32 176, i32* @pels, align 4
  store i32 144, i32* @lines, align 4
  br label %379

367:                                              ; preds = %357
  %368 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %369 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %368, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9.74, i64 0, i64 0))
  store i32 352, i32* @pels, align 4
  store i32 288, i32* @lines, align 4
  br label %379

370:                                              ; preds = %357
  %371 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %372 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %371, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.10.75, i64 0, i64 0))
  store i32 704, i32* @pels, align 4
  store i32 576, i32* @lines, align 4
  br label %379

373:                                              ; preds = %357
  %374 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %375 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %374, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.11.76, i64 0, i64 0))
  store i32 1408, i32* @pels, align 4
  store i32 1152, i32* @lines, align 4
  br label %379

376:                                              ; preds = %357
  %377 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %378 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %377, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12.77, i64 0, i64 0))
  call void @exit(i32 -1) #9
  unreachable

379:                                              ; preds = %373, %370, %367, %364, %361
  %380 = load i32, i32* @pels, align 4
  %381 = sdiv i32 %380, 2
  store i32 %381, i32* @cpels, align 4
  %382 = load i8*, i8** %47, align 8
  %383 = getelementptr inbounds i8, i8* %382, i64 0
  %384 = load i8, i8* %383, align 1
  %385 = sext i8 %384 to i32
  %386 = icmp eq i32 %385, 0
  br i1 %386, label %387, label %390

387:                                              ; preds = %379
  %388 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %389 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %388, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.13.78, i64 0, i64 0))
  call void @Help()
  call void @exit(i32 -1) #9
  unreachable

390:                                              ; preds = %379
  %391 = load i32, i32* %22, align 4
  %392 = load %struct.pict*, %struct.pict** %11, align 8
  %393 = getelementptr inbounds %struct.pict, %struct.pict* %392, i32 0, i32 3
  store i32 %391, i32* %393, align 4
  %394 = load float, float* %16, align 4
  %395 = load i32, i32* %37, align 4
  %396 = sitofp i32 %395 to float
  %397 = fdiv float %394, %396
  %398 = fptosi float %397 to i32
  %399 = load %struct.pict*, %struct.pict** %11, align 8
  %400 = getelementptr inbounds %struct.pict, %struct.pict* %399, i32 0, i32 4
  store i32 %398, i32* %400, align 4
  %401 = load %struct.pict*, %struct.pict** %11, align 8
  %402 = getelementptr inbounds %struct.pict, %struct.pict* %401, i32 0, i32 4
  %403 = load i32, i32* %402, align 4
  %404 = sitofp i32 %403 to float
  %405 = fdiv float 1.000000e+00, %404
  store float %405, float* %52, align 4
  call void (...) bitcast (void ()* @InitializeRateControl to void (...)*)()
  %406 = load i32, i32* %39, align 4
  %407 = icmp eq i32 %406, 0
  br i1 %407, label %411, label %408

408:                                              ; preds = %390
  %409 = load i32, i32* %40, align 4
  %410 = icmp eq i32 %409, 0
  br i1 %410, label %411, label %416

411:                                              ; preds = %408, %390
  %412 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %413 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %412, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14.79, i64 0, i64 0))
  %414 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %415 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %414, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.15.80, i64 0, i64 0))
  br label %416

416:                                              ; preds = %411, %408
  %417 = load float, float* %16, align 4
  %418 = fpext float %417 to double
  %419 = fcmp une double %418, 2.500000e+01
  br i1 %419, label %420, label %427

420:                                              ; preds = %416
  %421 = load float, float* %16, align 4
  %422 = fpext float %421 to double
  %423 = fcmp une double %422, 3.000000e+01
  br i1 %423, label %424, label %427

424:                                              ; preds = %420
  %425 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %426 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %425, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.16.81, i64 0, i64 0))
  br label %427

427:                                              ; preds = %424, %420, %416
  %428 = load float, float* %16, align 4
  %429 = load i32, i32* %37, align 4
  %430 = load i32, i32* %36, align 4
  %431 = mul nsw i32 %429, %430
  %432 = sitofp i32 %431 to float
  %433 = fdiv float %428, %432
  store float %433, float* %17, align 4
  %434 = load %struct.pict*, %struct.pict** %11, align 8
  %435 = getelementptr inbounds %struct.pict, %struct.pict* %434, i32 0, i32 3
  %436 = load i32, i32* %435, align 4
  %437 = icmp eq i32 %436, 0
  br i1 %437, label %438, label %443

438:                                              ; preds = %427
  %439 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %440 = load float, float* %17, align 4
  %441 = fpext float %440 to double
  %442 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %439, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.17.82, i64 0, i64 0), double %441)
  br label %446

443:                                              ; preds = %427
  %444 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %445 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %444, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.18.83, i64 0, i64 0))
  br label %446

446:                                              ; preds = %443, %438
  %447 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %448 = load float, float* %16, align 4
  %449 = fpext float %448 to double
  %450 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %447, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.19.84, i64 0, i64 0), double %449)
  %451 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %452 = load float, float* %16, align 4
  %453 = load i32, i32* %37, align 4
  %454 = sitofp i32 %453 to float
  %455 = fdiv float %452, %454
  %456 = fpext float %455 to double
  %457 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %451, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.20.85, i64 0, i64 0), double %456)
  %458 = load i8*, i8** %48, align 8
  %459 = call %struct._IO_FILE* @fopen(i8* %458, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21.86, i64 0, i64 0))
  store %struct._IO_FILE* %459, %struct._IO_FILE** @streamfile, align 8
  %460 = load i8*, i8** %48, align 8
  %461 = icmp eq i8* %460, null
  br i1 %461, label %462, label %465

462:                                              ; preds = %446
  %463 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %464 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %463, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.22.87, i64 0, i64 0))
  call void @exit(i32 -1) #9
  unreachable

465:                                              ; preds = %446
  call void (...) bitcast (void ()* @initbits to void (...)*)()
  %466 = load i32, i32* @trace, align 4
  %467 = icmp ne i32 %466, 0
  br i1 %467, label %468, label %478

468:                                              ; preds = %465
  %469 = load i8*, i8** %51, align 8
  %470 = call i8* @strcpy(i8* %469, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23.88, i64 0, i64 0)) #8
  %471 = load i8*, i8** %51, align 8
  %472 = call %struct._IO_FILE* @fopen(i8* %471, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24.89, i64 0, i64 0))
  store %struct._IO_FILE* %472, %struct._IO_FILE** @tf, align 8
  %473 = icmp eq %struct._IO_FILE* %472, null
  br i1 %473, label %474, label %477

474:                                              ; preds = %468
  %475 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %476 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %475, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.25.90, i64 0, i64 0))
  call void @exit(i32 -1) #9
  unreachable

477:                                              ; preds = %468
  br label %478

478:                                              ; preds = %477, %465
  %479 = load i8*, i8** %49, align 8
  %480 = call %struct._IO_FILE* @fopen(i8* %479, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21.86, i64 0, i64 0))
  store %struct._IO_FILE* %480, %struct._IO_FILE** %13, align 8
  %481 = icmp eq %struct._IO_FILE* %480, null
  br i1 %481, label %482, label %486

482:                                              ; preds = %478
  %483 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %484 = load i8*, i8** %49, align 8
  %485 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %483, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.26.91, i64 0, i64 0), i8* %484)
  call void @exit(i32 -1) #9
  unreachable

486:                                              ; preds = %478
  %487 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8
  %488 = call i32 @fclose(%struct._IO_FILE* %487)
  br label %489

489:                                              ; preds = %486
  %490 = load i32, i32* %34, align 4
  %491 = icmp ne i32 %490, 0
  br i1 %491, label %492, label %504

492:                                              ; preds = %489
  %493 = load i8*, i8** %50, align 8
  %494 = call %struct._IO_FILE* @fopen(i8* %493, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21.86, i64 0, i64 0))
  store %struct._IO_FILE* %494, %struct._IO_FILE** %13, align 8
  %495 = icmp eq %struct._IO_FILE* %494, null
  br i1 %495, label %496, label %500

496:                                              ; preds = %492
  %497 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %498 = load i8*, i8** %50, align 8
  %499 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %497, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.27.92, i64 0, i64 0), i8* %498)
  call void @exit(i32 -1) #9
  unreachable

500:                                              ; preds = %492
  %501 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8
  %502 = call i32 @fclose(%struct._IO_FILE* %501)
  br label %503

503:                                              ; preds = %500
  br label %504

504:                                              ; preds = %503, %489
  %505 = load i8*, i8** %47, align 8
  %506 = load i32, i32* %31, align 4
  %507 = load i32, i32* @headerlength, align 4
  %508 = call i8* @ReadImage(i8* %505, i32 %506, i32 %507)
  store i8* %508, i8** %12, align 8
  %509 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %510 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %509, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.28.93, i64 0, i64 0))
  %511 = load i8*, i8** %12, align 8
  %512 = call %struct.pict_image* @FillImage(i8* %511)
  store %struct.pict_image* %512, %struct.pict_image** %6, align 8
  %513 = load %struct.pict*, %struct.pict** %11, align 8
  %514 = getelementptr inbounds %struct.pict, %struct.pict* %513, i32 0, i32 7
  store i32 0, i32* %514, align 4
  %515 = load i32, i32* %40, align 4
  %516 = load %struct.pict*, %struct.pict** %11, align 8
  %517 = getelementptr inbounds %struct.pict, %struct.pict* %516, i32 0, i32 11
  store i32 %515, i32* %517, align 4
  %518 = load %struct.pict_image*, %struct.pict_image** %6, align 8
  %519 = load i32, i32* %40, align 4
  %520 = load %struct.bits_counted*, %struct.bits_counted** %41, align 8
  %521 = load %struct.pict*, %struct.pict** %11, align 8
  %522 = call %struct.pict_image* @CodeOneIntra(%struct.pict_image* %518, i32 %519, %struct.bits_counted* %520, %struct.pict* %521)
  store %struct.pict_image* %522, %struct.pict_image** %7, align 8
  %523 = load i32, i32* @arith_used, align 4
  %524 = icmp ne i32 %523, 0
  br i1 %524, label %525, label %531

525:                                              ; preds = %504
  %526 = call i32 (...) bitcast (i32 ()* @encoder_flush to i32 (...)*)()
  %527 = load %struct.bits_counted*, %struct.bits_counted** %41, align 8
  %528 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %527, i32 0, i32 8
  %529 = load i32, i32* %528, align 4
  %530 = add nsw i32 %529, %526
  store i32 %530, i32* %528, align 4
  store i32 0, i32* @arith_used, align 4
  br label %531

531:                                              ; preds = %525, %504
  %532 = call i32 (...) bitcast (i32 ()* @alignbits to i32 (...)*)()
  %533 = load %struct.bits_counted*, %struct.bits_counted** %41, align 8
  %534 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %533, i32 0, i32 8
  %535 = load i32, i32* %534, align 4
  %536 = add nsw i32 %535, %532
  store i32 %536, i32* %534, align 4
  %537 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %538 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %537, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.29.94, i64 0, i64 0))
  %539 = load %struct.pict_image*, %struct.pict_image** %6, align 8
  %540 = load %struct.pict_image*, %struct.pict_image** %7, align 8
  %541 = load %struct.results*, %struct.results** %44, align 8
  %542 = load i32, i32* %34, align 4
  call void @ComputeSNR(%struct.pict_image* %539, %struct.pict_image* %540, %struct.results* %541, i32 %542)
  %543 = load %struct.bits_counted*, %struct.bits_counted** %41, align 8
  call void @AddBitsPicture(%struct.bits_counted* %543)
  %544 = load %struct.results*, %struct.results** %44, align 8
  call void @PrintSNR(%struct.results* %544, i32 1)
  %545 = load %struct.bits_counted*, %struct.bits_counted** %41, align 8
  call void @PrintResult(%struct.bits_counted* %545, i32 1, i32 1)
  %546 = load %struct.bits_counted*, %struct.bits_counted** %43, align 8
  %547 = bitcast %struct.bits_counted* %546 to i8*
  %548 = load %struct.bits_counted*, %struct.bits_counted** %41, align 8
  %549 = bitcast %struct.bits_counted* %548 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %547, i8* align 4 %549, i64 56, i1 false)
  %550 = load %struct.bits_counted*, %struct.bits_counted** %42, align 8
  call void @ZeroBits(%struct.bits_counted* %550)
  %551 = load %struct.results*, %struct.results** %45, align 8
  call void @ZeroRes(%struct.results* %551)
  %552 = load %struct.results*, %struct.results** %46, align 8
  call void @ZeroRes(%struct.results* %552)
  %553 = load i32, i32* %32, align 4
  %554 = load i32, i32* %31, align 4
  %555 = sub nsw i32 %553, %554
  %556 = load i32, i32* %36, align 4
  %557 = add nsw i32 %555, %556
  %558 = load i32, i32* %37, align 4
  %559 = mul nsw i32 %557, %558
  %560 = sitofp i32 %559 to float
  %561 = load float, float* %16, align 4
  %562 = fdiv float %560, %561
  store float %562, float* %18, align 4
  %563 = load i32, i32* @trace, align 4
  %564 = icmp ne i32 %563, 0
  br i1 %564, label %565, label %577

565:                                              ; preds = %531
  %566 = load i8*, i8** %51, align 8
  %567 = call i8* @strcpy(i8* %566, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.30.95, i64 0, i64 0)) #8
  %568 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %569 = call i32 @fclose(%struct._IO_FILE* %568)
  %570 = load i8*, i8** %51, align 8
  %571 = call %struct._IO_FILE* @fopen(i8* %570, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.24.89, i64 0, i64 0))
  store %struct._IO_FILE* %571, %struct._IO_FILE** @tf, align 8
  %572 = icmp eq %struct._IO_FILE* %571, null
  br i1 %572, label %573, label %576

573:                                              ; preds = %565
  %574 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %575 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %574, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.31.96, i64 0, i64 0))
  call void @exit(i32 -1) #9
  unreachable

576:                                              ; preds = %565
  br label %577

577:                                              ; preds = %576, %531
  %578 = load %struct.bits_counted*, %struct.bits_counted** %43, align 8
  %579 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %578, i32 0, i32 10
  %580 = load i32, i32* %579, align 4
  %581 = load float, float* %52, align 4
  %582 = load %struct.pict*, %struct.pict** %11, align 8
  %583 = getelementptr inbounds %struct.pict, %struct.pict* %582, i32 0, i32 3
  %584 = load i32, i32* %583, align 4
  %585 = sitofp i32 %584 to float
  %586 = fmul float %581, %585
  %587 = fptosi float %586 to i32
  %588 = sub nsw i32 %580, %587
  store i32 %588, i32* %53, align 4
  %589 = load %struct.pict*, %struct.pict** %11, align 8
  %590 = getelementptr inbounds %struct.pict, %struct.pict* %589, i32 0, i32 3
  %591 = load i32, i32* %590, align 4
  %592 = icmp eq i32 %591, 0
  br i1 %592, label %593, label %595

593:                                              ; preds = %577
  %594 = load i32, i32* %36, align 4
  store i32 %594, i32* %38, align 4
  br label %619

595:                                              ; preds = %577
  store i32 1, i32* %38, align 4
  br label %596

596:                                              ; preds = %606, %595
  %597 = load float, float* %52, align 4
  %598 = load %struct.pict*, %struct.pict** %11, align 8
  %599 = getelementptr inbounds %struct.pict, %struct.pict* %598, i32 0, i32 3
  %600 = load i32, i32* %599, align 4
  %601 = sitofp i32 %600 to float
  %602 = fmul float %597, %601
  %603 = fptosi float %602 to i32
  %604 = load i32, i32* %53, align 4
  %605 = icmp sle i32 %603, %604
  br i1 %605, label %606, label %618

606:                                              ; preds = %596
  %607 = load float, float* %52, align 4
  %608 = load %struct.pict*, %struct.pict** %11, align 8
  %609 = getelementptr inbounds %struct.pict, %struct.pict* %608, i32 0, i32 3
  %610 = load i32, i32* %609, align 4
  %611 = sitofp i32 %610 to float
  %612 = fmul float %607, %611
  %613 = fptosi float %612 to i32
  %614 = load i32, i32* %53, align 4
  %615 = sub nsw i32 %614, %613
  store i32 %615, i32* %53, align 4
  %616 = load i32, i32* %38, align 4
  %617 = add nsw i32 %616, 1
  store i32 %617, i32* %38, align 4
  br label %596

618:                                              ; preds = %596
  br label %619

619:                                              ; preds = %618, %593
  %620 = load i32, i32* %38, align 4
  store i32 %620, i32* %35, align 4
  %621 = load i32, i32* %35, align 4
  %622 = icmp sgt i32 %621, 256
  br i1 %622, label %623, label %626

623:                                              ; preds = %619
  %624 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %625 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %624, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.32.97, i64 0, i64 0))
  br label %626

626:                                              ; preds = %623, %619
  %627 = load %struct.pict*, %struct.pict** %11, align 8
  %628 = getelementptr inbounds %struct.pict, %struct.pict* %627, i32 0, i32 7
  store i32 1, i32* %628, align 4
  %629 = load i32, i32* %39, align 4
  %630 = load %struct.pict*, %struct.pict** %11, align 8
  %631 = getelementptr inbounds %struct.pict, %struct.pict* %630, i32 0, i32 11
  store i32 %629, i32* %631, align 4
  %632 = load i32, i32* %36, align 4
  store i32 %632, i32* %30, align 4
  %633 = load i32, i32* @pb_frames, align 4
  %634 = icmp ne i32 %633, 0
  br i1 %634, label %635, label %642

635:                                              ; preds = %626
  %636 = load %struct.pict*, %struct.pict** %11, align 8
  %637 = getelementptr inbounds %struct.pict, %struct.pict* %636, i32 0, i32 10
  store i32 0, i32* %637, align 4
  %638 = load i32, i32* %36, align 4
  %639 = mul nsw i32 2, %638
  %640 = load i32, i32* %30, align 4
  %641 = sub nsw i32 %639, %640
  store i32 %641, i32* %29, align 4
  br label %642

642:                                              ; preds = %635, %626
  %643 = load i32, i32* %28, align 4
  %644 = icmp ne i32 %643, 0
  br i1 %644, label %645, label %647

645:                                              ; preds = %642
  %646 = load i32, i32* %36, align 4
  store i32 %646, i32* %27, align 4
  br label %647

647:                                              ; preds = %645, %642
  store i32 0, i32* %14, align 4
  br label %648

648:                                              ; preds = %655, %647
  %649 = load i32, i32* %14, align 4
  %650 = load i32, i32* %27, align 4
  %651 = icmp slt i32 %649, %650
  br i1 %651, label %652, label %658

652:                                              ; preds = %648
  %653 = load %struct.pict_image*, %struct.pict_image** %7, align 8
  %654 = load i8*, i8** %49, align 8
  call void @WriteImage(%struct.pict_image* %653, i8* %654)
  br label %655

655:                                              ; preds = %652
  %656 = load i32, i32* %14, align 4
  %657 = add nsw i32 %656, 1
  store i32 %657, i32* %14, align 4
  br label %648

658:                                              ; preds = %648
  %659 = load i32, i32* %31, align 4
  %660 = load i32, i32* %35, align 4
  %661 = add nsw i32 %659, %660
  store i32 %661, i32* %33, align 4
  br label %662

662:                                              ; preds = %1045, %658
  %663 = load i32, i32* %33, align 4
  %664 = load i32, i32* %32, align 4
  %665 = icmp sle i32 %663, %664
  br i1 %665, label %666, label %1049

666:                                              ; preds = %662
  %667 = load %struct.pict_image*, %struct.pict_image** %6, align 8
  store %struct.pict_image* %667, %struct.pict_image** %5, align 8
  %668 = load %struct.pict_image*, %struct.pict_image** %7, align 8
  store %struct.pict_image* %668, %struct.pict_image** %8, align 8
  %669 = load %struct.pict*, %struct.pict** %11, align 8
  %670 = getelementptr inbounds %struct.pict, %struct.pict* %669, i32 0, i32 11
  %671 = load i32, i32* %670, align 4
  store i32 %671, i32* %39, align 4
  %672 = load i32, i32* %21, align 4
  %673 = icmp ne i32 %672, 0
  br i1 %673, label %764, label %674

674:                                              ; preds = %666
  %675 = load %struct.pict*, %struct.pict** %11, align 8
  %676 = getelementptr inbounds %struct.pict, %struct.pict* %675, i32 0, i32 10
  %677 = load i32, i32* %676, align 4
  %678 = icmp ne i32 %677, 0
  br i1 %678, label %679, label %724

679:                                              ; preds = %674
  %680 = load i32, i32* %38, align 4
  store i32 %680, i32* %30, align 4
  %681 = load i32, i32* %38, align 4
  %682 = mul nsw i32 2, %681
  %683 = load i32, i32* %30, align 4
  %684 = sub nsw i32 %682, %683
  store i32 %684, i32* %29, align 4
  %685 = load i32, i32* %30, align 4
  %686 = load i32, i32* %37, align 4
  %687 = mul nsw i32 %685, %686
  %688 = load %struct.pict*, %struct.pict** %11, align 8
  %689 = getelementptr inbounds %struct.pict, %struct.pict* %688, i32 0, i32 18
  store i32 %687, i32* %689, align 4
  %690 = load %struct.pict*, %struct.pict** %11, align 8
  %691 = getelementptr inbounds %struct.pict, %struct.pict* %690, i32 0, i32 18
  %692 = load i32, i32* %691, align 4
  %693 = icmp sgt i32 %692, 8
  br i1 %693, label %694, label %697

694:                                              ; preds = %679
  %695 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %696 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %695, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.33.98, i64 0, i64 0))
  br label %697

697:                                              ; preds = %694, %679
  %698 = load i8*, i8** %47, align 8
  %699 = load i32, i32* %33, align 4
  %700 = load i32, i32* @headerlength, align 4
  %701 = call i8* @ReadImage(i8* %698, i32 %699, i32 %700)
  store i8* %701, i8** %12, align 8
  %702 = load i8*, i8** %12, align 8
  %703 = call %struct.pict_image* @FillImage(i8* %702)
  store %struct.pict_image* %703, %struct.pict_image** %10, align 8
  store i32 1, i32* %19, align 4
  %704 = load i32, i32* %33, align 4
  %705 = load i32, i32* %29, align 4
  %706 = add nsw i32 %704, %705
  %707 = load i32, i32* %32, align 4
  %708 = icmp sle i32 %706, %707
  br i1 %708, label %709, label %716

709:                                              ; preds = %697
  %710 = load i8*, i8** %47, align 8
  %711 = load i32, i32* %33, align 4
  %712 = load i32, i32* %29, align 4
  %713 = add nsw i32 %711, %712
  %714 = load i32, i32* @headerlength, align 4
  %715 = call i8* @ReadImage(i8* %710, i32 %713, i32 %714)
  store i8* %715, i8** %12, align 8
  br label %723

716:                                              ; preds = %697
  %717 = load %struct.pict*, %struct.pict** %11, align 8
  %718 = getelementptr inbounds %struct.pict, %struct.pict* %717, i32 0, i32 10
  store i32 0, i32* %718, align 4
  %719 = load i8*, i8** %47, align 8
  %720 = load i32, i32* %33, align 4
  %721 = load i32, i32* @headerlength, align 4
  %722 = call i8* @ReadImage(i8* %719, i32 %720, i32 %721)
  store i8* %722, i8** %12, align 8
  br label %723

723:                                              ; preds = %716, %709
  br label %729

724:                                              ; preds = %674
  %725 = load i8*, i8** %47, align 8
  %726 = load i32, i32* %33, align 4
  %727 = load i32, i32* @headerlength, align 4
  %728 = call i8* @ReadImage(i8* %725, i32 %726, i32 %727)
  store i8* %728, i8** %12, align 8
  br label %729

729:                                              ; preds = %724, %723
  %730 = load i8*, i8** %12, align 8
  %731 = call %struct.pict_image* @FillImage(i8* %730)
  store %struct.pict_image* %731, %struct.pict_image** %6, align 8
  %732 = load %struct.pict*, %struct.pict** %11, align 8
  %733 = getelementptr inbounds %struct.pict, %struct.pict* %732, i32 0, i32 10
  %734 = load i32, i32* %733, align 4
  %735 = icmp ne i32 %734, 0
  br i1 %735, label %736, label %763

736:                                              ; preds = %729
  %737 = load %struct.pict*, %struct.pict** %11, align 8
  %738 = getelementptr inbounds %struct.pict, %struct.pict* %737, i32 0, i32 18
  %739 = load i32, i32* %738, align 4
  %740 = icmp sgt i32 %739, 8
  br i1 %740, label %752, label %741

741:                                              ; preds = %736
  %742 = load %struct.pict_image*, %struct.pict_image** %6, align 8
  %743 = load %struct.pict_image*, %struct.pict_image** %10, align 8
  %744 = load %struct.pict_image*, %struct.pict_image** %5, align 8
  %745 = load i32, i32* %30, align 4
  %746 = load i32, i32* %29, align 4
  %747 = load %struct.pict*, %struct.pict** %11, align 8
  %748 = getelementptr inbounds %struct.pict, %struct.pict* %747, i32 0, i32 14
  %749 = load i32, i32* %748, align 4
  %750 = call i32 @NextTwoPB(%struct.pict_image* %742, %struct.pict_image* %743, %struct.pict_image* %744, i32 %745, i32 %746, i32 %749)
  %751 = icmp ne i32 %750, 0
  br i1 %751, label %758, label %752

752:                                              ; preds = %741, %736
  %753 = load %struct.pict*, %struct.pict** %11, align 8
  %754 = getelementptr inbounds %struct.pict, %struct.pict* %753, i32 0, i32 10
  store i32 0, i32* %754, align 4
  %755 = load %struct.pict_image*, %struct.pict_image** %6, align 8
  call void @FreeImage(%struct.pict_image* %755)
  %756 = load i32, i32* %30, align 4
  store i32 %756, i32* %38, align 4
  %757 = load %struct.pict_image*, %struct.pict_image** %10, align 8
  store %struct.pict_image* %757, %struct.pict_image** %6, align 8
  store i32 1, i32* %21, align 4
  br label %762

758:                                              ; preds = %741
  %759 = load i32, i32* %29, align 4
  %760 = load i32, i32* %33, align 4
  %761 = add nsw i32 %760, %759
  store i32 %761, i32* %33, align 4
  br label %762

762:                                              ; preds = %758, %752
  br label %763

763:                                              ; preds = %762, %729
  br label %773

764:                                              ; preds = %666
  %765 = load i8*, i8** %47, align 8
  %766 = load i32, i32* %33, align 4
  %767 = load i32, i32* @headerlength, align 4
  %768 = call i8* @ReadImage(i8* %765, i32 %766, i32 %767)
  store i8* %768, i8** %12, align 8
  %769 = load i8*, i8** %12, align 8
  %770 = call %struct.pict_image* @FillImage(i8* %769)
  store %struct.pict_image* %770, %struct.pict_image** %6, align 8
  %771 = load %struct.pict*, %struct.pict** %11, align 8
  %772 = getelementptr inbounds %struct.pict, %struct.pict* %771, i32 0, i32 10
  store i32 0, i32* %772, align 4
  store i32 0, i32* %21, align 4
  br label %773

773:                                              ; preds = %764, %763
  %774 = load i32, i32* %38, align 4
  %775 = load %struct.pict*, %struct.pict** %11, align 8
  %776 = getelementptr inbounds %struct.pict, %struct.pict* %775, i32 0, i32 10
  %777 = load i32, i32* %776, align 4
  %778 = icmp ne i32 %777, 0
  br i1 %778, label %779, label %781

779:                                              ; preds = %773
  %780 = load i32, i32* %29, align 4
  br label %782

781:                                              ; preds = %773
  br label %782

782:                                              ; preds = %781, %779
  %783 = phi i32 [ %780, %779 ], [ 0, %781 ]
  %784 = add nsw i32 %774, %783
  %785 = load i32, i32* %37, align 4
  %786 = mul nsw i32 %784, %785
  %787 = srem i32 %786, 256
  %788 = load %struct.pict*, %struct.pict** %11, align 8
  %789 = getelementptr inbounds %struct.pict, %struct.pict* %788, i32 0, i32 2
  %790 = load i32, i32* %789, align 4
  %791 = add nsw i32 %790, %787
  store i32 %791, i32* %789, align 4
  %792 = load i32, i32* %38, align 4
  %793 = load %struct.pict*, %struct.pict** %11, align 8
  %794 = getelementptr inbounds %struct.pict, %struct.pict* %793, i32 0, i32 10
  %795 = load i32, i32* %794, align 4
  %796 = icmp ne i32 %795, 0
  br i1 %796, label %797, label %799

797:                                              ; preds = %782
  %798 = load i32, i32* %29, align 4
  br label %800

799:                                              ; preds = %782
  br label %800

800:                                              ; preds = %799, %797
  %801 = phi i32 [ %798, %797 ], [ 0, %799 ]
  %802 = add nsw i32 %792, %801
  %803 = icmp sgt i32 %802, 256
  br i1 %803, label %804, label %807

804:                                              ; preds = %800
  %805 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %806 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %805, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.32.97, i64 0, i64 0))
  br label %807

807:                                              ; preds = %804, %800
  %808 = load %struct.pict*, %struct.pict** %11, align 8
  %809 = getelementptr inbounds %struct.pict, %struct.pict* %808, i32 0, i32 10
  %810 = load i32, i32* %809, align 4
  %811 = icmp ne i32 %810, 0
  %812 = zext i1 %811 to i64
  %813 = select i1 %811, i32 2, i32 1
  %814 = load i32, i32* %23, align 4
  %815 = add nsw i32 %814, %813
  store i32 %815, i32* %23, align 4
  %816 = load %struct.pict*, %struct.pict** %11, align 8
  %817 = getelementptr inbounds %struct.pict, %struct.pict* %816, i32 0, i32 10
  %818 = load i32, i32* %817, align 4
  %819 = icmp ne i32 %818, 0
  %820 = zext i1 %819 to i64
  %821 = select i1 %819, i32 1, i32 0
  %822 = load i32, i32* %24, align 4
  %823 = add nsw i32 %822, %821
  store i32 %823, i32* %24, align 4
  %824 = load i32, i32* %25, align 4
  %825 = add nsw i32 %824, 1
  store i32 %825, i32* %25, align 4
  %826 = load %struct.pict*, %struct.pict** %11, align 8
  %827 = getelementptr inbounds %struct.pict, %struct.pict* %826, i32 0, i32 10
  %828 = load i32, i32* %827, align 4
  %829 = icmp ne i32 %828, 0
  br i1 %829, label %830, label %843

830:                                              ; preds = %807
  %831 = load i32, i32* @pels, align 4
  %832 = load i32, i32* @lines, align 4
  %833 = mul nsw i32 %831, %832
  %834 = call %struct.pict_image* @InitImage(i32 %833)
  store %struct.pict_image* %834, %struct.pict_image** %9, align 8
  %835 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %836 = load i32, i32* %33, align 4
  %837 = load i32, i32* %29, align 4
  %838 = sub nsw i32 %836, %837
  %839 = load i32, i32* %33, align 4
  %840 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %835, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.34.99, i64 0, i64 0), i32 %838, i32 %839)
  %841 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %842 = call i32 @fflush(%struct._IO_FILE* %841)
  br label %849

843:                                              ; preds = %807
  %844 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %845 = load i32, i32* %33, align 4
  %846 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %844, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.35.100, i64 0, i64 0), i32 %845)
  %847 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %848 = call i32 @fflush(%struct._IO_FILE* %847)
  br label %849

849:                                              ; preds = %843, %830
  %850 = load i32, i32* @pels, align 4
  %851 = load i32, i32* @lines, align 4
  %852 = mul nsw i32 %850, %851
  %853 = call %struct.pict_image* @InitImage(i32 %852)
  store %struct.pict_image* %853, %struct.pict_image** %7, align 8
  %854 = load %struct.pict_image*, %struct.pict_image** %6, align 8
  %855 = load %struct.pict_image*, %struct.pict_image** %10, align 8
  %856 = load %struct.pict_image*, %struct.pict_image** %5, align 8
  %857 = load %struct.pict_image*, %struct.pict_image** %8, align 8
  %858 = load i32, i32* %39, align 4
  %859 = load i32, i32* %30, align 4
  %860 = load i32, i32* %29, align 4
  %861 = add nsw i32 %859, %860
  %862 = load i32, i32* %37, align 4
  %863 = mul nsw i32 %861, %862
  %864 = load %struct.bits_counted*, %struct.bits_counted** %41, align 8
  %865 = load %struct.pict*, %struct.pict** %11, align 8
  %866 = load %struct.pict_image*, %struct.pict_image** %9, align 8
  %867 = load %struct.pict_image*, %struct.pict_image** %7, align 8
  call void @CodeOneOrTwo(%struct.pict_image* %854, %struct.pict_image* %855, %struct.pict_image* %856, %struct.pict_image* %857, i32 %858, i32 %863, %struct.bits_counted* %864, %struct.pict* %865, %struct.pict_image* %866, %struct.pict_image* %867)
  %868 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %869 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %868, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.36.101, i64 0, i64 0))
  %870 = load i32, i32* %22, align 4
  %871 = icmp ne i32 %870, 0
  br i1 %871, label %872, label %876

872:                                              ; preds = %849
  %873 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %874 = load i32, i32* %39, align 4
  %875 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %873, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.37.102, i64 0, i64 0), i32 %874)
  br label %876

876:                                              ; preds = %872, %849
  %877 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %878 = call i32 @fflush(%struct._IO_FILE* %877)
  %879 = load i32, i32* @arith_used, align 4
  %880 = icmp ne i32 %879, 0
  br i1 %880, label %881, label %887

881:                                              ; preds = %876
  %882 = call i32 (...) bitcast (i32 ()* @encoder_flush to i32 (...)*)()
  %883 = load %struct.bits_counted*, %struct.bits_counted** %41, align 8
  %884 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %883, i32 0, i32 8
  %885 = load i32, i32* %884, align 4
  %886 = add nsw i32 %885, %882
  store i32 %886, i32* %884, align 4
  store i32 0, i32* @arith_used, align 4
  br label %887

887:                                              ; preds = %881, %876
  %888 = call i32 (...) bitcast (i32 ()* @alignbits to i32 (...)*)()
  %889 = load %struct.bits_counted*, %struct.bits_counted** %41, align 8
  %890 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %889, i32 0, i32 8
  %891 = load i32, i32* %890, align 4
  %892 = add nsw i32 %891, %888
  store i32 %892, i32* %890, align 4
  %893 = load %struct.bits_counted*, %struct.bits_counted** %41, align 8
  call void @AddBitsPicture(%struct.bits_counted* %893)
  %894 = load %struct.bits_counted*, %struct.bits_counted** %42, align 8
  %895 = load %struct.bits_counted*, %struct.bits_counted** %41, align 8
  call void @AddBits(%struct.bits_counted* %894, %struct.bits_counted* %895)
  %896 = load %struct.pict*, %struct.pict** %11, align 8
  %897 = getelementptr inbounds %struct.pict, %struct.pict* %896, i32 0, i32 3
  %898 = load i32, i32* %897, align 4
  %899 = icmp ne i32 %898, 0
  br i1 %899, label %900, label %917

900:                                              ; preds = %887
  %901 = load %struct.pict*, %struct.pict** %11, align 8
  %902 = getelementptr inbounds %struct.pict, %struct.pict* %901, i32 0, i32 10
  %903 = load i32, i32* %902, align 4
  %904 = icmp ne i32 %903, 0
  br i1 %904, label %905, label %917

905:                                              ; preds = %900
  %906 = load float, float* %52, align 4
  %907 = load %struct.pict*, %struct.pict** %11, align 8
  %908 = getelementptr inbounds %struct.pict, %struct.pict* %907, i32 0, i32 3
  %909 = load i32, i32* %908, align 4
  %910 = sitofp i32 %909 to float
  %911 = fmul float %906, %910
  %912 = fptosi float %911 to i32
  %913 = load i32, i32* %29, align 4
  %914 = mul nsw i32 %912, %913
  %915 = load i32, i32* %53, align 4
  %916 = sub nsw i32 %915, %914
  store i32 %916, i32* %53, align 4
  br label %917

917:                                              ; preds = %905, %900, %887
  %918 = load %struct.pict*, %struct.pict** %11, align 8
  %919 = getelementptr inbounds %struct.pict, %struct.pict* %918, i32 0, i32 3
  %920 = load i32, i32* %919, align 4
  %921 = icmp ne i32 %920, 0
  br i1 %921, label %922, label %966

922:                                              ; preds = %917
  %923 = load %struct.bits_counted*, %struct.bits_counted** %41, align 8
  %924 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %923, i32 0, i32 10
  %925 = load i32, i32* %924, align 4
  call void @UpdateRateControl(i32 %925)
  %926 = load %struct.bits_counted*, %struct.bits_counted** %41, align 8
  %927 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %926, i32 0, i32 10
  %928 = load i32, i32* %927, align 4
  %929 = load i32, i32* %53, align 4
  %930 = add nsw i32 %929, %928
  store i32 %930, i32* %53, align 4
  store i32 1, i32* %38, align 4
  %931 = load i32, i32* %38, align 4
  %932 = sitofp i32 %931 to float
  %933 = load float, float* %52, align 4
  %934 = fmul float %932, %933
  %935 = load %struct.pict*, %struct.pict** %11, align 8
  %936 = getelementptr inbounds %struct.pict, %struct.pict* %935, i32 0, i32 3
  %937 = load i32, i32* %936, align 4
  %938 = sitofp i32 %937 to float
  %939 = fmul float %934, %938
  %940 = fptosi float %939 to i32
  %941 = load i32, i32* %53, align 4
  %942 = sub nsw i32 %941, %940
  store i32 %942, i32* %53, align 4
  br label %943

943:                                              ; preds = %953, %922
  %944 = load float, float* %52, align 4
  %945 = load %struct.pict*, %struct.pict** %11, align 8
  %946 = getelementptr inbounds %struct.pict, %struct.pict* %945, i32 0, i32 3
  %947 = load i32, i32* %946, align 4
  %948 = sitofp i32 %947 to float
  %949 = fmul float %944, %948
  %950 = fptosi float %949 to i32
  %951 = load i32, i32* %53, align 4
  %952 = icmp sle i32 %950, %951
  br i1 %952, label %953, label %965

953:                                              ; preds = %943
  %954 = load float, float* %52, align 4
  %955 = load %struct.pict*, %struct.pict** %11, align 8
  %956 = getelementptr inbounds %struct.pict, %struct.pict* %955, i32 0, i32 3
  %957 = load i32, i32* %956, align 4
  %958 = sitofp i32 %957 to float
  %959 = fmul float %954, %958
  %960 = fptosi float %959 to i32
  %961 = load i32, i32* %53, align 4
  %962 = sub nsw i32 %961, %960
  store i32 %962, i32* %53, align 4
  %963 = load i32, i32* %38, align 4
  %964 = add nsw i32 %963, 1
  store i32 %964, i32* %38, align 4
  br label %943

965:                                              ; preds = %943
  br label %966

966:                                              ; preds = %965, %917
  %967 = load %struct.pict*, %struct.pict** %11, align 8
  %968 = getelementptr inbounds %struct.pict, %struct.pict* %967, i32 0, i32 10
  %969 = load i32, i32* %968, align 4
  %970 = icmp ne i32 %969, 0
  br i1 %970, label %971, label %1000

971:                                              ; preds = %966
  %972 = load i32, i32* %28, align 4
  %973 = icmp ne i32 %972, 0
  br i1 %973, label %974, label %976

974:                                              ; preds = %971
  %975 = load i32, i32* %29, align 4
  store i32 %975, i32* %26, align 4
  br label %976

976:                                              ; preds = %974, %971
  store i32 0, i32* %14, align 4
  br label %977

977:                                              ; preds = %984, %976
  %978 = load i32, i32* %14, align 4
  %979 = load i32, i32* %26, align 4
  %980 = icmp slt i32 %978, %979
  br i1 %980, label %981, label %987

981:                                              ; preds = %977
  %982 = load %struct.pict_image*, %struct.pict_image** %9, align 8
  %983 = load i8*, i8** %49, align 8
  call void @WriteImage(%struct.pict_image* %982, i8* %983)
  br label %984

984:                                              ; preds = %981
  %985 = load i32, i32* %14, align 4
  %986 = add nsw i32 %985, 1
  store i32 %986, i32* %14, align 4
  br label %977

987:                                              ; preds = %977
  %988 = load %struct.pict_image*, %struct.pict_image** %10, align 8
  %989 = load %struct.pict_image*, %struct.pict_image** %9, align 8
  %990 = load %struct.results*, %struct.results** %44, align 8
  %991 = load i32, i32* %34, align 4
  call void @ComputeSNR(%struct.pict_image* %988, %struct.pict_image* %989, %struct.results* %990, i32 %991)
  %992 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %993 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %992, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.38.103, i64 0, i64 0))
  %994 = load %struct.results*, %struct.results** %46, align 8
  %995 = load %struct.results*, %struct.results** %44, align 8
  %996 = load %struct.pict*, %struct.pict** %11, align 8
  call void @AddRes(%struct.results* %994, %struct.results* %995, %struct.pict* %996)
  %997 = load %struct.results*, %struct.results** %44, align 8
  call void @PrintSNR(%struct.results* %997, i32 1)
  %998 = load %struct.pict_image*, %struct.pict_image** %10, align 8
  call void @FreeImage(%struct.pict_image* %998)
  %999 = load %struct.pict_image*, %struct.pict_image** %9, align 8
  call void @FreeImage(%struct.pict_image* %999)
  br label %1000

1000:                                             ; preds = %987, %966
  %1001 = load i32, i32* %28, align 4
  %1002 = icmp ne i32 %1001, 0
  br i1 %1002, label %1003, label %1012

1003:                                             ; preds = %1000
  %1004 = load i32, i32* @pb_frames, align 4
  %1005 = icmp ne i32 %1004, 0
  br i1 %1005, label %1006, label %1008

1006:                                             ; preds = %1003
  %1007 = load i32, i32* %30, align 4
  br label %1010

1008:                                             ; preds = %1003
  %1009 = load i32, i32* %38, align 4
  br label %1010

1010:                                             ; preds = %1008, %1006
  %1011 = phi i32 [ %1007, %1006 ], [ %1009, %1008 ]
  store i32 %1011, i32* %26, align 4
  br label %1012

1012:                                             ; preds = %1010, %1000
  store i32 0, i32* %14, align 4
  br label %1013

1013:                                             ; preds = %1020, %1012
  %1014 = load i32, i32* %14, align 4
  %1015 = load i32, i32* %26, align 4
  %1016 = icmp slt i32 %1014, %1015
  br i1 %1016, label %1017, label %1023

1017:                                             ; preds = %1013
  %1018 = load %struct.pict_image*, %struct.pict_image** %7, align 8
  %1019 = load i8*, i8** %49, align 8
  call void @WriteImage(%struct.pict_image* %1018, i8* %1019)
  br label %1020

1020:                                             ; preds = %1017
  %1021 = load i32, i32* %14, align 4
  %1022 = add nsw i32 %1021, 1
  store i32 %1022, i32* %14, align 4
  br label %1013

1023:                                             ; preds = %1013
  %1024 = load i32, i32* @pb_frames, align 4
  %1025 = icmp ne i32 %1024, 0
  br i1 %1025, label %1026, label %1029

1026:                                             ; preds = %1023
  %1027 = load %struct.pict*, %struct.pict** %11, align 8
  %1028 = getelementptr inbounds %struct.pict, %struct.pict* %1027, i32 0, i32 10
  store i32 1, i32* %1028, align 4
  br label %1029

1029:                                             ; preds = %1026, %1023
  %1030 = load %struct.pict_image*, %struct.pict_image** %6, align 8
  %1031 = load %struct.pict_image*, %struct.pict_image** %7, align 8
  %1032 = load %struct.results*, %struct.results** %44, align 8
  %1033 = load i32, i32* %34, align 4
  call void @ComputeSNR(%struct.pict_image* %1030, %struct.pict_image* %1031, %struct.results* %1032, i32 %1033)
  %1034 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %1035 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1034, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.39.104, i64 0, i64 0))
  %1036 = load %struct.results*, %struct.results** %45, align 8
  %1037 = load %struct.results*, %struct.results** %44, align 8
  %1038 = load %struct.pict*, %struct.pict** %11, align 8
  call void @AddRes(%struct.results* %1036, %struct.results* %1037, %struct.pict* %1038)
  %1039 = load %struct.results*, %struct.results** %44, align 8
  call void @PrintSNR(%struct.results* %1039, i32 1)
  %1040 = load %struct.bits_counted*, %struct.bits_counted** %41, align 8
  call void @PrintResult(%struct.bits_counted* %1040, i32 1, i32 1)
  %1041 = load %struct.pict_image*, %struct.pict_image** %5, align 8
  call void @FreeImage(%struct.pict_image* %1041)
  %1042 = load %struct.pict_image*, %struct.pict_image** %8, align 8
  call void @FreeImage(%struct.pict_image* %1042)
  %1043 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %1044 = call i32 @fflush(%struct._IO_FILE* %1043)
  br label %1045

1045:                                             ; preds = %1029
  %1046 = load i32, i32* %38, align 4
  %1047 = load i32, i32* %33, align 4
  %1048 = add nsw i32 %1047, %1046
  store i32 %1048, i32* %33, align 4
  br label %662

1049:                                             ; preds = %662
  %1050 = load %struct._IO_FILE*, %struct._IO_FILE** @streamfile, align 8
  %1051 = call i32 @fclose(%struct._IO_FILE* %1050)
  %1052 = load i32, i32* @trace, align 4
  %1053 = icmp ne i32 %1052, 0
  br i1 %1053, label %1054, label %1057

1054:                                             ; preds = %1049
  %1055 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %1056 = call i32 @fclose(%struct._IO_FILE* %1055)
  br label %1057

1057:                                             ; preds = %1054, %1049
  %1058 = load i32, i32* %33, align 4
  %1059 = load i32, i32* %31, align 4
  %1060 = sub nsw i32 %1058, %1059
  %1061 = load i32, i32* %35, align 4
  %1062 = sub nsw i32 %1060, %1061
  store i32 %1062, i32* %20, align 4
  %1063 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %1064 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1063, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.40.105, i64 0, i64 0))
  %1065 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %1066 = load i32, i32* %23, align 4
  %1067 = load i8*, i8** %47, align 8
  %1068 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1065, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.41.106, i64 0, i64 0), i32 %1066, i8* %1067)
  %1069 = load i32, i32* %23, align 4
  %1070 = icmp ne i32 %1069, 0
  br i1 %1070, label %1071, label %1203

1071:                                             ; preds = %1057
  %1072 = load i32, i32* %28, align 4
  %1073 = icmp ne i32 %1072, 0
  br i1 %1073, label %1074, label %1079

1074:                                             ; preds = %1071
  %1075 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %1076 = load i32, i32* %20, align 4
  %1077 = load i32, i32* %27, align 4
  %1078 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1075, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.42.107, i64 0, i64 0), i32 %1076, i32 %1077)
  br label %1079

1079:                                             ; preds = %1074, %1071
  %1080 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %1081 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1080, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.43.108, i64 0, i64 0))
  %1082 = load i32, i32* @pb_frames, align 4
  %1083 = icmp ne i32 %1082, 0
  br i1 %1083, label %1084, label %1093

1084:                                             ; preds = %1079
  %1085 = load i32, i32* %24, align 4
  %1086 = icmp ne i32 %1085, 0
  br i1 %1086, label %1087, label %1093

1087:                                             ; preds = %1084
  %1088 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %1089 = load i32, i32* %24, align 4
  %1090 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1088, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44.109, i64 0, i64 0), i32 %1089)
  %1091 = load %struct.results*, %struct.results** %46, align 8
  %1092 = load i32, i32* %24, align 4
  call void @PrintSNR(%struct.results* %1091, i32 %1092)
  br label %1093

1093:                                             ; preds = %1087, %1084, %1079
  %1094 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %1095 = load i32, i32* %25, align 4
  %1096 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1094, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.45.110, i64 0, i64 0), i32 %1095)
  %1097 = load %struct.results*, %struct.results** %45, align 8
  %1098 = load i32, i32* %25, align 4
  call void @PrintSNR(%struct.results* %1097, i32 %1098)
  %1099 = load %struct.bits_counted*, %struct.bits_counted** %42, align 8
  %1100 = load i32, i32* %25, align 4
  %1101 = load i32, i32* %23, align 4
  call void @PrintResult(%struct.bits_counted* %1099, i32 %1100, i32 %1101)
  %1102 = load i32, i32* %22, align 4
  %1103 = icmp ne i32 %1102, 0
  br i1 %1103, label %1109, label %1104

1104:                                             ; preds = %1093
  %1105 = load %struct.pict*, %struct.pict** %11, align 8
  %1106 = getelementptr inbounds %struct.pict, %struct.pict* %1105, i32 0, i32 3
  %1107 = load i32, i32* %1106, align 4
  %1108 = icmp ne i32 %1107, 0
  br i1 %1108, label %1109, label %1130

1109:                                             ; preds = %1104, %1093
  %1110 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %1111 = load i32, i32* %20, align 4
  %1112 = load i32, i32* %35, align 4
  %1113 = add nsw i32 %1111, %1112
  %1114 = sitofp i32 %1113 to float
  %1115 = load float, float* %16, align 4
  %1116 = fdiv float %1114, %1115
  %1117 = load i32, i32* %37, align 4
  %1118 = sitofp i32 %1117 to float
  %1119 = fmul float %1116, %1118
  %1120 = fpext float %1119 to double
  %1121 = load i32, i32* %20, align 4
  %1122 = sitofp i32 %1121 to float
  %1123 = load float, float* %16, align 4
  %1124 = fdiv float %1122, %1123
  %1125 = load i32, i32* %37, align 4
  %1126 = sitofp i32 %1125 to float
  %1127 = fmul float %1124, %1126
  %1128 = fpext float %1127 to double
  %1129 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1110, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.46.111, i64 0, i64 0), double %1120, double %1128)
  br label %1130

1130:                                             ; preds = %1109, %1104
  %1131 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %1132 = load %struct.results*, %struct.results** %45, align 8
  %1133 = getelementptr inbounds %struct.results, %struct.results* %1132, i32 0, i32 3
  %1134 = load float, float* %1133, align 4
  %1135 = load i32, i32* %25, align 4
  %1136 = sitofp i32 %1135 to float
  %1137 = fdiv float %1134, %1136
  %1138 = fpext float %1137 to double
  %1139 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1131, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.47, i64 0, i64 0), double %1138)
  %1140 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %1141 = load i32, i32* %23, align 4
  %1142 = add nsw i32 %1141, 1
  %1143 = load i32, i32* %23, align 4
  %1144 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1140, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.48, i64 0, i64 0), i32 %1142, i32 %1143)
  %1145 = load i32, i32* %23, align 4
  %1146 = sitofp i32 %1145 to float
  %1147 = load i32, i32* %20, align 4
  %1148 = sitofp i32 %1147 to float
  %1149 = fdiv float %1146, %1148
  %1150 = load float, float* %16, align 4
  %1151 = fmul float %1149, %1150
  %1152 = load i32, i32* %37, align 4
  %1153 = sitofp i32 %1152 to float
  %1154 = fdiv float %1151, %1153
  store float %1154, float* %15, align 4
  %1155 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %1156 = load float, float* %15, align 4
  %1157 = fpext float %1156 to double
  %1158 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1155, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.49, i64 0, i64 0), double %1157)
  %1159 = load i32, i32* %22, align 4
  %1160 = icmp ne i32 %1159, 0
  br i1 %1160, label %1161, label %1167

1161:                                             ; preds = %1130
  %1162 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %1163 = load i32, i32* %22, align 4
  %1164 = sitofp i32 %1163 to double
  %1165 = fdiv double %1164, 1.000000e+03
  %1166 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1162, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.50, i64 0, i64 0), double %1165)
  br label %1167

1167:                                             ; preds = %1161, %1130
  %1168 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %1169 = load %struct.bits_counted*, %struct.bits_counted** %42, align 8
  %1170 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %1169, i32 0, i32 10
  %1171 = load i32, i32* %1170, align 4
  %1172 = load %struct.bits_counted*, %struct.bits_counted** %43, align 8
  %1173 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %1172, i32 0, i32 10
  %1174 = load i32, i32* %1173, align 4
  %1175 = add nsw i32 %1171, %1174
  %1176 = sitofp i32 %1175 to float
  %1177 = load i32, i32* %20, align 4
  %1178 = load i32, i32* %35, align 4
  %1179 = add nsw i32 %1177, %1178
  %1180 = sitofp i32 %1179 to float
  %1181 = load float, float* %16, align 4
  %1182 = fdiv float %1180, %1181
  %1183 = load i32, i32* %37, align 4
  %1184 = sitofp i32 %1183 to float
  %1185 = fmul float %1182, %1184
  %1186 = fdiv float %1176, %1185
  %1187 = fpext float %1186 to double
  %1188 = fdiv double %1187, 1.000000e+03
  %1189 = load %struct.bits_counted*, %struct.bits_counted** %42, align 8
  %1190 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %1189, i32 0, i32 10
  %1191 = load i32, i32* %1190, align 4
  %1192 = sitofp i32 %1191 to float
  %1193 = load i32, i32* %23, align 4
  %1194 = sitofp i32 %1193 to float
  %1195 = fdiv float %1192, %1194
  %1196 = load float, float* %15, align 4
  %1197 = fmul float %1195, %1196
  %1198 = fpext float %1197 to double
  %1199 = fdiv double %1198, 1.000000e+03
  %1200 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1168, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.51, i64 0, i64 0), double %1188, double %1199)
  %1201 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %1202 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1201, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.52, i64 0, i64 0))
  br label %1203

1203:                                             ; preds = %1167, %1057
  %1204 = load %struct.pict_image*, %struct.pict_image** %7, align 8
  call void @FreeImage(%struct.pict_image* %1204)
  %1205 = load %struct.pict_image*, %struct.pict_image** %6, align 8
  call void @FreeImage(%struct.pict_image* %1205)
  %1206 = load i8*, i8** %48, align 8
  call void @free(i8* %1206) #8
  %1207 = load i8*, i8** %47, align 8
  call void @free(i8* %1207) #8
  %1208 = load i8*, i8** %49, align 8
  call void @free(i8* %1208) #8
  %1209 = load i8*, i8** %51, align 8
  call void @free(i8* %1209) #8
  %1210 = load %struct.bits_counted*, %struct.bits_counted** %41, align 8
  %1211 = bitcast %struct.bits_counted* %1210 to i8*
  call void @free(i8* %1211) #8
  %1212 = load %struct.bits_counted*, %struct.bits_counted** %42, align 8
  %1213 = bitcast %struct.bits_counted* %1212 to i8*
  call void @free(i8* %1213) #8
  %1214 = load %struct.bits_counted*, %struct.bits_counted** %43, align 8
  %1215 = bitcast %struct.bits_counted* %1214 to i8*
  call void @free(i8* %1215) #8
  %1216 = load %struct.results*, %struct.results** %44, align 8
  %1217 = bitcast %struct.results* %1216 to i8*
  call void @free(i8* %1217) #8
  %1218 = load %struct.results*, %struct.results** %45, align 8
  %1219 = bitcast %struct.results* %1218 to i8*
  call void @free(i8* %1219) #8
  %1220 = load %struct.results*, %struct.results** %46, align 8
  %1221 = bitcast %struct.results* %1220 to i8*
  call void @free(i8* %1221) #8
  %1222 = load %struct.pict*, %struct.pict** %11, align 8
  %1223 = bitcast %struct.pict* %1222 to i8*
  call void @free(i8* %1223) #8
  call void @exit(i32 0) #9
  unreachable
}

; Function Attrs: nounwind
declare dso_local i8* @strcpy(i8*, i8*) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @atoi(i8*) #6

; Function Attrs: noinline nounwind uwtable
define dso_local void @Help() #0 {
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.55, i64 0, i64 0))
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.56, i64 0, i64 0))
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.57, i64 0, i64 0))
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.58, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4.69, i64 0, i64 0))
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.59, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3.68, i64 0, i64 0))
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.60, i64 0, i64 0), i32 0)
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.61, i64 0, i64 0), i32 0)
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.62, i64 0, i64 0), i32 2)
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.63, i64 0, i64 0), i32 10)
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.64, i64 0, i64 0), i32 10)
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %22 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.65.112, i64 0, i64 0))
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %24 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.66, i64 0, i64 0), i32 2)
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %26 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.67, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.68, i64 0, i64 0))
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.69, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.68, i64 0, i64 0))
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %30 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.68, i64 0, i64 0))
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %32 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %31, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.71, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.68, i64 0, i64 0))
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %34 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.72, i64 0, i64 0))
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %35, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.73, i64 0, i64 0))
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %38 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([83 x i8], [83 x i8]* @.str.74, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @AdvancedHelp() #0 {
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %2 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %1, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.55, i64 0, i64 0))
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %3, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.56, i64 0, i64 0))
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.57, i64 0, i64 0))
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %8 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.58, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4.69, i64 0, i64 0))
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %10 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.59, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3.68, i64 0, i64 0))
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.60, i64 0, i64 0), i32 0)
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.61, i64 0, i64 0), i32 0)
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %16 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %15, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.62, i64 0, i64 0), i32 2)
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.75, i64 0, i64 0))
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %19, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.76, i64 0, i64 0))
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %22 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.77, i64 0, i64 0), i32 15)
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %24 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.63, i64 0, i64 0), i32 10)
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %26 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.64, i64 0, i64 0), i32 10)
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.65.112, i64 0, i64 0))
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %30 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.78, i64 0, i64 0), double 1.000000e+01)
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %32 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %31, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.66, i64 0, i64 0), i32 2)
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %34 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.79, i64 0, i64 0), double 3.000000e+01)
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %35, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.80, i64 0, i64 0), i32 0)
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %38 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.81, i64 0, i64 0), i32 0)
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %40 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %39, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.82, i64 0, i64 0), i32 0)
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %42 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %41, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.83, i64 0, i64 0))
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %44 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %43, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.84, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.68, i64 0, i64 0))
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %46 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %45, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.85, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.68, i64 0, i64 0))
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %48 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %47, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.86, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.68, i64 0, i64 0))
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %50 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %49, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.67, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.68, i64 0, i64 0))
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %52 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %51, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.69, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.68, i64 0, i64 0))
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %54 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %53, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.70, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.68, i64 0, i64 0))
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %56 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %55, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.71, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.68, i64 0, i64 0))
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %58 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %57, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.87, i64 0, i64 0), i32 2)
  %59 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %60 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %59, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.72, i64 0, i64 0))
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %62 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %61, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.73, i64 0, i64 0))
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %64 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %63, i8* getelementptr inbounds ([83 x i8], [83 x i8]* @.str.74, i64 0, i64 0))
  ret void
}

; Function Attrs: nounwind readonly
declare dso_local double @atof(i8*) #6

; Function Attrs: noinline nounwind uwtable
define dso_local void @PrintSNR(%struct.results* %0, i32 %1) #0 {
  %3 = alloca %struct.results*, align 8
  %4 = alloca i32, align 4
  store %struct.results* %0, %struct.results** %3, align 8
  store i32 %1, i32* %4, align 4
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %6 = load %struct.results*, %struct.results** %3, align 8
  %7 = getelementptr inbounds %struct.results, %struct.results* %6, i32 0, i32 0
  %8 = load float, float* %7, align 4
  %9 = load i32, i32* %4, align 4
  %10 = sitofp i32 %9 to float
  %11 = fdiv float %8, %10
  %12 = fpext float %11 to double
  %13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.104, i64 0, i64 0), double %12)
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %15 = load %struct.results*, %struct.results** %3, align 8
  %16 = getelementptr inbounds %struct.results, %struct.results* %15, i32 0, i32 2
  %17 = load float, float* %16, align 4
  %18 = load i32, i32* %4, align 4
  %19 = sitofp i32 %18 to float
  %20 = fdiv float %17, %19
  %21 = fpext float %20 to double
  %22 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.105, i64 0, i64 0), double %21)
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %24 = load %struct.results*, %struct.results** %3, align 8
  %25 = getelementptr inbounds %struct.results, %struct.results* %24, i32 0, i32 1
  %26 = load float, float* %25, align 4
  %27 = load i32, i32* %4, align 4
  %28 = sitofp i32 %27 to float
  %29 = fdiv float %26, %28
  %30 = fpext float %29 to double
  %31 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.106, i64 0, i64 0), double %30)
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %33 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.43.108, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @PrintResult(%struct.bits_counted* %0, i32 %1, i32 %2) #0 {
  %4 = alloca %struct.bits_counted*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store %struct.bits_counted* %0, %struct.bits_counted** %4, align 8
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %8 = load %struct.bits_counted*, %struct.bits_counted** %4, align 8
  %9 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %8, i32 0, i32 13
  %10 = load i32, i32* %9, align 4
  %11 = load i32, i32* %5, align 4
  %12 = sdiv i32 %10, %11
  %13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.88, i64 0, i64 0), i32 %12)
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %15 = load %struct.bits_counted*, %struct.bits_counted** %4, align 8
  %16 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %15, i32 0, i32 11
  %17 = load i32, i32* %16, align 4
  %18 = load i32, i32* %5, align 4
  %19 = sdiv i32 %17, %18
  %20 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %14, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.89, i64 0, i64 0), i32 %19)
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %22 = load %struct.bits_counted*, %struct.bits_counted** %4, align 8
  %23 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %22, i32 0, i32 12
  %24 = load i32, i32* %23, align 4
  %25 = load i32, i32* %5, align 4
  %26 = sdiv i32 %24, %25
  %27 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %21, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.90, i64 0, i64 0), i32 %26)
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %29 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %28, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.43.108, i64 0, i64 0))
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %31 = load %struct.bits_counted*, %struct.bits_counted** %4, align 8
  %32 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %31, i32 0, i32 0
  %33 = load i32, i32* %32, align 4
  %34 = load i32, i32* %6, align 4
  %35 = sdiv i32 %33, %34
  %36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %30, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.91, i64 0, i64 0), i32 %35)
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %38 = load %struct.bits_counted*, %struct.bits_counted** %4, align 8
  %39 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %38, i32 0, i32 1
  %40 = load i32, i32* %39, align 4
  %41 = load i32, i32* %6, align 4
  %42 = sdiv i32 %40, %41
  %43 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.92, i64 0, i64 0), i32 %42)
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %45 = load %struct.bits_counted*, %struct.bits_counted** %4, align 8
  %46 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %45, i32 0, i32 2
  %47 = load i32, i32* %46, align 4
  %48 = load i32, i32* %6, align 4
  %49 = sdiv i32 %47, %48
  %50 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %44, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.93, i64 0, i64 0), i32 %49)
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %52 = load %struct.bits_counted*, %struct.bits_counted** %4, align 8
  %53 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %52, i32 0, i32 3
  %54 = load i32, i32* %53, align 4
  %55 = load i32, i32* %6, align 4
  %56 = sdiv i32 %54, %55
  %57 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %51, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.94, i64 0, i64 0), i32 %56)
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %59 = load %struct.bits_counted*, %struct.bits_counted** %4, align 8
  %60 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %59, i32 0, i32 4
  %61 = load i32, i32* %60, align 4
  %62 = load i32, i32* %6, align 4
  %63 = sdiv i32 %61, %62
  %64 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %58, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.95, i64 0, i64 0), i32 %63)
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %66 = load %struct.bits_counted*, %struct.bits_counted** %4, align 8
  %67 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %66, i32 0, i32 5
  %68 = load i32, i32* %67, align 4
  %69 = load i32, i32* %6, align 4
  %70 = sdiv i32 %68, %69
  %71 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %65, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.96, i64 0, i64 0), i32 %70)
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %73 = load %struct.bits_counted*, %struct.bits_counted** %4, align 8
  %74 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %73, i32 0, i32 6
  %75 = load i32, i32* %74, align 4
  %76 = load i32, i32* %6, align 4
  %77 = sdiv i32 %75, %76
  %78 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %72, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.97, i64 0, i64 0), i32 %77)
  %79 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %80 = load %struct.bits_counted*, %struct.bits_counted** %4, align 8
  %81 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %80, i32 0, i32 7
  %82 = load i32, i32* %81, align 4
  %83 = load i32, i32* %6, align 4
  %84 = sdiv i32 %82, %83
  %85 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %79, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.98, i64 0, i64 0), i32 %84)
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %87 = load %struct.bits_counted*, %struct.bits_counted** %4, align 8
  %88 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %87, i32 0, i32 9
  %89 = load i32, i32* %88, align 4
  %90 = load i32, i32* %6, align 4
  %91 = sdiv i32 %89, %90
  %92 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %86, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.99, i64 0, i64 0), i32 %91)
  %93 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %94 = load %struct.bits_counted*, %struct.bits_counted** %4, align 8
  %95 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %94, i32 0, i32 8
  %96 = load i32, i32* %95, align 4
  %97 = load i32, i32* %6, align 4
  %98 = sdiv i32 %96, %97
  %99 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %93, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.100, i64 0, i64 0), i32 %98)
  %100 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %101 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %100, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.101, i64 0, i64 0))
  %102 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %103 = load %struct.bits_counted*, %struct.bits_counted** %4, align 8
  %104 = getelementptr inbounds %struct.bits_counted, %struct.bits_counted* %103, i32 0, i32 10
  %105 = load i32, i32* %104, align 4
  %106 = load i32, i32* %6, align 4
  %107 = sdiv i32 %105, %106
  %108 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %102, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.102, i64 0, i64 0), i32 %107)
  %109 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %110 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %109, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.103, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @NextTwoPB(%struct.pict_image* %0, %struct.pict_image* %1, %struct.pict_image* %2, i32 %3, i32 %4, i32 %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca %struct.pict_image*, align 8
  %9 = alloca %struct.pict_image*, align 8
  %10 = alloca %struct.pict_image*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca [6 x [73 x [90 x %struct.motionvector*]]], align 16
  %22 = alloca %struct.motionvector*, align 8
  %23 = alloca %struct.motionvector*, align 8
  %24 = alloca %struct.motionvector*, align 8
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca i32, align 4
  store %struct.pict_image* %0, %struct.pict_image** %8, align 8
  store %struct.pict_image* %1, %struct.pict_image** %9, align 8
  store %struct.pict_image* %2, %struct.pict_image** %10, align 8
  store i32 %3, i32* %11, align 4
  store i32 %4, i32* %12, align 4
  store i32 %5, i32* %13, align 4
  store i32 0, i32* %14, align 4
  store i32 0, i32* %15, align 4
  store i32 0, i32* %16, align 4
  %31 = load i32, i32* @advanced, align 4
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %33, label %34

33:                                               ; preds = %6
  store i32 0, i32* @advanced, align 4
  store i32 1, i32* %14, align 4
  br label %34

34:                                               ; preds = %33, %6
  %35 = load i32, i32* @mv_outside_frame, align 4
  %36 = icmp ne i32 %35, 0
  br i1 %36, label %37, label %38

37:                                               ; preds = %34
  store i32 0, i32* @mv_outside_frame, align 4
  store i32 1, i32* %15, align 4
  br label %38

38:                                               ; preds = %37, %34
  %39 = load i32, i32* @long_vectors, align 4
  %40 = icmp ne i32 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %38
  store i32 0, i32* @long_vectors, align 4
  store i32 1, i32* %16, align 4
  br label %42

42:                                               ; preds = %41, %38
  store i32 1, i32* %28, align 4
  br label %43

43:                                               ; preds = %78, %42
  %44 = load i32, i32* %28, align 4
  %45 = load i32, i32* @lines, align 4
  %46 = ashr i32 %45, 4
  %47 = icmp sle i32 %44, %46
  br i1 %47, label %48, label %81

48:                                               ; preds = %43
  store i32 1, i32* %27, align 4
  br label %49

49:                                               ; preds = %74, %48
  %50 = load i32, i32* %27, align 4
  %51 = load i32, i32* @pels, align 4
  %52 = ashr i32 %51, 4
  %53 = icmp sle i32 %50, %52
  br i1 %53, label %54, label %77

54:                                               ; preds = %49
  store i32 0, i32* %29, align 4
  br label %55

55:                                               ; preds = %70, %54
  %56 = load i32, i32* %29, align 4
  %57 = icmp slt i32 %56, 3
  br i1 %57, label %58, label %73

58:                                               ; preds = %55
  %59 = call noalias i8* @calloc(i64 1, i64 24) #8
  %60 = bitcast i8* %59 to %struct.motionvector*
  %61 = load i32, i32* %29, align 4
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %21, i64 0, i64 %62
  %64 = load i32, i32* %28, align 4
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %63, i64 0, i64 %65
  %67 = load i32, i32* %27, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %66, i64 0, i64 %68
  store %struct.motionvector* %60, %struct.motionvector** %69, align 8
  br label %70

70:                                               ; preds = %58
  %71 = load i32, i32* %29, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %29, align 4
  br label %55

73:                                               ; preds = %55
  br label %74

74:                                               ; preds = %73
  %75 = load i32, i32* %27, align 4
  %76 = add nsw i32 %75, 1
  store i32 %76, i32* %27, align 4
  br label %49

77:                                               ; preds = %49
  br label %78

78:                                               ; preds = %77
  %79 = load i32, i32* %28, align 4
  %80 = add nsw i32 %79, 1
  store i32 %80, i32* %28, align 4
  br label %43

81:                                               ; preds = %43
  %82 = call noalias i8* @malloc(i64 24) #8
  %83 = bitcast i8* %82 to %struct.motionvector*
  store %struct.motionvector* %83, %struct.motionvector** %23, align 8
  %84 = call noalias i8* @malloc(i64 24) #8
  %85 = bitcast i8* %84 to %struct.motionvector*
  store %struct.motionvector* %85, %struct.motionvector** %24, align 8
  store i32 0, i32* %20, align 4
  store i32 0, i32* %17, align 4
  store i32 0, i32* %18, align 4
  store i32 0, i32* %19, align 4
  store i32 1, i32* %28, align 4
  br label %86

86:                                               ; preds = %452, %81
  %87 = load i32, i32* %28, align 4
  %88 = load i32, i32* @lines, align 4
  %89 = sdiv i32 %88, 16
  %90 = sub nsw i32 %89, 1
  %91 = icmp slt i32 %87, %90
  br i1 %91, label %92, label %455

92:                                               ; preds = %86
  store i32 1, i32* %27, align 4
  br label %93

93:                                               ; preds = %448, %92
  %94 = load i32, i32* %27, align 4
  %95 = load i32, i32* @pels, align 4
  %96 = sdiv i32 %95, 16
  %97 = sub nsw i32 %96, 1
  %98 = icmp slt i32 %94, %97
  br i1 %98, label %99, label %451

99:                                               ; preds = %93
  %100 = load i32, i32* %27, align 4
  %101 = mul nsw i32 %100, 16
  store i32 %101, i32* %25, align 4
  %102 = load i32, i32* %28, align 4
  %103 = mul nsw i32 %102, 16
  store i32 %103, i32* %26, align 4
  %104 = load %struct.pict_image*, %struct.pict_image** %8, align 8
  %105 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %104, i32 0, i32 0
  %106 = load i8*, i8** %105, align 8
  %107 = load %struct.pict_image*, %struct.pict_image** %10, align 8
  %108 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %107, i32 0, i32 0
  %109 = load i8*, i8** %108, align 8
  %110 = load i32, i32* %25, align 4
  %111 = load i32, i32* %26, align 4
  %112 = load i32, i32* %13, align 4
  %113 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %21, i64 0, i64 0
  call void @MotionEstimation(i8* %106, i8* %109, i32 %110, i32 %111, i32 0, i32 0, i32 %112, [73 x [90 x %struct.motionvector*]]* %113, i32* %30)
  %114 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %21, i64 0, i64 0
  %115 = load i32, i32* %28, align 4
  %116 = add nsw i32 %115, 1
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %114, i64 0, i64 %117
  %119 = load i32, i32* %27, align 4
  %120 = add nsw i32 %119, 1
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %118, i64 0, i64 %121
  %123 = load %struct.motionvector*, %struct.motionvector** %122, align 8
  %124 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %123, i32 0, i32 0
  %125 = load i32, i32* %124, align 4
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %155

127:                                              ; preds = %99
  %128 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %21, i64 0, i64 0
  %129 = load i32, i32* %28, align 4
  %130 = add nsw i32 %129, 1
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %128, i64 0, i64 %131
  %133 = load i32, i32* %27, align 4
  %134 = add nsw i32 %133, 1
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %132, i64 0, i64 %135
  %137 = load %struct.motionvector*, %struct.motionvector** %136, align 8
  %138 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %137, i32 0, i32 1
  %139 = load i32, i32* %138, align 4
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %141, label %155

141:                                              ; preds = %127
  %142 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %21, i64 0, i64 0
  %143 = load i32, i32* %28, align 4
  %144 = add nsw i32 %143, 1
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %142, i64 0, i64 %145
  %147 = load i32, i32* %27, align 4
  %148 = add nsw i32 %147, 1
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %146, i64 0, i64 %149
  %151 = load %struct.motionvector*, %struct.motionvector** %150, align 8
  %152 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %151, i32 0, i32 4
  %153 = load i32, i32* %152, align 4
  %154 = add nsw i32 %153, 100
  store i32 %154, i32* %152, align 4
  br label %155

155:                                              ; preds = %141, %127, %99
  %156 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %21, i64 0, i64 2
  %157 = load i32, i32* %28, align 4
  %158 = add nsw i32 %157, 1
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %156, i64 0, i64 %159
  %161 = load i32, i32* %27, align 4
  %162 = add nsw i32 %161, 1
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %160, i64 0, i64 %163
  %165 = load %struct.motionvector*, %struct.motionvector** %164, align 8
  %166 = bitcast %struct.motionvector* %165 to i8*
  %167 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %21, i64 0, i64 0
  %168 = load i32, i32* %28, align 4
  %169 = add nsw i32 %168, 1
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %167, i64 0, i64 %170
  %172 = load i32, i32* %27, align 4
  %173 = add nsw i32 %172, 1
  %174 = sext i32 %173 to i64
  %175 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %171, i64 0, i64 %174
  %176 = load %struct.motionvector*, %struct.motionvector** %175, align 8
  %177 = bitcast %struct.motionvector* %176 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %166, i8* align 4 %177, i64 24, i1 false)
  %178 = load %struct.pict_image*, %struct.pict_image** %9, align 8
  %179 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %178, i32 0, i32 0
  %180 = load i8*, i8** %179, align 8
  %181 = load %struct.pict_image*, %struct.pict_image** %10, align 8
  %182 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %181, i32 0, i32 0
  %183 = load i8*, i8** %182, align 8
  %184 = load i32, i32* %25, align 4
  %185 = load i32, i32* %26, align 4
  %186 = load i32, i32* %13, align 4
  %187 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %21, i64 0, i64 0
  call void @MotionEstimation(i8* %180, i8* %183, i32 %184, i32 %185, i32 0, i32 0, i32 %186, [73 x [90 x %struct.motionvector*]]* %187, i32* %30)
  %188 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %21, i64 0, i64 0
  %189 = load i32, i32* %28, align 4
  %190 = add nsw i32 %189, 1
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %188, i64 0, i64 %191
  %193 = load i32, i32* %27, align 4
  %194 = add nsw i32 %193, 1
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %192, i64 0, i64 %195
  %197 = load %struct.motionvector*, %struct.motionvector** %196, align 8
  %198 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %197, i32 0, i32 0
  %199 = load i32, i32* %198, align 4
  %200 = icmp eq i32 %199, 0
  br i1 %200, label %201, label %229

201:                                              ; preds = %155
  %202 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %21, i64 0, i64 0
  %203 = load i32, i32* %28, align 4
  %204 = add nsw i32 %203, 1
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %202, i64 0, i64 %205
  %207 = load i32, i32* %27, align 4
  %208 = add nsw i32 %207, 1
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %206, i64 0, i64 %209
  %211 = load %struct.motionvector*, %struct.motionvector** %210, align 8
  %212 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %211, i32 0, i32 1
  %213 = load i32, i32* %212, align 4
  %214 = icmp eq i32 %213, 0
  br i1 %214, label %215, label %229

215:                                              ; preds = %201
  %216 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %21, i64 0, i64 0
  %217 = load i32, i32* %28, align 4
  %218 = add nsw i32 %217, 1
  %219 = sext i32 %218 to i64
  %220 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %216, i64 0, i64 %219
  %221 = load i32, i32* %27, align 4
  %222 = add nsw i32 %221, 1
  %223 = sext i32 %222 to i64
  %224 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %220, i64 0, i64 %223
  %225 = load %struct.motionvector*, %struct.motionvector** %224, align 8
  %226 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %225, i32 0, i32 4
  %227 = load i32, i32* %226, align 4
  %228 = add nsw i32 %227, 100
  store i32 %228, i32* %226, align 4
  br label %229

229:                                              ; preds = %215, %201, %155
  %230 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %21, i64 0, i64 1
  %231 = load i32, i32* %28, align 4
  %232 = add nsw i32 %231, 1
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %230, i64 0, i64 %233
  %235 = load i32, i32* %27, align 4
  %236 = add nsw i32 %235, 1
  %237 = sext i32 %236 to i64
  %238 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %234, i64 0, i64 %237
  %239 = load %struct.motionvector*, %struct.motionvector** %238, align 8
  %240 = bitcast %struct.motionvector* %239 to i8*
  %241 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %21, i64 0, i64 0
  %242 = load i32, i32* %28, align 4
  %243 = add nsw i32 %242, 1
  %244 = sext i32 %243 to i64
  %245 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %241, i64 0, i64 %244
  %246 = load i32, i32* %27, align 4
  %247 = add nsw i32 %246, 1
  %248 = sext i32 %247 to i64
  %249 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %245, i64 0, i64 %248
  %250 = load %struct.motionvector*, %struct.motionvector** %249, align 8
  %251 = bitcast %struct.motionvector* %250 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %240, i8* align 4 %251, i64 24, i1 false)
  %252 = load %struct.pict_image*, %struct.pict_image** %8, align 8
  %253 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %252, i32 0, i32 0
  %254 = load i8*, i8** %253, align 8
  %255 = load %struct.pict_image*, %struct.pict_image** %9, align 8
  %256 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %255, i32 0, i32 0
  %257 = load i8*, i8** %256, align 8
  %258 = load i32, i32* %25, align 4
  %259 = load i32, i32* %26, align 4
  %260 = load i32, i32* %13, align 4
  %261 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %21, i64 0, i64 0
  call void @MotionEstimation(i8* %254, i8* %257, i32 %258, i32 %259, i32 0, i32 0, i32 %260, [73 x [90 x %struct.motionvector*]]* %261, i32* %30)
  %262 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %21, i64 0, i64 0
  %263 = load i32, i32* %28, align 4
  %264 = add nsw i32 %263, 1
  %265 = sext i32 %264 to i64
  %266 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %262, i64 0, i64 %265
  %267 = load i32, i32* %27, align 4
  %268 = add nsw i32 %267, 1
  %269 = sext i32 %268 to i64
  %270 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %266, i64 0, i64 %269
  %271 = load %struct.motionvector*, %struct.motionvector** %270, align 8
  %272 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %271, i32 0, i32 0
  %273 = load i32, i32* %272, align 4
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %275, label %303

275:                                              ; preds = %229
  %276 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %21, i64 0, i64 0
  %277 = load i32, i32* %28, align 4
  %278 = add nsw i32 %277, 1
  %279 = sext i32 %278 to i64
  %280 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %276, i64 0, i64 %279
  %281 = load i32, i32* %27, align 4
  %282 = add nsw i32 %281, 1
  %283 = sext i32 %282 to i64
  %284 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %280, i64 0, i64 %283
  %285 = load %struct.motionvector*, %struct.motionvector** %284, align 8
  %286 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %285, i32 0, i32 1
  %287 = load i32, i32* %286, align 4
  %288 = icmp eq i32 %287, 0
  br i1 %288, label %289, label %303

289:                                              ; preds = %275
  %290 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %21, i64 0, i64 0
  %291 = load i32, i32* %28, align 4
  %292 = add nsw i32 %291, 1
  %293 = sext i32 %292 to i64
  %294 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %290, i64 0, i64 %293
  %295 = load i32, i32* %27, align 4
  %296 = add nsw i32 %295, 1
  %297 = sext i32 %296 to i64
  %298 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %294, i64 0, i64 %297
  %299 = load %struct.motionvector*, %struct.motionvector** %298, align 8
  %300 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %299, i32 0, i32 4
  %301 = load i32, i32* %300, align 4
  %302 = add nsw i32 %301, 100
  store i32 %302, i32* %300, align 4
  br label %303

303:                                              ; preds = %289, %275, %229
  %304 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %21, i64 0, i64 2
  %305 = load i32, i32* %28, align 4
  %306 = add nsw i32 %305, 1
  %307 = sext i32 %306 to i64
  %308 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %304, i64 0, i64 %307
  %309 = load i32, i32* %27, align 4
  %310 = add nsw i32 %309, 1
  %311 = sext i32 %310 to i64
  %312 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %308, i64 0, i64 %311
  %313 = load %struct.motionvector*, %struct.motionvector** %312, align 8
  store %struct.motionvector* %313, %struct.motionvector** %22, align 8
  %314 = load i32, i32* %11, align 4
  %315 = load %struct.motionvector*, %struct.motionvector** %22, align 8
  %316 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %315, i32 0, i32 0
  %317 = load i32, i32* %316, align 4
  %318 = mul nsw i32 %314, %317
  %319 = load i32, i32* %11, align 4
  %320 = load i32, i32* %12, align 4
  %321 = add nsw i32 %319, %320
  %322 = sdiv i32 %318, %321
  %323 = load %struct.motionvector*, %struct.motionvector** %23, align 8
  %324 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %323, i32 0, i32 0
  store i32 %322, i32* %324, align 4
  %325 = load i32, i32* %12, align 4
  %326 = sub nsw i32 0, %325
  %327 = load %struct.motionvector*, %struct.motionvector** %22, align 8
  %328 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %327, i32 0, i32 0
  %329 = load i32, i32* %328, align 4
  %330 = mul nsw i32 %326, %329
  %331 = load i32, i32* %11, align 4
  %332 = load i32, i32* %12, align 4
  %333 = add nsw i32 %331, %332
  %334 = sdiv i32 %330, %333
  %335 = load %struct.motionvector*, %struct.motionvector** %24, align 8
  %336 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %335, i32 0, i32 0
  store i32 %334, i32* %336, align 4
  %337 = load i32, i32* %11, align 4
  %338 = load %struct.motionvector*, %struct.motionvector** %22, align 8
  %339 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %338, i32 0, i32 1
  %340 = load i32, i32* %339, align 4
  %341 = mul nsw i32 %337, %340
  %342 = load i32, i32* %11, align 4
  %343 = load i32, i32* %12, align 4
  %344 = add nsw i32 %342, %343
  %345 = sdiv i32 %341, %344
  %346 = load %struct.motionvector*, %struct.motionvector** %23, align 8
  %347 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %346, i32 0, i32 1
  store i32 %345, i32* %347, align 4
  %348 = load i32, i32* %12, align 4
  %349 = sub nsw i32 0, %348
  %350 = load %struct.motionvector*, %struct.motionvector** %22, align 8
  %351 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %350, i32 0, i32 1
  %352 = load i32, i32* %351, align 4
  %353 = mul nsw i32 %349, %352
  %354 = load i32, i32* %11, align 4
  %355 = load i32, i32* %12, align 4
  %356 = add nsw i32 %354, %355
  %357 = sdiv i32 %353, %356
  %358 = load %struct.motionvector*, %struct.motionvector** %24, align 8
  %359 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %358, i32 0, i32 1
  store i32 %357, i32* %359, align 4
  %360 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %21, i64 0, i64 0
  %361 = load i32, i32* %28, align 4
  %362 = add nsw i32 %361, 1
  %363 = sext i32 %362 to i64
  %364 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %360, i64 0, i64 %363
  %365 = load i32, i32* %27, align 4
  %366 = add nsw i32 %365, 1
  %367 = sext i32 %366 to i64
  %368 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %364, i64 0, i64 %367
  %369 = load %struct.motionvector*, %struct.motionvector** %368, align 8
  %370 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %369, i32 0, i32 4
  %371 = load i32, i32* %370, align 4
  %372 = load i32, i32* %17, align 4
  %373 = add nsw i32 %372, %371
  store i32 %373, i32* %17, align 4
  %374 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %21, i64 0, i64 1
  %375 = load i32, i32* %28, align 4
  %376 = add nsw i32 %375, 1
  %377 = sext i32 %376 to i64
  %378 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %374, i64 0, i64 %377
  %379 = load i32, i32* %27, align 4
  %380 = add nsw i32 %379, 1
  %381 = sext i32 %380 to i64
  %382 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %378, i64 0, i64 %381
  %383 = load %struct.motionvector*, %struct.motionvector** %382, align 8
  %384 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %383, i32 0, i32 4
  %385 = load i32, i32* %384, align 4
  %386 = load i32, i32* %18, align 4
  %387 = add nsw i32 %386, %385
  store i32 %387, i32* %18, align 4
  %388 = load %struct.motionvector*, %struct.motionvector** %22, align 8
  %389 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %388, i32 0, i32 4
  %390 = load i32, i32* %389, align 4
  %391 = load i32, i32* %20, align 4
  %392 = add nsw i32 %391, %390
  store i32 %392, i32* %20, align 4
  %393 = load %struct.pict_image*, %struct.pict_image** %9, align 8
  %394 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %393, i32 0, i32 0
  %395 = load i8*, i8** %394, align 8
  %396 = load i32, i32* %25, align 4
  %397 = sext i32 %396 to i64
  %398 = getelementptr inbounds i8, i8* %395, i64 %397
  %399 = load i32, i32* %26, align 4
  %400 = load i32, i32* @pels, align 4
  %401 = mul nsw i32 %399, %400
  %402 = sext i32 %401 to i64
  %403 = getelementptr inbounds i8, i8* %398, i64 %402
  %404 = load %struct.pict_image*, %struct.pict_image** %8, align 8
  %405 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %404, i32 0, i32 0
  %406 = load i8*, i8** %405, align 8
  %407 = load i32, i32* %25, align 4
  %408 = sext i32 %407 to i64
  %409 = getelementptr inbounds i8, i8* %406, i64 %408
  %410 = load %struct.motionvector*, %struct.motionvector** %24, align 8
  %411 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %410, i32 0, i32 0
  %412 = load i32, i32* %411, align 4
  %413 = sext i32 %412 to i64
  %414 = getelementptr inbounds i8, i8* %409, i64 %413
  %415 = load i32, i32* %26, align 4
  %416 = load %struct.motionvector*, %struct.motionvector** %24, align 8
  %417 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %416, i32 0, i32 1
  %418 = load i32, i32* %417, align 4
  %419 = add nsw i32 %415, %418
  %420 = load i32, i32* @pels, align 4
  %421 = mul nsw i32 %419, %420
  %422 = sext i32 %421 to i64
  %423 = getelementptr inbounds i8, i8* %414, i64 %422
  %424 = load %struct.pict_image*, %struct.pict_image** %10, align 8
  %425 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %424, i32 0, i32 0
  %426 = load i8*, i8** %425, align 8
  %427 = load i32, i32* %25, align 4
  %428 = sext i32 %427 to i64
  %429 = getelementptr inbounds i8, i8* %426, i64 %428
  %430 = load %struct.motionvector*, %struct.motionvector** %23, align 8
  %431 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %430, i32 0, i32 0
  %432 = load i32, i32* %431, align 4
  %433 = sext i32 %432 to i64
  %434 = getelementptr inbounds i8, i8* %429, i64 %433
  %435 = load i32, i32* %26, align 4
  %436 = load %struct.motionvector*, %struct.motionvector** %23, align 8
  %437 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %436, i32 0, i32 1
  %438 = load i32, i32* %437, align 4
  %439 = add nsw i32 %435, %438
  %440 = load i32, i32* @pels, align 4
  %441 = mul nsw i32 %439, %440
  %442 = sext i32 %441 to i64
  %443 = getelementptr inbounds i8, i8* %434, i64 %442
  %444 = load i32, i32* @pels, align 4
  %445 = call i32 @SAD_MB_Bidir(i8* %403, i8* %423, i8* %443, i32 %444, i32 2147483647)
  %446 = load i32, i32* %19, align 4
  %447 = add nsw i32 %446, %445
  store i32 %447, i32* %19, align 4
  br label %448

448:                                              ; preds = %303
  %449 = load i32, i32* %27, align 4
  %450 = add nsw i32 %449, 1
  store i32 %450, i32* %27, align 4
  br label %93

451:                                              ; preds = %93
  br label %452

452:                                              ; preds = %451
  %453 = load i32, i32* %28, align 4
  %454 = add nsw i32 %453, 1
  store i32 %454, i32* %28, align 4
  br label %86

455:                                              ; preds = %86
  store i32 1, i32* %28, align 4
  br label %456

456:                                              ; preds = %491, %455
  %457 = load i32, i32* %28, align 4
  %458 = load i32, i32* @lines, align 4
  %459 = ashr i32 %458, 4
  %460 = icmp sle i32 %457, %459
  br i1 %460, label %461, label %494

461:                                              ; preds = %456
  store i32 1, i32* %27, align 4
  br label %462

462:                                              ; preds = %487, %461
  %463 = load i32, i32* %27, align 4
  %464 = load i32, i32* @pels, align 4
  %465 = ashr i32 %464, 4
  %466 = icmp sle i32 %463, %465
  br i1 %466, label %467, label %490

467:                                              ; preds = %462
  store i32 0, i32* %29, align 4
  br label %468

468:                                              ; preds = %483, %467
  %469 = load i32, i32* %29, align 4
  %470 = icmp slt i32 %469, 3
  br i1 %470, label %471, label %486

471:                                              ; preds = %468
  %472 = load i32, i32* %29, align 4
  %473 = sext i32 %472 to i64
  %474 = getelementptr inbounds [6 x [73 x [90 x %struct.motionvector*]]], [6 x [73 x [90 x %struct.motionvector*]]]* %21, i64 0, i64 %473
  %475 = load i32, i32* %28, align 4
  %476 = sext i32 %475 to i64
  %477 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %474, i64 0, i64 %476
  %478 = load i32, i32* %27, align 4
  %479 = sext i32 %478 to i64
  %480 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %477, i64 0, i64 %479
  %481 = load %struct.motionvector*, %struct.motionvector** %480, align 8
  %482 = bitcast %struct.motionvector* %481 to i8*
  call void @free(i8* %482) #8
  br label %483

483:                                              ; preds = %471
  %484 = load i32, i32* %29, align 4
  %485 = add nsw i32 %484, 1
  store i32 %485, i32* %29, align 4
  br label %468

486:                                              ; preds = %468
  br label %487

487:                                              ; preds = %486
  %488 = load i32, i32* %27, align 4
  %489 = add nsw i32 %488, 1
  store i32 %489, i32* %27, align 4
  br label %462

490:                                              ; preds = %462
  br label %491

491:                                              ; preds = %490
  %492 = load i32, i32* %28, align 4
  %493 = add nsw i32 %492, 1
  store i32 %493, i32* %28, align 4
  br label %456

494:                                              ; preds = %456
  %495 = load %struct.motionvector*, %struct.motionvector** %23, align 8
  %496 = bitcast %struct.motionvector* %495 to i8*
  call void @free(i8* %496) #8
  %497 = load %struct.motionvector*, %struct.motionvector** %24, align 8
  %498 = bitcast %struct.motionvector* %497 to i8*
  call void @free(i8* %498) #8
  %499 = load i32, i32* %14, align 4
  store i32 %499, i32* @advanced, align 4
  %500 = load i32, i32* %15, align 4
  store i32 %500, i32* @mv_outside_frame, align 4
  %501 = load i32, i32* %16, align 4
  store i32 %501, i32* @long_vectors, align 4
  %502 = load i32, i32* %19, align 4
  %503 = load i32, i32* %17, align 4
  %504 = load i32, i32* %18, align 4
  %505 = add nsw i32 %503, %504
  %506 = sdiv i32 %505, 2
  %507 = icmp slt i32 %502, %506
  br i1 %507, label %508, label %516

508:                                              ; preds = %494
  %509 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %510 = load i32, i32* %19, align 4
  %511 = load i32, i32* %17, align 4
  %512 = load i32, i32* %18, align 4
  %513 = add nsw i32 %511, %512
  %514 = sdiv i32 %513, 2
  %515 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %509, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.53, i64 0, i64 0), i32 %510, i32 %514)
  br label %524

516:                                              ; preds = %494
  %517 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %518 = load i32, i32* %19, align 4
  %519 = load i32, i32* %17, align 4
  %520 = load i32, i32* %18, align 4
  %521 = add nsw i32 %519, %520
  %522 = sdiv i32 %521, 2
  %523 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %517, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.54, i64 0, i64 0), i32 %518, i32 %522)
  br label %524

524:                                              ; preds = %516, %508
  %525 = load i32, i32* %19, align 4
  %526 = load i32, i32* %17, align 4
  %527 = load i32, i32* %18, align 4
  %528 = add nsw i32 %526, %527
  %529 = sdiv i32 %528, 2
  %530 = icmp slt i32 %525, %529
  br i1 %530, label %531, label %532

531:                                              ; preds = %524
  store i32 1, i32* %7, align 4
  br label %533

532:                                              ; preds = %524
  store i32 0, i32* %7, align 4
  br label %533

533:                                              ; preds = %532, %531
  %534 = load i32, i32* %7, align 4
  ret i32 %534
}

declare dso_local i32 @fflush(%struct._IO_FILE*) #3

; Function Attrs: nounwind
declare dso_local noalias i8* @calloc(i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @MotionEstimation(i8* %0, i8* %1, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6, [73 x [90 x %struct.motionvector*]]* %7, i32* %8) #0 {
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca [73 x [90 x %struct.motionvector*]]*, align 8
  %18 = alloca i32*, align 8
  %19 = alloca [5 x i32], align 16
  %20 = alloca [5 x %struct.motionvector], align 16
  %21 = alloca i8*, align 8
  %22 = alloca i8*, align 8
  %23 = alloca i8*, align 8
  %24 = alloca i8*, align 8
  %25 = alloca i8*, align 8
  %26 = alloca i8*, align 8
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca i32, align 4
  %31 = alloca i32, align 4
  %32 = alloca i32, align 4
  %33 = alloca i32, align 4
  %34 = alloca i32, align 4
  %35 = alloca i32, align 4
  %36 = alloca i32, align 4
  %37 = alloca i32, align 4
  %38 = alloca i32, align 4
  %39 = alloca i32, align 4
  %40 = alloca i32, align 4
  %41 = alloca i32, align 4
  %42 = alloca i32, align 4
  %43 = alloca i32, align 4
  %44 = alloca i32, align 4
  %45 = alloca i32, align 4
  %46 = alloca i32, align 4
  %47 = alloca i32, align 4
  %48 = alloca i32, align 4
  %49 = alloca i32, align 4
  %50 = alloca i32, align 4
  %51 = alloca i32, align 4
  %52 = alloca i32, align 4
  store i8* %0, i8** %10, align 8
  store i8* %1, i8** %11, align 8
  store i32 %2, i32* %12, align 4
  store i32 %3, i32* %13, align 4
  store i32 %4, i32* %14, align 4
  store i32 %5, i32* %15, align 4
  store i32 %6, i32* %16, align 4
  store [73 x [90 x %struct.motionvector*]]* %7, [73 x [90 x %struct.motionvector*]]** %17, align 8
  store i32* %8, i32** %18, align 8
  store i8* null, i8** %25, align 8
  store i8* null, i8** %26, align 8
  %53 = load i32, i32* @pels, align 4
  store i32 %53, i32* %44, align 4
  %54 = load i32, i32* @lines, align 4
  store i32 %54, i32* %45, align 4
  %55 = load i32, i32* %16, align 4
  store i32 %55, i32* %27, align 4
  %56 = load i32, i32* @long_vectors, align 4
  %57 = icmp ne i32 %56, 0
  br i1 %57, label %66, label %58

58:                                               ; preds = %9
  %59 = load i32, i32* %27, align 4
  %60 = icmp slt i32 15, %59
  br i1 %60, label %61, label %62

61:                                               ; preds = %58
  br label %64

62:                                               ; preds = %58
  %63 = load i32, i32* %27, align 4
  br label %64

64:                                               ; preds = %62, %61
  %65 = phi i32 [ 15, %61 ], [ %63, %62 ]
  store i32 %65, i32* %27, align 4
  br label %112

66:                                               ; preds = %9
  %67 = load i32, i32* %27, align 4
  %68 = icmp slt i32 14, %67
  br i1 %68, label %69, label %70

69:                                               ; preds = %66
  br label %72

70:                                               ; preds = %66
  %71 = load i32, i32* %27, align 4
  br label %72

72:                                               ; preds = %70, %69
  %73 = phi i32 [ 14, %69 ], [ %71, %70 ]
  store i32 %73, i32* %27, align 4
  %74 = load i32, i32* %14, align 4
  %75 = icmp sgt i32 -16, %74
  br i1 %75, label %76, label %77

76:                                               ; preds = %72
  br label %79

77:                                               ; preds = %72
  %78 = load i32, i32* %14, align 4
  br label %79

79:                                               ; preds = %77, %76
  %80 = phi i32 [ -16, %76 ], [ %78, %77 ]
  %81 = icmp slt i32 16, %80
  br i1 %81, label %82, label %83

82:                                               ; preds = %79
  br label %91

83:                                               ; preds = %79
  %84 = load i32, i32* %14, align 4
  %85 = icmp sgt i32 -16, %84
  br i1 %85, label %86, label %87

86:                                               ; preds = %83
  br label %89

87:                                               ; preds = %83
  %88 = load i32, i32* %14, align 4
  br label %89

89:                                               ; preds = %87, %86
  %90 = phi i32 [ -16, %86 ], [ %88, %87 ]
  br label %91

91:                                               ; preds = %89, %82
  %92 = phi i32 [ 16, %82 ], [ %90, %89 ]
  store i32 %92, i32* %14, align 4
  %93 = load i32, i32* %15, align 4
  %94 = icmp sgt i32 -16, %93
  br i1 %94, label %95, label %96

95:                                               ; preds = %91
  br label %98

96:                                               ; preds = %91
  %97 = load i32, i32* %15, align 4
  br label %98

98:                                               ; preds = %96, %95
  %99 = phi i32 [ -16, %95 ], [ %97, %96 ]
  %100 = icmp slt i32 16, %99
  br i1 %100, label %101, label %102

101:                                              ; preds = %98
  br label %110

102:                                              ; preds = %98
  %103 = load i32, i32* %15, align 4
  %104 = icmp sgt i32 -16, %103
  br i1 %104, label %105, label %106

105:                                              ; preds = %102
  br label %108

106:                                              ; preds = %102
  %107 = load i32, i32* %15, align 4
  br label %108

108:                                              ; preds = %106, %105
  %109 = phi i32 [ -16, %105 ], [ %107, %106 ]
  br label %110

110:                                              ; preds = %108, %101
  %111 = phi i32 [ 16, %101 ], [ %109, %108 ]
  store i32 %111, i32* %15, align 4
  br label %112

112:                                              ; preds = %110, %64
  %113 = load i32, i32* @mv_outside_frame, align 4
  %114 = icmp ne i32 %113, 0
  br i1 %114, label %115, label %122

115:                                              ; preds = %112
  %116 = load i32, i32* @pels, align 4
  %117 = load i32, i32* @long_vectors, align 4
  %118 = icmp ne i32 %117, 0
  %119 = zext i1 %118 to i64
  %120 = select i1 %118, i32 64, i32 32
  %121 = add nsw i32 %116, %120
  br label %124

122:                                              ; preds = %112
  %123 = load i32, i32* @pels, align 4
  br label %124

124:                                              ; preds = %122, %115
  %125 = phi i32 [ %121, %115 ], [ %123, %122 ]
  store i32 %125, i32* %48, align 4
  %126 = load i32, i32* %12, align 4
  %127 = load i32, i32* %14, align 4
  %128 = add nsw i32 %126, %127
  %129 = load i32, i32* %27, align 4
  %130 = sub nsw i32 %128, %129
  store i32 %130, i32* %33, align 4
  %131 = load i32, i32* %12, align 4
  %132 = load i32, i32* %14, align 4
  %133 = add nsw i32 %131, %132
  %134 = load i32, i32* %27, align 4
  %135 = add nsw i32 %133, %134
  store i32 %135, i32* %32, align 4
  %136 = load i32, i32* %13, align 4
  %137 = load i32, i32* %15, align 4
  %138 = add nsw i32 %136, %137
  %139 = load i32, i32* %27, align 4
  %140 = sub nsw i32 %138, %139
  store i32 %140, i32* %35, align 4
  %141 = load i32, i32* %13, align 4
  %142 = load i32, i32* %15, align 4
  %143 = add nsw i32 %141, %142
  %144 = load i32, i32* %27, align 4
  %145 = add nsw i32 %143, %144
  store i32 %145, i32* %34, align 4
  %146 = load i32, i32* @mv_outside_frame, align 4
  %147 = icmp ne i32 %146, 0
  br i1 %147, label %173, label %148

148:                                              ; preds = %124
  %149 = load i32, i32* %33, align 4
  %150 = icmp slt i32 %149, 0
  br i1 %150, label %151, label %152

151:                                              ; preds = %148
  store i32 0, i32* %33, align 4
  br label %152

152:                                              ; preds = %151, %148
  %153 = load i32, i32* %32, align 4
  %154 = load i32, i32* %44, align 4
  %155 = sub nsw i32 %154, 16
  %156 = icmp sgt i32 %153, %155
  br i1 %156, label %157, label %160

157:                                              ; preds = %152
  %158 = load i32, i32* %44, align 4
  %159 = sub nsw i32 %158, 16
  store i32 %159, i32* %32, align 4
  br label %160

160:                                              ; preds = %157, %152
  %161 = load i32, i32* %35, align 4
  %162 = icmp slt i32 %161, 0
  br i1 %162, label %163, label %164

163:                                              ; preds = %160
  store i32 0, i32* %35, align 4
  br label %164

164:                                              ; preds = %163, %160
  %165 = load i32, i32* %34, align 4
  %166 = load i32, i32* %45, align 4
  %167 = sub nsw i32 %166, 16
  %168 = icmp sgt i32 %165, %167
  br i1 %168, label %169, label %172

169:                                              ; preds = %164
  %170 = load i32, i32* %45, align 4
  %171 = sub nsw i32 %170, 16
  store i32 %171, i32* %34, align 4
  br label %172

172:                                              ; preds = %169, %164
  br label %173

173:                                              ; preds = %172, %124
  %174 = load i32, i32* %32, align 4
  %175 = load i32, i32* %33, align 4
  %176 = sub nsw i32 %174, %175
  %177 = add nsw i32 %176, 16
  store i32 %177, i32* %36, align 4
  %178 = load i32, i32* %34, align 4
  %179 = load i32, i32* %35, align 4
  %180 = sub nsw i32 %178, %179
  %181 = add nsw i32 %180, 16
  store i32 %181, i32* %37, align 4
  %182 = load i8*, i8** %10, align 8
  %183 = load i32, i32* %12, align 4
  %184 = load i32, i32* %13, align 4
  %185 = load i32, i32* @pels, align 4
  %186 = call i8* @LoadArea(i8* %182, i32 %183, i32 %184, i32 16, i32 16, i32 %185)
  store i8* %186, i8** %21, align 8
  %187 = load i8*, i8** %11, align 8
  %188 = load i32, i32* %33, align 4
  %189 = load i32, i32* %35, align 4
  %190 = load i32, i32* %36, align 4
  %191 = load i32, i32* %37, align 4
  %192 = load i32, i32* %48, align 4
  %193 = call i8* @LoadArea(i8* %187, i32 %188, i32 %189, i32 %190, i32 %191, i32 %192)
  store i8* %193, i8** %24, align 8
  store i32 0, i32* %29, align 4
  br label %194

194:                                              ; preds = %217, %173
  %195 = load i32, i32* %29, align 4
  %196 = icmp slt i32 %195, 5
  br i1 %196, label %197, label %220

197:                                              ; preds = %194
  %198 = load i32, i32* %29, align 4
  %199 = sext i32 %198 to i64
  %200 = getelementptr inbounds [5 x i32], [5 x i32]* %19, i64 0, i64 %199
  store i32 2147483647, i32* %200, align 4
  %201 = load i32, i32* %29, align 4
  %202 = sext i32 %201 to i64
  %203 = getelementptr inbounds [5 x %struct.motionvector], [5 x %struct.motionvector]* %20, i64 0, i64 %202
  %204 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %203, i32 0, i32 0
  store i32 0, i32* %204, align 8
  %205 = load i32, i32* %29, align 4
  %206 = sext i32 %205 to i64
  %207 = getelementptr inbounds [5 x %struct.motionvector], [5 x %struct.motionvector]* %20, i64 0, i64 %206
  %208 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %207, i32 0, i32 1
  store i32 0, i32* %208, align 4
  %209 = load i32, i32* %29, align 4
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds [5 x %struct.motionvector], [5 x %struct.motionvector]* %20, i64 0, i64 %210
  %212 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %211, i32 0, i32 2
  store i32 0, i32* %212, align 8
  %213 = load i32, i32* %29, align 4
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds [5 x %struct.motionvector], [5 x %struct.motionvector]* %20, i64 0, i64 %214
  %216 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %215, i32 0, i32 3
  store i32 0, i32* %216, align 4
  br label %217

217:                                              ; preds = %197
  %218 = load i32, i32* %29, align 4
  %219 = add nsw i32 %218, 1
  store i32 %219, i32* %29, align 4
  br label %194

220:                                              ; preds = %194
  %221 = load i32, i32* %12, align 4
  %222 = load i32, i32* %33, align 4
  %223 = sub nsw i32 %221, %222
  %224 = icmp slt i32 %223, 0
  br i1 %224, label %244, label %225

225:                                              ; preds = %220
  %226 = load i32, i32* %13, align 4
  %227 = load i32, i32* %35, align 4
  %228 = sub nsw i32 %226, %227
  %229 = icmp slt i32 %228, 0
  br i1 %229, label %244, label %230

230:                                              ; preds = %225
  %231 = load i32, i32* %12, align 4
  %232 = load i32, i32* %33, align 4
  %233 = sub nsw i32 %231, %232
  %234 = add nsw i32 %233, 16
  %235 = load i32, i32* %36, align 4
  %236 = icmp sgt i32 %234, %235
  br i1 %236, label %244, label %237

237:                                              ; preds = %230
  %238 = load i32, i32* %13, align 4
  %239 = load i32, i32* %35, align 4
  %240 = sub nsw i32 %238, %239
  %241 = add nsw i32 %240, 16
  %242 = load i32, i32* %37, align 4
  %243 = icmp sgt i32 %241, %242
  br i1 %243, label %244, label %258

244:                                              ; preds = %237, %230, %225, %220
  %245 = load i8*, i8** %11, align 8
  %246 = load i32, i32* %12, align 4
  %247 = load i32, i32* %13, align 4
  %248 = load i32, i32* %48, align 4
  %249 = call i8* @LoadArea(i8* %245, i32 %246, i32 %247, i32 16, i32 16, i32 %248)
  store i8* %249, i8** %26, align 8
  %250 = load i8*, i8** %26, align 8
  %251 = load i8*, i8** %21, align 8
  %252 = getelementptr inbounds [5 x i32], [5 x i32]* %19, i64 0, i64 0
  %253 = load i32, i32* %252, align 16
  %254 = call i32 @SAD_Macroblock(i8* %250, i8* %251, i32 16, i32 %253)
  %255 = sub nsw i32 %254, 100
  %256 = load i32*, i32** %18, align 8
  store i32 %255, i32* %256, align 4
  %257 = load i8*, i8** %26, align 8
  call void @free(i8* %257) #8
  br label %280

258:                                              ; preds = %237
  %259 = load i8*, i8** %24, align 8
  %260 = load i32, i32* %12, align 4
  %261 = load i32, i32* %33, align 4
  %262 = sub nsw i32 %260, %261
  %263 = sext i32 %262 to i64
  %264 = getelementptr inbounds i8, i8* %259, i64 %263
  %265 = load i32, i32* %13, align 4
  %266 = load i32, i32* %35, align 4
  %267 = sub nsw i32 %265, %266
  %268 = load i32, i32* %36, align 4
  %269 = mul nsw i32 %267, %268
  %270 = sext i32 %269 to i64
  %271 = getelementptr inbounds i8, i8* %264, i64 %270
  store i8* %271, i8** %23, align 8
  %272 = load i8*, i8** %23, align 8
  %273 = load i8*, i8** %21, align 8
  %274 = load i32, i32* %36, align 4
  %275 = getelementptr inbounds [5 x i32], [5 x i32]* %19, i64 0, i64 0
  %276 = load i32, i32* %275, align 16
  %277 = call i32 @SAD_Macroblock(i8* %272, i8* %273, i32 %274, i32 %276)
  %278 = sub nsw i32 %277, 100
  %279 = load i32*, i32** %18, align 8
  store i32 %278, i32* %279, align 4
  br label %280

280:                                              ; preds = %258, %244
  %281 = load i32, i32* %14, align 4
  %282 = icmp eq i32 %281, 0
  br i1 %282, label %283, label %294

283:                                              ; preds = %280
  %284 = load i32, i32* %15, align 4
  %285 = icmp eq i32 %284, 0
  br i1 %285, label %286, label %294

286:                                              ; preds = %283
  %287 = load i32*, i32** %18, align 8
  %288 = load i32, i32* %287, align 4
  %289 = getelementptr inbounds [5 x i32], [5 x i32]* %19, i64 0, i64 0
  store i32 %288, i32* %289, align 16
  %290 = getelementptr inbounds [5 x %struct.motionvector], [5 x %struct.motionvector]* %20, i64 0, i64 0
  %291 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %290, i32 0, i32 0
  store i32 0, i32* %291, align 16
  %292 = getelementptr inbounds [5 x %struct.motionvector], [5 x %struct.motionvector]* %20, i64 0, i64 0
  %293 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %292, i32 0, i32 1
  store i32 0, i32* %293, align 4
  br label %325

294:                                              ; preds = %283, %280
  %295 = load i8*, i8** %24, align 8
  %296 = load i32, i32* %12, align 4
  %297 = load i32, i32* %14, align 4
  %298 = add nsw i32 %296, %297
  %299 = load i32, i32* %33, align 4
  %300 = sub nsw i32 %298, %299
  %301 = sext i32 %300 to i64
  %302 = getelementptr inbounds i8, i8* %295, i64 %301
  %303 = load i32, i32* %13, align 4
  %304 = load i32, i32* %15, align 4
  %305 = add nsw i32 %303, %304
  %306 = load i32, i32* %35, align 4
  %307 = sub nsw i32 %305, %306
  %308 = load i32, i32* %36, align 4
  %309 = mul nsw i32 %307, %308
  %310 = sext i32 %309 to i64
  %311 = getelementptr inbounds i8, i8* %302, i64 %310
  store i8* %311, i8** %23, align 8
  %312 = load i8*, i8** %23, align 8
  %313 = load i8*, i8** %21, align 8
  %314 = load i32, i32* %36, align 4
  %315 = getelementptr inbounds [5 x i32], [5 x i32]* %19, i64 0, i64 0
  %316 = load i32, i32* %315, align 16
  %317 = call i32 @SAD_Macroblock(i8* %312, i8* %313, i32 %314, i32 %316)
  %318 = getelementptr inbounds [5 x i32], [5 x i32]* %19, i64 0, i64 0
  store i32 %317, i32* %318, align 16
  %319 = load i32, i32* %14, align 4
  %320 = getelementptr inbounds [5 x %struct.motionvector], [5 x %struct.motionvector]* %20, i64 0, i64 0
  %321 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %320, i32 0, i32 0
  store i32 %319, i32* %321, align 16
  %322 = load i32, i32* %15, align 4
  %323 = getelementptr inbounds [5 x %struct.motionvector], [5 x %struct.motionvector]* %20, i64 0, i64 0
  %324 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %323, i32 0, i32 1
  store i32 %322, i32* %324, align 4
  br label %325

325:                                              ; preds = %294, %286
  store i32 1, i32* %31, align 4
  br label %326

326:                                              ; preds = %434, %325
  %327 = load i32, i32* %31, align 4
  %328 = load i32, i32* %27, align 4
  %329 = icmp sle i32 %327, %328
  br i1 %329, label %330, label %437

330:                                              ; preds = %326
  %331 = load i32, i32* %12, align 4
  %332 = load i32, i32* %14, align 4
  %333 = add nsw i32 %331, %332
  %334 = load i32, i32* %31, align 4
  %335 = sub nsw i32 %333, %334
  store i32 %335, i32* %28, align 4
  %336 = load i32, i32* %13, align 4
  %337 = load i32, i32* %15, align 4
  %338 = add nsw i32 %336, %337
  %339 = load i32, i32* %31, align 4
  %340 = sub nsw i32 %338, %339
  store i32 %340, i32* %30, align 4
  store i32 0, i32* %29, align 4
  br label %341

341:                                              ; preds = %430, %330
  %342 = load i32, i32* %29, align 4
  %343 = load i32, i32* %31, align 4
  %344 = mul nsw i32 8, %343
  %345 = icmp slt i32 %342, %344
  br i1 %345, label %346, label %433

346:                                              ; preds = %341
  %347 = load i32, i32* %28, align 4
  %348 = load i32, i32* %33, align 4
  %349 = icmp sge i32 %347, %348
  br i1 %349, label %350, label %400

350:                                              ; preds = %346
  %351 = load i32, i32* %28, align 4
  %352 = load i32, i32* %32, align 4
  %353 = icmp sle i32 %351, %352
  br i1 %353, label %354, label %400

354:                                              ; preds = %350
  %355 = load i32, i32* %30, align 4
  %356 = load i32, i32* %35, align 4
  %357 = icmp sge i32 %355, %356
  br i1 %357, label %358, label %400

358:                                              ; preds = %354
  %359 = load i32, i32* %30, align 4
  %360 = load i32, i32* %34, align 4
  %361 = icmp sle i32 %359, %360
  br i1 %361, label %362, label %400

362:                                              ; preds = %358
  %363 = load i8*, i8** %24, align 8
  %364 = load i32, i32* %28, align 4
  %365 = load i32, i32* %33, align 4
  %366 = sub nsw i32 %364, %365
  %367 = sext i32 %366 to i64
  %368 = getelementptr inbounds i8, i8* %363, i64 %367
  %369 = load i32, i32* %30, align 4
  %370 = load i32, i32* %35, align 4
  %371 = sub nsw i32 %369, %370
  %372 = load i32, i32* %36, align 4
  %373 = mul nsw i32 %371, %372
  %374 = sext i32 %373 to i64
  %375 = getelementptr inbounds i8, i8* %368, i64 %374
  store i8* %375, i8** %23, align 8
  %376 = load i8*, i8** %23, align 8
  %377 = load i8*, i8** %21, align 8
  %378 = load i32, i32* %36, align 4
  %379 = getelementptr inbounds [5 x i32], [5 x i32]* %19, i64 0, i64 0
  %380 = load i32, i32* %379, align 16
  %381 = call i32 @SAD_Macroblock(i8* %376, i8* %377, i32 %378, i32 %380)
  store i32 %381, i32* %47, align 4
  %382 = load i32, i32* %47, align 4
  %383 = getelementptr inbounds [5 x i32], [5 x i32]* %19, i64 0, i64 0
  %384 = load i32, i32* %383, align 16
  %385 = icmp slt i32 %382, %384
  br i1 %385, label %386, label %399

386:                                              ; preds = %362
  %387 = load i32, i32* %28, align 4
  %388 = load i32, i32* %12, align 4
  %389 = sub nsw i32 %387, %388
  %390 = getelementptr inbounds [5 x %struct.motionvector], [5 x %struct.motionvector]* %20, i64 0, i64 0
  %391 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %390, i32 0, i32 0
  store i32 %389, i32* %391, align 16
  %392 = load i32, i32* %30, align 4
  %393 = load i32, i32* %13, align 4
  %394 = sub nsw i32 %392, %393
  %395 = getelementptr inbounds [5 x %struct.motionvector], [5 x %struct.motionvector]* %20, i64 0, i64 0
  %396 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %395, i32 0, i32 1
  store i32 %394, i32* %396, align 4
  %397 = load i32, i32* %47, align 4
  %398 = getelementptr inbounds [5 x i32], [5 x i32]* %19, i64 0, i64 0
  store i32 %397, i32* %398, align 16
  br label %399

399:                                              ; preds = %386, %362
  br label %400

400:                                              ; preds = %399, %358, %354, %350, %346
  %401 = load i32, i32* %29, align 4
  %402 = load i32, i32* %31, align 4
  %403 = mul nsw i32 2, %402
  %404 = icmp slt i32 %401, %403
  br i1 %404, label %405, label %408

405:                                              ; preds = %400
  %406 = load i32, i32* %28, align 4
  %407 = add nsw i32 %406, 1
  store i32 %407, i32* %28, align 4
  br label %429

408:                                              ; preds = %400
  %409 = load i32, i32* %29, align 4
  %410 = load i32, i32* %31, align 4
  %411 = mul nsw i32 4, %410
  %412 = icmp slt i32 %409, %411
  br i1 %412, label %413, label %416

413:                                              ; preds = %408
  %414 = load i32, i32* %30, align 4
  %415 = add nsw i32 %414, 1
  store i32 %415, i32* %30, align 4
  br label %428

416:                                              ; preds = %408
  %417 = load i32, i32* %29, align 4
  %418 = load i32, i32* %31, align 4
  %419 = mul nsw i32 6, %418
  %420 = icmp slt i32 %417, %419
  br i1 %420, label %421, label %424

421:                                              ; preds = %416
  %422 = load i32, i32* %28, align 4
  %423 = add nsw i32 %422, -1
  store i32 %423, i32* %28, align 4
  br label %427

424:                                              ; preds = %416
  %425 = load i32, i32* %30, align 4
  %426 = add nsw i32 %425, -1
  store i32 %426, i32* %30, align 4
  br label %427

427:                                              ; preds = %424, %421
  br label %428

428:                                              ; preds = %427, %413
  br label %429

429:                                              ; preds = %428, %405
  br label %430

430:                                              ; preds = %429
  %431 = load i32, i32* %29, align 4
  %432 = add nsw i32 %431, 1
  store i32 %432, i32* %29, align 4
  br label %341

433:                                              ; preds = %341
  br label %434

434:                                              ; preds = %433
  %435 = load i32, i32* %31, align 4
  %436 = add nsw i32 %435, 1
  store i32 %436, i32* %31, align 4
  br label %326

437:                                              ; preds = %326
  %438 = load i32, i32* @advanced, align 4
  %439 = icmp ne i32 %438, 0
  br i1 %439, label %440, label %723

440:                                              ; preds = %437
  %441 = getelementptr inbounds [5 x %struct.motionvector], [5 x %struct.motionvector]* %20, i64 0, i64 0
  %442 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %441, i32 0, i32 0
  %443 = load i32, i32* %442, align 16
  store i32 %443, i32* %51, align 4
  %444 = getelementptr inbounds [5 x %struct.motionvector], [5 x %struct.motionvector]* %20, i64 0, i64 0
  %445 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %444, i32 0, i32 1
  %446 = load i32, i32* %445, align 4
  store i32 %446, i32* %52, align 4
  %447 = load i32, i32* @long_vectors, align 4
  %448 = icmp ne i32 %447, 0
  br i1 %448, label %466, label %449

449:                                              ; preds = %440
  %450 = load i32, i32* %51, align 4
  %451 = icmp sgt i32 %450, 15
  br i1 %451, label %452, label %453

452:                                              ; preds = %449
  store i32 15, i32* %51, align 4
  br label %453

453:                                              ; preds = %452, %449
  %454 = load i32, i32* %52, align 4
  %455 = icmp sgt i32 %454, 15
  br i1 %455, label %456, label %457

456:                                              ; preds = %453
  store i32 15, i32* %52, align 4
  br label %457

457:                                              ; preds = %456, %453
  %458 = load i32, i32* %51, align 4
  %459 = icmp slt i32 %458, -15
  br i1 %459, label %460, label %461

460:                                              ; preds = %457
  store i32 -15, i32* %51, align 4
  br label %461

461:                                              ; preds = %460, %457
  %462 = load i32, i32* %52, align 4
  %463 = icmp slt i32 %462, -15
  br i1 %463, label %464, label %465

464:                                              ; preds = %461
  store i32 -15, i32* %52, align 4
  br label %465

465:                                              ; preds = %464, %461
  br label %466

466:                                              ; preds = %465, %440
  %467 = load i32, i32* %12, align 4
  %468 = load i32, i32* %51, align 4
  %469 = add nsw i32 %467, %468
  store i32 %469, i32* %49, align 4
  %470 = load i32, i32* %13, align 4
  %471 = load i32, i32* %52, align 4
  %472 = add nsw i32 %470, %471
  store i32 %472, i32* %50, align 4
  store i32 0, i32* %27, align 4
  %473 = load i32, i32* %49, align 4
  %474 = load i32, i32* %27, align 4
  %475 = sub nsw i32 %473, %474
  store i32 %475, i32* %39, align 4
  %476 = load i32, i32* %49, align 4
  %477 = load i32, i32* %27, align 4
  %478 = add nsw i32 %476, %477
  store i32 %478, i32* %38, align 4
  %479 = load i32, i32* %50, align 4
  %480 = load i32, i32* %27, align 4
  %481 = sub nsw i32 %479, %480
  store i32 %481, i32* %41, align 4
  %482 = load i32, i32* %50, align 4
  %483 = load i32, i32* %27, align 4
  %484 = add nsw i32 %482, %483
  store i32 %484, i32* %40, align 4
  %485 = load i32, i32* %38, align 4
  %486 = load i32, i32* %39, align 4
  %487 = sub nsw i32 %485, %486
  %488 = add nsw i32 %487, 16
  store i32 %488, i32* %42, align 4
  %489 = load i32, i32* %40, align 4
  %490 = load i32, i32* %41, align 4
  %491 = sub nsw i32 %489, %490
  %492 = add nsw i32 %491, 16
  store i32 %492, i32* %43, align 4
  %493 = load i8*, i8** %11, align 8
  %494 = load i32, i32* %39, align 4
  %495 = load i32, i32* %41, align 4
  %496 = load i32, i32* %42, align 4
  %497 = load i32, i32* %43, align 4
  %498 = load i32, i32* %48, align 4
  %499 = call i8* @LoadArea(i8* %493, i32 %494, i32 %495, i32 %496, i32 %497, i32 %498)
  store i8* %499, i8** %25, align 8
  store i32 0, i32* %46, align 4
  br label %500

500:                                              ; preds = %567, %466
  %501 = load i32, i32* %46, align 4
  %502 = icmp slt i32 %501, 4
  br i1 %502, label %503, label %570

503:                                              ; preds = %500
  %504 = load i8*, i8** %25, align 8
  %505 = load i32, i32* %49, align 4
  %506 = load i32, i32* %39, align 4
  %507 = sub nsw i32 %505, %506
  %508 = sext i32 %507 to i64
  %509 = getelementptr inbounds i8, i8* %504, i64 %508
  %510 = load i32, i32* %46, align 4
  %511 = and i32 %510, 1
  %512 = shl i32 %511, 3
  %513 = sext i32 %512 to i64
  %514 = getelementptr inbounds i8, i8* %509, i64 %513
  %515 = load i32, i32* %50, align 4
  %516 = load i32, i32* %41, align 4
  %517 = sub nsw i32 %515, %516
  %518 = load i32, i32* %46, align 4
  %519 = and i32 %518, 2
  %520 = shl i32 %519, 2
  %521 = add nsw i32 %517, %520
  %522 = load i32, i32* %42, align 4
  %523 = mul nsw i32 %521, %522
  %524 = sext i32 %523 to i64
  %525 = getelementptr inbounds i8, i8* %514, i64 %524
  store i8* %525, i8** %23, align 8
  %526 = load i8*, i8** %21, align 8
  %527 = load i32, i32* %46, align 4
  %528 = and i32 %527, 1
  %529 = shl i32 %528, 3
  %530 = sext i32 %529 to i64
  %531 = getelementptr inbounds i8, i8* %526, i64 %530
  %532 = load i32, i32* %46, align 4
  %533 = and i32 %532, 2
  %534 = shl i32 %533, 2
  %535 = mul nsw i32 %534, 16
  %536 = sext i32 %535 to i64
  %537 = getelementptr inbounds i8, i8* %531, i64 %536
  store i8* %537, i8** %22, align 8
  %538 = load i8*, i8** %23, align 8
  %539 = load i8*, i8** %22, align 8
  %540 = load i32, i32* %42, align 4
  %541 = load i32, i32* %46, align 4
  %542 = add nsw i32 %541, 1
  %543 = sext i32 %542 to i64
  %544 = getelementptr inbounds [5 x i32], [5 x i32]* %19, i64 0, i64 %543
  %545 = load i32, i32* %544, align 4
  %546 = call i32 @SAD_Block(i8* %538, i8* %539, i32 %540, i32 %545)
  %547 = load i32, i32* %46, align 4
  %548 = add nsw i32 %547, 1
  %549 = sext i32 %548 to i64
  %550 = getelementptr inbounds [5 x i32], [5 x i32]* %19, i64 0, i64 %549
  store i32 %546, i32* %550, align 4
  %551 = getelementptr inbounds [5 x %struct.motionvector], [5 x %struct.motionvector]* %20, i64 0, i64 0
  %552 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %551, i32 0, i32 0
  %553 = load i32, i32* %552, align 16
  %554 = load i32, i32* %46, align 4
  %555 = add nsw i32 %554, 1
  %556 = sext i32 %555 to i64
  %557 = getelementptr inbounds [5 x %struct.motionvector], [5 x %struct.motionvector]* %20, i64 0, i64 %556
  %558 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %557, i32 0, i32 0
  store i32 %553, i32* %558, align 8
  %559 = getelementptr inbounds [5 x %struct.motionvector], [5 x %struct.motionvector]* %20, i64 0, i64 0
  %560 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %559, i32 0, i32 1
  %561 = load i32, i32* %560, align 4
  %562 = load i32, i32* %46, align 4
  %563 = add nsw i32 %562, 1
  %564 = sext i32 %563 to i64
  %565 = getelementptr inbounds [5 x %struct.motionvector], [5 x %struct.motionvector]* %20, i64 0, i64 %564
  %566 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %565, i32 0, i32 1
  store i32 %561, i32* %566, align 4
  br label %567

567:                                              ; preds = %503
  %568 = load i32, i32* %46, align 4
  %569 = add nsw i32 %568, 1
  store i32 %569, i32* %46, align 4
  br label %500

570:                                              ; preds = %500
  store i32 1, i32* %31, align 4
  br label %571

571:                                              ; preds = %719, %570
  %572 = load i32, i32* %31, align 4
  %573 = load i32, i32* %27, align 4
  %574 = icmp sle i32 %572, %573
  br i1 %574, label %575, label %722

575:                                              ; preds = %571
  %576 = load i32, i32* %49, align 4
  %577 = load i32, i32* %31, align 4
  %578 = sub nsw i32 %576, %577
  store i32 %578, i32* %28, align 4
  %579 = load i32, i32* %50, align 4
  %580 = load i32, i32* %31, align 4
  %581 = sub nsw i32 %579, %580
  store i32 %581, i32* %30, align 4
  store i32 0, i32* %29, align 4
  br label %582

582:                                              ; preds = %715, %575
  %583 = load i32, i32* %29, align 4
  %584 = load i32, i32* %31, align 4
  %585 = mul nsw i32 8, %584
  %586 = icmp slt i32 %583, %585
  br i1 %586, label %587, label %718

587:                                              ; preds = %582
  %588 = load i32, i32* %28, align 4
  %589 = load i32, i32* %39, align 4
  %590 = icmp sge i32 %588, %589
  br i1 %590, label %591, label %685

591:                                              ; preds = %587
  %592 = load i32, i32* %28, align 4
  %593 = load i32, i32* %38, align 4
  %594 = icmp sle i32 %592, %593
  br i1 %594, label %595, label %685

595:                                              ; preds = %591
  %596 = load i32, i32* %30, align 4
  %597 = load i32, i32* %41, align 4
  %598 = icmp sge i32 %596, %597
  br i1 %598, label %599, label %685

599:                                              ; preds = %595
  %600 = load i32, i32* %30, align 4
  %601 = load i32, i32* %40, align 4
  %602 = icmp sle i32 %600, %601
  br i1 %602, label %603, label %685

603:                                              ; preds = %599
  store i32 0, i32* %46, align 4
  br label %604

604:                                              ; preds = %681, %603
  %605 = load i32, i32* %46, align 4
  %606 = icmp slt i32 %605, 4
  br i1 %606, label %607, label %684

607:                                              ; preds = %604
  %608 = load i8*, i8** %25, align 8
  %609 = load i32, i32* %28, align 4
  %610 = load i32, i32* %39, align 4
  %611 = sub nsw i32 %609, %610
  %612 = sext i32 %611 to i64
  %613 = getelementptr inbounds i8, i8* %608, i64 %612
  %614 = load i32, i32* %46, align 4
  %615 = and i32 %614, 1
  %616 = shl i32 %615, 3
  %617 = sext i32 %616 to i64
  %618 = getelementptr inbounds i8, i8* %613, i64 %617
  %619 = load i32, i32* %30, align 4
  %620 = load i32, i32* %41, align 4
  %621 = sub nsw i32 %619, %620
  %622 = load i32, i32* %46, align 4
  %623 = and i32 %622, 2
  %624 = shl i32 %623, 2
  %625 = add nsw i32 %621, %624
  %626 = load i32, i32* %42, align 4
  %627 = mul nsw i32 %625, %626
  %628 = sext i32 %627 to i64
  %629 = getelementptr inbounds i8, i8* %618, i64 %628
  store i8* %629, i8** %23, align 8
  %630 = load i8*, i8** %21, align 8
  %631 = load i32, i32* %46, align 4
  %632 = and i32 %631, 1
  %633 = shl i32 %632, 3
  %634 = sext i32 %633 to i64
  %635 = getelementptr inbounds i8, i8* %630, i64 %634
  %636 = load i32, i32* %46, align 4
  %637 = and i32 %636, 2
  %638 = shl i32 %637, 2
  %639 = mul nsw i32 %638, 16
  %640 = sext i32 %639 to i64
  %641 = getelementptr inbounds i8, i8* %635, i64 %640
  store i8* %641, i8** %22, align 8
  %642 = load i8*, i8** %23, align 8
  %643 = load i8*, i8** %22, align 8
  %644 = load i32, i32* %42, align 4
  %645 = load i32, i32* %46, align 4
  %646 = add nsw i32 %645, 1
  %647 = sext i32 %646 to i64
  %648 = getelementptr inbounds [5 x i32], [5 x i32]* %19, i64 0, i64 %647
  %649 = load i32, i32* %648, align 4
  %650 = call i32 @SAD_Block(i8* %642, i8* %643, i32 %644, i32 %649)
  store i32 %650, i32* %47, align 4
  %651 = load i32, i32* %47, align 4
  %652 = load i32, i32* %46, align 4
  %653 = add nsw i32 %652, 1
  %654 = sext i32 %653 to i64
  %655 = getelementptr inbounds [5 x i32], [5 x i32]* %19, i64 0, i64 %654
  %656 = load i32, i32* %655, align 4
  %657 = icmp slt i32 %651, %656
  br i1 %657, label %658, label %680

658:                                              ; preds = %607
  %659 = load i32, i32* %28, align 4
  %660 = load i32, i32* %12, align 4
  %661 = sub nsw i32 %659, %660
  %662 = load i32, i32* %46, align 4
  %663 = add nsw i32 %662, 1
  %664 = sext i32 %663 to i64
  %665 = getelementptr inbounds [5 x %struct.motionvector], [5 x %struct.motionvector]* %20, i64 0, i64 %664
  %666 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %665, i32 0, i32 0
  store i32 %661, i32* %666, align 8
  %667 = load i32, i32* %30, align 4
  %668 = load i32, i32* %13, align 4
  %669 = sub nsw i32 %667, %668
  %670 = load i32, i32* %46, align 4
  %671 = add nsw i32 %670, 1
  %672 = sext i32 %671 to i64
  %673 = getelementptr inbounds [5 x %struct.motionvector], [5 x %struct.motionvector]* %20, i64 0, i64 %672
  %674 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %673, i32 0, i32 1
  store i32 %669, i32* %674, align 4
  %675 = load i32, i32* %47, align 4
  %676 = load i32, i32* %46, align 4
  %677 = add nsw i32 %676, 1
  %678 = sext i32 %677 to i64
  %679 = getelementptr inbounds [5 x i32], [5 x i32]* %19, i64 0, i64 %678
  store i32 %675, i32* %679, align 4
  br label %680

680:                                              ; preds = %658, %607
  br label %681

681:                                              ; preds = %680
  %682 = load i32, i32* %46, align 4
  %683 = add nsw i32 %682, 1
  store i32 %683, i32* %46, align 4
  br label %604

684:                                              ; preds = %604
  br label %685

685:                                              ; preds = %684, %599, %595, %591, %587
  %686 = load i32, i32* %29, align 4
  %687 = load i32, i32* %31, align 4
  %688 = mul nsw i32 2, %687
  %689 = icmp slt i32 %686, %688
  br i1 %689, label %690, label %693

690:                                              ; preds = %685
  %691 = load i32, i32* %28, align 4
  %692 = add nsw i32 %691, 1
  store i32 %692, i32* %28, align 4
  br label %714

693:                                              ; preds = %685
  %694 = load i32, i32* %29, align 4
  %695 = load i32, i32* %31, align 4
  %696 = mul nsw i32 4, %695
  %697 = icmp slt i32 %694, %696
  br i1 %697, label %698, label %701

698:                                              ; preds = %693
  %699 = load i32, i32* %30, align 4
  %700 = add nsw i32 %699, 1
  store i32 %700, i32* %30, align 4
  br label %713

701:                                              ; preds = %693
  %702 = load i32, i32* %29, align 4
  %703 = load i32, i32* %31, align 4
  %704 = mul nsw i32 6, %703
  %705 = icmp slt i32 %702, %704
  br i1 %705, label %706, label %709

706:                                              ; preds = %701
  %707 = load i32, i32* %28, align 4
  %708 = add nsw i32 %707, -1
  store i32 %708, i32* %28, align 4
  br label %712

709:                                              ; preds = %701
  %710 = load i32, i32* %30, align 4
  %711 = add nsw i32 %710, -1
  store i32 %711, i32* %30, align 4
  br label %712

712:                                              ; preds = %709, %706
  br label %713

713:                                              ; preds = %712, %698
  br label %714

714:                                              ; preds = %713, %690
  br label %715

715:                                              ; preds = %714
  %716 = load i32, i32* %29, align 4
  %717 = add nsw i32 %716, 1
  store i32 %717, i32* %29, align 4
  br label %582

718:                                              ; preds = %582
  br label %719

719:                                              ; preds = %718
  %720 = load i32, i32* %31, align 4
  %721 = add nsw i32 %720, 1
  store i32 %721, i32* %31, align 4
  br label %571

722:                                              ; preds = %571
  br label %723

723:                                              ; preds = %722, %437
  %724 = load i32, i32* %12, align 4
  %725 = sdiv i32 %724, 16
  %726 = add nsw i32 %725, 1
  store i32 %726, i32* %28, align 4
  %727 = load i32, i32* %13, align 4
  %728 = sdiv i32 %727, 16
  %729 = add nsw i32 %728, 1
  store i32 %729, i32* %30, align 4
  %730 = load i32, i32* @advanced, align 4
  %731 = icmp ne i32 %730, 0
  br i1 %731, label %771, label %732

732:                                              ; preds = %723
  %733 = getelementptr inbounds [5 x %struct.motionvector], [5 x %struct.motionvector]* %20, i64 0, i64 0
  %734 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %733, i32 0, i32 0
  %735 = load i32, i32* %734, align 16
  %736 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %17, align 8
  %737 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %736, i64 0
  %738 = load i32, i32* %30, align 4
  %739 = sext i32 %738 to i64
  %740 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %737, i64 0, i64 %739
  %741 = load i32, i32* %28, align 4
  %742 = sext i32 %741 to i64
  %743 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %740, i64 0, i64 %742
  %744 = load %struct.motionvector*, %struct.motionvector** %743, align 8
  %745 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %744, i32 0, i32 0
  store i32 %735, i32* %745, align 4
  %746 = getelementptr inbounds [5 x %struct.motionvector], [5 x %struct.motionvector]* %20, i64 0, i64 0
  %747 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %746, i32 0, i32 1
  %748 = load i32, i32* %747, align 4
  %749 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %17, align 8
  %750 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %749, i64 0
  %751 = load i32, i32* %30, align 4
  %752 = sext i32 %751 to i64
  %753 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %750, i64 0, i64 %752
  %754 = load i32, i32* %28, align 4
  %755 = sext i32 %754 to i64
  %756 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %753, i64 0, i64 %755
  %757 = load %struct.motionvector*, %struct.motionvector** %756, align 8
  %758 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %757, i32 0, i32 1
  store i32 %748, i32* %758, align 4
  %759 = getelementptr inbounds [5 x i32], [5 x i32]* %19, i64 0, i64 0
  %760 = load i32, i32* %759, align 16
  %761 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %17, align 8
  %762 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %761, i64 0
  %763 = load i32, i32* %30, align 4
  %764 = sext i32 %763 to i64
  %765 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %762, i64 0, i64 %764
  %766 = load i32, i32* %28, align 4
  %767 = sext i32 %766 to i64
  %768 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %765, i64 0, i64 %767
  %769 = load %struct.motionvector*, %struct.motionvector** %768, align 8
  %770 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %769, i32 0, i32 4
  store i32 %760, i32* %770, align 4
  br label %830

771:                                              ; preds = %723
  store i32 0, i32* %29, align 4
  br label %772

772:                                              ; preds = %826, %771
  %773 = load i32, i32* %29, align 4
  %774 = icmp slt i32 %773, 5
  br i1 %774, label %775, label %829

775:                                              ; preds = %772
  %776 = load i32, i32* %29, align 4
  %777 = sext i32 %776 to i64
  %778 = getelementptr inbounds [5 x %struct.motionvector], [5 x %struct.motionvector]* %20, i64 0, i64 %777
  %779 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %778, i32 0, i32 0
  %780 = load i32, i32* %779, align 8
  %781 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %17, align 8
  %782 = load i32, i32* %29, align 4
  %783 = sext i32 %782 to i64
  %784 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %781, i64 %783
  %785 = load i32, i32* %30, align 4
  %786 = sext i32 %785 to i64
  %787 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %784, i64 0, i64 %786
  %788 = load i32, i32* %28, align 4
  %789 = sext i32 %788 to i64
  %790 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %787, i64 0, i64 %789
  %791 = load %struct.motionvector*, %struct.motionvector** %790, align 8
  %792 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %791, i32 0, i32 0
  store i32 %780, i32* %792, align 4
  %793 = load i32, i32* %29, align 4
  %794 = sext i32 %793 to i64
  %795 = getelementptr inbounds [5 x %struct.motionvector], [5 x %struct.motionvector]* %20, i64 0, i64 %794
  %796 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %795, i32 0, i32 1
  %797 = load i32, i32* %796, align 4
  %798 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %17, align 8
  %799 = load i32, i32* %29, align 4
  %800 = sext i32 %799 to i64
  %801 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %798, i64 %800
  %802 = load i32, i32* %30, align 4
  %803 = sext i32 %802 to i64
  %804 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %801, i64 0, i64 %803
  %805 = load i32, i32* %28, align 4
  %806 = sext i32 %805 to i64
  %807 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %804, i64 0, i64 %806
  %808 = load %struct.motionvector*, %struct.motionvector** %807, align 8
  %809 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %808, i32 0, i32 1
  store i32 %797, i32* %809, align 4
  %810 = load i32, i32* %29, align 4
  %811 = sext i32 %810 to i64
  %812 = getelementptr inbounds [5 x i32], [5 x i32]* %19, i64 0, i64 %811
  %813 = load i32, i32* %812, align 4
  %814 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %17, align 8
  %815 = load i32, i32* %29, align 4
  %816 = sext i32 %815 to i64
  %817 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %814, i64 %816
  %818 = load i32, i32* %30, align 4
  %819 = sext i32 %818 to i64
  %820 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %817, i64 0, i64 %819
  %821 = load i32, i32* %28, align 4
  %822 = sext i32 %821 to i64
  %823 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %820, i64 0, i64 %822
  %824 = load %struct.motionvector*, %struct.motionvector** %823, align 8
  %825 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %824, i32 0, i32 4
  store i32 %813, i32* %825, align 4
  br label %826

826:                                              ; preds = %775
  %827 = load i32, i32* %29, align 4
  %828 = add nsw i32 %827, 1
  store i32 %828, i32* %29, align 4
  br label %772

829:                                              ; preds = %772
  br label %830

830:                                              ; preds = %829, %732
  %831 = load i8*, i8** %21, align 8
  call void @free(i8* %831) #8
  %832 = load i8*, i8** %24, align 8
  call void @free(i8* %832) #8
  %833 = load i32, i32* @advanced, align 4
  %834 = icmp ne i32 %833, 0
  br i1 %834, label %835, label %837

835:                                              ; preds = %830
  %836 = load i8*, i8** %25, align 8
  call void @free(i8* %836) #8
  br label %837

837:                                              ; preds = %835, %830
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @LoadArea(i8* %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5) #0 {
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  store i8* %0, i8** %7, align 8
  store i32 %1, i32* %8, align 4
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store i32 %4, i32* %11, align 4
  store i32 %5, i32* %12, align 4
  %18 = load i32, i32* %10, align 4
  %19 = sext i32 %18 to i64
  %20 = mul i64 1, %19
  %21 = load i32, i32* %11, align 4
  %22 = sext i32 %21 to i64
  %23 = mul i64 %20, %22
  %24 = call noalias i8* @malloc(i64 %23) #8
  store i8* %24, i8** %13, align 8
  %25 = load i32, i32* %10, align 4
  store i32 %25, i32* %16, align 4
  %26 = load i32, i32* %11, align 4
  store i32 %26, i32* %17, align 4
  %27 = load i8*, i8** %7, align 8
  %28 = load i32, i32* %9, align 4
  %29 = load i32, i32* %12, align 4
  %30 = mul nsw i32 %28, %29
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i8, i8* %27, i64 %31
  %33 = load i32, i32* %8, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i8, i8* %32, i64 %34
  store i8* %35, i8** %14, align 8
  %36 = load i8*, i8** %13, align 8
  store i8* %36, i8** %15, align 8
  br label %37

37:                                               ; preds = %52, %6
  %38 = load i32, i32* %17, align 4
  %39 = add nsw i32 %38, -1
  store i32 %39, i32* %17, align 4
  %40 = icmp ne i32 %38, 0
  br i1 %40, label %41, label %60

41:                                               ; preds = %37
  br label %42

42:                                               ; preds = %46, %41
  %43 = load i32, i32* %16, align 4
  %44 = add nsw i32 %43, -1
  store i32 %44, i32* %16, align 4
  %45 = icmp ne i32 %43, 0
  br i1 %45, label %46, label %52

46:                                               ; preds = %42
  %47 = load i8*, i8** %14, align 8
  %48 = getelementptr inbounds i8, i8* %47, i32 1
  store i8* %48, i8** %14, align 8
  %49 = load i8, i8* %47, align 1
  %50 = load i8*, i8** %15, align 8
  %51 = getelementptr inbounds i8, i8* %50, i32 1
  store i8* %51, i8** %15, align 8
  store i8 %49, i8* %50, align 1
  br label %42

52:                                               ; preds = %42
  %53 = load i32, i32* %10, align 4
  store i32 %53, i32* %16, align 4
  %54 = load i32, i32* %12, align 4
  %55 = load i32, i32* %10, align 4
  %56 = sub nsw i32 %54, %55
  %57 = load i8*, i8** %14, align 8
  %58 = sext i32 %56 to i64
  %59 = getelementptr inbounds i8, i8* %57, i64 %58
  store i8* %59, i8** %14, align 8
  br label %37

60:                                               ; preds = %37
  %61 = load i8*, i8** %13, align 8
  ret i8* %61
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @SAD_Macroblock(i8* %0, i8* %1, i32 %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  store i8* %0, i8** %6, align 8
  store i8* %1, i8** %7, align 8
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store i32 0, i32* %11, align 4
  %13 = load i8*, i8** %7, align 8
  store i8* %13, i8** %12, align 8
  store i32 16, i32* %10, align 4
  br label %14

14:                                               ; preds = %204, %4
  %15 = load i32, i32* %10, align 4
  %16 = add nsw i32 %15, -1
  store i32 %16, i32* %10, align 4
  %17 = icmp ne i32 %15, 0
  br i1 %17, label %18, label %205

18:                                               ; preds = %14
  %19 = load i8*, i8** %6, align 8
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = load i8*, i8** %12, align 8
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = sub nsw i32 %21, %24
  %26 = call i32 @abs(i32 %25) #11
  %27 = load i8*, i8** %6, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = load i8*, i8** %12, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = sub nsw i32 %30, %34
  %36 = call i32 @abs(i32 %35) #11
  %37 = add nsw i32 %26, %36
  %38 = load i8*, i8** %6, align 8
  %39 = getelementptr inbounds i8, i8* %38, i64 2
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = load i8*, i8** %12, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 2
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = sub nsw i32 %41, %45
  %47 = call i32 @abs(i32 %46) #11
  %48 = add nsw i32 %37, %47
  %49 = load i8*, i8** %6, align 8
  %50 = getelementptr inbounds i8, i8* %49, i64 3
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = load i8*, i8** %12, align 8
  %54 = getelementptr inbounds i8, i8* %53, i64 3
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = sub nsw i32 %52, %56
  %58 = call i32 @abs(i32 %57) #11
  %59 = add nsw i32 %48, %58
  %60 = load i8*, i8** %6, align 8
  %61 = getelementptr inbounds i8, i8* %60, i64 4
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = load i8*, i8** %12, align 8
  %65 = getelementptr inbounds i8, i8* %64, i64 4
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = sub nsw i32 %63, %67
  %69 = call i32 @abs(i32 %68) #11
  %70 = add nsw i32 %59, %69
  %71 = load i8*, i8** %6, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 5
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = load i8*, i8** %12, align 8
  %76 = getelementptr inbounds i8, i8* %75, i64 5
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = sub nsw i32 %74, %78
  %80 = call i32 @abs(i32 %79) #11
  %81 = add nsw i32 %70, %80
  %82 = load i8*, i8** %6, align 8
  %83 = getelementptr inbounds i8, i8* %82, i64 6
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = load i8*, i8** %12, align 8
  %87 = getelementptr inbounds i8, i8* %86, i64 6
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = sub nsw i32 %85, %89
  %91 = call i32 @abs(i32 %90) #11
  %92 = add nsw i32 %81, %91
  %93 = load i8*, i8** %6, align 8
  %94 = getelementptr inbounds i8, i8* %93, i64 7
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i32
  %97 = load i8*, i8** %12, align 8
  %98 = getelementptr inbounds i8, i8* %97, i64 7
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = sub nsw i32 %96, %100
  %102 = call i32 @abs(i32 %101) #11
  %103 = add nsw i32 %92, %102
  %104 = load i8*, i8** %6, align 8
  %105 = getelementptr inbounds i8, i8* %104, i64 8
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = load i8*, i8** %12, align 8
  %109 = getelementptr inbounds i8, i8* %108, i64 8
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i32
  %112 = sub nsw i32 %107, %111
  %113 = call i32 @abs(i32 %112) #11
  %114 = add nsw i32 %103, %113
  %115 = load i8*, i8** %6, align 8
  %116 = getelementptr inbounds i8, i8* %115, i64 9
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = load i8*, i8** %12, align 8
  %120 = getelementptr inbounds i8, i8* %119, i64 9
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = sub nsw i32 %118, %122
  %124 = call i32 @abs(i32 %123) #11
  %125 = add nsw i32 %114, %124
  %126 = load i8*, i8** %6, align 8
  %127 = getelementptr inbounds i8, i8* %126, i64 10
  %128 = load i8, i8* %127, align 1
  %129 = zext i8 %128 to i32
  %130 = load i8*, i8** %12, align 8
  %131 = getelementptr inbounds i8, i8* %130, i64 10
  %132 = load i8, i8* %131, align 1
  %133 = zext i8 %132 to i32
  %134 = sub nsw i32 %129, %133
  %135 = call i32 @abs(i32 %134) #11
  %136 = add nsw i32 %125, %135
  %137 = load i8*, i8** %6, align 8
  %138 = getelementptr inbounds i8, i8* %137, i64 11
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i32
  %141 = load i8*, i8** %12, align 8
  %142 = getelementptr inbounds i8, i8* %141, i64 11
  %143 = load i8, i8* %142, align 1
  %144 = zext i8 %143 to i32
  %145 = sub nsw i32 %140, %144
  %146 = call i32 @abs(i32 %145) #11
  %147 = add nsw i32 %136, %146
  %148 = load i8*, i8** %6, align 8
  %149 = getelementptr inbounds i8, i8* %148, i64 12
  %150 = load i8, i8* %149, align 1
  %151 = zext i8 %150 to i32
  %152 = load i8*, i8** %12, align 8
  %153 = getelementptr inbounds i8, i8* %152, i64 12
  %154 = load i8, i8* %153, align 1
  %155 = zext i8 %154 to i32
  %156 = sub nsw i32 %151, %155
  %157 = call i32 @abs(i32 %156) #11
  %158 = add nsw i32 %147, %157
  %159 = load i8*, i8** %6, align 8
  %160 = getelementptr inbounds i8, i8* %159, i64 13
  %161 = load i8, i8* %160, align 1
  %162 = zext i8 %161 to i32
  %163 = load i8*, i8** %12, align 8
  %164 = getelementptr inbounds i8, i8* %163, i64 13
  %165 = load i8, i8* %164, align 1
  %166 = zext i8 %165 to i32
  %167 = sub nsw i32 %162, %166
  %168 = call i32 @abs(i32 %167) #11
  %169 = add nsw i32 %158, %168
  %170 = load i8*, i8** %6, align 8
  %171 = getelementptr inbounds i8, i8* %170, i64 14
  %172 = load i8, i8* %171, align 1
  %173 = zext i8 %172 to i32
  %174 = load i8*, i8** %12, align 8
  %175 = getelementptr inbounds i8, i8* %174, i64 14
  %176 = load i8, i8* %175, align 1
  %177 = zext i8 %176 to i32
  %178 = sub nsw i32 %173, %177
  %179 = call i32 @abs(i32 %178) #11
  %180 = add nsw i32 %169, %179
  %181 = load i8*, i8** %6, align 8
  %182 = getelementptr inbounds i8, i8* %181, i64 15
  %183 = load i8, i8* %182, align 1
  %184 = zext i8 %183 to i32
  %185 = load i8*, i8** %12, align 8
  %186 = getelementptr inbounds i8, i8* %185, i64 15
  %187 = load i8, i8* %186, align 1
  %188 = zext i8 %187 to i32
  %189 = sub nsw i32 %184, %188
  %190 = call i32 @abs(i32 %189) #11
  %191 = add nsw i32 %180, %190
  %192 = load i32, i32* %11, align 4
  %193 = add nsw i32 %192, %191
  store i32 %193, i32* %11, align 4
  %194 = load i32, i32* %8, align 4
  %195 = load i8*, i8** %6, align 8
  %196 = sext i32 %194 to i64
  %197 = getelementptr inbounds i8, i8* %195, i64 %196
  store i8* %197, i8** %6, align 8
  %198 = load i8*, i8** %12, align 8
  %199 = getelementptr inbounds i8, i8* %198, i64 16
  store i8* %199, i8** %12, align 8
  %200 = load i32, i32* %11, align 4
  %201 = load i32, i32* %9, align 4
  %202 = icmp sgt i32 %200, %201
  br i1 %202, label %203, label %204

203:                                              ; preds = %18
  store i32 2147483647, i32* %5, align 4
  br label %207

204:                                              ; preds = %18
  br label %14

205:                                              ; preds = %14
  %206 = load i32, i32* %11, align 4
  store i32 %206, i32* %5, align 4
  br label %207

207:                                              ; preds = %205, %203
  %208 = load i32, i32* %5, align 4
  ret i32 %208
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @SAD_Block(i8* %0, i8* %1, i32 %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  store i8* %0, i8** %6, align 8
  store i8* %1, i8** %7, align 8
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store i32 0, i32* %11, align 4
  %13 = load i8*, i8** %7, align 8
  store i8* %13, i8** %12, align 8
  store i32 8, i32* %10, align 4
  br label %14

14:                                               ; preds = %116, %4
  %15 = load i32, i32* %10, align 4
  %16 = add nsw i32 %15, -1
  store i32 %16, i32* %10, align 4
  %17 = icmp ne i32 %15, 0
  br i1 %17, label %18, label %117

18:                                               ; preds = %14
  %19 = load i8*, i8** %6, align 8
  %20 = load i8, i8* %19, align 1
  %21 = zext i8 %20 to i32
  %22 = load i8*, i8** %12, align 8
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i32
  %25 = sub nsw i32 %21, %24
  %26 = call i32 @abs(i32 %25) #11
  %27 = load i8*, i8** %6, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 1
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i32
  %31 = load i8*, i8** %12, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = sub nsw i32 %30, %34
  %36 = call i32 @abs(i32 %35) #11
  %37 = add nsw i32 %26, %36
  %38 = load i8*, i8** %6, align 8
  %39 = getelementptr inbounds i8, i8* %38, i64 2
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = load i8*, i8** %12, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 2
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = sub nsw i32 %41, %45
  %47 = call i32 @abs(i32 %46) #11
  %48 = add nsw i32 %37, %47
  %49 = load i8*, i8** %6, align 8
  %50 = getelementptr inbounds i8, i8* %49, i64 3
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = load i8*, i8** %12, align 8
  %54 = getelementptr inbounds i8, i8* %53, i64 3
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = sub nsw i32 %52, %56
  %58 = call i32 @abs(i32 %57) #11
  %59 = add nsw i32 %48, %58
  %60 = load i8*, i8** %6, align 8
  %61 = getelementptr inbounds i8, i8* %60, i64 4
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  %64 = load i8*, i8** %12, align 8
  %65 = getelementptr inbounds i8, i8* %64, i64 4
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = sub nsw i32 %63, %67
  %69 = call i32 @abs(i32 %68) #11
  %70 = add nsw i32 %59, %69
  %71 = load i8*, i8** %6, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 5
  %73 = load i8, i8* %72, align 1
  %74 = zext i8 %73 to i32
  %75 = load i8*, i8** %12, align 8
  %76 = getelementptr inbounds i8, i8* %75, i64 5
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i32
  %79 = sub nsw i32 %74, %78
  %80 = call i32 @abs(i32 %79) #11
  %81 = add nsw i32 %70, %80
  %82 = load i8*, i8** %6, align 8
  %83 = getelementptr inbounds i8, i8* %82, i64 6
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i32
  %86 = load i8*, i8** %12, align 8
  %87 = getelementptr inbounds i8, i8* %86, i64 6
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = sub nsw i32 %85, %89
  %91 = call i32 @abs(i32 %90) #11
  %92 = add nsw i32 %81, %91
  %93 = load i8*, i8** %6, align 8
  %94 = getelementptr inbounds i8, i8* %93, i64 7
  %95 = load i8, i8* %94, align 1
  %96 = zext i8 %95 to i32
  %97 = load i8*, i8** %12, align 8
  %98 = getelementptr inbounds i8, i8* %97, i64 7
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = sub nsw i32 %96, %100
  %102 = call i32 @abs(i32 %101) #11
  %103 = add nsw i32 %92, %102
  %104 = load i32, i32* %11, align 4
  %105 = add nsw i32 %104, %103
  store i32 %105, i32* %11, align 4
  %106 = load i32, i32* %8, align 4
  %107 = load i8*, i8** %6, align 8
  %108 = sext i32 %106 to i64
  %109 = getelementptr inbounds i8, i8* %107, i64 %108
  store i8* %109, i8** %6, align 8
  %110 = load i8*, i8** %12, align 8
  %111 = getelementptr inbounds i8, i8* %110, i64 16
  store i8* %111, i8** %12, align 8
  %112 = load i32, i32* %11, align 4
  %113 = load i32, i32* %9, align 4
  %114 = icmp sgt i32 %112, %113
  br i1 %114, label %115, label %116

115:                                              ; preds = %18
  store i32 2147483647, i32* %5, align 4
  br label %119

116:                                              ; preds = %18
  br label %14

117:                                              ; preds = %14
  %118 = load i32, i32* %11, align 4
  store i32 %118, i32* %5, align 4
  br label %119

119:                                              ; preds = %117, %115
  %120 = load i32, i32* %5, align 4
  ret i32 %120
}

; Function Attrs: nounwind readnone
declare dso_local i32 @abs(i32) #7

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @SAD_MB_Bidir(i8* %0, i8* %1, i8* %2, i32 %3, i32 %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  store i8* %0, i8** %7, align 8
  store i8* %1, i8** %8, align 8
  store i8* %2, i8** %9, align 8
  store i32 %3, i32* %10, align 4
  store i32 %4, i32* %11, align 4
  store i32 0, i32* %13, align 4
  %16 = load i8*, i8** %8, align 8
  store i8* %16, i8** %15, align 8
  %17 = load i8*, i8** %9, align 8
  store i8* %17, i8** %14, align 8
  store i32 16, i32* %12, align 4
  br label %18

18:                                               ; preds = %309, %5
  %19 = load i32, i32* %12, align 4
  %20 = add nsw i32 %19, -1
  store i32 %20, i32* %12, align 4
  %21 = icmp ne i32 %19, 0
  br i1 %21, label %22, label %310

22:                                               ; preds = %18
  %23 = load i8*, i8** %7, align 8
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i32
  %26 = load i8*, i8** %15, align 8
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i32
  %29 = load i8*, i8** %14, align 8
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i32
  %32 = add nsw i32 %28, %31
  %33 = ashr i32 %32, 1
  %34 = sub nsw i32 %25, %33
  %35 = call i32 @abs(i32 %34) #11
  %36 = load i8*, i8** %7, align 8
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = load i8*, i8** %15, align 8
  %41 = getelementptr inbounds i8, i8* %40, i64 1
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  %44 = load i8*, i8** %14, align 8
  %45 = getelementptr inbounds i8, i8* %44, i64 1
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = add nsw i32 %43, %47
  %49 = ashr i32 %48, 1
  %50 = sub nsw i32 %39, %49
  %51 = call i32 @abs(i32 %50) #11
  %52 = add nsw i32 %35, %51
  %53 = load i8*, i8** %7, align 8
  %54 = getelementptr inbounds i8, i8* %53, i64 2
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = load i8*, i8** %15, align 8
  %58 = getelementptr inbounds i8, i8* %57, i64 2
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i32
  %61 = load i8*, i8** %14, align 8
  %62 = getelementptr inbounds i8, i8* %61, i64 2
  %63 = load i8, i8* %62, align 1
  %64 = zext i8 %63 to i32
  %65 = add nsw i32 %60, %64
  %66 = ashr i32 %65, 1
  %67 = sub nsw i32 %56, %66
  %68 = call i32 @abs(i32 %67) #11
  %69 = add nsw i32 %52, %68
  %70 = load i8*, i8** %7, align 8
  %71 = getelementptr inbounds i8, i8* %70, i64 3
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = load i8*, i8** %15, align 8
  %75 = getelementptr inbounds i8, i8* %74, i64 3
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = load i8*, i8** %14, align 8
  %79 = getelementptr inbounds i8, i8* %78, i64 3
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = add nsw i32 %77, %81
  %83 = ashr i32 %82, 1
  %84 = sub nsw i32 %73, %83
  %85 = call i32 @abs(i32 %84) #11
  %86 = add nsw i32 %69, %85
  %87 = load i8*, i8** %7, align 8
  %88 = getelementptr inbounds i8, i8* %87, i64 4
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = load i8*, i8** %15, align 8
  %92 = getelementptr inbounds i8, i8* %91, i64 4
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i32
  %95 = load i8*, i8** %14, align 8
  %96 = getelementptr inbounds i8, i8* %95, i64 4
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i32
  %99 = add nsw i32 %94, %98
  %100 = ashr i32 %99, 1
  %101 = sub nsw i32 %90, %100
  %102 = call i32 @abs(i32 %101) #11
  %103 = add nsw i32 %86, %102
  %104 = load i8*, i8** %7, align 8
  %105 = getelementptr inbounds i8, i8* %104, i64 5
  %106 = load i8, i8* %105, align 1
  %107 = zext i8 %106 to i32
  %108 = load i8*, i8** %15, align 8
  %109 = getelementptr inbounds i8, i8* %108, i64 5
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i32
  %112 = load i8*, i8** %14, align 8
  %113 = getelementptr inbounds i8, i8* %112, i64 5
  %114 = load i8, i8* %113, align 1
  %115 = zext i8 %114 to i32
  %116 = add nsw i32 %111, %115
  %117 = ashr i32 %116, 1
  %118 = sub nsw i32 %107, %117
  %119 = call i32 @abs(i32 %118) #11
  %120 = add nsw i32 %103, %119
  %121 = load i8*, i8** %7, align 8
  %122 = getelementptr inbounds i8, i8* %121, i64 6
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i32
  %125 = load i8*, i8** %15, align 8
  %126 = getelementptr inbounds i8, i8* %125, i64 6
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i32
  %129 = load i8*, i8** %14, align 8
  %130 = getelementptr inbounds i8, i8* %129, i64 6
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i32
  %133 = add nsw i32 %128, %132
  %134 = ashr i32 %133, 1
  %135 = sub nsw i32 %124, %134
  %136 = call i32 @abs(i32 %135) #11
  %137 = add nsw i32 %120, %136
  %138 = load i8*, i8** %7, align 8
  %139 = getelementptr inbounds i8, i8* %138, i64 7
  %140 = load i8, i8* %139, align 1
  %141 = zext i8 %140 to i32
  %142 = load i8*, i8** %15, align 8
  %143 = getelementptr inbounds i8, i8* %142, i64 7
  %144 = load i8, i8* %143, align 1
  %145 = zext i8 %144 to i32
  %146 = load i8*, i8** %14, align 8
  %147 = getelementptr inbounds i8, i8* %146, i64 7
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i32
  %150 = add nsw i32 %145, %149
  %151 = ashr i32 %150, 1
  %152 = sub nsw i32 %141, %151
  %153 = call i32 @abs(i32 %152) #11
  %154 = add nsw i32 %137, %153
  %155 = load i8*, i8** %7, align 8
  %156 = getelementptr inbounds i8, i8* %155, i64 8
  %157 = load i8, i8* %156, align 1
  %158 = zext i8 %157 to i32
  %159 = load i8*, i8** %15, align 8
  %160 = getelementptr inbounds i8, i8* %159, i64 8
  %161 = load i8, i8* %160, align 1
  %162 = zext i8 %161 to i32
  %163 = load i8*, i8** %14, align 8
  %164 = getelementptr inbounds i8, i8* %163, i64 8
  %165 = load i8, i8* %164, align 1
  %166 = zext i8 %165 to i32
  %167 = add nsw i32 %162, %166
  %168 = ashr i32 %167, 1
  %169 = sub nsw i32 %158, %168
  %170 = call i32 @abs(i32 %169) #11
  %171 = add nsw i32 %154, %170
  %172 = load i8*, i8** %7, align 8
  %173 = getelementptr inbounds i8, i8* %172, i64 9
  %174 = load i8, i8* %173, align 1
  %175 = zext i8 %174 to i32
  %176 = load i8*, i8** %15, align 8
  %177 = getelementptr inbounds i8, i8* %176, i64 9
  %178 = load i8, i8* %177, align 1
  %179 = zext i8 %178 to i32
  %180 = load i8*, i8** %14, align 8
  %181 = getelementptr inbounds i8, i8* %180, i64 9
  %182 = load i8, i8* %181, align 1
  %183 = zext i8 %182 to i32
  %184 = add nsw i32 %179, %183
  %185 = ashr i32 %184, 1
  %186 = sub nsw i32 %175, %185
  %187 = call i32 @abs(i32 %186) #11
  %188 = add nsw i32 %171, %187
  %189 = load i8*, i8** %7, align 8
  %190 = getelementptr inbounds i8, i8* %189, i64 10
  %191 = load i8, i8* %190, align 1
  %192 = zext i8 %191 to i32
  %193 = load i8*, i8** %15, align 8
  %194 = getelementptr inbounds i8, i8* %193, i64 10
  %195 = load i8, i8* %194, align 1
  %196 = zext i8 %195 to i32
  %197 = load i8*, i8** %14, align 8
  %198 = getelementptr inbounds i8, i8* %197, i64 10
  %199 = load i8, i8* %198, align 1
  %200 = zext i8 %199 to i32
  %201 = add nsw i32 %196, %200
  %202 = ashr i32 %201, 1
  %203 = sub nsw i32 %192, %202
  %204 = call i32 @abs(i32 %203) #11
  %205 = add nsw i32 %188, %204
  %206 = load i8*, i8** %7, align 8
  %207 = getelementptr inbounds i8, i8* %206, i64 11
  %208 = load i8, i8* %207, align 1
  %209 = zext i8 %208 to i32
  %210 = load i8*, i8** %15, align 8
  %211 = getelementptr inbounds i8, i8* %210, i64 11
  %212 = load i8, i8* %211, align 1
  %213 = zext i8 %212 to i32
  %214 = load i8*, i8** %14, align 8
  %215 = getelementptr inbounds i8, i8* %214, i64 11
  %216 = load i8, i8* %215, align 1
  %217 = zext i8 %216 to i32
  %218 = add nsw i32 %213, %217
  %219 = ashr i32 %218, 1
  %220 = sub nsw i32 %209, %219
  %221 = call i32 @abs(i32 %220) #11
  %222 = add nsw i32 %205, %221
  %223 = load i8*, i8** %7, align 8
  %224 = getelementptr inbounds i8, i8* %223, i64 12
  %225 = load i8, i8* %224, align 1
  %226 = zext i8 %225 to i32
  %227 = load i8*, i8** %15, align 8
  %228 = getelementptr inbounds i8, i8* %227, i64 12
  %229 = load i8, i8* %228, align 1
  %230 = zext i8 %229 to i32
  %231 = load i8*, i8** %14, align 8
  %232 = getelementptr inbounds i8, i8* %231, i64 12
  %233 = load i8, i8* %232, align 1
  %234 = zext i8 %233 to i32
  %235 = add nsw i32 %230, %234
  %236 = ashr i32 %235, 1
  %237 = sub nsw i32 %226, %236
  %238 = call i32 @abs(i32 %237) #11
  %239 = add nsw i32 %222, %238
  %240 = load i8*, i8** %7, align 8
  %241 = getelementptr inbounds i8, i8* %240, i64 13
  %242 = load i8, i8* %241, align 1
  %243 = zext i8 %242 to i32
  %244 = load i8*, i8** %15, align 8
  %245 = getelementptr inbounds i8, i8* %244, i64 13
  %246 = load i8, i8* %245, align 1
  %247 = zext i8 %246 to i32
  %248 = load i8*, i8** %14, align 8
  %249 = getelementptr inbounds i8, i8* %248, i64 13
  %250 = load i8, i8* %249, align 1
  %251 = zext i8 %250 to i32
  %252 = add nsw i32 %247, %251
  %253 = ashr i32 %252, 1
  %254 = sub nsw i32 %243, %253
  %255 = call i32 @abs(i32 %254) #11
  %256 = add nsw i32 %239, %255
  %257 = load i8*, i8** %7, align 8
  %258 = getelementptr inbounds i8, i8* %257, i64 14
  %259 = load i8, i8* %258, align 1
  %260 = zext i8 %259 to i32
  %261 = load i8*, i8** %15, align 8
  %262 = getelementptr inbounds i8, i8* %261, i64 14
  %263 = load i8, i8* %262, align 1
  %264 = zext i8 %263 to i32
  %265 = load i8*, i8** %14, align 8
  %266 = getelementptr inbounds i8, i8* %265, i64 14
  %267 = load i8, i8* %266, align 1
  %268 = zext i8 %267 to i32
  %269 = add nsw i32 %264, %268
  %270 = ashr i32 %269, 1
  %271 = sub nsw i32 %260, %270
  %272 = call i32 @abs(i32 %271) #11
  %273 = add nsw i32 %256, %272
  %274 = load i8*, i8** %7, align 8
  %275 = getelementptr inbounds i8, i8* %274, i64 15
  %276 = load i8, i8* %275, align 1
  %277 = zext i8 %276 to i32
  %278 = load i8*, i8** %15, align 8
  %279 = getelementptr inbounds i8, i8* %278, i64 15
  %280 = load i8, i8* %279, align 1
  %281 = zext i8 %280 to i32
  %282 = load i8*, i8** %14, align 8
  %283 = getelementptr inbounds i8, i8* %282, i64 15
  %284 = load i8, i8* %283, align 1
  %285 = zext i8 %284 to i32
  %286 = add nsw i32 %281, %285
  %287 = ashr i32 %286, 1
  %288 = sub nsw i32 %277, %287
  %289 = call i32 @abs(i32 %288) #11
  %290 = add nsw i32 %273, %289
  %291 = load i32, i32* %13, align 4
  %292 = add nsw i32 %291, %290
  store i32 %292, i32* %13, align 4
  %293 = load i32, i32* %10, align 4
  %294 = load i8*, i8** %7, align 8
  %295 = sext i32 %293 to i64
  %296 = getelementptr inbounds i8, i8* %294, i64 %295
  store i8* %296, i8** %7, align 8
  %297 = load i32, i32* %10, align 4
  %298 = load i8*, i8** %15, align 8
  %299 = sext i32 %297 to i64
  %300 = getelementptr inbounds i8, i8* %298, i64 %299
  store i8* %300, i8** %15, align 8
  %301 = load i32, i32* %10, align 4
  %302 = load i8*, i8** %14, align 8
  %303 = sext i32 %301 to i64
  %304 = getelementptr inbounds i8, i8* %302, i64 %303
  store i8* %304, i8** %14, align 8
  %305 = load i32, i32* %13, align 4
  %306 = load i32, i32* %11, align 4
  %307 = icmp sgt i32 %305, %306
  br i1 %307, label %308, label %309

308:                                              ; preds = %22
  store i32 2147483647, i32* %6, align 4
  br label %312

309:                                              ; preds = %22
  br label %18

310:                                              ; preds = %18
  %311 = load i32, i32* %13, align 4
  store i32 %311, i32* %6, align 4
  br label %312

312:                                              ; preds = %310, %308
  %313 = load i32, i32* %6, align 4
  ret i32 %313
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @SAD_MB_integer(i32* %0, i32* %1, i32 %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32*, align 8
  store i32* %0, i32** %6, align 8
  store i32* %1, i32** %7, align 8
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store i32 0, i32* %11, align 4
  %13 = load i32*, i32** %7, align 8
  store i32* %13, i32** %12, align 8
  store i32 16, i32* %10, align 4
  br label %14

14:                                               ; preds = %172, %4
  %15 = load i32, i32* %10, align 4
  %16 = add nsw i32 %15, -1
  store i32 %16, i32* %10, align 4
  %17 = icmp ne i32 %15, 0
  br i1 %17, label %18, label %173

18:                                               ; preds = %14
  %19 = load i32*, i32** %6, align 8
  %20 = load i32, i32* %19, align 4
  %21 = load i32*, i32** %12, align 8
  %22 = load i32, i32* %21, align 4
  %23 = sub nsw i32 %20, %22
  %24 = call i32 @abs(i32 %23) #11
  %25 = load i32*, i32** %6, align 8
  %26 = getelementptr inbounds i32, i32* %25, i64 1
  %27 = load i32, i32* %26, align 4
  %28 = load i32*, i32** %12, align 8
  %29 = getelementptr inbounds i32, i32* %28, i64 1
  %30 = load i32, i32* %29, align 4
  %31 = sub nsw i32 %27, %30
  %32 = call i32 @abs(i32 %31) #11
  %33 = add nsw i32 %24, %32
  %34 = load i32*, i32** %6, align 8
  %35 = getelementptr inbounds i32, i32* %34, i64 2
  %36 = load i32, i32* %35, align 4
  %37 = load i32*, i32** %12, align 8
  %38 = getelementptr inbounds i32, i32* %37, i64 2
  %39 = load i32, i32* %38, align 4
  %40 = sub nsw i32 %36, %39
  %41 = call i32 @abs(i32 %40) #11
  %42 = add nsw i32 %33, %41
  %43 = load i32*, i32** %6, align 8
  %44 = getelementptr inbounds i32, i32* %43, i64 3
  %45 = load i32, i32* %44, align 4
  %46 = load i32*, i32** %12, align 8
  %47 = getelementptr inbounds i32, i32* %46, i64 3
  %48 = load i32, i32* %47, align 4
  %49 = sub nsw i32 %45, %48
  %50 = call i32 @abs(i32 %49) #11
  %51 = add nsw i32 %42, %50
  %52 = load i32*, i32** %6, align 8
  %53 = getelementptr inbounds i32, i32* %52, i64 4
  %54 = load i32, i32* %53, align 4
  %55 = load i32*, i32** %12, align 8
  %56 = getelementptr inbounds i32, i32* %55, i64 4
  %57 = load i32, i32* %56, align 4
  %58 = sub nsw i32 %54, %57
  %59 = call i32 @abs(i32 %58) #11
  %60 = add nsw i32 %51, %59
  %61 = load i32*, i32** %6, align 8
  %62 = getelementptr inbounds i32, i32* %61, i64 5
  %63 = load i32, i32* %62, align 4
  %64 = load i32*, i32** %12, align 8
  %65 = getelementptr inbounds i32, i32* %64, i64 5
  %66 = load i32, i32* %65, align 4
  %67 = sub nsw i32 %63, %66
  %68 = call i32 @abs(i32 %67) #11
  %69 = add nsw i32 %60, %68
  %70 = load i32*, i32** %6, align 8
  %71 = getelementptr inbounds i32, i32* %70, i64 6
  %72 = load i32, i32* %71, align 4
  %73 = load i32*, i32** %12, align 8
  %74 = getelementptr inbounds i32, i32* %73, i64 6
  %75 = load i32, i32* %74, align 4
  %76 = sub nsw i32 %72, %75
  %77 = call i32 @abs(i32 %76) #11
  %78 = add nsw i32 %69, %77
  %79 = load i32*, i32** %6, align 8
  %80 = getelementptr inbounds i32, i32* %79, i64 7
  %81 = load i32, i32* %80, align 4
  %82 = load i32*, i32** %12, align 8
  %83 = getelementptr inbounds i32, i32* %82, i64 7
  %84 = load i32, i32* %83, align 4
  %85 = sub nsw i32 %81, %84
  %86 = call i32 @abs(i32 %85) #11
  %87 = add nsw i32 %78, %86
  %88 = load i32*, i32** %6, align 8
  %89 = getelementptr inbounds i32, i32* %88, i64 8
  %90 = load i32, i32* %89, align 4
  %91 = load i32*, i32** %12, align 8
  %92 = getelementptr inbounds i32, i32* %91, i64 8
  %93 = load i32, i32* %92, align 4
  %94 = sub nsw i32 %90, %93
  %95 = call i32 @abs(i32 %94) #11
  %96 = add nsw i32 %87, %95
  %97 = load i32*, i32** %6, align 8
  %98 = getelementptr inbounds i32, i32* %97, i64 9
  %99 = load i32, i32* %98, align 4
  %100 = load i32*, i32** %12, align 8
  %101 = getelementptr inbounds i32, i32* %100, i64 9
  %102 = load i32, i32* %101, align 4
  %103 = sub nsw i32 %99, %102
  %104 = call i32 @abs(i32 %103) #11
  %105 = add nsw i32 %96, %104
  %106 = load i32*, i32** %6, align 8
  %107 = getelementptr inbounds i32, i32* %106, i64 10
  %108 = load i32, i32* %107, align 4
  %109 = load i32*, i32** %12, align 8
  %110 = getelementptr inbounds i32, i32* %109, i64 10
  %111 = load i32, i32* %110, align 4
  %112 = sub nsw i32 %108, %111
  %113 = call i32 @abs(i32 %112) #11
  %114 = add nsw i32 %105, %113
  %115 = load i32*, i32** %6, align 8
  %116 = getelementptr inbounds i32, i32* %115, i64 11
  %117 = load i32, i32* %116, align 4
  %118 = load i32*, i32** %12, align 8
  %119 = getelementptr inbounds i32, i32* %118, i64 11
  %120 = load i32, i32* %119, align 4
  %121 = sub nsw i32 %117, %120
  %122 = call i32 @abs(i32 %121) #11
  %123 = add nsw i32 %114, %122
  %124 = load i32*, i32** %6, align 8
  %125 = getelementptr inbounds i32, i32* %124, i64 12
  %126 = load i32, i32* %125, align 4
  %127 = load i32*, i32** %12, align 8
  %128 = getelementptr inbounds i32, i32* %127, i64 12
  %129 = load i32, i32* %128, align 4
  %130 = sub nsw i32 %126, %129
  %131 = call i32 @abs(i32 %130) #11
  %132 = add nsw i32 %123, %131
  %133 = load i32*, i32** %6, align 8
  %134 = getelementptr inbounds i32, i32* %133, i64 13
  %135 = load i32, i32* %134, align 4
  %136 = load i32*, i32** %12, align 8
  %137 = getelementptr inbounds i32, i32* %136, i64 13
  %138 = load i32, i32* %137, align 4
  %139 = sub nsw i32 %135, %138
  %140 = call i32 @abs(i32 %139) #11
  %141 = add nsw i32 %132, %140
  %142 = load i32*, i32** %6, align 8
  %143 = getelementptr inbounds i32, i32* %142, i64 14
  %144 = load i32, i32* %143, align 4
  %145 = load i32*, i32** %12, align 8
  %146 = getelementptr inbounds i32, i32* %145, i64 14
  %147 = load i32, i32* %146, align 4
  %148 = sub nsw i32 %144, %147
  %149 = call i32 @abs(i32 %148) #11
  %150 = add nsw i32 %141, %149
  %151 = load i32*, i32** %6, align 8
  %152 = getelementptr inbounds i32, i32* %151, i64 15
  %153 = load i32, i32* %152, align 4
  %154 = load i32*, i32** %12, align 8
  %155 = getelementptr inbounds i32, i32* %154, i64 15
  %156 = load i32, i32* %155, align 4
  %157 = sub nsw i32 %153, %156
  %158 = call i32 @abs(i32 %157) #11
  %159 = add nsw i32 %150, %158
  %160 = load i32, i32* %11, align 4
  %161 = add nsw i32 %160, %159
  store i32 %161, i32* %11, align 4
  %162 = load i32, i32* %8, align 4
  %163 = load i32*, i32** %6, align 8
  %164 = sext i32 %162 to i64
  %165 = getelementptr inbounds i32, i32* %163, i64 %164
  store i32* %165, i32** %6, align 8
  %166 = load i32*, i32** %12, align 8
  %167 = getelementptr inbounds i32, i32* %166, i64 16
  store i32* %167, i32** %12, align 8
  %168 = load i32, i32* %11, align 4
  %169 = load i32, i32* %9, align 4
  %170 = icmp sgt i32 %168, %169
  br i1 %170, label %171, label %172

171:                                              ; preds = %18
  store i32 2147483647, i32* %5, align 4
  br label %175

172:                                              ; preds = %18
  br label %14

173:                                              ; preds = %14
  %174 = load i32, i32* %11, align 4
  store i32 %174, i32* %5, align 4
  br label %175

175:                                              ; preds = %173, %171
  %176 = load i32, i32* %5, align 4
  ret i32 %176
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @FindMB(i32 %0, i32 %1, i8* %2, [16 x i32]* %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca [16 x i32]*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i32 %1, i32* %6, align 4
  store i8* %2, i8** %7, align 8
  store [16 x i32]* %3, [16 x i32]** %8, align 8
  store i32 0, i32* %9, align 4
  br label %11

11:                                               ; preds = %46, %4
  %12 = load i32, i32* %9, align 4
  %13 = icmp slt i32 %12, 16
  br i1 %13, label %14, label %49

14:                                               ; preds = %11
  store i32 0, i32* %10, align 4
  br label %15

15:                                               ; preds = %42, %14
  %16 = load i32, i32* %10, align 4
  %17 = icmp slt i32 %16, 16
  br i1 %17, label %18, label %45

18:                                               ; preds = %15
  %19 = load i8*, i8** %7, align 8
  %20 = load i32, i32* %5, align 4
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i8, i8* %19, i64 %21
  %23 = load i32, i32* %10, align 4
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds i8, i8* %22, i64 %24
  %26 = load i32, i32* %6, align 4
  %27 = load i32, i32* %9, align 4
  %28 = add nsw i32 %26, %27
  %29 = load i32, i32* @pels, align 4
  %30 = mul nsw i32 %28, %29
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i8, i8* %25, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = load [16 x i32]*, [16 x i32]** %8, align 8
  %36 = load i32, i32* %9, align 4
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds [16 x i32], [16 x i32]* %35, i64 %37
  %39 = load i32, i32* %10, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [16 x i32], [16 x i32]* %38, i64 0, i64 %40
  store i32 %34, i32* %41, align 4
  br label %42

42:                                               ; preds = %18
  %43 = load i32, i32* %10, align 4
  %44 = add nsw i32 %43, 1
  store i32 %44, i32* %10, align 4
  br label %15

45:                                               ; preds = %15
  br label %46

46:                                               ; preds = %45
  %47 = load i32, i32* %9, align 4
  %48 = add nsw i32 %47, 1
  store i32 %48, i32* %9, align 4
  br label %11

49:                                               ; preds = %11
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.mb_structure* @Predict_P(%struct.pict_image* %0, %struct.pict_image* %1, i8* %2, i32 %3, i32 %4, [73 x [90 x %struct.motionvector*]]* %5, i32 %6) #0 {
  %8 = alloca %struct.pict_image*, align 8
  %9 = alloca %struct.pict_image*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca [73 x [90 x %struct.motionvector*]]*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca [16 x [16 x i32]], align 16
  %18 = alloca [16 x [16 x i32]], align 16
  %19 = alloca %struct.motionvector*, align 8
  %20 = alloca %struct.motionvector*, align 8
  %21 = alloca %struct.motionvector*, align 8
  %22 = alloca %struct.motionvector*, align 8
  %23 = alloca %struct.motionvector*, align 8
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca %struct.mb_structure*, align 8
  store %struct.pict_image* %0, %struct.pict_image** %8, align 8
  store %struct.pict_image* %1, %struct.pict_image** %9, align 8
  store i8* %2, i8** %10, align 8
  store i32 %3, i32* %11, align 4
  store i32 %4, i32* %12, align 4
  store [73 x [90 x %struct.motionvector*]]* %5, [73 x [90 x %struct.motionvector*]]** %13, align 8
  store i32 %6, i32* %14, align 4
  %30 = call noalias i8* @malloc(i64 1536) #8
  %31 = bitcast i8* %30 to %struct.mb_structure*
  store %struct.mb_structure* %31, %struct.mb_structure** %29, align 8
  %32 = load i32, i32* %11, align 4
  %33 = sdiv i32 %32, 16
  %34 = add nsw i32 %33, 1
  store i32 %34, i32* %27, align 4
  %35 = load i32, i32* %12, align 4
  %36 = sdiv i32 %35, 16
  %37 = add nsw i32 %36, 1
  store i32 %37, i32* %28, align 4
  %38 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %13, align 8
  %39 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %38, i64 0
  %40 = load i32, i32* %28, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %39, i64 0, i64 %41
  %43 = load i32, i32* %27, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %42, i64 0, i64 %44
  %46 = load %struct.motionvector*, %struct.motionvector** %45, align 8
  store %struct.motionvector* %46, %struct.motionvector** %19, align 8
  %47 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %13, align 8
  %48 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %47, i64 1
  %49 = load i32, i32* %28, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %48, i64 0, i64 %50
  %52 = load i32, i32* %27, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %51, i64 0, i64 %53
  %55 = load %struct.motionvector*, %struct.motionvector** %54, align 8
  store %struct.motionvector* %55, %struct.motionvector** %20, align 8
  %56 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %13, align 8
  %57 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %56, i64 2
  %58 = load i32, i32* %28, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %57, i64 0, i64 %59
  %61 = load i32, i32* %27, align 4
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %60, i64 0, i64 %62
  %64 = load %struct.motionvector*, %struct.motionvector** %63, align 8
  store %struct.motionvector* %64, %struct.motionvector** %21, align 8
  %65 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %13, align 8
  %66 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %65, i64 3
  %67 = load i32, i32* %28, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %66, i64 0, i64 %68
  %70 = load i32, i32* %27, align 4
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %69, i64 0, i64 %71
  %73 = load %struct.motionvector*, %struct.motionvector** %72, align 8
  store %struct.motionvector* %73, %struct.motionvector** %22, align 8
  %74 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %13, align 8
  %75 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %74, i64 4
  %76 = load i32, i32* %28, align 4
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %75, i64 0, i64 %77
  %79 = load i32, i32* %27, align 4
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %78, i64 0, i64 %80
  %82 = load %struct.motionvector*, %struct.motionvector** %81, align 8
  store %struct.motionvector* %82, %struct.motionvector** %23, align 8
  %83 = load i32, i32* %11, align 4
  %84 = load i32, i32* %12, align 4
  %85 = load %struct.pict_image*, %struct.pict_image** %8, align 8
  %86 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %85, i32 0, i32 0
  %87 = load i8*, i8** %86, align 8
  %88 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %17, i64 0, i64 0
  call void @FindMB(i32 %83, i32 %84, i8* %87, [16 x i32]* %88)
  %89 = load i32, i32* @advanced, align 4
  %90 = icmp ne i32 %89, 0
  br i1 %90, label %91, label %120

91:                                               ; preds = %7
  %92 = load i32, i32* %11, align 4
  %93 = load i32, i32* %12, align 4
  %94 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %13, align 8
  %95 = load i8*, i8** %10, align 8
  %96 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %18, i64 0, i64 0
  %97 = getelementptr inbounds [16 x i32], [16 x i32]* %96, i64 0, i64 0
  %98 = load i32, i32* %14, align 4
  call void @FindPredOBMC(i32 %92, i32 %93, [73 x [90 x %struct.motionvector*]]* %94, i8* %95, i32* %97, i32 0, i32 %98)
  %99 = load i32, i32* %11, align 4
  %100 = load i32, i32* %12, align 4
  %101 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %13, align 8
  %102 = load i8*, i8** %10, align 8
  %103 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %18, i64 0, i64 0
  %104 = getelementptr inbounds [16 x i32], [16 x i32]* %103, i64 0, i64 8
  %105 = load i32, i32* %14, align 4
  call void @FindPredOBMC(i32 %99, i32 %100, [73 x [90 x %struct.motionvector*]]* %101, i8* %102, i32* %104, i32 1, i32 %105)
  %106 = load i32, i32* %11, align 4
  %107 = load i32, i32* %12, align 4
  %108 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %13, align 8
  %109 = load i8*, i8** %10, align 8
  %110 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %18, i64 0, i64 8
  %111 = getelementptr inbounds [16 x i32], [16 x i32]* %110, i64 0, i64 0
  %112 = load i32, i32* %14, align 4
  call void @FindPredOBMC(i32 %106, i32 %107, [73 x [90 x %struct.motionvector*]]* %108, i8* %109, i32* %111, i32 2, i32 %112)
  %113 = load i32, i32* %11, align 4
  %114 = load i32, i32* %12, align 4
  %115 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %13, align 8
  %116 = load i8*, i8** %10, align 8
  %117 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %18, i64 0, i64 8
  %118 = getelementptr inbounds [16 x i32], [16 x i32]* %117, i64 0, i64 8
  %119 = load i32, i32* %14, align 4
  call void @FindPredOBMC(i32 %113, i32 %114, [73 x [90 x %struct.motionvector*]]* %115, i8* %116, i32* %118, i32 3, i32 %119)
  br label %127

120:                                              ; preds = %7
  %121 = load i32, i32* %11, align 4
  %122 = load i32, i32* %12, align 4
  %123 = load %struct.motionvector*, %struct.motionvector** %19, align 8
  %124 = load i8*, i8** %10, align 8
  %125 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %18, i64 0, i64 0
  %126 = getelementptr inbounds [16 x i32], [16 x i32]* %125, i64 0, i64 0
  call void @FindPred(i32 %121, i32 %122, %struct.motionvector* %123, i8* %124, i32* %126, i32 16, i32 0)
  br label %127

127:                                              ; preds = %120, %91
  %128 = load %struct.motionvector*, %struct.motionvector** %19, align 8
  %129 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %128, i32 0, i32 5
  %130 = load i32, i32* %129, align 4
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %137, label %132

132:                                              ; preds = %127
  %133 = load %struct.motionvector*, %struct.motionvector** %19, align 8
  %134 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %133, i32 0, i32 5
  %135 = load i32, i32* %134, align 4
  %136 = icmp eq i32 %135, 1
  br i1 %136, label %137, label %224

137:                                              ; preds = %132, %127
  store i32 0, i32* %16, align 4
  br label %138

138:                                              ; preds = %173, %137
  %139 = load i32, i32* %16, align 4
  %140 = icmp slt i32 %139, 16
  br i1 %140, label %141, label %176

141:                                              ; preds = %138
  store i32 0, i32* %15, align 4
  br label %142

142:                                              ; preds = %169, %141
  %143 = load i32, i32* %15, align 4
  %144 = icmp slt i32 %143, 16
  br i1 %144, label %145, label %172

145:                                              ; preds = %142
  %146 = load i32, i32* %16, align 4
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %17, i64 0, i64 %147
  %149 = load i32, i32* %15, align 4
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds [16 x i32], [16 x i32]* %148, i64 0, i64 %150
  %152 = load i32, i32* %151, align 4
  %153 = load i32, i32* %16, align 4
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %18, i64 0, i64 %154
  %156 = load i32, i32* %15, align 4
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds [16 x i32], [16 x i32]* %155, i64 0, i64 %157
  %159 = load i32, i32* %158, align 4
  %160 = sub nsw i32 %152, %159
  %161 = load %struct.mb_structure*, %struct.mb_structure** %29, align 8
  %162 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %161, i32 0, i32 0
  %163 = load i32, i32* %16, align 4
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %162, i64 0, i64 %164
  %166 = load i32, i32* %15, align 4
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds [16 x i32], [16 x i32]* %165, i64 0, i64 %167
  store i32 %160, i32* %168, align 4
  br label %169

169:                                              ; preds = %145
  %170 = load i32, i32* %15, align 4
  %171 = add nsw i32 %170, 1
  store i32 %171, i32* %15, align 4
  br label %142

172:                                              ; preds = %142
  br label %173

173:                                              ; preds = %172
  %174 = load i32, i32* %16, align 4
  %175 = add nsw i32 %174, 1
  store i32 %175, i32* %16, align 4
  br label %138

176:                                              ; preds = %138
  %177 = load %struct.motionvector*, %struct.motionvector** %19, align 8
  %178 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %177, i32 0, i32 0
  %179 = load i32, i32* %178, align 4
  %180 = mul nsw i32 2, %179
  %181 = load %struct.motionvector*, %struct.motionvector** %19, align 8
  %182 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %181, i32 0, i32 2
  %183 = load i32, i32* %182, align 4
  %184 = add nsw i32 %180, %183
  store i32 %184, i32* %25, align 4
  %185 = load %struct.motionvector*, %struct.motionvector** %19, align 8
  %186 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %185, i32 0, i32 1
  %187 = load i32, i32* %186, align 4
  %188 = mul nsw i32 2, %187
  %189 = load %struct.motionvector*, %struct.motionvector** %19, align 8
  %190 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %189, i32 0, i32 3
  %191 = load i32, i32* %190, align 4
  %192 = add nsw i32 %188, %191
  store i32 %192, i32* %26, align 4
  %193 = load i32, i32* %25, align 4
  %194 = srem i32 %193, 4
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %196, label %199

196:                                              ; preds = %176
  %197 = load i32, i32* %25, align 4
  %198 = ashr i32 %197, 1
  br label %203

199:                                              ; preds = %176
  %200 = load i32, i32* %25, align 4
  %201 = ashr i32 %200, 1
  %202 = or i32 %201, 1
  br label %203

203:                                              ; preds = %199, %196
  %204 = phi i32 [ %198, %196 ], [ %202, %199 ]
  store i32 %204, i32* %25, align 4
  %205 = load i32, i32* %26, align 4
  %206 = srem i32 %205, 4
  %207 = icmp eq i32 %206, 0
  br i1 %207, label %208, label %211

208:                                              ; preds = %203
  %209 = load i32, i32* %26, align 4
  %210 = ashr i32 %209, 1
  br label %215

211:                                              ; preds = %203
  %212 = load i32, i32* %26, align 4
  %213 = ashr i32 %212, 1
  %214 = or i32 %213, 1
  br label %215

215:                                              ; preds = %211, %208
  %216 = phi i32 [ %210, %208 ], [ %214, %211 ]
  store i32 %216, i32* %26, align 4
  %217 = load i32, i32* %11, align 4
  %218 = load i32, i32* %12, align 4
  %219 = load i32, i32* %25, align 4
  %220 = load i32, i32* %26, align 4
  %221 = load %struct.pict_image*, %struct.pict_image** %8, align 8
  %222 = load %struct.pict_image*, %struct.pict_image** %9, align 8
  %223 = load %struct.mb_structure*, %struct.mb_structure** %29, align 8
  call void @DoPredChrom_P(i32 %217, i32 %218, i32 %219, i32 %220, %struct.pict_image* %221, %struct.pict_image* %222, %struct.mb_structure* %223)
  br label %382

224:                                              ; preds = %132
  %225 = load %struct.motionvector*, %struct.motionvector** %19, align 8
  %226 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %225, i32 0, i32 5
  %227 = load i32, i32* %226, align 4
  %228 = icmp eq i32 %227, 2
  br i1 %228, label %229, label %378

229:                                              ; preds = %224
  store i32 0, i32* %16, align 4
  br label %230

230:                                              ; preds = %265, %229
  %231 = load i32, i32* %16, align 4
  %232 = icmp slt i32 %231, 16
  br i1 %232, label %233, label %268

233:                                              ; preds = %230
  store i32 0, i32* %15, align 4
  br label %234

234:                                              ; preds = %261, %233
  %235 = load i32, i32* %15, align 4
  %236 = icmp slt i32 %235, 16
  br i1 %236, label %237, label %264

237:                                              ; preds = %234
  %238 = load i32, i32* %16, align 4
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %17, i64 0, i64 %239
  %241 = load i32, i32* %15, align 4
  %242 = sext i32 %241 to i64
  %243 = getelementptr inbounds [16 x i32], [16 x i32]* %240, i64 0, i64 %242
  %244 = load i32, i32* %243, align 4
  %245 = load i32, i32* %16, align 4
  %246 = sext i32 %245 to i64
  %247 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %18, i64 0, i64 %246
  %248 = load i32, i32* %15, align 4
  %249 = sext i32 %248 to i64
  %250 = getelementptr inbounds [16 x i32], [16 x i32]* %247, i64 0, i64 %249
  %251 = load i32, i32* %250, align 4
  %252 = sub nsw i32 %244, %251
  %253 = load %struct.mb_structure*, %struct.mb_structure** %29, align 8
  %254 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %253, i32 0, i32 0
  %255 = load i32, i32* %16, align 4
  %256 = sext i32 %255 to i64
  %257 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %254, i64 0, i64 %256
  %258 = load i32, i32* %15, align 4
  %259 = sext i32 %258 to i64
  %260 = getelementptr inbounds [16 x i32], [16 x i32]* %257, i64 0, i64 %259
  store i32 %252, i32* %260, align 4
  br label %261

261:                                              ; preds = %237
  %262 = load i32, i32* %15, align 4
  %263 = add nsw i32 %262, 1
  store i32 %263, i32* %15, align 4
  br label %234

264:                                              ; preds = %234
  br label %265

265:                                              ; preds = %264
  %266 = load i32, i32* %16, align 4
  %267 = add nsw i32 %266, 1
  store i32 %267, i32* %16, align 4
  br label %230

268:                                              ; preds = %230
  %269 = load %struct.motionvector*, %struct.motionvector** %20, align 8
  %270 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %269, i32 0, i32 0
  %271 = load i32, i32* %270, align 4
  %272 = mul nsw i32 2, %271
  %273 = load %struct.motionvector*, %struct.motionvector** %20, align 8
  %274 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %273, i32 0, i32 2
  %275 = load i32, i32* %274, align 4
  %276 = add nsw i32 %272, %275
  %277 = load %struct.motionvector*, %struct.motionvector** %21, align 8
  %278 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %277, i32 0, i32 0
  %279 = load i32, i32* %278, align 4
  %280 = mul nsw i32 2, %279
  %281 = add nsw i32 %276, %280
  %282 = load %struct.motionvector*, %struct.motionvector** %21, align 8
  %283 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %282, i32 0, i32 2
  %284 = load i32, i32* %283, align 4
  %285 = add nsw i32 %281, %284
  %286 = load %struct.motionvector*, %struct.motionvector** %22, align 8
  %287 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %286, i32 0, i32 0
  %288 = load i32, i32* %287, align 4
  %289 = mul nsw i32 2, %288
  %290 = add nsw i32 %285, %289
  %291 = load %struct.motionvector*, %struct.motionvector** %22, align 8
  %292 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %291, i32 0, i32 2
  %293 = load i32, i32* %292, align 4
  %294 = add nsw i32 %290, %293
  %295 = load %struct.motionvector*, %struct.motionvector** %23, align 8
  %296 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %295, i32 0, i32 0
  %297 = load i32, i32* %296, align 4
  %298 = mul nsw i32 2, %297
  %299 = add nsw i32 %294, %298
  %300 = load %struct.motionvector*, %struct.motionvector** %23, align 8
  %301 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %300, i32 0, i32 2
  %302 = load i32, i32* %301, align 4
  %303 = add nsw i32 %299, %302
  store i32 %303, i32* %24, align 4
  %304 = load i32, i32* %24, align 4
  %305 = icmp slt i32 %304, 0
  %306 = zext i1 %305 to i64
  %307 = select i1 %305, i32 -1, i32 1
  %308 = load i32, i32* %24, align 4
  %309 = call i32 @abs(i32 %308) #11
  %310 = srem i32 %309, 16
  %311 = sext i32 %310 to i64
  %312 = getelementptr inbounds [16 x i32], [16 x i32]* @roundtab, i64 0, i64 %311
  %313 = load i32, i32* %312, align 4
  %314 = load i32, i32* %24, align 4
  %315 = call i32 @abs(i32 %314) #11
  %316 = sdiv i32 %315, 16
  %317 = mul nsw i32 %316, 2
  %318 = add nsw i32 %313, %317
  %319 = mul nsw i32 %307, %318
  store i32 %319, i32* %25, align 4
  %320 = load %struct.motionvector*, %struct.motionvector** %20, align 8
  %321 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %320, i32 0, i32 1
  %322 = load i32, i32* %321, align 4
  %323 = mul nsw i32 2, %322
  %324 = load %struct.motionvector*, %struct.motionvector** %20, align 8
  %325 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %324, i32 0, i32 3
  %326 = load i32, i32* %325, align 4
  %327 = add nsw i32 %323, %326
  %328 = load %struct.motionvector*, %struct.motionvector** %21, align 8
  %329 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %328, i32 0, i32 1
  %330 = load i32, i32* %329, align 4
  %331 = mul nsw i32 2, %330
  %332 = add nsw i32 %327, %331
  %333 = load %struct.motionvector*, %struct.motionvector** %21, align 8
  %334 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %333, i32 0, i32 3
  %335 = load i32, i32* %334, align 4
  %336 = add nsw i32 %332, %335
  %337 = load %struct.motionvector*, %struct.motionvector** %22, align 8
  %338 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %337, i32 0, i32 1
  %339 = load i32, i32* %338, align 4
  %340 = mul nsw i32 2, %339
  %341 = add nsw i32 %336, %340
  %342 = load %struct.motionvector*, %struct.motionvector** %22, align 8
  %343 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %342, i32 0, i32 3
  %344 = load i32, i32* %343, align 4
  %345 = add nsw i32 %341, %344
  %346 = load %struct.motionvector*, %struct.motionvector** %23, align 8
  %347 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %346, i32 0, i32 1
  %348 = load i32, i32* %347, align 4
  %349 = mul nsw i32 2, %348
  %350 = add nsw i32 %345, %349
  %351 = load %struct.motionvector*, %struct.motionvector** %23, align 8
  %352 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %351, i32 0, i32 3
  %353 = load i32, i32* %352, align 4
  %354 = add nsw i32 %350, %353
  store i32 %354, i32* %24, align 4
  %355 = load i32, i32* %24, align 4
  %356 = icmp slt i32 %355, 0
  %357 = zext i1 %356 to i64
  %358 = select i1 %356, i32 -1, i32 1
  %359 = load i32, i32* %24, align 4
  %360 = call i32 @abs(i32 %359) #11
  %361 = srem i32 %360, 16
  %362 = sext i32 %361 to i64
  %363 = getelementptr inbounds [16 x i32], [16 x i32]* @roundtab, i64 0, i64 %362
  %364 = load i32, i32* %363, align 4
  %365 = load i32, i32* %24, align 4
  %366 = call i32 @abs(i32 %365) #11
  %367 = sdiv i32 %366, 16
  %368 = mul nsw i32 %367, 2
  %369 = add nsw i32 %364, %368
  %370 = mul nsw i32 %358, %369
  store i32 %370, i32* %26, align 4
  %371 = load i32, i32* %11, align 4
  %372 = load i32, i32* %12, align 4
  %373 = load i32, i32* %25, align 4
  %374 = load i32, i32* %26, align 4
  %375 = load %struct.pict_image*, %struct.pict_image** %8, align 8
  %376 = load %struct.pict_image*, %struct.pict_image** %9, align 8
  %377 = load %struct.mb_structure*, %struct.mb_structure** %29, align 8
  call void @DoPredChrom_P(i32 %371, i32 %372, i32 %373, i32 %374, %struct.pict_image* %375, %struct.pict_image* %376, %struct.mb_structure* %377)
  br label %381

378:                                              ; preds = %224
  %379 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %380 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %379, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.121, i64 0, i64 0))
  br label %381

381:                                              ; preds = %378, %268
  br label %382

382:                                              ; preds = %381, %215
  %383 = load %struct.mb_structure*, %struct.mb_structure** %29, align 8
  ret %struct.mb_structure* %383
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @FindPredOBMC(i32 %0, i32 %1, [73 x [90 x %struct.motionvector*]]* %2, i8* %3, i32* %4, i32 %5, i32 %6) #0 {
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca [73 x [90 x %struct.motionvector*]]*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i32*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca i32, align 4
  %31 = alloca i32, align 4
  %32 = alloca i32, align 4
  %33 = alloca i32, align 4
  %34 = alloca i32, align 4
  %35 = alloca i32, align 4
  %36 = alloca i32, align 4
  %37 = alloca i32, align 4
  %38 = alloca i32, align 4
  %39 = alloca i32, align 4
  %40 = alloca i32, align 4
  %41 = alloca i32, align 4
  %42 = alloca i32, align 4
  %43 = alloca i32, align 4
  %44 = alloca i32, align 4
  %45 = alloca i32, align 4
  %46 = alloca i32, align 4
  %47 = alloca i32, align 4
  %48 = alloca i32, align 4
  %49 = alloca i32, align 4
  %50 = alloca i32, align 4
  %51 = alloca i32, align 4
  %52 = alloca i32, align 4
  %53 = alloca i32, align 4
  %54 = alloca %struct.motionvector*, align 8
  %55 = alloca %struct.motionvector*, align 8
  %56 = alloca %struct.motionvector*, align 8
  %57 = alloca %struct.motionvector*, align 8
  %58 = alloca %struct.motionvector*, align 8
  %59 = alloca [8 x [8 x i32]], align 16
  %60 = alloca [8 x [8 x i32]], align 16
  %61 = alloca [8 x [8 x i32]], align 16
  %62 = alloca [8 x [8 x i32]], align 16
  %63 = alloca [8 x [8 x i32]], align 16
  store i32 %0, i32* %8, align 4
  store i32 %1, i32* %9, align 4
  store [73 x [90 x %struct.motionvector*]]* %2, [73 x [90 x %struct.motionvector*]]** %10, align 8
  store i8* %3, i8** %11, align 8
  store i32* %4, i32** %12, align 8
  store i32 %5, i32* %13, align 4
  store i32 %6, i32* %14, align 4
  %64 = bitcast [8 x [8 x i32]]* %59 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %64, i8* align 16 bitcast ([8 x [8 x i32]]* @__const.FindPredOBMC.Mc to i8*), i64 256, i1 false)
  %65 = bitcast [8 x [8 x i32]]* %60 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %65, i8* align 16 bitcast ([8 x [8 x i32]]* @__const.FindPredOBMC.Mt to i8*), i64 256, i1 false)
  %66 = bitcast [8 x [8 x i32]]* %61 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %66, i8* align 16 bitcast ([8 x [8 x i32]]* @__const.FindPredOBMC.Mb to i8*), i64 256, i1 false)
  %67 = bitcast [8 x [8 x i32]]* %62 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %67, i8* align 16 bitcast ([8 x [8 x i32]]* @__const.FindPredOBMC.Mr to i8*), i64 256, i1 false)
  %68 = bitcast [8 x [8 x i32]]* %63 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %68, i8* align 16 bitcast ([8 x [8 x i32]]* @__const.FindPredOBMC.Ml to i8*), i64 256, i1 false)
  %69 = load i32, i32* %8, align 4
  %70 = sdiv i32 %69, 16
  %71 = add nsw i32 %70, 1
  store i32 %71, i32* %51, align 4
  %72 = load i32, i32* %9, align 4
  %73 = sdiv i32 %72, 16
  %74 = add nsw i32 %73, 1
  store i32 %74, i32* %52, align 4
  %75 = load i32, i32* @mv_outside_frame, align 4
  %76 = icmp ne i32 %75, 0
  br i1 %76, label %77, label %84

77:                                               ; preds = %7
  %78 = load i32, i32* @pels, align 4
  %79 = load i32, i32* @long_vectors, align 4
  %80 = icmp ne i32 %79, 0
  %81 = zext i1 %80 to i64
  %82 = select i1 %80, i32 64, i32 32
  %83 = add nsw i32 %78, %82
  br label %86

84:                                               ; preds = %7
  %85 = load i32, i32* @pels, align 4
  br label %86

86:                                               ; preds = %84, %77
  %87 = phi i32 [ %83, %77 ], [ %85, %84 ]
  store i32 %87, i32* %53, align 4
  %88 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %10, align 8
  %89 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %88, i64 0
  %90 = load i32, i32* %52, align 4
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %89, i64 0, i64 %91
  %93 = load i32, i32* %51, align 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %92, i64 0, i64 %94
  %96 = load %struct.motionvector*, %struct.motionvector** %95, align 8
  %97 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %96, i32 0, i32 5
  %98 = load i32, i32* %97, align 4
  %99 = icmp eq i32 %98, 2
  %100 = zext i1 %99 to i64
  %101 = select i1 %99, i32 1, i32 0
  store i32 %101, i32* %44, align 4
  %102 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %10, align 8
  %103 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %102, i64 0
  %104 = load i32, i32* %52, align 4
  %105 = sub nsw i32 %104, 1
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %103, i64 0, i64 %106
  %108 = load i32, i32* %51, align 4
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %107, i64 0, i64 %109
  %111 = load %struct.motionvector*, %struct.motionvector** %110, align 8
  %112 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %111, i32 0, i32 5
  %113 = load i32, i32* %112, align 4
  %114 = icmp eq i32 %113, 2
  %115 = zext i1 %114 to i64
  %116 = select i1 %114, i32 1, i32 0
  store i32 %116, i32* %45, align 4
  %117 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %10, align 8
  %118 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %117, i64 0
  %119 = load i32, i32* %52, align 4
  %120 = sub nsw i32 %119, 1
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %118, i64 0, i64 %121
  %123 = load i32, i32* %51, align 4
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %122, i64 0, i64 %124
  %126 = load %struct.motionvector*, %struct.motionvector** %125, align 8
  %127 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %126, i32 0, i32 5
  %128 = load i32, i32* %127, align 4
  %129 = icmp eq i32 %128, 3
  %130 = zext i1 %129 to i64
  %131 = select i1 %129, i32 1, i32 0
  store i32 %131, i32* %48, align 4
  %132 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %10, align 8
  %133 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %132, i64 0
  %134 = load i32, i32* %52, align 4
  %135 = sub nsw i32 %134, 1
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %133, i64 0, i64 %136
  %138 = load i32, i32* %51, align 4
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %137, i64 0, i64 %139
  %141 = load %struct.motionvector*, %struct.motionvector** %140, align 8
  %142 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %141, i32 0, i32 5
  %143 = load i32, i32* %142, align 4
  %144 = icmp eq i32 %143, 4
  br i1 %144, label %145, label %146

145:                                              ; preds = %86
  br label %148

146:                                              ; preds = %86
  %147 = load i32, i32* %48, align 4
  br label %148

148:                                              ; preds = %146, %145
  %149 = phi i32 [ 1, %145 ], [ %147, %146 ]
  store i32 %149, i32* %48, align 4
  %150 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %10, align 8
  %151 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %150, i64 0
  %152 = load i32, i32* %52, align 4
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %151, i64 0, i64 %153
  %155 = load i32, i32* %51, align 4
  %156 = sub nsw i32 %155, 1
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %154, i64 0, i64 %157
  %159 = load %struct.motionvector*, %struct.motionvector** %158, align 8
  %160 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %159, i32 0, i32 5
  %161 = load i32, i32* %160, align 4
  %162 = icmp eq i32 %161, 2
  %163 = zext i1 %162 to i64
  %164 = select i1 %162, i32 1, i32 0
  store i32 %164, i32* %46, align 4
  %165 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %10, align 8
  %166 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %165, i64 0
  %167 = load i32, i32* %52, align 4
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %166, i64 0, i64 %168
  %170 = load i32, i32* %51, align 4
  %171 = sub nsw i32 %170, 1
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %169, i64 0, i64 %172
  %174 = load %struct.motionvector*, %struct.motionvector** %173, align 8
  %175 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %174, i32 0, i32 5
  %176 = load i32, i32* %175, align 4
  %177 = icmp eq i32 %176, 3
  %178 = zext i1 %177 to i64
  %179 = select i1 %177, i32 1, i32 0
  store i32 %179, i32* %49, align 4
  %180 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %10, align 8
  %181 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %180, i64 0
  %182 = load i32, i32* %52, align 4
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %181, i64 0, i64 %183
  %185 = load i32, i32* %51, align 4
  %186 = sub nsw i32 %185, 1
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %184, i64 0, i64 %187
  %189 = load %struct.motionvector*, %struct.motionvector** %188, align 8
  %190 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %189, i32 0, i32 5
  %191 = load i32, i32* %190, align 4
  %192 = icmp eq i32 %191, 4
  br i1 %192, label %193, label %194

193:                                              ; preds = %148
  br label %196

194:                                              ; preds = %148
  %195 = load i32, i32* %49, align 4
  br label %196

196:                                              ; preds = %194, %193
  %197 = phi i32 [ 1, %193 ], [ %195, %194 ]
  store i32 %197, i32* %49, align 4
  %198 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %10, align 8
  %199 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %198, i64 0
  %200 = load i32, i32* %52, align 4
  %201 = sext i32 %200 to i64
  %202 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %199, i64 0, i64 %201
  %203 = load i32, i32* %51, align 4
  %204 = add nsw i32 %203, 1
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %202, i64 0, i64 %205
  %207 = load %struct.motionvector*, %struct.motionvector** %206, align 8
  %208 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %207, i32 0, i32 5
  %209 = load i32, i32* %208, align 4
  %210 = icmp eq i32 %209, 2
  %211 = zext i1 %210 to i64
  %212 = select i1 %210, i32 1, i32 0
  store i32 %212, i32* %47, align 4
  %213 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %10, align 8
  %214 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %213, i64 0
  %215 = load i32, i32* %52, align 4
  %216 = sext i32 %215 to i64
  %217 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %214, i64 0, i64 %216
  %218 = load i32, i32* %51, align 4
  %219 = add nsw i32 %218, 1
  %220 = sext i32 %219 to i64
  %221 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %217, i64 0, i64 %220
  %222 = load %struct.motionvector*, %struct.motionvector** %221, align 8
  %223 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %222, i32 0, i32 5
  %224 = load i32, i32* %223, align 4
  %225 = icmp eq i32 %224, 3
  %226 = zext i1 %225 to i64
  %227 = select i1 %225, i32 1, i32 0
  store i32 %227, i32* %50, align 4
  %228 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %10, align 8
  %229 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %228, i64 0
  %230 = load i32, i32* %52, align 4
  %231 = sext i32 %230 to i64
  %232 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %229, i64 0, i64 %231
  %233 = load i32, i32* %51, align 4
  %234 = add nsw i32 %233, 1
  %235 = sext i32 %234 to i64
  %236 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %232, i64 0, i64 %235
  %237 = load %struct.motionvector*, %struct.motionvector** %236, align 8
  %238 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %237, i32 0, i32 5
  %239 = load i32, i32* %238, align 4
  %240 = icmp eq i32 %239, 4
  br i1 %240, label %241, label %242

241:                                              ; preds = %196
  br label %244

242:                                              ; preds = %196
  %243 = load i32, i32* %50, align 4
  br label %244

244:                                              ; preds = %242, %241
  %245 = phi i32 [ 1, %241 ], [ %243, %242 ]
  store i32 %245, i32* %50, align 4
  %246 = load i32, i32* %14, align 4
  %247 = icmp ne i32 %246, 0
  br i1 %247, label %248, label %249

248:                                              ; preds = %244
  store i32 0, i32* %50, align 4
  store i32 0, i32* %49, align 4
  store i32 0, i32* %48, align 4
  br label %249

249:                                              ; preds = %248, %244
  %250 = load i32, i32* %13, align 4
  %251 = add nsw i32 %250, 1
  switch i32 %251, label %518 [
    i32 1, label %252
    i32 2, label %331
    i32 3, label %412
    i32 4, label %464
  ]

252:                                              ; preds = %249
  %253 = load i32, i32* %48, align 4
  %254 = icmp ne i32 %253, 0
  br i1 %254, label %255, label %260

255:                                              ; preds = %252
  %256 = load i32, i32* %44, align 4
  %257 = icmp ne i32 %256, 0
  %258 = zext i1 %257 to i64
  %259 = select i1 %257, i32 1, i32 0
  br label %265

260:                                              ; preds = %252
  %261 = load i32, i32* %45, align 4
  %262 = icmp ne i32 %261, 0
  %263 = zext i1 %262 to i64
  %264 = select i1 %262, i32 3, i32 0
  br label %265

265:                                              ; preds = %260, %255
  %266 = phi i32 [ %259, %255 ], [ %264, %260 ]
  store i32 %266, i32* %40, align 4
  %267 = load i32, i32* %48, align 4
  %268 = icmp ne i32 %267, 0
  br i1 %268, label %269, label %271

269:                                              ; preds = %265
  %270 = load i32, i32* %52, align 4
  br label %274

271:                                              ; preds = %265
  %272 = load i32, i32* %52, align 4
  %273 = sub nsw i32 %272, 1
  br label %274

274:                                              ; preds = %271, %269
  %275 = phi i32 [ %270, %269 ], [ %273, %271 ]
  store i32 %275, i32* %36, align 4
  %276 = load i32, i32* %51, align 4
  store i32 %276, i32* %32, align 4
  %277 = load i32, i32* %44, align 4
  %278 = icmp ne i32 %277, 0
  %279 = zext i1 %278 to i64
  %280 = select i1 %278, i32 3, i32 0
  store i32 %280, i32* %41, align 4
  %281 = load i32, i32* %52, align 4
  store i32 %281, i32* %37, align 4
  %282 = load i32, i32* %51, align 4
  store i32 %282, i32* %33, align 4
  %283 = load i32, i32* %49, align 4
  %284 = icmp ne i32 %283, 0
  br i1 %284, label %285, label %290

285:                                              ; preds = %274
  %286 = load i32, i32* %44, align 4
  %287 = icmp ne i32 %286, 0
  %288 = zext i1 %287 to i64
  %289 = select i1 %287, i32 1, i32 0
  br label %295

290:                                              ; preds = %274
  %291 = load i32, i32* %46, align 4
  %292 = icmp ne i32 %291, 0
  %293 = zext i1 %292 to i64
  %294 = select i1 %292, i32 2, i32 0
  br label %295

295:                                              ; preds = %290, %285
  %296 = phi i32 [ %289, %285 ], [ %294, %290 ]
  store i32 %296, i32* %43, align 4
  %297 = load i32, i32* %52, align 4
  store i32 %297, i32* %39, align 4
  %298 = load i32, i32* %49, align 4
  %299 = icmp ne i32 %298, 0
  br i1 %299, label %300, label %302

300:                                              ; preds = %295
  %301 = load i32, i32* %51, align 4
  br label %305

302:                                              ; preds = %295
  %303 = load i32, i32* %51, align 4
  %304 = sub nsw i32 %303, 1
  br label %305

305:                                              ; preds = %302, %300
  %306 = phi i32 [ %301, %300 ], [ %304, %302 ]
  store i32 %306, i32* %35, align 4
  %307 = load i32, i32* %44, align 4
  %308 = icmp ne i32 %307, 0
  %309 = zext i1 %308 to i64
  %310 = select i1 %308, i32 2, i32 0
  store i32 %310, i32* %42, align 4
  %311 = load i32, i32* %52, align 4
  store i32 %311, i32* %38, align 4
  %312 = load i32, i32* %51, align 4
  store i32 %312, i32* %34, align 4
  %313 = load i32, i32* %52, align 4
  %314 = icmp eq i32 %313, 1
  br i1 %314, label %315, label %321

315:                                              ; preds = %305
  %316 = load i32, i32* %52, align 4
  store i32 %316, i32* %36, align 4
  %317 = load i32, i32* %44, align 4
  %318 = icmp ne i32 %317, 0
  %319 = zext i1 %318 to i64
  %320 = select i1 %318, i32 1, i32 0
  store i32 %320, i32* %40, align 4
  br label %321

321:                                              ; preds = %315, %305
  %322 = load i32, i32* %51, align 4
  %323 = icmp eq i32 %322, 1
  br i1 %323, label %324, label %330

324:                                              ; preds = %321
  %325 = load i32, i32* %51, align 4
  store i32 %325, i32* %35, align 4
  %326 = load i32, i32* %44, align 4
  %327 = icmp ne i32 %326, 0
  %328 = zext i1 %327 to i64
  %329 = select i1 %327, i32 1, i32 0
  store i32 %329, i32* %43, align 4
  br label %330

330:                                              ; preds = %324, %321
  br label %521

331:                                              ; preds = %249
  %332 = load i32, i32* %48, align 4
  %333 = icmp ne i32 %332, 0
  br i1 %333, label %334, label %339

334:                                              ; preds = %331
  %335 = load i32, i32* %44, align 4
  %336 = icmp ne i32 %335, 0
  %337 = zext i1 %336 to i64
  %338 = select i1 %336, i32 2, i32 0
  br label %344

339:                                              ; preds = %331
  %340 = load i32, i32* %45, align 4
  %341 = icmp ne i32 %340, 0
  %342 = zext i1 %341 to i64
  %343 = select i1 %341, i32 4, i32 0
  br label %344

344:                                              ; preds = %339, %334
  %345 = phi i32 [ %338, %334 ], [ %343, %339 ]
  store i32 %345, i32* %40, align 4
  %346 = load i32, i32* %48, align 4
  %347 = icmp ne i32 %346, 0
  br i1 %347, label %348, label %350

348:                                              ; preds = %344
  %349 = load i32, i32* %52, align 4
  br label %353

350:                                              ; preds = %344
  %351 = load i32, i32* %52, align 4
  %352 = sub nsw i32 %351, 1
  br label %353

353:                                              ; preds = %350, %348
  %354 = phi i32 [ %349, %348 ], [ %352, %350 ]
  store i32 %354, i32* %36, align 4
  %355 = load i32, i32* %51, align 4
  store i32 %355, i32* %32, align 4
  %356 = load i32, i32* %44, align 4
  %357 = icmp ne i32 %356, 0
  %358 = zext i1 %357 to i64
  %359 = select i1 %357, i32 4, i32 0
  store i32 %359, i32* %41, align 4
  %360 = load i32, i32* %52, align 4
  store i32 %360, i32* %37, align 4
  %361 = load i32, i32* %51, align 4
  store i32 %361, i32* %33, align 4
  %362 = load i32, i32* %44, align 4
  %363 = icmp ne i32 %362, 0
  %364 = zext i1 %363 to i64
  %365 = select i1 %363, i32 1, i32 0
  store i32 %365, i32* %43, align 4
  %366 = load i32, i32* %52, align 4
  store i32 %366, i32* %39, align 4
  %367 = load i32, i32* %51, align 4
  store i32 %367, i32* %35, align 4
  %368 = load i32, i32* %50, align 4
  %369 = icmp ne i32 %368, 0
  br i1 %369, label %370, label %375

370:                                              ; preds = %353
  %371 = load i32, i32* %44, align 4
  %372 = icmp ne i32 %371, 0
  %373 = zext i1 %372 to i64
  %374 = select i1 %372, i32 2, i32 0
  br label %380

375:                                              ; preds = %353
  %376 = load i32, i32* %47, align 4
  %377 = icmp ne i32 %376, 0
  %378 = zext i1 %377 to i64
  %379 = select i1 %377, i32 1, i32 0
  br label %380

380:                                              ; preds = %375, %370
  %381 = phi i32 [ %374, %370 ], [ %379, %375 ]
  store i32 %381, i32* %42, align 4
  %382 = load i32, i32* %52, align 4
  store i32 %382, i32* %38, align 4
  %383 = load i32, i32* %50, align 4
  %384 = icmp ne i32 %383, 0
  br i1 %384, label %385, label %387

385:                                              ; preds = %380
  %386 = load i32, i32* %51, align 4
  br label %390

387:                                              ; preds = %380
  %388 = load i32, i32* %51, align 4
  %389 = add nsw i32 %388, 1
  br label %390

390:                                              ; preds = %387, %385
  %391 = phi i32 [ %386, %385 ], [ %389, %387 ]
  store i32 %391, i32* %34, align 4
  %392 = load i32, i32* %52, align 4
  %393 = icmp eq i32 %392, 1
  br i1 %393, label %394, label %400

394:                                              ; preds = %390
  %395 = load i32, i32* %52, align 4
  store i32 %395, i32* %36, align 4
  %396 = load i32, i32* %44, align 4
  %397 = icmp ne i32 %396, 0
  %398 = zext i1 %397 to i64
  %399 = select i1 %397, i32 2, i32 0
  store i32 %399, i32* %40, align 4
  br label %400

400:                                              ; preds = %394, %390
  %401 = load i32, i32* %51, align 4
  %402 = load i32, i32* @pels, align 4
  %403 = sdiv i32 %402, 16
  %404 = icmp eq i32 %401, %403
  br i1 %404, label %405, label %411

405:                                              ; preds = %400
  %406 = load i32, i32* %51, align 4
  store i32 %406, i32* %34, align 4
  %407 = load i32, i32* %44, align 4
  %408 = icmp ne i32 %407, 0
  %409 = zext i1 %408 to i64
  %410 = select i1 %408, i32 2, i32 0
  store i32 %410, i32* %42, align 4
  br label %411

411:                                              ; preds = %405, %400
  br label %521

412:                                              ; preds = %249
  %413 = load i32, i32* %44, align 4
  %414 = icmp ne i32 %413, 0
  %415 = zext i1 %414 to i64
  %416 = select i1 %414, i32 1, i32 0
  store i32 %416, i32* %40, align 4
  %417 = load i32, i32* %52, align 4
  store i32 %417, i32* %36, align 4
  %418 = load i32, i32* %51, align 4
  store i32 %418, i32* %32, align 4
  %419 = load i32, i32* %44, align 4
  %420 = icmp ne i32 %419, 0
  %421 = zext i1 %420 to i64
  %422 = select i1 %420, i32 3, i32 0
  store i32 %422, i32* %41, align 4
  %423 = load i32, i32* %52, align 4
  store i32 %423, i32* %37, align 4
  %424 = load i32, i32* %51, align 4
  store i32 %424, i32* %33, align 4
  %425 = load i32, i32* %49, align 4
  %426 = icmp ne i32 %425, 0
  br i1 %426, label %427, label %432

427:                                              ; preds = %412
  %428 = load i32, i32* %44, align 4
  %429 = icmp ne i32 %428, 0
  %430 = zext i1 %429 to i64
  %431 = select i1 %429, i32 3, i32 0
  br label %437

432:                                              ; preds = %412
  %433 = load i32, i32* %46, align 4
  %434 = icmp ne i32 %433, 0
  %435 = zext i1 %434 to i64
  %436 = select i1 %434, i32 4, i32 0
  br label %437

437:                                              ; preds = %432, %427
  %438 = phi i32 [ %431, %427 ], [ %436, %432 ]
  store i32 %438, i32* %43, align 4
  %439 = load i32, i32* %52, align 4
  store i32 %439, i32* %39, align 4
  %440 = load i32, i32* %49, align 4
  %441 = icmp ne i32 %440, 0
  br i1 %441, label %442, label %444

442:                                              ; preds = %437
  %443 = load i32, i32* %51, align 4
  br label %447

444:                                              ; preds = %437
  %445 = load i32, i32* %51, align 4
  %446 = sub nsw i32 %445, 1
  br label %447

447:                                              ; preds = %444, %442
  %448 = phi i32 [ %443, %442 ], [ %446, %444 ]
  store i32 %448, i32* %35, align 4
  %449 = load i32, i32* %44, align 4
  %450 = icmp ne i32 %449, 0
  %451 = zext i1 %450 to i64
  %452 = select i1 %450, i32 4, i32 0
  store i32 %452, i32* %42, align 4
  %453 = load i32, i32* %52, align 4
  store i32 %453, i32* %38, align 4
  %454 = load i32, i32* %51, align 4
  store i32 %454, i32* %34, align 4
  %455 = load i32, i32* %51, align 4
  %456 = icmp eq i32 %455, 1
  br i1 %456, label %457, label %463

457:                                              ; preds = %447
  %458 = load i32, i32* %51, align 4
  store i32 %458, i32* %35, align 4
  %459 = load i32, i32* %44, align 4
  %460 = icmp ne i32 %459, 0
  %461 = zext i1 %460 to i64
  %462 = select i1 %460, i32 3, i32 0
  store i32 %462, i32* %43, align 4
  br label %463

463:                                              ; preds = %457, %447
  br label %521

464:                                              ; preds = %249
  %465 = load i32, i32* %44, align 4
  %466 = icmp ne i32 %465, 0
  %467 = zext i1 %466 to i64
  %468 = select i1 %466, i32 2, i32 0
  store i32 %468, i32* %40, align 4
  %469 = load i32, i32* %52, align 4
  store i32 %469, i32* %36, align 4
  %470 = load i32, i32* %51, align 4
  store i32 %470, i32* %32, align 4
  %471 = load i32, i32* %44, align 4
  %472 = icmp ne i32 %471, 0
  %473 = zext i1 %472 to i64
  %474 = select i1 %472, i32 4, i32 0
  store i32 %474, i32* %41, align 4
  %475 = load i32, i32* %52, align 4
  store i32 %475, i32* %37, align 4
  %476 = load i32, i32* %51, align 4
  store i32 %476, i32* %33, align 4
  %477 = load i32, i32* %44, align 4
  %478 = icmp ne i32 %477, 0
  %479 = zext i1 %478 to i64
  %480 = select i1 %478, i32 3, i32 0
  store i32 %480, i32* %43, align 4
  %481 = load i32, i32* %52, align 4
  store i32 %481, i32* %39, align 4
  %482 = load i32, i32* %51, align 4
  store i32 %482, i32* %35, align 4
  %483 = load i32, i32* %50, align 4
  %484 = icmp ne i32 %483, 0
  br i1 %484, label %485, label %490

485:                                              ; preds = %464
  %486 = load i32, i32* %44, align 4
  %487 = icmp ne i32 %486, 0
  %488 = zext i1 %487 to i64
  %489 = select i1 %487, i32 4, i32 0
  br label %495

490:                                              ; preds = %464
  %491 = load i32, i32* %47, align 4
  %492 = icmp ne i32 %491, 0
  %493 = zext i1 %492 to i64
  %494 = select i1 %492, i32 3, i32 0
  br label %495

495:                                              ; preds = %490, %485
  %496 = phi i32 [ %489, %485 ], [ %494, %490 ]
  store i32 %496, i32* %42, align 4
  %497 = load i32, i32* %52, align 4
  store i32 %497, i32* %38, align 4
  %498 = load i32, i32* %50, align 4
  %499 = icmp ne i32 %498, 0
  br i1 %499, label %500, label %502

500:                                              ; preds = %495
  %501 = load i32, i32* %51, align 4
  br label %505

502:                                              ; preds = %495
  %503 = load i32, i32* %51, align 4
  %504 = add nsw i32 %503, 1
  br label %505

505:                                              ; preds = %502, %500
  %506 = phi i32 [ %501, %500 ], [ %504, %502 ]
  store i32 %506, i32* %34, align 4
  %507 = load i32, i32* %51, align 4
  %508 = load i32, i32* @pels, align 4
  %509 = sdiv i32 %508, 16
  %510 = icmp eq i32 %507, %509
  br i1 %510, label %511, label %517

511:                                              ; preds = %505
  %512 = load i32, i32* %51, align 4
  store i32 %512, i32* %34, align 4
  %513 = load i32, i32* %44, align 4
  %514 = icmp ne i32 %513, 0
  %515 = zext i1 %514 to i64
  %516 = select i1 %514, i32 4, i32 0
  store i32 %516, i32* %42, align 4
  br label %517

517:                                              ; preds = %511, %505
  br label %521

518:                                              ; preds = %249
  %519 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %520 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %519, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1.122, i64 0, i64 0))
  call void @exit(i32 -1) #9
  unreachable

521:                                              ; preds = %517, %463, %411, %330
  %522 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %10, align 8
  %523 = load i32, i32* %44, align 4
  %524 = icmp ne i32 %523, 0
  br i1 %524, label %525, label %528

525:                                              ; preds = %521
  %526 = load i32, i32* %13, align 4
  %527 = add nsw i32 %526, 1
  br label %529

528:                                              ; preds = %521
  br label %529

529:                                              ; preds = %528, %525
  %530 = phi i32 [ %527, %525 ], [ 0, %528 ]
  %531 = sext i32 %530 to i64
  %532 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %522, i64 %531
  %533 = load i32, i32* %52, align 4
  %534 = sext i32 %533 to i64
  %535 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %532, i64 0, i64 %534
  %536 = load i32, i32* %51, align 4
  %537 = sext i32 %536 to i64
  %538 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %535, i64 0, i64 %537
  %539 = load %struct.motionvector*, %struct.motionvector** %538, align 8
  store %struct.motionvector* %539, %struct.motionvector** %54, align 8
  %540 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %10, align 8
  %541 = load i32, i32* %40, align 4
  %542 = sext i32 %541 to i64
  %543 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %540, i64 %542
  %544 = load i32, i32* %36, align 4
  %545 = sext i32 %544 to i64
  %546 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %543, i64 0, i64 %545
  %547 = load i32, i32* %32, align 4
  %548 = sext i32 %547 to i64
  %549 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %546, i64 0, i64 %548
  %550 = load %struct.motionvector*, %struct.motionvector** %549, align 8
  store %struct.motionvector* %550, %struct.motionvector** %55, align 8
  %551 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %10, align 8
  %552 = load i32, i32* %41, align 4
  %553 = sext i32 %552 to i64
  %554 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %551, i64 %553
  %555 = load i32, i32* %37, align 4
  %556 = sext i32 %555 to i64
  %557 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %554, i64 0, i64 %556
  %558 = load i32, i32* %33, align 4
  %559 = sext i32 %558 to i64
  %560 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %557, i64 0, i64 %559
  %561 = load %struct.motionvector*, %struct.motionvector** %560, align 8
  store %struct.motionvector* %561, %struct.motionvector** %56, align 8
  %562 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %10, align 8
  %563 = load i32, i32* %42, align 4
  %564 = sext i32 %563 to i64
  %565 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %562, i64 %564
  %566 = load i32, i32* %38, align 4
  %567 = sext i32 %566 to i64
  %568 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %565, i64 0, i64 %567
  %569 = load i32, i32* %34, align 4
  %570 = sext i32 %569 to i64
  %571 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %568, i64 0, i64 %570
  %572 = load %struct.motionvector*, %struct.motionvector** %571, align 8
  store %struct.motionvector* %572, %struct.motionvector** %57, align 8
  %573 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %10, align 8
  %574 = load i32, i32* %43, align 4
  %575 = sext i32 %574 to i64
  %576 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %573, i64 %575
  %577 = load i32, i32* %39, align 4
  %578 = sext i32 %577 to i64
  %579 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %576, i64 0, i64 %578
  %580 = load i32, i32* %35, align 4
  %581 = sext i32 %580 to i64
  %582 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %579, i64 0, i64 %581
  %583 = load %struct.motionvector*, %struct.motionvector** %582, align 8
  store %struct.motionvector* %583, %struct.motionvector** %58, align 8
  %584 = load i32, i32* %8, align 4
  %585 = mul nsw i32 2, %584
  %586 = load i32, i32* %13, align 4
  %587 = and i32 %586, 1
  %588 = shl i32 %587, 4
  %589 = add nsw i32 %585, %588
  store i32 %589, i32* %22, align 4
  %590 = load i32, i32* %9, align 4
  %591 = mul nsw i32 2, %590
  %592 = load i32, i32* %13, align 4
  %593 = and i32 %592, 2
  %594 = shl i32 %593, 3
  %595 = add nsw i32 %591, %594
  store i32 %595, i32* %27, align 4
  %596 = load i32, i32* %22, align 4
  store i32 %596, i32* %26, align 4
  store i32 %596, i32* %25, align 4
  store i32 %596, i32* %24, align 4
  store i32 %596, i32* %23, align 4
  %597 = load i32, i32* %27, align 4
  store i32 %597, i32* %31, align 4
  store i32 %597, i32* %30, align 4
  store i32 %597, i32* %29, align 4
  store i32 %597, i32* %28, align 4
  %598 = load %struct.motionvector*, %struct.motionvector** %54, align 8
  %599 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %598, i32 0, i32 0
  %600 = load i32, i32* %599, align 4
  %601 = mul nsw i32 2, %600
  %602 = load %struct.motionvector*, %struct.motionvector** %54, align 8
  %603 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %602, i32 0, i32 2
  %604 = load i32, i32* %603, align 4
  %605 = add nsw i32 %601, %604
  %606 = load i32, i32* %22, align 4
  %607 = add nsw i32 %606, %605
  store i32 %607, i32* %22, align 4
  %608 = load %struct.motionvector*, %struct.motionvector** %54, align 8
  %609 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %608, i32 0, i32 1
  %610 = load i32, i32* %609, align 4
  %611 = mul nsw i32 2, %610
  %612 = load %struct.motionvector*, %struct.motionvector** %54, align 8
  %613 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %612, i32 0, i32 3
  %614 = load i32, i32* %613, align 4
  %615 = add nsw i32 %611, %614
  %616 = load i32, i32* %27, align 4
  %617 = add nsw i32 %616, %615
  store i32 %617, i32* %27, align 4
  %618 = load %struct.motionvector*, %struct.motionvector** %55, align 8
  %619 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %618, i32 0, i32 0
  %620 = load i32, i32* %619, align 4
  %621 = mul nsw i32 2, %620
  %622 = load %struct.motionvector*, %struct.motionvector** %55, align 8
  %623 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %622, i32 0, i32 2
  %624 = load i32, i32* %623, align 4
  %625 = add nsw i32 %621, %624
  %626 = load i32, i32* %23, align 4
  %627 = add nsw i32 %626, %625
  store i32 %627, i32* %23, align 4
  %628 = load %struct.motionvector*, %struct.motionvector** %55, align 8
  %629 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %628, i32 0, i32 1
  %630 = load i32, i32* %629, align 4
  %631 = mul nsw i32 2, %630
  %632 = load %struct.motionvector*, %struct.motionvector** %55, align 8
  %633 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %632, i32 0, i32 3
  %634 = load i32, i32* %633, align 4
  %635 = add nsw i32 %631, %634
  %636 = load i32, i32* %28, align 4
  %637 = add nsw i32 %636, %635
  store i32 %637, i32* %28, align 4
  %638 = load %struct.motionvector*, %struct.motionvector** %56, align 8
  %639 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %638, i32 0, i32 0
  %640 = load i32, i32* %639, align 4
  %641 = mul nsw i32 2, %640
  %642 = load %struct.motionvector*, %struct.motionvector** %56, align 8
  %643 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %642, i32 0, i32 2
  %644 = load i32, i32* %643, align 4
  %645 = add nsw i32 %641, %644
  %646 = load i32, i32* %24, align 4
  %647 = add nsw i32 %646, %645
  store i32 %647, i32* %24, align 4
  %648 = load %struct.motionvector*, %struct.motionvector** %56, align 8
  %649 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %648, i32 0, i32 1
  %650 = load i32, i32* %649, align 4
  %651 = mul nsw i32 2, %650
  %652 = load %struct.motionvector*, %struct.motionvector** %56, align 8
  %653 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %652, i32 0, i32 3
  %654 = load i32, i32* %653, align 4
  %655 = add nsw i32 %651, %654
  %656 = load i32, i32* %29, align 4
  %657 = add nsw i32 %656, %655
  store i32 %657, i32* %29, align 4
  %658 = load %struct.motionvector*, %struct.motionvector** %57, align 8
  %659 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %658, i32 0, i32 0
  %660 = load i32, i32* %659, align 4
  %661 = mul nsw i32 2, %660
  %662 = load %struct.motionvector*, %struct.motionvector** %57, align 8
  %663 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %662, i32 0, i32 2
  %664 = load i32, i32* %663, align 4
  %665 = add nsw i32 %661, %664
  %666 = load i32, i32* %25, align 4
  %667 = add nsw i32 %666, %665
  store i32 %667, i32* %25, align 4
  %668 = load %struct.motionvector*, %struct.motionvector** %57, align 8
  %669 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %668, i32 0, i32 1
  %670 = load i32, i32* %669, align 4
  %671 = mul nsw i32 2, %670
  %672 = load %struct.motionvector*, %struct.motionvector** %57, align 8
  %673 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %672, i32 0, i32 3
  %674 = load i32, i32* %673, align 4
  %675 = add nsw i32 %671, %674
  %676 = load i32, i32* %30, align 4
  %677 = add nsw i32 %676, %675
  store i32 %677, i32* %30, align 4
  %678 = load %struct.motionvector*, %struct.motionvector** %58, align 8
  %679 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %678, i32 0, i32 0
  %680 = load i32, i32* %679, align 4
  %681 = mul nsw i32 2, %680
  %682 = load %struct.motionvector*, %struct.motionvector** %58, align 8
  %683 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %682, i32 0, i32 2
  %684 = load i32, i32* %683, align 4
  %685 = add nsw i32 %681, %684
  %686 = load i32, i32* %26, align 4
  %687 = add nsw i32 %686, %685
  store i32 %687, i32* %26, align 4
  %688 = load %struct.motionvector*, %struct.motionvector** %58, align 8
  %689 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %688, i32 0, i32 1
  %690 = load i32, i32* %689, align 4
  %691 = mul nsw i32 2, %690
  %692 = load %struct.motionvector*, %struct.motionvector** %58, align 8
  %693 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %692, i32 0, i32 3
  %694 = load i32, i32* %693, align 4
  %695 = add nsw i32 %691, %694
  %696 = load i32, i32* %31, align 4
  %697 = add nsw i32 %696, %695
  store i32 %697, i32* %31, align 4
  store i32 0, i32* %16, align 4
  br label %698

698:                                              ; preds = %864, %529
  %699 = load i32, i32* %16, align 4
  %700 = icmp slt i32 %699, 8
  br i1 %700, label %701, label %867

701:                                              ; preds = %698
  store i32 0, i32* %15, align 4
  br label %702

702:                                              ; preds = %860, %701
  %703 = load i32, i32* %15, align 4
  %704 = icmp slt i32 %703, 8
  br i1 %704, label %705, label %863

705:                                              ; preds = %702
  %706 = load i8*, i8** %11, align 8
  %707 = load i32, i32* %22, align 4
  %708 = sext i32 %707 to i64
  %709 = getelementptr inbounds i8, i8* %706, i64 %708
  %710 = load i32, i32* %15, align 4
  %711 = mul nsw i32 2, %710
  %712 = sext i32 %711 to i64
  %713 = getelementptr inbounds i8, i8* %709, i64 %712
  %714 = load i32, i32* %27, align 4
  %715 = load i32, i32* %16, align 4
  %716 = mul nsw i32 2, %715
  %717 = add nsw i32 %714, %716
  %718 = load i32, i32* %53, align 4
  %719 = mul nsw i32 %717, %718
  %720 = mul nsw i32 %719, 2
  %721 = sext i32 %720 to i64
  %722 = getelementptr inbounds i8, i8* %713, i64 %721
  %723 = load i8, i8* %722, align 1
  %724 = zext i8 %723 to i32
  %725 = load i32, i32* %16, align 4
  %726 = sext i32 %725 to i64
  %727 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %59, i64 0, i64 %726
  %728 = load i32, i32* %15, align 4
  %729 = sext i32 %728 to i64
  %730 = getelementptr inbounds [8 x i32], [8 x i32]* %727, i64 0, i64 %729
  %731 = load i32, i32* %730, align 4
  %732 = mul nsw i32 %724, %731
  store i32 %732, i32* %17, align 4
  %733 = load i8*, i8** %11, align 8
  %734 = load i32, i32* %23, align 4
  %735 = sext i32 %734 to i64
  %736 = getelementptr inbounds i8, i8* %733, i64 %735
  %737 = load i32, i32* %15, align 4
  %738 = mul nsw i32 2, %737
  %739 = sext i32 %738 to i64
  %740 = getelementptr inbounds i8, i8* %736, i64 %739
  %741 = load i32, i32* %28, align 4
  %742 = load i32, i32* %16, align 4
  %743 = mul nsw i32 2, %742
  %744 = add nsw i32 %741, %743
  %745 = load i32, i32* %53, align 4
  %746 = mul nsw i32 %744, %745
  %747 = mul nsw i32 %746, 2
  %748 = sext i32 %747 to i64
  %749 = getelementptr inbounds i8, i8* %740, i64 %748
  %750 = load i8, i8* %749, align 1
  %751 = zext i8 %750 to i32
  %752 = load i32, i32* %16, align 4
  %753 = sext i32 %752 to i64
  %754 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %60, i64 0, i64 %753
  %755 = load i32, i32* %15, align 4
  %756 = sext i32 %755 to i64
  %757 = getelementptr inbounds [8 x i32], [8 x i32]* %754, i64 0, i64 %756
  %758 = load i32, i32* %757, align 4
  %759 = mul nsw i32 %751, %758
  store i32 %759, i32* %18, align 4
  %760 = load i8*, i8** %11, align 8
  %761 = load i32, i32* %24, align 4
  %762 = sext i32 %761 to i64
  %763 = getelementptr inbounds i8, i8* %760, i64 %762
  %764 = load i32, i32* %15, align 4
  %765 = mul nsw i32 2, %764
  %766 = sext i32 %765 to i64
  %767 = getelementptr inbounds i8, i8* %763, i64 %766
  %768 = load i32, i32* %29, align 4
  %769 = load i32, i32* %16, align 4
  %770 = mul nsw i32 2, %769
  %771 = add nsw i32 %768, %770
  %772 = load i32, i32* %53, align 4
  %773 = mul nsw i32 %771, %772
  %774 = mul nsw i32 %773, 2
  %775 = sext i32 %774 to i64
  %776 = getelementptr inbounds i8, i8* %767, i64 %775
  %777 = load i8, i8* %776, align 1
  %778 = zext i8 %777 to i32
  %779 = load i32, i32* %16, align 4
  %780 = sext i32 %779 to i64
  %781 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %61, i64 0, i64 %780
  %782 = load i32, i32* %15, align 4
  %783 = sext i32 %782 to i64
  %784 = getelementptr inbounds [8 x i32], [8 x i32]* %781, i64 0, i64 %783
  %785 = load i32, i32* %784, align 4
  %786 = mul nsw i32 %778, %785
  store i32 %786, i32* %19, align 4
  %787 = load i8*, i8** %11, align 8
  %788 = load i32, i32* %25, align 4
  %789 = sext i32 %788 to i64
  %790 = getelementptr inbounds i8, i8* %787, i64 %789
  %791 = load i32, i32* %15, align 4
  %792 = mul nsw i32 2, %791
  %793 = sext i32 %792 to i64
  %794 = getelementptr inbounds i8, i8* %790, i64 %793
  %795 = load i32, i32* %30, align 4
  %796 = load i32, i32* %16, align 4
  %797 = mul nsw i32 2, %796
  %798 = add nsw i32 %795, %797
  %799 = load i32, i32* %53, align 4
  %800 = mul nsw i32 %798, %799
  %801 = mul nsw i32 %800, 2
  %802 = sext i32 %801 to i64
  %803 = getelementptr inbounds i8, i8* %794, i64 %802
  %804 = load i8, i8* %803, align 1
  %805 = zext i8 %804 to i32
  %806 = load i32, i32* %16, align 4
  %807 = sext i32 %806 to i64
  %808 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %62, i64 0, i64 %807
  %809 = load i32, i32* %15, align 4
  %810 = sext i32 %809 to i64
  %811 = getelementptr inbounds [8 x i32], [8 x i32]* %808, i64 0, i64 %810
  %812 = load i32, i32* %811, align 4
  %813 = mul nsw i32 %805, %812
  store i32 %813, i32* %20, align 4
  %814 = load i8*, i8** %11, align 8
  %815 = load i32, i32* %26, align 4
  %816 = sext i32 %815 to i64
  %817 = getelementptr inbounds i8, i8* %814, i64 %816
  %818 = load i32, i32* %15, align 4
  %819 = mul nsw i32 2, %818
  %820 = sext i32 %819 to i64
  %821 = getelementptr inbounds i8, i8* %817, i64 %820
  %822 = load i32, i32* %31, align 4
  %823 = load i32, i32* %16, align 4
  %824 = mul nsw i32 2, %823
  %825 = add nsw i32 %822, %824
  %826 = load i32, i32* %53, align 4
  %827 = mul nsw i32 %825, %826
  %828 = mul nsw i32 %827, 2
  %829 = sext i32 %828 to i64
  %830 = getelementptr inbounds i8, i8* %821, i64 %829
  %831 = load i8, i8* %830, align 1
  %832 = zext i8 %831 to i32
  %833 = load i32, i32* %16, align 4
  %834 = sext i32 %833 to i64
  %835 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %63, i64 0, i64 %834
  %836 = load i32, i32* %15, align 4
  %837 = sext i32 %836 to i64
  %838 = getelementptr inbounds [8 x i32], [8 x i32]* %835, i64 0, i64 %837
  %839 = load i32, i32* %838, align 4
  %840 = mul nsw i32 %832, %839
  store i32 %840, i32* %21, align 4
  %841 = load i32, i32* %17, align 4
  %842 = load i32, i32* %18, align 4
  %843 = add nsw i32 %841, %842
  %844 = load i32, i32* %19, align 4
  %845 = add nsw i32 %843, %844
  %846 = load i32, i32* %20, align 4
  %847 = add nsw i32 %845, %846
  %848 = load i32, i32* %21, align 4
  %849 = add nsw i32 %847, %848
  %850 = add nsw i32 %849, 4
  %851 = ashr i32 %850, 3
  %852 = load i32*, i32** %12, align 8
  %853 = load i32, i32* %15, align 4
  %854 = sext i32 %853 to i64
  %855 = getelementptr inbounds i32, i32* %852, i64 %854
  %856 = load i32, i32* %16, align 4
  %857 = mul nsw i32 %856, 16
  %858 = sext i32 %857 to i64
  %859 = getelementptr inbounds i32, i32* %855, i64 %858
  store i32 %851, i32* %859, align 4
  br label %860

860:                                              ; preds = %705
  %861 = load i32, i32* %15, align 4
  %862 = add nsw i32 %861, 1
  store i32 %862, i32* %15, align 4
  br label %702

863:                                              ; preds = %702
  br label %864

864:                                              ; preds = %863
  %865 = load i32, i32* %16, align 4
  %866 = add nsw i32 %865, 1
  store i32 %866, i32* %16, align 4
  br label %698

867:                                              ; preds = %698
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @FindPred(i32 %0, i32 %1, %struct.motionvector* %2, i8* %3, i32* %4, i32 %5, i32 %6) #0 {
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.motionvector*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i32*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  store i32 %0, i32* %8, align 4
  store i32 %1, i32* %9, align 4
  store %struct.motionvector* %2, %struct.motionvector** %10, align 8
  store i8* %3, i8** %11, align 8
  store i32* %4, i32** %12, align 8
  store i32 %5, i32* %13, align 4
  store i32 %6, i32* %14, align 4
  %20 = load i32, i32* @mv_outside_frame, align 4
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %22, label %29

22:                                               ; preds = %7
  %23 = load i32, i32* @pels, align 4
  %24 = load i32, i32* @long_vectors, align 4
  %25 = icmp ne i32 %24, 0
  %26 = zext i1 %25 to i64
  %27 = select i1 %25, i32 64, i32 32
  %28 = add nsw i32 %23, %27
  br label %31

29:                                               ; preds = %7
  %30 = load i32, i32* @pels, align 4
  br label %31

31:                                               ; preds = %29, %22
  %32 = phi i32 [ %28, %22 ], [ %30, %29 ]
  store i32 %32, i32* %19, align 4
  %33 = load i32, i32* %8, align 4
  %34 = load %struct.motionvector*, %struct.motionvector** %10, align 8
  %35 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %34, i32 0, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = add nsw i32 %33, %36
  store i32 %37, i32* %17, align 4
  %38 = load i32, i32* %9, align 4
  %39 = load %struct.motionvector*, %struct.motionvector** %10, align 8
  %40 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %39, i32 0, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = add nsw i32 %38, %41
  store i32 %42, i32* %18, align 4
  %43 = load i32, i32* %14, align 4
  %44 = and i32 %43, 1
  %45 = shl i32 %44, 3
  %46 = load i32, i32* %17, align 4
  %47 = add nsw i32 %46, %45
  store i32 %47, i32* %17, align 4
  %48 = load i32, i32* %14, align 4
  %49 = and i32 %48, 2
  %50 = shl i32 %49, 2
  %51 = load i32, i32* %18, align 4
  %52 = add nsw i32 %51, %50
  store i32 %52, i32* %18, align 4
  store i32 0, i32* %16, align 4
  br label %53

53:                                               ; preds = %102, %31
  %54 = load i32, i32* %16, align 4
  %55 = load i32, i32* %13, align 4
  %56 = icmp slt i32 %54, %55
  br i1 %56, label %57, label %105

57:                                               ; preds = %53
  store i32 0, i32* %15, align 4
  br label %58

58:                                               ; preds = %98, %57
  %59 = load i32, i32* %15, align 4
  %60 = load i32, i32* %13, align 4
  %61 = icmp slt i32 %59, %60
  br i1 %61, label %62, label %101

62:                                               ; preds = %58
  %63 = load i8*, i8** %11, align 8
  %64 = load i32, i32* %17, align 4
  %65 = load i32, i32* %15, align 4
  %66 = add nsw i32 %64, %65
  %67 = mul nsw i32 %66, 2
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %63, i64 %68
  %70 = load %struct.motionvector*, %struct.motionvector** %10, align 8
  %71 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %70, i32 0, i32 2
  %72 = load i32, i32* %71, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i8, i8* %69, i64 %73
  %75 = load i32, i32* %18, align 4
  %76 = load i32, i32* %16, align 4
  %77 = add nsw i32 %75, %76
  %78 = mul nsw i32 %77, 2
  %79 = load %struct.motionvector*, %struct.motionvector** %10, align 8
  %80 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %79, i32 0, i32 3
  %81 = load i32, i32* %80, align 4
  %82 = add nsw i32 %78, %81
  %83 = load i32, i32* %19, align 4
  %84 = mul nsw i32 %82, %83
  %85 = mul nsw i32 %84, 2
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds i8, i8* %74, i64 %86
  %88 = load i8, i8* %87, align 1
  %89 = zext i8 %88 to i32
  %90 = load i32*, i32** %12, align 8
  %91 = load i32, i32* %15, align 4
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds i32, i32* %90, i64 %92
  %94 = load i32, i32* %16, align 4
  %95 = mul nsw i32 %94, 16
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds i32, i32* %93, i64 %96
  store i32 %89, i32* %97, align 4
  br label %98

98:                                               ; preds = %62
  %99 = load i32, i32* %15, align 4
  %100 = add nsw i32 %99, 1
  store i32 %100, i32* %15, align 4
  br label %58

101:                                              ; preds = %58
  br label %102

102:                                              ; preds = %101
  %103 = load i32, i32* %16, align 4
  %104 = add nsw i32 %103, 1
  store i32 %104, i32* %16, align 4
  br label %53

105:                                              ; preds = %53
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @DoPredChrom_P(i32 %0, i32 %1, i32 %2, i32 %3, %struct.pict_image* %4, %struct.pict_image* %5, %struct.mb_structure* %6) #0 {
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca %struct.pict_image*, align 8
  %13 = alloca %struct.pict_image*, align 8
  %14 = alloca %struct.mb_structure*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  store i32 %0, i32* %8, align 4
  store i32 %1, i32* %9, align 4
  store i32 %2, i32* %10, align 4
  store i32 %3, i32* %11, align 4
  store %struct.pict_image* %4, %struct.pict_image** %12, align 8
  store %struct.pict_image* %5, %struct.pict_image** %13, align 8
  store %struct.mb_structure* %6, %struct.mb_structure** %14, align 8
  %27 = load i32, i32* @mv_outside_frame, align 4
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %29, label %37

29:                                               ; preds = %7
  %30 = load i32, i32* @pels, align 4
  %31 = sdiv i32 %30, 2
  %32 = load i32, i32* @long_vectors, align 4
  %33 = icmp ne i32 %32, 0
  %34 = zext i1 %33 to i64
  %35 = select i1 %33, i32 32, i32 16
  %36 = add nsw i32 %31, %35
  br label %40

37:                                               ; preds = %7
  %38 = load i32, i32* @pels, align 4
  %39 = sdiv i32 %38, 2
  br label %40

40:                                               ; preds = %37, %29
  %41 = phi i32 [ %36, %29 ], [ %39, %37 ]
  store i32 %41, i32* %22, align 4
  %42 = load i32, i32* %8, align 4
  %43 = ashr i32 %42, 1
  store i32 %43, i32* %17, align 4
  %44 = load i32, i32* %9, align 4
  %45 = ashr i32 %44, 1
  store i32 %45, i32* %18, align 4
  %46 = load i32, i32* %10, align 4
  %47 = ashr i32 %46, 1
  store i32 %47, i32* %23, align 4
  %48 = load i32, i32* %10, align 4
  %49 = and i32 %48, 1
  store i32 %49, i32* %25, align 4
  %50 = load i32, i32* %11, align 4
  %51 = ashr i32 %50, 1
  store i32 %51, i32* %24, align 4
  %52 = load i32, i32* %11, align 4
  %53 = and i32 %52, 1
  store i32 %53, i32* %26, align 4
  %54 = load i32, i32* %25, align 4
  %55 = icmp ne i32 %54, 0
  br i1 %55, label %168, label %56

56:                                               ; preds = %40
  %57 = load i32, i32* %26, align 4
  %58 = icmp ne i32 %57, 0
  br i1 %58, label %168, label %59

59:                                               ; preds = %56
  store i32 0, i32* %16, align 4
  br label %60

60:                                               ; preds = %164, %59
  %61 = load i32, i32* %16, align 4
  %62 = icmp slt i32 %61, 8
  br i1 %62, label %63, label %167

63:                                               ; preds = %60
  store i32 0, i32* %15, align 4
  br label %64

64:                                               ; preds = %160, %63
  %65 = load i32, i32* %15, align 4
  %66 = icmp slt i32 %65, 8
  br i1 %66, label %67, label %163

67:                                               ; preds = %64
  %68 = load i32, i32* %17, align 4
  %69 = load i32, i32* %23, align 4
  %70 = add nsw i32 %68, %69
  %71 = load i32, i32* %15, align 4
  %72 = add nsw i32 %70, %71
  store i32 %72, i32* %19, align 4
  %73 = load i32, i32* %18, align 4
  %74 = load i32, i32* %24, align 4
  %75 = add nsw i32 %73, %74
  %76 = load i32, i32* %16, align 4
  %77 = add nsw i32 %75, %76
  store i32 %77, i32* %20, align 4
  %78 = load %struct.pict_image*, %struct.pict_image** %13, align 8
  %79 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %78, i32 0, i32 1
  %80 = load i8*, i8** %79, align 8
  %81 = load i32, i32* %19, align 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds i8, i8* %80, i64 %82
  %84 = load i32, i32* %20, align 4
  %85 = load i32, i32* %22, align 4
  %86 = mul nsw i32 %84, %85
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds i8, i8* %83, i64 %87
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  store i32 %90, i32* %21, align 4
  %91 = load %struct.pict_image*, %struct.pict_image** %12, align 8
  %92 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %91, i32 0, i32 1
  %93 = load i8*, i8** %92, align 8
  %94 = load i32, i32* %17, align 4
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds i8, i8* %93, i64 %95
  %97 = load i32, i32* %15, align 4
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds i8, i8* %96, i64 %98
  %100 = load i32, i32* %18, align 4
  %101 = load i32, i32* %16, align 4
  %102 = add nsw i32 %100, %101
  %103 = load i32, i32* @cpels, align 4
  %104 = mul nsw i32 %102, %103
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds i8, i8* %99, i64 %105
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i32
  %109 = load i32, i32* %21, align 4
  %110 = sub nsw i32 %108, %109
  %111 = load %struct.mb_structure*, %struct.mb_structure** %14, align 8
  %112 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %111, i32 0, i32 1
  %113 = load i32, i32* %16, align 4
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %112, i64 0, i64 %114
  %116 = load i32, i32* %15, align 4
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds [8 x i32], [8 x i32]* %115, i64 0, i64 %117
  store i32 %110, i32* %118, align 4
  %119 = load %struct.pict_image*, %struct.pict_image** %13, align 8
  %120 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %119, i32 0, i32 2
  %121 = load i8*, i8** %120, align 8
  %122 = load i32, i32* %19, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds i8, i8* %121, i64 %123
  %125 = load i32, i32* %20, align 4
  %126 = load i32, i32* %22, align 4
  %127 = mul nsw i32 %125, %126
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds i8, i8* %124, i64 %128
  %130 = load i8, i8* %129, align 1
  %131 = zext i8 %130 to i32
  store i32 %131, i32* %21, align 4
  %132 = load %struct.pict_image*, %struct.pict_image** %12, align 8
  %133 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %132, i32 0, i32 2
  %134 = load i8*, i8** %133, align 8
  %135 = load i32, i32* %17, align 4
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds i8, i8* %134, i64 %136
  %138 = load i32, i32* %15, align 4
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds i8, i8* %137, i64 %139
  %141 = load i32, i32* %18, align 4
  %142 = load i32, i32* %16, align 4
  %143 = add nsw i32 %141, %142
  %144 = load i32, i32* @cpels, align 4
  %145 = mul nsw i32 %143, %144
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds i8, i8* %140, i64 %146
  %148 = load i8, i8* %147, align 1
  %149 = zext i8 %148 to i32
  %150 = load i32, i32* %21, align 4
  %151 = sub nsw i32 %149, %150
  %152 = load %struct.mb_structure*, %struct.mb_structure** %14, align 8
  %153 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %152, i32 0, i32 2
  %154 = load i32, i32* %16, align 4
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %153, i64 0, i64 %155
  %157 = load i32, i32* %15, align 4
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds [8 x i32], [8 x i32]* %156, i64 0, i64 %158
  store i32 %151, i32* %159, align 4
  br label %160

160:                                              ; preds = %67
  %161 = load i32, i32* %15, align 4
  %162 = add nsw i32 %161, 1
  store i32 %162, i32* %15, align 4
  br label %64

163:                                              ; preds = %64
  br label %164

164:                                              ; preds = %163
  %165 = load i32, i32* %16, align 4
  %166 = add nsw i32 %165, 1
  store i32 %166, i32* %16, align 4
  br label %60

167:                                              ; preds = %60
  br label %691

168:                                              ; preds = %56, %40
  %169 = load i32, i32* %25, align 4
  %170 = icmp ne i32 %169, 0
  br i1 %170, label %319, label %171

171:                                              ; preds = %168
  %172 = load i32, i32* %26, align 4
  %173 = icmp ne i32 %172, 0
  br i1 %173, label %174, label %319

174:                                              ; preds = %171
  store i32 0, i32* %16, align 4
  br label %175

175:                                              ; preds = %315, %174
  %176 = load i32, i32* %16, align 4
  %177 = icmp slt i32 %176, 8
  br i1 %177, label %178, label %318

178:                                              ; preds = %175
  store i32 0, i32* %15, align 4
  br label %179

179:                                              ; preds = %311, %178
  %180 = load i32, i32* %15, align 4
  %181 = icmp slt i32 %180, 8
  br i1 %181, label %182, label %314

182:                                              ; preds = %179
  %183 = load i32, i32* %17, align 4
  %184 = load i32, i32* %23, align 4
  %185 = add nsw i32 %183, %184
  %186 = load i32, i32* %15, align 4
  %187 = add nsw i32 %185, %186
  store i32 %187, i32* %19, align 4
  %188 = load i32, i32* %18, align 4
  %189 = load i32, i32* %24, align 4
  %190 = add nsw i32 %188, %189
  %191 = load i32, i32* %16, align 4
  %192 = add nsw i32 %190, %191
  store i32 %192, i32* %20, align 4
  %193 = load %struct.pict_image*, %struct.pict_image** %13, align 8
  %194 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %193, i32 0, i32 1
  %195 = load i8*, i8** %194, align 8
  %196 = load i32, i32* %19, align 4
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds i8, i8* %195, i64 %197
  %199 = load i32, i32* %20, align 4
  %200 = load i32, i32* %22, align 4
  %201 = mul nsw i32 %199, %200
  %202 = sext i32 %201 to i64
  %203 = getelementptr inbounds i8, i8* %198, i64 %202
  %204 = load i8, i8* %203, align 1
  %205 = zext i8 %204 to i32
  %206 = load %struct.pict_image*, %struct.pict_image** %13, align 8
  %207 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %206, i32 0, i32 1
  %208 = load i8*, i8** %207, align 8
  %209 = load i32, i32* %19, align 4
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds i8, i8* %208, i64 %210
  %212 = load i32, i32* %20, align 4
  %213 = load i32, i32* %26, align 4
  %214 = add nsw i32 %212, %213
  %215 = load i32, i32* %22, align 4
  %216 = mul nsw i32 %214, %215
  %217 = sext i32 %216 to i64
  %218 = getelementptr inbounds i8, i8* %211, i64 %217
  %219 = load i8, i8* %218, align 1
  %220 = zext i8 %219 to i32
  %221 = add nsw i32 %205, %220
  %222 = add nsw i32 %221, 1
  %223 = ashr i32 %222, 1
  store i32 %223, i32* %21, align 4
  %224 = load %struct.pict_image*, %struct.pict_image** %12, align 8
  %225 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %224, i32 0, i32 1
  %226 = load i8*, i8** %225, align 8
  %227 = load i32, i32* %17, align 4
  %228 = sext i32 %227 to i64
  %229 = getelementptr inbounds i8, i8* %226, i64 %228
  %230 = load i32, i32* %15, align 4
  %231 = sext i32 %230 to i64
  %232 = getelementptr inbounds i8, i8* %229, i64 %231
  %233 = load i32, i32* %18, align 4
  %234 = load i32, i32* %16, align 4
  %235 = add nsw i32 %233, %234
  %236 = load i32, i32* @cpels, align 4
  %237 = mul nsw i32 %235, %236
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds i8, i8* %232, i64 %238
  %240 = load i8, i8* %239, align 1
  %241 = zext i8 %240 to i32
  %242 = load i32, i32* %21, align 4
  %243 = sub nsw i32 %241, %242
  %244 = load %struct.mb_structure*, %struct.mb_structure** %14, align 8
  %245 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %244, i32 0, i32 1
  %246 = load i32, i32* %16, align 4
  %247 = sext i32 %246 to i64
  %248 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %245, i64 0, i64 %247
  %249 = load i32, i32* %15, align 4
  %250 = sext i32 %249 to i64
  %251 = getelementptr inbounds [8 x i32], [8 x i32]* %248, i64 0, i64 %250
  store i32 %243, i32* %251, align 4
  %252 = load %struct.pict_image*, %struct.pict_image** %13, align 8
  %253 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %252, i32 0, i32 2
  %254 = load i8*, i8** %253, align 8
  %255 = load i32, i32* %19, align 4
  %256 = sext i32 %255 to i64
  %257 = getelementptr inbounds i8, i8* %254, i64 %256
  %258 = load i32, i32* %20, align 4
  %259 = load i32, i32* %22, align 4
  %260 = mul nsw i32 %258, %259
  %261 = sext i32 %260 to i64
  %262 = getelementptr inbounds i8, i8* %257, i64 %261
  %263 = load i8, i8* %262, align 1
  %264 = zext i8 %263 to i32
  %265 = load %struct.pict_image*, %struct.pict_image** %13, align 8
  %266 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %265, i32 0, i32 2
  %267 = load i8*, i8** %266, align 8
  %268 = load i32, i32* %19, align 4
  %269 = sext i32 %268 to i64
  %270 = getelementptr inbounds i8, i8* %267, i64 %269
  %271 = load i32, i32* %20, align 4
  %272 = load i32, i32* %26, align 4
  %273 = add nsw i32 %271, %272
  %274 = load i32, i32* %22, align 4
  %275 = mul nsw i32 %273, %274
  %276 = sext i32 %275 to i64
  %277 = getelementptr inbounds i8, i8* %270, i64 %276
  %278 = load i8, i8* %277, align 1
  %279 = zext i8 %278 to i32
  %280 = add nsw i32 %264, %279
  %281 = add nsw i32 %280, 1
  %282 = ashr i32 %281, 1
  store i32 %282, i32* %21, align 4
  %283 = load %struct.pict_image*, %struct.pict_image** %12, align 8
  %284 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %283, i32 0, i32 2
  %285 = load i8*, i8** %284, align 8
  %286 = load i32, i32* %17, align 4
  %287 = sext i32 %286 to i64
  %288 = getelementptr inbounds i8, i8* %285, i64 %287
  %289 = load i32, i32* %15, align 4
  %290 = sext i32 %289 to i64
  %291 = getelementptr inbounds i8, i8* %288, i64 %290
  %292 = load i32, i32* %18, align 4
  %293 = load i32, i32* %16, align 4
  %294 = add nsw i32 %292, %293
  %295 = load i32, i32* @cpels, align 4
  %296 = mul nsw i32 %294, %295
  %297 = sext i32 %296 to i64
  %298 = getelementptr inbounds i8, i8* %291, i64 %297
  %299 = load i8, i8* %298, align 1
  %300 = zext i8 %299 to i32
  %301 = load i32, i32* %21, align 4
  %302 = sub nsw i32 %300, %301
  %303 = load %struct.mb_structure*, %struct.mb_structure** %14, align 8
  %304 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %303, i32 0, i32 2
  %305 = load i32, i32* %16, align 4
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %304, i64 0, i64 %306
  %308 = load i32, i32* %15, align 4
  %309 = sext i32 %308 to i64
  %310 = getelementptr inbounds [8 x i32], [8 x i32]* %307, i64 0, i64 %309
  store i32 %302, i32* %310, align 4
  br label %311

311:                                              ; preds = %182
  %312 = load i32, i32* %15, align 4
  %313 = add nsw i32 %312, 1
  store i32 %313, i32* %15, align 4
  br label %179

314:                                              ; preds = %179
  br label %315

315:                                              ; preds = %314
  %316 = load i32, i32* %16, align 4
  %317 = add nsw i32 %316, 1
  store i32 %317, i32* %16, align 4
  br label %175

318:                                              ; preds = %175
  br label %690

319:                                              ; preds = %171, %168
  %320 = load i32, i32* %25, align 4
  %321 = icmp ne i32 %320, 0
  br i1 %321, label %322, label %472

322:                                              ; preds = %319
  %323 = load i32, i32* %26, align 4
  %324 = icmp ne i32 %323, 0
  br i1 %324, label %472, label %325

325:                                              ; preds = %322
  store i32 0, i32* %16, align 4
  br label %326

326:                                              ; preds = %468, %325
  %327 = load i32, i32* %16, align 4
  %328 = icmp slt i32 %327, 8
  br i1 %328, label %329, label %471

329:                                              ; preds = %326
  store i32 0, i32* %15, align 4
  br label %330

330:                                              ; preds = %464, %329
  %331 = load i32, i32* %15, align 4
  %332 = icmp slt i32 %331, 8
  br i1 %332, label %333, label %467

333:                                              ; preds = %330
  %334 = load i32, i32* %17, align 4
  %335 = load i32, i32* %23, align 4
  %336 = add nsw i32 %334, %335
  %337 = load i32, i32* %15, align 4
  %338 = add nsw i32 %336, %337
  store i32 %338, i32* %19, align 4
  %339 = load i32, i32* %18, align 4
  %340 = load i32, i32* %24, align 4
  %341 = add nsw i32 %339, %340
  %342 = load i32, i32* %16, align 4
  %343 = add nsw i32 %341, %342
  store i32 %343, i32* %20, align 4
  %344 = load %struct.pict_image*, %struct.pict_image** %13, align 8
  %345 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %344, i32 0, i32 1
  %346 = load i8*, i8** %345, align 8
  %347 = load i32, i32* %19, align 4
  %348 = sext i32 %347 to i64
  %349 = getelementptr inbounds i8, i8* %346, i64 %348
  %350 = load i32, i32* %20, align 4
  %351 = load i32, i32* %22, align 4
  %352 = mul nsw i32 %350, %351
  %353 = sext i32 %352 to i64
  %354 = getelementptr inbounds i8, i8* %349, i64 %353
  %355 = load i8, i8* %354, align 1
  %356 = zext i8 %355 to i32
  %357 = load %struct.pict_image*, %struct.pict_image** %13, align 8
  %358 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %357, i32 0, i32 1
  %359 = load i8*, i8** %358, align 8
  %360 = load i32, i32* %19, align 4
  %361 = sext i32 %360 to i64
  %362 = getelementptr inbounds i8, i8* %359, i64 %361
  %363 = load i32, i32* %25, align 4
  %364 = sext i32 %363 to i64
  %365 = getelementptr inbounds i8, i8* %362, i64 %364
  %366 = load i32, i32* %20, align 4
  %367 = load i32, i32* %22, align 4
  %368 = mul nsw i32 %366, %367
  %369 = sext i32 %368 to i64
  %370 = getelementptr inbounds i8, i8* %365, i64 %369
  %371 = load i8, i8* %370, align 1
  %372 = zext i8 %371 to i32
  %373 = add nsw i32 %356, %372
  %374 = add nsw i32 %373, 1
  %375 = ashr i32 %374, 1
  store i32 %375, i32* %21, align 4
  %376 = load %struct.pict_image*, %struct.pict_image** %12, align 8
  %377 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %376, i32 0, i32 1
  %378 = load i8*, i8** %377, align 8
  %379 = load i32, i32* %17, align 4
  %380 = sext i32 %379 to i64
  %381 = getelementptr inbounds i8, i8* %378, i64 %380
  %382 = load i32, i32* %15, align 4
  %383 = sext i32 %382 to i64
  %384 = getelementptr inbounds i8, i8* %381, i64 %383
  %385 = load i32, i32* %18, align 4
  %386 = load i32, i32* %16, align 4
  %387 = add nsw i32 %385, %386
  %388 = load i32, i32* @cpels, align 4
  %389 = mul nsw i32 %387, %388
  %390 = sext i32 %389 to i64
  %391 = getelementptr inbounds i8, i8* %384, i64 %390
  %392 = load i8, i8* %391, align 1
  %393 = zext i8 %392 to i32
  %394 = load i32, i32* %21, align 4
  %395 = sub nsw i32 %393, %394
  %396 = load %struct.mb_structure*, %struct.mb_structure** %14, align 8
  %397 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %396, i32 0, i32 1
  %398 = load i32, i32* %16, align 4
  %399 = sext i32 %398 to i64
  %400 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %397, i64 0, i64 %399
  %401 = load i32, i32* %15, align 4
  %402 = sext i32 %401 to i64
  %403 = getelementptr inbounds [8 x i32], [8 x i32]* %400, i64 0, i64 %402
  store i32 %395, i32* %403, align 4
  %404 = load %struct.pict_image*, %struct.pict_image** %13, align 8
  %405 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %404, i32 0, i32 2
  %406 = load i8*, i8** %405, align 8
  %407 = load i32, i32* %19, align 4
  %408 = sext i32 %407 to i64
  %409 = getelementptr inbounds i8, i8* %406, i64 %408
  %410 = load i32, i32* %20, align 4
  %411 = load i32, i32* %22, align 4
  %412 = mul nsw i32 %410, %411
  %413 = sext i32 %412 to i64
  %414 = getelementptr inbounds i8, i8* %409, i64 %413
  %415 = load i8, i8* %414, align 1
  %416 = zext i8 %415 to i32
  %417 = load %struct.pict_image*, %struct.pict_image** %13, align 8
  %418 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %417, i32 0, i32 2
  %419 = load i8*, i8** %418, align 8
  %420 = load i32, i32* %19, align 4
  %421 = sext i32 %420 to i64
  %422 = getelementptr inbounds i8, i8* %419, i64 %421
  %423 = load i32, i32* %25, align 4
  %424 = sext i32 %423 to i64
  %425 = getelementptr inbounds i8, i8* %422, i64 %424
  %426 = load i32, i32* %20, align 4
  %427 = load i32, i32* %22, align 4
  %428 = mul nsw i32 %426, %427
  %429 = sext i32 %428 to i64
  %430 = getelementptr inbounds i8, i8* %425, i64 %429
  %431 = load i8, i8* %430, align 1
  %432 = zext i8 %431 to i32
  %433 = add nsw i32 %416, %432
  %434 = add nsw i32 %433, 1
  %435 = ashr i32 %434, 1
  store i32 %435, i32* %21, align 4
  %436 = load %struct.pict_image*, %struct.pict_image** %12, align 8
  %437 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %436, i32 0, i32 2
  %438 = load i8*, i8** %437, align 8
  %439 = load i32, i32* %17, align 4
  %440 = sext i32 %439 to i64
  %441 = getelementptr inbounds i8, i8* %438, i64 %440
  %442 = load i32, i32* %15, align 4
  %443 = sext i32 %442 to i64
  %444 = getelementptr inbounds i8, i8* %441, i64 %443
  %445 = load i32, i32* %18, align 4
  %446 = load i32, i32* %16, align 4
  %447 = add nsw i32 %445, %446
  %448 = load i32, i32* @cpels, align 4
  %449 = mul nsw i32 %447, %448
  %450 = sext i32 %449 to i64
  %451 = getelementptr inbounds i8, i8* %444, i64 %450
  %452 = load i8, i8* %451, align 1
  %453 = zext i8 %452 to i32
  %454 = load i32, i32* %21, align 4
  %455 = sub nsw i32 %453, %454
  %456 = load %struct.mb_structure*, %struct.mb_structure** %14, align 8
  %457 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %456, i32 0, i32 2
  %458 = load i32, i32* %16, align 4
  %459 = sext i32 %458 to i64
  %460 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %457, i64 0, i64 %459
  %461 = load i32, i32* %15, align 4
  %462 = sext i32 %461 to i64
  %463 = getelementptr inbounds [8 x i32], [8 x i32]* %460, i64 0, i64 %462
  store i32 %455, i32* %463, align 4
  br label %464

464:                                              ; preds = %333
  %465 = load i32, i32* %15, align 4
  %466 = add nsw i32 %465, 1
  store i32 %466, i32* %15, align 4
  br label %330

467:                                              ; preds = %330
  br label %468

468:                                              ; preds = %467
  %469 = load i32, i32* %16, align 4
  %470 = add nsw i32 %469, 1
  store i32 %470, i32* %16, align 4
  br label %326

471:                                              ; preds = %326
  br label %689

472:                                              ; preds = %322, %319
  store i32 0, i32* %16, align 4
  br label %473

473:                                              ; preds = %685, %472
  %474 = load i32, i32* %16, align 4
  %475 = icmp slt i32 %474, 8
  br i1 %475, label %476, label %688

476:                                              ; preds = %473
  store i32 0, i32* %15, align 4
  br label %477

477:                                              ; preds = %681, %476
  %478 = load i32, i32* %15, align 4
  %479 = icmp slt i32 %478, 8
  br i1 %479, label %480, label %684

480:                                              ; preds = %477
  %481 = load i32, i32* %17, align 4
  %482 = load i32, i32* %23, align 4
  %483 = add nsw i32 %481, %482
  %484 = load i32, i32* %15, align 4
  %485 = add nsw i32 %483, %484
  store i32 %485, i32* %19, align 4
  %486 = load i32, i32* %18, align 4
  %487 = load i32, i32* %24, align 4
  %488 = add nsw i32 %486, %487
  %489 = load i32, i32* %16, align 4
  %490 = add nsw i32 %488, %489
  store i32 %490, i32* %20, align 4
  %491 = load %struct.pict_image*, %struct.pict_image** %13, align 8
  %492 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %491, i32 0, i32 1
  %493 = load i8*, i8** %492, align 8
  %494 = load i32, i32* %19, align 4
  %495 = sext i32 %494 to i64
  %496 = getelementptr inbounds i8, i8* %493, i64 %495
  %497 = load i32, i32* %20, align 4
  %498 = load i32, i32* %22, align 4
  %499 = mul nsw i32 %497, %498
  %500 = sext i32 %499 to i64
  %501 = getelementptr inbounds i8, i8* %496, i64 %500
  %502 = load i8, i8* %501, align 1
  %503 = zext i8 %502 to i32
  %504 = load %struct.pict_image*, %struct.pict_image** %13, align 8
  %505 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %504, i32 0, i32 1
  %506 = load i8*, i8** %505, align 8
  %507 = load i32, i32* %19, align 4
  %508 = sext i32 %507 to i64
  %509 = getelementptr inbounds i8, i8* %506, i64 %508
  %510 = load i32, i32* %25, align 4
  %511 = sext i32 %510 to i64
  %512 = getelementptr inbounds i8, i8* %509, i64 %511
  %513 = load i32, i32* %20, align 4
  %514 = load i32, i32* %22, align 4
  %515 = mul nsw i32 %513, %514
  %516 = sext i32 %515 to i64
  %517 = getelementptr inbounds i8, i8* %512, i64 %516
  %518 = load i8, i8* %517, align 1
  %519 = zext i8 %518 to i32
  %520 = add nsw i32 %503, %519
  %521 = load %struct.pict_image*, %struct.pict_image** %13, align 8
  %522 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %521, i32 0, i32 1
  %523 = load i8*, i8** %522, align 8
  %524 = load i32, i32* %19, align 4
  %525 = sext i32 %524 to i64
  %526 = getelementptr inbounds i8, i8* %523, i64 %525
  %527 = load i32, i32* %20, align 4
  %528 = load i32, i32* %26, align 4
  %529 = add nsw i32 %527, %528
  %530 = load i32, i32* %22, align 4
  %531 = mul nsw i32 %529, %530
  %532 = sext i32 %531 to i64
  %533 = getelementptr inbounds i8, i8* %526, i64 %532
  %534 = load i8, i8* %533, align 1
  %535 = zext i8 %534 to i32
  %536 = add nsw i32 %520, %535
  %537 = load %struct.pict_image*, %struct.pict_image** %13, align 8
  %538 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %537, i32 0, i32 1
  %539 = load i8*, i8** %538, align 8
  %540 = load i32, i32* %19, align 4
  %541 = sext i32 %540 to i64
  %542 = getelementptr inbounds i8, i8* %539, i64 %541
  %543 = load i32, i32* %25, align 4
  %544 = sext i32 %543 to i64
  %545 = getelementptr inbounds i8, i8* %542, i64 %544
  %546 = load i32, i32* %20, align 4
  %547 = load i32, i32* %26, align 4
  %548 = add nsw i32 %546, %547
  %549 = load i32, i32* %22, align 4
  %550 = mul nsw i32 %548, %549
  %551 = sext i32 %550 to i64
  %552 = getelementptr inbounds i8, i8* %545, i64 %551
  %553 = load i8, i8* %552, align 1
  %554 = zext i8 %553 to i32
  %555 = add nsw i32 %536, %554
  %556 = add nsw i32 %555, 2
  %557 = ashr i32 %556, 2
  store i32 %557, i32* %21, align 4
  %558 = load %struct.pict_image*, %struct.pict_image** %12, align 8
  %559 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %558, i32 0, i32 1
  %560 = load i8*, i8** %559, align 8
  %561 = load i32, i32* %17, align 4
  %562 = sext i32 %561 to i64
  %563 = getelementptr inbounds i8, i8* %560, i64 %562
  %564 = load i32, i32* %15, align 4
  %565 = sext i32 %564 to i64
  %566 = getelementptr inbounds i8, i8* %563, i64 %565
  %567 = load i32, i32* %18, align 4
  %568 = load i32, i32* %16, align 4
  %569 = add nsw i32 %567, %568
  %570 = load i32, i32* @cpels, align 4
  %571 = mul nsw i32 %569, %570
  %572 = sext i32 %571 to i64
  %573 = getelementptr inbounds i8, i8* %566, i64 %572
  %574 = load i8, i8* %573, align 1
  %575 = zext i8 %574 to i32
  %576 = load i32, i32* %21, align 4
  %577 = sub nsw i32 %575, %576
  %578 = load %struct.mb_structure*, %struct.mb_structure** %14, align 8
  %579 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %578, i32 0, i32 1
  %580 = load i32, i32* %16, align 4
  %581 = sext i32 %580 to i64
  %582 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %579, i64 0, i64 %581
  %583 = load i32, i32* %15, align 4
  %584 = sext i32 %583 to i64
  %585 = getelementptr inbounds [8 x i32], [8 x i32]* %582, i64 0, i64 %584
  store i32 %577, i32* %585, align 4
  %586 = load %struct.pict_image*, %struct.pict_image** %13, align 8
  %587 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %586, i32 0, i32 2
  %588 = load i8*, i8** %587, align 8
  %589 = load i32, i32* %19, align 4
  %590 = sext i32 %589 to i64
  %591 = getelementptr inbounds i8, i8* %588, i64 %590
  %592 = load i32, i32* %20, align 4
  %593 = load i32, i32* %22, align 4
  %594 = mul nsw i32 %592, %593
  %595 = sext i32 %594 to i64
  %596 = getelementptr inbounds i8, i8* %591, i64 %595
  %597 = load i8, i8* %596, align 1
  %598 = zext i8 %597 to i32
  %599 = load %struct.pict_image*, %struct.pict_image** %13, align 8
  %600 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %599, i32 0, i32 2
  %601 = load i8*, i8** %600, align 8
  %602 = load i32, i32* %19, align 4
  %603 = sext i32 %602 to i64
  %604 = getelementptr inbounds i8, i8* %601, i64 %603
  %605 = load i32, i32* %25, align 4
  %606 = sext i32 %605 to i64
  %607 = getelementptr inbounds i8, i8* %604, i64 %606
  %608 = load i32, i32* %20, align 4
  %609 = load i32, i32* %22, align 4
  %610 = mul nsw i32 %608, %609
  %611 = sext i32 %610 to i64
  %612 = getelementptr inbounds i8, i8* %607, i64 %611
  %613 = load i8, i8* %612, align 1
  %614 = zext i8 %613 to i32
  %615 = add nsw i32 %598, %614
  %616 = load %struct.pict_image*, %struct.pict_image** %13, align 8
  %617 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %616, i32 0, i32 2
  %618 = load i8*, i8** %617, align 8
  %619 = load i32, i32* %19, align 4
  %620 = sext i32 %619 to i64
  %621 = getelementptr inbounds i8, i8* %618, i64 %620
  %622 = load i32, i32* %20, align 4
  %623 = load i32, i32* %26, align 4
  %624 = add nsw i32 %622, %623
  %625 = load i32, i32* %22, align 4
  %626 = mul nsw i32 %624, %625
  %627 = sext i32 %626 to i64
  %628 = getelementptr inbounds i8, i8* %621, i64 %627
  %629 = load i8, i8* %628, align 1
  %630 = zext i8 %629 to i32
  %631 = add nsw i32 %615, %630
  %632 = load %struct.pict_image*, %struct.pict_image** %13, align 8
  %633 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %632, i32 0, i32 2
  %634 = load i8*, i8** %633, align 8
  %635 = load i32, i32* %19, align 4
  %636 = sext i32 %635 to i64
  %637 = getelementptr inbounds i8, i8* %634, i64 %636
  %638 = load i32, i32* %25, align 4
  %639 = sext i32 %638 to i64
  %640 = getelementptr inbounds i8, i8* %637, i64 %639
  %641 = load i32, i32* %20, align 4
  %642 = load i32, i32* %26, align 4
  %643 = add nsw i32 %641, %642
  %644 = load i32, i32* %22, align 4
  %645 = mul nsw i32 %643, %644
  %646 = sext i32 %645 to i64
  %647 = getelementptr inbounds i8, i8* %640, i64 %646
  %648 = load i8, i8* %647, align 1
  %649 = zext i8 %648 to i32
  %650 = add nsw i32 %631, %649
  %651 = add nsw i32 %650, 2
  %652 = ashr i32 %651, 2
  store i32 %652, i32* %21, align 4
  %653 = load %struct.pict_image*, %struct.pict_image** %12, align 8
  %654 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %653, i32 0, i32 2
  %655 = load i8*, i8** %654, align 8
  %656 = load i32, i32* %17, align 4
  %657 = sext i32 %656 to i64
  %658 = getelementptr inbounds i8, i8* %655, i64 %657
  %659 = load i32, i32* %15, align 4
  %660 = sext i32 %659 to i64
  %661 = getelementptr inbounds i8, i8* %658, i64 %660
  %662 = load i32, i32* %18, align 4
  %663 = load i32, i32* %16, align 4
  %664 = add nsw i32 %662, %663
  %665 = load i32, i32* @cpels, align 4
  %666 = mul nsw i32 %664, %665
  %667 = sext i32 %666 to i64
  %668 = getelementptr inbounds i8, i8* %661, i64 %667
  %669 = load i8, i8* %668, align 1
  %670 = zext i8 %669 to i32
  %671 = load i32, i32* %21, align 4
  %672 = sub nsw i32 %670, %671
  %673 = load %struct.mb_structure*, %struct.mb_structure** %14, align 8
  %674 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %673, i32 0, i32 2
  %675 = load i32, i32* %16, align 4
  %676 = sext i32 %675 to i64
  %677 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %674, i64 0, i64 %676
  %678 = load i32, i32* %15, align 4
  %679 = sext i32 %678 to i64
  %680 = getelementptr inbounds [8 x i32], [8 x i32]* %677, i64 0, i64 %679
  store i32 %672, i32* %680, align 4
  br label %681

681:                                              ; preds = %480
  %682 = load i32, i32* %15, align 4
  %683 = add nsw i32 %682, 1
  store i32 %683, i32* %15, align 4
  br label %477

684:                                              ; preds = %477
  br label %685

685:                                              ; preds = %684
  %686 = load i32, i32* %16, align 4
  %687 = add nsw i32 %686, 1
  store i32 %687, i32* %16, align 4
  br label %473

688:                                              ; preds = %473
  br label %689

689:                                              ; preds = %688, %471
  br label %690

690:                                              ; preds = %689, %318
  br label %691

691:                                              ; preds = %690, %167
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.mb_structure* @Predict_B(%struct.pict_image* %0, %struct.pict_image* %1, i8* %2, i32 %3, i32 %4, [73 x [90 x %struct.motionvector*]]* %5, %struct.mb_structure* %6, i32 %7, i32 %8) #0 {
  %10 = alloca %struct.pict_image*, align 8
  %11 = alloca %struct.pict_image*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca [73 x [90 x %struct.motionvector*]]*, align 8
  %16 = alloca %struct.mb_structure*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca [16 x [16 x i32]], align 16
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca %struct.mb_structure*, align 8
  %30 = alloca %struct.mb_structure*, align 8
  %31 = alloca [5 x %struct.motionvector*], align 16
  %32 = alloca i32, align 4
  %33 = alloca i32, align 4
  %34 = alloca i32, align 4
  %35 = alloca i32, align 4
  store %struct.pict_image* %0, %struct.pict_image** %10, align 8
  store %struct.pict_image* %1, %struct.pict_image** %11, align 8
  store i8* %2, i8** %12, align 8
  store i32 %3, i32* %13, align 4
  store i32 %4, i32* %14, align 4
  store [73 x [90 x %struct.motionvector*]]* %5, [73 x [90 x %struct.motionvector*]]** %15, align 8
  store %struct.mb_structure* %6, %struct.mb_structure** %16, align 8
  store i32 %7, i32* %17, align 4
  store i32 %8, i32* %18, align 4
  store i32 2147483647, i32* %25, align 4
  store i32 0, i32* %27, align 4
  store i32 0, i32* %28, align 4
  %36 = call noalias i8* @malloc(i64 1536) #8
  %37 = bitcast i8* %36 to %struct.mb_structure*
  store %struct.mb_structure* %37, %struct.mb_structure** %29, align 8
  %38 = call noalias i8* @malloc(i64 1536) #8
  %39 = bitcast i8* %38 to %struct.mb_structure*
  store %struct.mb_structure* %39, %struct.mb_structure** %30, align 8
  store i32 0, i32* %21, align 4
  br label %40

40:                                               ; preds = %62, %9
  %41 = load i32, i32* %21, align 4
  %42 = icmp sle i32 %41, 4
  br i1 %42, label %43, label %65

43:                                               ; preds = %40
  %44 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %15, align 8
  %45 = load i32, i32* %21, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %44, i64 %46
  %48 = load i32, i32* %14, align 4
  %49 = sdiv i32 %48, 16
  %50 = add nsw i32 %49, 1
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %47, i64 0, i64 %51
  %53 = load i32, i32* %13, align 4
  %54 = sdiv i32 %53, 16
  %55 = add nsw i32 %54, 1
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %52, i64 0, i64 %56
  %58 = load %struct.motionvector*, %struct.motionvector** %57, align 8
  %59 = load i32, i32* %21, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 %60
  store %struct.motionvector* %58, %struct.motionvector** %61, align 8
  br label %62

62:                                               ; preds = %43
  %63 = load i32, i32* %21, align 4
  %64 = add nsw i32 %63, 1
  store i32 %64, i32* %21, align 4
  br label %40

65:                                               ; preds = %40
  %66 = load i32, i32* %13, align 4
  %67 = load i32, i32* %14, align 4
  %68 = load %struct.pict_image*, %struct.pict_image** %10, align 8
  %69 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %68, i32 0, i32 0
  %70 = load i8*, i8** %69, align 8
  %71 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %26, i64 0, i64 0
  call void @FindMB(i32 %66, i32 %67, i8* %70, [16 x i32]* %71)
  %72 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 0
  %73 = load %struct.motionvector*, %struct.motionvector** %72, align 16
  %74 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %73, i32 0, i32 5
  %75 = load i32, i32* %74, align 4
  %76 = icmp eq i32 %75, 2
  br i1 %76, label %77, label %488

77:                                               ; preds = %65
  store i32 -2, i32* %20, align 4
  br label %78

78:                                               ; preds = %166, %77
  %79 = load i32, i32* %20, align 4
  %80 = icmp sle i32 %79, 2
  br i1 %80, label %81, label %169

81:                                               ; preds = %78
  store i32 -2, i32* %19, align 4
  br label %82

82:                                               ; preds = %162, %81
  %83 = load i32, i32* %19, align 4
  %84 = icmp sle i32 %83, 2
  br i1 %84, label %85, label %165

85:                                               ; preds = %82
  %86 = load i8*, i8** %12, align 8
  %87 = load i32, i32* %13, align 4
  %88 = load i32, i32* %14, align 4
  %89 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 1
  %90 = load %struct.motionvector*, %struct.motionvector** %89, align 8
  %91 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  %92 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %91, i32 0, i32 0
  %93 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %92, i64 0, i64 0
  %94 = getelementptr inbounds [16 x i32], [16 x i32]* %93, i64 0, i64 0
  %95 = load i32, i32* %17, align 4
  %96 = load i32, i32* %18, align 4
  %97 = load i32, i32* %19, align 4
  %98 = load i32, i32* %20, align 4
  call void @FindForwLumPredPB(i8* %86, i32 %87, i32 %88, %struct.motionvector* %90, i32* %94, i32 %95, i32 %96, i32 %97, i32 %98, i32 8, i32 0)
  %99 = load i8*, i8** %12, align 8
  %100 = load i32, i32* %13, align 4
  %101 = load i32, i32* %14, align 4
  %102 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 2
  %103 = load %struct.motionvector*, %struct.motionvector** %102, align 16
  %104 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  %105 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %104, i32 0, i32 0
  %106 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %105, i64 0, i64 0
  %107 = getelementptr inbounds [16 x i32], [16 x i32]* %106, i64 0, i64 8
  %108 = load i32, i32* %17, align 4
  %109 = load i32, i32* %18, align 4
  %110 = load i32, i32* %19, align 4
  %111 = load i32, i32* %20, align 4
  call void @FindForwLumPredPB(i8* %99, i32 %100, i32 %101, %struct.motionvector* %103, i32* %107, i32 %108, i32 %109, i32 %110, i32 %111, i32 8, i32 1)
  %112 = load i8*, i8** %12, align 8
  %113 = load i32, i32* %13, align 4
  %114 = load i32, i32* %14, align 4
  %115 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 3
  %116 = load %struct.motionvector*, %struct.motionvector** %115, align 8
  %117 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  %118 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %117, i32 0, i32 0
  %119 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %118, i64 0, i64 8
  %120 = getelementptr inbounds [16 x i32], [16 x i32]* %119, i64 0, i64 0
  %121 = load i32, i32* %17, align 4
  %122 = load i32, i32* %18, align 4
  %123 = load i32, i32* %19, align 4
  %124 = load i32, i32* %20, align 4
  call void @FindForwLumPredPB(i8* %112, i32 %113, i32 %114, %struct.motionvector* %116, i32* %120, i32 %121, i32 %122, i32 %123, i32 %124, i32 8, i32 2)
  %125 = load i8*, i8** %12, align 8
  %126 = load i32, i32* %13, align 4
  %127 = load i32, i32* %14, align 4
  %128 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 4
  %129 = load %struct.motionvector*, %struct.motionvector** %128, align 16
  %130 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  %131 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %130, i32 0, i32 0
  %132 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %131, i64 0, i64 8
  %133 = getelementptr inbounds [16 x i32], [16 x i32]* %132, i64 0, i64 8
  %134 = load i32, i32* %17, align 4
  %135 = load i32, i32* %18, align 4
  %136 = load i32, i32* %19, align 4
  %137 = load i32, i32* %20, align 4
  call void @FindForwLumPredPB(i8* %125, i32 %126, i32 %127, %struct.motionvector* %129, i32* %133, i32 %134, i32 %135, i32 %136, i32 %137, i32 8, i32 3)
  %138 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %26, i64 0, i64 0
  %139 = getelementptr inbounds [16 x i32], [16 x i32]* %138, i64 0, i64 0
  %140 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  %141 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %140, i32 0, i32 0
  %142 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %141, i64 0, i64 0
  %143 = getelementptr inbounds [16 x i32], [16 x i32]* %142, i64 0, i64 0
  %144 = call i32 @SAD_MB_integer(i32* %139, i32* %143, i32 16, i32 2147483647)
  store i32 %144, i32* %24, align 4
  %145 = load i32, i32* %19, align 4
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %147, label %153

147:                                              ; preds = %85
  %148 = load i32, i32* %20, align 4
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %150, label %153

150:                                              ; preds = %147
  %151 = load i32, i32* %24, align 4
  %152 = sub nsw i32 %151, 50
  store i32 %152, i32* %24, align 4
  br label %153

153:                                              ; preds = %150, %147, %85
  %154 = load i32, i32* %24, align 4
  %155 = load i32, i32* %25, align 4
  %156 = icmp slt i32 %154, %155
  br i1 %156, label %157, label %161

157:                                              ; preds = %153
  %158 = load i32, i32* %24, align 4
  store i32 %158, i32* %25, align 4
  %159 = load i32, i32* %19, align 4
  store i32 %159, i32* %27, align 4
  %160 = load i32, i32* %20, align 4
  store i32 %160, i32* %28, align 4
  br label %161

161:                                              ; preds = %157, %153
  br label %162

162:                                              ; preds = %161
  %163 = load i32, i32* %19, align 4
  %164 = add nsw i32 %163, 1
  store i32 %164, i32* %19, align 4
  br label %82

165:                                              ; preds = %82
  br label %166

166:                                              ; preds = %165
  %167 = load i32, i32* %20, align 4
  %168 = add nsw i32 %167, 1
  store i32 %168, i32* %20, align 4
  br label %78

169:                                              ; preds = %78
  %170 = load i8*, i8** %12, align 8
  %171 = load i32, i32* %13, align 4
  %172 = load i32, i32* %14, align 4
  %173 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 1
  %174 = load %struct.motionvector*, %struct.motionvector** %173, align 8
  %175 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  %176 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %175, i32 0, i32 0
  %177 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %176, i64 0, i64 0
  %178 = getelementptr inbounds [16 x i32], [16 x i32]* %177, i64 0, i64 0
  %179 = load i32, i32* %17, align 4
  %180 = load i32, i32* %18, align 4
  %181 = load i32, i32* %27, align 4
  %182 = load i32, i32* %28, align 4
  call void @FindForwLumPredPB(i8* %170, i32 %171, i32 %172, %struct.motionvector* %174, i32* %178, i32 %179, i32 %180, i32 %181, i32 %182, i32 8, i32 0)
  %183 = load i8*, i8** %12, align 8
  %184 = load i32, i32* %13, align 4
  %185 = load i32, i32* %14, align 4
  %186 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 2
  %187 = load %struct.motionvector*, %struct.motionvector** %186, align 16
  %188 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  %189 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %188, i32 0, i32 0
  %190 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %189, i64 0, i64 0
  %191 = getelementptr inbounds [16 x i32], [16 x i32]* %190, i64 0, i64 8
  %192 = load i32, i32* %17, align 4
  %193 = load i32, i32* %18, align 4
  %194 = load i32, i32* %27, align 4
  %195 = load i32, i32* %28, align 4
  call void @FindForwLumPredPB(i8* %183, i32 %184, i32 %185, %struct.motionvector* %187, i32* %191, i32 %192, i32 %193, i32 %194, i32 %195, i32 8, i32 1)
  %196 = load i8*, i8** %12, align 8
  %197 = load i32, i32* %13, align 4
  %198 = load i32, i32* %14, align 4
  %199 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 3
  %200 = load %struct.motionvector*, %struct.motionvector** %199, align 8
  %201 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  %202 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %201, i32 0, i32 0
  %203 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %202, i64 0, i64 8
  %204 = getelementptr inbounds [16 x i32], [16 x i32]* %203, i64 0, i64 0
  %205 = load i32, i32* %17, align 4
  %206 = load i32, i32* %18, align 4
  %207 = load i32, i32* %27, align 4
  %208 = load i32, i32* %28, align 4
  call void @FindForwLumPredPB(i8* %196, i32 %197, i32 %198, %struct.motionvector* %200, i32* %204, i32 %205, i32 %206, i32 %207, i32 %208, i32 8, i32 2)
  %209 = load i8*, i8** %12, align 8
  %210 = load i32, i32* %13, align 4
  %211 = load i32, i32* %14, align 4
  %212 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 4
  %213 = load %struct.motionvector*, %struct.motionvector** %212, align 16
  %214 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  %215 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %214, i32 0, i32 0
  %216 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %215, i64 0, i64 8
  %217 = getelementptr inbounds [16 x i32], [16 x i32]* %216, i64 0, i64 8
  %218 = load i32, i32* %17, align 4
  %219 = load i32, i32* %18, align 4
  %220 = load i32, i32* %27, align 4
  %221 = load i32, i32* %28, align 4
  call void @FindForwLumPredPB(i8* %209, i32 %210, i32 %211, %struct.motionvector* %213, i32* %217, i32 %218, i32 %219, i32 %220, i32 %221, i32 8, i32 3)
  store i32 0, i32* %33, align 4
  store i32 0, i32* %32, align 4
  store i32 1, i32* %21, align 4
  br label %222

222:                                              ; preds = %270, %169
  %223 = load i32, i32* %21, align 4
  %224 = icmp sle i32 %223, 4
  br i1 %224, label %225, label %273

225:                                              ; preds = %222
  %226 = load i32, i32* %18, align 4
  %227 = load i32, i32* %21, align 4
  %228 = sext i32 %227 to i64
  %229 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 %228
  %230 = load %struct.motionvector*, %struct.motionvector** %229, align 8
  %231 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %230, i32 0, i32 0
  %232 = load i32, i32* %231, align 4
  %233 = mul nsw i32 2, %232
  %234 = load i32, i32* %21, align 4
  %235 = sext i32 %234 to i64
  %236 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 %235
  %237 = load %struct.motionvector*, %struct.motionvector** %236, align 8
  %238 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %237, i32 0, i32 2
  %239 = load i32, i32* %238, align 4
  %240 = add nsw i32 %233, %239
  %241 = mul nsw i32 %226, %240
  %242 = load i32, i32* %17, align 4
  %243 = sdiv i32 %241, %242
  %244 = load i32, i32* %27, align 4
  %245 = add nsw i32 %243, %244
  %246 = load i32, i32* %32, align 4
  %247 = add nsw i32 %246, %245
  store i32 %247, i32* %32, align 4
  %248 = load i32, i32* %18, align 4
  %249 = load i32, i32* %21, align 4
  %250 = sext i32 %249 to i64
  %251 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 %250
  %252 = load %struct.motionvector*, %struct.motionvector** %251, align 8
  %253 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %252, i32 0, i32 1
  %254 = load i32, i32* %253, align 4
  %255 = mul nsw i32 2, %254
  %256 = load i32, i32* %21, align 4
  %257 = sext i32 %256 to i64
  %258 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 %257
  %259 = load %struct.motionvector*, %struct.motionvector** %258, align 8
  %260 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %259, i32 0, i32 3
  %261 = load i32, i32* %260, align 4
  %262 = add nsw i32 %255, %261
  %263 = mul nsw i32 %248, %262
  %264 = load i32, i32* %17, align 4
  %265 = sdiv i32 %263, %264
  %266 = load i32, i32* %28, align 4
  %267 = add nsw i32 %265, %266
  %268 = load i32, i32* %33, align 4
  %269 = add nsw i32 %268, %267
  store i32 %269, i32* %33, align 4
  br label %270

270:                                              ; preds = %225
  %271 = load i32, i32* %21, align 4
  %272 = add nsw i32 %271, 1
  store i32 %272, i32* %21, align 4
  br label %222

273:                                              ; preds = %222
  %274 = load i32, i32* %32, align 4
  %275 = icmp slt i32 %274, 0
  %276 = zext i1 %275 to i64
  %277 = select i1 %275, i32 -1, i32 1
  %278 = load i32, i32* %32, align 4
  %279 = call i32 @abs(i32 %278) #11
  %280 = srem i32 %279, 16
  %281 = sext i32 %280 to i64
  %282 = getelementptr inbounds [16 x i32], [16 x i32]* @roundtab, i64 0, i64 %281
  %283 = load i32, i32* %282, align 4
  %284 = load i32, i32* %32, align 4
  %285 = call i32 @abs(i32 %284) #11
  %286 = sdiv i32 %285, 16
  %287 = mul nsw i32 %286, 2
  %288 = add nsw i32 %283, %287
  %289 = mul nsw i32 %277, %288
  store i32 %289, i32* %22, align 4
  %290 = load i32, i32* %33, align 4
  %291 = icmp slt i32 %290, 0
  %292 = zext i1 %291 to i64
  %293 = select i1 %291, i32 -1, i32 1
  %294 = load i32, i32* %33, align 4
  %295 = call i32 @abs(i32 %294) #11
  %296 = srem i32 %295, 16
  %297 = sext i32 %296 to i64
  %298 = getelementptr inbounds [16 x i32], [16 x i32]* @roundtab, i64 0, i64 %297
  %299 = load i32, i32* %298, align 4
  %300 = load i32, i32* %33, align 4
  %301 = call i32 @abs(i32 %300) #11
  %302 = sdiv i32 %301, 16
  %303 = mul nsw i32 %302, 2
  %304 = add nsw i32 %299, %303
  %305 = mul nsw i32 %293, %304
  store i32 %305, i32* %23, align 4
  %306 = load i32, i32* %13, align 4
  %307 = load i32, i32* %14, align 4
  %308 = load i32, i32* %22, align 4
  %309 = load i32, i32* %23, align 4
  %310 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %311 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  call void @FindChromBlock_P(i32 %306, i32 %307, i32 %308, i32 %309, %struct.pict_image* %310, %struct.mb_structure* %311)
  %312 = load %struct.mb_structure*, %struct.mb_structure** %16, align 8
  %313 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %312, i32 0, i32 0
  %314 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %313, i64 0, i64 0
  %315 = getelementptr inbounds [16 x i32], [16 x i32]* %314, i64 0, i64 0
  %316 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 1
  %317 = load %struct.motionvector*, %struct.motionvector** %316, align 8
  %318 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  %319 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %318, i32 0, i32 0
  %320 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %319, i64 0, i64 0
  %321 = getelementptr inbounds [16 x i32], [16 x i32]* %320, i64 0, i64 0
  %322 = load i32, i32* %17, align 4
  %323 = load i32, i32* %18, align 4
  %324 = load i32, i32* %27, align 4
  %325 = load i32, i32* %28, align 4
  call void @FindBiDirLumPredPB(i32* %315, %struct.motionvector* %317, i32* %321, i32 %322, i32 %323, i32 %324, i32 %325, i32 0, i32 0)
  %326 = load %struct.mb_structure*, %struct.mb_structure** %16, align 8
  %327 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %326, i32 0, i32 0
  %328 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %327, i64 0, i64 0
  %329 = getelementptr inbounds [16 x i32], [16 x i32]* %328, i64 0, i64 8
  %330 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 2
  %331 = load %struct.motionvector*, %struct.motionvector** %330, align 16
  %332 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  %333 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %332, i32 0, i32 0
  %334 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %333, i64 0, i64 0
  %335 = getelementptr inbounds [16 x i32], [16 x i32]* %334, i64 0, i64 8
  %336 = load i32, i32* %17, align 4
  %337 = load i32, i32* %18, align 4
  %338 = load i32, i32* %27, align 4
  %339 = load i32, i32* %28, align 4
  call void @FindBiDirLumPredPB(i32* %329, %struct.motionvector* %331, i32* %335, i32 %336, i32 %337, i32 %338, i32 %339, i32 1, i32 0)
  %340 = load %struct.mb_structure*, %struct.mb_structure** %16, align 8
  %341 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %340, i32 0, i32 0
  %342 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %341, i64 0, i64 8
  %343 = getelementptr inbounds [16 x i32], [16 x i32]* %342, i64 0, i64 0
  %344 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 3
  %345 = load %struct.motionvector*, %struct.motionvector** %344, align 8
  %346 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  %347 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %346, i32 0, i32 0
  %348 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %347, i64 0, i64 8
  %349 = getelementptr inbounds [16 x i32], [16 x i32]* %348, i64 0, i64 0
  %350 = load i32, i32* %17, align 4
  %351 = load i32, i32* %18, align 4
  %352 = load i32, i32* %27, align 4
  %353 = load i32, i32* %28, align 4
  call void @FindBiDirLumPredPB(i32* %343, %struct.motionvector* %345, i32* %349, i32 %350, i32 %351, i32 %352, i32 %353, i32 0, i32 1)
  %354 = load %struct.mb_structure*, %struct.mb_structure** %16, align 8
  %355 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %354, i32 0, i32 0
  %356 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %355, i64 0, i64 8
  %357 = getelementptr inbounds [16 x i32], [16 x i32]* %356, i64 0, i64 8
  %358 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 4
  %359 = load %struct.motionvector*, %struct.motionvector** %358, align 16
  %360 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  %361 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %360, i32 0, i32 0
  %362 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %361, i64 0, i64 8
  %363 = getelementptr inbounds [16 x i32], [16 x i32]* %362, i64 0, i64 8
  %364 = load i32, i32* %17, align 4
  %365 = load i32, i32* %18, align 4
  %366 = load i32, i32* %27, align 4
  %367 = load i32, i32* %28, align 4
  call void @FindBiDirLumPredPB(i32* %357, %struct.motionvector* %359, i32* %363, i32 %364, i32 %365, i32 %366, i32 %367, i32 1, i32 1)
  store i32 0, i32* %33, align 4
  store i32 0, i32* %32, align 4
  store i32 1, i32* %21, align 4
  br label %368

368:                                              ; preds = %448, %273
  %369 = load i32, i32* %21, align 4
  %370 = icmp sle i32 %369, 4
  br i1 %370, label %371, label %451

371:                                              ; preds = %368
  %372 = load i32, i32* %21, align 4
  %373 = sext i32 %372 to i64
  %374 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 %373
  %375 = load %struct.motionvector*, %struct.motionvector** %374, align 8
  %376 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %375, i32 0, i32 0
  %377 = load i32, i32* %376, align 4
  %378 = mul nsw i32 2, %377
  %379 = load i32, i32* %21, align 4
  %380 = sext i32 %379 to i64
  %381 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 %380
  %382 = load %struct.motionvector*, %struct.motionvector** %381, align 8
  %383 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %382, i32 0, i32 2
  %384 = load i32, i32* %383, align 4
  %385 = add nsw i32 %378, %384
  store i32 %385, i32* %34, align 4
  %386 = load i32, i32* %21, align 4
  %387 = sext i32 %386 to i64
  %388 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 %387
  %389 = load %struct.motionvector*, %struct.motionvector** %388, align 8
  %390 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %389, i32 0, i32 1
  %391 = load i32, i32* %390, align 4
  %392 = mul nsw i32 2, %391
  %393 = load i32, i32* %21, align 4
  %394 = sext i32 %393 to i64
  %395 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 %394
  %396 = load %struct.motionvector*, %struct.motionvector** %395, align 8
  %397 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %396, i32 0, i32 3
  %398 = load i32, i32* %397, align 4
  %399 = add nsw i32 %392, %398
  store i32 %399, i32* %35, align 4
  %400 = load i32, i32* %27, align 4
  %401 = icmp eq i32 %400, 0
  br i1 %401, label %402, label %410

402:                                              ; preds = %371
  %403 = load i32, i32* %18, align 4
  %404 = load i32, i32* %17, align 4
  %405 = sub nsw i32 %403, %404
  %406 = load i32, i32* %34, align 4
  %407 = mul nsw i32 %405, %406
  %408 = load i32, i32* %17, align 4
  %409 = sdiv i32 %407, %408
  br label %420

410:                                              ; preds = %371
  %411 = load i32, i32* %18, align 4
  %412 = load i32, i32* %34, align 4
  %413 = mul nsw i32 %411, %412
  %414 = load i32, i32* %17, align 4
  %415 = sdiv i32 %413, %414
  %416 = load i32, i32* %27, align 4
  %417 = add nsw i32 %415, %416
  %418 = load i32, i32* %34, align 4
  %419 = sub nsw i32 %417, %418
  br label %420

420:                                              ; preds = %410, %402
  %421 = phi i32 [ %409, %402 ], [ %419, %410 ]
  %422 = load i32, i32* %32, align 4
  %423 = add nsw i32 %422, %421
  store i32 %423, i32* %32, align 4
  %424 = load i32, i32* %28, align 4
  %425 = icmp eq i32 %424, 0
  br i1 %425, label %426, label %434

426:                                              ; preds = %420
  %427 = load i32, i32* %18, align 4
  %428 = load i32, i32* %17, align 4
  %429 = sub nsw i32 %427, %428
  %430 = load i32, i32* %35, align 4
  %431 = mul nsw i32 %429, %430
  %432 = load i32, i32* %17, align 4
  %433 = sdiv i32 %431, %432
  br label %444

434:                                              ; preds = %420
  %435 = load i32, i32* %18, align 4
  %436 = load i32, i32* %35, align 4
  %437 = mul nsw i32 %435, %436
  %438 = load i32, i32* %17, align 4
  %439 = sdiv i32 %437, %438
  %440 = load i32, i32* %28, align 4
  %441 = add nsw i32 %439, %440
  %442 = load i32, i32* %35, align 4
  %443 = sub nsw i32 %441, %442
  br label %444

444:                                              ; preds = %434, %426
  %445 = phi i32 [ %433, %426 ], [ %443, %434 ]
  %446 = load i32, i32* %33, align 4
  %447 = add nsw i32 %446, %445
  store i32 %447, i32* %33, align 4
  br label %448

448:                                              ; preds = %444
  %449 = load i32, i32* %21, align 4
  %450 = add nsw i32 %449, 1
  store i32 %450, i32* %21, align 4
  br label %368

451:                                              ; preds = %368
  %452 = load i32, i32* %32, align 4
  %453 = icmp slt i32 %452, 0
  %454 = zext i1 %453 to i64
  %455 = select i1 %453, i32 -1, i32 1
  %456 = load i32, i32* %32, align 4
  %457 = call i32 @abs(i32 %456) #11
  %458 = srem i32 %457, 16
  %459 = sext i32 %458 to i64
  %460 = getelementptr inbounds [16 x i32], [16 x i32]* @roundtab, i64 0, i64 %459
  %461 = load i32, i32* %460, align 4
  %462 = load i32, i32* %32, align 4
  %463 = call i32 @abs(i32 %462) #11
  %464 = sdiv i32 %463, 16
  %465 = mul nsw i32 %464, 2
  %466 = add nsw i32 %461, %465
  %467 = mul nsw i32 %455, %466
  store i32 %467, i32* %22, align 4
  %468 = load i32, i32* %33, align 4
  %469 = icmp slt i32 %468, 0
  %470 = zext i1 %469 to i64
  %471 = select i1 %469, i32 -1, i32 1
  %472 = load i32, i32* %33, align 4
  %473 = call i32 @abs(i32 %472) #11
  %474 = srem i32 %473, 16
  %475 = sext i32 %474 to i64
  %476 = getelementptr inbounds [16 x i32], [16 x i32]* @roundtab, i64 0, i64 %475
  %477 = load i32, i32* %476, align 4
  %478 = load i32, i32* %33, align 4
  %479 = call i32 @abs(i32 %478) #11
  %480 = sdiv i32 %479, 16
  %481 = mul nsw i32 %480, 2
  %482 = add nsw i32 %477, %481
  %483 = mul nsw i32 %471, %482
  store i32 %483, i32* %23, align 4
  %484 = load %struct.mb_structure*, %struct.mb_structure** %16, align 8
  %485 = load i32, i32* %22, align 4
  %486 = load i32, i32* %23, align 4
  %487 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  call void @FindBiDirChrPredPB(%struct.mb_structure* %484, i32 %485, i32 %486, %struct.mb_structure* %487)
  br label %851

488:                                              ; preds = %65
  store i32 -2, i32* %20, align 4
  br label %489

489:                                              ; preds = %602, %488
  %490 = load i32, i32* %20, align 4
  %491 = icmp sle i32 %490, 2
  br i1 %491, label %492, label %605

492:                                              ; preds = %489
  store i32 -2, i32* %19, align 4
  br label %493

493:                                              ; preds = %598, %492
  %494 = load i32, i32* %19, align 4
  %495 = icmp sle i32 %494, 2
  br i1 %495, label %496, label %601

496:                                              ; preds = %493
  %497 = load i32, i32* %19, align 4
  store i32 %497, i32* %22, align 4
  %498 = load i32, i32* %20, align 4
  store i32 %498, i32* %23, align 4
  %499 = load i32, i32* @mv_outside_frame, align 4
  %500 = icmp ne i32 %499, 0
  br i1 %500, label %522, label %501

501:                                              ; preds = %496
  %502 = load i32, i32* %13, align 4
  %503 = icmp eq i32 %502, 0
  br i1 %503, label %504, label %505

504:                                              ; preds = %501
  store i32 0, i32* %22, align 4
  br label %505

505:                                              ; preds = %504, %501
  %506 = load i32, i32* %13, align 4
  %507 = load i32, i32* @pels, align 4
  %508 = sub nsw i32 %507, 16
  %509 = icmp eq i32 %506, %508
  br i1 %509, label %510, label %511

510:                                              ; preds = %505
  store i32 0, i32* %22, align 4
  br label %511

511:                                              ; preds = %510, %505
  %512 = load i32, i32* %14, align 4
  %513 = icmp eq i32 %512, 0
  br i1 %513, label %514, label %515

514:                                              ; preds = %511
  store i32 0, i32* %23, align 4
  br label %515

515:                                              ; preds = %514, %511
  %516 = load i32, i32* %14, align 4
  %517 = load i32, i32* @lines, align 4
  %518 = sub nsw i32 %517, 16
  %519 = icmp eq i32 %516, %518
  br i1 %519, label %520, label %521

520:                                              ; preds = %515
  store i32 0, i32* %23, align 4
  br label %521

521:                                              ; preds = %520, %515
  br label %522

522:                                              ; preds = %521, %496
  %523 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 0
  %524 = load %struct.motionvector*, %struct.motionvector** %523, align 16
  %525 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %524, i32 0, i32 5
  %526 = load i32, i32* %525, align 4
  %527 = icmp eq i32 %526, 3
  br i1 %527, label %534, label %528

528:                                              ; preds = %522
  %529 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 0
  %530 = load %struct.motionvector*, %struct.motionvector** %529, align 16
  %531 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %530, i32 0, i32 5
  %532 = load i32, i32* %531, align 4
  %533 = icmp eq i32 %532, 4
  br i1 %533, label %534, label %535

534:                                              ; preds = %528, %522
  store i32 0, i32* %23, align 4
  store i32 0, i32* %22, align 4
  br label %535

535:                                              ; preds = %534, %528
  %536 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 0
  %537 = load %struct.motionvector*, %struct.motionvector** %536, align 16
  %538 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %537, i32 0, i32 0
  %539 = load i32, i32* %538, align 4
  %540 = icmp eq i32 %539, 0
  br i1 %540, label %541, label %560

541:                                              ; preds = %535
  %542 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 0
  %543 = load %struct.motionvector*, %struct.motionvector** %542, align 16
  %544 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %543, i32 0, i32 1
  %545 = load i32, i32* %544, align 4
  %546 = icmp eq i32 %545, 0
  br i1 %546, label %547, label %560

547:                                              ; preds = %541
  %548 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 0
  %549 = load %struct.motionvector*, %struct.motionvector** %548, align 16
  %550 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %549, i32 0, i32 2
  %551 = load i32, i32* %550, align 4
  %552 = icmp eq i32 %551, 0
  br i1 %552, label %553, label %560

553:                                              ; preds = %547
  %554 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 0
  %555 = load %struct.motionvector*, %struct.motionvector** %554, align 16
  %556 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %555, i32 0, i32 3
  %557 = load i32, i32* %556, align 4
  %558 = icmp eq i32 %557, 0
  br i1 %558, label %559, label %560

559:                                              ; preds = %553
  store i32 0, i32* %23, align 4
  store i32 0, i32* %22, align 4
  br label %560

560:                                              ; preds = %559, %553, %547, %541, %535
  %561 = load i8*, i8** %12, align 8
  %562 = load i32, i32* %13, align 4
  %563 = load i32, i32* %14, align 4
  %564 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 0
  %565 = load %struct.motionvector*, %struct.motionvector** %564, align 16
  %566 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  %567 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %566, i32 0, i32 0
  %568 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %567, i64 0, i64 0
  %569 = getelementptr inbounds [16 x i32], [16 x i32]* %568, i64 0, i64 0
  %570 = load i32, i32* %17, align 4
  %571 = load i32, i32* %18, align 4
  %572 = load i32, i32* %22, align 4
  %573 = load i32, i32* %23, align 4
  call void @FindForwLumPredPB(i8* %561, i32 %562, i32 %563, %struct.motionvector* %565, i32* %569, i32 %570, i32 %571, i32 %572, i32 %573, i32 16, i32 0)
  %574 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %26, i64 0, i64 0
  %575 = getelementptr inbounds [16 x i32], [16 x i32]* %574, i64 0, i64 0
  %576 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  %577 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %576, i32 0, i32 0
  %578 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %577, i64 0, i64 0
  %579 = getelementptr inbounds [16 x i32], [16 x i32]* %578, i64 0, i64 0
  %580 = call i32 @SAD_MB_integer(i32* %575, i32* %579, i32 16, i32 2147483647)
  store i32 %580, i32* %24, align 4
  %581 = load i32, i32* %19, align 4
  %582 = icmp eq i32 %581, 0
  br i1 %582, label %583, label %589

583:                                              ; preds = %560
  %584 = load i32, i32* %20, align 4
  %585 = icmp eq i32 %584, 0
  br i1 %585, label %586, label %589

586:                                              ; preds = %583
  %587 = load i32, i32* %24, align 4
  %588 = sub nsw i32 %587, 50
  store i32 %588, i32* %24, align 4
  br label %589

589:                                              ; preds = %586, %583, %560
  %590 = load i32, i32* %24, align 4
  %591 = load i32, i32* %25, align 4
  %592 = icmp slt i32 %590, %591
  br i1 %592, label %593, label %597

593:                                              ; preds = %589
  %594 = load i32, i32* %24, align 4
  store i32 %594, i32* %25, align 4
  %595 = load i32, i32* %22, align 4
  store i32 %595, i32* %27, align 4
  %596 = load i32, i32* %23, align 4
  store i32 %596, i32* %28, align 4
  br label %597

597:                                              ; preds = %593, %589
  br label %598

598:                                              ; preds = %597
  %599 = load i32, i32* %19, align 4
  %600 = add nsw i32 %599, 1
  store i32 %600, i32* %19, align 4
  br label %493

601:                                              ; preds = %493
  br label %602

602:                                              ; preds = %601
  %603 = load i32, i32* %20, align 4
  %604 = add nsw i32 %603, 1
  store i32 %604, i32* %20, align 4
  br label %489

605:                                              ; preds = %489
  %606 = load i8*, i8** %12, align 8
  %607 = load i32, i32* %13, align 4
  %608 = load i32, i32* %14, align 4
  %609 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 0
  %610 = load %struct.motionvector*, %struct.motionvector** %609, align 16
  %611 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  %612 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %611, i32 0, i32 0
  %613 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %612, i64 0, i64 0
  %614 = getelementptr inbounds [16 x i32], [16 x i32]* %613, i64 0, i64 0
  %615 = load i32, i32* %17, align 4
  %616 = load i32, i32* %18, align 4
  %617 = load i32, i32* %27, align 4
  %618 = load i32, i32* %28, align 4
  call void @FindForwLumPredPB(i8* %606, i32 %607, i32 %608, %struct.motionvector* %610, i32* %614, i32 %615, i32 %616, i32 %617, i32 %618, i32 16, i32 0)
  %619 = load i32, i32* %18, align 4
  %620 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 0
  %621 = load %struct.motionvector*, %struct.motionvector** %620, align 16
  %622 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %621, i32 0, i32 0
  %623 = load i32, i32* %622, align 4
  %624 = mul nsw i32 2, %623
  %625 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 0
  %626 = load %struct.motionvector*, %struct.motionvector** %625, align 16
  %627 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %626, i32 0, i32 2
  %628 = load i32, i32* %627, align 4
  %629 = add nsw i32 %624, %628
  %630 = mul nsw i32 %619, %629
  %631 = load i32, i32* %17, align 4
  %632 = sdiv i32 %630, %631
  %633 = load i32, i32* %27, align 4
  %634 = add nsw i32 %632, %633
  %635 = mul nsw i32 4, %634
  store i32 %635, i32* %32, align 4
  %636 = load i32, i32* %18, align 4
  %637 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 0
  %638 = load %struct.motionvector*, %struct.motionvector** %637, align 16
  %639 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %638, i32 0, i32 1
  %640 = load i32, i32* %639, align 4
  %641 = mul nsw i32 2, %640
  %642 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 0
  %643 = load %struct.motionvector*, %struct.motionvector** %642, align 16
  %644 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %643, i32 0, i32 3
  %645 = load i32, i32* %644, align 4
  %646 = add nsw i32 %641, %645
  %647 = mul nsw i32 %636, %646
  %648 = load i32, i32* %17, align 4
  %649 = sdiv i32 %647, %648
  %650 = load i32, i32* %28, align 4
  %651 = add nsw i32 %649, %650
  %652 = mul nsw i32 4, %651
  store i32 %652, i32* %33, align 4
  %653 = load i32, i32* %32, align 4
  %654 = icmp slt i32 %653, 0
  %655 = zext i1 %654 to i64
  %656 = select i1 %654, i32 -1, i32 1
  %657 = load i32, i32* %32, align 4
  %658 = call i32 @abs(i32 %657) #11
  %659 = srem i32 %658, 16
  %660 = sext i32 %659 to i64
  %661 = getelementptr inbounds [16 x i32], [16 x i32]* @roundtab, i64 0, i64 %660
  %662 = load i32, i32* %661, align 4
  %663 = load i32, i32* %32, align 4
  %664 = call i32 @abs(i32 %663) #11
  %665 = sdiv i32 %664, 16
  %666 = mul nsw i32 %665, 2
  %667 = add nsw i32 %662, %666
  %668 = mul nsw i32 %656, %667
  store i32 %668, i32* %22, align 4
  %669 = load i32, i32* %33, align 4
  %670 = icmp slt i32 %669, 0
  %671 = zext i1 %670 to i64
  %672 = select i1 %670, i32 -1, i32 1
  %673 = load i32, i32* %33, align 4
  %674 = call i32 @abs(i32 %673) #11
  %675 = srem i32 %674, 16
  %676 = sext i32 %675 to i64
  %677 = getelementptr inbounds [16 x i32], [16 x i32]* @roundtab, i64 0, i64 %676
  %678 = load i32, i32* %677, align 4
  %679 = load i32, i32* %33, align 4
  %680 = call i32 @abs(i32 %679) #11
  %681 = sdiv i32 %680, 16
  %682 = mul nsw i32 %681, 2
  %683 = add nsw i32 %678, %682
  %684 = mul nsw i32 %672, %683
  store i32 %684, i32* %23, align 4
  %685 = load i32, i32* %13, align 4
  %686 = load i32, i32* %14, align 4
  %687 = load i32, i32* %22, align 4
  %688 = load i32, i32* %23, align 4
  %689 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %690 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  call void @FindChromBlock_P(i32 %685, i32 %686, i32 %687, i32 %688, %struct.pict_image* %689, %struct.mb_structure* %690)
  %691 = load %struct.mb_structure*, %struct.mb_structure** %16, align 8
  %692 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %691, i32 0, i32 0
  %693 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %692, i64 0, i64 0
  %694 = getelementptr inbounds [16 x i32], [16 x i32]* %693, i64 0, i64 0
  %695 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 0
  %696 = load %struct.motionvector*, %struct.motionvector** %695, align 16
  %697 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  %698 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %697, i32 0, i32 0
  %699 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %698, i64 0, i64 0
  %700 = getelementptr inbounds [16 x i32], [16 x i32]* %699, i64 0, i64 0
  %701 = load i32, i32* %17, align 4
  %702 = load i32, i32* %18, align 4
  %703 = load i32, i32* %27, align 4
  %704 = load i32, i32* %28, align 4
  call void @FindBiDirLumPredPB(i32* %694, %struct.motionvector* %696, i32* %700, i32 %701, i32 %702, i32 %703, i32 %704, i32 0, i32 0)
  %705 = load %struct.mb_structure*, %struct.mb_structure** %16, align 8
  %706 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %705, i32 0, i32 0
  %707 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %706, i64 0, i64 0
  %708 = getelementptr inbounds [16 x i32], [16 x i32]* %707, i64 0, i64 8
  %709 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 0
  %710 = load %struct.motionvector*, %struct.motionvector** %709, align 16
  %711 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  %712 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %711, i32 0, i32 0
  %713 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %712, i64 0, i64 0
  %714 = getelementptr inbounds [16 x i32], [16 x i32]* %713, i64 0, i64 8
  %715 = load i32, i32* %17, align 4
  %716 = load i32, i32* %18, align 4
  %717 = load i32, i32* %27, align 4
  %718 = load i32, i32* %28, align 4
  call void @FindBiDirLumPredPB(i32* %708, %struct.motionvector* %710, i32* %714, i32 %715, i32 %716, i32 %717, i32 %718, i32 1, i32 0)
  %719 = load %struct.mb_structure*, %struct.mb_structure** %16, align 8
  %720 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %719, i32 0, i32 0
  %721 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %720, i64 0, i64 8
  %722 = getelementptr inbounds [16 x i32], [16 x i32]* %721, i64 0, i64 0
  %723 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 0
  %724 = load %struct.motionvector*, %struct.motionvector** %723, align 16
  %725 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  %726 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %725, i32 0, i32 0
  %727 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %726, i64 0, i64 8
  %728 = getelementptr inbounds [16 x i32], [16 x i32]* %727, i64 0, i64 0
  %729 = load i32, i32* %17, align 4
  %730 = load i32, i32* %18, align 4
  %731 = load i32, i32* %27, align 4
  %732 = load i32, i32* %28, align 4
  call void @FindBiDirLumPredPB(i32* %722, %struct.motionvector* %724, i32* %728, i32 %729, i32 %730, i32 %731, i32 %732, i32 0, i32 1)
  %733 = load %struct.mb_structure*, %struct.mb_structure** %16, align 8
  %734 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %733, i32 0, i32 0
  %735 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %734, i64 0, i64 8
  %736 = getelementptr inbounds [16 x i32], [16 x i32]* %735, i64 0, i64 8
  %737 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 0
  %738 = load %struct.motionvector*, %struct.motionvector** %737, align 16
  %739 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  %740 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %739, i32 0, i32 0
  %741 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %740, i64 0, i64 8
  %742 = getelementptr inbounds [16 x i32], [16 x i32]* %741, i64 0, i64 8
  %743 = load i32, i32* %17, align 4
  %744 = load i32, i32* %18, align 4
  %745 = load i32, i32* %27, align 4
  %746 = load i32, i32* %28, align 4
  call void @FindBiDirLumPredPB(i32* %736, %struct.motionvector* %738, i32* %742, i32 %743, i32 %744, i32 %745, i32 %746, i32 1, i32 1)
  %747 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 0
  %748 = load %struct.motionvector*, %struct.motionvector** %747, align 16
  %749 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %748, i32 0, i32 0
  %750 = load i32, i32* %749, align 4
  %751 = mul nsw i32 2, %750
  %752 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 0
  %753 = load %struct.motionvector*, %struct.motionvector** %752, align 16
  %754 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %753, i32 0, i32 2
  %755 = load i32, i32* %754, align 4
  %756 = add nsw i32 %751, %755
  store i32 %756, i32* %34, align 4
  %757 = load i32, i32* %27, align 4
  %758 = icmp eq i32 %757, 0
  br i1 %758, label %759, label %767

759:                                              ; preds = %605
  %760 = load i32, i32* %18, align 4
  %761 = load i32, i32* %17, align 4
  %762 = sub nsw i32 %760, %761
  %763 = load i32, i32* %34, align 4
  %764 = mul nsw i32 %762, %763
  %765 = load i32, i32* %17, align 4
  %766 = sdiv i32 %764, %765
  br label %777

767:                                              ; preds = %605
  %768 = load i32, i32* %18, align 4
  %769 = load i32, i32* %34, align 4
  %770 = mul nsw i32 %768, %769
  %771 = load i32, i32* %17, align 4
  %772 = sdiv i32 %770, %771
  %773 = load i32, i32* %27, align 4
  %774 = add nsw i32 %772, %773
  %775 = load i32, i32* %34, align 4
  %776 = sub nsw i32 %774, %775
  br label %777

777:                                              ; preds = %767, %759
  %778 = phi i32 [ %766, %759 ], [ %776, %767 ]
  store i32 %778, i32* %32, align 4
  %779 = load i32, i32* %32, align 4
  %780 = mul nsw i32 %779, 4
  store i32 %780, i32* %32, align 4
  %781 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 0
  %782 = load %struct.motionvector*, %struct.motionvector** %781, align 16
  %783 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %782, i32 0, i32 1
  %784 = load i32, i32* %783, align 4
  %785 = mul nsw i32 2, %784
  %786 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %31, i64 0, i64 0
  %787 = load %struct.motionvector*, %struct.motionvector** %786, align 16
  %788 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %787, i32 0, i32 3
  %789 = load i32, i32* %788, align 4
  %790 = add nsw i32 %785, %789
  store i32 %790, i32* %35, align 4
  %791 = load i32, i32* %28, align 4
  %792 = icmp eq i32 %791, 0
  br i1 %792, label %793, label %801

793:                                              ; preds = %777
  %794 = load i32, i32* %18, align 4
  %795 = load i32, i32* %17, align 4
  %796 = sub nsw i32 %794, %795
  %797 = load i32, i32* %35, align 4
  %798 = mul nsw i32 %796, %797
  %799 = load i32, i32* %17, align 4
  %800 = sdiv i32 %798, %799
  br label %811

801:                                              ; preds = %777
  %802 = load i32, i32* %18, align 4
  %803 = load i32, i32* %35, align 4
  %804 = mul nsw i32 %802, %803
  %805 = load i32, i32* %17, align 4
  %806 = sdiv i32 %804, %805
  %807 = load i32, i32* %28, align 4
  %808 = add nsw i32 %806, %807
  %809 = load i32, i32* %35, align 4
  %810 = sub nsw i32 %808, %809
  br label %811

811:                                              ; preds = %801, %793
  %812 = phi i32 [ %800, %793 ], [ %810, %801 ]
  store i32 %812, i32* %33, align 4
  %813 = load i32, i32* %33, align 4
  %814 = mul nsw i32 %813, 4
  store i32 %814, i32* %33, align 4
  %815 = load i32, i32* %32, align 4
  %816 = icmp slt i32 %815, 0
  %817 = zext i1 %816 to i64
  %818 = select i1 %816, i32 -1, i32 1
  %819 = load i32, i32* %32, align 4
  %820 = call i32 @abs(i32 %819) #11
  %821 = srem i32 %820, 16
  %822 = sext i32 %821 to i64
  %823 = getelementptr inbounds [16 x i32], [16 x i32]* @roundtab, i64 0, i64 %822
  %824 = load i32, i32* %823, align 4
  %825 = load i32, i32* %32, align 4
  %826 = call i32 @abs(i32 %825) #11
  %827 = sdiv i32 %826, 16
  %828 = mul nsw i32 %827, 2
  %829 = add nsw i32 %824, %828
  %830 = mul nsw i32 %818, %829
  store i32 %830, i32* %22, align 4
  %831 = load i32, i32* %33, align 4
  %832 = icmp slt i32 %831, 0
  %833 = zext i1 %832 to i64
  %834 = select i1 %832, i32 -1, i32 1
  %835 = load i32, i32* %33, align 4
  %836 = call i32 @abs(i32 %835) #11
  %837 = srem i32 %836, 16
  %838 = sext i32 %837 to i64
  %839 = getelementptr inbounds [16 x i32], [16 x i32]* @roundtab, i64 0, i64 %838
  %840 = load i32, i32* %839, align 4
  %841 = load i32, i32* %33, align 4
  %842 = call i32 @abs(i32 %841) #11
  %843 = sdiv i32 %842, 16
  %844 = mul nsw i32 %843, 2
  %845 = add nsw i32 %840, %844
  %846 = mul nsw i32 %834, %845
  store i32 %846, i32* %23, align 4
  %847 = load %struct.mb_structure*, %struct.mb_structure** %16, align 8
  %848 = load i32, i32* %22, align 4
  %849 = load i32, i32* %23, align 4
  %850 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  call void @FindBiDirChrPredPB(%struct.mb_structure* %847, i32 %848, i32 %849, %struct.mb_structure* %850)
  br label %851

851:                                              ; preds = %811, %451
  %852 = load i32, i32* %27, align 4
  %853 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %15, align 8
  %854 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %853, i64 5
  %855 = load i32, i32* %14, align 4
  %856 = sdiv i32 %855, 16
  %857 = add nsw i32 %856, 1
  %858 = sext i32 %857 to i64
  %859 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %854, i64 0, i64 %858
  %860 = load i32, i32* %13, align 4
  %861 = sdiv i32 %860, 16
  %862 = add nsw i32 %861, 1
  %863 = sext i32 %862 to i64
  %864 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %859, i64 0, i64 %863
  %865 = load %struct.motionvector*, %struct.motionvector** %864, align 8
  %866 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %865, i32 0, i32 0
  store i32 %852, i32* %866, align 4
  %867 = load i32, i32* %28, align 4
  %868 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %15, align 8
  %869 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %868, i64 5
  %870 = load i32, i32* %14, align 4
  %871 = sdiv i32 %870, 16
  %872 = add nsw i32 %871, 1
  %873 = sext i32 %872 to i64
  %874 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %869, i64 0, i64 %873
  %875 = load i32, i32* %13, align 4
  %876 = sdiv i32 %875, 16
  %877 = add nsw i32 %876, 1
  %878 = sext i32 %877 to i64
  %879 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %874, i64 0, i64 %878
  %880 = load %struct.motionvector*, %struct.motionvector** %879, align 8
  %881 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %880, i32 0, i32 1
  store i32 %867, i32* %881, align 4
  %882 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %15, align 8
  %883 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %882, i64 5
  %884 = load i32, i32* %14, align 4
  %885 = sdiv i32 %884, 16
  %886 = add nsw i32 %885, 1
  %887 = sext i32 %886 to i64
  %888 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %883, i64 0, i64 %887
  %889 = load i32, i32* %13, align 4
  %890 = sdiv i32 %889, 16
  %891 = add nsw i32 %890, 1
  %892 = sext i32 %891 to i64
  %893 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %888, i64 0, i64 %892
  %894 = load %struct.motionvector*, %struct.motionvector** %893, align 8
  %895 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %894, i32 0, i32 2
  store i32 0, i32* %895, align 4
  %896 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %15, align 8
  %897 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %896, i64 5
  %898 = load i32, i32* %14, align 4
  %899 = sdiv i32 %898, 16
  %900 = add nsw i32 %899, 1
  %901 = sext i32 %900 to i64
  %902 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %897, i64 0, i64 %901
  %903 = load i32, i32* %13, align 4
  %904 = sdiv i32 %903, 16
  %905 = add nsw i32 %904, 1
  %906 = sext i32 %905 to i64
  %907 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %902, i64 0, i64 %906
  %908 = load %struct.motionvector*, %struct.motionvector** %907, align 8
  %909 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %908, i32 0, i32 3
  store i32 0, i32* %909, align 4
  store i32 0, i32* %20, align 4
  br label %910

910:                                              ; preds = %958, %851
  %911 = load i32, i32* %20, align 4
  %912 = icmp slt i32 %911, 16
  br i1 %912, label %913, label %961

913:                                              ; preds = %910
  store i32 0, i32* %19, align 4
  br label %914

914:                                              ; preds = %954, %913
  %915 = load i32, i32* %19, align 4
  %916 = icmp slt i32 %915, 16
  br i1 %916, label %917, label %957

917:                                              ; preds = %914
  %918 = load %struct.pict_image*, %struct.pict_image** %10, align 8
  %919 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %918, i32 0, i32 0
  %920 = load i8*, i8** %919, align 8
  %921 = load i32, i32* %13, align 4
  %922 = sext i32 %921 to i64
  %923 = getelementptr inbounds i8, i8* %920, i64 %922
  %924 = load i32, i32* %19, align 4
  %925 = sext i32 %924 to i64
  %926 = getelementptr inbounds i8, i8* %923, i64 %925
  %927 = load i32, i32* %14, align 4
  %928 = load i32, i32* %20, align 4
  %929 = add nsw i32 %927, %928
  %930 = load i32, i32* @pels, align 4
  %931 = mul nsw i32 %929, %930
  %932 = sext i32 %931 to i64
  %933 = getelementptr inbounds i8, i8* %926, i64 %932
  %934 = load i8, i8* %933, align 1
  %935 = zext i8 %934 to i32
  %936 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  %937 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %936, i32 0, i32 0
  %938 = load i32, i32* %20, align 4
  %939 = sext i32 %938 to i64
  %940 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %937, i64 0, i64 %939
  %941 = load i32, i32* %19, align 4
  %942 = sext i32 %941 to i64
  %943 = getelementptr inbounds [16 x i32], [16 x i32]* %940, i64 0, i64 %942
  %944 = load i32, i32* %943, align 4
  %945 = sub nsw i32 %935, %944
  %946 = load %struct.mb_structure*, %struct.mb_structure** %29, align 8
  %947 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %946, i32 0, i32 0
  %948 = load i32, i32* %20, align 4
  %949 = sext i32 %948 to i64
  %950 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %947, i64 0, i64 %949
  %951 = load i32, i32* %19, align 4
  %952 = sext i32 %951 to i64
  %953 = getelementptr inbounds [16 x i32], [16 x i32]* %950, i64 0, i64 %952
  store i32 %945, i32* %953, align 4
  br label %954

954:                                              ; preds = %917
  %955 = load i32, i32* %19, align 4
  %956 = add nsw i32 %955, 1
  store i32 %956, i32* %19, align 4
  br label %914

957:                                              ; preds = %914
  br label %958

958:                                              ; preds = %957
  %959 = load i32, i32* %20, align 4
  %960 = add nsw i32 %959, 1
  store i32 %960, i32* %20, align 4
  br label %910

961:                                              ; preds = %910
  %962 = load i32, i32* %14, align 4
  %963 = ashr i32 %962, 1
  store i32 %963, i32* %14, align 4
  %964 = load i32, i32* %13, align 4
  %965 = ashr i32 %964, 1
  store i32 %965, i32* %13, align 4
  store i32 0, i32* %20, align 4
  br label %966

966:                                              ; preds = %1050, %961
  %967 = load i32, i32* %20, align 4
  %968 = icmp slt i32 %967, 8
  br i1 %968, label %969, label %1053

969:                                              ; preds = %966
  store i32 0, i32* %19, align 4
  br label %970

970:                                              ; preds = %1046, %969
  %971 = load i32, i32* %19, align 4
  %972 = icmp slt i32 %971, 8
  br i1 %972, label %973, label %1049

973:                                              ; preds = %970
  %974 = load %struct.pict_image*, %struct.pict_image** %10, align 8
  %975 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %974, i32 0, i32 1
  %976 = load i8*, i8** %975, align 8
  %977 = load i32, i32* %13, align 4
  %978 = sext i32 %977 to i64
  %979 = getelementptr inbounds i8, i8* %976, i64 %978
  %980 = load i32, i32* %19, align 4
  %981 = sext i32 %980 to i64
  %982 = getelementptr inbounds i8, i8* %979, i64 %981
  %983 = load i32, i32* %14, align 4
  %984 = load i32, i32* %20, align 4
  %985 = add nsw i32 %983, %984
  %986 = load i32, i32* @cpels, align 4
  %987 = mul nsw i32 %985, %986
  %988 = sext i32 %987 to i64
  %989 = getelementptr inbounds i8, i8* %982, i64 %988
  %990 = load i8, i8* %989, align 1
  %991 = zext i8 %990 to i32
  %992 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  %993 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %992, i32 0, i32 1
  %994 = load i32, i32* %20, align 4
  %995 = sext i32 %994 to i64
  %996 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %993, i64 0, i64 %995
  %997 = load i32, i32* %19, align 4
  %998 = sext i32 %997 to i64
  %999 = getelementptr inbounds [8 x i32], [8 x i32]* %996, i64 0, i64 %998
  %1000 = load i32, i32* %999, align 4
  %1001 = sub nsw i32 %991, %1000
  %1002 = load %struct.mb_structure*, %struct.mb_structure** %29, align 8
  %1003 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %1002, i32 0, i32 1
  %1004 = load i32, i32* %20, align 4
  %1005 = sext i32 %1004 to i64
  %1006 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %1003, i64 0, i64 %1005
  %1007 = load i32, i32* %19, align 4
  %1008 = sext i32 %1007 to i64
  %1009 = getelementptr inbounds [8 x i32], [8 x i32]* %1006, i64 0, i64 %1008
  store i32 %1001, i32* %1009, align 4
  %1010 = load %struct.pict_image*, %struct.pict_image** %10, align 8
  %1011 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %1010, i32 0, i32 2
  %1012 = load i8*, i8** %1011, align 8
  %1013 = load i32, i32* %13, align 4
  %1014 = sext i32 %1013 to i64
  %1015 = getelementptr inbounds i8, i8* %1012, i64 %1014
  %1016 = load i32, i32* %19, align 4
  %1017 = sext i32 %1016 to i64
  %1018 = getelementptr inbounds i8, i8* %1015, i64 %1017
  %1019 = load i32, i32* %14, align 4
  %1020 = load i32, i32* %20, align 4
  %1021 = add nsw i32 %1019, %1020
  %1022 = load i32, i32* @cpels, align 4
  %1023 = mul nsw i32 %1021, %1022
  %1024 = sext i32 %1023 to i64
  %1025 = getelementptr inbounds i8, i8* %1018, i64 %1024
  %1026 = load i8, i8* %1025, align 1
  %1027 = zext i8 %1026 to i32
  %1028 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  %1029 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %1028, i32 0, i32 2
  %1030 = load i32, i32* %20, align 4
  %1031 = sext i32 %1030 to i64
  %1032 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %1029, i64 0, i64 %1031
  %1033 = load i32, i32* %19, align 4
  %1034 = sext i32 %1033 to i64
  %1035 = getelementptr inbounds [8 x i32], [8 x i32]* %1032, i64 0, i64 %1034
  %1036 = load i32, i32* %1035, align 4
  %1037 = sub nsw i32 %1027, %1036
  %1038 = load %struct.mb_structure*, %struct.mb_structure** %29, align 8
  %1039 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %1038, i32 0, i32 2
  %1040 = load i32, i32* %20, align 4
  %1041 = sext i32 %1040 to i64
  %1042 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %1039, i64 0, i64 %1041
  %1043 = load i32, i32* %19, align 4
  %1044 = sext i32 %1043 to i64
  %1045 = getelementptr inbounds [8 x i32], [8 x i32]* %1042, i64 0, i64 %1044
  store i32 %1037, i32* %1045, align 4
  br label %1046

1046:                                             ; preds = %973
  %1047 = load i32, i32* %19, align 4
  %1048 = add nsw i32 %1047, 1
  store i32 %1048, i32* %19, align 4
  br label %970

1049:                                             ; preds = %970
  br label %1050

1050:                                             ; preds = %1049
  %1051 = load i32, i32* %20, align 4
  %1052 = add nsw i32 %1051, 1
  store i32 %1052, i32* %20, align 4
  br label %966

1053:                                             ; preds = %966
  %1054 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  %1055 = bitcast %struct.mb_structure* %1054 to i8*
  call void @free(i8* %1055) #8
  %1056 = load %struct.mb_structure*, %struct.mb_structure** %29, align 8
  ret %struct.mb_structure* %1056
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @FindForwLumPredPB(i8* %0, i32 %1, i32 %2, %struct.motionvector* %3, i32* %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 %10) #0 {
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca %struct.motionvector*, align 8
  %16 = alloca i32*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  store i8* %0, i8** %12, align 8
  store i32 %1, i32* %13, align 4
  store i32 %2, i32* %14, align 4
  store %struct.motionvector* %3, %struct.motionvector** %15, align 8
  store i32* %4, i32** %16, align 8
  store i32 %5, i32* %17, align 4
  store i32 %6, i32* %18, align 4
  store i32 %7, i32* %19, align 4
  store i32 %8, i32* %20, align 4
  store i32 %9, i32* %21, align 4
  store i32 %10, i32* %22, align 4
  %28 = load i32, i32* @mv_outside_frame, align 4
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %30, label %37

30:                                               ; preds = %11
  %31 = load i32, i32* @pels, align 4
  %32 = load i32, i32* @long_vectors, align 4
  %33 = icmp ne i32 %32, 0
  %34 = zext i1 %33 to i64
  %35 = select i1 %33, i32 64, i32 32
  %36 = add nsw i32 %31, %35
  br label %39

37:                                               ; preds = %11
  %38 = load i32, i32* @pels, align 4
  br label %39

39:                                               ; preds = %37, %30
  %40 = phi i32 [ %36, %30 ], [ %38, %37 ]
  store i32 %40, i32* %27, align 4
  %41 = load i32, i32* %18, align 4
  %42 = load %struct.motionvector*, %struct.motionvector** %15, align 8
  %43 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %42, i32 0, i32 0
  %44 = load i32, i32* %43, align 4
  %45 = mul nsw i32 2, %44
  %46 = load %struct.motionvector*, %struct.motionvector** %15, align 8
  %47 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %46, i32 0, i32 2
  %48 = load i32, i32* %47, align 4
  %49 = add nsw i32 %45, %48
  %50 = mul nsw i32 %41, %49
  %51 = load i32, i32* %17, align 4
  %52 = sdiv i32 %50, %51
  %53 = load i32, i32* %19, align 4
  %54 = add nsw i32 %52, %53
  store i32 %54, i32* %25, align 4
  %55 = load i32, i32* %18, align 4
  %56 = load %struct.motionvector*, %struct.motionvector** %15, align 8
  %57 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %56, i32 0, i32 1
  %58 = load i32, i32* %57, align 4
  %59 = mul nsw i32 2, %58
  %60 = load %struct.motionvector*, %struct.motionvector** %15, align 8
  %61 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %60, i32 0, i32 3
  %62 = load i32, i32* %61, align 4
  %63 = add nsw i32 %59, %62
  %64 = mul nsw i32 %55, %63
  %65 = load i32, i32* %17, align 4
  %66 = sdiv i32 %64, %65
  %67 = load i32, i32* %20, align 4
  %68 = add nsw i32 %66, %67
  store i32 %68, i32* %26, align 4
  %69 = load i32, i32* %22, align 4
  %70 = and i32 %69, 1
  %71 = shl i32 %70, 3
  %72 = load i32, i32* %13, align 4
  %73 = add nsw i32 %72, %71
  store i32 %73, i32* %13, align 4
  %74 = load i32, i32* %22, align 4
  %75 = and i32 %74, 2
  %76 = shl i32 %75, 2
  %77 = load i32, i32* %14, align 4
  %78 = add nsw i32 %77, %76
  store i32 %78, i32* %14, align 4
  store i32 0, i32* %24, align 4
  br label %79

79:                                               ; preds = %124, %39
  %80 = load i32, i32* %24, align 4
  %81 = load i32, i32* %21, align 4
  %82 = icmp slt i32 %80, %81
  br i1 %82, label %83, label %127

83:                                               ; preds = %79
  store i32 0, i32* %23, align 4
  br label %84

84:                                               ; preds = %120, %83
  %85 = load i32, i32* %23, align 4
  %86 = load i32, i32* %21, align 4
  %87 = icmp slt i32 %85, %86
  br i1 %87, label %88, label %123

88:                                               ; preds = %84
  %89 = load i8*, i8** %12, align 8
  %90 = load i32, i32* %23, align 4
  %91 = load i32, i32* %13, align 4
  %92 = add nsw i32 %90, %91
  %93 = mul nsw i32 %92, 2
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds i8, i8* %89, i64 %94
  %96 = load i32, i32* %25, align 4
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds i8, i8* %95, i64 %97
  %99 = load i32, i32* %24, align 4
  %100 = load i32, i32* %14, align 4
  %101 = add nsw i32 %99, %100
  %102 = mul nsw i32 %101, 2
  %103 = load i32, i32* %26, align 4
  %104 = add nsw i32 %102, %103
  %105 = load i32, i32* %27, align 4
  %106 = mul nsw i32 %104, %105
  %107 = mul nsw i32 %106, 2
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i8, i8* %98, i64 %108
  %110 = load i8, i8* %109, align 1
  %111 = zext i8 %110 to i32
  %112 = load i32*, i32** %16, align 8
  %113 = load i32, i32* %23, align 4
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds i32, i32* %112, i64 %114
  %116 = load i32, i32* %24, align 4
  %117 = mul nsw i32 %116, 16
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds i32, i32* %115, i64 %118
  store i32 %111, i32* %119, align 4
  br label %120

120:                                              ; preds = %88
  %121 = load i32, i32* %23, align 4
  %122 = add nsw i32 %121, 1
  store i32 %122, i32* %23, align 4
  br label %84

123:                                              ; preds = %84
  br label %124

124:                                              ; preds = %123
  %125 = load i32, i32* %24, align 4
  %126 = add nsw i32 %125, 1
  store i32 %126, i32* %24, align 4
  br label %79

127:                                              ; preds = %79
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @FindChromBlock_P(i32 %0, i32 %1, i32 %2, i32 %3, %struct.pict_image* %4, %struct.mb_structure* %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca %struct.pict_image*, align 8
  %12 = alloca %struct.mb_structure*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  store i32 %0, i32* %7, align 4
  store i32 %1, i32* %8, align 4
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store %struct.pict_image* %4, %struct.pict_image** %11, align 8
  store %struct.mb_structure* %5, %struct.mb_structure** %12, align 8
  %25 = load i32, i32* @mv_outside_frame, align 4
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %35

27:                                               ; preds = %6
  %28 = load i32, i32* @pels, align 4
  %29 = sdiv i32 %28, 2
  %30 = load i32, i32* @long_vectors, align 4
  %31 = icmp ne i32 %30, 0
  %32 = zext i1 %31 to i64
  %33 = select i1 %31, i32 32, i32 16
  %34 = add nsw i32 %29, %33
  br label %38

35:                                               ; preds = %6
  %36 = load i32, i32* @pels, align 4
  %37 = sdiv i32 %36, 2
  br label %38

38:                                               ; preds = %35, %27
  %39 = phi i32 [ %34, %27 ], [ %37, %35 ]
  store i32 %39, i32* %20, align 4
  %40 = load i32, i32* %7, align 4
  %41 = ashr i32 %40, 1
  store i32 %41, i32* %15, align 4
  %42 = load i32, i32* %8, align 4
  %43 = ashr i32 %42, 1
  store i32 %43, i32* %16, align 4
  %44 = load i32, i32* %9, align 4
  %45 = ashr i32 %44, 1
  store i32 %45, i32* %21, align 4
  %46 = load i32, i32* %9, align 4
  %47 = and i32 %46, 1
  store i32 %47, i32* %23, align 4
  %48 = load i32, i32* %10, align 4
  %49 = ashr i32 %48, 1
  store i32 %49, i32* %22, align 4
  %50 = load i32, i32* %10, align 4
  %51 = and i32 %50, 1
  store i32 %51, i32* %24, align 4
  %52 = load i32, i32* %23, align 4
  %53 = icmp ne i32 %52, 0
  br i1 %53, label %128, label %54

54:                                               ; preds = %38
  %55 = load i32, i32* %24, align 4
  %56 = icmp ne i32 %55, 0
  br i1 %56, label %128, label %57

57:                                               ; preds = %54
  store i32 0, i32* %14, align 4
  br label %58

58:                                               ; preds = %124, %57
  %59 = load i32, i32* %14, align 4
  %60 = icmp slt i32 %59, 8
  br i1 %60, label %61, label %127

61:                                               ; preds = %58
  store i32 0, i32* %13, align 4
  br label %62

62:                                               ; preds = %120, %61
  %63 = load i32, i32* %13, align 4
  %64 = icmp slt i32 %63, 8
  br i1 %64, label %65, label %123

65:                                               ; preds = %62
  %66 = load i32, i32* %15, align 4
  %67 = load i32, i32* %21, align 4
  %68 = add nsw i32 %66, %67
  %69 = load i32, i32* %13, align 4
  %70 = add nsw i32 %68, %69
  store i32 %70, i32* %17, align 4
  %71 = load i32, i32* %16, align 4
  %72 = load i32, i32* %22, align 4
  %73 = add nsw i32 %71, %72
  %74 = load i32, i32* %14, align 4
  %75 = add nsw i32 %73, %74
  store i32 %75, i32* %18, align 4
  %76 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %77 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %76, i32 0, i32 1
  %78 = load i8*, i8** %77, align 8
  %79 = load i32, i32* %17, align 4
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds i8, i8* %78, i64 %80
  %82 = load i32, i32* %18, align 4
  %83 = load i32, i32* %20, align 4
  %84 = mul nsw i32 %82, %83
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i8, i8* %81, i64 %85
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i32
  store i32 %88, i32* %19, align 4
  %89 = load i32, i32* %19, align 4
  %90 = load %struct.mb_structure*, %struct.mb_structure** %12, align 8
  %91 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %90, i32 0, i32 1
  %92 = load i32, i32* %14, align 4
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %91, i64 0, i64 %93
  %95 = load i32, i32* %13, align 4
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds [8 x i32], [8 x i32]* %94, i64 0, i64 %96
  store i32 %89, i32* %97, align 4
  %98 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %99 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %98, i32 0, i32 2
  %100 = load i8*, i8** %99, align 8
  %101 = load i32, i32* %17, align 4
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds i8, i8* %100, i64 %102
  %104 = load i32, i32* %18, align 4
  %105 = load i32, i32* %20, align 4
  %106 = mul nsw i32 %104, %105
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i8, i8* %103, i64 %107
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  store i32 %110, i32* %19, align 4
  %111 = load i32, i32* %19, align 4
  %112 = load %struct.mb_structure*, %struct.mb_structure** %12, align 8
  %113 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %112, i32 0, i32 2
  %114 = load i32, i32* %14, align 4
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %113, i64 0, i64 %115
  %117 = load i32, i32* %13, align 4
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds [8 x i32], [8 x i32]* %116, i64 0, i64 %118
  store i32 %111, i32* %119, align 4
  br label %120

120:                                              ; preds = %65
  %121 = load i32, i32* %13, align 4
  %122 = add nsw i32 %121, 1
  store i32 %122, i32* %13, align 4
  br label %62

123:                                              ; preds = %62
  br label %124

124:                                              ; preds = %123
  %125 = load i32, i32* %14, align 4
  %126 = add nsw i32 %125, 1
  store i32 %126, i32* %14, align 4
  br label %58

127:                                              ; preds = %58
  br label %537

128:                                              ; preds = %54, %38
  %129 = load i32, i32* %23, align 4
  %130 = icmp ne i32 %129, 0
  br i1 %130, label %241, label %131

131:                                              ; preds = %128
  %132 = load i32, i32* %24, align 4
  %133 = icmp ne i32 %132, 0
  br i1 %133, label %134, label %241

134:                                              ; preds = %131
  store i32 0, i32* %14, align 4
  br label %135

135:                                              ; preds = %237, %134
  %136 = load i32, i32* %14, align 4
  %137 = icmp slt i32 %136, 8
  br i1 %137, label %138, label %240

138:                                              ; preds = %135
  store i32 0, i32* %13, align 4
  br label %139

139:                                              ; preds = %233, %138
  %140 = load i32, i32* %13, align 4
  %141 = icmp slt i32 %140, 8
  br i1 %141, label %142, label %236

142:                                              ; preds = %139
  %143 = load i32, i32* %15, align 4
  %144 = load i32, i32* %21, align 4
  %145 = add nsw i32 %143, %144
  %146 = load i32, i32* %13, align 4
  %147 = add nsw i32 %145, %146
  store i32 %147, i32* %17, align 4
  %148 = load i32, i32* %16, align 4
  %149 = load i32, i32* %22, align 4
  %150 = add nsw i32 %148, %149
  %151 = load i32, i32* %14, align 4
  %152 = add nsw i32 %150, %151
  store i32 %152, i32* %18, align 4
  %153 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %154 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %153, i32 0, i32 1
  %155 = load i8*, i8** %154, align 8
  %156 = load i32, i32* %17, align 4
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds i8, i8* %155, i64 %157
  %159 = load i32, i32* %18, align 4
  %160 = load i32, i32* %20, align 4
  %161 = mul nsw i32 %159, %160
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds i8, i8* %158, i64 %162
  %164 = load i8, i8* %163, align 1
  %165 = zext i8 %164 to i32
  %166 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %167 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %166, i32 0, i32 1
  %168 = load i8*, i8** %167, align 8
  %169 = load i32, i32* %17, align 4
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds i8, i8* %168, i64 %170
  %172 = load i32, i32* %18, align 4
  %173 = load i32, i32* %24, align 4
  %174 = add nsw i32 %172, %173
  %175 = load i32, i32* %20, align 4
  %176 = mul nsw i32 %174, %175
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds i8, i8* %171, i64 %177
  %179 = load i8, i8* %178, align 1
  %180 = zext i8 %179 to i32
  %181 = add nsw i32 %165, %180
  %182 = add nsw i32 %181, 1
  %183 = ashr i32 %182, 1
  store i32 %183, i32* %19, align 4
  %184 = load i32, i32* %19, align 4
  %185 = load %struct.mb_structure*, %struct.mb_structure** %12, align 8
  %186 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %185, i32 0, i32 1
  %187 = load i32, i32* %14, align 4
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %186, i64 0, i64 %188
  %190 = load i32, i32* %13, align 4
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds [8 x i32], [8 x i32]* %189, i64 0, i64 %191
  store i32 %184, i32* %192, align 4
  %193 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %194 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %193, i32 0, i32 2
  %195 = load i8*, i8** %194, align 8
  %196 = load i32, i32* %17, align 4
  %197 = sext i32 %196 to i64
  %198 = getelementptr inbounds i8, i8* %195, i64 %197
  %199 = load i32, i32* %18, align 4
  %200 = load i32, i32* %20, align 4
  %201 = mul nsw i32 %199, %200
  %202 = sext i32 %201 to i64
  %203 = getelementptr inbounds i8, i8* %198, i64 %202
  %204 = load i8, i8* %203, align 1
  %205 = zext i8 %204 to i32
  %206 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %207 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %206, i32 0, i32 2
  %208 = load i8*, i8** %207, align 8
  %209 = load i32, i32* %17, align 4
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds i8, i8* %208, i64 %210
  %212 = load i32, i32* %18, align 4
  %213 = load i32, i32* %24, align 4
  %214 = add nsw i32 %212, %213
  %215 = load i32, i32* %20, align 4
  %216 = mul nsw i32 %214, %215
  %217 = sext i32 %216 to i64
  %218 = getelementptr inbounds i8, i8* %211, i64 %217
  %219 = load i8, i8* %218, align 1
  %220 = zext i8 %219 to i32
  %221 = add nsw i32 %205, %220
  %222 = add nsw i32 %221, 1
  %223 = ashr i32 %222, 1
  store i32 %223, i32* %19, align 4
  %224 = load i32, i32* %19, align 4
  %225 = load %struct.mb_structure*, %struct.mb_structure** %12, align 8
  %226 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %225, i32 0, i32 2
  %227 = load i32, i32* %14, align 4
  %228 = sext i32 %227 to i64
  %229 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %226, i64 0, i64 %228
  %230 = load i32, i32* %13, align 4
  %231 = sext i32 %230 to i64
  %232 = getelementptr inbounds [8 x i32], [8 x i32]* %229, i64 0, i64 %231
  store i32 %224, i32* %232, align 4
  br label %233

233:                                              ; preds = %142
  %234 = load i32, i32* %13, align 4
  %235 = add nsw i32 %234, 1
  store i32 %235, i32* %13, align 4
  br label %139

236:                                              ; preds = %139
  br label %237

237:                                              ; preds = %236
  %238 = load i32, i32* %14, align 4
  %239 = add nsw i32 %238, 1
  store i32 %239, i32* %14, align 4
  br label %135

240:                                              ; preds = %135
  br label %536

241:                                              ; preds = %131, %128
  %242 = load i32, i32* %23, align 4
  %243 = icmp ne i32 %242, 0
  br i1 %243, label %244, label %356

244:                                              ; preds = %241
  %245 = load i32, i32* %24, align 4
  %246 = icmp ne i32 %245, 0
  br i1 %246, label %356, label %247

247:                                              ; preds = %244
  store i32 0, i32* %14, align 4
  br label %248

248:                                              ; preds = %352, %247
  %249 = load i32, i32* %14, align 4
  %250 = icmp slt i32 %249, 8
  br i1 %250, label %251, label %355

251:                                              ; preds = %248
  store i32 0, i32* %13, align 4
  br label %252

252:                                              ; preds = %348, %251
  %253 = load i32, i32* %13, align 4
  %254 = icmp slt i32 %253, 8
  br i1 %254, label %255, label %351

255:                                              ; preds = %252
  %256 = load i32, i32* %15, align 4
  %257 = load i32, i32* %21, align 4
  %258 = add nsw i32 %256, %257
  %259 = load i32, i32* %13, align 4
  %260 = add nsw i32 %258, %259
  store i32 %260, i32* %17, align 4
  %261 = load i32, i32* %16, align 4
  %262 = load i32, i32* %22, align 4
  %263 = add nsw i32 %261, %262
  %264 = load i32, i32* %14, align 4
  %265 = add nsw i32 %263, %264
  store i32 %265, i32* %18, align 4
  %266 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %267 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %266, i32 0, i32 1
  %268 = load i8*, i8** %267, align 8
  %269 = load i32, i32* %17, align 4
  %270 = sext i32 %269 to i64
  %271 = getelementptr inbounds i8, i8* %268, i64 %270
  %272 = load i32, i32* %18, align 4
  %273 = load i32, i32* %20, align 4
  %274 = mul nsw i32 %272, %273
  %275 = sext i32 %274 to i64
  %276 = getelementptr inbounds i8, i8* %271, i64 %275
  %277 = load i8, i8* %276, align 1
  %278 = zext i8 %277 to i32
  %279 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %280 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %279, i32 0, i32 1
  %281 = load i8*, i8** %280, align 8
  %282 = load i32, i32* %17, align 4
  %283 = sext i32 %282 to i64
  %284 = getelementptr inbounds i8, i8* %281, i64 %283
  %285 = load i32, i32* %23, align 4
  %286 = sext i32 %285 to i64
  %287 = getelementptr inbounds i8, i8* %284, i64 %286
  %288 = load i32, i32* %18, align 4
  %289 = load i32, i32* %20, align 4
  %290 = mul nsw i32 %288, %289
  %291 = sext i32 %290 to i64
  %292 = getelementptr inbounds i8, i8* %287, i64 %291
  %293 = load i8, i8* %292, align 1
  %294 = zext i8 %293 to i32
  %295 = add nsw i32 %278, %294
  %296 = add nsw i32 %295, 1
  %297 = ashr i32 %296, 1
  store i32 %297, i32* %19, align 4
  %298 = load i32, i32* %19, align 4
  %299 = load %struct.mb_structure*, %struct.mb_structure** %12, align 8
  %300 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %299, i32 0, i32 1
  %301 = load i32, i32* %14, align 4
  %302 = sext i32 %301 to i64
  %303 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %300, i64 0, i64 %302
  %304 = load i32, i32* %13, align 4
  %305 = sext i32 %304 to i64
  %306 = getelementptr inbounds [8 x i32], [8 x i32]* %303, i64 0, i64 %305
  store i32 %298, i32* %306, align 4
  %307 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %308 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %307, i32 0, i32 2
  %309 = load i8*, i8** %308, align 8
  %310 = load i32, i32* %17, align 4
  %311 = sext i32 %310 to i64
  %312 = getelementptr inbounds i8, i8* %309, i64 %311
  %313 = load i32, i32* %18, align 4
  %314 = load i32, i32* %20, align 4
  %315 = mul nsw i32 %313, %314
  %316 = sext i32 %315 to i64
  %317 = getelementptr inbounds i8, i8* %312, i64 %316
  %318 = load i8, i8* %317, align 1
  %319 = zext i8 %318 to i32
  %320 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %321 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %320, i32 0, i32 2
  %322 = load i8*, i8** %321, align 8
  %323 = load i32, i32* %17, align 4
  %324 = sext i32 %323 to i64
  %325 = getelementptr inbounds i8, i8* %322, i64 %324
  %326 = load i32, i32* %23, align 4
  %327 = sext i32 %326 to i64
  %328 = getelementptr inbounds i8, i8* %325, i64 %327
  %329 = load i32, i32* %18, align 4
  %330 = load i32, i32* %20, align 4
  %331 = mul nsw i32 %329, %330
  %332 = sext i32 %331 to i64
  %333 = getelementptr inbounds i8, i8* %328, i64 %332
  %334 = load i8, i8* %333, align 1
  %335 = zext i8 %334 to i32
  %336 = add nsw i32 %319, %335
  %337 = add nsw i32 %336, 1
  %338 = ashr i32 %337, 1
  store i32 %338, i32* %19, align 4
  %339 = load i32, i32* %19, align 4
  %340 = load %struct.mb_structure*, %struct.mb_structure** %12, align 8
  %341 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %340, i32 0, i32 2
  %342 = load i32, i32* %14, align 4
  %343 = sext i32 %342 to i64
  %344 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %341, i64 0, i64 %343
  %345 = load i32, i32* %13, align 4
  %346 = sext i32 %345 to i64
  %347 = getelementptr inbounds [8 x i32], [8 x i32]* %344, i64 0, i64 %346
  store i32 %339, i32* %347, align 4
  br label %348

348:                                              ; preds = %255
  %349 = load i32, i32* %13, align 4
  %350 = add nsw i32 %349, 1
  store i32 %350, i32* %13, align 4
  br label %252

351:                                              ; preds = %252
  br label %352

352:                                              ; preds = %351
  %353 = load i32, i32* %14, align 4
  %354 = add nsw i32 %353, 1
  store i32 %354, i32* %14, align 4
  br label %248

355:                                              ; preds = %248
  br label %535

356:                                              ; preds = %244, %241
  store i32 0, i32* %14, align 4
  br label %357

357:                                              ; preds = %531, %356
  %358 = load i32, i32* %14, align 4
  %359 = icmp slt i32 %358, 8
  br i1 %359, label %360, label %534

360:                                              ; preds = %357
  store i32 0, i32* %13, align 4
  br label %361

361:                                              ; preds = %527, %360
  %362 = load i32, i32* %13, align 4
  %363 = icmp slt i32 %362, 8
  br i1 %363, label %364, label %530

364:                                              ; preds = %361
  %365 = load i32, i32* %15, align 4
  %366 = load i32, i32* %21, align 4
  %367 = add nsw i32 %365, %366
  %368 = load i32, i32* %13, align 4
  %369 = add nsw i32 %367, %368
  store i32 %369, i32* %17, align 4
  %370 = load i32, i32* %16, align 4
  %371 = load i32, i32* %22, align 4
  %372 = add nsw i32 %370, %371
  %373 = load i32, i32* %14, align 4
  %374 = add nsw i32 %372, %373
  store i32 %374, i32* %18, align 4
  %375 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %376 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %375, i32 0, i32 1
  %377 = load i8*, i8** %376, align 8
  %378 = load i32, i32* %17, align 4
  %379 = sext i32 %378 to i64
  %380 = getelementptr inbounds i8, i8* %377, i64 %379
  %381 = load i32, i32* %18, align 4
  %382 = load i32, i32* %20, align 4
  %383 = mul nsw i32 %381, %382
  %384 = sext i32 %383 to i64
  %385 = getelementptr inbounds i8, i8* %380, i64 %384
  %386 = load i8, i8* %385, align 1
  %387 = zext i8 %386 to i32
  %388 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %389 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %388, i32 0, i32 1
  %390 = load i8*, i8** %389, align 8
  %391 = load i32, i32* %17, align 4
  %392 = sext i32 %391 to i64
  %393 = getelementptr inbounds i8, i8* %390, i64 %392
  %394 = load i32, i32* %23, align 4
  %395 = sext i32 %394 to i64
  %396 = getelementptr inbounds i8, i8* %393, i64 %395
  %397 = load i32, i32* %18, align 4
  %398 = load i32, i32* %20, align 4
  %399 = mul nsw i32 %397, %398
  %400 = sext i32 %399 to i64
  %401 = getelementptr inbounds i8, i8* %396, i64 %400
  %402 = load i8, i8* %401, align 1
  %403 = zext i8 %402 to i32
  %404 = add nsw i32 %387, %403
  %405 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %406 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %405, i32 0, i32 1
  %407 = load i8*, i8** %406, align 8
  %408 = load i32, i32* %17, align 4
  %409 = sext i32 %408 to i64
  %410 = getelementptr inbounds i8, i8* %407, i64 %409
  %411 = load i32, i32* %18, align 4
  %412 = load i32, i32* %24, align 4
  %413 = add nsw i32 %411, %412
  %414 = load i32, i32* %20, align 4
  %415 = mul nsw i32 %413, %414
  %416 = sext i32 %415 to i64
  %417 = getelementptr inbounds i8, i8* %410, i64 %416
  %418 = load i8, i8* %417, align 1
  %419 = zext i8 %418 to i32
  %420 = add nsw i32 %404, %419
  %421 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %422 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %421, i32 0, i32 1
  %423 = load i8*, i8** %422, align 8
  %424 = load i32, i32* %17, align 4
  %425 = sext i32 %424 to i64
  %426 = getelementptr inbounds i8, i8* %423, i64 %425
  %427 = load i32, i32* %23, align 4
  %428 = sext i32 %427 to i64
  %429 = getelementptr inbounds i8, i8* %426, i64 %428
  %430 = load i32, i32* %18, align 4
  %431 = load i32, i32* %24, align 4
  %432 = add nsw i32 %430, %431
  %433 = load i32, i32* %20, align 4
  %434 = mul nsw i32 %432, %433
  %435 = sext i32 %434 to i64
  %436 = getelementptr inbounds i8, i8* %429, i64 %435
  %437 = load i8, i8* %436, align 1
  %438 = zext i8 %437 to i32
  %439 = add nsw i32 %420, %438
  %440 = add nsw i32 %439, 2
  %441 = ashr i32 %440, 2
  store i32 %441, i32* %19, align 4
  %442 = load i32, i32* %19, align 4
  %443 = load %struct.mb_structure*, %struct.mb_structure** %12, align 8
  %444 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %443, i32 0, i32 1
  %445 = load i32, i32* %14, align 4
  %446 = sext i32 %445 to i64
  %447 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %444, i64 0, i64 %446
  %448 = load i32, i32* %13, align 4
  %449 = sext i32 %448 to i64
  %450 = getelementptr inbounds [8 x i32], [8 x i32]* %447, i64 0, i64 %449
  store i32 %442, i32* %450, align 4
  %451 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %452 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %451, i32 0, i32 2
  %453 = load i8*, i8** %452, align 8
  %454 = load i32, i32* %17, align 4
  %455 = sext i32 %454 to i64
  %456 = getelementptr inbounds i8, i8* %453, i64 %455
  %457 = load i32, i32* %18, align 4
  %458 = load i32, i32* %20, align 4
  %459 = mul nsw i32 %457, %458
  %460 = sext i32 %459 to i64
  %461 = getelementptr inbounds i8, i8* %456, i64 %460
  %462 = load i8, i8* %461, align 1
  %463 = zext i8 %462 to i32
  %464 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %465 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %464, i32 0, i32 2
  %466 = load i8*, i8** %465, align 8
  %467 = load i32, i32* %17, align 4
  %468 = sext i32 %467 to i64
  %469 = getelementptr inbounds i8, i8* %466, i64 %468
  %470 = load i32, i32* %23, align 4
  %471 = sext i32 %470 to i64
  %472 = getelementptr inbounds i8, i8* %469, i64 %471
  %473 = load i32, i32* %18, align 4
  %474 = load i32, i32* %20, align 4
  %475 = mul nsw i32 %473, %474
  %476 = sext i32 %475 to i64
  %477 = getelementptr inbounds i8, i8* %472, i64 %476
  %478 = load i8, i8* %477, align 1
  %479 = zext i8 %478 to i32
  %480 = add nsw i32 %463, %479
  %481 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %482 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %481, i32 0, i32 2
  %483 = load i8*, i8** %482, align 8
  %484 = load i32, i32* %17, align 4
  %485 = sext i32 %484 to i64
  %486 = getelementptr inbounds i8, i8* %483, i64 %485
  %487 = load i32, i32* %18, align 4
  %488 = load i32, i32* %24, align 4
  %489 = add nsw i32 %487, %488
  %490 = load i32, i32* %20, align 4
  %491 = mul nsw i32 %489, %490
  %492 = sext i32 %491 to i64
  %493 = getelementptr inbounds i8, i8* %486, i64 %492
  %494 = load i8, i8* %493, align 1
  %495 = zext i8 %494 to i32
  %496 = add nsw i32 %480, %495
  %497 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %498 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %497, i32 0, i32 2
  %499 = load i8*, i8** %498, align 8
  %500 = load i32, i32* %17, align 4
  %501 = sext i32 %500 to i64
  %502 = getelementptr inbounds i8, i8* %499, i64 %501
  %503 = load i32, i32* %23, align 4
  %504 = sext i32 %503 to i64
  %505 = getelementptr inbounds i8, i8* %502, i64 %504
  %506 = load i32, i32* %18, align 4
  %507 = load i32, i32* %24, align 4
  %508 = add nsw i32 %506, %507
  %509 = load i32, i32* %20, align 4
  %510 = mul nsw i32 %508, %509
  %511 = sext i32 %510 to i64
  %512 = getelementptr inbounds i8, i8* %505, i64 %511
  %513 = load i8, i8* %512, align 1
  %514 = zext i8 %513 to i32
  %515 = add nsw i32 %496, %514
  %516 = add nsw i32 %515, 2
  %517 = ashr i32 %516, 2
  store i32 %517, i32* %19, align 4
  %518 = load i32, i32* %19, align 4
  %519 = load %struct.mb_structure*, %struct.mb_structure** %12, align 8
  %520 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %519, i32 0, i32 2
  %521 = load i32, i32* %14, align 4
  %522 = sext i32 %521 to i64
  %523 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %520, i64 0, i64 %522
  %524 = load i32, i32* %13, align 4
  %525 = sext i32 %524 to i64
  %526 = getelementptr inbounds [8 x i32], [8 x i32]* %523, i64 0, i64 %525
  store i32 %518, i32* %526, align 4
  br label %527

527:                                              ; preds = %364
  %528 = load i32, i32* %13, align 4
  %529 = add nsw i32 %528, 1
  store i32 %529, i32* %13, align 4
  br label %361

530:                                              ; preds = %361
  br label %531

531:                                              ; preds = %530
  %532 = load i32, i32* %14, align 4
  %533 = add nsw i32 %532, 1
  store i32 %533, i32* %14, align 4
  br label %357

534:                                              ; preds = %357
  br label %535

535:                                              ; preds = %534, %355
  br label %536

536:                                              ; preds = %535, %240
  br label %537

537:                                              ; preds = %536, %127
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @FindBiDirLumPredPB(i32* %0, %struct.motionvector* %1, i32* %2, i32 %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8) #0 {
  %10 = alloca i32*, align 8
  %11 = alloca %struct.motionvector*, align 8
  %12 = alloca i32*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  store i32* %0, i32** %10, align 8
  store %struct.motionvector* %1, %struct.motionvector** %11, align 8
  store i32* %2, i32** %12, align 8
  store i32 %3, i32* %13, align 4
  store i32 %4, i32* %14, align 4
  store i32 %5, i32* %15, align 4
  store i32 %6, i32* %16, align 4
  store i32 %7, i32* %17, align 4
  store i32 %8, i32* %18, align 4
  %27 = load %struct.motionvector*, %struct.motionvector** %11, align 8
  %28 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %27, i32 0, i32 0
  %29 = load i32, i32* %28, align 4
  %30 = mul nsw i32 2, %29
  %31 = load %struct.motionvector*, %struct.motionvector** %11, align 8
  %32 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %31, i32 0, i32 2
  %33 = load i32, i32* %32, align 4
  %34 = add nsw i32 %30, %33
  store i32 %34, i32* %25, align 4
  %35 = load %struct.motionvector*, %struct.motionvector** %11, align 8
  %36 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %35, i32 0, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = mul nsw i32 2, %37
  %39 = load %struct.motionvector*, %struct.motionvector** %11, align 8
  %40 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %39, i32 0, i32 3
  %41 = load i32, i32* %40, align 4
  %42 = add nsw i32 %38, %41
  store i32 %42, i32* %26, align 4
  %43 = load i32, i32* %15, align 4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %53

45:                                               ; preds = %9
  %46 = load i32, i32* %14, align 4
  %47 = load i32, i32* %13, align 4
  %48 = sub nsw i32 %46, %47
  %49 = load i32, i32* %25, align 4
  %50 = mul nsw i32 %48, %49
  %51 = load i32, i32* %13, align 4
  %52 = sdiv i32 %50, %51
  br label %63

53:                                               ; preds = %9
  %54 = load i32, i32* %14, align 4
  %55 = load i32, i32* %25, align 4
  %56 = mul nsw i32 %54, %55
  %57 = load i32, i32* %13, align 4
  %58 = sdiv i32 %56, %57
  %59 = load i32, i32* %15, align 4
  %60 = add nsw i32 %58, %59
  %61 = load i32, i32* %25, align 4
  %62 = sub nsw i32 %60, %61
  br label %63

63:                                               ; preds = %53, %45
  %64 = phi i32 [ %52, %45 ], [ %62, %53 ]
  store i32 %64, i32* %23, align 4
  %65 = load i32, i32* %16, align 4
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %67, label %75

67:                                               ; preds = %63
  %68 = load i32, i32* %14, align 4
  %69 = load i32, i32* %13, align 4
  %70 = sub nsw i32 %68, %69
  %71 = load i32, i32* %26, align 4
  %72 = mul nsw i32 %70, %71
  %73 = load i32, i32* %13, align 4
  %74 = sdiv i32 %72, %73
  br label %85

75:                                               ; preds = %63
  %76 = load i32, i32* %14, align 4
  %77 = load i32, i32* %26, align 4
  %78 = mul nsw i32 %76, %77
  %79 = load i32, i32* %13, align 4
  %80 = sdiv i32 %78, %79
  %81 = load i32, i32* %16, align 4
  %82 = add nsw i32 %80, %81
  %83 = load i32, i32* %26, align 4
  %84 = sub nsw i32 %82, %83
  br label %85

85:                                               ; preds = %75, %67
  %86 = phi i32 [ %74, %67 ], [ %84, %75 ]
  store i32 %86, i32* %24, align 4
  %87 = load i32, i32* %23, align 4
  %88 = load i32, i32* %17, align 4
  call void @FindBiDirLimits(i32 %87, i32* %19, i32* %20, i32 %88)
  %89 = load i32, i32* %24, align 4
  %90 = load i32, i32* %18, align 4
  call void @FindBiDirLimits(i32 %89, i32* %21, i32* %22, i32 %90)
  %91 = load i32, i32* %19, align 4
  %92 = load i32, i32* %20, align 4
  %93 = load i32, i32* %21, align 4
  %94 = load i32, i32* %22, align 4
  %95 = load i32, i32* %23, align 4
  %96 = load i32, i32* %24, align 4
  %97 = load i32*, i32** %10, align 8
  %98 = load i32*, i32** %12, align 8
  call void @BiDirPredBlock(i32 %91, i32 %92, i32 %93, i32 %94, i32 %95, i32 %96, i32* %97, i32* %98, i32 16)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @FindBiDirChrPredPB(%struct.mb_structure* %0, i32 %1, i32 %2, %struct.mb_structure* %3) #0 {
  %5 = alloca %struct.mb_structure*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.mb_structure*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store %struct.mb_structure* %0, %struct.mb_structure** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store %struct.mb_structure* %3, %struct.mb_structure** %8, align 8
  %13 = load i32, i32* %6, align 4
  call void @FindBiDirChromaLimits(i32 %13, i32* %9, i32* %10)
  %14 = load i32, i32* %7, align 4
  call void @FindBiDirChromaLimits(i32 %14, i32* %11, i32* %12)
  %15 = load i32, i32* %9, align 4
  %16 = load i32, i32* %10, align 4
  %17 = load i32, i32* %11, align 4
  %18 = load i32, i32* %12, align 4
  %19 = load i32, i32* %6, align 4
  %20 = load i32, i32* %7, align 4
  %21 = load %struct.mb_structure*, %struct.mb_structure** %5, align 8
  %22 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %21, i32 0, i32 2
  %23 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %22, i64 0, i64 0
  %24 = getelementptr inbounds [8 x i32], [8 x i32]* %23, i64 0, i64 0
  %25 = load %struct.mb_structure*, %struct.mb_structure** %8, align 8
  %26 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %25, i32 0, i32 2
  %27 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %26, i64 0, i64 0
  %28 = getelementptr inbounds [8 x i32], [8 x i32]* %27, i64 0, i64 0
  call void @BiDirPredBlock(i32 %15, i32 %16, i32 %17, i32 %18, i32 %19, i32 %20, i32* %24, i32* %28, i32 8)
  %29 = load i32, i32* %9, align 4
  %30 = load i32, i32* %10, align 4
  %31 = load i32, i32* %11, align 4
  %32 = load i32, i32* %12, align 4
  %33 = load i32, i32* %6, align 4
  %34 = load i32, i32* %7, align 4
  %35 = load %struct.mb_structure*, %struct.mb_structure** %5, align 8
  %36 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %35, i32 0, i32 1
  %37 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %36, i64 0, i64 0
  %38 = getelementptr inbounds [8 x i32], [8 x i32]* %37, i64 0, i64 0
  %39 = load %struct.mb_structure*, %struct.mb_structure** %8, align 8
  %40 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %39, i32 0, i32 1
  %41 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %40, i64 0, i64 0
  %42 = getelementptr inbounds [8 x i32], [8 x i32]* %41, i64 0, i64 0
  call void @BiDirPredBlock(i32 %29, i32 %30, i32 %31, i32 %32, i32 %33, i32 %34, i32* %38, i32* %42, i32 8)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @FindBiDirChromaLimits(i32 %0, i32* %1, i32* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  store i32 %0, i32* %4, align 4
  store i32* %1, i32** %5, align 8
  store i32* %2, i32** %6, align 8
  %7 = load i32, i32* %4, align 4
  %8 = sub nsw i32 0, %7
  %9 = add nsw i32 %8, 1
  %10 = sdiv i32 %9, 2
  %11 = icmp sgt i32 0, %10
  br i1 %11, label %12, label %13

12:                                               ; preds = %3
  br label %18

13:                                               ; preds = %3
  %14 = load i32, i32* %4, align 4
  %15 = sub nsw i32 0, %14
  %16 = add nsw i32 %15, 1
  %17 = sdiv i32 %16, 2
  br label %18

18:                                               ; preds = %13, %12
  %19 = phi i32 [ 0, %12 ], [ %17, %13 ]
  %20 = load i32*, i32** %5, align 8
  store i32 %19, i32* %20, align 4
  %21 = load i32, i32* %4, align 4
  %22 = add nsw i32 %21, 1
  %23 = sdiv i32 %22, 2
  %24 = sub nsw i32 7, %23
  %25 = icmp slt i32 7, %24
  br i1 %25, label %26, label %27

26:                                               ; preds = %18
  br label %32

27:                                               ; preds = %18
  %28 = load i32, i32* %4, align 4
  %29 = add nsw i32 %28, 1
  %30 = sdiv i32 %29, 2
  %31 = sub nsw i32 7, %30
  br label %32

32:                                               ; preds = %27, %26
  %33 = phi i32 [ 7, %26 ], [ %31, %27 ]
  %34 = load i32*, i32** %6, align 8
  store i32 %33, i32* %34, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BiDirPredBlock(i32 %0, i32 %1, i32 %2, i32 %3, i32 %4, i32 %5, i32* %6, i32* %7, i32 %8) #0 {
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32*, align 8
  %17 = alloca i32*, align 8
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  store i32 %0, i32* %10, align 4
  store i32 %1, i32* %11, align 4
  store i32 %2, i32* %12, align 4
  store i32 %3, i32* %13, align 4
  store i32 %4, i32* %14, align 4
  store i32 %5, i32* %15, align 4
  store i32* %6, i32** %16, align 8
  store i32* %7, i32** %17, align 8
  store i32 %8, i32* %18, align 4
  %26 = load i32, i32* %14, align 4
  %27 = ashr i32 %26, 1
  store i32 %27, i32* %22, align 4
  %28 = load i32, i32* %14, align 4
  %29 = load i32, i32* %22, align 4
  %30 = mul nsw i32 2, %29
  %31 = sub nsw i32 %28, %30
  store i32 %31, i32* %24, align 4
  %32 = load i32, i32* %15, align 4
  %33 = ashr i32 %32, 1
  store i32 %33, i32* %23, align 4
  %34 = load i32, i32* %15, align 4
  %35 = load i32, i32* %23, align 4
  %36 = mul nsw i32 2, %35
  %37 = sub nsw i32 %34, %36
  store i32 %37, i32* %25, align 4
  %38 = load i32, i32* %24, align 4
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %119, label %40

40:                                               ; preds = %9
  %41 = load i32, i32* %25, align 4
  %42 = icmp ne i32 %41, 0
  br i1 %42, label %119, label %43

43:                                               ; preds = %40
  %44 = load i32, i32* %12, align 4
  store i32 %44, i32* %20, align 4
  br label %45

45:                                               ; preds = %115, %43
  %46 = load i32, i32* %20, align 4
  %47 = load i32, i32* %13, align 4
  %48 = icmp sle i32 %46, %47
  br i1 %48, label %49, label %118

49:                                               ; preds = %45
  %50 = load i32, i32* %10, align 4
  store i32 %50, i32* %19, align 4
  br label %51

51:                                               ; preds = %111, %49
  %52 = load i32, i32* %19, align 4
  %53 = load i32, i32* %11, align 4
  %54 = icmp sle i32 %52, %53
  br i1 %54, label %55, label %114

55:                                               ; preds = %51
  %56 = load i32*, i32** %16, align 8
  %57 = load i32, i32* %20, align 4
  %58 = load i32, i32* %23, align 4
  %59 = add nsw i32 %57, %58
  %60 = load i32, i32* %18, align 4
  %61 = mul nsw i32 %59, %60
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds i32, i32* %56, i64 %62
  %64 = load i32, i32* %19, align 4
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i32, i32* %63, i64 %65
  %67 = load i32, i32* %22, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i32, i32* %66, i64 %68
  %70 = load i32, i32* %69, align 4
  store i32 %70, i32* %21, align 4
  %71 = load i32, i32* %21, align 4
  %72 = icmp sgt i32 0, %71
  br i1 %72, label %73, label %74

73:                                               ; preds = %55
  br label %76

74:                                               ; preds = %55
  %75 = load i32, i32* %21, align 4
  br label %76

76:                                               ; preds = %74, %73
  %77 = phi i32 [ 0, %73 ], [ %75, %74 ]
  %78 = icmp slt i32 255, %77
  br i1 %78, label %79, label %80

79:                                               ; preds = %76
  br label %88

80:                                               ; preds = %76
  %81 = load i32, i32* %21, align 4
  %82 = icmp sgt i32 0, %81
  br i1 %82, label %83, label %84

83:                                               ; preds = %80
  br label %86

84:                                               ; preds = %80
  %85 = load i32, i32* %21, align 4
  br label %86

86:                                               ; preds = %84, %83
  %87 = phi i32 [ 0, %83 ], [ %85, %84 ]
  br label %88

88:                                               ; preds = %86, %79
  %89 = phi i32 [ 255, %79 ], [ %87, %86 ]
  %90 = load i32*, i32** %17, align 8
  %91 = load i32, i32* %20, align 4
  %92 = load i32, i32* %18, align 4
  %93 = mul nsw i32 %91, %92
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds i32, i32* %90, i64 %94
  %96 = load i32, i32* %19, align 4
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds i32, i32* %95, i64 %97
  %99 = load i32, i32* %98, align 4
  %100 = add nsw i32 %89, %99
  %101 = ashr i32 %100, 1
  %102 = load i32*, i32** %17, align 8
  %103 = load i32, i32* %20, align 4
  %104 = load i32, i32* %18, align 4
  %105 = mul nsw i32 %103, %104
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i32, i32* %102, i64 %106
  %108 = load i32, i32* %19, align 4
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i32, i32* %107, i64 %109
  store i32 %101, i32* %110, align 4
  br label %111

111:                                              ; preds = %88
  %112 = load i32, i32* %19, align 4
  %113 = add nsw i32 %112, 1
  store i32 %113, i32* %19, align 4
  br label %51

114:                                              ; preds = %51
  br label %115

115:                                              ; preds = %114
  %116 = load i32, i32* %20, align 4
  %117 = add nsw i32 %116, 1
  store i32 %117, i32* %20, align 4
  br label %45

118:                                              ; preds = %45
  br label %408

119:                                              ; preds = %40, %9
  %120 = load i32, i32* %24, align 4
  %121 = icmp ne i32 %120, 0
  br i1 %121, label %203, label %122

122:                                              ; preds = %119
  %123 = load i32, i32* %25, align 4
  %124 = icmp ne i32 %123, 0
  br i1 %124, label %125, label %203

125:                                              ; preds = %122
  %126 = load i32, i32* %12, align 4
  store i32 %126, i32* %20, align 4
  br label %127

127:                                              ; preds = %199, %125
  %128 = load i32, i32* %20, align 4
  %129 = load i32, i32* %13, align 4
  %130 = icmp sle i32 %128, %129
  br i1 %130, label %131, label %202

131:                                              ; preds = %127
  %132 = load i32, i32* %10, align 4
  store i32 %132, i32* %19, align 4
  br label %133

133:                                              ; preds = %195, %131
  %134 = load i32, i32* %19, align 4
  %135 = load i32, i32* %11, align 4
  %136 = icmp sle i32 %134, %135
  br i1 %136, label %137, label %198

137:                                              ; preds = %133
  %138 = load i32*, i32** %16, align 8
  %139 = load i32, i32* %20, align 4
  %140 = load i32, i32* %23, align 4
  %141 = add nsw i32 %139, %140
  %142 = load i32, i32* %18, align 4
  %143 = mul nsw i32 %141, %142
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds i32, i32* %138, i64 %144
  %146 = load i32, i32* %19, align 4
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds i32, i32* %145, i64 %147
  %149 = load i32, i32* %22, align 4
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds i32, i32* %148, i64 %150
  %152 = load i32, i32* %151, align 4
  %153 = load i32*, i32** %16, align 8
  %154 = load i32, i32* %20, align 4
  %155 = load i32, i32* %23, align 4
  %156 = add nsw i32 %154, %155
  %157 = load i32, i32* %25, align 4
  %158 = add nsw i32 %156, %157
  %159 = load i32, i32* %18, align 4
  %160 = mul nsw i32 %158, %159
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds i32, i32* %153, i64 %161
  %163 = load i32, i32* %19, align 4
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds i32, i32* %162, i64 %164
  %166 = load i32, i32* %22, align 4
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds i32, i32* %165, i64 %167
  %169 = load i32, i32* %168, align 4
  %170 = add nsw i32 %152, %169
  %171 = add nsw i32 %170, 1
  %172 = ashr i32 %171, 1
  store i32 %172, i32* %21, align 4
  %173 = load i32, i32* %21, align 4
  %174 = load i32*, i32** %17, align 8
  %175 = load i32, i32* %20, align 4
  %176 = load i32, i32* %18, align 4
  %177 = mul nsw i32 %175, %176
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds i32, i32* %174, i64 %178
  %180 = load i32, i32* %19, align 4
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds i32, i32* %179, i64 %181
  %183 = load i32, i32* %182, align 4
  %184 = add nsw i32 %173, %183
  %185 = ashr i32 %184, 1
  %186 = load i32*, i32** %17, align 8
  %187 = load i32, i32* %20, align 4
  %188 = load i32, i32* %18, align 4
  %189 = mul nsw i32 %187, %188
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds i32, i32* %186, i64 %190
  %192 = load i32, i32* %19, align 4
  %193 = sext i32 %192 to i64
  %194 = getelementptr inbounds i32, i32* %191, i64 %193
  store i32 %185, i32* %194, align 4
  br label %195

195:                                              ; preds = %137
  %196 = load i32, i32* %19, align 4
  %197 = add nsw i32 %196, 1
  store i32 %197, i32* %19, align 4
  br label %133

198:                                              ; preds = %133
  br label %199

199:                                              ; preds = %198
  %200 = load i32, i32* %20, align 4
  %201 = add nsw i32 %200, 1
  store i32 %201, i32* %20, align 4
  br label %127

202:                                              ; preds = %127
  br label %407

203:                                              ; preds = %122, %119
  %204 = load i32, i32* %24, align 4
  %205 = icmp ne i32 %204, 0
  br i1 %205, label %206, label %288

206:                                              ; preds = %203
  %207 = load i32, i32* %25, align 4
  %208 = icmp ne i32 %207, 0
  br i1 %208, label %288, label %209

209:                                              ; preds = %206
  %210 = load i32, i32* %12, align 4
  store i32 %210, i32* %20, align 4
  br label %211

211:                                              ; preds = %284, %209
  %212 = load i32, i32* %20, align 4
  %213 = load i32, i32* %13, align 4
  %214 = icmp sle i32 %212, %213
  br i1 %214, label %215, label %287

215:                                              ; preds = %211
  %216 = load i32, i32* %10, align 4
  store i32 %216, i32* %19, align 4
  br label %217

217:                                              ; preds = %280, %215
  %218 = load i32, i32* %19, align 4
  %219 = load i32, i32* %11, align 4
  %220 = icmp sle i32 %218, %219
  br i1 %220, label %221, label %283

221:                                              ; preds = %217
  %222 = load i32*, i32** %16, align 8
  %223 = load i32, i32* %20, align 4
  %224 = load i32, i32* %23, align 4
  %225 = add nsw i32 %223, %224
  %226 = load i32, i32* %18, align 4
  %227 = mul nsw i32 %225, %226
  %228 = sext i32 %227 to i64
  %229 = getelementptr inbounds i32, i32* %222, i64 %228
  %230 = load i32, i32* %19, align 4
  %231 = sext i32 %230 to i64
  %232 = getelementptr inbounds i32, i32* %229, i64 %231
  %233 = load i32, i32* %22, align 4
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds i32, i32* %232, i64 %234
  %236 = load i32, i32* %235, align 4
  %237 = load i32*, i32** %16, align 8
  %238 = load i32, i32* %20, align 4
  %239 = load i32, i32* %23, align 4
  %240 = add nsw i32 %238, %239
  %241 = load i32, i32* %18, align 4
  %242 = mul nsw i32 %240, %241
  %243 = sext i32 %242 to i64
  %244 = getelementptr inbounds i32, i32* %237, i64 %243
  %245 = load i32, i32* %19, align 4
  %246 = sext i32 %245 to i64
  %247 = getelementptr inbounds i32, i32* %244, i64 %246
  %248 = load i32, i32* %22, align 4
  %249 = sext i32 %248 to i64
  %250 = getelementptr inbounds i32, i32* %247, i64 %249
  %251 = load i32, i32* %24, align 4
  %252 = sext i32 %251 to i64
  %253 = getelementptr inbounds i32, i32* %250, i64 %252
  %254 = load i32, i32* %253, align 4
  %255 = add nsw i32 %236, %254
  %256 = add nsw i32 %255, 1
  %257 = ashr i32 %256, 1
  store i32 %257, i32* %21, align 4
  %258 = load i32, i32* %21, align 4
  %259 = load i32*, i32** %17, align 8
  %260 = load i32, i32* %20, align 4
  %261 = load i32, i32* %18, align 4
  %262 = mul nsw i32 %260, %261
  %263 = sext i32 %262 to i64
  %264 = getelementptr inbounds i32, i32* %259, i64 %263
  %265 = load i32, i32* %19, align 4
  %266 = sext i32 %265 to i64
  %267 = getelementptr inbounds i32, i32* %264, i64 %266
  %268 = load i32, i32* %267, align 4
  %269 = add nsw i32 %258, %268
  %270 = ashr i32 %269, 1
  %271 = load i32*, i32** %17, align 8
  %272 = load i32, i32* %20, align 4
  %273 = load i32, i32* %18, align 4
  %274 = mul nsw i32 %272, %273
  %275 = sext i32 %274 to i64
  %276 = getelementptr inbounds i32, i32* %271, i64 %275
  %277 = load i32, i32* %19, align 4
  %278 = sext i32 %277 to i64
  %279 = getelementptr inbounds i32, i32* %276, i64 %278
  store i32 %270, i32* %279, align 4
  br label %280

280:                                              ; preds = %221
  %281 = load i32, i32* %19, align 4
  %282 = add nsw i32 %281, 1
  store i32 %282, i32* %19, align 4
  br label %217

283:                                              ; preds = %217
  br label %284

284:                                              ; preds = %283
  %285 = load i32, i32* %20, align 4
  %286 = add nsw i32 %285, 1
  store i32 %286, i32* %20, align 4
  br label %211

287:                                              ; preds = %211
  br label %406

288:                                              ; preds = %206, %203
  %289 = load i32, i32* %12, align 4
  store i32 %289, i32* %20, align 4
  br label %290

290:                                              ; preds = %402, %288
  %291 = load i32, i32* %20, align 4
  %292 = load i32, i32* %13, align 4
  %293 = icmp sle i32 %291, %292
  br i1 %293, label %294, label %405

294:                                              ; preds = %290
  %295 = load i32, i32* %10, align 4
  store i32 %295, i32* %19, align 4
  br label %296

296:                                              ; preds = %398, %294
  %297 = load i32, i32* %19, align 4
  %298 = load i32, i32* %11, align 4
  %299 = icmp sle i32 %297, %298
  br i1 %299, label %300, label %401

300:                                              ; preds = %296
  %301 = load i32*, i32** %16, align 8
  %302 = load i32, i32* %20, align 4
  %303 = load i32, i32* %23, align 4
  %304 = add nsw i32 %302, %303
  %305 = load i32, i32* %18, align 4
  %306 = mul nsw i32 %304, %305
  %307 = sext i32 %306 to i64
  %308 = getelementptr inbounds i32, i32* %301, i64 %307
  %309 = load i32, i32* %19, align 4
  %310 = sext i32 %309 to i64
  %311 = getelementptr inbounds i32, i32* %308, i64 %310
  %312 = load i32, i32* %22, align 4
  %313 = sext i32 %312 to i64
  %314 = getelementptr inbounds i32, i32* %311, i64 %313
  %315 = load i32, i32* %314, align 4
  %316 = load i32*, i32** %16, align 8
  %317 = load i32, i32* %20, align 4
  %318 = load i32, i32* %23, align 4
  %319 = add nsw i32 %317, %318
  %320 = load i32, i32* %25, align 4
  %321 = add nsw i32 %319, %320
  %322 = load i32, i32* %18, align 4
  %323 = mul nsw i32 %321, %322
  %324 = sext i32 %323 to i64
  %325 = getelementptr inbounds i32, i32* %316, i64 %324
  %326 = load i32, i32* %19, align 4
  %327 = sext i32 %326 to i64
  %328 = getelementptr inbounds i32, i32* %325, i64 %327
  %329 = load i32, i32* %22, align 4
  %330 = sext i32 %329 to i64
  %331 = getelementptr inbounds i32, i32* %328, i64 %330
  %332 = load i32, i32* %331, align 4
  %333 = add nsw i32 %315, %332
  %334 = load i32*, i32** %16, align 8
  %335 = load i32, i32* %20, align 4
  %336 = load i32, i32* %23, align 4
  %337 = add nsw i32 %335, %336
  %338 = load i32, i32* %18, align 4
  %339 = mul nsw i32 %337, %338
  %340 = sext i32 %339 to i64
  %341 = getelementptr inbounds i32, i32* %334, i64 %340
  %342 = load i32, i32* %19, align 4
  %343 = sext i32 %342 to i64
  %344 = getelementptr inbounds i32, i32* %341, i64 %343
  %345 = load i32, i32* %22, align 4
  %346 = sext i32 %345 to i64
  %347 = getelementptr inbounds i32, i32* %344, i64 %346
  %348 = load i32, i32* %24, align 4
  %349 = sext i32 %348 to i64
  %350 = getelementptr inbounds i32, i32* %347, i64 %349
  %351 = load i32, i32* %350, align 4
  %352 = add nsw i32 %333, %351
  %353 = load i32*, i32** %16, align 8
  %354 = load i32, i32* %20, align 4
  %355 = load i32, i32* %23, align 4
  %356 = add nsw i32 %354, %355
  %357 = load i32, i32* %25, align 4
  %358 = add nsw i32 %356, %357
  %359 = load i32, i32* %18, align 4
  %360 = mul nsw i32 %358, %359
  %361 = sext i32 %360 to i64
  %362 = getelementptr inbounds i32, i32* %353, i64 %361
  %363 = load i32, i32* %19, align 4
  %364 = sext i32 %363 to i64
  %365 = getelementptr inbounds i32, i32* %362, i64 %364
  %366 = load i32, i32* %22, align 4
  %367 = sext i32 %366 to i64
  %368 = getelementptr inbounds i32, i32* %365, i64 %367
  %369 = load i32, i32* %24, align 4
  %370 = sext i32 %369 to i64
  %371 = getelementptr inbounds i32, i32* %368, i64 %370
  %372 = load i32, i32* %371, align 4
  %373 = add nsw i32 %352, %372
  %374 = add nsw i32 %373, 2
  %375 = ashr i32 %374, 2
  store i32 %375, i32* %21, align 4
  %376 = load i32, i32* %21, align 4
  %377 = load i32*, i32** %17, align 8
  %378 = load i32, i32* %20, align 4
  %379 = load i32, i32* %18, align 4
  %380 = mul nsw i32 %378, %379
  %381 = sext i32 %380 to i64
  %382 = getelementptr inbounds i32, i32* %377, i64 %381
  %383 = load i32, i32* %19, align 4
  %384 = sext i32 %383 to i64
  %385 = getelementptr inbounds i32, i32* %382, i64 %384
  %386 = load i32, i32* %385, align 4
  %387 = add nsw i32 %376, %386
  %388 = ashr i32 %387, 1
  %389 = load i32*, i32** %17, align 8
  %390 = load i32, i32* %20, align 4
  %391 = load i32, i32* %18, align 4
  %392 = mul nsw i32 %390, %391
  %393 = sext i32 %392 to i64
  %394 = getelementptr inbounds i32, i32* %389, i64 %393
  %395 = load i32, i32* %19, align 4
  %396 = sext i32 %395 to i64
  %397 = getelementptr inbounds i32, i32* %394, i64 %396
  store i32 %388, i32* %397, align 4
  br label %398

398:                                              ; preds = %300
  %399 = load i32, i32* %19, align 4
  %400 = add nsw i32 %399, 1
  store i32 %400, i32* %19, align 4
  br label %296

401:                                              ; preds = %296
  br label %402

402:                                              ; preds = %401
  %403 = load i32, i32* %20, align 4
  %404 = add nsw i32 %403, 1
  store i32 %404, i32* %20, align 4
  br label %290

405:                                              ; preds = %290
  br label %406

406:                                              ; preds = %405, %287
  br label %407

407:                                              ; preds = %406, %202
  br label %408

408:                                              ; preds = %407, %118
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @FindBiDirLimits(i32 %0, i32* %1, i32* %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i32* %1, i32** %6, align 8
  store i32* %2, i32** %7, align 8
  store i32 %3, i32* %8, align 4
  %9 = load i32, i32* %5, align 4
  %10 = sub nsw i32 0, %9
  %11 = add nsw i32 %10, 1
  %12 = sdiv i32 %11, 2
  %13 = load i32, i32* %8, align 4
  %14 = mul nsw i32 %13, 8
  %15 = sub nsw i32 %12, %14
  %16 = icmp sgt i32 0, %15
  br i1 %16, label %17, label %18

17:                                               ; preds = %4
  br label %26

18:                                               ; preds = %4
  %19 = load i32, i32* %5, align 4
  %20 = sub nsw i32 0, %19
  %21 = add nsw i32 %20, 1
  %22 = sdiv i32 %21, 2
  %23 = load i32, i32* %8, align 4
  %24 = mul nsw i32 %23, 8
  %25 = sub nsw i32 %22, %24
  br label %26

26:                                               ; preds = %18, %17
  %27 = phi i32 [ 0, %17 ], [ %25, %18 ]
  %28 = load i32*, i32** %6, align 8
  store i32 %27, i32* %28, align 4
  %29 = load i32, i32* %5, align 4
  %30 = add nsw i32 %29, 1
  %31 = sdiv i32 %30, 2
  %32 = sub nsw i32 15, %31
  %33 = load i32, i32* %8, align 4
  %34 = mul nsw i32 %33, 8
  %35 = sub nsw i32 %32, %34
  %36 = icmp slt i32 7, %35
  br i1 %36, label %37, label %38

37:                                               ; preds = %26
  br label %46

38:                                               ; preds = %26
  %39 = load i32, i32* %5, align 4
  %40 = add nsw i32 %39, 1
  %41 = sdiv i32 %40, 2
  %42 = sub nsw i32 15, %41
  %43 = load i32, i32* %8, align 4
  %44 = mul nsw i32 %43, 8
  %45 = sub nsw i32 %42, %44
  br label %46

46:                                               ; preds = %38, %37
  %47 = phi i32 [ 7, %37 ], [ %45, %38 ]
  %48 = load i32*, i32** %7, align 8
  store i32 %47, i32* %48, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.mb_structure* @MB_Recon_B(%struct.pict_image* %0, %struct.mb_structure* %1, i8* %2, i32 %3, i32 %4, [73 x [90 x %struct.motionvector*]]* %5, %struct.mb_structure* %6, i32 %7, i32 %8) #0 {
  %10 = alloca %struct.pict_image*, align 8
  %11 = alloca %struct.mb_structure*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca [73 x [90 x %struct.motionvector*]]*, align 8
  %16 = alloca %struct.mb_structure*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca %struct.mb_structure*, align 8
  %31 = alloca %struct.mb_structure*, align 8
  %32 = alloca [5 x %struct.motionvector*], align 16
  store %struct.pict_image* %0, %struct.pict_image** %10, align 8
  store %struct.mb_structure* %1, %struct.mb_structure** %11, align 8
  store i8* %2, i8** %12, align 8
  store i32 %3, i32* %13, align 4
  store i32 %4, i32* %14, align 4
  store [73 x [90 x %struct.motionvector*]]* %5, [73 x [90 x %struct.motionvector*]]** %15, align 8
  store %struct.mb_structure* %6, %struct.mb_structure** %16, align 8
  store i32 %7, i32* %17, align 4
  store i32 %8, i32* %18, align 4
  %33 = call noalias i8* @malloc(i64 1536) #8
  %34 = bitcast i8* %33 to %struct.mb_structure*
  store %struct.mb_structure* %34, %struct.mb_structure** %30, align 8
  %35 = call noalias i8* @malloc(i64 1536) #8
  %36 = bitcast i8* %35 to %struct.mb_structure*
  store %struct.mb_structure* %36, %struct.mb_structure** %31, align 8
  store i32 0, i32* %21, align 4
  br label %37

37:                                               ; preds = %59, %9
  %38 = load i32, i32* %21, align 4
  %39 = icmp sle i32 %38, 4
  br i1 %39, label %40, label %62

40:                                               ; preds = %37
  %41 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %15, align 8
  %42 = load i32, i32* %21, align 4
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %41, i64 %43
  %45 = load i32, i32* %14, align 4
  %46 = sdiv i32 %45, 16
  %47 = add nsw i32 %46, 1
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %44, i64 0, i64 %48
  %50 = load i32, i32* %13, align 4
  %51 = sdiv i32 %50, 16
  %52 = add nsw i32 %51, 1
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %49, i64 0, i64 %53
  %55 = load %struct.motionvector*, %struct.motionvector** %54, align 8
  %56 = load i32, i32* %21, align 4
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %32, i64 0, i64 %57
  store %struct.motionvector* %55, %struct.motionvector** %58, align 8
  br label %59

59:                                               ; preds = %40
  %60 = load i32, i32* %21, align 4
  %61 = add nsw i32 %60, 1
  store i32 %61, i32* %21, align 4
  br label %37

62:                                               ; preds = %37
  %63 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %15, align 8
  %64 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %63, i64 5
  %65 = load i32, i32* %14, align 4
  %66 = sdiv i32 %65, 16
  %67 = add nsw i32 %66, 1
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %64, i64 0, i64 %68
  %70 = load i32, i32* %13, align 4
  %71 = sdiv i32 %70, 16
  %72 = add nsw i32 %71, 1
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %69, i64 0, i64 %73
  %75 = load %struct.motionvector*, %struct.motionvector** %74, align 8
  %76 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %75, i32 0, i32 0
  %77 = load i32, i32* %76, align 4
  store i32 %77, i32* %24, align 4
  %78 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %15, align 8
  %79 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %78, i64 5
  %80 = load i32, i32* %14, align 4
  %81 = sdiv i32 %80, 16
  %82 = add nsw i32 %81, 1
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %79, i64 0, i64 %83
  %85 = load i32, i32* %13, align 4
  %86 = sdiv i32 %85, 16
  %87 = add nsw i32 %86, 1
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %84, i64 0, i64 %88
  %90 = load %struct.motionvector*, %struct.motionvector** %89, align 8
  %91 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %90, i32 0, i32 1
  %92 = load i32, i32* %91, align 4
  store i32 %92, i32* %25, align 4
  %93 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %32, i64 0, i64 0
  %94 = load %struct.motionvector*, %struct.motionvector** %93, align 16
  %95 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %94, i32 0, i32 5
  %96 = load i32, i32* %95, align 4
  %97 = icmp eq i32 %96, 2
  br i1 %97, label %98, label %417

98:                                               ; preds = %62
  %99 = load i8*, i8** %12, align 8
  %100 = load i32, i32* %13, align 4
  %101 = load i32, i32* %14, align 4
  %102 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %32, i64 0, i64 1
  %103 = load %struct.motionvector*, %struct.motionvector** %102, align 8
  %104 = load %struct.mb_structure*, %struct.mb_structure** %31, align 8
  %105 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %104, i32 0, i32 0
  %106 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %105, i64 0, i64 0
  %107 = getelementptr inbounds [16 x i32], [16 x i32]* %106, i64 0, i64 0
  %108 = load i32, i32* %17, align 4
  %109 = load i32, i32* %18, align 4
  %110 = load i32, i32* %24, align 4
  %111 = load i32, i32* %25, align 4
  call void @FindForwLumPredPB(i8* %99, i32 %100, i32 %101, %struct.motionvector* %103, i32* %107, i32 %108, i32 %109, i32 %110, i32 %111, i32 8, i32 0)
  %112 = load i8*, i8** %12, align 8
  %113 = load i32, i32* %13, align 4
  %114 = load i32, i32* %14, align 4
  %115 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %32, i64 0, i64 2
  %116 = load %struct.motionvector*, %struct.motionvector** %115, align 16
  %117 = load %struct.mb_structure*, %struct.mb_structure** %31, align 8
  %118 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %117, i32 0, i32 0
  %119 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %118, i64 0, i64 0
  %120 = getelementptr inbounds [16 x i32], [16 x i32]* %119, i64 0, i64 8
  %121 = load i32, i32* %17, align 4
  %122 = load i32, i32* %18, align 4
  %123 = load i32, i32* %24, align 4
  %124 = load i32, i32* %25, align 4
  call void @FindForwLumPredPB(i8* %112, i32 %113, i32 %114, %struct.motionvector* %116, i32* %120, i32 %121, i32 %122, i32 %123, i32 %124, i32 8, i32 1)
  %125 = load i8*, i8** %12, align 8
  %126 = load i32, i32* %13, align 4
  %127 = load i32, i32* %14, align 4
  %128 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %32, i64 0, i64 3
  %129 = load %struct.motionvector*, %struct.motionvector** %128, align 8
  %130 = load %struct.mb_structure*, %struct.mb_structure** %31, align 8
  %131 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %130, i32 0, i32 0
  %132 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %131, i64 0, i64 8
  %133 = getelementptr inbounds [16 x i32], [16 x i32]* %132, i64 0, i64 0
  %134 = load i32, i32* %17, align 4
  %135 = load i32, i32* %18, align 4
  %136 = load i32, i32* %24, align 4
  %137 = load i32, i32* %25, align 4
  call void @FindForwLumPredPB(i8* %125, i32 %126, i32 %127, %struct.motionvector* %129, i32* %133, i32 %134, i32 %135, i32 %136, i32 %137, i32 8, i32 2)
  %138 = load i8*, i8** %12, align 8
  %139 = load i32, i32* %13, align 4
  %140 = load i32, i32* %14, align 4
  %141 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %32, i64 0, i64 4
  %142 = load %struct.motionvector*, %struct.motionvector** %141, align 16
  %143 = load %struct.mb_structure*, %struct.mb_structure** %31, align 8
  %144 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %143, i32 0, i32 0
  %145 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %144, i64 0, i64 8
  %146 = getelementptr inbounds [16 x i32], [16 x i32]* %145, i64 0, i64 8
  %147 = load i32, i32* %17, align 4
  %148 = load i32, i32* %18, align 4
  %149 = load i32, i32* %24, align 4
  %150 = load i32, i32* %25, align 4
  call void @FindForwLumPredPB(i8* %138, i32 %139, i32 %140, %struct.motionvector* %142, i32* %146, i32 %147, i32 %148, i32 %149, i32 %150, i32 8, i32 3)
  store i32 0, i32* %29, align 4
  store i32 0, i32* %28, align 4
  store i32 1, i32* %21, align 4
  br label %151

151:                                              ; preds = %199, %98
  %152 = load i32, i32* %21, align 4
  %153 = icmp sle i32 %152, 4
  br i1 %153, label %154, label %202

154:                                              ; preds = %151
  %155 = load i32, i32* %18, align 4
  %156 = load i32, i32* %21, align 4
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %32, i64 0, i64 %157
  %159 = load %struct.motionvector*, %struct.motionvector** %158, align 8
  %160 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %159, i32 0, i32 0
  %161 = load i32, i32* %160, align 4
  %162 = mul nsw i32 2, %161
  %163 = load i32, i32* %21, align 4
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %32, i64 0, i64 %164
  %166 = load %struct.motionvector*, %struct.motionvector** %165, align 8
  %167 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %166, i32 0, i32 2
  %168 = load i32, i32* %167, align 4
  %169 = add nsw i32 %162, %168
  %170 = mul nsw i32 %155, %169
  %171 = load i32, i32* %17, align 4
  %172 = sdiv i32 %170, %171
  %173 = load i32, i32* %24, align 4
  %174 = add nsw i32 %172, %173
  %175 = load i32, i32* %28, align 4
  %176 = add nsw i32 %175, %174
  store i32 %176, i32* %28, align 4
  %177 = load i32, i32* %18, align 4
  %178 = load i32, i32* %21, align 4
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %32, i64 0, i64 %179
  %181 = load %struct.motionvector*, %struct.motionvector** %180, align 8
  %182 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %181, i32 0, i32 1
  %183 = load i32, i32* %182, align 4
  %184 = mul nsw i32 2, %183
  %185 = load i32, i32* %21, align 4
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %32, i64 0, i64 %186
  %188 = load %struct.motionvector*, %struct.motionvector** %187, align 8
  %189 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %188, i32 0, i32 3
  %190 = load i32, i32* %189, align 4
  %191 = add nsw i32 %184, %190
  %192 = mul nsw i32 %177, %191
  %193 = load i32, i32* %17, align 4
  %194 = sdiv i32 %192, %193
  %195 = load i32, i32* %25, align 4
  %196 = add nsw i32 %194, %195
  %197 = load i32, i32* %29, align 4
  %198 = add nsw i32 %197, %196
  store i32 %198, i32* %29, align 4
  br label %199

199:                                              ; preds = %154
  %200 = load i32, i32* %21, align 4
  %201 = add nsw i32 %200, 1
  store i32 %201, i32* %21, align 4
  br label %151

202:                                              ; preds = %151
  %203 = load i32, i32* %28, align 4
  %204 = icmp slt i32 %203, 0
  %205 = zext i1 %204 to i64
  %206 = select i1 %204, i32 -1, i32 1
  %207 = load i32, i32* %28, align 4
  %208 = call i32 @abs(i32 %207) #11
  %209 = srem i32 %208, 16
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds [16 x i32], [16 x i32]* @roundtab, i64 0, i64 %210
  %212 = load i32, i32* %211, align 4
  %213 = load i32, i32* %28, align 4
  %214 = call i32 @abs(i32 %213) #11
  %215 = sdiv i32 %214, 16
  %216 = mul nsw i32 %215, 2
  %217 = add nsw i32 %212, %216
  %218 = mul nsw i32 %206, %217
  store i32 %218, i32* %22, align 4
  %219 = load i32, i32* %29, align 4
  %220 = icmp slt i32 %219, 0
  %221 = zext i1 %220 to i64
  %222 = select i1 %220, i32 -1, i32 1
  %223 = load i32, i32* %29, align 4
  %224 = call i32 @abs(i32 %223) #11
  %225 = srem i32 %224, 16
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds [16 x i32], [16 x i32]* @roundtab, i64 0, i64 %226
  %228 = load i32, i32* %227, align 4
  %229 = load i32, i32* %29, align 4
  %230 = call i32 @abs(i32 %229) #11
  %231 = sdiv i32 %230, 16
  %232 = mul nsw i32 %231, 2
  %233 = add nsw i32 %228, %232
  %234 = mul nsw i32 %222, %233
  store i32 %234, i32* %23, align 4
  %235 = load i32, i32* %13, align 4
  %236 = load i32, i32* %14, align 4
  %237 = load i32, i32* %22, align 4
  %238 = load i32, i32* %23, align 4
  %239 = load %struct.pict_image*, %struct.pict_image** %10, align 8
  %240 = load %struct.mb_structure*, %struct.mb_structure** %31, align 8
  call void @FindChromBlock_P(i32 %235, i32 %236, i32 %237, i32 %238, %struct.pict_image* %239, %struct.mb_structure* %240)
  %241 = load %struct.mb_structure*, %struct.mb_structure** %16, align 8
  %242 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %241, i32 0, i32 0
  %243 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %242, i64 0, i64 0
  %244 = getelementptr inbounds [16 x i32], [16 x i32]* %243, i64 0, i64 0
  %245 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %32, i64 0, i64 1
  %246 = load %struct.motionvector*, %struct.motionvector** %245, align 8
  %247 = load %struct.mb_structure*, %struct.mb_structure** %31, align 8
  %248 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %247, i32 0, i32 0
  %249 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %248, i64 0, i64 0
  %250 = getelementptr inbounds [16 x i32], [16 x i32]* %249, i64 0, i64 0
  %251 = load i32, i32* %17, align 4
  %252 = load i32, i32* %18, align 4
  %253 = load i32, i32* %24, align 4
  %254 = load i32, i32* %25, align 4
  call void @FindBiDirLumPredPB(i32* %244, %struct.motionvector* %246, i32* %250, i32 %251, i32 %252, i32 %253, i32 %254, i32 0, i32 0)
  %255 = load %struct.mb_structure*, %struct.mb_structure** %16, align 8
  %256 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %255, i32 0, i32 0
  %257 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %256, i64 0, i64 0
  %258 = getelementptr inbounds [16 x i32], [16 x i32]* %257, i64 0, i64 8
  %259 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %32, i64 0, i64 2
  %260 = load %struct.motionvector*, %struct.motionvector** %259, align 16
  %261 = load %struct.mb_structure*, %struct.mb_structure** %31, align 8
  %262 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %261, i32 0, i32 0
  %263 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %262, i64 0, i64 0
  %264 = getelementptr inbounds [16 x i32], [16 x i32]* %263, i64 0, i64 8
  %265 = load i32, i32* %17, align 4
  %266 = load i32, i32* %18, align 4
  %267 = load i32, i32* %24, align 4
  %268 = load i32, i32* %25, align 4
  call void @FindBiDirLumPredPB(i32* %258, %struct.motionvector* %260, i32* %264, i32 %265, i32 %266, i32 %267, i32 %268, i32 1, i32 0)
  %269 = load %struct.mb_structure*, %struct.mb_structure** %16, align 8
  %270 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %269, i32 0, i32 0
  %271 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %270, i64 0, i64 8
  %272 = getelementptr inbounds [16 x i32], [16 x i32]* %271, i64 0, i64 0
  %273 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %32, i64 0, i64 3
  %274 = load %struct.motionvector*, %struct.motionvector** %273, align 8
  %275 = load %struct.mb_structure*, %struct.mb_structure** %31, align 8
  %276 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %275, i32 0, i32 0
  %277 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %276, i64 0, i64 8
  %278 = getelementptr inbounds [16 x i32], [16 x i32]* %277, i64 0, i64 0
  %279 = load i32, i32* %17, align 4
  %280 = load i32, i32* %18, align 4
  %281 = load i32, i32* %24, align 4
  %282 = load i32, i32* %25, align 4
  call void @FindBiDirLumPredPB(i32* %272, %struct.motionvector* %274, i32* %278, i32 %279, i32 %280, i32 %281, i32 %282, i32 0, i32 1)
  %283 = load %struct.mb_structure*, %struct.mb_structure** %16, align 8
  %284 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %283, i32 0, i32 0
  %285 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %284, i64 0, i64 8
  %286 = getelementptr inbounds [16 x i32], [16 x i32]* %285, i64 0, i64 8
  %287 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %32, i64 0, i64 4
  %288 = load %struct.motionvector*, %struct.motionvector** %287, align 16
  %289 = load %struct.mb_structure*, %struct.mb_structure** %31, align 8
  %290 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %289, i32 0, i32 0
  %291 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %290, i64 0, i64 8
  %292 = getelementptr inbounds [16 x i32], [16 x i32]* %291, i64 0, i64 8
  %293 = load i32, i32* %17, align 4
  %294 = load i32, i32* %18, align 4
  %295 = load i32, i32* %24, align 4
  %296 = load i32, i32* %25, align 4
  call void @FindBiDirLumPredPB(i32* %286, %struct.motionvector* %288, i32* %292, i32 %293, i32 %294, i32 %295, i32 %296, i32 1, i32 1)
  store i32 0, i32* %29, align 4
  store i32 0, i32* %28, align 4
  store i32 1, i32* %21, align 4
  br label %297

297:                                              ; preds = %377, %202
  %298 = load i32, i32* %21, align 4
  %299 = icmp sle i32 %298, 4
  br i1 %299, label %300, label %380

300:                                              ; preds = %297
  %301 = load i32, i32* %21, align 4
  %302 = sext i32 %301 to i64
  %303 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %32, i64 0, i64 %302
  %304 = load %struct.motionvector*, %struct.motionvector** %303, align 8
  %305 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %304, i32 0, i32 0
  %306 = load i32, i32* %305, align 4
  %307 = mul nsw i32 2, %306
  %308 = load i32, i32* %21, align 4
  %309 = sext i32 %308 to i64
  %310 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %32, i64 0, i64 %309
  %311 = load %struct.motionvector*, %struct.motionvector** %310, align 8
  %312 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %311, i32 0, i32 2
  %313 = load i32, i32* %312, align 4
  %314 = add nsw i32 %307, %313
  store i32 %314, i32* %26, align 4
  %315 = load i32, i32* %21, align 4
  %316 = sext i32 %315 to i64
  %317 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %32, i64 0, i64 %316
  %318 = load %struct.motionvector*, %struct.motionvector** %317, align 8
  %319 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %318, i32 0, i32 1
  %320 = load i32, i32* %319, align 4
  %321 = mul nsw i32 2, %320
  %322 = load i32, i32* %21, align 4
  %323 = sext i32 %322 to i64
  %324 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %32, i64 0, i64 %323
  %325 = load %struct.motionvector*, %struct.motionvector** %324, align 8
  %326 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %325, i32 0, i32 3
  %327 = load i32, i32* %326, align 4
  %328 = add nsw i32 %321, %327
  store i32 %328, i32* %27, align 4
  %329 = load i32, i32* %24, align 4
  %330 = icmp eq i32 %329, 0
  br i1 %330, label %331, label %339

331:                                              ; preds = %300
  %332 = load i32, i32* %18, align 4
  %333 = load i32, i32* %17, align 4
  %334 = sub nsw i32 %332, %333
  %335 = load i32, i32* %26, align 4
  %336 = mul nsw i32 %334, %335
  %337 = load i32, i32* %17, align 4
  %338 = sdiv i32 %336, %337
  br label %349

339:                                              ; preds = %300
  %340 = load i32, i32* %18, align 4
  %341 = load i32, i32* %26, align 4
  %342 = mul nsw i32 %340, %341
  %343 = load i32, i32* %17, align 4
  %344 = sdiv i32 %342, %343
  %345 = load i32, i32* %24, align 4
  %346 = add nsw i32 %344, %345
  %347 = load i32, i32* %26, align 4
  %348 = sub nsw i32 %346, %347
  br label %349

349:                                              ; preds = %339, %331
  %350 = phi i32 [ %338, %331 ], [ %348, %339 ]
  %351 = load i32, i32* %28, align 4
  %352 = add nsw i32 %351, %350
  store i32 %352, i32* %28, align 4
  %353 = load i32, i32* %25, align 4
  %354 = icmp eq i32 %353, 0
  br i1 %354, label %355, label %363

355:                                              ; preds = %349
  %356 = load i32, i32* %18, align 4
  %357 = load i32, i32* %17, align 4
  %358 = sub nsw i32 %356, %357
  %359 = load i32, i32* %27, align 4
  %360 = mul nsw i32 %358, %359
  %361 = load i32, i32* %17, align 4
  %362 = sdiv i32 %360, %361
  br label %373

363:                                              ; preds = %349
  %364 = load i32, i32* %18, align 4
  %365 = load i32, i32* %27, align 4
  %366 = mul nsw i32 %364, %365
  %367 = load i32, i32* %17, align 4
  %368 = sdiv i32 %366, %367
  %369 = load i32, i32* %25, align 4
  %370 = add nsw i32 %368, %369
  %371 = load i32, i32* %27, align 4
  %372 = sub nsw i32 %370, %371
  br label %373

373:                                              ; preds = %363, %355
  %374 = phi i32 [ %362, %355 ], [ %372, %363 ]
  %375 = load i32, i32* %29, align 4
  %376 = add nsw i32 %375, %374
  store i32 %376, i32* %29, align 4
  br label %377

377:                                              ; preds = %373
  %378 = load i32, i32* %21, align 4
  %379 = add nsw i32 %378, 1
  store i32 %379, i32* %21, align 4
  br label %297

380:                                              ; preds = %297
  %381 = load i32, i32* %28, align 4
  %382 = icmp slt i32 %381, 0
  %383 = zext i1 %382 to i64
  %384 = select i1 %382, i32 -1, i32 1
  %385 = load i32, i32* %28, align 4
  %386 = call i32 @abs(i32 %385) #11
  %387 = srem i32 %386, 16
  %388 = sext i32 %387 to i64
  %389 = getelementptr inbounds [16 x i32], [16 x i32]* @roundtab, i64 0, i64 %388
  %390 = load i32, i32* %389, align 4
  %391 = load i32, i32* %28, align 4
  %392 = call i32 @abs(i32 %391) #11
  %393 = sdiv i32 %392, 16
  %394 = mul nsw i32 %393, 2
  %395 = add nsw i32 %390, %394
  %396 = mul nsw i32 %384, %395
  store i32 %396, i32* %22, align 4
  %397 = load i32, i32* %29, align 4
  %398 = icmp slt i32 %397, 0
  %399 = zext i1 %398 to i64
  %400 = select i1 %398, i32 -1, i32 1
  %401 = load i32, i32* %29, align 4
  %402 = call i32 @abs(i32 %401) #11
  %403 = srem i32 %402, 16
  %404 = sext i32 %403 to i64
  %405 = getelementptr inbounds [16 x i32], [16 x i32]* @roundtab, i64 0, i64 %404
  %406 = load i32, i32* %405, align 4
  %407 = load i32, i32* %29, align 4
  %408 = call i32 @abs(i32 %407) #11
  %409 = sdiv i32 %408, 16
  %410 = mul nsw i32 %409, 2
  %411 = add nsw i32 %406, %410
  %412 = mul nsw i32 %400, %411
  store i32 %412, i32* %23, align 4
  %413 = load %struct.mb_structure*, %struct.mb_structure** %16, align 8
  %414 = load i32, i32* %22, align 4
  %415 = load i32, i32* %23, align 4
  %416 = load %struct.mb_structure*, %struct.mb_structure** %31, align 8
  call void @FindBiDirChrPredPB(%struct.mb_structure* %413, i32 %414, i32 %415, %struct.mb_structure* %416)
  br label %663

417:                                              ; preds = %62
  %418 = load i8*, i8** %12, align 8
  %419 = load i32, i32* %13, align 4
  %420 = load i32, i32* %14, align 4
  %421 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %32, i64 0, i64 0
  %422 = load %struct.motionvector*, %struct.motionvector** %421, align 16
  %423 = load %struct.mb_structure*, %struct.mb_structure** %31, align 8
  %424 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %423, i32 0, i32 0
  %425 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %424, i64 0, i64 0
  %426 = getelementptr inbounds [16 x i32], [16 x i32]* %425, i64 0, i64 0
  %427 = load i32, i32* %17, align 4
  %428 = load i32, i32* %18, align 4
  %429 = load i32, i32* %24, align 4
  %430 = load i32, i32* %25, align 4
  call void @FindForwLumPredPB(i8* %418, i32 %419, i32 %420, %struct.motionvector* %422, i32* %426, i32 %427, i32 %428, i32 %429, i32 %430, i32 16, i32 0)
  %431 = load i32, i32* %18, align 4
  %432 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %32, i64 0, i64 0
  %433 = load %struct.motionvector*, %struct.motionvector** %432, align 16
  %434 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %433, i32 0, i32 0
  %435 = load i32, i32* %434, align 4
  %436 = mul nsw i32 2, %435
  %437 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %32, i64 0, i64 0
  %438 = load %struct.motionvector*, %struct.motionvector** %437, align 16
  %439 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %438, i32 0, i32 2
  %440 = load i32, i32* %439, align 4
  %441 = add nsw i32 %436, %440
  %442 = mul nsw i32 %431, %441
  %443 = load i32, i32* %17, align 4
  %444 = sdiv i32 %442, %443
  %445 = load i32, i32* %24, align 4
  %446 = add nsw i32 %444, %445
  %447 = mul nsw i32 4, %446
  store i32 %447, i32* %28, align 4
  %448 = load i32, i32* %18, align 4
  %449 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %32, i64 0, i64 0
  %450 = load %struct.motionvector*, %struct.motionvector** %449, align 16
  %451 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %450, i32 0, i32 1
  %452 = load i32, i32* %451, align 4
  %453 = mul nsw i32 2, %452
  %454 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %32, i64 0, i64 0
  %455 = load %struct.motionvector*, %struct.motionvector** %454, align 16
  %456 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %455, i32 0, i32 3
  %457 = load i32, i32* %456, align 4
  %458 = add nsw i32 %453, %457
  %459 = mul nsw i32 %448, %458
  %460 = load i32, i32* %17, align 4
  %461 = sdiv i32 %459, %460
  %462 = load i32, i32* %25, align 4
  %463 = add nsw i32 %461, %462
  %464 = mul nsw i32 4, %463
  store i32 %464, i32* %29, align 4
  %465 = load i32, i32* %28, align 4
  %466 = icmp slt i32 %465, 0
  %467 = zext i1 %466 to i64
  %468 = select i1 %466, i32 -1, i32 1
  %469 = load i32, i32* %28, align 4
  %470 = call i32 @abs(i32 %469) #11
  %471 = srem i32 %470, 16
  %472 = sext i32 %471 to i64
  %473 = getelementptr inbounds [16 x i32], [16 x i32]* @roundtab, i64 0, i64 %472
  %474 = load i32, i32* %473, align 4
  %475 = load i32, i32* %28, align 4
  %476 = call i32 @abs(i32 %475) #11
  %477 = sdiv i32 %476, 16
  %478 = mul nsw i32 %477, 2
  %479 = add nsw i32 %474, %478
  %480 = mul nsw i32 %468, %479
  store i32 %480, i32* %22, align 4
  %481 = load i32, i32* %29, align 4
  %482 = icmp slt i32 %481, 0
  %483 = zext i1 %482 to i64
  %484 = select i1 %482, i32 -1, i32 1
  %485 = load i32, i32* %29, align 4
  %486 = call i32 @abs(i32 %485) #11
  %487 = srem i32 %486, 16
  %488 = sext i32 %487 to i64
  %489 = getelementptr inbounds [16 x i32], [16 x i32]* @roundtab, i64 0, i64 %488
  %490 = load i32, i32* %489, align 4
  %491 = load i32, i32* %29, align 4
  %492 = call i32 @abs(i32 %491) #11
  %493 = sdiv i32 %492, 16
  %494 = mul nsw i32 %493, 2
  %495 = add nsw i32 %490, %494
  %496 = mul nsw i32 %484, %495
  store i32 %496, i32* %23, align 4
  %497 = load i32, i32* %13, align 4
  %498 = load i32, i32* %14, align 4
  %499 = load i32, i32* %22, align 4
  %500 = load i32, i32* %23, align 4
  %501 = load %struct.pict_image*, %struct.pict_image** %10, align 8
  %502 = load %struct.mb_structure*, %struct.mb_structure** %31, align 8
  call void @FindChromBlock_P(i32 %497, i32 %498, i32 %499, i32 %500, %struct.pict_image* %501, %struct.mb_structure* %502)
  %503 = load %struct.mb_structure*, %struct.mb_structure** %16, align 8
  %504 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %503, i32 0, i32 0
  %505 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %504, i64 0, i64 0
  %506 = getelementptr inbounds [16 x i32], [16 x i32]* %505, i64 0, i64 0
  %507 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %32, i64 0, i64 0
  %508 = load %struct.motionvector*, %struct.motionvector** %507, align 16
  %509 = load %struct.mb_structure*, %struct.mb_structure** %31, align 8
  %510 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %509, i32 0, i32 0
  %511 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %510, i64 0, i64 0
  %512 = getelementptr inbounds [16 x i32], [16 x i32]* %511, i64 0, i64 0
  %513 = load i32, i32* %17, align 4
  %514 = load i32, i32* %18, align 4
  %515 = load i32, i32* %24, align 4
  %516 = load i32, i32* %25, align 4
  call void @FindBiDirLumPredPB(i32* %506, %struct.motionvector* %508, i32* %512, i32 %513, i32 %514, i32 %515, i32 %516, i32 0, i32 0)
  %517 = load %struct.mb_structure*, %struct.mb_structure** %16, align 8
  %518 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %517, i32 0, i32 0
  %519 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %518, i64 0, i64 0
  %520 = getelementptr inbounds [16 x i32], [16 x i32]* %519, i64 0, i64 8
  %521 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %32, i64 0, i64 0
  %522 = load %struct.motionvector*, %struct.motionvector** %521, align 16
  %523 = load %struct.mb_structure*, %struct.mb_structure** %31, align 8
  %524 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %523, i32 0, i32 0
  %525 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %524, i64 0, i64 0
  %526 = getelementptr inbounds [16 x i32], [16 x i32]* %525, i64 0, i64 8
  %527 = load i32, i32* %17, align 4
  %528 = load i32, i32* %18, align 4
  %529 = load i32, i32* %24, align 4
  %530 = load i32, i32* %25, align 4
  call void @FindBiDirLumPredPB(i32* %520, %struct.motionvector* %522, i32* %526, i32 %527, i32 %528, i32 %529, i32 %530, i32 1, i32 0)
  %531 = load %struct.mb_structure*, %struct.mb_structure** %16, align 8
  %532 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %531, i32 0, i32 0
  %533 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %532, i64 0, i64 8
  %534 = getelementptr inbounds [16 x i32], [16 x i32]* %533, i64 0, i64 0
  %535 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %32, i64 0, i64 0
  %536 = load %struct.motionvector*, %struct.motionvector** %535, align 16
  %537 = load %struct.mb_structure*, %struct.mb_structure** %31, align 8
  %538 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %537, i32 0, i32 0
  %539 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %538, i64 0, i64 8
  %540 = getelementptr inbounds [16 x i32], [16 x i32]* %539, i64 0, i64 0
  %541 = load i32, i32* %17, align 4
  %542 = load i32, i32* %18, align 4
  %543 = load i32, i32* %24, align 4
  %544 = load i32, i32* %25, align 4
  call void @FindBiDirLumPredPB(i32* %534, %struct.motionvector* %536, i32* %540, i32 %541, i32 %542, i32 %543, i32 %544, i32 0, i32 1)
  %545 = load %struct.mb_structure*, %struct.mb_structure** %16, align 8
  %546 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %545, i32 0, i32 0
  %547 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %546, i64 0, i64 8
  %548 = getelementptr inbounds [16 x i32], [16 x i32]* %547, i64 0, i64 8
  %549 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %32, i64 0, i64 0
  %550 = load %struct.motionvector*, %struct.motionvector** %549, align 16
  %551 = load %struct.mb_structure*, %struct.mb_structure** %31, align 8
  %552 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %551, i32 0, i32 0
  %553 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %552, i64 0, i64 8
  %554 = getelementptr inbounds [16 x i32], [16 x i32]* %553, i64 0, i64 8
  %555 = load i32, i32* %17, align 4
  %556 = load i32, i32* %18, align 4
  %557 = load i32, i32* %24, align 4
  %558 = load i32, i32* %25, align 4
  call void @FindBiDirLumPredPB(i32* %548, %struct.motionvector* %550, i32* %554, i32 %555, i32 %556, i32 %557, i32 %558, i32 1, i32 1)
  %559 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %32, i64 0, i64 0
  %560 = load %struct.motionvector*, %struct.motionvector** %559, align 16
  %561 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %560, i32 0, i32 0
  %562 = load i32, i32* %561, align 4
  %563 = mul nsw i32 2, %562
  %564 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %32, i64 0, i64 0
  %565 = load %struct.motionvector*, %struct.motionvector** %564, align 16
  %566 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %565, i32 0, i32 2
  %567 = load i32, i32* %566, align 4
  %568 = add nsw i32 %563, %567
  store i32 %568, i32* %26, align 4
  %569 = load i32, i32* %24, align 4
  %570 = icmp eq i32 %569, 0
  br i1 %570, label %571, label %579

571:                                              ; preds = %417
  %572 = load i32, i32* %18, align 4
  %573 = load i32, i32* %17, align 4
  %574 = sub nsw i32 %572, %573
  %575 = load i32, i32* %26, align 4
  %576 = mul nsw i32 %574, %575
  %577 = load i32, i32* %17, align 4
  %578 = sdiv i32 %576, %577
  br label %589

579:                                              ; preds = %417
  %580 = load i32, i32* %18, align 4
  %581 = load i32, i32* %26, align 4
  %582 = mul nsw i32 %580, %581
  %583 = load i32, i32* %17, align 4
  %584 = sdiv i32 %582, %583
  %585 = load i32, i32* %24, align 4
  %586 = add nsw i32 %584, %585
  %587 = load i32, i32* %26, align 4
  %588 = sub nsw i32 %586, %587
  br label %589

589:                                              ; preds = %579, %571
  %590 = phi i32 [ %578, %571 ], [ %588, %579 ]
  store i32 %590, i32* %28, align 4
  %591 = load i32, i32* %28, align 4
  %592 = mul nsw i32 %591, 4
  store i32 %592, i32* %28, align 4
  %593 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %32, i64 0, i64 0
  %594 = load %struct.motionvector*, %struct.motionvector** %593, align 16
  %595 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %594, i32 0, i32 1
  %596 = load i32, i32* %595, align 4
  %597 = mul nsw i32 2, %596
  %598 = getelementptr inbounds [5 x %struct.motionvector*], [5 x %struct.motionvector*]* %32, i64 0, i64 0
  %599 = load %struct.motionvector*, %struct.motionvector** %598, align 16
  %600 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %599, i32 0, i32 3
  %601 = load i32, i32* %600, align 4
  %602 = add nsw i32 %597, %601
  store i32 %602, i32* %27, align 4
  %603 = load i32, i32* %25, align 4
  %604 = icmp eq i32 %603, 0
  br i1 %604, label %605, label %613

605:                                              ; preds = %589
  %606 = load i32, i32* %18, align 4
  %607 = load i32, i32* %17, align 4
  %608 = sub nsw i32 %606, %607
  %609 = load i32, i32* %27, align 4
  %610 = mul nsw i32 %608, %609
  %611 = load i32, i32* %17, align 4
  %612 = sdiv i32 %610, %611
  br label %623

613:                                              ; preds = %589
  %614 = load i32, i32* %18, align 4
  %615 = load i32, i32* %27, align 4
  %616 = mul nsw i32 %614, %615
  %617 = load i32, i32* %17, align 4
  %618 = sdiv i32 %616, %617
  %619 = load i32, i32* %25, align 4
  %620 = add nsw i32 %618, %619
  %621 = load i32, i32* %27, align 4
  %622 = sub nsw i32 %620, %621
  br label %623

623:                                              ; preds = %613, %605
  %624 = phi i32 [ %612, %605 ], [ %622, %613 ]
  store i32 %624, i32* %29, align 4
  %625 = load i32, i32* %29, align 4
  %626 = mul nsw i32 %625, 4
  store i32 %626, i32* %29, align 4
  %627 = load i32, i32* %28, align 4
  %628 = icmp slt i32 %627, 0
  %629 = zext i1 %628 to i64
  %630 = select i1 %628, i32 -1, i32 1
  %631 = load i32, i32* %28, align 4
  %632 = call i32 @abs(i32 %631) #11
  %633 = srem i32 %632, 16
  %634 = sext i32 %633 to i64
  %635 = getelementptr inbounds [16 x i32], [16 x i32]* @roundtab, i64 0, i64 %634
  %636 = load i32, i32* %635, align 4
  %637 = load i32, i32* %28, align 4
  %638 = call i32 @abs(i32 %637) #11
  %639 = sdiv i32 %638, 16
  %640 = mul nsw i32 %639, 2
  %641 = add nsw i32 %636, %640
  %642 = mul nsw i32 %630, %641
  store i32 %642, i32* %22, align 4
  %643 = load i32, i32* %29, align 4
  %644 = icmp slt i32 %643, 0
  %645 = zext i1 %644 to i64
  %646 = select i1 %644, i32 -1, i32 1
  %647 = load i32, i32* %29, align 4
  %648 = call i32 @abs(i32 %647) #11
  %649 = srem i32 %648, 16
  %650 = sext i32 %649 to i64
  %651 = getelementptr inbounds [16 x i32], [16 x i32]* @roundtab, i64 0, i64 %650
  %652 = load i32, i32* %651, align 4
  %653 = load i32, i32* %29, align 4
  %654 = call i32 @abs(i32 %653) #11
  %655 = sdiv i32 %654, 16
  %656 = mul nsw i32 %655, 2
  %657 = add nsw i32 %652, %656
  %658 = mul nsw i32 %646, %657
  store i32 %658, i32* %23, align 4
  %659 = load %struct.mb_structure*, %struct.mb_structure** %16, align 8
  %660 = load i32, i32* %22, align 4
  %661 = load i32, i32* %23, align 4
  %662 = load %struct.mb_structure*, %struct.mb_structure** %31, align 8
  call void @FindBiDirChrPredPB(%struct.mb_structure* %659, i32 %660, i32 %661, %struct.mb_structure* %662)
  br label %663

663:                                              ; preds = %623, %380
  store i32 0, i32* %20, align 4
  br label %664

664:                                              ; preds = %703, %663
  %665 = load i32, i32* %20, align 4
  %666 = icmp slt i32 %665, 16
  br i1 %666, label %667, label %706

667:                                              ; preds = %664
  store i32 0, i32* %19, align 4
  br label %668

668:                                              ; preds = %699, %667
  %669 = load i32, i32* %19, align 4
  %670 = icmp slt i32 %669, 16
  br i1 %670, label %671, label %702

671:                                              ; preds = %668
  %672 = load %struct.mb_structure*, %struct.mb_structure** %31, align 8
  %673 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %672, i32 0, i32 0
  %674 = load i32, i32* %20, align 4
  %675 = sext i32 %674 to i64
  %676 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %673, i64 0, i64 %675
  %677 = load i32, i32* %19, align 4
  %678 = sext i32 %677 to i64
  %679 = getelementptr inbounds [16 x i32], [16 x i32]* %676, i64 0, i64 %678
  %680 = load i32, i32* %679, align 4
  %681 = load %struct.mb_structure*, %struct.mb_structure** %11, align 8
  %682 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %681, i32 0, i32 0
  %683 = load i32, i32* %20, align 4
  %684 = sext i32 %683 to i64
  %685 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %682, i64 0, i64 %684
  %686 = load i32, i32* %19, align 4
  %687 = sext i32 %686 to i64
  %688 = getelementptr inbounds [16 x i32], [16 x i32]* %685, i64 0, i64 %687
  %689 = load i32, i32* %688, align 4
  %690 = add nsw i32 %680, %689
  %691 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  %692 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %691, i32 0, i32 0
  %693 = load i32, i32* %20, align 4
  %694 = sext i32 %693 to i64
  %695 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %692, i64 0, i64 %694
  %696 = load i32, i32* %19, align 4
  %697 = sext i32 %696 to i64
  %698 = getelementptr inbounds [16 x i32], [16 x i32]* %695, i64 0, i64 %697
  store i32 %690, i32* %698, align 4
  br label %699

699:                                              ; preds = %671
  %700 = load i32, i32* %19, align 4
  %701 = add nsw i32 %700, 1
  store i32 %701, i32* %19, align 4
  br label %668

702:                                              ; preds = %668
  br label %703

703:                                              ; preds = %702
  %704 = load i32, i32* %20, align 4
  %705 = add nsw i32 %704, 1
  store i32 %705, i32* %20, align 4
  br label %664

706:                                              ; preds = %664
  store i32 0, i32* %20, align 4
  br label %707

707:                                              ; preds = %773, %706
  %708 = load i32, i32* %20, align 4
  %709 = icmp slt i32 %708, 8
  br i1 %709, label %710, label %776

710:                                              ; preds = %707
  store i32 0, i32* %19, align 4
  br label %711

711:                                              ; preds = %769, %710
  %712 = load i32, i32* %19, align 4
  %713 = icmp slt i32 %712, 8
  br i1 %713, label %714, label %772

714:                                              ; preds = %711
  %715 = load %struct.mb_structure*, %struct.mb_structure** %31, align 8
  %716 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %715, i32 0, i32 1
  %717 = load i32, i32* %20, align 4
  %718 = sext i32 %717 to i64
  %719 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %716, i64 0, i64 %718
  %720 = load i32, i32* %19, align 4
  %721 = sext i32 %720 to i64
  %722 = getelementptr inbounds [8 x i32], [8 x i32]* %719, i64 0, i64 %721
  %723 = load i32, i32* %722, align 4
  %724 = load %struct.mb_structure*, %struct.mb_structure** %11, align 8
  %725 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %724, i32 0, i32 1
  %726 = load i32, i32* %20, align 4
  %727 = sext i32 %726 to i64
  %728 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %725, i64 0, i64 %727
  %729 = load i32, i32* %19, align 4
  %730 = sext i32 %729 to i64
  %731 = getelementptr inbounds [8 x i32], [8 x i32]* %728, i64 0, i64 %730
  %732 = load i32, i32* %731, align 4
  %733 = add nsw i32 %723, %732
  %734 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  %735 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %734, i32 0, i32 1
  %736 = load i32, i32* %20, align 4
  %737 = sext i32 %736 to i64
  %738 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %735, i64 0, i64 %737
  %739 = load i32, i32* %19, align 4
  %740 = sext i32 %739 to i64
  %741 = getelementptr inbounds [8 x i32], [8 x i32]* %738, i64 0, i64 %740
  store i32 %733, i32* %741, align 4
  %742 = load %struct.mb_structure*, %struct.mb_structure** %31, align 8
  %743 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %742, i32 0, i32 2
  %744 = load i32, i32* %20, align 4
  %745 = sext i32 %744 to i64
  %746 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %743, i64 0, i64 %745
  %747 = load i32, i32* %19, align 4
  %748 = sext i32 %747 to i64
  %749 = getelementptr inbounds [8 x i32], [8 x i32]* %746, i64 0, i64 %748
  %750 = load i32, i32* %749, align 4
  %751 = load %struct.mb_structure*, %struct.mb_structure** %11, align 8
  %752 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %751, i32 0, i32 2
  %753 = load i32, i32* %20, align 4
  %754 = sext i32 %753 to i64
  %755 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %752, i64 0, i64 %754
  %756 = load i32, i32* %19, align 4
  %757 = sext i32 %756 to i64
  %758 = getelementptr inbounds [8 x i32], [8 x i32]* %755, i64 0, i64 %757
  %759 = load i32, i32* %758, align 4
  %760 = add nsw i32 %750, %759
  %761 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  %762 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %761, i32 0, i32 2
  %763 = load i32, i32* %20, align 4
  %764 = sext i32 %763 to i64
  %765 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %762, i64 0, i64 %764
  %766 = load i32, i32* %19, align 4
  %767 = sext i32 %766 to i64
  %768 = getelementptr inbounds [8 x i32], [8 x i32]* %765, i64 0, i64 %767
  store i32 %760, i32* %768, align 4
  br label %769

769:                                              ; preds = %714
  %770 = load i32, i32* %19, align 4
  %771 = add nsw i32 %770, 1
  store i32 %771, i32* %19, align 4
  br label %711

772:                                              ; preds = %711
  br label %773

773:                                              ; preds = %772
  %774 = load i32, i32* %20, align 4
  %775 = add nsw i32 %774, 1
  store i32 %775, i32* %20, align 4
  br label %707

776:                                              ; preds = %707
  %777 = load %struct.mb_structure*, %struct.mb_structure** %31, align 8
  %778 = bitcast %struct.mb_structure* %777 to i8*
  call void @free(i8* %778) #8
  %779 = load %struct.mb_structure*, %struct.mb_structure** %30, align 8
  ret %struct.mb_structure* %779
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @FindHalfPel(i32 %0, i32 %1, %struct.motionvector* %2, i8* %3, i32* %4, i32 %5, i32 %6) #0 {
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.motionvector*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i32*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  %27 = alloca i32, align 4
  %28 = alloca i32, align 4
  %29 = alloca [9 x %struct.point], align 16
  store i32 %0, i32* %8, align 4
  store i32 %1, i32* %9, align 4
  store %struct.motionvector* %2, %struct.motionvector** %10, align 8
  store i8* %3, i8** %11, align 8
  store i32* %4, i32** %12, align 8
  store i32 %5, i32* %13, align 4
  store i32 %6, i32* %14, align 4
  store i32 -1, i32* %19, align 4
  store i32 1, i32* %21, align 4
  store i32 -1, i32* %20, align 4
  store i32 1, i32* %22, align 4
  %30 = load i32, i32* %8, align 4
  %31 = load %struct.motionvector*, %struct.motionvector** %10, align 8
  %32 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %31, i32 0, i32 0
  %33 = load i32, i32* %32, align 4
  %34 = add nsw i32 %30, %33
  store i32 %34, i32* %23, align 4
  %35 = load i32, i32* %9, align 4
  %36 = load %struct.motionvector*, %struct.motionvector** %10, align 8
  %37 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %36, i32 0, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = add nsw i32 %35, %38
  store i32 %39, i32* %24, align 4
  %40 = load i32, i32* %14, align 4
  %41 = and i32 %40, 1
  %42 = shl i32 %41, 3
  %43 = load i32, i32* %23, align 4
  %44 = add nsw i32 %43, %42
  store i32 %44, i32* %23, align 4
  %45 = load i32, i32* %14, align 4
  %46 = and i32 %45, 2
  %47 = shl i32 %46, 2
  %48 = load i32, i32* %24, align 4
  %49 = add nsw i32 %48, %47
  store i32 %49, i32* %24, align 4
  %50 = load i32, i32* @mv_outside_frame, align 4
  %51 = icmp ne i32 %50, 0
  br i1 %51, label %52, label %59

52:                                               ; preds = %7
  %53 = load i32, i32* @pels, align 4
  %54 = load i32, i32* @long_vectors, align 4
  %55 = icmp ne i32 %54, 0
  %56 = zext i1 %55 to i64
  %57 = select i1 %55, i32 64, i32 32
  %58 = add nsw i32 %53, %57
  br label %61

59:                                               ; preds = %7
  %60 = load i32, i32* @pels, align 4
  br label %61

61:                                               ; preds = %59, %52
  %62 = phi i32 [ %58, %52 ], [ %60, %59 ]
  store i32 %62, i32* %25, align 4
  %63 = load i32, i32* @mv_outside_frame, align 4
  %64 = icmp ne i32 %63, 0
  br i1 %64, label %88, label %65

65:                                               ; preds = %61
  %66 = load i32, i32* %23, align 4
  %67 = icmp sle i32 %66, 0
  br i1 %67, label %68, label %69

68:                                               ; preds = %65
  store i32 0, i32* %19, align 4
  br label %69

69:                                               ; preds = %68, %65
  %70 = load i32, i32* %24, align 4
  %71 = icmp sle i32 %70, 0
  br i1 %71, label %72, label %73

72:                                               ; preds = %69
  store i32 0, i32* %20, align 4
  br label %73

73:                                               ; preds = %72, %69
  %74 = load i32, i32* %23, align 4
  %75 = load i32, i32* @pels, align 4
  %76 = load i32, i32* %13, align 4
  %77 = sub nsw i32 %75, %76
  %78 = icmp sge i32 %74, %77
  br i1 %78, label %79, label %80

79:                                               ; preds = %73
  store i32 0, i32* %21, align 4
  br label %80

80:                                               ; preds = %79, %73
  %81 = load i32, i32* %24, align 4
  %82 = load i32, i32* @lines, align 4
  %83 = load i32, i32* %13, align 4
  %84 = sub nsw i32 %82, %83
  %85 = icmp sge i32 %81, %84
  br i1 %85, label %86, label %87

86:                                               ; preds = %80
  store i32 0, i32* %22, align 4
  br label %87

87:                                               ; preds = %86, %80
  br label %88

88:                                               ; preds = %87, %61
  %89 = getelementptr inbounds [9 x %struct.point], [9 x %struct.point]* %29, i64 0, i64 0
  %90 = getelementptr inbounds %struct.point, %struct.point* %89, i32 0, i32 0
  store i32 0, i32* %90, align 16
  %91 = getelementptr inbounds [9 x %struct.point], [9 x %struct.point]* %29, i64 0, i64 0
  %92 = getelementptr inbounds %struct.point, %struct.point* %91, i32 0, i32 1
  store i32 0, i32* %92, align 4
  %93 = load i32, i32* %19, align 4
  %94 = getelementptr inbounds [9 x %struct.point], [9 x %struct.point]* %29, i64 0, i64 1
  %95 = getelementptr inbounds %struct.point, %struct.point* %94, i32 0, i32 0
  store i32 %93, i32* %95, align 8
  %96 = load i32, i32* %20, align 4
  %97 = getelementptr inbounds [9 x %struct.point], [9 x %struct.point]* %29, i64 0, i64 1
  %98 = getelementptr inbounds %struct.point, %struct.point* %97, i32 0, i32 1
  store i32 %96, i32* %98, align 4
  %99 = getelementptr inbounds [9 x %struct.point], [9 x %struct.point]* %29, i64 0, i64 2
  %100 = getelementptr inbounds %struct.point, %struct.point* %99, i32 0, i32 0
  store i32 0, i32* %100, align 16
  %101 = load i32, i32* %20, align 4
  %102 = getelementptr inbounds [9 x %struct.point], [9 x %struct.point]* %29, i64 0, i64 2
  %103 = getelementptr inbounds %struct.point, %struct.point* %102, i32 0, i32 1
  store i32 %101, i32* %103, align 4
  %104 = load i32, i32* %21, align 4
  %105 = getelementptr inbounds [9 x %struct.point], [9 x %struct.point]* %29, i64 0, i64 3
  %106 = getelementptr inbounds %struct.point, %struct.point* %105, i32 0, i32 0
  store i32 %104, i32* %106, align 8
  %107 = load i32, i32* %20, align 4
  %108 = getelementptr inbounds [9 x %struct.point], [9 x %struct.point]* %29, i64 0, i64 3
  %109 = getelementptr inbounds %struct.point, %struct.point* %108, i32 0, i32 1
  store i32 %107, i32* %109, align 4
  %110 = load i32, i32* %19, align 4
  %111 = getelementptr inbounds [9 x %struct.point], [9 x %struct.point]* %29, i64 0, i64 4
  %112 = getelementptr inbounds %struct.point, %struct.point* %111, i32 0, i32 0
  store i32 %110, i32* %112, align 16
  %113 = getelementptr inbounds [9 x %struct.point], [9 x %struct.point]* %29, i64 0, i64 4
  %114 = getelementptr inbounds %struct.point, %struct.point* %113, i32 0, i32 1
  store i32 0, i32* %114, align 4
  %115 = load i32, i32* %21, align 4
  %116 = getelementptr inbounds [9 x %struct.point], [9 x %struct.point]* %29, i64 0, i64 5
  %117 = getelementptr inbounds %struct.point, %struct.point* %116, i32 0, i32 0
  store i32 %115, i32* %117, align 8
  %118 = getelementptr inbounds [9 x %struct.point], [9 x %struct.point]* %29, i64 0, i64 5
  %119 = getelementptr inbounds %struct.point, %struct.point* %118, i32 0, i32 1
  store i32 0, i32* %119, align 4
  %120 = load i32, i32* %19, align 4
  %121 = getelementptr inbounds [9 x %struct.point], [9 x %struct.point]* %29, i64 0, i64 6
  %122 = getelementptr inbounds %struct.point, %struct.point* %121, i32 0, i32 0
  store i32 %120, i32* %122, align 16
  %123 = load i32, i32* %22, align 4
  %124 = getelementptr inbounds [9 x %struct.point], [9 x %struct.point]* %29, i64 0, i64 6
  %125 = getelementptr inbounds %struct.point, %struct.point* %124, i32 0, i32 1
  store i32 %123, i32* %125, align 4
  %126 = getelementptr inbounds [9 x %struct.point], [9 x %struct.point]* %29, i64 0, i64 7
  %127 = getelementptr inbounds %struct.point, %struct.point* %126, i32 0, i32 0
  store i32 0, i32* %127, align 8
  %128 = load i32, i32* %22, align 4
  %129 = getelementptr inbounds [9 x %struct.point], [9 x %struct.point]* %29, i64 0, i64 7
  %130 = getelementptr inbounds %struct.point, %struct.point* %129, i32 0, i32 1
  store i32 %128, i32* %130, align 4
  %131 = load i32, i32* %21, align 4
  %132 = getelementptr inbounds [9 x %struct.point], [9 x %struct.point]* %29, i64 0, i64 8
  %133 = getelementptr inbounds %struct.point, %struct.point* %132, i32 0, i32 0
  store i32 %131, i32* %133, align 16
  %134 = load i32, i32* %22, align 4
  %135 = getelementptr inbounds [9 x %struct.point], [9 x %struct.point]* %29, i64 0, i64 8
  %136 = getelementptr inbounds %struct.point, %struct.point* %135, i32 0, i32 1
  store i32 %134, i32* %136, align 4
  store i32 2147483647, i32* %28, align 4
  store i32 0, i32* %26, align 4
  store i32 0, i32* %15, align 4
  br label %137

137:                                              ; preds = %214, %88
  %138 = load i32, i32* %15, align 4
  %139 = icmp slt i32 %138, 9
  br i1 %139, label %140, label %217

140:                                              ; preds = %137
  store i32 0, i32* %27, align 4
  store i32 0, i32* %17, align 4
  br label %141

141:                                              ; preds = %203, %140
  %142 = load i32, i32* %17, align 4
  %143 = load i32, i32* %13, align 4
  %144 = icmp slt i32 %142, %143
  br i1 %144, label %145, label %206

145:                                              ; preds = %141
  store i32 0, i32* %16, align 4
  br label %146

146:                                              ; preds = %199, %145
  %147 = load i32, i32* %16, align 4
  %148 = load i32, i32* %13, align 4
  %149 = icmp slt i32 %147, %148
  br i1 %149, label %150, label %202

150:                                              ; preds = %146
  %151 = load i8*, i8** %11, align 8
  %152 = load i32, i32* %23, align 4
  %153 = mul nsw i32 2, %152
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds i8, i8* %151, i64 %154
  %156 = load i32, i32* %16, align 4
  %157 = mul nsw i32 2, %156
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds i8, i8* %155, i64 %158
  %160 = load i32, i32* %15, align 4
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds [9 x %struct.point], [9 x %struct.point]* %29, i64 0, i64 %161
  %163 = getelementptr inbounds %struct.point, %struct.point* %162, i32 0, i32 0
  %164 = load i32, i32* %163, align 8
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds i8, i8* %159, i64 %165
  %167 = load i32, i32* %24, align 4
  %168 = mul nsw i32 2, %167
  %169 = load i32, i32* %17, align 4
  %170 = mul nsw i32 2, %169
  %171 = add nsw i32 %168, %170
  %172 = load i32, i32* %15, align 4
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds [9 x %struct.point], [9 x %struct.point]* %29, i64 0, i64 %173
  %175 = getelementptr inbounds %struct.point, %struct.point* %174, i32 0, i32 1
  %176 = load i32, i32* %175, align 4
  %177 = add nsw i32 %171, %176
  %178 = load i32, i32* %25, align 4
  %179 = mul nsw i32 %177, %178
  %180 = mul nsw i32 %179, 2
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds i8, i8* %166, i64 %181
  %183 = load i8, i8* %182, align 1
  %184 = zext i8 %183 to i32
  store i32 %184, i32* %18, align 4
  %185 = load i32, i32* %18, align 4
  %186 = load i32*, i32** %12, align 8
  %187 = load i32, i32* %16, align 4
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds i32, i32* %186, i64 %188
  %190 = load i32, i32* %17, align 4
  %191 = mul nsw i32 %190, 16
  %192 = sext i32 %191 to i64
  %193 = getelementptr inbounds i32, i32* %189, i64 %192
  %194 = load i32, i32* %193, align 4
  %195 = sub nsw i32 %185, %194
  %196 = call i32 @abs(i32 %195) #11
  %197 = load i32, i32* %27, align 4
  %198 = add nsw i32 %197, %196
  store i32 %198, i32* %27, align 4
  br label %199

199:                                              ; preds = %150
  %200 = load i32, i32* %16, align 4
  %201 = add nsw i32 %200, 1
  store i32 %201, i32* %16, align 4
  br label %146

202:                                              ; preds = %146
  br label %203

203:                                              ; preds = %202
  %204 = load i32, i32* %17, align 4
  %205 = add nsw i32 %204, 1
  store i32 %205, i32* %17, align 4
  br label %141

206:                                              ; preds = %141
  %207 = load i32, i32* %27, align 4
  %208 = load i32, i32* %28, align 4
  %209 = icmp slt i32 %207, %208
  br i1 %209, label %210, label %213

210:                                              ; preds = %206
  %211 = load i32, i32* %27, align 4
  store i32 %211, i32* %28, align 4
  %212 = load i32, i32* %15, align 4
  store i32 %212, i32* %26, align 4
  br label %213

213:                                              ; preds = %210, %206
  br label %214

214:                                              ; preds = %213
  %215 = load i32, i32* %15, align 4
  %216 = add nsw i32 %215, 1
  store i32 %216, i32* %15, align 4
  br label %137

217:                                              ; preds = %137
  %218 = load i32, i32* %28, align 4
  %219 = load %struct.motionvector*, %struct.motionvector** %10, align 8
  %220 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %219, i32 0, i32 4
  store i32 %218, i32* %220, align 4
  %221 = load i32, i32* %26, align 4
  %222 = sext i32 %221 to i64
  %223 = getelementptr inbounds [9 x %struct.point], [9 x %struct.point]* %29, i64 0, i64 %222
  %224 = getelementptr inbounds %struct.point, %struct.point* %223, i32 0, i32 0
  %225 = load i32, i32* %224, align 8
  %226 = load %struct.motionvector*, %struct.motionvector** %10, align 8
  %227 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %226, i32 0, i32 2
  store i32 %225, i32* %227, align 4
  %228 = load i32, i32* %26, align 4
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds [9 x %struct.point], [9 x %struct.point]* %29, i64 0, i64 %229
  %231 = getelementptr inbounds %struct.point, %struct.point* %230, i32 0, i32 1
  %232 = load i32, i32* %231, align 4
  %233 = load %struct.motionvector*, %struct.motionvector** %10, align 8
  %234 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %233, i32 0, i32 3
  store i32 %232, i32* %234, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.mb_structure* @MB_Recon_P(%struct.pict_image* %0, i8* %1, %struct.mb_structure* %2, i32 %3, i32 %4, [73 x [90 x %struct.motionvector*]]* %5, i32 %6) #0 {
  %8 = alloca %struct.pict_image*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca %struct.mb_structure*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca [73 x [90 x %struct.motionvector*]]*, align 8
  %14 = alloca i32, align 4
  %15 = alloca %struct.mb_structure*, align 8
  %16 = alloca %struct.motionvector*, align 8
  %17 = alloca %struct.motionvector*, align 8
  %18 = alloca %struct.motionvector*, align 8
  %19 = alloca %struct.motionvector*, align 8
  %20 = alloca %struct.motionvector*, align 8
  %21 = alloca [16 x [16 x i32]], align 16
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  store %struct.pict_image* %0, %struct.pict_image** %8, align 8
  store i8* %1, i8** %9, align 8
  store %struct.mb_structure* %2, %struct.mb_structure** %10, align 8
  store i32 %3, i32* %11, align 4
  store i32 %4, i32* %12, align 4
  store [73 x [90 x %struct.motionvector*]]* %5, [73 x [90 x %struct.motionvector*]]** %13, align 8
  store i32 %6, i32* %14, align 4
  %27 = call noalias i8* @malloc(i64 1536) #8
  %28 = bitcast i8* %27 to %struct.mb_structure*
  store %struct.mb_structure* %28, %struct.mb_structure** %15, align 8
  %29 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %13, align 8
  %30 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %29, i64 0
  %31 = load i32, i32* %12, align 4
  %32 = sdiv i32 %31, 16
  %33 = add nsw i32 %32, 1
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %30, i64 0, i64 %34
  %36 = load i32, i32* %11, align 4
  %37 = sdiv i32 %36, 16
  %38 = add nsw i32 %37, 1
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %35, i64 0, i64 %39
  %41 = load %struct.motionvector*, %struct.motionvector** %40, align 8
  store %struct.motionvector* %41, %struct.motionvector** %16, align 8
  %42 = load i32, i32* @advanced, align 4
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %44, label %391

44:                                               ; preds = %7
  %45 = load %struct.motionvector*, %struct.motionvector** %16, align 8
  %46 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %45, i32 0, i32 5
  %47 = load i32, i32* %46, align 4
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %54, label %49

49:                                               ; preds = %44
  %50 = load %struct.motionvector*, %struct.motionvector** %16, align 8
  %51 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %50, i32 0, i32 5
  %52 = load i32, i32* %51, align 4
  %53 = icmp eq i32 %52, 1
  br i1 %53, label %54, label %162

54:                                               ; preds = %49, %44
  %55 = load i32, i32* %11, align 4
  %56 = load i32, i32* %12, align 4
  %57 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %13, align 8
  %58 = load i8*, i8** %9, align 8
  %59 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %21, i64 0, i64 0
  %60 = getelementptr inbounds [16 x i32], [16 x i32]* %59, i64 0, i64 0
  %61 = load i32, i32* %14, align 4
  call void @FindPredOBMC(i32 %55, i32 %56, [73 x [90 x %struct.motionvector*]]* %57, i8* %58, i32* %60, i32 0, i32 %61)
  %62 = load i32, i32* %11, align 4
  %63 = load i32, i32* %12, align 4
  %64 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %13, align 8
  %65 = load i8*, i8** %9, align 8
  %66 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %21, i64 0, i64 0
  %67 = getelementptr inbounds [16 x i32], [16 x i32]* %66, i64 0, i64 8
  %68 = load i32, i32* %14, align 4
  call void @FindPredOBMC(i32 %62, i32 %63, [73 x [90 x %struct.motionvector*]]* %64, i8* %65, i32* %67, i32 1, i32 %68)
  %69 = load i32, i32* %11, align 4
  %70 = load i32, i32* %12, align 4
  %71 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %13, align 8
  %72 = load i8*, i8** %9, align 8
  %73 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %21, i64 0, i64 8
  %74 = getelementptr inbounds [16 x i32], [16 x i32]* %73, i64 0, i64 0
  %75 = load i32, i32* %14, align 4
  call void @FindPredOBMC(i32 %69, i32 %70, [73 x [90 x %struct.motionvector*]]* %71, i8* %72, i32* %74, i32 2, i32 %75)
  %76 = load i32, i32* %11, align 4
  %77 = load i32, i32* %12, align 4
  %78 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %13, align 8
  %79 = load i8*, i8** %9, align 8
  %80 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %21, i64 0, i64 8
  %81 = getelementptr inbounds [16 x i32], [16 x i32]* %80, i64 0, i64 8
  %82 = load i32, i32* %14, align 4
  call void @FindPredOBMC(i32 %76, i32 %77, [73 x [90 x %struct.motionvector*]]* %78, i8* %79, i32* %81, i32 3, i32 %82)
  store i32 0, i32* %26, align 4
  br label %83

83:                                               ; preds = %112, %54
  %84 = load i32, i32* %26, align 4
  %85 = icmp slt i32 %84, 16
  br i1 %85, label %86, label %115

86:                                               ; preds = %83
  store i32 0, i32* %25, align 4
  br label %87

87:                                               ; preds = %108, %86
  %88 = load i32, i32* %25, align 4
  %89 = icmp slt i32 %88, 16
  br i1 %89, label %90, label %111

90:                                               ; preds = %87
  %91 = load i32, i32* %26, align 4
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %21, i64 0, i64 %92
  %94 = load i32, i32* %25, align 4
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds [16 x i32], [16 x i32]* %93, i64 0, i64 %95
  %97 = load i32, i32* %96, align 4
  %98 = load %struct.mb_structure*, %struct.mb_structure** %10, align 8
  %99 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %98, i32 0, i32 0
  %100 = load i32, i32* %26, align 4
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %99, i64 0, i64 %101
  %103 = load i32, i32* %25, align 4
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds [16 x i32], [16 x i32]* %102, i64 0, i64 %104
  %106 = load i32, i32* %105, align 4
  %107 = add nsw i32 %106, %97
  store i32 %107, i32* %105, align 4
  br label %108

108:                                              ; preds = %90
  %109 = load i32, i32* %25, align 4
  %110 = add nsw i32 %109, 1
  store i32 %110, i32* %25, align 4
  br label %87

111:                                              ; preds = %87
  br label %112

112:                                              ; preds = %111
  %113 = load i32, i32* %26, align 4
  %114 = add nsw i32 %113, 1
  store i32 %114, i32* %26, align 4
  br label %83

115:                                              ; preds = %83
  %116 = load %struct.motionvector*, %struct.motionvector** %16, align 8
  %117 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %116, i32 0, i32 0
  %118 = load i32, i32* %117, align 4
  %119 = mul nsw i32 2, %118
  %120 = load %struct.motionvector*, %struct.motionvector** %16, align 8
  %121 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %120, i32 0, i32 2
  %122 = load i32, i32* %121, align 4
  %123 = add nsw i32 %119, %122
  store i32 %123, i32* %22, align 4
  %124 = load %struct.motionvector*, %struct.motionvector** %16, align 8
  %125 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %124, i32 0, i32 1
  %126 = load i32, i32* %125, align 4
  %127 = mul nsw i32 2, %126
  %128 = load %struct.motionvector*, %struct.motionvector** %16, align 8
  %129 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %128, i32 0, i32 3
  %130 = load i32, i32* %129, align 4
  %131 = add nsw i32 %127, %130
  store i32 %131, i32* %23, align 4
  %132 = load i32, i32* %22, align 4
  %133 = srem i32 %132, 4
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %135, label %138

135:                                              ; preds = %115
  %136 = load i32, i32* %22, align 4
  %137 = ashr i32 %136, 1
  br label %142

138:                                              ; preds = %115
  %139 = load i32, i32* %22, align 4
  %140 = ashr i32 %139, 1
  %141 = or i32 %140, 1
  br label %142

142:                                              ; preds = %138, %135
  %143 = phi i32 [ %137, %135 ], [ %141, %138 ]
  store i32 %143, i32* %22, align 4
  %144 = load i32, i32* %23, align 4
  %145 = srem i32 %144, 4
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %147, label %150

147:                                              ; preds = %142
  %148 = load i32, i32* %23, align 4
  %149 = ashr i32 %148, 1
  br label %154

150:                                              ; preds = %142
  %151 = load i32, i32* %23, align 4
  %152 = ashr i32 %151, 1
  %153 = or i32 %152, 1
  br label %154

154:                                              ; preds = %150, %147
  %155 = phi i32 [ %149, %147 ], [ %153, %150 ]
  store i32 %155, i32* %23, align 4
  %156 = load i32, i32* %11, align 4
  %157 = load i32, i32* %12, align 4
  %158 = load i32, i32* %22, align 4
  %159 = load i32, i32* %23, align 4
  %160 = load %struct.pict_image*, %struct.pict_image** %8, align 8
  %161 = load %struct.mb_structure*, %struct.mb_structure** %10, align 8
  call void @ReconChromBlock_P(i32 %156, i32 %157, i32 %158, i32 %159, %struct.pict_image* %160, %struct.mb_structure* %161)
  br label %390

162:                                              ; preds = %49
  %163 = load %struct.motionvector*, %struct.motionvector** %16, align 8
  %164 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %163, i32 0, i32 5
  %165 = load i32, i32* %164, align 4
  %166 = icmp eq i32 %165, 2
  br i1 %166, label %167, label %389

167:                                              ; preds = %162
  %168 = load i32, i32* %11, align 4
  %169 = load i32, i32* %12, align 4
  %170 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %13, align 8
  %171 = load i8*, i8** %9, align 8
  %172 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %21, i64 0, i64 0
  %173 = getelementptr inbounds [16 x i32], [16 x i32]* %172, i64 0, i64 0
  %174 = load i32, i32* %14, align 4
  call void @FindPredOBMC(i32 %168, i32 %169, [73 x [90 x %struct.motionvector*]]* %170, i8* %171, i32* %173, i32 0, i32 %174)
  %175 = load i32, i32* %11, align 4
  %176 = load i32, i32* %12, align 4
  %177 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %13, align 8
  %178 = load i8*, i8** %9, align 8
  %179 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %21, i64 0, i64 0
  %180 = getelementptr inbounds [16 x i32], [16 x i32]* %179, i64 0, i64 8
  %181 = load i32, i32* %14, align 4
  call void @FindPredOBMC(i32 %175, i32 %176, [73 x [90 x %struct.motionvector*]]* %177, i8* %178, i32* %180, i32 1, i32 %181)
  %182 = load i32, i32* %11, align 4
  %183 = load i32, i32* %12, align 4
  %184 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %13, align 8
  %185 = load i8*, i8** %9, align 8
  %186 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %21, i64 0, i64 8
  %187 = getelementptr inbounds [16 x i32], [16 x i32]* %186, i64 0, i64 0
  %188 = load i32, i32* %14, align 4
  call void @FindPredOBMC(i32 %182, i32 %183, [73 x [90 x %struct.motionvector*]]* %184, i8* %185, i32* %187, i32 2, i32 %188)
  %189 = load i32, i32* %11, align 4
  %190 = load i32, i32* %12, align 4
  %191 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %13, align 8
  %192 = load i8*, i8** %9, align 8
  %193 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %21, i64 0, i64 8
  %194 = getelementptr inbounds [16 x i32], [16 x i32]* %193, i64 0, i64 8
  %195 = load i32, i32* %14, align 4
  call void @FindPredOBMC(i32 %189, i32 %190, [73 x [90 x %struct.motionvector*]]* %191, i8* %192, i32* %194, i32 3, i32 %195)
  store i32 0, i32* %26, align 4
  br label %196

196:                                              ; preds = %225, %167
  %197 = load i32, i32* %26, align 4
  %198 = icmp slt i32 %197, 16
  br i1 %198, label %199, label %228

199:                                              ; preds = %196
  store i32 0, i32* %25, align 4
  br label %200

200:                                              ; preds = %221, %199
  %201 = load i32, i32* %25, align 4
  %202 = icmp slt i32 %201, 16
  br i1 %202, label %203, label %224

203:                                              ; preds = %200
  %204 = load i32, i32* %26, align 4
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %21, i64 0, i64 %205
  %207 = load i32, i32* %25, align 4
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds [16 x i32], [16 x i32]* %206, i64 0, i64 %208
  %210 = load i32, i32* %209, align 4
  %211 = load %struct.mb_structure*, %struct.mb_structure** %10, align 8
  %212 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %211, i32 0, i32 0
  %213 = load i32, i32* %26, align 4
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %212, i64 0, i64 %214
  %216 = load i32, i32* %25, align 4
  %217 = sext i32 %216 to i64
  %218 = getelementptr inbounds [16 x i32], [16 x i32]* %215, i64 0, i64 %217
  %219 = load i32, i32* %218, align 4
  %220 = add nsw i32 %219, %210
  store i32 %220, i32* %218, align 4
  br label %221

221:                                              ; preds = %203
  %222 = load i32, i32* %25, align 4
  %223 = add nsw i32 %222, 1
  store i32 %223, i32* %25, align 4
  br label %200

224:                                              ; preds = %200
  br label %225

225:                                              ; preds = %224
  %226 = load i32, i32* %26, align 4
  %227 = add nsw i32 %226, 1
  store i32 %227, i32* %26, align 4
  br label %196

228:                                              ; preds = %196
  %229 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %13, align 8
  %230 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %229, i64 1
  %231 = load i32, i32* %12, align 4
  %232 = sdiv i32 %231, 16
  %233 = add nsw i32 %232, 1
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %230, i64 0, i64 %234
  %236 = load i32, i32* %11, align 4
  %237 = sdiv i32 %236, 16
  %238 = add nsw i32 %237, 1
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %235, i64 0, i64 %239
  %241 = load %struct.motionvector*, %struct.motionvector** %240, align 8
  store %struct.motionvector* %241, %struct.motionvector** %17, align 8
  %242 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %13, align 8
  %243 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %242, i64 2
  %244 = load i32, i32* %12, align 4
  %245 = sdiv i32 %244, 16
  %246 = add nsw i32 %245, 1
  %247 = sext i32 %246 to i64
  %248 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %243, i64 0, i64 %247
  %249 = load i32, i32* %11, align 4
  %250 = sdiv i32 %249, 16
  %251 = add nsw i32 %250, 1
  %252 = sext i32 %251 to i64
  %253 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %248, i64 0, i64 %252
  %254 = load %struct.motionvector*, %struct.motionvector** %253, align 8
  store %struct.motionvector* %254, %struct.motionvector** %18, align 8
  %255 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %13, align 8
  %256 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %255, i64 3
  %257 = load i32, i32* %12, align 4
  %258 = sdiv i32 %257, 16
  %259 = add nsw i32 %258, 1
  %260 = sext i32 %259 to i64
  %261 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %256, i64 0, i64 %260
  %262 = load i32, i32* %11, align 4
  %263 = sdiv i32 %262, 16
  %264 = add nsw i32 %263, 1
  %265 = sext i32 %264 to i64
  %266 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %261, i64 0, i64 %265
  %267 = load %struct.motionvector*, %struct.motionvector** %266, align 8
  store %struct.motionvector* %267, %struct.motionvector** %19, align 8
  %268 = load [73 x [90 x %struct.motionvector*]]*, [73 x [90 x %struct.motionvector*]]** %13, align 8
  %269 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %268, i64 4
  %270 = load i32, i32* %12, align 4
  %271 = sdiv i32 %270, 16
  %272 = add nsw i32 %271, 1
  %273 = sext i32 %272 to i64
  %274 = getelementptr inbounds [73 x [90 x %struct.motionvector*]], [73 x [90 x %struct.motionvector*]]* %269, i64 0, i64 %273
  %275 = load i32, i32* %11, align 4
  %276 = sdiv i32 %275, 16
  %277 = add nsw i32 %276, 1
  %278 = sext i32 %277 to i64
  %279 = getelementptr inbounds [90 x %struct.motionvector*], [90 x %struct.motionvector*]* %274, i64 0, i64 %278
  %280 = load %struct.motionvector*, %struct.motionvector** %279, align 8
  store %struct.motionvector* %280, %struct.motionvector** %20, align 8
  %281 = load %struct.motionvector*, %struct.motionvector** %17, align 8
  %282 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %281, i32 0, i32 0
  %283 = load i32, i32* %282, align 4
  %284 = mul nsw i32 2, %283
  %285 = load %struct.motionvector*, %struct.motionvector** %17, align 8
  %286 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %285, i32 0, i32 2
  %287 = load i32, i32* %286, align 4
  %288 = add nsw i32 %284, %287
  %289 = load %struct.motionvector*, %struct.motionvector** %18, align 8
  %290 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %289, i32 0, i32 0
  %291 = load i32, i32* %290, align 4
  %292 = mul nsw i32 2, %291
  %293 = add nsw i32 %288, %292
  %294 = load %struct.motionvector*, %struct.motionvector** %18, align 8
  %295 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %294, i32 0, i32 2
  %296 = load i32, i32* %295, align 4
  %297 = add nsw i32 %293, %296
  %298 = load %struct.motionvector*, %struct.motionvector** %19, align 8
  %299 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %298, i32 0, i32 0
  %300 = load i32, i32* %299, align 4
  %301 = mul nsw i32 2, %300
  %302 = add nsw i32 %297, %301
  %303 = load %struct.motionvector*, %struct.motionvector** %19, align 8
  %304 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %303, i32 0, i32 2
  %305 = load i32, i32* %304, align 4
  %306 = add nsw i32 %302, %305
  %307 = load %struct.motionvector*, %struct.motionvector** %20, align 8
  %308 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %307, i32 0, i32 0
  %309 = load i32, i32* %308, align 4
  %310 = mul nsw i32 2, %309
  %311 = add nsw i32 %306, %310
  %312 = load %struct.motionvector*, %struct.motionvector** %20, align 8
  %313 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %312, i32 0, i32 2
  %314 = load i32, i32* %313, align 4
  %315 = add nsw i32 %311, %314
  store i32 %315, i32* %24, align 4
  %316 = load i32, i32* %24, align 4
  %317 = icmp slt i32 %316, 0
  %318 = zext i1 %317 to i64
  %319 = select i1 %317, i32 -1, i32 1
  %320 = load i32, i32* %24, align 4
  %321 = call i32 @abs(i32 %320) #11
  %322 = srem i32 %321, 16
  %323 = sext i32 %322 to i64
  %324 = getelementptr inbounds [16 x i32], [16 x i32]* @roundtab, i64 0, i64 %323
  %325 = load i32, i32* %324, align 4
  %326 = load i32, i32* %24, align 4
  %327 = call i32 @abs(i32 %326) #11
  %328 = sdiv i32 %327, 16
  %329 = mul nsw i32 %328, 2
  %330 = add nsw i32 %325, %329
  %331 = mul nsw i32 %319, %330
  store i32 %331, i32* %22, align 4
  %332 = load %struct.motionvector*, %struct.motionvector** %17, align 8
  %333 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %332, i32 0, i32 1
  %334 = load i32, i32* %333, align 4
  %335 = mul nsw i32 2, %334
  %336 = load %struct.motionvector*, %struct.motionvector** %17, align 8
  %337 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %336, i32 0, i32 3
  %338 = load i32, i32* %337, align 4
  %339 = add nsw i32 %335, %338
  %340 = load %struct.motionvector*, %struct.motionvector** %18, align 8
  %341 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %340, i32 0, i32 1
  %342 = load i32, i32* %341, align 4
  %343 = mul nsw i32 2, %342
  %344 = add nsw i32 %339, %343
  %345 = load %struct.motionvector*, %struct.motionvector** %18, align 8
  %346 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %345, i32 0, i32 3
  %347 = load i32, i32* %346, align 4
  %348 = add nsw i32 %344, %347
  %349 = load %struct.motionvector*, %struct.motionvector** %19, align 8
  %350 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %349, i32 0, i32 1
  %351 = load i32, i32* %350, align 4
  %352 = mul nsw i32 2, %351
  %353 = add nsw i32 %348, %352
  %354 = load %struct.motionvector*, %struct.motionvector** %19, align 8
  %355 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %354, i32 0, i32 3
  %356 = load i32, i32* %355, align 4
  %357 = add nsw i32 %353, %356
  %358 = load %struct.motionvector*, %struct.motionvector** %20, align 8
  %359 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %358, i32 0, i32 1
  %360 = load i32, i32* %359, align 4
  %361 = mul nsw i32 2, %360
  %362 = add nsw i32 %357, %361
  %363 = load %struct.motionvector*, %struct.motionvector** %20, align 8
  %364 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %363, i32 0, i32 3
  %365 = load i32, i32* %364, align 4
  %366 = add nsw i32 %362, %365
  store i32 %366, i32* %24, align 4
  %367 = load i32, i32* %24, align 4
  %368 = icmp slt i32 %367, 0
  %369 = zext i1 %368 to i64
  %370 = select i1 %368, i32 -1, i32 1
  %371 = load i32, i32* %24, align 4
  %372 = call i32 @abs(i32 %371) #11
  %373 = srem i32 %372, 16
  %374 = sext i32 %373 to i64
  %375 = getelementptr inbounds [16 x i32], [16 x i32]* @roundtab, i64 0, i64 %374
  %376 = load i32, i32* %375, align 4
  %377 = load i32, i32* %24, align 4
  %378 = call i32 @abs(i32 %377) #11
  %379 = sdiv i32 %378, 16
  %380 = mul nsw i32 %379, 2
  %381 = add nsw i32 %376, %380
  %382 = mul nsw i32 %370, %381
  store i32 %382, i32* %23, align 4
  %383 = load i32, i32* %11, align 4
  %384 = load i32, i32* %12, align 4
  %385 = load i32, i32* %22, align 4
  %386 = load i32, i32* %23, align 4
  %387 = load %struct.pict_image*, %struct.pict_image** %8, align 8
  %388 = load %struct.mb_structure*, %struct.mb_structure** %10, align 8
  call void @ReconChromBlock_P(i32 %383, i32 %384, i32 %385, i32 %386, %struct.pict_image* %387, %struct.mb_structure* %388)
  br label %389

389:                                              ; preds = %228, %162
  br label %390

390:                                              ; preds = %389, %154
  br label %457

391:                                              ; preds = %7
  %392 = load %struct.motionvector*, %struct.motionvector** %16, align 8
  %393 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %392, i32 0, i32 5
  %394 = load i32, i32* %393, align 4
  %395 = icmp eq i32 %394, 0
  br i1 %395, label %401, label %396

396:                                              ; preds = %391
  %397 = load %struct.motionvector*, %struct.motionvector** %16, align 8
  %398 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %397, i32 0, i32 5
  %399 = load i32, i32* %398, align 4
  %400 = icmp eq i32 %399, 1
  br i1 %400, label %401, label %456

401:                                              ; preds = %396, %391
  %402 = load i32, i32* %11, align 4
  %403 = load i32, i32* %12, align 4
  %404 = load %struct.motionvector*, %struct.motionvector** %16, align 8
  %405 = load i8*, i8** %9, align 8
  %406 = load %struct.mb_structure*, %struct.mb_structure** %10, align 8
  %407 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %406, i32 0, i32 0
  %408 = getelementptr inbounds [16 x [16 x i32]], [16 x [16 x i32]]* %407, i64 0, i64 0
  %409 = getelementptr inbounds [16 x i32], [16 x i32]* %408, i64 0, i64 0
  call void @ReconLumBlock_P(i32 %402, i32 %403, %struct.motionvector* %404, i8* %405, i32* %409, i32 16, i32 0)
  %410 = load %struct.motionvector*, %struct.motionvector** %16, align 8
  %411 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %410, i32 0, i32 0
  %412 = load i32, i32* %411, align 4
  %413 = mul nsw i32 2, %412
  %414 = load %struct.motionvector*, %struct.motionvector** %16, align 8
  %415 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %414, i32 0, i32 2
  %416 = load i32, i32* %415, align 4
  %417 = add nsw i32 %413, %416
  store i32 %417, i32* %22, align 4
  %418 = load %struct.motionvector*, %struct.motionvector** %16, align 8
  %419 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %418, i32 0, i32 1
  %420 = load i32, i32* %419, align 4
  %421 = mul nsw i32 2, %420
  %422 = load %struct.motionvector*, %struct.motionvector** %16, align 8
  %423 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %422, i32 0, i32 3
  %424 = load i32, i32* %423, align 4
  %425 = add nsw i32 %421, %424
  store i32 %425, i32* %23, align 4
  %426 = load i32, i32* %22, align 4
  %427 = srem i32 %426, 4
  %428 = icmp eq i32 %427, 0
  br i1 %428, label %429, label %432

429:                                              ; preds = %401
  %430 = load i32, i32* %22, align 4
  %431 = ashr i32 %430, 1
  br label %436

432:                                              ; preds = %401
  %433 = load i32, i32* %22, align 4
  %434 = ashr i32 %433, 1
  %435 = or i32 %434, 1
  br label %436

436:                                              ; preds = %432, %429
  %437 = phi i32 [ %431, %429 ], [ %435, %432 ]
  store i32 %437, i32* %22, align 4
  %438 = load i32, i32* %23, align 4
  %439 = srem i32 %438, 4
  %440 = icmp eq i32 %439, 0
  br i1 %440, label %441, label %444

441:                                              ; preds = %436
  %442 = load i32, i32* %23, align 4
  %443 = ashr i32 %442, 1
  br label %448

444:                                              ; preds = %436
  %445 = load i32, i32* %23, align 4
  %446 = ashr i32 %445, 1
  %447 = or i32 %446, 1
  br label %448

448:                                              ; preds = %444, %441
  %449 = phi i32 [ %443, %441 ], [ %447, %444 ]
  store i32 %449, i32* %23, align 4
  %450 = load i32, i32* %11, align 4
  %451 = load i32, i32* %12, align 4
  %452 = load i32, i32* %22, align 4
  %453 = load i32, i32* %23, align 4
  %454 = load %struct.pict_image*, %struct.pict_image** %8, align 8
  %455 = load %struct.mb_structure*, %struct.mb_structure** %10, align 8
  call void @ReconChromBlock_P(i32 %450, i32 %451, i32 %452, i32 %453, %struct.pict_image* %454, %struct.mb_structure* %455)
  br label %456

456:                                              ; preds = %448, %396
  br label %457

457:                                              ; preds = %456, %390
  %458 = load %struct.mb_structure*, %struct.mb_structure** %15, align 8
  %459 = bitcast %struct.mb_structure* %458 to i8*
  %460 = load %struct.mb_structure*, %struct.mb_structure** %10, align 8
  %461 = bitcast %struct.mb_structure* %460 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %459, i8* align 4 %461, i64 1536, i1 false)
  %462 = load %struct.mb_structure*, %struct.mb_structure** %15, align 8
  ret %struct.mb_structure* %462
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ReconChromBlock_P(i32 %0, i32 %1, i32 %2, i32 %3, %struct.pict_image* %4, %struct.mb_structure* %5) #0 {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca %struct.pict_image*, align 8
  %12 = alloca %struct.mb_structure*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  store i32 %0, i32* %7, align 4
  store i32 %1, i32* %8, align 4
  store i32 %2, i32* %9, align 4
  store i32 %3, i32* %10, align 4
  store %struct.pict_image* %4, %struct.pict_image** %11, align 8
  store %struct.mb_structure* %5, %struct.mb_structure** %12, align 8
  %25 = load i32, i32* @mv_outside_frame, align 4
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %35

27:                                               ; preds = %6
  %28 = load i32, i32* @pels, align 4
  %29 = sdiv i32 %28, 2
  %30 = load i32, i32* @long_vectors, align 4
  %31 = icmp ne i32 %30, 0
  %32 = zext i1 %31 to i64
  %33 = select i1 %31, i32 32, i32 16
  %34 = add nsw i32 %29, %33
  br label %38

35:                                               ; preds = %6
  %36 = load i32, i32* @pels, align 4
  %37 = sdiv i32 %36, 2
  br label %38

38:                                               ; preds = %35, %27
  %39 = phi i32 [ %34, %27 ], [ %37, %35 ]
  store i32 %39, i32* %20, align 4
  %40 = load i32, i32* %7, align 4
  %41 = ashr i32 %40, 1
  store i32 %41, i32* %15, align 4
  %42 = load i32, i32* %8, align 4
  %43 = ashr i32 %42, 1
  store i32 %43, i32* %16, align 4
  %44 = load i32, i32* %9, align 4
  %45 = ashr i32 %44, 1
  store i32 %45, i32* %21, align 4
  %46 = load i32, i32* %9, align 4
  %47 = and i32 %46, 1
  store i32 %47, i32* %23, align 4
  %48 = load i32, i32* %10, align 4
  %49 = ashr i32 %48, 1
  store i32 %49, i32* %22, align 4
  %50 = load i32, i32* %10, align 4
  %51 = and i32 %50, 1
  store i32 %51, i32* %24, align 4
  %52 = load i32, i32* %23, align 4
  %53 = icmp ne i32 %52, 0
  br i1 %53, label %132, label %54

54:                                               ; preds = %38
  %55 = load i32, i32* %24, align 4
  %56 = icmp ne i32 %55, 0
  br i1 %56, label %132, label %57

57:                                               ; preds = %54
  store i32 0, i32* %14, align 4
  br label %58

58:                                               ; preds = %128, %57
  %59 = load i32, i32* %14, align 4
  %60 = icmp slt i32 %59, 8
  br i1 %60, label %61, label %131

61:                                               ; preds = %58
  store i32 0, i32* %13, align 4
  br label %62

62:                                               ; preds = %124, %61
  %63 = load i32, i32* %13, align 4
  %64 = icmp slt i32 %63, 8
  br i1 %64, label %65, label %127

65:                                               ; preds = %62
  %66 = load i32, i32* %15, align 4
  %67 = load i32, i32* %21, align 4
  %68 = add nsw i32 %66, %67
  %69 = load i32, i32* %13, align 4
  %70 = add nsw i32 %68, %69
  store i32 %70, i32* %17, align 4
  %71 = load i32, i32* %16, align 4
  %72 = load i32, i32* %22, align 4
  %73 = add nsw i32 %71, %72
  %74 = load i32, i32* %14, align 4
  %75 = add nsw i32 %73, %74
  store i32 %75, i32* %18, align 4
  %76 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %77 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %76, i32 0, i32 1
  %78 = load i8*, i8** %77, align 8
  %79 = load i32, i32* %17, align 4
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds i8, i8* %78, i64 %80
  %82 = load i32, i32* %18, align 4
  %83 = load i32, i32* %20, align 4
  %84 = mul nsw i32 %82, %83
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i8, i8* %81, i64 %85
  %87 = load i8, i8* %86, align 1
  %88 = zext i8 %87 to i32
  store i32 %88, i32* %19, align 4
  %89 = load i32, i32* %19, align 4
  %90 = load %struct.mb_structure*, %struct.mb_structure** %12, align 8
  %91 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %90, i32 0, i32 1
  %92 = load i32, i32* %14, align 4
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %91, i64 0, i64 %93
  %95 = load i32, i32* %13, align 4
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds [8 x i32], [8 x i32]* %94, i64 0, i64 %96
  %98 = load i32, i32* %97, align 4
  %99 = add nsw i32 %98, %89
  store i32 %99, i32* %97, align 4
  %100 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %101 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %100, i32 0, i32 2
  %102 = load i8*, i8** %101, align 8
  %103 = load i32, i32* %17, align 4
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds i8, i8* %102, i64 %104
  %106 = load i32, i32* %18, align 4
  %107 = load i32, i32* %20, align 4
  %108 = mul nsw i32 %106, %107
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i8, i8* %105, i64 %109
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i32
  store i32 %112, i32* %19, align 4
  %113 = load i32, i32* %19, align 4
  %114 = load %struct.mb_structure*, %struct.mb_structure** %12, align 8
  %115 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %114, i32 0, i32 2
  %116 = load i32, i32* %14, align 4
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %115, i64 0, i64 %117
  %119 = load i32, i32* %13, align 4
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds [8 x i32], [8 x i32]* %118, i64 0, i64 %120
  %122 = load i32, i32* %121, align 4
  %123 = add nsw i32 %122, %113
  store i32 %123, i32* %121, align 4
  br label %124

124:                                              ; preds = %65
  %125 = load i32, i32* %13, align 4
  %126 = add nsw i32 %125, 1
  store i32 %126, i32* %13, align 4
  br label %62

127:                                              ; preds = %62
  br label %128

128:                                              ; preds = %127
  %129 = load i32, i32* %14, align 4
  %130 = add nsw i32 %129, 1
  store i32 %130, i32* %14, align 4
  br label %58

131:                                              ; preds = %58
  br label %553

132:                                              ; preds = %54, %38
  %133 = load i32, i32* %23, align 4
  %134 = icmp ne i32 %133, 0
  br i1 %134, label %249, label %135

135:                                              ; preds = %132
  %136 = load i32, i32* %24, align 4
  %137 = icmp ne i32 %136, 0
  br i1 %137, label %138, label %249

138:                                              ; preds = %135
  store i32 0, i32* %14, align 4
  br label %139

139:                                              ; preds = %245, %138
  %140 = load i32, i32* %14, align 4
  %141 = icmp slt i32 %140, 8
  br i1 %141, label %142, label %248

142:                                              ; preds = %139
  store i32 0, i32* %13, align 4
  br label %143

143:                                              ; preds = %241, %142
  %144 = load i32, i32* %13, align 4
  %145 = icmp slt i32 %144, 8
  br i1 %145, label %146, label %244

146:                                              ; preds = %143
  %147 = load i32, i32* %15, align 4
  %148 = load i32, i32* %21, align 4
  %149 = add nsw i32 %147, %148
  %150 = load i32, i32* %13, align 4
  %151 = add nsw i32 %149, %150
  store i32 %151, i32* %17, align 4
  %152 = load i32, i32* %16, align 4
  %153 = load i32, i32* %22, align 4
  %154 = add nsw i32 %152, %153
  %155 = load i32, i32* %14, align 4
  %156 = add nsw i32 %154, %155
  store i32 %156, i32* %18, align 4
  %157 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %158 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %157, i32 0, i32 1
  %159 = load i8*, i8** %158, align 8
  %160 = load i32, i32* %17, align 4
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds i8, i8* %159, i64 %161
  %163 = load i32, i32* %18, align 4
  %164 = load i32, i32* %20, align 4
  %165 = mul nsw i32 %163, %164
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds i8, i8* %162, i64 %166
  %168 = load i8, i8* %167, align 1
  %169 = zext i8 %168 to i32
  %170 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %171 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %170, i32 0, i32 1
  %172 = load i8*, i8** %171, align 8
  %173 = load i32, i32* %17, align 4
  %174 = sext i32 %173 to i64
  %175 = getelementptr inbounds i8, i8* %172, i64 %174
  %176 = load i32, i32* %18, align 4
  %177 = load i32, i32* %24, align 4
  %178 = add nsw i32 %176, %177
  %179 = load i32, i32* %20, align 4
  %180 = mul nsw i32 %178, %179
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds i8, i8* %175, i64 %181
  %183 = load i8, i8* %182, align 1
  %184 = zext i8 %183 to i32
  %185 = add nsw i32 %169, %184
  %186 = add nsw i32 %185, 1
  %187 = ashr i32 %186, 1
  store i32 %187, i32* %19, align 4
  %188 = load i32, i32* %19, align 4
  %189 = load %struct.mb_structure*, %struct.mb_structure** %12, align 8
  %190 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %189, i32 0, i32 1
  %191 = load i32, i32* %14, align 4
  %192 = sext i32 %191 to i64
  %193 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %190, i64 0, i64 %192
  %194 = load i32, i32* %13, align 4
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds [8 x i32], [8 x i32]* %193, i64 0, i64 %195
  %197 = load i32, i32* %196, align 4
  %198 = add nsw i32 %197, %188
  store i32 %198, i32* %196, align 4
  %199 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %200 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %199, i32 0, i32 2
  %201 = load i8*, i8** %200, align 8
  %202 = load i32, i32* %17, align 4
  %203 = sext i32 %202 to i64
  %204 = getelementptr inbounds i8, i8* %201, i64 %203
  %205 = load i32, i32* %18, align 4
  %206 = load i32, i32* %20, align 4
  %207 = mul nsw i32 %205, %206
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds i8, i8* %204, i64 %208
  %210 = load i8, i8* %209, align 1
  %211 = zext i8 %210 to i32
  %212 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %213 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %212, i32 0, i32 2
  %214 = load i8*, i8** %213, align 8
  %215 = load i32, i32* %17, align 4
  %216 = sext i32 %215 to i64
  %217 = getelementptr inbounds i8, i8* %214, i64 %216
  %218 = load i32, i32* %18, align 4
  %219 = load i32, i32* %24, align 4
  %220 = add nsw i32 %218, %219
  %221 = load i32, i32* %20, align 4
  %222 = mul nsw i32 %220, %221
  %223 = sext i32 %222 to i64
  %224 = getelementptr inbounds i8, i8* %217, i64 %223
  %225 = load i8, i8* %224, align 1
  %226 = zext i8 %225 to i32
  %227 = add nsw i32 %211, %226
  %228 = add nsw i32 %227, 1
  %229 = ashr i32 %228, 1
  store i32 %229, i32* %19, align 4
  %230 = load i32, i32* %19, align 4
  %231 = load %struct.mb_structure*, %struct.mb_structure** %12, align 8
  %232 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %231, i32 0, i32 2
  %233 = load i32, i32* %14, align 4
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %232, i64 0, i64 %234
  %236 = load i32, i32* %13, align 4
  %237 = sext i32 %236 to i64
  %238 = getelementptr inbounds [8 x i32], [8 x i32]* %235, i64 0, i64 %237
  %239 = load i32, i32* %238, align 4
  %240 = add nsw i32 %239, %230
  store i32 %240, i32* %238, align 4
  br label %241

241:                                              ; preds = %146
  %242 = load i32, i32* %13, align 4
  %243 = add nsw i32 %242, 1
  store i32 %243, i32* %13, align 4
  br label %143

244:                                              ; preds = %143
  br label %245

245:                                              ; preds = %244
  %246 = load i32, i32* %14, align 4
  %247 = add nsw i32 %246, 1
  store i32 %247, i32* %14, align 4
  br label %139

248:                                              ; preds = %139
  br label %552

249:                                              ; preds = %135, %132
  %250 = load i32, i32* %23, align 4
  %251 = icmp ne i32 %250, 0
  br i1 %251, label %252, label %368

252:                                              ; preds = %249
  %253 = load i32, i32* %24, align 4
  %254 = icmp ne i32 %253, 0
  br i1 %254, label %368, label %255

255:                                              ; preds = %252
  store i32 0, i32* %14, align 4
  br label %256

256:                                              ; preds = %364, %255
  %257 = load i32, i32* %14, align 4
  %258 = icmp slt i32 %257, 8
  br i1 %258, label %259, label %367

259:                                              ; preds = %256
  store i32 0, i32* %13, align 4
  br label %260

260:                                              ; preds = %360, %259
  %261 = load i32, i32* %13, align 4
  %262 = icmp slt i32 %261, 8
  br i1 %262, label %263, label %363

263:                                              ; preds = %260
  %264 = load i32, i32* %15, align 4
  %265 = load i32, i32* %21, align 4
  %266 = add nsw i32 %264, %265
  %267 = load i32, i32* %13, align 4
  %268 = add nsw i32 %266, %267
  store i32 %268, i32* %17, align 4
  %269 = load i32, i32* %16, align 4
  %270 = load i32, i32* %22, align 4
  %271 = add nsw i32 %269, %270
  %272 = load i32, i32* %14, align 4
  %273 = add nsw i32 %271, %272
  store i32 %273, i32* %18, align 4
  %274 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %275 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %274, i32 0, i32 1
  %276 = load i8*, i8** %275, align 8
  %277 = load i32, i32* %17, align 4
  %278 = sext i32 %277 to i64
  %279 = getelementptr inbounds i8, i8* %276, i64 %278
  %280 = load i32, i32* %18, align 4
  %281 = load i32, i32* %20, align 4
  %282 = mul nsw i32 %280, %281
  %283 = sext i32 %282 to i64
  %284 = getelementptr inbounds i8, i8* %279, i64 %283
  %285 = load i8, i8* %284, align 1
  %286 = zext i8 %285 to i32
  %287 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %288 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %287, i32 0, i32 1
  %289 = load i8*, i8** %288, align 8
  %290 = load i32, i32* %17, align 4
  %291 = sext i32 %290 to i64
  %292 = getelementptr inbounds i8, i8* %289, i64 %291
  %293 = load i32, i32* %23, align 4
  %294 = sext i32 %293 to i64
  %295 = getelementptr inbounds i8, i8* %292, i64 %294
  %296 = load i32, i32* %18, align 4
  %297 = load i32, i32* %20, align 4
  %298 = mul nsw i32 %296, %297
  %299 = sext i32 %298 to i64
  %300 = getelementptr inbounds i8, i8* %295, i64 %299
  %301 = load i8, i8* %300, align 1
  %302 = zext i8 %301 to i32
  %303 = add nsw i32 %286, %302
  %304 = add nsw i32 %303, 1
  %305 = ashr i32 %304, 1
  store i32 %305, i32* %19, align 4
  %306 = load i32, i32* %19, align 4
  %307 = load %struct.mb_structure*, %struct.mb_structure** %12, align 8
  %308 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %307, i32 0, i32 1
  %309 = load i32, i32* %14, align 4
  %310 = sext i32 %309 to i64
  %311 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %308, i64 0, i64 %310
  %312 = load i32, i32* %13, align 4
  %313 = sext i32 %312 to i64
  %314 = getelementptr inbounds [8 x i32], [8 x i32]* %311, i64 0, i64 %313
  %315 = load i32, i32* %314, align 4
  %316 = add nsw i32 %315, %306
  store i32 %316, i32* %314, align 4
  %317 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %318 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %317, i32 0, i32 2
  %319 = load i8*, i8** %318, align 8
  %320 = load i32, i32* %17, align 4
  %321 = sext i32 %320 to i64
  %322 = getelementptr inbounds i8, i8* %319, i64 %321
  %323 = load i32, i32* %18, align 4
  %324 = load i32, i32* %20, align 4
  %325 = mul nsw i32 %323, %324
  %326 = sext i32 %325 to i64
  %327 = getelementptr inbounds i8, i8* %322, i64 %326
  %328 = load i8, i8* %327, align 1
  %329 = zext i8 %328 to i32
  %330 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %331 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %330, i32 0, i32 2
  %332 = load i8*, i8** %331, align 8
  %333 = load i32, i32* %17, align 4
  %334 = sext i32 %333 to i64
  %335 = getelementptr inbounds i8, i8* %332, i64 %334
  %336 = load i32, i32* %23, align 4
  %337 = sext i32 %336 to i64
  %338 = getelementptr inbounds i8, i8* %335, i64 %337
  %339 = load i32, i32* %18, align 4
  %340 = load i32, i32* %20, align 4
  %341 = mul nsw i32 %339, %340
  %342 = sext i32 %341 to i64
  %343 = getelementptr inbounds i8, i8* %338, i64 %342
  %344 = load i8, i8* %343, align 1
  %345 = zext i8 %344 to i32
  %346 = add nsw i32 %329, %345
  %347 = add nsw i32 %346, 1
  %348 = ashr i32 %347, 1
  store i32 %348, i32* %19, align 4
  %349 = load i32, i32* %19, align 4
  %350 = load %struct.mb_structure*, %struct.mb_structure** %12, align 8
  %351 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %350, i32 0, i32 2
  %352 = load i32, i32* %14, align 4
  %353 = sext i32 %352 to i64
  %354 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %351, i64 0, i64 %353
  %355 = load i32, i32* %13, align 4
  %356 = sext i32 %355 to i64
  %357 = getelementptr inbounds [8 x i32], [8 x i32]* %354, i64 0, i64 %356
  %358 = load i32, i32* %357, align 4
  %359 = add nsw i32 %358, %349
  store i32 %359, i32* %357, align 4
  br label %360

360:                                              ; preds = %263
  %361 = load i32, i32* %13, align 4
  %362 = add nsw i32 %361, 1
  store i32 %362, i32* %13, align 4
  br label %260

363:                                              ; preds = %260
  br label %364

364:                                              ; preds = %363
  %365 = load i32, i32* %14, align 4
  %366 = add nsw i32 %365, 1
  store i32 %366, i32* %14, align 4
  br label %256

367:                                              ; preds = %256
  br label %551

368:                                              ; preds = %252, %249
  store i32 0, i32* %14, align 4
  br label %369

369:                                              ; preds = %547, %368
  %370 = load i32, i32* %14, align 4
  %371 = icmp slt i32 %370, 8
  br i1 %371, label %372, label %550

372:                                              ; preds = %369
  store i32 0, i32* %13, align 4
  br label %373

373:                                              ; preds = %543, %372
  %374 = load i32, i32* %13, align 4
  %375 = icmp slt i32 %374, 8
  br i1 %375, label %376, label %546

376:                                              ; preds = %373
  %377 = load i32, i32* %15, align 4
  %378 = load i32, i32* %21, align 4
  %379 = add nsw i32 %377, %378
  %380 = load i32, i32* %13, align 4
  %381 = add nsw i32 %379, %380
  store i32 %381, i32* %17, align 4
  %382 = load i32, i32* %16, align 4
  %383 = load i32, i32* %22, align 4
  %384 = add nsw i32 %382, %383
  %385 = load i32, i32* %14, align 4
  %386 = add nsw i32 %384, %385
  store i32 %386, i32* %18, align 4
  %387 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %388 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %387, i32 0, i32 1
  %389 = load i8*, i8** %388, align 8
  %390 = load i32, i32* %17, align 4
  %391 = sext i32 %390 to i64
  %392 = getelementptr inbounds i8, i8* %389, i64 %391
  %393 = load i32, i32* %18, align 4
  %394 = load i32, i32* %20, align 4
  %395 = mul nsw i32 %393, %394
  %396 = sext i32 %395 to i64
  %397 = getelementptr inbounds i8, i8* %392, i64 %396
  %398 = load i8, i8* %397, align 1
  %399 = zext i8 %398 to i32
  %400 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %401 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %400, i32 0, i32 1
  %402 = load i8*, i8** %401, align 8
  %403 = load i32, i32* %17, align 4
  %404 = sext i32 %403 to i64
  %405 = getelementptr inbounds i8, i8* %402, i64 %404
  %406 = load i32, i32* %23, align 4
  %407 = sext i32 %406 to i64
  %408 = getelementptr inbounds i8, i8* %405, i64 %407
  %409 = load i32, i32* %18, align 4
  %410 = load i32, i32* %20, align 4
  %411 = mul nsw i32 %409, %410
  %412 = sext i32 %411 to i64
  %413 = getelementptr inbounds i8, i8* %408, i64 %412
  %414 = load i8, i8* %413, align 1
  %415 = zext i8 %414 to i32
  %416 = add nsw i32 %399, %415
  %417 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %418 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %417, i32 0, i32 1
  %419 = load i8*, i8** %418, align 8
  %420 = load i32, i32* %17, align 4
  %421 = sext i32 %420 to i64
  %422 = getelementptr inbounds i8, i8* %419, i64 %421
  %423 = load i32, i32* %18, align 4
  %424 = load i32, i32* %24, align 4
  %425 = add nsw i32 %423, %424
  %426 = load i32, i32* %20, align 4
  %427 = mul nsw i32 %425, %426
  %428 = sext i32 %427 to i64
  %429 = getelementptr inbounds i8, i8* %422, i64 %428
  %430 = load i8, i8* %429, align 1
  %431 = zext i8 %430 to i32
  %432 = add nsw i32 %416, %431
  %433 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %434 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %433, i32 0, i32 1
  %435 = load i8*, i8** %434, align 8
  %436 = load i32, i32* %17, align 4
  %437 = sext i32 %436 to i64
  %438 = getelementptr inbounds i8, i8* %435, i64 %437
  %439 = load i32, i32* %23, align 4
  %440 = sext i32 %439 to i64
  %441 = getelementptr inbounds i8, i8* %438, i64 %440
  %442 = load i32, i32* %18, align 4
  %443 = load i32, i32* %24, align 4
  %444 = add nsw i32 %442, %443
  %445 = load i32, i32* %20, align 4
  %446 = mul nsw i32 %444, %445
  %447 = sext i32 %446 to i64
  %448 = getelementptr inbounds i8, i8* %441, i64 %447
  %449 = load i8, i8* %448, align 1
  %450 = zext i8 %449 to i32
  %451 = add nsw i32 %432, %450
  %452 = add nsw i32 %451, 2
  %453 = ashr i32 %452, 2
  store i32 %453, i32* %19, align 4
  %454 = load i32, i32* %19, align 4
  %455 = load %struct.mb_structure*, %struct.mb_structure** %12, align 8
  %456 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %455, i32 0, i32 1
  %457 = load i32, i32* %14, align 4
  %458 = sext i32 %457 to i64
  %459 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %456, i64 0, i64 %458
  %460 = load i32, i32* %13, align 4
  %461 = sext i32 %460 to i64
  %462 = getelementptr inbounds [8 x i32], [8 x i32]* %459, i64 0, i64 %461
  %463 = load i32, i32* %462, align 4
  %464 = add nsw i32 %463, %454
  store i32 %464, i32* %462, align 4
  %465 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %466 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %465, i32 0, i32 2
  %467 = load i8*, i8** %466, align 8
  %468 = load i32, i32* %17, align 4
  %469 = sext i32 %468 to i64
  %470 = getelementptr inbounds i8, i8* %467, i64 %469
  %471 = load i32, i32* %18, align 4
  %472 = load i32, i32* %20, align 4
  %473 = mul nsw i32 %471, %472
  %474 = sext i32 %473 to i64
  %475 = getelementptr inbounds i8, i8* %470, i64 %474
  %476 = load i8, i8* %475, align 1
  %477 = zext i8 %476 to i32
  %478 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %479 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %478, i32 0, i32 2
  %480 = load i8*, i8** %479, align 8
  %481 = load i32, i32* %17, align 4
  %482 = sext i32 %481 to i64
  %483 = getelementptr inbounds i8, i8* %480, i64 %482
  %484 = load i32, i32* %23, align 4
  %485 = sext i32 %484 to i64
  %486 = getelementptr inbounds i8, i8* %483, i64 %485
  %487 = load i32, i32* %18, align 4
  %488 = load i32, i32* %20, align 4
  %489 = mul nsw i32 %487, %488
  %490 = sext i32 %489 to i64
  %491 = getelementptr inbounds i8, i8* %486, i64 %490
  %492 = load i8, i8* %491, align 1
  %493 = zext i8 %492 to i32
  %494 = add nsw i32 %477, %493
  %495 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %496 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %495, i32 0, i32 2
  %497 = load i8*, i8** %496, align 8
  %498 = load i32, i32* %17, align 4
  %499 = sext i32 %498 to i64
  %500 = getelementptr inbounds i8, i8* %497, i64 %499
  %501 = load i32, i32* %18, align 4
  %502 = load i32, i32* %24, align 4
  %503 = add nsw i32 %501, %502
  %504 = load i32, i32* %20, align 4
  %505 = mul nsw i32 %503, %504
  %506 = sext i32 %505 to i64
  %507 = getelementptr inbounds i8, i8* %500, i64 %506
  %508 = load i8, i8* %507, align 1
  %509 = zext i8 %508 to i32
  %510 = add nsw i32 %494, %509
  %511 = load %struct.pict_image*, %struct.pict_image** %11, align 8
  %512 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %511, i32 0, i32 2
  %513 = load i8*, i8** %512, align 8
  %514 = load i32, i32* %17, align 4
  %515 = sext i32 %514 to i64
  %516 = getelementptr inbounds i8, i8* %513, i64 %515
  %517 = load i32, i32* %23, align 4
  %518 = sext i32 %517 to i64
  %519 = getelementptr inbounds i8, i8* %516, i64 %518
  %520 = load i32, i32* %18, align 4
  %521 = load i32, i32* %24, align 4
  %522 = add nsw i32 %520, %521
  %523 = load i32, i32* %20, align 4
  %524 = mul nsw i32 %522, %523
  %525 = sext i32 %524 to i64
  %526 = getelementptr inbounds i8, i8* %519, i64 %525
  %527 = load i8, i8* %526, align 1
  %528 = zext i8 %527 to i32
  %529 = add nsw i32 %510, %528
  %530 = add nsw i32 %529, 2
  %531 = ashr i32 %530, 2
  store i32 %531, i32* %19, align 4
  %532 = load i32, i32* %19, align 4
  %533 = load %struct.mb_structure*, %struct.mb_structure** %12, align 8
  %534 = getelementptr inbounds %struct.mb_structure, %struct.mb_structure* %533, i32 0, i32 2
  %535 = load i32, i32* %14, align 4
  %536 = sext i32 %535 to i64
  %537 = getelementptr inbounds [8 x [8 x i32]], [8 x [8 x i32]]* %534, i64 0, i64 %536
  %538 = load i32, i32* %13, align 4
  %539 = sext i32 %538 to i64
  %540 = getelementptr inbounds [8 x i32], [8 x i32]* %537, i64 0, i64 %539
  %541 = load i32, i32* %540, align 4
  %542 = add nsw i32 %541, %532
  store i32 %542, i32* %540, align 4
  br label %543

543:                                              ; preds = %376
  %544 = load i32, i32* %13, align 4
  %545 = add nsw i32 %544, 1
  store i32 %545, i32* %13, align 4
  br label %373

546:                                              ; preds = %373
  br label %547

547:                                              ; preds = %546
  %548 = load i32, i32* %14, align 4
  %549 = add nsw i32 %548, 1
  store i32 %549, i32* %14, align 4
  br label %369

550:                                              ; preds = %369
  br label %551

551:                                              ; preds = %550, %367
  br label %552

552:                                              ; preds = %551, %248
  br label %553

553:                                              ; preds = %552, %131
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ReconLumBlock_P(i32 %0, i32 %1, %struct.motionvector* %2, i8* %3, i32* %4, i32 %5, i32 %6) #0 {
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.motionvector*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i32*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  store i32 %0, i32* %8, align 4
  store i32 %1, i32* %9, align 4
  store %struct.motionvector* %2, %struct.motionvector** %10, align 8
  store i8* %3, i8** %11, align 8
  store i32* %4, i32** %12, align 8
  store i32 %5, i32* %13, align 4
  store i32 %6, i32* %14, align 4
  %20 = load i32, i32* @mv_outside_frame, align 4
  %21 = icmp ne i32 %20, 0
  br i1 %21, label %22, label %29

22:                                               ; preds = %7
  %23 = load i32, i32* @pels, align 4
  %24 = load i32, i32* @long_vectors, align 4
  %25 = icmp ne i32 %24, 0
  %26 = zext i1 %25 to i64
  %27 = select i1 %25, i32 64, i32 32
  %28 = add nsw i32 %23, %27
  br label %31

29:                                               ; preds = %7
  %30 = load i32, i32* @pels, align 4
  br label %31

31:                                               ; preds = %29, %22
  %32 = phi i32 [ %28, %22 ], [ %30, %29 ]
  store i32 %32, i32* %19, align 4
  %33 = load i32, i32* %8, align 4
  %34 = load %struct.motionvector*, %struct.motionvector** %10, align 8
  %35 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %34, i32 0, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = add nsw i32 %33, %36
  %38 = mul nsw i32 2, %37
  %39 = load %struct.motionvector*, %struct.motionvector** %10, align 8
  %40 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %39, i32 0, i32 2
  %41 = load i32, i32* %40, align 4
  %42 = add nsw i32 %38, %41
  store i32 %42, i32* %17, align 4
  %43 = load i32, i32* %9, align 4
  %44 = load %struct.motionvector*, %struct.motionvector** %10, align 8
  %45 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %44, i32 0, i32 1
  %46 = load i32, i32* %45, align 4
  %47 = add nsw i32 %43, %46
  %48 = mul nsw i32 2, %47
  %49 = load %struct.motionvector*, %struct.motionvector** %10, align 8
  %50 = getelementptr inbounds %struct.motionvector, %struct.motionvector* %49, i32 0, i32 3
  %51 = load i32, i32* %50, align 4
  %52 = add nsw i32 %48, %51
  store i32 %52, i32* %18, align 4
  %53 = load i32, i32* %14, align 4
  %54 = and i32 %53, 1
  %55 = shl i32 %54, 4
  %56 = load i32, i32* %17, align 4
  %57 = add nsw i32 %56, %55
  store i32 %57, i32* %17, align 4
  %58 = load i32, i32* %14, align 4
  %59 = and i32 %58, 2
  %60 = shl i32 %59, 3
  %61 = load i32, i32* %18, align 4
  %62 = add nsw i32 %61, %60
  store i32 %62, i32* %18, align 4
  store i32 0, i32* %16, align 4
  br label %63

63:                                               ; preds = %106, %31
  %64 = load i32, i32* %16, align 4
  %65 = load i32, i32* %13, align 4
  %66 = icmp slt i32 %64, %65
  br i1 %66, label %67, label %109

67:                                               ; preds = %63
  store i32 0, i32* %15, align 4
  br label %68

68:                                               ; preds = %102, %67
  %69 = load i32, i32* %15, align 4
  %70 = load i32, i32* %13, align 4
  %71 = icmp slt i32 %69, %70
  br i1 %71, label %72, label %105

72:                                               ; preds = %68
  %73 = load i8*, i8** %11, align 8
  %74 = load i32, i32* %17, align 4
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i8, i8* %73, i64 %75
  %77 = load i32, i32* %15, align 4
  %78 = mul nsw i32 2, %77
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i8, i8* %76, i64 %79
  %81 = load i32, i32* %18, align 4
  %82 = load i32, i32* %16, align 4
  %83 = mul nsw i32 2, %82
  %84 = add nsw i32 %81, %83
  %85 = mul nsw i32 %84, 2
  %86 = load i32, i32* %19, align 4
  %87 = mul nsw i32 %85, %86
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds i8, i8* %80, i64 %88
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i32
  %92 = load i32*, i32** %12, align 8
  %93 = load i32, i32* %15, align 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds i32, i32* %92, i64 %94
  %96 = load i32, i32* %16, align 4
  %97 = mul nsw i32 %96, 16
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds i32, i32* %95, i64 %98
  %100 = load i32, i32* %99, align 4
  %101 = add nsw i32 %100, %91
  store i32 %101, i32* %99, align 4
  br label %102

102:                                              ; preds = %72
  %103 = load i32, i32* %15, align 4
  %104 = add nsw i32 %103, 1
  store i32 %104, i32* %15, align 4
  br label %68

105:                                              ; preds = %68
  br label %106

106:                                              ; preds = %105
  %107 = load i32, i32* %16, align 4
  %108 = add nsw i32 %107, 1
  store i32 %108, i32* %16, align 4
  br label %63

109:                                              ; preds = %63
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ChooseMode(i8* %0, i32 %1, i32 %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store i8* %0, i8** %6, align 8
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  store i32 0, i32* %12, align 4
  store i32 0, i32* %13, align 4
  store i32 0, i32* %11, align 4
  br label %15

15:                                               ; preds = %46, %4
  %16 = load i32, i32* %11, align 4
  %17 = icmp slt i32 %16, 16
  br i1 %17, label %18, label %49

18:                                               ; preds = %15
  %19 = load i32, i32* %8, align 4
  %20 = load i32, i32* %11, align 4
  %21 = add nsw i32 %19, %20
  %22 = load i32, i32* @pels, align 4
  %23 = mul nsw i32 %21, %22
  store i32 %23, i32* %14, align 4
  store i32 0, i32* %10, align 4
  br label %24

24:                                               ; preds = %42, %18
  %25 = load i32, i32* %10, align 4
  %26 = icmp slt i32 %25, 16
  br i1 %26, label %27, label %45

27:                                               ; preds = %24
  %28 = load i8*, i8** %6, align 8
  %29 = load i32, i32* %7, align 4
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds i8, i8* %28, i64 %30
  %32 = load i32, i32* %10, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i8, i8* %31, i64 %33
  %35 = load i32, i32* %14, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %34, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = load i32, i32* %12, align 4
  %41 = add nsw i32 %40, %39
  store i32 %41, i32* %12, align 4
  br label %42

42:                                               ; preds = %27
  %43 = load i32, i32* %10, align 4
  %44 = add nsw i32 %43, 1
  store i32 %44, i32* %10, align 4
  br label %24

45:                                               ; preds = %24
  br label %46

46:                                               ; preds = %45
  %47 = load i32, i32* %11, align 4
  %48 = add nsw i32 %47, 1
  store i32 %48, i32* %11, align 4
  br label %15

49:                                               ; preds = %15
  %50 = load i32, i32* %12, align 4
  %51 = sdiv i32 %50, 256
  store i32 %51, i32* %12, align 4
  store i32 0, i32* %11, align 4
  br label %52

52:                                               ; preds = %86, %49
  %53 = load i32, i32* %11, align 4
  %54 = icmp slt i32 %53, 16
  br i1 %54, label %55, label %89

55:                                               ; preds = %52
  %56 = load i32, i32* %8, align 4
  %57 = load i32, i32* %11, align 4
  %58 = add nsw i32 %56, %57
  %59 = load i32, i32* @pels, align 4
  %60 = mul nsw i32 %58, %59
  store i32 %60, i32* %14, align 4
  store i32 0, i32* %10, align 4
  br label %61

61:                                               ; preds = %82, %55
  %62 = load i32, i32* %10, align 4
  %63 = icmp slt i32 %62, 16
  br i1 %63, label %64, label %85

64:                                               ; preds = %61
  %65 = load i8*, i8** %6, align 8
  %66 = load i32, i32* %7, align 4
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds i8, i8* %65, i64 %67
  %69 = load i32, i32* %10, align 4
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds i8, i8* %68, i64 %70
  %72 = load i32, i32* %14, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i8, i8* %71, i64 %73
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i32
  %77 = load i32, i32* %12, align 4
  %78 = sub nsw i32 %76, %77
  %79 = call i32 @abs(i32 %78) #11
  %80 = load i32, i32* %13, align 4
  %81 = add nsw i32 %80, %79
  store i32 %81, i32* %13, align 4
  br label %82

82:                                               ; preds = %64
  %83 = load i32, i32* %10, align 4
  %84 = add nsw i32 %83, 1
  store i32 %84, i32* %10, align 4
  br label %61

85:                                               ; preds = %61
  br label %86

86:                                               ; preds = %85
  %87 = load i32, i32* %11, align 4
  %88 = add nsw i32 %87, 1
  store i32 %88, i32* %11, align 4
  br label %52

89:                                               ; preds = %52
  %90 = load i32, i32* %13, align 4
  %91 = load i32, i32* %9, align 4
  %92 = sub nsw i32 %91, 500
  %93 = icmp slt i32 %90, %92
  br i1 %93, label %94, label %95

94:                                               ; preds = %89
  store i32 3, i32* %5, align 4
  br label %96

95:                                               ; preds = %89
  store i32 0, i32* %5, align 4
  br label %96

96:                                               ; preds = %95, %94
  %97 = load i32, i32* %5, align 4
  ret i32 %97
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ModifyMode(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  %6 = load i32, i32* %4, align 4
  %7 = icmp eq i32 %6, 3
  br i1 %7, label %8, label %13

8:                                                ; preds = %2
  %9 = load i32, i32* %5, align 4
  %10 = icmp ne i32 %9, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %8
  store i32 4, i32* %3, align 4
  br label %19

12:                                               ; preds = %8
  store i32 3, i32* %3, align 4
  br label %19

13:                                               ; preds = %2
  %14 = load i32, i32* %5, align 4
  %15 = icmp ne i32 %14, 0
  br i1 %15, label %16, label %17

16:                                               ; preds = %13
  store i32 1, i32* %3, align 4
  br label %19

17:                                               ; preds = %13
  %18 = load i32, i32* %4, align 4
  store i32 %18, i32* %3, align 4
  br label %19

19:                                               ; preds = %17, %16, %12, %11
  %20 = load i32, i32* %3, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @initbits() #0 {
  store i32 8, i32* @outcnt, align 4
  store i32 0, i32* @bytecnt, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @putbits(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca [32 x i8], align 16
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %8 = load i32, i32* @trace, align 4
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %10, label %21

10:                                               ; preds = %2
  %11 = load i32, i32* %3, align 4
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %20

13:                                               ; preds = %10
  %14 = load i32, i32* %3, align 4
  %15 = load i32, i32* %4, align 4
  %16 = getelementptr inbounds [32 x i8], [32 x i8]* %7, i64 0, i64 0
  call void @BitPrint(i32 %14, i32 %15, i8* %16)
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %18 = getelementptr inbounds [32 x i8], [32 x i8]* %7, i64 0, i64 0
  %19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* %18)
  br label %20

20:                                               ; preds = %13, %10
  br label %21

21:                                               ; preds = %20, %2
  %22 = load i32, i32* %3, align 4
  %23 = sub nsw i32 %22, 1
  %24 = shl i32 1, %23
  store i32 %24, i32* %6, align 4
  store i32 0, i32* %5, align 4
  br label %25

25:                                               ; preds = %58, %21
  %26 = load i32, i32* %5, align 4
  %27 = load i32, i32* %3, align 4
  %28 = icmp slt i32 %26, %27
  br i1 %28, label %29, label %61

29:                                               ; preds = %25
  %30 = load i8, i8* @outbfr, align 1
  %31 = zext i8 %30 to i32
  %32 = shl i32 %31, 1
  %33 = trunc i32 %32 to i8
  store i8 %33, i8* @outbfr, align 1
  %34 = load i32, i32* %4, align 4
  %35 = load i32, i32* %6, align 4
  %36 = and i32 %34, %35
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %38, label %43

38:                                               ; preds = %29
  %39 = load i8, i8* @outbfr, align 1
  %40 = zext i8 %39 to i32
  %41 = or i32 %40, 1
  %42 = trunc i32 %41 to i8
  store i8 %42, i8* @outbfr, align 1
  br label %43

43:                                               ; preds = %38, %29
  %44 = load i32, i32* %6, align 4
  %45 = lshr i32 %44, 1
  store i32 %45, i32* %6, align 4
  %46 = load i32, i32* @outcnt, align 4
  %47 = add nsw i32 %46, -1
  store i32 %47, i32* @outcnt, align 4
  %48 = load i32, i32* @outcnt, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %57

50:                                               ; preds = %43
  %51 = load i8, i8* @outbfr, align 1
  %52 = zext i8 %51 to i32
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** @streamfile, align 8
  %54 = call i32 @putc(i32 %52, %struct._IO_FILE* %53)
  store i32 8, i32* @outcnt, align 4
  %55 = load i32, i32* @bytecnt, align 4
  %56 = add nsw i32 %55, 1
  store i32 %56, i32* @bytecnt, align 4
  br label %57

57:                                               ; preds = %50, %43
  br label %58

58:                                               ; preds = %57
  %59 = load i32, i32* %5, align 4
  %60 = add nsw i32 %59, 1
  store i32 %60, i32* %5, align 4
  br label %25

61:                                               ; preds = %25
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BitPrint(i32 %0, i32 %1, i8* %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store i8* %2, i8** %6, align 8
  %8 = load i32, i32* %4, align 4
  store i32 %8, i32* %7, align 4
  %9 = load i8*, i8** %6, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 0
  store i8 34, i8* %10, align 1
  br label %11

11:                                               ; preds = %15, %3
  %12 = load i32, i32* %7, align 4
  %13 = add nsw i32 %12, -1
  store i32 %13, i32* %7, align 4
  %14 = icmp ne i32 %12, 0
  br i1 %14, label %15, label %30

15:                                               ; preds = %11
  %16 = load i32, i32* %5, align 4
  %17 = load i32, i32* %7, align 4
  %18 = shl i32 1, %17
  %19 = and i32 %16, %18
  %20 = icmp ne i32 %19, 0
  %21 = zext i1 %20 to i64
  %22 = select i1 %20, i32 49, i32 48
  %23 = trunc i32 %22 to i8
  %24 = load i8*, i8** %6, align 8
  %25 = load i32, i32* %4, align 4
  %26 = load i32, i32* %7, align 4
  %27 = sub nsw i32 %25, %26
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i8, i8* %24, i64 %28
  store i8 %23, i8* %29, align 1
  br label %11

30:                                               ; preds = %11
  %31 = load i8*, i8** %6, align 8
  %32 = load i32, i32* %4, align 4
  %33 = add nsw i32 %32, 1
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i8, i8* %31, i64 %34
  store i8 34, i8* %35, align 1
  %36 = load i8*, i8** %6, align 8
  %37 = load i32, i32* %4, align 4
  %38 = add nsw i32 %37, 2
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %36, i64 %39
  store i8 10, i8* %40, align 1
  %41 = load i8*, i8** %6, align 8
  %42 = load i32, i32* %4, align 4
  %43 = add nsw i32 %42, 3
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %41, i64 %44
  store i8 0, i8* %45, align 1
  ret void
}

declare dso_local i32 @putc(i32, %struct._IO_FILE*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @alignbits() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = load i32, i32* @outcnt, align 4
  %4 = icmp ne i32 %3, 8
  br i1 %4, label %5, label %9

5:                                                ; preds = %0
  %6 = load i32, i32* @outcnt, align 4
  store i32 %6, i32* %2, align 4
  %7 = load i32, i32* @outcnt, align 4
  call void @putbits(i32 %7, i32 0)
  %8 = load i32, i32* %2, align 4
  store i32 %8, i32* %1, align 4
  br label %10

9:                                                ; preds = %0
  store i32 0, i32* %1, align 4
  br label %10

10:                                               ; preds = %9, %5
  %11 = load i32, i32* %1, align 4
  ret i32 %11
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @bitcount() #0 {
  %1 = load i32, i32* @bytecnt, align 4
  %2 = mul nsw i32 8, %1
  %3 = load i32, i32* @outcnt, align 4
  %4 = sub nsw i32 8, %3
  %5 = add nsw i32 %2, %4
  ret i32 %5
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @put_mv(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  %6 = load i32, i32* %3, align 4
  %7 = icmp sge i32 %6, 32
  br i1 %7, label %8, label %12

8:                                                ; preds = %1
  %9 = load i32, i32* %3, align 4
  %10 = sub nsw i32 0, %9
  %11 = add nsw i32 %10, 64
  store i32 %11, i32* %5, align 4
  store i32 1, i32* %4, align 4
  br label %14

12:                                               ; preds = %1
  %13 = load i32, i32* %3, align 4
  store i32 %13, i32* %5, align 4
  br label %14

14:                                               ; preds = %12, %8
  %15 = load i32, i32* %5, align 4
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds [33 x %struct.point], [33 x %struct.point]* @mvtab, i64 0, i64 %16
  %18 = getelementptr inbounds %struct.point, %struct.point* %17, i32 0, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = load i32, i32* %5, align 4
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds [33 x %struct.point], [33 x %struct.point]* @mvtab, i64 0, i64 %21
  %23 = getelementptr inbounds %struct.point, %struct.point* %22, i32 0, i32 0
  %24 = load i32, i32* %23, align 8
  call void @putbits(i32 %19, i32 %24)
  %25 = load i32, i32* %3, align 4
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %35

27:                                               ; preds = %14
  %28 = load i32, i32* %4, align 4
  call void @putbits(i32 1, i32 %28)
  %29 = load i32, i32* %5, align 4
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds [33 x %struct.point], [33 x %struct.point]* @mvtab, i64 0, i64 %30
  %32 = getelementptr inbounds %struct.point, %struct.point* %31, i32 0, i32 1
  %33 = load i32, i32* %32, align 4
  %34 = add nsw i32 %33, 1
  store i32 %34, i32* %2, align 4
  br label %41

35:                                               ; preds = %14
  %36 = load i32, i32* %5, align 4
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds [33 x %struct.point], [33 x %struct.point]* @mvtab, i64 0, i64 %37
  %39 = getelementptr inbounds %struct.point, %struct.point* %38, i32 0, i32 1
  %40 = load i32, i32* %39, align 4
  store i32 %40, i32* %2, align 4
  br label %41

41:                                               ; preds = %35, %27
  %42 = load i32, i32* %2, align 4
  ret i32 %42
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @put_cbpcm_intra(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %6 = load i32, i32* %4, align 4
  %7 = and i32 %6, 3
  %8 = ashr i32 %7, 1
  %9 = load i32, i32* %3, align 4
  %10 = and i32 %9, 3
  %11 = shl i32 %10, 2
  %12 = or i32 %8, %11
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %5, align 4
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds [15 x %struct.point], [15 x %struct.point]* @cbpcm_intra_tab, i64 0, i64 %14
  %16 = getelementptr inbounds %struct.point, %struct.point* %15, i32 0, i32 1
  %17 = load i32, i32* %16, align 4
  %18 = load i32, i32* %5, align 4
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds [15 x %struct.point], [15 x %struct.point]* @cbpcm_intra_tab, i64 0, i64 %19
  %21 = getelementptr inbounds %struct.point, %struct.point* %20, i32 0, i32 0
  %22 = load i32, i32* %21, align 8
  call void @putbits(i32 %17, i32 %22)
  %23 = load i32, i32* %5, align 4
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds [15 x %struct.point], [15 x %struct.point]* @cbpcm_intra_tab, i64 0, i64 %24
  %26 = getelementptr inbounds %struct.point, %struct.point* %25, i32 0, i32 1
  %27 = load i32, i32* %26, align 4
  ret i32 %27
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @put_cbpcm_inter(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %6 = load i32, i32* %4, align 4
  %7 = and i32 %6, 7
  %8 = load i32, i32* %3, align 4
  %9 = and i32 %8, 3
  %10 = shl i32 %9, 3
  %11 = or i32 %7, %10
  store i32 %11, i32* %5, align 4
  %12 = load i32, i32* %5, align 4
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds [29 x %struct.point], [29 x %struct.point]* @cbpcm_inter_tab, i64 0, i64 %13
  %15 = getelementptr inbounds %struct.point, %struct.point* %14, i32 0, i32 1
  %16 = load i32, i32* %15, align 4
  %17 = load i32, i32* %5, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds [29 x %struct.point], [29 x %struct.point]* @cbpcm_inter_tab, i64 0, i64 %18
  %20 = getelementptr inbounds %struct.point, %struct.point* %19, i32 0, i32 0
  %21 = load i32, i32* %20, align 8
  call void @putbits(i32 %16, i32 %21)
  %22 = load i32, i32* %5, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds [29 x %struct.point], [29 x %struct.point]* @cbpcm_inter_tab, i64 0, i64 %23
  %25 = getelementptr inbounds %struct.point, %struct.point* %24, i32 0, i32 1
  %26 = load i32, i32* %25, align 4
  ret i32 %26
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @put_cbpy(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %6 = load i32, i32* %3, align 4
  %7 = ashr i32 %6, 2
  store i32 %7, i32* %5, align 4
  %8 = load i32, i32* %4, align 4
  %9 = icmp slt i32 %8, 3
  br i1 %9, label %10, label %13

10:                                               ; preds = %2
  %11 = load i32, i32* %5, align 4
  %12 = xor i32 %11, 15
  store i32 %12, i32* %5, align 4
  br label %13

13:                                               ; preds = %10, %2
  %14 = load i32, i32* %5, align 4
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds [16 x %struct.point], [16 x %struct.point]* @cbpy_tab, i64 0, i64 %15
  %17 = getelementptr inbounds %struct.point, %struct.point* %16, i32 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = load i32, i32* %5, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds [16 x %struct.point], [16 x %struct.point]* @cbpy_tab, i64 0, i64 %20
  %22 = getelementptr inbounds %struct.point, %struct.point* %21, i32 0, i32 0
  %23 = load i32, i32* %22, align 8
  call void @putbits(i32 %18, i32 %23)
  %24 = load i32, i32* %5, align 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds [16 x %struct.point], [16 x %struct.point]* @cbpy_tab, i64 0, i64 %25
  %27 = getelementptr inbounds %struct.point, %struct.point* %26, i32 0, i32 1
  %28 = load i32, i32* %27, align 4
  ret i32 %28
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @put_coeff(i32 %0, i32 %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  store i32 0, i32* %7, align 4
  %8 = load i32, i32* %6, align 4
  %9 = icmp sge i32 %8, 0
  br i1 %9, label %10, label %14

10:                                               ; preds = %3
  %11 = load i32, i32* %6, align 4
  %12 = icmp slt i32 %11, 2
  br i1 %12, label %13, label %14

13:                                               ; preds = %10
  br label %15

14:                                               ; preds = %10, %3
  call void @__assert_fail(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.151, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1.152, i64 0, i64 0), i32 115, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @__PRETTY_FUNCTION__.put_coeff, i64 0, i64 0)) #9
  unreachable

15:                                               ; preds = %13
  %16 = load i32, i32* %4, align 4
  %17 = icmp sge i32 %16, 0
  br i1 %17, label %18, label %22

18:                                               ; preds = %15
  %19 = load i32, i32* %4, align 4
  %20 = icmp slt i32 %19, 64
  br i1 %20, label %21, label %22

21:                                               ; preds = %18
  br label %23

22:                                               ; preds = %18, %15
  call void @__assert_fail(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2.153, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1.152, i64 0, i64 0), i32 116, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @__PRETTY_FUNCTION__.put_coeff, i64 0, i64 0)) #9
  unreachable

23:                                               ; preds = %21
  %24 = load i32, i32* %5, align 4
  %25 = icmp sgt i32 %24, 0
  br i1 %25, label %26, label %30

26:                                               ; preds = %23
  %27 = load i32, i32* %5, align 4
  %28 = icmp slt i32 %27, 128
  br i1 %28, label %29, label %30

29:                                               ; preds = %26
  br label %31

30:                                               ; preds = %26, %23
  call void @__assert_fail(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3.154, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1.152, i64 0, i64 0), i32 117, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @__PRETTY_FUNCTION__.put_coeff, i64 0, i64 0)) #9
  unreachable

31:                                               ; preds = %29
  %32 = load i32, i32* %6, align 4
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %110

34:                                               ; preds = %31
  %35 = load i32, i32* %4, align 4
  %36 = icmp slt i32 %35, 2
  br i1 %36, label %37, label %68

37:                                               ; preds = %34
  %38 = load i32, i32* %5, align 4
  %39 = icmp slt i32 %38, 13
  br i1 %39, label %40, label %68

40:                                               ; preds = %37
  %41 = load i32, i32* %4, align 4
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds [2 x [12 x %struct.point]], [2 x [12 x %struct.point]]* @coeff_tab0, i64 0, i64 %42
  %44 = load i32, i32* %5, align 4
  %45 = sub nsw i32 %44, 1
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [12 x %struct.point], [12 x %struct.point]* %43, i64 0, i64 %46
  %48 = getelementptr inbounds %struct.point, %struct.point* %47, i32 0, i32 1
  %49 = load i32, i32* %48, align 4
  %50 = load i32, i32* %4, align 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds [2 x [12 x %struct.point]], [2 x [12 x %struct.point]]* @coeff_tab0, i64 0, i64 %51
  %53 = load i32, i32* %5, align 4
  %54 = sub nsw i32 %53, 1
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds [12 x %struct.point], [12 x %struct.point]* %52, i64 0, i64 %55
  %57 = getelementptr inbounds %struct.point, %struct.point* %56, i32 0, i32 0
  %58 = load i32, i32* %57, align 8
  call void @putbits(i32 %49, i32 %58)
  %59 = load i32, i32* %4, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds [2 x [12 x %struct.point]], [2 x [12 x %struct.point]]* @coeff_tab0, i64 0, i64 %60
  %62 = load i32, i32* %5, align 4
  %63 = sub nsw i32 %62, 1
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [12 x %struct.point], [12 x %struct.point]* %61, i64 0, i64 %64
  %66 = getelementptr inbounds %struct.point, %struct.point* %65, i32 0, i32 1
  %67 = load i32, i32* %66, align 4
  store i32 %67, i32* %7, align 4
  br label %109

68:                                               ; preds = %37, %34
  %69 = load i32, i32* %4, align 4
  %70 = icmp sgt i32 %69, 1
  br i1 %70, label %71, label %108

71:                                               ; preds = %68
  %72 = load i32, i32* %4, align 4
  %73 = icmp slt i32 %72, 27
  br i1 %73, label %74, label %108

74:                                               ; preds = %71
  %75 = load i32, i32* %5, align 4
  %76 = icmp slt i32 %75, 5
  br i1 %76, label %77, label %108

77:                                               ; preds = %74
  %78 = load i32, i32* %4, align 4
  %79 = sub nsw i32 %78, 2
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds [25 x [4 x %struct.point]], [25 x [4 x %struct.point]]* @coeff_tab1, i64 0, i64 %80
  %82 = load i32, i32* %5, align 4
  %83 = sub nsw i32 %82, 1
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds [4 x %struct.point], [4 x %struct.point]* %81, i64 0, i64 %84
  %86 = getelementptr inbounds %struct.point, %struct.point* %85, i32 0, i32 1
  %87 = load i32, i32* %86, align 4
  %88 = load i32, i32* %4, align 4
  %89 = sub nsw i32 %88, 2
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds [25 x [4 x %struct.point]], [25 x [4 x %struct.point]]* @coeff_tab1, i64 0, i64 %90
  %92 = load i32, i32* %5, align 4
  %93 = sub nsw i32 %92, 1
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds [4 x %struct.point], [4 x %struct.point]* %91, i64 0, i64 %94
  %96 = getelementptr inbounds %struct.point, %struct.point* %95, i32 0, i32 0
  %97 = load i32, i32* %96, align 8
  call void @putbits(i32 %87, i32 %97)
  %98 = load i32, i32* %4, align 4
  %99 = sub nsw i32 %98, 2
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds [25 x [4 x %struct.point]], [25 x [4 x %struct.point]]* @coeff_tab1, i64 0, i64 %100
  %102 = load i32, i32* %5, align 4
  %103 = sub nsw i32 %102, 1
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds [4 x %struct.point], [4 x %struct.point]* %101, i64 0, i64 %104
  %106 = getelementptr inbounds %struct.point, %struct.point* %105, i32 0, i32 1
  %107 = load i32, i32* %106, align 4
  store i32 %107, i32* %7, align 4
  br label %108

108:                                              ; preds = %77, %74, %71, %68
  br label %109

109:                                              ; preds = %108, %40
  br label %178

110:                                              ; preds = %31
  %111 = load i32, i32* %6, align 4
  %112 = icmp eq i32 %111, 1
  br i1 %112, label %113, label %177

113:                                              ; preds = %110
  %114 = load i32, i32* %4, align 4
  %115 = icmp slt i32 %114, 2
  br i1 %115, label %116, label %147

116:                                              ; preds = %113
  %117 = load i32, i32* %5, align 4
  %118 = icmp slt i32 %117, 4
  br i1 %118, label %119, label %147

119:                                              ; preds = %116
  %120 = load i32, i32* %4, align 4
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds [2 x [3 x %struct.point]], [2 x [3 x %struct.point]]* @coeff_tab2, i64 0, i64 %121
  %123 = load i32, i32* %5, align 4
  %124 = sub nsw i32 %123, 1
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds [3 x %struct.point], [3 x %struct.point]* %122, i64 0, i64 %125
  %127 = getelementptr inbounds %struct.point, %struct.point* %126, i32 0, i32 1
  %128 = load i32, i32* %127, align 4
  %129 = load i32, i32* %4, align 4
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds [2 x [3 x %struct.point]], [2 x [3 x %struct.point]]* @coeff_tab2, i64 0, i64 %130
  %132 = load i32, i32* %5, align 4
  %133 = sub nsw i32 %132, 1
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds [3 x %struct.point], [3 x %struct.point]* %131, i64 0, i64 %134
  %136 = getelementptr inbounds %struct.point, %struct.point* %135, i32 0, i32 0
  %137 = load i32, i32* %136, align 8
  call void @putbits(i32 %128, i32 %137)
  %138 = load i32, i32* %4, align 4
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds [2 x [3 x %struct.point]], [2 x [3 x %struct.point]]* @coeff_tab2, i64 0, i64 %139
  %141 = load i32, i32* %5, align 4
  %142 = sub nsw i32 %141, 1
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds [3 x %struct.point], [3 x %struct.point]* %140, i64 0, i64 %143
  %145 = getelementptr inbounds %struct.point, %struct.point* %144, i32 0, i32 1
  %146 = load i32, i32* %145, align 4
  store i32 %146, i32* %7, align 4
  br label %176

147:                                              ; preds = %116, %113
  %148 = load i32, i32* %4, align 4
  %149 = icmp sgt i32 %148, 1
  br i1 %149, label %150, label %175

150:                                              ; preds = %147
  %151 = load i32, i32* %4, align 4
  %152 = icmp slt i32 %151, 42
  br i1 %152, label %153, label %175

153:                                              ; preds = %150
  %154 = load i32, i32* %5, align 4
  %155 = icmp eq i32 %154, 1
  br i1 %155, label %156, label %175

156:                                              ; preds = %153
  %157 = load i32, i32* %4, align 4
  %158 = sub nsw i32 %157, 2
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds [40 x %struct.point], [40 x %struct.point]* @coeff_tab3, i64 0, i64 %159
  %161 = getelementptr inbounds %struct.point, %struct.point* %160, i32 0, i32 1
  %162 = load i32, i32* %161, align 4
  %163 = load i32, i32* %4, align 4
  %164 = sub nsw i32 %163, 2
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds [40 x %struct.point], [40 x %struct.point]* @coeff_tab3, i64 0, i64 %165
  %167 = getelementptr inbounds %struct.point, %struct.point* %166, i32 0, i32 0
  %168 = load i32, i32* %167, align 8
  call void @putbits(i32 %162, i32 %168)
  %169 = load i32, i32* %4, align 4
  %170 = sub nsw i32 %169, 2
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds [40 x %struct.point], [40 x %struct.point]* @coeff_tab3, i64 0, i64 %171
  %173 = getelementptr inbounds %struct.point, %struct.point* %172, i32 0, i32 1
  %174 = load i32, i32* %173, align 4
  store i32 %174, i32* %7, align 4
  br label %175

175:                                              ; preds = %156, %153, %150, %147
  br label %176

176:                                              ; preds = %175, %119
  br label %177

177:                                              ; preds = %176, %110
  br label %178

178:                                              ; preds = %177, %109
  %179 = load i32, i32* %7, align 4
  ret i32 %179
}

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(i8*, i8*, i32, i8*) #4

; Function Attrs: noinline nounwind uwtable
define dso_local void @Quant(i32* %0, i32* %1, i32 %2, i32 %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32 %2, i32* %7, align 4
  store i32 %3, i32* %8, align 4
  %11 = load i32, i32* %7, align 4
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %13, label %210

13:                                               ; preds = %4
  %14 = load i32, i32* %8, align 4
  %15 = icmp eq i32 %14, 3
  br i1 %15, label %19, label %16

16:                                               ; preds = %13
  %17 = load i32, i32* %8, align 4
  %18 = icmp eq i32 %17, 4
  br i1 %18, label %19, label %129

19:                                               ; preds = %16, %13
  %20 = load i32*, i32** %5, align 8
  %21 = getelementptr inbounds i32, i32* %20, i64 0
  %22 = load i32, i32* %21, align 4
  %23 = sdiv i32 %22, 8
  %24 = icmp slt i32 254, %23
  br i1 %24, label %25, label %26

25:                                               ; preds = %19
  br label %31

26:                                               ; preds = %19
  %27 = load i32*, i32** %5, align 8
  %28 = getelementptr inbounds i32, i32* %27, i64 0
  %29 = load i32, i32* %28, align 4
  %30 = sdiv i32 %29, 8
  br label %31

31:                                               ; preds = %26, %25
  %32 = phi i32 [ 254, %25 ], [ %30, %26 ]
  %33 = icmp sgt i32 1, %32
  br i1 %33, label %34, label %35

34:                                               ; preds = %31
  br label %49

35:                                               ; preds = %31
  %36 = load i32*, i32** %5, align 8
  %37 = getelementptr inbounds i32, i32* %36, i64 0
  %38 = load i32, i32* %37, align 4
  %39 = sdiv i32 %38, 8
  %40 = icmp slt i32 254, %39
  br i1 %40, label %41, label %42

41:                                               ; preds = %35
  br label %47

42:                                               ; preds = %35
  %43 = load i32*, i32** %5, align 8
  %44 = getelementptr inbounds i32, i32* %43, i64 0
  %45 = load i32, i32* %44, align 4
  %46 = sdiv i32 %45, 8
  br label %47

47:                                               ; preds = %42, %41
  %48 = phi i32 [ 254, %41 ], [ %46, %42 ]
  br label %49

49:                                               ; preds = %47, %34
  %50 = phi i32 [ 1, %34 ], [ %48, %47 ]
  %51 = load i32*, i32** %6, align 8
  %52 = getelementptr inbounds i32, i32* %51, i64 0
  store i32 %50, i32* %52, align 4
  store i32 1, i32* %9, align 4
  br label %53

53:                                               ; preds = %125, %49
  %54 = load i32, i32* %9, align 4
  %55 = icmp slt i32 %54, 64
  br i1 %55, label %56, label %128

56:                                               ; preds = %53
  %57 = load i32*, i32** %5, align 8
  %58 = load i32, i32* %9, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i32, i32* %57, i64 %59
  %61 = load i32, i32* %60, align 4
  %62 = call i32 @abs(i32 %61) #11
  %63 = load i32, i32* %7, align 4
  %64 = mul nsw i32 2, %63
  %65 = sdiv i32 %62, %64
  store i32 %65, i32* %10, align 4
  %66 = load i32*, i32** %5, align 8
  %67 = load i32, i32* %9, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i32, i32* %66, i64 %68
  %70 = load i32, i32* %69, align 4
  %71 = icmp slt i32 %70, 0
  %72 = zext i1 %71 to i64
  %73 = select i1 %71, i32 -1, i32 1
  %74 = load i32, i32* %10, align 4
  %75 = mul nsw i32 %73, %74
  %76 = icmp sgt i32 -127, %75
  br i1 %76, label %77, label %78

77:                                               ; preds = %56
  br label %89

78:                                               ; preds = %56
  %79 = load i32*, i32** %5, align 8
  %80 = load i32, i32* %9, align 4
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds i32, i32* %79, i64 %81
  %83 = load i32, i32* %82, align 4
  %84 = icmp slt i32 %83, 0
  %85 = zext i1 %84 to i64
  %86 = select i1 %84, i32 -1, i32 1
  %87 = load i32, i32* %10, align 4
  %88 = mul nsw i32 %86, %87
  br label %89

89:                                               ; preds = %78, %77
  %90 = phi i32 [ -127, %77 ], [ %88, %78 ]
  %91 = icmp slt i32 127, %90
  br i1 %91, label %92, label %93

92:                                               ; preds = %89
  br label %119

93:                                               ; preds = %89
  %94 = load i32*, i32** %5, align 8
  %95 = load i32, i32* %9, align 4
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds i32, i32* %94, i64 %96
  %98 = load i32, i32* %97, align 4
  %99 = icmp slt i32 %98, 0
  %100 = zext i1 %99 to i64
  %101 = select i1 %99, i32 -1, i32 1
  %102 = load i32, i32* %10, align 4
  %103 = mul nsw i32 %101, %102
  %104 = icmp sgt i32 -127, %103
  br i1 %104, label %105, label %106

105:                                              ; preds = %93
  br label %117

106:                                              ; preds = %93
  %107 = load i32*, i32** %5, align 8
  %108 = load i32, i32* %9, align 4
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i32, i32* %107, i64 %109
  %111 = load i32, i32* %110, align 4
  %112 = icmp slt i32 %111, 0
  %113 = zext i1 %112 to i64
  %114 = select i1 %112, i32 -1, i32 1
  %115 = load i32, i32* %10, align 4
  %116 = mul nsw i32 %114, %115
  br label %117

117:                                              ; preds = %106, %105
  %118 = phi i32 [ -127, %105 ], [ %116, %106 ]
  br label %119

119:                                              ; preds = %117, %92
  %120 = phi i32 [ 127, %92 ], [ %118, %117 ]
  %121 = load i32*, i32** %6, align 8
  %122 = load i32, i32* %9, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds i32, i32* %121, i64 %123
  store i32 %120, i32* %124, align 4
  br label %125

125:                                              ; preds = %119
  %126 = load i32, i32* %9, align 4
  %127 = add nsw i32 %126, 1
  store i32 %127, i32* %9, align 4
  br label %53

128:                                              ; preds = %53
  br label %209

129:                                              ; preds = %16
  store i32 0, i32* %9, align 4
  br label %130

130:                                              ; preds = %205, %129
  %131 = load i32, i32* %9, align 4
  %132 = icmp slt i32 %131, 64
  br i1 %132, label %133, label %208

133:                                              ; preds = %130
  %134 = load i32*, i32** %5, align 8
  %135 = load i32, i32* %9, align 4
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds i32, i32* %134, i64 %136
  %138 = load i32, i32* %137, align 4
  %139 = call i32 @abs(i32 %138) #11
  %140 = load i32, i32* %7, align 4
  %141 = sdiv i32 %140, 2
  %142 = sub nsw i32 %139, %141
  %143 = load i32, i32* %7, align 4
  %144 = mul nsw i32 2, %143
  %145 = sdiv i32 %142, %144
  store i32 %145, i32* %10, align 4
  %146 = load i32*, i32** %5, align 8
  %147 = load i32, i32* %9, align 4
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds i32, i32* %146, i64 %148
  %150 = load i32, i32* %149, align 4
  %151 = icmp slt i32 %150, 0
  %152 = zext i1 %151 to i64
  %153 = select i1 %151, i32 -1, i32 1
  %154 = load i32, i32* %10, align 4
  %155 = mul nsw i32 %153, %154
  %156 = icmp sgt i32 -127, %155
  br i1 %156, label %157, label %158

157:                                              ; preds = %133
  br label %169

158:                                              ; preds = %133
  %159 = load i32*, i32** %5, align 8
  %160 = load i32, i32* %9, align 4
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds i32, i32* %159, i64 %161
  %163 = load i32, i32* %162, align 4
  %164 = icmp slt i32 %163, 0
  %165 = zext i1 %164 to i64
  %166 = select i1 %164, i32 -1, i32 1
  %167 = load i32, i32* %10, align 4
  %168 = mul nsw i32 %166, %167
  br label %169

169:                                              ; preds = %158, %157
  %170 = phi i32 [ -127, %157 ], [ %168, %158 ]
  %171 = icmp slt i32 127, %170
  br i1 %171, label %172, label %173

172:                                              ; preds = %169
  br label %199

173:                                              ; preds = %169
  %174 = load i32*, i32** %5, align 8
  %175 = load i32, i32* %9, align 4
  %176 = sext i32 %175 to i64
  %177 = getelementptr inbounds i32, i32* %174, i64 %176
  %178 = load i32, i32* %177, align 4
  %179 = icmp slt i32 %178, 0
  %180 = zext i1 %179 to i64
  %181 = select i1 %179, i32 -1, i32 1
  %182 = load i32, i32* %10, align 4
  %183 = mul nsw i32 %181, %182
  %184 = icmp sgt i32 -127, %183
  br i1 %184, label %185, label %186

185:                                              ; preds = %173
  br label %197

186:                                              ; preds = %173
  %187 = load i32*, i32** %5, align 8
  %188 = load i32, i32* %9, align 4
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds i32, i32* %187, i64 %189
  %191 = load i32, i32* %190, align 4
  %192 = icmp slt i32 %191, 0
  %193 = zext i1 %192 to i64
  %194 = select i1 %192, i32 -1, i32 1
  %195 = load i32, i32* %10, align 4
  %196 = mul nsw i32 %194, %195
  br label %197

197:                                              ; preds = %186, %185
  %198 = phi i32 [ -127, %185 ], [ %196, %186 ]
  br label %199

199:                                              ; preds = %197, %172
  %200 = phi i32 [ 127, %172 ], [ %198, %197 ]
  %201 = load i32*, i32** %6, align 8
  %202 = load i32, i32* %9, align 4
  %203 = sext i32 %202 to i64
  %204 = getelementptr inbounds i32, i32* %201, i64 %203
  store i32 %200, i32* %204, align 4
  br label %205

205:                                              ; preds = %199
  %206 = load i32, i32* %9, align 4
  %207 = add nsw i32 %206, 1
  store i32 %207, i32* %9, align 4
  br label %130

208:                                              ; preds = %130
  br label %209

209:                                              ; preds = %208, %128
  br label %228

210:                                              ; preds = %4
  store i32 0, i32* %9, align 4
  br label %211

211:                                              ; preds = %224, %210
  %212 = load i32, i32* %9, align 4
  %213 = icmp slt i32 %212, 64
  br i1 %213, label %214, label %227

214:                                              ; preds = %211
  %215 = load i32*, i32** %5, align 8
  %216 = load i32, i32* %9, align 4
  %217 = sext i32 %216 to i64
  %218 = getelementptr inbounds i32, i32* %215, i64 %217
  %219 = load i32, i32* %218, align 4
  %220 = load i32*, i32** %6, align 8
  %221 = load i32, i32* %9, align 4
  %222 = sext i32 %221 to i64
  %223 = getelementptr inbounds i32, i32* %220, i64 %222
  store i32 %219, i32* %223, align 4
  br label %224

224:                                              ; preds = %214
  %225 = load i32, i32* %9, align 4
  %226 = add nsw i32 %225, 1
  store i32 %226, i32* %9, align 4
  br label %211

227:                                              ; preds = %211
  br label %228

228:                                              ; preds = %227, %209
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Dequant(i32* %0, i32* %1, i32 %2, i32 %3) #0 {
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32 %2, i32* %7, align 4
  store i32 %3, i32* %8, align 4
  %10 = load i32, i32* %7, align 4
  %11 = icmp ne i32 %10, 0
  br i1 %11, label %12, label %100

12:                                               ; preds = %4
  store i32 0, i32* %9, align 4
  br label %13

13:                                               ; preds = %83, %12
  %14 = load i32, i32* %9, align 4
  %15 = icmp slt i32 %14, 64
  br i1 %15, label %16, label %86

16:                                               ; preds = %13
  %17 = load i32*, i32** %5, align 8
  %18 = load i32, i32* %9, align 4
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds i32, i32* %17, i64 %19
  %21 = load i32, i32* %20, align 4
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %23, label %77

23:                                               ; preds = %16
  %24 = load i32, i32* %7, align 4
  %25 = srem i32 %24, 2
  %26 = icmp eq i32 %25, 1
  br i1 %26, label %27, label %42

27:                                               ; preds = %23
  %28 = load i32, i32* %7, align 4
  %29 = load i32*, i32** %5, align 8
  %30 = load i32, i32* %9, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i32, i32* %29, i64 %31
  %33 = load i32, i32* %32, align 4
  %34 = call i32 @abs(i32 %33) #11
  %35 = mul nsw i32 2, %34
  %36 = add nsw i32 %35, 1
  %37 = mul nsw i32 %28, %36
  %38 = load i32*, i32** %6, align 8
  %39 = load i32, i32* %9, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i32, i32* %38, i64 %40
  store i32 %37, i32* %41, align 4
  br label %58

42:                                               ; preds = %23
  %43 = load i32, i32* %7, align 4
  %44 = load i32*, i32** %5, align 8
  %45 = load i32, i32* %9, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i32, i32* %44, i64 %46
  %48 = load i32, i32* %47, align 4
  %49 = call i32 @abs(i32 %48) #11
  %50 = mul nsw i32 2, %49
  %51 = add nsw i32 %50, 1
  %52 = mul nsw i32 %43, %51
  %53 = sub nsw i32 %52, 1
  %54 = load i32*, i32** %6, align 8
  %55 = load i32, i32* %9, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i32, i32* %54, i64 %56
  store i32 %53, i32* %57, align 4
  br label %58

58:                                               ; preds = %42, %27
  %59 = load i32*, i32** %5, align 8
  %60 = load i32, i32* %9, align 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i32, i32* %59, i64 %61
  %63 = load i32, i32* %62, align 4
  %64 = icmp slt i32 %63, 0
  %65 = zext i1 %64 to i64
  %66 = select i1 %64, i32 -1, i32 1
  %67 = load i32*, i32** %6, align 8
  %68 = load i32, i32* %9, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds i32, i32* %67, i64 %69
  %71 = load i32, i32* %70, align 4
  %72 = mul nsw i32 %66, %71
  %73 = load i32*, i32** %6, align 8
  %74 = load i32, i32* %9, align 4
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i32, i32* %73, i64 %75
  store i32 %72, i32* %76, align 4
  br label %82

77:                                               ; preds = %16
  %78 = load i32*, i32** %6, align 8
  %79 = load i32, i32* %9, align 4
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds i32, i32* %78, i64 %80
  store i32 0, i32* %81, align 4
  br label %82

82:                                               ; preds = %77, %58
  br label %83

83:                                               ; preds = %82
  %84 = load i32, i32* %9, align 4
  %85 = add nsw i32 %84, 1
  store i32 %85, i32* %9, align 4
  br label %13

86:                                               ; preds = %13
  %87 = load i32, i32* %8, align 4
  %88 = icmp eq i32 %87, 3
  br i1 %88, label %92, label %89

89:                                               ; preds = %86
  %90 = load i32, i32* %8, align 4
  %91 = icmp eq i32 %90, 4
  br i1 %91, label %92, label %99

92:                                               ; preds = %89, %86
  %93 = load i32*, i32** %5, align 8
  %94 = getelementptr inbounds i32, i32* %93, i64 0
  %95 = load i32, i32* %94, align 4
  %96 = mul nsw i32 %95, 8
  %97 = load i32*, i32** %6, align 8
  %98 = getelementptr inbounds i32, i32* %97, i64 0
  store i32 %96, i32* %98, align 4
  br label %99

99:                                               ; preds = %92, %89
  br label %118

100:                                              ; preds = %4
  store i32 0, i32* %9, align 4
  br label %101

101:                                              ; preds = %114, %100
  %102 = load i32, i32* %9, align 4
  %103 = icmp slt i32 %102, 64
  br i1 %103, label %104, label %117

104:                                              ; preds = %101
  %105 = load i32*, i32** %5, align 8
  %106 = load i32, i32* %9, align 4
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i32, i32* %105, i64 %107
  %109 = load i32, i32* %108, align 4
  %110 = load i32*, i32** %6, align 8
  %111 = load i32, i32* %9, align 4
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds i32, i32* %110, i64 %112
  store i32 %109, i32* %113, align 4
  br label %114

114:                                              ; preds = %104
  %115 = load i32, i32* %9, align 4
  %116 = add nsw i32 %115, 1
  store i32 %116, i32* %9, align 4
  br label %101

117:                                              ; preds = %101
  br label %118

118:                                              ; preds = %117, %99
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @InitializeRateControl() #0 {
  store float 0.000000e+00, float* @B_prev, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @UpdateRateControl(i32 %0) #0 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = sitofp i32 %3 to float
  store float %4, float* @B_prev, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @InitializeQuantizer(i32 %0, float %1, float %2, float %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca float, align 4
  %7 = alloca float, align 4
  %8 = alloca float, align 4
  %9 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store float %1, float* %6, align 4
  store float %2, float* %7, align 4
  store float %3, float* %8, align 4
  %10 = load i32, i32* %5, align 4
  %11 = icmp eq i32 %10, 1
  br i1 %11, label %12, label %53

12:                                               ; preds = %4
  %13 = load float, float* %6, align 4
  %14 = load float, float* %7, align 4
  %15 = fdiv float %13, %14
  store float %15, float* @B_target, align 4
  %16 = load float, float* @B_prev, align 4
  %17 = fpext float %16 to double
  %18 = fcmp une double %17, 0.000000e+00
  br i1 %18, label %19, label %26

19:                                               ; preds = %12
  %20 = load float, float* @B_prev, align 4
  %21 = load float, float* @B_target, align 4
  %22 = fsub float %20, %21
  %23 = load float, float* @B_target, align 4
  %24 = fmul float 2.000000e+00, %23
  %25 = fdiv float %22, %24
  store float %25, float* @global_adj, align 4
  br label %27

26:                                               ; preds = %12
  store float 0.000000e+00, float* @global_adj, align 4
  br label %27

27:                                               ; preds = %26, %19
  %28 = load float, float* %8, align 4
  %29 = load float, float* @global_adj, align 4
  %30 = fadd float 1.000000e+00, %29
  %31 = fmul float %28, %30
  %32 = fadd float %31, 5.000000e-01
  %33 = fptosi float %32 to i32
  store i32 %33, i32* %9, align 4
  %34 = load i32, i32* %9, align 4
  %35 = icmp slt i32 31, %34
  br i1 %35, label %36, label %37

36:                                               ; preds = %27
  br label %39

37:                                               ; preds = %27
  %38 = load i32, i32* %9, align 4
  br label %39

39:                                               ; preds = %37, %36
  %40 = phi i32 [ 31, %36 ], [ %38, %37 ]
  %41 = icmp sgt i32 1, %40
  br i1 %41, label %42, label %43

42:                                               ; preds = %39
  br label %51

43:                                               ; preds = %39
  %44 = load i32, i32* %9, align 4
  %45 = icmp slt i32 31, %44
  br i1 %45, label %46, label %47

46:                                               ; preds = %43
  br label %49

47:                                               ; preds = %43
  %48 = load i32, i32* %9, align 4
  br label %49

49:                                               ; preds = %47, %46
  %50 = phi i32 [ 31, %46 ], [ %48, %47 ]
  br label %51

51:                                               ; preds = %49, %42
  %52 = phi i32 [ 1, %42 ], [ %50, %49 ]
  store i32 %52, i32* %9, align 4
  br label %62

53:                                               ; preds = %4
  %54 = load i32, i32* %5, align 4
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %59

56:                                               ; preds = %53
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %58 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %57, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.165, i64 0, i64 0))
  call void @exit(i32 -1) #9
  unreachable

59:                                               ; preds = %53
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %61 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %60, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1.166, i64 0, i64 0))
  call void @exit(i32 -1) #9
  unreachable

62:                                               ; preds = %51
  %63 = load float, float* @global_adj, align 4
  %64 = fpext float %63 to double
  %65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2.167, i64 0, i64 0), double %64)
  %66 = load float, float* %8, align 4
  %67 = fpext float %66 to double
  %68 = load i32, i32* %9, align 4
  %69 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3.168, i64 0, i64 0), double %67, i32 %68)
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %71 = load float, float* @B_target, align 4
  %72 = fpext float %71 to double
  %73 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %70, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4.169, i64 0, i64 0), double %72)
  %74 = load i32, i32* %9, align 4
  ret i32 %74
}

declare dso_local i32 @printf(i8*, ...) #3

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @UpdateQuantizer(i32 %0, float %1, i32 %2, float %3, i32 %4, i32 %5, i32 %6) #0 {
  %8 = alloca i32, align 4
  %9 = alloca float, align 4
  %10 = alloca i32, align 4
  %11 = alloca float, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca float, align 4
  %17 = alloca float, align 4
  %18 = alloca float, align 4
  store i32 %0, i32* %8, align 4
  store float %1, float* %9, align 4
  store i32 %2, i32* %10, align 4
  store float %3, float* %11, align 4
  store i32 %4, i32* %12, align 4
  store i32 %5, i32* %13, align 4
  store i32 %6, i32* %14, align 4
  store i32 16, i32* %15, align 4
  %19 = load i32, i32* %10, align 4
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %7
  store i32 16, i32* %15, align 4
  br label %56

22:                                               ; preds = %7
  %23 = load i32, i32* %10, align 4
  %24 = icmp eq i32 %23, 1
  br i1 %24, label %25, label %52

25:                                               ; preds = %22
  %26 = load i32, i32* %8, align 4
  %27 = sitofp i32 %26 to float
  %28 = load float, float* @B_target, align 4
  %29 = load i32, i32* %12, align 4
  %30 = load i32, i32* %13, align 4
  %31 = mul nsw i32 %29, %30
  %32 = sitofp i32 %31 to float
  %33 = fdiv float %28, %32
  %34 = fmul float %27, %33
  store float %34, float* %18, align 4
  %35 = load i32, i32* %14, align 4
  %36 = sitofp i32 %35 to float
  %37 = load float, float* %18, align 4
  %38 = fsub float %36, %37
  store float %38, float* %17, align 4
  %39 = load float, float* %17, align 4
  %40 = fmul float 1.200000e+01, %39
  %41 = load float, float* %11, align 4
  %42 = fdiv float %40, %41
  store float %42, float* %16, align 4
  %43 = load float, float* %9, align 4
  %44 = load float, float* @global_adj, align 4
  %45 = fadd float 1.000000e+00, %44
  %46 = load float, float* %16, align 4
  %47 = fadd float %45, %46
  %48 = fmul float %43, %47
  %49 = fpext float %48 to double
  %50 = fadd double %49, 5.000000e-01
  %51 = fptosi double %50 to i32
  store i32 %51, i32* %15, align 4
  br label %55

52:                                               ; preds = %22
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %54 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %53, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.5.172, i64 0, i64 0))
  br label %55

55:                                               ; preds = %52, %25
  br label %56

56:                                               ; preds = %55, %21
  %57 = load i32, i32* %15, align 4
  %58 = icmp slt i32 31, %57
  br i1 %58, label %59, label %60

59:                                               ; preds = %56
  br label %62

60:                                               ; preds = %56
  %61 = load i32, i32* %15, align 4
  br label %62

62:                                               ; preds = %60, %59
  %63 = phi i32 [ 31, %59 ], [ %61, %60 ]
  %64 = icmp sgt i32 1, %63
  br i1 %64, label %65, label %66

65:                                               ; preds = %62
  br label %74

66:                                               ; preds = %62
  %67 = load i32, i32* %15, align 4
  %68 = icmp slt i32 31, %67
  br i1 %68, label %69, label %70

69:                                               ; preds = %66
  br label %72

70:                                               ; preds = %66
  %71 = load i32, i32* %15, align 4
  br label %72

72:                                               ; preds = %70, %69
  %73 = phi i32 [ 31, %69 ], [ %71, %70 ]
  br label %74

74:                                               ; preds = %72, %65
  %75 = phi i32 [ 1, %65 ], [ %73, %72 ]
  store i32 %75, i32* %15, align 4
  %76 = load i32, i32* %15, align 4
  ret i32 %76
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @AR_Encode(i32 %0, i32* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32*, align 8
  %6 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i32* %1, i32** %5, align 8
  store i32 0, i32* %6, align 4
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 0
  br i1 %8, label %9, label %10

9:                                                ; preds = %2
  store i32 -1, i32* %3, align 4
  br label %89

10:                                               ; preds = %2
  %11 = load i64, i64* @high, align 8
  %12 = load i64, i64* @low, align 8
  %13 = sub nsw i64 %11, %12
  %14 = add nsw i64 %13, 1
  store i64 %14, i64* @length, align 8
  %15 = load i64, i64* @low, align 8
  %16 = sub nsw i64 %15, 1
  %17 = load i64, i64* @length, align 8
  %18 = load i32*, i32** %5, align 8
  %19 = load i32, i32* %4, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %18, i64 %20
  %22 = load i32, i32* %21, align 4
  %23 = sext i32 %22 to i64
  %24 = mul nsw i64 %17, %23
  %25 = load i32*, i32** %5, align 8
  %26 = getelementptr inbounds i32, i32* %25, i64 0
  %27 = load i32, i32* %26, align 4
  %28 = sext i32 %27 to i64
  %29 = sdiv i64 %24, %28
  %30 = add nsw i64 %16, %29
  store i64 %30, i64* @high, align 8
  %31 = load i64, i64* @length, align 8
  %32 = load i32*, i32** %5, align 8
  %33 = load i32, i32* %4, align 4
  %34 = add nsw i32 %33, 1
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i32, i32* %32, i64 %35
  %37 = load i32, i32* %36, align 4
  %38 = sext i32 %37 to i64
  %39 = mul nsw i64 %31, %38
  %40 = load i32*, i32** %5, align 8
  %41 = getelementptr inbounds i32, i32* %40, i64 0
  %42 = load i32, i32* %41, align 4
  %43 = sext i32 %42 to i64
  %44 = sdiv i64 %39, %43
  %45 = load i64, i64* @low, align 8
  %46 = add nsw i64 %45, %44
  store i64 %46, i64* @low, align 8
  br label %47

47:                                               ; preds = %81, %10
  %48 = load i64, i64* @high, align 8
  %49 = icmp slt i64 %48, 32768
  br i1 %49, label %50, label %54

50:                                               ; preds = %47
  %51 = call i32 @bit_opp_bits(i32 0)
  %52 = load i32, i32* %6, align 4
  %53 = add nsw i32 %52, %51
  store i32 %53, i32* %6, align 4
  br label %81

54:                                               ; preds = %47
  %55 = load i64, i64* @low, align 8
  %56 = icmp sge i64 %55, 32768
  br i1 %56, label %57, label %65

57:                                               ; preds = %54
  %58 = call i32 @bit_opp_bits(i32 1)
  %59 = load i32, i32* %6, align 4
  %60 = add nsw i32 %59, %58
  store i32 %60, i32* %6, align 4
  %61 = load i64, i64* @low, align 8
  %62 = sub nsw i64 %61, 32768
  store i64 %62, i64* @low, align 8
  %63 = load i64, i64* @high, align 8
  %64 = sub nsw i64 %63, 32768
  store i64 %64, i64* @high, align 8
  br label %80

65:                                               ; preds = %54
  %66 = load i64, i64* @low, align 8
  %67 = icmp sge i64 %66, 16384
  br i1 %67, label %68, label %78

68:                                               ; preds = %65
  %69 = load i64, i64* @high, align 8
  %70 = icmp slt i64 %69, 49152
  br i1 %70, label %71, label %78

71:                                               ; preds = %68
  %72 = load i64, i64* @opposite_bits, align 8
  %73 = add nsw i64 %72, 1
  store i64 %73, i64* @opposite_bits, align 8
  %74 = load i64, i64* @low, align 8
  %75 = sub nsw i64 %74, 16384
  store i64 %75, i64* @low, align 8
  %76 = load i64, i64* @high, align 8
  %77 = sub nsw i64 %76, 16384
  store i64 %77, i64* @high, align 8
  br label %79

78:                                               ; preds = %68, %65
  br label %87

79:                                               ; preds = %71
  br label %80

80:                                               ; preds = %79, %57
  br label %81

81:                                               ; preds = %80, %50
  %82 = load i64, i64* @low, align 8
  %83 = mul nsw i64 %82, 2
  store i64 %83, i64* @low, align 8
  %84 = load i64, i64* @high, align 8
  %85 = mul nsw i64 2, %84
  %86 = add nsw i64 %85, 1
  store i64 %86, i64* @high, align 8
  br label %47

87:                                               ; preds = %78
  %88 = load i32, i32* %6, align 4
  store i32 %88, i32* %3, align 4
  br label %89

89:                                               ; preds = %87, %9
  %90 = load i32, i32* %3, align 4
  ret i32 %90
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @bit_opp_bits(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  %4 = load i32, i32* %2, align 4
  %5 = call i32 @bit_in_psc_layer(i32 %4)
  store i32 %5, i32* %3, align 4
  br label %6

6:                                                ; preds = %9, %1
  %7 = load i64, i64* @opposite_bits, align 8
  %8 = icmp sgt i64 %7, 0
  br i1 %8, label %9, label %19

9:                                                ; preds = %6
  %10 = load i32, i32* %2, align 4
  %11 = icmp ne i32 %10, 0
  %12 = xor i1 %11, true
  %13 = zext i1 %12 to i32
  %14 = call i32 @bit_in_psc_layer(i32 %13)
  %15 = load i32, i32* %3, align 4
  %16 = add nsw i32 %15, %14
  store i32 %16, i32* %3, align 4
  %17 = load i64, i64* @opposite_bits, align 8
  %18 = add nsw i64 %17, -1
  store i64 %18, i64* @opposite_bits, align 8
  br label %6

19:                                               ; preds = %6
  %20 = load i32, i32* %3, align 4
  ret i32 %20
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @bit_in_psc_layer(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  %4 = load i64, i64* @zerorun, align 8
  %5 = icmp sgt i64 %4, 13
  br i1 %5, label %6, label %15

6:                                                ; preds = %1
  %7 = load i32, i32* @trace, align 4
  %8 = icmp ne i32 %7, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %6
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1.175, i64 0, i64 0))
  br label %12

12:                                               ; preds = %9, %6
  call void @putbits(i32 1, i32 1)
  %13 = load i32, i32* %3, align 4
  %14 = add nsw i32 %13, 1
  store i32 %14, i32* %3, align 4
  store i64 0, i64* @zerorun, align 8
  br label %15

15:                                               ; preds = %12, %1
  %16 = load i32, i32* %2, align 4
  call void @putbits(i32 1, i32 %16)
  %17 = load i32, i32* %3, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %2, align 4
  %20 = icmp ne i32 %19, 0
  br i1 %20, label %21, label %22

21:                                               ; preds = %15
  store i64 0, i64* @zerorun, align 8
  br label %25

22:                                               ; preds = %15
  %23 = load i64, i64* @zerorun, align 8
  %24 = add nsw i64 %23, 1
  store i64 %24, i64* @zerorun, align 8
  br label %25

25:                                               ; preds = %22, %21
  %26 = load i32, i32* %3, align 4
  ret i32 %26
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @encoder_flush() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = load i32, i32* @trace, align 4
  %3 = icmp ne i32 %2, 0
  br i1 %3, label %4, label %7

4:                                                ; preds = %0
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @tf, align 8
  %6 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.178, i64 0, i64 0))
  br label %7

7:                                                ; preds = %4, %0
  %8 = load i64, i64* @opposite_bits, align 8
  %9 = add nsw i64 %8, 1
  store i64 %9, i64* @opposite_bits, align 8
  %10 = load i64, i64* @low, align 8
  %11 = icmp slt i64 %10, 16384
  br i1 %11, label %12, label %16

12:                                               ; preds = %7
  %13 = call i32 @bit_opp_bits(i32 0)
  %14 = load i32, i32* %1, align 4
  %15 = add nsw i32 %14, %13
  store i32 %15, i32* %1, align 4
  br label %20

16:                                               ; preds = %7
  %17 = call i32 @bit_opp_bits(i32 1)
  %18 = load i32, i32* %1, align 4
  %19 = add nsw i32 %18, %17
  store i32 %19, i32* %1, align 4
  br label %20

20:                                               ; preds = %16, %12
  store i64 0, i64* @low, align 8
  store i64 65535, i64* @high, align 8
  store i64 0, i64* @zerorun, align 8
  %21 = load i32, i32* %1, align 4
  ret i32 %21
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @indexfn(i32 %0, i32* %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i32* %1, i32** %6, align 8
  store i32 %2, i32* %7, align 4
  store i32 0, i32* %8, align 4
  br label %9

9:                                                ; preds = %26, %3
  %10 = load i32*, i32** %6, align 8
  %11 = load i32, i32* %8, align 4
  %12 = add nsw i32 %11, 1
  store i32 %12, i32* %8, align 4
  %13 = sext i32 %11 to i64
  %14 = getelementptr inbounds i32, i32* %10, i64 %13
  %15 = load i32, i32* %14, align 4
  %16 = load i32, i32* %5, align 4
  %17 = icmp eq i32 %15, %16
  br i1 %17, label %18, label %21

18:                                               ; preds = %9
  %19 = load i32, i32* %8, align 4
  %20 = sub nsw i32 %19, 1
  store i32 %20, i32* %4, align 4
  br label %27

21:                                               ; preds = %9
  %22 = load i32, i32* %8, align 4
  %23 = load i32, i32* %7, align 4
  %24 = icmp sgt i32 %22, %23
  br i1 %24, label %25, label %26

25:                                               ; preds = %21
  store i32 -1, i32* %4, align 4
  br label %27

26:                                               ; preds = %21
  br label %9

27:                                               ; preds = %25, %18
  %28 = load i32, i32* %4, align 4
  ret i32 %28
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ComputeSNR(%struct.pict_image* %0, %struct.pict_image* %1, %struct.results* %2, i32 %3) #0 {
  %5 = alloca %struct.pict_image*, align 8
  %6 = alloca %struct.pict_image*, align 8
  %7 = alloca %struct.results*, align 8
  %8 = alloca i32, align 4
  %9 = alloca %struct._IO_FILE*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca %struct.pict_image*, align 8
  %17 = alloca i8*, align 8
  store %struct.pict_image* %0, %struct.pict_image** %5, align 8
  store %struct.pict_image* %1, %struct.pict_image** %6, align 8
  store %struct.results* %2, %struct.results** %7, align 8
  store i32 %3, i32* %8, align 4
  store %struct._IO_FILE* null, %struct._IO_FILE** %9, align 8
  store %struct.pict_image* null, %struct.pict_image** %16, align 8
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.183, i64 0, i64 0), i8** %17, align 8
  %18 = load i32, i32* %8, align 4
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %20, label %54

20:                                               ; preds = %4
  %21 = load i8*, i8** %17, align 8
  %22 = call %struct._IO_FILE* @fopen(i8* %21, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1.184, i64 0, i64 0))
  store %struct._IO_FILE* %22, %struct._IO_FILE** %9, align 8
  %23 = call noalias i8* @malloc(i64 24) #8
  %24 = bitcast i8* %23 to %struct.pict_image*
  store %struct.pict_image* %24, %struct.pict_image** %16, align 8
  %25 = load i32, i32* @pels, align 4
  %26 = sext i32 %25 to i64
  %27 = mul i64 1, %26
  %28 = load i32, i32* @lines, align 4
  %29 = sext i32 %28 to i64
  %30 = mul i64 %27, %29
  %31 = call noalias i8* @malloc(i64 %30) #8
  %32 = load %struct.pict_image*, %struct.pict_image** %16, align 8
  %33 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %32, i32 0, i32 0
  store i8* %31, i8** %33, align 8
  %34 = load i32, i32* @pels, align 4
  %35 = sext i32 %34 to i64
  %36 = mul i64 1, %35
  %37 = load i32, i32* @lines, align 4
  %38 = sext i32 %37 to i64
  %39 = mul i64 %36, %38
  %40 = udiv i64 %39, 4
  %41 = call noalias i8* @malloc(i64 %40) #8
  %42 = load %struct.pict_image*, %struct.pict_image** %16, align 8
  %43 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %42, i32 0, i32 1
  store i8* %41, i8** %43, align 8
  %44 = load i32, i32* @pels, align 4
  %45 = sext i32 %44 to i64
  %46 = mul i64 1, %45
  %47 = load i32, i32* @lines, align 4
  %48 = sext i32 %47 to i64
  %49 = mul i64 %46, %48
  %50 = udiv i64 %49, 4
  %51 = call noalias i8* @malloc(i64 %50) #8
  %52 = load %struct.pict_image*, %struct.pict_image** %16, align 8
  %53 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %52, i32 0, i32 2
  store i8* %51, i8** %53, align 8
  br label %54

54:                                               ; preds = %20, %4
  store i32 0, i32* %12, align 4
  store i32 0, i32* %14, align 4
  store i32 0, i32* %13, align 4
  store i32 0, i32* %12, align 4
  store i32 0, i32* %10, align 4
  br label %55

55:                                               ; preds = %120, %54
  %56 = load i32, i32* %10, align 4
  %57 = load i32, i32* @lines, align 4
  %58 = icmp slt i32 %56, %57
  br i1 %58, label %59, label %123

59:                                               ; preds = %55
  store i32 0, i32* %11, align 4
  br label %60

60:                                               ; preds = %116, %59
  %61 = load i32, i32* %11, align 4
  %62 = load i32, i32* @pels, align 4
  %63 = icmp slt i32 %61, %62
  br i1 %63, label %64, label %119

64:                                               ; preds = %60
  %65 = load %struct.pict_image*, %struct.pict_image** %5, align 8
  %66 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %65, i32 0, i32 0
  %67 = load i8*, i8** %66, align 8
  %68 = load i32, i32* %11, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds i8, i8* %67, i64 %69
  %71 = load i32, i32* %10, align 4
  %72 = load i32, i32* @pels, align 4
  %73 = mul nsw i32 %71, %72
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i8, i8* %70, i64 %74
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = load %struct.pict_image*, %struct.pict_image** %6, align 8
  %79 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %78, i32 0, i32 0
  %80 = load i8*, i8** %79, align 8
  %81 = load i32, i32* %11, align 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds i8, i8* %80, i64 %82
  %84 = load i32, i32* %10, align 4
  %85 = load i32, i32* @pels, align 4
  %86 = mul nsw i32 %84, %85
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds i8, i8* %83, i64 %87
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i32
  %91 = sub nsw i32 %77, %90
  store i32 %91, i32* %15, align 4
  %92 = load i32, i32* %8, align 4
  %93 = icmp ne i32 %92, 0
  br i1 %93, label %94, label %110

94:                                               ; preds = %64
  %95 = load i32, i32* %15, align 4
  %96 = mul nsw i32 10, %95
  %97 = add nsw i32 %96, 128
  %98 = trunc i32 %97 to i8
  %99 = load %struct.pict_image*, %struct.pict_image** %16, align 8
  %100 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %99, i32 0, i32 0
  %101 = load i8*, i8** %100, align 8
  %102 = load i32, i32* %11, align 4
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds i8, i8* %101, i64 %103
  %105 = load i32, i32* %10, align 4
  %106 = load i32, i32* @pels, align 4
  %107 = mul nsw i32 %105, %106
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i8, i8* %104, i64 %108
  store i8 %98, i8* %109, align 1
  br label %110

110:                                              ; preds = %94, %64
  %111 = load i32, i32* %15, align 4
  %112 = load i32, i32* %15, align 4
  %113 = mul nsw i32 %111, %112
  %114 = load i32, i32* %12, align 4
  %115 = add nsw i32 %114, %113
  store i32 %115, i32* %12, align 4
  br label %116

116:                                              ; preds = %110
  %117 = load i32, i32* %11, align 4
  %118 = add nsw i32 %117, 1
  store i32 %118, i32* %11, align 4
  br label %60

119:                                              ; preds = %60
  br label %120

120:                                              ; preds = %119
  %121 = load i32, i32* %10, align 4
  %122 = add nsw i32 %121, 1
  store i32 %122, i32* %10, align 4
  br label %55

123:                                              ; preds = %55
  %124 = load i32, i32* %12, align 4
  %125 = sitofp i32 %124 to float
  %126 = load i32, i32* @pels, align 4
  %127 = load i32, i32* @lines, align 4
  %128 = mul nsw i32 %126, %127
  %129 = sitofp i32 %128 to float
  %130 = fdiv float %125, %129
  %131 = load %struct.results*, %struct.results** %7, align 8
  %132 = getelementptr inbounds %struct.results, %struct.results* %131, i32 0, i32 0
  store float %130, float* %132, align 4
  %133 = load %struct.results*, %struct.results** %7, align 8
  %134 = getelementptr inbounds %struct.results, %struct.results* %133, i32 0, i32 0
  %135 = load float, float* %134, align 4
  %136 = fcmp une float %135, 0.000000e+00
  br i1 %136, label %137, label %153

137:                                              ; preds = %123
  %138 = load %struct.results*, %struct.results** %7, align 8
  %139 = getelementptr inbounds %struct.results, %struct.results* %138, i32 0, i32 0
  %140 = load float, float* %139, align 4
  %141 = fdiv float 6.502500e+04, %140
  %142 = load %struct.results*, %struct.results** %7, align 8
  %143 = getelementptr inbounds %struct.results, %struct.results* %142, i32 0, i32 0
  store float %141, float* %143, align 4
  %144 = load %struct.results*, %struct.results** %7, align 8
  %145 = getelementptr inbounds %struct.results, %struct.results* %144, i32 0, i32 0
  %146 = load float, float* %145, align 4
  %147 = fpext float %146 to double
  %148 = call double @log10(double %147) #8
  %149 = fptrunc double %148 to float
  %150 = fmul float 1.000000e+01, %149
  %151 = load %struct.results*, %struct.results** %7, align 8
  %152 = getelementptr inbounds %struct.results, %struct.results* %151, i32 0, i32 0
  store float %150, float* %152, align 4
  br label %156

153:                                              ; preds = %123
  %154 = load %struct.results*, %struct.results** %7, align 8
  %155 = getelementptr inbounds %struct.results, %struct.results* %154, i32 0, i32 0
  store float 0x4058FF5C20000000, float* %155, align 4
  br label %156

156:                                              ; preds = %153, %137
  store i32 0, i32* %10, align 4
  br label %157

157:                                              ; preds = %387, %156
  %158 = load i32, i32* %10, align 4
  %159 = load i32, i32* @lines, align 4
  %160 = sdiv i32 %159, 2
  %161 = icmp slt i32 %158, %160
  br i1 %161, label %162, label %390

162:                                              ; preds = %157
  store i32 0, i32* %11, align 4
  br label %163

163:                                              ; preds = %383, %162
  %164 = load i32, i32* %11, align 4
  %165 = load i32, i32* @pels, align 4
  %166 = sdiv i32 %165, 2
  %167 = icmp slt i32 %164, %166
  br i1 %167, label %168, label %386

168:                                              ; preds = %163
  %169 = load %struct.pict_image*, %struct.pict_image** %5, align 8
  %170 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %169, i32 0, i32 1
  %171 = load i8*, i8** %170, align 8
  %172 = load i32, i32* %11, align 4
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds i8, i8* %171, i64 %173
  %175 = load i32, i32* %10, align 4
  %176 = load i32, i32* @pels, align 4
  %177 = mul nsw i32 %175, %176
  %178 = sdiv i32 %177, 2
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds i8, i8* %174, i64 %179
  %181 = load i8, i8* %180, align 1
  %182 = zext i8 %181 to i32
  %183 = load %struct.pict_image*, %struct.pict_image** %6, align 8
  %184 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %183, i32 0, i32 1
  %185 = load i8*, i8** %184, align 8
  %186 = load i32, i32* %11, align 4
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds i8, i8* %185, i64 %187
  %189 = load i32, i32* %10, align 4
  %190 = load i32, i32* @pels, align 4
  %191 = mul nsw i32 %189, %190
  %192 = sdiv i32 %191, 2
  %193 = sext i32 %192 to i64
  %194 = getelementptr inbounds i8, i8* %188, i64 %193
  %195 = load i8, i8* %194, align 1
  %196 = zext i8 %195 to i32
  %197 = sub nsw i32 %182, %196
  %198 = load %struct.pict_image*, %struct.pict_image** %5, align 8
  %199 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %198, i32 0, i32 1
  %200 = load i8*, i8** %199, align 8
  %201 = load i32, i32* %11, align 4
  %202 = sext i32 %201 to i64
  %203 = getelementptr inbounds i8, i8* %200, i64 %202
  %204 = load i32, i32* %10, align 4
  %205 = load i32, i32* @pels, align 4
  %206 = mul nsw i32 %204, %205
  %207 = sdiv i32 %206, 2
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds i8, i8* %203, i64 %208
  %210 = load i8, i8* %209, align 1
  %211 = zext i8 %210 to i32
  %212 = load %struct.pict_image*, %struct.pict_image** %6, align 8
  %213 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %212, i32 0, i32 1
  %214 = load i8*, i8** %213, align 8
  %215 = load i32, i32* %11, align 4
  %216 = sext i32 %215 to i64
  %217 = getelementptr inbounds i8, i8* %214, i64 %216
  %218 = load i32, i32* %10, align 4
  %219 = load i32, i32* @pels, align 4
  %220 = mul nsw i32 %218, %219
  %221 = sdiv i32 %220, 2
  %222 = sext i32 %221 to i64
  %223 = getelementptr inbounds i8, i8* %217, i64 %222
  %224 = load i8, i8* %223, align 1
  %225 = zext i8 %224 to i32
  %226 = sub nsw i32 %211, %225
  %227 = mul nsw i32 %197, %226
  %228 = load i32, i32* %13, align 4
  %229 = add nsw i32 %228, %227
  store i32 %229, i32* %13, align 4
  %230 = load %struct.pict_image*, %struct.pict_image** %5, align 8
  %231 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %230, i32 0, i32 2
  %232 = load i8*, i8** %231, align 8
  %233 = load i32, i32* %11, align 4
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds i8, i8* %232, i64 %234
  %236 = load i32, i32* %10, align 4
  %237 = load i32, i32* @pels, align 4
  %238 = mul nsw i32 %236, %237
  %239 = sdiv i32 %238, 2
  %240 = sext i32 %239 to i64
  %241 = getelementptr inbounds i8, i8* %235, i64 %240
  %242 = load i8, i8* %241, align 1
  %243 = zext i8 %242 to i32
  %244 = load %struct.pict_image*, %struct.pict_image** %6, align 8
  %245 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %244, i32 0, i32 2
  %246 = load i8*, i8** %245, align 8
  %247 = load i32, i32* %11, align 4
  %248 = sext i32 %247 to i64
  %249 = getelementptr inbounds i8, i8* %246, i64 %248
  %250 = load i32, i32* %10, align 4
  %251 = load i32, i32* @pels, align 4
  %252 = mul nsw i32 %250, %251
  %253 = sdiv i32 %252, 2
  %254 = sext i32 %253 to i64
  %255 = getelementptr inbounds i8, i8* %249, i64 %254
  %256 = load i8, i8* %255, align 1
  %257 = zext i8 %256 to i32
  %258 = sub nsw i32 %243, %257
  %259 = load %struct.pict_image*, %struct.pict_image** %5, align 8
  %260 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %259, i32 0, i32 2
  %261 = load i8*, i8** %260, align 8
  %262 = load i32, i32* %11, align 4
  %263 = sext i32 %262 to i64
  %264 = getelementptr inbounds i8, i8* %261, i64 %263
  %265 = load i32, i32* %10, align 4
  %266 = load i32, i32* @pels, align 4
  %267 = mul nsw i32 %265, %266
  %268 = sdiv i32 %267, 2
  %269 = sext i32 %268 to i64
  %270 = getelementptr inbounds i8, i8* %264, i64 %269
  %271 = load i8, i8* %270, align 1
  %272 = zext i8 %271 to i32
  %273 = load %struct.pict_image*, %struct.pict_image** %6, align 8
  %274 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %273, i32 0, i32 2
  %275 = load i8*, i8** %274, align 8
  %276 = load i32, i32* %11, align 4
  %277 = sext i32 %276 to i64
  %278 = getelementptr inbounds i8, i8* %275, i64 %277
  %279 = load i32, i32* %10, align 4
  %280 = load i32, i32* @pels, align 4
  %281 = mul nsw i32 %279, %280
  %282 = sdiv i32 %281, 2
  %283 = sext i32 %282 to i64
  %284 = getelementptr inbounds i8, i8* %278, i64 %283
  %285 = load i8, i8* %284, align 1
  %286 = zext i8 %285 to i32
  %287 = sub nsw i32 %272, %286
  %288 = mul nsw i32 %258, %287
  %289 = load i32, i32* %14, align 4
  %290 = add nsw i32 %289, %288
  store i32 %290, i32* %14, align 4
  %291 = load i32, i32* %8, align 4
  %292 = icmp ne i32 %291, 0
  br i1 %292, label %293, label %382

293:                                              ; preds = %168
  %294 = load %struct.pict_image*, %struct.pict_image** %5, align 8
  %295 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %294, i32 0, i32 1
  %296 = load i8*, i8** %295, align 8
  %297 = load i32, i32* %11, align 4
  %298 = sext i32 %297 to i64
  %299 = getelementptr inbounds i8, i8* %296, i64 %298
  %300 = load i32, i32* %10, align 4
  %301 = load i32, i32* @pels, align 4
  %302 = mul nsw i32 %300, %301
  %303 = sdiv i32 %302, 2
  %304 = sext i32 %303 to i64
  %305 = getelementptr inbounds i8, i8* %299, i64 %304
  %306 = load i8, i8* %305, align 1
  %307 = zext i8 %306 to i32
  %308 = load %struct.pict_image*, %struct.pict_image** %6, align 8
  %309 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %308, i32 0, i32 1
  %310 = load i8*, i8** %309, align 8
  %311 = load i32, i32* %11, align 4
  %312 = sext i32 %311 to i64
  %313 = getelementptr inbounds i8, i8* %310, i64 %312
  %314 = load i32, i32* %10, align 4
  %315 = load i32, i32* @pels, align 4
  %316 = mul nsw i32 %314, %315
  %317 = sdiv i32 %316, 2
  %318 = sext i32 %317 to i64
  %319 = getelementptr inbounds i8, i8* %313, i64 %318
  %320 = load i8, i8* %319, align 1
  %321 = zext i8 %320 to i32
  %322 = sub nsw i32 %307, %321
  %323 = mul nsw i32 %322, 10
  %324 = add nsw i32 %323, 128
  %325 = trunc i32 %324 to i8
  %326 = load %struct.pict_image*, %struct.pict_image** %16, align 8
  %327 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %326, i32 0, i32 1
  %328 = load i8*, i8** %327, align 8
  %329 = load i32, i32* %11, align 4
  %330 = sext i32 %329 to i64
  %331 = getelementptr inbounds i8, i8* %328, i64 %330
  %332 = load i32, i32* %10, align 4
  %333 = load i32, i32* @pels, align 4
  %334 = mul nsw i32 %332, %333
  %335 = sdiv i32 %334, 2
  %336 = sext i32 %335 to i64
  %337 = getelementptr inbounds i8, i8* %331, i64 %336
  store i8 %325, i8* %337, align 1
  %338 = load %struct.pict_image*, %struct.pict_image** %5, align 8
  %339 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %338, i32 0, i32 2
  %340 = load i8*, i8** %339, align 8
  %341 = load i32, i32* %11, align 4
  %342 = sext i32 %341 to i64
  %343 = getelementptr inbounds i8, i8* %340, i64 %342
  %344 = load i32, i32* %10, align 4
  %345 = load i32, i32* @pels, align 4
  %346 = mul nsw i32 %344, %345
  %347 = sdiv i32 %346, 2
  %348 = sext i32 %347 to i64
  %349 = getelementptr inbounds i8, i8* %343, i64 %348
  %350 = load i8, i8* %349, align 1
  %351 = zext i8 %350 to i32
  %352 = load %struct.pict_image*, %struct.pict_image** %6, align 8
  %353 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %352, i32 0, i32 2
  %354 = load i8*, i8** %353, align 8
  %355 = load i32, i32* %11, align 4
  %356 = sext i32 %355 to i64
  %357 = getelementptr inbounds i8, i8* %354, i64 %356
  %358 = load i32, i32* %10, align 4
  %359 = load i32, i32* @pels, align 4
  %360 = mul nsw i32 %358, %359
  %361 = sdiv i32 %360, 2
  %362 = sext i32 %361 to i64
  %363 = getelementptr inbounds i8, i8* %357, i64 %362
  %364 = load i8, i8* %363, align 1
  %365 = zext i8 %364 to i32
  %366 = sub nsw i32 %351, %365
  %367 = mul nsw i32 %366, 10
  %368 = add nsw i32 %367, 128
  %369 = trunc i32 %368 to i8
  %370 = load %struct.pict_image*, %struct.pict_image** %16, align 8
  %371 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %370, i32 0, i32 2
  %372 = load i8*, i8** %371, align 8
  %373 = load i32, i32* %11, align 4
  %374 = sext i32 %373 to i64
  %375 = getelementptr inbounds i8, i8* %372, i64 %374
  %376 = load i32, i32* %10, align 4
  %377 = load i32, i32* @pels, align 4
  %378 = mul nsw i32 %376, %377
  %379 = sdiv i32 %378, 2
  %380 = sext i32 %379 to i64
  %381 = getelementptr inbounds i8, i8* %375, i64 %380
  store i8 %369, i8* %381, align 1
  br label %382

382:                                              ; preds = %293, %168
  br label %383

383:                                              ; preds = %382
  %384 = load i32, i32* %11, align 4
  %385 = add nsw i32 %384, 1
  store i32 %385, i32* %11, align 4
  br label %163

386:                                              ; preds = %163
  br label %387

387:                                              ; preds = %386
  %388 = load i32, i32* %10, align 4
  %389 = add nsw i32 %388, 1
  store i32 %389, i32* %10, align 4
  br label %157

390:                                              ; preds = %157
  %391 = load i32, i32* %13, align 4
  %392 = sitofp i32 %391 to float
  %393 = load i32, i32* @pels, align 4
  %394 = load i32, i32* @lines, align 4
  %395 = mul nsw i32 %393, %394
  %396 = sdiv i32 %395, 4
  %397 = sitofp i32 %396 to float
  %398 = fdiv float %392, %397
  %399 = load %struct.results*, %struct.results** %7, align 8
  %400 = getelementptr inbounds %struct.results, %struct.results* %399, i32 0, i32 1
  store float %398, float* %400, align 4
  %401 = load %struct.results*, %struct.results** %7, align 8
  %402 = getelementptr inbounds %struct.results, %struct.results* %401, i32 0, i32 1
  %403 = load float, float* %402, align 4
  %404 = fcmp une float %403, 0.000000e+00
  br i1 %404, label %405, label %421

405:                                              ; preds = %390
  %406 = load %struct.results*, %struct.results** %7, align 8
  %407 = getelementptr inbounds %struct.results, %struct.results* %406, i32 0, i32 1
  %408 = load float, float* %407, align 4
  %409 = fdiv float 6.502500e+04, %408
  %410 = load %struct.results*, %struct.results** %7, align 8
  %411 = getelementptr inbounds %struct.results, %struct.results* %410, i32 0, i32 1
  store float %409, float* %411, align 4
  %412 = load %struct.results*, %struct.results** %7, align 8
  %413 = getelementptr inbounds %struct.results, %struct.results* %412, i32 0, i32 1
  %414 = load float, float* %413, align 4
  %415 = fpext float %414 to double
  %416 = call double @log10(double %415) #8
  %417 = fptrunc double %416 to float
  %418 = fmul float 1.000000e+01, %417
  %419 = load %struct.results*, %struct.results** %7, align 8
  %420 = getelementptr inbounds %struct.results, %struct.results* %419, i32 0, i32 1
  store float %418, float* %420, align 4
  br label %424

421:                                              ; preds = %390
  %422 = load %struct.results*, %struct.results** %7, align 8
  %423 = getelementptr inbounds %struct.results, %struct.results* %422, i32 0, i32 1
  store float 0x4058FF5C20000000, float* %423, align 4
  br label %424

424:                                              ; preds = %421, %405
  %425 = load i32, i32* %14, align 4
  %426 = sitofp i32 %425 to float
  %427 = load i32, i32* @pels, align 4
  %428 = load i32, i32* @lines, align 4
  %429 = mul nsw i32 %427, %428
  %430 = sdiv i32 %429, 4
  %431 = sitofp i32 %430 to float
  %432 = fdiv float %426, %431
  %433 = load %struct.results*, %struct.results** %7, align 8
  %434 = getelementptr inbounds %struct.results, %struct.results* %433, i32 0, i32 2
  store float %432, float* %434, align 4
  %435 = load %struct.results*, %struct.results** %7, align 8
  %436 = getelementptr inbounds %struct.results, %struct.results* %435, i32 0, i32 2
  %437 = load float, float* %436, align 4
  %438 = fcmp une float %437, 0.000000e+00
  br i1 %438, label %439, label %455

439:                                              ; preds = %424
  %440 = load %struct.results*, %struct.results** %7, align 8
  %441 = getelementptr inbounds %struct.results, %struct.results* %440, i32 0, i32 2
  %442 = load float, float* %441, align 4
  %443 = fdiv float 6.502500e+04, %442
  %444 = load %struct.results*, %struct.results** %7, align 8
  %445 = getelementptr inbounds %struct.results, %struct.results* %444, i32 0, i32 2
  store float %443, float* %445, align 4
  %446 = load %struct.results*, %struct.results** %7, align 8
  %447 = getelementptr inbounds %struct.results, %struct.results* %446, i32 0, i32 2
  %448 = load float, float* %447, align 4
  %449 = fpext float %448 to double
  %450 = call double @log10(double %449) #8
  %451 = fptrunc double %450 to float
  %452 = fmul float 1.000000e+01, %451
  %453 = load %struct.results*, %struct.results** %7, align 8
  %454 = getelementptr inbounds %struct.results, %struct.results* %453, i32 0, i32 2
  store float %452, float* %454, align 4
  br label %458

455:                                              ; preds = %424
  %456 = load %struct.results*, %struct.results** %7, align 8
  %457 = getelementptr inbounds %struct.results, %struct.results* %456, i32 0, i32 2
  store float 0x4058FF5C20000000, float* %457, align 4
  br label %458

458:                                              ; preds = %455, %439
  %459 = load i32, i32* %8, align 4
  %460 = icmp ne i32 %459, 0
  br i1 %460, label %461, label %504

461:                                              ; preds = %458
  %462 = load %struct.pict_image*, %struct.pict_image** %16, align 8
  %463 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %462, i32 0, i32 0
  %464 = load i8*, i8** %463, align 8
  %465 = load i32, i32* @pels, align 4
  %466 = load i32, i32* @lines, align 4
  %467 = mul nsw i32 %465, %466
  %468 = sext i32 %467 to i64
  %469 = load %struct._IO_FILE*, %struct._IO_FILE** %9, align 8
  %470 = call i64 @fwrite(i8* %464, i64 1, i64 %468, %struct._IO_FILE* %469)
  %471 = load %struct.pict_image*, %struct.pict_image** %16, align 8
  %472 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %471, i32 0, i32 1
  %473 = load i8*, i8** %472, align 8
  %474 = load i32, i32* @pels, align 4
  %475 = load i32, i32* @lines, align 4
  %476 = mul nsw i32 %474, %475
  %477 = sdiv i32 %476, 4
  %478 = sext i32 %477 to i64
  %479 = load %struct._IO_FILE*, %struct._IO_FILE** %9, align 8
  %480 = call i64 @fwrite(i8* %473, i64 1, i64 %478, %struct._IO_FILE* %479)
  %481 = load %struct.pict_image*, %struct.pict_image** %16, align 8
  %482 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %481, i32 0, i32 2
  %483 = load i8*, i8** %482, align 8
  %484 = load i32, i32* @pels, align 4
  %485 = load i32, i32* @lines, align 4
  %486 = mul nsw i32 %484, %485
  %487 = sdiv i32 %486, 4
  %488 = sext i32 %487 to i64
  %489 = load %struct._IO_FILE*, %struct._IO_FILE** %9, align 8
  %490 = call i64 @fwrite(i8* %483, i64 1, i64 %488, %struct._IO_FILE* %489)
  %491 = load %struct.pict_image*, %struct.pict_image** %16, align 8
  %492 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %491, i32 0, i32 0
  %493 = load i8*, i8** %492, align 8
  call void @free(i8* %493) #8
  %494 = load %struct.pict_image*, %struct.pict_image** %16, align 8
  %495 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %494, i32 0, i32 1
  %496 = load i8*, i8** %495, align 8
  call void @free(i8* %496) #8
  %497 = load %struct.pict_image*, %struct.pict_image** %16, align 8
  %498 = getelementptr inbounds %struct.pict_image, %struct.pict_image* %497, i32 0, i32 2
  %499 = load i8*, i8** %498, align 8
  call void @free(i8* %499) #8
  %500 = load %struct.pict_image*, %struct.pict_image** %16, align 8
  %501 = bitcast %struct.pict_image* %500 to i8*
  call void @free(i8* %501) #8
  %502 = load %struct._IO_FILE*, %struct._IO_FILE** %9, align 8
  %503 = call i32 @fclose(%struct._IO_FILE* %502)
  br label %504

504:                                              ; preds = %461, %458
  ret void
}

; Function Attrs: nounwind
declare dso_local double @log10(double) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable willreturn }
attributes #6 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { nounwind readonly }
attributes #11 = { nounwind readnone }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}
!llvm.module.flags = !{!1}

!0 = !{!"Debian clang version 10.0.1-++20200708124224+ef32c611aa2-1~exp1~20200707224822.188 "}
!1 = !{i32 1, !"wchar_size", i32 4}
