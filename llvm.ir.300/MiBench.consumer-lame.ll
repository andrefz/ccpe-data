; ModuleID = 'llvm-link'
source_filename = "llvm-link"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.parameter = type { i32, i32, i32, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.side_info_link = type { %struct.side_info_link*, %struct.MYSideInfo }
%struct.MYSideInfo = type { i32, i32, i32, i32, %struct.BF_PartHolder*, %struct.BF_PartHolder*, [2 x %struct.BF_PartHolder*], [2 x [2 x %struct.BF_PartHolder*]] }
%struct.BF_PartHolder = type { i32, %struct.BF_BitstreamPart* }
%struct.BF_BitstreamPart = type { i32, %struct.BF_BitstreamElement* }
%struct.BF_BitstreamElement = type { i32, i16 }
%struct.ID3TAGDATA = type { i32, i32, [31 x i8], [31 x i8], [31 x i8], [5 x i8], [31 x i8], [128 x i8], [1 x i8], i8 }
%struct.mpstr = type { %struct.buf*, %struct.buf*, i32, i32, i32, %struct.frame, [2 x [2304 x i8]], [2 x [2 x [576 x double]]], [2 x i32], i64, i32, [2 x [2 x [272 x double]]], i32 }
%struct.buf = type { i8*, i64, i64, %struct.buf*, %struct.buf* }
%struct.frame = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.BF_FrameData = type { i32, i32, i32, %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart*, [2 x %struct.BF_BitstreamPart*], [2 x [2 x %struct.BF_BitstreamPart*]], [2 x [2 x %struct.BF_BitstreamPart*]], [2 x [2 x %struct.BF_BitstreamPart*]], [2 x [2 x %struct.BF_BitstreamPart*]], %struct.BF_BitstreamPart* }
%struct.BF_FrameResults = type { i32, i32, i32 }
%struct.bit_stream_struc = type { i8*, i32, %struct._IO_FILE*, i8*, i32, i64, i32, i32 }
%struct.III_side_info_t = type { i32, i32, i32, [2 x [4 x i32]], [2 x %struct.anon] }
%struct.anon = type { [2 x %struct.gr_info_ss] }
%struct.gr_info_ss = type { %struct.gr_info }
%struct.gr_info = type { i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], [3 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32*, [4 x i32] }
%struct.bandInfoStruct = type { [23 x i16], [22 x i16], [14 x i16], [13 x i16] }
%struct.newhuff = type { i32, i16* }
%struct.III_psy_xmin = type { [22 x double], [13 x [3 x double]] }
%struct.scalefac_struct = type { [23 x i32], [14 x i32] }
%struct.huffcodetab = type { i32, i32, i64*, i8* }
%struct.anon.113 = type { i32, i32 }
%struct.lame_global_flags = type { i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i32, i32, float, i32, i32, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, float, i32, i32, i32, float, float, float, float, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.timespec, %struct.timespec, %struct.timespec, [3 x i64] }
%struct.timespec = type { i64, i64 }
%struct.III_scalefac_t = type { [22 x i32], [13 x [3 x i32]] }
%struct.III_psy_ratio = type { %struct.III_psy_xmin, %struct.III_psy_xmin }
%struct.III_sideinfo = type { i32, i32, [2 x %struct.anon.50] }
%struct.anon.50 = type { [2 x %struct.gr_info_s] }
%struct.gr_info_s = type { i32, i32, i32, i32, i32, i32, [3 x i32], [3 x i32], [3 x i32], i32, i32, i32, i32, i32, i32, i32, [3 x double*], double* }
%struct.VBRTAGDATA = type { i32, i32, i32, i32, i32, i32, [100 x i8] }
%struct.rtpheader = type { %struct.rtpbits, i32, i32, i32 }
%struct.rtpbits = type { i32 }
%struct.sockaddr_in = type { i16, i16, %struct.rtpbits, [8 x i8] }
%struct.sockaddr = type { i16, [14 x i8] }
%struct.ts_times = type { float, float, float, float }

@param = dso_local local_unnamed_addr global %struct.parameter { i32 1, i32 1, i32 0, i32 0 }, align 4
@tabsel_123 = dso_local local_unnamed_addr global [2 x [3 x [16 x i32]]] [[3 x [16 x i32]] [[16 x i32] [i32 0, i32 32, i32 64, i32 96, i32 128, i32 160, i32 192, i32 224, i32 256, i32 288, i32 320, i32 352, i32 384, i32 416, i32 448, i32 0], [16 x i32] [i32 0, i32 32, i32 48, i32 56, i32 64, i32 80, i32 96, i32 112, i32 128, i32 160, i32 192, i32 224, i32 256, i32 320, i32 384, i32 0], [16 x i32] [i32 0, i32 32, i32 40, i32 48, i32 56, i32 64, i32 80, i32 96, i32 112, i32 128, i32 160, i32 192, i32 224, i32 256, i32 320, i32 0]], [3 x [16 x i32]] [[16 x i32] [i32 0, i32 32, i32 48, i32 56, i32 64, i32 80, i32 96, i32 112, i32 128, i32 144, i32 160, i32 176, i32 192, i32 224, i32 256, i32 0], [16 x i32] [i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 64, i32 80, i32 96, i32 112, i32 128, i32 144, i32 160, i32 0], [16 x i32] [i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 64, i32 80, i32 96, i32 112, i32 128, i32 144, i32 160, i32 0]]], align 16
@freqs = dso_local local_unnamed_addr global [9 x i64] [i64 44100, i64 48000, i64 32000, i64 22050, i64 24000, i64 16000, i64 11025, i64 12000, i64 8000], align 16
@pcm_point = dso_local local_unnamed_addr global i32 0, align 4
@wordpointer = common dso_local local_unnamed_addr global i8* null, align 8
@bitindex = common dso_local local_unnamed_addr global i32 0, align 4
@pcm_sample = common dso_local local_unnamed_addr global i8* null, align 8
@stderr = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [14 x i8] c"Stream error\0A\00", align 1
@.str.1 = private unnamed_addr constant [28 x i8] c"Free format not supported.\0A\00", align 1
@.str.2 = private unnamed_addr constant [24 x i8] c"layer=1 Not supported!\0A\00", align 1
@.str.3 = private unnamed_addr constant [24 x i8] c"layer=2 Not supported!\0A\00", align 1
@.str.4 = private unnamed_addr constant [28 x i8] c"Sorry, unknown layer type.\0A\00", align 1
@.str.16 = private unnamed_addr constant [4 x i8] c"1.0\00", align 1
@.str.15 = private unnamed_addr constant [4 x i8] c"2.0\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"2.5\00", align 1
@print_header_compact.layers = internal unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i32 0, i32 0)], align 16
@print_header.modes = internal unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i32 0, i32 0)], align 16
@.str.13 = private unnamed_addr constant [63 x i8] c"MPEG %s, Layer: %s, Freq: %ld, mode: %s, modext: %d, BPF : %d\0A\00", align 1
@.str.19 = private unnamed_addr constant [3 x i8] c"No\00", align 1
@.str.18 = private unnamed_addr constant [4 x i8] c"Yes\00", align 1
@.str.17 = private unnamed_addr constant [67 x i8] c"Channels: %d, copyright: %s, original: %s, CRC: %s, emphasis: %d.\0A\00", align 1
@.str.20 = private unnamed_addr constant [42 x i8] c"Bitrate: %d Kbits/s, Extension value: %d\0A\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"Stereo\00", align 1
@.str.6 = private unnamed_addr constant [13 x i8] c"Joint-Stereo\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"Dual-Channel\00", align 1
@.str.8 = private unnamed_addr constant [15 x i8] c"Single-Channel\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"Unknown\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"I\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"II\00", align 1
@.str.12 = private unnamed_addr constant [4 x i8] c"III\00", align 1
@print_header_compact.modes = internal unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24, i32 0, i32 0)], align 16
@.str.25 = private unnamed_addr constant [40 x i8] c"MPEG %s layer %s, %d kbit/s, %ld Hz %s\0A\00", align 1
@.str.21 = private unnamed_addr constant [7 x i8] c"stereo\00", align 1
@.str.22 = private unnamed_addr constant [13 x i8] c"joint-stereo\00", align 1
@.str.23 = private unnamed_addr constant [13 x i8] c"dual-channel\00", align 1
@.str.24 = private unnamed_addr constant [5 x i8] c"mono\00", align 1
@rv_tbl = internal unnamed_addr constant [128 x i16] [i16 0, i16 128, i16 64, i16 192, i16 32, i16 160, i16 96, i16 224, i16 16, i16 144, i16 80, i16 208, i16 48, i16 176, i16 112, i16 240, i16 8, i16 136, i16 72, i16 200, i16 40, i16 168, i16 104, i16 232, i16 24, i16 152, i16 88, i16 216, i16 56, i16 184, i16 120, i16 248, i16 4, i16 132, i16 68, i16 196, i16 36, i16 164, i16 100, i16 228, i16 20, i16 148, i16 84, i16 212, i16 52, i16 180, i16 116, i16 244, i16 12, i16 140, i16 76, i16 204, i16 44, i16 172, i16 108, i16 236, i16 28, i16 156, i16 92, i16 220, i16 60, i16 188, i16 124, i16 252, i16 2, i16 130, i16 66, i16 194, i16 34, i16 162, i16 98, i16 226, i16 18, i16 146, i16 82, i16 210, i16 50, i16 178, i16 114, i16 242, i16 10, i16 138, i16 74, i16 202, i16 42, i16 170, i16 106, i16 234, i16 26, i16 154, i16 90, i16 218, i16 58, i16 186, i16 122, i16 250, i16 6, i16 134, i16 70, i16 198, i16 38, i16 166, i16 102, i16 230, i16 22, i16 150, i16 86, i16 214, i16 54, i16 182, i16 118, i16 246, i16 14, i16 142, i16 78, i16 206, i16 46, i16 174, i16 110, i16 238, i16 30, i16 158, i16 94, i16 222, i16 62, i16 190, i16 126, i16 254], align 16
@window_s = internal unnamed_addr global [128 x float] zeroinitializer, align 16
@costab = internal unnamed_addr global [8 x float] zeroinitializer, align 16
@window = internal unnamed_addr global [512 x float] zeroinitializer, align 16
@BitCount = internal unnamed_addr global i32 0, align 4
@ThisFrameSize = internal unnamed_addr global i32 0, align 4
@BitsRemaining = internal unnamed_addr global i32 0, align 4
@side_queue_free = internal unnamed_addr global %struct.side_info_link* null, align 8
@.str.26 = private unnamed_addr constant [31 x i8] c"cannot allocate side_info_link\00", align 1
@side_queue_head = internal unnamed_addr global %struct.side_info_link* null, align 8
@forwardFrameLength = internal unnamed_addr global i32 0, align 4
@forwardSILength = internal unnamed_addr global i32 0, align 4
@elements = internal unnamed_addr global i32 0, align 4
@count_samples_carefully = internal unnamed_addr global i1 false, align 4
@samp_freq = internal global i32 0, align 4
@num_channels = internal global i32 0, align 4
@num_samples = internal global i64 0, align 8
@.str.1.27 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@stdin = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@musicin = internal unnamed_addr global %struct._IO_FILE* null, align 8
@.str.2.28 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str.3.29 = private unnamed_addr constant [22 x i8] c"Could not find \22%s\22.\0A\00", align 1
@input_bitrate = internal global i32 0, align 4
@.str.4.30 = private unnamed_addr constant [45 x i8] c"Error reading headers in mp3 input file %s.\0A\00", align 1
@.str.5.31 = private unnamed_addr constant [28 x i8] c"Assuming raw pcm input file\00", align 1
@.str.6.32 = private unnamed_addr constant [26 x i8] c" : Forcing byte-swapping\0A\00", align 1
@.str.11.33 = private unnamed_addr constant [38 x i8] c"%d-bit sample-size is not supported!\0A\00", align 1
@.str.13.34 = private unnamed_addr constant [36 x i8] c"Sound data is not %d bits in \22%s\22.\0A\00", align 1
@.str.10.35 = private unnamed_addr constant [5 x i8] c"name\00", align 1
@.str.14.36 = private unnamed_addr constant [43 x i8] c"Sound data is not mono or stereo in \22%s\22.\0A\00", align 1
@.str.15.37 = private unnamed_addr constant [37 x i8] c"Block size is not %d bytes in \22%s\22.\0A\00", align 1
@.str.16.38 = private unnamed_addr constant [39 x i8] c"Block offset is not %d bytes in \22%s\22.\0A\00", align 1
@.str.39 = private unnamed_addr constant [34 x i8] c"Could not close audio input file\0A\00", align 1
@get_audio.num_samples_read = internal unnamed_addr global i64 0, align 8
@.str.8.40 = private unnamed_addr constant [26 x i8] c"Error reading input file\0A\00", align 1
@.str.9.41 = private unnamed_addr constant [27 x i8] c"byte order not determined\0A\00", align 1
@genre_last = dso_local local_unnamed_addr global i32 147, align 4
@genre_list = dso_local local_unnamed_addr global [148 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3.42, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4.43, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5.44, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6.45, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7.46, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8.47, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9.48, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10.49, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11.50, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12.51, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.13.52, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14.53, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15.54, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16.55, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.56, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18.57, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19.58, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20.59, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.21.60, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.22.61, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.23.62, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.24.63, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.25.64, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26.65, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.27, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.28, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.29, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.30, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.31, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.32, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.33, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.34, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.35, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.36, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.37, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.38, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.39.66, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.40, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.41, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.42, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.43, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.44, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.45, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.46, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.47, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.48, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.50, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.52, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.53, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.54, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.55, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.56, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.57, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.58, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.59, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.60, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.61, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.62, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.63, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.64, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.65, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.67, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.68, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.69, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.71, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.72, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.73, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.74, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.75, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.76, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.77, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.78, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.79, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.80, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.81, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.82, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.83, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.84, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.85, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.86, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.87, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.88, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.89, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.90, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.91, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.92, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.93, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.94, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.95, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.96, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.97, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.98, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.99, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.100, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.101, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.102, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.103, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.104, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.105, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.106, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.107, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.108, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.109, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.110, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.111, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.112, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.113, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.114, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.115, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.116, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.117, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.118, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.119, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.120, i32 0, i32 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.121, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.122, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.123, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.124, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.125, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.126, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.127, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.128, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.129, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.130, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.131, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.132, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.133, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.134, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.135, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.136, i32 0, i32 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.137, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.138, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.139, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.140, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.141, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.142, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.143, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.144, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.145, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.146, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.147, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.148, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.149, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.150, i32 0, i32 0)], align 16
@.str.3.42 = private unnamed_addr constant [6 x i8] c"Blues\00", align 1
@.str.4.43 = private unnamed_addr constant [13 x i8] c"Classic Rock\00", align 1
@.str.5.44 = private unnamed_addr constant [8 x i8] c"Country\00", align 1
@.str.6.45 = private unnamed_addr constant [6 x i8] c"Dance\00", align 1
@.str.7.46 = private unnamed_addr constant [6 x i8] c"Disco\00", align 1
@.str.8.47 = private unnamed_addr constant [5 x i8] c"Funk\00", align 1
@.str.9.48 = private unnamed_addr constant [7 x i8] c"Grunge\00", align 1
@.str.10.49 = private unnamed_addr constant [8 x i8] c"Hip-Hop\00", align 1
@.str.11.50 = private unnamed_addr constant [5 x i8] c"Jazz\00", align 1
@.str.12.51 = private unnamed_addr constant [6 x i8] c"Metal\00", align 1
@.str.13.52 = private unnamed_addr constant [8 x i8] c"New Age\00", align 1
@.str.14.53 = private unnamed_addr constant [7 x i8] c"Oldies\00", align 1
@.str.15.54 = private unnamed_addr constant [6 x i8] c"Other\00", align 1
@.str.16.55 = private unnamed_addr constant [4 x i8] c"Pop\00", align 1
@.str.17.56 = private unnamed_addr constant [4 x i8] c"R&B\00", align 1
@.str.18.57 = private unnamed_addr constant [4 x i8] c"Rap\00", align 1
@.str.19.58 = private unnamed_addr constant [7 x i8] c"Reggae\00", align 1
@.str.20.59 = private unnamed_addr constant [5 x i8] c"Rock\00", align 1
@.str.21.60 = private unnamed_addr constant [7 x i8] c"Techno\00", align 1
@.str.22.61 = private unnamed_addr constant [11 x i8] c"Industrial\00", align 1
@.str.23.62 = private unnamed_addr constant [12 x i8] c"Alternative\00", align 1
@.str.24.63 = private unnamed_addr constant [4 x i8] c"Ska\00", align 1
@.str.25.64 = private unnamed_addr constant [12 x i8] c"Death Metal\00", align 1
@.str.26.65 = private unnamed_addr constant [7 x i8] c"Pranks\00", align 1
@.str.27 = private unnamed_addr constant [11 x i8] c"Soundtrack\00", align 1
@.str.28 = private unnamed_addr constant [12 x i8] c"Euro-Techno\00", align 1
@.str.29 = private unnamed_addr constant [8 x i8] c"Ambient\00", align 1
@.str.30 = private unnamed_addr constant [9 x i8] c"Trip-Hop\00", align 1
@.str.31 = private unnamed_addr constant [6 x i8] c"Vocal\00", align 1
@.str.32 = private unnamed_addr constant [10 x i8] c"Jazz+Funk\00", align 1
@.str.33 = private unnamed_addr constant [7 x i8] c"Fusion\00", align 1
@.str.34 = private unnamed_addr constant [7 x i8] c"Trance\00", align 1
@.str.35 = private unnamed_addr constant [10 x i8] c"Classical\00", align 1
@.str.36 = private unnamed_addr constant [13 x i8] c"Instrumental\00", align 1
@.str.37 = private unnamed_addr constant [5 x i8] c"Acid\00", align 1
@.str.38 = private unnamed_addr constant [6 x i8] c"House\00", align 1
@.str.39.66 = private unnamed_addr constant [5 x i8] c"Game\00", align 1
@.str.40 = private unnamed_addr constant [11 x i8] c"Sound Clip\00", align 1
@.str.41 = private unnamed_addr constant [7 x i8] c"Gospel\00", align 1
@.str.42 = private unnamed_addr constant [6 x i8] c"Noise\00", align 1
@.str.43 = private unnamed_addr constant [11 x i8] c"AlternRock\00", align 1
@.str.44 = private unnamed_addr constant [5 x i8] c"Bass\00", align 1
@.str.45 = private unnamed_addr constant [5 x i8] c"Soul\00", align 1
@.str.46 = private unnamed_addr constant [5 x i8] c"Punk\00", align 1
@.str.47 = private unnamed_addr constant [6 x i8] c"Space\00", align 1
@.str.48 = private unnamed_addr constant [11 x i8] c"Meditative\00", align 1
@.str.49 = private unnamed_addr constant [17 x i8] c"Instrumental Pop\00", align 1
@.str.50 = private unnamed_addr constant [18 x i8] c"Instrumental Rock\00", align 1
@.str.51 = private unnamed_addr constant [7 x i8] c"Ethnic\00", align 1
@.str.52 = private unnamed_addr constant [7 x i8] c"Gothic\00", align 1
@.str.53 = private unnamed_addr constant [9 x i8] c"Darkwave\00", align 1
@.str.54 = private unnamed_addr constant [18 x i8] c"Techno-Industrial\00", align 1
@.str.55 = private unnamed_addr constant [11 x i8] c"Electronic\00", align 1
@.str.56 = private unnamed_addr constant [9 x i8] c"Pop-Folk\00", align 1
@.str.57 = private unnamed_addr constant [10 x i8] c"Eurodance\00", align 1
@.str.58 = private unnamed_addr constant [6 x i8] c"Dream\00", align 1
@.str.59 = private unnamed_addr constant [14 x i8] c"Southern Rock\00", align 1
@.str.60 = private unnamed_addr constant [7 x i8] c"Comedy\00", align 1
@.str.61 = private unnamed_addr constant [5 x i8] c"Cult\00", align 1
@.str.62 = private unnamed_addr constant [8 x i8] c"Gangsta\00", align 1
@.str.63 = private unnamed_addr constant [7 x i8] c"Top 40\00", align 1
@.str.64 = private unnamed_addr constant [14 x i8] c"Christian Rap\00", align 1
@.str.65 = private unnamed_addr constant [9 x i8] c"Pop/Funk\00", align 1
@.str.66 = private unnamed_addr constant [7 x i8] c"Jungle\00", align 1
@.str.67 = private unnamed_addr constant [16 x i8] c"Native American\00", align 1
@.str.68 = private unnamed_addr constant [8 x i8] c"Cabaret\00", align 1
@.str.69 = private unnamed_addr constant [9 x i8] c"New Wave\00", align 1
@.str.70 = private unnamed_addr constant [12 x i8] c"Psychadelic\00", align 1
@.str.71 = private unnamed_addr constant [5 x i8] c"Rave\00", align 1
@.str.72 = private unnamed_addr constant [10 x i8] c"Showtunes\00", align 1
@.str.73 = private unnamed_addr constant [8 x i8] c"Trailer\00", align 1
@.str.74 = private unnamed_addr constant [6 x i8] c"Lo-Fi\00", align 1
@.str.75 = private unnamed_addr constant [7 x i8] c"Tribal\00", align 1
@.str.76 = private unnamed_addr constant [10 x i8] c"Acid Punk\00", align 1
@.str.77 = private unnamed_addr constant [10 x i8] c"Acid Jazz\00", align 1
@.str.78 = private unnamed_addr constant [6 x i8] c"Polka\00", align 1
@.str.79 = private unnamed_addr constant [6 x i8] c"Retro\00", align 1
@.str.80 = private unnamed_addr constant [8 x i8] c"Musical\00", align 1
@.str.81 = private unnamed_addr constant [12 x i8] c"Rock & Roll\00", align 1
@.str.82 = private unnamed_addr constant [10 x i8] c"Hard Rock\00", align 1
@.str.83 = private unnamed_addr constant [5 x i8] c"Folk\00", align 1
@.str.84 = private unnamed_addr constant [10 x i8] c"Folk/Rock\00", align 1
@.str.85 = private unnamed_addr constant [14 x i8] c"National Folk\00", align 1
@.str.86 = private unnamed_addr constant [6 x i8] c"Swing\00", align 1
@.str.87 = private unnamed_addr constant [12 x i8] c"Fast-Fusion\00", align 1
@.str.88 = private unnamed_addr constant [6 x i8] c"Bebob\00", align 1
@.str.89 = private unnamed_addr constant [6 x i8] c"Latin\00", align 1
@.str.90 = private unnamed_addr constant [8 x i8] c"Revival\00", align 1
@.str.91 = private unnamed_addr constant [7 x i8] c"Celtic\00", align 1
@.str.92 = private unnamed_addr constant [10 x i8] c"Bluegrass\00", align 1
@.str.93 = private unnamed_addr constant [11 x i8] c"Avantgarde\00", align 1
@.str.94 = private unnamed_addr constant [12 x i8] c"Gothic Rock\00", align 1
@.str.95 = private unnamed_addr constant [17 x i8] c"Progressive Rock\00", align 1
@.str.96 = private unnamed_addr constant [17 x i8] c"Psychedelic Rock\00", align 1
@.str.97 = private unnamed_addr constant [15 x i8] c"Symphonic Rock\00", align 1
@.str.98 = private unnamed_addr constant [10 x i8] c"Slow Rock\00", align 1
@.str.99 = private unnamed_addr constant [9 x i8] c"Big Band\00", align 1
@.str.100 = private unnamed_addr constant [7 x i8] c"Chorus\00", align 1
@.str.101 = private unnamed_addr constant [15 x i8] c"Easy Listening\00", align 1
@.str.102 = private unnamed_addr constant [9 x i8] c"Acoustic\00", align 1
@.str.103 = private unnamed_addr constant [7 x i8] c"Humour\00", align 1
@.str.104 = private unnamed_addr constant [7 x i8] c"Speech\00", align 1
@.str.105 = private unnamed_addr constant [8 x i8] c"Chanson\00", align 1
@.str.106 = private unnamed_addr constant [6 x i8] c"Opera\00", align 1
@.str.107 = private unnamed_addr constant [14 x i8] c"Chamber Music\00", align 1
@.str.108 = private unnamed_addr constant [7 x i8] c"Sonata\00", align 1
@.str.109 = private unnamed_addr constant [9 x i8] c"Symphony\00", align 1
@.str.110 = private unnamed_addr constant [11 x i8] c"Booty Bass\00", align 1
@.str.111 = private unnamed_addr constant [7 x i8] c"Primus\00", align 1
@.str.112 = private unnamed_addr constant [12 x i8] c"Porn Groove\00", align 1
@.str.113 = private unnamed_addr constant [7 x i8] c"Satire\00", align 1
@.str.114 = private unnamed_addr constant [9 x i8] c"Slow Jam\00", align 1
@.str.115 = private unnamed_addr constant [5 x i8] c"Club\00", align 1
@.str.116 = private unnamed_addr constant [6 x i8] c"Tango\00", align 1
@.str.117 = private unnamed_addr constant [6 x i8] c"Samba\00", align 1
@.str.118 = private unnamed_addr constant [9 x i8] c"Folklore\00", align 1
@.str.119 = private unnamed_addr constant [7 x i8] c"Ballad\00", align 1
@.str.120 = private unnamed_addr constant [13 x i8] c"Power Ballad\00", align 1
@.str.121 = private unnamed_addr constant [14 x i8] c"Rhythmic Soul\00", align 1
@.str.122 = private unnamed_addr constant [10 x i8] c"Freestyle\00", align 1
@.str.123 = private unnamed_addr constant [5 x i8] c"Duet\00", align 1
@.str.124 = private unnamed_addr constant [10 x i8] c"Punk Rock\00", align 1
@.str.125 = private unnamed_addr constant [10 x i8] c"Drum Solo\00", align 1
@.str.126 = private unnamed_addr constant [10 x i8] c"A capella\00", align 1
@.str.127 = private unnamed_addr constant [11 x i8] c"Euro-House\00", align 1
@.str.128 = private unnamed_addr constant [11 x i8] c"Dance Hall\00", align 1
@.str.129 = private unnamed_addr constant [4 x i8] c"Goa\00", align 1
@.str.130 = private unnamed_addr constant [12 x i8] c"Drum & Bass\00", align 1
@.str.131 = private unnamed_addr constant [11 x i8] c"Club House\00", align 1
@.str.132 = private unnamed_addr constant [9 x i8] c"Hardcore\00", align 1
@.str.133 = private unnamed_addr constant [7 x i8] c"Terror\00", align 1
@.str.134 = private unnamed_addr constant [6 x i8] c"Indie\00", align 1
@.str.135 = private unnamed_addr constant [8 x i8] c"BritPop\00", align 1
@.str.136 = private unnamed_addr constant [10 x i8] c"NegerPunk\00", align 1
@.str.137 = private unnamed_addr constant [11 x i8] c"Polsk Punk\00", align 1
@.str.138 = private unnamed_addr constant [5 x i8] c"Beat\00", align 1
@.str.139 = private unnamed_addr constant [18 x i8] c"Christian Gangsta\00", align 1
@.str.140 = private unnamed_addr constant [12 x i8] c"Heavy Metal\00", align 1
@.str.141 = private unnamed_addr constant [12 x i8] c"Black Metal\00", align 1
@.str.142 = private unnamed_addr constant [10 x i8] c"Crossover\00", align 1
@.str.143 = private unnamed_addr constant [15 x i8] c"Contemporary C\00", align 1
@.str.144 = private unnamed_addr constant [15 x i8] c"Christian Rock\00", align 1
@.str.145 = private unnamed_addr constant [9 x i8] c"Merengue\00", align 1
@.str.146 = private unnamed_addr constant [6 x i8] c"Salsa\00", align 1
@.str.147 = private unnamed_addr constant [13 x i8] c"Thrash Metal\00", align 1
@.str.148 = private unnamed_addr constant [6 x i8] c"Anime\00", align 1
@.str.149 = private unnamed_addr constant [5 x i8] c"JPop\00", align 1
@.str.150 = private unnamed_addr constant [9 x i8] c"SynthPop\00", align 1
@id3tag = common dso_local global %struct.ID3TAGDATA zeroinitializer, align 4
@.str.2.67 = private unnamed_addr constant [4 x i8] c"rb+\00", align 1
@gmp = common dso_local local_unnamed_addr global %struct.mpstr* null, align 8
@.str.151 = private unnamed_addr constant [19 x i8] c"To less out space\0A\00", align 1
@.str.2.152 = private unnamed_addr constant [16 x i8] c"Out of memory!\0A\00", align 1
@.str.3.153 = private unnamed_addr constant [14 x i8] c"Fatal error!\0A\00", align 1
@.str.1.154 = private unnamed_addr constant [22 x i8] c"Can't step back %ld!\0A\00", align 1
@frameData = dso_local local_unnamed_addr global %struct.BF_FrameData* null, align 8
@frameResults = dso_local local_unnamed_addr global %struct.BF_FrameResults* null, align 8
@PartHoldersInitialized = dso_local local_unnamed_addr global i32 0, align 4
@headerPH = common dso_local local_unnamed_addr global %struct.BF_PartHolder* null, align 8
@frameSIPH = common dso_local local_unnamed_addr global %struct.BF_PartHolder* null, align 8
@channelSIPH = common dso_local local_unnamed_addr global [2 x %struct.BF_PartHolder*] zeroinitializer, align 16
@spectrumSIPH = common dso_local local_unnamed_addr global [2 x [2 x %struct.BF_PartHolder*]] zeroinitializer, align 16
@scaleFactorsPH = common dso_local local_unnamed_addr global [2 x [2 x %struct.BF_PartHolder*]] zeroinitializer, align 16
@codedDataPH = common dso_local global [2 x [2 x %struct.BF_PartHolder*]] zeroinitializer, align 16
@userSpectrumPH = common dso_local local_unnamed_addr global [2 x [2 x %struct.BF_PartHolder*]] zeroinitializer, align 16
@userFrameDataPH = common dso_local local_unnamed_addr global %struct.BF_PartHolder* null, align 8
@bs = internal unnamed_addr global %struct.bit_stream_struc* null, align 8
@crc = internal unnamed_addr global i32 0, align 4
@slen1_tab = internal unnamed_addr constant [16 x i32] [i32 0, i32 0, i32 0, i32 0, i32 3, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 4, i32 4], align 16
@slen2_tab = internal unnamed_addr constant [16 x i32] [i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 1, i32 2, i32 3, i32 1, i32 2, i32 3, i32 2, i32 3], align 16
@.str.157 = private unnamed_addr constant [35 x i8] c"opps - adding stuffing bits = %i.\0A\00", align 1
@.str.1.158 = private unnamed_addr constant [27 x i8] c"this should not happen...\0A\00", align 1
@bs.159 = internal global %struct.bit_stream_struc zeroinitializer, align 8
@l3_side = internal global %struct.III_side_info_t zeroinitializer, align 8
@.str.160 = private unnamed_addr constant [65 x i8] c"Warning: highpass filter disabled.  highpass frequency to small\0A\00", align 1
@.str.5.161 = private unnamed_addr constant [68 x i8] c"Autoconverting from stereo to mono. Setting encoding to mono mode.\0A\00", align 1
@.str.6.162 = private unnamed_addr constant [40 x i8] c"Resampling:  input=%ikHz  output=%ikHz\0A\00", align 1
@.str.7.163 = private unnamed_addr constant [70 x i8] c"Using polyphase highpass filter, transition band: %.0f Hz -  %.0f Hz\0A\00", align 1
@.str.8.164 = private unnamed_addr constant [70 x i8] c"Using polyphase lowpass filter,  transition band:  %.0f Hz - %.0f Hz\0A\00", align 1
@.str.9.165 = private unnamed_addr constant [15 x i8] c"Analyzing %s \0A\00", align 1
@.str.11.166 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.12.167 = private unnamed_addr constant [6 x i8] c"stdin\00", align 1
@.str.13.168 = private unnamed_addr constant [7 x i8] c"stdout\00", align 1
@.str.10.169 = private unnamed_addr constant [19 x i8] c"Encoding %s to %s\0A\00", align 1
@lame_print_config.mode_names = internal unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.172, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2.173, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3.174, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4.175, i32 0, i32 0)], align 16
@.str.14.170 = private unnamed_addr constant [59 x i8] c"Encoding as %.1fkHz VBR(q=%i) %s MPEG%i LayerIII  qval=%i\0A\00", align 1
@.str.15.171 = private unnamed_addr constant [67 x i8] c"Encoding as %.1f kHz %d kbps %s MPEG%i LayerIII (%4.1fx)  qval=%i\0A\00", align 1
@.str.1.172 = private unnamed_addr constant [7 x i8] c"stereo\00", align 1
@.str.2.173 = private unnamed_addr constant [9 x i8] c"j-stereo\00", align 1
@.str.3.174 = private unnamed_addr constant [8 x i8] c"dual-ch\00", align 1
@.str.4.175 = private unnamed_addr constant [10 x i8] c"single-ch\00", align 1
@lame_encode_frame.sentBits = internal unnamed_addr global i64 0, align 8
@lame_encode_frame.frac_SpF = internal unnamed_addr global double 0.000000e+00, align 8
@lame_encode_frame.slot_lag = internal unnamed_addr global double 0.000000e+00, align 8
@lame_encode_frame.ms_ratio = internal global [2 x double] zeroinitializer, align 16
@lame_encode_frame.ms_ener_ratio = internal global [2 x double] zeroinitializer, align 16
@lame_encode_frame.frameBits = internal unnamed_addr global i64 0, align 8
@.str.16.176 = private unnamed_addr constant [36 x i8] c"Sent %ld bits = %ld slots plus %ld\0A\00", align 1
@fill_buffer_resample.init = internal unnamed_addr global [2 x i32] zeroinitializer, align 4
@fill_buffer_resample.itime = internal unnamed_addr global [2 x double] zeroinitializer, align 16
@fill_buffer_resample.inbuf_old = internal unnamed_addr global [2 x [5 x i16]] zeroinitializer, align 16
@lame_encode_buffer.frame_buffered = internal unnamed_addr global i1 false, align 4
@mfbuf = internal global [2 x [3056 x i16]] zeroinitializer, align 16
@mf_samples_to_encode = internal unnamed_addr global i32 0, align 4
@mf_size = internal unnamed_addr global i32 0, align 4
@lame_encode_buffer_interleaved.frame_buffered = internal unnamed_addr global i1 false, align 4
@bandInfo = dso_local local_unnamed_addr global [9 x %struct.bandInfoStruct] [%struct.bandInfoStruct { [23 x i16] [i16 0, i16 4, i16 8, i16 12, i16 16, i16 20, i16 24, i16 30, i16 36, i16 44, i16 52, i16 62, i16 74, i16 90, i16 110, i16 134, i16 162, i16 196, i16 238, i16 288, i16 342, i16 418, i16 576], [22 x i16] [i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 6, i16 6, i16 8, i16 8, i16 10, i16 12, i16 16, i16 20, i16 24, i16 28, i16 34, i16 42, i16 50, i16 54, i16 76, i16 158], [14 x i16] [i16 0, i16 12, i16 24, i16 36, i16 48, i16 66, i16 90, i16 120, i16 156, i16 198, i16 252, i16 318, i16 408, i16 576], [13 x i16] [i16 4, i16 4, i16 4, i16 4, i16 6, i16 8, i16 10, i16 12, i16 14, i16 18, i16 22, i16 30, i16 56] }, %struct.bandInfoStruct { [23 x i16] [i16 0, i16 4, i16 8, i16 12, i16 16, i16 20, i16 24, i16 30, i16 36, i16 42, i16 50, i16 60, i16 72, i16 88, i16 106, i16 128, i16 156, i16 190, i16 230, i16 276, i16 330, i16 384, i16 576], [22 x i16] [i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 6, i16 6, i16 6, i16 8, i16 10, i16 12, i16 16, i16 18, i16 22, i16 28, i16 34, i16 40, i16 46, i16 54, i16 54, i16 192], [14 x i16] [i16 0, i16 12, i16 24, i16 36, i16 48, i16 66, i16 84, i16 114, i16 150, i16 192, i16 240, i16 300, i16 378, i16 576], [13 x i16] [i16 4, i16 4, i16 4, i16 4, i16 6, i16 6, i16 10, i16 12, i16 14, i16 16, i16 20, i16 26, i16 66] }, %struct.bandInfoStruct { [23 x i16] [i16 0, i16 4, i16 8, i16 12, i16 16, i16 20, i16 24, i16 30, i16 36, i16 44, i16 54, i16 66, i16 82, i16 102, i16 126, i16 156, i16 194, i16 240, i16 296, i16 364, i16 448, i16 550, i16 576], [22 x i16] [i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 6, i16 6, i16 8, i16 10, i16 12, i16 16, i16 20, i16 24, i16 30, i16 38, i16 46, i16 56, i16 68, i16 84, i16 102, i16 26], [14 x i16] [i16 0, i16 12, i16 24, i16 36, i16 48, i16 66, i16 90, i16 126, i16 174, i16 234, i16 312, i16 414, i16 540, i16 576], [13 x i16] [i16 4, i16 4, i16 4, i16 4, i16 6, i16 8, i16 12, i16 16, i16 20, i16 26, i16 34, i16 42, i16 12] }, %struct.bandInfoStruct { [23 x i16] [i16 0, i16 6, i16 12, i16 18, i16 24, i16 30, i16 36, i16 44, i16 54, i16 66, i16 80, i16 96, i16 116, i16 140, i16 168, i16 200, i16 238, i16 284, i16 336, i16 396, i16 464, i16 522, i16 576], [22 x i16] [i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 8, i16 10, i16 12, i16 14, i16 16, i16 20, i16 24, i16 28, i16 32, i16 38, i16 46, i16 52, i16 60, i16 68, i16 58, i16 54], [14 x i16] [i16 0, i16 12, i16 24, i16 36, i16 54, i16 72, i16 96, i16 126, i16 168, i16 222, i16 300, i16 396, i16 522, i16 576], [13 x i16] [i16 4, i16 4, i16 4, i16 6, i16 6, i16 8, i16 10, i16 14, i16 18, i16 26, i16 32, i16 42, i16 18] }, %struct.bandInfoStruct { [23 x i16] [i16 0, i16 6, i16 12, i16 18, i16 24, i16 30, i16 36, i16 44, i16 54, i16 66, i16 80, i16 96, i16 114, i16 136, i16 162, i16 194, i16 232, i16 278, i16 332, i16 394, i16 464, i16 540, i16 576], [22 x i16] [i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 8, i16 10, i16 12, i16 14, i16 16, i16 18, i16 22, i16 26, i16 32, i16 38, i16 46, i16 52, i16 64, i16 70, i16 76, i16 36], [14 x i16] [i16 0, i16 12, i16 24, i16 36, i16 54, i16 78, i16 108, i16 144, i16 186, i16 240, i16 312, i16 408, i16 540, i16 576], [13 x i16] [i16 4, i16 4, i16 4, i16 6, i16 8, i16 10, i16 12, i16 14, i16 18, i16 24, i16 32, i16 44, i16 12] }, %struct.bandInfoStruct { [23 x i16] [i16 0, i16 6, i16 12, i16 18, i16 24, i16 30, i16 36, i16 44, i16 54, i16 66, i16 80, i16 96, i16 116, i16 140, i16 168, i16 200, i16 238, i16 284, i16 336, i16 396, i16 464, i16 522, i16 576], [22 x i16] [i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 8, i16 10, i16 12, i16 14, i16 16, i16 20, i16 24, i16 28, i16 32, i16 38, i16 46, i16 52, i16 60, i16 68, i16 58, i16 54], [14 x i16] [i16 0, i16 12, i16 24, i16 36, i16 54, i16 78, i16 108, i16 144, i16 186, i16 240, i16 312, i16 402, i16 522, i16 576], [13 x i16] [i16 4, i16 4, i16 4, i16 6, i16 8, i16 10, i16 12, i16 14, i16 18, i16 24, i16 30, i16 40, i16 18] }, %struct.bandInfoStruct { [23 x i16] [i16 0, i16 6, i16 12, i16 18, i16 24, i16 30, i16 36, i16 44, i16 54, i16 66, i16 80, i16 96, i16 116, i16 140, i16 168, i16 200, i16 238, i16 284, i16 336, i16 396, i16 464, i16 522, i16 576], [22 x i16] [i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 8, i16 10, i16 12, i16 14, i16 16, i16 20, i16 24, i16 28, i16 32, i16 38, i16 46, i16 52, i16 60, i16 68, i16 58, i16 54], [14 x i16] [i16 0, i16 12, i16 24, i16 36, i16 54, i16 78, i16 108, i16 144, i16 186, i16 240, i16 312, i16 402, i16 522, i16 576], [13 x i16] [i16 4, i16 4, i16 4, i16 6, i16 8, i16 10, i16 12, i16 14, i16 18, i16 24, i16 30, i16 40, i16 18] }, %struct.bandInfoStruct { [23 x i16] [i16 0, i16 6, i16 12, i16 18, i16 24, i16 30, i16 36, i16 44, i16 54, i16 66, i16 80, i16 96, i16 116, i16 140, i16 168, i16 200, i16 238, i16 284, i16 336, i16 396, i16 464, i16 522, i16 576], [22 x i16] [i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 8, i16 10, i16 12, i16 14, i16 16, i16 20, i16 24, i16 28, i16 32, i16 38, i16 46, i16 52, i16 60, i16 68, i16 58, i16 54], [14 x i16] [i16 0, i16 12, i16 24, i16 36, i16 54, i16 78, i16 108, i16 144, i16 186, i16 240, i16 312, i16 402, i16 522, i16 576], [13 x i16] [i16 4, i16 4, i16 4, i16 6, i16 8, i16 10, i16 12, i16 14, i16 18, i16 24, i16 30, i16 40, i16 18] }, %struct.bandInfoStruct { [23 x i16] [i16 0, i16 12, i16 24, i16 36, i16 48, i16 60, i16 72, i16 88, i16 108, i16 132, i16 160, i16 192, i16 232, i16 280, i16 336, i16 400, i16 476, i16 566, i16 568, i16 570, i16 572, i16 574, i16 576], [22 x i16] [i16 12, i16 12, i16 12, i16 12, i16 12, i16 12, i16 16, i16 20, i16 24, i16 28, i16 32, i16 40, i16 48, i16 56, i16 64, i16 76, i16 90, i16 2, i16 2, i16 2, i16 2, i16 2], [14 x i16] [i16 0, i16 24, i16 48, i16 72, i16 108, i16 156, i16 216, i16 288, i16 372, i16 480, i16 486, i16 492, i16 498, i16 576], [13 x i16] [i16 8, i16 8, i16 8, i16 12, i16 16, i16 20, i16 24, i16 28, i16 36, i16 2, i16 2, i16 2, i16 26] }], align 16
@longLimit = common dso_local local_unnamed_addr global [9 x [23 x i32]] zeroinitializer, align 16
@shortLimit = common dso_local local_unnamed_addr global [9 x [14 x i32]] zeroinitializer, align 16
@gainpow2 = internal global [378 x double] zeroinitializer, align 16
@ispow = internal unnamed_addr global [8207 x double] zeroinitializer, align 16
@aa_cs.0 = internal unnamed_addr global double 0.000000e+00, align 16
@aa_ca.0 = internal unnamed_addr global double 0.000000e+00, align 16
@aa_cs.1 = internal unnamed_addr global double 0.000000e+00, align 16
@aa_ca.1 = internal unnamed_addr global double 0.000000e+00, align 16
@aa_cs.2 = internal unnamed_addr global double 0.000000e+00, align 16
@aa_ca.2 = internal unnamed_addr global double 0.000000e+00, align 16
@aa_cs.3 = internal unnamed_addr global double 0.000000e+00, align 16
@aa_ca.3 = internal unnamed_addr global double 0.000000e+00, align 16
@aa_cs.4 = internal unnamed_addr global double 0.000000e+00, align 16
@aa_ca.4 = internal unnamed_addr global double 0.000000e+00, align 16
@aa_cs.5 = internal unnamed_addr global double 0.000000e+00, align 16
@aa_ca.5 = internal unnamed_addr global double 0.000000e+00, align 16
@aa_cs.6 = internal unnamed_addr global double 0.000000e+00, align 16
@aa_ca.6 = internal unnamed_addr global double 0.000000e+00, align 16
@aa_cs.7 = internal unnamed_addr global double 0.000000e+00, align 16
@aa_ca.7 = internal unnamed_addr global double 0.000000e+00, align 16
@win = internal global [4 x [36 x double]] zeroinitializer, align 16
@COS9.1 = internal unnamed_addr global double 0.000000e+00, align 16
@COS9.2 = internal unnamed_addr global double 0.000000e+00, align 16
@COS9.3 = internal unnamed_addr global double 0.000000e+00, align 16
@COS9.4 = internal unnamed_addr global double 0.000000e+00, align 16
@COS9.5 = internal unnamed_addr global double 0.000000e+00, align 16
@COS9.6 = internal unnamed_addr global double 0.000000e+00, align 16
@COS9.7 = internal unnamed_addr global double 0.000000e+00, align 16
@COS9.8 = internal unnamed_addr global double 0.000000e+00, align 16
@tfcos36.0 = internal unnamed_addr global double 0.000000e+00, align 16
@tfcos36.1 = internal unnamed_addr global double 0.000000e+00, align 16
@tfcos36.2 = internal unnamed_addr global double 0.000000e+00, align 16
@tfcos36.3 = internal unnamed_addr global double 0.000000e+00, align 16
@tfcos36.4 = internal unnamed_addr global double 0.000000e+00, align 16
@tfcos36.5 = internal unnamed_addr global double 0.000000e+00, align 16
@tfcos36.6 = internal unnamed_addr global double 0.000000e+00, align 16
@tfcos36.7 = internal unnamed_addr global double 0.000000e+00, align 16
@tfcos36.8 = internal unnamed_addr global double 0.000000e+00, align 16
@tfcos12.0 = internal unnamed_addr global double 0.000000e+00, align 16
@tfcos12.1 = internal unnamed_addr global double 0.000000e+00, align 16
@tfcos12.2 = internal unnamed_addr global double 0.000000e+00, align 16
@COS6_1 = internal unnamed_addr global double 0.000000e+00, align 8
@COS6_2 = internal unnamed_addr global double 0.000000e+00, align 8
@tan1_1 = internal unnamed_addr global [16 x double] zeroinitializer, align 16
@tan2_1 = internal unnamed_addr global [16 x double] zeroinitializer, align 16
@tan1_2 = internal unnamed_addr global [16 x double] zeroinitializer, align 16
@tan2_2 = internal unnamed_addr global [16 x double] zeroinitializer, align 16
@pow1_1 = internal unnamed_addr global [2 x [16 x double]] zeroinitializer, align 16
@pow2_1 = internal unnamed_addr global [2 x [16 x double]] zeroinitializer, align 16
@pow1_2 = internal unnamed_addr global [2 x [16 x double]] zeroinitializer, align 16
@pow2_2 = internal unnamed_addr global [2 x [16 x double]] zeroinitializer, align 16
@mapbuf0 = internal global [9 x [152 x i32]] zeroinitializer, align 16
@map = internal unnamed_addr global [9 x [3 x i32*]] zeroinitializer, align 16
@mapend = internal unnamed_addr global [9 x [3 x i32*]] zeroinitializer, align 16
@mapbuf1 = internal global [9 x [156 x i32]] zeroinitializer, align 16
@mapbuf2 = internal global [9 x [44 x i32]] zeroinitializer, align 16
@i_slen2 = internal unnamed_addr global [256 x i32] zeroinitializer, align 16
@n_slen2 = internal unnamed_addr global [512 x i32] zeroinitializer, align 16
@win1 = internal global [4 x [36 x double]] zeroinitializer, align 16
@.str.181 = private unnamed_addr constant [23 x i8] c"big_values too large!\0A\00", align 1
@.str.1.182 = private unnamed_addr constant [55 x i8] c"Blocktype == 0 and window-switching == 1 not allowed.\0A\00", align 1
@do_layer3.hybridIn = internal global [2 x [32 x [18 x double]]] zeroinitializer, align 16
@do_layer3.hybridOut = internal global [2 x [18 x [32 x double]]] zeroinitializer, align 16
@htc = internal unnamed_addr constant [2 x %struct.newhuff] [%struct.newhuff { i32 0, i16* getelementptr inbounds ([31 x i16], [31 x i16]* @tab_c0, i32 0, i32 0) }, %struct.newhuff { i32 0, i16* getelementptr inbounds ([31 x i16], [31 x i16]* @tab_c1, i32 0, i32 0) }], align 16
@ht.183 = internal unnamed_addr constant [32 x %struct.newhuff] [%struct.newhuff { i32 0, i16* getelementptr inbounds ([1 x i16], [1 x i16]* @tab0, i32 0, i32 0) }, %struct.newhuff { i32 0, i16* getelementptr inbounds ([7 x i16], [7 x i16]* @tab1, i32 0, i32 0) }, %struct.newhuff { i32 0, i16* getelementptr inbounds ([17 x i16], [17 x i16]* @tab2, i32 0, i32 0) }, %struct.newhuff { i32 0, i16* getelementptr inbounds ([17 x i16], [17 x i16]* @tab3, i32 0, i32 0) }, %struct.newhuff { i32 0, i16* getelementptr inbounds ([1 x i16], [1 x i16]* @tab0, i32 0, i32 0) }, %struct.newhuff { i32 0, i16* getelementptr inbounds ([31 x i16], [31 x i16]* @tab5, i32 0, i32 0) }, %struct.newhuff { i32 0, i16* getelementptr inbounds ([31 x i16], [31 x i16]* @tab6, i32 0, i32 0) }, %struct.newhuff { i32 0, i16* getelementptr inbounds ([71 x i16], [71 x i16]* @tab7, i32 0, i32 0) }, %struct.newhuff { i32 0, i16* getelementptr inbounds ([71 x i16], [71 x i16]* @tab8, i32 0, i32 0) }, %struct.newhuff { i32 0, i16* getelementptr inbounds ([71 x i16], [71 x i16]* @tab9, i32 0, i32 0) }, %struct.newhuff { i32 0, i16* getelementptr inbounds ([127 x i16], [127 x i16]* @tab10, i32 0, i32 0) }, %struct.newhuff { i32 0, i16* getelementptr inbounds ([127 x i16], [127 x i16]* @tab11, i32 0, i32 0) }, %struct.newhuff { i32 0, i16* getelementptr inbounds ([127 x i16], [127 x i16]* @tab12, i32 0, i32 0) }, %struct.newhuff { i32 0, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab13, i32 0, i32 0) }, %struct.newhuff { i32 0, i16* getelementptr inbounds ([1 x i16], [1 x i16]* @tab0, i32 0, i32 0) }, %struct.newhuff { i32 0, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab15, i32 0, i32 0) }, %struct.newhuff { i32 1, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab16, i32 0, i32 0) }, %struct.newhuff { i32 2, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab16, i32 0, i32 0) }, %struct.newhuff { i32 3, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab16, i32 0, i32 0) }, %struct.newhuff { i32 4, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab16, i32 0, i32 0) }, %struct.newhuff { i32 6, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab16, i32 0, i32 0) }, %struct.newhuff { i32 8, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab16, i32 0, i32 0) }, %struct.newhuff { i32 10, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab16, i32 0, i32 0) }, %struct.newhuff { i32 13, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab16, i32 0, i32 0) }, %struct.newhuff { i32 4, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab24, i32 0, i32 0) }, %struct.newhuff { i32 5, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab24, i32 0, i32 0) }, %struct.newhuff { i32 6, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab24, i32 0, i32 0) }, %struct.newhuff { i32 7, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab24, i32 0, i32 0) }, %struct.newhuff { i32 8, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab24, i32 0, i32 0) }, %struct.newhuff { i32 9, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab24, i32 0, i32 0) }, %struct.newhuff { i32 11, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab24, i32 0, i32 0) }, %struct.newhuff { i32 13, i16* getelementptr inbounds ([511 x i16], [511 x i16]* @tab24, i32 0, i32 0) }], align 16
@pretab2 = internal unnamed_addr constant [22 x i32] zeroinitializer, align 16
@pretab1 = internal unnamed_addr constant [22 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 3, i32 2, i32 0], align 16
@.str.2.184 = private unnamed_addr constant [41 x i8] c"mpg123: Can't rewind stream by %d bits!\0A\00", align 1
@tab0 = internal global [1 x i16] zeroinitializer, align 2
@tab1 = internal global [7 x i16] [i16 -5, i16 -3, i16 -1, i16 17, i16 1, i16 16, i16 0], align 2
@tab2 = internal global [17 x i16] [i16 -15, i16 -11, i16 -9, i16 -5, i16 -3, i16 -1, i16 34, i16 2, i16 18, i16 -1, i16 33, i16 32, i16 17, i16 -1, i16 1, i16 16, i16 0], align 16
@tab3 = internal global [17 x i16] [i16 -13, i16 -11, i16 -9, i16 -5, i16 -3, i16 -1, i16 34, i16 2, i16 18, i16 -1, i16 33, i16 32, i16 16, i16 17, i16 -1, i16 1, i16 0], align 16
@tab5 = internal global [31 x i16] [i16 -29, i16 -25, i16 -23, i16 -15, i16 -7, i16 -5, i16 -3, i16 -1, i16 51, i16 35, i16 50, i16 49, i16 -3, i16 -1, i16 19, i16 3, i16 -1, i16 48, i16 34, i16 -3, i16 -1, i16 18, i16 33, i16 -1, i16 2, i16 32, i16 17, i16 -1, i16 1, i16 16, i16 0], align 16
@tab6 = internal global [31 x i16] [i16 -25, i16 -19, i16 -13, i16 -9, i16 -5, i16 -3, i16 -1, i16 51, i16 3, i16 35, i16 -1, i16 50, i16 48, i16 -1, i16 19, i16 49, i16 -3, i16 -1, i16 34, i16 2, i16 18, i16 -3, i16 -1, i16 33, i16 32, i16 1, i16 -1, i16 17, i16 -1, i16 16, i16 0], align 16
@tab7 = internal global [71 x i16] [i16 -69, i16 -65, i16 -57, i16 -39, i16 -29, i16 -17, i16 -11, i16 -7, i16 -3, i16 -1, i16 85, i16 69, i16 -1, i16 84, i16 83, i16 -1, i16 53, i16 68, i16 -3, i16 -1, i16 37, i16 82, i16 21, i16 -5, i16 -1, i16 81, i16 -1, i16 5, i16 52, i16 -1, i16 80, i16 -1, i16 67, i16 51, i16 -5, i16 -3, i16 -1, i16 36, i16 66, i16 20, i16 -1, i16 65, i16 64, i16 -11, i16 -7, i16 -3, i16 -1, i16 4, i16 35, i16 -1, i16 50, i16 3, i16 -1, i16 19, i16 49, i16 -3, i16 -1, i16 48, i16 34, i16 18, i16 -5, i16 -1, i16 33, i16 -1, i16 2, i16 32, i16 17, i16 -1, i16 1, i16 16, i16 0], align 16
@tab8 = internal global [71 x i16] [i16 -65, i16 -63, i16 -59, i16 -45, i16 -31, i16 -19, i16 -13, i16 -7, i16 -5, i16 -3, i16 -1, i16 85, i16 84, i16 69, i16 83, i16 -3, i16 -1, i16 53, i16 68, i16 37, i16 -3, i16 -1, i16 82, i16 5, i16 21, i16 -5, i16 -1, i16 81, i16 -1, i16 52, i16 67, i16 -3, i16 -1, i16 80, i16 51, i16 36, i16 -5, i16 -3, i16 -1, i16 66, i16 20, i16 65, i16 -3, i16 -1, i16 4, i16 64, i16 -1, i16 35, i16 50, i16 -9, i16 -7, i16 -3, i16 -1, i16 19, i16 49, i16 -1, i16 3, i16 48, i16 34, i16 -1, i16 2, i16 32, i16 -1, i16 18, i16 33, i16 17, i16 -3, i16 -1, i16 1, i16 16, i16 0], align 16
@tab9 = internal global [71 x i16] [i16 -63, i16 -53, i16 -41, i16 -29, i16 -19, i16 -11, i16 -5, i16 -3, i16 -1, i16 85, i16 69, i16 53, i16 -1, i16 83, i16 -1, i16 84, i16 5, i16 -3, i16 -1, i16 68, i16 37, i16 -1, i16 82, i16 21, i16 -3, i16 -1, i16 81, i16 52, i16 -1, i16 67, i16 -1, i16 80, i16 4, i16 -7, i16 -3, i16 -1, i16 36, i16 66, i16 -1, i16 51, i16 64, i16 -1, i16 20, i16 65, i16 -5, i16 -3, i16 -1, i16 35, i16 50, i16 19, i16 -1, i16 49, i16 -1, i16 3, i16 48, i16 -5, i16 -3, i16 -1, i16 34, i16 2, i16 18, i16 -1, i16 33, i16 32, i16 -3, i16 -1, i16 17, i16 1, i16 -1, i16 16, i16 0], align 16
@tab10 = internal global [127 x i16] [i16 -125, i16 -121, i16 -111, i16 -83, i16 -55, i16 -35, i16 -21, i16 -13, i16 -7, i16 -3, i16 -1, i16 119, i16 103, i16 -1, i16 118, i16 87, i16 -3, i16 -1, i16 117, i16 102, i16 71, i16 -3, i16 -1, i16 116, i16 86, i16 -1, i16 101, i16 55, i16 -9, i16 -3, i16 -1, i16 115, i16 70, i16 -3, i16 -1, i16 85, i16 84, i16 99, i16 -1, i16 39, i16 114, i16 -11, i16 -5, i16 -3, i16 -1, i16 100, i16 7, i16 112, i16 -1, i16 98, i16 -1, i16 69, i16 53, i16 -5, i16 -1, i16 6, i16 -1, i16 83, i16 68, i16 23, i16 -17, i16 -5, i16 -1, i16 113, i16 -1, i16 54, i16 38, i16 -5, i16 -3, i16 -1, i16 37, i16 82, i16 21, i16 -1, i16 81, i16 -1, i16 52, i16 67, i16 -3, i16 -1, i16 22, i16 97, i16 -1, i16 96, i16 -1, i16 5, i16 80, i16 -19, i16 -11, i16 -7, i16 -3, i16 -1, i16 36, i16 66, i16 -1, i16 51, i16 4, i16 -1, i16 20, i16 65, i16 -3, i16 -1, i16 64, i16 35, i16 -1, i16 50, i16 3, i16 -3, i16 -1, i16 19, i16 49, i16 -1, i16 48, i16 34, i16 -7, i16 -3, i16 -1, i16 18, i16 33, i16 -1, i16 2, i16 32, i16 17, i16 -1, i16 1, i16 16, i16 0], align 16
@tab11 = internal global [127 x i16] [i16 -121, i16 -113, i16 -89, i16 -59, i16 -43, i16 -27, i16 -17, i16 -7, i16 -3, i16 -1, i16 119, i16 103, i16 -1, i16 118, i16 117, i16 -3, i16 -1, i16 102, i16 71, i16 -1, i16 116, i16 -1, i16 87, i16 85, i16 -5, i16 -3, i16 -1, i16 86, i16 101, i16 55, i16 -1, i16 115, i16 70, i16 -9, i16 -7, i16 -3, i16 -1, i16 69, i16 84, i16 -1, i16 53, i16 83, i16 39, i16 -1, i16 114, i16 -1, i16 100, i16 7, i16 -5, i16 -1, i16 113, i16 -1, i16 23, i16 112, i16 -3, i16 -1, i16 54, i16 99, i16 -1, i16 96, i16 -1, i16 68, i16 37, i16 -13, i16 -7, i16 -5, i16 -3, i16 -1, i16 82, i16 5, i16 21, i16 98, i16 -3, i16 -1, i16 38, i16 6, i16 22, i16 -5, i16 -1, i16 97, i16 -1, i16 81, i16 52, i16 -5, i16 -1, i16 80, i16 -1, i16 67, i16 51, i16 -1, i16 36, i16 66, i16 -15, i16 -11, i16 -7, i16 -3, i16 -1, i16 20, i16 65, i16 -1, i16 4, i16 64, i16 -1, i16 35, i16 50, i16 -1, i16 19, i16 49, i16 -5, i16 -3, i16 -1, i16 3, i16 48, i16 34, i16 33, i16 -5, i16 -1, i16 18, i16 -1, i16 2, i16 32, i16 17, i16 -3, i16 -1, i16 1, i16 16, i16 0], align 16
@tab12 = internal global [127 x i16] [i16 -115, i16 -99, i16 -73, i16 -45, i16 -27, i16 -17, i16 -9, i16 -5, i16 -3, i16 -1, i16 119, i16 103, i16 118, i16 -1, i16 87, i16 117, i16 -3, i16 -1, i16 102, i16 71, i16 -1, i16 116, i16 101, i16 -3, i16 -1, i16 86, i16 55, i16 -3, i16 -1, i16 115, i16 85, i16 39, i16 -7, i16 -3, i16 -1, i16 114, i16 70, i16 -1, i16 100, i16 23, i16 -5, i16 -1, i16 113, i16 -1, i16 7, i16 112, i16 -1, i16 54, i16 99, i16 -13, i16 -9, i16 -3, i16 -1, i16 69, i16 84, i16 -1, i16 68, i16 -1, i16 6, i16 5, i16 -1, i16 38, i16 98, i16 -5, i16 -1, i16 97, i16 -1, i16 22, i16 96, i16 -3, i16 -1, i16 53, i16 83, i16 -1, i16 37, i16 82, i16 -17, i16 -7, i16 -3, i16 -1, i16 21, i16 81, i16 -1, i16 52, i16 67, i16 -5, i16 -3, i16 -1, i16 80, i16 4, i16 36, i16 -1, i16 66, i16 20, i16 -3, i16 -1, i16 51, i16 65, i16 -1, i16 35, i16 50, i16 -11, i16 -7, i16 -5, i16 -3, i16 -1, i16 64, i16 3, i16 48, i16 19, i16 -1, i16 49, i16 34, i16 -1, i16 18, i16 33, i16 -7, i16 -5, i16 -3, i16 -1, i16 2, i16 32, i16 0, i16 17, i16 -1, i16 1, i16 16], align 16
@tab13 = internal global [511 x i16] [i16 -509, i16 -503, i16 -475, i16 -405, i16 -333, i16 -265, i16 -205, i16 -153, i16 -115, i16 -83, i16 -53, i16 -35, i16 -21, i16 -13, i16 -9, i16 -7, i16 -5, i16 -3, i16 -1, i16 254, i16 252, i16 253, i16 237, i16 255, i16 -1, i16 239, i16 223, i16 -3, i16 -1, i16 238, i16 207, i16 -1, i16 222, i16 191, i16 -9, i16 -3, i16 -1, i16 251, i16 206, i16 -1, i16 220, i16 -1, i16 175, i16 233, i16 -1, i16 236, i16 221, i16 -9, i16 -5, i16 -3, i16 -1, i16 250, i16 205, i16 190, i16 -1, i16 235, i16 159, i16 -3, i16 -1, i16 249, i16 234, i16 -1, i16 189, i16 219, i16 -17, i16 -9, i16 -3, i16 -1, i16 143, i16 248, i16 -1, i16 204, i16 -1, i16 174, i16 158, i16 -5, i16 -1, i16 142, i16 -1, i16 127, i16 126, i16 247, i16 -5, i16 -1, i16 218, i16 -1, i16 173, i16 188, i16 -3, i16 -1, i16 203, i16 246, i16 111, i16 -15, i16 -7, i16 -3, i16 -1, i16 232, i16 95, i16 -1, i16 157, i16 217, i16 -3, i16 -1, i16 245, i16 231, i16 -1, i16 172, i16 187, i16 -9, i16 -3, i16 -1, i16 79, i16 244, i16 -3, i16 -1, i16 202, i16 230, i16 243, i16 -1, i16 63, i16 -1, i16 141, i16 216, i16 -21, i16 -9, i16 -3, i16 -1, i16 47, i16 242, i16 -3, i16 -1, i16 110, i16 156, i16 15, i16 -5, i16 -3, i16 -1, i16 201, i16 94, i16 171, i16 -3, i16 -1, i16 125, i16 215, i16 78, i16 -11, i16 -5, i16 -3, i16 -1, i16 200, i16 214, i16 62, i16 -1, i16 185, i16 -1, i16 155, i16 170, i16 -1, i16 31, i16 241, i16 -23, i16 -13, i16 -5, i16 -1, i16 240, i16 -1, i16 186, i16 229, i16 -3, i16 -1, i16 228, i16 140, i16 -1, i16 109, i16 227, i16 -5, i16 -1, i16 226, i16 -1, i16 46, i16 14, i16 -1, i16 30, i16 225, i16 -15, i16 -7, i16 -3, i16 -1, i16 224, i16 93, i16 -1, i16 213, i16 124, i16 -3, i16 -1, i16 199, i16 77, i16 -1, i16 139, i16 184, i16 -7, i16 -3, i16 -1, i16 212, i16 154, i16 -1, i16 169, i16 108, i16 -1, i16 198, i16 61, i16 -37, i16 -21, i16 -9, i16 -5, i16 -3, i16 -1, i16 211, i16 123, i16 45, i16 -1, i16 210, i16 29, i16 -5, i16 -1, i16 183, i16 -1, i16 92, i16 197, i16 -3, i16 -1, i16 153, i16 122, i16 195, i16 -7, i16 -5, i16 -3, i16 -1, i16 167, i16 151, i16 75, i16 209, i16 -3, i16 -1, i16 13, i16 208, i16 -1, i16 138, i16 168, i16 -11, i16 -7, i16 -3, i16 -1, i16 76, i16 196, i16 -1, i16 107, i16 182, i16 -1, i16 60, i16 44, i16 -3, i16 -1, i16 194, i16 91, i16 -3, i16 -1, i16 181, i16 137, i16 28, i16 -43, i16 -23, i16 -11, i16 -5, i16 -1, i16 193, i16 -1, i16 152, i16 12, i16 -1, i16 192, i16 -1, i16 180, i16 106, i16 -5, i16 -3, i16 -1, i16 166, i16 121, i16 59, i16 -1, i16 179, i16 -1, i16 136, i16 90, i16 -11, i16 -5, i16 -1, i16 43, i16 -1, i16 165, i16 105, i16 -1, i16 164, i16 -1, i16 120, i16 135, i16 -5, i16 -1, i16 148, i16 -1, i16 119, i16 118, i16 178, i16 -11, i16 -3, i16 -1, i16 27, i16 177, i16 -3, i16 -1, i16 11, i16 176, i16 -1, i16 150, i16 74, i16 -7, i16 -3, i16 -1, i16 58, i16 163, i16 -1, i16 89, i16 149, i16 -1, i16 42, i16 162, i16 -47, i16 -23, i16 -9, i16 -3, i16 -1, i16 26, i16 161, i16 -3, i16 -1, i16 10, i16 104, i16 160, i16 -5, i16 -3, i16 -1, i16 134, i16 73, i16 147, i16 -3, i16 -1, i16 57, i16 88, i16 -1, i16 133, i16 103, i16 -9, i16 -3, i16 -1, i16 41, i16 146, i16 -3, i16 -1, i16 87, i16 117, i16 56, i16 -5, i16 -1, i16 131, i16 -1, i16 102, i16 71, i16 -3, i16 -1, i16 116, i16 86, i16 -1, i16 101, i16 115, i16 -11, i16 -3, i16 -1, i16 25, i16 145, i16 -3, i16 -1, i16 9, i16 144, i16 -1, i16 72, i16 132, i16 -7, i16 -5, i16 -1, i16 114, i16 -1, i16 70, i16 100, i16 40, i16 -1, i16 130, i16 24, i16 -41, i16 -27, i16 -11, i16 -5, i16 -3, i16 -1, i16 55, i16 39, i16 23, i16 -1, i16 113, i16 -1, i16 85, i16 7, i16 -7, i16 -3, i16 -1, i16 112, i16 54, i16 -1, i16 99, i16 69, i16 -3, i16 -1, i16 84, i16 38, i16 -1, i16 98, i16 53, i16 -5, i16 -1, i16 129, i16 -1, i16 8, i16 128, i16 -3, i16 -1, i16 22, i16 97, i16 -1, i16 6, i16 96, i16 -13, i16 -9, i16 -5, i16 -3, i16 -1, i16 83, i16 68, i16 37, i16 -1, i16 82, i16 5, i16 -1, i16 21, i16 81, i16 -7, i16 -3, i16 -1, i16 52, i16 67, i16 -1, i16 80, i16 36, i16 -3, i16 -1, i16 66, i16 51, i16 20, i16 -19, i16 -11, i16 -5, i16 -1, i16 65, i16 -1, i16 4, i16 64, i16 -3, i16 -1, i16 35, i16 50, i16 19, i16 -3, i16 -1, i16 49, i16 3, i16 -1, i16 48, i16 34, i16 -3, i16 -1, i16 18, i16 33, i16 -1, i16 2, i16 32, i16 -3, i16 -1, i16 17, i16 1, i16 16, i16 0], align 16
@tab15 = internal global [511 x i16] [i16 -495, i16 -445, i16 -355, i16 -263, i16 -183, i16 -115, i16 -77, i16 -43, i16 -27, i16 -13, i16 -7, i16 -3, i16 -1, i16 255, i16 239, i16 -1, i16 254, i16 223, i16 -1, i16 238, i16 -1, i16 253, i16 207, i16 -7, i16 -3, i16 -1, i16 252, i16 222, i16 -1, i16 237, i16 191, i16 -1, i16 251, i16 -1, i16 206, i16 236, i16 -7, i16 -3, i16 -1, i16 221, i16 175, i16 -1, i16 250, i16 190, i16 -3, i16 -1, i16 235, i16 205, i16 -1, i16 220, i16 159, i16 -15, i16 -7, i16 -3, i16 -1, i16 249, i16 234, i16 -1, i16 189, i16 219, i16 -3, i16 -1, i16 143, i16 248, i16 -1, i16 204, i16 158, i16 -7, i16 -3, i16 -1, i16 233, i16 127, i16 -1, i16 247, i16 173, i16 -3, i16 -1, i16 218, i16 188, i16 -1, i16 111, i16 -1, i16 174, i16 15, i16 -19, i16 -11, i16 -3, i16 -1, i16 203, i16 246, i16 -3, i16 -1, i16 142, i16 232, i16 -1, i16 95, i16 157, i16 -3, i16 -1, i16 245, i16 126, i16 -1, i16 231, i16 172, i16 -9, i16 -3, i16 -1, i16 202, i16 187, i16 -3, i16 -1, i16 217, i16 141, i16 79, i16 -3, i16 -1, i16 244, i16 63, i16 -1, i16 243, i16 216, i16 -33, i16 -17, i16 -9, i16 -3, i16 -1, i16 230, i16 47, i16 -1, i16 242, i16 -1, i16 110, i16 240, i16 -3, i16 -1, i16 31, i16 241, i16 -1, i16 156, i16 201, i16 -7, i16 -3, i16 -1, i16 94, i16 171, i16 -1, i16 186, i16 229, i16 -3, i16 -1, i16 125, i16 215, i16 -1, i16 78, i16 228, i16 -15, i16 -7, i16 -3, i16 -1, i16 140, i16 200, i16 -1, i16 62, i16 109, i16 -3, i16 -1, i16 214, i16 227, i16 -1, i16 155, i16 185, i16 -7, i16 -3, i16 -1, i16 46, i16 170, i16 -1, i16 226, i16 30, i16 -5, i16 -1, i16 225, i16 -1, i16 14, i16 224, i16 -1, i16 93, i16 213, i16 -45, i16 -25, i16 -13, i16 -7, i16 -3, i16 -1, i16 124, i16 199, i16 -1, i16 77, i16 139, i16 -1, i16 212, i16 -1, i16 184, i16 154, i16 -7, i16 -3, i16 -1, i16 169, i16 108, i16 -1, i16 198, i16 61, i16 -1, i16 211, i16 210, i16 -9, i16 -5, i16 -3, i16 -1, i16 45, i16 13, i16 29, i16 -1, i16 123, i16 183, i16 -5, i16 -1, i16 209, i16 -1, i16 92, i16 208, i16 -1, i16 197, i16 138, i16 -17, i16 -7, i16 -3, i16 -1, i16 168, i16 76, i16 -1, i16 196, i16 107, i16 -5, i16 -1, i16 182, i16 -1, i16 153, i16 12, i16 -1, i16 60, i16 195, i16 -9, i16 -3, i16 -1, i16 122, i16 167, i16 -1, i16 166, i16 -1, i16 192, i16 11, i16 -1, i16 194, i16 -1, i16 44, i16 91, i16 -55, i16 -29, i16 -15, i16 -7, i16 -3, i16 -1, i16 181, i16 28, i16 -1, i16 137, i16 152, i16 -3, i16 -1, i16 193, i16 75, i16 -1, i16 180, i16 106, i16 -5, i16 -3, i16 -1, i16 59, i16 121, i16 179, i16 -3, i16 -1, i16 151, i16 136, i16 -1, i16 43, i16 90, i16 -11, i16 -5, i16 -1, i16 178, i16 -1, i16 165, i16 27, i16 -1, i16 177, i16 -1, i16 176, i16 105, i16 -7, i16 -3, i16 -1, i16 150, i16 74, i16 -1, i16 164, i16 120, i16 -3, i16 -1, i16 135, i16 58, i16 163, i16 -17, i16 -7, i16 -3, i16 -1, i16 89, i16 149, i16 -1, i16 42, i16 162, i16 -3, i16 -1, i16 26, i16 161, i16 -3, i16 -1, i16 10, i16 160, i16 104, i16 -7, i16 -3, i16 -1, i16 134, i16 73, i16 -1, i16 148, i16 57, i16 -5, i16 -1, i16 147, i16 -1, i16 119, i16 9, i16 -1, i16 88, i16 133, i16 -53, i16 -29, i16 -13, i16 -7, i16 -3, i16 -1, i16 41, i16 103, i16 -1, i16 118, i16 146, i16 -1, i16 145, i16 -1, i16 25, i16 144, i16 -7, i16 -3, i16 -1, i16 72, i16 132, i16 -1, i16 87, i16 117, i16 -3, i16 -1, i16 56, i16 131, i16 -1, i16 102, i16 71, i16 -7, i16 -3, i16 -1, i16 40, i16 130, i16 -1, i16 24, i16 129, i16 -7, i16 -3, i16 -1, i16 116, i16 8, i16 -1, i16 128, i16 86, i16 -3, i16 -1, i16 101, i16 55, i16 -1, i16 115, i16 70, i16 -17, i16 -7, i16 -3, i16 -1, i16 39, i16 114, i16 -1, i16 100, i16 23, i16 -3, i16 -1, i16 85, i16 113, i16 -3, i16 -1, i16 7, i16 112, i16 54, i16 -7, i16 -3, i16 -1, i16 99, i16 69, i16 -1, i16 84, i16 38, i16 -3, i16 -1, i16 98, i16 22, i16 -3, i16 -1, i16 6, i16 96, i16 53, i16 -33, i16 -19, i16 -9, i16 -5, i16 -1, i16 97, i16 -1, i16 83, i16 68, i16 -1, i16 37, i16 82, i16 -3, i16 -1, i16 21, i16 81, i16 -3, i16 -1, i16 5, i16 80, i16 52, i16 -7, i16 -3, i16 -1, i16 67, i16 36, i16 -1, i16 66, i16 51, i16 -1, i16 65, i16 -1, i16 20, i16 4, i16 -9, i16 -3, i16 -1, i16 35, i16 50, i16 -3, i16 -1, i16 64, i16 3, i16 19, i16 -3, i16 -1, i16 49, i16 48, i16 34, i16 -9, i16 -7, i16 -3, i16 -1, i16 18, i16 33, i16 -1, i16 2, i16 32, i16 17, i16 -3, i16 -1, i16 1, i16 16, i16 0], align 16
@tab16 = internal global [511 x i16] [i16 -509, i16 -503, i16 -461, i16 -323, i16 -103, i16 -37, i16 -27, i16 -15, i16 -7, i16 -3, i16 -1, i16 239, i16 254, i16 -1, i16 223, i16 253, i16 -3, i16 -1, i16 207, i16 252, i16 -1, i16 191, i16 251, i16 -5, i16 -1, i16 175, i16 -1, i16 250, i16 159, i16 -3, i16 -1, i16 249, i16 248, i16 143, i16 -7, i16 -3, i16 -1, i16 127, i16 247, i16 -1, i16 111, i16 246, i16 255, i16 -9, i16 -5, i16 -3, i16 -1, i16 95, i16 245, i16 79, i16 -1, i16 244, i16 243, i16 -53, i16 -1, i16 240, i16 -1, i16 63, i16 -29, i16 -19, i16 -13, i16 -7, i16 -5, i16 -1, i16 206, i16 -1, i16 236, i16 221, i16 222, i16 -1, i16 233, i16 -1, i16 234, i16 217, i16 -1, i16 238, i16 -1, i16 237, i16 235, i16 -3, i16 -1, i16 190, i16 205, i16 -3, i16 -1, i16 220, i16 219, i16 174, i16 -11, i16 -5, i16 -1, i16 204, i16 -1, i16 173, i16 218, i16 -3, i16 -1, i16 126, i16 172, i16 202, i16 -5, i16 -3, i16 -1, i16 201, i16 125, i16 94, i16 189, i16 242, i16 -93, i16 -5, i16 -3, i16 -1, i16 47, i16 15, i16 31, i16 -1, i16 241, i16 -49, i16 -25, i16 -13, i16 -5, i16 -1, i16 158, i16 -1, i16 188, i16 203, i16 -3, i16 -1, i16 142, i16 232, i16 -1, i16 157, i16 231, i16 -7, i16 -3, i16 -1, i16 187, i16 141, i16 -1, i16 216, i16 110, i16 -1, i16 230, i16 156, i16 -13, i16 -7, i16 -3, i16 -1, i16 171, i16 186, i16 -1, i16 229, i16 215, i16 -1, i16 78, i16 -1, i16 228, i16 140, i16 -3, i16 -1, i16 200, i16 62, i16 -1, i16 109, i16 -1, i16 214, i16 155, i16 -19, i16 -11, i16 -5, i16 -3, i16 -1, i16 185, i16 170, i16 225, i16 -1, i16 212, i16 -1, i16 184, i16 169, i16 -5, i16 -1, i16 123, i16 -1, i16 183, i16 208, i16 227, i16 -7, i16 -3, i16 -1, i16 14, i16 224, i16 -1, i16 93, i16 213, i16 -3, i16 -1, i16 124, i16 199, i16 -1, i16 77, i16 139, i16 -75, i16 -45, i16 -27, i16 -13, i16 -7, i16 -3, i16 -1, i16 154, i16 108, i16 -1, i16 198, i16 61, i16 -3, i16 -1, i16 92, i16 197, i16 13, i16 -7, i16 -3, i16 -1, i16 138, i16 168, i16 -1, i16 153, i16 76, i16 -3, i16 -1, i16 182, i16 122, i16 60, i16 -11, i16 -5, i16 -3, i16 -1, i16 91, i16 137, i16 28, i16 -1, i16 192, i16 -1, i16 152, i16 121, i16 -1, i16 226, i16 -1, i16 46, i16 30, i16 -15, i16 -7, i16 -3, i16 -1, i16 211, i16 45, i16 -1, i16 210, i16 209, i16 -5, i16 -1, i16 59, i16 -1, i16 151, i16 136, i16 29, i16 -7, i16 -3, i16 -1, i16 196, i16 107, i16 -1, i16 195, i16 167, i16 -1, i16 44, i16 -1, i16 194, i16 181, i16 -23, i16 -13, i16 -7, i16 -3, i16 -1, i16 193, i16 12, i16 -1, i16 75, i16 180, i16 -3, i16 -1, i16 106, i16 166, i16 179, i16 -5, i16 -3, i16 -1, i16 90, i16 165, i16 43, i16 -1, i16 178, i16 27, i16 -13, i16 -5, i16 -1, i16 177, i16 -1, i16 11, i16 176, i16 -3, i16 -1, i16 105, i16 150, i16 -1, i16 74, i16 164, i16 -5, i16 -3, i16 -1, i16 120, i16 135, i16 163, i16 -3, i16 -1, i16 58, i16 89, i16 42, i16 -97, i16 -57, i16 -33, i16 -19, i16 -11, i16 -5, i16 -3, i16 -1, i16 149, i16 104, i16 161, i16 -3, i16 -1, i16 134, i16 119, i16 148, i16 -5, i16 -3, i16 -1, i16 73, i16 87, i16 103, i16 162, i16 -5, i16 -1, i16 26, i16 -1, i16 10, i16 160, i16 -3, i16 -1, i16 57, i16 147, i16 -1, i16 88, i16 133, i16 -9, i16 -3, i16 -1, i16 41, i16 146, i16 -3, i16 -1, i16 118, i16 9, i16 25, i16 -5, i16 -1, i16 145, i16 -1, i16 144, i16 72, i16 -3, i16 -1, i16 132, i16 117, i16 -1, i16 56, i16 131, i16 -21, i16 -11, i16 -5, i16 -3, i16 -1, i16 102, i16 40, i16 130, i16 -3, i16 -1, i16 71, i16 116, i16 24, i16 -3, i16 -1, i16 129, i16 128, i16 -3, i16 -1, i16 8, i16 86, i16 55, i16 -9, i16 -5, i16 -1, i16 115, i16 -1, i16 101, i16 70, i16 -1, i16 39, i16 114, i16 -5, i16 -3, i16 -1, i16 100, i16 85, i16 7, i16 23, i16 -23, i16 -13, i16 -5, i16 -1, i16 113, i16 -1, i16 112, i16 54, i16 -3, i16 -1, i16 99, i16 69, i16 -1, i16 84, i16 38, i16 -3, i16 -1, i16 98, i16 22, i16 -1, i16 97, i16 -1, i16 6, i16 96, i16 -9, i16 -5, i16 -1, i16 83, i16 -1, i16 53, i16 68, i16 -1, i16 37, i16 82, i16 -1, i16 81, i16 -1, i16 21, i16 5, i16 -33, i16 -23, i16 -13, i16 -7, i16 -3, i16 -1, i16 52, i16 67, i16 -1, i16 80, i16 36, i16 -3, i16 -1, i16 66, i16 51, i16 20, i16 -5, i16 -1, i16 65, i16 -1, i16 4, i16 64, i16 -1, i16 35, i16 50, i16 -3, i16 -1, i16 19, i16 49, i16 -3, i16 -1, i16 3, i16 48, i16 34, i16 -3, i16 -1, i16 18, i16 33, i16 -1, i16 2, i16 32, i16 -3, i16 -1, i16 17, i16 1, i16 16, i16 0], align 16
@tab24 = internal global [511 x i16] [i16 -451, i16 -117, i16 -43, i16 -25, i16 -15, i16 -7, i16 -3, i16 -1, i16 239, i16 254, i16 -1, i16 223, i16 253, i16 -3, i16 -1, i16 207, i16 252, i16 -1, i16 191, i16 251, i16 -5, i16 -1, i16 250, i16 -1, i16 175, i16 159, i16 -1, i16 249, i16 248, i16 -9, i16 -5, i16 -3, i16 -1, i16 143, i16 127, i16 247, i16 -1, i16 111, i16 246, i16 -3, i16 -1, i16 95, i16 245, i16 -1, i16 79, i16 244, i16 -71, i16 -7, i16 -3, i16 -1, i16 63, i16 243, i16 -1, i16 47, i16 242, i16 -5, i16 -1, i16 241, i16 -1, i16 31, i16 240, i16 -25, i16 -9, i16 -1, i16 15, i16 -3, i16 -1, i16 238, i16 222, i16 -1, i16 237, i16 206, i16 -7, i16 -3, i16 -1, i16 236, i16 221, i16 -1, i16 190, i16 235, i16 -3, i16 -1, i16 205, i16 220, i16 -1, i16 174, i16 234, i16 -15, i16 -7, i16 -3, i16 -1, i16 189, i16 219, i16 -1, i16 204, i16 158, i16 -3, i16 -1, i16 233, i16 173, i16 -1, i16 218, i16 188, i16 -7, i16 -3, i16 -1, i16 203, i16 142, i16 -1, i16 232, i16 157, i16 -3, i16 -1, i16 217, i16 126, i16 -1, i16 231, i16 172, i16 255, i16 -235, i16 -143, i16 -77, i16 -45, i16 -25, i16 -15, i16 -7, i16 -3, i16 -1, i16 202, i16 187, i16 -1, i16 141, i16 216, i16 -5, i16 -3, i16 -1, i16 14, i16 224, i16 13, i16 230, i16 -5, i16 -3, i16 -1, i16 110, i16 156, i16 201, i16 -1, i16 94, i16 186, i16 -9, i16 -5, i16 -1, i16 229, i16 -1, i16 171, i16 125, i16 -1, i16 215, i16 228, i16 -3, i16 -1, i16 140, i16 200, i16 -3, i16 -1, i16 78, i16 46, i16 62, i16 -15, i16 -7, i16 -3, i16 -1, i16 109, i16 214, i16 -1, i16 227, i16 155, i16 -3, i16 -1, i16 185, i16 170, i16 -1, i16 226, i16 30, i16 -7, i16 -3, i16 -1, i16 225, i16 93, i16 -1, i16 213, i16 124, i16 -3, i16 -1, i16 199, i16 77, i16 -1, i16 139, i16 184, i16 -31, i16 -15, i16 -7, i16 -3, i16 -1, i16 212, i16 154, i16 -1, i16 169, i16 108, i16 -3, i16 -1, i16 198, i16 61, i16 -1, i16 211, i16 45, i16 -7, i16 -3, i16 -1, i16 210, i16 29, i16 -1, i16 123, i16 183, i16 -3, i16 -1, i16 209, i16 92, i16 -1, i16 197, i16 138, i16 -17, i16 -7, i16 -3, i16 -1, i16 168, i16 153, i16 -1, i16 76, i16 196, i16 -3, i16 -1, i16 107, i16 182, i16 -3, i16 -1, i16 208, i16 12, i16 60, i16 -7, i16 -3, i16 -1, i16 195, i16 122, i16 -1, i16 167, i16 44, i16 -3, i16 -1, i16 194, i16 91, i16 -1, i16 181, i16 28, i16 -57, i16 -35, i16 -19, i16 -7, i16 -3, i16 -1, i16 137, i16 152, i16 -1, i16 193, i16 75, i16 -5, i16 -3, i16 -1, i16 192, i16 11, i16 59, i16 -3, i16 -1, i16 176, i16 10, i16 26, i16 -5, i16 -1, i16 180, i16 -1, i16 106, i16 166, i16 -3, i16 -1, i16 121, i16 151, i16 -3, i16 -1, i16 160, i16 9, i16 144, i16 -9, i16 -3, i16 -1, i16 179, i16 136, i16 -3, i16 -1, i16 43, i16 90, i16 178, i16 -7, i16 -3, i16 -1, i16 165, i16 27, i16 -1, i16 177, i16 105, i16 -1, i16 150, i16 164, i16 -17, i16 -9, i16 -5, i16 -3, i16 -1, i16 74, i16 120, i16 135, i16 -1, i16 58, i16 163, i16 -3, i16 -1, i16 89, i16 149, i16 -1, i16 42, i16 162, i16 -7, i16 -3, i16 -1, i16 161, i16 104, i16 -1, i16 134, i16 119, i16 -3, i16 -1, i16 73, i16 148, i16 -1, i16 57, i16 147, i16 -63, i16 -31, i16 -15, i16 -7, i16 -3, i16 -1, i16 88, i16 133, i16 -1, i16 41, i16 103, i16 -3, i16 -1, i16 118, i16 146, i16 -1, i16 25, i16 145, i16 -7, i16 -3, i16 -1, i16 72, i16 132, i16 -1, i16 87, i16 117, i16 -3, i16 -1, i16 56, i16 131, i16 -1, i16 102, i16 40, i16 -17, i16 -7, i16 -3, i16 -1, i16 130, i16 24, i16 -1, i16 71, i16 116, i16 -5, i16 -1, i16 129, i16 -1, i16 8, i16 128, i16 -1, i16 86, i16 101, i16 -7, i16 -5, i16 -1, i16 23, i16 -1, i16 7, i16 112, i16 115, i16 -3, i16 -1, i16 55, i16 39, i16 114, i16 -15, i16 -7, i16 -3, i16 -1, i16 70, i16 100, i16 -1, i16 85, i16 113, i16 -3, i16 -1, i16 54, i16 99, i16 -1, i16 69, i16 84, i16 -7, i16 -3, i16 -1, i16 38, i16 98, i16 -1, i16 22, i16 97, i16 -5, i16 -3, i16 -1, i16 6, i16 96, i16 53, i16 -1, i16 83, i16 68, i16 -51, i16 -37, i16 -23, i16 -15, i16 -9, i16 -3, i16 -1, i16 37, i16 82, i16 -1, i16 21, i16 -1, i16 5, i16 80, i16 -1, i16 81, i16 -1, i16 52, i16 67, i16 -3, i16 -1, i16 36, i16 66, i16 -1, i16 51, i16 20, i16 -9, i16 -5, i16 -1, i16 65, i16 -1, i16 4, i16 64, i16 -1, i16 35, i16 50, i16 -1, i16 19, i16 49, i16 -7, i16 -5, i16 -3, i16 -1, i16 3, i16 48, i16 34, i16 18, i16 -1, i16 33, i16 -1, i16 2, i16 32, i16 -3, i16 -1, i16 17, i16 1, i16 -1, i16 16, i16 0], align 16
@tab_c0 = internal global [31 x i16] [i16 -29, i16 -21, i16 -13, i16 -7, i16 -3, i16 -1, i16 11, i16 15, i16 -1, i16 13, i16 14, i16 -3, i16 -1, i16 7, i16 5, i16 9, i16 -3, i16 -1, i16 6, i16 3, i16 -1, i16 10, i16 12, i16 -3, i16 -1, i16 2, i16 1, i16 -1, i16 4, i16 8, i16 0], align 16
@tab_c1 = internal global [31 x i16] [i16 -15, i16 -7, i16 -3, i16 -1, i16 15, i16 14, i16 -1, i16 13, i16 12, i16 -3, i16 -1, i16 11, i16 10, i16 -1, i16 9, i16 8, i16 -7, i16 -3, i16 -1, i16 7, i16 6, i16 -1, i16 5, i16 4, i16 -3, i16 -1, i16 3, i16 2, i16 -1, i16 1, i16 0], align 16
@III_get_scale_factors_1.slen = internal unnamed_addr constant [2 x [16 x i8]] [[16 x i8] c"\00\00\00\00\03\01\01\01\02\02\02\03\03\03\04\04", [16 x i8] c"\00\01\02\03\00\01\02\03\01\02\03\01\02\03\02\03"], align 16
@III_get_scale_factors_2.stab = internal unnamed_addr constant [3 x [6 x [4 x i8]]] [[6 x [4 x i8]] [[4 x i8] c"\06\05\05\05", [4 x i8] c"\06\05\07\03", [4 x i8] c"\0B\0A\00\00", [4 x i8] c"\07\07\07\00", [4 x i8] c"\06\06\06\03", [4 x i8] c"\08\08\05\00"], [6 x [4 x i8]] [[4 x i8] c"\09\09\09\09", [4 x i8] c"\09\09\0C\06", [4 x i8] c"\12\12\00\00", [4 x i8] c"\0C\0C\0C\00", [4 x i8] c"\0C\09\09\06", [4 x i8] c"\0F\0C\09\00"], [6 x [4 x i8]] [[4 x i8] c"\06\09\09\09", [4 x i8] c"\06\09\0C\06", [4 x i8] c"\0F\12\00\00", [4 x i8] c"\06\0F\0C\00", [4 x i8] c"\06\0C\09\06", [4 x i8] c"\06\12\09\00"]], align 16
@.str.185 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@stdout = external dso_local local_unnamed_addr global %struct._IO_FILE*, align 8
@.str.1.186 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.2.187 = private unnamed_addr constant [24 x i8] c"Could not create \22%s\22.\0A\00", align 1
@.str.3.188 = private unnamed_addr constant [34 x i8] c"mp3 buffer is not big enough... \0A\00", align 1
@.str.4.189 = private unnamed_addr constant [25 x i8] c"Error writing mp3 output\00", align 1
@mp = common dso_local global %struct.mpstr zeroinitializer, align 8
@buf = internal global [16384 x i8] zeroinitializer, align 16
@out = internal global [8192 x i8] zeroinitializer, align 16
@.str.192 = private unnamed_addr constant [50 x i8] c"Opps: first frame of mpglib output will be lost \0A\00", align 1
@.str.1.195 = private unnamed_addr constant [66 x i8] c"Opps: mpg123 returned more than one frame!  Cant handle this... \0A\00", align 1
@.str.2.196 = private unnamed_addr constant [66 x i8] c"Opps: mpg123 returned more than one frame!  shouldn't happen... \0A\00", align 1
@mdct_sub48.init = internal unnamed_addr global i32 0, align 4
@sb_sample = internal global [2 x [2 x [18 x [32 x double]]]] zeroinitializer, align 16
@ca.7 = internal unnamed_addr global double 0.000000e+00, align 16
@cs.7 = internal unnamed_addr global double 0.000000e+00, align 16
@ca.6 = internal unnamed_addr global double 0.000000e+00, align 16
@cs.6 = internal unnamed_addr global double 0.000000e+00, align 16
@ca.5 = internal unnamed_addr global double 0.000000e+00, align 16
@cs.5 = internal unnamed_addr global double 0.000000e+00, align 16
@ca.4 = internal unnamed_addr global double 0.000000e+00, align 16
@cs.4 = internal unnamed_addr global double 0.000000e+00, align 16
@ca.3 = internal unnamed_addr global double 0.000000e+00, align 16
@cs.3 = internal unnamed_addr global double 0.000000e+00, align 16
@ca.2 = internal unnamed_addr global double 0.000000e+00, align 16
@cs.2 = internal unnamed_addr global double 0.000000e+00, align 16
@ca.1 = internal unnamed_addr global double 0.000000e+00, align 16
@cs.1 = internal unnamed_addr global double 0.000000e+00, align 16
@ca.0 = internal unnamed_addr global double 0.000000e+00, align 16
@cs.0 = internal unnamed_addr global double 0.000000e+00, align 16
@win.199 = internal unnamed_addr global [4 x [36 x double]] zeroinitializer, align 16
@cos_s = internal unnamed_addr global [6 x [6 x double]] zeroinitializer, align 16
@cos_l = internal unnamed_addr global [244 x double] zeroinitializer, align 16
@all = internal unnamed_addr constant [12 x i32] [i32 0, i32 2, i32 3, i32 5, i32 6, i32 8, i32 9, i32 11, i32 12, i32 14, i32 15, i32 17], align 16
@enwindow = internal unnamed_addr global [256 x double] [double 0x3FA251E002C5BE4C, double 0x3F924E1FFC2760F6, double 0x3F69ADFFBE4CE877, double 0x3F642100110318CA, double 9.713170e-04, double 2.188680e-04, double 1.015660e-04, double 1.382800e-05, double 0x3FA24EFFFE8EA200, double 0x3F6BDDFFD89B6AB3, double 9.837150e-04, double 9.918200e-05, double -4.770000e-07, double 1.039510e-04, double 0x3F4F3FFF520DC771, double 0x3F67470033705EA7, double 1.239800e-05, double 1.912120e-04, double 0x3F62B3FFD4EA8624, double 0x3F9166FFFA87D736, double 0x3F9334FFF82E8B95, double 0x3F658D0036BA2EEE, double 2.474780e-04, double 1.478200e-05, double 0x3FA2467FFD4C82A1, double 0x3F6DD8000F4D029B, double 0x3F503FFFB08B08EE, double 9.632100e-05, double -4.770000e-07, double 1.058580e-04, double 0x3F4E7FFFB6FC4D65, double 0x3F64A8000EC3923C, double 1.144400e-05, double 1.654620e-04, double 0x3F6148FFC594EC83, double 0x3F907FDFF8E84D76, double 0x3F941B0002FC8112, double 0x3F66F7002FAE4C0C, double 2.770420e-04, double 1.668900e-05, double 0x3FA2385FFEFF602E, double 0x3F6F9BFFD8F150EE, double 9.951590e-04, double 9.346000e-05, double -4.770000e-07, double 1.072880e-04, double 9.026530e-04, double 0x3F61D0FFD9B6E277, double 1.001400e-05, double 1.401900e-04, double 0x3F5FBDFF99419ECB, double 0x3F8F32C00A8B630F, double 0x3F94FFC002FEA6D3, double 0x3F685CFFCF1C771E, double 3.075600e-04, double 1.812000e-05, double 3.543520e-02, double 0x3F7095FFF5DDD6FA, double 9.942050e-04, double 9.059900e-05, double -4.770000e-07, double 1.082420e-04, double 8.687970e-04, double 0x3F5D7FFFE1EF6B2A, double 0x3EE3000CEB1FF411, double 1.163480e-04, double 0x3F5CF2005A6548A7, double 0x3F8D680010E953B9, double 0x3F95E29FFB661AF0, double 3.141880e-03, double 3.390310e-04, double 1.955000e-05, double 0x3FA20B4002AD0C1B, double 4.215240e-03, double 9.894370e-04, double 8.726100e-05, double -4.770000e-07, double 1.087190e-04, double 0x3F4B2C0063FE014D, double 0x3F56EDFFEFB14AB3, double 8.106000e-06, double 9.393700e-05, double 0x3F5A2DFFA8D35995, double 0x3F8BA03FF357727A, double 0x3F96C320035E36F6, double 0x3F6B17002A4FE853, double 3.714560e-04, double 2.145800e-05, double 3.500700e-02, double 0x3F71D9800E83258F, double 9.808540e-04, double 8.392300e-05, double -4.770000e-07, double 1.087190e-04, double 7.839200e-04, double 9.713170e-04, double 7.629000e-06, double 7.295600e-05, double 0x3F577800309639AD, double 0x3F89DC800CEF6B77, double 0x3F97A0BFFE8830BC, double 0x3F6C6700031EDD2A, double 4.043580e-04, double 2.336500e-05, double 0x3FA1C82FFC6969F3, double 0x3F72567FFA9D50C4, double 9.689330e-04, double 8.058500e-05, double -9.540000e-07, double 1.082420e-04, double 7.319450e-04, double 5.159380e-04, double 6.676000e-06, double 5.292900e-05, double 0x3F54CDFF9F2972E2, double 0x3F881D80076614A1, double 0x3F987B2006DB9161, double 0x3F6DAD000EFFB365, double 4.382130e-04, double 2.527200e-05, double 0x3FA19E90011D1416, double 0x3F72BBFFFE860AFA, double 0x3F4F43FFAB93B97D, double 7.677100e-05, double -9.540000e-07, double 1.068120e-04, double 6.742480e-04, double 3.337900e-05, double 6.199000e-06, double 3.433200e-05, double 0x3F52340073D47447, double 0x3F86643FF91CEA7A, double 0x3F99519FFD2D5F2B, double 0x3F6EE6000ACDF57D, double 4.725460e-04, double 2.765700e-05, double 0x3FA16FC0016255B6, double 0x3F730AFFEBE6A112, double 9.355550e-04, double 0x3F13400155732CA6, double -9.540000e-07, double 1.053810e-04, double 6.103520e-04, double -4.758830e-04, double 5.245000e-06, double 1.716600e-05, double 9.565350e-04, double 0x3F84B1400FA0C315, double 2.552700e-02, double 0x3F70087FF0141377, double 5.073550e-04, double 3.004100e-05, double 0x3FA13BE000055E64, double 0x3F734380077742AD, double 0x3F4DFC010F4107FF, double 7.009500e-05, double -9.540000e-07, double 1.025200e-04, double 5.393030e-04, double 0xBF5093FF8462AE54, double 4.768000e-06, double 9.540000e-07, double 8.068080e-04, double 0x3F83057FFA3ED383, double 0x3F9AF14004E3FBA4, double 0x3F70957FEAAD18B9, double 5.421640e-04, double 3.242500e-05, double 0x3FA102EFFD062E20, double 0x3F73677FF48A898F, double 8.916850e-04, double 6.628000e-05, double -1.431000e-06, double 9.918200e-05, double 4.625320e-04, double 0xBF59C80067E27000, double 4.292000e-06, double -1.382800e-05, double 6.618500e-04, double 0x3F8161C00E7868C7, double 0x3F9BB93FFD1B1E3F, double 0x3F71197FEA014C42, double 5.769730e-04, double 3.480900e-05, double 0x3FA0C53FFF633BD3, double 0x3F7376FFF7D8A559, double 8.664130e-04, double 6.294300e-05, double -1.431000e-06, double 9.536700e-05, double 3.786090e-04, double 0xBF61B500163F206B, double 3.815000e-06, double -2.718000e-05, double 5.221370e-04, double 0x3F7F8D7FEC04B1A7, double 0x3F9C7BA000DE43BA, double 0x3F7193001136A2EE, double 6.117820e-04, double 3.767000e-05, double 0x3FA082CFFE85818A, double 0x3F73737FEE3BA130, double 0x3F4B7C00F1307329, double 5.960500e-05, double -1.907000e-06, double 9.012200e-05, double 2.884860e-04, double 0xBF66BA0038D75965, double 3.338000e-06, double -3.957700e-05, double 3.881450e-04, double 0x3F7C6A00018B2312, double 0x3F9D37C002307E44, double 0x3F72018010642EDC, double 6.465910e-04, double 4.053100e-05, double 0x3FA03BE000055E64, double 0x3F735DFFEE14F995, double 0x3F4A87FEF0132B89, double 5.579000e-05, double -1.907000e-06, double 8.440000e-05, double 1.916890e-04, double 0xBF6BF1FFFBE8072A, double 3.338000e-06, double -5.054500e-05, double 2.598760e-04, double 0x3F7959FFEA754312, double 0x3F9DED20070F1B84, double 0x3F72640015E0A32A, double 6.809230e-04, double 4.339200e-05, double 0x3F9FE13FFEFC278C, double 0x3F73370002956CCA, double 7.791520e-04, double 5.292900e-05, double -2.384000e-06, double 7.772400e-05, double 8.821500e-05, double 0xBF70ADFFE940063C, double 2.861000e-06, double -6.055800e-05, double 1.373290e-04, double 5.462170e-03, double 0x3F9E9B7FF8B3B071, double 0x3F72B87FF4E906D0, double 7.143020e-04, double 4.625300e-05, double 0x3F9F425FFF77A281, double 0x3F72FF7FFD6647B3, double 7.472040e-04, double 4.959100e-05, double 0x3F737B8017D72606, double 2.145800e-05, double 0xBF123FFC220291DE, double 2.384000e-06], align 16
@mm = internal unnamed_addr global [16 x [31 x double]] zeroinitializer, align 16
@inPath = common dso_local global [300 x i8] zeroinitializer, align 16
@outPath = common dso_local global [300 x i8] zeroinitializer, align 16
@.str.1.202 = private unnamed_addr constant [44 x i8] c"USAGE   :  %s [options] <infile> [outfile]\0A\00", align 1
@.str.2.203 = private unnamed_addr constant [66 x i8] c"\0A<infile> and/or <outfile> can be \22-\22, which means stdin/stdout.\0A\00", align 1
@.str.3.204 = private unnamed_addr constant [38 x i8] c"Try \22%s --help\22 for more information\0A\00", align 1
@.str.4.205 = private unnamed_addr constant [11 x i8] c"OPTIONS :\0A\00", align 1
@.str.5.206 = private unnamed_addr constant [18 x i8] c"  Input options:\0A\00", align 1
@.str.6.207 = private unnamed_addr constant [38 x i8] c"    -r              input is raw pcm\0A\00", align 1
@.str.7.208 = private unnamed_addr constant [50 x i8] c"    -x              force byte-swapping of input\0A\00", align 1
@.str.8.209 = private unnamed_addr constant [77 x i8] c"    -s sfreq        sampling frequency of input file(kHz) - default 44.1kHz\0A\00", align 1
@.str.9.210 = private unnamed_addr constant [46 x i8] c"    --mp3input      input file is a MP3 file\0A\00", align 1
@.str.10.211 = private unnamed_addr constant [19 x i8] c"  Filter options:\0A\00", align 1
@.str.11.212 = private unnamed_addr constant [65 x i8] c"    -k              keep ALL frequencies (disables all filters)\0A\00", align 1
@.str.12.213 = private unnamed_addr constant [75 x i8] c"  --lowpass freq         frequency(kHz), lowpass filter cutoff above freq\0A\00", align 1
@.str.13.214 = private unnamed_addr constant [72 x i8] c"  --lowpass-width freq   frequency(kHz) - default 15%% of lowpass freq\0A\00", align 1
@.str.14.215 = private unnamed_addr constant [76 x i8] c"  --highpass freq        frequency(kHz), highpass filter cutoff below freq\0A\00", align 1
@.str.15.216 = private unnamed_addr constant [73 x i8] c"  --highpass-width freq  frequency(kHz) - default 15%% of highpass freq\0A\00", align 1
@.str.16.217 = private unnamed_addr constant [81 x i8] c"  --resample sfreq  sampling frequency of output file(kHz)- default=input sfreq\0A\00", align 1
@.str.17.218 = private unnamed_addr constant [73 x i8] c"  --cwlimit freq    compute tonality up to freq (in kHz) default 8.8717\0A\00", align 1
@.str.18.219 = private unnamed_addr constant [24 x i8] c"  Operational options:\0A\00", align 1
@.str.19.220 = private unnamed_addr constant [71 x i8] c"    -m mode         (s)tereo, (j)oint, (f)orce or (m)ono  (default j)\0A\00", align 1
@.str.20.221 = private unnamed_addr constant [67 x i8] c"                    force = force ms_stereo on all frames. Faster\0A\00", align 1
@.str.21.222 = private unnamed_addr constant [72 x i8] c"    -a              downmix from stereo to mono file for mono encoding\0A\00", align 1
@.str.22.223 = private unnamed_addr constant [65 x i8] c"    -d              allow channels to have different blocktypes\0A\00", align 1
@.str.23.224 = private unnamed_addr constant [65 x i8] c"    -S              don't print progress report, VBR histograms\0A\00", align 1
@.str.24.225 = private unnamed_addr constant [50 x i8] c"    --athonly       only use the ATH for masking\0A\00", align 1
@.str.25.226 = private unnamed_addr constant [49 x i8] c"    --noath         disable the ATH for masking\0A\00", align 1
@.str.26.227 = private unnamed_addr constant [45 x i8] c"    --noshort       do not use short blocks\0A\00", align 1
@.str.27.228 = private unnamed_addr constant [45 x i8] c"    --voice         experimental voice mode\0A\00", align 1
@.str.28.229 = private unnamed_addr constant [77 x i8] c"    --preset type   type must be phone, voice, fm, tape, hifi, cd or studio\0A\00", align 1
@.str.29.230 = private unnamed_addr constant [57 x i8] c"                    help gives some more infos on these\0A\00", align 1
@.str.30.231 = private unnamed_addr constant [48 x i8] c"  CBR (constant bitrate, the default) options:\0A\00", align 1
@.str.31.232 = private unnamed_addr constant [72 x i8] c"    -h              higher quality, but a little slower.  Recommended.\0A\00", align 1
@.str.32.233 = private unnamed_addr constant [50 x i8] c"    -f              fast mode (very low quality)\0A\00", align 1
@.str.33.234 = private unnamed_addr constant [54 x i8] c"    -b bitrate      set the bitrate, default 128kbps\0A\00", align 1
@.str.34.235 = private unnamed_addr constant [16 x i8] c"  VBR options:\0A\00", align 1
@.str.35.236 = private unnamed_addr constant [48 x i8] c"    -v              use variable bitrate (VBR)\0A\00", align 1
@.str.36.237 = private unnamed_addr constant [60 x i8] c"    -V n            quality setting for VBR.  default n=%i\0A\00", align 1
@.str.37.238 = private unnamed_addr constant [66 x i8] c"                    0=high quality,bigger files. 9=smaller files\0A\00", align 1
@.str.38.239 = private unnamed_addr constant [68 x i8] c"    -b bitrate      specify minimum allowed bitrate, default 32kbs\0A\00", align 1
@.str.39.240 = private unnamed_addr constant [69 x i8] c"    -B bitrate      specify maximum allowed bitrate, default 256kbs\0A\00", align 1
@.str.40.241 = private unnamed_addr constant [56 x i8] c"    -t              disable Xing VBR informational tag\0A\00", align 1
@.str.41.242 = private unnamed_addr constant [51 x i8] c"    --nohist        disable VBR histogram display\0A\00", align 1
@.str.42.243 = private unnamed_addr constant [30 x i8] c"  MP3 header/stream options:\0A\00", align 1
@.str.43.244 = private unnamed_addr constant [51 x i8] c"    -e emp          de-emphasis n/5/c  (obsolete)\0A\00", align 1
@.str.44.245 = private unnamed_addr constant [39 x i8] c"    -c              mark as copyright\0A\00", align 1
@.str.45.246 = private unnamed_addr constant [42 x i8] c"    -o              mark as non-original\0A\00", align 1
@.str.46.247 = private unnamed_addr constant [75 x i8] c"    -p              error protection.  adds 16bit checksum to every frame\0A\00", align 1
@.str.47.248 = private unnamed_addr constant [58 x i8] c"                    (the checksum is computed correctly)\0A\00", align 1
@.str.48.249 = private unnamed_addr constant [47 x i8] c"    --nores         disable the bit reservoir\0A\00", align 1
@.str.49.250 = private unnamed_addr constant [64 x i8] c"  Specifying any of the following options will add an ID3 tag:\0A\00", align 1
@.str.50.251 = private unnamed_addr constant [52 x i8] c"     --tt \22title\22     title of song (max 30 chars)\0A\00", align 1
@.str.51.252 = private unnamed_addr constant [62 x i8] c"     --ta \22artist\22    artist who did the song (max 30 chars)\0A\00", align 1
@.str.52.253 = private unnamed_addr constant [63 x i8] c"     --tl \22album\22     album where it came from (max 30 chars)\0A\00", align 1
@.str.53.254 = private unnamed_addr constant [75 x i8] c"     --ty \22year\22      year in which the song/album was made (max 4 chars)\0A\00", align 1
@.str.54.255 = private unnamed_addr constant [54 x i8] c"     --tc \22comment\22   additional info (max 30 chars)\0A\00", align 1
@.str.55.256 = private unnamed_addr constant [69 x i8] c"                      (or max 28 chars if using the \22track\22 option)\0A\00", align 1
@.str.56.257 = private unnamed_addr constant [68 x i8] c"     --tn \22track\22     track number of the song on the CD (1 to 99)\0A\00", align 1
@.str.57.258 = private unnamed_addr constant [67 x i8] c"                      (using this option will add an ID3v1.1 tag)\0A\00", align 1
@.str.58.259 = private unnamed_addr constant [54 x i8] c"     --tg \22genre\22     genre of song (name or number)\0A\00", align 1
@.str.59.260 = private unnamed_addr constant [49 x i8] c"Presets are some shortcuts for common settings.\0A\00", align 1
@.str.60.261 = private unnamed_addr constant [52 x i8] c"They can be combined with -v if you want VBR MP3s.\0A\00", align 1
@.str.61.262 = private unnamed_addr constant [44 x i8] c"  --preset phone    =>  --resample      16\0A\00", align 1
@.str.62.263 = private unnamed_addr constant [48 x i8] c"                        --highpass       0.260\0A\00", align 1
@.str.63.264 = private unnamed_addr constant [48 x i8] c"                        --highpasswidth  0.040\0A\00", align 1
@.str.64.265 = private unnamed_addr constant [48 x i8] c"                        --lowpass        3.700\0A\00", align 1
@.str.65.266 = private unnamed_addr constant [48 x i8] c"                        --lowpasswidth   0.300\0A\00", align 1
@.str.66.267 = private unnamed_addr constant [35 x i8] c"                        --noshort\0A\00", align 1
@.str.67.268 = private unnamed_addr constant [32 x i8] c"                        -m   m\0A\00", align 1
@.str.68.269 = private unnamed_addr constant [32 x i8] c"                        -b  16\0A\00", align 1
@.str.69.270 = private unnamed_addr constant [35 x i8] c"                  plus  -b   8  \\\0A\00", align 1
@.str.70.271 = private unnamed_addr constant [59 x i8] c"                        -B  56   > in combination with -v\0A\00", align 1
@.str.71.272 = private unnamed_addr constant [35 x i8] c"                        -V   5  /\0A\00", align 1
@.str.72.273 = private unnamed_addr constant [44 x i8] c"  --preset voice:   =>  --resample      24\0A\00", align 1
@.str.73.274 = private unnamed_addr constant [48 x i8] c"                        --highpass       0.100\0A\00", align 1
@.str.74.275 = private unnamed_addr constant [48 x i8] c"                        --highpasswidth  0.020\0A\00", align 1
@.str.75.276 = private unnamed_addr constant [44 x i8] c"                        --lowpass       11\0A\00", align 1
@.str.76.277 = private unnamed_addr constant [44 x i8] c"                        --lowpasswidth   2\0A\00", align 1
@.str.77.278 = private unnamed_addr constant [32 x i8] c"                        -b  32\0A\00", align 1
@.str.78.279 = private unnamed_addr constant [59 x i8] c"                        -B  96   > in combination with -v\0A\00", align 1
@.str.79.280 = private unnamed_addr constant [35 x i8] c"                        -V   4  /\0A\00", align 1
@.str.80.281 = private unnamed_addr constant [44 x i8] c"  --preset fm:      =>  --resample      32\0A\00", align 1
@.str.81.282 = private unnamed_addr constant [48 x i8] c"                        --highpass       0.030\0A\00", align 1
@.str.82.283 = private unnamed_addr constant [44 x i8] c"                        --highpasswidth  0\0A\00", align 1
@.str.83.284 = private unnamed_addr constant [46 x i8] c"                        --lowpass       11.4\0A\00", align 1
@.str.84.285 = private unnamed_addr constant [44 x i8] c"                        --lowpasswidth   0\0A\00", align 1
@.str.85.286 = private unnamed_addr constant [32 x i8] c"                        -m   j\0A\00", align 1
@.str.86.287 = private unnamed_addr constant [32 x i8] c"                        -b  96\0A\00", align 1
@.str.87.288 = private unnamed_addr constant [35 x i8] c"                  plus  -b  32  \\\0A\00", align 1
@.str.88.289 = private unnamed_addr constant [59 x i8] c"                        -B 192   > in combination with -v\0A\00", align 1
@.str.89.290 = private unnamed_addr constant [44 x i8] c"  --preset tape:    =>  --lowpass       17\0A\00", align 1
@.str.90.291 = private unnamed_addr constant [48 x i8] c"                        --highpass       0.015\0A\00", align 1
@.str.91.292 = private unnamed_addr constant [48 x i8] c"                        --highpasswidth  0.015\0A\00", align 1
@.str.92.293 = private unnamed_addr constant [32 x i8] c"                        -b 128\0A\00", align 1
@.str.93.294 = private unnamed_addr constant [44 x i8] c"  --preset hifi:    =>  --lowpass       20\0A\00", align 1
@.str.94.295 = private unnamed_addr constant [44 x i8] c"                        --lowpasswidth   3\0A\00", align 1
@.str.95.296 = private unnamed_addr constant [28 x i8] c"                        -h\0A\00", align 1
@.str.96.297 = private unnamed_addr constant [32 x i8] c"                        -b 160\0A\00", align 1
@.str.97.298 = private unnamed_addr constant [59 x i8] c"                        -B 224   > in combination with -v\0A\00", align 1
@.str.98.299 = private unnamed_addr constant [35 x i8] c"                        -V   3  /\0A\00", align 1
@.str.99.300 = private unnamed_addr constant [28 x i8] c"  --preset cd:      =>  -k\0A\00", align 1
@.str.100.301 = private unnamed_addr constant [32 x i8] c"                        -m   s\0A\00", align 1
@.str.101.302 = private unnamed_addr constant [32 x i8] c"                        -b 192\0A\00", align 1
@.str.102.303 = private unnamed_addr constant [35 x i8] c"                  plus  -b  80  \\\0A\00", align 1
@.str.103.304 = private unnamed_addr constant [59 x i8] c"                        -B 256   > in combination with -v\0A\00", align 1
@.str.104.305 = private unnamed_addr constant [35 x i8] c"                        -V   2  /\0A\00", align 1
@.str.105.306 = private unnamed_addr constant [28 x i8] c"  --preset studio:  =>  -k\0A\00", align 1
@.str.106.307 = private unnamed_addr constant [32 x i8] c"                        -b 256\0A\00", align 1
@.str.107.308 = private unnamed_addr constant [35 x i8] c"                  plus  -b 112  \\\0A\00", align 1
@.str.108.309 = private unnamed_addr constant [59 x i8] c"                        -B 320   > in combination with -v\0A\00", align 1
@.str.109.310 = private unnamed_addr constant [35 x i8] c"                        -V   0  /\0A\00", align 1
@.str.110.313 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.111.314 = private unnamed_addr constant [9 x i8] c"resample\00", align 1
@.str.112.315 = private unnamed_addr constant [43 x i8] c"Must specify a samplerate with --resample\0A\00", align 1
@.str.113.316 = private unnamed_addr constant [9 x i8] c"mp3input\00", align 1
@.str.114.317 = private unnamed_addr constant [6 x i8] c"voice\00", align 1
@.str.115.318 = private unnamed_addr constant [8 x i8] c"noshort\00", align 1
@.str.116.319 = private unnamed_addr constant [6 x i8] c"noath\00", align 1
@.str.117.320 = private unnamed_addr constant [6 x i8] c"nores\00", align 1
@.str.118.321 = private unnamed_addr constant [8 x i8] c"athonly\00", align 1
@.str.119.322 = private unnamed_addr constant [7 x i8] c"nohist\00", align 1
@.str.120.323 = private unnamed_addr constant [3 x i8] c"tt\00", align 1
@.str.121.324 = private unnamed_addr constant [3 x i8] c"ta\00", align 1
@.str.122.325 = private unnamed_addr constant [3 x i8] c"tl\00", align 1
@.str.123.326 = private unnamed_addr constant [3 x i8] c"ty\00", align 1
@.str.124.327 = private unnamed_addr constant [3 x i8] c"tc\00", align 1
@.str.125.328 = private unnamed_addr constant [3 x i8] c"tn\00", align 1
@.str.126.329 = private unnamed_addr constant [3 x i8] c"tg\00", align 1
@.str.127.330 = private unnamed_addr constant [44 x i8] c"Unknown genre: %s.  Specifiy genre number \0A\00", align 1
@.str.128.331 = private unnamed_addr constant [8 x i8] c"lowpass\00", align 1
@.str.129.332 = private unnamed_addr constant [61 x i8] c"Must specify lowpass with --lowpass freq, freq >= 0.001 kHz\0A\00", align 1
@.str.130.333 = private unnamed_addr constant [14 x i8] c"lowpass-width\00", align 1
@.str.131.334 = private unnamed_addr constant [69 x i8] c"Must specify lowpass width with --lowpass-width freq, freq >= 0 kHz\0A\00", align 1
@.str.132.335 = private unnamed_addr constant [9 x i8] c"highpass\00", align 1
@.str.133.336 = private unnamed_addr constant [63 x i8] c"Must specify highpass with --highpass freq, freq >= 0.001 kHz\0A\00", align 1
@.str.134.337 = private unnamed_addr constant [15 x i8] c"highpass-width\00", align 1
@.str.135.338 = private unnamed_addr constant [71 x i8] c"Must specify highpass width with --highpass-width freq, freq >= 0 kHz\0A\00", align 1
@.str.136.339 = private unnamed_addr constant [8 x i8] c"cwlimit\00", align 1
@.str.137.340 = private unnamed_addr constant [29 x i8] c"Must specify cwlimit in kHz\0A\00", align 1
@.str.138.341 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.139.342 = private unnamed_addr constant [6 x i8] c"usage\00", align 1
@.str.140.343 = private unnamed_addr constant [7 x i8] c"preset\00", align 1
@.str.141.344 = private unnamed_addr constant [6 x i8] c"phone\00", align 1
@.str.142.345 = private unnamed_addr constant [3 x i8] c"fm\00", align 1
@.str.143.346 = private unnamed_addr constant [5 x i8] c"tape\00", align 1
@.str.144.347 = private unnamed_addr constant [5 x i8] c"hifi\00", align 1
@.str.145.348 = private unnamed_addr constant [3 x i8] c"cd\00", align 1
@.str.146.349 = private unnamed_addr constant [7 x i8] c"studio\00", align 1
@.str.147.350 = private unnamed_addr constant [84 x i8] c"%s: --preset type, type must be phone, voice, fm, tape, hifi, cd or studio, not %s\0A\00", align 1
@.str.148.351 = private unnamed_addr constant [23 x i8] c"%s: unrec option --%s\0A\00", align 1
@.str.149.352 = private unnamed_addr constant [38 x i8] c"%s: -m mode must be s/d/j/f/m not %s\0A\00", align 1
@.str.150.353 = private unnamed_addr constant [30 x i8] c"%s: -X n must be 0-6, not %s\0A\00", align 1
@.str.151.354 = private unnamed_addr constant [55 x i8] c"LAME not compiled with GTK support, -g not supported.\0A\00", align 1
@.str.152 = private unnamed_addr constant [33 x i8] c"%s: -e emp must be n/5/c not %s\0A\00", align 1
@.str.153 = private unnamed_addr constant [21 x i8] c"%s: unrec option %c\0A\00", align 1
@.str.154 = private unnamed_addr constant [19 x i8] c"%s: excess arg %s\0A\00", align 1
@.str.156 = private unnamed_addr constant [5 x i8] c".mp3\00", align 1
@.str.157.355 = private unnamed_addr constant [55 x i8] c"id3tag ignored: id3 tagging not supported for stdout.\0A\00", align 1
@L3psycho_anal.blocktype_old = internal unnamed_addr global [2 x i32] zeroinitializer, align 4
@.str.368 = private unnamed_addr constant [42 x i8] c"error, invalid sampling frequency: %d Hz\0A\00", align 1
@L3psycho_anal.rx_sav = internal unnamed_addr global [4 x [2 x [513 x float]]] zeroinitializer, align 16
@L3psycho_anal.ax_sav = internal unnamed_addr global [4 x [2 x [513 x float]]] zeroinitializer, align 16
@L3psycho_anal.bx_sav = internal unnamed_addr global [4 x [2 x [513 x float]]] zeroinitializer, align 16
@L3psycho_anal.en = internal unnamed_addr global [4 x %struct.III_psy_xmin] zeroinitializer, align 16
@L3psycho_anal.thm = internal unnamed_addr global [4 x %struct.III_psy_xmin] zeroinitializer, align 16
@L3psycho_anal.cw_lower_index = internal unnamed_addr global i1 false, align 4
@L3psycho_anal.cw_upper_index = internal unnamed_addr global i32 0, align 4
@L3psycho_anal.cw = internal unnamed_addr global [513 x float] zeroinitializer, align 16
@L3psycho_anal.mld_s = internal unnamed_addr global [12 x double] zeroinitializer, align 16
@L3psycho_anal.mld_l = internal unnamed_addr global [21 x double] zeroinitializer, align 16
@L3psycho_anal.partition_l = internal global [513 x i32] zeroinitializer, align 16
@L3psycho_anal.numlines_l = internal global [63 x i32] zeroinitializer, align 16
@L3psycho_anal.numlines_s = internal global [63 x i32] zeroinitializer, align 16
@L3psycho_anal.minval = internal global [63 x double] zeroinitializer, align 16
@L3psycho_anal.qthr_l = internal global [63 x double] zeroinitializer, align 16
@L3psycho_anal.s3_l = internal global [64 x [64 x double]] zeroinitializer, align 16
@L3psycho_anal.s3_s = internal global [64 x [64 x double]] zeroinitializer, align 16
@L3psycho_anal.qthr_s = internal global [63 x double] zeroinitializer, align 16
@L3psycho_anal.bu_l = internal global [21 x i32] zeroinitializer, align 16
@L3psycho_anal.bo_l = internal global [21 x i32] zeroinitializer, align 16
@L3psycho_anal.w1_l = internal global [21 x double] zeroinitializer, align 16
@L3psycho_anal.w2_l = internal global [21 x double] zeroinitializer, align 16
@L3psycho_anal.bu_s = internal global [12 x i32] zeroinitializer, align 16
@L3psycho_anal.bo_s = internal global [12 x i32] zeroinitializer, align 16
@L3psycho_anal.w1_s = internal global [12 x double] zeroinitializer, align 16
@L3psycho_anal.w2_s = internal global [12 x double] zeroinitializer, align 16
@L3psycho_anal.npart_l_orig = internal unnamed_addr global i32 0, align 4
@L3psycho_anal.npart_s_orig = internal unnamed_addr global i32 0, align 4
@L3psycho_anal.npart_l = internal unnamed_addr global i32 0, align 4
@L3psycho_anal.npart_s = internal unnamed_addr global i32 0, align 4
@L3psycho_anal.s3ind = internal unnamed_addr global [63 x [2 x i32]] zeroinitializer, align 16
@L3psycho_anal.s3ind_s = internal unnamed_addr global [63 x [2 x i32]] zeroinitializer, align 16
@L3psycho_anal.wsamp_L = internal global [2 x [1024 x float]] zeroinitializer, align 16
@L3psycho_anal.wsamp_S = internal global [2 x [3 x [256 x float]]] zeroinitializer, align 16
@L3psycho_anal.pe = internal unnamed_addr global [4 x double] zeroinitializer, align 16
@L3psycho_anal.energy = internal unnamed_addr global [513 x float] zeroinitializer, align 16
@L3psycho_anal.energy_s = internal unnamed_addr global [3 x [129 x float]] zeroinitializer, align 16
@L3psycho_anal.eb = internal unnamed_addr global [63 x double] zeroinitializer, align 16
@L3psycho_anal.cb = internal unnamed_addr global [63 x double] zeroinitializer, align 16
@L3psycho_anal.nb_1 = internal unnamed_addr global [4 x [63 x double]] zeroinitializer, align 16
@L3psycho_anal.nb_2 = internal unnamed_addr global [4 x [63 x double]] zeroinitializer, align 16
@L3psycho_anal.thr = internal unnamed_addr global [63 x double] zeroinitializer, align 16
@.str.1.369 = private unnamed_addr constant [26 x i8] c"Error in block selecting\0A\00", align 1
@L3psycho_anal.ms_ratio_s_old = internal unnamed_addr global double 0.000000e+00, align 8
@L3psycho_anal.ms_ratio_l_old = internal unnamed_addr global double 0.000000e+00, align 8
@L3psycho_anal.ms_ener_ratio_old = internal unnamed_addr global double 2.500000e-01, align 8
@.str.2.370 = private unnamed_addr constant [27 x i8] c"1. please check \22psy_data\22\00", align 1
@.str.3.371 = private unnamed_addr constant [27 x i8] c"3. please check \22psy_data\22\00", align 1
@.str.4.372 = private unnamed_addr constant [28 x i8] c"30:please check \22psy_data\22\0A\00", align 1
@.str.5.373 = private unnamed_addr constant [31 x i8] c"31l: please check \22psy_data.\22\0A\00", align 1
@.str.6.374 = private unnamed_addr constant [15 x i8] c"w1,w2: %f %f \0A\00", align 1
@.str.7.375 = private unnamed_addr constant [31 x i8] c"31s: please check \22psy_data.\22\0A\00", align 1
@outer_loop.OldValue = internal unnamed_addr global [2 x i32] [i32 180, i32 180], align 4
@masking_lower = dso_local local_unnamed_addr global float 1.000000e+00, align 4
@nr_of_sfb_block = dso_local global [6 x [3 x [4 x i32]]] [[3 x [4 x i32]] [[4 x i32] [i32 6, i32 5, i32 5, i32 5], [4 x i32] [i32 9, i32 9, i32 9, i32 9], [4 x i32] [i32 6, i32 9, i32 9, i32 9]], [3 x [4 x i32]] [[4 x i32] [i32 6, i32 5, i32 7, i32 3], [4 x i32] [i32 9, i32 9, i32 12, i32 6], [4 x i32] [i32 6, i32 9, i32 12, i32 6]], [3 x [4 x i32]] [[4 x i32] [i32 11, i32 10, i32 0, i32 0], [4 x i32] [i32 18, i32 18, i32 0, i32 0], [4 x i32] [i32 15, i32 18, i32 0, i32 0]], [3 x [4 x i32]] [[4 x i32] [i32 7, i32 7, i32 7, i32 0], [4 x i32] [i32 12, i32 12, i32 12, i32 0], [4 x i32] [i32 6, i32 15, i32 12, i32 0]], [3 x [4 x i32]] [[4 x i32] [i32 6, i32 6, i32 6, i32 3], [4 x i32] [i32 12, i32 9, i32 9, i32 6], [4 x i32] [i32 6, i32 12, i32 9, i32 6]], [3 x [4 x i32]] [[4 x i32] [i32 8, i32 8, i32 5, i32 0], [4 x i32] [i32 15, i32 12, i32 9, i32 0], [4 x i32] [i32 6, i32 18, i32 9, i32 0]]], align 16
@pretab = dso_local local_unnamed_addr global [21 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 2, i32 2, i32 3, i32 3, i32 3, i32 2], align 16
@sfBandIndex = dso_local local_unnamed_addr global [6 x %struct.scalefac_struct] [%struct.scalefac_struct { [23 x i32] [i32 0, i32 6, i32 12, i32 18, i32 24, i32 30, i32 36, i32 44, i32 54, i32 66, i32 80, i32 96, i32 116, i32 140, i32 168, i32 200, i32 238, i32 284, i32 336, i32 396, i32 464, i32 522, i32 576], [14 x i32] [i32 0, i32 4, i32 8, i32 12, i32 18, i32 24, i32 32, i32 42, i32 56, i32 74, i32 100, i32 132, i32 174, i32 192] }, %struct.scalefac_struct { [23 x i32] [i32 0, i32 6, i32 12, i32 18, i32 24, i32 30, i32 36, i32 44, i32 54, i32 66, i32 80, i32 96, i32 114, i32 136, i32 162, i32 194, i32 232, i32 278, i32 332, i32 394, i32 464, i32 540, i32 576], [14 x i32] [i32 0, i32 4, i32 8, i32 12, i32 18, i32 26, i32 36, i32 48, i32 62, i32 80, i32 104, i32 136, i32 180, i32 192] }, %struct.scalefac_struct { [23 x i32] [i32 0, i32 6, i32 12, i32 18, i32 24, i32 30, i32 36, i32 44, i32 54, i32 66, i32 80, i32 96, i32 116, i32 140, i32 168, i32 200, i32 238, i32 284, i32 336, i32 396, i32 464, i32 522, i32 576], [14 x i32] [i32 0, i32 4, i32 8, i32 12, i32 18, i32 26, i32 36, i32 48, i32 62, i32 80, i32 104, i32 134, i32 174, i32 192] }, %struct.scalefac_struct { [23 x i32] [i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 30, i32 36, i32 44, i32 52, i32 62, i32 74, i32 90, i32 110, i32 134, i32 162, i32 196, i32 238, i32 288, i32 342, i32 418, i32 576], [14 x i32] [i32 0, i32 4, i32 8, i32 12, i32 16, i32 22, i32 30, i32 40, i32 52, i32 66, i32 84, i32 106, i32 136, i32 192] }, %struct.scalefac_struct { [23 x i32] [i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 30, i32 36, i32 42, i32 50, i32 60, i32 72, i32 88, i32 106, i32 128, i32 156, i32 190, i32 230, i32 276, i32 330, i32 384, i32 576], [14 x i32] [i32 0, i32 4, i32 8, i32 12, i32 16, i32 22, i32 28, i32 38, i32 50, i32 64, i32 80, i32 100, i32 126, i32 192] }, %struct.scalefac_struct { [23 x i32] [i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 30, i32 36, i32 44, i32 54, i32 66, i32 82, i32 102, i32 126, i32 156, i32 194, i32 240, i32 296, i32 364, i32 448, i32 550, i32 576], [14 x i32] [i32 0, i32 4, i32 8, i32 12, i32 16, i32 22, i32 30, i32 42, i32 58, i32 78, i32 104, i32 138, i32 180, i32 192] }], align 16
@scalefac_band = common dso_local local_unnamed_addr global %struct.scalefac_struct zeroinitializer, align 4
@pow43 = common dso_local local_unnamed_addr global [8208 x double] zeroinitializer, align 16
@ipow20 = common dso_local local_unnamed_addr global [256 x double] zeroinitializer, align 16
@pow20 = common dso_local local_unnamed_addr global [256 x double] zeroinitializer, align 16
@convert_mdct = common dso_local local_unnamed_addr global i32 0, align 4
@reduce_sidechannel = common dso_local local_unnamed_addr global i32 0, align 4
@ATH_mdct_long = common dso_local local_unnamed_addr global [576 x double] zeroinitializer, align 16
@ATH_mdct_short = common dso_local local_unnamed_addr global [192 x double] zeroinitializer, align 16
@ATH_l = internal global [21 x double] zeroinitializer, align 16
@ATH_s = internal global [21 x double] zeroinitializer, align 16
@adj43 = internal unnamed_addr global [8208 x double] zeroinitializer, align 16
@scale_bitcount.slen1_tab = internal unnamed_addr constant [16 x i32] [i32 0, i32 18, i32 36, i32 54, i32 54, i32 36, i32 54, i32 72, i32 54, i32 72, i32 90, i32 72, i32 90, i32 108, i32 108, i32 126], align 16
@scale_bitcount.slen2_tab = internal unnamed_addr constant [16 x i32] [i32 0, i32 10, i32 20, i32 30, i32 33, i32 21, i32 31, i32 41, i32 32, i32 42, i32 52, i32 43, i32 53, i32 63, i32 64, i32 74], align 16
@scale_bitcount.slen1 = internal unnamed_addr constant [16 x i32] [i32 1, i32 1, i32 1, i32 1, i32 8, i32 2, i32 2, i32 2, i32 4, i32 4, i32 4, i32 8, i32 8, i32 8, i32 16, i32 16], align 16
@scale_bitcount.slen2 = internal unnamed_addr constant [16 x i32] [i32 1, i32 2, i32 4, i32 8, i32 1, i32 2, i32 4, i32 8, i32 2, i32 4, i32 8, i32 2, i32 4, i32 8, i32 4, i32 8], align 16
@max_range_sfac_tab = internal unnamed_addr constant [6 x [4 x i32]] [[4 x i32] [i32 15, i32 15, i32 7, i32 7], [4 x i32] [i32 15, i32 15, i32 7, i32 0], [4 x i32] [i32 7, i32 3, i32 0, i32 0], [4 x i32] [i32 15, i32 31, i32 31, i32 0], [4 x i32] [i32 7, i32 7, i32 7, i32 0], [4 x i32] [i32 3, i32 3, i32 0, i32 0]], align 16
@scale_bitcount_lsf.log2tab = internal unnamed_addr constant [16 x i32] [i32 0, i32 1, i32 2, i32 2, i32 3, i32 3, i32 3, i32 3, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4], align 16
@bin_search_StepSize2.CurrentStep = internal unnamed_addr global i32 4, align 4
@ResvSize = internal unnamed_addr global i32 0, align 4
@ResvMax = internal unnamed_addr global i32 0, align 4
@.str.426 = private unnamed_addr constant [18 x i8] c"socket() failed.\0A\00", align 1
@.str.1.427 = private unnamed_addr constant [32 x i8] c"setsockopt SO_REUSEADDR failed\0A\00", align 1
@.str.2.428 = private unnamed_addr constant [59 x i8] c"setsockopt IP_MULTICAST_TTL failed.  multicast in kernel?\0A\00", align 1
@.str.3.429 = private unnamed_addr constant [60 x i8] c"setsockopt IP_MULTICAST_LOOP failed.  multicast in kernel?\0A\00", align 1
@pnts = dso_local local_unnamed_addr global [5 x double*] [double* getelementptr inbounds ([16 x double], [16 x double]* @cos64, i32 0, i32 0), double* getelementptr inbounds ([8 x double], [8 x double]* @cos32, i32 0, i32 0), double* getelementptr inbounds ([4 x double], [4 x double]* @cos16, i32 0, i32 0), double* getelementptr inbounds ([2 x double], [2 x double]* @cos8, i32 0, i32 0), double* getelementptr inbounds ([1 x double], [1 x double]* @cos4, i32 0, i32 0)], align 16
@cos64 = internal global [16 x double] zeroinitializer, align 16
@cos32 = internal global [8 x double] zeroinitializer, align 16
@cos16 = internal global [4 x double] zeroinitializer, align 16
@cos8 = internal global [2 x double] zeroinitializer, align 16
@cos4 = internal global [1 x double] zeroinitializer, align 8
@decwin = common dso_local global [544 x double] zeroinitializer, align 16
@intwinbase = internal unnamed_addr constant [257 x i64] [i64 0, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 -1, i64 -2, i64 -2, i64 -2, i64 -2, i64 -3, i64 -3, i64 -4, i64 -4, i64 -5, i64 -5, i64 -6, i64 -7, i64 -7, i64 -8, i64 -9, i64 -10, i64 -11, i64 -13, i64 -14, i64 -16, i64 -17, i64 -19, i64 -21, i64 -24, i64 -26, i64 -29, i64 -31, i64 -35, i64 -38, i64 -41, i64 -45, i64 -49, i64 -53, i64 -58, i64 -63, i64 -68, i64 -73, i64 -79, i64 -85, i64 -91, i64 -97, i64 -104, i64 -111, i64 -117, i64 -125, i64 -132, i64 -139, i64 -147, i64 -154, i64 -161, i64 -169, i64 -176, i64 -183, i64 -190, i64 -196, i64 -202, i64 -208, i64 -213, i64 -218, i64 -222, i64 -225, i64 -227, i64 -228, i64 -228, i64 -227, i64 -224, i64 -221, i64 -215, i64 -208, i64 -200, i64 -189, i64 -177, i64 -163, i64 -146, i64 -127, i64 -106, i64 -83, i64 -57, i64 -29, i64 2, i64 36, i64 72, i64 111, i64 153, i64 197, i64 244, i64 294, i64 347, i64 401, i64 459, i64 519, i64 581, i64 645, i64 711, i64 779, i64 848, i64 919, i64 991, i64 1064, i64 1137, i64 1210, i64 1283, i64 1356, i64 1428, i64 1498, i64 1567, i64 1634, i64 1698, i64 1759, i64 1817, i64 1870, i64 1919, i64 1962, i64 2001, i64 2032, i64 2057, i64 2075, i64 2085, i64 2087, i64 2080, i64 2063, i64 2037, i64 2000, i64 1952, i64 1893, i64 1822, i64 1739, i64 1644, i64 1535, i64 1414, i64 1280, i64 1131, i64 970, i64 794, i64 605, i64 402, i64 185, i64 -45, i64 -288, i64 -545, i64 -814, i64 -1095, i64 -1388, i64 -1692, i64 -2006, i64 -2330, i64 -2663, i64 -3004, i64 -3351, i64 -3705, i64 -4063, i64 -4425, i64 -4788, i64 -5153, i64 -5517, i64 -5879, i64 -6237, i64 -6589, i64 -6935, i64 -7271, i64 -7597, i64 -7910, i64 -8209, i64 -8491, i64 -8755, i64 -8998, i64 -9219, i64 -9416, i64 -9585, i64 -9727, i64 -9838, i64 -9916, i64 -9959, i64 -9966, i64 -9935, i64 -9863, i64 -9750, i64 -9592, i64 -9389, i64 -9139, i64 -8840, i64 -8492, i64 -8092, i64 -7640, i64 -7134, i64 -6574, i64 -5959, i64 -5288, i64 -4561, i64 -3776, i64 -2935, i64 -2037, i64 -1082, i64 -70, i64 998, i64 2122, i64 3300, i64 4533, i64 5818, i64 7154, i64 8540, i64 9975, i64 11455, i64 12980, i64 14548, i64 16155, i64 17799, i64 19478, i64 21189, i64 22929, i64 24694, i64 26482, i64 28289, i64 30112, i64 31947, i64 33791, i64 35640, i64 37489, i64 39336, i64 41176, i64 43006, i64 44821, i64 46617, i64 48390, i64 50137, i64 51853, i64 53534, i64 55178, i64 56778, i64 58333, i64 59838, i64 61289, i64 62684, i64 64019, i64 65290, i64 66494, i64 67629, i64 68692, i64 69679, i64 70590, i64 71420, i64 72169, i64 72835, i64 73415, i64 73908, i64 74313, i64 74630, i64 74856, i64 74992, i64 75038], align 16
@hs = dso_local local_unnamed_addr global i32 64, align 4
@ht = dso_local local_unnamed_addr global [34 x %struct.huffcodetab] [%struct.huffcodetab zeroinitializer, %struct.huffcodetab { i32 2, i32 0, i64* getelementptr inbounds ([18 x i64], [18 x i64]* @t1HB, i32 0, i32 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @t1l, i32 0, i32 0) }, %struct.huffcodetab { i32 3, i32 0, i64* getelementptr inbounds ([35 x i64], [35 x i64]* @t2HB, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @t2l, i32 0, i32 0) }, %struct.huffcodetab { i32 3, i32 0, i64* getelementptr inbounds ([35 x i64], [35 x i64]* @t3HB, i32 0, i32 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @t3l, i32 0, i32 0) }, %struct.huffcodetab zeroinitializer, %struct.huffcodetab { i32 4, i32 0, i64* getelementptr inbounds ([52 x i64], [52 x i64]* @t5HB, i32 0, i32 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @t5l, i32 0, i32 0) }, %struct.huffcodetab { i32 4, i32 0, i64* getelementptr inbounds ([52 x i64], [52 x i64]* @t6HB, i32 0, i32 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @t6l, i32 0, i32 0) }, %struct.huffcodetab { i32 6, i32 0, i64* getelementptr inbounds ([86 x i64], [86 x i64]* @t7HB, i32 0, i32 0), i8* getelementptr inbounds ([86 x i8], [86 x i8]* @t7l, i32 0, i32 0) }, %struct.huffcodetab { i32 6, i32 0, i64* getelementptr inbounds ([86 x i64], [86 x i64]* @t8HB, i32 0, i32 0), i8* getelementptr inbounds ([86 x i8], [86 x i8]* @t8l, i32 0, i32 0) }, %struct.huffcodetab { i32 6, i32 0, i64* getelementptr inbounds ([86 x i64], [86 x i64]* @t9HB, i32 0, i32 0), i8* getelementptr inbounds ([86 x i8], [86 x i8]* @t9l, i32 0, i32 0) }, %struct.huffcodetab { i32 8, i32 0, i64* getelementptr inbounds ([120 x i64], [120 x i64]* @t10HB, i32 0, i32 0), i8* getelementptr inbounds ([120 x i8], [120 x i8]* @t10l, i32 0, i32 0) }, %struct.huffcodetab { i32 8, i32 0, i64* getelementptr inbounds ([120 x i64], [120 x i64]* @t11HB, i32 0, i32 0), i8* getelementptr inbounds ([120 x i8], [120 x i8]* @t11l, i32 0, i32 0) }, %struct.huffcodetab { i32 8, i32 0, i64* getelementptr inbounds ([120 x i64], [120 x i64]* @t12HB, i32 0, i32 0), i8* getelementptr inbounds ([120 x i8], [120 x i8]* @t12l, i32 0, i32 0) }, %struct.huffcodetab { i32 16, i32 0, i64* getelementptr inbounds ([256 x i64], [256 x i64]* @t13HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t13l, i32 0, i32 0) }, %struct.huffcodetab zeroinitializer, %struct.huffcodetab { i32 16, i32 0, i64* getelementptr inbounds ([256 x i64], [256 x i64]* @t15HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t15l, i32 0, i32 0) }, %struct.huffcodetab { i32 1, i32 1, i64* getelementptr inbounds ([256 x i64], [256 x i64]* @t16HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t16l, i32 0, i32 0) }, %struct.huffcodetab { i32 2, i32 3, i64* getelementptr inbounds ([256 x i64], [256 x i64]* @t16HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t16l, i32 0, i32 0) }, %struct.huffcodetab { i32 3, i32 7, i64* getelementptr inbounds ([256 x i64], [256 x i64]* @t16HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t16l, i32 0, i32 0) }, %struct.huffcodetab { i32 4, i32 15, i64* getelementptr inbounds ([256 x i64], [256 x i64]* @t16HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t16l, i32 0, i32 0) }, %struct.huffcodetab { i32 6, i32 63, i64* getelementptr inbounds ([256 x i64], [256 x i64]* @t16HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t16l, i32 0, i32 0) }, %struct.huffcodetab { i32 8, i32 255, i64* getelementptr inbounds ([256 x i64], [256 x i64]* @t16HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t16l, i32 0, i32 0) }, %struct.huffcodetab { i32 10, i32 1023, i64* getelementptr inbounds ([256 x i64], [256 x i64]* @t16HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t16l, i32 0, i32 0) }, %struct.huffcodetab { i32 13, i32 8191, i64* getelementptr inbounds ([256 x i64], [256 x i64]* @t16HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t16l, i32 0, i32 0) }, %struct.huffcodetab { i32 4, i32 15, i64* getelementptr inbounds ([256 x i64], [256 x i64]* @t24HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t24l, i32 0, i32 0) }, %struct.huffcodetab { i32 5, i32 31, i64* getelementptr inbounds ([256 x i64], [256 x i64]* @t24HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t24l, i32 0, i32 0) }, %struct.huffcodetab { i32 6, i32 63, i64* getelementptr inbounds ([256 x i64], [256 x i64]* @t24HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t24l, i32 0, i32 0) }, %struct.huffcodetab { i32 7, i32 127, i64* getelementptr inbounds ([256 x i64], [256 x i64]* @t24HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t24l, i32 0, i32 0) }, %struct.huffcodetab { i32 8, i32 255, i64* getelementptr inbounds ([256 x i64], [256 x i64]* @t24HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t24l, i32 0, i32 0) }, %struct.huffcodetab { i32 9, i32 511, i64* getelementptr inbounds ([256 x i64], [256 x i64]* @t24HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t24l, i32 0, i32 0) }, %struct.huffcodetab { i32 11, i32 2047, i64* getelementptr inbounds ([256 x i64], [256 x i64]* @t24HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t24l, i32 0, i32 0) }, %struct.huffcodetab { i32 13, i32 8191, i64* getelementptr inbounds ([256 x i64], [256 x i64]* @t24HB, i32 0, i32 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @t24l, i32 0, i32 0) }, %struct.huffcodetab { i32 0, i32 0, i64* getelementptr inbounds ([16 x i64], [16 x i64]* @t32HB, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @t32l, i32 0, i32 0) }, %struct.huffcodetab { i32 0, i32 0, i64* getelementptr inbounds ([16 x i64], [16 x i64]* @t33HB, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @t33l, i32 0, i32 0) }], align 16
@t1HB = internal global [18 x i64] [i64 1, i64 1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 1, i64 0], align 16
@t1l = internal global [18 x i8] c"\01\03\00\00\00\00\00\00\00\00\00\00\00\00\00\00\02\03", align 16
@t2HB = internal global [35 x i64] [i64 1, i64 2, i64 1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 3, i64 1, i64 1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 3, i64 2, i64 0], align 16
@t2l = internal global [35 x i8] c"\01\03\06\00\00\00\00\00\00\00\00\00\00\00\00\00\03\03\05\00\00\00\00\00\00\00\00\00\00\00\00\00\05\05\06", align 16
@t3HB = internal global [35 x i64] [i64 3, i64 2, i64 1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 1, i64 1, i64 1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 3, i64 2, i64 0], align 16
@t3l = internal global [35 x i8] c"\02\02\06\00\00\00\00\00\00\00\00\00\00\00\00\00\03\02\05\00\00\00\00\00\00\00\00\00\00\00\00\00\05\05\06", align 16
@t5HB = internal global [52 x i64] [i64 1, i64 2, i64 6, i64 5, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 3, i64 1, i64 4, i64 4, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 5, i64 7, i64 1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 1, i64 1, i64 0], align 16
@t5l = internal global [52 x i8] c"\01\03\06\07\00\00\00\00\00\00\00\00\00\00\00\00\03\03\06\07\00\00\00\00\00\00\00\00\00\00\00\00\06\06\07\08\00\00\00\00\00\00\00\00\00\00\00\00\07\06\07\08", align 16
@t6HB = internal global [52 x i64] [i64 7, i64 3, i64 5, i64 1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 2, i64 3, i64 2, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 4, i64 4, i64 1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 3, i64 3, i64 2, i64 0], align 16
@t6l = internal global [52 x i8] c"\03\03\05\07\00\00\00\00\00\00\00\00\00\00\00\00\03\02\04\05\00\00\00\00\00\00\00\00\00\00\00\00\04\04\05\06\00\00\00\00\00\00\00\00\00\00\00\00\06\05\06\07", align 16
@t7HB = internal global [86 x i64] [i64 1, i64 2, i64 10, i64 19, i64 16, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 3, i64 3, i64 7, i64 10, i64 5, i64 3, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 4, i64 13, i64 17, i64 8, i64 4, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 11, i64 18, i64 15, i64 11, i64 2, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 6, i64 9, i64 14, i64 3, i64 1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 4, i64 5, i64 3, i64 2, i64 0], align 16
@t7l = internal global [86 x i8] c"\01\03\06\08\08\09\00\00\00\00\00\00\00\00\00\00\03\04\06\07\07\08\00\00\00\00\00\00\00\00\00\00\06\05\07\08\08\09\00\00\00\00\00\00\00\00\00\00\07\07\08\09\09\09\00\00\00\00\00\00\00\00\00\00\07\07\08\09\09\0A\00\00\00\00\00\00\00\00\00\00\08\08\09\0A\0A\0A", align 16
@t8HB = internal global [86 x i64] [i64 3, i64 4, i64 6, i64 18, i64 12, i64 5, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 1, i64 2, i64 16, i64 9, i64 3, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 3, i64 5, i64 14, i64 7, i64 3, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 19, i64 17, i64 15, i64 13, i64 10, i64 4, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 13, i64 5, i64 8, i64 11, i64 5, i64 1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 12, i64 4, i64 4, i64 1, i64 1, i64 0], align 16
@t8l = internal global [86 x i8] c"\02\03\06\08\08\09\00\00\00\00\00\00\00\00\00\00\03\02\04\08\08\08\00\00\00\00\00\00\00\00\00\00\06\04\06\08\08\09\00\00\00\00\00\00\00\00\00\00\08\08\08\09\09\0A\00\00\00\00\00\00\00\00\00\00\08\07\08\09\0A\0A\00\00\00\00\00\00\00\00\00\00\09\08\09\09\0B\0B", align 16
@t9HB = internal global [86 x i64] [i64 7, i64 5, i64 9, i64 14, i64 15, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 6, i64 4, i64 5, i64 5, i64 6, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 6, i64 8, i64 8, i64 8, i64 5, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 15, i64 6, i64 9, i64 10, i64 5, i64 1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 7, i64 9, i64 6, i64 4, i64 1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 14, i64 4, i64 6, i64 2, i64 6, i64 0], align 16
@t9l = internal global [86 x i8] c"\03\03\05\06\08\09\00\00\00\00\00\00\00\00\00\00\03\03\04\05\06\08\00\00\00\00\00\00\00\00\00\00\04\04\05\06\07\08\00\00\00\00\00\00\00\00\00\00\06\05\06\07\07\08\00\00\00\00\00\00\00\00\00\00\07\06\07\07\08\09\00\00\00\00\00\00\00\00\00\00\08\07\08\08\09\09", align 16
@t10HB = internal global [120 x i64] [i64 1, i64 2, i64 10, i64 23, i64 35, i64 30, i64 12, i64 17, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 3, i64 3, i64 8, i64 12, i64 18, i64 21, i64 12, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 9, i64 15, i64 21, i64 32, i64 40, i64 19, i64 6, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 14, i64 13, i64 22, i64 34, i64 46, i64 23, i64 18, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 20, i64 19, i64 33, i64 47, i64 27, i64 22, i64 9, i64 3, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 31, i64 22, i64 41, i64 26, i64 21, i64 20, i64 5, i64 3, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 14, i64 13, i64 10, i64 11, i64 16, i64 6, i64 5, i64 1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 9, i64 8, i64 7, i64 8, i64 4, i64 4, i64 2, i64 0], align 16
@t10l = internal global [120 x i8] c"\01\03\06\08\09\09\09\0A\00\00\00\00\00\00\00\00\03\04\06\07\08\09\08\08\00\00\00\00\00\00\00\00\06\06\07\08\09\0A\09\09\00\00\00\00\00\00\00\00\07\07\08\09\0A\0A\09\0A\00\00\00\00\00\00\00\00\08\08\09\0A\0A\0A\0A\0A\00\00\00\00\00\00\00\00\09\09\0A\0A\0B\0B\0A\0B\00\00\00\00\00\00\00\00\08\08\09\0A\0A\0A\0B\0B\00\00\00\00\00\00\00\00\09\08\09\0A\0A\0B\0B\0B", align 16
@t11HB = internal global [120 x i64] [i64 3, i64 4, i64 10, i64 24, i64 34, i64 33, i64 21, i64 15, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 5, i64 3, i64 4, i64 10, i64 32, i64 17, i64 11, i64 10, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 7, i64 13, i64 18, i64 30, i64 31, i64 20, i64 5, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 25, i64 11, i64 19, i64 59, i64 27, i64 18, i64 12, i64 5, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 35, i64 33, i64 31, i64 58, i64 30, i64 16, i64 7, i64 5, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 28, i64 26, i64 32, i64 19, i64 17, i64 15, i64 8, i64 14, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 14, i64 12, i64 9, i64 13, i64 14, i64 9, i64 4, i64 1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 11, i64 4, i64 6, i64 6, i64 6, i64 3, i64 2, i64 0], align 16
@t11l = internal global [120 x i8] c"\02\03\05\07\08\09\08\09\00\00\00\00\00\00\00\00\03\03\04\06\08\08\07\08\00\00\00\00\00\00\00\00\05\05\06\07\08\09\08\08\00\00\00\00\00\00\00\00\07\06\07\09\08\0A\08\09\00\00\00\00\00\00\00\00\08\08\08\09\09\0A\09\0A\00\00\00\00\00\00\00\00\08\08\09\0A\0A\0B\0A\0B\00\00\00\00\00\00\00\00\08\07\07\08\09\0A\0A\0A\00\00\00\00\00\00\00\00\08\07\08\09\0A\0A\0A\0A", align 16
@t12HB = internal global [120 x i64] [i64 9, i64 6, i64 16, i64 33, i64 41, i64 39, i64 38, i64 26, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 7, i64 5, i64 6, i64 9, i64 23, i64 16, i64 26, i64 11, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 17, i64 7, i64 11, i64 14, i64 21, i64 30, i64 10, i64 7, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 17, i64 10, i64 15, i64 12, i64 18, i64 28, i64 14, i64 5, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 32, i64 13, i64 22, i64 19, i64 18, i64 16, i64 9, i64 5, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 40, i64 17, i64 31, i64 29, i64 17, i64 13, i64 4, i64 2, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 27, i64 12, i64 11, i64 15, i64 10, i64 7, i64 4, i64 1, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 0, i64 27, i64 12, i64 8, i64 12, i64 6, i64 3, i64 1, i64 0], align 16
@t12l = internal global [120 x i8] c"\04\03\05\07\08\09\09\09\00\00\00\00\00\00\00\00\03\03\04\05\07\07\08\08\00\00\00\00\00\00\00\00\05\04\05\06\07\08\07\08\00\00\00\00\00\00\00\00\06\05\06\06\07\08\08\08\00\00\00\00\00\00\00\00\07\06\07\07\08\08\08\09\00\00\00\00\00\00\00\00\08\07\08\08\08\09\08\09\00\00\00\00\00\00\00\00\08\07\07\08\08\09\09\0A\00\00\00\00\00\00\00\00\09\08\08\09\09\09\09\0A", align 16
@t13HB = internal global [256 x i64] [i64 1, i64 5, i64 14, i64 21, i64 34, i64 51, i64 46, i64 71, i64 42, i64 52, i64 68, i64 52, i64 67, i64 44, i64 43, i64 19, i64 3, i64 4, i64 12, i64 19, i64 31, i64 26, i64 44, i64 33, i64 31, i64 24, i64 32, i64 24, i64 31, i64 35, i64 22, i64 14, i64 15, i64 13, i64 23, i64 36, i64 59, i64 49, i64 77, i64 65, i64 29, i64 40, i64 30, i64 40, i64 27, i64 33, i64 42, i64 16, i64 22, i64 20, i64 37, i64 61, i64 56, i64 79, i64 73, i64 64, i64 43, i64 76, i64 56, i64 37, i64 26, i64 31, i64 25, i64 14, i64 35, i64 16, i64 60, i64 57, i64 97, i64 75, i64 114, i64 91, i64 54, i64 73, i64 55, i64 41, i64 48, i64 53, i64 23, i64 24, i64 58, i64 27, i64 50, i64 96, i64 76, i64 70, i64 93, i64 84, i64 77, i64 58, i64 79, i64 29, i64 74, i64 49, i64 41, i64 17, i64 47, i64 45, i64 78, i64 74, i64 115, i64 94, i64 90, i64 79, i64 69, i64 83, i64 71, i64 50, i64 59, i64 38, i64 36, i64 15, i64 72, i64 34, i64 56, i64 95, i64 92, i64 85, i64 91, i64 90, i64 86, i64 73, i64 77, i64 65, i64 51, i64 44, i64 43, i64 42, i64 43, i64 20, i64 30, i64 44, i64 55, i64 78, i64 72, i64 87, i64 78, i64 61, i64 46, i64 54, i64 37, i64 30, i64 20, i64 16, i64 53, i64 25, i64 41, i64 37, i64 44, i64 59, i64 54, i64 81, i64 66, i64 76, i64 57, i64 54, i64 37, i64 18, i64 39, i64 11, i64 35, i64 33, i64 31, i64 57, i64 42, i64 82, i64 72, i64 80, i64 47, i64 58, i64 55, i64 21, i64 22, i64 26, i64 38, i64 22, i64 53, i64 25, i64 23, i64 38, i64 70, i64 60, i64 51, i64 36, i64 55, i64 26, i64 34, i64 23, i64 27, i64 14, i64 9, i64 7, i64 34, i64 32, i64 28, i64 39, i64 49, i64 75, i64 30, i64 52, i64 48, i64 40, i64 52, i64 28, i64 18, i64 17, i64 9, i64 5, i64 45, i64 21, i64 34, i64 64, i64 56, i64 50, i64 49, i64 45, i64 31, i64 19, i64 12, i64 15, i64 10, i64 7, i64 6, i64 3, i64 48, i64 23, i64 20, i64 39, i64 36, i64 35, i64 53, i64 21, i64 16, i64 23, i64 13, i64 10, i64 6, i64 1, i64 4, i64 2, i64 16, i64 15, i64 17, i64 27, i64 25, i64 20, i64 29, i64 11, i64 17, i64 12, i64 16, i64 8, i64 1, i64 1, i64 0, i64 1], align 16
@t13l = internal global [256 x i8] c"\01\04\06\07\08\09\09\0A\09\0A\0B\0B\0C\0C\0D\0D\03\04\06\07\08\08\09\09\09\09\0A\0A\0B\0C\0C\0C\06\06\07\08\09\09\0A\0A\09\0A\0A\0B\0B\0C\0D\0D\07\07\08\09\09\0A\0A\0A\0A\0B\0B\0B\0B\0C\0D\0D\08\07\09\09\0A\0A\0B\0B\0A\0B\0B\0C\0C\0D\0D\0E\09\08\09\0A\0A\0A\0B\0B\0B\0B\0C\0B\0D\0D\0E\0E\09\09\0A\0A\0B\0B\0B\0B\0B\0C\0C\0C\0D\0D\0E\0E\0A\09\0A\0B\0B\0B\0C\0C\0C\0C\0D\0D\0D\0E\10\10\09\08\09\0A\0A\0B\0B\0C\0C\0C\0C\0D\0D\0E\0F\0F\0A\09\0A\0A\0B\0B\0B\0D\0C\0D\0D\0E\0E\0E\10\0F\0A\0A\0A\0B\0B\0C\0C\0D\0C\0D\0E\0D\0E\0F\10\11\0B\0A\0A\0B\0C\0C\0C\0C\0D\0D\0D\0E\0F\0F\0F\10\0B\0B\0B\0C\0C\0D\0C\0D\0E\0E\0F\0F\0F\10\10\10\0C\0B\0C\0D\0D\0D\0E\0E\0E\0E\0E\0F\10\0F\10\10\0D\0C\0C\0D\0D\0D\0F\0E\0E\11\0F\0F\0F\11\10\10\0C\0C\0D\0E\0E\0E\0F\0E\0F\0F\10\10\13\12\13\10", align 16
@t15HB = internal global [256 x i64] [i64 7, i64 12, i64 18, i64 53, i64 47, i64 76, i64 124, i64 108, i64 89, i64 123, i64 108, i64 119, i64 107, i64 81, i64 122, i64 63, i64 13, i64 5, i64 16, i64 27, i64 46, i64 36, i64 61, i64 51, i64 42, i64 70, i64 52, i64 83, i64 65, i64 41, i64 59, i64 36, i64 19, i64 17, i64 15, i64 24, i64 41, i64 34, i64 59, i64 48, i64 40, i64 64, i64 50, i64 78, i64 62, i64 80, i64 56, i64 33, i64 29, i64 28, i64 25, i64 43, i64 39, i64 63, i64 55, i64 93, i64 76, i64 59, i64 93, i64 72, i64 54, i64 75, i64 50, i64 29, i64 52, i64 22, i64 42, i64 40, i64 67, i64 57, i64 95, i64 79, i64 72, i64 57, i64 89, i64 69, i64 49, i64 66, i64 46, i64 27, i64 77, i64 37, i64 35, i64 66, i64 58, i64 52, i64 91, i64 74, i64 62, i64 48, i64 79, i64 63, i64 90, i64 62, i64 40, i64 38, i64 125, i64 32, i64 60, i64 56, i64 50, i64 92, i64 78, i64 65, i64 55, i64 87, i64 71, i64 51, i64 73, i64 51, i64 70, i64 30, i64 109, i64 53, i64 49, i64 94, i64 88, i64 75, i64 66, i64 122, i64 91, i64 73, i64 56, i64 42, i64 64, i64 44, i64 21, i64 25, i64 90, i64 43, i64 41, i64 77, i64 73, i64 63, i64 56, i64 92, i64 77, i64 66, i64 47, i64 67, i64 48, i64 53, i64 36, i64 20, i64 71, i64 34, i64 67, i64 60, i64 58, i64 49, i64 88, i64 76, i64 67, i64 106, i64 71, i64 54, i64 38, i64 39, i64 23, i64 15, i64 109, i64 53, i64 51, i64 47, i64 90, i64 82, i64 58, i64 57, i64 48, i64 72, i64 57, i64 41, i64 23, i64 27, i64 62, i64 9, i64 86, i64 42, i64 40, i64 37, i64 70, i64 64, i64 52, i64 43, i64 70, i64 55, i64 42, i64 25, i64 29, i64 18, i64 11, i64 11, i64 118, i64 68, i64 30, i64 55, i64 50, i64 46, i64 74, i64 65, i64 49, i64 39, i64 24, i64 16, i64 22, i64 13, i64 14, i64 7, i64 91, i64 44, i64 39, i64 38, i64 34, i64 63, i64 52, i64 45, i64 31, i64 52, i64 28, i64 19, i64 14, i64 8, i64 9, i64 3, i64 123, i64 60, i64 58, i64 53, i64 47, i64 43, i64 32, i64 22, i64 37, i64 24, i64 17, i64 12, i64 15, i64 10, i64 2, i64 1, i64 71, i64 37, i64 34, i64 30, i64 28, i64 20, i64 17, i64 26, i64 21, i64 16, i64 10, i64 6, i64 8, i64 6, i64 2, i64 0], align 16
@t15l = internal global [256 x i8] calign 16
@t16HB = internal global [256 x i64] [i64 1, i64 5, i64 14, i64 44, i64 74, i64 63, i64 110, i64 93, i64 172, i64 149, i64 138, i64 242, i64 225, i64 195, i64 376, i64 17, i64 3, i64 4, i64 12, i64 20, i64 35, i64 62, i64 53, i64 47, i64 83, i64 75, i64 68, i64 119, i64 201, i64 107, i64 207, i64 9, i64 15, i64 13, i64 23, i64 38, i64 67, i64 58, i64 103, i64 90, i64 161, i64 72, i64 127, i64 117, i64 110, i64 209, i64 206, i64 16, i64 45, i64 21, i64 39, i64 69, i64 64, i64 114, i64 99, i64 87, i64 158, i64 140, i64 252, i64 212, i64 199, i64 387, i64 365, i64 26, i64 75, i64 36, i64 68, i64 65, i64 115, i64 101, i64 179, i64 164, i64 155, i64 264, i64 246, i64 226, i64 395, i64 382, i64 362, i64 9, i64 66, i64 30, i64 59, i64 56, i64 102, i64 185, i64 173, i64 265, i64 142, i64 253, i64 232, i64 400, i64 388, i64 378, i64 445, i64 16, i64 111, i64 54, i64 52, i64 100, i64 184, i64 178, i64 160, i64 133, i64 257, i64 244, i64 228, i64 217, i64 385, i64 366, i64 715, i64 10, i64 98, i64 48, i64 91, i64 88, i64 165, i64 157, i64 148, i64 261, i64 248, i64 407, i64 397, i64 372, i64 380, i64 889, i64 884, i64 8, i64 85, i64 84, i64 81, i64 159, i64 156, i64 143, i64 260, i64 249, i64 427, i64 401, i64 392, i64 383, i64 727, i64 713, i64 708, i64 7, i64 154, i64 76, i64 73, i64 141, i64 131, i64 256, i64 245, i64 426, i64 406, i64 394, i64 384, i64 735, i64 359, i64 710, i64 352, i64 11, i64 139, i64 129, i64 67, i64 125, i64 247, i64 233, i64 229, i64 219, i64 393, i64 743, i64 737, i64 720, i64 885, i64 882, i64 439, i64 4, i64 243, i64 120, i64 118, i64 115, i64 227, i64 223, i64 396, i64 746, i64 742, i64 736, i64 721, i64 712, i64 706, i64 223, i64 436, i64 6, i64 202, i64 224, i64 222, i64 218, i64 216, i64 389, i64 386, i64 381, i64 364, i64 888, i64 443, i64 707, i64 440, i64 437, i64 1728, i64 4, i64 747, i64 211, i64 210, i64 208, i64 370, i64 379, i64 734, i64 723, i64 714, i64 1735, i64 883, i64 877, i64 876, i64 3459, i64 865, i64 2, i64 377, i64 369, i64 102, i64 187, i64 726, i64 722, i64 358, i64 711, i64 709, i64 866, i64 1734, i64 871, i64 3458, i64 870, i64 434, i64 0, i64 12, i64 10, i64 7, i64 11, i64 10, i64 17, i64 11, i64 9, i64 13, i64 12, i64 10, i64 7, i64 5, i64 3, i64 1, i64 3], align 16
@t16l = internal global [256 x i8] c"\01\04\06\08\09\09\0A\0A\0B\0B\0B\0C\0C\0C\0D\09\03\04\06\07\08\09\09\09\0A\0A\0A\0B\0C\0B\0C\08\06\06\07\08\09\09\0A\0A\0B\0A\0B\0B\0B\0C\0C\09\08\07\08\09\09\0A\0A\0A\0B\0B\0C\0C\0C\0D\0D\0A\09\08\09\09\0A\0A\0B\0B\0B\0C\0C\0C\0D\0D\0D\09\09\08\09\09\0A\0B\0B\0C\0B\0C\0C\0D\0D\0D\0E\0A\0A\09\09\0A\0B\0B\0B\0B\0C\0C\0C\0C\0D\0D\0E\0A\0A\09\0A\0A\0B\0B\0B\0C\0C\0D\0D\0D\0D\0F\0F\0A\0A\0A\0A\0B\0B\0B\0C\0C\0D\0D\0D\0D\0E\0E\0E\0A\0B\0A\0A\0B\0B\0C\0C\0D\0D\0D\0D\0E\0D\0E\0D\0B\0B\0B\0A\0B\0C\0C\0C\0C\0D\0E\0E\0E\0F\0F\0E\0A\0C\0B\0B\0B\0C\0C\0D\0E\0E\0E\0E\0E\0E\0D\0E\0B\0C\0C\0C\0C\0C\0D\0D\0D\0D\0F\0E\0E\0E\0E\10\0B\0E\0C\0C\0C\0D\0D\0E\0E\0E\10\0F\0F\0F\11\0F\0B\0D\0D\0B\0C\0E\0E\0D\0E\0E\0F\10\0F\11\0F\0E\0B\09\08\08\09\09\0A\0A\0A\0B\0B\0B\0B\0B\0B\0B\08", align 16
@t24HB = internal global [256 x i64] [i64 15, i64 13, i64 46, i64 80, i64 146, i64 262, i64 248, i64 434, i64 426, i64 669, i64 653, i64 649, i64 621, i64 517, i64 1032, i64 88, i64 14, i64 12, i64 21, i64 38, i64 71, i64 130, i64 122, i64 216, i64 209, i64 198, i64 327, i64 345, i64 319, i64 297, i64 279, i64 42, i64 47, i64 22, i64 41, i64 74, i64 68, i64 128, i64 120, i64 221, i64 207, i64 194, i64 182, i64 340, i64 315, i64 295, i64 541, i64 18, i64 81, i64 39, i64 75, i64 70, i64 134, i64 125, i64 116, i64 220, i64 204, i64 190, i64 178, i64 325, i64 311, i64 293, i64 271, i64 16, i64 147, i64 72, i64 69, i64 135, i64 127, i64 118, i64 112, i64 210, i64 200, i64 188, i64 352, i64 323, i64 306, i64 285, i64 540, i64 14, i64 263, i64 66, i64 129, i64 126, i64 119, i64 114, i64 214, i64 202, i64 192, i64 180, i64 341, i64 317, i64 301, i64 281, i64 262, i64 12, i64 249, i64 123, i64 121, i64 117, i64 113, i64 215, i64 206, i64 195, i64 185, i64 347, i64 330, i64 308, i64 291, i64 272, i64 520, i64 10, i64 435, i64 115, i64 111, i64 109, i64 211, i64 203, i64 196, i64 187, i64 353, i64 332, i64 313, i64 298, i64 283, i64 531, i64 381, i64 17, i64 427, i64 212, i64 208, i64 205, i64 201, i64 193, i64 186, i64 177, i64 169, i64 320, i64 303, i64 286, i64 268, i64 514, i64 377, i64 16, i64 335, i64 199, i64 197, i64 191, i64 189, i64 181, i64 174, i64 333, i64 321, i64 305, i64 289, i64 275, i64 521, i64 379, i64 371, i64 11, i64 668, i64 184, i64 183, i64 179, i64 175, i64 344, i64 331, i64 314, i64 304, i64 290, i64 277, i64 530, i64 383, i64 373, i64 366, i64 10, i64 652, i64 346, i64 171, i64 168, i64 164, i64 318, i64 309, i64 299, i64 287, i64 276, i64 263, i64 513, i64 375, i64 368, i64 362, i64 6, i64 648, i64 322, i64 316, i64 312, i64 307, i64 302, i64 292, i64 284, i64 269, i64 261, i64 512, i64 376, i64 370, i64 364, i64 359, i64 4, i64 620, i64 300, i64 296, i64 294, i64 288, i64 282, i64 273, i64 266, i64 515, i64 380, i64 374, i64 369, i64 365, i64 361, i64 357, i64 2, i64 1033, i64 280, i64 278, i64 274, i64 267, i64 264, i64 259, i64 382, i64 378, i64 372, i64 367, i64 363, i64 360, i64 358, i64 356, i64 0, i64 43, i64 20, i64 19, i64 17, i64 15, i64 13, i64 11, i64 9, i64 7, i64 6, i64 4, i64 7, i64 5, i64 3, i64 1, i64 3], align 16
@t24l = internal global [256 x i8] calign 16
@t32HB = internal global [16 x i64] [i64 1, i64 5, i64 4, i64 5, i64 6, i64 5, i64 4, i64 4, i64 7, i64 3, i64 6, i64 0, i64 7, i64 2, i64 3, i64 1], align 16
@t32l = internal global [16 x i8] c"\01\04\04\05\04\06\05\06\04\05\05\06\05\06\06\06", align 16
@t33HB = internal global [16 x i64] [i64 15, i64 14, i64 13, i64 12, i64 11, i64 10, i64 9, i64 8, i64 7, i64 6, i64 5, i64 4, i64 3, i64 2, i64 1, i64 0], align 16
@t33l = internal global [16 x i8] c"\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04\04", align 16
@psy_data = dso_local local_unnamed_addr global [4926 x double] [double 4.800000e+04, double 6.100000e+01, double 0.000000e+00, double 1.000000e+00, double 2.450000e+01, double 4.532000e+00, double 0x3FEF0A3D70A3D70A, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00, double 2.450000e+01, double 4.532000e+00, double 7.550000e-01, double 4.690000e-01, double 2.000000e+00, double 1.000000e+00, double 2.450000e+01, double 4.532000e+00, double 7.380000e-01, double 0x3FEE04189374BC6A, double 3.000000e+00, double 1.000000e+00, double 2.450000e+01, double 9.040000e-01, double 7.300000e-01, double 1.406000e+00, double 4.000000e+00, double 1.000000e+00, double 2.450000e+01, double 9.040000e-01, double 0x3FE72B020C49BA5E, double 1.875000e+00, double 5.000000e+00, double 1.000000e+00, double 2.000000e+01, double 0x3FB70A3D70A3D70A, double 7.230000e-01, double 2.344000e+00, double 6.000000e+00, double 1.000000e+00, double 2.000000e+01, double 0x3FB70A3D70A3D70A, double 7.230000e-01, double 2.813000e+00, double 7.000000e+00, double 1.000000e+00, double 2.000000e+01, double 2.900000e-02, double 7.230000e-01, double 3.281000e+00, double 8.000000e+00, double 1.000000e+00, double 2.000000e+01, double 2.900000e-02, double 7.180000e-01, double 3.750000e+00, double 9.000000e+00, double 1.000000e+00, double 2.000000e+01, double 0x3F826E978D4FDF3B, double 6.900000e-01, double 4.199000e+00, double 1.000000e+01, double 1.000000e+00, double 2.000000e+01, double 0x3F826E978D4FDF3B, double 6.600000e-01, double 4.625000e+00, double 1.100000e+01, double 1.000000e+00, double 1.800000e+01, double 0x3F826E978D4FDF3B, double 6.410000e-01, double 5.047000e+00, double 1.200000e+01, double 1.000000e+00, double 1.800000e+01, double 0x3F826E978D4FDF3B, double 6.000000e-01, double 5.438000e+00, double 1.300000e+01, double 1.000000e+00, double 1.800000e+01, double 0x3F826E978D4FDF3B, double 5.840000e-01, double 5.828000e+00, double 1.400000e+01, double 1.000000e+00, double 1.200000e+01, double 0x3F826E978D4FDF3B, double 5.320000e-01, double 6.188000e+00, double 1.500000e+01, double 1.000000e+00, double 1.200000e+01, double 0x3F826E978D4FDF3B, double 5.370000e-01, double 6.522000e+00, double 1.600000e+01, double 2.000000e+00, double 6.000000e+00, double 1.800000e-02, double 0x3FEB6C8B43958106, double 7.174000e+00, double 1.700000e+01, double 2.000000e+00, double 6.000000e+00, double 1.800000e-02, double 8.580000e-01, double 7.801000e+00, double 1.800000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 0x3FEB4BC6A7EF9DB2, double 8.402000e+00, double 1.900000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 8.240000e-01, double 8.966000e+00, double 2.000000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 7.780000e-01, double 0x4022F7CED916872B, double 2.100000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 0x3FE7AE147AE147AE, double 0x4023EE978D4FDF3B, double 2.200000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 7.090000e-01, double 1.042600e+01, double 2.300000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 6.760000e-01, double 1.086600e+01, double 2.400000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 6.320000e-01, double 1.127900e+01, double 2.500000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 5.920000e-01, double 1.166900e+01, double 2.600000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 5.530000e-01, double 1.204200e+01, double 2.700000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 5.100000e-01, double 1.238600e+01, double 2.800000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 5.130000e-01, double 1.272100e+01, double 2.900000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.080000e-01, double 1.311500e+01, double 3.000000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.730000e-01, double 1.356200e+01, double 3.100000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.370000e-01, double 1.398400e+01, double 3.200000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.860000e-01, double 1.437100e+01, double 3.300000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.710000e-01, double 1.474100e+01, double 3.400000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 6.160000e-01, double 1.514000e+01, double 3.500000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 6.400000e-01, double 1.556300e+01, double 3.600000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.980000e-01, double 1.596200e+01, double 3.700000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.380000e-01, double 1.632400e+01, double 3.800000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.120000e-01, double 1.666500e+01, double 3.900000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 5.280000e-01, double 1.702000e+01, double 4.000000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 5.170000e-01, double 1.737300e+01, double 4.100000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 4.930000e-01, double 1.770800e+01, double 4.200000e+01, double 6.000000e+00, double 0.000000e+00, double 5.400000e-02, double 4.990000e-01, double 1.804500e+01, double 4.300000e+01, double 7.000000e+00, double 0.000000e+00, double 6.300000e-02, double 5.250000e-01, double 1.839800e+01, double 4.400000e+01, double 7.000000e+00, double 0.000000e+00, double 6.300000e-02, double 5.410000e-01, double 1.876200e+01, double 4.500000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB26E978D4FDF3B, double 5.280000e-01, double 1.912000e+01, double 4.600000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB26E978D4FDF3B, double 5.100000e-01, double 1.946600e+01, double 4.700000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB26E978D4FDF3B, double 5.060000e-01, double 1.980700e+01, double 4.800000e+01, double 1.000000e+01, double 0.000000e+00, double 1.800000e-01, double 5.250000e-01, double 2.015900e+01, double 4.900000e+01, double 1.000000e+01, double 0.000000e+00, double 1.800000e-01, double 5.360000e-01, double 2.052200e+01, double 5.000000e+01, double 1.000000e+01, double 0.000000e+00, double 1.800000e-01, double 5.180000e-01, double 2.087400e+01, double 5.100000e+01, double 1.300000e+01, double 0.000000e+00, double 3.720000e-01, double 5.010000e-01, double 2.121400e+01, double 5.200000e+01, double 1.300000e+01, double 0.000000e+00, double 3.720000e-01, double 4.970000e-01, double 2.155300e+01, double 5.300000e+01, double 1.400000e+01, double 0.000000e+00, double 4.000000e-01, double 4.970000e-01, double 2.189200e+01, double 5.400000e+01, double 1.800000e+01, double 0.000000e+00, double 1.627000e+00, double 4.950000e-01, double 2.223100e+01, double 5.500000e+01, double 1.800000e+01, double 0.000000e+00, double 1.627000e+00, double 4.940000e-01, double 2.256900e+01, double 5.600000e+01, double 2.000000e+01, double 0.000000e+00, double 1.808000e+00, double 4.970000e-01, double 2.290900e+01, double 5.700000e+01, double 2.500000e+01, double 0.000000e+00, double 2.260700e+01, double 4.940000e-01, double 2.324800e+01, double 5.800000e+01, double 2.500000e+01, double 0.000000e+00, double 2.260700e+01, double 4.870000e-01, double 2.358300e+01, double 5.900000e+01, double 3.500000e+01, double 0.000000e+00, double 3.165000e+01, double 4.830000e-01, double 2.391500e+01, double 6.000000e+01, double 6.700000e+01, double 0.000000e+00, double 6.058670e+02, double 4.820000e-01, double 2.424600e+01, double 6.100000e+01, double 6.700000e+01, double 0.000000e+00, double 6.058670e+02, double 5.240000e-01, double 2.457600e+01, double 4.410000e+04, double 6.200000e+01, double 0.000000e+00, double 1.000000e+00, double 2.450000e+01, double 4.532000e+00, double 9.510000e-01, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00, double 2.450000e+01, double 4.532000e+00, double 0x3FE6666666666666, double 4.310000e-01, double 2.000000e+00, double 1.000000e+00, double 2.450000e+01, double 4.532000e+00, double 6.810000e-01, double 0x3FEB8D4FDF3B645A, double 3.000000e+00, double 1.000000e+00, double 2.450000e+01, double 9.040000e-01, double 6.750000e-01, double 1.292000e+00, double 4.000000e+00, double 1.000000e+00, double 2.450000e+01, double 9.040000e-01, double 6.670000e-01, double 1.723000e+00, double 5.000000e+00, double 1.000000e+00, double 2.000000e+01, double 0x3FB70A3D70A3D70A, double 6.650000e-01, double 2.153000e+00, double 6.000000e+00, double 1.000000e+00, double 2.000000e+01, double 0x3FB70A3D70A3D70A, double 6.640000e-01, double 2.584000e+00, double 7.000000e+00, double 1.000000e+00, double 2.000000e+01, double 2.900000e-02, double 6.640000e-01, double 3.015000e+00, double 8.000000e+00, double 1.000000e+00, double 2.000000e+01, double 2.900000e-02, double 6.640000e-01, double 3.445000e+00, double 9.000000e+00, double 1.000000e+00, double 2.000000e+01, double 2.900000e-02, double 6.550000e-01, double 3.876000e+00, double 1.000000e+01, double 1.000000e+00, double 2.000000e+01, double 0x3F826E978D4FDF3B, double 6.160000e-01, double 4.279000e+00, double 1.100000e+01, double 1.000000e+00, double 2.000000e+01, double 0x3F826E978D4FDF3B, double 5.970000e-01, double 4.670000e+00, double 1.200000e+01, double 1.000000e+00, double 1.800000e+01, double 0x3F826E978D4FDF3B, double 5.780000e-01, double 5.057000e+00, double 1.300000e+01, double 1.000000e+00, double 1.800000e+01, double 0x3F826E978D4FDF3B, double 5.410000e-01, double 5.416000e+00, double 1.400000e+01, double 1.000000e+00, double 1.800000e+01, double 0x3F826E978D4FDF3B, double 5.750000e-01, double 5.774000e+00, double 1.500000e+01, double 2.000000e+00, double 1.200000e+01, double 1.800000e-02, double 8.560000e-01, double 6.422000e+00, double 1.600000e+01, double 2.000000e+00, double 6.000000e+00, double 1.800000e-02, double 8.460000e-01, double 0x401C1A9FBE76C8B4, double 1.700000e+01, double 2.000000e+00, double 6.000000e+00, double 1.800000e-02, double 8.400000e-01, double 7.609000e+00, double 1.800000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 8.220000e-01, double 0x40205604189374BC, double 1.900000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 8.000000e-01, double 8.710000e+00, double 2.000000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 7.530000e-01, double 9.207000e+00, double 2.100000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 0x3FE6872B020C49BA, double 9.662000e+00, double 2.200000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 6.740000e-01, double 1.009900e+01, double 2.300000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 6.400000e-01, double 1.051500e+01, double 2.400000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 0x3FE37CED916872B0, double 1.091700e+01, double 2.500000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 5.660000e-01, double 1.129300e+01, double 2.600000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 5.350000e-01, double 1.165200e+01, double 2.700000e+01, double 2.000000e+00, double 0.000000e+00, double 1.800000e-02, double 5.310000e-01, double 1.199700e+01, double 2.800000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 0x3FE3AE147AE147AE, double 1.239400e+01, double 2.900000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.860000e-01, double 1.285000e+01, double 3.000000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.500000e-01, double 1.327700e+01, double 3.100000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.120000e-01, double 1.368100e+01, double 3.200000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.670000e-01, double 1.406200e+01, double 3.300000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.200000e-01, double 1.441100e+01, double 3.400000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.130000e-01, double 1.475100e+01, double 3.500000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.570000e-01, double 1.511900e+01, double 3.600000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.840000e-01, double 1.550800e+01, double 3.700000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.700000e-01, double 1.588300e+01, double 3.800000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 5.790000e-01, double 1.626300e+01, double 3.900000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 5.850000e-01, double 1.665400e+01, double 4.000000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 5.480000e-01, double 1.702000e+01, double 4.100000e+01, double 6.000000e+00, double 0.000000e+00, double 5.400000e-02, double 5.360000e-01, double 1.737400e+01, double 4.200000e+01, double 6.000000e+00, double 0.000000e+00, double 5.400000e-02, double 5.500000e-01, double 1.774400e+01, double 4.300000e+01, double 7.000000e+00, double 0.000000e+00, double 6.300000e-02, double 5.320000e-01, double 1.810400e+01, double 4.400000e+01, double 7.000000e+00, double 0.000000e+00, double 6.300000e-02, double 5.040000e-01, double 1.844700e+01, double 4.500000e+01, double 7.000000e+00, double 0.000000e+00, double 6.300000e-02, double 4.960000e-01, double 1.878200e+01, double 4.600000e+01, double 9.000000e+00, double 0.000000e+00, double 8.100000e-02, double 5.170000e-01, double 1.913000e+01, double 4.700000e+01, double 9.000000e+00, double 0.000000e+00, double 8.100000e-02, double 5.270000e-01, double 1.948700e+01, double 4.800000e+01, double 9.000000e+00, double 0.000000e+00, double 8.100000e-02, double 5.160000e-01, double 1.983800e+01, double 4.900000e+01, double 1.000000e+01, double 0.000000e+00, double 1.800000e-01, double 4.970000e-01, double 2.017900e+01, double 5.000000e+01, double 1.000000e+01, double 0.000000e+00, double 1.800000e-01, double 4.890000e-01, double 2.051000e+01, double 5.100000e+01, double 1.100000e+01, double 0.000000e+00, double 1.980000e-01, double 5.020000e-01, double 2.085200e+01, double 5.200000e+01, double 1.400000e+01, double 0.000000e+00, double 4.000000e-01, double 5.010000e-01, double 2.119600e+01, double 5.300000e+01, double 1.400000e+01, double 0.000000e+00, double 4.000000e-01, double 4.910000e-01, double 2.153100e+01, double 5.400000e+01, double 1.500000e+01, double 0.000000e+00, double 4.290000e-01, double 4.970000e-01, double 2.187000e+01, double 5.500000e+01, double 2.000000e+01, double 0.000000e+00, double 1.808000e+00, double 5.040000e-01, double 2.221400e+01, double 5.600000e+01, double 2.000000e+01, double 0.000000e+00, double 1.808000e+00, double 5.040000e-01, double 2.255800e+01, double 5.700000e+01, double 2.100000e+01, double 0.000000e+00, double 1.898000e+00, double 4.950000e-01, double 2.289800e+01, double 5.800000e+01, double 2.700000e+01, double 0.000000e+00, double 2.441600e+01, double 4.860000e-01, double 2.323200e+01, double 5.900000e+01, double 2.700000e+01, double 0.000000e+00, double 2.441600e+01, double 4.840000e-01, double 2.356400e+01, double 6.000000e+01, double 3.600000e+01, double 0.000000e+00, double 3.255400e+01, double 4.830000e-01, double 2.389700e+01, double 6.100000e+01, double 7.300000e+01, double 0.000000e+00, double 6.601240e+02, double 4.750000e-01, double 2.422900e+01, double 6.200000e+01, double 1.800000e+01, double 0.000000e+00, double 1.627700e+02, double 5.150000e-01, double 2.444200e+01, double 3.200000e+04, double 5.800000e+01, double 0.000000e+00, double 2.000000e+00, double 2.450000e+01, double 4.532000e+00, double 0x3FEFE76C8B439581, double 3.130000e-01, double 1.000000e+00, double 2.000000e+00, double 2.450000e+01, double 4.532000e+00, double 8.930000e-01, double 0x3FEE04189374BC6A, double 2.000000e+00, double 2.000000e+00, double 2.450000e+01, double 1.809000e+00, double 8.810000e-01, double 1.563000e+00, double 3.000000e+00, double 2.000000e+00, double 2.000000e+01, double 1.810000e-01, double 0x3FEBEF9DB22D0E56, double 2.188000e+00, double 4.000000e+00, double 2.000000e+00, double 2.000000e+01, double 1.810000e-01, double 8.720000e-01, double 2.813000e+00, double 5.000000e+00, double 2.000000e+00, double 2.000000e+01, double 5.700000e-02, double 0x3FEBDF3B645A1CAC, double 3.438000e+00, double 6.000000e+00, double 2.000000e+00, double 2.000000e+01, double 1.800000e-02, double 8.600000e-01, double 4.045000e+00, double 7.000000e+00, double 2.000000e+00, double 2.000000e+01, double 1.800000e-02, double 0x3FEAD916872B020C, double 4.625000e+00, double 8.000000e+00, double 2.000000e+00, double 1.800000e+01, double 1.800000e-02, double 8.120000e-01, double 5.173000e+00, double 9.000000e+00, double 2.000000e+00, double 1.800000e+01, double 1.800000e-02, double 7.840000e-01, double 5.698000e+00, double 1.000000e+01, double 2.000000e+00, double 1.200000e+01, double 1.800000e-02, double 7.410000e-01, double 6.185000e+00, double 1.100000e+01, double 2.000000e+00, double 1.200000e+01, double 1.800000e-02, double 6.970000e-01, double 6.634000e+00, double 1.200000e+01, double 2.000000e+00, double 6.000000e+00, double 1.800000e-02, double 6.740000e-01, double 7.070000e+00, double 1.300000e+01, double 2.000000e+00, double 6.000000e+00, double 1.800000e-02, double 6.510000e-01, double 0x401DF7CED916872B, double 1.400000e+01, double 2.000000e+00, double 6.000000e+00, double 1.800000e-02, double 6.330000e-01, double 7.905000e+00, double 1.500000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 0x3FE38D4FDF3B645A, double 0x40209C28F5C28F5C, double 1.600000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 5.890000e-01, double 8.695000e+00, double 1.700000e+01, double 2.000000e+00, double 3.000000e+00, double 1.800000e-02, double 5.750000e-01, double 9.064000e+00, double 1.800000e+01, double 3.000000e+00, double 3.000000e+00, double 2.700000e-02, double 6.540000e-01, double 0x4022F7CED916872B, double 1.900000e+01, double 3.000000e+00, double 3.000000e+00, double 2.700000e-02, double 0x3FE72B020C49BA5E, double 0x4023EE978D4FDF3B, double 2.000000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 7.010000e-01, double 1.042600e+01, double 2.100000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.730000e-01, double 1.086600e+01, double 2.200000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 6.310000e-01, double 1.127900e+01, double 2.300000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.920000e-01, double 1.166900e+01, double 2.400000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.530000e-01, double 1.204200e+01, double 2.500000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.100000e-01, double 1.238600e+01, double 2.600000e+01, double 3.000000e+00, double 0.000000e+00, double 2.700000e-02, double 5.060000e-01, double 1.272100e+01, double 2.700000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.620000e-01, double 1.309100e+01, double 2.800000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.980000e-01, double 1.348800e+01, double 2.900000e+01, double 4.000000e+00, double 0.000000e+00, double 3.600000e-02, double 5.890000e-01, double 1.387300e+01, double 3.000000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 0x3FE36C8B43958106, double 1.426800e+01, double 3.100000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 6.200000e-01, double 1.467900e+01, double 3.200000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 5.800000e-01, double 1.506700e+01, double 3.300000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 5.320000e-01, double 1.542400e+01, double 3.400000e+01, double 5.000000e+00, double 0.000000e+00, double 4.500000e-02, double 5.170000e-01, double 1.577100e+01, double 3.500000e+01, double 6.000000e+00, double 0.000000e+00, double 5.400000e-02, double 5.170000e-01, double 1.612000e+01, double 3.600000e+01, double 6.000000e+00, double 0.000000e+00, double 5.400000e-02, double 5.090000e-01, double 1.646600e+01, double 3.700000e+01, double 6.000000e+00, double 0.000000e+00, double 5.400000e-02, double 5.060000e-01, double 1.680700e+01, double 3.800000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB26E978D4FDF3B, double 5.220000e-01, double 1.715800e+01, double 3.900000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB26E978D4FDF3B, double 5.310000e-01, double 1.751800e+01, double 4.000000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB26E978D4FDF3B, double 5.190000e-01, double 1.786900e+01, double 4.100000e+01, double 1.000000e+01, double 0.000000e+00, double 0x3FB70A3D70A3D70A, double 5.120000e-01, double 1.821500e+01, double 4.200000e+01, double 1.000000e+01, double 0.000000e+00, double 0x3FB70A3D70A3D70A, double 5.090000e-01, double 1.856300e+01, double 4.300000e+01, double 1.000000e+01, double 0.000000e+00, double 0x3FB70A3D70A3D70A, double 4.980000e-01, double 1.890200e+01, double 4.400000e+01, double 1.200000e+01, double 0.000000e+00, double 1.090000e-01, double 4.940000e-01, double 1.923900e+01, double 4.500000e+01, double 1.200000e+01, double 0.000000e+00, double 1.090000e-01, double 5.010000e-01, double 1.958000e+01, double 4.600000e+01, double 1.300000e+01, double 0.000000e+00, double 1.180000e-01, double 5.080000e-01, double 1.992500e+01, double 4.700000e+01, double 1.400000e+01, double 0.000000e+00, double 2.520000e-01, double 5.020000e-01, double 2.026900e+01, double 4.800000e+01, double 1.400000e+01, double 0.000000e+00, double 2.520000e-01, double 4.930000e-01, double 2.060600e+01, double 4.900000e+01, double 1.600000e+01, double 0.000000e+00, double 2.880000e-01, double 4.970000e-01, double 2.094400e+01, double 5.000000e+01, double 2.000000e+01, double 0.000000e+00, double 5.720000e-01, double 5.060000e-01, double 2.128800e+01, double 5.100000e+01, double 2.000000e+01, double 0.000000e+00, double 5.720000e-01, double 5.100000e-01, double 2.163500e+01, double 5.200000e+01, double 2.300000e+01, double 0.000000e+00, double 6.580000e-01, double 5.040000e-01, double 2.198000e+01, double 5.300000e+01, double 2.700000e+01, double 0.000000e+00, double 2.441000e+00, double 4.960000e-01, double 2.231900e+01, double 5.400000e+01, double 2.700000e+01, double 0.000000e+00, double 2.441000e+00, double 4.930000e-01, double 2.265600e+01, double 5.500000e+01, double 3.200000e+01, double 0.000000e+00, double 2.893000e+00, double 4.900000e-01, double 2.299300e+01, double 5.600000e+01, double 3.700000e+01, double 0.000000e+00, double 3.345800e+01, double 4.820000e-01, double 2.332600e+01, double 5.700000e+01, double 3.700000e+01, double 0.000000e+00, double 3.345800e+01, double 4.580000e-01, double 2.365600e+01, double 5.800000e+01, double 1.200000e+01, double 0.000000e+00, double 1.085100e+01, double 5.000000e-01, double 2.393700e+01, double 2.400000e+04, double 5.900000e+01, double 0.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x4031D3345F831D56, double 0x3FE650E39FF80286, double 0x3FCE51E6FFA05619, double 1.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x4031D3345F831D56, double 0x3FDD1F206061836C, double 0x3FE6B9A39FD7CC2F, double 2.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x3FFC8520A0DF5E1F, double 0x3FDB9CB86036D507, double 0x3FF2E93260D04F63, double 3.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x3FFC8520A0DF5E1F, double 0x3FDB21719F7F8CA8, double 0x3FFA6A9B9F833D8D, double 4.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FC6D0E700DE29F5, double 0x3FDAC3E65FD7115B, double 0x4000EE3C206CB205, double 5.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FC6D0E700DE29F5, double 0x3FDA576A7FD09AB8, double 0x40049D383F6194C5, double 6.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FACDC38C02EE771, double 0x3FD9F2393FB4176C, double 0x4008403BBF73C8D0, double 7.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FACDC38C02EE771, double 0x3FD9949C602EA515, double 0x400BD56B9F605804, double 8.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FACDC38C02EE771, double 0x3FD93340C075B7A3, double 0x400F5B1C407D739E, double 9.000000e+00, double 2.000000e+00, double 1.200000e+01, double 0x3F9240B8BFC0180A, double 0x3FD8CA76FF995B64, double 0x401167EA3FFA40F9, double 1.000000e+01, double 2.000000e+00, double 1.200000e+01, double 0x3F9240B8BFC0180A, double 0x3FD8595E1FF0E129, double 0x4013192760413351, double 1.100000e+01, double 2.000000e+00, double 1.000000e+01, double 0x3F9240B8BFC0180A, double 0x3FD7E01D7FA051CD, double 0x4014C0BCBFB968ED, double 1.200000e+01, double 2.000000e+00, double 1.000000e+01, double 0x3F9240B8BFC0180A, double 0x3FD75F3E00382B8D, double 0x40165E3AFFDB4206, double 1.300000e+01, double 2.000000e+00, double 1.000000e+01, double 0x3F9240B8BFC0180A, double 0x3FD6D769BF9D7582, double 0x4017F14BA01182DF, double 1.400000e+01, double 2.000000e+00, double 9.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD6511C603B879E, double 0x401979AEFFB2524D, double 1.500000e+01, double 2.000000e+00, double 9.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD5C6D2002C3989, double 0x401AF73B7FDDDBBE, double 1.600000e+01, double 2.000000e+00, double 6.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD545135FD92E85, double 0x401C69DAFFEB5D31, double 1.700000e+01, double 2.000000e+00, double 6.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD5264D9FCE9A8B, double 0x401DD18900444884, double 1.800000e+01, double 2.000000e+00, double 6.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD61DCAC01BFE27, double 0x401F2E51400E8DE2, double 1.900000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD82EDA3FF45925, double 0x402068BBC00A1BB8, double 2.000000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD9635C00060A30, double 0x40215A51400E8DE2, double 2.100000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD90A0AA041FF54, double 0x4022404FFFF29407, double 2.200000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD82ACEC06CED13, double 0x40231B20601CCB3D, double 2.300000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD738B7E0094831, double 0x4023EB37BFDFD466, double 2.400000e+01, double 3.000000e+00, double 0.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD65630A07E31AC, double 0x4024B113800F84D8, double 2.500000e+01, double 3.000000e+00, double 0.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD5BD35DFA4AF91, double 0x40256D35A1A27C97, double 2.600000e+01, double 3.000000e+00, double 0.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD601917FEFA468, double 0x40262021C044284E, double 2.700000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD6C5CC7F975C4A, double 0x4026E51F81A5870E, double 2.800000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD6EB2E7FCDC92A, double 0x4027B9BB7EC6AF7C, double 2.900000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD63CB0E05D2270, double 0x402881097FDB8272, double 3.000000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD56F75808212E2, double 0x40293C1B7FB84704, double 3.100000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD539A4A0779E0B, double 0x4029EBF180E13BF0, double 3.200000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD555EA7F879705, double 0x402AA4D3613B843B, double 3.300000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD5449DBFD528CD, double 0x402B6536BED8EE43, double 3.400000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD536573F81F60F, double 0x402C187980F55DE6, double 3.500000e+01, double 6.000000e+00, double 0.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD52E3D20831381, double 0x402CCF83BE6601BD, double 3.600000e+01, double 6.000000e+00, double 0.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD547508039E5EF, double 0x402D89763FF83D94, double 3.700000e+01, double 7.000000e+00, double 0.000000e+00, double 0x3FAFF1435FE24EFB, double 0x3FD54A18DFC23F4D, double 0x402E43607F9C9852, double 3.800000e+01, double 7.000000e+00, double 0.000000e+00, double 0x3FAFF1435FE24EFB, double 0x3FD52C81A02012E7, double 0x402EFCF3DF604D48, double 3.900000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB240B8C02E0B8A, double 0x3FD4FA2E604BD653, double 0x402FB406FFCE81D9, double 4.000000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB240B8C02E0B8A, double 0x3FD4C5CC9FCDB29D, double 0x403034628027D88C, double 4.100000e+01, double 9.000000e+00, double 0.000000e+00, double 0x3FB488CFDFE12D80, double 0x3FD4B98C804DE588, double 0x40308CDBBFAED719, double 4.200000e+01, double 1.000000e+01, double 0.000000e+00, double 0x3FB6D0E7000242F6, double 0x3FD4920F5F77118D, double 0x4030E8209FB2B84F, double 4.300000e+01, double 1.000000e+01, double 0.000000e+00, double 0x3FB6D0E7000242F6, double 0x3FD45D369FD7D4C6, double 0x403140F3FF40BD5F, double 4.400000e+01, double 1.100000e+01, double 0.000000e+00, double 0x3FB918FDFFED0219, double 0x3FD43843DF8F0278, double 0x40319711805B0433, double 4.500000e+01, double 1.200000e+01, double 0.000000e+00, double 0x3FBB61152157F20D, double 0x3FD4336F1FBFDB44, double 0x4031EE709FA54C55, double 4.600000e+01, double 1.300000e+01, double 0.000000e+00, double 0x3FBDA92C409D2084, double 0x3FD442AE200E684E, double 0x4032466B20098AC3, double 4.700000e+01, double 1.400000e+01, double 0.000000e+00, double 0x3FBFF1435FE24EFB, double 3.165600e-01, double 0x40329E814006804D, double 4.800000e+01, double 1.500000e+01, double 0.000000e+00, double 0x3FC11CAD3F93BEB9, double 0x3FD4309820143EF4, double 0x4032F65120840406, double 4.900000e+01, double 1.600000e+01, double 0.000000e+00, double 0x3FC240B8C02E0B8A, double 0x3FD411A280593CEE, double 0x40334D8EDF2B7422, double 5.000000e+01, double 1.700000e+01, double 0.000000e+00, double 0x3FC364C440C8585A, double 0x3FD3F1D7FFECF0EB, double 0x4033A3FD80C9BEFB, double 5.100000e+01, double 1.800000e+01, double 0.000000e+00, double 0x3FC488CFDF733A01, double 0x3FD3E8846018E6CE, double 0x4033F969C08DFA29, double 5.200000e+01, double 2.000000e+01, double 0.000000e+00, double 0x3FD6C310E03BD939, double 0x3FD3EF0DA037D494, double 0x40344FC47FF73124, double 5.300000e+01, double 2.100000e+01, double 0.000000e+00, double 0x3FD7E66B5FDB98FF, double 0x3FD3F5B5FF80D426, double 0x4034A6997F986694, double 5.400000e+01, double 2.300000e+01, double 0.000000e+00, double 0x3FDA2D203FF7A2F5, double 0x3FD3E7AF807A7D8E, double 0x4034FD347F638D6E, double 5.500000e+01, double 2.400000e+01, double 0.000000e+00, double 0x3FE5A52AA022DBDE, double 0x3FD3CA0F2061FDD5, double 0x4035533ABFEF6EB8, double 5.600000e+01, double 2.600000e+01, double 0.000000e+00, double 0x3FE772EE1FBEF357, double 0x3FD3B81EBFDEA7C1, double 0x4035A816BF5F2600, double 5.700000e+01, double 2.800000e+01, double 0.000000e+00, double 0x3FE940B19FE47B2E, double 0x3FD3D725E0532B3A, double 0x4035FCF7C0965DA5, double 5.800000e+01, double 3.100000e+01, double 0.000000e+00, double 0x40061A5FBFD91E6A, double 0x3FD4EF6BC00EF0AB, double 0x403652814006804D, double 5.900000e+01, double 3.400000e+01, double 0.000000e+00, double 0x40083DF55FBE00AC, double 0x3FDAA117DF9218BE, double 0x4036A917BF396653, double 2.205000e+04, double 5.900000e+01, double 0.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x4031D3345F831D56, double 0x3FE513EF9FFA4AA3, double 0x3FCBDB8CDF882188, double 1.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x4031D3345F831D56, double 0x3FDBAEFAC0613FC7, double 0x3FE4E1CCC0266508, double 2.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x3FFC8520A0DF5E1F, double 0x3FD9ED61802B3C21, double 0x3FF1619D00AC4D50, double 3.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x3FFC8520A0DF5E1F, double 0x3FD96C3EDF862F51, double 0x3FF849DF3F153EAC, double 4.000000e+00, double 2.000000e+00, double 1.500000e+01, double 0x3FFC8520A0DF5E1F, double 0x3FD917FB1F81B6B5, double 0x3FFF2614BF54BF1F, double 5.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FC6D0E700DE29F5, double 0x3FD8C123A031FDEE, double 0x4002F967003F4007, double 6.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FC6D0E700DE29F5, double 0x3FD85B55C06AAD8D, double 0x40065666FF688072, double 7.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FACDC38C02EE771, double 0x3FD805133FA2D832, double 0x4009A889006F3BA2, double 8.000000e+00, double 2.000000e+00, double 1.300000e+01, double 0x3FACDC38C02EE771, double 0x3FD7AF84006EFF81, double 0x400CEE6BBF6BBB3A, double 9.000000e+00, double 2.000000e+00, double 1.200000e+01, double 0x3F9240B8BFC0180A, double 0x3FD755175FA94418, double 0x40101368C032E07D, double 1.000000e+01, double 2.000000e+00, double 1.200000e+01, double 0x3F9240B8BFC0180A, double 0x3FD6F93160307D87, double 0x4011A84FE01223EF, double 1.100000e+01, double 2.000000e+00, double 1.200000e+01, double 0x3F9240B8BFC0180A, double 0x3FD6968A606BA595, double 0x40133570FFC775F6, double 1.200000e+01, double 2.000000e+00, double 1.000000e+01, double 0x3F9240B8BFC0180A, double 0x3FD62D1A7FDE06B1, double 0x4014BA64401B7902, double 1.300000e+01, double 2.000000e+00, double 1.000000e+01, double 0x3F9240B8BFC0180A, double 0x3FD5BD552017F86F, double 0x401636D3DFBB91E7, double 1.400000e+01, double 2.000000e+00, double 1.000000e+01, double 0x3F9240B8BFC0180A, double 0x3FD548DA00895F31, double 0x4017AA7B7FFE1214, double 1.500000e+01, double 2.000000e+00, double 9.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD4DD70BFC1DD97, double 0x40191527C03869D4, double 1.600000e+01, double 2.000000e+00, double 9.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD4D40AE0140D8F, double 0x401A76B48024D374, double 1.700000e+01, double 2.000000e+00, double 9.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD5D81AFFF1CE75, double 0x401BCF0C402A3C95, double 1.800000e+01, double 3.000000e+00, double 6.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD7FFBEBFCC66D4, double 0x401D6F0B000E42B9, double 1.900000e+01, double 3.000000e+00, double 6.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD95A53A032875E, double 0x401F50FD9FD36F7E, double 2.000000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD9224F1FCDD0AE, double 0x40208F3C40222EFF, double 2.100000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD85E4A3FB69BAA, double 0x40216BF2000D1613, double 2.200000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD78341DFAF8EB5, double 0x40223EE4FFF46C79, double 2.300000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD6ADB3FF98C95C, double 0x40230866DFDDF696, double 2.400000e+01, double 3.000000e+00, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD5DB460084232A, double 0x4023C8D23FFE47C4, double 2.500000e+01, double 3.000000e+00, double 0.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD559571FDDA721, double 0x4024808821A21137, double 2.600000e+01, double 3.000000e+00, double 0.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD5A392DFC9B244, double 0x40252FECA0A7AAD4, double 2.700000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD672990027D441, double 0x4025F1D7C11C9562, double 2.800000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD6B0726067155A, double 0x4026C3F3E0370CDD, double 2.900000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD618F83FD365D4, double 0x402789BA1E745F4D, double 3.000000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD55D73A0581C18, double 0x4028440DE16A12C3, double 3.100000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD536422024D261, double 0x4028F3C73EEE5259, double 3.200000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD56315605BD7BA, double 0x4029AD2740B6A975, double 3.300000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD560A9C07AA65C, double 0x402A6E9B2159161C, double 3.400000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD55F0C5FB4C671, double 0x402B235A3F10B707, double 3.500000e+01, double 6.000000e+00, double 0.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD563D5FFF3B815, double 0x402BDC5CBF1DB7A1, double 3.600000e+01, double 6.000000e+00, double 0.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD587A9002DBC15, double 0x402C98ACC0BDCAD1, double 3.700000e+01, double 7.000000e+00, double 0.000000e+00, double 0x3FAFF1435FE24EFB, double 0x3FD592B99FB83077, double 0x402D5547BEDB7282, double 3.800000e+01, double 7.000000e+00, double 0.000000e+00, double 0x3FAFF1435FE24EFB, double 0x3FD57A873FCFCEB5, double 0x402E11C30171F007, double 3.900000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB240B8C02E0B8A, double 0x3FD547F0A077C067, double 0x402ECBD8E0008638, double 4.000000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB240B8C02E0B8A, double 0x3FD4F97D1FF77D61, double 0x402F839B7E7627A5, double 4.100000e+01, double 9.000000e+00, double 0.000000e+00, double 0x3FB488CFDFE12D80, double 0x3FD4A1549FA5B36A, double 0x40301BBC5F973F4C, double 4.200000e+01, double 9.000000e+00, double 0.000000e+00, double 0x3FB488CFDFE12D80, double 0x3FD45326DF790810, double 0x403073EE1F2CEBF1, double 4.300000e+01, double 1.000000e+01, double 0.000000e+00, double 0x3FB6D0E7000242F6, double 0x3FD43EBD5FC765DB, double 0x4030C9E260B2C83F, double 4.400000e+01, double 1.100000e+01, double 0.000000e+00, double 0x3FB918FDFFED0219, double 0x3FD4539A9F86A122, double 1.713200e+01, double 4.500000e+01, double 1.200000e+01, double 0.000000e+00, double 0x3FBB61152157F20D, double 0x3FD479FB5F987D20, double 0x40317AC73FC511ED, double 4.600000e+01, double 1.300000e+01, double 0.000000e+00, double 0x3FBDA92C409D2084, double 0x3FD489539FD40A1D, double 0x4031D42A00848A3E, double 4.700000e+01, double 1.400000e+01, double 0.000000e+00, double 0x3FBFF1435FE24EFB, double 0x3FD4808EBFBAAF58, double 0x40322D701F4CCC61, double 4.800000e+01, double 1.500000e+01, double 0.000000e+00, double 0x3FC11CAD3F93BEB9, double 0x3FD46469803B1294, double 0x40328639A034BE4E, double 4.900000e+01, double 1.600000e+01, double 0.000000e+00, double 0x3FC240B8C02E0B8A, double 0x3FD43B67807DFAE9, double 0x4032DE40A0034026, double 5.000000e+01, double 1.700000e+01, double 0.000000e+00, double 0x3FC364C440C8585A, double 0x3FD4146ADFE1964C, double 0x403335515F6E24A1, double 5.100000e+01, double 1.800000e+01, double 0.000000e+00, double 0x3FC488CFDF733A01, double 0x3FD407BAC0410971, double 0x40338B43BF727137, double 5.200000e+01, double 2.000000e+01, double 0.000000e+00, double 0x3FC6D0E700DE29F5, double 0x3FD40CC2FF7721A8, double 0x4033E2189F33368E, double 5.300000e+01, double 2.100000e+01, double 0.000000e+00, double 0x3FD7E66B5FDB98FF, double 0x3FD4143E5F7AFE93, double 0x40343968405B39E2, double 5.400000e+01, double 2.300000e+01, double 0.000000e+00, double 0x3FDA2D203FF7A2F5, double 0x3FD409955FCE1BD7, double 0x4034908B7FFB62E2, double 5.500000e+01, double 2.400000e+01, double 0.000000e+00, double 0x3FDB507AA073ED26, double 0x3FD3F0A2E0145247, double 0x4034E7343FA2AD3F, double 5.600000e+01, double 2.600000e+01, double 0.000000e+00, double 0x3FE772EE1FBEF357, double 0x3FD3DE2DDFD9914E, double 0x40353CD83FC7962C, double 5.700000e+01, double 2.800000e+01, double 0.000000e+00, double 0x3FE940B19FE47B2E, double 0x3FD3ECB51F8703EB, double 0x403592B4004D2CD9, double 5.800000e+01, double 3.000000e+01, double 0.000000e+00, double 0x3FEB0E7540405959, double 0x3FD4F28A00746F13, double 0x4035E81C40A866BC, double 5.900000e+01, double 3.300000e+01, double 0.000000e+00, double 0x4007876E2099FE6E, double 0x3FDA89C9007E43ED, double 0x40363DB9C0808E30, double 1.600000e+04, double 5.500000e+01, double 0.000000e+00, double 3.000000e+00, double 1.500000e+01, double 0x403ABCCE9F34E40D, double 0x3FE650E39FF80286, double 0x3FCE51E6FFA05619, double 1.000000e+00, double 3.000000e+00, double 1.500000e+01, double 0x403ABCCE9F34E40D, double 0x3FDD1F206061836C, double 0x3FE6B9A39FD7CC2F, double 2.000000e+00, double 3.000000e+00, double 1.500000e+01, double 0x400563D87F5D833E, double 0x3FDB9CB86036D507, double 0x3FF2E93260D04F63, double 3.000000e+00, double 3.000000e+00, double 1.500000e+01, double 0x400563D87F5D833E, double 0x3FDB21719F7F8CA8, double 0x3FFA6A9B9F833D8D, double 4.000000e+00, double 3.000000e+00, double 1.300000e+01, double 0x3FD11CAD3F93BEB9, double 0x3FDAC3E65FD7115B, double 0x4000EE3C206CB205, double 5.000000e+00, double 3.000000e+00, double 1.300000e+01, double 0x3FD11CAD3F93BEB9, double 0x3FDA576A7FD09AB8, double 0x40049D383F6194C5, double 6.000000e+00, double 3.000000e+00, double 1.300000e+01, double 0x3FB5A52A9FD0653F, double 0x3FD9F2393FB4176C, double 0x4008403BBF73C8D0, double 7.000000e+00, double 3.000000e+00, double 1.300000e+01, double 0x3FB5A52A9FD0653F, double 0x3FD9949C602EA515, double 0x400BD56B9F605804, double 8.000000e+00, double 3.000000e+00, double 1.300000e+01, double 0x3FB5A52A9FD0653F, double 0x3FD93340C075B7A3, double 0x400F5B1C407D739E, double 9.000000e+00, double 3.000000e+00, double 1.200000e+01, double 0x3F9B61151FA0240F, double 0x3FD8CA76FF995B64, double 0x401167EA3FFA40F9, double 1.000000e+01, double 3.000000e+00, double 1.200000e+01, double 0x3F9B61151FA0240F, double 0x3FD8595E1FF0E129, double 0x4013192760413351, double 1.100000e+01, double 3.000000e+00, double 1.000000e+01, double 0x3F9B61151FA0240F, double 0x3FD7E01D7FA051CD, double 0x4014C0BCBFB968ED, double 1.200000e+01, double 3.000000e+00, double 1.000000e+01, double 0x3F9B61151FA0240F, double 0x3FD75F3E00382B8D, double 0x40165E3AFFDB4206, double 1.300000e+01, double 3.000000e+00, double 1.000000e+01, double 0x3F9B61151FA0240F, double 0x3FD6D769A079FFEE, double 0x4017F14BA01182DF, double 1.400000e+01, double 3.000000e+00, double 9.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD651180051DF71, double 0x401979AEFFB2524D, double 1.500000e+01, double 3.000000e+00, double 9.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD5C684606ECD0A, double 0x401AF73B7FDDDBBE, double 1.600000e+01, double 3.000000e+00, double 6.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD540F42011B21E, double 0x401C69DAFFEB5D31, double 1.700000e+01, double 3.000000e+00, double 6.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD502BF4024E6C8, double 0x401DD18900444884, double 1.800000e+01, double 3.000000e+00, double 6.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD58A710025F337, double 0x401F2E51400E8DE2, double 1.900000e+01, double 4.000000e+00, double 3.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD6B1C63FD9A38F, double 0x40205B4740057E9A, double 2.000000e+01, double 4.000000e+00, double 3.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD75166BFD29360, double 0x4021332CA01C14B4, double 2.100000e+01, double 4.000000e+00, double 3.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD6FFE85F9CC00C, double 0x402201DC9FFE8D8F, double 2.200000e+01, double 4.000000e+00, double 3.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD641F5A04D096B, double 0x4022C79E5FFCEACD, double 2.300000e+01, double 4.000000e+00, double 3.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD579DB803B461F, double 0x402384C1FFEA308B, double 2.400000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD4ED61802B3C21, double 0x4024399D3E69C81B, double 2.500000e+01, double 4.000000e+00, double 0.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD4FD65FFC1CA43, double 0x4024E68A3F8982CB, double 2.600000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD567A4207D9B59, double 0x40259F8BDEC5F395, double 2.700000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD57460BFDE51DA, double 0x40266315E112D4EF, double 2.800000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD518183F91E647, double 0x40271C1FA0AF3791, double 2.900000e+01, double 5.000000e+00, double 0.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD4E860BFBBF5C3, double 0x4027CB567F6895EC, double 3.000000e+01, double 6.000000e+00, double 0.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD4ED58FFB1B7AF, double 0x402881097FDB8272, double 3.100000e+01, double 6.000000e+00, double 0.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD4CDFB9FE2CDAF, double 0x40293C1B7FB84704, double 3.200000e+01, double 6.000000e+00, double 0.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD4B53620561467, double 0x4029EBF180E13BF0, double 3.300000e+01, double 7.000000e+00, double 0.000000e+00, double 0x3FAFF1435FE24EFB, double 0x3FD4A3BF1FC39D57, double 0x402A9E67E190A930, double 3.400000e+01, double 7.000000e+00, double 0.000000e+00, double 0x3FAFF1435FE24EFB, double 0x3FD4B2A46024B676, double 0x402B52CD5EC303F6, double 3.500000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB240B8C02E0B8A, double 0x3FD4AFD6C0493962, double 0x402C06E51ED329DE, double 3.600000e+01, double 8.000000e+00, double 0.000000e+00, double 0x3FB240B8C02E0B8A, double 0x3FD4A6801FA89A71, double 0x402CBA5B6078E69C, double 3.700000e+01, double 9.000000e+00, double 0.000000e+00, double 0x3FB488CFDFE12D80, double 0x3FD4BD4DFFCE6814, double 0x402D6B71001D5C31, double 3.800000e+01, double 1.000000e+01, double 0.000000e+00, double 0x3FB6D0E7000242F6, double 0x3FD4AFC7DFB949C9, double 0x402E2326A15478FE, double 3.900000e+01, double 1.000000e+01, double 0.000000e+00, double 0x3FB6D0E7000242F6, double 0x3FD48732C02CE77B, double 0x402ED694BF3F4590, double 4.000000e+01, double 1.100000e+01, double 0.000000e+00, double 0x3FB918FDFFED0219, double 0x3FD4679A007A56E7, double 0x402F84D0BEC9D4CB, double 4.100000e+01, double 1.200000e+01, double 0.000000e+00, double 0x3FBB61152157F20D, double 0x3FD460F8C06806F2, double 0x40301AC43F5F9160, double 4.200000e+01, double 1.300000e+01, double 0.000000e+00, double 0x3FBDA92C409D2084, double 0x3FD46699407224CF, double 0x4030738FFFBCE421, double 4.300000e+01, double 1.400000e+01, double 0.000000e+00, double 0x3FBFF1435FE24EFB, double 0x3FD456F0A0194326, double 0x4030CC2B80B74A85, double 4.400000e+01, double 1.500000e+01, double 0.000000e+00, double 0x3FC11CAD3F93BEB9, double 0x3FD433ABDFD375F0, double 0x4031241F3F606820, double 4.500000e+01, double 1.600000e+01, double 0.000000e+00, double 0x3FC240B8C02E0B8A, double 0x3FD40E3D004CBD2E, double 0x40317B16C035E595, double 4.600000e+01, double 1.700000e+01, double 0.000000e+00, double 0x3FC364C440C8585A, double 0x3FD4003A1FEA08D0, double 0x4031D0D9A019E65B, double 4.700000e+01, double 1.900000e+01, double 0.000000e+00, double 0x3FC5ACDB600D86D1, double 0x3FD404ABE031F331, double 0x403227829F8210E7, double 4.800000e+01, double 2.000000e+01, double 0.000000e+00, double 0x3FC6D0E700DE29F5, double 0x3FD40F5D1FEBADB9, double 0x40327EAF00332BA6, double 4.900000e+01, double 2.200000e+01, double 0.000000e+00, double 0x3FC918FDFFED0219, double 0x3FD40C6E7FDCD174, double 0x4032D5C37F46313D, double 5.000000e+01, double 2.300000e+01, double 0.000000e+00, double 0x3FCA3D09A0BDA53D, double 0x3FD40127601ED739, double 0x40332C8FE0B3339F, double 5.100000e+01, double 2.500000e+01, double 0.000000e+00, double 0x3FCC85209FCC7D60, double 0x3FD401313FB56F05, double 0x403382AABF5BCB02, double 5.200000e+01, double 2.700000e+01, double 0.000000e+00, double 0x3FCECD37BF11ABD8, double 0x3FD408F9DFE69633, double 0x4033D98A6040B278, double 5.300000e+01, double 2.900000e+01, double 0.000000e+00, double 0x3FE0809F80410B97, double 0x3FD429701FE76ACD, double 0x403430A80064A9CE, double 5.400000e+01, double 3.100000e+01, double 0.000000e+00, double 0x3FE1A3F9E033E568, double 0x3FD528C5FFDCA235, double 0x4034878CFF576394, double 5.500000e+01, double 3.300000e+01, double 0.000000e+00, double 0x3FE2C7545FD3A52E, double 0x3FDAC3C7C073781D, double 0x4034DDCEFFACF3E9, double 4.800000e+04, double 3.700000e+01, double 0.000000e+00, double 1.000000e+00, double 4.532000e+00, double 1.000000e+00, double -8.240000e+00, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00, double 9.040000e-01, double 0x3FEFA5E353F7CED9, double -8.240000e+00, double 1.875000e+00, double 2.000000e+00, double 1.000000e+00, double 2.900000e-02, double 0x3FEFA5E353F7CED9, double -8.240000e+00, double 3.750000e+00, double 3.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEF645A1CAC0831, double -8.240000e+00, double 5.438000e+00, double 4.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEF851EB851EB85, double -8.240000e+00, double 6.857000e+00, double 5.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEF7CED916872B0, double -8.240000e+00, double 8.109000e+00, double 6.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEF5C28F5C28F5C, double -8.240000e+00, double 9.237000e+00, double 7.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEEF9DB22D0E560, double -8.240000e+00, double 1.020200e+01, double 8.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEE872B020C49BA, double -8.240000e+00, double 1.108300e+01, double 9.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 9.290000e-01, double -8.240000e+00, double 1.186500e+01, double 1.000000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 9.060000e-01, double -7.447000e+00, double 1.255400e+01, double 1.100000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 8.830000e-01, double -7.447000e+00, double 1.319500e+01, double 1.200000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 8.440000e-01, double -7.447000e+00, double 1.378100e+01, double 1.300000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 7.920000e-01, double -7.447000e+00, double 1.430900e+01, double 1.400000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 7.470000e-01, double -7.447000e+00, double 1.480300e+01, double 1.500000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 6.890000e-01, double -7.447000e+00, double 1.525000e+01, double 1.600000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 6.440000e-01, double -7.447000e+00, double 1.566700e+01, double 1.700000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 5.920000e-01, double -7.447000e+00, double 1.606800e+01, double 1.800000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 5.530000e-01, double -7.447000e+00, double 1.640900e+01, double 1.900000e+01, double 2.000000e+00, double 1.800000e-02, double 8.500000e-01, double -7.447000e+00, double 1.704500e+01, double 2.000000e+01, double 2.000000e+00, double 1.800000e-02, double 8.110000e-01, double -6.990000e+00, double 1.760700e+01, double 2.100000e+01, double 2.000000e+00, double 1.800000e-02, double 0x3FE78D4FDF3B645A, double -6.990000e+00, double 1.809700e+01, double 2.200000e+01, double 2.000000e+00, double 1.800000e-02, double 6.650000e-01, double -6.990000e+00, double 1.852800e+01, double 2.300000e+01, double 2.000000e+00, double 1.800000e-02, double 6.100000e-01, double -6.990000e+00, double 1.893100e+01, double 2.400000e+01, double 2.000000e+00, double 1.800000e-02, double 5.440000e-01, double -6.990000e+00, double 1.929500e+01, double 2.500000e+01, double 2.000000e+00, double 1.800000e-02, double 5.280000e-01, double -6.990000e+00, double 1.963600e+01, double 2.600000e+01, double 3.000000e+00, double 5.400000e-02, double 6.210000e-01, double -6.990000e+00, double 2.003800e+01, double 2.700000e+01, double 3.000000e+00, double 5.400000e-02, double 6.730000e-01, double -6.990000e+00, double 2.048600e+01, double 2.800000e+01, double 3.000000e+00, double 5.400000e-02, double 6.350000e-01, double -6.990000e+00, double 2.090000e+01, double 2.900000e+01, double 4.000000e+00, double 1.140000e-01, double 6.260000e-01, double -6.990000e+00, double 2.130600e+01, double 3.000000e+01, double 4.000000e+00, double 1.140000e-01, double 6.360000e-01, double 0xC018147AE147AE14, double 2.172200e+01, double 3.100000e+01, double 5.000000e+00, double 4.520000e-01, double 0x3FE3AE147AE147AE, double 0xC018147AE147AE14, double 2.212800e+01, double 3.200000e+01, double 5.000000e+00, double 4.520000e-01, double 5.790000e-01, double 0xC018147AE147AE14, double 2.251300e+01, double 3.300000e+01, double 5.000000e+00, double 4.520000e-01, double 5.510000e-01, double 0xC018147AE147AE14, double 2.287700e+01, double 3.400000e+01, double 7.000000e+00, double 6.330000e+00, double 5.520000e-01, double -5.229000e+00, double 2.324100e+01, double 3.500000e+01, double 7.000000e+00, double 6.330000e+00, double 5.590000e-01, double -5.229000e+00, double 2.361600e+01, double 3.600000e+01, double 1.100000e+01, double 0x4023E4DD2F1A9FBE, double 5.280000e-01, double -5.229000e+00, double 2.397400e+01, double 3.700000e+01, double 1.700000e+01, double 1.537270e+02, double 4.790000e-01, double -5.229000e+00, double 2.431300e+01, double 4.410000e+04, double 3.800000e+01, double 0.000000e+00, double 1.000000e+00, double 4.532000e+00, double 1.000000e+00, double -8.240000e+00, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00, double 9.040000e-01, double 0x3FEF74BC6A7EF9DB, double -8.240000e+00, double 1.723000e+00, double 2.000000e+00, double 1.000000e+00, double 2.900000e-02, double 0x3FEF74BC6A7EF9DB, double -8.240000e+00, double 3.445000e+00, double 3.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEF6C8B43958106, double -8.240000e+00, double 5.057000e+00, double 4.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEF851EB851EB85, double -8.240000e+00, double 6.422000e+00, double 5.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEF74BC6A7EF9DB, double -8.240000e+00, double 7.609000e+00, double 6.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEF4BC6A7EF9DB2, double -8.240000e+00, double 8.710000e+00, double 7.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEEF1A9FBE76C8B, double -8.240000e+00, double 9.662000e+00, double 8.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEE5604189374BC, double -8.240000e+00, double 1.051500e+01, double 9.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 9.300000e-01, double -8.240000e+00, double 1.129300e+01, double 1.000000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 9.140000e-01, double -7.447000e+00, double 1.200900e+01, double 1.100000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 8.700000e-01, double -7.447000e+00, double 1.262500e+01, double 1.200000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEB0A3D70A3D70A, double -7.447000e+00, double 1.321000e+01, double 1.300000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 8.000000e-01, double -7.447000e+00, double 1.374800e+01, double 1.400000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 7.490000e-01, double -7.447000e+00, double 1.424100e+01, double 1.500000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 7.010000e-01, double -7.447000e+00, double 1.469500e+01, double 1.600000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 6.530000e-01, double -7.447000e+00, double 1.512500e+01, double 1.700000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 5.900000e-01, double -7.447000e+00, double 1.550800e+01, double 1.800000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 6.160000e-01, double -7.447000e+00, double 1.589100e+01, double 1.900000e+01, double 2.000000e+00, double 1.800000e-02, double 8.600000e-01, double -7.447000e+00, double 1.653700e+01, double 2.000000e+01, double 2.000000e+00, double 1.800000e-02, double 0x3FEA5604189374BC, double -6.990000e+00, double 1.711200e+01, double 2.100000e+01, double 2.000000e+00, double 1.800000e-02, double 7.620000e-01, double -6.990000e+00, double 1.762100e+01, double 2.200000e+01, double 2.000000e+00, double 1.800000e-02, double 0x3FE604189374BC6A, double -6.990000e+00, double 1.807300e+01, double 2.300000e+01, double 2.000000e+00, double 1.800000e-02, double 6.120000e-01, double -6.990000e+00, double 1.847000e+01, double 2.400000e+01, double 2.000000e+00, double 1.800000e-02, double 5.940000e-01, double -6.990000e+00, double 1.884900e+01, double 2.500000e+01, double 3.000000e+00, double 2.700000e-02, double 6.580000e-01, double -6.990000e+00, double 1.927100e+01, double 2.600000e+01, double 3.000000e+00, double 2.700000e-02, double 7.060000e-01, double -6.990000e+00, double 1.974100e+01, double 2.700000e+01, double 3.000000e+00, double 5.400000e-02, double 6.600000e-01, double -6.990000e+00, double 2.017700e+01, double 2.800000e+01, double 3.000000e+00, double 5.400000e-02, double 6.060000e-01, double -6.990000e+00, double 2.057600e+01, double 2.900000e+01, double 3.000000e+00, double 5.400000e-02, double 5.650000e-01, double -6.990000e+00, double 2.095000e+01, double 3.000000e+01, double 4.000000e+00, double 1.140000e-01, double 5.600000e-01, double 0xC018147AE147AE14, double 2.131600e+01, double 3.100000e+01, double 4.000000e+00, double 1.140000e-01, double 5.790000e-01, double 0xC018147AE147AE14, double 2.169900e+01, double 3.200000e+01, double 5.000000e+00, double 4.520000e-01, double 5.670000e-01, double 0xC018147AE147AE14, double 2.207800e+01, double 3.300000e+01, double 5.000000e+00, double 4.520000e-01, double 5.340000e-01, double 0xC018147AE147AE14, double 2.243800e+01, double 3.400000e+01, double 5.000000e+00, double 4.520000e-01, double 5.140000e-01, double -5.229000e+00, double 2.278200e+01, double 3.500000e+01, double 7.000000e+00, double 6.330000e+00, double 5.200000e-01, double -5.229000e+00, double 2.313300e+01, double 3.600000e+01, double 7.000000e+00, double 6.330000e+00, double 5.180000e-01, double -5.229000e+00, double 2.348400e+01, double 3.700000e+01, double 7.000000e+00, double 6.330000e+00, double 5.070000e-01, double -5.229000e+00, double 2.382800e+01, double 3.800000e+01, double 1.900000e+01, double 1.718130e+02, double 4.470000e-01, double -4.559000e+00, double 2.417300e+01, double 3.200000e+04, double 4.100000e+01, double 0.000000e+00, double 1.000000e+00, double 4.532000e+00, double 1.000000e+00, double -8.240000e+00, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00, double 9.040000e-01, double 0x3FEF851EB851EB85, double -8.240000e+00, double 1.250000e+00, double 2.000000e+00, double 1.000000e+00, double 0x3FB70A3D70A3D70A, double 0x3FEF74BC6A7EF9DB, double -8.240000e+00, double 2.500000e+00, double 3.000000e+00, double 1.000000e+00, double 2.900000e-02, double 0x3FEF74BC6A7EF9DB, double -8.240000e+00, double 3.750000e+00, double 4.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEF645A1CAC0831, double -8.240000e+00, double 4.909000e+00, double 5.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEF333333333333, double -8.240000e+00, double 5.958000e+00, double 6.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEEB020C49BA5E3, double -8.240000e+00, double 6.857000e+00, double 7.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEE353F7CED9168, double -8.240000e+00, double 7.700000e+00, double 8.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 9.330000e-01, double -8.240000e+00, double 8.500000e+00, double 9.000000e+00, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 9.200000e-01, double -8.240000e+00, double 9.237000e+00, double 1.000000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 8.920000e-01, double -7.447000e+00, double 0x4023CA3D70A3D70A, double 1.100000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEB9DB22D0E5604, double -7.447000e+00, double 1.050000e+01, double 1.200000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 0x3FEAD916872B020C, double -7.447000e+00, double 1.108300e+01, double 1.300000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 7.860000e-01, double -7.447000e+00, double 1.160400e+01, double 1.400000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 7.550000e-01, double -7.447000e+00, double 1.210700e+01, double 1.500000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 6.980000e-01, double -7.447000e+00, double 1.255400e+01, double 1.600000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 6.730000e-01, double -7.447000e+00, double 1.300000e+01, double 1.700000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 6.050000e-01, double -7.447000e+00, double 1.339100e+01, double 1.800000e+01, double 1.000000e+00, double 0x3F826E978D4FDF3B, double 6.290000e-01, double -7.447000e+00, double 1.378100e+01, double 1.900000e+01, double 2.000000e+00, double 1.800000e-02, double 8.830000e-01, double -7.447000e+00, double 1.447400e+01, double 2.000000e+01, double 2.000000e+00, double 1.800000e-02, double 8.580000e-01, double -6.990000e+00, double 1.509600e+01, double 2.100000e+01, double 2.000000e+00, double 1.800000e-02, double 0x3FEA872B020C49BA, double -6.990000e+00, double 1.566700e+01, double 2.200000e+01, double 2.000000e+00, double 1.800000e-02, double 7.670000e-01, double -6.990000e+00, double 1.617700e+01, double 2.300000e+01, double 2.000000e+00, double 1.800000e-02, double 7.050000e-01, double -6.990000e+00, double 1.663600e+01, double 2.400000e+01, double 2.000000e+00, double 1.800000e-02, double 6.370000e-01, double -6.990000e+00, double 1.705700e+01, double 2.500000e+01, double 2.000000e+00, double 1.800000e-02, double 5.640000e-01, double -6.990000e+00, double 1.742900e+01, double 2.600000e+01, double 2.000000e+00, double 1.800000e-02, double 5.500000e-01, double -6.990000e+00, double 1.778600e+01, double 2.700000e+01, double 3.000000e+00, double 2.700000e-02, double 0x3FE34BC6A7EF9DB2, double -6.990000e+00, double 1.817700e+01, double 2.800000e+01, double 3.000000e+00, double 2.700000e-02, double 6.350000e-01, double -6.990000e+00, double 1.859700e+01, double 2.900000e+01, double 3.000000e+00, double 2.700000e-02, double 5.920000e-01, double -6.990000e+00, double 1.899400e+01, double 3.000000e+01, double 3.000000e+00, double 2.700000e-02, double 5.330000e-01, double 0xC018147AE147AE14, double 1.935200e+01, double 3.100000e+01, double 3.000000e+00, double 2.700000e-02, double 5.180000e-01, double 0xC018147AE147AE14, double 1.969300e+01, double 3.200000e+01, double 4.000000e+00, double 0x3FB26E978D4FDF3B, double 5.680000e-01, double 0xC018147AE147AE14, double 2.006600e+01, double 3.300000e+01, double 4.000000e+00, double 0x3FB26E978D4FDF3B, double 5.940000e-01, double 0xC018147AE147AE14, double 2.046200e+01, double 3.400000e+01, double 4.000000e+00, double 0x3FB26E978D4FDF3B, double 5.680000e-01, double -5.229000e+00, double 2.084100e+01, double 3.500000e+01, double 5.000000e+00, double 1.430000e-01, double 5.360000e-01, double -5.229000e+00, double 2.120100e+01, double 3.600000e+01, double 5.000000e+00, double 1.430000e-01, double 5.220000e-01, double -5.229000e+00, double 2.154900e+01, double 3.700000e+01, double 6.000000e+00, double 1.720000e-01, double 5.420000e-01, double -5.229000e+00, double 2.191100e+01, double 3.800000e+01, double 7.000000e+00, double 6.330000e-01, double 5.390000e-01, double -4.559000e+00, double 2.227500e+01, double 3.900000e+01, double 7.000000e+00, double 6.330000e-01, double 5.190000e-01, double -4.559000e+00, double 2.262500e+01, double 4.000000e+01, double 8.000000e+00, double 7.230000e-01, double 5.140000e-01, double -3.980000e+00, double 2.297100e+01, double 4.100000e+01, double 1.000000e+01, double 0x40221604189374BC, double 5.180000e-01, double -3.980000e+00, double 2.332100e+01, double 2.400000e+04, double 4.400000e+01, double 0.000000e+00, double 1.000000e+00, double 0x4021D3345FD90392, double 0x3FEF1965403A7185, double 0x3FC333334015BC21, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00, double 0x4021D3345FD90392, double 0x3FEBFDC57FC8DA71, double 0x3FC333334015BC21, double 0x3FEE4A53BFDF6D52, double 2.000000e+00, double 1.000000e+00, double 0x3FEC85209FCC7D60, double 0x3FEB7317FFFBF935, double 0x3FC333334015BC21, double 0x3FFE27FC608E3537, double 3.000000e+00, double 1.000000e+00, double 0x3FB6D0E7000242F6, double 0x3FEADF2E8034DD71, double 0x3FC333334015BC21, double 0x400671F65F6D4DE1, double 4.000000e+00, double 1.000000e+00, double 0x3F9CDC38BF530072, double 0x3FEA52C29FF82D79, double 0x3FC333334015BC21, double 0x400D9C56209E0539, double 5.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE99B1F2000D161, double 0x3FC333334015BC21, double 0x401242E33FAAE5C7, double 6.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE8AFECC00FD899, double 0x3FC333334015BC21, double 0x4015920DDFBC939A, double 7.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE798B2E022D122, double 0x3FC333334015BC21, double 0x4018B82F2029154D, double 8.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE66F80602F0C29, double 0x3FC333334015BC21, double 0x401BB3481FD45BB7, double 9.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE51CE34000CC03, double 0x3FC333334015BC21, double 0x401E82A44010BC3B, double 1.000000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE3AE62FFDD230F, double 0x3FC333334015BC21, double 0x4020934DDFDCC9F0, double 1.100000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE2327260112F1F, double 0x3FC333334015BC21, double 0x4021D02A3FEF8432, double 1.200000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE0B65C000EA136, double 0x3FC70A3D7FAC2175, double 0x4022F8C4202AEDBF, double 1.300000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDEA65940382967, double 0x3FC70A3D7FAC2175, double 0x40240E2901810980, double 1.400000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDC099BE01ADD51, double 0x3FC70A3D7FAC2175, double 0x40251182814F1FF9, double 1.500000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDA667E005861E3, double 0x3FC70A3D7FAC2175, double 0x40260406FFCE81D9, double 1.600000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD9015C005BF06C, double 0x3FC70A3D7FAC2175, double 0x4026E6ED3F331BB6, double 1.700000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD7CCFFA06746BF, double 0x3FC70A3D7FAC2175, double 0x4027BB64E054690E, double 1.800000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD7870C20164259, double 0x3FC70A3D7FAC2175, double 0x4028829080156415, double 1.900000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDB05A9804A1ADF, double 0x3FC70A3D7FAC2175, double 0x40293D82814F1FF9, double 2.000000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FE2146600317590, double 0x3FC70A3D7FAC2175, double 0x402A8DEE3F0D5C09, double 2.100000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FE0A163DFC5C53E, double 0x3FC70A3D7FAC2175, double 0x402BBDF9DF548ECE, double 2.200000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FDD24A12031DFDD, double 0x3FC99999A00ADE11, double 0x402CCE0C7F6A436B, double 2.300000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FDA2AE45F908950, double 0x3FC99999A00ADE11, double 0x402DC3288128898C, double 2.400000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD86B21804726F5, double 0x3FC99999A00ADE11, double 0x402EA1733F92BD07, double 2.500000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD730DD9FFB29FA, double 0x3FC99999A00ADE11, double 0x402F6C58FF759685, double 2.600000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD768379FB21519, double 0x3FC99999A00ADE11, double 0x403013569F490603, double 2.700000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 3.806400e-01, double 0x3FC99999A00ADE11, double 0x40307CFB407D9E91, double 2.800000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD8448A60381B72, double 0x3FC99999A00ADE11, double 0x4030F0EBE08E4AB1, double 2.900000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD71542FFA66049, double 0x3FC99999A00ADE11, double 0x403159F0FFB1FC67, double 3.000000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD5F4CAFFE5755D, double 0x3FC99999A00ADE11, double 0x4031B9F81F60EE57, double 3.100000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD5B6EE7FB629D9, double 0x3FC99999A00ADE11, double 0x4032127EC0D03F48, double 3.200000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD5F31F407BDFE4, double 0x3FC99999A00ADE11, double 0x40327152007DD441, double 3.300000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD5F5D10040CB2A, double 0x3FC99999A00ADE11, double 0x4032D59BBFE486FE, double 3.400000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD603E86003D454, double 2.500000e-01, double 0x403332117F84449E, double 3.500000e+01, double 5.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD602EC4051F710, double 2.500000e-01, double 0x403391D7FF2FF668, double 3.600000e+01, double 5.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD5BAD25F99FFAC, double 2.500000e-01, double 0x4033F482A058D07C, double 3.700000e+01, double 5.000000e+00, double 0x3FB6C310E004DF79, double 0x3FD589E59FB51A31, double 0x3FD1EB851FCB32AA, double 0x40344FC47FF73124, double 3.800000e+01, double 6.000000e+00, double 0x3FBB507A9F610C68, double 0x3FD56FE7C0296189, double 0x3FD1EB851FCB32AA, double 0x4034AC7C7FAD5F49, double 3.900000e+01, double 6.000000e+00, double 0x3FC5A52AA0AC4C3E, double 0x3FD57A7EFFC2F6E9, double 0x3FD333334015BC21, double 0x40350A5DFF8F97B8, double 4.000000e+01, double 7.000000e+00, double 0x3FC940B1A0F75BED, double 0x3FD56C005FB27E53, double 0x3FD333334015BC21, double 0x403567F0FFB1FC67, double 4.100000e+01, double 7.000000e+00, double 0x3FC940B1A0F75BED, double 0x3FD53A30C008BB88, double 0x3FD333334015BC21, double 0x4035C50A40CBA22A, double 4.200000e+01, double 8.000000e+00, double 0x3FE6D0E6FFCB4936, double 0x3FD506FAA06FA1A3, double 0x3FD99999A00ADE11, double 0x40362070DF662C85, double 4.300000e+01, double 8.000000e+00, double 0x3FE6D0E6FFCB4936, double 0x3FD5B623E0515B5F, double 0x3FD99999A00ADE11, double 0x40367A17C01025E8, double 4.400000e+01, double 9.000000e+00, double 0x3FE9AB03DFE70E75, double 0x3FDB369A001BD9A5, double 0x3FD99999A00ADE11, double 0x4036D10540B1A0F7, double 2.205000e+04, double 4.400000e+01, double 0.000000e+00, double 1.000000e+00, double 0x4021D3345FD90392, double 0x3FEE878AE0072B06, double 0x3FC333334015BC21, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00, double 0x4021D3345FD90392, double 0x3FEAAB10001715E0, double 0x3FC333334015BC21, double 0x3FEBD5D3201A7417, double 2.000000e+00, double 1.000000e+00, double 0x3FEC85209FCC7D60, double 0x3FEA1C3A9FD2DD77, double 0x3FC333334015BC21, double 0x3FFBBB6DDF818551, double 3.000000e+00, double 1.000000e+00, double 0x3FB6D0E7000242F6, double 0x3FE96A73FFDFA74E, double 0x3FC333334015BC21, double 0x4004AA703FAE15D2, double 4.000000e+00, double 1.000000e+00, double 0x3F9CDC38BF530072, double 0x3FE8D8FAA019BB68, double 0x3FC333334015BC21, double 0x400B4EB4202D9CF1, double 5.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE82B17E00A5B12, double 0x3FC333334015BC21, double 0x4010DFBFA0138645, double 6.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE764EEA0426668, double 0x3FC333334015BC21, double 0x4013FA01FFB480A6, double 7.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE674F2A0127BFB, double 0x3FC333334015BC21, double 0x4016F2E12015F50A, double 8.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE55F3DBFCB7EE6, double 0x3FC333334015BC21, double 0x4019C83980544E36, double 9.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE42B4980044FCE, double 0x3FC333334015BC21, double 0x401C78E8FFB35400, double 1.000000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE2E2ACE014CA8A, double 0x3FC333334015BC21, double 0x401F04AA601060F6, double 1.100000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE18FAD004289D7, double 0x3FC333334015BC21, double 0x4020B5F5DFEB8D82, double 1.200000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE03FDC602C7F54, double 0x3FC333334015BC21, double 0x4021D7D2A0207165, double 1.300000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDE0C8B9FED0106, double 0x3FC70A3D7FAC2175, double 0x4022E89A3FDCB9D5, double 1.400000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDBAAAADFA34F61, double 0x3FC70A3D7FAC2175, double 0x4023E91D7FEDA103, double 1.500000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDA4FF91F99ABEC, double 0x3FC70A3D7FAC2175, double 0x4024DA4200559055, double 1.600000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD902669FFABA4E, double 0x3FC70A3D7FAC2175, double 0x4025BCF780D57D75, double 1.700000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD7E471408171D2, double 0x3FC70A3D7FAC2175, double 0x4026922FDFC19C17, double 1.800000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD7A6E0FFDF9EB7, double 0x3FC70A3D7FAC2175, double 0x40275AD9209825FC, double 1.900000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDB42E39FA21C4A, double 0x3FC70A3D7FAC2175, double 0x402817D9414F55A9, double 2.000000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FE275F72007875E, double 0x3FC70A3D7FAC2175, double 0x40296DA1412DC7B9, double 2.100000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FE10F469FD52594, double 0x3FC70A3D7FAC2175, double 0x402AA3B480A5ACCD, double 2.200000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FDE13F29FB3FEB9, double 0x3FC70A3D7FAC2175, double 0x402BBA1B5FD7D6EC, double 2.300000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FDAB4871F884A56, double 0x3FC99999A00ADE11, double 0x402CB579BFDF7E80, double 2.400000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD8EA46DF7C40B2, double 0x3FC99999A00ADE11, double 0x402D99BB7EC6AF7C, double 2.500000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD73885BFBF6A86, double 0x3FC99999A00ADE11, double 0x402E6A2CC1292A9C, double 2.600000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD631FE0006C72B, double 0x3FC99999A00ADE11, double 0x402F2990DEDFF4C8, double 2.700000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD65C91FF79FBCD, double 0x3FC99999A00ADE11, double 0x402FDA393EE5EEDD, double 2.800000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD74C37A0192961, double 0x3FC99999A00ADE11, double 0x403051CA3F53D2E6, double 2.900000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD766103FBE30FE, double 0x3FC99999A00ADE11, double 0x4030C0BE40420F6F, double 3.000000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD6AC721F93546C, double 0x3FC99999A00ADE11, double 0x403125A7206AD993, double 3.100000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD67A61005C2C8D, double 0x3FC99999A00ADE11, double 0x40318234FFBC0D62, double 3.200000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD6ADE6BFDF75E9, double 0x3FC99999A00ADE11, double 0x4031E4D100383424, double 3.300000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD654A36041DF1E, double 0x3FC99999A00ADE11, double 0x40324C9E2011177F, double 3.400000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD59C0BFF929CD0, double 0x3FC99999A00ADE11, double 0x4032ABE0C09F97E0, double 3.500000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD540BF5F9E4298, double 2.500000e-01, double 0x403304016052502F, double 3.600000e+01, double 5.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD52BB6E084EE1A, double 2.500000e-01, double 0x40335F973F4C462A, double 3.700000e+01, double 5.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD4F6391FE4D560, double 2.500000e-01, double 0x4033BE37C060ADC0, double 3.800000e+01, double 5.000000e+00, double 0x3FB6C310E004DF79, double 0x3FD4D52ADF7CA7C6, double 0x3FD1EB851FCB32AA, double 0x403416018032C047, double 3.900000e+01, double 6.000000e+00, double 0x3FBB507A9F610C68, double 0x3FD4C392BF935BF0, double 0x3FD1EB851FCB32AA, double 0x40346F7CE0256F25, double 4.000000e+01, double 6.000000e+00, double 0x3FBB507A9F610C68, double 0x3FD4DA7B3FD61D9D, double 0x3FD1EB851FCB32AA, double 0x4034CA6200A6182D, double 4.100000e+01, double 7.000000e+00, double 0x3FC940B1A0F75BED, double 0x3FD4E0D1805492EE, double 0x3FD333334015BC21, double 0x4035255380B09488, double 4.200000e+01, double 7.000000e+00, double 0x3FC940B1A0F75BED, double 0x3FD4DC8B80401B12, double 0x3FD333334015BC21, double 0x40358027001F09B1, double 4.300000e+01, double 8.000000e+00, double 0x3FCCDC38BF530072, double 0x3FD5B27E600AE036, double 0x3FD333334015BC21, double 0x4035D9B73F9CCE02, double 4.400000e+01, double 8.000000e+00, double 0x3FE6D0E6FFCB4936, double 0x3FDB5184204F6F99, double 0x3FD99999A00ADE11, double 0x403631F27FE4BCAE, double 1.600000e+04, double 4.500000e+01, double 0.000000e+00, double 1.000000e+00, double 0x4021D3345FD90392, double 0x3FEAB62F803179DC, double 0x3FC333334015BC21, double 0.000000e+00, double 1.000000e+00, double 1.000000e+00, double 0x4021D3345FD90392, double 0x3FE3F5D140240771, double 0x3FC333334015BC21, double 0x3FE435666020150D, double 2.000000e+00, double 1.000000e+00, double 0x3FEC85209FCC7D60, double 0x3FE355A36016EC00, double 0x3FC333334015BC21, double 0x3FF42BCABED59345, double 3.000000e+00, double 1.000000e+00, double 0x3FEC85209FCC7D60, double 0x3FE2F173FFC5E23C, double 0x3FC333334015BC21, double 0x3FFE27FC608E3537, double 4.000000e+00, double 1.000000e+00, double 0x3FB6D0E7000242F6, double 0x3FE268DEE0397FED, double 0x3FC333334015BC21, double 0x4004024B1FB902EB, double 5.000000e+00, double 1.000000e+00, double 0x3F9CDC38BF530072, double 0x3FE1F832E0384AB0, double 0x3FC333334015BC21, double 0x4008DBDFDFCF0810, double 6.000000e+00, double 1.000000e+00, double 0x3F9CDC38BF530072, double 0x3FE17E495FD69081, double 0x3FC333334015BC21, double 0x400D9C56209E0539, double 7.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE0F4A63FC53CE1, double 0x3FC333334015BC21, double 0x40111FEF9FB59274, double 8.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FE05B9D602B4180, double 0x3FC333334015BC21, double 0x401361A7602BB9C2, double 9.000000e+00, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDF6AF19F83D82B, double 0x3FC333334015BC21, double 0x4015920DDFBC939A, double 1.000000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDE0A595FC2B343, double 0x3FC333334015BC21, double 0x4017B02F9FAAD5AC, double 1.100000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDC9BB5C038364A, double 0x3FC333334015BC21, double 0x4019BB64002FA5B5, double 1.200000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDB6725A06FEEF3, double 0x3FC333334015BC21, double 0x401BB3481FD45BB7, double 1.300000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDA87C49FD7A13C, double 0x3FC333334015BC21, double 0x401D97B65FCDF0E4, double 1.400000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD9AA86A05C7032, double 0x3FC333334015BC21, double 0x401F68BE200BB91C, double 1.500000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD8D190204920B0, double 0x3FC333334015BC21, double 0x4020934DDFDCC9F0, double 1.600000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD7F3643F89719D, double 0x3FC333334015BC21, double 0x402168D7E02645E5, double 1.700000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD71335E03F4DFC, double 0x3FC70A3D7FAC2175, double 0x4022353C000B6894, double 1.800000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD649D65F95085D, double 0x3FC70A3D7FAC2175, double 0x4022F8C4202AEDBF, double 1.900000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FD66BC2001523A9, double 0x3FC70A3D7FAC2175, double 0x4023B3C2600C5A2B, double 2.000000e+01, double 1.000000e+00, double 0x3F8240B8C0180E0A, double 0x3FDA0153001BF36A, double 0x3FC70A3D7FAC2175, double 0x4024668E3EF28416, double 2.100000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FE1BB2C3FBDC9E9, double 0x3FC70A3D7FAC2175, double 0x4025B16C3FC43B2E, double 2.200000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FE0E7EF9FD7EE8B, double 0x3FC70A3D7FAC2175, double 0x4026E3B8404DCDE9, double 2.300000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FDE7F6B1F88B16A, double 0x3FC70A3D7FAC2175, double 0x4027FC557F8E5599, double 2.400000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FDB67B8C0144678, double 0x3FC70A3D7FAC2175, double 0x4028FDEC80C73ABD, double 2.500000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD9BED2BF91362F, double 0x3FC70A3D7FAC2175, double 0x4029EAF13E9C1D02, double 2.600000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD8318D5FE93882, double 0x3FC70A3D7FAC2175, double 0x402AC59DC14686CD, double 2.700000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD733F83F9744AB, double 0x3FC70A3D7FAC2175, double 0x402B8FF180E13BF0, double 2.800000e+01, double 2.000000e+00, double 0x3F9240B8BFC0180A, double 0x3FD78E459FE9B736, double 0x3FC99999A00ADE11, double 0x402C4BB360143CCE, double 2.900000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD8B39F3FDCF5F6, double 0x3FC99999A00ADE11, double 0x402D2286BFA241DF, double 3.000000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD8BADCC009F0C5, double 0x3FC99999A00ADE11, double 0x402E0F9BC1920627, double 3.100000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD78A97DF966441, double 0x3FC99999A00ADE11, double 0x402EE7163F06A60C, double 3.200000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD66143BFFBE196, double 0x3FC99999A00ADE11, double 0x402FAC2C7FBACB43, double 3.300000e+01, double 3.000000e+00, double 0x3F9B61151FA0240F, double 0x3FD6201A3F79F110, double 0x3FC99999A00ADE11, double 0x403030C29F4C6102, double 3.400000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD6516A202F4A70, double 0x3FC99999A00ADE11, double 0x4030917F7F3C2042, double 3.500000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD636235F780212, double 0x3FC99999A00ADE11, double 0x4030F74D7FE5936D, double 3.600000e+01, double 4.000000e+00, double 0x3FA240B8BFC0180A, double 0x3FD62A453FF280B3, double 0x3FC99999A00ADE11, double 0x4031549840D405A6, double 3.700000e+01, double 5.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD60EE2800130F1, double 0x3FC99999A00ADE11, double 0x4031B49F806367AE, double 3.800000e+01, double 5.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD5AE8F40607E81, double 0x3FC99999A00ADE11, double 0x403217090059C213, double 3.900000e+01, double 5.000000e+00, double 0x3FA6D0E7000242F6, double 0x3FD56EA6FFE7340A, double 0x3FC99999A00ADE11, double 0x403271AD7F29ABCB, double 4.000000e+01, double 6.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD54CC8BF90BDED, double 0x3FC99999A00ADE11, double 0x4032CD91BFB08498, double 4.100000e+01, double 6.000000e+00, double 0x3FAB61151FA0240F, double 0x3FD55BA1006B34D7, double 2.500000e-01, double 0x40332AA18017E854, double 4.200000e+01, double 7.000000e+00, double 0x3FAFF1435FE24EFB, double 0x3FD5600880798473, double 2.500000e-01, double 0x403387A9DF61FAC7, double 4.300000e+01, double 7.000000e+00, double 0x3FAFF1435FE24EFB, double 0x3FD56297BFA4C61E, double 2.500000e-01, double 0x4033E4BBBF5E4F41, double 4.400000e+01, double 8.000000e+00, double 0x3FC235A71EF0E48D, double 0x3FD6318CBFEC69A0, double 0x3FD1EB851FCB32AA, double 0x403440EA00BA3A23, double 4.500000e+01, double 8.000000e+00, double 0x3FC235A71EF0E48D, double 0x3FDBEB97E07E51E2, double 0x3FD1EB851FCB32AA, double 0x40349C4E3FFEF391, double 4.800000e+04, double 2.000000e+01, double 0.000000e+00, double 3.000000e+00, double 0.000000e+00, double 4.000000e+00, double 1.000000e+00, double 5.600000e-02, double 1.000000e+00, double 3.000000e+00, double 4.000000e+00, double 7.000000e+00, double 0x3FEE353F7CED9168, double 0x3FE38D4FDF3B645A, double 2.000000e+00, double 4.000000e+00, double 7.000000e+00, double 1.100000e+01, double 3.890000e-01, double 1.670000e-01, double 3.000000e+00, double 3.000000e+00, double 1.100000e+01, double 1.400000e+01, double 0x3FEAA7EF9DB22D0E, double 7.220000e-01, double 4.000000e+00, double 3.000000e+00, double 1.400000e+01, double 1.700000e+01, double 2.780000e-01, double 6.390000e-01, double 5.000000e+00, double 2.000000e+00, double 1.700000e+01, double 1.900000e+01, double 3.610000e-01, double 4.170000e-01, double 6.000000e+00, double 3.000000e+00, double 1.900000e+01, double 2.200000e+01, double 5.830000e-01, double 8.300000e-02, double 7.000000e+00, double 2.000000e+00, double 2.200000e+01, double 2.400000e+01, double 9.170000e-01, double 7.500000e-01, double 8.000000e+00, double 3.000000e+00, double 2.400000e+01, double 2.700000e+01, double 2.500000e-01, double 4.170000e-01, double 9.000000e+00, double 3.000000e+00, double 2.700000e+01, double 3.000000e+01, double 5.830000e-01, double 6.480000e-01, double 1.000000e+01, double 3.000000e+00, double 3.000000e+01, double 3.300000e+01, double 3.520000e-01, double 0x3FE38D4FDF3B645A, double 1.100000e+01, double 3.000000e+00, double 3.300000e+01, double 3.600000e+01, double 3.890000e-01, double 6.250000e-01, double 1.200000e+01, double 4.000000e+00, double 3.600000e+01, double 4.000000e+01, double 3.750000e-01, double 1.440000e-01, double 1.300000e+01, double 3.000000e+00, double 4.000000e+01, double 4.300000e+01, double 8.560000e-01, double 3.890000e-01, double 1.400000e+01, double 3.000000e+00, double 4.300000e+01, double 4.600000e+01, double 0x3FE38D4FDF3B645A, double 1.600000e-01, double 1.500000e+01, double 3.000000e+00, double 4.600000e+01, double 4.900000e+01, double 8.400000e-01, double 2.170000e-01, double 1.600000e+01, double 3.000000e+00, double 4.900000e+01, double 5.200000e+01, double 7.830000e-01, double 1.840000e-01, double 1.700000e+01, double 2.000000e+00, double 5.200000e+01, double 5.400000e+01, double 8.160000e-01, double 8.860000e-01, double 1.800000e+01, double 3.000000e+00, double 5.400000e+01, double 5.700000e+01, double 1.140000e-01, double 3.130000e-01, double 1.900000e+01, double 2.000000e+00, double 5.700000e+01, double 5.900000e+01, double 6.870000e-01, double 4.520000e-01, double 2.000000e+01, double 1.000000e+00, double 5.900000e+01, double 6.000000e+01, double 5.480000e-01, double 9.080000e-01, double 4.410000e+04, double 2.000000e+01, double 0.000000e+00, double 3.000000e+00, double 0.000000e+00, double 4.000000e+00, double 1.000000e+00, double 5.600000e-02, double 1.000000e+00, double 3.000000e+00, double 4.000000e+00, double 7.000000e+00, double 0x3FEE353F7CED9168, double 0x3FE38D4FDF3B645A, double 2.000000e+00, double 4.000000e+00, double 7.000000e+00, double 1.100000e+01, double 3.890000e-01, double 1.670000e-01, double 3.000000e+00, double 3.000000e+00, double 1.100000e+01, double 1.400000e+01, double 0x3FEAA7EF9DB22D0E, double 7.220000e-01, double 4.000000e+00, double 3.000000e+00, double 1.400000e+01, double 1.700000e+01, double 2.780000e-01, double 1.390000e-01, double 5.000000e+00, double 1.000000e+00, double 1.700000e+01, double 1.800000e+01, double 0x3FEB8D4FDF3B645A, double 9.170000e-01, double 6.000000e+00, double 3.000000e+00, double 1.800000e+01, double 2.100000e+01, double 8.300000e-02, double 5.830000e-01, double 7.000000e+00, double 3.000000e+00, double 2.100000e+01, double 2.400000e+01, double 4.170000e-01, double 2.500000e-01, double 8.000000e+00, double 3.000000e+00, double 2.400000e+01, double 2.700000e+01, double 7.500000e-01, double 8.050000e-01, double 9.000000e+00, double 3.000000e+00, double 2.700000e+01, double 3.000000e+01, double 1.940000e-01, double 5.740000e-01, double 1.000000e+01, double 3.000000e+00, double 3.000000e+01, double 3.300000e+01, double 4.260000e-01, double 5.370000e-01, double 1.100000e+01, double 3.000000e+00, double 3.300000e+01, double 3.600000e+01, double 4.630000e-01, double 8.190000e-01, double 1.200000e+01, double 4.000000e+00, double 3.600000e+01, double 4.000000e+01, double 1.800000e-01, double 1.000000e-01, double 1.300000e+01, double 3.000000e+00, double 4.000000e+01, double 4.300000e+01, double 9.000000e-01, double 4.680000e-01, double 1.400000e+01, double 3.000000e+00, double 4.300000e+01, double 4.600000e+01, double 5.320000e-01, double 0x3FE3EF9DB22D0E56, double 1.500000e+01, double 3.000000e+00, double 4.600000e+01, double 4.900000e+01, double 3.760000e-01, double 4.500000e-01, double 1.600000e+01, double 3.000000e+00, double 4.900000e+01, double 5.200000e+01, double 5.500000e-01, double 5.520000e-01, double 1.700000e+01, double 3.000000e+00, double 5.200000e+01, double 5.500000e+01, double 4.480000e-01, double 4.030000e-01, double 1.800000e+01, double 2.000000e+00, double 5.500000e+01, double 5.700000e+01, double 5.970000e-01, double 6.430000e-01, double 1.900000e+01, double 2.000000e+00, double 5.700000e+01, double 5.900000e+01, double 3.570000e-01, double 7.220000e-01, double 2.000000e+01, double 2.000000e+00, double 5.900000e+01, double 6.100000e+01, double 2.780000e-01, double 0x3FEEB851EB851EB8, double 3.200000e+04, double 2.000000e+01, double 0.000000e+00, double 1.000000e+00, double 0.000000e+00, double 2.000000e+00, double 1.000000e+00, double 5.280000e-01, double 1.000000e+00, double 2.000000e+00, double 2.000000e+00, double 4.000000e+00, double 4.720000e-01, double 3.050000e-01, double 2.000000e+00, double 2.000000e+00, double 4.000000e+00, double 6.000000e+00, double 6.940000e-01, double 8.300000e-02, double 3.000000e+00, double 1.000000e+00, double 6.000000e+00, double 7.000000e+00, double 9.170000e-01, double 0x3FEB8D4FDF3B645A, double 4.000000e+00, double 2.000000e+00, double 7.000000e+00, double 9.000000e+00, double 1.390000e-01, double 6.390000e-01, double 5.000000e+00, double 2.000000e+00, double 9.000000e+00, double 1.100000e+01, double 3.610000e-01, double 4.170000e-01, double 6.000000e+00, double 3.000000e+00, double 1.100000e+01, double 1.400000e+01, double 5.830000e-01, double 8.300000e-02, double 7.000000e+00, double 2.000000e+00, double 1.400000e+01, double 1.600000e+01, double 9.170000e-01, double 7.500000e-01, double 8.000000e+00, double 3.000000e+00, double 1.600000e+01, double 1.900000e+01, double 2.500000e-01, double 8.700000e-01, double 9.000000e+00, double 3.000000e+00, double 1.900000e+01, double 2.200000e+01, double 1.300000e-01, double 0x3FEAA7EF9DB22D0E, double 1.000000e+01, double 4.000000e+00, double 2.200000e+01, double 2.600000e+01, double 1.670000e-01, double 3.890000e-01, double 1.100000e+01, double 4.000000e+00, double 2.600000e+01, double 3.000000e+01, double 0x3FE38D4FDF3B645A, double 4.780000e-01, double 1.200000e+01, double 4.000000e+00, double 3.000000e+01, double 3.400000e+01, double 5.220000e-01, double 3.300000e-02, double 1.300000e+01, double 3.000000e+00, double 3.400000e+01, double 3.700000e+01, double 0x3FEEF1A9FBE76C8B, double 9.170000e-01, double 1.400000e+01, double 4.000000e+00, double 3.700000e+01, double 4.100000e+01, double 8.300000e-02, double 6.170000e-01, double 1.500000e+01, double 3.000000e+00, double 4.100000e+01, double 4.400000e+01, double 3.830000e-01, double 0x3FEFD70A3D70A3D7, double 1.600000e+01, double 4.000000e+00, double 4.400000e+01, double 4.800000e+01, double 5.000000e-03, double 2.740000e-01, double 1.700000e+01, double 3.000000e+00, double 4.800000e+01, double 5.100000e+01, double 7.260000e-01, double 4.800000e-01, double 1.800000e+01, double 3.000000e+00, double 5.100000e+01, double 5.400000e+01, double 5.190000e-01, double 2.610000e-01, double 1.900000e+01, double 2.000000e+00, double 5.400000e+01, double 5.600000e+01, double 7.390000e-01, double 8.840000e-01, double 2.000000e+01, double 2.000000e+00, double 5.600000e+01, double 5.800000e+01, double 1.160000e-01, double 1.000000e+00, double 2.400000e+04, double 2.000000e+01, double 0.000000e+00, double 2.000000e+00, double 0.000000e+00, double 3.000000e+00, double 1.000000e+00, double 0x3FED55557FECD2DA, double 1.000000e+00, double 3.000000e+00, double 3.000000e+00, double 6.000000e+00, double 0x3FB55554002B75AF, double 0x3FE2AAAAFFD9A5B4, double 2.000000e+00, double 3.000000e+00, double 6.000000e+00, double 9.000000e+00, double 0x3FDAAAAA004CB497, double 2.500000e-01, double 3.000000e+00, double 2.000000e+00, double 9.000000e+00, double 1.100000e+01, double 7.500000e-01, double 0x3FED5556003CBBC8, double 4.000000e+00, double 3.000000e+00, double 1.100000e+01, double 1.400000e+01, double 0x3FB5554FFFD1EFBD, double 0x3FE2AAABFFF00731, double 5.000000e+00, double 3.000000e+00, double 1.400000e+01, double 1.700000e+01, double 0x3FDAAAA8001FF19E, double 2.500000e-01, double 6.000000e+00, double 3.000000e+00, double 1.700000e+01, double 2.000000e+01, double 7.500000e-01, double 0x3FE12F6800221760, double 7.000000e+00, double 3.000000e+00, double 2.000000e+01, double 2.300000e+01, double 0x3FDDA12FFFBBD141, double 5.000000e-01, double 8.000000e+00, double 4.000000e+00, double 2.300000e+01, double 2.700000e+01, double 5.000000e-01, double 0x3FAC71D6002E2171, double 9.000000e+00, double 3.000000e+00, double 2.700000e+01, double 3.000000e+01, double 0x3FEE38E2A0265939, double 0x3FD9C71FFF79C843, double 1.000000e+01, double 3.000000e+00, double 3.000000e+01, double 3.300000e+01, double 0x3FE31C7000431BDF, double 0x3FE888899FE29A25, double 1.100000e+01, double 3.000000e+00, double 3.300000e+01, double 3.600000e+01, double 0x3FCDDDD9A0ABEDC0, double 0x3FE9C71D5FD9A6C7, double 1.200000e+01, double 3.000000e+00, double 3.600000e+01, double 3.900000e+01, double 0x3FC8E38AA0CFBB36, double 0x3FE8A28B7FC7D8BF, double 1.300000e+01, double 3.000000e+00, double 3.900000e+01, double 4.200000e+01, double 0x3FCD75D23F27882F, double 0x3FE38E38DFBCE0E9, double 1.400000e+01, double 3.000000e+00, double 4.200000e+01, double 4.500000e+01, double 0x3FD8E38E40863E2E, double 0x3FDCC485BFE1C69E, double 1.500000e+01, double 3.000000e+00, double 4.500000e+01, double 4.800000e+01, double 0x3FE19DBD200F1CB1, double 0x3FC8E3927F26AF4A, double 1.600000e+01, double 2.000000e+00, double 4.800000e+01, double 5.000000e+01, double 0x3FE9C71B6036542E, double 0x3FED38E3FFCCDCF1, double 1.700000e+01, double 3.000000e+00, double 5.000000e+01, double 5.300000e+01, double 0x3FB638DFFFE14A7E, double 0x3FE293E99FFD7217, double 1.800000e+01, double 3.000000e+00, double 5.300000e+01, double 5.600000e+01, double 0x3FDAD82CC0051BD1, double 0x3FBD097FFDDE8A06, double 1.900000e+01, double 2.000000e+00, double 5.600000e+01, double 5.800000e+01, double 0x3FEC5ED000442EBF, double 0x3FE114523FF1653B, double 2.000000e+01, double 2.000000e+00, double 5.800000e+01, double 6.000000e+01, double 0x3FDDD75B5FE6DF36, double 0x3FE61E1E1FF306EB, double 2.205000e+04, double 2.000000e+01, double 0.000000e+00, double 2.000000e+00, double 0.000000e+00, double 3.000000e+00, double 1.000000e+00, double 0x3FED55557FECD2DA, double 1.000000e+00, double 3.000000e+00, double 3.000000e+00, double 6.000000e+00, double 0x3FB55554002B75AF, double 0x3FE2AAAAFFD9A5B4, double 2.000000e+00, double 3.000000e+00, double 6.000000e+00, double 9.000000e+00, double 0x3FDAAAAA004CB497, double 2.500000e-01, double 3.000000e+00, double 2.000000e+00, double 9.000000e+00, double 1.100000e+01, double 7.500000e-01, double 0x3FED5556003CBBC8, double 4.000000e+00, double 3.000000e+00, double 1.100000e+01, double 1.400000e+01, double 0x3FB5554FFFD1EFBD, double 0x3FE2AAABFFF00731, double 5.000000e+00, double 3.000000e+00, double 1.400000e+01, double 1.700000e+01, double 0x3FDAAAA8001FF19E, double 2.500000e-01, double 6.000000e+00, double 3.000000e+00, double 1.700000e+01, double 2.000000e+01, double 7.500000e-01, double 0x3FCA12F57F624F9A, double 7.000000e+00, double 3.000000e+00, double 2.000000e+01, double 2.300000e+01, double 0x3FE97B42A0276C19, double 0x3FC5555580FFB399, double 8.000000e+00, double 3.000000e+00, double 2.300000e+01, double 2.600000e+01, double 0x3FEAAAAA9FC0131A, double 0x3FE71C72C01993AD, double 9.000000e+00, double 4.000000e+00, double 2.600000e+01, double 3.000000e+01, double 0x3FD1C71AA0032EF8, double 0x3FC38E3FFEF39086, double 1.000000e+01, double 3.000000e+00, double 3.000000e+01, double 3.300000e+01, double 0x3FEB1C7000431BDF, double 0x3FE222233FED7835, double 1.100000e+01, double 3.000000e+00, double 3.300000e+01, double 3.600000e+01, double 0x3FDBBBB9A05B65E8, double 0x3FEDED0A9FC125FB, double 1.200000e+01, double 4.000000e+00, double 3.600000e+01, double 4.000000e+01, double 0x3FB097AAA009F2B3, double 0x3FBE38EFFEB3AD4A, double 1.300000e+01, double 3.000000e+00, double 4.000000e+01, double 4.300000e+01, double 0x3FEC38E200298A57, double 0x3FB7B43900046548, double 1.400000e+01, double 2.000000e+00, double 4.300000e+01, double 4.500000e+01, double 0x3FED0978E0442B87, double 0x3FEDE625BFBE57A5, double 1.500000e+01, double 3.000000e+00, double 4.500000e+01, double 4.800000e+01, double 0x3FB0CED17FEA0F0B, double 0x3FE269A9200E2C2C, double 1.600000e+01, double 3.000000e+00, double 4.800000e+01, double 5.100000e+01, double 0x3FDB2CADBFE3A7A7, double 0x3FCDB30F00CEDCF2, double 1.700000e+01, double 2.000000e+00, double 5.100000e+01, double 5.300000e+01, double 0x3FE8933C3FCC48C3, double 0x3FE84446602E0A77, double 1.800000e+01, double 3.000000e+00, double 5.300000e+01, double 5.600000e+01, double 0x3FCEEEE65F117FD2, double 0x3FC8000A80A6476C, double 1.900000e+01, double 2.000000e+00, double 5.600000e+01, double 5.800000e+01, double 0x3FE9FFFD5FD66E25, double 0x3FE114548001647B, double 2.000000e+01, double 2.000000e+00, double 5.800000e+01, double 6.000000e+01, double 0x3FDDD756DFC6E0B6, double 0x3FD07C26BFE5E72E, double 1.600000e+04, double 2.000000e+01, double 0.000000e+00, double 1.000000e+00, double 0.000000e+00, double 2.000000e+00, double 1.000000e+00, double 0x3FEE38E3A03CBAB5, double 1.000000e+00, double 2.000000e+00, double 2.000000e+00, double 4.000000e+00, double 0x3FAC71C55FDE1B86, double 0x3FE71C71FFE66E78, double 2.000000e+00, double 2.000000e+00, double 4.000000e+00, double 6.000000e+00, double 0x3FD1C71C0033230F, double 5.000000e-01, double 3.000000e+00, double 2.000000e+00, double 6.000000e+00, double 8.000000e+00, double 5.000000e-01, double 0x3FD1C71D402CC0D3, double 4.000000e+00, double 2.000000e+00, double 8.000000e+00, double 1.000000e+01, double 0x3FE71C715FE99F96, double 0x3FAC71D6002E2171, double 5.000000e+00, double 1.000000e+00, double 1.000000e+01, double 1.100000e+01, double 0x3FEE38E2A0265939, double 0x3FEAAAAA9FC0131A, double 6.000000e+00, double 3.000000e+00, double 1.100000e+01, double 1.400000e+01, double 0x3FC5555560C95D45, double 0x3FCA12F57F624F9A, double 7.000000e+00, double 3.000000e+00, double 1.400000e+01, double 1.700000e+01, double 0x3FE97B42A0276C19, double 0x3FC5555580FFB399, double 8.000000e+00, double 3.000000e+00, double 1.700000e+01, double 2.000000e+01, double 0x3FEAAAAA9FC0131A, double 0x3FE15555FD8D89EC, double 9.000000e+00, double 3.000000e+00, double 2.000000e+01, double 2.300000e+01, double 0x3FDD5553FF868870, double 0x3FE4E38FFFBCE421, double 1.000000e+01, double 4.000000e+00, double 2.300000e+01, double 2.700000e+01, double 0x3FD638E0008637BD, double 0x3FC555597F33780E, double 1.100000e+01, double 3.000000e+00, double 2.700000e+01, double 3.000000e+01, double 0x3FEAAAA9A03321FD, double 0x3FE71C733FE00C3C, double 1.200000e+01, double 4.000000e+00, double 3.000000e+01, double 3.400000e+01, double 0x3FD1C719A0763DDB, double 0x3FD1C71FFF79C843, double 1.300000e+01, double 3.000000e+00, double 3.400000e+01, double 3.700000e+01, double 0x3FE71C7000431BDF, double 0x3FE35557FFE00E62, double 1.400000e+01, double 3.000000e+00, double 3.700000e+01, double 4.000000e+01, double 0x3FD95550003FE33C, double 0x3FE416C33FD2A043, double 1.500000e+01, double 3.000000e+00, double 4.000000e+01, double 4.300000e+01, double 0x3FD7D2799F7E350F, double 0x3FE15E189FBCA6ED, double 1.600000e+01, double 3.000000e+00, double 4.300000e+01, double 4.600000e+01, double 0x3FDD43CEC086B225, double 0x3FD7C71FFF79C843, double 1.700000e+01, double 3.000000e+00, double 4.600000e+01, double 4.900000e+01, double 0x3FE41C7000431BDF, double 0x3F811198002BE7C2, double 1.800000e+01, double 2.000000e+00, double 4.900000e+01, double 5.100000e+01, double 0x3FEFBBB99FD1F589, double 0x3FE00002BFD677CF, double 1.900000e+01, double 2.000000e+00, double 5.100000e+01, double 5.300000e+01, double 0x3FDFFFFA601CBA0F, double 0x3FEC60EF600E7756, double 2.000000e+01, double 2.000000e+00, double 5.300000e+01, double 5.500000e+01, double 0x3FBCF884BF1F98AA, double 0x3FE4210C5FE85094, double 4.800000e+04, double 1.100000e+01, double 0.000000e+00, double 2.000000e+00, double 0.000000e+00, double 2.000000e+00, double 1.000000e+00, double 1.670000e-01, double 1.000000e+00, double 2.000000e+00, double 3.000000e+00, double 5.000000e+00, double 0x3FEAA7EF9DB22D0E, double 0x3FEAA7EF9DB22D0E, double 2.000000e+00, double 3.000000e+00, double 5.000000e+00, double 8.000000e+00, double 1.670000e-01, double 5.000000e-01, double 3.000000e+00, double 3.000000e+00, double 8.000000e+00, double 1.100000e+01, double 5.000000e-01, double 1.670000e-01, double 4.000000e+00, double 4.000000e+00, double 1.100000e+01, double 1.500000e+01, double 0x3FEAA7EF9DB22D0E, double 1.670000e-01, double 5.000000e+00, double 4.000000e+00, double 1.500000e+01, double 1.900000e+01, double 0x3FEAA7EF9DB22D0E, double 5.830000e-01, double 6.000000e+00, double 3.000000e+00, double 1.900000e+01, double 2.200000e+01, double 4.170000e-01, double 9.170000e-01, double 7.000000e+00, double 4.000000e+00, double 2.200000e+01, double 2.600000e+01, double 8.300000e-02, double 0x3FEE353F7CED9168, double 8.000000e+00, double 4.000000e+00, double 2.600000e+01, double 3.000000e+01, double 5.500000e-02, double 4.200000e-02, double 9.000000e+00, double 2.000000e+00, double 3.000000e+01, double 3.200000e+01, double 0x3FEEA7EF9DB22D0E, double 5.670000e-01, double 1.000000e+01, double 3.000000e+00, double 3.200000e+01, double 3.500000e+01, double 4.330000e-01, double 1.670000e-01, double 1.100000e+01, double 2.000000e+00, double 3.500000e+01, double 3.700000e+01, double 0x3FEAA7EF9DB22D0E, double 6.180000e-01, double 4.410000e+04, double 1.100000e+01, double 0.000000e+00, double 2.000000e+00, double 0.000000e+00, double 2.000000e+00, double 1.000000e+00, double 1.670000e-01, double 1.000000e+00, double 2.000000e+00, double 3.000000e+00, double 5.000000e+00, double 0x3FEAA7EF9DB22D0E, double 0x3FEAA7EF9DB22D0E, double 2.000000e+00, double 3.000000e+00, double 5.000000e+00, double 8.000000e+00, double 1.670000e-01, double 5.000000e-01, double 3.000000e+00, double 3.000000e+00, double 8.000000e+00, double 1.100000e+01, double 5.000000e-01, double 1.670000e-01, double 4.000000e+00, double 4.000000e+00, double 1.100000e+01, double 1.500000e+01, double 0x3FEAA7EF9DB22D0E, double 1.670000e-01, double 5.000000e+00, double 5.000000e+00, double 1.500000e+01, double 2.000000e+01, double 0x3FEAA7EF9DB22D0E, double 2.500000e-01, double 6.000000e+00, double 3.000000e+00, double 2.000000e+01, double 2.300000e+01, double 7.500000e-01, double 5.830000e-01, double 7.000000e+00, double 4.000000e+00, double 2.300000e+01, double 2.700000e+01, double 4.170000e-01, double 5.500000e-02, double 8.000000e+00, double 3.000000e+00, double 2.700000e+01, double 3.000000e+01, double 0x3FEE353F7CED9168, double 3.750000e-01, double 9.000000e+00, double 3.000000e+00, double 3.000000e+01, double 3.300000e+01, double 6.250000e-01, double 3.000000e-01, double 1.000000e+01, double 3.000000e+00, double 3.300000e+01, double 3.600000e+01, double 0x3FE6666666666666, double 1.670000e-01, double 1.100000e+01, double 2.000000e+00, double 3.600000e+01, double 3.800000e+01, double 0x3FEAA7EF9DB22D0E, double 1.000000e+00, double 3.200000e+04, double 1.100000e+01, double 0.000000e+00, double 2.000000e+00, double 0.000000e+00, double 2.000000e+00, double 1.000000e+00, double 1.670000e-01, double 1.000000e+00, double 2.000000e+00, double 3.000000e+00, double 5.000000e+00, double 0x3FEAA7EF9DB22D0E, double 0x3FEAA7EF9DB22D0E, double 2.000000e+00, double 3.000000e+00, double 5.000000e+00, double 8.000000e+00, double 1.670000e-01, double 5.000000e-01, double 3.000000e+00, double 3.000000e+00, double 8.000000e+00, double 1.100000e+01, double 5.000000e-01, double 1.670000e-01, double 4.000000e+00, double 4.000000e+00, double 1.100000e+01, double 1.500000e+01, double 0x3FEAA7EF9DB22D0E, double 1.670000e-01, double 5.000000e+00, double 5.000000e+00, double 1.500000e+01, double 2.000000e+01, double 0x3FEAA7EF9DB22D0E, double 2.500000e-01, double 6.000000e+00, double 4.000000e+00, double 2.000000e+01, double 2.400000e+01, double 7.500000e-01, double 2.500000e-01, double 7.000000e+00, double 5.000000e+00, double 2.400000e+01, double 2.900000e+01, double 7.500000e-01, double 5.500000e-02, double 8.000000e+00, double 4.000000e+00, double 2.900000e+01, double 3.300000e+01, double 0x3FEE353F7CED9168, double 3.750000e-01, double 9.000000e+00, double 4.000000e+00, double 3.300000e+01, double 3.700000e+01, double 6.250000e-01, double 4.720000e-01, double 1.000000e+01, double 3.000000e+00, double 3.700000e+01, double 4.000000e+01, double 5.280000e-01, double 9.370000e-01, double 1.100000e+01, double 1.000000e+00, double 4.000000e+01, double 4.100000e+01, double 6.200000e-02, double 1.000000e+00, double 2.400000e+04, double 1.100000e+01, double 0.000000e+00, double 3.000000e+00, double 0.000000e+00, double 4.000000e+00, double 1.000000e+00, double 0x3FC55555FFB34B69, double 1.000000e+00, double 2.000000e+00, double 4.000000e+00, double 6.000000e+00, double 0x3FEAAAAA80132D26, double 0x3FEAAAAAFFD9A5B4, double 2.000000e+00, double 3.000000e+00, double 6.000000e+00, double 9.000000e+00, double 0x3FC555540099692E, double 5.000000e-01, double 3.000000e+00, double 4.000000e+00, double 9.000000e+00, double 1.300000e+01, double 5.000000e-01, double 5.000000e-01, double 4.000000e+00, double 5.000000e+00, double 1.300000e+01, double 1.800000e+01, double 5.000000e-01, double 0x3FEAAAABFFF00731, double 5.000000e+00, double 5.000000e+00, double 1.800000e+01, double 2.300000e+01, double 0x3FC55550003FE33C, double 2.500000e-01, double 6.000000e+00, double 4.000000e+00, double 2.300000e+01, double 2.700000e+01, double 7.500000e-01, double 2.500000e-01, double 7.000000e+00, double 3.000000e+00, double 2.700000e+01, double 3.000000e+01, double 7.500000e-01, double 0x3FE38E3AC03CBDEE, double 8.000000e+00, double 4.000000e+00, double 3.000000e+01, double 3.400000e+01, double 0x3FD8E38A9FBCDA78, double 0x3FCAAAAFFFC01CC4, double 9.000000e+00, double 3.000000e+00, double 3.400000e+01, double 3.700000e+01, double 0x3FE95554000FF8CF, double 0x3FE888899FE29A25, double 1.000000e+01, double 4.000000e+00, double 3.700000e+01, double 4.100000e+01, double 0x3FCDDDD9A0ABEDC0, double 0x3FDCF3D23F7D6E6B, double 1.100000e+01, double 4.000000e+00, double 4.100000e+01, double 4.500000e+01, double 0x3FE18616E04148CB, double 0x3FD1C71FFF79C843, double 2.205000e+04, double 1.100000e+01, double 0.000000e+00, double 3.000000e+00, double 0.000000e+00, double 4.000000e+00, double 1.000000e+00, double 0x3FC55555FFB34B69, double 1.000000e+00, double 2.000000e+00, double 4.000000e+00, double 6.000000e+00, double 0x3FEAAAAA80132D26, double 0x3FEAAAAAFFD9A5B4, double 2.000000e+00, double 3.000000e+00, double 6.000000e+00, double 9.000000e+00, double 0x3FC555540099692E, double 5.000000e-01, double 3.000000e+00, double 4.000000e+00, double 9.000000e+00, double 1.300000e+01, double 5.000000e-01, double 5.000000e-01, double 4.000000e+00, double 4.000000e+00, double 1.300000e+01, double 1.700000e+01, double 5.000000e-01, double 5.000000e-01, double 5.000000e+00, double 4.000000e+00, double 1.700000e+01, double 2.100000e+01, double 5.000000e-01, double 0x3FED5556003CBBC8, double 6.000000e+00, double 4.000000e+00, double 2.100000e+01, double 2.500000e+01, double 0x3FB5554FFFD1EFBD, double 2.500000e-01, double 7.000000e+00, double 4.000000e+00, double 2.500000e+01, double 2.900000e+01, double 7.500000e-01, double 0x3FE38E3AC03CBDEE, double 8.000000e+00, double 4.000000e+00, double 2.900000e+01, double 3.300000e+01, double 0x3FD8E38A9FBCDA78, double 0x3FDD5557FFE00E62, double 9.000000e+00, double 4.000000e+00, double 3.300000e+01, double 3.700000e+01, double 0x3FE15554000FF8CF, double 0x3FE44446602E0A77, double 1.000000e+01, double 4.000000e+00, double 3.700000e+01, double 4.100000e+01, double 0x3FD777733FA3EB12, double 0x3FE2AAAD3FE9A4F5, double 1.100000e+01, double 4.000000e+00, double 4.100000e+01, double 4.500000e+01, double 0x3FDAAAA55FF65FC3, double 0x3FDC0004005985F2, double 1.600000e+04, double 1.100000e+01, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 4.000000e+00, double 1.000000e+00, double 0x3FC55555FFB34B69, double 1.000000e+00, double 0.000000e+00, double 4.000000e+00, double 6.000000e+00, double 0x3FEAAAAA80132D26, double 0x3FEAAAAAFFD9A5B4, double 2.000000e+00, double 0.000000e+00, double 6.000000e+00, double 9.000000e+00, double 0x3FC555540099692E, double 5.000000e-01, double 3.000000e+00, double 0.000000e+00, double 9.000000e+00, double 1.300000e+01, double 5.000000e-01, double 5.000000e-01, double 4.000000e+00, double 0.000000e+00, double 1.300000e+01, double 1.800000e+01, double 5.000000e-01, double 0x3FEAAAABFFF00731, double 5.000000e+00, double 0.000000e+00, double 1.800000e+01, double 2.300000e+01, double 0x3FC55550003FE33C, double 7.500000e-01, double 6.000000e+00, double 0.000000e+00, double 2.300000e+01, double 2.700000e+01, double 2.500000e-01, double 7.500000e-01, double 7.000000e+00, double 0.000000e+00, double 2.700000e+01, double 3.100000e+01, double 2.500000e-01, double 0x3FE38E3AC03CBDEE, double 8.000000e+00, double 0.000000e+00, double 3.100000e+01, double 3.500000e+01, double 0x3FD8E38A9FBCDA78, double 0x3FDD5557FFE00E62, double 9.000000e+00, double 0.000000e+00, double 3.500000e+01, double 3.900000e+01, double 0x3FE15554000FF8CF, double 0x3FC555597F33780E, double 1.000000e+01, double 0.000000e+00, double 3.900000e+01, double 4.200000e+01, double 0x3FEAAAA9A03321FD, double 0x3FE9C71D5FD9A6C7, double 1.100000e+01, double 0.000000e+00, double 4.200000e+01, double 4.600000e+01, double 0x3FC8E38AA0CFBB36, double 4.375000e-01], align 16
@subdv_table = dso_local local_unnamed_addr global [23 x %struct.anon.113] [%struct.anon.113 zeroinitializer, %struct.anon.113 zeroinitializer, %struct.anon.113 zeroinitializer, %struct.anon.113 zeroinitializer, %struct.anon.113 zeroinitializer, %struct.anon.113 { i32 0, i32 1 }, %struct.anon.113 { i32 1, i32 1 }, %struct.anon.113 { i32 1, i32 1 }, %struct.anon.113 { i32 1, i32 2 }, %struct.anon.113 { i32 2, i32 2 }, %struct.anon.113 { i32 2, i32 3 }, %struct.anon.113 { i32 2, i32 3 }, %struct.anon.113 { i32 3, i32 4 }, %struct.anon.113 { i32 3, i32 4 }, %struct.anon.113 { i32 3, i32 4 }, %struct.anon.113 { i32 4, i32 5 }, %struct.anon.113 { i32 4, i32 5 }, %struct.anon.113 { i32 4, i32 6 }, %struct.anon.113 { i32 5, i32 6 }, %struct.anon.113 { i32 5, i32 6 }, %struct.anon.113 { i32 5, i32 7 }, %struct.anon.113 { i32 6, i32 7 }, %struct.anon.113 { i32 6, i32 7 }], align 16
@huf_tbl_noESC = internal unnamed_addr constant [15 x i32] [i32 1, i32 2, i32 5, i32 7, i32 7, i32 10, i32 10, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13], align 16
@cb_esc_buf = internal global [288 x i32] zeroinitializer, align 16
@cb_esc_end = internal unnamed_addr global i32* null, align 8
@scfsi_calc.slen1_n = internal unnamed_addr constant [16 x i32] [i32 0, i32 1, i32 1, i32 1, i32 8, i32 2, i32 2, i32 2, i32 4, i32 4, i32 4, i32 8, i32 8, i32 8, i32 16, i32 16], align 16
@scfsi_calc.slen2_n = internal unnamed_addr constant [16 x i32] [i32 0, i32 2, i32 4, i32 8, i32 1, i32 2, i32 4, i32 8, i32 2, i32 4, i32 8, i32 2, i32 4, i32 8, i32 4, i32 8], align 16
@scfsi_calc.slen1_tab = internal unnamed_addr constant [16 x i32] [i32 0, i32 0, i32 0, i32 0, i32 3, i32 1, i32 1, i32 1, i32 2, i32 2, i32 2, i32 3, i32 3, i32 3, i32 4, i32 4], align 16
@scfsi_calc.slen2_tab = internal unnamed_addr constant [16 x i32] [i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 1, i32 2, i32 3, i32 1, i32 2, i32 3, i32 2, i32 3], align 16
@ts_real_time.initial_time = internal unnamed_addr global i64 0, align 8
@ts_process_time.initial_time = internal unnamed_addr global i64 0, align 8
@.str.448 = private unnamed_addr constant [75 x i8] c"    Frame          |  CPU/estimated  |  time/estimated | play/CPU |   ETA\0A\00", align 1
@.str.1.449 = private unnamed_addr constant [96 x i8] c"\0D%6ld/%6ld(%3d%%)|%2d:%02d:%02d/%2d:%02d:%02d|%2d:%02d:%02d/%2d:%02d:%02d|%10.4f|%2d:%02d:%02d \00", align 1
@s_freq_table = dso_local local_unnamed_addr global [2 x [4 x double]] [[4 x double] [double 2.205000e+01, double 2.400000e+01, double 1.600000e+01, double 0.000000e+00], [4 x double] [double 4.410000e+01, double 4.800000e+01, double 3.200000e+01, double 0.000000e+00]], align 16
@bitrate_table = dso_local local_unnamed_addr global [2 x [15 x i32]] [[15 x i32] [i32 0, i32 8, i32 16, i32 24, i32 32, i32 40, i32 48, i32 56, i32 64, i32 80, i32 96, i32 112, i32 128, i32 144, i32 160], [15 x i32] [i32 0, i32 32, i32 40, i32 48, i32 56, i32 64, i32 80, i32 96, i32 112, i32 128, i32 160, i32 192, i32 224, i32 256, i32 320]], align 16
@NativeByteOrder = dso_local local_unnamed_addr global i32 0, align 4
@putmask = dso_local local_unnamed_addr global [9 x i32] [i32 0, i32 1, i32 3, i32 7, i32 15, i32 31, i32 63, i32 127, i32 255], align 16
@.str.1.456 = private unnamed_addr constant [37 x i8] c"MPEG1 samplerates(kHz): 32 44.1 48 \0A\00", align 1
@.str.2.457 = private unnamed_addr constant [16 x i8] c"bitrates(kbs): \00", align 1
@.str.3.458 = private unnamed_addr constant [4 x i8] c"%i \00", align 1
@.str.4.459 = private unnamed_addr constant [38 x i8] c"MPEG2 samplerates(kHz): 16 22.05 24 \0A\00", align 1
@.str.5.462 = private unnamed_addr constant [51 x i8] c"Bitrate %dkbs not legal for %iHz output sampling.\0A\00", align 1
@.str.6.465 = private unnamed_addr constant [47 x i8] c"SmpFrqIndex: %ldHz is not a legal sample rate\0A\00", align 1
@.str.7.466 = private unnamed_addr constant [23 x i8] c"Unable to allocate %s\0A\00", align 1
@.str.8.469 = private unnamed_addr constant [5 x i8] c"ABCD\00", align 1
@.str.9.470 = private unnamed_addr constant [5 x i8] c"DCBA\00", align 1
@.str.10.477 = private unnamed_addr constant [7 x i8] c"buffer\00", align 1
@.str.11.482 = private unnamed_addr constant [51 x i8] c"Cannot read or write more than %d bits at a time.\0A\00", align 1
@SizeOfEmptyFrame = dso_local local_unnamed_addr global [2 x [2 x i32]] [[2 x i32] [i32 32, i32 17], [2 x i32] [i32 17, i32 9]], align 16
@pVbrFrames = dso_local local_unnamed_addr global i32* null, align 8
@nVbrNumFrames = dso_local local_unnamed_addr global i32 0, align 4
@nVbrFrameBufferSize = dso_local local_unnamed_addr global i32 0, align 4
@GetVbrTag.sr_table = internal unnamed_addr constant [4 x i32] [i32 44100, i32 48000, i32 32000, i32 99999], align 16
@pbtStreamBuffer = internal global [216 x i8] zeroinitializer, align 16
@nZeroStreamSize = internal unnamed_addr global i32 0, align 4
@.str.489 = private unnamed_addr constant [34 x i8] c"illegal sampling frequency index\0A\00", align 1
@InitVbrTag.framesize = internal unnamed_addr constant [3 x i32] [i32 208, i32 192, i32 288], align 4
@TotalFrameSize = internal unnamed_addr global i32 0, align 4
@.str.1.490 = private unnamed_addr constant [34 x i8] c"Xing VBR header problem...use -t\0A\00", align 1
@.str.2.493 = private unnamed_addr constant [4 x i8] c"rb+\00", align 1
@.str.3.494 = private unnamed_addr constant [7 x i8] c"LAME%s\00", align 1
@lpszVersion = internal global [80 x i8] zeroinitializer, align 16
@.str.2.497 = private unnamed_addr constant [8 x i8] c"%d.%02d\00", align 1
@.str.498 = private unnamed_addr constant [39 x i8] c"LAME version %s (www.sulaco.org/mp3) \0A\00", align 1
@.str.1.499 = private unnamed_addr constant [67 x i8] c"GPSYCHO: GPL psycho-acoustic and noise shaping model version %s. \0A\00", align 1
@.str.3.502 = private unnamed_addr constant [8 x i8] c"%d:%02d\00", align 1

; Function Attrs: nounwind uwtable
define dso_local i32 @decode_header(%struct.frame* %0, i64 %1) local_unnamed_addr #0 {
  %3 = and i64 %1, 1048576
  %4 = icmp eq i64 %3, 0
  %5 = lshr i64 %1, 19
  %6 = trunc i64 %5 to i32
  %7 = and i32 %6, 1
  %8 = xor i32 %7, 1
  %9 = select i1 %4, i32 1, i32 %8
  %10 = lshr exact i64 %3, 20
  %11 = trunc i64 %10 to i32
  %12 = xor i32 %11, 1
  %13 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 3
  store i32 %9, i32* %13, align 4
  %14 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 4
  store i32 %12, i32* %14, align 4
  %15 = lshr i64 %1, 17
  %16 = trunc i64 %15 to i32
  %17 = and i32 %16, 3
  %18 = sub nuw nsw i32 4, %17
  %19 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 6
  store i32 %18, i32* %19, align 4, !tbaa !2
  %20 = lshr i64 %1, 10
  %21 = and i64 %20, 3
  %22 = icmp eq i64 %21, 3
  br i1 %22, label %23, label %26

23:                                               ; preds = %2
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %25 = tail call i64 @fwrite(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0), i64 13, i64 1, %struct._IO_FILE* %24) #19
  tail call void @exit(i32 1) #20
  unreachable

26:                                               ; preds = %2
  %27 = icmp eq i32 %12, 0
  br i1 %27, label %28, label %35

28:                                               ; preds = %26
  %29 = mul nuw nsw i32 %9, 3
  %30 = trunc i64 %21 to i32
  %31 = add nuw nsw i32 %29, %30
  %32 = lshr i64 %1, 12
  %33 = trunc i64 %32 to i32
  %34 = and i32 %33, 15
  br label %42

35:                                               ; preds = %26
  %36 = trunc i64 %21 to i32
  %37 = add nuw nsw i32 %36, 6
  %38 = lshr i64 %1, 12
  %39 = trunc i64 %38 to i32
  %40 = and i32 %39, 15
  %41 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 8
  store i32 %40, i32* %41, align 4, !tbaa !9
  br label %42

42:                                               ; preds = %35, %28
  %43 = phi i32 [ %34, %28 ], [ %40, %35 ]
  %44 = phi i32 [ %31, %28 ], [ %37, %35 ]
  %45 = lshr i64 %1, 16
  %46 = trunc i64 %45 to i32
  %47 = and i32 %46, 1
  %48 = xor i32 %47, 1
  %49 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 9
  store i32 %44, i32* %49, align 4
  %50 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 7
  store i32 %48, i32* %50, align 4
  %51 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 8
  store i32 %43, i32* %51, align 4, !tbaa !9
  %52 = lshr i64 %1, 9
  %53 = trunc i64 %52 to i32
  %54 = and i32 %53, 1
  %55 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 10
  store i32 %54, i32* %55, align 4, !tbaa !10
  %56 = lshr i64 %1, 8
  %57 = trunc i64 %56 to i32
  %58 = and i32 %57, 1
  %59 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 11
  store i32 %58, i32* %59, align 4, !tbaa !11
  %60 = lshr i64 %1, 6
  %61 = trunc i64 %60 to i32
  %62 = and i32 %61, 3
  %63 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 12
  store i32 %62, i32* %63, align 4, !tbaa !12
  %64 = lshr i64 %1, 4
  %65 = trunc i64 %64 to i32
  %66 = and i32 %65, 3
  %67 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 13
  store i32 %66, i32* %67, align 4, !tbaa !13
  %68 = lshr i64 %1, 3
  %69 = trunc i64 %68 to i32
  %70 = and i32 %69, 1
  %71 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 14
  store i32 %70, i32* %71, align 4, !tbaa !14
  %72 = lshr i64 %1, 2
  %73 = trunc i64 %72 to i32
  %74 = and i32 %73, 1
  %75 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 15
  store i32 %74, i32* %75, align 4, !tbaa !15
  %76 = trunc i64 %1 to i32
  %77 = and i32 %76, 3
  %78 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 16
  store i32 %77, i32* %78, align 4, !tbaa !16
  %79 = icmp eq i32 %62, 3
  %80 = select i1 %79, i32 1, i32 2
  %81 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 0
  store i32 %80, i32* %81, align 4, !tbaa !17
  %82 = icmp eq i32 %43, 0
  br i1 %82, label %83, label %86

83:                                               ; preds = %42
  %84 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %85 = tail call i64 @fwrite(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0), i64 27, i64 1, %struct._IO_FILE* %84) #19
  br label %113

86:                                               ; preds = %42
  switch i32 %18, label %110 [
    i32 1, label %87
    i32 2, label %90
    i32 3, label %93
  ]

87:                                               ; preds = %86
  %88 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %89 = tail call i64 @fwrite(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0), i64 23, i64 1, %struct._IO_FILE* %88) #19
  br label %113

90:                                               ; preds = %86
  %91 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %92 = tail call i64 @fwrite(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0), i64 23, i64 1, %struct._IO_FILE* %91) #19
  br label %113

93:                                               ; preds = %86
  %94 = zext i32 %9 to i64
  %95 = zext i32 %43 to i64
  %96 = getelementptr inbounds [2 x [3 x [16 x i32]]], [2 x [3 x [16 x i32]]]* @tabsel_123, i64 0, i64 %94, i64 2, i64 %95
  %97 = load i32, i32* %96, align 4, !tbaa !18
  %98 = mul i32 %97, 144000
  %99 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 17
  %100 = sext i32 %44 to i64
  %101 = getelementptr inbounds [9 x i64], [9 x i64]* @freqs, i64 0, i64 %100
  %102 = load i64, i64* %101, align 8, !tbaa !19
  %103 = zext i32 %9 to i64
  %104 = shl i64 %102, %103
  %105 = sext i32 %98 to i64
  %106 = sdiv i64 %105, %104
  %107 = trunc i64 %106 to i32
  %108 = or i32 %54, -4
  %109 = add i32 %108, %107
  store i32 %109, i32* %99, align 4, !tbaa !21
  br label %113

110:                                              ; preds = %86
  %111 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %112 = tail call i64 @fwrite(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.4, i64 0, i64 0), i64 27, i64 1, %struct._IO_FILE* %111) #19
  br label %113

113:                                              ; preds = %110, %93, %90, %87, %83
  %114 = phi i32 [ 0, %110 ], [ 0, %83 ], [ 1, %93 ], [ 1, %90 ], [ 1, %87 ]
  ret i32 %114
}

; Function Attrs: nofree nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) local_unnamed_addr #1

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) local_unnamed_addr #2

; Function Attrs: nofree nounwind uwtable
define dso_local void @print_header(%struct.frame* nocapture readonly %0) local_unnamed_addr #3 {
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %3 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 4
  %4 = load i32, i32* %3, align 4, !tbaa !22
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %11

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 3
  %8 = load i32, i32* %7, align 4, !tbaa !23
  %9 = icmp eq i32 %8, 0
  %10 = select i1 %9, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15, i64 0, i64 0)
  br label %11

11:                                               ; preds = %6, %1
  %12 = phi i8* [ %10, %6 ], [ getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i64 0, i64 0), %1 ]
  %13 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 6
  %14 = load i32, i32* %13, align 4, !tbaa !2
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds [4 x i8*], [4 x i8*]* @print_header_compact.layers, i64 0, i64 %15
  %17 = load i8*, i8** %16, align 8, !tbaa !7
  %18 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 9
  %19 = load i32, i32* %18, align 4, !tbaa !24
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds [9 x i64], [9 x i64]* @freqs, i64 0, i64 %20
  %22 = load i64, i64* %21, align 8, !tbaa !19
  %23 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 12
  %24 = load i32, i32* %23, align 4, !tbaa !12
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds [4 x i8*], [4 x i8*]* @print_header.modes, i64 0, i64 %25
  %27 = load i8*, i8** %26, align 8, !tbaa !7
  %28 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 13
  %29 = load i32, i32* %28, align 4, !tbaa !13
  %30 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 17
  %31 = load i32, i32* %30, align 4, !tbaa !21
  %32 = add nsw i32 %31, 4
  %33 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.13, i64 0, i64 0), i8* %12, i8* %17, i64 %22, i8* %27, i32 %29, i32 %32) #19
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %35 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 0
  %36 = load i32, i32* %35, align 4, !tbaa !17
  %37 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 14
  %38 = load i32, i32* %37, align 4, !tbaa !14
  %39 = icmp eq i32 %38, 0
  %40 = select i1 %39, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i64 0, i64 0)
  %41 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 15
  %42 = load i32, i32* %41, align 4, !tbaa !15
  %43 = icmp eq i32 %42, 0
  %44 = select i1 %43, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i64 0, i64 0)
  %45 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 7
  %46 = load i32, i32* %45, align 4, !tbaa !25
  %47 = icmp eq i32 %46, 0
  %48 = select i1 %47, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i64 0, i64 0)
  %49 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 16
  %50 = load i32, i32* %49, align 4, !tbaa !16
  %51 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %34, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.17, i64 0, i64 0), i32 %36, i8* %40, i8* %44, i8* %48, i32 %50) #19
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %53 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 3
  %54 = load i32, i32* %53, align 4, !tbaa !23
  %55 = sext i32 %54 to i64
  %56 = load i32, i32* %13, align 4, !tbaa !2
  %57 = add nsw i32 %56, -1
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 8
  %60 = load i32, i32* %59, align 4, !tbaa !9
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds [2 x [3 x [16 x i32]]], [2 x [3 x [16 x i32]]]* @tabsel_123, i64 0, i64 %55, i64 %58, i64 %61
  %63 = load i32, i32* %62, align 4, !tbaa !18
  %64 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 11
  %65 = load i32, i32* %64, align 4, !tbaa !11
  %66 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %52, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.20, i64 0, i64 0), i32 %63, i32 %65) #19
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #4

; Function Attrs: nofree nounwind uwtable
define dso_local void @print_header_compact(%struct.frame* nocapture readonly %0) local_unnamed_addr #3 {
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %3 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 4
  %4 = load i32, i32* %3, align 4, !tbaa !22
  %5 = icmp eq i32 %4, 0
  %6 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 3
  %7 = load i32, i32* %6, align 4, !tbaa !23
  %8 = icmp eq i32 %7, 0
  %9 = select i1 %8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15, i64 0, i64 0)
  %10 = select i1 %5, i8* %9, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i64 0, i64 0)
  %11 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 6
  %12 = load i32, i32* %11, align 4, !tbaa !2
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds [4 x i8*], [4 x i8*]* @print_header_compact.layers, i64 0, i64 %13
  %15 = load i8*, i8** %14, align 8, !tbaa !7
  %16 = sext i32 %7 to i64
  %17 = add nsw i32 %12, -1
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 8
  %20 = load i32, i32* %19, align 4, !tbaa !9
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds [2 x [3 x [16 x i32]]], [2 x [3 x [16 x i32]]]* @tabsel_123, i64 0, i64 %16, i64 %18, i64 %21
  %23 = load i32, i32* %22, align 4, !tbaa !18
  %24 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 9
  %25 = load i32, i32* %24, align 4, !tbaa !24
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds [9 x i64], [9 x i64]* @freqs, i64 0, i64 %26
  %28 = load i64, i64* %27, align 8, !tbaa !19
  %29 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 12
  %30 = load i32, i32* %29, align 4, !tbaa !12
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds [4 x i8*], [4 x i8*]* @print_header_compact.modes, i64 0, i64 %31
  %33 = load i8*, i8** %32, align 8, !tbaa !7
  %34 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %2, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.25, i64 0, i64 0), i8* %10, i8* %15, i32 %23, i64 %28, i8* %33) #19
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local i32 @getbits(i32 %0) local_unnamed_addr #5 {
  %2 = icmp eq i32 %0, 0
  br i1 %2, label %30, label %3

3:                                                ; preds = %1
  %4 = load i8*, i8** @wordpointer, align 8, !tbaa !7
  %5 = load i8, i8* %4, align 1, !tbaa !26
  %6 = zext i8 %5 to i64
  %7 = getelementptr inbounds i8, i8* %4, i64 1
  %8 = load i8, i8* %7, align 1, !tbaa !26
  %9 = zext i8 %8 to i64
  %10 = shl nuw nsw i64 %6, 16
  %11 = shl nuw nsw i64 %9, 8
  %12 = or i64 %11, %10
  %13 = getelementptr inbounds i8, i8* %4, i64 2
  %14 = load i8, i8* %13, align 1, !tbaa !26
  %15 = zext i8 %14 to i64
  %16 = or i64 %12, %15
  %17 = load i32, i32* @bitindex, align 4, !tbaa !18
  %18 = zext i32 %17 to i64
  %19 = shl i64 %16, %18
  %20 = and i64 %19, 16777215
  %21 = add nsw i32 %17, %0
  %22 = sub nsw i32 24, %0
  %23 = zext i32 %22 to i64
  %24 = lshr i64 %20, %23
  %25 = ashr i32 %21, 3
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i8, i8* %4, i64 %26
  store i8* %27, i8** @wordpointer, align 8, !tbaa !7
  %28 = and i32 %21, 7
  store i32 %28, i32* @bitindex, align 4, !tbaa !18
  %29 = trunc i64 %24 to i32
  br label %30

30:                                               ; preds = %3, %1
  %31 = phi i32 [ %29, %3 ], [ 0, %1 ]
  ret i32 %31
}

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local i32 @getbits_fast(i32 %0) local_unnamed_addr #5 {
  %2 = load i8*, i8** @wordpointer, align 8, !tbaa !7
  %3 = load i8, i8* %2, align 1, !tbaa !26
  %4 = zext i8 %3 to i64
  %5 = shl nuw nsw i64 %4, 8
  %6 = getelementptr inbounds i8, i8* %2, i64 1
  %7 = load i8, i8* %6, align 1, !tbaa !26
  %8 = zext i8 %7 to i64
  %9 = or i64 %5, %8
  %10 = load i32, i32* @bitindex, align 4, !tbaa !18
  %11 = zext i32 %10 to i64
  %12 = shl i64 %9, %11
  %13 = and i64 %12, 65535
  %14 = add nsw i32 %10, %0
  %15 = sub nsw i32 16, %0
  %16 = zext i32 %15 to i64
  %17 = lshr i64 %13, %16
  %18 = ashr i32 %14, 3
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds i8, i8* %2, i64 %19
  store i8* %20, i8** @wordpointer, align 8, !tbaa !7
  %21 = and i32 %14, 7
  store i32 %21, i32* @bitindex, align 4, !tbaa !18
  %22 = trunc i64 %17 to i32
  ret i32 %22
}

; Function Attrs: nounwind uwtable
define dso_local void @dct64(double* nocapture %0, double* nocapture %1, double* readonly %2) local_unnamed_addr #0 {
  %4 = load double*, double** getelementptr inbounds ([5 x double*], [5 x double*]* @pnts, i64 0, i64 0), align 16, !tbaa !7
  %5 = load double, double* %2, align 8, !tbaa !27
  %6 = getelementptr inbounds double, double* %2, i64 31
  %7 = load double, double* %6, align 8, !tbaa !27
  %8 = fadd double %5, %7
  %9 = fsub double %5, %7
  %10 = load double, double* %4, align 8, !tbaa !27
  %11 = fmul double %9, %10
  %12 = getelementptr inbounds double, double* %2, i64 1
  %13 = load double, double* %12, align 8, !tbaa !27
  %14 = getelementptr inbounds double, double* %2, i64 30
  %15 = load double, double* %14, align 8, !tbaa !27
  %16 = fadd double %13, %15
  %17 = fsub double %13, %15
  %18 = getelementptr inbounds double, double* %4, i64 1
  %19 = load double, double* %18, align 8, !tbaa !27
  %20 = fmul double %17, %19
  %21 = getelementptr inbounds double, double* %2, i64 2
  %22 = load double, double* %21, align 8, !tbaa !27
  %23 = getelementptr inbounds double, double* %2, i64 29
  %24 = load double, double* %23, align 8, !tbaa !27
  %25 = fadd double %22, %24
  %26 = fsub double %22, %24
  %27 = getelementptr inbounds double, double* %4, i64 2
  %28 = load double, double* %27, align 8, !tbaa !27
  %29 = fmul double %26, %28
  %30 = getelementptr inbounds double, double* %2, i64 3
  %31 = load double, double* %30, align 8, !tbaa !27
  %32 = getelementptr inbounds double, double* %2, i64 28
  %33 = load double, double* %32, align 8, !tbaa !27
  %34 = fadd double %31, %33
  %35 = fsub double %31, %33
  %36 = getelementptr inbounds double, double* %4, i64 3
  %37 = load double, double* %36, align 8, !tbaa !27
  %38 = fmul double %35, %37
  %39 = getelementptr inbounds double, double* %2, i64 4
  %40 = load double, double* %39, align 8, !tbaa !27
  %41 = getelementptr inbounds double, double* %2, i64 27
  %42 = load double, double* %41, align 8, !tbaa !27
  %43 = fadd double %40, %42
  %44 = fsub double %40, %42
  %45 = getelementptr inbounds double, double* %4, i64 4
  %46 = load double, double* %45, align 8, !tbaa !27
  %47 = fmul double %44, %46
  %48 = getelementptr inbounds double, double* %2, i64 5
  %49 = load double, double* %48, align 8, !tbaa !27
  %50 = getelementptr inbounds double, double* %2, i64 26
  %51 = load double, double* %50, align 8, !tbaa !27
  %52 = fadd double %49, %51
  %53 = fsub double %49, %51
  %54 = getelementptr inbounds double, double* %4, i64 5
  %55 = load double, double* %54, align 8, !tbaa !27
  %56 = fmul double %53, %55
  %57 = getelementptr inbounds double, double* %2, i64 6
  %58 = load double, double* %57, align 8, !tbaa !27
  %59 = getelementptr inbounds double, double* %2, i64 25
  %60 = load double, double* %59, align 8, !tbaa !27
  %61 = fadd double %58, %60
  %62 = fsub double %58, %60
  %63 = getelementptr inbounds double, double* %4, i64 6
  %64 = load double, double* %63, align 8, !tbaa !27
  %65 = fmul double %62, %64
  %66 = getelementptr inbounds double, double* %2, i64 7
  %67 = load double, double* %66, align 8, !tbaa !27
  %68 = getelementptr inbounds double, double* %2, i64 24
  %69 = load double, double* %68, align 8, !tbaa !27
  %70 = fadd double %67, %69
  %71 = fsub double %67, %69
  %72 = getelementptr inbounds double, double* %4, i64 7
  %73 = load double, double* %72, align 8, !tbaa !27
  %74 = fmul double %71, %73
  %75 = getelementptr inbounds double, double* %2, i64 8
  %76 = load double, double* %75, align 8, !tbaa !27
  %77 = getelementptr inbounds double, double* %2, i64 23
  %78 = load double, double* %77, align 8, !tbaa !27
  %79 = fadd double %76, %78
  %80 = fsub double %76, %78
  %81 = getelementptr inbounds double, double* %4, i64 8
  %82 = load double, double* %81, align 8, !tbaa !27
  %83 = fmul double %80, %82
  %84 = getelementptr inbounds double, double* %2, i64 9
  %85 = load double, double* %84, align 8, !tbaa !27
  %86 = getelementptr inbounds double, double* %2, i64 22
  %87 = load double, double* %86, align 8, !tbaa !27
  %88 = fadd double %85, %87
  %89 = fsub double %85, %87
  %90 = getelementptr inbounds double, double* %4, i64 9
  %91 = load double, double* %90, align 8, !tbaa !27
  %92 = fmul double %89, %91
  %93 = getelementptr inbounds double, double* %2, i64 10
  %94 = load double, double* %93, align 8, !tbaa !27
  %95 = getelementptr inbounds double, double* %2, i64 21
  %96 = load double, double* %95, align 8, !tbaa !27
  %97 = fadd double %94, %96
  %98 = fsub double %94, %96
  %99 = getelementptr inbounds double, double* %4, i64 10
  %100 = load double, double* %99, align 8, !tbaa !27
  %101 = fmul double %98, %100
  %102 = getelementptr inbounds double, double* %2, i64 11
  %103 = load double, double* %102, align 8, !tbaa !27
  %104 = getelementptr inbounds double, double* %2, i64 20
  %105 = load double, double* %104, align 8, !tbaa !27
  %106 = fadd double %103, %105
  %107 = fsub double %103, %105
  %108 = getelementptr inbounds double, double* %4, i64 11
  %109 = load double, double* %108, align 8, !tbaa !27
  %110 = fmul double %107, %109
  %111 = getelementptr inbounds double, double* %2, i64 12
  %112 = load double, double* %111, align 8, !tbaa !27
  %113 = getelementptr inbounds double, double* %2, i64 19
  %114 = load double, double* %113, align 8, !tbaa !27
  %115 = fadd double %112, %114
  %116 = fsub double %112, %114
  %117 = getelementptr inbounds double, double* %4, i64 12
  %118 = load double, double* %117, align 8, !tbaa !27
  %119 = fmul double %116, %118
  %120 = getelementptr inbounds double, double* %2, i64 13
  %121 = load double, double* %120, align 8, !tbaa !27
  %122 = getelementptr inbounds double, double* %2, i64 18
  %123 = load double, double* %122, align 8, !tbaa !27
  %124 = fadd double %121, %123
  %125 = fsub double %121, %123
  %126 = getelementptr inbounds double, double* %4, i64 13
  %127 = load double, double* %126, align 8, !tbaa !27
  %128 = fmul double %125, %127
  %129 = getelementptr inbounds double, double* %2, i64 14
  %130 = load double, double* %129, align 8, !tbaa !27
  %131 = getelementptr inbounds double, double* %2, i64 17
  %132 = load double, double* %131, align 8, !tbaa !27
  %133 = fadd double %130, %132
  %134 = fsub double %130, %132
  %135 = getelementptr inbounds double, double* %4, i64 14
  %136 = load double, double* %135, align 8, !tbaa !27
  %137 = fmul double %134, %136
  %138 = getelementptr inbounds double, double* %2, i64 15
  %139 = load double, double* %138, align 8, !tbaa !27
  %140 = getelementptr inbounds double, double* %2, i64 16
  %141 = load double, double* %140, align 8, !tbaa !27
  %142 = fadd double %139, %141
  %143 = fsub double %139, %141
  %144 = getelementptr inbounds double, double* %4, i64 15
  %145 = load double, double* %144, align 8, !tbaa !27
  %146 = fmul double %143, %145
  %147 = load double*, double** getelementptr inbounds ([5 x double*], [5 x double*]* @pnts, i64 0, i64 1), align 8, !tbaa !7
  %148 = fadd double %8, %142
  %149 = fsub double %8, %142
  %150 = load double, double* %147, align 8, !tbaa !27
  %151 = fmul double %149, %150
  %152 = fadd double %16, %133
  %153 = fsub double %16, %133
  %154 = getelementptr inbounds double, double* %147, i64 1
  %155 = load double, double* %154, align 8, !tbaa !27
  %156 = fmul double %153, %155
  %157 = fadd double %25, %124
  %158 = fsub double %25, %124
  %159 = getelementptr inbounds double, double* %147, i64 2
  %160 = load double, double* %159, align 8, !tbaa !27
  %161 = fmul double %158, %160
  %162 = fadd double %34, %115
  %163 = fsub double %34, %115
  %164 = getelementptr inbounds double, double* %147, i64 3
  %165 = load double, double* %164, align 8, !tbaa !27
  %166 = fmul double %163, %165
  %167 = fadd double %43, %106
  %168 = fsub double %43, %106
  %169 = getelementptr inbounds double, double* %147, i64 4
  %170 = load double, double* %169, align 8, !tbaa !27
  %171 = fmul double %168, %170
  %172 = fadd double %52, %97
  %173 = fsub double %52, %97
  %174 = getelementptr inbounds double, double* %147, i64 5
  %175 = load double, double* %174, align 8, !tbaa !27
  %176 = fmul double %173, %175
  %177 = fadd double %61, %88
  %178 = fsub double %61, %88
  %179 = getelementptr inbounds double, double* %147, i64 6
  %180 = load double, double* %179, align 8, !tbaa !27
  %181 = fmul double %178, %180
  %182 = fadd double %70, %79
  %183 = fsub double %70, %79
  %184 = getelementptr inbounds double, double* %147, i64 7
  %185 = load double, double* %184, align 8, !tbaa !27
  %186 = fmul double %183, %185
  %187 = fadd double %11, %146
  %188 = fsub double %11, %146
  %189 = fmul double %188, %150
  %190 = fadd double %20, %137
  %191 = fsub double %20, %137
  %192 = fmul double %191, %155
  %193 = fadd double %29, %128
  %194 = fsub double %29, %128
  %195 = fmul double %194, %160
  %196 = fadd double %38, %119
  %197 = fsub double %38, %119
  %198 = fmul double %197, %165
  %199 = fadd double %47, %110
  %200 = fsub double %47, %110
  %201 = fmul double %200, %170
  %202 = fadd double %56, %101
  %203 = fsub double %56, %101
  %204 = fmul double %203, %175
  %205 = fadd double %65, %92
  %206 = fsub double %65, %92
  %207 = fmul double %206, %180
  %208 = fadd double %74, %83
  %209 = fsub double %74, %83
  %210 = fmul double %209, %185
  %211 = load double*, double** getelementptr inbounds ([5 x double*], [5 x double*]* @pnts, i64 0, i64 2), align 16, !tbaa !7
  %212 = fadd double %182, %148
  %213 = fsub double %148, %182
  %214 = load double, double* %211, align 8, !tbaa !27
  %215 = fmul double %213, %214
  %216 = fadd double %177, %152
  %217 = fsub double %152, %177
  %218 = getelementptr inbounds double, double* %211, i64 1
  %219 = load double, double* %218, align 8, !tbaa !27
  %220 = fmul double %217, %219
  %221 = fadd double %172, %157
  %222 = fsub double %157, %172
  %223 = getelementptr inbounds double, double* %211, i64 2
  %224 = load double, double* %223, align 8, !tbaa !27
  %225 = fmul double %222, %224
  %226 = fadd double %167, %162
  %227 = fsub double %162, %167
  %228 = getelementptr inbounds double, double* %211, i64 3
  %229 = load double, double* %228, align 8, !tbaa !27
  %230 = fmul double %227, %229
  %231 = fadd double %151, %186
  %232 = fsub double %151, %186
  %233 = fmul double %232, %214
  %234 = fadd double %156, %181
  %235 = fsub double %156, %181
  %236 = fmul double %235, %219
  %237 = fadd double %161, %176
  %238 = fsub double %161, %176
  %239 = fmul double %238, %224
  %240 = fadd double %166, %171
  %241 = fsub double %166, %171
  %242 = fmul double %241, %229
  %243 = fadd double %208, %187
  %244 = fsub double %187, %208
  %245 = fmul double %244, %214
  %246 = fadd double %205, %190
  %247 = fsub double %190, %205
  %248 = fmul double %247, %219
  %249 = fadd double %202, %193
  %250 = fsub double %193, %202
  %251 = fmul double %250, %224
  %252 = fadd double %199, %196
  %253 = fsub double %196, %199
  %254 = fmul double %253, %229
  %255 = fadd double %189, %210
  %256 = fsub double %189, %210
  %257 = fmul double %256, %214
  %258 = fadd double %192, %207
  %259 = fsub double %192, %207
  %260 = fmul double %259, %219
  %261 = fadd double %195, %204
  %262 = fsub double %195, %204
  %263 = fmul double %262, %224
  %264 = fadd double %198, %201
  %265 = fsub double %198, %201
  %266 = fmul double %265, %229
  %267 = load double*, double** getelementptr inbounds ([5 x double*], [5 x double*]* @pnts, i64 0, i64 3), align 8, !tbaa !7
  %268 = load double, double* %267, align 8, !tbaa !27
  %269 = getelementptr inbounds double, double* %267, i64 1
  %270 = load double, double* %269, align 8, !tbaa !27
  %271 = fadd double %226, %212
  %272 = fsub double %212, %226
  %273 = fmul double %272, %268
  %274 = fadd double %221, %216
  %275 = fsub double %216, %221
  %276 = fmul double %275, %270
  %277 = fadd double %215, %230
  %278 = fsub double %215, %230
  %279 = fmul double %268, %278
  %280 = fadd double %220, %225
  %281 = fsub double %220, %225
  %282 = fmul double %281, %270
  %283 = fadd double %240, %231
  %284 = fsub double %231, %240
  %285 = fmul double %284, %268
  %286 = fadd double %237, %234
  %287 = fsub double %234, %237
  %288 = fmul double %287, %270
  %289 = fadd double %233, %242
  %290 = fsub double %233, %242
  %291 = fmul double %268, %290
  %292 = fadd double %236, %239
  %293 = fsub double %236, %239
  %294 = fmul double %293, %270
  %295 = fadd double %252, %243
  %296 = fsub double %243, %252
  %297 = fmul double %296, %268
  %298 = fadd double %249, %246
  %299 = fsub double %246, %249
  %300 = fmul double %299, %270
  %301 = fadd double %245, %254
  %302 = fsub double %245, %254
  %303 = fmul double %268, %302
  %304 = fadd double %248, %251
  %305 = fsub double %248, %251
  %306 = fmul double %305, %270
  %307 = fadd double %264, %255
  %308 = fsub double %255, %264
  %309 = fmul double %308, %268
  %310 = fadd double %261, %258
  %311 = fsub double %258, %261
  %312 = fmul double %311, %270
  %313 = fadd double %257, %266
  %314 = fsub double %257, %266
  %315 = fmul double %268, %314
  %316 = fadd double %260, %263
  %317 = fsub double %260, %263
  %318 = fmul double %317, %270
  %319 = load double*, double** getelementptr inbounds ([5 x double*], [5 x double*]* @pnts, i64 0, i64 4), align 16, !tbaa !7
  %320 = load double, double* %319, align 8, !tbaa !27
  %321 = fadd double %274, %271
  %322 = fsub double %271, %274
  %323 = fmul double %322, %320
  %324 = fadd double %273, %276
  %325 = fsub double %273, %276
  %326 = fmul double %320, %325
  %327 = fadd double %324, %326
  %328 = fadd double %280, %277
  %329 = fsub double %277, %280
  %330 = fmul double %329, %320
  %331 = fadd double %279, %282
  %332 = fsub double %279, %282
  %333 = fmul double %320, %332
  %334 = fadd double %331, %333
  %335 = fadd double %328, %334
  %336 = fadd double %330, %334
  %337 = fadd double %330, %333
  %338 = fadd double %286, %283
  %339 = fsub double %283, %286
  %340 = fmul double %339, %320
  %341 = fadd double %285, %288
  %342 = fsub double %285, %288
  %343 = fmul double %320, %342
  %344 = fadd double %341, %343
  %345 = fadd double %292, %289
  %346 = fsub double %289, %292
  %347 = fmul double %346, %320
  %348 = fadd double %291, %294
  %349 = fsub double %291, %294
  %350 = fmul double %320, %349
  %351 = fadd double %348, %350
  %352 = fadd double %345, %351
  %353 = fadd double %347, %351
  %354 = fadd double %347, %350
  %355 = fadd double %298, %295
  %356 = fsub double %295, %298
  %357 = fmul double %356, %320
  %358 = fadd double %297, %300
  %359 = fsub double %297, %300
  %360 = fmul double %320, %359
  %361 = fadd double %358, %360
  %362 = fadd double %304, %301
  %363 = fsub double %301, %304
  %364 = fmul double %363, %320
  %365 = fadd double %303, %306
  %366 = fsub double %303, %306
  %367 = fmul double %320, %366
  %368 = fadd double %365, %367
  %369 = fadd double %362, %368
  %370 = fadd double %364, %368
  %371 = fadd double %364, %367
  %372 = fadd double %310, %307
  %373 = fsub double %307, %310
  %374 = fmul double %373, %320
  %375 = fadd double %309, %312
  %376 = fsub double %309, %312
  %377 = fmul double %320, %376
  %378 = fadd double %375, %377
  %379 = fadd double %316, %313
  %380 = fsub double %313, %316
  %381 = fmul double %380, %320
  %382 = fadd double %315, %318
  %383 = fsub double %315, %318
  %384 = fmul double %320, %383
  %385 = fadd double %382, %384
  %386 = fadd double %379, %385
  %387 = fadd double %381, %385
  %388 = fadd double %381, %384
  %389 = getelementptr inbounds double, double* %0, i64 256
  store double %321, double* %389, align 8, !tbaa !27
  %390 = getelementptr inbounds double, double* %0, i64 192
  store double %335, double* %390, align 8, !tbaa !27
  %391 = getelementptr inbounds double, double* %0, i64 128
  store double %327, double* %391, align 8, !tbaa !27
  %392 = getelementptr inbounds double, double* %0, i64 64
  store double %336, double* %392, align 8, !tbaa !27
  store double %323, double* %0, align 8, !tbaa !27
  store double %323, double* %1, align 8, !tbaa !27
  %393 = getelementptr inbounds double, double* %1, i64 64
  store double %337, double* %393, align 8, !tbaa !27
  %394 = getelementptr inbounds double, double* %1, i64 128
  store double %326, double* %394, align 8, !tbaa !27
  %395 = getelementptr inbounds double, double* %1, i64 192
  store double %333, double* %395, align 8, !tbaa !27
  %396 = fadd double %338, %352
  %397 = getelementptr inbounds double, double* %0, i64 224
  store double %396, double* %397, align 8, !tbaa !27
  %398 = fadd double %344, %352
  %399 = getelementptr inbounds double, double* %0, i64 160
  store double %398, double* %399, align 8, !tbaa !27
  %400 = fadd double %344, %353
  %401 = getelementptr inbounds double, double* %0, i64 96
  store double %400, double* %401, align 8, !tbaa !27
  %402 = fadd double %340, %353
  %403 = getelementptr inbounds double, double* %0, i64 32
  store double %402, double* %403, align 8, !tbaa !27
  %404 = fadd double %340, %354
  %405 = getelementptr inbounds double, double* %1, i64 32
  store double %404, double* %405, align 8, !tbaa !27
  %406 = fadd double %343, %354
  %407 = getelementptr inbounds double, double* %1, i64 96
  store double %406, double* %407, align 8, !tbaa !27
  %408 = fadd double %350, %343
  %409 = getelementptr inbounds double, double* %1, i64 160
  store double %408, double* %409, align 8, !tbaa !27
  %410 = getelementptr inbounds double, double* %1, i64 224
  store double %350, double* %410, align 8, !tbaa !27
  %411 = fadd double %372, %386
  %412 = fadd double %355, %411
  %413 = getelementptr inbounds double, double* %0, i64 240
  store double %412, double* %413, align 8, !tbaa !27
  %414 = fadd double %369, %411
  %415 = getelementptr inbounds double, double* %0, i64 208
  store double %414, double* %415, align 8, !tbaa !27
  %416 = fadd double %378, %386
  %417 = fadd double %369, %416
  %418 = getelementptr inbounds double, double* %0, i64 176
  store double %417, double* %418, align 8, !tbaa !27
  %419 = fadd double %361, %416
  %420 = getelementptr inbounds double, double* %0, i64 144
  store double %419, double* %420, align 8, !tbaa !27
  %421 = fadd double %378, %387
  %422 = fadd double %361, %421
  %423 = getelementptr inbounds double, double* %0, i64 112
  store double %422, double* %423, align 8, !tbaa !27
  %424 = fadd double %370, %421
  %425 = getelementptr inbounds double, double* %0, i64 80
  store double %424, double* %425, align 8, !tbaa !27
  %426 = fadd double %374, %387
  %427 = fadd double %370, %426
  %428 = getelementptr inbounds double, double* %0, i64 48
  store double %427, double* %428, align 8, !tbaa !27
  %429 = fadd double %357, %426
  %430 = getelementptr inbounds double, double* %0, i64 16
  store double %429, double* %430, align 8, !tbaa !27
  %431 = fadd double %374, %388
  %432 = fadd double %357, %431
  %433 = getelementptr inbounds double, double* %1, i64 16
  store double %432, double* %433, align 8, !tbaa !27
  %434 = fadd double %371, %431
  %435 = getelementptr inbounds double, double* %1, i64 48
  store double %434, double* %435, align 8, !tbaa !27
  %436 = fadd double %377, %388
  %437 = fadd double %371, %436
  %438 = getelementptr inbounds double, double* %1, i64 80
  store double %437, double* %438, align 8, !tbaa !27
  %439 = fadd double %360, %436
  %440 = getelementptr inbounds double, double* %1, i64 112
  store double %439, double* %440, align 8, !tbaa !27
  %441 = fadd double %384, %377
  %442 = fadd double %360, %441
  %443 = getelementptr inbounds double, double* %1, i64 144
  store double %442, double* %443, align 8, !tbaa !27
  %444 = fadd double %367, %441
  %445 = getelementptr inbounds double, double* %1, i64 176
  store double %444, double* %445, align 8, !tbaa !27
  %446 = fadd double %367, %384
  %447 = getelementptr inbounds double, double* %1, i64 208
  store double %446, double* %447, align 8, !tbaa !27
  %448 = getelementptr inbounds double, double* %1, i64 240
  store double %384, double* %448, align 8, !tbaa !27
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @synth_1to1_mono(double* %0, i8* nocapture %1, i32* nocapture %2) local_unnamed_addr #0 {
  %4 = alloca [64 x i16], align 16
  %5 = alloca i32, align 4
  %6 = bitcast [64 x i16]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %6) #21
  %7 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 0
  %8 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #21
  store i32 0, i32* %5, align 4, !tbaa !18
  %9 = call i32 @synth_1to1(double* %0, i32 0, i8* nonnull %6, i32* nonnull %5)
  %10 = load i32, i32* %2, align 4, !tbaa !18
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i8, i8* %1, i64 %11
  %13 = load i16, i16* %7, align 16, !tbaa !29
  %14 = bitcast i8* %12 to i16*
  store i16 %13, i16* %14, align 2, !tbaa !29
  %15 = getelementptr inbounds i8, i8* %12, i64 2
  %16 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 2
  %17 = load i16, i16* %16, align 4, !tbaa !29
  %18 = bitcast i8* %15 to i16*
  store i16 %17, i16* %18, align 2, !tbaa !29
  %19 = getelementptr inbounds i8, i8* %15, i64 2
  %20 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 4
  %21 = load i16, i16* %20, align 8, !tbaa !29
  %22 = bitcast i8* %19 to i16*
  store i16 %21, i16* %22, align 2, !tbaa !29
  %23 = getelementptr inbounds i8, i8* %19, i64 2
  %24 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 6
  %25 = load i16, i16* %24, align 4, !tbaa !29
  %26 = bitcast i8* %23 to i16*
  store i16 %25, i16* %26, align 2, !tbaa !29
  %27 = getelementptr inbounds i8, i8* %23, i64 2
  %28 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 8
  %29 = load i16, i16* %28, align 16, !tbaa !29
  %30 = bitcast i8* %27 to i16*
  store i16 %29, i16* %30, align 2, !tbaa !29
  %31 = getelementptr inbounds i8, i8* %27, i64 2
  %32 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 10
  %33 = load i16, i16* %32, align 4, !tbaa !29
  %34 = bitcast i8* %31 to i16*
  store i16 %33, i16* %34, align 2, !tbaa !29
  %35 = getelementptr inbounds i8, i8* %31, i64 2
  %36 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 12
  %37 = load i16, i16* %36, align 8, !tbaa !29
  %38 = bitcast i8* %35 to i16*
  store i16 %37, i16* %38, align 2, !tbaa !29
  %39 = getelementptr inbounds i8, i8* %35, i64 2
  %40 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 14
  %41 = load i16, i16* %40, align 4, !tbaa !29
  %42 = bitcast i8* %39 to i16*
  store i16 %41, i16* %42, align 2, !tbaa !29
  %43 = getelementptr inbounds i8, i8* %39, i64 2
  %44 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 16
  %45 = load i16, i16* %44, align 16, !tbaa !29
  %46 = bitcast i8* %43 to i16*
  store i16 %45, i16* %46, align 2, !tbaa !29
  %47 = getelementptr inbounds i8, i8* %43, i64 2
  %48 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 18
  %49 = load i16, i16* %48, align 4, !tbaa !29
  %50 = bitcast i8* %47 to i16*
  store i16 %49, i16* %50, align 2, !tbaa !29
  %51 = getelementptr inbounds i8, i8* %47, i64 2
  %52 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 20
  %53 = load i16, i16* %52, align 8, !tbaa !29
  %54 = bitcast i8* %51 to i16*
  store i16 %53, i16* %54, align 2, !tbaa !29
  %55 = getelementptr inbounds i8, i8* %51, i64 2
  %56 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 22
  %57 = load i16, i16* %56, align 4, !tbaa !29
  %58 = bitcast i8* %55 to i16*
  store i16 %57, i16* %58, align 2, !tbaa !29
  %59 = getelementptr inbounds i8, i8* %55, i64 2
  %60 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 24
  %61 = load i16, i16* %60, align 16, !tbaa !29
  %62 = bitcast i8* %59 to i16*
  store i16 %61, i16* %62, align 2, !tbaa !29
  %63 = getelementptr inbounds i8, i8* %59, i64 2
  %64 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 26
  %65 = load i16, i16* %64, align 4, !tbaa !29
  %66 = bitcast i8* %63 to i16*
  store i16 %65, i16* %66, align 2, !tbaa !29
  %67 = getelementptr inbounds i8, i8* %63, i64 2
  %68 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 28
  %69 = load i16, i16* %68, align 8, !tbaa !29
  %70 = bitcast i8* %67 to i16*
  store i16 %69, i16* %70, align 2, !tbaa !29
  %71 = getelementptr inbounds i8, i8* %67, i64 2
  %72 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 30
  %73 = load i16, i16* %72, align 4, !tbaa !29
  %74 = bitcast i8* %71 to i16*
  store i16 %73, i16* %74, align 2, !tbaa !29
  %75 = getelementptr inbounds i8, i8* %71, i64 2
  %76 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 32
  %77 = load i16, i16* %76, align 16, !tbaa !29
  %78 = bitcast i8* %75 to i16*
  store i16 %77, i16* %78, align 2, !tbaa !29
  %79 = getelementptr inbounds i8, i8* %75, i64 2
  %80 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 34
  %81 = load i16, i16* %80, align 4, !tbaa !29
  %82 = bitcast i8* %79 to i16*
  store i16 %81, i16* %82, align 2, !tbaa !29
  %83 = getelementptr inbounds i8, i8* %79, i64 2
  %84 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 36
  %85 = load i16, i16* %84, align 8, !tbaa !29
  %86 = bitcast i8* %83 to i16*
  store i16 %85, i16* %86, align 2, !tbaa !29
  %87 = getelementptr inbounds i8, i8* %83, i64 2
  %88 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 38
  %89 = load i16, i16* %88, align 4, !tbaa !29
  %90 = bitcast i8* %87 to i16*
  store i16 %89, i16* %90, align 2, !tbaa !29
  %91 = getelementptr inbounds i8, i8* %87, i64 2
  %92 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 40
  %93 = load i16, i16* %92, align 16, !tbaa !29
  %94 = bitcast i8* %91 to i16*
  store i16 %93, i16* %94, align 2, !tbaa !29
  %95 = getelementptr inbounds i8, i8* %91, i64 2
  %96 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 42
  %97 = load i16, i16* %96, align 4, !tbaa !29
  %98 = bitcast i8* %95 to i16*
  store i16 %97, i16* %98, align 2, !tbaa !29
  %99 = getelementptr inbounds i8, i8* %95, i64 2
  %100 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 44
  %101 = load i16, i16* %100, align 8, !tbaa !29
  %102 = bitcast i8* %99 to i16*
  store i16 %101, i16* %102, align 2, !tbaa !29
  %103 = getelementptr inbounds i8, i8* %99, i64 2
  %104 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 46
  %105 = load i16, i16* %104, align 4, !tbaa !29
  %106 = bitcast i8* %103 to i16*
  store i16 %105, i16* %106, align 2, !tbaa !29
  %107 = getelementptr inbounds i8, i8* %103, i64 2
  %108 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 48
  %109 = load i16, i16* %108, align 16, !tbaa !29
  %110 = bitcast i8* %107 to i16*
  store i16 %109, i16* %110, align 2, !tbaa !29
  %111 = getelementptr inbounds i8, i8* %107, i64 2
  %112 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 50
  %113 = load i16, i16* %112, align 4, !tbaa !29
  %114 = bitcast i8* %111 to i16*
  store i16 %113, i16* %114, align 2, !tbaa !29
  %115 = getelementptr inbounds i8, i8* %111, i64 2
  %116 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 52
  %117 = load i16, i16* %116, align 8, !tbaa !29
  %118 = bitcast i8* %115 to i16*
  store i16 %117, i16* %118, align 2, !tbaa !29
  %119 = getelementptr inbounds i8, i8* %115, i64 2
  %120 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 54
  %121 = load i16, i16* %120, align 4, !tbaa !29
  %122 = bitcast i8* %119 to i16*
  store i16 %121, i16* %122, align 2, !tbaa !29
  %123 = getelementptr inbounds i8, i8* %119, i64 2
  %124 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 56
  %125 = load i16, i16* %124, align 16, !tbaa !29
  %126 = bitcast i8* %123 to i16*
  store i16 %125, i16* %126, align 2, !tbaa !29
  %127 = getelementptr inbounds i8, i8* %123, i64 2
  %128 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 58
  %129 = load i16, i16* %128, align 4, !tbaa !29
  %130 = bitcast i8* %127 to i16*
  store i16 %129, i16* %130, align 2, !tbaa !29
  %131 = getelementptr inbounds i8, i8* %127, i64 2
  %132 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 60
  %133 = load i16, i16* %132, align 8, !tbaa !29
  %134 = bitcast i8* %131 to i16*
  store i16 %133, i16* %134, align 2, !tbaa !29
  %135 = getelementptr inbounds i8, i8* %131, i64 2
  %136 = getelementptr inbounds [64 x i16], [64 x i16]* %4, i64 0, i64 62
  %137 = load i16, i16* %136, align 4, !tbaa !29
  %138 = bitcast i8* %135 to i16*
  store i16 %137, i16* %138, align 2, !tbaa !29
  %139 = add nsw i32 %10, 64
  store i32 %139, i32* %2, align 4, !tbaa !18
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #21
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %6) #21
  ret i32 %9
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #6

; Function Attrs: nounwind uwtable
define dso_local i32 @synth_1to1(double* %0, i32 %1, i8* nocapture %2, i32* nocapture %3) local_unnamed_addr #0 {
  %5 = load i32, i32* %3, align 4, !tbaa !18
  %6 = sext i32 %5 to i64
  %7 = getelementptr inbounds i8, i8* %2, i64 %6
  %8 = load %struct.mpstr*, %struct.mpstr** @gmp, align 8, !tbaa !7
  %9 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %8, i64 0, i32 12
  %10 = load i32, i32* %9, align 8, !tbaa !31
  %11 = icmp eq i32 %1, 0
  %12 = getelementptr inbounds i8, i8* %7, i64 2
  %13 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %8, i64 0, i32 11, i64 1, i64 0
  %14 = add i32 %10, 15
  %15 = and i32 %14, 15
  %16 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %8, i64 0, i32 11, i64 0, i64 0
  %17 = select i1 %11, i32 %15, i32 %10
  %18 = select i1 %11, i8* %7, i8* %12
  %19 = select i1 %11, [272 x double]* %16, [272 x double]* %13
  %20 = bitcast i8* %18 to i16*
  %21 = and i32 %17, 1
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %31, label %23

23:                                               ; preds = %4
  %24 = getelementptr inbounds [272 x double], [272 x double]* %19, i64 0, i64 0
  %25 = add nsw i32 %17, 1
  %26 = and i32 %25, 15
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds [272 x double], [272 x double]* %19, i64 1, i64 %27
  %29 = sext i32 %17 to i64
  %30 = getelementptr inbounds [272 x double], [272 x double]* %19, i64 0, i64 %29
  tail call void @dct64(double* nonnull %28, double* nonnull %30, double* %0) #21
  br label %39

31:                                               ; preds = %4
  %32 = getelementptr inbounds [272 x double], [272 x double]* %19, i64 1, i64 0
  %33 = add nsw i32 %17, 1
  %34 = sext i32 %17 to i64
  %35 = getelementptr inbounds [272 x double], [272 x double]* %19, i64 0, i64 %34
  %36 = getelementptr inbounds [272 x double], [272 x double]* %19, i64 1, i64 %34
  %37 = getelementptr inbounds double, double* %36, i64 1
  tail call void @dct64(double* nonnull %35, double* nonnull %37, double* %0) #21
  %38 = sext i32 %33 to i64
  br label %39

39:                                               ; preds = %31, %23
  %40 = phi i64 [ %38, %31 ], [ %29, %23 ]
  %41 = phi double* [ %32, %31 ], [ %24, %23 ]
  %42 = phi i32 [ %33, %31 ], [ %17, %23 ]
  %43 = load %struct.mpstr*, %struct.mpstr** @gmp, align 8, !tbaa !7
  %44 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %43, i64 0, i32 12
  store i32 %17, i32* %44, align 8, !tbaa !31
  %45 = sub nsw i64 0, %40
  %46 = getelementptr inbounds double, double* getelementptr inbounds ([544 x double], [544 x double]* @decwin, i64 0, i64 16), i64 %45
  %47 = load double, double* %46, align 8, !tbaa !27
  %48 = load double, double* %41, align 8, !tbaa !27
  %49 = fmul double %47, %48
  br label %50

50:                                               ; preds = %154, %39
  %51 = phi double [ %49, %39 ], [ %163, %154 ]
  %52 = phi double* [ %46, %39 ], [ %158, %154 ]
  %53 = phi i32 [ 16, %39 ], [ %156, %154 ]
  %54 = phi i32 [ 0, %39 ], [ %155, %154 ]
  %55 = phi double* [ %41, %39 ], [ %157, %154 ]
  %56 = phi i16* [ %20, %39 ], [ %159, %154 ]
  %57 = getelementptr inbounds double, double* %52, i64 1
  %58 = load double, double* %57, align 8, !tbaa !27
  %59 = getelementptr inbounds double, double* %55, i64 1
  %60 = load double, double* %59, align 8, !tbaa !27
  %61 = fmul double %58, %60
  %62 = fsub double %51, %61
  %63 = getelementptr inbounds double, double* %52, i64 2
  %64 = load double, double* %63, align 8, !tbaa !27
  %65 = getelementptr inbounds double, double* %55, i64 2
  %66 = load double, double* %65, align 8, !tbaa !27
  %67 = fmul double %64, %66
  %68 = fadd double %62, %67
  %69 = getelementptr inbounds double, double* %52, i64 3
  %70 = load double, double* %69, align 8, !tbaa !27
  %71 = getelementptr inbounds double, double* %55, i64 3
  %72 = load double, double* %71, align 8, !tbaa !27
  %73 = fmul double %70, %72
  %74 = fsub double %68, %73
  %75 = getelementptr inbounds double, double* %52, i64 4
  %76 = load double, double* %75, align 8, !tbaa !27
  %77 = getelementptr inbounds double, double* %55, i64 4
  %78 = load double, double* %77, align 8, !tbaa !27
  %79 = fmul double %76, %78
  %80 = fadd double %74, %79
  %81 = getelementptr inbounds double, double* %52, i64 5
  %82 = load double, double* %81, align 8, !tbaa !27
  %83 = getelementptr inbounds double, double* %55, i64 5
  %84 = load double, double* %83, align 8, !tbaa !27
  %85 = fmul double %82, %84
  %86 = fsub double %80, %85
  %87 = getelementptr inbounds double, double* %52, i64 6
  %88 = load double, double* %87, align 8, !tbaa !27
  %89 = getelementptr inbounds double, double* %55, i64 6
  %90 = load double, double* %89, align 8, !tbaa !27
  %91 = fmul double %88, %90
  %92 = fadd double %86, %91
  %93 = getelementptr inbounds double, double* %52, i64 7
  %94 = load double, double* %93, align 8, !tbaa !27
  %95 = getelementptr inbounds double, double* %55, i64 7
  %96 = load double, double* %95, align 8, !tbaa !27
  %97 = fmul double %94, %96
  %98 = fsub double %92, %97
  %99 = getelementptr inbounds double, double* %52, i64 8
  %100 = load double, double* %99, align 8, !tbaa !27
  %101 = getelementptr inbounds double, double* %55, i64 8
  %102 = load double, double* %101, align 8, !tbaa !27
  %103 = fmul double %100, %102
  %104 = fadd double %98, %103
  %105 = getelementptr inbounds double, double* %52, i64 9
  %106 = load double, double* %105, align 8, !tbaa !27
  %107 = getelementptr inbounds double, double* %55, i64 9
  %108 = load double, double* %107, align 8, !tbaa !27
  %109 = fmul double %106, %108
  %110 = fsub double %104, %109
  %111 = getelementptr inbounds double, double* %52, i64 10
  %112 = load double, double* %111, align 8, !tbaa !27
  %113 = getelementptr inbounds double, double* %55, i64 10
  %114 = load double, double* %113, align 8, !tbaa !27
  %115 = fmul double %112, %114
  %116 = fadd double %110, %115
  %117 = getelementptr inbounds double, double* %52, i64 11
  %118 = load double, double* %117, align 8, !tbaa !27
  %119 = getelementptr inbounds double, double* %55, i64 11
  %120 = load double, double* %119, align 8, !tbaa !27
  %121 = fmul double %118, %120
  %122 = fsub double %116, %121
  %123 = getelementptr inbounds double, double* %52, i64 12
  %124 = getelementptr inbounds double, double* %55, i64 12
  %125 = bitcast double* %123 to <2 x double>*
  %126 = load <2 x double>, <2 x double>* %125, align 8, !tbaa !27
  %127 = bitcast double* %124 to <2 x double>*
  %128 = load <2 x double>, <2 x double>* %127, align 8, !tbaa !27
  %129 = fmul <2 x double> %126, %128
  %130 = extractelement <2 x double> %129, i32 0
  %131 = fadd double %122, %130
  %132 = extractelement <2 x double> %129, i32 1
  %133 = fsub double %131, %132
  %134 = getelementptr inbounds double, double* %52, i64 14
  %135 = getelementptr inbounds double, double* %55, i64 14
  %136 = bitcast double* %134 to <2 x double>*
  %137 = load <2 x double>, <2 x double>* %136, align 8, !tbaa !27
  %138 = bitcast double* %135 to <2 x double>*
  %139 = load <2 x double>, <2 x double>* %138, align 8, !tbaa !27
  %140 = fmul <2 x double> %137, %139
  %141 = extractelement <2 x double> %140, i32 0
  %142 = fadd double %133, %141
  %143 = extractelement <2 x double> %140, i32 1
  %144 = fsub double %142, %143
  %145 = fcmp ogt double %144, 3.276700e+04
  br i1 %145, label %146, label %148

146:                                              ; preds = %50
  store i16 32767, i16* %56, align 2, !tbaa !29
  %147 = add nsw i32 %54, 1
  br label %154

148:                                              ; preds = %50
  %149 = fcmp olt double %144, -3.276800e+04
  br i1 %149, label %150, label %152

150:                                              ; preds = %148
  store i16 -32768, i16* %56, align 2, !tbaa !29
  %151 = add nsw i32 %54, 1
  br label %154

152:                                              ; preds = %148
  %153 = fptosi double %144 to i16
  store i16 %153, i16* %56, align 2, !tbaa !29
  br label %154

154:                                              ; preds = %152, %150, %146
  %155 = phi i32 [ %147, %146 ], [ %151, %150 ], [ %54, %152 ]
  %156 = add nsw i32 %53, -1
  %157 = getelementptr inbounds double, double* %55, i64 16
  %158 = getelementptr inbounds double, double* %52, i64 32
  %159 = getelementptr inbounds i16, i16* %56, i64 2
  %160 = icmp eq i32 %156, 0
  %161 = load double, double* %158, align 8, !tbaa !27
  %162 = load double, double* %157, align 8, !tbaa !27
  %163 = fmul double %161, %162
  br i1 %160, label %164, label %50

164:                                              ; preds = %154
  %165 = getelementptr inbounds double, double* %52, i64 34
  %166 = load double, double* %165, align 8, !tbaa !27
  %167 = getelementptr inbounds double, double* %55, i64 18
  %168 = load double, double* %167, align 8, !tbaa !27
  %169 = fmul double %166, %168
  %170 = fadd double %163, %169
  %171 = getelementptr inbounds double, double* %52, i64 36
  %172 = load double, double* %171, align 8, !tbaa !27
  %173 = getelementptr inbounds double, double* %55, i64 20
  %174 = load double, double* %173, align 8, !tbaa !27
  %175 = fmul double %172, %174
  %176 = fadd double %170, %175
  %177 = getelementptr inbounds double, double* %52, i64 38
  %178 = load double, double* %177, align 8, !tbaa !27
  %179 = getelementptr inbounds double, double* %55, i64 22
  %180 = load double, double* %179, align 8, !tbaa !27
  %181 = fmul double %178, %180
  %182 = fadd double %176, %181
  %183 = getelementptr inbounds double, double* %52, i64 40
  %184 = load double, double* %183, align 8, !tbaa !27
  %185 = getelementptr inbounds double, double* %55, i64 24
  %186 = load double, double* %185, align 8, !tbaa !27
  %187 = fmul double %184, %186
  %188 = fadd double %182, %187
  %189 = getelementptr inbounds double, double* %52, i64 42
  %190 = load double, double* %189, align 8, !tbaa !27
  %191 = getelementptr inbounds double, double* %55, i64 26
  %192 = load double, double* %191, align 8, !tbaa !27
  %193 = fmul double %190, %192
  %194 = fadd double %188, %193
  %195 = getelementptr inbounds double, double* %52, i64 44
  %196 = load double, double* %195, align 8, !tbaa !27
  %197 = getelementptr inbounds double, double* %55, i64 28
  %198 = load double, double* %197, align 8, !tbaa !27
  %199 = fmul double %196, %198
  %200 = fadd double %194, %199
  %201 = getelementptr inbounds double, double* %52, i64 46
  %202 = load double, double* %201, align 8, !tbaa !27
  %203 = getelementptr inbounds double, double* %55, i64 30
  %204 = load double, double* %203, align 8, !tbaa !27
  %205 = fmul double %202, %204
  %206 = fadd double %200, %205
  %207 = fcmp ogt double %206, 3.276700e+04
  br i1 %207, label %208, label %210

208:                                              ; preds = %164
  store i16 32767, i16* %159, align 2, !tbaa !29
  %209 = add nsw i32 %155, 1
  br label %216

210:                                              ; preds = %164
  %211 = fcmp olt double %206, -3.276800e+04
  br i1 %211, label %212, label %214

212:                                              ; preds = %210
  store i16 -32768, i16* %159, align 2, !tbaa !29
  %213 = add nsw i32 %155, 1
  br label %216

214:                                              ; preds = %210
  %215 = fptosi double %206 to i16
  store i16 %215, i16* %159, align 2, !tbaa !29
  br label %216

216:                                              ; preds = %214, %212, %208
  %217 = phi i32 [ %209, %208 ], [ %213, %212 ], [ %155, %214 ]
  %218 = shl i32 %42, 1
  %219 = sext i32 %218 to i64
  %220 = getelementptr inbounds double, double* %52, i64 %219
  %221 = getelementptr inbounds i16, i16* %56, i64 4
  br label %222

222:                                              ; preds = %334, %216
  %223 = phi i16* [ %221, %216 ], [ %339, %334 ]
  %224 = phi double* [ %55, %216 ], [ %338, %334 ]
  %225 = phi double* [ %220, %216 ], [ %337, %334 ]
  %226 = phi i32 [ 15, %216 ], [ %336, %334 ]
  %227 = phi i32 [ %217, %216 ], [ %335, %334 ]
  %228 = phi double* [ %157, %216 ], [ %224, %334 ]
  %229 = getelementptr inbounds double, double* %225, i64 -1
  %230 = load double, double* %229, align 8, !tbaa !27
  %231 = fneg double %230
  %232 = load double, double* %224, align 8, !tbaa !27
  %233 = fmul double %232, %231
  %234 = getelementptr inbounds double, double* %225, i64 -2
  %235 = load double, double* %234, align 8, !tbaa !27
  %236 = getelementptr inbounds double, double* %228, i64 -15
  %237 = load double, double* %236, align 8, !tbaa !27
  %238 = fmul double %235, %237
  %239 = fsub double %233, %238
  %240 = getelementptr inbounds double, double* %225, i64 -3
  %241 = load double, double* %240, align 8, !tbaa !27
  %242 = getelementptr inbounds double, double* %228, i64 -14
  %243 = load double, double* %242, align 8, !tbaa !27
  %244 = fmul double %241, %243
  %245 = fsub double %239, %244
  %246 = getelementptr inbounds double, double* %225, i64 -4
  %247 = load double, double* %246, align 8, !tbaa !27
  %248 = getelementptr inbounds double, double* %228, i64 -13
  %249 = load double, double* %248, align 8, !tbaa !27
  %250 = fmul double %247, %249
  %251 = fsub double %245, %250
  %252 = getelementptr inbounds double, double* %225, i64 -5
  %253 = load double, double* %252, align 8, !tbaa !27
  %254 = getelementptr inbounds double, double* %228, i64 -12
  %255 = load double, double* %254, align 8, !tbaa !27
  %256 = fmul double %253, %255
  %257 = fsub double %251, %256
  %258 = getelementptr inbounds double, double* %225, i64 -6
  %259 = load double, double* %258, align 8, !tbaa !27
  %260 = getelementptr inbounds double, double* %228, i64 -11
  %261 = load double, double* %260, align 8, !tbaa !27
  %262 = fmul double %259, %261
  %263 = fsub double %257, %262
  %264 = getelementptr inbounds double, double* %225, i64 -7
  %265 = load double, double* %264, align 8, !tbaa !27
  %266 = getelementptr inbounds double, double* %228, i64 -10
  %267 = load double, double* %266, align 8, !tbaa !27
  %268 = fmul double %265, %267
  %269 = fsub double %263, %268
  %270 = getelementptr inbounds double, double* %225, i64 -8
  %271 = load double, double* %270, align 8, !tbaa !27
  %272 = getelementptr inbounds double, double* %228, i64 -9
  %273 = load double, double* %272, align 8, !tbaa !27
  %274 = fmul double %271, %273
  %275 = fsub double %269, %274
  %276 = getelementptr inbounds double, double* %225, i64 -9
  %277 = load double, double* %276, align 8, !tbaa !27
  %278 = getelementptr inbounds double, double* %228, i64 -8
  %279 = load double, double* %278, align 8, !tbaa !27
  %280 = fmul double %277, %279
  %281 = fsub double %275, %280
  %282 = getelementptr inbounds double, double* %225, i64 -10
  %283 = load double, double* %282, align 8, !tbaa !27
  %284 = getelementptr inbounds double, double* %228, i64 -7
  %285 = load double, double* %284, align 8, !tbaa !27
  %286 = fmul double %283, %285
  %287 = fsub double %281, %286
  %288 = getelementptr inbounds double, double* %225, i64 -11
  %289 = load double, double* %288, align 8, !tbaa !27
  %290 = getelementptr inbounds double, double* %228, i64 -6
  %291 = load double, double* %290, align 8, !tbaa !27
  %292 = fmul double %289, %291
  %293 = fsub double %287, %292
  %294 = getelementptr inbounds double, double* %225, i64 -12
  %295 = load double, double* %294, align 8, !tbaa !27
  %296 = getelementptr inbounds double, double* %228, i64 -5
  %297 = load double, double* %296, align 8, !tbaa !27
  %298 = fmul double %295, %297
  %299 = fsub double %293, %298
  %300 = getelementptr inbounds double, double* %228, i64 -4
  %301 = getelementptr inbounds double, double* %225, i64 -14
  %302 = bitcast double* %301 to <2 x double>*
  %303 = load <2 x double>, <2 x double>* %302, align 8, !tbaa !27
  %304 = shufflevector <2 x double> %303, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %305 = bitcast double* %300 to <2 x double>*
  %306 = load <2 x double>, <2 x double>* %305, align 8, !tbaa !27
  %307 = fmul <2 x double> %304, %306
  %308 = extractelement <2 x double> %307, i32 0
  %309 = fsub double %299, %308
  %310 = extractelement <2 x double> %307, i32 1
  %311 = fsub double %309, %310
  %312 = getelementptr inbounds double, double* %225, i64 -15
  %313 = load double, double* %312, align 8, !tbaa !27
  %314 = getelementptr inbounds double, double* %228, i64 -2
  %315 = load double, double* %225, align 8, !tbaa !27
  %316 = bitcast double* %314 to <2 x double>*
  %317 = load <2 x double>, <2 x double>* %316, align 8, !tbaa !27
  %318 = insertelement <2 x double> undef, double %313, i32 0
  %319 = insertelement <2 x double> %318, double %315, i32 1
  %320 = fmul <2 x double> %319, %317
  %321 = extractelement <2 x double> %320, i32 0
  %322 = fsub double %311, %321
  %323 = extractelement <2 x double> %320, i32 1
  %324 = fsub double %322, %323
  %325 = fcmp ogt double %324, 3.276700e+04
  br i1 %325, label %326, label %328

326:                                              ; preds = %222
  store i16 32767, i16* %223, align 2, !tbaa !29
  %327 = add nsw i32 %227, 1
  br label %334

328:                                              ; preds = %222
  %329 = fcmp olt double %324, -3.276800e+04
  br i1 %329, label %330, label %332

330:                                              ; preds = %328
  store i16 -32768, i16* %223, align 2, !tbaa !29
  %331 = add nsw i32 %227, 1
  br label %334

332:                                              ; preds = %328
  %333 = fptosi double %324 to i16
  store i16 %333, i16* %223, align 2, !tbaa !29
  br label %334

334:                                              ; preds = %332, %330, %326
  %335 = phi i32 [ %327, %326 ], [ %331, %330 ], [ %227, %332 ]
  %336 = add nsw i32 %226, -1
  %337 = getelementptr inbounds double, double* %225, i64 -32
  %338 = getelementptr inbounds double, double* %224, i64 -16
  %339 = getelementptr inbounds i16, i16* %223, i64 2
  %340 = icmp eq i32 %336, 0
  br i1 %340, label %341, label %222

341:                                              ; preds = %334
  %342 = load i32, i32* %3, align 4, !tbaa !18
  %343 = add nsw i32 %342, 128
  store i32 %343, i32* %3, align 4, !tbaa !18
  ret i32 %335
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #6

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @fft_short([256 x float]* %0, i32 %1, i16** nocapture readonly %2) local_unnamed_addr #5 {
  %4 = icmp slt i32 %1, 2
  %5 = icmp eq i32 %1, 2
  %6 = getelementptr inbounds i16*, i16** %2, i64 1
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds i16*, i16** %2, i64 %7
  br label %9

9:                                                ; preds = %507, %3
  %10 = phi i64 [ 0, %3 ], [ %509, %507 ]
  %11 = getelementptr inbounds [256 x float], [256 x float]* %0, i64 %10, i64 128
  %12 = mul nuw nsw i64 %10, 192
  %13 = add nuw nsw i64 %12, 192
  br i1 %4, label %14, label %147

14:                                               ; preds = %9
  %15 = load i16*, i16** %8, align 8, !tbaa !7
  %16 = trunc i64 %13 to i32
  br label %17

17:                                               ; preds = %17, %14
  %18 = phi i64 [ 31, %14 ], [ %145, %17 ]
  %19 = phi float* [ %11, %14 ], [ %79, %17 ]
  %20 = shl nuw nsw i64 %18, 2
  %21 = getelementptr inbounds [128 x i16], [128 x i16]* @rv_tbl, i64 0, i64 %20
  %22 = load i16, i16* %21, align 8, !tbaa !29
  %23 = sext i16 %22 to i64
  %24 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i64 0, i64 %23
  %25 = load float, float* %24, align 4, !tbaa !33
  %26 = sext i16 %22 to i32
  %27 = add nsw i32 %26, %16
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i16, i16* %15, i64 %28
  %30 = load i16, i16* %29, align 2, !tbaa !29
  %31 = sitofp i16 %30 to float
  %32 = fmul float %25, %31
  %33 = sub nsw i32 127, %26
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i64 0, i64 %34
  %36 = load float, float* %35, align 4, !tbaa !33
  %37 = add nsw i32 %27, 128
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds i16, i16* %15, i64 %38
  %40 = load i16, i16* %39, align 2, !tbaa !29
  %41 = sitofp i16 %40 to float
  %42 = fmul float %36, %41
  %43 = insertelement <2 x float> undef, float %32, i32 0
  %44 = shufflevector <2 x float> %43, <2 x float> undef, <2 x i32> zeroinitializer
  %45 = insertelement <2 x float> undef, float %42, i32 0
  %46 = shufflevector <2 x float> %45, <2 x float> undef, <2 x i32> zeroinitializer
  %47 = fadd <2 x float> %44, %46
  %48 = fsub <2 x float> %44, %46
  %49 = shufflevector <2 x float> %47, <2 x float> %48, <2 x i32> <i32 0, i32 3>
  %50 = shufflevector <2 x float> %49, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %51 = add nsw i32 %26, 64
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i64 0, i64 %52
  %54 = load float, float* %53, align 4, !tbaa !33
  %55 = add nsw i32 %27, 64
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i16, i16* %15, i64 %56
  %58 = load i16, i16* %57, align 2, !tbaa !29
  %59 = sitofp i16 %58 to float
  %60 = fmul float %54, %59
  %61 = sub nsw i32 63, %26
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i64 0, i64 %62
  %64 = load float, float* %63, align 4, !tbaa !33
  %65 = add nsw i32 %27, 192
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i16, i16* %15, i64 %66
  %68 = load i16, i16* %67, align 2, !tbaa !29
  %69 = sitofp i16 %68 to float
  %70 = fmul float %64, %69
  %71 = insertelement <2 x float> undef, float %60, i32 0
  %72 = shufflevector <2 x float> %71, <2 x float> undef, <2 x i32> zeroinitializer
  %73 = insertelement <2 x float> undef, float %70, i32 0
  %74 = shufflevector <2 x float> %73, <2 x float> undef, <2 x i32> zeroinitializer
  %75 = fadd <2 x float> %72, %74
  %76 = fsub <2 x float> %72, %74
  %77 = shufflevector <2 x float> %75, <2 x float> %76, <2 x i32> <i32 0, i32 3>
  %78 = shufflevector <2 x float> %77, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %79 = getelementptr inbounds float, float* %19, i64 -4
  %80 = fadd <4 x float> %50, %78
  %81 = fsub <4 x float> %50, %78
  %82 = shufflevector <4 x float> %80, <4 x float> %81, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %83 = bitcast float* %79 to <4 x float>*
  store <4 x float> %82, <4 x float>* %83, align 4, !tbaa !33
  %84 = add nsw i32 %26, 1
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i64 0, i64 %85
  %87 = load float, float* %86, align 4, !tbaa !33
  %88 = add nsw i32 %27, 1
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i16, i16* %15, i64 %89
  %91 = load i16, i16* %90, align 2, !tbaa !29
  %92 = sitofp i16 %91 to float
  %93 = fmul float %87, %92
  %94 = sub nsw i32 126, %26
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i64 0, i64 %95
  %97 = load float, float* %96, align 4, !tbaa !33
  %98 = add nsw i32 %27, 129
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i16, i16* %15, i64 %99
  %101 = load i16, i16* %100, align 2, !tbaa !29
  %102 = sitofp i16 %101 to float
  %103 = fmul float %97, %102
  %104 = insertelement <2 x float> undef, float %93, i32 0
  %105 = shufflevector <2 x float> %104, <2 x float> undef, <2 x i32> zeroinitializer
  %106 = insertelement <2 x float> undef, float %103, i32 0
  %107 = shufflevector <2 x float> %106, <2 x float> undef, <2 x i32> zeroinitializer
  %108 = fadd <2 x float> %105, %107
  %109 = fsub <2 x float> %105, %107
  %110 = shufflevector <2 x float> %108, <2 x float> %109, <2 x i32> <i32 0, i32 3>
  %111 = shufflevector <2 x float> %110, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %112 = add nsw i32 %26, 65
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i64 0, i64 %113
  %115 = load float, float* %114, align 4, !tbaa !33
  %116 = add nsw i32 %27, 65
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds i16, i16* %15, i64 %117
  %119 = load i16, i16* %118, align 2, !tbaa !29
  %120 = sitofp i16 %119 to float
  %121 = fmul float %115, %120
  %122 = sub nsw i32 62, %26
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i64 0, i64 %123
  %125 = load float, float* %124, align 4, !tbaa !33
  %126 = add nsw i32 %27, 193
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds i16, i16* %15, i64 %127
  %129 = load i16, i16* %128, align 2, !tbaa !29
  %130 = sitofp i16 %129 to float
  %131 = fmul float %125, %130
  %132 = insertelement <2 x float> undef, float %121, i32 0
  %133 = shufflevector <2 x float> %132, <2 x float> undef, <2 x i32> zeroinitializer
  %134 = insertelement <2 x float> undef, float %131, i32 0
  %135 = shufflevector <2 x float> %134, <2 x float> undef, <2 x i32> zeroinitializer
  %136 = fadd <2 x float> %133, %135
  %137 = fsub <2 x float> %133, %135
  %138 = shufflevector <2 x float> %136, <2 x float> %137, <2 x i32> <i32 0, i32 3>
  %139 = shufflevector <2 x float> %138, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %140 = getelementptr inbounds float, float* %19, i64 124
  %141 = fadd <4 x float> %111, %139
  %142 = fsub <4 x float> %111, %139
  %143 = shufflevector <4 x float> %141, <4 x float> %142, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %144 = bitcast float* %140 to <4 x float>*
  store <4 x float> %143, <4 x float>* %144, align 4, !tbaa !33
  %145 = add nsw i64 %18, -1
  %146 = icmp eq i64 %18, 0
  br i1 %146, label %507, label %17

147:                                              ; preds = %9
  %148 = load i16*, i16** %2, align 8, !tbaa !7
  %149 = trunc i64 %13 to i32
  %150 = load i16*, i16** %6, align 8, !tbaa !7
  br i1 %5, label %151, label %329

151:                                              ; preds = %151, %147
  %152 = phi i64 [ %327, %151 ], [ 31, %147 ]
  %153 = phi float* [ %237, %151 ], [ %11, %147 ]
  %154 = shl nuw nsw i64 %152, 2
  %155 = getelementptr inbounds [128 x i16], [128 x i16]* @rv_tbl, i64 0, i64 %154
  %156 = load i16, i16* %155, align 8, !tbaa !29
  %157 = sext i16 %156 to i64
  %158 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i64 0, i64 %157
  %159 = load float, float* %158, align 4, !tbaa !33
  %160 = sext i16 %156 to i32
  %161 = add nsw i32 %160, %149
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds i16, i16* %148, i64 %162
  %164 = load i16, i16* %163, align 2, !tbaa !29
  %165 = sext i16 %164 to i32
  %166 = getelementptr inbounds i16, i16* %150, i64 %162
  %167 = load i16, i16* %166, align 2, !tbaa !29
  %168 = sext i16 %167 to i32
  %169 = add nsw i32 %168, %165
  %170 = sitofp i32 %169 to float
  %171 = fmul float %170, 0x3FE6A09E60000000
  %172 = fmul float %159, %171
  %173 = sub nsw i32 127, %160
  %174 = sext i32 %173 to i64
  %175 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i64 0, i64 %174
  %176 = load float, float* %175, align 4, !tbaa !33
  %177 = add nsw i32 %161, 128
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds i16, i16* %148, i64 %178
  %180 = load i16, i16* %179, align 2, !tbaa !29
  %181 = sext i16 %180 to i32
  %182 = getelementptr inbounds i16, i16* %150, i64 %178
  %183 = load i16, i16* %182, align 2, !tbaa !29
  %184 = sext i16 %183 to i32
  %185 = add nsw i32 %184, %181
  %186 = sitofp i32 %185 to float
  %187 = fmul float %186, 0x3FE6A09E60000000
  %188 = fmul float %176, %187
  %189 = insertelement <2 x float> undef, float %172, i32 0
  %190 = shufflevector <2 x float> %189, <2 x float> undef, <2 x i32> zeroinitializer
  %191 = insertelement <2 x float> undef, float %188, i32 0
  %192 = shufflevector <2 x float> %191, <2 x float> undef, <2 x i32> zeroinitializer
  %193 = fadd <2 x float> %190, %192
  %194 = fsub <2 x float> %190, %192
  %195 = shufflevector <2 x float> %193, <2 x float> %194, <2 x i32> <i32 0, i32 3>
  %196 = shufflevector <2 x float> %195, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %197 = add nsw i32 %160, 64
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i64 0, i64 %198
  %200 = load float, float* %199, align 4, !tbaa !33
  %201 = add nsw i32 %161, 64
  %202 = sext i32 %201 to i64
  %203 = getelementptr inbounds i16, i16* %148, i64 %202
  %204 = load i16, i16* %203, align 2, !tbaa !29
  %205 = sext i16 %204 to i32
  %206 = getelementptr inbounds i16, i16* %150, i64 %202
  %207 = load i16, i16* %206, align 2, !tbaa !29
  %208 = sext i16 %207 to i32
  %209 = add nsw i32 %208, %205
  %210 = sitofp i32 %209 to float
  %211 = fmul float %210, 0x3FE6A09E60000000
  %212 = fmul float %200, %211
  %213 = sub nsw i32 63, %160
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i64 0, i64 %214
  %216 = load float, float* %215, align 4, !tbaa !33
  %217 = add nsw i32 %161, 192
  %218 = sext i32 %217 to i64
  %219 = getelementptr inbounds i16, i16* %148, i64 %218
  %220 = load i16, i16* %219, align 2, !tbaa !29
  %221 = sext i16 %220 to i32
  %222 = getelementptr inbounds i16, i16* %150, i64 %218
  %223 = load i16, i16* %222, align 2, !tbaa !29
  %224 = sext i16 %223 to i32
  %225 = add nsw i32 %224, %221
  %226 = sitofp i32 %225 to float
  %227 = fmul float %226, 0x3FE6A09E60000000
  %228 = fmul float %216, %227
  %229 = insertelement <2 x float> undef, float %212, i32 0
  %230 = shufflevector <2 x float> %229, <2 x float> undef, <2 x i32> zeroinitializer
  %231 = insertelement <2 x float> undef, float %228, i32 0
  %232 = shufflevector <2 x float> %231, <2 x float> undef, <2 x i32> zeroinitializer
  %233 = fadd <2 x float> %230, %232
  %234 = fsub <2 x float> %230, %232
  %235 = shufflevector <2 x float> %233, <2 x float> %234, <2 x i32> <i32 0, i32 3>
  %236 = shufflevector <2 x float> %235, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %237 = getelementptr inbounds float, float* %153, i64 -4
  %238 = fadd <4 x float> %196, %236
  %239 = fsub <4 x float> %196, %236
  %240 = shufflevector <4 x float> %238, <4 x float> %239, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %241 = bitcast float* %237 to <4 x float>*
  store <4 x float> %240, <4 x float>* %241, align 4, !tbaa !33
  %242 = add nsw i32 %160, 1
  %243 = sext i32 %242 to i64
  %244 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i64 0, i64 %243
  %245 = load float, float* %244, align 4, !tbaa !33
  %246 = add nsw i32 %161, 1
  %247 = sext i32 %246 to i64
  %248 = getelementptr inbounds i16, i16* %148, i64 %247
  %249 = load i16, i16* %248, align 2, !tbaa !29
  %250 = sext i16 %249 to i32
  %251 = getelementptr inbounds i16, i16* %150, i64 %247
  %252 = load i16, i16* %251, align 2, !tbaa !29
  %253 = sext i16 %252 to i32
  %254 = add nsw i32 %253, %250
  %255 = sitofp i32 %254 to float
  %256 = fmul float %255, 0x3FE6A09E60000000
  %257 = fmul float %245, %256
  %258 = sub nsw i32 126, %160
  %259 = sext i32 %258 to i64
  %260 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i64 0, i64 %259
  %261 = load float, float* %260, align 4, !tbaa !33
  %262 = add nsw i32 %161, 129
  %263 = sext i32 %262 to i64
  %264 = getelementptr inbounds i16, i16* %148, i64 %263
  %265 = load i16, i16* %264, align 2, !tbaa !29
  %266 = sext i16 %265 to i32
  %267 = getelementptr inbounds i16, i16* %150, i64 %263
  %268 = load i16, i16* %267, align 2, !tbaa !29
  %269 = sext i16 %268 to i32
  %270 = add nsw i32 %269, %266
  %271 = sitofp i32 %270 to float
  %272 = fmul float %271, 0x3FE6A09E60000000
  %273 = fmul float %261, %272
  %274 = insertelement <2 x float> undef, float %257, i32 0
  %275 = shufflevector <2 x float> %274, <2 x float> undef, <2 x i32> zeroinitializer
  %276 = insertelement <2 x float> undef, float %273, i32 0
  %277 = shufflevector <2 x float> %276, <2 x float> undef, <2 x i32> zeroinitializer
  %278 = fadd <2 x float> %275, %277
  %279 = fsub <2 x float> %275, %277
  %280 = shufflevector <2 x float> %278, <2 x float> %279, <2 x i32> <i32 0, i32 3>
  %281 = shufflevector <2 x float> %280, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %282 = add nsw i32 %160, 65
  %283 = sext i32 %282 to i64
  %284 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i64 0, i64 %283
  %285 = load float, float* %284, align 4, !tbaa !33
  %286 = add nsw i32 %161, 65
  %287 = sext i32 %286 to i64
  %288 = getelementptr inbounds i16, i16* %148, i64 %287
  %289 = load i16, i16* %288, align 2, !tbaa !29
  %290 = sext i16 %289 to i32
  %291 = getelementptr inbounds i16, i16* %150, i64 %287
  %292 = load i16, i16* %291, align 2, !tbaa !29
  %293 = sext i16 %292 to i32
  %294 = add nsw i32 %293, %290
  %295 = sitofp i32 %294 to float
  %296 = fmul float %295, 0x3FE6A09E60000000
  %297 = fmul float %285, %296
  %298 = sub nsw i32 62, %160
  %299 = sext i32 %298 to i64
  %300 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i64 0, i64 %299
  %301 = load float, float* %300, align 4, !tbaa !33
  %302 = add nsw i32 %161, 193
  %303 = sext i32 %302 to i64
  %304 = getelementptr inbounds i16, i16* %148, i64 %303
  %305 = load i16, i16* %304, align 2, !tbaa !29
  %306 = sext i16 %305 to i32
  %307 = getelementptr inbounds i16, i16* %150, i64 %303
  %308 = load i16, i16* %307, align 2, !tbaa !29
  %309 = sext i16 %308 to i32
  %310 = add nsw i32 %309, %306
  %311 = sitofp i32 %310 to float
  %312 = fmul float %311, 0x3FE6A09E60000000
  %313 = fmul float %301, %312
  %314 = insertelement <2 x float> undef, float %297, i32 0
  %315 = shufflevector <2 x float> %314, <2 x float> undef, <2 x i32> zeroinitializer
  %316 = insertelement <2 x float> undef, float %313, i32 0
  %317 = shufflevector <2 x float> %316, <2 x float> undef, <2 x i32> zeroinitializer
  %318 = fadd <2 x float> %315, %317
  %319 = fsub <2 x float> %315, %317
  %320 = shufflevector <2 x float> %318, <2 x float> %319, <2 x i32> <i32 0, i32 3>
  %321 = shufflevector <2 x float> %320, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %322 = getelementptr inbounds float, float* %153, i64 124
  %323 = fadd <4 x float> %281, %321
  %324 = fsub <4 x float> %281, %321
  %325 = shufflevector <4 x float> %323, <4 x float> %324, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %326 = bitcast float* %322 to <4 x float>*
  store <4 x float> %325, <4 x float>* %326, align 4, !tbaa !33
  %327 = add nsw i64 %152, -1
  %328 = icmp eq i64 %152, 0
  br i1 %328, label %507, label %151

329:                                              ; preds = %329, %147
  %330 = phi i64 [ %505, %329 ], [ 31, %147 ]
  %331 = phi float* [ %415, %329 ], [ %11, %147 ]
  %332 = shl nuw nsw i64 %330, 2
  %333 = getelementptr inbounds [128 x i16], [128 x i16]* @rv_tbl, i64 0, i64 %332
  %334 = load i16, i16* %333, align 8, !tbaa !29
  %335 = sext i16 %334 to i64
  %336 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i64 0, i64 %335
  %337 = load float, float* %336, align 4, !tbaa !33
  %338 = sext i16 %334 to i32
  %339 = add nsw i32 %338, %149
  %340 = sext i32 %339 to i64
  %341 = getelementptr inbounds i16, i16* %148, i64 %340
  %342 = load i16, i16* %341, align 2, !tbaa !29
  %343 = sext i16 %342 to i32
  %344 = getelementptr inbounds i16, i16* %150, i64 %340
  %345 = load i16, i16* %344, align 2, !tbaa !29
  %346 = sext i16 %345 to i32
  %347 = sub nsw i32 %343, %346
  %348 = sitofp i32 %347 to float
  %349 = fmul float %348, 0x3FE6A09E60000000
  %350 = fmul float %337, %349
  %351 = sub nsw i32 127, %338
  %352 = sext i32 %351 to i64
  %353 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i64 0, i64 %352
  %354 = load float, float* %353, align 4, !tbaa !33
  %355 = add nsw i32 %339, 128
  %356 = sext i32 %355 to i64
  %357 = getelementptr inbounds i16, i16* %148, i64 %356
  %358 = load i16, i16* %357, align 2, !tbaa !29
  %359 = sext i16 %358 to i32
  %360 = getelementptr inbounds i16, i16* %150, i64 %356
  %361 = load i16, i16* %360, align 2, !tbaa !29
  %362 = sext i16 %361 to i32
  %363 = sub nsw i32 %359, %362
  %364 = sitofp i32 %363 to float
  %365 = fmul float %364, 0x3FE6A09E60000000
  %366 = fmul float %354, %365
  %367 = insertelement <2 x float> undef, float %350, i32 0
  %368 = shufflevector <2 x float> %367, <2 x float> undef, <2 x i32> zeroinitializer
  %369 = insertelement <2 x float> undef, float %366, i32 0
  %370 = shufflevector <2 x float> %369, <2 x float> undef, <2 x i32> zeroinitializer
  %371 = fadd <2 x float> %368, %370
  %372 = fsub <2 x float> %368, %370
  %373 = shufflevector <2 x float> %371, <2 x float> %372, <2 x i32> <i32 0, i32 3>
  %374 = shufflevector <2 x float> %373, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %375 = add nsw i32 %338, 64
  %376 = sext i32 %375 to i64
  %377 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i64 0, i64 %376
  %378 = load float, float* %377, align 4, !tbaa !33
  %379 = add nsw i32 %339, 64
  %380 = sext i32 %379 to i64
  %381 = getelementptr inbounds i16, i16* %148, i64 %380
  %382 = load i16, i16* %381, align 2, !tbaa !29
  %383 = sext i16 %382 to i32
  %384 = getelementptr inbounds i16, i16* %150, i64 %380
  %385 = load i16, i16* %384, align 2, !tbaa !29
  %386 = sext i16 %385 to i32
  %387 = sub nsw i32 %383, %386
  %388 = sitofp i32 %387 to float
  %389 = fmul float %388, 0x3FE6A09E60000000
  %390 = fmul float %378, %389
  %391 = sub nsw i32 63, %338
  %392 = sext i32 %391 to i64
  %393 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i64 0, i64 %392
  %394 = load float, float* %393, align 4, !tbaa !33
  %395 = add nsw i32 %339, 192
  %396 = sext i32 %395 to i64
  %397 = getelementptr inbounds i16, i16* %148, i64 %396
  %398 = load i16, i16* %397, align 2, !tbaa !29
  %399 = sext i16 %398 to i32
  %400 = getelementptr inbounds i16, i16* %150, i64 %396
  %401 = load i16, i16* %400, align 2, !tbaa !29
  %402 = sext i16 %401 to i32
  %403 = sub nsw i32 %399, %402
  %404 = sitofp i32 %403 to float
  %405 = fmul float %404, 0x3FE6A09E60000000
  %406 = fmul float %394, %405
  %407 = insertelement <2 x float> undef, float %390, i32 0
  %408 = shufflevector <2 x float> %407, <2 x float> undef, <2 x i32> zeroinitializer
  %409 = insertelement <2 x float> undef, float %406, i32 0
  %410 = shufflevector <2 x float> %409, <2 x float> undef, <2 x i32> zeroinitializer
  %411 = fadd <2 x float> %408, %410
  %412 = fsub <2 x float> %408, %410
  %413 = shufflevector <2 x float> %411, <2 x float> %412, <2 x i32> <i32 0, i32 3>
  %414 = shufflevector <2 x float> %413, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %415 = getelementptr inbounds float, float* %331, i64 -4
  %416 = fadd <4 x float> %374, %414
  %417 = fsub <4 x float> %374, %414
  %418 = shufflevector <4 x float> %416, <4 x float> %417, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %419 = bitcast float* %415 to <4 x float>*
  store <4 x float> %418, <4 x float>* %419, align 4, !tbaa !33
  %420 = add nsw i32 %338, 1
  %421 = sext i32 %420 to i64
  %422 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i64 0, i64 %421
  %423 = load float, float* %422, align 4, !tbaa !33
  %424 = add nsw i32 %339, 1
  %425 = sext i32 %424 to i64
  %426 = getelementptr inbounds i16, i16* %148, i64 %425
  %427 = load i16, i16* %426, align 2, !tbaa !29
  %428 = sext i16 %427 to i32
  %429 = getelementptr inbounds i16, i16* %150, i64 %425
  %430 = load i16, i16* %429, align 2, !tbaa !29
  %431 = sext i16 %430 to i32
  %432 = sub nsw i32 %428, %431
  %433 = sitofp i32 %432 to float
  %434 = fmul float %433, 0x3FE6A09E60000000
  %435 = fmul float %423, %434
  %436 = sub nsw i32 126, %338
  %437 = sext i32 %436 to i64
  %438 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i64 0, i64 %437
  %439 = load float, float* %438, align 4, !tbaa !33
  %440 = add nsw i32 %339, 129
  %441 = sext i32 %440 to i64
  %442 = getelementptr inbounds i16, i16* %148, i64 %441
  %443 = load i16, i16* %442, align 2, !tbaa !29
  %444 = sext i16 %443 to i32
  %445 = getelementptr inbounds i16, i16* %150, i64 %441
  %446 = load i16, i16* %445, align 2, !tbaa !29
  %447 = sext i16 %446 to i32
  %448 = sub nsw i32 %444, %447
  %449 = sitofp i32 %448 to float
  %450 = fmul float %449, 0x3FE6A09E60000000
  %451 = fmul float %439, %450
  %452 = insertelement <2 x float> undef, float %435, i32 0
  %453 = shufflevector <2 x float> %452, <2 x float> undef, <2 x i32> zeroinitializer
  %454 = insertelement <2 x float> undef, float %451, i32 0
  %455 = shufflevector <2 x float> %454, <2 x float> undef, <2 x i32> zeroinitializer
  %456 = fadd <2 x float> %453, %455
  %457 = fsub <2 x float> %453, %455
  %458 = shufflevector <2 x float> %456, <2 x float> %457, <2 x i32> <i32 0, i32 3>
  %459 = shufflevector <2 x float> %458, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %460 = add nsw i32 %338, 65
  %461 = sext i32 %460 to i64
  %462 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i64 0, i64 %461
  %463 = load float, float* %462, align 4, !tbaa !33
  %464 = add nsw i32 %339, 65
  %465 = sext i32 %464 to i64
  %466 = getelementptr inbounds i16, i16* %148, i64 %465
  %467 = load i16, i16* %466, align 2, !tbaa !29
  %468 = sext i16 %467 to i32
  %469 = getelementptr inbounds i16, i16* %150, i64 %465
  %470 = load i16, i16* %469, align 2, !tbaa !29
  %471 = sext i16 %470 to i32
  %472 = sub nsw i32 %468, %471
  %473 = sitofp i32 %472 to float
  %474 = fmul float %473, 0x3FE6A09E60000000
  %475 = fmul float %463, %474
  %476 = sub nsw i32 62, %338
  %477 = sext i32 %476 to i64
  %478 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i64 0, i64 %477
  %479 = load float, float* %478, align 4, !tbaa !33
  %480 = add nsw i32 %339, 193
  %481 = sext i32 %480 to i64
  %482 = getelementptr inbounds i16, i16* %148, i64 %481
  %483 = load i16, i16* %482, align 2, !tbaa !29
  %484 = sext i16 %483 to i32
  %485 = getelementptr inbounds i16, i16* %150, i64 %481
  %486 = load i16, i16* %485, align 2, !tbaa !29
  %487 = sext i16 %486 to i32
  %488 = sub nsw i32 %484, %487
  %489 = sitofp i32 %488 to float
  %490 = fmul float %489, 0x3FE6A09E60000000
  %491 = fmul float %479, %490
  %492 = insertelement <2 x float> undef, float %475, i32 0
  %493 = shufflevector <2 x float> %492, <2 x float> undef, <2 x i32> zeroinitializer
  %494 = insertelement <2 x float> undef, float %491, i32 0
  %495 = shufflevector <2 x float> %494, <2 x float> undef, <2 x i32> zeroinitializer
  %496 = fadd <2 x float> %493, %495
  %497 = fsub <2 x float> %493, %495
  %498 = shufflevector <2 x float> %496, <2 x float> %497, <2 x i32> <i32 0, i32 3>
  %499 = shufflevector <2 x float> %498, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %500 = getelementptr inbounds float, float* %331, i64 124
  %501 = fadd <4 x float> %459, %499
  %502 = fsub <4 x float> %459, %499
  %503 = shufflevector <4 x float> %501, <4 x float> %502, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %504 = bitcast float* %500 to <4 x float>*
  store <4 x float> %503, <4 x float>* %504, align 4, !tbaa !33
  %505 = add nsw i64 %330, -1
  %506 = icmp eq i64 %330, 0
  br i1 %506, label %507, label %329

507:                                              ; preds = %329, %151, %17
  %508 = phi float* [ %79, %17 ], [ %237, %151 ], [ %415, %329 ]
  tail call fastcc void @fht(float* nonnull %508, i16 signext 256)
  %509 = add nuw nsw i64 %10, 1
  %510 = icmp eq i64 %509, 3
  br i1 %510, label %511, label %9

511:                                              ; preds = %507
  ret void
}

; Function Attrs: inlinehint nofree norecurse nounwind uwtable
define internal fastcc void @fht(float* %0, i16 signext %1) unnamed_addr #7 {
  %3 = sext i16 %1 to i64
  %4 = getelementptr inbounds float, float* %0, i64 %3
  br label %5

5:                                                ; preds = %147, %2
  %6 = phi float* [ getelementptr inbounds ([8 x float], [8 x float]* @costab, i64 0, i64 0), %2 ], [ %148, %147 ]
  %7 = phi i16 [ 4, %2 ], [ %11, %147 ]
  %8 = ashr exact i16 %7, 1
  %9 = shl i16 %7, 1
  %10 = mul i16 %7, 3
  %11 = shl i16 %7, 2
  %12 = sext i16 %8 to i64
  %13 = getelementptr inbounds float, float* %0, i64 %12
  %14 = sext i16 %7 to i64
  %15 = sext i16 %9 to i64
  %16 = sext i16 %10 to i64
  %17 = sext i16 %11 to i64
  br label %18

18:                                               ; preds = %18, %5
  %19 = phi float* [ %13, %5 ], [ %55, %18 ]
  %20 = phi float* [ %0, %5 ], [ %56, %18 ]
  %21 = load float, float* %20, align 4, !tbaa !33
  %22 = getelementptr inbounds float, float* %20, i64 %14
  %23 = load float, float* %22, align 4, !tbaa !33
  %24 = fsub float %21, %23
  %25 = fadd float %21, %23
  %26 = getelementptr inbounds float, float* %20, i64 %15
  %27 = load float, float* %26, align 4, !tbaa !33
  %28 = getelementptr inbounds float, float* %20, i64 %16
  %29 = load float, float* %28, align 4, !tbaa !33
  %30 = fsub float %27, %29
  %31 = fadd float %27, %29
  %32 = fsub float %25, %31
  store float %32, float* %26, align 4, !tbaa !33
  %33 = fadd float %25, %31
  store float %33, float* %20, align 4, !tbaa !33
  %34 = fsub float %24, %30
  store float %34, float* %28, align 4, !tbaa !33
  %35 = fadd float %24, %30
  store float %35, float* %22, align 4, !tbaa !33
  %36 = load float, float* %19, align 4, !tbaa !33
  %37 = getelementptr inbounds float, float* %19, i64 %14
  %38 = load float, float* %37, align 4, !tbaa !33
  %39 = fsub float %36, %38
  %40 = fadd float %36, %38
  %41 = getelementptr inbounds float, float* %19, i64 %16
  %42 = load float, float* %41, align 4, !tbaa !33
  %43 = fpext float %42 to double
  %44 = fmul double %43, 0x3FF6A09E667F3BCD
  %45 = fptrunc double %44 to float
  %46 = getelementptr inbounds float, float* %19, i64 %15
  %47 = load float, float* %46, align 4, !tbaa !33
  %48 = fpext float %47 to double
  %49 = fmul double %48, 0x3FF6A09E667F3BCD
  %50 = fptrunc double %49 to float
  %51 = fsub float %40, %50
  store float %51, float* %46, align 4, !tbaa !33
  %52 = fadd float %40, %50
  store float %52, float* %19, align 4, !tbaa !33
  %53 = fsub float %39, %45
  store float %53, float* %41, align 4, !tbaa !33
  %54 = fadd float %39, %45
  store float %54, float* %37, align 4, !tbaa !33
  %55 = getelementptr inbounds float, float* %19, i64 %17
  %56 = getelementptr inbounds float, float* %20, i64 %17
  %57 = icmp ult float* %56, %4
  br i1 %57, label %18, label %58

58:                                               ; preds = %18
  %59 = getelementptr inbounds float, float* %6, i64 1
  %60 = icmp sgt i16 %7, 2
  br i1 %60, label %61, label %147

61:                                               ; preds = %58
  %62 = load float, float* %59, align 4, !tbaa !33
  %63 = load float, float* %6, align 4, !tbaa !33
  %64 = getelementptr inbounds float, float* %0, i64 %14
  br label %65

65:                                               ; preds = %136, %61
  %66 = phi i64 [ 1, %61 ], [ %145, %136 ]
  %67 = phi float [ %62, %61 ], [ %144, %136 ]
  %68 = phi float [ %63, %61 ], [ %141, %136 ]
  %69 = fmul float %67, 2.000000e+00
  %70 = fmul float %67, %69
  %71 = fsub float 1.000000e+00, %70
  %72 = fmul float %68, %69
  %73 = getelementptr inbounds float, float* %0, i64 %66
  %74 = sub nsw i64 0, %66
  %75 = getelementptr inbounds float, float* %64, i64 %74
  br label %76

76:                                               ; preds = %76, %65
  %77 = phi float* [ %75, %65 ], [ %133, %76 ]
  %78 = phi float* [ %73, %65 ], [ %134, %76 ]
  %79 = getelementptr inbounds float, float* %78, i64 %14
  %80 = load float, float* %79, align 4, !tbaa !33
  %81 = fmul float %72, %80
  %82 = getelementptr inbounds float, float* %77, i64 %14
  %83 = load float, float* %82, align 4, !tbaa !33
  %84 = fmul float %71, %83
  %85 = fsub float %81, %84
  %86 = fmul float %71, %80
  %87 = fmul float %72, %83
  %88 = fadd float %86, %87
  %89 = load float, float* %78, align 4, !tbaa !33
  %90 = fsub float %89, %88
  %91 = fadd float %89, %88
  %92 = load float, float* %77, align 4, !tbaa !33
  %93 = fsub float %92, %85
  %94 = fadd float %92, %85
  %95 = getelementptr inbounds float, float* %78, i64 %16
  %96 = load float, float* %95, align 4, !tbaa !33
  %97 = fmul float %72, %96
  %98 = getelementptr inbounds float, float* %77, i64 %16
  %99 = load float, float* %98, align 4, !tbaa !33
  %100 = fmul float %71, %99
  %101 = fsub float %97, %100
  %102 = fmul float %71, %96
  %103 = fmul float %72, %99
  %104 = fadd float %102, %103
  %105 = getelementptr inbounds float, float* %78, i64 %15
  %106 = load float, float* %105, align 4, !tbaa !33
  %107 = fsub float %106, %104
  %108 = fadd float %106, %104
  %109 = getelementptr inbounds float, float* %77, i64 %15
  %110 = load float, float* %109, align 4, !tbaa !33
  %111 = fsub float %110, %101
  %112 = fadd float %110, %101
  %113 = fmul float %67, %108
  %114 = fmul float %68, %111
  %115 = fsub float %113, %114
  %116 = fmul float %68, %108
  %117 = fmul float %67, %111
  %118 = fadd float %116, %117
  %119 = fsub float %91, %118
  store float %119, float* %105, align 4, !tbaa !33
  %120 = fadd float %91, %118
  store float %120, float* %78, align 4, !tbaa !33
  %121 = fsub float %93, %115
  store float %121, float* %98, align 4, !tbaa !33
  %122 = fadd float %93, %115
  store float %122, float* %82, align 4, !tbaa !33
  %123 = fmul float %68, %112
  %124 = fmul float %67, %107
  %125 = fsub float %123, %124
  %126 = fmul float %67, %112
  %127 = fmul float %68, %107
  %128 = fadd float %126, %127
  %129 = fsub float %94, %128
  store float %129, float* %109, align 4, !tbaa !33
  %130 = fadd float %94, %128
  store float %130, float* %77, align 4, !tbaa !33
  %131 = fsub float %90, %125
  store float %131, float* %95, align 4, !tbaa !33
  %132 = fadd float %90, %125
  store float %132, float* %79, align 4, !tbaa !33
  %133 = getelementptr inbounds float, float* %77, i64 %17
  %134 = getelementptr inbounds float, float* %78, i64 %17
  %135 = icmp ult float* %134, %4
  br i1 %135, label %76, label %136

136:                                              ; preds = %76
  %137 = load float, float* %6, align 4, !tbaa !33
  %138 = fmul float %68, %137
  %139 = load float, float* %59, align 4, !tbaa !33
  %140 = fmul float %67, %139
  %141 = fsub float %138, %140
  %142 = fmul float %68, %139
  %143 = fmul float %67, %137
  %144 = fadd float %143, %142
  %145 = add nuw nsw i64 %66, 1
  %146 = icmp slt i64 %145, %12
  br i1 %146, label %65, label %147

147:                                              ; preds = %136, %58
  %148 = getelementptr inbounds float, float* %6, i64 2
  %149 = icmp slt i16 %11, %1
  br i1 %149, label %5, label %150

150:                                              ; preds = %147
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @fft_long(float* %0, i32 %1, i16** nocapture readonly %2) local_unnamed_addr #5 {
  %4 = getelementptr inbounds float, float* %0, i64 512
  %5 = icmp slt i32 %1, 2
  br i1 %5, label %6, label %131

6:                                                ; preds = %3
  %7 = sext i32 %1 to i64
  %8 = getelementptr inbounds i16*, i16** %2, i64 %7
  %9 = load i16*, i16** %8, align 8, !tbaa !7
  br label %10

10:                                               ; preds = %10, %6
  %11 = phi i64 [ 127, %6 ], [ %129, %10 ]
  %12 = phi float* [ %4, %6 ], [ %67, %10 ]
  %13 = getelementptr inbounds [128 x i16], [128 x i16]* @rv_tbl, i64 0, i64 %11
  %14 = load i16, i16* %13, align 2, !tbaa !29
  %15 = sext i16 %14 to i64
  %16 = getelementptr inbounds [512 x float], [512 x float]* @window, i64 0, i64 %15
  %17 = load float, float* %16, align 4, !tbaa !33
  %18 = getelementptr inbounds i16, i16* %9, i64 %15
  %19 = load i16, i16* %18, align 2, !tbaa !29
  %20 = sitofp i16 %19 to float
  %21 = fmul float %17, %20
  %22 = sext i16 %14 to i32
  %23 = sub nsw i32 511, %22
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds [512 x float], [512 x float]* @window, i64 0, i64 %24
  %26 = load float, float* %25, align 4, !tbaa !33
  %27 = add nsw i32 %22, 512
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i16, i16* %9, i64 %28
  %30 = load i16, i16* %29, align 2, !tbaa !29
  %31 = sitofp i16 %30 to float
  %32 = fmul float %26, %31
  %33 = insertelement <2 x float> undef, float %21, i32 0
  %34 = shufflevector <2 x float> %33, <2 x float> undef, <2 x i32> zeroinitializer
  %35 = insertelement <2 x float> undef, float %32, i32 0
  %36 = shufflevector <2 x float> %35, <2 x float> undef, <2 x i32> zeroinitializer
  %37 = fadd <2 x float> %34, %36
  %38 = fsub <2 x float> %34, %36
  %39 = shufflevector <2 x float> %37, <2 x float> %38, <2 x i32> <i32 0, i32 3>
  %40 = shufflevector <2 x float> %39, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %41 = add nsw i32 %22, 256
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds [512 x float], [512 x float]* @window, i64 0, i64 %42
  %44 = load float, float* %43, align 4, !tbaa !33
  %45 = getelementptr inbounds i16, i16* %9, i64 %42
  %46 = load i16, i16* %45, align 2, !tbaa !29
  %47 = sitofp i16 %46 to float
  %48 = fmul float %44, %47
  %49 = sub nsw i32 255, %22
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [512 x float], [512 x float]* @window, i64 0, i64 %50
  %52 = load float, float* %51, align 4, !tbaa !33
  %53 = add nsw i32 %22, 768
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i16, i16* %9, i64 %54
  %56 = load i16, i16* %55, align 2, !tbaa !29
  %57 = sitofp i16 %56 to float
  %58 = fmul float %52, %57
  %59 = insertelement <2 x float> undef, float %48, i32 0
  %60 = shufflevector <2 x float> %59, <2 x float> undef, <2 x i32> zeroinitializer
  %61 = insertelement <2 x float> undef, float %58, i32 0
  %62 = shufflevector <2 x float> %61, <2 x float> undef, <2 x i32> zeroinitializer
  %63 = fadd <2 x float> %60, %62
  %64 = fsub <2 x float> %60, %62
  %65 = shufflevector <2 x float> %63, <2 x float> %64, <2 x i32> <i32 0, i32 3>
  %66 = shufflevector <2 x float> %65, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %67 = getelementptr inbounds float, float* %12, i64 -4
  %68 = fadd <4 x float> %40, %66
  %69 = fsub <4 x float> %40, %66
  %70 = shufflevector <4 x float> %68, <4 x float> %69, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %71 = bitcast float* %67 to <4 x float>*
  store <4 x float> %70, <4 x float>* %71, align 4, !tbaa !33
  %72 = add nsw i32 %22, 1
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds [512 x float], [512 x float]* @window, i64 0, i64 %73
  %75 = load float, float* %74, align 4, !tbaa !33
  %76 = getelementptr inbounds i16, i16* %9, i64 %73
  %77 = load i16, i16* %76, align 2, !tbaa !29
  %78 = sitofp i16 %77 to float
  %79 = fmul float %75, %78
  %80 = sub nsw i32 510, %22
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds [512 x float], [512 x float]* @window, i64 0, i64 %81
  %83 = load float, float* %82, align 4, !tbaa !33
  %84 = add nsw i32 %22, 513
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i16, i16* %9, i64 %85
  %87 = load i16, i16* %86, align 2, !tbaa !29
  %88 = sitofp i16 %87 to float
  %89 = fmul float %83, %88
  %90 = insertelement <2 x float> undef, float %79, i32 0
  %91 = shufflevector <2 x float> %90, <2 x float> undef, <2 x i32> zeroinitializer
  %92 = insertelement <2 x float> undef, float %89, i32 0
  %93 = shufflevector <2 x float> %92, <2 x float> undef, <2 x i32> zeroinitializer
  %94 = fadd <2 x float> %91, %93
  %95 = fsub <2 x float> %91, %93
  %96 = shufflevector <2 x float> %94, <2 x float> %95, <2 x i32> <i32 0, i32 3>
  %97 = shufflevector <2 x float> %96, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %98 = add nsw i32 %22, 257
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds [512 x float], [512 x float]* @window, i64 0, i64 %99
  %101 = load float, float* %100, align 4, !tbaa !33
  %102 = getelementptr inbounds i16, i16* %9, i64 %99
  %103 = load i16, i16* %102, align 2, !tbaa !29
  %104 = sitofp i16 %103 to float
  %105 = fmul float %101, %104
  %106 = sub nsw i32 254, %22
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds [512 x float], [512 x float]* @window, i64 0, i64 %107
  %109 = load float, float* %108, align 4, !tbaa !33
  %110 = add nsw i32 %22, 769
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds i16, i16* %9, i64 %111
  %113 = load i16, i16* %112, align 2, !tbaa !29
  %114 = sitofp i16 %113 to float
  %115 = fmul float %109, %114
  %116 = insertelement <2 x float> undef, float %105, i32 0
  %117 = shufflevector <2 x float> %116, <2 x float> undef, <2 x i32> zeroinitializer
  %118 = insertelement <2 x float> undef, float %115, i32 0
  %119 = shufflevector <2 x float> %118, <2 x float> undef, <2 x i32> zeroinitializer
  %120 = fadd <2 x float> %117, %119
  %121 = fsub <2 x float> %117, %119
  %122 = shufflevector <2 x float> %120, <2 x float> %121, <2 x i32> <i32 0, i32 3>
  %123 = shufflevector <2 x float> %122, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %124 = getelementptr inbounds float, float* %12, i64 508
  %125 = fadd <4 x float> %97, %123
  %126 = fsub <4 x float> %97, %123
  %127 = shufflevector <4 x float> %125, <4 x float> %126, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %128 = bitcast float* %124 to <4 x float>*
  store <4 x float> %127, <4 x float>* %128, align 4, !tbaa !33
  %129 = add nsw i64 %11, -1
  %130 = icmp eq i64 %11, 0
  br i1 %130, label %474, label %10

131:                                              ; preds = %3
  %132 = icmp eq i32 %1, 2
  %133 = load i16*, i16** %2, align 8, !tbaa !7
  %134 = getelementptr inbounds i16*, i16** %2, i64 1
  %135 = load i16*, i16** %134, align 8, !tbaa !7
  br i1 %132, label %136, label %305

136:                                              ; preds = %136, %131
  %137 = phi i64 [ %303, %136 ], [ 127, %131 ]
  %138 = phi float* [ %217, %136 ], [ %4, %131 ]
  %139 = getelementptr inbounds [128 x i16], [128 x i16]* @rv_tbl, i64 0, i64 %137
  %140 = load i16, i16* %139, align 2, !tbaa !29
  %141 = sext i16 %140 to i64
  %142 = getelementptr inbounds [512 x float], [512 x float]* @window, i64 0, i64 %141
  %143 = load float, float* %142, align 4, !tbaa !33
  %144 = getelementptr inbounds i16, i16* %133, i64 %141
  %145 = load i16, i16* %144, align 2, !tbaa !29
  %146 = sext i16 %145 to i32
  %147 = getelementptr inbounds i16, i16* %135, i64 %141
  %148 = load i16, i16* %147, align 2, !tbaa !29
  %149 = sext i16 %148 to i32
  %150 = add nsw i32 %149, %146
  %151 = sitofp i32 %150 to float
  %152 = fmul float %151, 0x3FE6A09E60000000
  %153 = fmul float %143, %152
  %154 = sext i16 %140 to i32
  %155 = sub nsw i32 511, %154
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds [512 x float], [512 x float]* @window, i64 0, i64 %156
  %158 = load float, float* %157, align 4, !tbaa !33
  %159 = add nsw i32 %154, 512
  %160 = sext i32 %159 to i64
  %161 = getelementptr inbounds i16, i16* %133, i64 %160
  %162 = load i16, i16* %161, align 2, !tbaa !29
  %163 = sext i16 %162 to i32
  %164 = getelementptr inbounds i16, i16* %135, i64 %160
  %165 = load i16, i16* %164, align 2, !tbaa !29
  %166 = sext i16 %165 to i32
  %167 = add nsw i32 %166, %163
  %168 = sitofp i32 %167 to float
  %169 = fmul float %168, 0x3FE6A09E60000000
  %170 = fmul float %158, %169
  %171 = insertelement <2 x float> undef, float %153, i32 0
  %172 = shufflevector <2 x float> %171, <2 x float> undef, <2 x i32> zeroinitializer
  %173 = insertelement <2 x float> undef, float %170, i32 0
  %174 = shufflevector <2 x float> %173, <2 x float> undef, <2 x i32> zeroinitializer
  %175 = fadd <2 x float> %172, %174
  %176 = fsub <2 x float> %172, %174
  %177 = shufflevector <2 x float> %175, <2 x float> %176, <2 x i32> <i32 0, i32 3>
  %178 = shufflevector <2 x float> %177, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %179 = add nsw i32 %154, 256
  %180 = sext i32 %179 to i64
  %181 = getelementptr inbounds [512 x float], [512 x float]* @window, i64 0, i64 %180
  %182 = load float, float* %181, align 4, !tbaa !33
  %183 = getelementptr inbounds i16, i16* %133, i64 %180
  %184 = load i16, i16* %183, align 2, !tbaa !29
  %185 = sext i16 %184 to i32
  %186 = getelementptr inbounds i16, i16* %135, i64 %180
  %187 = load i16, i16* %186, align 2, !tbaa !29
  %188 = sext i16 %187 to i32
  %189 = add nsw i32 %188, %185
  %190 = sitofp i32 %189 to float
  %191 = fmul float %190, 0x3FE6A09E60000000
  %192 = fmul float %182, %191
  %193 = sub nsw i32 255, %154
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds [512 x float], [512 x float]* @window, i64 0, i64 %194
  %196 = load float, float* %195, align 4, !tbaa !33
  %197 = add nsw i32 %154, 768
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds i16, i16* %133, i64 %198
  %200 = load i16, i16* %199, align 2, !tbaa !29
  %201 = sext i16 %200 to i32
  %202 = getelementptr inbounds i16, i16* %135, i64 %198
  %203 = load i16, i16* %202, align 2, !tbaa !29
  %204 = sext i16 %203 to i32
  %205 = add nsw i32 %204, %201
  %206 = sitofp i32 %205 to float
  %207 = fmul float %206, 0x3FE6A09E60000000
  %208 = fmul float %196, %207
  %209 = insertelement <2 x float> undef, float %192, i32 0
  %210 = shufflevector <2 x float> %209, <2 x float> undef, <2 x i32> zeroinitializer
  %211 = insertelement <2 x float> undef, float %208, i32 0
  %212 = shufflevector <2 x float> %211, <2 x float> undef, <2 x i32> zeroinitializer
  %213 = fadd <2 x float> %210, %212
  %214 = fsub <2 x float> %210, %212
  %215 = shufflevector <2 x float> %213, <2 x float> %214, <2 x i32> <i32 0, i32 3>
  %216 = shufflevector <2 x float> %215, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %217 = getelementptr inbounds float, float* %138, i64 -4
  %218 = fadd <4 x float> %178, %216
  %219 = fsub <4 x float> %178, %216
  %220 = shufflevector <4 x float> %218, <4 x float> %219, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %221 = bitcast float* %217 to <4 x float>*
  store <4 x float> %220, <4 x float>* %221, align 4, !tbaa !33
  %222 = add nsw i32 %154, 1
  %223 = sext i32 %222 to i64
  %224 = getelementptr inbounds [512 x float], [512 x float]* @window, i64 0, i64 %223
  %225 = load float, float* %224, align 4, !tbaa !33
  %226 = getelementptr inbounds i16, i16* %133, i64 %223
  %227 = load i16, i16* %226, align 2, !tbaa !29
  %228 = sext i16 %227 to i32
  %229 = getelementptr inbounds i16, i16* %135, i64 %223
  %230 = load i16, i16* %229, align 2, !tbaa !29
  %231 = sext i16 %230 to i32
  %232 = add nsw i32 %231, %228
  %233 = sitofp i32 %232 to float
  %234 = fmul float %233, 0x3FE6A09E60000000
  %235 = fmul float %225, %234
  %236 = sub nsw i32 510, %154
  %237 = sext i32 %236 to i64
  %238 = getelementptr inbounds [512 x float], [512 x float]* @window, i64 0, i64 %237
  %239 = load float, float* %238, align 4, !tbaa !33
  %240 = add nsw i32 %154, 513
  %241 = sext i32 %240 to i64
  %242 = getelementptr inbounds i16, i16* %133, i64 %241
  %243 = load i16, i16* %242, align 2, !tbaa !29
  %244 = sext i16 %243 to i32
  %245 = getelementptr inbounds i16, i16* %135, i64 %241
  %246 = load i16, i16* %245, align 2, !tbaa !29
  %247 = sext i16 %246 to i32
  %248 = add nsw i32 %247, %244
  %249 = sitofp i32 %248 to float
  %250 = fmul float %249, 0x3FE6A09E60000000
  %251 = fmul float %239, %250
  %252 = insertelement <2 x float> undef, float %235, i32 0
  %253 = shufflevector <2 x float> %252, <2 x float> undef, <2 x i32> zeroinitializer
  %254 = insertelement <2 x float> undef, float %251, i32 0
  %255 = shufflevector <2 x float> %254, <2 x float> undef, <2 x i32> zeroinitializer
  %256 = fadd <2 x float> %253, %255
  %257 = fsub <2 x float> %253, %255
  %258 = shufflevector <2 x float> %256, <2 x float> %257, <2 x i32> <i32 0, i32 3>
  %259 = shufflevector <2 x float> %258, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %260 = add nsw i32 %154, 257
  %261 = sext i32 %260 to i64
  %262 = getelementptr inbounds [512 x float], [512 x float]* @window, i64 0, i64 %261
  %263 = load float, float* %262, align 4, !tbaa !33
  %264 = getelementptr inbounds i16, i16* %133, i64 %261
  %265 = load i16, i16* %264, align 2, !tbaa !29
  %266 = sext i16 %265 to i32
  %267 = getelementptr inbounds i16, i16* %135, i64 %261
  %268 = load i16, i16* %267, align 2, !tbaa !29
  %269 = sext i16 %268 to i32
  %270 = add nsw i32 %269, %266
  %271 = sitofp i32 %270 to float
  %272 = fmul float %271, 0x3FE6A09E60000000
  %273 = fmul float %263, %272
  %274 = sub nsw i32 254, %154
  %275 = sext i32 %274 to i64
  %276 = getelementptr inbounds [512 x float], [512 x float]* @window, i64 0, i64 %275
  %277 = load float, float* %276, align 4, !tbaa !33
  %278 = add nsw i32 %154, 769
  %279 = sext i32 %278 to i64
  %280 = getelementptr inbounds i16, i16* %133, i64 %279
  %281 = load i16, i16* %280, align 2, !tbaa !29
  %282 = sext i16 %281 to i32
  %283 = getelementptr inbounds i16, i16* %135, i64 %279
  %284 = load i16, i16* %283, align 2, !tbaa !29
  %285 = sext i16 %284 to i32
  %286 = add nsw i32 %285, %282
  %287 = sitofp i32 %286 to float
  %288 = fmul float %287, 0x3FE6A09E60000000
  %289 = fmul float %277, %288
  %290 = insertelement <2 x float> undef, float %273, i32 0
  %291 = shufflevector <2 x float> %290, <2 x float> undef, <2 x i32> zeroinitializer
  %292 = insertelement <2 x float> undef, float %289, i32 0
  %293 = shufflevector <2 x float> %292, <2 x float> undef, <2 x i32> zeroinitializer
  %294 = fadd <2 x float> %291, %293
  %295 = fsub <2 x float> %291, %293
  %296 = shufflevector <2 x float> %294, <2 x float> %295, <2 x i32> <i32 0, i32 3>
  %297 = shufflevector <2 x float> %296, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %298 = getelementptr inbounds float, float* %138, i64 508
  %299 = fadd <4 x float> %259, %297
  %300 = fsub <4 x float> %259, %297
  %301 = shufflevector <4 x float> %299, <4 x float> %300, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %302 = bitcast float* %298 to <4 x float>*
  store <4 x float> %301, <4 x float>* %302, align 4, !tbaa !33
  %303 = add nsw i64 %137, -1
  %304 = icmp eq i64 %137, 0
  br i1 %304, label %474, label %136

305:                                              ; preds = %305, %131
  %306 = phi i64 [ %472, %305 ], [ 127, %131 ]
  %307 = phi float* [ %386, %305 ], [ %4, %131 ]
  %308 = getelementptr inbounds [128 x i16], [128 x i16]* @rv_tbl, i64 0, i64 %306
  %309 = load i16, i16* %308, align 2, !tbaa !29
  %310 = sext i16 %309 to i64
  %311 = getelementptr inbounds [512 x float], [512 x float]* @window, i64 0, i64 %310
  %312 = load float, float* %311, align 4, !tbaa !33
  %313 = getelementptr inbounds i16, i16* %133, i64 %310
  %314 = load i16, i16* %313, align 2, !tbaa !29
  %315 = sext i16 %314 to i32
  %316 = getelementptr inbounds i16, i16* %135, i64 %310
  %317 = load i16, i16* %316, align 2, !tbaa !29
  %318 = sext i16 %317 to i32
  %319 = sub nsw i32 %315, %318
  %320 = sitofp i32 %319 to float
  %321 = fmul float %320, 0x3FE6A09E60000000
  %322 = fmul float %312, %321
  %323 = sext i16 %309 to i32
  %324 = sub nsw i32 511, %323
  %325 = sext i32 %324 to i64
  %326 = getelementptr inbounds [512 x float], [512 x float]* @window, i64 0, i64 %325
  %327 = load float, float* %326, align 4, !tbaa !33
  %328 = add nsw i32 %323, 512
  %329 = sext i32 %328 to i64
  %330 = getelementptr inbounds i16, i16* %133, i64 %329
  %331 = load i16, i16* %330, align 2, !tbaa !29
  %332 = sext i16 %331 to i32
  %333 = getelementptr inbounds i16, i16* %135, i64 %329
  %334 = load i16, i16* %333, align 2, !tbaa !29
  %335 = sext i16 %334 to i32
  %336 = sub nsw i32 %332, %335
  %337 = sitofp i32 %336 to float
  %338 = fmul float %337, 0x3FE6A09E60000000
  %339 = fmul float %327, %338
  %340 = insertelement <2 x float> undef, float %322, i32 0
  %341 = shufflevector <2 x float> %340, <2 x float> undef, <2 x i32> zeroinitializer
  %342 = insertelement <2 x float> undef, float %339, i32 0
  %343 = shufflevector <2 x float> %342, <2 x float> undef, <2 x i32> zeroinitializer
  %344 = fadd <2 x float> %341, %343
  %345 = fsub <2 x float> %341, %343
  %346 = shufflevector <2 x float> %344, <2 x float> %345, <2 x i32> <i32 0, i32 3>
  %347 = shufflevector <2 x float> %346, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %348 = add nsw i32 %323, 256
  %349 = sext i32 %348 to i64
  %350 = getelementptr inbounds [512 x float], [512 x float]* @window, i64 0, i64 %349
  %351 = load float, float* %350, align 4, !tbaa !33
  %352 = getelementptr inbounds i16, i16* %133, i64 %349
  %353 = load i16, i16* %352, align 2, !tbaa !29
  %354 = sext i16 %353 to i32
  %355 = getelementptr inbounds i16, i16* %135, i64 %349
  %356 = load i16, i16* %355, align 2, !tbaa !29
  %357 = sext i16 %356 to i32
  %358 = sub nsw i32 %354, %357
  %359 = sitofp i32 %358 to float
  %360 = fmul float %359, 0x3FE6A09E60000000
  %361 = fmul float %351, %360
  %362 = sub nsw i32 255, %323
  %363 = sext i32 %362 to i64
  %364 = getelementptr inbounds [512 x float], [512 x float]* @window, i64 0, i64 %363
  %365 = load float, float* %364, align 4, !tbaa !33
  %366 = add nsw i32 %323, 768
  %367 = sext i32 %366 to i64
  %368 = getelementptr inbounds i16, i16* %133, i64 %367
  %369 = load i16, i16* %368, align 2, !tbaa !29
  %370 = sext i16 %369 to i32
  %371 = getelementptr inbounds i16, i16* %135, i64 %367
  %372 = load i16, i16* %371, align 2, !tbaa !29
  %373 = sext i16 %372 to i32
  %374 = sub nsw i32 %370, %373
  %375 = sitofp i32 %374 to float
  %376 = fmul float %375, 0x3FE6A09E60000000
  %377 = fmul float %365, %376
  %378 = insertelement <2 x float> undef, float %361, i32 0
  %379 = shufflevector <2 x float> %378, <2 x float> undef, <2 x i32> zeroinitializer
  %380 = insertelement <2 x float> undef, float %377, i32 0
  %381 = shufflevector <2 x float> %380, <2 x float> undef, <2 x i32> zeroinitializer
  %382 = fadd <2 x float> %379, %381
  %383 = fsub <2 x float> %379, %381
  %384 = shufflevector <2 x float> %382, <2 x float> %383, <2 x i32> <i32 0, i32 3>
  %385 = shufflevector <2 x float> %384, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %386 = getelementptr inbounds float, float* %307, i64 -4
  %387 = fadd <4 x float> %347, %385
  %388 = fsub <4 x float> %347, %385
  %389 = shufflevector <4 x float> %387, <4 x float> %388, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %390 = bitcast float* %386 to <4 x float>*
  store <4 x float> %389, <4 x float>* %390, align 4, !tbaa !33
  %391 = add nsw i32 %323, 1
  %392 = sext i32 %391 to i64
  %393 = getelementptr inbounds [512 x float], [512 x float]* @window, i64 0, i64 %392
  %394 = load float, float* %393, align 4, !tbaa !33
  %395 = getelementptr inbounds i16, i16* %133, i64 %392
  %396 = load i16, i16* %395, align 2, !tbaa !29
  %397 = sext i16 %396 to i32
  %398 = getelementptr inbounds i16, i16* %135, i64 %392
  %399 = load i16, i16* %398, align 2, !tbaa !29
  %400 = sext i16 %399 to i32
  %401 = sub nsw i32 %397, %400
  %402 = sitofp i32 %401 to float
  %403 = fmul float %402, 0x3FE6A09E60000000
  %404 = fmul float %394, %403
  %405 = sub nsw i32 510, %323
  %406 = sext i32 %405 to i64
  %407 = getelementptr inbounds [512 x float], [512 x float]* @window, i64 0, i64 %406
  %408 = load float, float* %407, align 4, !tbaa !33
  %409 = add nsw i32 %323, 513
  %410 = sext i32 %409 to i64
  %411 = getelementptr inbounds i16, i16* %133, i64 %410
  %412 = load i16, i16* %411, align 2, !tbaa !29
  %413 = sext i16 %412 to i32
  %414 = getelementptr inbounds i16, i16* %135, i64 %410
  %415 = load i16, i16* %414, align 2, !tbaa !29
  %416 = sext i16 %415 to i32
  %417 = sub nsw i32 %413, %416
  %418 = sitofp i32 %417 to float
  %419 = fmul float %418, 0x3FE6A09E60000000
  %420 = fmul float %408, %419
  %421 = insertelement <2 x float> undef, float %404, i32 0
  %422 = shufflevector <2 x float> %421, <2 x float> undef, <2 x i32> zeroinitializer
  %423 = insertelement <2 x float> undef, float %420, i32 0
  %424 = shufflevector <2 x float> %423, <2 x float> undef, <2 x i32> zeroinitializer
  %425 = fadd <2 x float> %422, %424
  %426 = fsub <2 x float> %422, %424
  %427 = shufflevector <2 x float> %425, <2 x float> %426, <2 x i32> <i32 0, i32 3>
  %428 = shufflevector <2 x float> %427, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %429 = add nsw i32 %323, 257
  %430 = sext i32 %429 to i64
  %431 = getelementptr inbounds [512 x float], [512 x float]* @window, i64 0, i64 %430
  %432 = load float, float* %431, align 4, !tbaa !33
  %433 = getelementptr inbounds i16, i16* %133, i64 %430
  %434 = load i16, i16* %433, align 2, !tbaa !29
  %435 = sext i16 %434 to i32
  %436 = getelementptr inbounds i16, i16* %135, i64 %430
  %437 = load i16, i16* %436, align 2, !tbaa !29
  %438 = sext i16 %437 to i32
  %439 = sub nsw i32 %435, %438
  %440 = sitofp i32 %439 to float
  %441 = fmul float %440, 0x3FE6A09E60000000
  %442 = fmul float %432, %441
  %443 = sub nsw i32 254, %323
  %444 = sext i32 %443 to i64
  %445 = getelementptr inbounds [512 x float], [512 x float]* @window, i64 0, i64 %444
  %446 = load float, float* %445, align 4, !tbaa !33
  %447 = add nsw i32 %323, 769
  %448 = sext i32 %447 to i64
  %449 = getelementptr inbounds i16, i16* %133, i64 %448
  %450 = load i16, i16* %449, align 2, !tbaa !29
  %451 = sext i16 %450 to i32
  %452 = getelementptr inbounds i16, i16* %135, i64 %448
  %453 = load i16, i16* %452, align 2, !tbaa !29
  %454 = sext i16 %453 to i32
  %455 = sub nsw i32 %451, %454
  %456 = sitofp i32 %455 to float
  %457 = fmul float %456, 0x3FE6A09E60000000
  %458 = fmul float %446, %457
  %459 = insertelement <2 x float> undef, float %442, i32 0
  %460 = shufflevector <2 x float> %459, <2 x float> undef, <2 x i32> zeroinitializer
  %461 = insertelement <2 x float> undef, float %458, i32 0
  %462 = shufflevector <2 x float> %461, <2 x float> undef, <2 x i32> zeroinitializer
  %463 = fadd <2 x float> %460, %462
  %464 = fsub <2 x float> %460, %462
  %465 = shufflevector <2 x float> %463, <2 x float> %464, <2 x i32> <i32 0, i32 3>
  %466 = shufflevector <2 x float> %465, <2 x float> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %467 = getelementptr inbounds float, float* %307, i64 508
  %468 = fadd <4 x float> %428, %466
  %469 = fsub <4 x float> %428, %466
  %470 = shufflevector <4 x float> %468, <4 x float> %469, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %471 = bitcast float* %467 to <4 x float>*
  store <4 x float> %470, <4 x float>* %471, align 4, !tbaa !33
  %472 = add nsw i64 %306, -1
  %473 = icmp eq i64 %306, 0
  br i1 %473, label %474, label %305

474:                                              ; preds = %305, %136, %10
  tail call fastcc void @fht(float* nonnull %0, i16 signext 1024)
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @init_fft() local_unnamed_addr #3 {
  store <4 x float> <float 0x3FED906BC0000000, float 0x3FD87DE2C0000000, float 0x3FEFD88DA0000000, float 0x3FB917A6C0000000>, <4 x float>* bitcast ([8 x float]* @costab to <4 x float>*), align 16, !tbaa !33
  store <4 x float> <float 0x3FEFFD8860000000, float 0x3F99215600000000, float 0x3FEFFFD880000000, float 0x3F7921F100000000>, <4 x float>* bitcast (float* getelementptr inbounds ([8 x float], [8 x float]* @costab, i64 0, i64 4) to <4 x float>*), align 16, !tbaa !33
  br label %1

1:                                                ; preds = %1, %0
  %2 = phi i64 [ 0, %0 ], [ %24, %1 ]
  %3 = trunc i64 %2 to i32
  %4 = sitofp i32 %3 to double
  %5 = fadd double %4, 5.000000e-01
  %6 = fmul double %5, 0x401921FB54442D18
  %7 = fmul double %6, 0x3F50000000000000
  %8 = tail call double @cos(double %7) #21
  %9 = fsub double 1.000000e+00, %8
  %10 = fmul double %9, 5.000000e-01
  %11 = fptrunc double %10 to float
  %12 = getelementptr inbounds [512 x float], [512 x float]* @window, i64 0, i64 %2
  store float %11, float* %12, align 8, !tbaa !33
  %13 = or i64 %2, 1
  %14 = trunc i64 %13 to i32
  %15 = sitofp i32 %14 to double
  %16 = fadd double %15, 5.000000e-01
  %17 = fmul double %16, 0x401921FB54442D18
  %18 = fmul double %17, 0x3F50000000000000
  %19 = tail call double @cos(double %18) #21
  %20 = fsub double 1.000000e+00, %19
  %21 = fmul double %20, 5.000000e-01
  %22 = fptrunc double %21 to float
  %23 = getelementptr inbounds [512 x float], [512 x float]* @window, i64 0, i64 %13
  store float %22, float* %23, align 4, !tbaa !33
  %24 = add nuw nsw i64 %2, 2
  %25 = icmp eq i64 %24, 512
  br i1 %25, label %26, label %1

26:                                               ; preds = %26, %1
  %27 = phi i64 [ %49, %26 ], [ 0, %1 ]
  %28 = trunc i64 %27 to i32
  %29 = sitofp i32 %28 to double
  %30 = fadd double %29, 5.000000e-01
  %31 = fmul double %30, 0x401921FB54442D18
  %32 = fmul double %31, 3.906250e-03
  %33 = tail call double @cos(double %32) #21
  %34 = fsub double 1.000000e+00, %33
  %35 = fmul double %34, 5.000000e-01
  %36 = fptrunc double %35 to float
  %37 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i64 0, i64 %27
  store float %36, float* %37, align 8, !tbaa !33
  %38 = or i64 %27, 1
  %39 = trunc i64 %38 to i32
  %40 = sitofp i32 %39 to double
  %41 = fadd double %40, 5.000000e-01
  %42 = fmul double %41, 0x401921FB54442D18
  %43 = fmul double %42, 3.906250e-03
  %44 = tail call double @cos(double %43) #21
  %45 = fsub double 1.000000e+00, %44
  %46 = fmul double %45, 5.000000e-01
  %47 = fptrunc double %46 to float
  %48 = getelementptr inbounds [128 x float], [128 x float]* @window_s, i64 0, i64 %38
  store float %47, float* %48, align 4, !tbaa !33
  %49 = add nuw nsw i64 %27, 2
  %50 = icmp eq i64 %49, 128
  br i1 %50, label %51, label %26

51:                                               ; preds = %26
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local double @cos(double) local_unnamed_addr #4

; Function Attrs: nofree norecurse nounwind uwtable writeonly
define dso_local void @InitFormatBitStream() local_unnamed_addr #8 {
  store i32 0, i32* @BitCount, align 4, !tbaa !18
  store i32 0, i32* @ThisFrameSize, align 4, !tbaa !18
  store i32 0, i32* @BitsRemaining, align 4, !tbaa !18
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @BF_BitstreamFrame(%struct.BF_FrameData* readonly %0, %struct.BF_FrameResults* nocapture %1) local_unnamed_addr #0 {
  %3 = load %struct.side_info_link*, %struct.side_info_link** @side_queue_free, align 8, !tbaa !7
  %4 = icmp eq %struct.side_info_link* %3, null
  br i1 %4, label %5, label %102

5:                                                ; preds = %2
  %6 = tail call noalias dereferenceable_or_null(88) i8* @calloc(i64 1, i64 88) #21
  %7 = bitcast i8* %6 to %struct.side_info_link*
  %8 = icmp eq i8* %6, null
  br i1 %8, label %9, label %12

9:                                                ; preds = %5
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %11 = tail call i64 @fwrite(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.26, i64 0, i64 0), i64 30, i64 1, %struct._IO_FILE* %10) #22
  tail call void @exit(i32 1) #20
  unreachable

12:                                               ; preds = %5
  %13 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %0, i64 0, i32 3
  %14 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %13, align 8, !tbaa !35
  %15 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %14, i64 0, i32 0
  %16 = load i32, i32* %15, align 8, !tbaa !37
  %17 = tail call noalias dereferenceable_or_null(16) i8* @calloc(i64 1, i64 16) #21
  %18 = bitcast i8* %17 to i32*
  store i32 %16, i32* %18, align 8, !tbaa !39
  %19 = tail call noalias dereferenceable_or_null(16) i8* @calloc(i64 1, i64 16) #21
  %20 = getelementptr inbounds i8, i8* %17, i64 8
  %21 = bitcast i8* %20 to i8**
  store i8* %19, i8** %21, align 8, !tbaa !41
  %22 = sext i32 %16 to i64
  %23 = tail call noalias i8* @calloc(i64 %22, i64 8) #21
  %24 = getelementptr inbounds i8, i8* %19, i64 8
  %25 = bitcast i8* %24 to i8**
  store i8* %23, i8** %25, align 8, !tbaa !42
  %26 = getelementptr inbounds i8, i8* %6, i64 24
  %27 = bitcast i8* %26 to i8**
  store i8* %17, i8** %27, align 8, !tbaa !43
  %28 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %0, i64 0, i32 4
  %29 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %28, align 8, !tbaa !46
  %30 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %29, i64 0, i32 0
  %31 = load i32, i32* %30, align 8, !tbaa !37
  %32 = tail call noalias dereferenceable_or_null(16) i8* @calloc(i64 1, i64 16) #21
  %33 = bitcast i8* %32 to i32*
  store i32 %31, i32* %33, align 8, !tbaa !39
  %34 = tail call noalias dereferenceable_or_null(16) i8* @calloc(i64 1, i64 16) #21
  %35 = getelementptr inbounds i8, i8* %32, i64 8
  %36 = bitcast i8* %35 to i8**
  store i8* %34, i8** %36, align 8, !tbaa !41
  %37 = sext i32 %31 to i64
  %38 = tail call noalias i8* @calloc(i64 %37, i64 8) #21
  %39 = getelementptr inbounds i8, i8* %34, i64 8
  %40 = bitcast i8* %39 to i8**
  store i8* %38, i8** %40, align 8, !tbaa !42
  %41 = getelementptr inbounds i8, i8* %6, i64 32
  %42 = bitcast i8* %41 to i8**
  store i8* %32, i8** %42, align 8, !tbaa !47
  %43 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %0, i64 0, i32 2
  %44 = load i32, i32* %43, align 8, !tbaa !48
  %45 = icmp sgt i32 %44, 0
  br i1 %45, label %46, label %50

46:                                               ; preds = %12
  %47 = getelementptr inbounds i8, i8* %6, i64 40
  %48 = bitcast i8* %47 to [2 x %struct.BF_PartHolder*]*
  %49 = zext i32 %44 to i64
  br label %59

50:                                               ; preds = %59, %12
  %51 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %0, i64 0, i32 1
  %52 = load i32, i32* %51, align 4, !tbaa !49
  %53 = icmp sgt i32 %52, 0
  br i1 %53, label %54, label %112

54:                                               ; preds = %50
  %55 = getelementptr inbounds i8, i8* %6, i64 56
  %56 = bitcast i8* %55 to [2 x [2 x %struct.BF_PartHolder*]]*
  %57 = zext i32 %44 to i64
  %58 = zext i32 %52 to i64
  br label %78

59:                                               ; preds = %59, %46
  %60 = phi i64 [ 0, %46 ], [ %76, %59 ]
  %61 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %0, i64 0, i32 5, i64 %60
  %62 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %61, align 8, !tbaa !7
  %63 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %62, i64 0, i32 0
  %64 = load i32, i32* %63, align 8, !tbaa !37
  %65 = tail call noalias dereferenceable_or_null(16) i8* @calloc(i64 1, i64 16) #21
  %66 = bitcast i8* %65 to i32*
  store i32 %64, i32* %66, align 8, !tbaa !39
  %67 = tail call noalias dereferenceable_or_null(16) i8* @calloc(i64 1, i64 16) #21
  %68 = getelementptr inbounds i8, i8* %65, i64 8
  %69 = bitcast i8* %68 to i8**
  store i8* %67, i8** %69, align 8, !tbaa !41
  %70 = sext i32 %64 to i64
  %71 = tail call noalias i8* @calloc(i64 %70, i64 8) #21
  %72 = getelementptr inbounds i8, i8* %67, i64 8
  %73 = bitcast i8* %72 to i8**
  store i8* %71, i8** %73, align 8, !tbaa !42
  %74 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* %48, i64 0, i64 %60
  %75 = bitcast %struct.BF_PartHolder** %74 to i8**
  store i8* %65, i8** %75, align 8, !tbaa !7
  %76 = add nuw nsw i64 %60, 1
  %77 = icmp eq i64 %76, %49
  br i1 %77, label %50, label %59

78:                                               ; preds = %99, %54
  %79 = phi i64 [ 0, %54 ], [ %100, %99 ]
  br i1 %45, label %80, label %99

80:                                               ; preds = %80, %78
  %81 = phi i64 [ %97, %80 ], [ 0, %78 ]
  %82 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %0, i64 0, i32 6, i64 %79, i64 %81
  %83 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %82, align 8, !tbaa !7
  %84 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %83, i64 0, i32 0
  %85 = load i32, i32* %84, align 8, !tbaa !37
  %86 = tail call noalias dereferenceable_or_null(16) i8* @calloc(i64 1, i64 16) #21
  %87 = bitcast i8* %86 to i32*
  store i32 %85, i32* %87, align 8, !tbaa !39
  %88 = tail call noalias dereferenceable_or_null(16) i8* @calloc(i64 1, i64 16) #21
  %89 = getelementptr inbounds i8, i8* %86, i64 8
  %90 = bitcast i8* %89 to i8**
  store i8* %88, i8** %90, align 8, !tbaa !41
  %91 = sext i32 %85 to i64
  %92 = tail call noalias i8* @calloc(i64 %91, i64 8) #21
  %93 = getelementptr inbounds i8, i8* %88, i64 8
  %94 = bitcast i8* %93 to i8**
  store i8* %92, i8** %94, align 8, !tbaa !42
  %95 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* %56, i64 0, i64 %79, i64 %81
  %96 = bitcast %struct.BF_PartHolder** %95 to i8**
  store i8* %86, i8** %96, align 8, !tbaa !7
  %97 = add nuw nsw i64 %81, 1
  %98 = icmp eq i64 %97, %57
  br i1 %98, label %99, label %80

99:                                               ; preds = %80, %78
  %100 = add nuw nsw i64 %79, 1
  %101 = icmp eq i64 %100, %58
  br i1 %101, label %112, label %78

102:                                              ; preds = %2
  %103 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %3, i64 0, i32 0
  %104 = bitcast %struct.side_info_link* %3 to i64*
  %105 = load i64, i64* %104, align 8, !tbaa !50
  store i64 %105, i64* bitcast (%struct.side_info_link** @side_queue_free to i64*), align 8, !tbaa !7
  store %struct.side_info_link* null, %struct.side_info_link** %103, align 8, !tbaa !50
  %106 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %0, i64 0, i32 1
  %107 = load i32, i32* %106, align 4, !tbaa !49
  %108 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %0, i64 0, i32 2
  %109 = load i32, i32* %108, align 8, !tbaa !48
  %110 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %0, i64 0, i32 3
  %111 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %110, align 8, !tbaa !35
  br label %112

112:                                              ; preds = %102, %99, %50
  %113 = phi %struct.BF_BitstreamPart* [ %111, %102 ], [ %14, %50 ], [ %14, %99 ]
  %114 = phi i32 [ %109, %102 ], [ %44, %50 ], [ %44, %99 ]
  %115 = phi i32 [ %107, %102 ], [ %52, %50 ], [ %52, %99 ]
  %116 = phi %struct.side_info_link* [ %3, %102 ], [ %7, %50 ], [ %7, %99 ]
  %117 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %0, i64 0, i32 0
  %118 = load i32, i32* %117, align 8, !tbaa !51
  %119 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %116, i64 0, i32 1, i32 0
  store i32 %118, i32* %119, align 8, !tbaa !52
  %120 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %0, i64 0, i32 1
  %121 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %116, i64 0, i32 1, i32 2
  store i32 %115, i32* %121, align 8, !tbaa !53
  %122 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %0, i64 0, i32 2
  %123 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %116, i64 0, i32 1, i32 3
  store i32 %114, i32* %123, align 4, !tbaa !54
  %124 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %116, i64 0, i32 1, i32 4
  %125 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %124, align 8, !tbaa !43
  %126 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %0, i64 0, i32 3
  %127 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %125, i64 0, i32 1
  %128 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %127, align 8, !tbaa !41
  %129 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %128, i64 0, i32 0
  store i32 0, i32* %129, align 8, !tbaa !37
  %130 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %113, i64 0, i32 0
  %131 = load i32, i32* %130, align 8, !tbaa !37
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %176, label %133

133:                                              ; preds = %112
  %134 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %113, i64 0, i32 1
  br label %135

135:                                              ; preds = %171, %133
  %136 = phi i32 [ 0, %133 ], [ %175, %171 ]
  %137 = phi %struct.BF_BitstreamPart* [ %128, %133 ], [ %173, %171 ]
  %138 = phi i64 [ 0, %133 ], [ %167, %171 ]
  %139 = phi %struct.BF_PartHolder* [ %125, %133 ], [ %158, %171 ]
  %140 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %134, align 8, !tbaa !42
  %141 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %140, i64 %138
  %142 = add i32 %136, 1
  %143 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %139, i64 0, i32 0
  %144 = load i32, i32* %143, align 8, !tbaa !39
  %145 = icmp sgt i32 %142, %144
  br i1 %145, label %146, label %154

146:                                              ; preds = %135
  %147 = add i32 %136, 9
  %148 = tail call %struct.BF_PartHolder* @BF_resizePartHolder(%struct.BF_PartHolder* nonnull %139, i32 %147) #21
  %149 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %148, i64 0, i32 1
  %150 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %149, align 8, !tbaa !41
  %151 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %150, i64 0, i32 0
  %152 = load i32, i32* %151, align 8, !tbaa !37
  %153 = add i32 %152, 1
  br label %154

154:                                              ; preds = %146, %135
  %155 = phi i32 [ %153, %146 ], [ %142, %135 ]
  %156 = phi i32 [ %152, %146 ], [ %136, %135 ]
  %157 = phi %struct.BF_BitstreamPart* [ %150, %146 ], [ %137, %135 ]
  %158 = phi %struct.BF_PartHolder* [ %148, %146 ], [ %139, %135 ]
  %159 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %157, i64 0, i32 1
  %160 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %159, align 8, !tbaa !42
  %161 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %157, i64 0, i32 0
  store i32 %155, i32* %161, align 8, !tbaa !37
  %162 = zext i32 %156 to i64
  %163 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %160, i64 %162
  %164 = bitcast %struct.BF_BitstreamElement* %141 to i64*
  %165 = bitcast %struct.BF_BitstreamElement* %163 to i64*
  %166 = load i64, i64* %164, align 4
  store i64 %166, i64* %165, align 4
  %167 = add nuw nsw i64 %138, 1
  %168 = load i32, i32* %130, align 8, !tbaa !37
  %169 = zext i32 %168 to i64
  %170 = icmp ult i64 %167, %169
  br i1 %170, label %171, label %176

171:                                              ; preds = %154
  %172 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %158, i64 0, i32 1
  %173 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %172, align 8, !tbaa !41
  %174 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %173, i64 0, i32 0
  %175 = load i32, i32* %174, align 8, !tbaa !37
  br label %135

176:                                              ; preds = %154, %112
  %177 = phi %struct.BF_PartHolder* [ %125, %112 ], [ %158, %154 ]
  store %struct.BF_PartHolder* %177, %struct.BF_PartHolder** %124, align 8, !tbaa !43
  %178 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %116, i64 0, i32 1, i32 5
  %179 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %178, align 8, !tbaa !47
  %180 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %0, i64 0, i32 4
  %181 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %180, align 8, !tbaa !46
  %182 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %179, i64 0, i32 1
  %183 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %182, align 8, !tbaa !41
  %184 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %183, i64 0, i32 0
  store i32 0, i32* %184, align 8, !tbaa !37
  %185 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %181, i64 0, i32 0
  %186 = load i32, i32* %185, align 8, !tbaa !37
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %231, label %188

188:                                              ; preds = %176
  %189 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %181, i64 0, i32 1
  br label %190

190:                                              ; preds = %226, %188
  %191 = phi i32 [ 0, %188 ], [ %230, %226 ]
  %192 = phi %struct.BF_BitstreamPart* [ %183, %188 ], [ %228, %226 ]
  %193 = phi i64 [ 0, %188 ], [ %222, %226 ]
  %194 = phi %struct.BF_PartHolder* [ %179, %188 ], [ %213, %226 ]
  %195 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %189, align 8, !tbaa !42
  %196 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %195, i64 %193
  %197 = add i32 %191, 1
  %198 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %194, i64 0, i32 0
  %199 = load i32, i32* %198, align 8, !tbaa !39
  %200 = icmp sgt i32 %197, %199
  br i1 %200, label %201, label %209

201:                                              ; preds = %190
  %202 = add i32 %191, 9
  %203 = tail call %struct.BF_PartHolder* @BF_resizePartHolder(%struct.BF_PartHolder* nonnull %194, i32 %202) #21
  %204 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %203, i64 0, i32 1
  %205 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %204, align 8, !tbaa !41
  %206 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %205, i64 0, i32 0
  %207 = load i32, i32* %206, align 8, !tbaa !37
  %208 = add i32 %207, 1
  br label %209

209:                                              ; preds = %201, %190
  %210 = phi i32 [ %208, %201 ], [ %197, %190 ]
  %211 = phi i32 [ %207, %201 ], [ %191, %190 ]
  %212 = phi %struct.BF_BitstreamPart* [ %205, %201 ], [ %192, %190 ]
  %213 = phi %struct.BF_PartHolder* [ %203, %201 ], [ %194, %190 ]
  %214 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %212, i64 0, i32 1
  %215 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %214, align 8, !tbaa !42
  %216 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %212, i64 0, i32 0
  store i32 %210, i32* %216, align 8, !tbaa !37
  %217 = zext i32 %211 to i64
  %218 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %215, i64 %217
  %219 = bitcast %struct.BF_BitstreamElement* %196 to i64*
  %220 = bitcast %struct.BF_BitstreamElement* %218 to i64*
  %221 = load i64, i64* %219, align 4
  store i64 %221, i64* %220, align 4
  %222 = add nuw nsw i64 %193, 1
  %223 = load i32, i32* %185, align 8, !tbaa !37
  %224 = zext i32 %223 to i64
  %225 = icmp ult i64 %222, %224
  br i1 %225, label %226, label %231

226:                                              ; preds = %209
  %227 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %213, i64 0, i32 1
  %228 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %227, align 8, !tbaa !41
  %229 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %228, i64 0, i32 0
  %230 = load i32, i32* %229, align 8, !tbaa !37
  br label %190

231:                                              ; preds = %209, %176
  %232 = phi %struct.BF_PartHolder* [ %179, %176 ], [ %213, %209 ]
  store %struct.BF_PartHolder* %232, %struct.BF_PartHolder** %178, align 8, !tbaa !47
  %233 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %126, align 8, !tbaa !35
  %234 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %233, i64 0, i32 0
  %235 = load i32, i32* %234, align 8, !tbaa !37
  %236 = icmp eq i32 %235, 0
  br i1 %236, label %292, label %237

237:                                              ; preds = %231
  %238 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %233, i64 0, i32 1
  %239 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %238, align 8, !tbaa !42
  %240 = add i32 %235, -1
  %241 = zext i32 %240 to i64
  %242 = add nuw nsw i64 %241, 1
  %243 = icmp ult i32 %240, 8
  br i1 %243, label %277, label %244

244:                                              ; preds = %237
  %245 = and i64 %242, 7
  %246 = icmp eq i64 %245, 0
  %247 = select i1 %246, i64 8, i64 %245
  %248 = sub nsw i64 %242, %247
  %249 = trunc i64 %248 to i32
  %250 = getelementptr %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %239, i64 %248
  br label %251

251:                                              ; preds = %251, %244
  %252 = phi i64 [ 0, %244 ], [ %268, %251 ]
  %253 = phi <4 x i32> [ zeroinitializer, %244 ], [ %266, %251 ]
  %254 = phi <4 x i32> [ zeroinitializer, %244 ], [ %267, %251 ]
  %255 = or i64 %252, 4
  %256 = getelementptr %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %239, i64 %252, i32 1
  %257 = getelementptr %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %239, i64 %255, i32 1
  %258 = bitcast i16* %256 to <16 x i16>*
  %259 = bitcast i16* %257 to <16 x i16>*
  %260 = load <16 x i16>, <16 x i16>* %258, align 4, !tbaa !55
  %261 = load <16 x i16>, <16 x i16>* %259, align 4, !tbaa !55
  %262 = shufflevector <16 x i16> %260, <16 x i16> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %263 = shufflevector <16 x i16> %261, <16 x i16> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %264 = zext <4 x i16> %262 to <4 x i32>
  %265 = zext <4 x i16> %263 to <4 x i32>
  %266 = add <4 x i32> %253, %264
  %267 = add <4 x i32> %254, %265
  %268 = add i64 %252, 8
  %269 = icmp eq i64 %268, %248
  br i1 %269, label %270, label %251, !llvm.loop !57

270:                                              ; preds = %251
  %271 = add <4 x i32> %267, %266
  %272 = shufflevector <4 x i32> %271, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %273 = add <4 x i32> %271, %272
  %274 = shufflevector <4 x i32> %273, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %275 = add <4 x i32> %273, %274
  %276 = extractelement <4 x i32> %275, i32 0
  br label %277

277:                                              ; preds = %270, %237
  %278 = phi i32 [ 0, %237 ], [ %276, %270 ]
  %279 = phi i32 [ 0, %237 ], [ %249, %270 ]
  %280 = phi %struct.BF_BitstreamElement* [ %239, %237 ], [ %250, %270 ]
  br label %281

281:                                              ; preds = %281, %277
  %282 = phi i32 [ %288, %281 ], [ %278, %277 ]
  %283 = phi i32 [ %289, %281 ], [ %279, %277 ]
  %284 = phi %struct.BF_BitstreamElement* [ %290, %281 ], [ %280, %277 ]
  %285 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %284, i64 0, i32 1
  %286 = load i16, i16* %285, align 4, !tbaa !55
  %287 = zext i16 %286 to i32
  %288 = add nuw nsw i32 %282, %287
  %289 = add nuw i32 %283, 1
  %290 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %284, i64 1
  %291 = icmp eq i32 %289, %235
  br i1 %291, label %292, label %281, !llvm.loop !59

292:                                              ; preds = %281, %231
  %293 = phi i32 [ 0, %231 ], [ %288, %281 ]
  %294 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %180, align 8, !tbaa !46
  %295 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %294, i64 0, i32 0
  %296 = load i32, i32* %295, align 8, !tbaa !37
  %297 = icmp eq i32 %296, 0
  br i1 %297, label %353, label %298

298:                                              ; preds = %292
  %299 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %294, i64 0, i32 1
  %300 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %299, align 8, !tbaa !42
  %301 = add i32 %296, -1
  %302 = zext i32 %301 to i64
  %303 = add nuw nsw i64 %302, 1
  %304 = icmp ult i32 %301, 8
  br i1 %304, label %338, label %305

305:                                              ; preds = %298
  %306 = and i64 %303, 7
  %307 = icmp eq i64 %306, 0
  %308 = select i1 %307, i64 8, i64 %306
  %309 = sub nsw i64 %303, %308
  %310 = trunc i64 %309 to i32
  %311 = getelementptr %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %300, i64 %309
  br label %312

312:                                              ; preds = %312, %305
  %313 = phi i64 [ 0, %305 ], [ %329, %312 ]
  %314 = phi <4 x i32> [ zeroinitializer, %305 ], [ %327, %312 ]
  %315 = phi <4 x i32> [ zeroinitializer, %305 ], [ %328, %312 ]
  %316 = or i64 %313, 4
  %317 = getelementptr %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %300, i64 %313, i32 1
  %318 = getelementptr %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %300, i64 %316, i32 1
  %319 = bitcast i16* %317 to <16 x i16>*
  %320 = bitcast i16* %318 to <16 x i16>*
  %321 = load <16 x i16>, <16 x i16>* %319, align 4, !tbaa !55
  %322 = load <16 x i16>, <16 x i16>* %320, align 4, !tbaa !55
  %323 = shufflevector <16 x i16> %321, <16 x i16> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %324 = shufflevector <16 x i16> %322, <16 x i16> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %325 = zext <4 x i16> %323 to <4 x i32>
  %326 = zext <4 x i16> %324 to <4 x i32>
  %327 = add <4 x i32> %314, %325
  %328 = add <4 x i32> %315, %326
  %329 = add i64 %313, 8
  %330 = icmp eq i64 %329, %309
  br i1 %330, label %331, label %312, !llvm.loop !61

331:                                              ; preds = %312
  %332 = add <4 x i32> %328, %327
  %333 = shufflevector <4 x i32> %332, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %334 = add <4 x i32> %332, %333
  %335 = shufflevector <4 x i32> %334, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %336 = add <4 x i32> %334, %335
  %337 = extractelement <4 x i32> %336, i32 0
  br label %338

338:                                              ; preds = %331, %298
  %339 = phi i32 [ 0, %298 ], [ %337, %331 ]
  %340 = phi i32 [ 0, %298 ], [ %310, %331 ]
  %341 = phi %struct.BF_BitstreamElement* [ %300, %298 ], [ %311, %331 ]
  br label %342

342:                                              ; preds = %342, %338
  %343 = phi i32 [ %349, %342 ], [ %339, %338 ]
  %344 = phi i32 [ %350, %342 ], [ %340, %338 ]
  %345 = phi %struct.BF_BitstreamElement* [ %351, %342 ], [ %341, %338 ]
  %346 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %345, i64 0, i32 1
  %347 = load i16, i16* %346, align 4, !tbaa !55
  %348 = zext i16 %347 to i32
  %349 = add nuw nsw i32 %343, %348
  %350 = add nuw i32 %344, 1
  %351 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %345, i64 1
  %352 = icmp eq i32 %350, %296
  br i1 %352, label %353, label %342, !llvm.loop !62

353:                                              ; preds = %342, %292
  %354 = phi i32 [ 0, %292 ], [ %349, %342 ]
  %355 = add nsw i32 %354, %293
  %356 = load i32, i32* %122, align 8, !tbaa !48
  %357 = icmp sgt i32 %356, 0
  br i1 %357, label %363, label %358

358:                                              ; preds = %480, %353
  %359 = phi i32 [ %356, %353 ], [ %484, %480 ]
  %360 = phi i32 [ %355, %353 ], [ %482, %480 ]
  %361 = load i32, i32* %120, align 4, !tbaa !49
  %362 = icmp sgt i32 %361, 0
  br i1 %362, label %487, label %623

363:                                              ; preds = %480, %353
  %364 = phi i64 [ %483, %480 ], [ 0, %353 ]
  %365 = phi i32 [ %482, %480 ], [ %355, %353 ]
  %366 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %116, i64 0, i32 1, i32 6, i64 %364
  %367 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %366, align 8, !tbaa !7
  %368 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %0, i64 0, i32 5, i64 %364
  %369 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %368, align 8, !tbaa !7
  %370 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %367, i64 0, i32 1
  %371 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %370, align 8, !tbaa !41
  %372 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %371, i64 0, i32 0
  store i32 0, i32* %372, align 8, !tbaa !37
  %373 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %369, i64 0, i32 0
  %374 = load i32, i32* %373, align 8, !tbaa !37
  %375 = icmp eq i32 %374, 0
  br i1 %375, label %419, label %376

376:                                              ; preds = %363
  %377 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %369, i64 0, i32 1
  br label %378

378:                                              ; preds = %414, %376
  %379 = phi i32 [ 0, %376 ], [ %418, %414 ]
  %380 = phi %struct.BF_BitstreamPart* [ %371, %376 ], [ %416, %414 ]
  %381 = phi i64 [ 0, %376 ], [ %410, %414 ]
  %382 = phi %struct.BF_PartHolder* [ %367, %376 ], [ %401, %414 ]
  %383 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %377, align 8, !tbaa !42
  %384 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %383, i64 %381
  %385 = add i32 %379, 1
  %386 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %382, i64 0, i32 0
  %387 = load i32, i32* %386, align 8, !tbaa !39
  %388 = icmp sgt i32 %385, %387
  br i1 %388, label %389, label %397

389:                                              ; preds = %378
  %390 = add i32 %379, 9
  %391 = tail call %struct.BF_PartHolder* @BF_resizePartHolder(%struct.BF_PartHolder* nonnull %382, i32 %390) #21
  %392 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %391, i64 0, i32 1
  %393 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %392, align 8, !tbaa !41
  %394 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %393, i64 0, i32 0
  %395 = load i32, i32* %394, align 8, !tbaa !37
  %396 = add i32 %395, 1
  br label %397

397:                                              ; preds = %389, %378
  %398 = phi i32 [ %396, %389 ], [ %385, %378 ]
  %399 = phi i32 [ %395, %389 ], [ %379, %378 ]
  %400 = phi %struct.BF_BitstreamPart* [ %393, %389 ], [ %380, %378 ]
  %401 = phi %struct.BF_PartHolder* [ %391, %389 ], [ %382, %378 ]
  %402 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %400, i64 0, i32 1
  %403 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %402, align 8, !tbaa !42
  %404 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %400, i64 0, i32 0
  store i32 %398, i32* %404, align 8, !tbaa !37
  %405 = zext i32 %399 to i64
  %406 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %403, i64 %405
  %407 = bitcast %struct.BF_BitstreamElement* %384 to i64*
  %408 = bitcast %struct.BF_BitstreamElement* %406 to i64*
  %409 = load i64, i64* %407, align 4
  store i64 %409, i64* %408, align 4
  %410 = add nuw nsw i64 %381, 1
  %411 = load i32, i32* %373, align 8, !tbaa !37
  %412 = zext i32 %411 to i64
  %413 = icmp ult i64 %410, %412
  br i1 %413, label %414, label %419

414:                                              ; preds = %397
  %415 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %401, i64 0, i32 1
  %416 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %415, align 8, !tbaa !41
  %417 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %416, i64 0, i32 0
  %418 = load i32, i32* %417, align 8, !tbaa !37
  br label %378

419:                                              ; preds = %397, %363
  %420 = phi %struct.BF_PartHolder* [ %367, %363 ], [ %401, %397 ]
  store %struct.BF_PartHolder* %420, %struct.BF_PartHolder** %366, align 8, !tbaa !7
  %421 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %368, align 8, !tbaa !7
  %422 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %421, i64 0, i32 0
  %423 = load i32, i32* %422, align 8, !tbaa !37
  %424 = icmp eq i32 %423, 0
  br i1 %424, label %480, label %425

425:                                              ; preds = %419
  %426 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %421, i64 0, i32 1
  %427 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %426, align 8, !tbaa !42
  %428 = add i32 %423, -1
  %429 = zext i32 %428 to i64
  %430 = add nuw nsw i64 %429, 1
  %431 = icmp ult i32 %428, 8
  br i1 %431, label %465, label %432

432:                                              ; preds = %425
  %433 = and i64 %430, 7
  %434 = icmp eq i64 %433, 0
  %435 = select i1 %434, i64 8, i64 %433
  %436 = sub nsw i64 %430, %435
  %437 = trunc i64 %436 to i32
  %438 = getelementptr %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %427, i64 %436
  br label %439

439:                                              ; preds = %439, %432
  %440 = phi i64 [ 0, %432 ], [ %456, %439 ]
  %441 = phi <4 x i32> [ zeroinitializer, %432 ], [ %454, %439 ]
  %442 = phi <4 x i32> [ zeroinitializer, %432 ], [ %455, %439 ]
  %443 = or i64 %440, 4
  %444 = getelementptr %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %427, i64 %440, i32 1
  %445 = getelementptr %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %427, i64 %443, i32 1
  %446 = bitcast i16* %444 to <16 x i16>*
  %447 = bitcast i16* %445 to <16 x i16>*
  %448 = load <16 x i16>, <16 x i16>* %446, align 4, !tbaa !55
  %449 = load <16 x i16>, <16 x i16>* %447, align 4, !tbaa !55
  %450 = shufflevector <16 x i16> %448, <16 x i16> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %451 = shufflevector <16 x i16> %449, <16 x i16> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %452 = zext <4 x i16> %450 to <4 x i32>
  %453 = zext <4 x i16> %451 to <4 x i32>
  %454 = add <4 x i32> %441, %452
  %455 = add <4 x i32> %442, %453
  %456 = add i64 %440, 8
  %457 = icmp eq i64 %456, %436
  br i1 %457, label %458, label %439, !llvm.loop !63

458:                                              ; preds = %439
  %459 = add <4 x i32> %455, %454
  %460 = shufflevector <4 x i32> %459, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %461 = add <4 x i32> %459, %460
  %462 = shufflevector <4 x i32> %461, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %463 = add <4 x i32> %461, %462
  %464 = extractelement <4 x i32> %463, i32 0
  br label %465

465:                                              ; preds = %458, %425
  %466 = phi i32 [ 0, %425 ], [ %464, %458 ]
  %467 = phi i32 [ 0, %425 ], [ %437, %458 ]
  %468 = phi %struct.BF_BitstreamElement* [ %427, %425 ], [ %438, %458 ]
  br label %469

469:                                              ; preds = %469, %465
  %470 = phi i32 [ %476, %469 ], [ %466, %465 ]
  %471 = phi i32 [ %477, %469 ], [ %467, %465 ]
  %472 = phi %struct.BF_BitstreamElement* [ %478, %469 ], [ %468, %465 ]
  %473 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %472, i64 0, i32 1
  %474 = load i16, i16* %473, align 4, !tbaa !55
  %475 = zext i16 %474 to i32
  %476 = add nuw nsw i32 %470, %475
  %477 = add nuw i32 %471, 1
  %478 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %472, i64 1
  %479 = icmp eq i32 %477, %423
  br i1 %479, label %480, label %469, !llvm.loop !64

480:                                              ; preds = %469, %419
  %481 = phi i32 [ 0, %419 ], [ %476, %469 ]
  %482 = add nsw i32 %481, %365
  %483 = add nuw nsw i64 %364, 1
  %484 = load i32, i32* %122, align 8, !tbaa !48
  %485 = sext i32 %484 to i64
  %486 = icmp slt i64 %483, %485
  br i1 %486, label %363, label %358

487:                                              ; preds = %616, %358
  %488 = phi i32 [ %617, %616 ], [ %359, %358 ]
  %489 = phi i64 [ %619, %616 ], [ 0, %358 ]
  %490 = phi i32 [ %618, %616 ], [ %360, %358 ]
  %491 = icmp sgt i32 %488, 0
  br i1 %491, label %492, label %616

492:                                              ; preds = %609, %487
  %493 = phi i64 [ %612, %609 ], [ 0, %487 ]
  %494 = phi i32 [ %611, %609 ], [ %490, %487 ]
  %495 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %116, i64 0, i32 1, i32 7, i64 %489, i64 %493
  %496 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %495, align 8, !tbaa !7
  %497 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %0, i64 0, i32 6, i64 %489, i64 %493
  %498 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %497, align 8, !tbaa !7
  %499 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %496, i64 0, i32 1
  %500 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %499, align 8, !tbaa !41
  %501 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %500, i64 0, i32 0
  store i32 0, i32* %501, align 8, !tbaa !37
  %502 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %498, i64 0, i32 0
  %503 = load i32, i32* %502, align 8, !tbaa !37
  %504 = icmp eq i32 %503, 0
  br i1 %504, label %548, label %505

505:                                              ; preds = %492
  %506 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %498, i64 0, i32 1
  br label %507

507:                                              ; preds = %543, %505
  %508 = phi i32 [ 0, %505 ], [ %547, %543 ]
  %509 = phi %struct.BF_BitstreamPart* [ %500, %505 ], [ %545, %543 ]
  %510 = phi i64 [ 0, %505 ], [ %539, %543 ]
  %511 = phi %struct.BF_PartHolder* [ %496, %505 ], [ %530, %543 ]
  %512 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %506, align 8, !tbaa !42
  %513 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %512, i64 %510
  %514 = add i32 %508, 1
  %515 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %511, i64 0, i32 0
  %516 = load i32, i32* %515, align 8, !tbaa !39
  %517 = icmp sgt i32 %514, %516
  br i1 %517, label %518, label %526

518:                                              ; preds = %507
  %519 = add i32 %508, 9
  %520 = tail call %struct.BF_PartHolder* @BF_resizePartHolder(%struct.BF_PartHolder* nonnull %511, i32 %519) #21
  %521 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %520, i64 0, i32 1
  %522 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %521, align 8, !tbaa !41
  %523 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %522, i64 0, i32 0
  %524 = load i32, i32* %523, align 8, !tbaa !37
  %525 = add i32 %524, 1
  br label %526

526:                                              ; preds = %518, %507
  %527 = phi i32 [ %525, %518 ], [ %514, %507 ]
  %528 = phi i32 [ %524, %518 ], [ %508, %507 ]
  %529 = phi %struct.BF_BitstreamPart* [ %522, %518 ], [ %509, %507 ]
  %530 = phi %struct.BF_PartHolder* [ %520, %518 ], [ %511, %507 ]
  %531 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %529, i64 0, i32 1
  %532 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %531, align 8, !tbaa !42
  %533 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %529, i64 0, i32 0
  store i32 %527, i32* %533, align 8, !tbaa !37
  %534 = zext i32 %528 to i64
  %535 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %532, i64 %534
  %536 = bitcast %struct.BF_BitstreamElement* %513 to i64*
  %537 = bitcast %struct.BF_BitstreamElement* %535 to i64*
  %538 = load i64, i64* %536, align 4
  store i64 %538, i64* %537, align 4
  %539 = add nuw nsw i64 %510, 1
  %540 = load i32, i32* %502, align 8, !tbaa !37
  %541 = zext i32 %540 to i64
  %542 = icmp ult i64 %539, %541
  br i1 %542, label %543, label %548

543:                                              ; preds = %526
  %544 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %530, i64 0, i32 1
  %545 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %544, align 8, !tbaa !41
  %546 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %545, i64 0, i32 0
  %547 = load i32, i32* %546, align 8, !tbaa !37
  br label %507

548:                                              ; preds = %526, %492
  %549 = phi %struct.BF_PartHolder* [ %496, %492 ], [ %530, %526 ]
  store %struct.BF_PartHolder* %549, %struct.BF_PartHolder** %495, align 8, !tbaa !7
  %550 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %497, align 8, !tbaa !7
  %551 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %550, i64 0, i32 0
  %552 = load i32, i32* %551, align 8, !tbaa !37
  %553 = icmp eq i32 %552, 0
  br i1 %553, label %609, label %554

554:                                              ; preds = %548
  %555 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %550, i64 0, i32 1
  %556 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %555, align 8, !tbaa !42
  %557 = add i32 %552, -1
  %558 = zext i32 %557 to i64
  %559 = add nuw nsw i64 %558, 1
  %560 = icmp ult i32 %557, 8
  br i1 %560, label %594, label %561

561:                                              ; preds = %554
  %562 = and i64 %559, 7
  %563 = icmp eq i64 %562, 0
  %564 = select i1 %563, i64 8, i64 %562
  %565 = sub nsw i64 %559, %564
  %566 = trunc i64 %565 to i32
  %567 = getelementptr %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %556, i64 %565
  br label %568

568:                                              ; preds = %568, %561
  %569 = phi i64 [ 0, %561 ], [ %585, %568 ]
  %570 = phi <4 x i32> [ zeroinitializer, %561 ], [ %583, %568 ]
  %571 = phi <4 x i32> [ zeroinitializer, %561 ], [ %584, %568 ]
  %572 = or i64 %569, 4
  %573 = getelementptr %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %556, i64 %569, i32 1
  %574 = getelementptr %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %556, i64 %572, i32 1
  %575 = bitcast i16* %573 to <16 x i16>*
  %576 = bitcast i16* %574 to <16 x i16>*
  %577 = load <16 x i16>, <16 x i16>* %575, align 4, !tbaa !55
  %578 = load <16 x i16>, <16 x i16>* %576, align 4, !tbaa !55
  %579 = shufflevector <16 x i16> %577, <16 x i16> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %580 = shufflevector <16 x i16> %578, <16 x i16> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %581 = zext <4 x i16> %579 to <4 x i32>
  %582 = zext <4 x i16> %580 to <4 x i32>
  %583 = add <4 x i32> %570, %581
  %584 = add <4 x i32> %571, %582
  %585 = add i64 %569, 8
  %586 = icmp eq i64 %585, %565
  br i1 %586, label %587, label %568, !llvm.loop !65

587:                                              ; preds = %568
  %588 = add <4 x i32> %584, %583
  %589 = shufflevector <4 x i32> %588, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %590 = add <4 x i32> %588, %589
  %591 = shufflevector <4 x i32> %590, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %592 = add <4 x i32> %590, %591
  %593 = extractelement <4 x i32> %592, i32 0
  br label %594

594:                                              ; preds = %587, %554
  %595 = phi i32 [ 0, %554 ], [ %593, %587 ]
  %596 = phi i32 [ 0, %554 ], [ %566, %587 ]
  %597 = phi %struct.BF_BitstreamElement* [ %556, %554 ], [ %567, %587 ]
  br label %598

598:                                              ; preds = %598, %594
  %599 = phi i32 [ %605, %598 ], [ %595, %594 ]
  %600 = phi i32 [ %606, %598 ], [ %596, %594 ]
  %601 = phi %struct.BF_BitstreamElement* [ %607, %598 ], [ %597, %594 ]
  %602 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %601, i64 0, i32 1
  %603 = load i16, i16* %602, align 4, !tbaa !55
  %604 = zext i16 %603 to i32
  %605 = add nuw nsw i32 %599, %604
  %606 = add nuw i32 %600, 1
  %607 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %601, i64 1
  %608 = icmp eq i32 %606, %552
  br i1 %608, label %609, label %598, !llvm.loop !66

609:                                              ; preds = %598, %548
  %610 = phi i32 [ 0, %548 ], [ %605, %598 ]
  %611 = add nsw i32 %610, %494
  %612 = add nuw nsw i64 %493, 1
  %613 = load i32, i32* %122, align 8, !tbaa !48
  %614 = sext i32 %613 to i64
  %615 = icmp slt i64 %612, %614
  br i1 %615, label %492, label %616

616:                                              ; preds = %609, %487
  %617 = phi i32 [ %488, %487 ], [ %613, %609 ]
  %618 = phi i32 [ %490, %487 ], [ %611, %609 ]
  %619 = add nuw nsw i64 %489, 1
  %620 = load i32, i32* %120, align 4, !tbaa !49
  %621 = sext i32 %620 to i64
  %622 = icmp slt i64 %619, %621
  br i1 %622, label %487, label %623

623:                                              ; preds = %616, %358
  %624 = phi i32 [ %359, %358 ], [ %617, %616 ]
  %625 = phi i32 [ %361, %358 ], [ %620, %616 ]
  %626 = phi i32 [ %360, %358 ], [ %618, %616 ]
  %627 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %116, i64 0, i32 1, i32 1
  store i32 %626, i32* %627, align 4, !tbaa !67
  %628 = load %struct.side_info_link*, %struct.side_info_link** @side_queue_head, align 8, !tbaa !7
  %629 = icmp eq %struct.side_info_link* %628, null
  br i1 %629, label %637, label %630

630:                                              ; preds = %630, %623
  %631 = phi %struct.side_info_link* [ %633, %630 ], [ %628, %623 ]
  %632 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %631, i64 0, i32 0
  %633 = load %struct.side_info_link*, %struct.side_info_link** %632, align 8, !tbaa !50
  %634 = icmp eq %struct.side_info_link* %633, null
  br i1 %634, label %635, label %630

635:                                              ; preds = %630
  %636 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %631, i64 0, i32 0
  br label %637

637:                                              ; preds = %635, %623
  %638 = phi %struct.side_info_link** [ %636, %635 ], [ @side_queue_head, %623 ]
  store %struct.side_info_link* %116, %struct.side_info_link** %638, align 8, !tbaa !7
  %639 = getelementptr inbounds %struct.BF_FrameResults, %struct.BF_FrameResults* %1, i64 0, i32 0
  store i32 %626, i32* %639, align 4, !tbaa !68
  %640 = getelementptr inbounds %struct.BF_FrameResults, %struct.BF_FrameResults* %1, i64 0, i32 1
  store i32 0, i32* %640, align 4, !tbaa !70
  %641 = icmp sgt i32 %625, 0
  br i1 %641, label %642, label %745

642:                                              ; preds = %738, %637
  %643 = phi i32 [ %739, %738 ], [ %625, %637 ]
  %644 = phi i32 [ %740, %738 ], [ %624, %637 ]
  %645 = phi i64 [ %742, %738 ], [ 0, %637 ]
  %646 = phi i32 [ %741, %738 ], [ 0, %637 ]
  %647 = icmp sgt i32 %644, 0
  br i1 %647, label %648, label %738

648:                                              ; preds = %729, %642
  %649 = phi i64 [ %732, %729 ], [ 0, %642 ]
  %650 = phi i32 [ %731, %729 ], [ %646, %642 ]
  %651 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %0, i64 0, i32 7, i64 %645, i64 %649
  %652 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %651, align 8, !tbaa !7
  %653 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %652, i64 0, i32 0
  %654 = load i32, i32* %653, align 8, !tbaa !37
  %655 = icmp eq i32 %654, 0
  br i1 %655, label %675, label %656

656:                                              ; preds = %648
  %657 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %652, i64 0, i32 1
  %658 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %657, align 8, !tbaa !42
  br label %659

659:                                              ; preds = %659, %656
  %660 = phi i32 [ %670, %659 ], [ 0, %656 ]
  %661 = phi i32 [ %671, %659 ], [ 0, %656 ]
  %662 = phi %struct.BF_BitstreamElement* [ %672, %659 ], [ %658, %656 ]
  %663 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %662, i64 0, i32 0
  %664 = load i32, i32* %663, align 4, !tbaa !71
  %665 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %662, i64 0, i32 1
  %666 = load i16, i16* %665, align 4, !tbaa !55
  %667 = zext i16 %666 to i32
  tail call fastcc void @WriteMainDataBits(i32 %664, i32 %667) #21
  %668 = load i16, i16* %665, align 4, !tbaa !55
  %669 = zext i16 %668 to i32
  %670 = add nuw nsw i32 %660, %669
  %671 = add nuw i32 %661, 1
  %672 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %662, i64 1
  %673 = load i32, i32* %653, align 8, !tbaa !37
  %674 = icmp ult i32 %671, %673
  br i1 %674, label %659, label %675

675:                                              ; preds = %659, %648
  %676 = phi i32 [ 0, %648 ], [ %670, %659 ]
  %677 = add nsw i32 %676, %650
  %678 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %0, i64 0, i32 8, i64 %645, i64 %649
  %679 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %678, align 8, !tbaa !7
  %680 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %679, i64 0, i32 0
  %681 = load i32, i32* %680, align 8, !tbaa !37
  %682 = icmp eq i32 %681, 0
  br i1 %682, label %702, label %683

683:                                              ; preds = %675
  %684 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %679, i64 0, i32 1
  %685 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %684, align 8, !tbaa !42
  br label %686

686:                                              ; preds = %686, %683
  %687 = phi i32 [ %697, %686 ], [ 0, %683 ]
  %688 = phi i32 [ %698, %686 ], [ 0, %683 ]
  %689 = phi %struct.BF_BitstreamElement* [ %699, %686 ], [ %685, %683 ]
  %690 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %689, i64 0, i32 0
  %691 = load i32, i32* %690, align 4, !tbaa !71
  %692 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %689, i64 0, i32 1
  %693 = load i16, i16* %692, align 4, !tbaa !55
  %694 = zext i16 %693 to i32
  tail call fastcc void @WriteMainDataBits(i32 %691, i32 %694) #21
  %695 = load i16, i16* %692, align 4, !tbaa !55
  %696 = zext i16 %695 to i32
  %697 = add nuw nsw i32 %687, %696
  %698 = add nuw i32 %688, 1
  %699 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %689, i64 1
  %700 = load i32, i32* %680, align 8, !tbaa !37
  %701 = icmp ult i32 %698, %700
  br i1 %701, label %686, label %702

702:                                              ; preds = %686, %675
  %703 = phi i32 [ 0, %675 ], [ %697, %686 ]
  %704 = add nsw i32 %677, %703
  %705 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %0, i64 0, i32 9, i64 %645, i64 %649
  %706 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %705, align 8, !tbaa !7
  %707 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %706, i64 0, i32 0
  %708 = load i32, i32* %707, align 8, !tbaa !37
  %709 = icmp eq i32 %708, 0
  br i1 %709, label %729, label %710

710:                                              ; preds = %702
  %711 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %706, i64 0, i32 1
  %712 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %711, align 8, !tbaa !42
  br label %713

713:                                              ; preds = %713, %710
  %714 = phi i32 [ %724, %713 ], [ 0, %710 ]
  %715 = phi i32 [ %725, %713 ], [ 0, %710 ]
  %716 = phi %struct.BF_BitstreamElement* [ %726, %713 ], [ %712, %710 ]
  %717 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %716, i64 0, i32 0
  %718 = load i32, i32* %717, align 4, !tbaa !71
  %719 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %716, i64 0, i32 1
  %720 = load i16, i16* %719, align 4, !tbaa !55
  %721 = zext i16 %720 to i32
  tail call fastcc void @WriteMainDataBits(i32 %718, i32 %721) #21
  %722 = load i16, i16* %719, align 4, !tbaa !55
  %723 = zext i16 %722 to i32
  %724 = add nuw nsw i32 %714, %723
  %725 = add nuw i32 %715, 1
  %726 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %716, i64 1
  %727 = load i32, i32* %707, align 8, !tbaa !37
  %728 = icmp ult i32 %725, %727
  br i1 %728, label %713, label %729

729:                                              ; preds = %713, %702
  %730 = phi i32 [ 0, %702 ], [ %724, %713 ]
  %731 = add nsw i32 %704, %730
  %732 = add nuw nsw i64 %649, 1
  %733 = load i32, i32* %122, align 8, !tbaa !48
  %734 = sext i32 %733 to i64
  %735 = icmp slt i64 %732, %734
  br i1 %735, label %648, label %736

736:                                              ; preds = %729
  %737 = load i32, i32* %120, align 4, !tbaa !49
  br label %738

738:                                              ; preds = %736, %642
  %739 = phi i32 [ %643, %642 ], [ %737, %736 ]
  %740 = phi i32 [ %644, %642 ], [ %733, %736 ]
  %741 = phi i32 [ %646, %642 ], [ %731, %736 ]
  %742 = add nuw nsw i64 %645, 1
  %743 = sext i32 %739 to i64
  %744 = icmp slt i64 %742, %743
  br i1 %744, label %642, label %745

745:                                              ; preds = %738, %637
  %746 = phi i32 [ 0, %637 ], [ %741, %738 ]
  %747 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %0, i64 0, i32 10
  %748 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %747, align 8, !tbaa !72
  %749 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %748, i64 0, i32 0
  %750 = load i32, i32* %749, align 8, !tbaa !37
  %751 = icmp eq i32 %750, 0
  br i1 %751, label %771, label %752

752:                                              ; preds = %745
  %753 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %748, i64 0, i32 1
  %754 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %753, align 8, !tbaa !42
  br label %755

755:                                              ; preds = %755, %752
  %756 = phi i32 [ %766, %755 ], [ 0, %752 ]
  %757 = phi i32 [ %767, %755 ], [ 0, %752 ]
  %758 = phi %struct.BF_BitstreamElement* [ %768, %755 ], [ %754, %752 ]
  %759 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %758, i64 0, i32 0
  %760 = load i32, i32* %759, align 4, !tbaa !71
  %761 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %758, i64 0, i32 1
  %762 = load i16, i16* %761, align 4, !tbaa !55
  %763 = zext i16 %762 to i32
  tail call fastcc void @WriteMainDataBits(i32 %760, i32 %763) #21
  %764 = load i16, i16* %761, align 4, !tbaa !55
  %765 = zext i16 %764 to i32
  %766 = add nuw nsw i32 %756, %765
  %767 = add nuw i32 %757, 1
  %768 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %758, i64 1
  %769 = load i32, i32* %749, align 8, !tbaa !37
  %770 = icmp ult i32 %767, %769
  br i1 %770, label %755, label %771

771:                                              ; preds = %755, %745
  %772 = phi i32 [ 0, %745 ], [ %766, %755 ]
  %773 = add nsw i32 %772, %746
  store i32 %773, i32* %640, align 4, !tbaa !70
  store i32 0, i32* @forwardFrameLength, align 4, !tbaa !18
  store i32 0, i32* @forwardSILength, align 4, !tbaa !18
  %774 = load %struct.side_info_link*, %struct.side_info_link** @side_queue_head, align 8, !tbaa !7
  %775 = icmp eq %struct.side_info_link* %774, null
  br i1 %775, label %794, label %776

776:                                              ; preds = %776, %771
  %777 = phi i32 [ %787, %776 ], [ 0, %771 ]
  %778 = phi i32 [ %784, %776 ], [ 0, %771 ]
  %779 = phi %struct.side_info_link* [ %789, %776 ], [ %774, %771 ]
  %780 = phi i32 [ %781, %776 ], [ 0, %771 ]
  %781 = add nuw nsw i32 %780, 1
  %782 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %779, i64 0, i32 1, i32 0
  %783 = load i32, i32* %782, align 8, !tbaa !52
  %784 = add nsw i32 %783, %778
  %785 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %779, i64 0, i32 1, i32 1
  %786 = load i32, i32* %785, align 4, !tbaa !67
  %787 = add nsw i32 %786, %777
  %788 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %779, i64 0, i32 0
  %789 = load %struct.side_info_link*, %struct.side_info_link** %788, align 8, !tbaa !7
  %790 = icmp eq %struct.side_info_link* %789, null
  br i1 %790, label %791, label %776

791:                                              ; preds = %776
  store i32 %784, i32* @forwardFrameLength, align 4, !tbaa !18
  store i32 %787, i32* @forwardSILength, align 4, !tbaa !18
  %792 = sdiv i32 %784, 8
  %793 = sdiv i32 %787, -8
  br label %794

794:                                              ; preds = %791, %771
  %795 = phi i32 [ %793, %791 ], [ 0, %771 ]
  %796 = phi i32 [ %792, %791 ], [ 0, %771 ]
  %797 = phi i32 [ %781, %791 ], [ 0, %771 ]
  store i32 %797, i32* @elements, align 4, !tbaa !18
  %798 = load i32, i32* @BitsRemaining, align 4, !tbaa !18
  %799 = sdiv i32 %798, 8
  %800 = add nsw i32 %796, %799
  %801 = add nsw i32 %800, %795
  %802 = getelementptr inbounds %struct.BF_FrameResults, %struct.BF_FrameResults* %1, i64 0, i32 2
  store i32 %801, i32* %802, align 4, !tbaa !73
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local noalias i8* @calloc(i64, i64) local_unnamed_addr #4

; Function Attrs: nounwind uwtable
define dso_local noalias %struct.BF_PartHolder* @BF_resizePartHolder(%struct.BF_PartHolder* nocapture %0, i32 %1) local_unnamed_addr #0 {
  %3 = tail call noalias dereferenceable_or_null(16) i8* @calloc(i64 1, i64 16) #21
  %4 = bitcast i8* %3 to %struct.BF_PartHolder*
  %5 = bitcast i8* %3 to i32*
  store i32 %1, i32* %5, align 8, !tbaa !39
  %6 = tail call noalias dereferenceable_or_null(16) i8* @calloc(i64 1, i64 16) #21
  %7 = getelementptr inbounds i8, i8* %3, i64 8
  %8 = bitcast i8* %7 to i8**
  store i8* %6, i8** %8, align 8, !tbaa !41
  %9 = sext i32 %1 to i64
  %10 = tail call noalias i8* @calloc(i64 %9, i64 8) #21
  %11 = getelementptr inbounds i8, i8* %6, i64 8
  %12 = bitcast i8* %11 to i8**
  store i8* %10, i8** %12, align 8, !tbaa !42
  %13 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %0, i64 0, i32 0
  %14 = load i32, i32* %13, align 8, !tbaa !39
  %15 = icmp sgt i32 %14, %1
  %16 = select i1 %15, i32 %1, i32 %14
  %17 = bitcast i8* %6 to i32*
  store i32 %16, i32* %17, align 8, !tbaa !37
  %18 = icmp sgt i32 %16, 0
  br i1 %18, label %19, label %101

19:                                               ; preds = %2
  %20 = getelementptr inbounds i8, i8* %6, i64 8
  %21 = bitcast i8* %20 to %struct.BF_BitstreamElement**
  %22 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %0, i64 0, i32 1
  %23 = zext i32 %16 to i64
  %24 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %22, align 8, !tbaa !41
  %25 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %24, i64 0, i32 1
  %26 = bitcast %struct.BF_BitstreamElement** %25 to i64**
  %27 = load i64*, i64** %26, align 8, !tbaa !42
  %28 = bitcast i8* %10 to i64*
  %29 = load i64, i64* %27, align 4
  store i64 %29, i64* %28, align 4
  %30 = icmp eq i32 %16, 1
  br i1 %30, label %101, label %31

31:                                               ; preds = %19
  %32 = add nsw i64 %23, -1
  %33 = add nsw i64 %23, -2
  %34 = and i64 %32, 3
  %35 = icmp ult i64 %33, 3
  br i1 %35, label %83, label %36

36:                                               ; preds = %31
  %37 = sub nsw i64 %32, %34
  br label %38

38:                                               ; preds = %38, %36
  %39 = phi i64 [ 1, %36 ], [ %80, %38 ]
  %40 = phi i64 [ %37, %36 ], [ %81, %38 ]
  %41 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %21, align 8, !tbaa !42
  %42 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %41, i64 %39
  %43 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %22, align 8, !tbaa !41
  %44 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %43, i64 0, i32 1
  %45 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %44, align 8, !tbaa !42
  %46 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %45, i64 %39
  %47 = bitcast %struct.BF_BitstreamElement* %46 to i64*
  %48 = bitcast %struct.BF_BitstreamElement* %42 to i64*
  %49 = load i64, i64* %47, align 4
  store i64 %49, i64* %48, align 4
  %50 = add nuw nsw i64 %39, 1
  %51 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %21, align 8, !tbaa !42
  %52 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %51, i64 %50
  %53 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %22, align 8, !tbaa !41
  %54 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %53, i64 0, i32 1
  %55 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %54, align 8, !tbaa !42
  %56 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %55, i64 %50
  %57 = bitcast %struct.BF_BitstreamElement* %56 to i64*
  %58 = bitcast %struct.BF_BitstreamElement* %52 to i64*
  %59 = load i64, i64* %57, align 4
  store i64 %59, i64* %58, align 4
  %60 = add nuw nsw i64 %39, 2
  %61 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %21, align 8, !tbaa !42
  %62 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %61, i64 %60
  %63 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %22, align 8, !tbaa !41
  %64 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %63, i64 0, i32 1
  %65 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %64, align 8, !tbaa !42
  %66 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %65, i64 %60
  %67 = bitcast %struct.BF_BitstreamElement* %66 to i64*
  %68 = bitcast %struct.BF_BitstreamElement* %62 to i64*
  %69 = load i64, i64* %67, align 4
  store i64 %69, i64* %68, align 4
  %70 = add nuw nsw i64 %39, 3
  %71 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %21, align 8, !tbaa !42
  %72 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %71, i64 %70
  %73 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %22, align 8, !tbaa !41
  %74 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %73, i64 0, i32 1
  %75 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %74, align 8, !tbaa !42
  %76 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %75, i64 %70
  %77 = bitcast %struct.BF_BitstreamElement* %76 to i64*
  %78 = bitcast %struct.BF_BitstreamElement* %72 to i64*
  %79 = load i64, i64* %77, align 4
  store i64 %79, i64* %78, align 4
  %80 = add nuw nsw i64 %39, 4
  %81 = add i64 %40, -4
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %83, label %38

83:                                               ; preds = %38, %31
  %84 = phi i64 [ 1, %31 ], [ %80, %38 ]
  %85 = icmp eq i64 %34, 0
  br i1 %85, label %101, label %86

86:                                               ; preds = %86, %83
  %87 = phi i64 [ %98, %86 ], [ %84, %83 ]
  %88 = phi i64 [ %99, %86 ], [ %34, %83 ]
  %89 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %21, align 8, !tbaa !42
  %90 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %89, i64 %87
  %91 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %22, align 8, !tbaa !41
  %92 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %91, i64 0, i32 1
  %93 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %92, align 8, !tbaa !42
  %94 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %93, i64 %87
  %95 = bitcast %struct.BF_BitstreamElement* %94 to i64*
  %96 = bitcast %struct.BF_BitstreamElement* %90 to i64*
  %97 = load i64, i64* %95, align 4
  store i64 %97, i64* %96, align 4
  %98 = add nuw nsw i64 %87, 1
  %99 = add i64 %88, -1
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %86, !llvm.loop !74

101:                                              ; preds = %86, %83, %19, %2
  %102 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %0, i64 0, i32 1
  %103 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %102, align 8, !tbaa !41
  %104 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %103, i64 0, i32 1
  %105 = bitcast %struct.BF_BitstreamElement** %104 to i8**
  %106 = load i8*, i8** %105, align 8, !tbaa !42
  tail call void @free(i8* %106) #21
  %107 = bitcast %struct.BF_BitstreamPart** %102 to i8**
  %108 = load i8*, i8** %107, align 8, !tbaa !41
  tail call void @free(i8* %108) #21
  %109 = bitcast %struct.BF_PartHolder* %0 to i8*
  tail call void @free(i8* %109) #21
  ret %struct.BF_PartHolder* %4
}

; Function Attrs: nounwind uwtable
define internal fastcc void @WriteMainDataBits(i32 %0, i32 %1) unnamed_addr #0 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %29, label %4

4:                                                ; preds = %2
  %5 = load i32, i32* @BitCount, align 4, !tbaa !18
  %6 = load i32, i32* @ThisFrameSize, align 4, !tbaa !18
  %7 = icmp eq i32 %5, %6
  br i1 %7, label %10, label %8

8:                                                ; preds = %4
  %9 = load i32, i32* @BitsRemaining, align 4, !tbaa !18
  br label %14

10:                                               ; preds = %4
  %11 = tail call fastcc i32 @write_side_info()
  store i32 %11, i32* @BitCount, align 4, !tbaa !18
  %12 = load i32, i32* @ThisFrameSize, align 4, !tbaa !18
  %13 = sub nsw i32 %12, %11
  store i32 %13, i32* @BitsRemaining, align 4, !tbaa !18
  br label %14

14:                                               ; preds = %10, %8
  %15 = phi i32 [ %9, %8 ], [ %13, %10 ]
  %16 = icmp ult i32 %15, %1
  br i1 %16, label %17, label %23

17:                                               ; preds = %14
  %18 = sub i32 %1, %15
  %19 = lshr i32 %0, %18
  tail call void @putMyBits(i32 %19, i32 %15) #21
  %20 = tail call fastcc i32 @write_side_info()
  store i32 %20, i32* @BitCount, align 4, !tbaa !18
  %21 = load i32, i32* @ThisFrameSize, align 4, !tbaa !18
  %22 = sub nsw i32 %21, %20
  store i32 %22, i32* @BitsRemaining, align 4, !tbaa !18
  br label %23

23:                                               ; preds = %17, %14
  %24 = phi i32 [ %18, %17 ], [ %1, %14 ]
  tail call void @putMyBits(i32 %0, i32 %24) #21
  %25 = load i32, i32* @BitCount, align 4, !tbaa !18
  %26 = add i32 %25, %24
  store i32 %26, i32* @BitCount, align 4, !tbaa !18
  %27 = load i32, i32* @BitsRemaining, align 4, !tbaa !18
  %28 = sub i32 %27, %24
  store i32 %28, i32* @BitsRemaining, align 4, !tbaa !18
  br label %29

29:                                               ; preds = %23, %2
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @write_side_info() unnamed_addr #0 {
  %1 = load i64, i64* bitcast (%struct.side_info_link** @side_queue_free to i64*), align 8, !tbaa !7
  %2 = load %struct.side_info_link*, %struct.side_info_link** @side_queue_head, align 8, !tbaa !7
  %3 = bitcast %struct.side_info_link* %2 to i64*
  %4 = load i64, i64* %3, align 8, !tbaa !50
  store i64 %4, i64* bitcast (%struct.side_info_link** @side_queue_head to i64*), align 8, !tbaa !7
  store %struct.side_info_link* %2, %struct.side_info_link** @side_queue_free, align 8, !tbaa !7
  store i64 %1, i64* %3, align 8, !tbaa !50
  %5 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %2, i64 0, i32 1, i32 0
  %6 = load i32, i32* %5, align 8, !tbaa !76
  store i32 %6, i32* @ThisFrameSize, align 4, !tbaa !18
  %7 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %2, i64 0, i32 1, i32 4
  %8 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %7, align 8, !tbaa !77
  %9 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %8, i64 0, i32 1
  %10 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %9, align 8, !tbaa !41
  %11 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %10, i64 0, i32 0
  %12 = load i32, i32* %11, align 8, !tbaa !37
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %33, label %14

14:                                               ; preds = %0
  %15 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %10, i64 0, i32 1
  %16 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %15, align 8, !tbaa !42
  br label %17

17:                                               ; preds = %17, %14
  %18 = phi i32 [ %28, %17 ], [ 0, %14 ]
  %19 = phi i32 [ %29, %17 ], [ 0, %14 ]
  %20 = phi %struct.BF_BitstreamElement* [ %30, %17 ], [ %16, %14 ]
  %21 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %20, i64 0, i32 0
  %22 = load i32, i32* %21, align 4, !tbaa !71
  %23 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %20, i64 0, i32 1
  %24 = load i16, i16* %23, align 4, !tbaa !55
  %25 = zext i16 %24 to i32
  tail call void @putMyBits(i32 %22, i32 %25) #21
  %26 = load i16, i16* %23, align 4, !tbaa !55
  %27 = zext i16 %26 to i32
  %28 = add nuw nsw i32 %18, %27
  %29 = add nuw i32 %19, 1
  %30 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %20, i64 1
  %31 = load i32, i32* %11, align 8, !tbaa !37
  %32 = icmp ult i32 %29, %31
  br i1 %32, label %17, label %33

33:                                               ; preds = %17, %0
  %34 = phi i32 [ 0, %0 ], [ %28, %17 ]
  %35 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %2, i64 0, i32 1, i32 5
  %36 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %35, align 8, !tbaa !78
  %37 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %36, i64 0, i32 1
  %38 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %37, align 8, !tbaa !41
  %39 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %38, i64 0, i32 0
  %40 = load i32, i32* %39, align 8, !tbaa !37
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %61, label %42

42:                                               ; preds = %33
  %43 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %38, i64 0, i32 1
  %44 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %43, align 8, !tbaa !42
  br label %45

45:                                               ; preds = %45, %42
  %46 = phi i32 [ %56, %45 ], [ 0, %42 ]
  %47 = phi i32 [ %57, %45 ], [ 0, %42 ]
  %48 = phi %struct.BF_BitstreamElement* [ %58, %45 ], [ %44, %42 ]
  %49 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %48, i64 0, i32 0
  %50 = load i32, i32* %49, align 4, !tbaa !71
  %51 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %48, i64 0, i32 1
  %52 = load i16, i16* %51, align 4, !tbaa !55
  %53 = zext i16 %52 to i32
  tail call void @putMyBits(i32 %50, i32 %53) #21
  %54 = load i16, i16* %51, align 4, !tbaa !55
  %55 = zext i16 %54 to i32
  %56 = add nuw nsw i32 %46, %55
  %57 = add nuw i32 %47, 1
  %58 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %48, i64 1
  %59 = load i32, i32* %39, align 8, !tbaa !37
  %60 = icmp ult i32 %57, %59
  br i1 %60, label %45, label %61

61:                                               ; preds = %45, %33
  %62 = phi i32 [ 0, %33 ], [ %56, %45 ]
  %63 = add nsw i32 %62, %34
  %64 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %2, i64 0, i32 1, i32 3
  %65 = load i32, i32* %64, align 4, !tbaa !79
  %66 = icmp sgt i32 %65, 0
  br i1 %66, label %73, label %67

67:                                               ; preds = %105, %61
  %68 = phi i32 [ %65, %61 ], [ %106, %105 ]
  %69 = phi i32 [ %63, %61 ], [ %108, %105 ]
  %70 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %2, i64 0, i32 1, i32 2
  %71 = load i32, i32* %70, align 8, !tbaa !80
  %72 = icmp sgt i32 %71, 0
  br i1 %72, label %112, label %168

73:                                               ; preds = %105, %61
  %74 = phi i32 [ %106, %105 ], [ %65, %61 ]
  %75 = phi i64 [ %109, %105 ], [ 0, %61 ]
  %76 = phi i32 [ %108, %105 ], [ %63, %61 ]
  %77 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %2, i64 0, i32 1, i32 6, i64 %75
  %78 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %77, align 8, !tbaa !7
  %79 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %78, i64 0, i32 1
  %80 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %79, align 8, !tbaa !41
  %81 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %80, i64 0, i32 0
  %82 = load i32, i32* %81, align 8, !tbaa !37
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %105, label %84

84:                                               ; preds = %73
  %85 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %80, i64 0, i32 1
  %86 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %85, align 8, !tbaa !42
  br label %87

87:                                               ; preds = %87, %84
  %88 = phi i32 [ %98, %87 ], [ 0, %84 ]
  %89 = phi i32 [ %99, %87 ], [ 0, %84 ]
  %90 = phi %struct.BF_BitstreamElement* [ %100, %87 ], [ %86, %84 ]
  %91 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %90, i64 0, i32 0
  %92 = load i32, i32* %91, align 4, !tbaa !71
  %93 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %90, i64 0, i32 1
  %94 = load i16, i16* %93, align 4, !tbaa !55
  %95 = zext i16 %94 to i32
  tail call void @putMyBits(i32 %92, i32 %95) #21
  %96 = load i16, i16* %93, align 4, !tbaa !55
  %97 = zext i16 %96 to i32
  %98 = add nuw nsw i32 %88, %97
  %99 = add nuw i32 %89, 1
  %100 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %90, i64 1
  %101 = load i32, i32* %81, align 8, !tbaa !37
  %102 = icmp ult i32 %99, %101
  br i1 %102, label %87, label %103

103:                                              ; preds = %87
  %104 = load i32, i32* %64, align 4, !tbaa !79
  br label %105

105:                                              ; preds = %103, %73
  %106 = phi i32 [ %74, %73 ], [ %104, %103 ]
  %107 = phi i32 [ 0, %73 ], [ %98, %103 ]
  %108 = add nsw i32 %107, %76
  %109 = add nuw nsw i64 %75, 1
  %110 = sext i32 %106 to i64
  %111 = icmp slt i64 %109, %110
  br i1 %111, label %73, label %67

112:                                              ; preds = %160, %67
  %113 = phi i32 [ %161, %160 ], [ %71, %67 ]
  %114 = phi i32 [ %162, %160 ], [ %68, %67 ]
  %115 = phi i32 [ %163, %160 ], [ %68, %67 ]
  %116 = phi i64 [ %165, %160 ], [ 0, %67 ]
  %117 = phi i32 [ %164, %160 ], [ %69, %67 ]
  %118 = icmp sgt i32 %115, 0
  br i1 %118, label %119, label %160

119:                                              ; preds = %151, %112
  %120 = phi i32 [ %152, %151 ], [ %114, %112 ]
  %121 = phi i64 [ %155, %151 ], [ 0, %112 ]
  %122 = phi i32 [ %154, %151 ], [ %117, %112 ]
  %123 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %2, i64 0, i32 1, i32 7, i64 %116, i64 %121
  %124 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %123, align 8, !tbaa !7
  %125 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %124, i64 0, i32 1
  %126 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %125, align 8, !tbaa !41
  %127 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %126, i64 0, i32 0
  %128 = load i32, i32* %127, align 8, !tbaa !37
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %151, label %130

130:                                              ; preds = %119
  %131 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %126, i64 0, i32 1
  %132 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %131, align 8, !tbaa !42
  br label %133

133:                                              ; preds = %133, %130
  %134 = phi i32 [ %144, %133 ], [ 0, %130 ]
  %135 = phi i32 [ %145, %133 ], [ 0, %130 ]
  %136 = phi %struct.BF_BitstreamElement* [ %146, %133 ], [ %132, %130 ]
  %137 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %136, i64 0, i32 0
  %138 = load i32, i32* %137, align 4, !tbaa !71
  %139 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %136, i64 0, i32 1
  %140 = load i16, i16* %139, align 4, !tbaa !55
  %141 = zext i16 %140 to i32
  tail call void @putMyBits(i32 %138, i32 %141) #21
  %142 = load i16, i16* %139, align 4, !tbaa !55
  %143 = zext i16 %142 to i32
  %144 = add nuw nsw i32 %134, %143
  %145 = add nuw i32 %135, 1
  %146 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %136, i64 1
  %147 = load i32, i32* %127, align 8, !tbaa !37
  %148 = icmp ult i32 %145, %147
  br i1 %148, label %133, label %149

149:                                              ; preds = %133
  %150 = load i32, i32* %64, align 4, !tbaa !79
  br label %151

151:                                              ; preds = %149, %119
  %152 = phi i32 [ %120, %119 ], [ %150, %149 ]
  %153 = phi i32 [ 0, %119 ], [ %144, %149 ]
  %154 = add nsw i32 %153, %122
  %155 = add nuw nsw i64 %121, 1
  %156 = sext i32 %152 to i64
  %157 = icmp slt i64 %155, %156
  br i1 %157, label %119, label %158

158:                                              ; preds = %151
  %159 = load i32, i32* %70, align 8, !tbaa !80
  br label %160

160:                                              ; preds = %158, %112
  %161 = phi i32 [ %113, %112 ], [ %159, %158 ]
  %162 = phi i32 [ %114, %112 ], [ %152, %158 ]
  %163 = phi i32 [ %115, %112 ], [ %152, %158 ]
  %164 = phi i32 [ %117, %112 ], [ %154, %158 ]
  %165 = add nuw nsw i64 %116, 1
  %166 = sext i32 %161 to i64
  %167 = icmp slt i64 %165, %166
  br i1 %167, label %112, label %168

168:                                              ; preds = %160, %67
  %169 = phi i32 [ %69, %67 ], [ %164, %160 ]
  ret i32 %169
}

; Function Attrs: nounwind
declare dso_local void @free(i8* nocapture) local_unnamed_addr #9

; Function Attrs: nounwind uwtable
define dso_local void @BF_FlushBitstream(%struct.BF_FrameData* nocapture readnone %0, %struct.BF_FrameResults* nocapture %1) local_unnamed_addr #0 {
  %3 = load i32, i32* @elements, align 4, !tbaa !18
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %19, label %5

5:                                                ; preds = %2
  %6 = load i32, i32* @forwardFrameLength, align 4, !tbaa !18
  %7 = load i32, i32* @forwardSILength, align 4, !tbaa !18
  %8 = sub nsw i32 %6, %7
  %9 = add i32 %8, 31
  %10 = icmp ult i32 %9, 63
  br i1 %10, label %17, label %11

11:                                               ; preds = %5
  %12 = sdiv i32 %8, 32
  br label %13

13:                                               ; preds = %13, %11
  %14 = phi i32 [ %15, %13 ], [ %12, %11 ]
  %15 = add nsw i32 %14, -1
  tail call fastcc void @WriteMainDataBits(i32 0, i32 32)
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %13

17:                                               ; preds = %13, %5
  %18 = srem i32 %8, 32
  tail call fastcc void @WriteMainDataBits(i32 0, i32 %18)
  br label %19

19:                                               ; preds = %17, %2
  %20 = load i32, i32* @forwardFrameLength, align 4, !tbaa !18
  %21 = load i32, i32* @forwardSILength, align 4, !tbaa !18
  %22 = sub nsw i32 %20, %21
  %23 = getelementptr inbounds %struct.BF_FrameResults, %struct.BF_FrameResults* %1, i64 0, i32 1
  store i32 %22, i32* %23, align 4, !tbaa !70
  %24 = getelementptr inbounds %struct.BF_FrameResults, %struct.BF_FrameResults* %1, i64 0, i32 0
  store i32 %21, i32* %24, align 4, !tbaa !68
  %25 = getelementptr inbounds %struct.BF_FrameResults, %struct.BF_FrameResults* %1, i64 0, i32 2
  store i32 0, i32* %25, align 4, !tbaa !73
  %26 = load %struct.side_info_link*, %struct.side_info_link** @side_queue_head, align 8, !tbaa !7
  %27 = icmp eq %struct.side_info_link* %26, null
  br i1 %27, label %33, label %28

28:                                               ; preds = %28, %19
  %29 = phi %struct.side_info_link* [ %31, %28 ], [ %26, %19 ]
  %30 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %29, i64 0, i32 0
  %31 = load %struct.side_info_link*, %struct.side_info_link** %30, align 8, !tbaa !50
  tail call fastcc void @free_side_info_link(%struct.side_info_link* nonnull %29) #21
  %32 = icmp eq %struct.side_info_link* %31, null
  br i1 %32, label %33, label %28

33:                                               ; preds = %28, %19
  store %struct.side_info_link* null, %struct.side_info_link** @side_queue_head, align 8, !tbaa !7
  %34 = load %struct.side_info_link*, %struct.side_info_link** @side_queue_free, align 8, !tbaa !7
  %35 = icmp eq %struct.side_info_link* %34, null
  br i1 %35, label %41, label %36

36:                                               ; preds = %36, %33
  %37 = phi %struct.side_info_link* [ %39, %36 ], [ %34, %33 ]
  %38 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %37, i64 0, i32 0
  %39 = load %struct.side_info_link*, %struct.side_info_link** %38, align 8, !tbaa !50
  tail call fastcc void @free_side_info_link(%struct.side_info_link* nonnull %37) #21
  %40 = icmp eq %struct.side_info_link* %39, null
  br i1 %40, label %41, label %36

41:                                               ; preds = %36, %33
  store %struct.side_info_link* null, %struct.side_info_link** @side_queue_free, align 8, !tbaa !7
  store i32 0, i32* @BitCount, align 4, !tbaa !18
  store i32 0, i32* @ThisFrameSize, align 4, !tbaa !18
  store i32 0, i32* @BitsRemaining, align 4, !tbaa !18
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @free_side_info_link(%struct.side_info_link* nocapture %0) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %0, i64 0, i32 1, i32 4
  %3 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2, align 8, !tbaa !43
  %4 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %3, i64 0, i32 1
  %5 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %4, align 8, !tbaa !41
  %6 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %5, i64 0, i32 1
  %7 = bitcast %struct.BF_BitstreamElement** %6 to i8**
  %8 = load i8*, i8** %7, align 8, !tbaa !42
  tail call void @free(i8* %8) #21
  %9 = bitcast %struct.BF_BitstreamPart** %4 to i8**
  %10 = load i8*, i8** %9, align 8, !tbaa !41
  tail call void @free(i8* %10) #21
  %11 = bitcast %struct.BF_PartHolder* %3 to i8*
  tail call void @free(i8* %11) #21
  store %struct.BF_PartHolder* null, %struct.BF_PartHolder** %2, align 8, !tbaa !43
  %12 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %0, i64 0, i32 1, i32 5
  %13 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %12, align 8, !tbaa !47
  %14 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %13, i64 0, i32 1
  %15 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %14, align 8, !tbaa !41
  %16 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %15, i64 0, i32 1
  %17 = bitcast %struct.BF_BitstreamElement** %16 to i8**
  %18 = load i8*, i8** %17, align 8, !tbaa !42
  tail call void @free(i8* %18) #21
  %19 = bitcast %struct.BF_BitstreamPart** %14 to i8**
  %20 = load i8*, i8** %19, align 8, !tbaa !41
  tail call void @free(i8* %20) #21
  %21 = bitcast %struct.BF_PartHolder* %13 to i8*
  tail call void @free(i8* %21) #21
  store %struct.BF_PartHolder* null, %struct.BF_PartHolder** %12, align 8, !tbaa !47
  %22 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %0, i64 0, i32 1, i32 3
  %23 = load i32, i32* %22, align 4, !tbaa !54
  %24 = icmp sgt i32 %23, 0
  br i1 %24, label %30, label %25

25:                                               ; preds = %30, %1
  %26 = phi i32 [ %23, %1 ], [ %43, %30 ]
  %27 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %0, i64 0, i32 1, i32 2
  %28 = load i32, i32* %27, align 8, !tbaa !53
  %29 = icmp sgt i32 %28, 0
  br i1 %29, label %46, label %75

30:                                               ; preds = %30, %1
  %31 = phi i64 [ %42, %30 ], [ 0, %1 ]
  %32 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %0, i64 0, i32 1, i32 6, i64 %31
  %33 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %32, align 8, !tbaa !7
  %34 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %33, i64 0, i32 1
  %35 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %34, align 8, !tbaa !41
  %36 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %35, i64 0, i32 1
  %37 = bitcast %struct.BF_BitstreamElement** %36 to i8**
  %38 = load i8*, i8** %37, align 8, !tbaa !42
  tail call void @free(i8* %38) #21
  %39 = bitcast %struct.BF_BitstreamPart** %34 to i8**
  %40 = load i8*, i8** %39, align 8, !tbaa !41
  tail call void @free(i8* %40) #21
  %41 = bitcast %struct.BF_PartHolder* %33 to i8*
  tail call void @free(i8* %41) #21
  store %struct.BF_PartHolder* null, %struct.BF_PartHolder** %32, align 8, !tbaa !7
  %42 = add nuw nsw i64 %31, 1
  %43 = load i32, i32* %22, align 4, !tbaa !54
  %44 = sext i32 %43 to i64
  %45 = icmp slt i64 %42, %44
  br i1 %45, label %30, label %25

46:                                               ; preds = %69, %25
  %47 = phi i32 [ %70, %69 ], [ %28, %25 ]
  %48 = phi i32 [ %71, %69 ], [ %26, %25 ]
  %49 = phi i64 [ %72, %69 ], [ 0, %25 ]
  %50 = icmp sgt i32 %48, 0
  br i1 %50, label %51, label %69

51:                                               ; preds = %51, %46
  %52 = phi i64 [ %63, %51 ], [ 0, %46 ]
  %53 = getelementptr inbounds %struct.side_info_link, %struct.side_info_link* %0, i64 0, i32 1, i32 7, i64 %49, i64 %52
  %54 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %53, align 8, !tbaa !7
  %55 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %54, i64 0, i32 1
  %56 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %55, align 8, !tbaa !41
  %57 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %56, i64 0, i32 1
  %58 = bitcast %struct.BF_BitstreamElement** %57 to i8**
  %59 = load i8*, i8** %58, align 8, !tbaa !42
  tail call void @free(i8* %59) #21
  %60 = bitcast %struct.BF_BitstreamPart** %55 to i8**
  %61 = load i8*, i8** %60, align 8, !tbaa !41
  tail call void @free(i8* %61) #21
  %62 = bitcast %struct.BF_PartHolder* %54 to i8*
  tail call void @free(i8* %62) #21
  store %struct.BF_PartHolder* null, %struct.BF_PartHolder** %53, align 8, !tbaa !7
  %63 = add nuw nsw i64 %52, 1
  %64 = load i32, i32* %22, align 4, !tbaa !54
  %65 = sext i32 %64 to i64
  %66 = icmp slt i64 %63, %65
  br i1 %66, label %51, label %67

67:                                               ; preds = %51
  %68 = load i32, i32* %27, align 8, !tbaa !53
  br label %69

69:                                               ; preds = %67, %46
  %70 = phi i32 [ %68, %67 ], [ %47, %46 ]
  %71 = phi i32 [ %64, %67 ], [ %48, %46 ]
  %72 = add nuw nsw i64 %49, 1
  %73 = sext i32 %70 to i64
  %74 = icmp slt i64 %72, %73
  br i1 %74, label %46, label %75

75:                                               ; preds = %69, %25
  %76 = bitcast %struct.side_info_link* %0 to i8*
  tail call void @free(i8* %76) #21
  ret void
}

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local i32 @BF_PartLength(%struct.BF_BitstreamPart* nocapture readonly %0) local_unnamed_addr #10 {
  %2 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8, !tbaa !37
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %60, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %0, i64 0, i32 1
  %7 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %6, align 8, !tbaa !42
  %8 = add i32 %3, -1
  %9 = zext i32 %8 to i64
  %10 = add nuw nsw i64 %9, 1
  %11 = icmp ult i32 %8, 8
  br i1 %11, label %45, label %12

12:                                               ; preds = %5
  %13 = and i64 %10, 7
  %14 = icmp eq i64 %13, 0
  %15 = select i1 %14, i64 8, i64 %13
  %16 = sub nsw i64 %10, %15
  %17 = trunc i64 %16 to i32
  %18 = getelementptr %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %7, i64 %16
  br label %19

19:                                               ; preds = %19, %12
  %20 = phi i64 [ 0, %12 ], [ %36, %19 ]
  %21 = phi <4 x i32> [ zeroinitializer, %12 ], [ %34, %19 ]
  %22 = phi <4 x i32> [ zeroinitializer, %12 ], [ %35, %19 ]
  %23 = or i64 %20, 4
  %24 = getelementptr %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %7, i64 %20, i32 1
  %25 = getelementptr %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %7, i64 %23, i32 1
  %26 = bitcast i16* %24 to <16 x i16>*
  %27 = bitcast i16* %25 to <16 x i16>*
  %28 = load <16 x i16>, <16 x i16>* %26, align 4, !tbaa !55
  %29 = load <16 x i16>, <16 x i16>* %27, align 4, !tbaa !55
  %30 = shufflevector <16 x i16> %28, <16 x i16> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %31 = shufflevector <16 x i16> %29, <16 x i16> undef, <4 x i32> <i32 0, i32 4, i32 8, i32 12>
  %32 = zext <4 x i16> %30 to <4 x i32>
  %33 = zext <4 x i16> %31 to <4 x i32>
  %34 = add <4 x i32> %21, %32
  %35 = add <4 x i32> %22, %33
  %36 = add i64 %20, 8
  %37 = icmp eq i64 %36, %16
  br i1 %37, label %38, label %19, !llvm.loop !81

38:                                               ; preds = %19
  %39 = add <4 x i32> %35, %34
  %40 = shufflevector <4 x i32> %39, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %41 = add <4 x i32> %39, %40
  %42 = shufflevector <4 x i32> %41, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %43 = add <4 x i32> %41, %42
  %44 = extractelement <4 x i32> %43, i32 0
  br label %45

45:                                               ; preds = %38, %5
  %46 = phi i32 [ 0, %5 ], [ %44, %38 ]
  %47 = phi i32 [ 0, %5 ], [ %17, %38 ]
  %48 = phi %struct.BF_BitstreamElement* [ %7, %5 ], [ %18, %38 ]
  br label %49

49:                                               ; preds = %49, %45
  %50 = phi i32 [ %56, %49 ], [ %46, %45 ]
  %51 = phi i32 [ %57, %49 ], [ %47, %45 ]
  %52 = phi %struct.BF_BitstreamElement* [ %58, %49 ], [ %48, %45 ]
  %53 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %52, i64 0, i32 1
  %54 = load i16, i16* %53, align 4, !tbaa !55
  %55 = zext i16 %54 to i32
  %56 = add nuw nsw i32 %50, %55
  %57 = add nuw i32 %51, 1
  %58 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %52, i64 1
  %59 = icmp ult i32 %57, %3
  br i1 %59, label %49, label %60, !llvm.loop !82

60:                                               ; preds = %49, %1
  %61 = phi i32 [ 0, %1 ], [ %56, %49 ]
  ret i32 %61
}

; Function Attrs: nofree nounwind uwtable
define dso_local noalias %struct.BF_PartHolder* @BF_newPartHolder(i32 %0) local_unnamed_addr #3 {
  %2 = tail call noalias dereferenceable_or_null(16) i8* @calloc(i64 1, i64 16) #21
  %3 = bitcast i8* %2 to %struct.BF_PartHolder*
  %4 = bitcast i8* %2 to i32*
  store i32 %0, i32* %4, align 8, !tbaa !39
  %5 = tail call noalias dereferenceable_or_null(16) i8* @calloc(i64 1, i64 16) #21
  %6 = getelementptr inbounds i8, i8* %2, i64 8
  %7 = bitcast i8* %6 to i8**
  store i8* %5, i8** %7, align 8, !tbaa !41
  %8 = sext i32 %0 to i64
  %9 = tail call noalias i8* @calloc(i64 %8, i64 8) #21
  %10 = getelementptr inbounds i8, i8* %5, i64 8
  %11 = bitcast i8* %10 to i8**
  store i8* %9, i8** %11, align 8, !tbaa !42
  ret %struct.BF_PartHolder* %3
}

; Function Attrs: nounwind uwtable
define dso_local noalias %struct.BF_PartHolder* @BF_NewHolderFromBitstreamPart(%struct.BF_BitstreamPart* nocapture readonly %0) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8, !tbaa !37
  %4 = tail call noalias dereferenceable_or_null(16) i8* @calloc(i64 1, i64 16) #21
  %5 = bitcast i8* %4 to %struct.BF_PartHolder*
  %6 = bitcast i8* %4 to i32*
  store i32 %3, i32* %6, align 8, !tbaa !39
  %7 = tail call noalias dereferenceable_or_null(16) i8* @calloc(i64 1, i64 16) #21
  %8 = getelementptr inbounds i8, i8* %4, i64 8
  %9 = bitcast i8* %8 to i8**
  store i8* %7, i8** %9, align 8, !tbaa !41
  %10 = sext i32 %3 to i64
  %11 = tail call noalias i8* @calloc(i64 %10, i64 8) #21
  %12 = getelementptr inbounds i8, i8* %7, i64 8
  %13 = bitcast i8* %12 to i8**
  store i8* %11, i8** %13, align 8, !tbaa !42
  %14 = icmp eq i32 %3, 0
  br i1 %14, label %59, label %15

15:                                               ; preds = %1
  %16 = bitcast i8* %7 to %struct.BF_BitstreamPart*
  %17 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %0, i64 0, i32 1
  br label %18

18:                                               ; preds = %54, %15
  %19 = phi i32 [ 0, %15 ], [ %58, %54 ]
  %20 = phi %struct.BF_BitstreamPart* [ %16, %15 ], [ %56, %54 ]
  %21 = phi i64 [ 0, %15 ], [ %50, %54 ]
  %22 = phi %struct.BF_PartHolder* [ %5, %15 ], [ %41, %54 ]
  %23 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %17, align 8, !tbaa !42
  %24 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %23, i64 %21
  %25 = add i32 %19, 1
  %26 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %22, i64 0, i32 0
  %27 = load i32, i32* %26, align 8, !tbaa !39
  %28 = icmp sgt i32 %25, %27
  br i1 %28, label %29, label %37

29:                                               ; preds = %18
  %30 = add i32 %19, 9
  %31 = tail call %struct.BF_PartHolder* @BF_resizePartHolder(%struct.BF_PartHolder* nonnull %22, i32 %30) #21
  %32 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %31, i64 0, i32 1
  %33 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %32, align 8, !tbaa !41
  %34 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %33, i64 0, i32 0
  %35 = load i32, i32* %34, align 8, !tbaa !37
  %36 = add i32 %35, 1
  br label %37

37:                                               ; preds = %29, %18
  %38 = phi i32 [ %36, %29 ], [ %25, %18 ]
  %39 = phi i32 [ %35, %29 ], [ %19, %18 ]
  %40 = phi %struct.BF_BitstreamPart* [ %33, %29 ], [ %20, %18 ]
  %41 = phi %struct.BF_PartHolder* [ %31, %29 ], [ %22, %18 ]
  %42 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %40, i64 0, i32 1
  %43 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %42, align 8, !tbaa !42
  %44 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %40, i64 0, i32 0
  store i32 %38, i32* %44, align 8, !tbaa !37
  %45 = zext i32 %39 to i64
  %46 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %43, i64 %45
  %47 = bitcast %struct.BF_BitstreamElement* %24 to i64*
  %48 = bitcast %struct.BF_BitstreamElement* %46 to i64*
  %49 = load i64, i64* %47, align 4
  store i64 %49, i64* %48, align 4
  %50 = add nuw nsw i64 %21, 1
  %51 = load i32, i32* %2, align 8, !tbaa !37
  %52 = zext i32 %51 to i64
  %53 = icmp ult i64 %50, %52
  br i1 %53, label %54, label %59

54:                                               ; preds = %37
  %55 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %41, i64 0, i32 1
  %56 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %55, align 8, !tbaa !41
  %57 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %56, i64 0, i32 0
  %58 = load i32, i32* %57, align 8, !tbaa !37
  br label %18

59:                                               ; preds = %37, %1
  %60 = phi %struct.BF_PartHolder* [ %5, %1 ], [ %41, %37 ]
  ret %struct.BF_PartHolder* %60
}

; Function Attrs: nounwind uwtable
define dso_local %struct.BF_PartHolder* @BF_LoadHolderFromBitstreamPart(%struct.BF_PartHolder* %0, %struct.BF_BitstreamPart* nocapture readonly %1) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %0, i64 0, i32 1
  %4 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %3, align 8, !tbaa !41
  %5 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %4, i64 0, i32 0
  store i32 0, i32* %5, align 8, !tbaa !37
  %6 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %1, i64 0, i32 0
  %7 = load i32, i32* %6, align 8, !tbaa !37
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %52, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %1, i64 0, i32 1
  br label %11

11:                                               ; preds = %47, %9
  %12 = phi i32 [ 0, %9 ], [ %51, %47 ]
  %13 = phi %struct.BF_BitstreamPart* [ %4, %9 ], [ %49, %47 ]
  %14 = phi i64 [ 0, %9 ], [ %43, %47 ]
  %15 = phi %struct.BF_PartHolder* [ %0, %9 ], [ %34, %47 ]
  %16 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %10, align 8, !tbaa !42
  %17 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %16, i64 %14
  %18 = add i32 %12, 1
  %19 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %15, i64 0, i32 0
  %20 = load i32, i32* %19, align 8, !tbaa !39
  %21 = icmp sgt i32 %18, %20
  br i1 %21, label %22, label %30

22:                                               ; preds = %11
  %23 = add i32 %12, 9
  %24 = tail call %struct.BF_PartHolder* @BF_resizePartHolder(%struct.BF_PartHolder* nonnull %15, i32 %23) #21
  %25 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %24, i64 0, i32 1
  %26 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %25, align 8, !tbaa !41
  %27 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %26, i64 0, i32 0
  %28 = load i32, i32* %27, align 8, !tbaa !37
  %29 = add i32 %28, 1
  br label %30

30:                                               ; preds = %22, %11
  %31 = phi i32 [ %29, %22 ], [ %18, %11 ]
  %32 = phi i32 [ %28, %22 ], [ %12, %11 ]
  %33 = phi %struct.BF_BitstreamPart* [ %26, %22 ], [ %13, %11 ]
  %34 = phi %struct.BF_PartHolder* [ %24, %22 ], [ %15, %11 ]
  %35 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %33, i64 0, i32 1
  %36 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %35, align 8, !tbaa !42
  %37 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %33, i64 0, i32 0
  store i32 %31, i32* %37, align 8, !tbaa !37
  %38 = zext i32 %32 to i64
  %39 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %36, i64 %38
  %40 = bitcast %struct.BF_BitstreamElement* %17 to i64*
  %41 = bitcast %struct.BF_BitstreamElement* %39 to i64*
  %42 = load i64, i64* %40, align 4
  store i64 %42, i64* %41, align 4
  %43 = add nuw nsw i64 %14, 1
  %44 = load i32, i32* %6, align 8, !tbaa !37
  %45 = zext i32 %44 to i64
  %46 = icmp ult i64 %43, %45
  br i1 %46, label %47, label %52

47:                                               ; preds = %30
  %48 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %34, i64 0, i32 1
  %49 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %48, align 8, !tbaa !41
  %50 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %49, i64 0, i32 0
  %51 = load i32, i32* %50, align 8, !tbaa !37
  br label %11

52:                                               ; preds = %30, %2
  %53 = phi %struct.BF_PartHolder* [ %0, %2 ], [ %34, %30 ]
  ret %struct.BF_PartHolder* %53
}

; Function Attrs: nounwind uwtable
define dso_local %struct.BF_PartHolder* @BF_addElement(%struct.BF_PartHolder* %0, %struct.BF_BitstreamElement* nocapture readonly %1) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %0, i64 0, i32 1
  %4 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %3, align 8, !tbaa !41
  %5 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %4, i64 0, i32 0
  %6 = load i32, i32* %5, align 8, !tbaa !37
  %7 = add i32 %6, 1
  %8 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %0, i64 0, i32 0
  %9 = load i32, i32* %8, align 8, !tbaa !39
  %10 = icmp sgt i32 %7, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %2
  %12 = add i32 %6, 9
  %13 = tail call %struct.BF_PartHolder* @BF_resizePartHolder(%struct.BF_PartHolder* nonnull %0, i32 %12)
  %14 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %13, i64 0, i32 1
  %15 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %14, align 8, !tbaa !41
  %16 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %15, i64 0, i32 0
  %17 = load i32, i32* %16, align 8, !tbaa !37
  %18 = add i32 %17, 1
  br label %19

19:                                               ; preds = %11, %2
  %20 = phi i32 [ %18, %11 ], [ %7, %2 ]
  %21 = phi i32 [ %17, %11 ], [ %6, %2 ]
  %22 = phi %struct.BF_BitstreamPart* [ %15, %11 ], [ %4, %2 ]
  %23 = phi %struct.BF_PartHolder* [ %13, %11 ], [ %0, %2 ]
  %24 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %22, i64 0, i32 1
  %25 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %24, align 8, !tbaa !42
  %26 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %22, i64 0, i32 0
  store i32 %20, i32* %26, align 8, !tbaa !37
  %27 = zext i32 %21 to i64
  %28 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %25, i64 %27
  %29 = bitcast %struct.BF_BitstreamElement* %1 to i64*
  %30 = bitcast %struct.BF_BitstreamElement* %28 to i64*
  %31 = load i64, i64* %29, align 4
  store i64 %31, i64* %30, align 4
  ret %struct.BF_PartHolder* %23
}

; Function Attrs: nounwind uwtable
define dso_local noalias %struct.BF_PartHolder* @BF_freePartHolder(%struct.BF_PartHolder* nocapture %0) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %0, i64 0, i32 1
  %3 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %2, align 8, !tbaa !41
  %4 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %3, i64 0, i32 1
  %5 = bitcast %struct.BF_BitstreamElement** %4 to i8**
  %6 = load i8*, i8** %5, align 8, !tbaa !42
  tail call void @free(i8* %6) #21
  %7 = bitcast %struct.BF_BitstreamPart** %2 to i8**
  %8 = load i8*, i8** %7, align 8, !tbaa !41
  tail call void @free(i8* %8) #21
  %9 = bitcast %struct.BF_PartHolder* %0 to i8*
  tail call void @free(i8* %9) #21
  ret %struct.BF_PartHolder* null
}

; Function Attrs: nounwind uwtable
define dso_local %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = icmp eq i32 %2, 0
  br i1 %4, label %38, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %0, i64 0, i32 1
  %7 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %6, align 8, !tbaa !41
  %8 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %7, i64 0, i32 0
  %9 = load i32, i32* %8, align 8, !tbaa !37
  %10 = add i32 %9, 1
  %11 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %0, i64 0, i32 0
  %12 = load i32, i32* %11, align 8, !tbaa !39
  %13 = icmp sgt i32 %10, %12
  br i1 %13, label %14, label %22

14:                                               ; preds = %5
  %15 = add i32 %9, 9
  %16 = tail call %struct.BF_PartHolder* @BF_resizePartHolder(%struct.BF_PartHolder* nonnull %0, i32 %15) #21
  %17 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %16, i64 0, i32 1
  %18 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %17, align 8, !tbaa !41
  %19 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %18, i64 0, i32 0
  %20 = load i32, i32* %19, align 8, !tbaa !37
  %21 = add i32 %20, 1
  br label %22

22:                                               ; preds = %14, %5
  %23 = phi i32 [ %21, %14 ], [ %10, %5 ]
  %24 = phi i32 [ %20, %14 ], [ %9, %5 ]
  %25 = phi %struct.BF_BitstreamPart* [ %18, %14 ], [ %7, %5 ]
  %26 = phi %struct.BF_PartHolder* [ %16, %14 ], [ %0, %5 ]
  %27 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %25, i64 0, i32 1
  %28 = load %struct.BF_BitstreamElement*, %struct.BF_BitstreamElement** %27, align 8, !tbaa !42
  %29 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %25, i64 0, i32 0
  store i32 %23, i32* %29, align 8, !tbaa !37
  %30 = zext i32 %24 to i64
  %31 = getelementptr inbounds %struct.BF_BitstreamElement, %struct.BF_BitstreamElement* %28, i64 %30
  %32 = bitcast %struct.BF_BitstreamElement* %31 to i64*
  %33 = and i32 %2, 65535
  %34 = zext i32 %33 to i64
  %35 = shl nuw nsw i64 %34, 32
  %36 = zext i32 %1 to i64
  %37 = or i64 %35, %36
  store i64 %37, i64* %32, align 4
  br label %38

38:                                               ; preds = %22, %3
  %39 = phi %struct.BF_PartHolder* [ %26, %22 ], [ %0, %3 ]
  ret %struct.BF_PartHolder* %39
}

; Function Attrs: nounwind uwtable
define dso_local void @lame_init_infile(%struct.lame_global_flags* nocapture %0) local_unnamed_addr #0 {
  store i1 false, i1* @count_samples_carefully, align 4
  %2 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 31
  %3 = load i8*, i8** %2, align 8, !tbaa !83
  %4 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 4, !tbaa !85
  %6 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8, !tbaa !86
  %8 = tail call %struct._IO_FILE* @OpenSndFile(%struct.lame_global_flags* %0, i8* %3, i32 %5, i32 %7)
  %9 = load i32, i32* @samp_freq, align 4, !tbaa !18
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %12, label %11

11:                                               ; preds = %1
  store i32 %9, i32* %4, align 4, !tbaa !85
  br label %12

12:                                               ; preds = %11, %1
  %13 = load i32, i32* @num_channels, align 4, !tbaa !18
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %16, label %15

15:                                               ; preds = %12
  store i32 %13, i32* %6, align 8, !tbaa !86
  br label %16

16:                                               ; preds = %15, %12
  %17 = load i64, i64* @num_samples, align 8, !tbaa !19
  %18 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 0
  store i64 %17, i64* %18, align 8, !tbaa !87
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local %struct._IO_FILE* @OpenSndFile(%struct.lame_global_flags* nocapture %0, i8* %1, i32 %2, i32 %3) local_unnamed_addr #0 {
  %5 = alloca %struct.stat, align 8
  %6 = bitcast %struct.stat* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %6) #21
  store i64 4294967295, i64* @num_samples, align 8, !tbaa !19
  store i32 %2, i32* @samp_freq, align 4, !tbaa !18
  store i32 %3, i32* @num_channels, align 4, !tbaa !18
  %7 = tail call i32 @strcmp(i8* nonnull dereferenceable(1) %1, i8* nonnull dereferenceable(2) getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1.27, i64 0, i64 0)) #23
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %4
  %10 = load i64, i64* bitcast (%struct._IO_FILE** @stdin to i64*), align 8, !tbaa !7
  store i64 %10, i64* bitcast (%struct._IO_FILE** @musicin to i64*), align 8, !tbaa !7
  %11 = inttoptr i64 %10 to %struct._IO_FILE*
  br label %18

12:                                               ; preds = %4
  %13 = tail call %struct._IO_FILE* @fopen(i8* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.28, i64 0, i64 0))
  store %struct._IO_FILE* %13, %struct._IO_FILE** @musicin, align 8, !tbaa !7
  %14 = icmp eq %struct._IO_FILE* %13, null
  br i1 %14, label %15, label %18

15:                                               ; preds = %12
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %17 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %16, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3.29, i64 0, i64 0), i8* %1) #19
  tail call void @exit(i32 1) #20
  unreachable

18:                                               ; preds = %12, %9
  %19 = phi %struct._IO_FILE* [ %13, %12 ], [ %11, %9 ]
  store i32 0, i32* @input_bitrate, align 4, !tbaa !18
  %20 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 29
  %21 = load i32, i32* %20, align 8, !tbaa !88
  switch i32 %21, label %28 [
    i32 3, label %22
    i32 4, label %31
  ]

22:                                               ; preds = %18
  %23 = tail call i32 @lame_decode_initfile(%struct._IO_FILE* %19, i32* nonnull @num_channels, i32* nonnull @samp_freq, i32* nonnull @input_bitrate, i64* nonnull @num_samples) #21
  %24 = icmp eq i32 %23, -1
  br i1 %24, label %25, label %42

25:                                               ; preds = %22
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %27 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %26, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.4.30, i64 0, i64 0), i8* %1) #19
  tail call void @exit(i32 1) #20
  unreachable

28:                                               ; preds = %18
  tail call void @parse_file_header(%struct.lame_global_flags* nonnull %0, %struct._IO_FILE* %19)
  %29 = load i32, i32* %20, align 8, !tbaa !88
  %30 = icmp eq i32 %29, 4
  br i1 %30, label %31, label %42

31:                                               ; preds = %28, %18
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %33 = tail call i64 @fwrite(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.5.31, i64 0, i64 0), i64 27, i64 1, %struct._IO_FILE* %32) #19
  %34 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 30
  %35 = load i32, i32* %34, align 4, !tbaa !89
  %36 = icmp eq i32 %35, 1
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  br i1 %36, label %38, label %40

38:                                               ; preds = %31
  %39 = tail call i64 @fwrite(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.6.32, i64 0, i64 0), i64 25, i64 1, %struct._IO_FILE* %37) #19
  br label %42

40:                                               ; preds = %31
  %41 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %37) #19
  br label %42

42:                                               ; preds = %40, %38, %28, %22
  %43 = load i64, i64* @num_samples, align 8, !tbaa !19
  %44 = icmp eq i64 %43, 4294967295
  br i1 %44, label %45, label %74

45:                                               ; preds = %42
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @musicin, align 8, !tbaa !7
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !tbaa !7
  %48 = icmp eq %struct._IO_FILE* %46, %47
  br i1 %48, label %74, label %49

49:                                               ; preds = %45
  %50 = call i32 @__xstat(i32 1, i8* nonnull %1, %struct.stat* nonnull %5) #21
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %52, label %74

52:                                               ; preds = %49
  %53 = load i32, i32* %20, align 8, !tbaa !88
  %54 = icmp eq i32 %53, 3
  %55 = getelementptr inbounds %struct.stat, %struct.stat* %5, i64 0, i32 8
  %56 = load i64, i64* %55, align 8, !tbaa !90
  br i1 %54, label %57, label %69

57:                                               ; preds = %52
  %58 = sitofp i64 %56 to double
  %59 = fmul double %58, 8.000000e+00
  %60 = load i32, i32* @input_bitrate, align 4, !tbaa !18
  %61 = sitofp i32 %60 to double
  %62 = fmul double %61, 1.000000e+03
  %63 = fdiv double %59, %62
  %64 = fptrunc double %63 to float
  %65 = load i32, i32* @samp_freq, align 4, !tbaa !18
  %66 = sitofp i32 %65 to float
  %67 = fmul float %66, %64
  %68 = fptoui float %67 to i64
  store i64 %68, i64* @num_samples, align 8, !tbaa !19
  br label %74

69:                                               ; preds = %52
  %70 = load i32, i32* @num_channels, align 4, !tbaa !18
  %71 = shl nsw i32 %70, 1
  %72 = sext i32 %71 to i64
  %73 = sdiv i64 %56, %72
  store i64 %73, i64* @num_samples, align 8, !tbaa !19
  br label %74

74:                                               ; preds = %69, %57, %49, %45, %42
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** @musicin, align 8, !tbaa !7
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %6) #21
  ret %struct._IO_FILE* %75
}

; Function Attrs: nofree nounwind readonly
declare dso_local i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #11

; Function Attrs: nofree nounwind
declare dso_local noalias %struct._IO_FILE* @fopen(i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #4

; Function Attrs: nounwind uwtable
define dso_local void @parse_file_header(%struct.lame_global_flags* nocapture %0, %struct._IO_FILE* %1) local_unnamed_addr #0 {
  %3 = alloca [1024 x i8], align 16
  %4 = tail call i32 @Read32BitsHighLow(%struct._IO_FILE* %1) #21
  store i1 false, i1* @count_samples_carefully, align 4
  %5 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 29
  store i32 4, i32* %5, align 8, !tbaa !88
  switch i32 %4, label %191 [
    i32 1380533830, label %6
    i32 1179603533, label %81
  ]

6:                                                ; preds = %2
  %7 = tail call i32 @Read32BitsHighLow(%struct._IO_FILE* %1) #21
  %8 = tail call i32 @Read32BitsHighLow(%struct._IO_FILE* %1) #21
  %9 = icmp eq i32 %8, 1463899717
  br i1 %9, label %10, label %188

10:                                               ; preds = %6
  %11 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  br label %12

12:                                               ; preds = %63, %10
  %13 = phi i32 [ 0, %10 ], [ %67, %63 ]
  %14 = phi i16 [ 0, %10 ], [ %66, %63 ]
  %15 = phi i64 [ 0, %10 ], [ %65, %63 ]
  %16 = phi i16 [ 0, %10 ], [ %64, %63 ]
  %17 = tail call i32 @Read32BitsHighLow(%struct._IO_FILE* %1) #21
  %18 = icmp eq i32 %17, 1718449184
  br i1 %18, label %19, label %46

19:                                               ; preds = %12
  %20 = tail call i32 @Read32Bits(%struct._IO_FILE* %1) #21
  %21 = icmp slt i32 %20, 16
  br i1 %21, label %188, label %22

22:                                               ; preds = %19
  %23 = tail call i32 @Read16BitsLowHigh(%struct._IO_FILE* %1) #21
  %24 = tail call i32 @Read16BitsLowHigh(%struct._IO_FILE* %1) #21
  %25 = trunc i32 %24 to i16
  %26 = tail call i32 @Read32Bits(%struct._IO_FILE* %1) #21
  %27 = sext i32 %26 to i64
  %28 = tail call i32 @Read32Bits(%struct._IO_FILE* %1) #21
  %29 = tail call i32 @Read16BitsLowHigh(%struct._IO_FILE* %1) #21
  %30 = tail call i32 @Read16BitsLowHigh(%struct._IO_FILE* %1) #21
  %31 = trunc i32 %30 to i16
  %32 = icmp eq i32 %20, 16
  br i1 %32, label %63, label %33

33:                                               ; preds = %22
  %34 = zext i32 %20 to i64
  %35 = add nsw i64 %34, -16
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %11) #21
  br label %36

36:                                               ; preds = %36, %33
  %37 = phi i64 [ %41, %36 ], [ %35, %33 ]
  %38 = icmp slt i64 %37, 1024
  %39 = select i1 %38, i64 %37, i64 1024
  %40 = call i64 @fread(i8* nonnull %11, i64 1, i64 %39, %struct._IO_FILE* %1) #21
  %41 = sub i64 %37, %40
  %42 = icmp sgt i64 %41, 0
  br i1 %42, label %36, label %43

43:                                               ; preds = %36
  %44 = trunc i64 %41 to i32
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %11) #21
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %63, label %188

46:                                               ; preds = %12
  %47 = icmp eq i32 %17, 1684108385
  %48 = tail call i32 @Read32Bits(%struct._IO_FILE* %1) #21
  %49 = sext i32 %48 to i64
  br i1 %47, label %69, label %50

50:                                               ; preds = %46
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %11) #21
  %51 = icmp sgt i32 %48, 0
  br i1 %51, label %52, label %59

52:                                               ; preds = %52, %50
  %53 = phi i64 [ %57, %52 ], [ %49, %50 ]
  %54 = icmp slt i64 %53, 1024
  %55 = select i1 %54, i64 %53, i64 1024
  %56 = call i64 @fread(i8* nonnull %11, i64 1, i64 %55, %struct._IO_FILE* %1) #21
  %57 = sub i64 %53, %56
  %58 = icmp sgt i64 %57, 0
  br i1 %58, label %52, label %59

59:                                               ; preds = %52, %50
  %60 = phi i64 [ %49, %50 ], [ %57, %52 ]
  %61 = trunc i64 %60 to i32
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %11) #21
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %188

63:                                               ; preds = %59, %43, %22
  %64 = phi i16 [ %25, %22 ], [ %25, %43 ], [ %16, %59 ]
  %65 = phi i64 [ %27, %22 ], [ %27, %43 ], [ %15, %59 ]
  %66 = phi i16 [ %31, %22 ], [ %31, %43 ], [ %14, %59 ]
  %67 = add nuw nsw i32 %13, 1
  %68 = icmp eq i32 %67, 20
  br i1 %68, label %188, label %12

69:                                               ; preds = %46
  %70 = icmp eq i16 %14, 16
  br i1 %70, label %75, label %71

71:                                               ; preds = %69
  %72 = zext i16 %14 to i32
  %73 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %74 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %73, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.11.33, i64 0, i64 0), i32 %72) #22
  tail call void @exit(i32 1) #20
  unreachable

75:                                               ; preds = %69
  %76 = zext i16 %16 to i32
  store i32 %76, i32* @num_channels, align 4, !tbaa !18
  %77 = trunc i64 %15 to i32
  store i32 %77, i32* @samp_freq, align 4, !tbaa !18
  %78 = zext i16 %16 to i64
  %79 = shl nuw nsw i64 %78, 1
  %80 = sdiv i64 %49, %79
  store i64 %80, i64* @num_samples, align 8, !tbaa !19
  store i32 1, i32* %5, align 8, !tbaa !88
  store i1 true, i1* @count_samples_carefully, align 4
  br label %193

81:                                               ; preds = %2
  %82 = tail call i32 @Read32BitsHighLow(%struct._IO_FILE* %1) #21
  %83 = tail call i32 @Read32BitsHighLow(%struct._IO_FILE* %1) #21
  %84 = icmp eq i32 %83, 1095321158
  %85 = icmp sgt i32 %82, 0
  %86 = and i1 %85, %84
  br i1 %86, label %87, label %188

87:                                               ; preds = %81
  %88 = zext i32 %82 to i64
  %89 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  br label %90

90:                                               ; preds = %156, %87
  %91 = phi i64 [ %88, %87 ], [ %162, %156 ]
  %92 = phi float [ 0.000000e+00, %87 ], [ %160, %156 ]
  %93 = phi i16 [ 0, %87 ], [ %159, %156 ]
  %94 = phi i16 [ 0, %87 ], [ %158, %156 ]
  %95 = phi i64 [ 0, %87 ], [ %157, %156 ]
  %96 = add nsw i64 %91, -4
  %97 = tail call i32 @Read32BitsHighLow(%struct._IO_FILE* %1) #21
  %98 = icmp eq i32 %97, 1129270605
  br i1 %98, label %99, label %123

99:                                               ; preds = %90
  %100 = tail call i32 @Read32BitsHighLow(%struct._IO_FILE* %1) #21
  %101 = sext i32 %100 to i64
  %102 = tail call i32 @Read16BitsHighLow(%struct._IO_FILE* %1) #21
  %103 = trunc i32 %102 to i16
  %104 = tail call i32 @Read32BitsHighLow(%struct._IO_FILE* %1) #21
  %105 = sext i32 %104 to i64
  %106 = tail call i32 @Read16BitsHighLow(%struct._IO_FILE* %1) #21
  %107 = trunc i32 %106 to i16
  %108 = tail call double @ReadIeeeExtendedHighLow(%struct._IO_FILE* %1) #21
  %109 = fptrunc double %108 to float
  %110 = add nsw i64 %101, -18
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %89) #21
  %111 = icmp sgt i32 %100, 18
  br i1 %111, label %112, label %119

112:                                              ; preds = %112, %99
  %113 = phi i64 [ %117, %112 ], [ %110, %99 ]
  %114 = icmp slt i64 %113, 1024
  %115 = select i1 %114, i64 %113, i64 1024
  %116 = call i64 @fread(i8* nonnull %89, i64 1, i64 %115, %struct._IO_FILE* %1) #21
  %117 = sub i64 %113, %116
  %118 = icmp sgt i64 %117, 0
  br i1 %118, label %112, label %119

119:                                              ; preds = %112, %99
  %120 = phi i64 [ %110, %99 ], [ %117, %112 ]
  %121 = trunc i64 %120 to i32
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %89) #21
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %156, label %188

123:                                              ; preds = %90
  %124 = icmp eq i32 %97, 1397968452
  %125 = tail call i32 @Read32BitsHighLow(%struct._IO_FILE* %1) #21
  %126 = sext i32 %125 to i64
  br i1 %124, label %127, label %143

127:                                              ; preds = %123
  %128 = tail call i32 @Read32BitsHighLow(%struct._IO_FILE* %1) #21
  %129 = sext i32 %128 to i64
  %130 = tail call i32 @Read32BitsHighLow(%struct._IO_FILE* %1) #21
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %89) #21
  %131 = icmp sgt i32 %128, 0
  br i1 %131, label %132, label %139

132:                                              ; preds = %132, %127
  %133 = phi i64 [ %137, %132 ], [ %129, %127 ]
  %134 = icmp slt i64 %133, 1024
  %135 = select i1 %134, i64 %133, i64 1024
  %136 = call i64 @fread(i8* nonnull %89, i64 1, i64 %135, %struct._IO_FILE* %1) #21
  %137 = sub i64 %133, %136
  %138 = icmp sgt i64 %137, 0
  br i1 %138, label %132, label %139

139:                                              ; preds = %132, %127
  %140 = phi i64 [ %129, %127 ], [ %137, %132 ]
  %141 = trunc i64 %140 to i32
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %89) #21
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %164, label %188

143:                                              ; preds = %123
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %89) #21
  %144 = icmp sgt i32 %125, 0
  br i1 %144, label %145, label %152

145:                                              ; preds = %145, %143
  %146 = phi i64 [ %150, %145 ], [ %126, %143 ]
  %147 = icmp slt i64 %146, 1024
  %148 = select i1 %147, i64 %146, i64 1024
  %149 = call i64 @fread(i8* nonnull %89, i64 1, i64 %148, %struct._IO_FILE* %1) #21
  %150 = sub i64 %146, %149
  %151 = icmp sgt i64 %150, 0
  br i1 %151, label %145, label %152

152:                                              ; preds = %145, %143
  %153 = phi i64 [ %126, %143 ], [ %150, %145 ]
  %154 = trunc i64 %153 to i32
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %89) #21
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %156, label %188

156:                                              ; preds = %152, %119
  %157 = phi i64 [ %105, %119 ], [ %95, %152 ]
  %158 = phi i16 [ %107, %119 ], [ %94, %152 ]
  %159 = phi i16 [ %103, %119 ], [ %93, %152 ]
  %160 = phi float [ %109, %119 ], [ %92, %152 ]
  %161 = phi i64 [ %101, %119 ], [ %126, %152 ]
  %162 = sub i64 %96, %161
  %163 = icmp sgt i64 %162, 0
  br i1 %163, label %90, label %188

164:                                              ; preds = %139
  %165 = icmp eq i16 %94, 16
  br i1 %165, label %169, label %166

166:                                              ; preds = %164
  %167 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %168 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %167, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.13.34, i64 0, i64 0), i32 16, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10.35, i64 0, i64 0)) #22
  tail call void @exit(i32 1) #20
  unreachable

169:                                              ; preds = %164
  %170 = add i16 %93, -1
  %171 = icmp ult i16 %170, 2
  br i1 %171, label %175, label %172

172:                                              ; preds = %169
  %173 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %174 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %173, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.14.36, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10.35, i64 0, i64 0)) #22
  tail call void @exit(i32 1) #20
  unreachable

175:                                              ; preds = %169
  %176 = icmp eq i32 %130, 0
  br i1 %176, label %180, label %177

177:                                              ; preds = %175
  %178 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %179 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %178, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.15.37, i64 0, i64 0), i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10.35, i64 0, i64 0)) #22
  tail call void @exit(i32 1) #20
  unreachable

180:                                              ; preds = %175
  %181 = icmp eq i32 %128, 0
  br i1 %181, label %185, label %182

182:                                              ; preds = %180
  %183 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %184 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %183, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.16.38, i64 0, i64 0), i32 0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10.35, i64 0, i64 0)) #22
  tail call void @exit(i32 1) #20
  unreachable

185:                                              ; preds = %180
  %186 = zext i16 %93 to i32
  store i32 %186, i32* @num_channels, align 4, !tbaa !18
  %187 = fptosi float %92 to i32
  store i32 %187, i32* @samp_freq, align 4, !tbaa !18
  store i64 %95, i64* @num_samples, align 8, !tbaa !19
  store i32 2, i32* %5, align 8, !tbaa !88
  store i1 true, i1* @count_samples_carefully, align 4
  br label %193

188:                                              ; preds = %156, %152, %139, %119, %81, %63, %59, %43, %19, %6
  %189 = load i32, i32* %5, align 8, !tbaa !88
  %190 = icmp eq i32 %189, 4
  br i1 %190, label %191, label %193

191:                                              ; preds = %188, %2
  %192 = tail call i32 @fseek(%struct._IO_FILE* %1, i64 0, i32 0)
  store i32 4, i32* %5, align 8, !tbaa !88
  br label %193

193:                                              ; preds = %191, %188, %185, %75
  ret void
}

; Function Attrs: nofree nounwind
declare i32 @fputc(i32, %struct._IO_FILE* nocapture) local_unnamed_addr #1

; Function Attrs: nounwind
declare dso_local i32 @__xstat(i32, i8*, %struct.stat*) local_unnamed_addr #9

; Function Attrs: nofree nounwind
declare dso_local i64 @fread(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare dso_local i32 @fseek(%struct._IO_FILE* nocapture, i64, i32) local_unnamed_addr #4

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local i32 @GetSndSampleRate() local_unnamed_addr #10 {
  %1 = load i32, i32* @samp_freq, align 4, !tbaa !18
  ret i32 %1
}

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local i32 @GetSndChannels() local_unnamed_addr #10 {
  %1 = load i32, i32* @num_channels, align 4, !tbaa !18
  ret i32 %1
}

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local i64 @GetSndSamples() local_unnamed_addr #10 {
  %1 = load i64, i64* @num_samples, align 8, !tbaa !19
  ret i64 %1
}

; Function Attrs: nounwind uwtable
define dso_local void @lame_close_infile(%struct.lame_global_flags* nocapture readnone %0) local_unnamed_addr #0 {
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @musicin, align 8, !tbaa !7
  %3 = tail call i32 @fclose(%struct._IO_FILE* %2) #21
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %7 = tail call i64 @fwrite(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.39, i64 0, i64 0), i64 33, i64 1, %struct._IO_FILE* %6) #22
  tail call void @exit(i32 2) #20
  unreachable

8:                                                ; preds = %1
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local i32 @fclose(%struct._IO_FILE* nocapture) local_unnamed_addr #4

; Function Attrs: nounwind uwtable
define dso_local void @CloseSndFile(%struct.lame_global_flags* nocapture readnone %0) local_unnamed_addr #0 {
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @musicin, align 8, !tbaa !7
  %3 = tail call i32 @fclose(%struct._IO_FILE* %2)
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %7 = tail call i64 @fwrite(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.39, i64 0, i64 0), i64 33, i64 1, %struct._IO_FILE* %6) #19
  tail call void @exit(i32 2) #20
  unreachable

8:                                                ; preds = %1
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @lame_readframe(%struct.lame_global_flags* nocapture %0, [1152 x i16]* %1) local_unnamed_addr #0 {
  %3 = tail call i32 @get_audio(%struct.lame_global_flags* %0, [1152 x i16]* %1, i32 undef)
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %10, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 39
  %7 = load i64, i64* %6, align 8, !tbaa !93
  %8 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 40
  %9 = load i64, i64* %8, align 8, !tbaa !94
  br label %18

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 40
  %12 = load i64, i64* %11, align 8, !tbaa !94
  %13 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 39
  %14 = load i64, i64* %13, align 8, !tbaa !93
  %15 = add nsw i64 %14, 2
  %16 = icmp slt i64 %12, %15
  %17 = select i1 %16, i64 %12, i64 %15
  store i64 %17, i64* %11, align 8, !tbaa !94
  br label %18

18:                                               ; preds = %10, %5
  %19 = phi i64 [ %9, %5 ], [ %17, %10 ]
  %20 = phi i64 [ %7, %5 ], [ %14, %10 ]
  %21 = icmp slt i64 %20, %19
  br i1 %21, label %24, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 40
  store i64 %20, i64* %23, align 8, !tbaa !94
  br label %24

24:                                               ; preds = %22, %18
  ret i32 %3
}

; Function Attrs: nounwind uwtable
define dso_local i32 @get_audio(%struct.lame_global_flags* nocapture readonly %0, [1152 x i16]* %1, i32 %2) local_unnamed_addr #0 {
  %4 = alloca [2304 x i16], align 16
  %5 = bitcast [2304 x i16]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4608, i8* nonnull %5) #21
  %6 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8, !tbaa !86
  %8 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 39
  %9 = load i64, i64* %8, align 8, !tbaa !93
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %3
  store i64 0, i64* @get_audio.num_samples_read, align 8, !tbaa !19
  br label %12

12:                                               ; preds = %11, %3
  %13 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 45
  %14 = load i32, i32* %13, align 8, !tbaa !95
  %15 = mul nsw i32 %14, 576
  %16 = load i1, i1* @count_samples_carefully, align 4
  br i1 %16, label %17, label %25

17:                                               ; preds = %12
  %18 = load i64, i64* @num_samples, align 8, !tbaa !19
  %19 = load i64, i64* @get_audio.num_samples_read, align 8, !tbaa !19
  %20 = tail call i64 @llvm.usub.sat.i64(i64 %18, i64 %19)
  %21 = sext i32 %15 to i64
  %22 = icmp ult i64 %20, %21
  %23 = trunc i64 %20 to i32
  %24 = select i1 %22, i32 %23, i32 %15
  br label %25

25:                                               ; preds = %17, %12
  %26 = phi i32 [ %15, %12 ], [ %24, %17 ]
  %27 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 29
  %28 = load i32, i32* %27, align 8, !tbaa !88
  %29 = icmp eq i32 %28, 3
  br i1 %29, label %30, label %40

30:                                               ; preds = %25
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @musicin, align 8, !tbaa !7
  %32 = getelementptr inbounds [1152 x i16], [1152 x i16]* %1, i64 0, i64 0
  %33 = getelementptr [1152 x i16], [1152 x i16]* %1, i64 1, i64 0
  %34 = tail call i32 @lame_decode_fromfile(%struct._IO_FILE* %31, i16* %32, i16* nonnull %33) #21
  %35 = icmp eq i32 %34, -1
  br i1 %35, label %36, label %38

36:                                               ; preds = %30
  %37 = bitcast [1152 x i16]* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 2 dereferenceable(4608) %37, i8 0, i64 4608, i1 false) #21
  br label %38

38:                                               ; preds = %36, %30
  %39 = select i1 %35, i32 0, i32 %34
  br label %67

40:                                               ; preds = %25
  %41 = getelementptr inbounds [2304 x i16], [2304 x i16]* %4, i64 0, i64 0
  %42 = mul nsw i32 %15, %7
  %43 = mul nsw i32 %26, %7
  %44 = call i32 @read_samples_pcm(%struct.lame_global_flags* nonnull %0, i16* nonnull %41, i32 %42, i32 %43)
  %45 = sdiv i32 %44, %7
  %46 = icmp sgt i32 %14, 0
  br i1 %46, label %47, label %67

47:                                               ; preds = %40
  %48 = icmp eq i32 %7, 2
  %49 = sext i32 %7 to i64
  %50 = sext i32 %15 to i64
  br label %51

51:                                               ; preds = %62, %47
  %52 = phi i64 [ 0, %47 ], [ %65, %62 ]
  %53 = mul nsw i64 %52, %49
  %54 = getelementptr inbounds [2304 x i16], [2304 x i16]* %4, i64 0, i64 %53
  %55 = load i16, i16* %54, align 2, !tbaa !29
  %56 = getelementptr inbounds [1152 x i16], [1152 x i16]* %1, i64 0, i64 %52
  store i16 %55, i16* %56, align 2, !tbaa !29
  br i1 %48, label %57, label %62

57:                                               ; preds = %51
  %58 = shl nuw nsw i64 %52, 1
  %59 = or i64 %58, 1
  %60 = getelementptr inbounds [2304 x i16], [2304 x i16]* %4, i64 0, i64 %59
  %61 = load i16, i16* %60, align 2, !tbaa !29
  br label %62

62:                                               ; preds = %57, %51
  %63 = phi i16 [ %61, %57 ], [ 0, %51 ]
  %64 = getelementptr inbounds [1152 x i16], [1152 x i16]* %1, i64 1, i64 %52
  store i16 %63, i16* %64, align 2
  %65 = add nuw nsw i64 %52, 1
  %66 = icmp slt i64 %65, %50
  br i1 %66, label %51, label %67

67:                                               ; preds = %62, %40, %38
  %68 = phi i32 [ %39, %38 ], [ %45, %40 ], [ %45, %62 ]
  %69 = load i64, i64* @num_samples, align 8, !tbaa !19
  %70 = icmp eq i64 %69, 4294967295
  br i1 %70, label %75, label %71

71:                                               ; preds = %67
  %72 = sext i32 %68 to i64
  %73 = load i64, i64* @get_audio.num_samples_read, align 8, !tbaa !19
  %74 = add i64 %73, %72
  store i64 %74, i64* @get_audio.num_samples_read, align 8, !tbaa !19
  br label %75

75:                                               ; preds = %71, %67
  call void @llvm.lifetime.end.p0i8(i64 4608, i8* nonnull %5) #21
  ret i32 %68
}

; Function Attrs: nounwind readnone speculatable willreturn
declare i64 @llvm.usub.sat.i64(i64, i64) #12

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: nounwind uwtable
define dso_local i32 @read_samples_pcm(%struct.lame_global_flags* nocapture readonly %0, i16* %1, i32 %2, i32 %3) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 29
  %6 = load i32, i32* %5, align 8, !tbaa !88
  %7 = icmp eq i32 %6, 1
  %8 = bitcast i16* %1 to i8*
  %9 = sext i32 %3 to i64
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @musicin, align 8, !tbaa !7
  %11 = tail call i64 @fread(i8* %8, i64 2, i64 %9, %struct._IO_FILE* %10)
  %12 = trunc i64 %11 to i32
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @musicin, align 8, !tbaa !7
  %14 = tail call i32 @ferror(%struct._IO_FILE* %13) #21
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %19, label %16

16:                                               ; preds = %4
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %18 = tail call i64 @fwrite(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.8.40, i64 0, i64 0), i64 25, i64 1, %struct._IO_FILE* %17) #19
  tail call void @exit(i32 2) #20
  unreachable

19:                                               ; preds = %4
  %20 = load i32, i32* @NativeByteOrder, align 4, !tbaa !26
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %28

22:                                               ; preds = %19
  %23 = tail call i32 @DetermineByteOrder() #21
  store i32 %23, i32* @NativeByteOrder, align 4, !tbaa !26
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %22
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %27 = tail call i64 @fwrite(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9.41, i64 0, i64 0), i64 26, i64 1, %struct._IO_FILE* %26) #19
  tail call void @exit(i32 1) #20
  unreachable

28:                                               ; preds = %22, %19
  %29 = phi i32 [ %23, %22 ], [ %20, %19 ]
  %30 = xor i1 %7, true
  %31 = icmp eq i32 %29, 2
  %32 = and i1 %31, %30
  br i1 %32, label %33, label %35

33:                                               ; preds = %28
  tail call void @SwapBytesInWords(i16* %1, i32 %12) #21
  %34 = load i32, i32* @NativeByteOrder, align 4
  br label %35

35:                                               ; preds = %33, %28
  %36 = phi i32 [ %29, %28 ], [ %34, %33 ]
  %37 = icmp eq i32 %36, 1
  %38 = and i1 %7, %37
  br i1 %38, label %39, label %40

39:                                               ; preds = %35
  tail call void @SwapBytesInWords(i16* %1, i32 %12) #21
  br label %40

40:                                               ; preds = %39, %35
  %41 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 30
  %42 = load i32, i32* %41, align 4, !tbaa !89
  %43 = icmp eq i32 %42, 1
  br i1 %43, label %44, label %45

44:                                               ; preds = %40
  tail call void @SwapBytesInWords(i16* %1, i32 %12) #21
  br label %45

45:                                               ; preds = %44, %40
  %46 = icmp slt i32 %12, %2
  br i1 %46, label %47, label %60

47:                                               ; preds = %45
  %48 = icmp sgt i32 %12, 0
  %49 = select i1 %48, i32 %12, i32 0
  %50 = icmp slt i32 %49, %2
  br i1 %50, label %51, label %60

51:                                               ; preds = %47
  %52 = zext i32 %49 to i64
  %53 = getelementptr i16, i16* %1, i64 %52
  %54 = bitcast i16* %53 to i8*
  %55 = xor i32 %49, -1
  %56 = add i32 %55, %2
  %57 = zext i32 %56 to i64
  %58 = shl nuw nsw i64 %57, 1
  %59 = add nuw nsw i64 %58, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 2 dereferenceable(1) %54, i8 0, i64 %59, i1 false)
  br label %60

60:                                               ; preds = %51, %47, %45
  ret i32 %12
}

; Function Attrs: nofree nounwind readonly
declare dso_local i32 @ferror(%struct._IO_FILE* nocapture) local_unnamed_addr #11

; Function Attrs: nounwind uwtable
define dso_local i32 @read_samples_mp3(%struct.lame_global_flags* nocapture readnone %0, %struct._IO_FILE* %1, [1152 x i16]* %2, i32 %3) local_unnamed_addr #0 {
  %5 = getelementptr inbounds [1152 x i16], [1152 x i16]* %2, i64 0, i64 0
  %6 = getelementptr [1152 x i16], [1152 x i16]* %2, i64 1, i64 0
  %7 = tail call i32 @lame_decode_fromfile(%struct._IO_FILE* %1, i16* %5, i16* nonnull %6) #21
  %8 = icmp eq i32 %7, -1
  br i1 %8, label %9, label %11

9:                                                ; preds = %4
  %10 = bitcast [1152 x i16]* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 2 dereferenceable(4608) %10, i8 0, i64 4608, i1 false)
  br label %11

11:                                               ; preds = %9, %4
  %12 = select i1 %8, i32 0, i32 %7
  ret i32 %12
}

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local i32 @GetSndBitrate() local_unnamed_addr #10 {
  %1 = load i32, i32* @input_bitrate, align 4, !tbaa !18
  ret i32 %1
}

; Function Attrs: nounwind uwtable
define dso_local i32 @fskip(%struct._IO_FILE* nocapture %0, i64 %1, i32 %2) local_unnamed_addr #0 {
  %4 = alloca [1024 x i8], align 16
  %5 = getelementptr inbounds [1024 x i8], [1024 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %5) #21
  %6 = icmp sgt i64 %1, 0
  br i1 %6, label %7, label %14

7:                                                ; preds = %7, %3
  %8 = phi i64 [ %12, %7 ], [ %1, %3 ]
  %9 = icmp slt i64 %8, 1024
  %10 = select i1 %9, i64 %8, i64 1024
  %11 = call i64 @fread(i8* nonnull %5, i64 1, i64 %10, %struct._IO_FILE* %0)
  %12 = sub i64 %8, %11
  %13 = icmp sgt i64 %12, 0
  br i1 %13, label %7, label %14

14:                                               ; preds = %7, %3
  %15 = phi i64 [ %1, %3 ], [ %12, %7 ]
  %16 = trunc i64 %15 to i32
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %5) #21
  ret i32 %16
}

; Function Attrs: nofree norecurse nounwind uwtable writeonly
define dso_local void @id3_inittag(%struct.ID3TAGDATA* nocapture %0) local_unnamed_addr #8 {
  %2 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %0, i64 0, i32 2, i64 0
  store i8 0, i8* %2, align 1
  %3 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %0, i64 0, i32 3, i64 0
  store i8 0, i8* %3, align 1
  %4 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %0, i64 0, i32 4, i64 0
  store i8 0, i8* %4, align 1
  %5 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %0, i64 0, i32 5, i64 0
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %0, i64 0, i32 6, i64 0
  store i8 0, i8* %6, align 1
  %7 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %0, i64 0, i32 8, i64 0
  store i8 -1, i8* %7, align 1, !tbaa !26
  %8 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %0, i64 0, i32 9
  store i8 0, i8* %8, align 2, !tbaa !96
  %9 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %0, i64 0, i32 1
  store i32 0, i32* %9, align 4, !tbaa !98
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @id3_buildtag(%struct.ID3TAGDATA* %0) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %0, i64 0, i32 7, i64 0
  %3 = bitcast i8* %2 to i32*
  store i32 4669780, i32* %3, align 1
  %4 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %0, i64 0, i32 2, i64 0
  %5 = tail call i64 @strlen(i8* nonnull dereferenceable(1) %4) #23
  %6 = trunc i64 %5 to i32
  %7 = icmp slt i32 %6, 30
  %8 = shl i64 %5, 32
  %9 = ashr exact i64 %8, 32
  %10 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %0, i64 0, i32 2, i64 %9
  br i1 %7, label %11, label %16

11:                                               ; preds = %1
  %12 = sub i64 29, %5
  %13 = and i64 %12, 4294967295
  %14 = add nuw nsw i64 %13, 1
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(1) %10, i8 32, i64 %14, i1 false) #21
  %15 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %0, i64 0, i32 2, i64 30
  br label %16

16:                                               ; preds = %11, %1
  %17 = phi i8* [ %10, %1 ], [ %15, %11 ]
  store i8 0, i8* %17, align 1, !tbaa !26
  %18 = tail call i8* @strncat(i8* nonnull %2, i8* nonnull %4, i64 30) #21
  %19 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %0, i64 0, i32 3, i64 0
  %20 = tail call i64 @strlen(i8* nonnull dereferenceable(1) %19) #23
  %21 = trunc i64 %20 to i32
  %22 = icmp slt i32 %21, 30
  %23 = shl i64 %20, 32
  %24 = ashr exact i64 %23, 32
  %25 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %0, i64 0, i32 3, i64 %24
  br i1 %22, label %26, label %31

26:                                               ; preds = %16
  %27 = sub i64 29, %20
  %28 = and i64 %27, 4294967295
  %29 = add nuw nsw i64 %28, 1
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(1) %25, i8 32, i64 %29, i1 false) #21
  %30 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %0, i64 0, i32 3, i64 30
  br label %31

31:                                               ; preds = %26, %16
  %32 = phi i8* [ %25, %16 ], [ %30, %26 ]
  store i8 0, i8* %32, align 1, !tbaa !26
  %33 = tail call i8* @strncat(i8* nonnull %2, i8* nonnull %19, i64 30) #21
  %34 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %0, i64 0, i32 4, i64 0
  %35 = tail call i64 @strlen(i8* nonnull dereferenceable(1) %34) #23
  %36 = trunc i64 %35 to i32
  %37 = icmp slt i32 %36, 30
  %38 = shl i64 %35, 32
  %39 = ashr exact i64 %38, 32
  %40 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %0, i64 0, i32 4, i64 %39
  br i1 %37, label %41, label %46

41:                                               ; preds = %31
  %42 = sub i64 29, %35
  %43 = and i64 %42, 4294967295
  %44 = add nuw nsw i64 %43, 1
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(1) %40, i8 32, i64 %44, i1 false) #21
  %45 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %0, i64 0, i32 4, i64 30
  br label %46

46:                                               ; preds = %41, %31
  %47 = phi i8* [ %40, %31 ], [ %45, %41 ]
  store i8 0, i8* %47, align 1, !tbaa !26
  %48 = tail call i8* @strncat(i8* nonnull %2, i8* nonnull %34, i64 30) #21
  %49 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %0, i64 0, i32 5, i64 0
  %50 = tail call i64 @strlen(i8* nonnull dereferenceable(1) %49) #23
  %51 = trunc i64 %50 to i32
  %52 = icmp slt i32 %51, 4
  %53 = shl i64 %50, 32
  %54 = ashr exact i64 %53, 32
  %55 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %0, i64 0, i32 5, i64 %54
  br i1 %52, label %56, label %61

56:                                               ; preds = %46
  %57 = sub i64 3, %50
  %58 = and i64 %57, 4294967295
  %59 = add nuw nsw i64 %58, 1
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(1) %55, i8 32, i64 %59, i1 false) #21
  %60 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %0, i64 0, i32 5, i64 4
  br label %61

61:                                               ; preds = %56, %46
  %62 = phi i8* [ %55, %46 ], [ %60, %56 ]
  store i8 0, i8* %62, align 1, !tbaa !26
  %63 = tail call i8* @strncat(i8* nonnull %2, i8* nonnull %49, i64 4) #21
  %64 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %0, i64 0, i32 6, i64 0
  %65 = tail call i64 @strlen(i8* nonnull dereferenceable(1) %64) #23
  %66 = trunc i64 %65 to i32
  %67 = icmp slt i32 %66, 30
  %68 = shl i64 %65, 32
  %69 = ashr exact i64 %68, 32
  %70 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %0, i64 0, i32 6, i64 %69
  br i1 %67, label %71, label %76

71:                                               ; preds = %61
  %72 = sub i64 29, %65
  %73 = and i64 %72, 4294967295
  %74 = add nuw nsw i64 %73, 1
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(1) %70, i8 32, i64 %74, i1 false) #21
  %75 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %0, i64 0, i32 6, i64 30
  br label %76

76:                                               ; preds = %71, %61
  %77 = phi i8* [ %70, %61 ], [ %75, %71 ]
  store i8 0, i8* %77, align 1, !tbaa !26
  %78 = tail call i8* @strncat(i8* nonnull %2, i8* nonnull %64, i64 30) #21
  %79 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %0, i64 0, i32 8, i64 0
  %80 = tail call i64 @strlen(i8* nonnull dereferenceable(1) %79) #23
  %81 = trunc i64 %80 to i32
  %82 = icmp slt i32 %81, 1
  %83 = shl i64 %80, 32
  %84 = ashr exact i64 %83, 32
  %85 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %0, i64 0, i32 8, i64 %84
  br i1 %82, label %86, label %91

86:                                               ; preds = %76
  %87 = sub i64 0, %80
  %88 = and i64 %87, 4294967295
  %89 = add nuw nsw i64 %88, 1
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(1) %85, i8 32, i64 %89, i1 false) #21
  %90 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %0, i64 0, i32 8, i64 1
  br label %91

91:                                               ; preds = %86, %76
  %92 = phi i8* [ %85, %76 ], [ %90, %86 ]
  store i8 0, i8* %92, align 1, !tbaa !26
  %93 = tail call i8* @strncat(i8* nonnull %2, i8* nonnull %79, i64 1) #21
  %94 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %0, i64 0, i32 9
  %95 = load i8, i8* %94, align 2, !tbaa !96
  %96 = icmp eq i8 %95, 0
  br i1 %96, label %100, label %97

97:                                               ; preds = %91
  %98 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %0, i64 0, i32 7, i64 125
  store i8 0, i8* %98, align 1, !tbaa !26
  %99 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %0, i64 0, i32 7, i64 126
  store i8 %95, i8* %99, align 1, !tbaa !26
  br label %100

100:                                              ; preds = %97, %91
  %101 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %0, i64 0, i32 1
  store i32 1, i32* %101, align 4, !tbaa !98
  ret void
}

; Function Attrs: argmemonly nofree nounwind readonly
declare dso_local i64 @strlen(i8* nocapture) local_unnamed_addr #13

; Function Attrs: nofree nounwind
declare dso_local i8* @strncat(i8* returned, i8* nocapture readonly, i64) local_unnamed_addr #4

; Function Attrs: nofree nounwind uwtable
define dso_local i32 @id3_writetag(i8* nocapture readonly %0, %struct.ID3TAGDATA* nocapture %1) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %1, i64 0, i32 1
  %4 = load i32, i32* %3, align 4, !tbaa !98
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %14, label %6

6:                                                ; preds = %2
  %7 = tail call %struct._IO_FILE* @fopen(i8* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.67, i64 0, i64 0))
  %8 = icmp eq %struct._IO_FILE* %7, null
  br i1 %8, label %14, label %9

9:                                                ; preds = %6
  %10 = tail call i32 @fseek(%struct._IO_FILE* nonnull %7, i64 0, i32 2)
  %11 = getelementptr inbounds %struct.ID3TAGDATA, %struct.ID3TAGDATA* %1, i64 0, i32 7, i64 0
  %12 = tail call i64 @fwrite_unlocked(i8* nonnull %11, i64 1, i64 128, %struct._IO_FILE* nonnull %7)
  %13 = tail call i32 @fclose(%struct._IO_FILE* nonnull %7)
  br label %14

14:                                               ; preds = %9, %6, %2
  %15 = phi i32 [ 0, %9 ], [ -1, %2 ], [ -1, %6 ]
  ret i32 %15
}

; Function Attrs: nofree nounwind
declare i64 @fwrite_unlocked(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) local_unnamed_addr #1

; Function Attrs: nofree nounwind uwtable
define dso_local double @ConvertFromIeeeSingle(i8* nocapture readonly %0) local_unnamed_addr #3 {
  %2 = load i8, i8* %0, align 1, !tbaa !26
  %3 = zext i8 %2 to i64
  %4 = shl nuw nsw i64 %3, 24
  %5 = getelementptr inbounds i8, i8* %0, i64 1
  %6 = load i8, i8* %5, align 1, !tbaa !26
  %7 = zext i8 %6 to i64
  %8 = shl nuw nsw i64 %7, 16
  %9 = or i64 %8, %4
  %10 = getelementptr inbounds i8, i8* %0, i64 2
  %11 = load i8, i8* %10, align 1, !tbaa !26
  %12 = zext i8 %11 to i64
  %13 = shl nuw nsw i64 %12, 8
  %14 = or i64 %9, %13
  %15 = getelementptr inbounds i8, i8* %0, i64 3
  %16 = load i8, i8* %15, align 1, !tbaa !26
  %17 = zext i8 %16 to i64
  %18 = or i64 %14, %17
  %19 = and i64 %18, 2147483647
  %20 = icmp eq i64 %19, 0
  br i1 %20, label %37, label %21

21:                                               ; preds = %1
  %22 = lshr i64 %9, 23
  %23 = and i64 %22, 255
  %24 = icmp eq i64 %23, 255
  br i1 %24, label %37, label %25

25:                                               ; preds = %21
  %26 = icmp eq i64 %23, 0
  %27 = and i64 %18, 8388607
  br i1 %26, label %28, label %31

28:                                               ; preds = %25
  %29 = sitofp i64 %27 to double
  %30 = tail call double @ldexp(double %29, i32 -149) #21
  br label %37

31:                                               ; preds = %25
  %32 = or i64 %27, 8388608
  %33 = sitofp i64 %32 to double
  %34 = trunc i64 %23 to i32
  %35 = add nsw i32 %34, -150
  %36 = tail call double @ldexp(double %33, i32 %35) #21
  br label %37

37:                                               ; preds = %31, %28, %21, %1
  %38 = phi double [ %30, %28 ], [ %36, %31 ], [ 0.000000e+00, %1 ], [ 0x7FF0000000000000, %21 ]
  ret double %38
}

; Function Attrs: nofree nounwind
declare dso_local double @ldexp(double, i32) local_unnamed_addr #4

; Function Attrs: nounwind uwtable
define dso_local void @ConvertToIeeeSingle(double %0, i8* nocapture %1) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = fcmp olt double %0, 0.000000e+00
  %5 = fsub double -0.000000e+00, %0
  %6 = select i1 %4, i64 -9223372036854775808, i64 0
  %7 = select i1 %4, double %5, double %0
  %8 = fcmp oeq double %7, 0.000000e+00
  br i1 %8, label %42, label %9

9:                                                ; preds = %2
  %10 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #21
  %11 = call double @frexp(double %7, i32* nonnull %3) #21
  %12 = load i32, i32* %3, align 4, !tbaa !18
  %13 = icmp slt i32 %12, 130
  %14 = fcmp olt double %11, 1.000000e+00
  %15 = and i1 %14, %13
  br i1 %15, label %18, label %16

16:                                               ; preds = %9
  %17 = or i64 %6, 2139095040
  br label %40

18:                                               ; preds = %9
  %19 = icmp slt i32 %12, -125
  br i1 %19, label %20, label %30

20:                                               ; preds = %18
  %21 = icmp slt i32 %12, -149
  br i1 %21, label %40, label %22

22:                                               ; preds = %20
  %23 = add nsw i32 %12, 149
  %24 = zext i32 %23 to i64
  %25 = shl nuw nsw i64 1, %24
  %26 = sitofp i64 %25 to double
  %27 = fmul double %11, %26
  %28 = fptosi double %27 to i64
  %29 = or i64 %6, %28
  br label %40

30:                                               ; preds = %18
  %31 = fmul double %11, 0x4170000000000000
  %32 = tail call double @llvm.floor.f64(double %31)
  %33 = fptosi double %32 to i64
  %34 = add nsw i64 %33, -8388608
  %35 = add nsw i32 %12, 126
  %36 = sext i32 %35 to i64
  %37 = shl nuw nsw i64 %36, 23
  %38 = or i64 %37, %6
  %39 = or i64 %38, %34
  br label %40

40:                                               ; preds = %30, %22, %20, %16
  %41 = phi i64 [ %17, %16 ], [ %39, %30 ], [ %29, %22 ], [ %6, %20 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #21
  br label %42

42:                                               ; preds = %40, %2
  %43 = phi i64 [ %41, %40 ], [ 0, %2 ]
  %44 = lshr i64 %43, 24
  %45 = trunc i64 %44 to i8
  store i8 %45, i8* %1, align 1, !tbaa !26
  %46 = lshr i64 %43, 16
  %47 = trunc i64 %46 to i8
  %48 = getelementptr inbounds i8, i8* %1, i64 1
  store i8 %47, i8* %48, align 1, !tbaa !26
  %49 = lshr i64 %43, 8
  %50 = trunc i64 %49 to i8
  %51 = getelementptr inbounds i8, i8* %1, i64 2
  store i8 %50, i8* %51, align 1, !tbaa !26
  %52 = trunc i64 %43 to i8
  %53 = getelementptr inbounds i8, i8* %1, i64 3
  store i8 %52, i8* %53, align 1, !tbaa !26
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local double @frexp(double, i32* nocapture) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.floor.f64(double) #12

; Function Attrs: nofree nounwind uwtable
define dso_local double @ConvertFromIeeeDouble(i8* nocapture readonly %0) local_unnamed_addr #3 {
  %2 = load i8, i8* %0, align 1, !tbaa !26
  %3 = zext i8 %2 to i64
  %4 = shl nuw nsw i64 %3, 24
  %5 = getelementptr inbounds i8, i8* %0, i64 1
  %6 = load i8, i8* %5, align 1, !tbaa !26
  %7 = zext i8 %6 to i64
  %8 = shl nuw nsw i64 %7, 16
  %9 = or i64 %8, %4
  %10 = getelementptr inbounds i8, i8* %0, i64 2
  %11 = load i8, i8* %10, align 1, !tbaa !26
  %12 = zext i8 %11 to i64
  %13 = shl nuw nsw i64 %12, 8
  %14 = or i64 %9, %13
  %15 = getelementptr inbounds i8, i8* %0, i64 3
  %16 = load i8, i8* %15, align 1, !tbaa !26
  %17 = zext i8 %16 to i64
  %18 = or i64 %14, %17
  %19 = getelementptr inbounds i8, i8* %0, i64 4
  %20 = load i8, i8* %19, align 1, !tbaa !26
  %21 = zext i8 %20 to i64
  %22 = shl nuw nsw i64 %21, 24
  %23 = getelementptr inbounds i8, i8* %0, i64 5
  %24 = load i8, i8* %23, align 1, !tbaa !26
  %25 = zext i8 %24 to i64
  %26 = shl nuw nsw i64 %25, 16
  %27 = or i64 %26, %22
  %28 = getelementptr inbounds i8, i8* %0, i64 6
  %29 = load i8, i8* %28, align 1, !tbaa !26
  %30 = zext i8 %29 to i64
  %31 = shl nuw nsw i64 %30, 8
  %32 = or i64 %27, %31
  %33 = getelementptr inbounds i8, i8* %0, i64 7
  %34 = load i8, i8* %33, align 1, !tbaa !26
  %35 = zext i8 %34 to i64
  %36 = or i64 %32, %35
  %37 = or i64 %36, %18
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %66, label %39

39:                                               ; preds = %1
  %40 = lshr i64 %9, 20
  %41 = and i64 %40, 2047
  %42 = icmp eq i64 %41, 2047
  br i1 %42, label %66, label %43

43:                                               ; preds = %39
  %44 = icmp eq i64 %41, 0
  %45 = and i64 %18, 1048575
  br i1 %44, label %46, label %54

46:                                               ; preds = %43
  %47 = sitofp i64 %45 to double
  %48 = tail call double @ldexp(double %47, i32 -1042) #21
  %49 = add nsw i64 %36, -2147483648
  %50 = sitofp i64 %49 to double
  %51 = fadd double %50, 0x41E0000000000000
  %52 = tail call double @ldexp(double %51, i32 -1074) #21
  %53 = fadd double %48, %52
  br label %66

54:                                               ; preds = %43
  %55 = or i64 %45, 1048576
  %56 = sitofp i64 %55 to double
  %57 = trunc i64 %41 to i32
  %58 = add nsw i32 %57, -1043
  %59 = tail call double @ldexp(double %56, i32 %58) #21
  %60 = add nsw i64 %36, -2147483648
  %61 = sitofp i64 %60 to double
  %62 = fadd double %61, 0x41E0000000000000
  %63 = add nsw i32 %57, -1075
  %64 = tail call double @ldexp(double %62, i32 %63) #21
  %65 = fadd double %59, %64
  br label %66

66:                                               ; preds = %54, %46, %39, %1
  %67 = phi double [ %53, %46 ], [ %65, %54 ], [ 0.000000e+00, %1 ], [ 0x7FF0000000000000, %39 ]
  %68 = icmp slt i8 %2, 0
  %69 = fneg double %67
  %70 = select i1 %68, double %69, double %67
  ret double %70
}

; Function Attrs: nounwind uwtable
define dso_local void @ConvertToIeeeDouble(double %0, i8* nocapture %1) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = fcmp olt double %0, 0.000000e+00
  %5 = fsub double -0.000000e+00, %0
  %6 = select i1 %4, i64 -9223372036854775808, i64 0
  %7 = select i1 %4, double %5, double %0
  %8 = fcmp oeq double %7, 0.000000e+00
  br i1 %8, label %65, label %9

9:                                                ; preds = %2
  %10 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #21
  %11 = call double @frexp(double %7, i32* nonnull %3) #21
  %12 = load i32, i32* %3, align 4, !tbaa !18
  %13 = icmp slt i32 %12, 1026
  %14 = fcmp olt double %11, 1.000000e+00
  %15 = and i1 %14, %13
  br i1 %15, label %18, label %16

16:                                               ; preds = %9
  %17 = or i64 %6, 2146435072
  br label %62

18:                                               ; preds = %9
  %19 = icmp slt i32 %12, -1021
  br i1 %19, label %20, label %44

20:                                               ; preds = %18
  %21 = icmp slt i32 %12, -1042
  br i1 %21, label %22, label %31

22:                                               ; preds = %20
  %23 = icmp slt i32 %12, -1074
  br i1 %23, label %62, label %24

24:                                               ; preds = %22
  %25 = add nsw i32 %12, 1074
  %26 = tail call double @ldexp(double %11, i32 %25) #21
  %27 = tail call double @llvm.floor.f64(double %26)
  %28 = fadd double %27, 0xC1E0000000000000
  %29 = fptosi double %28 to i64
  %30 = add nsw i64 %29, 2147483648
  br label %62

31:                                               ; preds = %20
  %32 = add nsw i32 %12, 1042
  %33 = tail call double @ldexp(double %11, i32 %32) #21
  %34 = tail call double @llvm.floor.f64(double %33)
  %35 = fptosi double %34 to i64
  %36 = or i64 %6, %35
  %37 = sitofp i64 %35 to double
  %38 = fsub double %33, %37
  %39 = tail call double @ldexp(double %38, i32 32) #21
  %40 = tail call double @llvm.floor.f64(double %39)
  %41 = fadd double %40, 0xC1E0000000000000
  %42 = fptosi double %41 to i64
  %43 = add nsw i64 %42, 2147483648
  br label %62

44:                                               ; preds = %18
  %45 = tail call double @ldexp(double %11, i32 21) #21
  %46 = tail call double @llvm.floor.f64(double %45)
  %47 = fptosi double %46 to i64
  %48 = add nsw i64 %47, -1048576
  %49 = fadd double %45, 0xC130000000000000
  %50 = add nsw i32 %12, 1022
  %51 = sext i32 %50 to i64
  %52 = shl nuw nsw i64 %51, 20
  %53 = or i64 %52, %6
  %54 = or i64 %53, %48
  %55 = sitofp i64 %48 to double
  %56 = fsub double %49, %55
  %57 = tail call double @ldexp(double %56, i32 32) #21
  %58 = tail call double @llvm.floor.f64(double %57)
  %59 = fadd double %58, 0xC1E0000000000000
  %60 = fptosi double %59 to i64
  %61 = add nsw i64 %60, 2147483648
  br label %62

62:                                               ; preds = %44, %31, %24, %22, %16
  %63 = phi i64 [ %17, %16 ], [ %54, %44 ], [ %6, %24 ], [ %36, %31 ], [ %6, %22 ]
  %64 = phi i64 [ 0, %16 ], [ %61, %44 ], [ %30, %24 ], [ %43, %31 ], [ 0, %22 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #21
  br label %65

65:                                               ; preds = %62, %2
  %66 = phi i64 [ %63, %62 ], [ 0, %2 ]
  %67 = phi i64 [ %64, %62 ], [ 0, %2 ]
  %68 = lshr i64 %66, 24
  %69 = trunc i64 %68 to i8
  store i8 %69, i8* %1, align 1, !tbaa !26
  %70 = lshr i64 %66, 16
  %71 = trunc i64 %70 to i8
  %72 = getelementptr inbounds i8, i8* %1, i64 1
  store i8 %71, i8* %72, align 1, !tbaa !26
  %73 = lshr i64 %66, 8
  %74 = trunc i64 %73 to i8
  %75 = getelementptr inbounds i8, i8* %1, i64 2
  store i8 %74, i8* %75, align 1, !tbaa !26
  %76 = trunc i64 %66 to i8
  %77 = getelementptr inbounds i8, i8* %1, i64 3
  store i8 %76, i8* %77, align 1, !tbaa !26
  %78 = lshr i64 %67, 24
  %79 = trunc i64 %78 to i8
  %80 = getelementptr inbounds i8, i8* %1, i64 4
  store i8 %79, i8* %80, align 1, !tbaa !26
  %81 = lshr i64 %67, 16
  %82 = trunc i64 %81 to i8
  %83 = getelementptr inbounds i8, i8* %1, i64 5
  store i8 %82, i8* %83, align 1, !tbaa !26
  %84 = lshr i64 %67, 8
  %85 = trunc i64 %84 to i8
  %86 = getelementptr inbounds i8, i8* %1, i64 6
  store i8 %85, i8* %86, align 1, !tbaa !26
  %87 = trunc i64 %67 to i8
  %88 = getelementptr inbounds i8, i8* %1, i64 7
  store i8 %87, i8* %88, align 1, !tbaa !26
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local double @ConvertFromIeeeExtended(i8* nocapture readonly %0) local_unnamed_addr #3 {
  %2 = load i8, i8* %0, align 1, !tbaa !26
  %3 = and i8 %2, 127
  %4 = zext i8 %3 to i64
  %5 = shl nuw nsw i64 %4, 8
  %6 = getelementptr inbounds i8, i8* %0, i64 1
  %7 = load i8, i8* %6, align 1, !tbaa !26
  %8 = zext i8 %7 to i64
  %9 = or i64 %5, %8
  %10 = getelementptr inbounds i8, i8* %0, i64 2
  %11 = load i8, i8* %10, align 1, !tbaa !26
  %12 = zext i8 %11 to i64
  %13 = shl nuw nsw i64 %12, 24
  %14 = getelementptr inbounds i8, i8* %0, i64 3
  %15 = load i8, i8* %14, align 1, !tbaa !26
  %16 = zext i8 %15 to i64
  %17 = shl nuw nsw i64 %16, 16
  %18 = or i64 %17, %13
  %19 = getelementptr inbounds i8, i8* %0, i64 4
  %20 = load i8, i8* %19, align 1, !tbaa !26
  %21 = zext i8 %20 to i64
  %22 = shl nuw nsw i64 %21, 8
  %23 = or i64 %18, %22
  %24 = getelementptr inbounds i8, i8* %0, i64 5
  %25 = load i8, i8* %24, align 1, !tbaa !26
  %26 = zext i8 %25 to i64
  %27 = or i64 %23, %26
  %28 = getelementptr inbounds i8, i8* %0, i64 6
  %29 = load i8, i8* %28, align 1, !tbaa !26
  %30 = zext i8 %29 to i64
  %31 = shl nuw nsw i64 %30, 24
  %32 = getelementptr inbounds i8, i8* %0, i64 7
  %33 = load i8, i8* %32, align 1, !tbaa !26
  %34 = zext i8 %33 to i64
  %35 = shl nuw nsw i64 %34, 16
  %36 = or i64 %35, %31
  %37 = getelementptr inbounds i8, i8* %0, i64 8
  %38 = load i8, i8* %37, align 1, !tbaa !26
  %39 = zext i8 %38 to i64
  %40 = shl nuw nsw i64 %39, 8
  %41 = or i64 %36, %40
  %42 = getelementptr inbounds i8, i8* %0, i64 9
  %43 = load i8, i8* %42, align 1, !tbaa !26
  %44 = zext i8 %43 to i64
  %45 = or i64 %41, %44
  %46 = or i64 %27, %9
  %47 = or i64 %46, %45
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %65, label %49

49:                                               ; preds = %1
  %50 = icmp eq i64 %9, 32767
  br i1 %50, label %65, label %51

51:                                               ; preds = %49
  %52 = add nsw i64 %27, -2147483648
  %53 = sitofp i64 %52 to double
  %54 = fadd double %53, 0x41E0000000000000
  %55 = trunc i64 %9 to i32
  %56 = add nsw i32 %55, -16414
  %57 = tail call double @ldexp(double %54, i32 %56) #21
  %58 = add nsw i64 %45, -2147483648
  %59 = sitofp i64 %58 to double
  %60 = fadd double %59, 0x41E0000000000000
  %61 = add nsw i32 %55, -16446
  %62 = tail call double @ldexp(double %60, i32 %61) #21
  %63 = fadd double %57, %62
  %64 = load i8, i8* %0, align 1, !tbaa !26
  br label %65

65:                                               ; preds = %51, %49, %1
  %66 = phi i8 [ %64, %51 ], [ %2, %1 ], [ %2, %49 ]
  %67 = phi double [ %63, %51 ], [ 0.000000e+00, %1 ], [ 0x7FF0000000000000, %49 ]
  %68 = icmp slt i8 %66, 0
  %69 = fneg double %67
  %70 = select i1 %68, double %69, double %67
  ret double %70
}

; Function Attrs: nounwind uwtable
define dso_local void @ConvertToIeeeExtended(double %0, i8* nocapture %1) local_unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #21
  %5 = fcmp olt double %0, 0.000000e+00
  %6 = fsub double -0.000000e+00, %0
  %7 = select i1 %5, i32 32768, i32 0
  %8 = select i1 %5, double %6, double %0
  %9 = fcmp oeq double %8, 0.000000e+00
  br i1 %9, label %10, label %11

10:                                               ; preds = %2
  store i32 0, i32* %3, align 4, !tbaa !18
  br label %39

11:                                               ; preds = %2
  %12 = call double @frexp(double %8, i32* nonnull %3) #21
  %13 = load i32, i32* %3, align 4, !tbaa !18
  %14 = icmp slt i32 %13, 16385
  %15 = fcmp olt double %12, 1.000000e+00
  %16 = and i1 %15, %14
  br i1 %16, label %19, label %17

17:                                               ; preds = %11
  %18 = or i32 %7, 32767
  store i32 %18, i32* %3, align 4, !tbaa !18
  br label %39

19:                                               ; preds = %11
  %20 = add nsw i32 %13, 16382
  store i32 %20, i32* %3, align 4, !tbaa !18
  %21 = icmp slt i32 %13, -16382
  br i1 %21, label %22, label %24

22:                                               ; preds = %19
  %23 = tail call double @ldexp(double %12, i32 %20) #21
  store i32 0, i32* %3, align 4, !tbaa !18
  br label %24

24:                                               ; preds = %22, %19
  %25 = phi i32 [ 0, %22 ], [ %20, %19 ]
  %26 = phi double [ %23, %22 ], [ %12, %19 ]
  %27 = or i32 %25, %7
  store i32 %27, i32* %3, align 4, !tbaa !18
  %28 = tail call double @ldexp(double %26, i32 32) #21
  %29 = tail call double @llvm.floor.f64(double %28)
  %30 = fadd double %29, 0xC1E0000000000000
  %31 = fptosi double %30 to i64
  %32 = add nsw i64 %31, 2147483648
  %33 = fsub double %28, %29
  %34 = tail call double @ldexp(double %33, i32 32) #21
  %35 = tail call double @llvm.floor.f64(double %34)
  %36 = fadd double %35, 0xC1E0000000000000
  %37 = fptosi double %36 to i64
  %38 = add nsw i64 %37, 2147483648
  br label %39

39:                                               ; preds = %24, %17, %10
  %40 = phi i32 [ 0, %10 ], [ %27, %24 ], [ %18, %17 ]
  %41 = phi i64 [ 0, %10 ], [ %32, %24 ], [ 0, %17 ]
  %42 = phi i64 [ 0, %10 ], [ %38, %24 ], [ 0, %17 ]
  %43 = lshr i32 %40, 8
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %1, align 1, !tbaa !26
  %45 = trunc i32 %40 to i8
  %46 = getelementptr inbounds i8, i8* %1, i64 1
  store i8 %45, i8* %46, align 1, !tbaa !26
  %47 = lshr i64 %41, 24
  %48 = trunc i64 %47 to i8
  %49 = getelementptr inbounds i8, i8* %1, i64 2
  store i8 %48, i8* %49, align 1, !tbaa !26
  %50 = lshr i64 %41, 16
  %51 = trunc i64 %50 to i8
  %52 = getelementptr inbounds i8, i8* %1, i64 3
  store i8 %51, i8* %52, align 1, !tbaa !26
  %53 = lshr i64 %41, 8
  %54 = trunc i64 %53 to i8
  %55 = getelementptr inbounds i8, i8* %1, i64 4
  store i8 %54, i8* %55, align 1, !tbaa !26
  %56 = trunc i64 %41 to i8
  %57 = getelementptr inbounds i8, i8* %1, i64 5
  store i8 %56, i8* %57, align 1, !tbaa !26
  %58 = lshr i64 %42, 24
  %59 = trunc i64 %58 to i8
  %60 = getelementptr inbounds i8, i8* %1, i64 6
  store i8 %59, i8* %60, align 1, !tbaa !26
  %61 = lshr i64 %42, 16
  %62 = trunc i64 %61 to i8
  %63 = getelementptr inbounds i8, i8* %1, i64 7
  store i8 %62, i8* %63, align 1, !tbaa !26
  %64 = lshr i64 %42, 8
  %65 = trunc i64 %64 to i8
  %66 = getelementptr inbounds i8, i8* %1, i64 8
  store i8 %65, i8* %66, align 1, !tbaa !26
  %67 = trunc i64 %42 to i8
  %68 = getelementptr inbounds i8, i8* %1, i64 9
  store i8 %67, i8* %68, align 1, !tbaa !26
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #21
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @InitMP3(%struct.mpstr* nocapture %0) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %0, i64 0, i32 4
  %3 = bitcast %struct.mpstr* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(31880) %3, i8 0, i64 31880, i1 false)
  store i32 -1, i32* %2, align 8, !tbaa !99
  %4 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %0, i64 0, i32 5, i32 2
  %5 = bitcast %struct.mpstr* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(20) %5, i8 0, i64 20, i1 false)
  store i32 -1, i32* %4, align 4, !tbaa !100
  %6 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %0, i64 0, i32 10
  store i32 0, i32* %6, align 8, !tbaa !101
  %7 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %0, i64 0, i32 12
  store i32 1, i32* %7, align 8, !tbaa !31
  tail call void @make_decode_tables(i64 32767) #21
  tail call void @init_layer3(i32 32) #21
  ret i32 1
}

; Function Attrs: nounwind uwtable
define dso_local void @ExitMP3(%struct.mpstr* nocapture readonly %0) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %0, i64 0, i32 1
  %3 = load %struct.buf*, %struct.buf** %2, align 8, !tbaa !102
  %4 = icmp eq %struct.buf* %3, null
  br i1 %4, label %13, label %5

5:                                                ; preds = %5, %1
  %6 = phi %struct.buf* [ %10, %5 ], [ %3, %1 ]
  %7 = getelementptr inbounds %struct.buf, %struct.buf* %6, i64 0, i32 0
  %8 = load i8*, i8** %7, align 8, !tbaa !103
  tail call void @free(i8* %8) #21
  %9 = getelementptr inbounds %struct.buf, %struct.buf* %6, i64 0, i32 3
  %10 = load %struct.buf*, %struct.buf** %9, align 8, !tbaa !105
  %11 = bitcast %struct.buf* %6 to i8*
  tail call void @free(i8* %11) #21
  %12 = icmp eq %struct.buf* %10, null
  br i1 %12, label %13, label %5

13:                                               ; preds = %5, %1
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @decodeMP3(%struct.mpstr* %0, i8* readonly %1, i32 %2, i8* %3, i32 %4, i32* %5) local_unnamed_addr #0 {
  store %struct.mpstr* %0, %struct.mpstr** @gmp, align 8, !tbaa !7
  %7 = icmp slt i32 %4, 4608
  br i1 %7, label %8, label %11

8:                                                ; preds = %6
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %10 = tail call i64 @fwrite(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.151, i64 0, i64 0), i64 18, i64 1, %struct._IO_FILE* %9) #19
  br label %316

11:                                               ; preds = %6
  %12 = icmp eq i8* %1, null
  br i1 %12, label %47, label %13

13:                                               ; preds = %11
  %14 = tail call noalias dereferenceable_or_null(40) i8* @malloc(i64 40) #21
  %15 = icmp eq i8* %14, null
  br i1 %15, label %16, label %19

16:                                               ; preds = %13
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %18 = tail call i64 @fwrite(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2.152, i64 0, i64 0), i64 15, i64 1, %struct._IO_FILE* %17) #22
  br label %316

19:                                               ; preds = %13
  %20 = sext i32 %2 to i64
  %21 = tail call noalias i8* @malloc(i64 %20) #21
  %22 = bitcast i8* %14 to i8**
  store i8* %21, i8** %22, align 8, !tbaa !103
  %23 = icmp eq i8* %21, null
  br i1 %23, label %24, label %25

24:                                               ; preds = %19
  tail call void @free(i8* nonnull %14) #21
  br label %316

25:                                               ; preds = %19
  %26 = getelementptr inbounds i8, i8* %14, i64 8
  %27 = bitcast i8* %26 to i64*
  store i64 %20, i64* %27, align 8, !tbaa !106
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %21, i8* nonnull align 1 %1, i64 %20, i1 false) #21
  %28 = getelementptr inbounds i8, i8* %14, i64 24
  %29 = bitcast i8* %28 to %struct.buf**
  store %struct.buf* null, %struct.buf** %29, align 8, !tbaa !105
  %30 = bitcast %struct.mpstr* %0 to i64*
  %31 = load i64, i64* %30, align 8, !tbaa !107
  %32 = getelementptr inbounds i8, i8* %14, i64 32
  %33 = bitcast i8* %32 to i64*
  store i64 %31, i64* %33, align 8, !tbaa !108
  %34 = getelementptr inbounds i8, i8* %14, i64 16
  %35 = bitcast i8* %34 to i64*
  store i64 0, i64* %35, align 8, !tbaa !109
  %36 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %0, i64 0, i32 1
  %37 = load %struct.buf*, %struct.buf** %36, align 8, !tbaa !102
  %38 = icmp eq %struct.buf* %37, null
  %39 = inttoptr i64 %31 to %struct.buf*
  %40 = getelementptr inbounds %struct.buf, %struct.buf* %39, i64 0, i32 3
  %41 = select i1 %38, %struct.buf** %36, %struct.buf** %40
  %42 = bitcast %struct.buf** %41 to i8**
  store i8* %14, i8** %42, align 8, !tbaa !7
  %43 = bitcast %struct.mpstr* %0 to i8**
  store i8* %14, i8** %43, align 8, !tbaa !107
  %44 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %0, i64 0, i32 2
  %45 = load i32, i32* %44, align 8, !tbaa !110
  %46 = add nsw i32 %45, %2
  store i32 %46, i32* %44, align 8, !tbaa !110
  br label %47

47:                                               ; preds = %25, %11
  %48 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %0, i64 0, i32 3
  %49 = load i32, i32* %48, align 4, !tbaa !111
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %54, label %51

51:                                               ; preds = %47
  %52 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %0, i64 0, i32 5, i32 17
  %53 = load i32, i32* %52, align 4, !tbaa !112
  br label %242

54:                                               ; preds = %47
  %55 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %0, i64 0, i32 2
  %56 = load i32, i32* %55, align 8, !tbaa !110
  %57 = icmp slt i32 %56, 4
  br i1 %57, label %316, label %58

58:                                               ; preds = %54
  %59 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %0, i64 0, i32 1
  %60 = load %struct.buf*, %struct.buf** %59, align 8, !tbaa !102
  %61 = bitcast %struct.mpstr* %0 to i8*
  br label %62

62:                                               ; preds = %78, %58
  %63 = phi %struct.buf* [ %60, %58 ], [ %82, %78 ]
  %64 = getelementptr inbounds %struct.buf, %struct.buf* %63, i64 0, i32 2
  %65 = load i64, i64* %64, align 8, !tbaa !109
  %66 = shl i64 %65, 32
  %67 = ashr exact i64 %66, 32
  %68 = getelementptr inbounds %struct.buf, %struct.buf* %63, i64 0, i32 1
  %69 = load i64, i64* %68, align 8, !tbaa !106
  %70 = icmp slt i64 %67, %69
  br i1 %70, label %87, label %71

71:                                               ; preds = %62
  %72 = getelementptr inbounds %struct.buf, %struct.buf* %63, i64 0, i32 3
  %73 = load %struct.buf*, %struct.buf** %72, align 8, !tbaa !105
  store %struct.buf* %73, %struct.buf** %59, align 8, !tbaa !102
  %74 = icmp eq %struct.buf* %73, null
  br i1 %74, label %77, label %75

75:                                               ; preds = %71
  %76 = getelementptr inbounds %struct.buf, %struct.buf* %73, i64 0, i32 4
  store %struct.buf* null, %struct.buf** %76, align 8, !tbaa !108
  br label %78

77:                                               ; preds = %71
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %61, i8 0, i64 16, i1 false) #21
  br label %78

78:                                               ; preds = %77, %75
  %79 = getelementptr inbounds %struct.buf, %struct.buf* %63, i64 0, i32 0
  %80 = load i8*, i8** %79, align 8, !tbaa !103
  tail call void @free(i8* %80) #21
  %81 = bitcast %struct.buf* %63 to i8*
  tail call void @free(i8* %81) #21
  %82 = load %struct.buf*, %struct.buf** %59, align 8, !tbaa !102
  %83 = icmp eq %struct.buf* %82, null
  br i1 %83, label %84, label %62

84:                                               ; preds = %78
  %85 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %86 = tail call i64 @fwrite(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3.153, i64 0, i64 0), i64 13, i64 1, %struct._IO_FILE* %85) #22
  tail call void @exit(i32 1) #20
  unreachable

87:                                               ; preds = %62
  %88 = getelementptr inbounds %struct.buf, %struct.buf* %63, i64 0, i32 2
  %89 = getelementptr inbounds %struct.buf, %struct.buf* %63, i64 0, i32 0
  %90 = load i8*, i8** %89, align 8, !tbaa !103
  %91 = getelementptr inbounds i8, i8* %90, i64 %67
  %92 = load i8, i8* %91, align 1, !tbaa !26
  %93 = load i32, i32* %55, align 8, !tbaa !110
  %94 = add nsw i32 %93, -1
  store i32 %94, i32* %55, align 8, !tbaa !110
  %95 = add nsw i64 %65, 1
  store i64 %95, i64* %88, align 8, !tbaa !109
  %96 = zext i8 %92 to i64
  %97 = shl i64 %95, 32
  %98 = ashr exact i64 %97, 32
  %99 = icmp slt i64 %98, %69
  br i1 %99, label %129, label %100

100:                                              ; preds = %114, %87
  %101 = phi %struct.buf* [ %112, %114 ], [ %63, %87 ]
  %102 = getelementptr inbounds %struct.buf, %struct.buf* %101, i64 0, i32 3
  %103 = load %struct.buf*, %struct.buf** %102, align 8, !tbaa !105
  store %struct.buf* %103, %struct.buf** %59, align 8, !tbaa !102
  %104 = icmp eq %struct.buf* %103, null
  br i1 %104, label %107, label %105

105:                                              ; preds = %100
  %106 = getelementptr inbounds %struct.buf, %struct.buf* %103, i64 0, i32 4
  store %struct.buf* null, %struct.buf** %106, align 8, !tbaa !108
  br label %108

107:                                              ; preds = %100
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %61, i8 0, i64 16, i1 false) #21
  br label %108

108:                                              ; preds = %107, %105
  %109 = getelementptr inbounds %struct.buf, %struct.buf* %101, i64 0, i32 0
  %110 = load i8*, i8** %109, align 8, !tbaa !103
  tail call void @free(i8* %110) #21
  %111 = bitcast %struct.buf* %101 to i8*
  tail call void @free(i8* %111) #21
  %112 = load %struct.buf*, %struct.buf** %59, align 8, !tbaa !102
  %113 = icmp eq %struct.buf* %112, null
  br i1 %113, label %122, label %114

114:                                              ; preds = %108
  %115 = getelementptr inbounds %struct.buf, %struct.buf* %112, i64 0, i32 2
  %116 = load i64, i64* %115, align 8, !tbaa !109
  %117 = getelementptr inbounds %struct.buf, %struct.buf* %112, i64 0, i32 1
  %118 = load i64, i64* %117, align 8, !tbaa !106
  %119 = shl i64 %116, 32
  %120 = ashr exact i64 %119, 32
  %121 = icmp slt i64 %120, %118
  br i1 %121, label %125, label %100

122:                                              ; preds = %108
  %123 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %124 = tail call i64 @fwrite(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3.153, i64 0, i64 0), i64 13, i64 1, %struct._IO_FILE* %123) #22
  tail call void @exit(i32 1) #20
  unreachable

125:                                              ; preds = %114
  %126 = getelementptr inbounds %struct.buf, %struct.buf* %112, i64 0, i32 0
  %127 = load i8*, i8** %126, align 8, !tbaa !103
  %128 = load i32, i32* %55, align 8, !tbaa !110
  br label %129

129:                                              ; preds = %125, %87
  %130 = phi i32 [ %94, %87 ], [ %128, %125 ]
  %131 = phi i8* [ %90, %87 ], [ %127, %125 ]
  %132 = phi i64 [ %69, %87 ], [ %118, %125 ]
  %133 = phi i64 [ %95, %87 ], [ %116, %125 ]
  %134 = phi %struct.buf* [ %63, %87 ], [ %112, %125 ]
  %135 = phi i64 [ %98, %87 ], [ %120, %125 ]
  %136 = getelementptr inbounds %struct.buf, %struct.buf* %134, i64 0, i32 2
  %137 = getelementptr inbounds i8, i8* %131, i64 %135
  %138 = load i8, i8* %137, align 1, !tbaa !26
  %139 = add nsw i32 %130, -1
  store i32 %139, i32* %55, align 8, !tbaa !110
  %140 = add nsw i64 %133, 1
  store i64 %140, i64* %136, align 8, !tbaa !109
  %141 = zext i8 %138 to i64
  %142 = shl nuw nsw i64 %96, 16
  %143 = shl nuw nsw i64 %141, 8
  %144 = or i64 %143, %142
  %145 = shl i64 %140, 32
  %146 = ashr exact i64 %145, 32
  %147 = icmp slt i64 %146, %132
  br i1 %147, label %177, label %148

148:                                              ; preds = %162, %129
  %149 = phi %struct.buf* [ %160, %162 ], [ %134, %129 ]
  %150 = getelementptr inbounds %struct.buf, %struct.buf* %149, i64 0, i32 3
  %151 = load %struct.buf*, %struct.buf** %150, align 8, !tbaa !105
  store %struct.buf* %151, %struct.buf** %59, align 8, !tbaa !102
  %152 = icmp eq %struct.buf* %151, null
  br i1 %152, label %155, label %153

153:                                              ; preds = %148
  %154 = getelementptr inbounds %struct.buf, %struct.buf* %151, i64 0, i32 4
  store %struct.buf* null, %struct.buf** %154, align 8, !tbaa !108
  br label %156

155:                                              ; preds = %148
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %61, i8 0, i64 16, i1 false) #21
  br label %156

156:                                              ; preds = %155, %153
  %157 = getelementptr inbounds %struct.buf, %struct.buf* %149, i64 0, i32 0
  %158 = load i8*, i8** %157, align 8, !tbaa !103
  tail call void @free(i8* %158) #21
  %159 = bitcast %struct.buf* %149 to i8*
  tail call void @free(i8* %159) #21
  %160 = load %struct.buf*, %struct.buf** %59, align 8, !tbaa !102
  %161 = icmp eq %struct.buf* %160, null
  br i1 %161, label %170, label %162

162:                                              ; preds = %156
  %163 = getelementptr inbounds %struct.buf, %struct.buf* %160, i64 0, i32 2
  %164 = load i64, i64* %163, align 8, !tbaa !109
  %165 = getelementptr inbounds %struct.buf, %struct.buf* %160, i64 0, i32 1
  %166 = load i64, i64* %165, align 8, !tbaa !106
  %167 = shl i64 %164, 32
  %168 = ashr exact i64 %167, 32
  %169 = icmp slt i64 %168, %166
  br i1 %169, label %173, label %148

170:                                              ; preds = %156
  %171 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %172 = tail call i64 @fwrite(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3.153, i64 0, i64 0), i64 13, i64 1, %struct._IO_FILE* %171) #22
  tail call void @exit(i32 1) #20
  unreachable

173:                                              ; preds = %162
  %174 = getelementptr inbounds %struct.buf, %struct.buf* %160, i64 0, i32 0
  %175 = load i8*, i8** %174, align 8, !tbaa !103
  %176 = load i32, i32* %55, align 8, !tbaa !110
  br label %177

177:                                              ; preds = %173, %129
  %178 = phi i32 [ %139, %129 ], [ %176, %173 ]
  %179 = phi i8* [ %131, %129 ], [ %175, %173 ]
  %180 = phi i64 [ %132, %129 ], [ %166, %173 ]
  %181 = phi i64 [ %140, %129 ], [ %164, %173 ]
  %182 = phi %struct.buf* [ %134, %129 ], [ %160, %173 ]
  %183 = phi i64 [ %146, %129 ], [ %168, %173 ]
  %184 = getelementptr inbounds %struct.buf, %struct.buf* %182, i64 0, i32 2
  %185 = getelementptr inbounds i8, i8* %179, i64 %183
  %186 = load i8, i8* %185, align 1, !tbaa !26
  %187 = add nsw i32 %178, -1
  store i32 %187, i32* %55, align 8, !tbaa !110
  %188 = add nsw i64 %181, 1
  store i64 %188, i64* %184, align 8, !tbaa !109
  %189 = zext i8 %186 to i64
  %190 = or i64 %144, %189
  %191 = shl nuw nsw i64 %190, 8
  %192 = shl i64 %188, 32
  %193 = ashr exact i64 %192, 32
  %194 = icmp slt i64 %193, %180
  br i1 %194, label %224, label %195

195:                                              ; preds = %209, %177
  %196 = phi %struct.buf* [ %207, %209 ], [ %182, %177 ]
  %197 = getelementptr inbounds %struct.buf, %struct.buf* %196, i64 0, i32 3
  %198 = load %struct.buf*, %struct.buf** %197, align 8, !tbaa !105
  store %struct.buf* %198, %struct.buf** %59, align 8, !tbaa !102
  %199 = icmp eq %struct.buf* %198, null
  br i1 %199, label %202, label %200

200:                                              ; preds = %195
  %201 = getelementptr inbounds %struct.buf, %struct.buf* %198, i64 0, i32 4
  store %struct.buf* null, %struct.buf** %201, align 8, !tbaa !108
  br label %203

202:                                              ; preds = %195
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %61, i8 0, i64 16, i1 false) #21
  br label %203

203:                                              ; preds = %202, %200
  %204 = getelementptr inbounds %struct.buf, %struct.buf* %196, i64 0, i32 0
  %205 = load i8*, i8** %204, align 8, !tbaa !103
  tail call void @free(i8* %205) #21
  %206 = bitcast %struct.buf* %196 to i8*
  tail call void @free(i8* %206) #21
  %207 = load %struct.buf*, %struct.buf** %59, align 8, !tbaa !102
  %208 = icmp eq %struct.buf* %207, null
  br i1 %208, label %217, label %209

209:                                              ; preds = %203
  %210 = getelementptr inbounds %struct.buf, %struct.buf* %207, i64 0, i32 2
  %211 = load i64, i64* %210, align 8, !tbaa !109
  %212 = getelementptr inbounds %struct.buf, %struct.buf* %207, i64 0, i32 1
  %213 = load i64, i64* %212, align 8, !tbaa !106
  %214 = shl i64 %211, 32
  %215 = ashr exact i64 %214, 32
  %216 = icmp slt i64 %215, %213
  br i1 %216, label %220, label %195

217:                                              ; preds = %203
  %218 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %219 = tail call i64 @fwrite(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3.153, i64 0, i64 0), i64 13, i64 1, %struct._IO_FILE* %218) #22
  tail call void @exit(i32 1) #20
  unreachable

220:                                              ; preds = %209
  %221 = getelementptr inbounds %struct.buf, %struct.buf* %207, i64 0, i32 0
  %222 = load i8*, i8** %221, align 8, !tbaa !103
  %223 = load i32, i32* %55, align 8, !tbaa !110
  br label %224

224:                                              ; preds = %220, %177
  %225 = phi i32 [ %187, %177 ], [ %223, %220 ]
  %226 = phi i8* [ %179, %177 ], [ %222, %220 ]
  %227 = phi i64 [ %188, %177 ], [ %211, %220 ]
  %228 = phi %struct.buf* [ %182, %177 ], [ %207, %220 ]
  %229 = phi i64 [ %193, %177 ], [ %215, %220 ]
  %230 = getelementptr inbounds %struct.buf, %struct.buf* %228, i64 0, i32 2
  %231 = getelementptr inbounds i8, i8* %226, i64 %229
  %232 = load i8, i8* %231, align 1, !tbaa !26
  %233 = add nsw i32 %225, -1
  store i32 %233, i32* %55, align 8, !tbaa !110
  %234 = add nsw i64 %227, 1
  store i64 %234, i64* %230, align 8, !tbaa !109
  %235 = zext i8 %232 to i64
  %236 = or i64 %191, %235
  %237 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %0, i64 0, i32 9
  store i64 %236, i64* %237, align 8, !tbaa !113
  %238 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %0, i64 0, i32 5
  %239 = tail call i32 @decode_header(%struct.frame* nonnull %238, i64 %236) #21
  %240 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %0, i64 0, i32 5, i32 17
  %241 = load i32, i32* %240, align 4, !tbaa !112
  store i32 %241, i32* %48, align 4, !tbaa !111
  br label %242

242:                                              ; preds = %224, %51
  %243 = phi i32 [ %49, %51 ], [ %241, %224 ]
  %244 = phi i32 [ %53, %51 ], [ %241, %224 ]
  %245 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %0, i64 0, i32 5
  %246 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %0, i64 0, i32 2
  %247 = load i32, i32* %246, align 8, !tbaa !110
  %248 = icmp sgt i32 %244, %247
  br i1 %248, label %316, label %249

249:                                              ; preds = %242
  %250 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %0, i64 0, i32 10
  %251 = load i32, i32* %250, align 8, !tbaa !101
  %252 = sext i32 %251 to i64
  %253 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %0, i64 0, i32 6, i64 %252, i64 512
  store i8* %253, i8** @wordpointer, align 8, !tbaa !7
  %254 = and i32 %251, 1
  %255 = xor i32 %254, 1
  store i32 %255, i32* %250, align 8, !tbaa !101
  store i32 0, i32* @bitindex, align 4, !tbaa !18
  %256 = icmp sgt i32 %243, 0
  br i1 %256, label %257, label %306

257:                                              ; preds = %249
  %258 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %0, i64 0, i32 1
  %259 = bitcast %struct.mpstr* %0 to i8*
  br label %260

260:                                              ; preds = %304, %257
  %261 = phi i8* [ %253, %257 ], [ %305, %304 ]
  %262 = phi i32 [ %243, %257 ], [ %302, %304 ]
  %263 = phi i32 [ 0, %257 ], [ %280, %304 ]
  %264 = load %struct.buf*, %struct.buf** %258, align 8, !tbaa !102
  %265 = getelementptr inbounds %struct.buf, %struct.buf* %264, i64 0, i32 1
  %266 = load i64, i64* %265, align 8, !tbaa !106
  %267 = getelementptr inbounds %struct.buf, %struct.buf* %264, i64 0, i32 2
  %268 = load i64, i64* %267, align 8, !tbaa !109
  %269 = sub nsw i64 %266, %268
  %270 = trunc i64 %269 to i32
  %271 = sub nsw i32 %262, %263
  %272 = icmp sgt i32 %271, %270
  %273 = select i1 %272, i32 %270, i32 %271
  %274 = sext i32 %263 to i64
  %275 = getelementptr inbounds i8, i8* %261, i64 %274
  %276 = getelementptr inbounds %struct.buf, %struct.buf* %264, i64 0, i32 0
  %277 = load i8*, i8** %276, align 8, !tbaa !103
  %278 = getelementptr inbounds i8, i8* %277, i64 %268
  %279 = sext i32 %273 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %275, i8* align 1 %278, i64 %279, i1 false)
  %280 = add nsw i32 %273, %263
  %281 = load %struct.buf*, %struct.buf** %258, align 8, !tbaa !102
  %282 = getelementptr inbounds %struct.buf, %struct.buf* %281, i64 0, i32 2
  %283 = load i64, i64* %282, align 8, !tbaa !109
  %284 = add nsw i64 %283, %279
  store i64 %284, i64* %282, align 8, !tbaa !109
  %285 = load i32, i32* %246, align 8, !tbaa !110
  %286 = sub nsw i32 %285, %273
  store i32 %286, i32* %246, align 8, !tbaa !110
  %287 = getelementptr inbounds %struct.buf, %struct.buf* %281, i64 0, i32 1
  %288 = load i64, i64* %287, align 8, !tbaa !106
  %289 = icmp eq i64 %284, %288
  br i1 %289, label %290, label %301

290:                                              ; preds = %260
  %291 = getelementptr inbounds %struct.buf, %struct.buf* %281, i64 0, i32 3
  %292 = load %struct.buf*, %struct.buf** %291, align 8, !tbaa !105
  store %struct.buf* %292, %struct.buf** %258, align 8, !tbaa !102
  %293 = icmp eq %struct.buf* %292, null
  br i1 %293, label %296, label %294

294:                                              ; preds = %290
  %295 = getelementptr inbounds %struct.buf, %struct.buf* %292, i64 0, i32 4
  store %struct.buf* null, %struct.buf** %295, align 8, !tbaa !108
  br label %297

296:                                              ; preds = %290
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %259, i8 0, i64 16, i1 false) #21
  br label %297

297:                                              ; preds = %296, %294
  %298 = getelementptr inbounds %struct.buf, %struct.buf* %281, i64 0, i32 0
  %299 = load i8*, i8** %298, align 8, !tbaa !103
  tail call void @free(i8* %299) #21
  %300 = bitcast %struct.buf* %281 to i8*
  tail call void @free(i8* %300) #21
  br label %301

301:                                              ; preds = %297, %260
  %302 = load i32, i32* %48, align 4, !tbaa !111
  %303 = icmp sgt i32 %302, %280
  br i1 %303, label %304, label %306

304:                                              ; preds = %301
  %305 = load i8*, i8** @wordpointer, align 8, !tbaa !7
  br label %260

306:                                              ; preds = %301, %249
  store i32 0, i32* %5, align 4, !tbaa !18
  %307 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %0, i64 0, i32 5, i32 7
  %308 = load i32, i32* %307, align 4, !tbaa !114
  %309 = icmp eq i32 %308, 0
  br i1 %309, label %312, label %310

310:                                              ; preds = %306
  %311 = tail call i32 @getbits(i32 16) #21
  br label %312

312:                                              ; preds = %310, %306
  %313 = tail call i32 @do_layer3(%struct.frame* nonnull %245, i8* %3, i32* nonnull %5) #21
  %314 = load i32, i32* %48, align 4, !tbaa !111
  %315 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %0, i64 0, i32 4
  store i32 %314, i32* %315, align 8, !tbaa !99
  store i32 0, i32* %48, align 4, !tbaa !111
  br label %316

316:                                              ; preds = %312, %242, %54, %24, %16, %8
  %317 = phi i32 [ -1, %8 ], [ 0, %312 ], [ 1, %54 ], [ 1, %242 ], [ -1, %24 ], [ -1, %16 ]
  ret i32 %317
}

; Function Attrs: nofree nounwind
declare dso_local noalias i8* @malloc(i64) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nounwind uwtable
define dso_local i32 @set_pointer(i64 %0) local_unnamed_addr #0 {
  %2 = load %struct.mpstr*, %struct.mpstr** @gmp, align 8, !tbaa !7
  %3 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %2, i64 0, i32 4
  %4 = load i32, i32* %3, align 8, !tbaa !99
  %5 = icmp slt i32 %4, 0
  %6 = icmp sgt i64 %0, 0
  %7 = and i1 %6, %5
  br i1 %7, label %8, label %11

8:                                                ; preds = %1
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %10 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %9, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1.154, i64 0, i64 0), i64 %0) #19
  br label %25

11:                                               ; preds = %1
  %12 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %2, i64 0, i32 10
  %13 = load i32, i32* %12, align 8, !tbaa !101
  %14 = load i8*, i8** @wordpointer, align 8, !tbaa !7
  %15 = sub i64 0, %0
  %16 = getelementptr inbounds i8, i8* %14, i64 %15
  store i8* %16, i8** @wordpointer, align 8, !tbaa !7
  %17 = icmp eq i64 %0, 0
  br i1 %17, label %24, label %18

18:                                               ; preds = %11
  %19 = sext i32 %13 to i64
  %20 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %2, i64 0, i32 6, i64 %19, i64 512
  %21 = sext i32 %4 to i64
  %22 = getelementptr inbounds i8, i8* %20, i64 %21
  %23 = getelementptr inbounds i8, i8* %22, i64 %15
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* nonnull align 1 %23, i64 %0, i1 false)
  br label %24

24:                                               ; preds = %18, %11
  store i32 0, i32* @bitindex, align 4, !tbaa !18
  br label %25

25:                                               ; preds = %24, %8
  %26 = phi i32 [ -1, %8 ], [ 0, %24 ]
  ret i32 %26
}

; Function Attrs: nounwind uwtable
define dso_local void @putMyBits(i32 %0, i32 %1) local_unnamed_addr #0 {
  %3 = load %struct.bit_stream_struc*, %struct.bit_stream_struc** @bs, align 8, !tbaa !7
  tail call void @putbits(%struct.bit_stream_struc* %3, i32 %0, i32 %1) #21
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @III_format_bitstream(%struct.lame_global_flags* nocapture readonly %0, i32 %1, [2 x [576 x i32]]* nocapture readonly %2, %struct.III_side_info_t* %3, [2 x %struct.III_scalefac_t]* readonly %4, %struct.bit_stream_struc* %5) local_unnamed_addr #0 {
  store %struct.bit_stream_struc* %5, %struct.bit_stream_struc** @bs, align 8, !tbaa !7
  %7 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 8, !tbaa !7
  %8 = icmp eq %struct.BF_FrameData* %7, null
  br i1 %8, label %9, label %11

9:                                                ; preds = %6
  %10 = tail call noalias dereferenceable_or_null(184) i8* @calloc(i64 1, i64 184) #21
  store i8* %10, i8** bitcast (%struct.BF_FrameData** @frameData to i8**), align 8, !tbaa !7
  br label %11

11:                                               ; preds = %9, %6
  %12 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** @frameResults, align 8, !tbaa !7
  %13 = icmp eq %struct.BF_FrameResults* %12, null
  br i1 %13, label %14, label %16

14:                                               ; preds = %11
  %15 = tail call noalias dereferenceable_or_null(12) i8* @calloc(i64 1, i64 12) #21
  store i8* %15, i8** bitcast (%struct.BF_FrameResults** @frameResults to i8**), align 8, !tbaa !7
  br label %16

16:                                               ; preds = %14, %11
  %17 = load i32, i32* @PartHoldersInitialized, align 4, !tbaa !18
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %41

19:                                               ; preds = %16
  %20 = tail call %struct.BF_PartHolder* @BF_newPartHolder(i32 14) #21
  store %struct.BF_PartHolder* %20, %struct.BF_PartHolder** @headerPH, align 8, !tbaa !7
  %21 = tail call %struct.BF_PartHolder* @BF_newPartHolder(i32 12) #21
  store %struct.BF_PartHolder* %21, %struct.BF_PartHolder** @frameSIPH, align 8, !tbaa !7
  %22 = tail call %struct.BF_PartHolder* @BF_newPartHolder(i32 8) #21
  store %struct.BF_PartHolder* %22, %struct.BF_PartHolder** getelementptr inbounds ([2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* @channelSIPH, i64 0, i64 0), align 16, !tbaa !7
  %23 = tail call %struct.BF_PartHolder* @BF_newPartHolder(i32 8) #21
  store %struct.BF_PartHolder* %23, %struct.BF_PartHolder** getelementptr inbounds ([2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* @channelSIPH, i64 0, i64 1), align 8, !tbaa !7
  %24 = tail call %struct.BF_PartHolder* @BF_newPartHolder(i32 32) #21
  store %struct.BF_PartHolder* %24, %struct.BF_PartHolder** getelementptr inbounds ([2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @spectrumSIPH, i64 0, i64 0, i64 0), align 16, !tbaa !7
  %25 = tail call %struct.BF_PartHolder* @BF_newPartHolder(i32 64) #21
  store %struct.BF_PartHolder* %25, %struct.BF_PartHolder** getelementptr inbounds ([2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @scaleFactorsPH, i64 0, i64 0, i64 0), align 16, !tbaa !7
  %26 = tail call %struct.BF_PartHolder* @BF_newPartHolder(i32 576) #21
  store %struct.BF_PartHolder* %26, %struct.BF_PartHolder** getelementptr inbounds ([2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @codedDataPH, i64 0, i64 0, i64 0), align 16, !tbaa !7
  %27 = tail call %struct.BF_PartHolder* @BF_newPartHolder(i32 4) #21
  store %struct.BF_PartHolder* %27, %struct.BF_PartHolder** getelementptr inbounds ([2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @userSpectrumPH, i64 0, i64 0, i64 0), align 16, !tbaa !7
  %28 = tail call %struct.BF_PartHolder* @BF_newPartHolder(i32 32) #21
  store %struct.BF_PartHolder* %28, %struct.BF_PartHolder** getelementptr inbounds ([2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @spectrumSIPH, i64 0, i64 0, i64 1), align 8, !tbaa !7
  %29 = tail call %struct.BF_PartHolder* @BF_newPartHolder(i32 64) #21
  store %struct.BF_PartHolder* %29, %struct.BF_PartHolder** getelementptr inbounds ([2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @scaleFactorsPH, i64 0, i64 0, i64 1), align 8, !tbaa !7
  %30 = tail call %struct.BF_PartHolder* @BF_newPartHolder(i32 576) #21
  store %struct.BF_PartHolder* %30, %struct.BF_PartHolder** getelementptr inbounds ([2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @codedDataPH, i64 0, i64 0, i64 1), align 8, !tbaa !7
  %31 = tail call %struct.BF_PartHolder* @BF_newPartHolder(i32 4) #21
  store %struct.BF_PartHolder* %31, %struct.BF_PartHolder** getelementptr inbounds ([2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @userSpectrumPH, i64 0, i64 0, i64 1), align 8, !tbaa !7
  %32 = tail call %struct.BF_PartHolder* @BF_newPartHolder(i32 32) #21
  store %struct.BF_PartHolder* %32, %struct.BF_PartHolder** getelementptr inbounds ([2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @spectrumSIPH, i64 0, i64 1, i64 0), align 16, !tbaa !7
  %33 = tail call %struct.BF_PartHolder* @BF_newPartHolder(i32 64) #21
  store %struct.BF_PartHolder* %33, %struct.BF_PartHolder** getelementptr inbounds ([2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @scaleFactorsPH, i64 0, i64 1, i64 0), align 16, !tbaa !7
  %34 = tail call %struct.BF_PartHolder* @BF_newPartHolder(i32 576) #21
  store %struct.BF_PartHolder* %34, %struct.BF_PartHolder** getelementptr inbounds ([2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @codedDataPH, i64 0, i64 1, i64 0), align 16, !tbaa !7
  %35 = tail call %struct.BF_PartHolder* @BF_newPartHolder(i32 4) #21
  store %struct.BF_PartHolder* %35, %struct.BF_PartHolder** getelementptr inbounds ([2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @userSpectrumPH, i64 0, i64 1, i64 0), align 16, !tbaa !7
  %36 = tail call %struct.BF_PartHolder* @BF_newPartHolder(i32 32) #21
  store %struct.BF_PartHolder* %36, %struct.BF_PartHolder** getelementptr inbounds ([2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @spectrumSIPH, i64 0, i64 1, i64 1), align 8, !tbaa !7
  %37 = tail call %struct.BF_PartHolder* @BF_newPartHolder(i32 64) #21
  store %struct.BF_PartHolder* %37, %struct.BF_PartHolder** getelementptr inbounds ([2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @scaleFactorsPH, i64 0, i64 1, i64 1), align 8, !tbaa !7
  %38 = tail call %struct.BF_PartHolder* @BF_newPartHolder(i32 576) #21
  store %struct.BF_PartHolder* %38, %struct.BF_PartHolder** getelementptr inbounds ([2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @codedDataPH, i64 0, i64 1, i64 1), align 8, !tbaa !7
  %39 = tail call %struct.BF_PartHolder* @BF_newPartHolder(i32 4) #21
  store %struct.BF_PartHolder* %39, %struct.BF_PartHolder** getelementptr inbounds ([2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @userSpectrumPH, i64 0, i64 1, i64 1), align 8, !tbaa !7
  %40 = tail call %struct.BF_PartHolder* @BF_newPartHolder(i32 8) #21
  store %struct.BF_PartHolder* %40, %struct.BF_PartHolder** @userFrameDataPH, align 8, !tbaa !7
  store i32 1, i32* @PartHoldersInitialized, align 4, !tbaa !18
  br label %41

41:                                               ; preds = %19, %16
  store i32 65535, i32* @crc, align 4, !tbaa !18
  %42 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 8, !tbaa !7
  %43 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %42, i64 0, i32 1
  %44 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %43, align 8, !tbaa !41
  %45 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %44, i64 0, i32 0
  store i32 0, i32* %45, align 8, !tbaa !37
  %46 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %42, i32 4095, i32 12) #21
  store %struct.BF_PartHolder* %46, %struct.BF_PartHolder** @headerPH, align 8, !tbaa !7
  %47 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 43
  %48 = load i32, i32* %47, align 8, !tbaa !115
  %49 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %46, i32 %48, i32 1) #21
  store %struct.BF_PartHolder* %49, %struct.BF_PartHolder** @headerPH, align 8, !tbaa !7
  %50 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %49, i32 1, i32 2) #21
  store %struct.BF_PartHolder* %50, %struct.BF_PartHolder** @headerPH, align 8, !tbaa !7
  %51 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 14
  %52 = load i32, i32* %51, align 4, !tbaa !116
  %53 = icmp eq i32 %52, 0
  %54 = zext i1 %53 to i32
  %55 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %50, i32 %54, i32 1) #21
  store %struct.BF_PartHolder* %55, %struct.BF_PartHolder** @headerPH, align 8, !tbaa !7
  %56 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 50
  %57 = load i32, i32* %56, align 4, !tbaa !117
  %58 = load i32, i32* @crc, align 4, !tbaa !18
  %59 = shl i32 %58, 1
  %60 = lshr i32 %58, 15
  %61 = lshr i32 %57, 3
  %62 = xor i32 %60, %61
  %63 = and i32 %62, 1
  %64 = icmp eq i32 %63, 0
  %65 = xor i32 %59, 32773
  %66 = select i1 %64, i32 %59, i32 %65
  %67 = shl i32 %66, 1
  %68 = lshr i32 %66, 15
  %69 = lshr i32 %57, 2
  %70 = xor i32 %68, %69
  %71 = and i32 %70, 1
  %72 = icmp eq i32 %71, 0
  %73 = xor i32 %67, 32773
  %74 = select i1 %72, i32 %67, i32 %73
  %75 = shl i32 %74, 1
  %76 = lshr i32 %74, 15
  %77 = lshr i32 %57, 1
  %78 = xor i32 %76, %77
  %79 = and i32 %78, 1
  %80 = icmp eq i32 %79, 0
  %81 = xor i32 %75, 32773
  %82 = select i1 %80, i32 %75, i32 %81
  %83 = shl i32 %82, 1
  %84 = lshr i32 %82, 15
  %85 = xor i32 %84, %57
  %86 = and i32 %85, 1
  %87 = icmp eq i32 %86, 0
  %88 = xor i32 %83, 32773
  %89 = select i1 %87, i32 %83, i32 %88
  %90 = and i32 %89, 65535
  store i32 %90, i32* @crc, align 4, !tbaa !18
  %91 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %55, i32 %57, i32 4) #21
  store %struct.BF_PartHolder* %91, %struct.BF_PartHolder** @headerPH, align 8, !tbaa !7
  %92 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 51
  %93 = load i32, i32* %92, align 8, !tbaa !118
  %94 = load i32, i32* @crc, align 4, !tbaa !18
  %95 = shl i32 %94, 1
  %96 = lshr i32 %94, 15
  %97 = lshr i32 %93, 1
  %98 = xor i32 %96, %97
  %99 = and i32 %98, 1
  %100 = icmp eq i32 %99, 0
  %101 = xor i32 %95, 32773
  %102 = select i1 %100, i32 %95, i32 %101
  %103 = shl i32 %102, 1
  %104 = lshr i32 %102, 15
  %105 = xor i32 %104, %93
  %106 = and i32 %105, 1
  %107 = icmp eq i32 %106, 0
  %108 = xor i32 %103, 32773
  %109 = select i1 %107, i32 %103, i32 %108
  %110 = and i32 %109, 65535
  store i32 %110, i32* @crc, align 4, !tbaa !18
  %111 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %91, i32 %93, i32 2) #21
  store %struct.BF_PartHolder* %111, %struct.BF_PartHolder** @headerPH, align 8, !tbaa !7
  %112 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 44
  %113 = load i32, i32* %112, align 4, !tbaa !119
  %114 = load i32, i32* @crc, align 4, !tbaa !18
  %115 = shl i32 %114, 1
  %116 = lshr i32 %114, 15
  %117 = xor i32 %116, %113
  %118 = and i32 %117, 1
  %119 = icmp eq i32 %118, 0
  %120 = xor i32 %115, 32773
  %121 = select i1 %119, i32 %115, i32 %120
  %122 = and i32 %121, 65535
  store i32 %122, i32* @crc, align 4, !tbaa !18
  %123 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %111, i32 %113, i32 1) #21
  store %struct.BF_PartHolder* %123, %struct.BF_PartHolder** @headerPH, align 8, !tbaa !7
  %124 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 16
  %125 = load i32, i32* %124, align 4, !tbaa !120
  %126 = load i32, i32* @crc, align 4, !tbaa !18
  %127 = shl i32 %126, 1
  %128 = lshr i32 %126, 15
  %129 = xor i32 %128, %125
  %130 = and i32 %129, 1
  %131 = icmp eq i32 %130, 0
  %132 = xor i32 %127, 32773
  %133 = select i1 %131, i32 %127, i32 %132
  %134 = and i32 %133, 65535
  store i32 %134, i32* @crc, align 4, !tbaa !18
  %135 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %123, i32 %125, i32 1) #21
  store %struct.BF_PartHolder* %135, %struct.BF_PartHolder** @headerPH, align 8, !tbaa !7
  %136 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 8
  %137 = load i32, i32* %136, align 4, !tbaa !121
  %138 = load i32, i32* @crc, align 4, !tbaa !18
  %139 = shl i32 %138, 1
  %140 = lshr i32 %138, 15
  %141 = lshr i32 %137, 1
  %142 = xor i32 %140, %141
  %143 = and i32 %142, 1
  %144 = icmp eq i32 %143, 0
  %145 = xor i32 %139, 32773
  %146 = select i1 %144, i32 %139, i32 %145
  %147 = shl i32 %146, 1
  %148 = lshr i32 %146, 15
  %149 = xor i32 %148, %137
  %150 = and i32 %149, 1
  %151 = icmp eq i32 %150, 0
  %152 = xor i32 %147, 32773
  %153 = select i1 %151, i32 %147, i32 %152
  %154 = and i32 %153, 65535
  store i32 %154, i32* @crc, align 4, !tbaa !18
  %155 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %135, i32 %137, i32 2) #21
  store %struct.BF_PartHolder* %155, %struct.BF_PartHolder** @headerPH, align 8, !tbaa !7
  %156 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 52
  %157 = load i32, i32* %156, align 4, !tbaa !122
  %158 = load i32, i32* @crc, align 4, !tbaa !18
  %159 = shl i32 %158, 1
  %160 = lshr i32 %158, 15
  %161 = lshr i32 %157, 1
  %162 = xor i32 %160, %161
  %163 = and i32 %162, 1
  %164 = icmp eq i32 %163, 0
  %165 = xor i32 %159, 32773
  %166 = select i1 %164, i32 %159, i32 %165
  %167 = shl i32 %166, 1
  %168 = lshr i32 %166, 15
  %169 = xor i32 %168, %157
  %170 = and i32 %169, 1
  %171 = icmp eq i32 %170, 0
  %172 = xor i32 %167, 32773
  %173 = select i1 %171, i32 %167, i32 %172
  %174 = and i32 %173, 65535
  store i32 %174, i32* @crc, align 4, !tbaa !18
  %175 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %155, i32 %157, i32 2) #21
  store %struct.BF_PartHolder* %175, %struct.BF_PartHolder** @headerPH, align 8, !tbaa !7
  %176 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 12
  %177 = load i32, i32* %176, align 4, !tbaa !123
  %178 = load i32, i32* @crc, align 4, !tbaa !18
  %179 = shl i32 %178, 1
  %180 = lshr i32 %178, 15
  %181 = xor i32 %180, %177
  %182 = and i32 %181, 1
  %183 = icmp eq i32 %182, 0
  %184 = xor i32 %179, 32773
  %185 = select i1 %183, i32 %179, i32 %184
  %186 = and i32 %185, 65535
  store i32 %186, i32* @crc, align 4, !tbaa !18
  %187 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %175, i32 %177, i32 1) #21
  store %struct.BF_PartHolder* %187, %struct.BF_PartHolder** @headerPH, align 8, !tbaa !7
  %188 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 13
  %189 = load i32, i32* %188, align 8, !tbaa !124
  %190 = load i32, i32* @crc, align 4, !tbaa !18
  %191 = shl i32 %190, 1
  %192 = lshr i32 %190, 15
  %193 = xor i32 %192, %189
  %194 = and i32 %193, 1
  %195 = icmp eq i32 %194, 0
  %196 = xor i32 %191, 32773
  %197 = select i1 %195, i32 %191, i32 %196
  %198 = and i32 %197, 65535
  store i32 %198, i32* @crc, align 4, !tbaa !18
  %199 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %187, i32 %189, i32 1) #21
  store %struct.BF_PartHolder* %199, %struct.BF_PartHolder** @headerPH, align 8, !tbaa !7
  %200 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 38
  %201 = load i32, i32* %200, align 4, !tbaa !125
  %202 = load i32, i32* @crc, align 4, !tbaa !18
  %203 = shl i32 %202, 1
  %204 = lshr i32 %202, 15
  %205 = lshr i32 %201, 1
  %206 = xor i32 %204, %205
  %207 = and i32 %206, 1
  %208 = icmp eq i32 %207, 0
  %209 = xor i32 %203, 32773
  %210 = select i1 %208, i32 %203, i32 %209
  %211 = shl i32 %210, 1
  %212 = lshr i32 %210, 15
  %213 = xor i32 %212, %201
  %214 = and i32 %213, 1
  %215 = icmp eq i32 %214, 0
  %216 = xor i32 %211, 32773
  %217 = select i1 %215, i32 %211, i32 %216
  %218 = and i32 %217, 65535
  store i32 %218, i32* @crc, align 4, !tbaa !18
  %219 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %199, i32 %201, i32 2) #21
  store %struct.BF_PartHolder* %219, %struct.BF_PartHolder** @headerPH, align 8, !tbaa !7
  %220 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @frameSIPH, align 8, !tbaa !7
  %221 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %220, i64 0, i32 1
  %222 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %221, align 8, !tbaa !41
  %223 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %222, i64 0, i32 0
  store i32 0, i32* %223, align 8, !tbaa !37
  %224 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 46
  %225 = load i32, i32* %224, align 4, !tbaa !126
  %226 = icmp sgt i32 %225, 0
  br i1 %226, label %227, label %248

227:                                              ; preds = %41
  %228 = zext i32 %225 to i64
  %229 = add nsw i64 %228, -1
  %230 = and i64 %228, 3
  %231 = icmp ult i64 %229, 3
  br i1 %231, label %234, label %232

232:                                              ; preds = %227
  %233 = sub nsw i64 %228, %230
  br label %260

234:                                              ; preds = %260, %227
  %235 = phi i64 [ 0, %227 ], [ %286, %260 ]
  %236 = icmp eq i64 %230, 0
  br i1 %236, label %248, label %237

237:                                              ; preds = %237, %234
  %238 = phi i64 [ %245, %237 ], [ %235, %234 ]
  %239 = phi i64 [ %246, %237 ], [ %230, %234 ]
  %240 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* @channelSIPH, i64 0, i64 %238
  %241 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %240, align 8, !tbaa !7
  %242 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %241, i64 0, i32 1
  %243 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %242, align 8, !tbaa !41
  %244 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %243, i64 0, i32 0
  store i32 0, i32* %244, align 8, !tbaa !37
  %245 = add nuw nsw i64 %238, 1
  %246 = add i64 %239, -1
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %248, label %237, !llvm.loop !127

248:                                              ; preds = %237, %234, %41
  %249 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 45
  %250 = load i32, i32* %249, align 8, !tbaa !95
  %251 = icmp sgt i32 %250, 0
  br i1 %251, label %252, label %337

252:                                              ; preds = %248
  %253 = zext i32 %250 to i64
  %254 = zext i32 %225 to i64
  %255 = add nsw i64 %254, -1
  %256 = and i64 %254, 3
  %257 = icmp ult i64 %255, 3
  %258 = sub nsw i64 %254, %256
  %259 = icmp eq i64 %256, 0
  br label %289

260:                                              ; preds = %260, %232
  %261 = phi i64 [ 0, %232 ], [ %286, %260 ]
  %262 = phi i64 [ %233, %232 ], [ %287, %260 ]
  %263 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* @channelSIPH, i64 0, i64 %261
  %264 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %263, align 16, !tbaa !7
  %265 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %264, i64 0, i32 1
  %266 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %265, align 8, !tbaa !41
  %267 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %266, i64 0, i32 0
  store i32 0, i32* %267, align 8, !tbaa !37
  %268 = or i64 %261, 1
  %269 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* @channelSIPH, i64 0, i64 %268
  %270 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %269, align 8, !tbaa !7
  %271 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %270, i64 0, i32 1
  %272 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %271, align 8, !tbaa !41
  %273 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %272, i64 0, i32 0
  store i32 0, i32* %273, align 8, !tbaa !37
  %274 = or i64 %261, 2
  %275 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* @channelSIPH, i64 0, i64 %274
  %276 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %275, align 16, !tbaa !7
  %277 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %276, i64 0, i32 1
  %278 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %277, align 8, !tbaa !41
  %279 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %278, i64 0, i32 0
  store i32 0, i32* %279, align 8, !tbaa !37
  %280 = or i64 %261, 3
  %281 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* @channelSIPH, i64 0, i64 %280
  %282 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %281, align 8, !tbaa !7
  %283 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %282, i64 0, i32 1
  %284 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %283, align 8, !tbaa !41
  %285 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %284, i64 0, i32 0
  store i32 0, i32* %285, align 8, !tbaa !37
  %286 = add nuw nsw i64 %261, 4
  %287 = add i64 %262, -4
  %288 = icmp eq i64 %287, 0
  br i1 %288, label %234, label %260

289:                                              ; preds = %334, %252
  %290 = phi i64 [ 0, %252 ], [ %335, %334 ]
  br i1 %226, label %291, label %334

291:                                              ; preds = %289
  br i1 %257, label %321, label %292

292:                                              ; preds = %292, %291
  %293 = phi i64 [ %318, %292 ], [ 0, %291 ]
  %294 = phi i64 [ %319, %292 ], [ %258, %291 ]
  %295 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @spectrumSIPH, i64 0, i64 %290, i64 %293
  %296 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %295, align 16, !tbaa !7
  %297 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %296, i64 0, i32 1
  %298 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %297, align 8, !tbaa !41
  %299 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %298, i64 0, i32 0
  store i32 0, i32* %299, align 8, !tbaa !37
  %300 = or i64 %293, 1
  %301 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @spectrumSIPH, i64 0, i64 %290, i64 %300
  %302 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %301, align 8, !tbaa !7
  %303 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %302, i64 0, i32 1
  %304 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %303, align 8, !tbaa !41
  %305 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %304, i64 0, i32 0
  store i32 0, i32* %305, align 8, !tbaa !37
  %306 = or i64 %293, 2
  %307 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @spectrumSIPH, i64 0, i64 %290, i64 %306
  %308 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %307, align 16, !tbaa !7
  %309 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %308, i64 0, i32 1
  %310 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %309, align 8, !tbaa !41
  %311 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %310, i64 0, i32 0
  store i32 0, i32* %311, align 8, !tbaa !37
  %312 = or i64 %293, 3
  %313 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @spectrumSIPH, i64 0, i64 %290, i64 %312
  %314 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %313, align 8, !tbaa !7
  %315 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %314, i64 0, i32 1
  %316 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %315, align 8, !tbaa !41
  %317 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %316, i64 0, i32 0
  store i32 0, i32* %317, align 8, !tbaa !37
  %318 = add nuw nsw i64 %293, 4
  %319 = add i64 %294, -4
  %320 = icmp eq i64 %319, 0
  br i1 %320, label %321, label %292

321:                                              ; preds = %292, %291
  %322 = phi i64 [ 0, %291 ], [ %318, %292 ]
  br i1 %259, label %334, label %323

323:                                              ; preds = %323, %321
  %324 = phi i64 [ %331, %323 ], [ %322, %321 ]
  %325 = phi i64 [ %332, %323 ], [ %256, %321 ]
  %326 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @spectrumSIPH, i64 0, i64 %290, i64 %324
  %327 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %326, align 8, !tbaa !7
  %328 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %327, i64 0, i32 1
  %329 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %328, align 8, !tbaa !41
  %330 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %329, i64 0, i32 0
  store i32 0, i32* %330, align 8, !tbaa !37
  %331 = add nuw nsw i64 %324, 1
  %332 = add i64 %325, -1
  %333 = icmp eq i64 %332, 0
  br i1 %333, label %334, label %323, !llvm.loop !128

334:                                              ; preds = %323, %321, %289
  %335 = add nuw nsw i64 %290, 1
  %336 = icmp eq i64 %335, %253
  br i1 %336, label %337, label %289

337:                                              ; preds = %334, %248
  %338 = load i32, i32* %47, align 8, !tbaa !115
  %339 = icmp eq i32 %338, 1
  %340 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 0
  %341 = load i32, i32* %340, align 8, !tbaa !129
  %342 = load i32, i32* @crc, align 4, !tbaa !18
  %343 = shl i32 %342, 1
  %344 = lshr i32 %342, 15
  br i1 %339, label %416, label %345

345:                                              ; preds = %337
  %346 = lshr i32 %341, 7
  %347 = xor i32 %344, %346
  %348 = and i32 %347, 1
  %349 = icmp eq i32 %348, 0
  %350 = xor i32 %343, 32773
  %351 = select i1 %349, i32 %343, i32 %350
  %352 = shl i32 %351, 1
  %353 = lshr i32 %351, 15
  %354 = lshr i32 %341, 6
  %355 = xor i32 %353, %354
  %356 = and i32 %355, 1
  %357 = icmp eq i32 %356, 0
  %358 = xor i32 %352, 32773
  %359 = select i1 %357, i32 %352, i32 %358
  %360 = shl i32 %359, 1
  %361 = lshr i32 %359, 15
  %362 = lshr i32 %341, 5
  %363 = xor i32 %361, %362
  %364 = and i32 %363, 1
  %365 = icmp eq i32 %364, 0
  %366 = xor i32 %360, 32773
  %367 = select i1 %365, i32 %360, i32 %366
  %368 = shl i32 %367, 1
  %369 = lshr i32 %367, 15
  %370 = lshr i32 %341, 4
  %371 = xor i32 %369, %370
  %372 = and i32 %371, 1
  %373 = icmp eq i32 %372, 0
  %374 = xor i32 %368, 32773
  %375 = select i1 %373, i32 %368, i32 %374
  %376 = shl i32 %375, 1
  %377 = lshr i32 %375, 15
  %378 = lshr i32 %341, 3
  %379 = xor i32 %377, %378
  %380 = and i32 %379, 1
  %381 = icmp eq i32 %380, 0
  %382 = xor i32 %376, 32773
  %383 = select i1 %381, i32 %376, i32 %382
  %384 = shl i32 %383, 1
  %385 = lshr i32 %383, 15
  %386 = lshr i32 %341, 2
  %387 = xor i32 %385, %386
  %388 = and i32 %387, 1
  %389 = icmp eq i32 %388, 0
  %390 = xor i32 %384, 32773
  %391 = select i1 %389, i32 %384, i32 %390
  %392 = shl i32 %391, 1
  %393 = lshr i32 %391, 15
  %394 = lshr i32 %341, 1
  %395 = xor i32 %393, %394
  %396 = and i32 %395, 1
  %397 = icmp eq i32 %396, 0
  %398 = xor i32 %392, 32773
  %399 = select i1 %397, i32 %392, i32 %398
  %400 = shl i32 %399, 1
  %401 = lshr i32 %399, 15
  %402 = xor i32 %401, %341
  %403 = and i32 %402, 1
  %404 = icmp eq i32 %403, 0
  %405 = xor i32 %400, 32773
  %406 = select i1 %404, i32 %400, i32 %405
  %407 = and i32 %406, 65535
  store i32 %407, i32* @crc, align 4, !tbaa !18
  %408 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %220, i32 %341, i32 8) #21
  store %struct.BF_PartHolder* %408, %struct.BF_PartHolder** @frameSIPH, align 8, !tbaa !7
  %409 = load i32, i32* %224, align 4, !tbaa !126
  %410 = icmp eq i32 %409, 2
  %411 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 1
  %412 = load i32, i32* %411, align 4, !tbaa !131
  %413 = load i32, i32* @crc, align 4, !tbaa !18
  %414 = shl i32 %413, 1
  %415 = lshr i32 %413, 15
  br i1 %410, label %1265, label %1274

416:                                              ; preds = %337
  %417 = lshr i32 %341, 8
  %418 = xor i32 %344, %417
  %419 = and i32 %418, 1
  %420 = icmp eq i32 %419, 0
  %421 = xor i32 %343, 32773
  %422 = select i1 %420, i32 %343, i32 %421
  %423 = shl i32 %422, 1
  %424 = lshr i32 %422, 15
  %425 = lshr i32 %341, 7
  %426 = xor i32 %424, %425
  %427 = and i32 %426, 1
  %428 = icmp eq i32 %427, 0
  %429 = xor i32 %423, 32773
  %430 = select i1 %428, i32 %423, i32 %429
  %431 = shl i32 %430, 1
  %432 = lshr i32 %430, 15
  %433 = lshr i32 %341, 6
  %434 = xor i32 %432, %433
  %435 = and i32 %434, 1
  %436 = icmp eq i32 %435, 0
  %437 = xor i32 %431, 32773
  %438 = select i1 %436, i32 %431, i32 %437
  %439 = shl i32 %438, 1
  %440 = lshr i32 %438, 15
  %441 = lshr i32 %341, 5
  %442 = xor i32 %440, %441
  %443 = and i32 %442, 1
  %444 = icmp eq i32 %443, 0
  %445 = xor i32 %439, 32773
  %446 = select i1 %444, i32 %439, i32 %445
  %447 = shl i32 %446, 1
  %448 = lshr i32 %446, 15
  %449 = lshr i32 %341, 4
  %450 = xor i32 %448, %449
  %451 = and i32 %450, 1
  %452 = icmp eq i32 %451, 0
  %453 = xor i32 %447, 32773
  %454 = select i1 %452, i32 %447, i32 %453
  %455 = shl i32 %454, 1
  %456 = lshr i32 %454, 15
  %457 = lshr i32 %341, 3
  %458 = xor i32 %456, %457
  %459 = and i32 %458, 1
  %460 = icmp eq i32 %459, 0
  %461 = xor i32 %455, 32773
  %462 = select i1 %460, i32 %455, i32 %461
  %463 = shl i32 %462, 1
  %464 = lshr i32 %462, 15
  %465 = lshr i32 %341, 2
  %466 = xor i32 %464, %465
  %467 = and i32 %466, 1
  %468 = icmp eq i32 %467, 0
  %469 = xor i32 %463, 32773
  %470 = select i1 %468, i32 %463, i32 %469
  %471 = shl i32 %470, 1
  %472 = lshr i32 %470, 15
  %473 = lshr i32 %341, 1
  %474 = xor i32 %472, %473
  %475 = and i32 %474, 1
  %476 = icmp eq i32 %475, 0
  %477 = xor i32 %471, 32773
  %478 = select i1 %476, i32 %471, i32 %477
  %479 = shl i32 %478, 1
  %480 = lshr i32 %478, 15
  %481 = xor i32 %480, %341
  %482 = and i32 %481, 1
  %483 = icmp eq i32 %482, 0
  %484 = xor i32 %479, 32773
  %485 = select i1 %483, i32 %479, i32 %484
  %486 = and i32 %485, 65535
  store i32 %486, i32* @crc, align 4, !tbaa !18
  %487 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %220, i32 %341, i32 9) #21
  store %struct.BF_PartHolder* %487, %struct.BF_PartHolder** @frameSIPH, align 8, !tbaa !7
  %488 = load i32, i32* %224, align 4, !tbaa !126
  %489 = icmp eq i32 %488, 2
  %490 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 1
  %491 = load i32, i32* %490, align 4, !tbaa !131
  %492 = load i32, i32* @crc, align 4, !tbaa !18
  %493 = shl i32 %492, 1
  %494 = lshr i32 %492, 15
  br i1 %489, label %512, label %495

495:                                              ; preds = %416
  %496 = lshr i32 %491, 4
  %497 = xor i32 %494, %496
  %498 = and i32 %497, 1
  %499 = icmp eq i32 %498, 0
  %500 = xor i32 %493, 32773
  %501 = select i1 %499, i32 %493, i32 %500
  %502 = shl i32 %501, 1
  %503 = lshr i32 %501, 15
  %504 = lshr i32 %491, 3
  %505 = xor i32 %503, %504
  %506 = and i32 %505, 1
  %507 = icmp eq i32 %506, 0
  %508 = xor i32 %502, 32773
  %509 = select i1 %507, i32 %502, i32 %508
  %510 = shl i32 %509, 1
  %511 = lshr i32 %509, 15
  br label %512

512:                                              ; preds = %495, %416
  %513 = phi i32 [ %511, %495 ], [ %494, %416 ]
  %514 = phi i32 [ %510, %495 ], [ %493, %416 ]
  %515 = phi i32 [ 5, %495 ], [ 3, %416 ]
  %516 = lshr i32 %491, 2
  %517 = xor i32 %513, %516
  %518 = and i32 %517, 1
  %519 = icmp eq i32 %518, 0
  %520 = xor i32 %514, 32773
  %521 = select i1 %519, i32 %514, i32 %520
  %522 = shl i32 %521, 1
  %523 = lshr i32 %521, 15
  %524 = lshr i32 %491, 1
  %525 = xor i32 %523, %524
  %526 = and i32 %525, 1
  %527 = icmp eq i32 %526, 0
  %528 = xor i32 %522, 32773
  %529 = select i1 %527, i32 %522, i32 %528
  %530 = shl i32 %529, 1
  %531 = lshr i32 %529, 15
  %532 = xor i32 %531, %491
  %533 = and i32 %532, 1
  %534 = icmp eq i32 %533, 0
  %535 = xor i32 %530, 32773
  %536 = select i1 %534, i32 %530, i32 %535
  %537 = and i32 %536, 65535
  store i32 %537, i32* @crc, align 4, !tbaa !18
  %538 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %487, i32 %491, i32 %515) #21
  store %struct.BF_PartHolder* %538, %struct.BF_PartHolder** @frameSIPH, align 8, !tbaa !7
  %539 = load i32, i32* %224, align 4, !tbaa !126
  %540 = icmp sgt i32 %539, 0
  br i1 %540, label %541, label %597

541:                                              ; preds = %541, %512
  %542 = phi i64 [ %593, %541 ], [ 0, %512 ]
  %543 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* @channelSIPH, i64 0, i64 %542
  %544 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %543, align 8, !tbaa !7
  %545 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 3, i64 %542, i64 0
  %546 = load i32, i32* %545, align 4, !tbaa !18
  %547 = load i32, i32* @crc, align 4, !tbaa !18
  %548 = shl i32 %547, 1
  %549 = lshr i32 %547, 15
  %550 = xor i32 %549, %546
  %551 = and i32 %550, 1
  %552 = icmp eq i32 %551, 0
  %553 = xor i32 %548, 32773
  %554 = select i1 %552, i32 %548, i32 %553
  %555 = and i32 %554, 65535
  store i32 %555, i32* @crc, align 4, !tbaa !18
  %556 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %544, i32 %546, i32 1) #21
  store %struct.BF_PartHolder* %556, %struct.BF_PartHolder** %543, align 8, !tbaa !7
  %557 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 3, i64 %542, i64 1
  %558 = load i32, i32* %557, align 4, !tbaa !18
  %559 = load i32, i32* @crc, align 4, !tbaa !18
  %560 = shl i32 %559, 1
  %561 = lshr i32 %559, 15
  %562 = xor i32 %561, %558
  %563 = and i32 %562, 1
  %564 = icmp eq i32 %563, 0
  %565 = xor i32 %560, 32773
  %566 = select i1 %564, i32 %560, i32 %565
  %567 = and i32 %566, 65535
  store i32 %567, i32* @crc, align 4, !tbaa !18
  %568 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %556, i32 %558, i32 1) #21
  store %struct.BF_PartHolder* %568, %struct.BF_PartHolder** %543, align 8, !tbaa !7
  %569 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 3, i64 %542, i64 2
  %570 = load i32, i32* %569, align 4, !tbaa !18
  %571 = load i32, i32* @crc, align 4, !tbaa !18
  %572 = shl i32 %571, 1
  %573 = lshr i32 %571, 15
  %574 = xor i32 %573, %570
  %575 = and i32 %574, 1
  %576 = icmp eq i32 %575, 0
  %577 = xor i32 %572, 32773
  %578 = select i1 %576, i32 %572, i32 %577
  %579 = and i32 %578, 65535
  store i32 %579, i32* @crc, align 4, !tbaa !18
  %580 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %568, i32 %570, i32 1) #21
  store %struct.BF_PartHolder* %580, %struct.BF_PartHolder** %543, align 8, !tbaa !7
  %581 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 3, i64 %542, i64 3
  %582 = load i32, i32* %581, align 4, !tbaa !18
  %583 = load i32, i32* @crc, align 4, !tbaa !18
  %584 = shl i32 %583, 1
  %585 = lshr i32 %583, 15
  %586 = xor i32 %585, %582
  %587 = and i32 %586, 1
  %588 = icmp eq i32 %587, 0
  %589 = xor i32 %584, 32773
  %590 = select i1 %588, i32 %584, i32 %589
  %591 = and i32 %590, 65535
  store i32 %591, i32* @crc, align 4, !tbaa !18
  %592 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %580, i32 %582, i32 1) #21
  store %struct.BF_PartHolder* %592, %struct.BF_PartHolder** %543, align 8, !tbaa !7
  %593 = add nuw nsw i64 %542, 1
  %594 = load i32, i32* %224, align 4, !tbaa !126
  %595 = sext i32 %594 to i64
  %596 = icmp slt i64 %593, %595
  br i1 %596, label %541, label %597

597:                                              ; preds = %541, %512
  %598 = phi i32 [ %539, %512 ], [ %594, %541 ]
  br label %599

599:                                              ; preds = %1262, %597
  %600 = phi i32 [ %1263, %1262 ], [ %598, %597 ]
  %601 = phi i64 [ 1, %1262 ], [ 0, %597 ]
  %602 = icmp sgt i32 %600, 0
  br i1 %602, label %603, label %1262

603:                                              ; preds = %1220, %599
  %604 = phi i64 [ %1258, %1220 ], [ 0, %599 ]
  %605 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @spectrumSIPH, i64 0, i64 %601, i64 %604
  %606 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %605, align 8, !tbaa !7
  %607 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 %601, i32 0, i64 %604, i32 0, i32 0
  %608 = load i32, i32* %607, align 8, !tbaa !132
  %609 = load i32, i32* @crc, align 4, !tbaa !18
  %610 = shl i32 %609, 1
  %611 = lshr i32 %609, 15
  %612 = lshr i32 %608, 11
  %613 = xor i32 %611, %612
  %614 = and i32 %613, 1
  %615 = icmp eq i32 %614, 0
  %616 = xor i32 %610, 32773
  %617 = select i1 %615, i32 %610, i32 %616
  %618 = shl i32 %617, 1
  %619 = lshr i32 %617, 15
  %620 = lshr i32 %608, 10
  %621 = xor i32 %619, %620
  %622 = and i32 %621, 1
  %623 = icmp eq i32 %622, 0
  %624 = xor i32 %618, 32773
  %625 = select i1 %623, i32 %618, i32 %624
  %626 = shl i32 %625, 1
  %627 = lshr i32 %625, 15
  %628 = lshr i32 %608, 9
  %629 = xor i32 %627, %628
  %630 = and i32 %629, 1
  %631 = icmp eq i32 %630, 0
  %632 = xor i32 %626, 32773
  %633 = select i1 %631, i32 %626, i32 %632
  %634 = shl i32 %633, 1
  %635 = lshr i32 %633, 15
  %636 = lshr i32 %608, 8
  %637 = xor i32 %635, %636
  %638 = and i32 %637, 1
  %639 = icmp eq i32 %638, 0
  %640 = xor i32 %634, 32773
  %641 = select i1 %639, i32 %634, i32 %640
  %642 = shl i32 %641, 1
  %643 = lshr i32 %641, 15
  %644 = lshr i32 %608, 7
  %645 = xor i32 %643, %644
  %646 = and i32 %645, 1
  %647 = icmp eq i32 %646, 0
  %648 = xor i32 %642, 32773
  %649 = select i1 %647, i32 %642, i32 %648
  %650 = shl i32 %649, 1
  %651 = lshr i32 %649, 15
  %652 = lshr i32 %608, 6
  %653 = xor i32 %651, %652
  %654 = and i32 %653, 1
  %655 = icmp eq i32 %654, 0
  %656 = xor i32 %650, 32773
  %657 = select i1 %655, i32 %650, i32 %656
  %658 = shl i32 %657, 1
  %659 = lshr i32 %657, 15
  %660 = lshr i32 %608, 5
  %661 = xor i32 %659, %660
  %662 = and i32 %661, 1
  %663 = icmp eq i32 %662, 0
  %664 = xor i32 %658, 32773
  %665 = select i1 %663, i32 %658, i32 %664
  %666 = shl i32 %665, 1
  %667 = lshr i32 %665, 15
  %668 = lshr i32 %608, 4
  %669 = xor i32 %667, %668
  %670 = and i32 %669, 1
  %671 = icmp eq i32 %670, 0
  %672 = xor i32 %666, 32773
  %673 = select i1 %671, i32 %666, i32 %672
  %674 = shl i32 %673, 1
  %675 = lshr i32 %673, 15
  %676 = lshr i32 %608, 3
  %677 = xor i32 %675, %676
  %678 = and i32 %677, 1
  %679 = icmp eq i32 %678, 0
  %680 = xor i32 %674, 32773
  %681 = select i1 %679, i32 %674, i32 %680
  %682 = shl i32 %681, 1
  %683 = lshr i32 %681, 15
  %684 = lshr i32 %608, 2
  %685 = xor i32 %683, %684
  %686 = and i32 %685, 1
  %687 = icmp eq i32 %686, 0
  %688 = xor i32 %682, 32773
  %689 = select i1 %687, i32 %682, i32 %688
  %690 = shl i32 %689, 1
  %691 = lshr i32 %689, 15
  %692 = lshr i32 %608, 1
  %693 = xor i32 %691, %692
  %694 = and i32 %693, 1
  %695 = icmp eq i32 %694, 0
  %696 = xor i32 %690, 32773
  %697 = select i1 %695, i32 %690, i32 %696
  %698 = shl i32 %697, 1
  %699 = lshr i32 %697, 15
  %700 = xor i32 %699, %608
  %701 = and i32 %700, 1
  %702 = icmp eq i32 %701, 0
  %703 = xor i32 %698, 32773
  %704 = select i1 %702, i32 %698, i32 %703
  %705 = and i32 %704, 65535
  store i32 %705, i32* @crc, align 4, !tbaa !18
  %706 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %606, i32 %608, i32 12) #21
  store %struct.BF_PartHolder* %706, %struct.BF_PartHolder** %605, align 8, !tbaa !7
  %707 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 %601, i32 0, i64 %604, i32 0, i32 1
  %708 = load i32, i32* %707, align 4, !tbaa !134
  %709 = load i32, i32* @crc, align 4, !tbaa !18
  %710 = shl i32 %709, 1
  %711 = lshr i32 %709, 15
  %712 = lshr i32 %708, 8
  %713 = xor i32 %711, %712
  %714 = and i32 %713, 1
  %715 = icmp eq i32 %714, 0
  %716 = xor i32 %710, 32773
  %717 = select i1 %715, i32 %710, i32 %716
  %718 = shl i32 %717, 1
  %719 = lshr i32 %717, 15
  %720 = lshr i32 %708, 7
  %721 = xor i32 %719, %720
  %722 = and i32 %721, 1
  %723 = icmp eq i32 %722, 0
  %724 = xor i32 %718, 32773
  %725 = select i1 %723, i32 %718, i32 %724
  %726 = shl i32 %725, 1
  %727 = lshr i32 %725, 15
  %728 = lshr i32 %708, 6
  %729 = xor i32 %727, %728
  %730 = and i32 %729, 1
  %731 = icmp eq i32 %730, 0
  %732 = xor i32 %726, 32773
  %733 = select i1 %731, i32 %726, i32 %732
  %734 = shl i32 %733, 1
  %735 = lshr i32 %733, 15
  %736 = lshr i32 %708, 5
  %737 = xor i32 %735, %736
  %738 = and i32 %737, 1
  %739 = icmp eq i32 %738, 0
  %740 = xor i32 %734, 32773
  %741 = select i1 %739, i32 %734, i32 %740
  %742 = shl i32 %741, 1
  %743 = lshr i32 %741, 15
  %744 = lshr i32 %708, 4
  %745 = xor i32 %743, %744
  %746 = and i32 %745, 1
  %747 = icmp eq i32 %746, 0
  %748 = xor i32 %742, 32773
  %749 = select i1 %747, i32 %742, i32 %748
  %750 = shl i32 %749, 1
  %751 = lshr i32 %749, 15
  %752 = lshr i32 %708, 3
  %753 = xor i32 %751, %752
  %754 = and i32 %753, 1
  %755 = icmp eq i32 %754, 0
  %756 = xor i32 %750, 32773
  %757 = select i1 %755, i32 %750, i32 %756
  %758 = shl i32 %757, 1
  %759 = lshr i32 %757, 15
  %760 = lshr i32 %708, 2
  %761 = xor i32 %759, %760
  %762 = and i32 %761, 1
  %763 = icmp eq i32 %762, 0
  %764 = xor i32 %758, 32773
  %765 = select i1 %763, i32 %758, i32 %764
  %766 = shl i32 %765, 1
  %767 = lshr i32 %765, 15
  %768 = lshr i32 %708, 1
  %769 = xor i32 %767, %768
  %770 = and i32 %769, 1
  %771 = icmp eq i32 %770, 0
  %772 = xor i32 %766, 32773
  %773 = select i1 %771, i32 %766, i32 %772
  %774 = shl i32 %773, 1
  %775 = lshr i32 %773, 15
  %776 = xor i32 %775, %708
  %777 = and i32 %776, 1
  %778 = icmp eq i32 %777, 0
  %779 = xor i32 %774, 32773
  %780 = select i1 %778, i32 %774, i32 %779
  %781 = and i32 %780, 65535
  store i32 %781, i32* @crc, align 4, !tbaa !18
  %782 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %706, i32 %708, i32 9) #21
  store %struct.BF_PartHolder* %782, %struct.BF_PartHolder** %605, align 8, !tbaa !7
  %783 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 %601, i32 0, i64 %604, i32 0, i32 3
  %784 = load i32, i32* %783, align 4, !tbaa !135
  %785 = load i32, i32* @crc, align 4, !tbaa !18
  %786 = shl i32 %785, 1
  %787 = lshr i32 %785, 15
  %788 = lshr i32 %784, 7
  %789 = xor i32 %787, %788
  %790 = and i32 %789, 1
  %791 = icmp eq i32 %790, 0
  %792 = xor i32 %786, 32773
  %793 = select i1 %791, i32 %786, i32 %792
  %794 = shl i32 %793, 1
  %795 = lshr i32 %793, 15
  %796 = lshr i32 %784, 6
  %797 = xor i32 %795, %796
  %798 = and i32 %797, 1
  %799 = icmp eq i32 %798, 0
  %800 = xor i32 %794, 32773
  %801 = select i1 %799, i32 %794, i32 %800
  %802 = shl i32 %801, 1
  %803 = lshr i32 %801, 15
  %804 = lshr i32 %784, 5
  %805 = xor i32 %803, %804
  %806 = and i32 %805, 1
  %807 = icmp eq i32 %806, 0
  %808 = xor i32 %802, 32773
  %809 = select i1 %807, i32 %802, i32 %808
  %810 = shl i32 %809, 1
  %811 = lshr i32 %809, 15
  %812 = lshr i32 %784, 4
  %813 = xor i32 %811, %812
  %814 = and i32 %813, 1
  %815 = icmp eq i32 %814, 0
  %816 = xor i32 %810, 32773
  %817 = select i1 %815, i32 %810, i32 %816
  %818 = shl i32 %817, 1
  %819 = lshr i32 %817, 15
  %820 = lshr i32 %784, 3
  %821 = xor i32 %819, %820
  %822 = and i32 %821, 1
  %823 = icmp eq i32 %822, 0
  %824 = xor i32 %818, 32773
  %825 = select i1 %823, i32 %818, i32 %824
  %826 = shl i32 %825, 1
  %827 = lshr i32 %825, 15
  %828 = lshr i32 %784, 2
  %829 = xor i32 %827, %828
  %830 = and i32 %829, 1
  %831 = icmp eq i32 %830, 0
  %832 = xor i32 %826, 32773
  %833 = select i1 %831, i32 %826, i32 %832
  %834 = shl i32 %833, 1
  %835 = lshr i32 %833, 15
  %836 = lshr i32 %784, 1
  %837 = xor i32 %835, %836
  %838 = and i32 %837, 1
  %839 = icmp eq i32 %838, 0
  %840 = xor i32 %834, 32773
  %841 = select i1 %839, i32 %834, i32 %840
  %842 = shl i32 %841, 1
  %843 = lshr i32 %841, 15
  %844 = xor i32 %843, %784
  %845 = and i32 %844, 1
  %846 = icmp eq i32 %845, 0
  %847 = xor i32 %842, 32773
  %848 = select i1 %846, i32 %842, i32 %847
  %849 = and i32 %848, 65535
  store i32 %849, i32* @crc, align 4, !tbaa !18
  %850 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %782, i32 %784, i32 8) #21
  store %struct.BF_PartHolder* %850, %struct.BF_PartHolder** %605, align 8, !tbaa !7
  %851 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 %601, i32 0, i64 %604, i32 0, i32 4
  %852 = load i32, i32* %851, align 8, !tbaa !136
  %853 = load i32, i32* @crc, align 4, !tbaa !18
  %854 = shl i32 %853, 1
  %855 = lshr i32 %853, 15
  %856 = lshr i32 %852, 3
  %857 = xor i32 %855, %856
  %858 = and i32 %857, 1
  %859 = icmp eq i32 %858, 0
  %860 = xor i32 %854, 32773
  %861 = select i1 %859, i32 %854, i32 %860
  %862 = shl i32 %861, 1
  %863 = lshr i32 %861, 15
  %864 = lshr i32 %852, 2
  %865 = xor i32 %863, %864
  %866 = and i32 %865, 1
  %867 = icmp eq i32 %866, 0
  %868 = xor i32 %862, 32773
  %869 = select i1 %867, i32 %862, i32 %868
  %870 = shl i32 %869, 1
  %871 = lshr i32 %869, 15
  %872 = lshr i32 %852, 1
  %873 = xor i32 %871, %872
  %874 = and i32 %873, 1
  %875 = icmp eq i32 %874, 0
  %876 = xor i32 %870, 32773
  %877 = select i1 %875, i32 %870, i32 %876
  %878 = shl i32 %877, 1
  %879 = lshr i32 %877, 15
  %880 = xor i32 %879, %852
  %881 = and i32 %880, 1
  %882 = icmp eq i32 %881, 0
  %883 = xor i32 %878, 32773
  %884 = select i1 %882, i32 %878, i32 %883
  %885 = and i32 %884, 65535
  store i32 %885, i32* @crc, align 4, !tbaa !18
  %886 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %850, i32 %852, i32 4) #21
  store %struct.BF_PartHolder* %886, %struct.BF_PartHolder** %605, align 8, !tbaa !7
  %887 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 %601, i32 0, i64 %604, i32 0, i32 5
  %888 = load i32, i32* %887, align 4, !tbaa !137
  %889 = load i32, i32* @crc, align 4, !tbaa !18
  %890 = shl i32 %889, 1
  %891 = lshr i32 %889, 15
  %892 = xor i32 %891, %888
  %893 = and i32 %892, 1
  %894 = icmp eq i32 %893, 0
  %895 = xor i32 %890, 32773
  %896 = select i1 %894, i32 %890, i32 %895
  %897 = and i32 %896, 65535
  store i32 %897, i32* @crc, align 4, !tbaa !18
  %898 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %886, i32 %888, i32 1) #21
  store %struct.BF_PartHolder* %898, %struct.BF_PartHolder** %605, align 8, !tbaa !7
  %899 = load i32, i32* %887, align 4, !tbaa !137
  %900 = icmp eq i32 %899, 0
  br i1 %900, label %1106, label %901

901:                                              ; preds = %603
  %902 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 %601, i32 0, i64 %604, i32 0, i32 6
  %903 = load i32, i32* %902, align 8, !tbaa !138
  %904 = load i32, i32* @crc, align 4, !tbaa !18
  %905 = shl i32 %904, 1
  %906 = lshr i32 %904, 15
  %907 = lshr i32 %903, 1
  %908 = xor i32 %906, %907
  %909 = and i32 %908, 1
  %910 = icmp eq i32 %909, 0
  %911 = xor i32 %905, 32773
  %912 = select i1 %910, i32 %905, i32 %911
  %913 = shl i32 %912, 1
  %914 = lshr i32 %912, 15
  %915 = xor i32 %914, %903
  %916 = and i32 %915, 1
  %917 = icmp eq i32 %916, 0
  %918 = xor i32 %913, 32773
  %919 = select i1 %917, i32 %913, i32 %918
  %920 = and i32 %919, 65535
  store i32 %920, i32* @crc, align 4, !tbaa !18
  %921 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %898, i32 %903, i32 2) #21
  store %struct.BF_PartHolder* %921, %struct.BF_PartHolder** %605, align 8, !tbaa !7
  %922 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 %601, i32 0, i64 %604, i32 0, i32 7
  %923 = load i32, i32* %922, align 4, !tbaa !139
  %924 = load i32, i32* @crc, align 4, !tbaa !18
  %925 = shl i32 %924, 1
  %926 = lshr i32 %924, 15
  %927 = xor i32 %926, %923
  %928 = and i32 %927, 1
  %929 = icmp eq i32 %928, 0
  %930 = xor i32 %925, 32773
  %931 = select i1 %929, i32 %925, i32 %930
  %932 = and i32 %931, 65535
  store i32 %932, i32* @crc, align 4, !tbaa !18
  %933 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %921, i32 %923, i32 1) #21
  store %struct.BF_PartHolder* %933, %struct.BF_PartHolder** %605, align 8, !tbaa !7
  %934 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 %601, i32 0, i64 %604, i32 0, i32 8, i64 0
  %935 = load i32, i32* %934, align 4, !tbaa !18
  %936 = load i32, i32* @crc, align 4, !tbaa !18
  %937 = shl i32 %936, 1
  %938 = lshr i32 %936, 15
  %939 = lshr i32 %935, 4
  %940 = xor i32 %938, %939
  %941 = and i32 %940, 1
  %942 = icmp eq i32 %941, 0
  %943 = xor i32 %937, 32773
  %944 = select i1 %942, i32 %937, i32 %943
  %945 = shl i32 %944, 1
  %946 = lshr i32 %944, 15
  %947 = lshr i32 %935, 3
  %948 = xor i32 %946, %947
  %949 = and i32 %948, 1
  %950 = icmp eq i32 %949, 0
  %951 = xor i32 %945, 32773
  %952 = select i1 %950, i32 %945, i32 %951
  %953 = shl i32 %952, 1
  %954 = lshr i32 %952, 15
  %955 = lshr i32 %935, 2
  %956 = xor i32 %954, %955
  %957 = and i32 %956, 1
  %958 = icmp eq i32 %957, 0
  %959 = xor i32 %953, 32773
  %960 = select i1 %958, i32 %953, i32 %959
  %961 = shl i32 %960, 1
  %962 = lshr i32 %960, 15
  %963 = lshr i32 %935, 1
  %964 = xor i32 %962, %963
  %965 = and i32 %964, 1
  %966 = icmp eq i32 %965, 0
  %967 = xor i32 %961, 32773
  %968 = select i1 %966, i32 %961, i32 %967
  %969 = shl i32 %968, 1
  %970 = lshr i32 %968, 15
  %971 = xor i32 %970, %935
  %972 = and i32 %971, 1
  %973 = icmp eq i32 %972, 0
  %974 = xor i32 %969, 32773
  %975 = select i1 %973, i32 %969, i32 %974
  %976 = and i32 %975, 65535
  store i32 %976, i32* @crc, align 4, !tbaa !18
  %977 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %933, i32 %935, i32 5) #21
  store %struct.BF_PartHolder* %977, %struct.BF_PartHolder** %605, align 8, !tbaa !7
  %978 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 %601, i32 0, i64 %604, i32 0, i32 8, i64 1
  %979 = load i32, i32* %978, align 4, !tbaa !18
  %980 = load i32, i32* @crc, align 4, !tbaa !18
  %981 = shl i32 %980, 1
  %982 = lshr i32 %980, 15
  %983 = lshr i32 %979, 4
  %984 = xor i32 %982, %983
  %985 = and i32 %984, 1
  %986 = icmp eq i32 %985, 0
  %987 = xor i32 %981, 32773
  %988 = select i1 %986, i32 %981, i32 %987
  %989 = shl i32 %988, 1
  %990 = lshr i32 %988, 15
  %991 = lshr i32 %979, 3
  %992 = xor i32 %990, %991
  %993 = and i32 %992, 1
  %994 = icmp eq i32 %993, 0
  %995 = xor i32 %989, 32773
  %996 = select i1 %994, i32 %989, i32 %995
  %997 = shl i32 %996, 1
  %998 = lshr i32 %996, 15
  %999 = lshr i32 %979, 2
  %1000 = xor i32 %998, %999
  %1001 = and i32 %1000, 1
  %1002 = icmp eq i32 %1001, 0
  %1003 = xor i32 %997, 32773
  %1004 = select i1 %1002, i32 %997, i32 %1003
  %1005 = shl i32 %1004, 1
  %1006 = lshr i32 %1004, 15
  %1007 = lshr i32 %979, 1
  %1008 = xor i32 %1006, %1007
  %1009 = and i32 %1008, 1
  %1010 = icmp eq i32 %1009, 0
  %1011 = xor i32 %1005, 32773
  %1012 = select i1 %1010, i32 %1005, i32 %1011
  %1013 = shl i32 %1012, 1
  %1014 = lshr i32 %1012, 15
  %1015 = xor i32 %1014, %979
  %1016 = and i32 %1015, 1
  %1017 = icmp eq i32 %1016, 0
  %1018 = xor i32 %1013, 32773
  %1019 = select i1 %1017, i32 %1013, i32 %1018
  %1020 = and i32 %1019, 65535
  store i32 %1020, i32* @crc, align 4, !tbaa !18
  %1021 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %977, i32 %979, i32 5) #21
  store %struct.BF_PartHolder* %1021, %struct.BF_PartHolder** %605, align 8, !tbaa !7
  %1022 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 %601, i32 0, i64 %604, i32 0, i32 9, i64 0
  %1023 = load i32, i32* %1022, align 4, !tbaa !18
  %1024 = load i32, i32* @crc, align 4, !tbaa !18
  %1025 = shl i32 %1024, 1
  %1026 = lshr i32 %1024, 15
  %1027 = lshr i32 %1023, 2
  %1028 = xor i32 %1026, %1027
  %1029 = and i32 %1028, 1
  %1030 = icmp eq i32 %1029, 0
  %1031 = xor i32 %1025, 32773
  %1032 = select i1 %1030, i32 %1025, i32 %1031
  %1033 = shl i32 %1032, 1
  %1034 = lshr i32 %1032, 15
  %1035 = lshr i32 %1023, 1
  %1036 = xor i32 %1034, %1035
  %1037 = and i32 %1036, 1
  %1038 = icmp eq i32 %1037, 0
  %1039 = xor i32 %1033, 32773
  %1040 = select i1 %1038, i32 %1033, i32 %1039
  %1041 = shl i32 %1040, 1
  %1042 = lshr i32 %1040, 15
  %1043 = xor i32 %1042, %1023
  %1044 = and i32 %1043, 1
  %1045 = icmp eq i32 %1044, 0
  %1046 = xor i32 %1041, 32773
  %1047 = select i1 %1045, i32 %1041, i32 %1046
  %1048 = and i32 %1047, 65535
  store i32 %1048, i32* @crc, align 4, !tbaa !18
  %1049 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %1021, i32 %1023, i32 3) #21
  store %struct.BF_PartHolder* %1049, %struct.BF_PartHolder** %605, align 8, !tbaa !7
  %1050 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 %601, i32 0, i64 %604, i32 0, i32 9, i64 1
  %1051 = load i32, i32* %1050, align 4, !tbaa !18
  %1052 = load i32, i32* @crc, align 4, !tbaa !18
  %1053 = shl i32 %1052, 1
  %1054 = lshr i32 %1052, 15
  %1055 = lshr i32 %1051, 2
  %1056 = xor i32 %1054, %1055
  %1057 = and i32 %1056, 1
  %1058 = icmp eq i32 %1057, 0
  %1059 = xor i32 %1053, 32773
  %1060 = select i1 %1058, i32 %1053, i32 %1059
  %1061 = shl i32 %1060, 1
  %1062 = lshr i32 %1060, 15
  %1063 = lshr i32 %1051, 1
  %1064 = xor i32 %1062, %1063
  %1065 = and i32 %1064, 1
  %1066 = icmp eq i32 %1065, 0
  %1067 = xor i32 %1061, 32773
  %1068 = select i1 %1066, i32 %1061, i32 %1067
  %1069 = shl i32 %1068, 1
  %1070 = lshr i32 %1068, 15
  %1071 = xor i32 %1070, %1051
  %1072 = and i32 %1071, 1
  %1073 = icmp eq i32 %1072, 0
  %1074 = xor i32 %1069, 32773
  %1075 = select i1 %1073, i32 %1069, i32 %1074
  %1076 = and i32 %1075, 65535
  store i32 %1076, i32* @crc, align 4, !tbaa !18
  %1077 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %1049, i32 %1051, i32 3) #21
  store %struct.BF_PartHolder* %1077, %struct.BF_PartHolder** %605, align 8, !tbaa !7
  %1078 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 %601, i32 0, i64 %604, i32 0, i32 9, i64 2
  %1079 = load i32, i32* %1078, align 4, !tbaa !18
  %1080 = load i32, i32* @crc, align 4, !tbaa !18
  %1081 = shl i32 %1080, 1
  %1082 = lshr i32 %1080, 15
  %1083 = lshr i32 %1079, 2
  %1084 = xor i32 %1082, %1083
  %1085 = and i32 %1084, 1
  %1086 = icmp eq i32 %1085, 0
  %1087 = xor i32 %1081, 32773
  %1088 = select i1 %1086, i32 %1081, i32 %1087
  %1089 = shl i32 %1088, 1
  %1090 = lshr i32 %1088, 15
  %1091 = lshr i32 %1079, 1
  %1092 = xor i32 %1090, %1091
  %1093 = and i32 %1092, 1
  %1094 = icmp eq i32 %1093, 0
  %1095 = xor i32 %1089, 32773
  %1096 = select i1 %1094, i32 %1089, i32 %1095
  %1097 = shl i32 %1096, 1
  %1098 = lshr i32 %1096, 15
  %1099 = xor i32 %1098, %1079
  %1100 = and i32 %1099, 1
  %1101 = icmp eq i32 %1100, 0
  %1102 = xor i32 %1097, 32773
  %1103 = select i1 %1101, i32 %1097, i32 %1102
  %1104 = and i32 %1103, 65535
  store i32 %1104, i32* @crc, align 4, !tbaa !18
  %1105 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %1077, i32 %1079, i32 3) #21
  br label %1220

1106:                                             ; preds = %1106, %603
  %1107 = phi i64 [ %1153, %1106 ], [ 0, %603 ]
  %1108 = phi %struct.BF_PartHolder* [ %1152, %1106 ], [ %898, %603 ]
  %1109 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 %601, i32 0, i64 %604, i32 0, i32 8, i64 %1107
  %1110 = load i32, i32* %1109, align 4, !tbaa !18
  %1111 = load i32, i32* @crc, align 4, !tbaa !18
  %1112 = shl i32 %1111, 1
  %1113 = lshr i32 %1111, 15
  %1114 = lshr i32 %1110, 4
  %1115 = xor i32 %1113, %1114
  %1116 = and i32 %1115, 1
  %1117 = icmp eq i32 %1116, 0
  %1118 = xor i32 %1112, 32773
  %1119 = select i1 %1117, i32 %1112, i32 %1118
  %1120 = shl i32 %1119, 1
  %1121 = lshr i32 %1119, 15
  %1122 = lshr i32 %1110, 3
  %1123 = xor i32 %1121, %1122
  %1124 = and i32 %1123, 1
  %1125 = icmp eq i32 %1124, 0
  %1126 = xor i32 %1120, 32773
  %1127 = select i1 %1125, i32 %1120, i32 %1126
  %1128 = shl i32 %1127, 1
  %1129 = lshr i32 %1127, 15
  %1130 = lshr i32 %1110, 2
  %1131 = xor i32 %1129, %1130
  %1132 = and i32 %1131, 1
  %1133 = icmp eq i32 %1132, 0
  %1134 = xor i32 %1128, 32773
  %1135 = select i1 %1133, i32 %1128, i32 %1134
  %1136 = shl i32 %1135, 1
  %1137 = lshr i32 %1135, 15
  %1138 = lshr i32 %1110, 1
  %1139 = xor i32 %1137, %1138
  %1140 = and i32 %1139, 1
  %1141 = icmp eq i32 %1140, 0
  %1142 = xor i32 %1136, 32773
  %1143 = select i1 %1141, i32 %1136, i32 %1142
  %1144 = shl i32 %1143, 1
  %1145 = lshr i32 %1143, 15
  %1146 = xor i32 %1145, %1110
  %1147 = and i32 %1146, 1
  %1148 = icmp eq i32 %1147, 0
  %1149 = xor i32 %1144, 32773
  %1150 = select i1 %1148, i32 %1144, i32 %1149
  %1151 = and i32 %1150, 65535
  store i32 %1151, i32* @crc, align 4, !tbaa !18
  %1152 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %1108, i32 %1110, i32 5) #21
  store %struct.BF_PartHolder* %1152, %struct.BF_PartHolder** %605, align 8, !tbaa !7
  %1153 = add nuw nsw i64 %1107, 1
  %1154 = icmp eq i64 %1153, 3
  br i1 %1154, label %1155, label %1106

1155:                                             ; preds = %1106
  %1156 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 %601, i32 0, i64 %604, i32 0, i32 10
  %1157 = load i32, i32* %1156, align 8, !tbaa !140
  %1158 = load i32, i32* @crc, align 4, !tbaa !18
  %1159 = shl i32 %1158, 1
  %1160 = lshr i32 %1158, 15
  %1161 = lshr i32 %1157, 3
  %1162 = xor i32 %1160, %1161
  %1163 = and i32 %1162, 1
  %1164 = icmp eq i32 %1163, 0
  %1165 = xor i32 %1159, 32773
  %1166 = select i1 %1164, i32 %1159, i32 %1165
  %1167 = shl i32 %1166, 1
  %1168 = lshr i32 %1166, 15
  %1169 = lshr i32 %1157, 2
  %1170 = xor i32 %1168, %1169
  %1171 = and i32 %1170, 1
  %1172 = icmp eq i32 %1171, 0
  %1173 = xor i32 %1167, 32773
  %1174 = select i1 %1172, i32 %1167, i32 %1173
  %1175 = shl i32 %1174, 1
  %1176 = lshr i32 %1174, 15
  %1177 = lshr i32 %1157, 1
  %1178 = xor i32 %1176, %1177
  %1179 = and i32 %1178, 1
  %1180 = icmp eq i32 %1179, 0
  %1181 = xor i32 %1175, 32773
  %1182 = select i1 %1180, i32 %1175, i32 %1181
  %1183 = shl i32 %1182, 1
  %1184 = lshr i32 %1182, 15
  %1185 = xor i32 %1184, %1157
  %1186 = and i32 %1185, 1
  %1187 = icmp eq i32 %1186, 0
  %1188 = xor i32 %1183, 32773
  %1189 = select i1 %1187, i32 %1183, i32 %1188
  %1190 = and i32 %1189, 65535
  store i32 %1190, i32* @crc, align 4, !tbaa !18
  %1191 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %1152, i32 %1157, i32 4) #21
  store %struct.BF_PartHolder* %1191, %struct.BF_PartHolder** %605, align 8, !tbaa !7
  %1192 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 %601, i32 0, i64 %604, i32 0, i32 11
  %1193 = load i32, i32* %1192, align 4, !tbaa !141
  %1194 = load i32, i32* @crc, align 4, !tbaa !18
  %1195 = shl i32 %1194, 1
  %1196 = lshr i32 %1194, 15
  %1197 = lshr i32 %1193, 2
  %1198 = xor i32 %1196, %1197
  %1199 = and i32 %1198, 1
  %1200 = icmp eq i32 %1199, 0
  %1201 = xor i32 %1195, 32773
  %1202 = select i1 %1200, i32 %1195, i32 %1201
  %1203 = shl i32 %1202, 1
  %1204 = lshr i32 %1202, 15
  %1205 = lshr i32 %1193, 1
  %1206 = xor i32 %1204, %1205
  %1207 = and i32 %1206, 1
  %1208 = icmp eq i32 %1207, 0
  %1209 = xor i32 %1203, 32773
  %1210 = select i1 %1208, i32 %1203, i32 %1209
  %1211 = shl i32 %1210, 1
  %1212 = lshr i32 %1210, 15
  %1213 = xor i32 %1212, %1193
  %1214 = and i32 %1213, 1
  %1215 = icmp eq i32 %1214, 0
  %1216 = xor i32 %1211, 32773
  %1217 = select i1 %1215, i32 %1211, i32 %1216
  %1218 = and i32 %1217, 65535
  store i32 %1218, i32* @crc, align 4, !tbaa !18
  %1219 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %1191, i32 %1193, i32 3) #21
  br label %1220

1220:                                             ; preds = %1155, %901
  %1221 = phi %struct.BF_PartHolder* [ %1105, %901 ], [ %1219, %1155 ]
  store %struct.BF_PartHolder* %1221, %struct.BF_PartHolder** %605, align 8, !tbaa !7
  %1222 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 %601, i32 0, i64 %604, i32 0, i32 12
  %1223 = load i32, i32* %1222, align 8, !tbaa !142
  %1224 = load i32, i32* @crc, align 4, !tbaa !18
  %1225 = shl i32 %1224, 1
  %1226 = lshr i32 %1224, 15
  %1227 = xor i32 %1226, %1223
  %1228 = and i32 %1227, 1
  %1229 = icmp eq i32 %1228, 0
  %1230 = xor i32 %1225, 32773
  %1231 = select i1 %1229, i32 %1225, i32 %1230
  %1232 = and i32 %1231, 65535
  store i32 %1232, i32* @crc, align 4, !tbaa !18
  %1233 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %1221, i32 %1223, i32 1) #21
  store %struct.BF_PartHolder* %1233, %struct.BF_PartHolder** %605, align 8, !tbaa !7
  %1234 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 %601, i32 0, i64 %604, i32 0, i32 13
  %1235 = load i32, i32* %1234, align 4, !tbaa !143
  %1236 = load i32, i32* @crc, align 4, !tbaa !18
  %1237 = shl i32 %1236, 1
  %1238 = lshr i32 %1236, 15
  %1239 = xor i32 %1238, %1235
  %1240 = and i32 %1239, 1
  %1241 = icmp eq i32 %1240, 0
  %1242 = xor i32 %1237, 32773
  %1243 = select i1 %1241, i32 %1237, i32 %1242
  %1244 = and i32 %1243, 65535
  store i32 %1244, i32* @crc, align 4, !tbaa !18
  %1245 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %1233, i32 %1235, i32 1) #21
  store %struct.BF_PartHolder* %1245, %struct.BF_PartHolder** %605, align 8, !tbaa !7
  %1246 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 %601, i32 0, i64 %604, i32 0, i32 14
  %1247 = load i32, i32* %1246, align 8, !tbaa !144
  %1248 = load i32, i32* @crc, align 4, !tbaa !18
  %1249 = shl i32 %1248, 1
  %1250 = lshr i32 %1248, 15
  %1251 = xor i32 %1250, %1247
  %1252 = and i32 %1251, 1
  %1253 = icmp eq i32 %1252, 0
  %1254 = xor i32 %1249, 32773
  %1255 = select i1 %1253, i32 %1249, i32 %1254
  %1256 = and i32 %1255, 65535
  store i32 %1256, i32* @crc, align 4, !tbaa !18
  %1257 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %1245, i32 %1247, i32 1) #21
  store %struct.BF_PartHolder* %1257, %struct.BF_PartHolder** %605, align 8, !tbaa !7
  %1258 = add nuw nsw i64 %604, 1
  %1259 = load i32, i32* %224, align 4, !tbaa !126
  %1260 = sext i32 %1259 to i64
  %1261 = icmp slt i64 %1258, %1260
  br i1 %1261, label %603, label %1262

1262:                                             ; preds = %1220, %599
  %1263 = phi i32 [ %600, %599 ], [ %1259, %1220 ]
  %1264 = icmp eq i64 %601, 0
  br i1 %1264, label %599, label %1974

1265:                                             ; preds = %345
  %1266 = lshr i32 %412, 1
  %1267 = xor i32 %415, %1266
  %1268 = and i32 %1267, 1
  %1269 = icmp eq i32 %1268, 0
  %1270 = xor i32 %414, 32773
  %1271 = select i1 %1269, i32 %414, i32 %1270
  %1272 = shl i32 %1271, 1
  %1273 = lshr i32 %1271, 15
  br label %1274

1274:                                             ; preds = %1265, %345
  %1275 = phi i32 [ %1273, %1265 ], [ %415, %345 ]
  %1276 = phi i32 [ %1272, %1265 ], [ %414, %345 ]
  %1277 = phi i32 [ 2, %1265 ], [ 1, %345 ]
  %1278 = xor i32 %1275, %412
  %1279 = and i32 %1278, 1
  %1280 = icmp eq i32 %1279, 0
  %1281 = xor i32 %1276, 32773
  %1282 = select i1 %1280, i32 %1276, i32 %1281
  %1283 = and i32 %1282, 65535
  store i32 %1283, i32* @crc, align 4, !tbaa !18
  %1284 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %408, i32 %412, i32 %1277) #21
  store %struct.BF_PartHolder* %1284, %struct.BF_PartHolder** @frameSIPH, align 8, !tbaa !7
  %1285 = load i32, i32* %224, align 4, !tbaa !126
  %1286 = icmp sgt i32 %1285, 0
  br i1 %1286, label %1287, label %1974

1287:                                             ; preds = %1944, %1274
  %1288 = phi i64 [ %1970, %1944 ], [ 0, %1274 ]
  %1289 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @spectrumSIPH, i64 0, i64 0, i64 %1288
  %1290 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %1289, align 8, !tbaa !7
  %1291 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 0, i32 0, i64 %1288, i32 0, i32 0
  %1292 = load i32, i32* %1291, align 8, !tbaa !132
  %1293 = load i32, i32* @crc, align 4, !tbaa !18
  %1294 = shl i32 %1293, 1
  %1295 = lshr i32 %1293, 15
  %1296 = lshr i32 %1292, 11
  %1297 = xor i32 %1295, %1296
  %1298 = and i32 %1297, 1
  %1299 = icmp eq i32 %1298, 0
  %1300 = xor i32 %1294, 32773
  %1301 = select i1 %1299, i32 %1294, i32 %1300
  %1302 = shl i32 %1301, 1
  %1303 = lshr i32 %1301, 15
  %1304 = lshr i32 %1292, 10
  %1305 = xor i32 %1303, %1304
  %1306 = and i32 %1305, 1
  %1307 = icmp eq i32 %1306, 0
  %1308 = xor i32 %1302, 32773
  %1309 = select i1 %1307, i32 %1302, i32 %1308
  %1310 = shl i32 %1309, 1
  %1311 = lshr i32 %1309, 15
  %1312 = lshr i32 %1292, 9
  %1313 = xor i32 %1311, %1312
  %1314 = and i32 %1313, 1
  %1315 = icmp eq i32 %1314, 0
  %1316 = xor i32 %1310, 32773
  %1317 = select i1 %1315, i32 %1310, i32 %1316
  %1318 = shl i32 %1317, 1
  %1319 = lshr i32 %1317, 15
  %1320 = lshr i32 %1292, 8
  %1321 = xor i32 %1319, %1320
  %1322 = and i32 %1321, 1
  %1323 = icmp eq i32 %1322, 0
  %1324 = xor i32 %1318, 32773
  %1325 = select i1 %1323, i32 %1318, i32 %1324
  %1326 = shl i32 %1325, 1
  %1327 = lshr i32 %1325, 15
  %1328 = lshr i32 %1292, 7
  %1329 = xor i32 %1327, %1328
  %1330 = and i32 %1329, 1
  %1331 = icmp eq i32 %1330, 0
  %1332 = xor i32 %1326, 32773
  %1333 = select i1 %1331, i32 %1326, i32 %1332
  %1334 = shl i32 %1333, 1
  %1335 = lshr i32 %1333, 15
  %1336 = lshr i32 %1292, 6
  %1337 = xor i32 %1335, %1336
  %1338 = and i32 %1337, 1
  %1339 = icmp eq i32 %1338, 0
  %1340 = xor i32 %1334, 32773
  %1341 = select i1 %1339, i32 %1334, i32 %1340
  %1342 = shl i32 %1341, 1
  %1343 = lshr i32 %1341, 15
  %1344 = lshr i32 %1292, 5
  %1345 = xor i32 %1343, %1344
  %1346 = and i32 %1345, 1
  %1347 = icmp eq i32 %1346, 0
  %1348 = xor i32 %1342, 32773
  %1349 = select i1 %1347, i32 %1342, i32 %1348
  %1350 = shl i32 %1349, 1
  %1351 = lshr i32 %1349, 15
  %1352 = lshr i32 %1292, 4
  %1353 = xor i32 %1351, %1352
  %1354 = and i32 %1353, 1
  %1355 = icmp eq i32 %1354, 0
  %1356 = xor i32 %1350, 32773
  %1357 = select i1 %1355, i32 %1350, i32 %1356
  %1358 = shl i32 %1357, 1
  %1359 = lshr i32 %1357, 15
  %1360 = lshr i32 %1292, 3
  %1361 = xor i32 %1359, %1360
  %1362 = and i32 %1361, 1
  %1363 = icmp eq i32 %1362, 0
  %1364 = xor i32 %1358, 32773
  %1365 = select i1 %1363, i32 %1358, i32 %1364
  %1366 = shl i32 %1365, 1
  %1367 = lshr i32 %1365, 15
  %1368 = lshr i32 %1292, 2
  %1369 = xor i32 %1367, %1368
  %1370 = and i32 %1369, 1
  %1371 = icmp eq i32 %1370, 0
  %1372 = xor i32 %1366, 32773
  %1373 = select i1 %1371, i32 %1366, i32 %1372
  %1374 = shl i32 %1373, 1
  %1375 = lshr i32 %1373, 15
  %1376 = lshr i32 %1292, 1
  %1377 = xor i32 %1375, %1376
  %1378 = and i32 %1377, 1
  %1379 = icmp eq i32 %1378, 0
  %1380 = xor i32 %1374, 32773
  %1381 = select i1 %1379, i32 %1374, i32 %1380
  %1382 = shl i32 %1381, 1
  %1383 = lshr i32 %1381, 15
  %1384 = xor i32 %1383, %1292
  %1385 = and i32 %1384, 1
  %1386 = icmp eq i32 %1385, 0
  %1387 = xor i32 %1382, 32773
  %1388 = select i1 %1386, i32 %1382, i32 %1387
  %1389 = and i32 %1388, 65535
  store i32 %1389, i32* @crc, align 4, !tbaa !18
  %1390 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %1290, i32 %1292, i32 12) #21
  store %struct.BF_PartHolder* %1390, %struct.BF_PartHolder** %1289, align 8, !tbaa !7
  %1391 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 0, i32 0, i64 %1288, i32 0, i32 1
  %1392 = load i32, i32* %1391, align 4, !tbaa !134
  %1393 = load i32, i32* @crc, align 4, !tbaa !18
  %1394 = shl i32 %1393, 1
  %1395 = lshr i32 %1393, 15
  %1396 = lshr i32 %1392, 8
  %1397 = xor i32 %1395, %1396
  %1398 = and i32 %1397, 1
  %1399 = icmp eq i32 %1398, 0
  %1400 = xor i32 %1394, 32773
  %1401 = select i1 %1399, i32 %1394, i32 %1400
  %1402 = shl i32 %1401, 1
  %1403 = lshr i32 %1401, 15
  %1404 = lshr i32 %1392, 7
  %1405 = xor i32 %1403, %1404
  %1406 = and i32 %1405, 1
  %1407 = icmp eq i32 %1406, 0
  %1408 = xor i32 %1402, 32773
  %1409 = select i1 %1407, i32 %1402, i32 %1408
  %1410 = shl i32 %1409, 1
  %1411 = lshr i32 %1409, 15
  %1412 = lshr i32 %1392, 6
  %1413 = xor i32 %1411, %1412
  %1414 = and i32 %1413, 1
  %1415 = icmp eq i32 %1414, 0
  %1416 = xor i32 %1410, 32773
  %1417 = select i1 %1415, i32 %1410, i32 %1416
  %1418 = shl i32 %1417, 1
  %1419 = lshr i32 %1417, 15
  %1420 = lshr i32 %1392, 5
  %1421 = xor i32 %1419, %1420
  %1422 = and i32 %1421, 1
  %1423 = icmp eq i32 %1422, 0
  %1424 = xor i32 %1418, 32773
  %1425 = select i1 %1423, i32 %1418, i32 %1424
  %1426 = shl i32 %1425, 1
  %1427 = lshr i32 %1425, 15
  %1428 = lshr i32 %1392, 4
  %1429 = xor i32 %1427, %1428
  %1430 = and i32 %1429, 1
  %1431 = icmp eq i32 %1430, 0
  %1432 = xor i32 %1426, 32773
  %1433 = select i1 %1431, i32 %1426, i32 %1432
  %1434 = shl i32 %1433, 1
  %1435 = lshr i32 %1433, 15
  %1436 = lshr i32 %1392, 3
  %1437 = xor i32 %1435, %1436
  %1438 = and i32 %1437, 1
  %1439 = icmp eq i32 %1438, 0
  %1440 = xor i32 %1434, 32773
  %1441 = select i1 %1439, i32 %1434, i32 %1440
  %1442 = shl i32 %1441, 1
  %1443 = lshr i32 %1441, 15
  %1444 = lshr i32 %1392, 2
  %1445 = xor i32 %1443, %1444
  %1446 = and i32 %1445, 1
  %1447 = icmp eq i32 %1446, 0
  %1448 = xor i32 %1442, 32773
  %1449 = select i1 %1447, i32 %1442, i32 %1448
  %1450 = shl i32 %1449, 1
  %1451 = lshr i32 %1449, 15
  %1452 = lshr i32 %1392, 1
  %1453 = xor i32 %1451, %1452
  %1454 = and i32 %1453, 1
  %1455 = icmp eq i32 %1454, 0
  %1456 = xor i32 %1450, 32773
  %1457 = select i1 %1455, i32 %1450, i32 %1456
  %1458 = shl i32 %1457, 1
  %1459 = lshr i32 %1457, 15
  %1460 = xor i32 %1459, %1392
  %1461 = and i32 %1460, 1
  %1462 = icmp eq i32 %1461, 0
  %1463 = xor i32 %1458, 32773
  %1464 = select i1 %1462, i32 %1458, i32 %1463
  %1465 = and i32 %1464, 65535
  store i32 %1465, i32* @crc, align 4, !tbaa !18
  %1466 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %1390, i32 %1392, i32 9) #21
  store %struct.BF_PartHolder* %1466, %struct.BF_PartHolder** %1289, align 8, !tbaa !7
  %1467 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 0, i32 0, i64 %1288, i32 0, i32 3
  %1468 = load i32, i32* %1467, align 4, !tbaa !135
  %1469 = load i32, i32* @crc, align 4, !tbaa !18
  %1470 = shl i32 %1469, 1
  %1471 = lshr i32 %1469, 15
  %1472 = lshr i32 %1468, 7
  %1473 = xor i32 %1471, %1472
  %1474 = and i32 %1473, 1
  %1475 = icmp eq i32 %1474, 0
  %1476 = xor i32 %1470, 32773
  %1477 = select i1 %1475, i32 %1470, i32 %1476
  %1478 = shl i32 %1477, 1
  %1479 = lshr i32 %1477, 15
  %1480 = lshr i32 %1468, 6
  %1481 = xor i32 %1479, %1480
  %1482 = and i32 %1481, 1
  %1483 = icmp eq i32 %1482, 0
  %1484 = xor i32 %1478, 32773
  %1485 = select i1 %1483, i32 %1478, i32 %1484
  %1486 = shl i32 %1485, 1
  %1487 = lshr i32 %1485, 15
  %1488 = lshr i32 %1468, 5
  %1489 = xor i32 %1487, %1488
  %1490 = and i32 %1489, 1
  %1491 = icmp eq i32 %1490, 0
  %1492 = xor i32 %1486, 32773
  %1493 = select i1 %1491, i32 %1486, i32 %1492
  %1494 = shl i32 %1493, 1
  %1495 = lshr i32 %1493, 15
  %1496 = lshr i32 %1468, 4
  %1497 = xor i32 %1495, %1496
  %1498 = and i32 %1497, 1
  %1499 = icmp eq i32 %1498, 0
  %1500 = xor i32 %1494, 32773
  %1501 = select i1 %1499, i32 %1494, i32 %1500
  %1502 = shl i32 %1501, 1
  %1503 = lshr i32 %1501, 15
  %1504 = lshr i32 %1468, 3
  %1505 = xor i32 %1503, %1504
  %1506 = and i32 %1505, 1
  %1507 = icmp eq i32 %1506, 0
  %1508 = xor i32 %1502, 32773
  %1509 = select i1 %1507, i32 %1502, i32 %1508
  %1510 = shl i32 %1509, 1
  %1511 = lshr i32 %1509, 15
  %1512 = lshr i32 %1468, 2
  %1513 = xor i32 %1511, %1512
  %1514 = and i32 %1513, 1
  %1515 = icmp eq i32 %1514, 0
  %1516 = xor i32 %1510, 32773
  %1517 = select i1 %1515, i32 %1510, i32 %1516
  %1518 = shl i32 %1517, 1
  %1519 = lshr i32 %1517, 15
  %1520 = lshr i32 %1468, 1
  %1521 = xor i32 %1519, %1520
  %1522 = and i32 %1521, 1
  %1523 = icmp eq i32 %1522, 0
  %1524 = xor i32 %1518, 32773
  %1525 = select i1 %1523, i32 %1518, i32 %1524
  %1526 = shl i32 %1525, 1
  %1527 = lshr i32 %1525, 15
  %1528 = xor i32 %1527, %1468
  %1529 = and i32 %1528, 1
  %1530 = icmp eq i32 %1529, 0
  %1531 = xor i32 %1526, 32773
  %1532 = select i1 %1530, i32 %1526, i32 %1531
  %1533 = and i32 %1532, 65535
  store i32 %1533, i32* @crc, align 4, !tbaa !18
  %1534 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %1466, i32 %1468, i32 8) #21
  store %struct.BF_PartHolder* %1534, %struct.BF_PartHolder** %1289, align 8, !tbaa !7
  %1535 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 0, i32 0, i64 %1288, i32 0, i32 4
  %1536 = load i32, i32* %1535, align 8, !tbaa !136
  %1537 = load i32, i32* @crc, align 4, !tbaa !18
  %1538 = shl i32 %1537, 1
  %1539 = lshr i32 %1537, 15
  %1540 = lshr i32 %1536, 8
  %1541 = xor i32 %1539, %1540
  %1542 = and i32 %1541, 1
  %1543 = icmp eq i32 %1542, 0
  %1544 = xor i32 %1538, 32773
  %1545 = select i1 %1543, i32 %1538, i32 %1544
  %1546 = shl i32 %1545, 1
  %1547 = lshr i32 %1545, 15
  %1548 = lshr i32 %1536, 7
  %1549 = xor i32 %1547, %1548
  %1550 = and i32 %1549, 1
  %1551 = icmp eq i32 %1550, 0
  %1552 = xor i32 %1546, 32773
  %1553 = select i1 %1551, i32 %1546, i32 %1552
  %1554 = shl i32 %1553, 1
  %1555 = lshr i32 %1553, 15
  %1556 = lshr i32 %1536, 6
  %1557 = xor i32 %1555, %1556
  %1558 = and i32 %1557, 1
  %1559 = icmp eq i32 %1558, 0
  %1560 = xor i32 %1554, 32773
  %1561 = select i1 %1559, i32 %1554, i32 %1560
  %1562 = shl i32 %1561, 1
  %1563 = lshr i32 %1561, 15
  %1564 = lshr i32 %1536, 5
  %1565 = xor i32 %1563, %1564
  %1566 = and i32 %1565, 1
  %1567 = icmp eq i32 %1566, 0
  %1568 = xor i32 %1562, 32773
  %1569 = select i1 %1567, i32 %1562, i32 %1568
  %1570 = shl i32 %1569, 1
  %1571 = lshr i32 %1569, 15
  %1572 = lshr i32 %1536, 4
  %1573 = xor i32 %1571, %1572
  %1574 = and i32 %1573, 1
  %1575 = icmp eq i32 %1574, 0
  %1576 = xor i32 %1570, 32773
  %1577 = select i1 %1575, i32 %1570, i32 %1576
  %1578 = shl i32 %1577, 1
  %1579 = lshr i32 %1577, 15
  %1580 = lshr i32 %1536, 3
  %1581 = xor i32 %1579, %1580
  %1582 = and i32 %1581, 1
  %1583 = icmp eq i32 %1582, 0
  %1584 = xor i32 %1578, 32773
  %1585 = select i1 %1583, i32 %1578, i32 %1584
  %1586 = shl i32 %1585, 1
  %1587 = lshr i32 %1585, 15
  %1588 = lshr i32 %1536, 2
  %1589 = xor i32 %1587, %1588
  %1590 = and i32 %1589, 1
  %1591 = icmp eq i32 %1590, 0
  %1592 = xor i32 %1586, 32773
  %1593 = select i1 %1591, i32 %1586, i32 %1592
  %1594 = shl i32 %1593, 1
  %1595 = lshr i32 %1593, 15
  %1596 = lshr i32 %1536, 1
  %1597 = xor i32 %1595, %1596
  %1598 = and i32 %1597, 1
  %1599 = icmp eq i32 %1598, 0
  %1600 = xor i32 %1594, 32773
  %1601 = select i1 %1599, i32 %1594, i32 %1600
  %1602 = shl i32 %1601, 1
  %1603 = lshr i32 %1601, 15
  %1604 = xor i32 %1603, %1536
  %1605 = and i32 %1604, 1
  %1606 = icmp eq i32 %1605, 0
  %1607 = xor i32 %1602, 32773
  %1608 = select i1 %1606, i32 %1602, i32 %1607
  %1609 = and i32 %1608, 65535
  store i32 %1609, i32* @crc, align 4, !tbaa !18
  %1610 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %1534, i32 %1536, i32 9) #21
  store %struct.BF_PartHolder* %1610, %struct.BF_PartHolder** %1289, align 8, !tbaa !7
  %1611 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 0, i32 0, i64 %1288, i32 0, i32 5
  %1612 = load i32, i32* %1611, align 4, !tbaa !137
  %1613 = load i32, i32* @crc, align 4, !tbaa !18
  %1614 = shl i32 %1613, 1
  %1615 = lshr i32 %1613, 15
  %1616 = xor i32 %1615, %1612
  %1617 = and i32 %1616, 1
  %1618 = icmp eq i32 %1617, 0
  %1619 = xor i32 %1614, 32773
  %1620 = select i1 %1618, i32 %1614, i32 %1619
  %1621 = and i32 %1620, 65535
  store i32 %1621, i32* @crc, align 4, !tbaa !18
  %1622 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %1610, i32 %1612, i32 1) #21
  store %struct.BF_PartHolder* %1622, %struct.BF_PartHolder** %1289, align 8, !tbaa !7
  %1623 = load i32, i32* %1611, align 4, !tbaa !137
  %1624 = icmp eq i32 %1623, 0
  br i1 %1624, label %1830, label %1625

1625:                                             ; preds = %1287
  %1626 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 0, i32 0, i64 %1288, i32 0, i32 6
  %1627 = load i32, i32* %1626, align 8, !tbaa !138
  %1628 = load i32, i32* @crc, align 4, !tbaa !18
  %1629 = shl i32 %1628, 1
  %1630 = lshr i32 %1628, 15
  %1631 = lshr i32 %1627, 1
  %1632 = xor i32 %1630, %1631
  %1633 = and i32 %1632, 1
  %1634 = icmp eq i32 %1633, 0
  %1635 = xor i32 %1629, 32773
  %1636 = select i1 %1634, i32 %1629, i32 %1635
  %1637 = shl i32 %1636, 1
  %1638 = lshr i32 %1636, 15
  %1639 = xor i32 %1638, %1627
  %1640 = and i32 %1639, 1
  %1641 = icmp eq i32 %1640, 0
  %1642 = xor i32 %1637, 32773
  %1643 = select i1 %1641, i32 %1637, i32 %1642
  %1644 = and i32 %1643, 65535
  store i32 %1644, i32* @crc, align 4, !tbaa !18
  %1645 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %1622, i32 %1627, i32 2) #21
  store %struct.BF_PartHolder* %1645, %struct.BF_PartHolder** %1289, align 8, !tbaa !7
  %1646 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 0, i32 0, i64 %1288, i32 0, i32 7
  %1647 = load i32, i32* %1646, align 4, !tbaa !139
  %1648 = load i32, i32* @crc, align 4, !tbaa !18
  %1649 = shl i32 %1648, 1
  %1650 = lshr i32 %1648, 15
  %1651 = xor i32 %1650, %1647
  %1652 = and i32 %1651, 1
  %1653 = icmp eq i32 %1652, 0
  %1654 = xor i32 %1649, 32773
  %1655 = select i1 %1653, i32 %1649, i32 %1654
  %1656 = and i32 %1655, 65535
  store i32 %1656, i32* @crc, align 4, !tbaa !18
  %1657 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %1645, i32 %1647, i32 1) #21
  store %struct.BF_PartHolder* %1657, %struct.BF_PartHolder** %1289, align 8, !tbaa !7
  %1658 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 0, i32 0, i64 %1288, i32 0, i32 8, i64 0
  %1659 = load i32, i32* %1658, align 4, !tbaa !18
  %1660 = load i32, i32* @crc, align 4, !tbaa !18
  %1661 = shl i32 %1660, 1
  %1662 = lshr i32 %1660, 15
  %1663 = lshr i32 %1659, 4
  %1664 = xor i32 %1662, %1663
  %1665 = and i32 %1664, 1
  %1666 = icmp eq i32 %1665, 0
  %1667 = xor i32 %1661, 32773
  %1668 = select i1 %1666, i32 %1661, i32 %1667
  %1669 = shl i32 %1668, 1
  %1670 = lshr i32 %1668, 15
  %1671 = lshr i32 %1659, 3
  %1672 = xor i32 %1670, %1671
  %1673 = and i32 %1672, 1
  %1674 = icmp eq i32 %1673, 0
  %1675 = xor i32 %1669, 32773
  %1676 = select i1 %1674, i32 %1669, i32 %1675
  %1677 = shl i32 %1676, 1
  %1678 = lshr i32 %1676, 15
  %1679 = lshr i32 %1659, 2
  %1680 = xor i32 %1678, %1679
  %1681 = and i32 %1680, 1
  %1682 = icmp eq i32 %1681, 0
  %1683 = xor i32 %1677, 32773
  %1684 = select i1 %1682, i32 %1677, i32 %1683
  %1685 = shl i32 %1684, 1
  %1686 = lshr i32 %1684, 15
  %1687 = lshr i32 %1659, 1
  %1688 = xor i32 %1686, %1687
  %1689 = and i32 %1688, 1
  %1690 = icmp eq i32 %1689, 0
  %1691 = xor i32 %1685, 32773
  %1692 = select i1 %1690, i32 %1685, i32 %1691
  %1693 = shl i32 %1692, 1
  %1694 = lshr i32 %1692, 15
  %1695 = xor i32 %1694, %1659
  %1696 = and i32 %1695, 1
  %1697 = icmp eq i32 %1696, 0
  %1698 = xor i32 %1693, 32773
  %1699 = select i1 %1697, i32 %1693, i32 %1698
  %1700 = and i32 %1699, 65535
  store i32 %1700, i32* @crc, align 4, !tbaa !18
  %1701 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %1657, i32 %1659, i32 5) #21
  store %struct.BF_PartHolder* %1701, %struct.BF_PartHolder** %1289, align 8, !tbaa !7
  %1702 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 0, i32 0, i64 %1288, i32 0, i32 8, i64 1
  %1703 = load i32, i32* %1702, align 4, !tbaa !18
  %1704 = load i32, i32* @crc, align 4, !tbaa !18
  %1705 = shl i32 %1704, 1
  %1706 = lshr i32 %1704, 15
  %1707 = lshr i32 %1703, 4
  %1708 = xor i32 %1706, %1707
  %1709 = and i32 %1708, 1
  %1710 = icmp eq i32 %1709, 0
  %1711 = xor i32 %1705, 32773
  %1712 = select i1 %1710, i32 %1705, i32 %1711
  %1713 = shl i32 %1712, 1
  %1714 = lshr i32 %1712, 15
  %1715 = lshr i32 %1703, 3
  %1716 = xor i32 %1714, %1715
  %1717 = and i32 %1716, 1
  %1718 = icmp eq i32 %1717, 0
  %1719 = xor i32 %1713, 32773
  %1720 = select i1 %1718, i32 %1713, i32 %1719
  %1721 = shl i32 %1720, 1
  %1722 = lshr i32 %1720, 15
  %1723 = lshr i32 %1703, 2
  %1724 = xor i32 %1722, %1723
  %1725 = and i32 %1724, 1
  %1726 = icmp eq i32 %1725, 0
  %1727 = xor i32 %1721, 32773
  %1728 = select i1 %1726, i32 %1721, i32 %1727
  %1729 = shl i32 %1728, 1
  %1730 = lshr i32 %1728, 15
  %1731 = lshr i32 %1703, 1
  %1732 = xor i32 %1730, %1731
  %1733 = and i32 %1732, 1
  %1734 = icmp eq i32 %1733, 0
  %1735 = xor i32 %1729, 32773
  %1736 = select i1 %1734, i32 %1729, i32 %1735
  %1737 = shl i32 %1736, 1
  %1738 = lshr i32 %1736, 15
  %1739 = xor i32 %1738, %1703
  %1740 = and i32 %1739, 1
  %1741 = icmp eq i32 %1740, 0
  %1742 = xor i32 %1737, 32773
  %1743 = select i1 %1741, i32 %1737, i32 %1742
  %1744 = and i32 %1743, 65535
  store i32 %1744, i32* @crc, align 4, !tbaa !18
  %1745 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %1701, i32 %1703, i32 5) #21
  store %struct.BF_PartHolder* %1745, %struct.BF_PartHolder** %1289, align 8, !tbaa !7
  %1746 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 0, i32 0, i64 %1288, i32 0, i32 9, i64 0
  %1747 = load i32, i32* %1746, align 4, !tbaa !18
  %1748 = load i32, i32* @crc, align 4, !tbaa !18
  %1749 = shl i32 %1748, 1
  %1750 = lshr i32 %1748, 15
  %1751 = lshr i32 %1747, 2
  %1752 = xor i32 %1750, %1751
  %1753 = and i32 %1752, 1
  %1754 = icmp eq i32 %1753, 0
  %1755 = xor i32 %1749, 32773
  %1756 = select i1 %1754, i32 %1749, i32 %1755
  %1757 = shl i32 %1756, 1
  %1758 = lshr i32 %1756, 15
  %1759 = lshr i32 %1747, 1
  %1760 = xor i32 %1758, %1759
  %1761 = and i32 %1760, 1
  %1762 = icmp eq i32 %1761, 0
  %1763 = xor i32 %1757, 32773
  %1764 = select i1 %1762, i32 %1757, i32 %1763
  %1765 = shl i32 %1764, 1
  %1766 = lshr i32 %1764, 15
  %1767 = xor i32 %1766, %1747
  %1768 = and i32 %1767, 1
  %1769 = icmp eq i32 %1768, 0
  %1770 = xor i32 %1765, 32773
  %1771 = select i1 %1769, i32 %1765, i32 %1770
  %1772 = and i32 %1771, 65535
  store i32 %1772, i32* @crc, align 4, !tbaa !18
  %1773 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %1745, i32 %1747, i32 3) #21
  store %struct.BF_PartHolder* %1773, %struct.BF_PartHolder** %1289, align 8, !tbaa !7
  %1774 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 0, i32 0, i64 %1288, i32 0, i32 9, i64 1
  %1775 = load i32, i32* %1774, align 4, !tbaa !18
  %1776 = load i32, i32* @crc, align 4, !tbaa !18
  %1777 = shl i32 %1776, 1
  %1778 = lshr i32 %1776, 15
  %1779 = lshr i32 %1775, 2
  %1780 = xor i32 %1778, %1779
  %1781 = and i32 %1780, 1
  %1782 = icmp eq i32 %1781, 0
  %1783 = xor i32 %1777, 32773
  %1784 = select i1 %1782, i32 %1777, i32 %1783
  %1785 = shl i32 %1784, 1
  %1786 = lshr i32 %1784, 15
  %1787 = lshr i32 %1775, 1
  %1788 = xor i32 %1786, %1787
  %1789 = and i32 %1788, 1
  %1790 = icmp eq i32 %1789, 0
  %1791 = xor i32 %1785, 32773
  %1792 = select i1 %1790, i32 %1785, i32 %1791
  %1793 = shl i32 %1792, 1
  %1794 = lshr i32 %1792, 15
  %1795 = xor i32 %1794, %1775
  %1796 = and i32 %1795, 1
  %1797 = icmp eq i32 %1796, 0
  %1798 = xor i32 %1793, 32773
  %1799 = select i1 %1797, i32 %1793, i32 %1798
  %1800 = and i32 %1799, 65535
  store i32 %1800, i32* @crc, align 4, !tbaa !18
  %1801 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %1773, i32 %1775, i32 3) #21
  store %struct.BF_PartHolder* %1801, %struct.BF_PartHolder** %1289, align 8, !tbaa !7
  %1802 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 0, i32 0, i64 %1288, i32 0, i32 9, i64 2
  %1803 = load i32, i32* %1802, align 4, !tbaa !18
  %1804 = load i32, i32* @crc, align 4, !tbaa !18
  %1805 = shl i32 %1804, 1
  %1806 = lshr i32 %1804, 15
  %1807 = lshr i32 %1803, 2
  %1808 = xor i32 %1806, %1807
  %1809 = and i32 %1808, 1
  %1810 = icmp eq i32 %1809, 0
  %1811 = xor i32 %1805, 32773
  %1812 = select i1 %1810, i32 %1805, i32 %1811
  %1813 = shl i32 %1812, 1
  %1814 = lshr i32 %1812, 15
  %1815 = lshr i32 %1803, 1
  %1816 = xor i32 %1814, %1815
  %1817 = and i32 %1816, 1
  %1818 = icmp eq i32 %1817, 0
  %1819 = xor i32 %1813, 32773
  %1820 = select i1 %1818, i32 %1813, i32 %1819
  %1821 = shl i32 %1820, 1
  %1822 = lshr i32 %1820, 15
  %1823 = xor i32 %1822, %1803
  %1824 = and i32 %1823, 1
  %1825 = icmp eq i32 %1824, 0
  %1826 = xor i32 %1821, 32773
  %1827 = select i1 %1825, i32 %1821, i32 %1826
  %1828 = and i32 %1827, 65535
  store i32 %1828, i32* @crc, align 4, !tbaa !18
  %1829 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %1801, i32 %1803, i32 3) #21
  br label %1944

1830:                                             ; preds = %1830, %1287
  %1831 = phi i64 [ %1877, %1830 ], [ 0, %1287 ]
  %1832 = phi %struct.BF_PartHolder* [ %1876, %1830 ], [ %1622, %1287 ]
  %1833 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 0, i32 0, i64 %1288, i32 0, i32 8, i64 %1831
  %1834 = load i32, i32* %1833, align 4, !tbaa !18
  %1835 = load i32, i32* @crc, align 4, !tbaa !18
  %1836 = shl i32 %1835, 1
  %1837 = lshr i32 %1835, 15
  %1838 = lshr i32 %1834, 4
  %1839 = xor i32 %1837, %1838
  %1840 = and i32 %1839, 1
  %1841 = icmp eq i32 %1840, 0
  %1842 = xor i32 %1836, 32773
  %1843 = select i1 %1841, i32 %1836, i32 %1842
  %1844 = shl i32 %1843, 1
  %1845 = lshr i32 %1843, 15
  %1846 = lshr i32 %1834, 3
  %1847 = xor i32 %1845, %1846
  %1848 = and i32 %1847, 1
  %1849 = icmp eq i32 %1848, 0
  %1850 = xor i32 %1844, 32773
  %1851 = select i1 %1849, i32 %1844, i32 %1850
  %1852 = shl i32 %1851, 1
  %1853 = lshr i32 %1851, 15
  %1854 = lshr i32 %1834, 2
  %1855 = xor i32 %1853, %1854
  %1856 = and i32 %1855, 1
  %1857 = icmp eq i32 %1856, 0
  %1858 = xor i32 %1852, 32773
  %1859 = select i1 %1857, i32 %1852, i32 %1858
  %1860 = shl i32 %1859, 1
  %1861 = lshr i32 %1859, 15
  %1862 = lshr i32 %1834, 1
  %1863 = xor i32 %1861, %1862
  %1864 = and i32 %1863, 1
  %1865 = icmp eq i32 %1864, 0
  %1866 = xor i32 %1860, 32773
  %1867 = select i1 %1865, i32 %1860, i32 %1866
  %1868 = shl i32 %1867, 1
  %1869 = lshr i32 %1867, 15
  %1870 = xor i32 %1869, %1834
  %1871 = and i32 %1870, 1
  %1872 = icmp eq i32 %1871, 0
  %1873 = xor i32 %1868, 32773
  %1874 = select i1 %1872, i32 %1868, i32 %1873
  %1875 = and i32 %1874, 65535
  store i32 %1875, i32* @crc, align 4, !tbaa !18
  %1876 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %1832, i32 %1834, i32 5) #21
  store %struct.BF_PartHolder* %1876, %struct.BF_PartHolder** %1289, align 8, !tbaa !7
  %1877 = add nuw nsw i64 %1831, 1
  %1878 = icmp eq i64 %1877, 3
  br i1 %1878, label %1879, label %1830

1879:                                             ; preds = %1830
  %1880 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 0, i32 0, i64 %1288, i32 0, i32 10
  %1881 = load i32, i32* %1880, align 8, !tbaa !140
  %1882 = load i32, i32* @crc, align 4, !tbaa !18
  %1883 = shl i32 %1882, 1
  %1884 = lshr i32 %1882, 15
  %1885 = lshr i32 %1881, 3
  %1886 = xor i32 %1884, %1885
  %1887 = and i32 %1886, 1
  %1888 = icmp eq i32 %1887, 0
  %1889 = xor i32 %1883, 32773
  %1890 = select i1 %1888, i32 %1883, i32 %1889
  %1891 = shl i32 %1890, 1
  %1892 = lshr i32 %1890, 15
  %1893 = lshr i32 %1881, 2
  %1894 = xor i32 %1892, %1893
  %1895 = and i32 %1894, 1
  %1896 = icmp eq i32 %1895, 0
  %1897 = xor i32 %1891, 32773
  %1898 = select i1 %1896, i32 %1891, i32 %1897
  %1899 = shl i32 %1898, 1
  %1900 = lshr i32 %1898, 15
  %1901 = lshr i32 %1881, 1
  %1902 = xor i32 %1900, %1901
  %1903 = and i32 %1902, 1
  %1904 = icmp eq i32 %1903, 0
  %1905 = xor i32 %1899, 32773
  %1906 = select i1 %1904, i32 %1899, i32 %1905
  %1907 = shl i32 %1906, 1
  %1908 = lshr i32 %1906, 15
  %1909 = xor i32 %1908, %1881
  %1910 = and i32 %1909, 1
  %1911 = icmp eq i32 %1910, 0
  %1912 = xor i32 %1907, 32773
  %1913 = select i1 %1911, i32 %1907, i32 %1912
  %1914 = and i32 %1913, 65535
  store i32 %1914, i32* @crc, align 4, !tbaa !18
  %1915 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %1876, i32 %1881, i32 4) #21
  store %struct.BF_PartHolder* %1915, %struct.BF_PartHolder** %1289, align 8, !tbaa !7
  %1916 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 0, i32 0, i64 %1288, i32 0, i32 11
  %1917 = load i32, i32* %1916, align 4, !tbaa !141
  %1918 = load i32, i32* @crc, align 4, !tbaa !18
  %1919 = shl i32 %1918, 1
  %1920 = lshr i32 %1918, 15
  %1921 = lshr i32 %1917, 2
  %1922 = xor i32 %1920, %1921
  %1923 = and i32 %1922, 1
  %1924 = icmp eq i32 %1923, 0
  %1925 = xor i32 %1919, 32773
  %1926 = select i1 %1924, i32 %1919, i32 %1925
  %1927 = shl i32 %1926, 1
  %1928 = lshr i32 %1926, 15
  %1929 = lshr i32 %1917, 1
  %1930 = xor i32 %1928, %1929
  %1931 = and i32 %1930, 1
  %1932 = icmp eq i32 %1931, 0
  %1933 = xor i32 %1927, 32773
  %1934 = select i1 %1932, i32 %1927, i32 %1933
  %1935 = shl i32 %1934, 1
  %1936 = lshr i32 %1934, 15
  %1937 = xor i32 %1936, %1917
  %1938 = and i32 %1937, 1
  %1939 = icmp eq i32 %1938, 0
  %1940 = xor i32 %1935, 32773
  %1941 = select i1 %1939, i32 %1935, i32 %1940
  %1942 = and i32 %1941, 65535
  store i32 %1942, i32* @crc, align 4, !tbaa !18
  %1943 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %1915, i32 %1917, i32 3) #21
  br label %1944

1944:                                             ; preds = %1879, %1625
  %1945 = phi %struct.BF_PartHolder* [ %1829, %1625 ], [ %1943, %1879 ]
  store %struct.BF_PartHolder* %1945, %struct.BF_PartHolder** %1289, align 8, !tbaa !7
  %1946 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 0, i32 0, i64 %1288, i32 0, i32 13
  %1947 = load i32, i32* %1946, align 4, !tbaa !143
  %1948 = load i32, i32* @crc, align 4, !tbaa !18
  %1949 = shl i32 %1948, 1
  %1950 = lshr i32 %1948, 15
  %1951 = xor i32 %1950, %1947
  %1952 = and i32 %1951, 1
  %1953 = icmp eq i32 %1952, 0
  %1954 = xor i32 %1949, 32773
  %1955 = select i1 %1953, i32 %1949, i32 %1954
  %1956 = and i32 %1955, 65535
  store i32 %1956, i32* @crc, align 4, !tbaa !18
  %1957 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %1945, i32 %1947, i32 1) #21
  store %struct.BF_PartHolder* %1957, %struct.BF_PartHolder** %1289, align 8, !tbaa !7
  %1958 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 0, i32 0, i64 %1288, i32 0, i32 14
  %1959 = load i32, i32* %1958, align 8, !tbaa !144
  %1960 = load i32, i32* @crc, align 4, !tbaa !18
  %1961 = shl i32 %1960, 1
  %1962 = lshr i32 %1960, 15
  %1963 = xor i32 %1962, %1959
  %1964 = and i32 %1963, 1
  %1965 = icmp eq i32 %1964, 0
  %1966 = xor i32 %1961, 32773
  %1967 = select i1 %1965, i32 %1961, i32 %1966
  %1968 = and i32 %1967, 65535
  store i32 %1968, i32* @crc, align 4, !tbaa !18
  %1969 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %1957, i32 %1959, i32 1) #21
  store %struct.BF_PartHolder* %1969, %struct.BF_PartHolder** %1289, align 8, !tbaa !7
  %1970 = add nuw nsw i64 %1288, 1
  %1971 = load i32, i32* %224, align 4, !tbaa !126
  %1972 = sext i32 %1971 to i64
  %1973 = icmp slt i64 %1970, %1972
  br i1 %1973, label %1287, label %1974

1974:                                             ; preds = %1944, %1274, %1262
  %1975 = load i32, i32* %51, align 4, !tbaa !116
  %1976 = icmp eq i32 %1975, 0
  br i1 %1976, label %1981, label %1977

1977:                                             ; preds = %1974
  %1978 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 8, !tbaa !7
  %1979 = load i32, i32* @crc, align 4, !tbaa !18
  %1980 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %1978, i32 %1979, i32 16) #21
  store %struct.BF_PartHolder* %1980, %struct.BF_PartHolder** @headerPH, align 8, !tbaa !7
  br label %1981

1981:                                             ; preds = %1977, %1974
  %1982 = load i32, i32* %249, align 8, !tbaa !95
  %1983 = icmp sgt i32 %1982, 0
  %1984 = load i32, i32* %224, align 4, !tbaa !126
  br i1 %1983, label %1985, label %2096

1985:                                             ; preds = %1981
  %1986 = icmp sgt i32 %1984, 0
  %1987 = zext i32 %1982 to i64
  %1988 = zext i32 %1984 to i64
  %1989 = add nsw i64 %1988, -1
  %1990 = and i64 %1988, 3
  %1991 = icmp ult i64 %1989, 3
  %1992 = sub nsw i64 %1988, %1990
  %1993 = icmp eq i64 %1990, 0
  br label %1994

1994:                                             ; preds = %2039, %1985
  %1995 = phi i64 [ 0, %1985 ], [ %2040, %2039 ]
  br i1 %1986, label %1996, label %2039

1996:                                             ; preds = %1994
  br i1 %1991, label %2026, label %1997

1997:                                             ; preds = %1997, %1996
  %1998 = phi i64 [ %2023, %1997 ], [ 0, %1996 ]
  %1999 = phi i64 [ %2024, %1997 ], [ %1992, %1996 ]
  %2000 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @scaleFactorsPH, i64 0, i64 %1995, i64 %1998
  %2001 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2000, align 16, !tbaa !7
  %2002 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %2001, i64 0, i32 1
  %2003 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %2002, align 8, !tbaa !41
  %2004 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %2003, i64 0, i32 0
  store i32 0, i32* %2004, align 8, !tbaa !37
  %2005 = or i64 %1998, 1
  %2006 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @scaleFactorsPH, i64 0, i64 %1995, i64 %2005
  %2007 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2006, align 8, !tbaa !7
  %2008 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %2007, i64 0, i32 1
  %2009 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %2008, align 8, !tbaa !41
  %2010 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %2009, i64 0, i32 0
  store i32 0, i32* %2010, align 8, !tbaa !37
  %2011 = or i64 %1998, 2
  %2012 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @scaleFactorsPH, i64 0, i64 %1995, i64 %2011
  %2013 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2012, align 16, !tbaa !7
  %2014 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %2013, i64 0, i32 1
  %2015 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %2014, align 8, !tbaa !41
  %2016 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %2015, i64 0, i32 0
  store i32 0, i32* %2016, align 8, !tbaa !37
  %2017 = or i64 %1998, 3
  %2018 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @scaleFactorsPH, i64 0, i64 %1995, i64 %2017
  %2019 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2018, align 8, !tbaa !7
  %2020 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %2019, i64 0, i32 1
  %2021 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %2020, align 8, !tbaa !41
  %2022 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %2021, i64 0, i32 0
  store i32 0, i32* %2022, align 8, !tbaa !37
  %2023 = add nuw nsw i64 %1998, 4
  %2024 = add i64 %1999, -4
  %2025 = icmp eq i64 %2024, 0
  br i1 %2025, label %2026, label %1997

2026:                                             ; preds = %1997, %1996
  %2027 = phi i64 [ 0, %1996 ], [ %2023, %1997 ]
  br i1 %1993, label %2039, label %2028

2028:                                             ; preds = %2028, %2026
  %2029 = phi i64 [ %2036, %2028 ], [ %2027, %2026 ]
  %2030 = phi i64 [ %2037, %2028 ], [ %1990, %2026 ]
  %2031 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @scaleFactorsPH, i64 0, i64 %1995, i64 %2029
  %2032 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2031, align 8, !tbaa !7
  %2033 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %2032, i64 0, i32 1
  %2034 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %2033, align 8, !tbaa !41
  %2035 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %2034, i64 0, i32 0
  store i32 0, i32* %2035, align 8, !tbaa !37
  %2036 = add nuw nsw i64 %2029, 1
  %2037 = add i64 %2030, -1
  %2038 = icmp eq i64 %2037, 0
  br i1 %2038, label %2039, label %2028, !llvm.loop !145

2039:                                             ; preds = %2028, %2026, %1994
  %2040 = add nuw nsw i64 %1995, 1
  %2041 = icmp eq i64 %2040, %1987
  br i1 %2041, label %2042, label %1994

2042:                                             ; preds = %2039
  %2043 = add nsw i64 %1988, -1
  %2044 = and i64 %1988, 3
  %2045 = icmp ult i64 %2043, 3
  %2046 = sub nsw i64 %1988, %2044
  %2047 = icmp eq i64 %2044, 0
  br label %2048

2048:                                             ; preds = %2093, %2042
  %2049 = phi i64 [ %2094, %2093 ], [ 0, %2042 ]
  br i1 %1986, label %2050, label %2093

2050:                                             ; preds = %2048
  br i1 %2045, label %2080, label %2051

2051:                                             ; preds = %2051, %2050
  %2052 = phi i64 [ %2077, %2051 ], [ 0, %2050 ]
  %2053 = phi i64 [ %2078, %2051 ], [ %2046, %2050 ]
  %2054 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @codedDataPH, i64 0, i64 %2049, i64 %2052
  %2055 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2054, align 16, !tbaa !7
  %2056 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %2055, i64 0, i32 1
  %2057 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %2056, align 8, !tbaa !41
  %2058 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %2057, i64 0, i32 0
  store i32 0, i32* %2058, align 8, !tbaa !37
  %2059 = or i64 %2052, 1
  %2060 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @codedDataPH, i64 0, i64 %2049, i64 %2059
  %2061 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2060, align 8, !tbaa !7
  %2062 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %2061, i64 0, i32 1
  %2063 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %2062, align 8, !tbaa !41
  %2064 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %2063, i64 0, i32 0
  store i32 0, i32* %2064, align 8, !tbaa !37
  %2065 = or i64 %2052, 2
  %2066 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @codedDataPH, i64 0, i64 %2049, i64 %2065
  %2067 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2066, align 16, !tbaa !7
  %2068 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %2067, i64 0, i32 1
  %2069 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %2068, align 8, !tbaa !41
  %2070 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %2069, i64 0, i32 0
  store i32 0, i32* %2070, align 8, !tbaa !37
  %2071 = or i64 %2052, 3
  %2072 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @codedDataPH, i64 0, i64 %2049, i64 %2071
  %2073 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2072, align 8, !tbaa !7
  %2074 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %2073, i64 0, i32 1
  %2075 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %2074, align 8, !tbaa !41
  %2076 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %2075, i64 0, i32 0
  store i32 0, i32* %2076, align 8, !tbaa !37
  %2077 = add nuw nsw i64 %2052, 4
  %2078 = add i64 %2053, -4
  %2079 = icmp eq i64 %2078, 0
  br i1 %2079, label %2080, label %2051

2080:                                             ; preds = %2051, %2050
  %2081 = phi i64 [ 0, %2050 ], [ %2077, %2051 ]
  br i1 %2047, label %2093, label %2082

2082:                                             ; preds = %2082, %2080
  %2083 = phi i64 [ %2090, %2082 ], [ %2081, %2080 ]
  %2084 = phi i64 [ %2091, %2082 ], [ %2044, %2080 ]
  %2085 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @codedDataPH, i64 0, i64 %2049, i64 %2083
  %2086 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2085, align 8, !tbaa !7
  %2087 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %2086, i64 0, i32 1
  %2088 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %2087, align 8, !tbaa !41
  %2089 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %2088, i64 0, i32 0
  store i32 0, i32* %2089, align 8, !tbaa !37
  %2090 = add nuw nsw i64 %2083, 1
  %2091 = add i64 %2084, -1
  %2092 = icmp eq i64 %2091, 0
  br i1 %2092, label %2093, label %2082, !llvm.loop !146

2093:                                             ; preds = %2082, %2080, %2048
  %2094 = add nuw nsw i64 %2049, 1
  %2095 = icmp eq i64 %2094, %1987
  br i1 %2095, label %2096, label %2048

2096:                                             ; preds = %2093, %1981
  %2097 = load i32, i32* %47, align 8, !tbaa !115
  %2098 = icmp eq i32 %2097, 1
  br i1 %2098, label %2101, label %2099

2099:                                             ; preds = %2096
  %2100 = icmp sgt i32 %1984, 0
  br i1 %2100, label %2255, label %2395

2101:                                             ; preds = %2252, %2096
  %2102 = phi i32 [ %2253, %2252 ], [ %1984, %2096 ]
  %2103 = phi i64 [ 1, %2252 ], [ 0, %2096 ]
  %2104 = icmp sgt i32 %2102, 0
  br i1 %2104, label %2105, label %2252

2105:                                             ; preds = %2101
  %2106 = icmp eq i64 %2103, 0
  br label %2107

2107:                                             ; preds = %2246, %2105
  %2108 = phi i64 [ 0, %2105 ], [ %2248, %2246 ]
  %2109 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @scaleFactorsPH, i64 0, i64 %2103, i64 %2108
  %2110 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 %2103, i32 0, i64 %2108, i32 0
  %2111 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 %2103, i32 0, i64 %2108, i32 0, i32 4
  %2112 = load i32, i32* %2111, align 8, !tbaa !136
  %2113 = zext i32 %2112 to i64
  %2114 = getelementptr inbounds [16 x i32], [16 x i32]* @slen1_tab, i64 0, i64 %2113
  %2115 = load i32, i32* %2114, align 4, !tbaa !18
  %2116 = getelementptr inbounds [16 x i32], [16 x i32]* @slen2_tab, i64 0, i64 %2113
  %2117 = load i32, i32* %2116, align 4, !tbaa !18
  %2118 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %2, i64 %2103, i64 %2108, i64 0
  %2119 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 %2103, i32 0, i64 %2108, i32 0, i32 6
  %2120 = load i32, i32* %2119, align 8, !tbaa !138
  %2121 = icmp eq i32 %2120, 2
  br i1 %2121, label %2122, label %2152

2122:                                             ; preds = %2107
  %2123 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2109, align 8, !tbaa !7
  br label %2124

2124:                                             ; preds = %2124, %2122
  %2125 = phi %struct.BF_PartHolder* [ %2123, %2122 ], [ %2135, %2124 ]
  %2126 = phi i64 [ 0, %2122 ], [ %2136, %2124 ]
  %2127 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 %2103, i64 %2108, i32 1, i64 %2126, i64 0
  %2128 = load i32, i32* %2127, align 4, !tbaa !18
  %2129 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2125, i32 %2128, i32 %2115) #21
  store %struct.BF_PartHolder* %2129, %struct.BF_PartHolder** %2109, align 8, !tbaa !7
  %2130 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 %2103, i64 %2108, i32 1, i64 %2126, i64 1
  %2131 = load i32, i32* %2130, align 4, !tbaa !18
  %2132 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2129, i32 %2131, i32 %2115) #21
  store %struct.BF_PartHolder* %2132, %struct.BF_PartHolder** %2109, align 8, !tbaa !7
  %2133 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 %2103, i64 %2108, i32 1, i64 %2126, i64 2
  %2134 = load i32, i32* %2133, align 4, !tbaa !18
  %2135 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2132, i32 %2134, i32 %2115) #21
  store %struct.BF_PartHolder* %2135, %struct.BF_PartHolder** %2109, align 8, !tbaa !7
  %2136 = add nuw nsw i64 %2126, 1
  %2137 = icmp eq i64 %2136, 6
  br i1 %2137, label %2138, label %2124

2138:                                             ; preds = %2138, %2124
  %2139 = phi %struct.BF_PartHolder* [ %2149, %2138 ], [ %2135, %2124 ]
  %2140 = phi i64 [ %2150, %2138 ], [ 6, %2124 ]
  %2141 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 %2103, i64 %2108, i32 1, i64 %2140, i64 0
  %2142 = load i32, i32* %2141, align 4, !tbaa !18
  %2143 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2139, i32 %2142, i32 %2117) #21
  store %struct.BF_PartHolder* %2143, %struct.BF_PartHolder** %2109, align 8, !tbaa !7
  %2144 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 %2103, i64 %2108, i32 1, i64 %2140, i64 1
  %2145 = load i32, i32* %2144, align 4, !tbaa !18
  %2146 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2143, i32 %2145, i32 %2117) #21
  store %struct.BF_PartHolder* %2146, %struct.BF_PartHolder** %2109, align 8, !tbaa !7
  %2147 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 %2103, i64 %2108, i32 1, i64 %2140, i64 2
  %2148 = load i32, i32* %2147, align 4, !tbaa !18
  %2149 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2146, i32 %2148, i32 %2117) #21
  store %struct.BF_PartHolder* %2149, %struct.BF_PartHolder** %2109, align 8, !tbaa !7
  %2150 = add nuw nsw i64 %2140, 1
  %2151 = icmp eq i64 %2150, 12
  br i1 %2151, label %2246, label %2138

2152:                                             ; preds = %2107
  br i1 %2106, label %2157, label %2153

2153:                                             ; preds = %2152
  %2154 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 3, i64 %2108, i64 0
  %2155 = load i32, i32* %2154, align 4, !tbaa !18
  %2156 = icmp eq i32 %2155, 0
  br i1 %2156, label %2157, label %2177

2157:                                             ; preds = %2153, %2152
  %2158 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2109, align 8, !tbaa !7
  %2159 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 %2103, i64 %2108, i32 0, i64 0
  %2160 = load i32, i32* %2159, align 4, !tbaa !18
  %2161 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2158, i32 %2160, i32 %2115) #21
  store %struct.BF_PartHolder* %2161, %struct.BF_PartHolder** %2109, align 8, !tbaa !7
  %2162 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 %2103, i64 %2108, i32 0, i64 1
  %2163 = load i32, i32* %2162, align 4, !tbaa !18
  %2164 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2161, i32 %2163, i32 %2115) #21
  store %struct.BF_PartHolder* %2164, %struct.BF_PartHolder** %2109, align 8, !tbaa !7
  %2165 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 %2103, i64 %2108, i32 0, i64 2
  %2166 = load i32, i32* %2165, align 4, !tbaa !18
  %2167 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2164, i32 %2166, i32 %2115) #21
  store %struct.BF_PartHolder* %2167, %struct.BF_PartHolder** %2109, align 8, !tbaa !7
  %2168 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 %2103, i64 %2108, i32 0, i64 3
  %2169 = load i32, i32* %2168, align 4, !tbaa !18
  %2170 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2167, i32 %2169, i32 %2115) #21
  store %struct.BF_PartHolder* %2170, %struct.BF_PartHolder** %2109, align 8, !tbaa !7
  %2171 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 %2103, i64 %2108, i32 0, i64 4
  %2172 = load i32, i32* %2171, align 4, !tbaa !18
  %2173 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2170, i32 %2172, i32 %2115) #21
  store %struct.BF_PartHolder* %2173, %struct.BF_PartHolder** %2109, align 8, !tbaa !7
  %2174 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 %2103, i64 %2108, i32 0, i64 5
  %2175 = load i32, i32* %2174, align 4, !tbaa !18
  %2176 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2173, i32 %2175, i32 %2115) #21
  store %struct.BF_PartHolder* %2176, %struct.BF_PartHolder** %2109, align 8, !tbaa !7
  br i1 %2106, label %2183, label %2177

2177:                                             ; preds = %2157, %2153
  %2178 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 3, i64 %2108, i64 1
  %2179 = load i32, i32* %2178, align 4, !tbaa !18
  %2180 = icmp eq i32 %2179, 0
  br i1 %2180, label %2181, label %2200

2181:                                             ; preds = %2177
  %2182 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2109, align 8, !tbaa !7
  br label %2183

2183:                                             ; preds = %2181, %2157
  %2184 = phi %struct.BF_PartHolder* [ %2182, %2181 ], [ %2176, %2157 ]
  %2185 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 %2103, i64 %2108, i32 0, i64 6
  %2186 = load i32, i32* %2185, align 4, !tbaa !18
  %2187 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2184, i32 %2186, i32 %2115) #21
  store %struct.BF_PartHolder* %2187, %struct.BF_PartHolder** %2109, align 8, !tbaa !7
  %2188 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 %2103, i64 %2108, i32 0, i64 7
  %2189 = load i32, i32* %2188, align 4, !tbaa !18
  %2190 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2187, i32 %2189, i32 %2115) #21
  store %struct.BF_PartHolder* %2190, %struct.BF_PartHolder** %2109, align 8, !tbaa !7
  %2191 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 %2103, i64 %2108, i32 0, i64 8
  %2192 = load i32, i32* %2191, align 4, !tbaa !18
  %2193 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2190, i32 %2192, i32 %2115) #21
  store %struct.BF_PartHolder* %2193, %struct.BF_PartHolder** %2109, align 8, !tbaa !7
  %2194 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 %2103, i64 %2108, i32 0, i64 9
  %2195 = load i32, i32* %2194, align 4, !tbaa !18
  %2196 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2193, i32 %2195, i32 %2115) #21
  store %struct.BF_PartHolder* %2196, %struct.BF_PartHolder** %2109, align 8, !tbaa !7
  %2197 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 %2103, i64 %2108, i32 0, i64 10
  %2198 = load i32, i32* %2197, align 4, !tbaa !18
  %2199 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2196, i32 %2198, i32 %2115) #21
  store %struct.BF_PartHolder* %2199, %struct.BF_PartHolder** %2109, align 8, !tbaa !7
  br i1 %2106, label %2206, label %2200

2200:                                             ; preds = %2183, %2177
  %2201 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 3, i64 %2108, i64 2
  %2202 = load i32, i32* %2201, align 4, !tbaa !18
  %2203 = icmp eq i32 %2202, 0
  br i1 %2203, label %2204, label %2223

2204:                                             ; preds = %2200
  %2205 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2109, align 8, !tbaa !7
  br label %2206

2206:                                             ; preds = %2204, %2183
  %2207 = phi %struct.BF_PartHolder* [ %2205, %2204 ], [ %2199, %2183 ]
  %2208 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 %2103, i64 %2108, i32 0, i64 11
  %2209 = load i32, i32* %2208, align 4, !tbaa !18
  %2210 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2207, i32 %2209, i32 %2117) #21
  store %struct.BF_PartHolder* %2210, %struct.BF_PartHolder** %2109, align 8, !tbaa !7
  %2211 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 %2103, i64 %2108, i32 0, i64 12
  %2212 = load i32, i32* %2211, align 4, !tbaa !18
  %2213 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2210, i32 %2212, i32 %2117) #21
  store %struct.BF_PartHolder* %2213, %struct.BF_PartHolder** %2109, align 8, !tbaa !7
  %2214 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 %2103, i64 %2108, i32 0, i64 13
  %2215 = load i32, i32* %2214, align 4, !tbaa !18
  %2216 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2213, i32 %2215, i32 %2117) #21
  store %struct.BF_PartHolder* %2216, %struct.BF_PartHolder** %2109, align 8, !tbaa !7
  %2217 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 %2103, i64 %2108, i32 0, i64 14
  %2218 = load i32, i32* %2217, align 4, !tbaa !18
  %2219 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2216, i32 %2218, i32 %2117) #21
  store %struct.BF_PartHolder* %2219, %struct.BF_PartHolder** %2109, align 8, !tbaa !7
  %2220 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 %2103, i64 %2108, i32 0, i64 15
  %2221 = load i32, i32* %2220, align 4, !tbaa !18
  %2222 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2219, i32 %2221, i32 %2117) #21
  store %struct.BF_PartHolder* %2222, %struct.BF_PartHolder** %2109, align 8, !tbaa !7
  br i1 %2106, label %2229, label %2223

2223:                                             ; preds = %2206, %2200
  %2224 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 3, i64 %2108, i64 3
  %2225 = load i32, i32* %2224, align 4, !tbaa !18
  %2226 = icmp eq i32 %2225, 0
  br i1 %2226, label %2227, label %2246

2227:                                             ; preds = %2223
  %2228 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2109, align 8, !tbaa !7
  br label %2229

2229:                                             ; preds = %2227, %2206
  %2230 = phi %struct.BF_PartHolder* [ %2228, %2227 ], [ %2222, %2206 ]
  %2231 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 %2103, i64 %2108, i32 0, i64 16
  %2232 = load i32, i32* %2231, align 4, !tbaa !18
  %2233 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2230, i32 %2232, i32 %2117) #21
  store %struct.BF_PartHolder* %2233, %struct.BF_PartHolder** %2109, align 8, !tbaa !7
  %2234 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 %2103, i64 %2108, i32 0, i64 17
  %2235 = load i32, i32* %2234, align 4, !tbaa !18
  %2236 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2233, i32 %2235, i32 %2117) #21
  store %struct.BF_PartHolder* %2236, %struct.BF_PartHolder** %2109, align 8, !tbaa !7
  %2237 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 %2103, i64 %2108, i32 0, i64 18
  %2238 = load i32, i32* %2237, align 4, !tbaa !18
  %2239 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2236, i32 %2238, i32 %2117) #21
  store %struct.BF_PartHolder* %2239, %struct.BF_PartHolder** %2109, align 8, !tbaa !7
  %2240 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 %2103, i64 %2108, i32 0, i64 19
  %2241 = load i32, i32* %2240, align 4, !tbaa !18
  %2242 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2239, i32 %2241, i32 %2117) #21
  store %struct.BF_PartHolder* %2242, %struct.BF_PartHolder** %2109, align 8, !tbaa !7
  %2243 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 %2103, i64 %2108, i32 0, i64 20
  %2244 = load i32, i32* %2243, align 4, !tbaa !18
  %2245 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2242, i32 %2244, i32 %2117) #21
  store %struct.BF_PartHolder* %2245, %struct.BF_PartHolder** %2109, align 8, !tbaa !7
  br label %2246

2246:                                             ; preds = %2229, %2223, %2138
  %2247 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @codedDataPH, i64 0, i64 %2103, i64 %2108
  tail call fastcc void @Huffmancodebits(%struct.BF_PartHolder** nonnull %2247, i32* %2118, %struct.gr_info* nonnull %2110) #21
  %2248 = add nuw nsw i64 %2108, 1
  %2249 = load i32, i32* %224, align 4, !tbaa !126
  %2250 = sext i32 %2249 to i64
  %2251 = icmp slt i64 %2248, %2250
  br i1 %2251, label %2107, label %2252

2252:                                             ; preds = %2246, %2101
  %2253 = phi i32 [ %2102, %2101 ], [ %2249, %2246 ]
  %2254 = icmp eq i64 %2103, 0
  br i1 %2254, label %2101, label %2395

2255:                                             ; preds = %2328, %2099
  %2256 = phi i64 [ %2330, %2328 ], [ 0, %2099 ]
  %2257 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @scaleFactorsPH, i64 0, i64 0, i64 %2256
  %2258 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 0, i32 0, i64 %2256, i32 0
  %2259 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %2, i64 0, i64 %2256, i64 0
  %2260 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 0, i32 0, i64 %2256, i32 0, i32 6
  %2261 = load i32, i32* %2260, align 8, !tbaa !138
  %2262 = icmp eq i32 %2261, 2
  %2263 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 0, i32 0, i64 %2256, i32 0, i32 19
  br i1 %2262, label %2270, label %2264

2264:                                             ; preds = %2255
  %2265 = load i32*, i32** %2263, align 8, !tbaa !147
  %2266 = load i32, i32* %2265, align 4, !tbaa !18
  %2267 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 0, i32 0, i64 %2256, i32 0, i32 20, i64 0
  %2268 = load i32, i32* %2267, align 4, !tbaa !18
  %2269 = icmp sgt i32 %2266, 0
  br i1 %2269, label %2305, label %2320

2270:                                             ; preds = %2301, %2255
  %2271 = phi i64 [ %2303, %2301 ], [ 0, %2255 ]
  %2272 = phi i32 [ %2302, %2301 ], [ 0, %2255 ]
  %2273 = load i32*, i32** %2263, align 8, !tbaa !147
  %2274 = getelementptr inbounds i32, i32* %2273, i64 %2271
  %2275 = load i32, i32* %2274, align 4, !tbaa !18
  %2276 = udiv i32 %2275, 3
  %2277 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 0, i32 0, i64 %2256, i32 0, i32 20, i64 %2271
  %2278 = load i32, i32* %2277, align 4, !tbaa !18
  %2279 = icmp sgt i32 %2276, 0
  br i1 %2279, label %2280, label %2301

2280:                                             ; preds = %2270
  %2281 = sext i32 %2272 to i64
  %2282 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2257, align 8, !tbaa !7
  br label %2283

2283:                                             ; preds = %2283, %2280
  %2284 = phi %struct.BF_PartHolder* [ %2282, %2280 ], [ %2295, %2283 ]
  %2285 = phi i64 [ %2281, %2280 ], [ %2297, %2283 ]
  %2286 = phi i32 [ 0, %2280 ], [ %2296, %2283 ]
  %2287 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 0, i64 %2256, i32 1, i64 %2285, i64 0
  %2288 = load i32, i32* %2287, align 4, !tbaa !18
  %2289 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2284, i32 %2288, i32 %2278) #21
  store %struct.BF_PartHolder* %2289, %struct.BF_PartHolder** %2257, align 8, !tbaa !7
  %2290 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 0, i64 %2256, i32 1, i64 %2285, i64 1
  %2291 = load i32, i32* %2290, align 4, !tbaa !18
  %2292 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2289, i32 %2291, i32 %2278) #21
  store %struct.BF_PartHolder* %2292, %struct.BF_PartHolder** %2257, align 8, !tbaa !7
  %2293 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 0, i64 %2256, i32 1, i64 %2285, i64 2
  %2294 = load i32, i32* %2293, align 4, !tbaa !18
  %2295 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2292, i32 %2294, i32 %2278) #21
  store %struct.BF_PartHolder* %2295, %struct.BF_PartHolder** %2257, align 8, !tbaa !7
  %2296 = add nuw nsw i32 %2286, 1
  %2297 = add nsw i64 %2285, 1
  %2298 = icmp ult i32 %2296, %2276
  br i1 %2298, label %2283, label %2299

2299:                                             ; preds = %2283
  %2300 = trunc i64 %2297 to i32
  br label %2301

2301:                                             ; preds = %2299, %2270
  %2302 = phi i32 [ %2272, %2270 ], [ %2300, %2299 ]
  %2303 = add nuw nsw i64 %2271, 1
  %2304 = icmp eq i64 %2303, 4
  br i1 %2304, label %2328, label %2270

2305:                                             ; preds = %2264
  %2306 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2257, align 8, !tbaa !7
  br label %2307

2307:                                             ; preds = %2307, %2305
  %2308 = phi %struct.BF_PartHolder* [ %2306, %2305 ], [ %2313, %2307 ]
  %2309 = phi i64 [ 0, %2305 ], [ %2315, %2307 ]
  %2310 = phi i32 [ 0, %2305 ], [ %2314, %2307 ]
  %2311 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 0, i64 %2256, i32 0, i64 %2309
  %2312 = load i32, i32* %2311, align 4, !tbaa !18
  %2313 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2308, i32 %2312, i32 %2268) #21
  store %struct.BF_PartHolder* %2313, %struct.BF_PartHolder** %2257, align 8, !tbaa !7
  %2314 = add nuw nsw i32 %2310, 1
  %2315 = add nuw nsw i64 %2309, 1
  %2316 = icmp eq i32 %2314, %2266
  br i1 %2316, label %2317, label %2307

2317:                                             ; preds = %2307
  %2318 = trunc i64 %2315 to i32
  %2319 = load i32*, i32** %2263, align 8, !tbaa !147
  br label %2320

2320:                                             ; preds = %2317, %2264
  %2321 = phi i32* [ %2265, %2264 ], [ %2319, %2317 ]
  %2322 = phi i32 [ 0, %2264 ], [ %2318, %2317 ]
  %2323 = getelementptr inbounds i32, i32* %2321, i64 1
  %2324 = load i32, i32* %2323, align 4, !tbaa !18
  %2325 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 0, i32 0, i64 %2256, i32 0, i32 20, i64 1
  %2326 = load i32, i32* %2325, align 4, !tbaa !18
  %2327 = icmp sgt i32 %2324, 0
  br i1 %2327, label %2334, label %2350

2328:                                             ; preds = %2385, %2374, %2301
  %2329 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @codedDataPH, i64 0, i64 0, i64 %2256
  tail call fastcc void @Huffmancodebits(%struct.BF_PartHolder** nonnull %2329, i32* %2259, %struct.gr_info* nonnull %2258) #21
  %2330 = add nuw nsw i64 %2256, 1
  %2331 = load i32, i32* %224, align 4, !tbaa !126
  %2332 = sext i32 %2331 to i64
  %2333 = icmp slt i64 %2330, %2332
  br i1 %2333, label %2255, label %2395

2334:                                             ; preds = %2320
  %2335 = sext i32 %2322 to i64
  %2336 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2257, align 8, !tbaa !7
  br label %2337

2337:                                             ; preds = %2337, %2334
  %2338 = phi %struct.BF_PartHolder* [ %2336, %2334 ], [ %2343, %2337 ]
  %2339 = phi i64 [ %2335, %2334 ], [ %2345, %2337 ]
  %2340 = phi i32 [ 0, %2334 ], [ %2344, %2337 ]
  %2341 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 0, i64 %2256, i32 0, i64 %2339
  %2342 = load i32, i32* %2341, align 4, !tbaa !18
  %2343 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2338, i32 %2342, i32 %2326) #21
  store %struct.BF_PartHolder* %2343, %struct.BF_PartHolder** %2257, align 8, !tbaa !7
  %2344 = add nuw nsw i32 %2340, 1
  %2345 = add nsw i64 %2339, 1
  %2346 = icmp eq i32 %2344, %2324
  br i1 %2346, label %2347, label %2337

2347:                                             ; preds = %2337
  %2348 = trunc i64 %2345 to i32
  %2349 = load i32*, i32** %2263, align 8, !tbaa !147
  br label %2350

2350:                                             ; preds = %2347, %2320
  %2351 = phi i32* [ %2321, %2320 ], [ %2349, %2347 ]
  %2352 = phi i32 [ %2322, %2320 ], [ %2348, %2347 ]
  %2353 = getelementptr inbounds i32, i32* %2351, i64 2
  %2354 = load i32, i32* %2353, align 4, !tbaa !18
  %2355 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 0, i32 0, i64 %2256, i32 0, i32 20, i64 2
  %2356 = load i32, i32* %2355, align 4, !tbaa !18
  %2357 = icmp sgt i32 %2354, 0
  br i1 %2357, label %2358, label %2374

2358:                                             ; preds = %2350
  %2359 = sext i32 %2352 to i64
  %2360 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2257, align 8, !tbaa !7
  br label %2361

2361:                                             ; preds = %2361, %2358
  %2362 = phi %struct.BF_PartHolder* [ %2360, %2358 ], [ %2367, %2361 ]
  %2363 = phi i64 [ %2359, %2358 ], [ %2369, %2361 ]
  %2364 = phi i32 [ 0, %2358 ], [ %2368, %2361 ]
  %2365 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 0, i64 %2256, i32 0, i64 %2363
  %2366 = load i32, i32* %2365, align 4, !tbaa !18
  %2367 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2362, i32 %2366, i32 %2356) #21
  store %struct.BF_PartHolder* %2367, %struct.BF_PartHolder** %2257, align 8, !tbaa !7
  %2368 = add nuw nsw i32 %2364, 1
  %2369 = add nsw i64 %2363, 1
  %2370 = icmp eq i32 %2368, %2354
  br i1 %2370, label %2371, label %2361

2371:                                             ; preds = %2361
  %2372 = trunc i64 %2369 to i32
  %2373 = load i32*, i32** %2263, align 8, !tbaa !147
  br label %2374

2374:                                             ; preds = %2371, %2350
  %2375 = phi i32* [ %2351, %2350 ], [ %2373, %2371 ]
  %2376 = phi i32 [ %2352, %2350 ], [ %2372, %2371 ]
  %2377 = getelementptr inbounds i32, i32* %2375, i64 3
  %2378 = load i32, i32* %2377, align 4, !tbaa !18
  %2379 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 4, i64 0, i32 0, i64 %2256, i32 0, i32 20, i64 3
  %2380 = load i32, i32* %2379, align 4, !tbaa !18
  %2381 = icmp sgt i32 %2378, 0
  br i1 %2381, label %2382, label %2328

2382:                                             ; preds = %2374
  %2383 = sext i32 %2376 to i64
  %2384 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2257, align 8, !tbaa !7
  br label %2385

2385:                                             ; preds = %2385, %2382
  %2386 = phi %struct.BF_PartHolder* [ %2384, %2382 ], [ %2391, %2385 ]
  %2387 = phi i64 [ %2383, %2382 ], [ %2393, %2385 ]
  %2388 = phi i32 [ 0, %2382 ], [ %2392, %2385 ]
  %2389 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %4, i64 0, i64 %2256, i32 0, i64 %2387
  %2390 = load i32, i32* %2389, align 4, !tbaa !18
  %2391 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2386, i32 %2390, i32 %2380) #21
  store %struct.BF_PartHolder* %2391, %struct.BF_PartHolder** %2257, align 8, !tbaa !7
  %2392 = add nuw nsw i32 %2388, 1
  %2393 = add nsw i64 %2387, 1
  %2394 = icmp eq i32 %2392, %2378
  br i1 %2394, label %2328, label %2385

2395:                                             ; preds = %2328, %2252, %2099
  %2396 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %3, i64 0, i32 2
  %2397 = load i32, i32* %2396, align 8, !tbaa !148
  %2398 = sdiv i32 %2397, 32
  %2399 = srem i32 %2397, 32
  %2400 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @userFrameDataPH, align 8, !tbaa !7
  %2401 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %2400, i64 0, i32 1
  %2402 = load %struct.BF_BitstreamPart*, %struct.BF_BitstreamPart** %2401, align 8, !tbaa !41
  %2403 = getelementptr inbounds %struct.BF_BitstreamPart, %struct.BF_BitstreamPart* %2402, i64 0, i32 0
  store i32 0, i32* %2403, align 8, !tbaa !37
  %2404 = icmp sgt i32 %2397, 31
  br i1 %2404, label %2405, label %2411

2405:                                             ; preds = %2405, %2395
  %2406 = phi %struct.BF_PartHolder* [ %2408, %2405 ], [ %2400, %2395 ]
  %2407 = phi i32 [ %2409, %2405 ], [ 0, %2395 ]
  %2408 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2406, i32 0, i32 32) #21
  store %struct.BF_PartHolder* %2408, %struct.BF_PartHolder** @userFrameDataPH, align 8, !tbaa !7
  %2409 = add nuw nsw i32 %2407, 1
  %2410 = icmp eq i32 %2409, %2398
  br i1 %2410, label %2411, label %2405

2411:                                             ; preds = %2405, %2395
  %2412 = phi %struct.BF_PartHolder* [ %2400, %2395 ], [ %2408, %2405 ]
  %2413 = icmp eq i32 %2399, 0
  br i1 %2413, label %2416, label %2414

2414:                                             ; preds = %2411
  %2415 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %2412, i32 0, i32 %2399) #21
  store %struct.BF_PartHolder* %2415, %struct.BF_PartHolder** @userFrameDataPH, align 8, !tbaa !7
  br label %2416

2416:                                             ; preds = %2414, %2411
  %2417 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 8, !tbaa !7
  %2418 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %2417, i64 0, i32 0
  store i32 %1, i32* %2418, align 8, !tbaa !51
  %2419 = load i32, i32* %249, align 8, !tbaa !95
  %2420 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %2417, i64 0, i32 1
  store i32 %2419, i32* %2420, align 4, !tbaa !49
  %2421 = load i32, i32* %224, align 4, !tbaa !126
  %2422 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %2417, i64 0, i32 2
  store i32 %2421, i32* %2422, align 8, !tbaa !48
  %2423 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @headerPH, align 8, !tbaa !7
  %2424 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %2423, i64 0, i32 1
  %2425 = bitcast %struct.BF_BitstreamPart** %2424 to i64*
  %2426 = load i64, i64* %2425, align 8, !tbaa !41
  %2427 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %2417, i64 0, i32 3
  %2428 = bitcast %struct.BF_BitstreamPart** %2427 to i64*
  store i64 %2426, i64* %2428, align 8, !tbaa !35
  %2429 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @frameSIPH, align 8, !tbaa !7
  %2430 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %2429, i64 0, i32 1
  %2431 = bitcast %struct.BF_BitstreamPart** %2430 to i64*
  %2432 = load i64, i64* %2431, align 8, !tbaa !41
  %2433 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %2417, i64 0, i32 4
  %2434 = bitcast %struct.BF_BitstreamPart** %2433 to i64*
  store i64 %2432, i64* %2434, align 8, !tbaa !46
  %2435 = icmp sgt i32 %2421, 0
  br i1 %2435, label %2436, label %2469

2436:                                             ; preds = %2416
  %2437 = zext i32 %2421 to i64
  %2438 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** getelementptr inbounds ([2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* @channelSIPH, i64 0, i64 0), align 16, !tbaa !7
  %2439 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %2438, i64 0, i32 1
  %2440 = bitcast %struct.BF_BitstreamPart** %2439 to i64*
  %2441 = load i64, i64* %2440, align 8, !tbaa !41
  %2442 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %2417, i64 0, i32 5, i64 0
  %2443 = bitcast %struct.BF_BitstreamPart** %2442 to i64*
  store i64 %2441, i64* %2443, align 8, !tbaa !7
  %2444 = icmp eq i32 %2421, 1
  br i1 %2444, label %2469, label %2445

2445:                                             ; preds = %2436
  %2446 = add nsw i64 %2437, -1
  %2447 = add nsw i64 %2437, -2
  %2448 = and i64 %2446, 3
  %2449 = icmp ult i64 %2447, 3
  br i1 %2449, label %2452, label %2450

2450:                                             ; preds = %2445
  %2451 = sub nsw i64 %2446, %2448
  br label %2474

2452:                                             ; preds = %2474, %2445
  %2453 = phi i64 [ 1, %2445 ], [ %2512, %2474 ]
  %2454 = icmp eq i64 %2448, 0
  br i1 %2454, label %2469, label %2455

2455:                                             ; preds = %2455, %2452
  %2456 = phi i64 [ %2466, %2455 ], [ %2453, %2452 ]
  %2457 = phi i64 [ %2467, %2455 ], [ %2448, %2452 ]
  %2458 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 8, !tbaa !7
  %2459 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* @channelSIPH, i64 0, i64 %2456
  %2460 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2459, align 8, !tbaa !7
  %2461 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %2460, i64 0, i32 1
  %2462 = bitcast %struct.BF_BitstreamPart** %2461 to i64*
  %2463 = load i64, i64* %2462, align 8, !tbaa !41
  %2464 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %2458, i64 0, i32 5, i64 %2456
  %2465 = bitcast %struct.BF_BitstreamPart** %2464 to i64*
  store i64 %2463, i64* %2465, align 8, !tbaa !7
  %2466 = add nuw nsw i64 %2456, 1
  %2467 = add i64 %2457, -1
  %2468 = icmp eq i64 %2467, 0
  br i1 %2468, label %2469, label %2455, !llvm.loop !149

2469:                                             ; preds = %2455, %2452, %2436, %2416
  %2470 = icmp sgt i32 %2419, 0
  br i1 %2470, label %2471, label %2556

2471:                                             ; preds = %2469
  %2472 = zext i32 %2419 to i64
  %2473 = zext i32 %2421 to i64
  br label %2515

2474:                                             ; preds = %2474, %2450
  %2475 = phi i64 [ 1, %2450 ], [ %2512, %2474 ]
  %2476 = phi i64 [ %2451, %2450 ], [ %2513, %2474 ]
  %2477 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 8, !tbaa !7
  %2478 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* @channelSIPH, i64 0, i64 %2475
  %2479 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2478, align 8, !tbaa !7
  %2480 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %2479, i64 0, i32 1
  %2481 = bitcast %struct.BF_BitstreamPart** %2480 to i64*
  %2482 = load i64, i64* %2481, align 8, !tbaa !41
  %2483 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %2477, i64 0, i32 5, i64 %2475
  %2484 = bitcast %struct.BF_BitstreamPart** %2483 to i64*
  store i64 %2482, i64* %2484, align 8, !tbaa !7
  %2485 = add nuw nsw i64 %2475, 1
  %2486 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 8, !tbaa !7
  %2487 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* @channelSIPH, i64 0, i64 %2485
  %2488 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2487, align 8, !tbaa !7
  %2489 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %2488, i64 0, i32 1
  %2490 = bitcast %struct.BF_BitstreamPart** %2489 to i64*
  %2491 = load i64, i64* %2490, align 8, !tbaa !41
  %2492 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %2486, i64 0, i32 5, i64 %2485
  %2493 = bitcast %struct.BF_BitstreamPart** %2492 to i64*
  store i64 %2491, i64* %2493, align 8, !tbaa !7
  %2494 = add nuw nsw i64 %2475, 2
  %2495 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 8, !tbaa !7
  %2496 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* @channelSIPH, i64 0, i64 %2494
  %2497 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2496, align 8, !tbaa !7
  %2498 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %2497, i64 0, i32 1
  %2499 = bitcast %struct.BF_BitstreamPart** %2498 to i64*
  %2500 = load i64, i64* %2499, align 8, !tbaa !41
  %2501 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %2495, i64 0, i32 5, i64 %2494
  %2502 = bitcast %struct.BF_BitstreamPart** %2501 to i64*
  store i64 %2500, i64* %2502, align 8, !tbaa !7
  %2503 = add nuw nsw i64 %2475, 3
  %2504 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 8, !tbaa !7
  %2505 = getelementptr inbounds [2 x %struct.BF_PartHolder*], [2 x %struct.BF_PartHolder*]* @channelSIPH, i64 0, i64 %2503
  %2506 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2505, align 8, !tbaa !7
  %2507 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %2506, i64 0, i32 1
  %2508 = bitcast %struct.BF_BitstreamPart** %2507 to i64*
  %2509 = load i64, i64* %2508, align 8, !tbaa !41
  %2510 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %2504, i64 0, i32 5, i64 %2503
  %2511 = bitcast %struct.BF_BitstreamPart** %2510 to i64*
  store i64 %2509, i64* %2511, align 8, !tbaa !7
  %2512 = add nuw nsw i64 %2475, 4
  %2513 = add i64 %2476, -4
  %2514 = icmp eq i64 %2513, 0
  br i1 %2514, label %2452, label %2474

2515:                                             ; preds = %2553, %2471
  %2516 = phi i64 [ 0, %2471 ], [ %2554, %2553 ]
  br i1 %2435, label %2517, label %2553

2517:                                             ; preds = %2517, %2515
  %2518 = phi i64 [ %2551, %2517 ], [ 0, %2515 ]
  %2519 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @spectrumSIPH, i64 0, i64 %2516, i64 %2518
  %2520 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2519, align 8, !tbaa !7
  %2521 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %2520, i64 0, i32 1
  %2522 = bitcast %struct.BF_BitstreamPart** %2521 to i64*
  %2523 = load i64, i64* %2522, align 8, !tbaa !41
  %2524 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 8, !tbaa !7
  %2525 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %2524, i64 0, i32 6, i64 %2516, i64 %2518
  %2526 = bitcast %struct.BF_BitstreamPart** %2525 to i64*
  store i64 %2523, i64* %2526, align 8, !tbaa !7
  %2527 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @scaleFactorsPH, i64 0, i64 %2516, i64 %2518
  %2528 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2527, align 8, !tbaa !7
  %2529 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %2528, i64 0, i32 1
  %2530 = bitcast %struct.BF_BitstreamPart** %2529 to i64*
  %2531 = load i64, i64* %2530, align 8, !tbaa !41
  %2532 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 8, !tbaa !7
  %2533 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %2532, i64 0, i32 7, i64 %2516, i64 %2518
  %2534 = bitcast %struct.BF_BitstreamPart** %2533 to i64*
  store i64 %2531, i64* %2534, align 8, !tbaa !7
  %2535 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @codedDataPH, i64 0, i64 %2516, i64 %2518
  %2536 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2535, align 8, !tbaa !7
  %2537 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %2536, i64 0, i32 1
  %2538 = bitcast %struct.BF_BitstreamPart** %2537 to i64*
  %2539 = load i64, i64* %2538, align 8, !tbaa !41
  %2540 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 8, !tbaa !7
  %2541 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %2540, i64 0, i32 8, i64 %2516, i64 %2518
  %2542 = bitcast %struct.BF_BitstreamPart** %2541 to i64*
  store i64 %2539, i64* %2542, align 8, !tbaa !7
  %2543 = getelementptr inbounds [2 x [2 x %struct.BF_PartHolder*]], [2 x [2 x %struct.BF_PartHolder*]]* @userSpectrumPH, i64 0, i64 %2516, i64 %2518
  %2544 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %2543, align 8, !tbaa !7
  %2545 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %2544, i64 0, i32 1
  %2546 = bitcast %struct.BF_BitstreamPart** %2545 to i64*
  %2547 = load i64, i64* %2546, align 8, !tbaa !41
  %2548 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 8, !tbaa !7
  %2549 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %2548, i64 0, i32 9, i64 %2516, i64 %2518
  %2550 = bitcast %struct.BF_BitstreamPart** %2549 to i64*
  store i64 %2547, i64* %2550, align 8, !tbaa !7
  %2551 = add nuw nsw i64 %2518, 1
  %2552 = icmp eq i64 %2551, %2473
  br i1 %2552, label %2553, label %2517

2553:                                             ; preds = %2517, %2515
  %2554 = add nuw nsw i64 %2516, 1
  %2555 = icmp eq i64 %2554, %2472
  br i1 %2555, label %2556, label %2515

2556:                                             ; preds = %2553, %2469
  %2557 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** @userFrameDataPH, align 8, !tbaa !7
  %2558 = getelementptr inbounds %struct.BF_PartHolder, %struct.BF_PartHolder* %2557, i64 0, i32 1
  %2559 = bitcast %struct.BF_BitstreamPart** %2558 to i64*
  %2560 = load i64, i64* %2559, align 8, !tbaa !41
  %2561 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 8, !tbaa !7
  %2562 = getelementptr inbounds %struct.BF_FrameData, %struct.BF_FrameData* %2561, i64 0, i32 10
  %2563 = bitcast %struct.BF_BitstreamPart** %2562 to i64*
  store i64 %2560, i64* %2563, align 8, !tbaa !72
  %2564 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** @frameResults, align 8, !tbaa !7
  tail call void @BF_BitstreamFrame(%struct.BF_FrameData* %2561, %struct.BF_FrameResults* %2564) #21
  %2565 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** @frameResults, align 8, !tbaa !7
  %2566 = getelementptr inbounds %struct.BF_FrameResults, %struct.BF_FrameResults* %2565, i64 0, i32 2
  %2567 = load i32, i32* %2566, align 4, !tbaa !73
  store i32 %2567, i32* %340, align 8, !tbaa !129
  ret void
}

; Function Attrs: nounwind uwtable
define internal fastcc void @Huffmancodebits(%struct.BF_PartHolder** nocapture %0, i32* nocapture readonly %1, %struct.gr_info* nocapture readonly %2) unnamed_addr #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #21
  %9 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #21
  %10 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #21
  %11 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #21
  %12 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 1
  %13 = load i32, i32* %12, align 4, !tbaa !134
  %14 = shl i32 %13, 1
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %115, label %16

16:                                               ; preds = %3
  %17 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 7
  %18 = load i32, i32* %17, align 4, !tbaa !139
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %78

20:                                               ; preds = %16
  %21 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 6
  %22 = load i32, i32* %21, align 8, !tbaa !138
  %23 = icmp eq i32 %22, 2
  br i1 %23, label %24, label %62

24:                                               ; preds = %20
  %25 = bitcast i32* %1 to [192 x [3 x i32]]*
  %26 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 8, i64 0
  %27 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 8, i64 1
  br label %28

28:                                               ; preds = %283, %24
  %29 = phi i64 [ 0, %24 ], [ %33, %283 ]
  %30 = phi i32 [ 0, %24 ], [ %284, %283 ]
  %31 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 1, i64 %29
  %32 = load i32, i32* %31, align 4, !tbaa !18
  %33 = add nuw nsw i64 %29, 1
  %34 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 1, i64 %33
  %35 = load i32, i32* %34, align 4, !tbaa !18
  %36 = icmp slt i32 %32, 12
  %37 = select i1 %36, i32* %26, i32* %27
  %38 = load i32, i32* %37, align 4, !tbaa !18
  %39 = icmp slt i32 %32, %35
  %40 = sext i32 %32 to i64
  %41 = sext i32 %35 to i64
  br i1 %39, label %42, label %283

42:                                               ; preds = %42, %28
  %43 = phi i64 [ %59, %42 ], [ %40, %28 ]
  %44 = phi i32 [ %58, %42 ], [ %30, %28 ]
  %45 = getelementptr inbounds [192 x [3 x i32]], [192 x [3 x i32]]* %25, i64 0, i64 %43, i64 0
  %46 = load i32, i32* %45, align 4, !tbaa !18
  %47 = add nsw i64 %43, 1
  %48 = getelementptr inbounds [192 x [3 x i32]], [192 x [3 x i32]]* %25, i64 0, i64 %47, i64 0
  %49 = load i32, i32* %48, align 4, !tbaa !18
  %50 = call i32 @HuffmanCode(i32 %38, i32 %46, i32 %49, i32* nonnull %6, i32* nonnull %7, i32* nonnull %4, i32* nonnull %5)
  %51 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %0, align 8, !tbaa !7
  %52 = load i32, i32* %6, align 4, !tbaa !18
  %53 = load i32, i32* %4, align 4, !tbaa !18
  %54 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %51, i32 %52, i32 %53) #21
  store %struct.BF_PartHolder* %54, %struct.BF_PartHolder** %0, align 8, !tbaa !7
  %55 = load i32, i32* %7, align 4, !tbaa !18
  %56 = load i32, i32* %5, align 4, !tbaa !18
  %57 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %54, i32 %55, i32 %56) #21
  store %struct.BF_PartHolder* %57, %struct.BF_PartHolder** %0, align 8, !tbaa !7
  %58 = add nsw i32 %50, %44
  %59 = add i64 %43, 2
  %60 = icmp slt i64 %59, %41
  br i1 %60, label %42, label %61

61:                                               ; preds = %42
  br i1 %39, label %244, label %283

62:                                               ; preds = %20
  %63 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 10
  %64 = load i32, i32* %63, align 8, !tbaa !140
  %65 = add i32 %64, 1
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 0, i64 %66
  %68 = load i32, i32* %67, align 4, !tbaa !18
  %69 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 11
  %70 = load i32, i32* %69, align 4, !tbaa !141
  %71 = add i32 %64, 2
  %72 = add i32 %71, %70
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 0, i64 %73
  %75 = load i32, i32* %74, align 4, !tbaa !18
  %76 = sext i32 %75 to i64
  %77 = sext i32 %68 to i64
  br label %78

78:                                               ; preds = %62, %16
  %79 = phi i64 [ %76, %62 ], [ 576, %16 ]
  %80 = phi i64 [ %77, %62 ], [ 36, %16 ]
  %81 = icmp sgt i32 %14, 0
  br i1 %81, label %82, label %115

82:                                               ; preds = %78
  %83 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 8, i64 2
  %84 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 8, i64 1
  %85 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 8, i64 0
  %86 = zext i32 %14 to i64
  br label %87

87:                                               ; preds = %111, %82
  %88 = phi i64 [ 0, %82 ], [ %113, %111 ]
  %89 = phi i32 [ 0, %82 ], [ %112, %111 ]
  %90 = icmp slt i64 %88, %80
  %91 = icmp slt i64 %88, %79
  %92 = select i1 %91, i32* %84, i32* %83
  %93 = select i1 %90, i32* %85, i32* %92
  %94 = load i32, i32* %93, align 4, !tbaa !18
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %111, label %96

96:                                               ; preds = %87
  %97 = or i64 %88, 1
  %98 = getelementptr inbounds i32, i32* %1, i64 %97
  %99 = load i32, i32* %98, align 4, !tbaa !18
  %100 = getelementptr inbounds i32, i32* %1, i64 %88
  %101 = load i32, i32* %100, align 4, !tbaa !18
  %102 = call i32 @HuffmanCode(i32 %94, i32 %101, i32 %99, i32* nonnull %6, i32* nonnull %7, i32* nonnull %4, i32* nonnull %5)
  %103 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %0, align 8, !tbaa !7
  %104 = load i32, i32* %6, align 4, !tbaa !18
  %105 = load i32, i32* %4, align 4, !tbaa !18
  %106 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %103, i32 %104, i32 %105) #21
  store %struct.BF_PartHolder* %106, %struct.BF_PartHolder** %0, align 8, !tbaa !7
  %107 = load i32, i32* %7, align 4, !tbaa !18
  %108 = load i32, i32* %5, align 4, !tbaa !18
  %109 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %106, i32 %107, i32 %108) #21
  store %struct.BF_PartHolder* %109, %struct.BF_PartHolder** %0, align 8, !tbaa !7
  %110 = add nsw i32 %102, %89
  br label %111

111:                                              ; preds = %96, %87
  %112 = phi i32 [ %110, %96 ], [ %89, %87 ]
  %113 = add nuw nsw i64 %88, 2
  %114 = icmp ult i64 %113, %86
  br i1 %114, label %87, label %115

115:                                              ; preds = %283, %111, %78, %3
  %116 = phi i32 [ 0, %3 ], [ 0, %78 ], [ %284, %283 ], [ %112, %111 ]
  %117 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 2
  %118 = load i32, i32* %117, align 8, !tbaa !150
  %119 = shl i32 %118, 2
  %120 = add i32 %119, %14
  %121 = icmp slt i32 %14, %120
  br i1 %121, label %122, label %212

122:                                              ; preds = %115
  %123 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 14
  %124 = sext i32 %14 to i64
  %125 = sext i32 %120 to i64
  %126 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %0, align 8, !tbaa !7
  br label %127

127:                                              ; preds = %127, %122
  %128 = phi %struct.BF_PartHolder* [ %126, %122 ], [ %207, %127 ]
  %129 = phi i64 [ %124, %122 ], [ %210, %127 ]
  %130 = phi i32 [ %116, %122 ], [ %209, %127 ]
  %131 = getelementptr inbounds i32, i32* %1, i64 %129
  %132 = load i32, i32* %131, align 4, !tbaa !18
  %133 = or i64 %129, 1
  %134 = getelementptr inbounds i32, i32* %1, i64 %133
  %135 = load i32, i32* %134, align 4, !tbaa !18
  %136 = add nsw i64 %129, 2
  %137 = getelementptr inbounds i32, i32* %1, i64 %136
  %138 = load i32, i32* %137, align 4, !tbaa !18
  %139 = add nsw i64 %129, 3
  %140 = getelementptr inbounds i32, i32* %1, i64 %139
  %141 = load i32, i32* %140, align 4, !tbaa !18
  %142 = load i32, i32* %123, align 8, !tbaa !144
  %143 = add i32 %142, 32
  %144 = zext i32 %143 to i64
  %145 = icmp sgt i32 %132, 0
  %146 = sub nsw i32 0, %132
  %147 = select i1 %145, i32 %132, i32 %146
  %148 = icmp sgt i32 %135, 0
  %149 = sub nsw i32 0, %135
  %150 = select i1 %148, i32 %135, i32 %149
  %151 = xor i1 %148, true
  %152 = zext i1 %151 to i32
  %153 = icmp sgt i32 %138, 0
  %154 = sub nsw i32 0, %138
  %155 = select i1 %153, i32 %138, i32 %154
  %156 = xor i1 %153, true
  %157 = zext i1 %156 to i32
  %158 = icmp sgt i32 %141, 0
  %159 = sub nsw i32 0, %141
  %160 = select i1 %158, i32 %141, i32 %159
  %161 = xor i1 %158, true
  %162 = zext i1 %161 to i32
  %163 = shl i32 %147, 3
  %164 = shl i32 %150, 2
  %165 = add nsw i32 %164, %163
  %166 = shl nuw i32 %155, 1
  %167 = add nsw i32 %165, %166
  %168 = add nsw i32 %167, %160
  %169 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 %144, i32 2
  %170 = load i64*, i64** %169, align 8, !tbaa !151
  %171 = zext i32 %168 to i64
  %172 = getelementptr inbounds i64, i64* %170, i64 %171
  %173 = load i64, i64* %172, align 8, !tbaa !19
  %174 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 %144, i32 3
  %175 = load i8*, i8** %174, align 8, !tbaa !153
  %176 = getelementptr inbounds i8, i8* %175, i64 %171
  %177 = load i8, i8* %176, align 1, !tbaa !26
  %178 = zext i8 %177 to i32
  %179 = trunc i64 %173 to i32
  %180 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %128, i32 %179, i32 %178) #21
  store %struct.BF_PartHolder* %180, %struct.BF_PartHolder** %0, align 8, !tbaa !7
  %181 = icmp eq i32 %147, 0
  %182 = or i1 %145, %181
  %183 = xor i1 %182, true
  %184 = zext i1 %183 to i32
  %185 = xor i1 %181, true
  %186 = zext i1 %185 to i32
  %187 = icmp eq i32 %150, 0
  %188 = select i1 %182, i32 0, i32 2
  %189 = or i32 %188, %152
  %190 = select i1 %181, i32 1, i32 2
  %191 = select i1 %187, i32 %184, i32 %189
  %192 = select i1 %187, i32 %186, i32 %190
  %193 = icmp eq i32 %155, 0
  %194 = shl nuw nsw i32 %191, 1
  %195 = or i32 %194, %157
  %196 = select i1 %193, i32 %191, i32 %195
  %197 = xor i1 %193, true
  %198 = zext i1 %197 to i32
  %199 = add nuw nsw i32 %192, %198
  %200 = icmp eq i32 %160, 0
  %201 = shl nuw nsw i32 %196, 1
  %202 = or i32 %201, %162
  %203 = select i1 %200, i32 %196, i32 %202
  %204 = xor i1 %200, true
  %205 = zext i1 %204 to i32
  %206 = add nuw nsw i32 %199, %205
  %207 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %180, i32 %203, i32 %206) #21
  store %struct.BF_PartHolder* %207, %struct.BF_PartHolder** %0, align 8, !tbaa !7
  %208 = add i32 %206, %130
  %209 = add i32 %208, %178
  %210 = add i64 %129, 4
  %211 = icmp slt i64 %210, %125
  br i1 %211, label %127, label %212

212:                                              ; preds = %127, %115
  %213 = phi i32 [ %116, %115 ], [ %209, %127 ]
  %214 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 0
  %215 = load i32, i32* %214, align 8, !tbaa !132
  %216 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 15
  %217 = load i32, i32* %216, align 4, !tbaa !154
  %218 = sub i32 %215, %217
  %219 = sub i32 %218, %213
  %220 = icmp eq i32 %219, 0
  br i1 %220, label %243, label %221

221:                                              ; preds = %212
  %222 = srem i32 %219, 32
  %223 = sdiv i32 %219, 32
  %224 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %225 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %224, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.157, i64 0, i64 0), i32 %219) #19
  %226 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %227 = tail call i64 @fwrite(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1.158, i64 0, i64 0), i64 26, i64 1, %struct._IO_FILE* %226) #19
  %228 = add i32 %219, 31
  %229 = icmp ult i32 %228, 63
  br i1 %229, label %238, label %230

230:                                              ; preds = %221
  %231 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %0, align 8, !tbaa !7
  br label %232

232:                                              ; preds = %232, %230
  %233 = phi %struct.BF_PartHolder* [ %236, %232 ], [ %231, %230 ]
  %234 = phi i32 [ %235, %232 ], [ %223, %230 ]
  %235 = add nsw i32 %234, -1
  %236 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %233, i32 -1, i32 32) #21
  store %struct.BF_PartHolder* %236, %struct.BF_PartHolder** %0, align 8, !tbaa !7
  %237 = icmp eq i32 %235, 0
  br i1 %237, label %238, label %232

238:                                              ; preds = %232, %221
  %239 = icmp eq i32 %222, 0
  br i1 %239, label %243, label %240

240:                                              ; preds = %238
  %241 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %0, align 8, !tbaa !7
  %242 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %241, i32 -1, i32 %222) #21
  store %struct.BF_PartHolder* %242, %struct.BF_PartHolder** %0, align 8, !tbaa !7
  br label %243

243:                                              ; preds = %240, %238, %212
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #21
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #21
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #21
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #21
  ret void

244:                                              ; preds = %244, %61
  %245 = phi i64 [ %261, %244 ], [ %40, %61 ]
  %246 = phi i32 [ %260, %244 ], [ %58, %61 ]
  %247 = getelementptr inbounds [192 x [3 x i32]], [192 x [3 x i32]]* %25, i64 0, i64 %245, i64 1
  %248 = load i32, i32* %247, align 4, !tbaa !18
  %249 = add nsw i64 %245, 1
  %250 = getelementptr inbounds [192 x [3 x i32]], [192 x [3 x i32]]* %25, i64 0, i64 %249, i64 1
  %251 = load i32, i32* %250, align 4, !tbaa !18
  %252 = call i32 @HuffmanCode(i32 %38, i32 %248, i32 %251, i32* nonnull %6, i32* nonnull %7, i32* nonnull %4, i32* nonnull %5)
  %253 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %0, align 8, !tbaa !7
  %254 = load i32, i32* %6, align 4, !tbaa !18
  %255 = load i32, i32* %4, align 4, !tbaa !18
  %256 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %253, i32 %254, i32 %255) #21
  store %struct.BF_PartHolder* %256, %struct.BF_PartHolder** %0, align 8, !tbaa !7
  %257 = load i32, i32* %7, align 4, !tbaa !18
  %258 = load i32, i32* %5, align 4, !tbaa !18
  %259 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %256, i32 %257, i32 %258) #21
  store %struct.BF_PartHolder* %259, %struct.BF_PartHolder** %0, align 8, !tbaa !7
  %260 = add nsw i32 %252, %246
  %261 = add i64 %245, 2
  %262 = icmp slt i64 %261, %41
  br i1 %262, label %244, label %263

263:                                              ; preds = %244
  br i1 %39, label %264, label %283

264:                                              ; preds = %264, %263
  %265 = phi i64 [ %281, %264 ], [ %40, %263 ]
  %266 = phi i32 [ %280, %264 ], [ %260, %263 ]
  %267 = getelementptr inbounds [192 x [3 x i32]], [192 x [3 x i32]]* %25, i64 0, i64 %265, i64 2
  %268 = load i32, i32* %267, align 4, !tbaa !18
  %269 = add nsw i64 %265, 1
  %270 = getelementptr inbounds [192 x [3 x i32]], [192 x [3 x i32]]* %25, i64 0, i64 %269, i64 2
  %271 = load i32, i32* %270, align 4, !tbaa !18
  %272 = call i32 @HuffmanCode(i32 %38, i32 %268, i32 %271, i32* nonnull %6, i32* nonnull %7, i32* nonnull %4, i32* nonnull %5)
  %273 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %0, align 8, !tbaa !7
  %274 = load i32, i32* %6, align 4, !tbaa !18
  %275 = load i32, i32* %4, align 4, !tbaa !18
  %276 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %273, i32 %274, i32 %275) #21
  store %struct.BF_PartHolder* %276, %struct.BF_PartHolder** %0, align 8, !tbaa !7
  %277 = load i32, i32* %7, align 4, !tbaa !18
  %278 = load i32, i32* %5, align 4, !tbaa !18
  %279 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %276, i32 %277, i32 %278) #21
  store %struct.BF_PartHolder* %279, %struct.BF_PartHolder** %0, align 8, !tbaa !7
  %280 = add nsw i32 %272, %266
  %281 = add i64 %265, 2
  %282 = icmp slt i64 %281, %41
  br i1 %282, label %264, label %283

283:                                              ; preds = %264, %263, %61, %28
  %284 = phi i32 [ %260, %263 ], [ %58, %61 ], [ %30, %28 ], [ %280, %264 ]
  %285 = icmp eq i64 %33, 13
  br i1 %285, label %115, label %28
}

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local i32 @HuffmanCode(i32 %0, i32 %1, i32 %2, i32* nocapture %3, i32* nocapture %4, i32* nocapture %5, i32* nocapture %6) local_unnamed_addr #5 {
  store i32 0, i32* %5, align 4, !tbaa !18
  store i32 0, i32* %6, align 4, !tbaa !18
  store i32 0, i32* %3, align 4, !tbaa !18
  store i32 0, i32* %4, align 4, !tbaa !18
  %8 = icmp eq i32 %0, 0
  br i1 %8, label %108, label %9

9:                                                ; preds = %7
  %10 = icmp sgt i32 %1, 0
  %11 = sub nsw i32 0, %1
  %12 = select i1 %10, i32 %1, i32 %11
  %13 = xor i1 %10, true
  %14 = zext i1 %13 to i32
  %15 = icmp sgt i32 %2, 0
  %16 = sub nsw i32 0, %2
  %17 = select i1 %15, i32 %2, i32 %16
  %18 = xor i1 %15, true
  %19 = zext i1 %18 to i32
  %20 = sext i32 %0 to i64
  %21 = icmp sgt i32 %0, 15
  br i1 %21, label %22, label %73

22:                                               ; preds = %9
  %23 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 %20, i32 0
  %24 = load i32, i32* %23, align 8, !tbaa !155
  %25 = icmp sgt i32 %12, 14
  %26 = select i1 %25, i32 15, i32 %12
  %27 = icmp sgt i32 %17, 14
  %28 = add nsw i32 %17, -15
  %29 = select i1 %27, i32 15, i32 %17
  %30 = select i1 %27, i32 %28, i32 0
  %31 = shl nuw nsw i32 %26, 4
  %32 = add nuw nsw i32 %31, %29
  %33 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 %20, i32 2
  %34 = load i64*, i64** %33, align 8, !tbaa !151
  %35 = zext i32 %32 to i64
  %36 = getelementptr inbounds i64, i64* %34, i64 %35
  %37 = load i64, i64* %36, align 8, !tbaa !19
  %38 = trunc i64 %37 to i32
  store i32 %38, i32* %3, align 4, !tbaa !18
  %39 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 %20, i32 3
  %40 = load i8*, i8** %39, align 8, !tbaa !153
  %41 = getelementptr inbounds i8, i8* %40, i64 %35
  %42 = load i8, i8* %41, align 1, !tbaa !26
  %43 = zext i8 %42 to i32
  store i32 %43, i32* %5, align 4, !tbaa !18
  br i1 %25, label %44, label %50

44:                                               ; preds = %22
  %45 = add nsw i32 %12, -15
  %46 = load i32, i32* %4, align 4, !tbaa !18
  %47 = or i32 %46, %45
  store i32 %47, i32* %4, align 4, !tbaa !18
  %48 = load i32, i32* %6, align 4, !tbaa !18
  %49 = add i32 %48, %24
  store i32 %49, i32* %6, align 4, !tbaa !18
  br label %52

50:                                               ; preds = %22
  %51 = icmp eq i32 %26, 0
  br i1 %51, label %58, label %52

52:                                               ; preds = %50, %44
  %53 = load i32, i32* %4, align 4, !tbaa !18
  %54 = shl i32 %53, 1
  %55 = or i32 %54, %14
  store i32 %55, i32* %4, align 4, !tbaa !18
  %56 = load i32, i32* %6, align 4, !tbaa !18
  %57 = add nsw i32 %56, 1
  store i32 %57, i32* %6, align 4, !tbaa !18
  br label %58

58:                                               ; preds = %52, %50
  br i1 %27, label %59, label %65

59:                                               ; preds = %58
  %60 = load i32, i32* %4, align 4, !tbaa !18
  %61 = shl i32 %60, %24
  %62 = or i32 %61, %30
  store i32 %62, i32* %4, align 4, !tbaa !18
  %63 = load i32, i32* %6, align 4, !tbaa !18
  %64 = add i32 %63, %24
  store i32 %64, i32* %6, align 4, !tbaa !18
  br label %67

65:                                               ; preds = %58
  %66 = icmp eq i32 %29, 0
  br i1 %66, label %104, label %67

67:                                               ; preds = %65, %59
  %68 = load i32, i32* %4, align 4, !tbaa !18
  %69 = shl i32 %68, 1
  %70 = or i32 %69, %19
  store i32 %70, i32* %4, align 4, !tbaa !18
  %71 = load i32, i32* %6, align 4, !tbaa !18
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %6, align 4, !tbaa !18
  br label %104

73:                                               ; preds = %9
  %74 = shl i32 %12, 4
  %75 = add nuw nsw i32 %74, %17
  %76 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 %20, i32 2
  %77 = load i64*, i64** %76, align 8, !tbaa !151
  %78 = zext i32 %75 to i64
  %79 = getelementptr inbounds i64, i64* %77, i64 %78
  %80 = load i64, i64* %79, align 8, !tbaa !19
  %81 = trunc i64 %80 to i32
  store i32 %81, i32* %3, align 4, !tbaa !18
  %82 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 %20, i32 3
  %83 = load i8*, i8** %82, align 8, !tbaa !153
  %84 = getelementptr inbounds i8, i8* %83, i64 %78
  %85 = load i8, i8* %84, align 1, !tbaa !26
  %86 = zext i8 %85 to i32
  %87 = load i32, i32* %5, align 4, !tbaa !18
  %88 = add nsw i32 %87, %86
  store i32 %88, i32* %5, align 4, !tbaa !18
  %89 = icmp eq i32 %12, 0
  br i1 %89, label %96, label %90

90:                                               ; preds = %73
  %91 = load i32, i32* %3, align 4, !tbaa !18
  %92 = shl i32 %91, 1
  %93 = or i32 %92, %14
  store i32 %93, i32* %3, align 4, !tbaa !18
  %94 = load i32, i32* %5, align 4, !tbaa !18
  %95 = add nsw i32 %94, 1
  store i32 %95, i32* %5, align 4, !tbaa !18
  br label %96

96:                                               ; preds = %90, %73
  %97 = icmp eq i32 %17, 0
  br i1 %97, label %104, label %98

98:                                               ; preds = %96
  %99 = load i32, i32* %3, align 4, !tbaa !18
  %100 = shl i32 %99, 1
  %101 = or i32 %100, %19
  store i32 %101, i32* %3, align 4, !tbaa !18
  %102 = load i32, i32* %5, align 4, !tbaa !18
  %103 = add nsw i32 %102, 1
  store i32 %103, i32* %5, align 4, !tbaa !18
  br label %104

104:                                              ; preds = %98, %96, %67, %65
  %105 = load i32, i32* %5, align 4, !tbaa !18
  %106 = load i32, i32* %6, align 4, !tbaa !18
  %107 = add nsw i32 %106, %105
  br label %108

108:                                              ; preds = %104, %7
  %109 = phi i32 [ %107, %104 ], [ 0, %7 ]
  ret i32 %109
}

; Function Attrs: nounwind uwtable
define dso_local void @III_FlushBitstream() local_unnamed_addr #0 {
  %1 = load i32, i32* @PartHoldersInitialized, align 4, !tbaa !18
  %2 = icmp eq i32 %1, 0
  br i1 %2, label %6, label %3

3:                                                ; preds = %0
  %4 = load %struct.BF_FrameData*, %struct.BF_FrameData** @frameData, align 8, !tbaa !7
  %5 = load %struct.BF_FrameResults*, %struct.BF_FrameResults** @frameResults, align 8, !tbaa !7
  tail call void @BF_FlushBitstream(%struct.BF_FrameData* %4, %struct.BF_FrameResults* %5) #21
  br label %6

6:                                                ; preds = %3, %0
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local i32 @abs_and_sign(i32* nocapture %0) local_unnamed_addr #5 {
  %2 = load i32, i32* %0, align 4, !tbaa !18
  %3 = icmp sgt i32 %2, 0
  br i1 %3, label %6, label %4

4:                                                ; preds = %1
  %5 = sub nsw i32 0, %2
  store i32 %5, i32* %0, align 4, !tbaa !18
  br label %6

6:                                                ; preds = %4, %1
  %7 = phi i32 [ 1, %4 ], [ 0, %1 ]
  ret i32 %7
}

; Function Attrs: nounwind uwtable
define dso_local i32 @L3_huffman_coder_count1(%struct.BF_PartHolder** nocapture %0, %struct.huffcodetab* nocapture readonly %1, i32 %2, i32 %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = icmp sgt i32 %2, 0
  %8 = sub nsw i32 0, %2
  %9 = select i1 %7, i32 %2, i32 %8
  %10 = icmp sgt i32 %3, 0
  %11 = sub nsw i32 0, %3
  %12 = select i1 %10, i32 %3, i32 %11
  %13 = xor i1 %10, true
  %14 = zext i1 %13 to i32
  %15 = icmp sgt i32 %4, 0
  %16 = sub nsw i32 0, %4
  %17 = select i1 %15, i32 %4, i32 %16
  %18 = xor i1 %15, true
  %19 = zext i1 %18 to i32
  %20 = icmp sgt i32 %5, 0
  %21 = sub nsw i32 0, %5
  %22 = select i1 %20, i32 %5, i32 %21
  %23 = xor i1 %20, true
  %24 = zext i1 %23 to i32
  %25 = shl i32 %9, 3
  %26 = shl i32 %12, 2
  %27 = add nsw i32 %26, %25
  %28 = shl nuw i32 %17, 1
  %29 = add nsw i32 %27, %28
  %30 = add nsw i32 %29, %22
  %31 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %1, i64 0, i32 2
  %32 = load i64*, i64** %31, align 8, !tbaa !151
  %33 = zext i32 %30 to i64
  %34 = getelementptr inbounds i64, i64* %32, i64 %33
  %35 = load i64, i64* %34, align 8, !tbaa !19
  %36 = getelementptr inbounds %struct.huffcodetab, %struct.huffcodetab* %1, i64 0, i32 3
  %37 = load i8*, i8** %36, align 8, !tbaa !153
  %38 = getelementptr inbounds i8, i8* %37, i64 %33
  %39 = load i8, i8* %38, align 1, !tbaa !26
  %40 = zext i8 %39 to i32
  %41 = load %struct.BF_PartHolder*, %struct.BF_PartHolder** %0, align 8, !tbaa !7
  %42 = trunc i64 %35 to i32
  %43 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %41, i32 %42, i32 %40) #21
  store %struct.BF_PartHolder* %43, %struct.BF_PartHolder** %0, align 8, !tbaa !7
  %44 = icmp eq i32 %9, 0
  %45 = or i1 %7, %44
  %46 = xor i1 %45, true
  %47 = zext i1 %46 to i32
  %48 = xor i1 %44, true
  %49 = zext i1 %48 to i32
  %50 = icmp eq i32 %12, 0
  %51 = select i1 %45, i32 0, i32 2
  %52 = or i32 %51, %14
  %53 = select i1 %44, i32 1, i32 2
  %54 = select i1 %50, i32 %47, i32 %52
  %55 = select i1 %50, i32 %49, i32 %53
  %56 = icmp eq i32 %17, 0
  %57 = shl nuw nsw i32 %54, 1
  %58 = or i32 %57, %19
  %59 = select i1 %56, i32 %54, i32 %58
  %60 = xor i1 %56, true
  %61 = zext i1 %60 to i32
  %62 = add nuw nsw i32 %55, %61
  %63 = icmp eq i32 %22, 0
  %64 = shl nuw nsw i32 %59, 1
  %65 = or i32 %64, %24
  %66 = select i1 %63, i32 %59, i32 %65
  %67 = xor i1 %63, true
  %68 = zext i1 %67 to i32
  %69 = add nuw nsw i32 %62, %68
  %70 = tail call %struct.BF_PartHolder* @BF_addEntry(%struct.BF_PartHolder* %43, i32 %66, i32 %69) #21
  store %struct.BF_PartHolder* %70, %struct.BF_PartHolder** %0, align 8, !tbaa !7
  %71 = add nuw nsw i32 %69, %40
  ret i32 %71
}

; Function Attrs: nounwind uwtable
define dso_local void @lame_init_params(%struct.lame_global_flags* %0) local_unnamed_addr #0 {
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(56) bitcast (%struct.bit_stream_struc* @bs.159 to i8*), i8 0, i64 56, i1 false)
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(528) bitcast (%struct.III_side_info_t* @l3_side to i8*), i8 0, i64 528, i1 false)
  %2 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 39
  store i64 0, i64* %2, align 8, !tbaa !93
  tail call void @InitFormatBitStream() #21
  %3 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 8, !tbaa !86
  %5 = icmp eq i32 %4, 1
  %6 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 8
  br i1 %5, label %7, label %10

7:                                                ; preds = %1
  store i32 3, i32* %6, align 4, !tbaa !121
  %8 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 46
  %9 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 8
  br label %15

10:                                               ; preds = %1
  %11 = load i32, i32* %6, align 4, !tbaa !121
  %12 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 46
  %13 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 8
  %14 = icmp eq i32 %11, 3
  br i1 %14, label %15, label %18

15:                                               ; preds = %10, %7
  %16 = phi i32* [ %9, %7 ], [ %13, %10 ]
  %17 = phi i32* [ %8, %7 ], [ %12, %10 ]
  br label %18

18:                                               ; preds = %15, %10
  %19 = phi i32* [ %16, %15 ], [ %13, %10 ]
  %20 = phi i32* [ %17, %15 ], [ %12, %10 ]
  %21 = phi i32 [ 3, %15 ], [ %11, %10 ]
  %22 = phi i32 [ 1, %15 ], [ 2, %10 ]
  store i32 %22, i32* %20, align 4
  %23 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 3
  %24 = load i32, i32* %23, align 8, !tbaa !156
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %29, label %26

26:                                               ; preds = %18
  %27 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 11
  %28 = load i32, i32* %27, align 8, !tbaa !157
  br label %80

29:                                               ; preds = %18
  %30 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 2
  %31 = load i32, i32* %30, align 4, !tbaa !85
  store i32 %31, i32* %23, align 8, !tbaa !156
  %32 = icmp sgt i32 %31, 47999
  br i1 %32, label %42, label %33

33:                                               ; preds = %29
  %34 = icmp sgt i32 %31, 44099
  br i1 %34, label %42, label %35

35:                                               ; preds = %33
  %36 = icmp sgt i32 %31, 31999
  br i1 %36, label %42, label %37

37:                                               ; preds = %35
  %38 = icmp sgt i32 %31, 23999
  br i1 %38, label %42, label %39

39:                                               ; preds = %37
  %40 = icmp slt i32 %31, 22050
  %41 = select i1 %40, i32 16000, i32 22050
  br label %42

42:                                               ; preds = %39, %37, %35, %33, %29
  %43 = phi i32 [ 48000, %29 ], [ 44100, %33 ], [ 32000, %35 ], [ 24000, %37 ], [ %41, %39 ]
  store i32 %43, i32* %23, align 8, !tbaa !156
  %44 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 11
  %45 = load i32, i32* %44, align 8, !tbaa !157
  %46 = icmp sgt i32 %45, 0
  br i1 %46, label %47, label %80

47:                                               ; preds = %42
  %48 = shl nuw nsw i32 %22, 4
  %49 = mul nuw nsw i32 %48, %43
  %50 = sitofp i32 %49 to double
  %51 = sitofp i32 %45 to double
  %52 = fmul double %51, 1.000000e+03
  %53 = fdiv double %50, %52
  %54 = fptrunc double %53 to float
  %55 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 21
  %56 = load i32, i32* %55, align 8, !tbaa !158
  %57 = icmp eq i32 %56, 0
  %58 = fcmp ogt float %54, 1.300000e+01
  %59 = and i1 %57, %58
  br i1 %59, label %60, label %80

60:                                               ; preds = %47
  %61 = fmul double %51, 1.000000e+04
  %62 = sitofp i32 %48 to double
  %63 = fdiv double %61, %62
  %64 = fptosi double %63 to i32
  store i32 %64, i32* %23, align 8, !tbaa !156
  %65 = icmp slt i32 %64, 16001
  br i1 %65, label %66, label %67

66:                                               ; preds = %60
  store i32 16000, i32* %23, align 8, !tbaa !156
  br label %80

67:                                               ; preds = %60
  %68 = icmp slt i32 %64, 22051
  br i1 %68, label %69, label %70

69:                                               ; preds = %67
  store i32 22050, i32* %23, align 8, !tbaa !156
  br label %80

70:                                               ; preds = %67
  %71 = icmp slt i32 %64, 24001
  br i1 %71, label %72, label %73

72:                                               ; preds = %70
  store i32 24000, i32* %23, align 8, !tbaa !156
  br label %80

73:                                               ; preds = %70
  %74 = icmp slt i32 %64, 32001
  br i1 %74, label %75, label %76

75:                                               ; preds = %73
  store i32 32000, i32* %23, align 8, !tbaa !156
  br label %80

76:                                               ; preds = %73
  %77 = icmp slt i32 %64, 44101
  br i1 %77, label %78, label %79

78:                                               ; preds = %76
  store i32 44100, i32* %23, align 8, !tbaa !156
  br label %80

79:                                               ; preds = %76
  store i32 48000, i32* %23, align 8, !tbaa !156
  br label %80

80:                                               ; preds = %79, %78, %75, %72, %69, %66, %47, %42, %26
  %81 = phi i32 [ %45, %42 ], [ %45, %66 ], [ %45, %72 ], [ %45, %78 ], [ %45, %79 ], [ %45, %75 ], [ %45, %69 ], [ %45, %47 ], [ %28, %26 ]
  %82 = phi i32 [ %43, %42 ], [ 16000, %66 ], [ 24000, %72 ], [ 44100, %78 ], [ 48000, %79 ], [ 32000, %75 ], [ 22050, %69 ], [ %43, %47 ], [ %24, %26 ]
  %83 = icmp slt i32 %82, 24001
  %84 = select i1 %83, i32 1, i32 2
  %85 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 45
  store i32 %84, i32* %85, align 8, !tbaa !95
  %86 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 41
  store i32 800, i32* %86, align 8, !tbaa !159
  %87 = mul nuw nsw i32 %84, 576
  %88 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 42
  store i32 %87, i32* %88, align 4, !tbaa !160
  %89 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 11
  %90 = icmp eq i32 %81, 0
  br i1 %90, label %91, label %93

91:                                               ; preds = %80
  %92 = select i1 %83, i32 64, i32 128
  store i32 %92, i32* %89, align 8
  br label %93

93:                                               ; preds = %91, %80
  %94 = phi i32 [ %92, %91 ], [ %81, %80 ]
  %95 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 49
  store float 1.000000e+00, float* %95, align 8, !tbaa !161
  %96 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 2
  %97 = load i32, i32* %96, align 4, !tbaa !85
  %98 = icmp eq i32 %82, %97
  br i1 %98, label %103, label %99

99:                                               ; preds = %93
  %100 = sitofp i32 %97 to float
  %101 = sitofp i32 %82 to float
  %102 = fdiv float %100, %101
  store float %102, float* %95, align 8, !tbaa !161
  br label %103

103:                                              ; preds = %99, %93
  %104 = phi float [ 1.000000e+00, %93 ], [ %102, %99 ]
  %105 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 40
  %106 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 0
  %107 = load i64, i64* %106, align 8, !tbaa !87
  %108 = uitofp i64 %107 to float
  %109 = sitofp i32 %87 to float
  %110 = fmul float %104, %109
  %111 = fdiv float %108, %110
  %112 = fadd float %111, 2.000000e+00
  %113 = fptosi float %112 to i64
  store i64 %113, i64* %105, align 8, !tbaa !94
  %114 = icmp sgt i32 %94, 319
  %115 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 21
  br i1 %114, label %118, label %116

116:                                              ; preds = %103
  %117 = load i32, i32* %115, align 8, !tbaa !158
  br label %119

118:                                              ; preds = %103
  store i32 0, i32* %115, align 8, !tbaa !158
  br label %119

119:                                              ; preds = %118, %116
  %120 = phi i32 [ %117, %116 ], [ 0, %118 ]
  %121 = shl nuw nsw i32 %22, 4
  %122 = mul i32 %121, %82
  %123 = sitofp i32 %122 to double
  %124 = sitofp i32 %94 to double
  %125 = fmul double %124, 1.000000e+03
  %126 = fdiv double %123, %125
  %127 = fptrunc double %126 to float
  %128 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 21
  %129 = icmp ne i32 %120, 0
  %130 = fcmp ogt float %127, 1.100000e+01
  %131 = and i1 %130, %129
  br i1 %131, label %132, label %138

132:                                              ; preds = %119
  %133 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 22
  %134 = load i32, i32* %133, align 4, !tbaa !162
  %135 = sitofp i32 %134 to double
  %136 = fadd double %135, 4.400000e+00
  %137 = fptrunc double %136 to float
  br label %138

138:                                              ; preds = %132, %119
  %139 = phi float [ %137, %132 ], [ %127, %119 ]
  %140 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 9
  %141 = load i32, i32* %140, align 8, !tbaa !163
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %143, label %148

143:                                              ; preds = %138
  %144 = icmp ne i32 %21, 3
  %145 = fcmp olt float %139, 9.000000e+00
  %146 = and i1 %144, %145
  br i1 %146, label %147, label %148

147:                                              ; preds = %143
  store i32 0, i32* %19, align 4, !tbaa !121
  br label %148

148:                                              ; preds = %147, %143, %138
  %149 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 25
  %150 = load i32, i32* %149, align 8, !tbaa !164
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %152, label %168

152:                                              ; preds = %148
  %153 = fpext float %139 to double
  %154 = fmul double %153, 6.250000e-02
  %155 = tail call double @log(double %154) #21
  %156 = fmul double %155, 1.800000e+01
  %157 = fsub double 1.450000e+01, %156
  %158 = tail call double @llvm.floor.f64(double %157)
  %159 = fadd double %158, 1.000000e+00
  %160 = fptosi double %159 to i32
  %161 = icmp slt i32 %160, 31
  br i1 %161, label %162, label %168

162:                                              ; preds = %152
  %163 = sitofp i32 %160 to double
  %164 = fdiv double %163, 3.100000e+01
  %165 = fptrunc double %164 to float
  %166 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 53
  store float %165, float* %166, align 8, !tbaa !165
  %167 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 54
  store float %165, float* %167, align 4, !tbaa !166
  br label %168

168:                                              ; preds = %162, %152, %148
  %169 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 26
  %170 = load i32, i32* %169, align 4, !tbaa !167
  %171 = icmp sgt i32 %170, 0
  br i1 %171, label %172, label %196

172:                                              ; preds = %168
  %173 = sitofp i32 %170 to double
  %174 = fmul double %173, 2.000000e+00
  %175 = load i32, i32* %23, align 8, !tbaa !156
  %176 = sitofp i32 %175 to double
  %177 = fdiv double %174, %176
  %178 = fptrunc double %177 to float
  %179 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 55
  store float %178, float* %179, align 8, !tbaa !168
  %180 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 28
  %181 = load i32, i32* %180, align 4, !tbaa !169
  %182 = icmp sgt i32 %181, -1
  br i1 %182, label %183, label %189

183:                                              ; preds = %172
  %184 = add nuw nsw i32 %181, %170
  %185 = sitofp i32 %184 to double
  %186 = fmul double %185, 2.000000e+00
  %187 = fdiv double %186, %176
  %188 = fptrunc double %187 to float
  br label %189

189:                                              ; preds = %183, %172
  %190 = phi float [ %188, %183 ], [ %178, %172 ]
  %191 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 56
  %192 = fcmp ogt float %178, 1.000000e+00
  %193 = select i1 %192, float 1.000000e+00, float %178
  store float %193, float* %179, align 8, !tbaa !168
  %194 = fcmp ogt float %190, 1.000000e+00
  %195 = select i1 %194, float 1.000000e+00, float %190
  store float %195, float* %191, align 4, !tbaa !170
  br label %196

196:                                              ; preds = %189, %168
  %197 = load i32, i32* %149, align 8, !tbaa !164
  %198 = icmp sgt i32 %197, 0
  br i1 %198, label %199, label %228

199:                                              ; preds = %196
  %200 = sitofp i32 %197 to double
  %201 = fmul double %200, 2.000000e+00
  %202 = load i32, i32* %23, align 8, !tbaa !156
  %203 = sitofp i32 %202 to double
  %204 = fdiv double %201, %203
  %205 = fptrunc double %204 to float
  %206 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 54
  store float %205, float* %206, align 4, !tbaa !166
  %207 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 27
  %208 = load i32, i32* %207, align 8, !tbaa !171
  %209 = icmp sgt i32 %208, -1
  br i1 %209, label %210, label %219

210:                                              ; preds = %199
  %211 = sub nsw i32 %197, %208
  %212 = sitofp i32 %211 to double
  %213 = fmul double %212, 2.000000e+00
  %214 = fdiv double %213, %203
  %215 = fptrunc double %214 to float
  %216 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 53
  store float %215, float* %216, align 8, !tbaa !165
  %217 = fcmp olt float %215, 0.000000e+00
  br i1 %217, label %218, label %221

218:                                              ; preds = %210
  store float 0.000000e+00, float* %216, align 8, !tbaa !165
  br label %221

219:                                              ; preds = %199
  %220 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 53
  store float %205, float* %220, align 8, !tbaa !165
  br label %221

221:                                              ; preds = %219, %218, %210
  %222 = phi float [ %215, %210 ], [ 0.000000e+00, %218 ], [ %205, %219 ]
  %223 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 53
  %224 = fcmp ogt float %222, 1.000000e+00
  %225 = select i1 %224, float 1.000000e+00, float %222
  store float %225, float* %223, align 8, !tbaa !165
  %226 = fcmp ogt float %205, 1.000000e+00
  %227 = select i1 %226, float 1.000000e+00, float %205
  store float %227, float* %206, align 4, !tbaa !166
  br label %228

228:                                              ; preds = %221, %196
  %229 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 59
  %230 = load i32, i32* %229, align 8, !tbaa !172
  %231 = icmp eq i32 %230, 0
  br i1 %231, label %232, label %353

232:                                              ; preds = %228
  %233 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 53
  %234 = load float, float* %233, align 8, !tbaa !165
  %235 = fcmp ogt float %234, 0.000000e+00
  br i1 %235, label %236, label %285

236:                                              ; preds = %232
  %237 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 54
  %238 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 57
  br label %239

239:                                              ; preds = %270, %236
  %240 = phi i32 [ 999, %236 ], [ %271, %270 ]
  %241 = phi i32 [ 0, %236 ], [ %272, %270 ]
  %242 = sitofp i32 %241 to double
  %243 = fdiv double %242, 3.100000e+01
  %244 = load float, float* %237, align 4, !tbaa !166
  %245 = fpext float %244 to double
  %246 = fcmp ult double %243, %245
  br i1 %246, label %251, label %247

247:                                              ; preds = %239
  %248 = load i32, i32* %238, align 8, !tbaa !173
  %249 = icmp slt i32 %248, %241
  %250 = select i1 %249, i32 %248, i32 %241
  store i32 %250, i32* %238, align 8, !tbaa !173
  br label %251

251:                                              ; preds = %247, %239
  %252 = load float, float* %233, align 8, !tbaa !165
  %253 = fpext float %252 to double
  %254 = fcmp ogt double %243, %253
  %255 = fcmp olt double %243, %245
  %256 = and i1 %255, %254
  br i1 %256, label %257, label %270

257:                                              ; preds = %251
  %258 = icmp slt i32 %240, %241
  %259 = select i1 %258, i32 %240, i32 %241
  %260 = fsub double %253, %243
  %261 = fmul double %260, 0x3FF921FB54442D18
  %262 = fsub float %244, %252
  %263 = fpext float %262 to double
  %264 = fdiv double %261, %263
  %265 = fcmp oeq double %264, 0xFFF0000000000000
  %266 = fcmp oeq double %264, 0x7FF0000000000000
  %267 = or i1 %266, %265
  br i1 %267, label %268, label %270, !prof !174

268:                                              ; preds = %257
  %269 = tail call double @cos(double %264) #21
  br label %270

270:                                              ; preds = %268, %257, %251
  %271 = phi i32 [ %240, %251 ], [ %259, %257 ], [ %259, %268 ]
  %272 = add nuw nsw i32 %241, 1
  %273 = icmp eq i32 %272, 32
  br i1 %273, label %274, label %239

274:                                              ; preds = %270
  %275 = icmp eq i32 %271, 999
  %276 = load i32, i32* %238, align 8, !tbaa !173
  %277 = select i1 %275, i32 %276, i32 %271
  %278 = sitofp i32 %277 to double
  %279 = fadd double %278, -7.500000e-01
  %280 = fdiv double %279, 3.100000e+01
  %281 = fptrunc double %280 to float
  store float %281, float* %233, align 8, !tbaa !165
  %282 = sitofp i32 %276 to double
  %283 = fdiv double %282, 3.100000e+01
  %284 = fptrunc double %283 to float
  store float %284, float* %237, align 4, !tbaa !166
  br label %285

285:                                              ; preds = %274, %232
  %286 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 56
  %287 = load float, float* %286, align 4, !tbaa !170
  %288 = fcmp ogt float %287, 0.000000e+00
  %289 = fpext float %287 to double
  %290 = fcmp olt double %289, 0x3F964BF964BF964C
  %291 = and i1 %288, %290
  br i1 %291, label %292, label %297

292:                                              ; preds = %285
  %293 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 55
  store float 0.000000e+00, float* %293, align 8, !tbaa !168
  store float 0.000000e+00, float* %286, align 4, !tbaa !170
  %294 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %295 = tail call i64 @fwrite(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.160, i64 0, i64 0), i64 64, i64 1, %struct._IO_FILE* %294) #19
  %296 = load float, float* %286, align 4, !tbaa !170
  br label %297

297:                                              ; preds = %292, %285
  %298 = phi float [ %296, %292 ], [ %287, %285 ]
  %299 = fcmp ogt float %298, 0.000000e+00
  br i1 %299, label %300, label %353

300:                                              ; preds = %297
  %301 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 55
  %302 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 58
  br label %303

303:                                              ; preds = %334, %300
  %304 = phi i32 [ -1, %300 ], [ %335, %334 ]
  %305 = phi i32 [ 0, %300 ], [ %336, %334 ]
  %306 = sitofp i32 %305 to double
  %307 = fdiv double %306, 3.100000e+01
  %308 = load float, float* %301, align 8, !tbaa !168
  %309 = fpext float %308 to double
  %310 = fcmp ugt double %307, %309
  br i1 %310, label %315, label %311

311:                                              ; preds = %303
  %312 = load i32, i32* %302, align 4, !tbaa !175
  %313 = icmp sgt i32 %312, %305
  %314 = select i1 %313, i32 %312, i32 %305
  store i32 %314, i32* %302, align 4, !tbaa !175
  br label %315

315:                                              ; preds = %311, %303
  %316 = fcmp ogt double %307, %309
  br i1 %316, label %317, label %334

317:                                              ; preds = %315
  %318 = load float, float* %286, align 4, !tbaa !170
  %319 = fpext float %318 to double
  %320 = fcmp olt double %307, %319
  br i1 %320, label %321, label %334

321:                                              ; preds = %317
  %322 = icmp sgt i32 %304, %305
  %323 = select i1 %322, i32 %304, i32 %305
  %324 = fsub double %319, %307
  %325 = fmul double %324, 0x3FF921FB54442D18
  %326 = fsub float %318, %308
  %327 = fpext float %326 to double
  %328 = fdiv double %325, %327
  %329 = fcmp oeq double %328, 0xFFF0000000000000
  %330 = fcmp oeq double %328, 0x7FF0000000000000
  %331 = or i1 %330, %329
  br i1 %331, label %332, label %334, !prof !174

332:                                              ; preds = %321
  %333 = tail call double @cos(double %328) #21
  br label %334

334:                                              ; preds = %332, %321, %317, %315
  %335 = phi i32 [ %304, %317 ], [ %304, %315 ], [ %323, %321 ], [ %323, %332 ]
  %336 = add nuw nsw i32 %305, 1
  %337 = icmp eq i32 %336, 32
  br i1 %337, label %338, label %303

338:                                              ; preds = %334
  %339 = load i32, i32* %302, align 4, !tbaa !175
  %340 = sitofp i32 %339 to double
  %341 = fdiv double %340, 3.100000e+01
  %342 = fptrunc double %341 to float
  store float %342, float* %301, align 8, !tbaa !168
  %343 = icmp eq i32 %335, -1
  br i1 %343, label %344, label %348

344:                                              ; preds = %338
  %345 = fadd double %340, 7.500000e-01
  %346 = fdiv double %345, 3.100000e+01
  %347 = fptrunc double %346 to float
  store float %347, float* %286, align 4, !tbaa !170
  br label %353

348:                                              ; preds = %338
  %349 = sitofp i32 %335 to double
  %350 = fadd double %349, 7.500000e-01
  %351 = fdiv double %350, 3.100000e+01
  %352 = fptrunc double %351 to float
  store float %352, float* %286, align 4, !tbaa !170
  br label %353

353:                                              ; preds = %348, %344, %297, %228
  %354 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 52
  store i32 0, i32* %354, align 4, !tbaa !122
  %355 = load i32, i32* %19, align 4, !tbaa !121
  %356 = icmp eq i32 %355, 3
  %357 = select i1 %356, i32 1, i32 2
  store i32 %357, i32* %20, align 4, !tbaa !126
  %358 = load i32, i32* %23, align 8, !tbaa !156
  %359 = sext i32 %358 to i64
  %360 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 43
  %361 = tail call i32 @SmpFrqIndex(i64 %359, i32* nonnull %360) #21
  %362 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 51
  store i32 %361, i32* %362, align 8, !tbaa !118
  %363 = icmp slt i32 %361, 0
  br i1 %363, label %364, label %366

364:                                              ; preds = %353
  %365 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  tail call void @display_bitrates(%struct._IO_FILE* %365) #21
  tail call void @exit(i32 1) #20
  unreachable

366:                                              ; preds = %353
  %367 = load i32, i32* %89, align 8, !tbaa !157
  %368 = load i32, i32* %360, align 8, !tbaa !115
  %369 = load i32, i32* %23, align 8, !tbaa !156
  %370 = tail call i32 @BitrateIndex(i32 %367, i32 %368, i32 %369) #21
  %371 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 50
  store i32 %370, i32* %371, align 4, !tbaa !117
  %372 = icmp slt i32 %370, 0
  br i1 %372, label %373, label %375

373:                                              ; preds = %366
  %374 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  tail call void @display_bitrates(%struct._IO_FILE* %374) #21
  tail call void @exit(i32 1) #20
  unreachable

375:                                              ; preds = %366
  %376 = load i32, i32* %128, align 8, !tbaa !158
  %377 = icmp eq i32 %376, 0
  br i1 %377, label %428, label %378

378:                                              ; preds = %375
  %379 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 24
  %380 = load i32, i32* %379, align 4, !tbaa !176
  %381 = icmp eq i32 %380, 0
  br i1 %381, label %382, label %396

382:                                              ; preds = %378
  %383 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 48
  %384 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 23
  %385 = load i32, i32* %384, align 8, !tbaa !177
  %386 = icmp sgt i32 %385, 255
  %387 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 22
  %388 = load i32, i32* %387, align 4, !tbaa !162
  %389 = icmp eq i32 %388, 0
  %390 = or i1 %389, %386
  %391 = select i1 %390, i32 14, i32 13
  %392 = icmp sgt i32 %388, 3
  %393 = select i1 %392, i32 12, i32 %391
  %394 = icmp sgt i32 %388, 7
  %395 = select i1 %394, i32 9, i32 %393
  store i32 %395, i32* %383, align 4
  br label %407

396:                                              ; preds = %378
  %397 = load i32, i32* %360, align 8, !tbaa !115
  %398 = load i32, i32* %23, align 8, !tbaa !156
  %399 = tail call i32 @BitrateIndex(i32 %380, i32 %397, i32 %398) #21
  %400 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 48
  store i32 %399, i32* %400, align 4, !tbaa !178
  %401 = icmp slt i32 %399, 0
  br i1 %401, label %405, label %402

402:                                              ; preds = %396
  %403 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 23
  %404 = load i32, i32* %403, align 8, !tbaa !177
  br label %407

405:                                              ; preds = %396
  %406 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  tail call void @display_bitrates(%struct._IO_FILE* %406) #21
  tail call void @exit(i32 1) #20
  unreachable

407:                                              ; preds = %402, %382
  %408 = phi i32 [ %404, %402 ], [ %385, %382 ]
  %409 = icmp eq i32 %408, 0
  br i1 %409, label %410, label %412

410:                                              ; preds = %407
  %411 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 47
  store i32 1, i32* %411, align 8, !tbaa !179
  br label %420

412:                                              ; preds = %407
  %413 = load i32, i32* %360, align 8, !tbaa !115
  %414 = load i32, i32* %23, align 8, !tbaa !156
  %415 = tail call i32 @BitrateIndex(i32 %408, i32 %413, i32 %414) #21
  %416 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 47
  store i32 %415, i32* %416, align 8, !tbaa !179
  %417 = icmp slt i32 %415, 0
  br i1 %417, label %418, label %420

418:                                              ; preds = %412
  %419 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  tail call void @display_bitrates(%struct._IO_FILE* %419) #21
  tail call void @exit(i32 1) #20
  unreachable

420:                                              ; preds = %412, %410
  %421 = load i32, i32* %128, align 8, !tbaa !158
  %422 = icmp eq i32 %421, 0
  br i1 %422, label %428, label %423

423:                                              ; preds = %420
  %424 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 6
  %425 = load i32, i32* %424, align 4, !tbaa !180
  %426 = icmp slt i32 %425, 2
  %427 = select i1 %426, i32 %425, i32 2
  store i32 %427, i32* %424, align 4, !tbaa !180
  br label %428

428:                                              ; preds = %423, %420, %375
  %429 = phi i1 [ true, %420 ], [ false, %423 ], [ true, %375 ]
  %430 = load i32, i32* %19, align 4, !tbaa !121
  %431 = icmp eq i32 %430, 3
  br i1 %431, label %432, label %434

432:                                              ; preds = %428
  %433 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 10
  store i32 0, i32* %433, align 4, !tbaa !181
  br label %434

434:                                              ; preds = %432, %428
  br i1 %429, label %435, label %437

435:                                              ; preds = %434
  %436 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 5
  store i32 0, i32* %436, align 8, !tbaa !182
  br label %437

437:                                              ; preds = %435, %434
  %438 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 32
  %439 = load i8*, i8** %438, align 8, !tbaa !183
  %440 = icmp eq i8* %439, null
  br i1 %440, label %448, label %441

441:                                              ; preds = %437
  %442 = load i8, i8* %439, align 1, !tbaa !26
  %443 = icmp eq i8 %442, 45
  br i1 %443, label %444, label %449

444:                                              ; preds = %441
  %445 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 5
  store i32 0, i32* %445, align 8, !tbaa !182
  %446 = load i8, i8* %439, align 1, !tbaa !26
  %447 = icmp eq i8 %446, 45
  br i1 %447, label %448, label %449

448:                                              ; preds = %444, %437
  store i32 0, i32* getelementptr inbounds (%struct.ID3TAGDATA, %struct.ID3TAGDATA* @id3tag, i64 0, i32 0), align 4, !tbaa !184
  br label %449

449:                                              ; preds = %448, %444, %441
  %450 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 4
  %451 = load i32, i32* %450, align 4, !tbaa !185
  %452 = icmp eq i32 %451, 0
  br i1 %452, label %455, label %453

453:                                              ; preds = %449
  %454 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 5
  store i32 0, i32* %454, align 8, !tbaa !182
  br label %455

455:                                              ; preds = %453, %449
  tail call void @init_bit_stream_w(%struct.bit_stream_struc* nonnull @bs.159) #21
  %456 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 6
  %457 = load i32, i32* %456, align 4, !tbaa !180
  switch i32 %457, label %475 [
    i32 9, label %458
    i32 8, label %460
    i32 7, label %461
    i32 6, label %465
    i32 5, label %466
    i32 4, label %470
    i32 3, label %470
    i32 2, label %471
    i32 1, label %476
    i32 0, label %480
  ]

458:                                              ; preds = %455
  %459 = bitcast i32* %229 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %459, i8 0, i64 24, i1 false)
  br label %475

460:                                              ; preds = %455
  store i32 7, i32* %456, align 4, !tbaa !180
  br label %461

461:                                              ; preds = %460, %455
  %462 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 63
  store i32 1, i32* %462, align 8, !tbaa !186
  %463 = bitcast i32* %229 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %463, align 8, !tbaa !18
  %464 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 64
  store i32 0, i32* %464, align 4, !tbaa !187
  br label %475

465:                                              ; preds = %455
  store i32 5, i32* %456, align 4, !tbaa !180
  br label %466

466:                                              ; preds = %465, %455
  %467 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 63
  store i32 1, i32* %467, align 8, !tbaa !186
  %468 = bitcast i32* %229 to <4 x i32>*
  store <4 x i32> <i32 0, i32 0, i32 1, i32 0>, <4 x i32>* %468, align 8, !tbaa !18
  %469 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 64
  store i32 0, i32* %469, align 4, !tbaa !187
  br label %475

470:                                              ; preds = %455, %455
  store i32 2, i32* %456, align 4, !tbaa !180
  br label %471

471:                                              ; preds = %470, %455
  %472 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 63
  store i32 1, i32* %472, align 8, !tbaa !186
  %473 = bitcast i32* %229 to <4 x i32>*
  store <4 x i32> <i32 0, i32 1, i32 1, i32 0>, <4 x i32>* %473, align 8, !tbaa !18
  %474 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 64
  store i32 1, i32* %474, align 4, !tbaa !187
  br label %475

475:                                              ; preds = %476, %471, %466, %461, %458, %455
  br label %484

476:                                              ; preds = %455
  %477 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 63
  store i32 1, i32* %477, align 8, !tbaa !186
  %478 = bitcast i32* %229 to <4 x i32>*
  store <4 x i32> <i32 0, i32 1, i32 1, i32 1>, <4 x i32>* %478, align 8, !tbaa !18
  %479 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 64
  store i32 1, i32* %479, align 4, !tbaa !187
  br label %475

480:                                              ; preds = %455
  %481 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 63
  store i32 1, i32* %481, align 8, !tbaa !186
  %482 = bitcast i32* %229 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 3, i32 2>, <4 x i32>* %482, align 8, !tbaa !18
  %483 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 64
  store i32 2, i32* %483, align 4, !tbaa !187
  tail call void @exit(i32 -99) #20
  unreachable

484:                                              ; preds = %523, %475
  %485 = phi i64 [ 0, %475 ], [ %527, %523 ]
  %486 = load i32, i32* %362, align 8, !tbaa !118
  %487 = load i32, i32* %360, align 8, !tbaa !115
  %488 = mul nsw i32 %487, 3
  %489 = add nsw i32 %488, %486
  %490 = sext i32 %489 to i64
  %491 = getelementptr inbounds [6 x %struct.scalefac_struct], [6 x %struct.scalefac_struct]* @sfBandIndex, i64 0, i64 %490, i32 0, i64 %485
  %492 = load i32, i32* %491, align 4, !tbaa !18
  %493 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 0, i64 %485
  store i32 %492, i32* %493, align 4, !tbaa !18
  %494 = or i64 %485, 1
  %495 = icmp eq i64 %494, 23
  %496 = load i32, i32* %362, align 8, !tbaa !118
  %497 = load i32, i32* %360, align 8, !tbaa !115
  %498 = mul nsw i32 %497, 3
  %499 = add nsw i32 %498, %496
  %500 = sext i32 %499 to i64
  br i1 %495, label %501, label %523

501:                                              ; preds = %484
  %502 = getelementptr inbounds [6 x %struct.scalefac_struct], [6 x %struct.scalefac_struct]* @sfBandIndex, i64 0, i64 %500, i32 1, i64 0
  %503 = bitcast i32* %502 to <4 x i32>*
  %504 = load <4 x i32>, <4 x i32>* %503, align 4, !tbaa !18
  store <4 x i32> %504, <4 x i32>* bitcast (i32* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 1, i64 0) to <4 x i32>*), align 4, !tbaa !18
  %505 = getelementptr inbounds [6 x %struct.scalefac_struct], [6 x %struct.scalefac_struct]* @sfBandIndex, i64 0, i64 %500, i32 1, i64 4
  %506 = bitcast i32* %505 to <4 x i32>*
  %507 = load <4 x i32>, <4 x i32>* %506, align 4, !tbaa !18
  store <4 x i32> %507, <4 x i32>* bitcast (i32* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 1, i64 4) to <4 x i32>*), align 4, !tbaa !18
  %508 = getelementptr inbounds [6 x %struct.scalefac_struct], [6 x %struct.scalefac_struct]* @sfBandIndex, i64 0, i64 %500, i32 1, i64 8
  %509 = bitcast i32* %508 to <4 x i32>*
  %510 = load <4 x i32>, <4 x i32>* %509, align 4, !tbaa !18
  store <4 x i32> %510, <4 x i32>* bitcast (i32* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 1, i64 8) to <4 x i32>*), align 4, !tbaa !18
  %511 = getelementptr inbounds [6 x %struct.scalefac_struct], [6 x %struct.scalefac_struct]* @sfBandIndex, i64 0, i64 %500, i32 1, i64 12
  %512 = load i32, i32* %511, align 4, !tbaa !18
  store i32 %512, i32* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 1, i64 12), align 4, !tbaa !18
  %513 = getelementptr inbounds [6 x %struct.scalefac_struct], [6 x %struct.scalefac_struct]* @sfBandIndex, i64 0, i64 %500, i32 1, i64 13
  %514 = load i32, i32* %513, align 4, !tbaa !18
  store i32 %514, i32* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 1, i64 13), align 4, !tbaa !18
  %515 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 5
  %516 = load i32, i32* %515, align 8, !tbaa !182
  %517 = icmp eq i32 %516, 0
  br i1 %517, label %522, label %518

518:                                              ; preds = %501
  %519 = sub nsw i32 1, %497
  %520 = load i32, i32* %19, align 4, !tbaa !121
  %521 = tail call i32 @InitVbrTag(%struct.bit_stream_struc* nonnull @bs.159, i32 %519, i32 %520, i32 %496) #21
  br label %522

522:                                              ; preds = %518, %501
  ret void

523:                                              ; preds = %484
  %524 = getelementptr inbounds [6 x %struct.scalefac_struct], [6 x %struct.scalefac_struct]* @sfBandIndex, i64 0, i64 %500, i32 0, i64 %494
  %525 = load i32, i32* %524, align 4, !tbaa !18
  %526 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 0, i64 %494
  store i32 %525, i32* %526, align 4, !tbaa !18
  %527 = add nuw nsw i64 %485, 2
  br label %484
}

; Function Attrs: nofree nounwind
declare dso_local double @log(double) local_unnamed_addr #4

; Function Attrs: nounwind uwtable
define dso_local void @lame_print_config(%struct.lame_global_flags* nocapture readonly %0) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8, !tbaa !156
  %4 = sitofp i32 %3 to double
  %5 = fdiv double %4, 1.000000e+03
  %6 = fptrunc double %5 to float
  %7 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 49
  %8 = load float, float* %7, align 8, !tbaa !161
  %9 = fmul float %8, %6
  %10 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 46
  %11 = load i32, i32* %10, align 4, !tbaa !126
  %12 = shl nsw i32 %11, 4
  %13 = sitofp i32 %12 to float
  %14 = fmul float %6, %13
  %15 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 11
  %16 = load i32, i32* %15, align 8, !tbaa !157
  %17 = sitofp i32 %16 to float
  %18 = fdiv float %14, %17
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  tail call void @lame_print_version(%struct._IO_FILE* %19) #21
  %20 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 1
  %21 = load i32, i32* %20, align 8, !tbaa !86
  %22 = icmp eq i32 %21, 2
  br i1 %22, label %23, label %29

23:                                               ; preds = %1
  %24 = load i32, i32* %10, align 4, !tbaa !126
  %25 = icmp eq i32 %24, 1
  br i1 %25, label %26, label %29

26:                                               ; preds = %23
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %28 = tail call i64 @fwrite(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.5.161, i64 0, i64 0), i64 67, i64 1, %struct._IO_FILE* %27) #19
  br label %29

29:                                               ; preds = %26, %23, %1
  %30 = load float, float* %7, align 8, !tbaa !161
  %31 = fcmp une float %30, 1.000000e+00
  br i1 %31, label %32, label %37

32:                                               ; preds = %29
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %34 = fptosi float %9 to i32
  %35 = fptosi float %6 to i32
  %36 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %33, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.6.162, i64 0, i64 0), i32 %34, i32 %35) #19
  br label %37

37:                                               ; preds = %32, %29
  %38 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 56
  %39 = load float, float* %38, align 4, !tbaa !170
  %40 = fcmp ogt float %39, 0.000000e+00
  br i1 %40, label %41, label %52

41:                                               ; preds = %37
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %43 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 55
  %44 = load float, float* %43, align 8, !tbaa !168
  %45 = fmul float %44, %6
  %46 = fmul float %45, 5.000000e+02
  %47 = fpext float %46 to double
  %48 = fmul float %39, %6
  %49 = fmul float %48, 5.000000e+02
  %50 = fpext float %49 to double
  %51 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %42, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.7.163, i64 0, i64 0), double %47, double %50) #19
  br label %52

52:                                               ; preds = %41, %37
  %53 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 53
  %54 = load float, float* %53, align 8, !tbaa !165
  %55 = fcmp ogt float %54, 0.000000e+00
  br i1 %55, label %56, label %67

56:                                               ; preds = %52
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %58 = fmul float %54, %6
  %59 = fmul float %58, 5.000000e+02
  %60 = fpext float %59 to double
  %61 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 54
  %62 = load float, float* %61, align 4, !tbaa !166
  %63 = fmul float %62, %6
  %64 = fmul float %63, 5.000000e+02
  %65 = fpext float %64 to double
  %66 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %57, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.8.164, i64 0, i64 0), double %60, double %65) #19
  br label %67

67:                                               ; preds = %56, %52
  %68 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 4
  %69 = load i32, i32* %68, align 4, !tbaa !185
  %70 = icmp eq i32 %69, 0
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %72 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 31
  %73 = load i8*, i8** %72, align 8, !tbaa !83
  br i1 %70, label %76, label %74

74:                                               ; preds = %67
  %75 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %71, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.9.165, i64 0, i64 0), i8* %73) #19
  br label %133

76:                                               ; preds = %67
  %77 = tail call i32 @strcmp(i8* nonnull dereferenceable(1) %73, i8* nonnull dereferenceable(2) getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.166, i64 0, i64 0)) #23
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %84, label %79

79:                                               ; preds = %76
  %80 = tail call i8* @strrchr(i8* nonnull dereferenceable(1) %73, i32 47) #23
  %81 = icmp eq i8* %80, null
  %82 = getelementptr inbounds i8, i8* %80, i64 1
  %83 = select i1 %81, i8* %73, i8* %82
  br label %84

84:                                               ; preds = %79, %76
  %85 = phi i8* [ %83, %79 ], [ getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12.167, i64 0, i64 0), %76 ]
  %86 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 32
  %87 = load i8*, i8** %86, align 8, !tbaa !183
  %88 = tail call i32 @strcmp(i8* nonnull dereferenceable(1) %87, i8* nonnull dereferenceable(2) getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.166, i64 0, i64 0)) #23
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %95, label %90

90:                                               ; preds = %84
  %91 = tail call i8* @strrchr(i8* nonnull dereferenceable(1) %87, i32 47) #23
  %92 = icmp eq i8* %91, null
  %93 = getelementptr inbounds i8, i8* %91, i64 1
  %94 = select i1 %92, i8* %87, i8* %93
  br label %95

95:                                               ; preds = %90, %84
  %96 = phi i8* [ %94, %90 ], [ getelementptr inbounds ([7 x i8], [7 x i8]* @.str.13.168, i64 0, i64 0), %84 ]
  %97 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %71, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.10.169, i64 0, i64 0), i8* %85, i8* %96) #19
  %98 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 21
  %99 = load i32, i32* %98, align 8, !tbaa !158
  %100 = icmp eq i32 %99, 0
  %101 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %102 = load i32, i32* %2, align 8, !tbaa !156
  %103 = sitofp i32 %102 to double
  %104 = fdiv double %103, 1.000000e+03
  br i1 %100, label %119, label %105

105:                                              ; preds = %95
  %106 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 22
  %107 = load i32, i32* %106, align 4, !tbaa !162
  %108 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 8
  %109 = load i32, i32* %108, align 4, !tbaa !121
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds [4 x i8*], [4 x i8*]* @lame_print_config.mode_names, i64 0, i64 %110
  %112 = load i8*, i8** %111, align 8, !tbaa !7
  %113 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 43
  %114 = load i32, i32* %113, align 8, !tbaa !115
  %115 = sub nsw i32 2, %114
  %116 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 6
  %117 = load i32, i32* %116, align 4, !tbaa !180
  %118 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %101, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.14.170, i64 0, i64 0), double %104, i32 %107, i8* %112, i32 %115, i32 %117) #19
  br label %133

119:                                              ; preds = %95
  %120 = load i32, i32* %15, align 8, !tbaa !157
  %121 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 8
  %122 = load i32, i32* %121, align 4, !tbaa !121
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds [4 x i8*], [4 x i8*]* @lame_print_config.mode_names, i64 0, i64 %123
  %125 = load i8*, i8** %124, align 8, !tbaa !7
  %126 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 43
  %127 = load i32, i32* %126, align 8, !tbaa !115
  %128 = sub nsw i32 2, %127
  %129 = fpext float %18 to double
  %130 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 6
  %131 = load i32, i32* %130, align 4, !tbaa !180
  %132 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %101, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.15.171, i64 0, i64 0), double %104, i32 %120, i8* %125, i32 %128, double %129, i32 %131) #19
  br label %133

133:                                              ; preds = %119, %105, %74
  %134 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %135 = tail call i32 @fflush(%struct._IO_FILE* %134)
  ret void
}

; Function Attrs: nofree nounwind readonly
declare dso_local i8* @strrchr(i8*, i32) local_unnamed_addr #11

; Function Attrs: nofree nounwind
declare dso_local i32 @fflush(%struct._IO_FILE* nocapture) local_unnamed_addr #4

; Function Attrs: nounwind uwtable
define dso_local i32 @lame_encode_frame(%struct.lame_global_flags* %0, i16* %1, i16* %2, i32 %3, i8* %4, i32 %5) local_unnamed_addr #0 {
  %7 = alloca [2 x [2 x [576 x double]]], align 16
  %8 = alloca [2 x [2 x [576 x i32]]], align 16
  %9 = alloca [2 x [2 x %struct.III_psy_ratio]], align 16
  %10 = alloca [2 x [2 x %struct.III_psy_ratio]], align 16
  %11 = alloca [2 x [2 x %struct.III_scalefac_t]], align 16
  %12 = alloca [2 x i16*], align 16
  %13 = alloca [2 x [2 x double]], align 16
  %14 = alloca [2 x [2 x double]], align 16
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca double, align 8
  %18 = alloca [2 x i16*], align 16
  %19 = alloca [2 x i32], align 4
  %20 = bitcast [2 x [2 x [576 x double]]]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 18432, i8* nonnull %20) #21
  %21 = bitcast [2 x [2 x [576 x i32]]]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 9216, i8* nonnull %21) #21
  %22 = bitcast [2 x [2 x %struct.III_psy_ratio]]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 3904, i8* nonnull %22) #21
  %23 = bitcast [2 x [2 x %struct.III_psy_ratio]]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 3904, i8* nonnull %23) #21
  %24 = bitcast [2 x [2 x %struct.III_scalefac_t]]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 976, i8* nonnull %24) #21
  %25 = bitcast [2 x i16*]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %25) #21
  %26 = bitcast [2 x [2 x double]]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %26) #21
  %27 = bitcast [2 x [2 x double]]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %27) #21
  %28 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28) #21
  %29 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %29) #21
  %30 = bitcast double* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #21
  store double 0.000000e+00, double* %17, align 8, !tbaa !27
  %31 = getelementptr inbounds [2 x [2 x %struct.III_psy_ratio]], [2 x [2 x %struct.III_psy_ratio]]* %9, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(3904) %22, i8 0, i64 3904, i1 false)
  %32 = getelementptr inbounds [2 x [2 x %struct.III_psy_ratio]], [2 x [2 x %struct.III_psy_ratio]]* %10, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(3904) %23, i8 0, i64 3904, i1 false)
  %33 = getelementptr inbounds [2 x [2 x %struct.III_scalefac_t]], [2 x [2 x %struct.III_scalefac_t]]* %11, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(976) %24, i8 0, i64 976, i1 false)
  %34 = getelementptr inbounds [2 x i16*], [2 x i16*]* %12, i64 0, i64 0
  store i16* %1, i16** %34, align 16, !tbaa !7
  %35 = getelementptr inbounds [2 x i16*], [2 x i16*]* %12, i64 0, i64 1
  store i16* %2, i16** %35, align 8, !tbaa !7
  %36 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 52
  store i32 0, i32* %36, align 4, !tbaa !122
  %37 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 39
  %38 = load i64, i64* %37, align 8, !tbaa !93
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %63

40:                                               ; preds = %6
  %41 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 3
  %42 = load i32, i32* %41, align 8, !tbaa !156
  %43 = sitofp i32 %42 to double
  %44 = fdiv double %43, 1.000000e+03
  %45 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 11
  %46 = load i32, i32* %45, align 8, !tbaa !157
  store i64 0, i64* @lame_encode_frame.sentBits, align 8, !tbaa !19
  %47 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 42
  %48 = load i32, i32* %47, align 4, !tbaa !160
  %49 = mul nsw i32 %48, %46
  %50 = sitofp i32 %49 to double
  %51 = fmul double %44, 8.000000e+00
  %52 = fdiv double %50, %51
  %53 = fadd double %52, 1.000000e-09
  %54 = tail call double @llvm.floor.f64(double %53)
  %55 = fsub double %52, %54
  %56 = tail call double @llvm.fabs.f64(double %55)
  %57 = fcmp olt double %56, 1.000000e-09
  %58 = select i1 %57, double 0.000000e+00, double %55
  store double %58, double* @lame_encode_frame.frac_SpF, align 8, !tbaa !27
  %59 = fneg double %58
  store double %59, double* @lame_encode_frame.slot_lag, align 8, !tbaa !27
  %60 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 44
  %61 = fcmp une double %58, 0.000000e+00
  %62 = zext i1 %61 to i32
  store i32 %62, i32* %60, align 4, !tbaa !119
  br label %63

63:                                               ; preds = %40, %6
  %64 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 15
  %65 = load i32, i32* %64, align 8, !tbaa !188
  switch i32 %65, label %70 [
    i32 0, label %66
    i32 1, label %68
  ]

66:                                               ; preds = %63
  %67 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 44
  store i32 0, i32* %67, align 4, !tbaa !119
  br label %96

68:                                               ; preds = %63
  %69 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 44
  store i32 1, i32* %69, align 4, !tbaa !119
  br label %96

70:                                               ; preds = %63
  %71 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 21
  %72 = load i32, i32* %71, align 8, !tbaa !158
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %76, label %74

74:                                               ; preds = %70
  %75 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 44
  store i32 0, i32* %75, align 4, !tbaa !119
  br label %96

76:                                               ; preds = %70
  %77 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 17
  %78 = load i32, i32* %77, align 8, !tbaa !189
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %82, label %80

80:                                               ; preds = %76
  %81 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 44
  store i32 0, i32* %81, align 4, !tbaa !119
  br label %96

82:                                               ; preds = %76
  %83 = load double, double* @lame_encode_frame.frac_SpF, align 8, !tbaa !27
  %84 = fcmp une double %83, 0.000000e+00
  br i1 %84, label %85, label %96

85:                                               ; preds = %82
  %86 = load double, double* @lame_encode_frame.slot_lag, align 8, !tbaa !27
  %87 = fadd double %83, -1.000000e+00
  %88 = fcmp ogt double %86, %87
  br i1 %88, label %89, label %92

89:                                               ; preds = %85
  %90 = fsub double %86, %83
  store double %90, double* @lame_encode_frame.slot_lag, align 8, !tbaa !27
  %91 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 44
  store i32 0, i32* %91, align 4, !tbaa !119
  br label %96

92:                                               ; preds = %85
  %93 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 44
  store i32 1, i32* %93, align 4, !tbaa !119
  %94 = fsub double 1.000000e+00, %83
  %95 = fadd double %94, %86
  store double %95, double* @lame_encode_frame.slot_lag, align 8, !tbaa !27
  br label %96

96:                                               ; preds = %92, %89, %82, %80, %74, %68, %66
  %97 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 4
  %98 = load i32, i32* %97, align 4, !tbaa !185
  %99 = icmp eq i32 %98, 0
  br i1 %99, label %100, label %118

100:                                              ; preds = %96
  %101 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 7
  %102 = load i32, i32* %101, align 8, !tbaa !190
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %104, label %118

104:                                              ; preds = %100
  %105 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 43
  %106 = load i32, i32* %105, align 8, !tbaa !115
  %107 = icmp eq i32 %106, 0
  %108 = select i1 %107, i64 200, i64 50
  %109 = srem i64 %38, %108
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %118

111:                                              ; preds = %104
  %112 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 3
  %113 = load i32, i32* %112, align 8, !tbaa !156
  %114 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 40
  %115 = load i64, i64* %114, align 8, !tbaa !94
  %116 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 42
  %117 = load i32, i32* %116, align 4, !tbaa !160
  tail call void @timestatus(i32 %113, i64 %38, i64 %115, i32 %117) #21
  br label %118

118:                                              ; preds = %111, %104, %100, %96
  %119 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 63
  %120 = load i32, i32* %119, align 8, !tbaa !186
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %136

122:                                              ; preds = %118
  %123 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 45
  %124 = load i32, i32* %123, align 8, !tbaa !95
  %125 = icmp sgt i32 %124, 0
  br i1 %125, label %126, label %385

126:                                              ; preds = %122
  %127 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 46
  %128 = load i32, i32* %127, align 4, !tbaa !126
  %129 = icmp sgt i32 %128, 0
  %130 = zext i32 %124 to i64
  %131 = zext i32 %128 to i64
  %132 = and i64 %131, 1
  %133 = icmp eq i32 %128, 1
  %134 = sub nsw i64 %131, %132
  %135 = icmp eq i64 %132, 0
  br label %315

136:                                              ; preds = %118
  %137 = bitcast [2 x i16*]* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %137) #21
  %138 = bitcast [2 x i32]* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %138) #21
  %139 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 45
  %140 = load i32, i32* %139, align 8, !tbaa !95
  %141 = add nsw i32 %140, -1
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds [2 x double], [2 x double]* @lame_encode_frame.ms_ratio, i64 0, i64 %142
  %144 = load double, double* %143, align 8, !tbaa !27
  %145 = icmp sgt i32 %140, 0
  br i1 %145, label %146, label %313

146:                                              ; preds = %136
  %147 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 46
  %148 = getelementptr inbounds [2 x i16*], [2 x i16*]* %18, i64 0, i64 0
  %149 = getelementptr inbounds [2 x i32], [2 x i32]* %19, i64 0, i64 0
  %150 = load i32, i32* %147, align 4, !tbaa !126
  br label %151

151:                                              ; preds = %308, %146
  %152 = phi i32 [ %150, %146 ], [ %266, %308 ]
  %153 = phi i64 [ 0, %146 ], [ %309, %308 ]
  %154 = icmp sgt i32 %152, 0
  br i1 %154, label %155, label %260

155:                                              ; preds = %151
  %156 = mul i64 %153, 576
  %157 = add i64 %156, 304
  %158 = and i64 %157, 4294967280
  %159 = zext i32 %152 to i64
  %160 = icmp ult i32 %152, 4
  br i1 %160, label %250, label %161

161:                                              ; preds = %155
  %162 = and i64 %159, 4294967292
  %163 = add nsw i64 %162, -4
  %164 = lshr exact i64 %163, 2
  %165 = add nuw nsw i64 %164, 1
  %166 = and i64 %165, 3
  %167 = icmp ult i64 %163, 12
  br i1 %167, label %227, label %168

168:                                              ; preds = %161
  %169 = sub nsw i64 %165, %166
  br label %170

170:                                              ; preds = %170, %168
  %171 = phi i64 [ 0, %168 ], [ %224, %170 ]
  %172 = phi i64 [ %169, %168 ], [ %225, %170 ]
  %173 = getelementptr inbounds [2 x i16*], [2 x i16*]* %12, i64 0, i64 %171
  %174 = bitcast i16** %173 to <2 x i16*>*
  %175 = load <2 x i16*>, <2 x i16*>* %174, align 16, !tbaa !7
  %176 = getelementptr inbounds i16*, i16** %173, i64 2
  %177 = bitcast i16** %176 to <2 x i16*>*
  %178 = load <2 x i16*>, <2 x i16*>* %177, align 16, !tbaa !7
  %179 = getelementptr inbounds i16, <2 x i16*> %175, i64 %158
  %180 = getelementptr inbounds i16, <2 x i16*> %178, i64 %158
  %181 = getelementptr inbounds [2 x i16*], [2 x i16*]* %18, i64 0, i64 %171
  %182 = bitcast i16** %181 to <2 x i16*>*
  store <2 x i16*> %179, <2 x i16*>* %182, align 16, !tbaa !7
  %183 = getelementptr inbounds i16*, i16** %181, i64 2
  %184 = bitcast i16** %183 to <2 x i16*>*
  store <2 x i16*> %180, <2 x i16*>* %184, align 16, !tbaa !7
  %185 = or i64 %171, 4
  %186 = getelementptr inbounds [2 x i16*], [2 x i16*]* %12, i64 0, i64 %185
  %187 = bitcast i16** %186 to <2 x i16*>*
  %188 = load <2 x i16*>, <2 x i16*>* %187, align 16, !tbaa !7
  %189 = getelementptr inbounds i16*, i16** %186, i64 2
  %190 = bitcast i16** %189 to <2 x i16*>*
  %191 = load <2 x i16*>, <2 x i16*>* %190, align 16, !tbaa !7
  %192 = getelementptr inbounds i16, <2 x i16*> %188, i64 %158
  %193 = getelementptr inbounds i16, <2 x i16*> %191, i64 %158
  %194 = getelementptr inbounds [2 x i16*], [2 x i16*]* %18, i64 0, i64 %185
  %195 = bitcast i16** %194 to <2 x i16*>*
  store <2 x i16*> %192, <2 x i16*>* %195, align 16, !tbaa !7
  %196 = getelementptr inbounds i16*, i16** %194, i64 2
  %197 = bitcast i16** %196 to <2 x i16*>*
  store <2 x i16*> %193, <2 x i16*>* %197, align 16, !tbaa !7
  %198 = or i64 %171, 8
  %199 = getelementptr inbounds [2 x i16*], [2 x i16*]* %12, i64 0, i64 %198
  %200 = bitcast i16** %199 to <2 x i16*>*
  %201 = load <2 x i16*>, <2 x i16*>* %200, align 16, !tbaa !7
  %202 = getelementptr inbounds i16*, i16** %199, i64 2
  %203 = bitcast i16** %202 to <2 x i16*>*
  %204 = load <2 x i16*>, <2 x i16*>* %203, align 16, !tbaa !7
  %205 = getelementptr inbounds i16, <2 x i16*> %201, i64 %158
  %206 = getelementptr inbounds i16, <2 x i16*> %204, i64 %158
  %207 = getelementptr inbounds [2 x i16*], [2 x i16*]* %18, i64 0, i64 %198
  %208 = bitcast i16** %207 to <2 x i16*>*
  store <2 x i16*> %205, <2 x i16*>* %208, align 16, !tbaa !7
  %209 = getelementptr inbounds i16*, i16** %207, i64 2
  %210 = bitcast i16** %209 to <2 x i16*>*
  store <2 x i16*> %206, <2 x i16*>* %210, align 16, !tbaa !7
  %211 = or i64 %171, 12
  %212 = getelementptr inbounds [2 x i16*], [2 x i16*]* %12, i64 0, i64 %211
  %213 = bitcast i16** %212 to <2 x i16*>*
  %214 = load <2 x i16*>, <2 x i16*>* %213, align 16, !tbaa !7
  %215 = getelementptr inbounds i16*, i16** %212, i64 2
  %216 = bitcast i16** %215 to <2 x i16*>*
  %217 = load <2 x i16*>, <2 x i16*>* %216, align 16, !tbaa !7
  %218 = getelementptr inbounds i16, <2 x i16*> %214, i64 %158
  %219 = getelementptr inbounds i16, <2 x i16*> %217, i64 %158
  %220 = getelementptr inbounds [2 x i16*], [2 x i16*]* %18, i64 0, i64 %211
  %221 = bitcast i16** %220 to <2 x i16*>*
  store <2 x i16*> %218, <2 x i16*>* %221, align 16, !tbaa !7
  %222 = getelementptr inbounds i16*, i16** %220, i64 2
  %223 = bitcast i16** %222 to <2 x i16*>*
  store <2 x i16*> %219, <2 x i16*>* %223, align 16, !tbaa !7
  %224 = add i64 %171, 16
  %225 = add i64 %172, -4
  %226 = icmp eq i64 %225, 0
  br i1 %226, label %227, label %170, !llvm.loop !191

227:                                              ; preds = %170, %161
  %228 = phi i64 [ 0, %161 ], [ %224, %170 ]
  %229 = icmp eq i64 %166, 0
  br i1 %229, label %248, label %230

230:                                              ; preds = %230, %227
  %231 = phi i64 [ %245, %230 ], [ %228, %227 ]
  %232 = phi i64 [ %246, %230 ], [ %166, %227 ]
  %233 = getelementptr inbounds [2 x i16*], [2 x i16*]* %12, i64 0, i64 %231
  %234 = bitcast i16** %233 to <2 x i16*>*
  %235 = load <2 x i16*>, <2 x i16*>* %234, align 16, !tbaa !7
  %236 = getelementptr inbounds i16*, i16** %233, i64 2
  %237 = bitcast i16** %236 to <2 x i16*>*
  %238 = load <2 x i16*>, <2 x i16*>* %237, align 16, !tbaa !7
  %239 = getelementptr inbounds i16, <2 x i16*> %235, i64 %158
  %240 = getelementptr inbounds i16, <2 x i16*> %238, i64 %158
  %241 = getelementptr inbounds [2 x i16*], [2 x i16*]* %18, i64 0, i64 %231
  %242 = bitcast i16** %241 to <2 x i16*>*
  store <2 x i16*> %239, <2 x i16*>* %242, align 16, !tbaa !7
  %243 = getelementptr inbounds i16*, i16** %241, i64 2
  %244 = bitcast i16** %243 to <2 x i16*>*
  store <2 x i16*> %240, <2 x i16*>* %244, align 16, !tbaa !7
  %245 = add i64 %231, 4
  %246 = add i64 %232, -1
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %248, label %230, !llvm.loop !192

248:                                              ; preds = %230, %227
  %249 = icmp eq i64 %162, %159
  br i1 %249, label %260, label %250

250:                                              ; preds = %248, %155
  %251 = phi i64 [ 0, %155 ], [ %162, %248 ]
  br label %252

252:                                              ; preds = %252, %250
  %253 = phi i64 [ %258, %252 ], [ %251, %250 ]
  %254 = getelementptr inbounds [2 x i16*], [2 x i16*]* %12, i64 0, i64 %253
  %255 = load i16*, i16** %254, align 8, !tbaa !7
  %256 = getelementptr inbounds i16, i16* %255, i64 %158
  %257 = getelementptr inbounds [2 x i16*], [2 x i16*]* %18, i64 0, i64 %253
  store i16* %256, i16** %257, align 8, !tbaa !7
  %258 = add nuw nsw i64 %253, 1
  %259 = icmp ult i64 %258, %159
  br i1 %259, label %252, label %260, !llvm.loop !193

260:                                              ; preds = %252, %248, %151
  %261 = trunc i64 %153 to i32
  %262 = getelementptr inbounds [2 x double], [2 x double]* @lame_encode_frame.ms_ratio, i64 0, i64 %153
  %263 = getelementptr inbounds [2 x double], [2 x double]* @lame_encode_frame.ms_ener_ratio, i64 0, i64 %153
  %264 = getelementptr inbounds [2 x [2 x double]], [2 x [2 x double]]* %13, i64 0, i64 %153, i64 0
  %265 = getelementptr inbounds [2 x [2 x double]], [2 x [2 x double]]* %14, i64 0, i64 %153, i64 0
  call void @L3psycho_anal(%struct.lame_global_flags* nonnull %0, i16** nonnull %148, i32 %261, double* nonnull %262, double* nonnull %17, double* nonnull %263, [2 x %struct.III_psy_ratio]* nonnull %31, [2 x %struct.III_psy_ratio]* nonnull %32, double* nonnull %264, double* nonnull %265, i32* nonnull %149) #21
  %266 = load i32, i32* %147, align 4, !tbaa !126
  %267 = icmp sgt i32 %266, 0
  br i1 %267, label %268, label %308

268:                                              ; preds = %260
  %269 = zext i32 %266 to i64
  %270 = add nsw i64 %269, -1
  %271 = and i64 %269, 3
  %272 = icmp ult i64 %270, 3
  br i1 %272, label %296, label %273

273:                                              ; preds = %268
  %274 = sub nsw i64 %269, %271
  br label %275

275:                                              ; preds = %275, %273
  %276 = phi i64 [ 0, %273 ], [ %293, %275 ]
  %277 = phi i64 [ %274, %273 ], [ %294, %275 ]
  %278 = getelementptr inbounds [2 x i32], [2 x i32]* %19, i64 0, i64 %276
  %279 = load i32, i32* %278, align 4, !tbaa !18
  %280 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i64 0, i32 4, i64 %153, i32 0, i64 %276, i32 0, i32 6
  store i32 %279, i32* %280, align 8, !tbaa !194
  %281 = or i64 %276, 1
  %282 = getelementptr inbounds [2 x i32], [2 x i32]* %19, i64 0, i64 %281
  %283 = load i32, i32* %282, align 4, !tbaa !18
  %284 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i64 0, i32 4, i64 %153, i32 0, i64 %281, i32 0, i32 6
  store i32 %283, i32* %284, align 8, !tbaa !194
  %285 = or i64 %276, 2
  %286 = getelementptr inbounds [2 x i32], [2 x i32]* %19, i64 0, i64 %285
  %287 = load i32, i32* %286, align 4, !tbaa !18
  %288 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i64 0, i32 4, i64 %153, i32 0, i64 %285, i32 0, i32 6
  store i32 %287, i32* %288, align 8, !tbaa !194
  %289 = or i64 %276, 3
  %290 = getelementptr inbounds [2 x i32], [2 x i32]* %19, i64 0, i64 %289
  %291 = load i32, i32* %290, align 4, !tbaa !18
  %292 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i64 0, i32 4, i64 %153, i32 0, i64 %289, i32 0, i32 6
  store i32 %291, i32* %292, align 8, !tbaa !194
  %293 = add nuw nsw i64 %276, 4
  %294 = add i64 %277, -4
  %295 = icmp eq i64 %294, 0
  br i1 %295, label %296, label %275

296:                                              ; preds = %275, %268
  %297 = phi i64 [ 0, %268 ], [ %293, %275 ]
  %298 = icmp eq i64 %271, 0
  br i1 %298, label %308, label %299

299:                                              ; preds = %299, %296
  %300 = phi i64 [ %305, %299 ], [ %297, %296 ]
  %301 = phi i64 [ %306, %299 ], [ %271, %296 ]
  %302 = getelementptr inbounds [2 x i32], [2 x i32]* %19, i64 0, i64 %300
  %303 = load i32, i32* %302, align 4, !tbaa !18
  %304 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i64 0, i32 4, i64 %153, i32 0, i64 %300, i32 0, i32 6
  store i32 %303, i32* %304, align 8, !tbaa !194
  %305 = add nuw nsw i64 %300, 1
  %306 = add i64 %301, -1
  %307 = icmp eq i64 %306, 0
  br i1 %307, label %308, label %299, !llvm.loop !196

308:                                              ; preds = %299, %296, %260
  %309 = add nuw nsw i64 %153, 1
  %310 = load i32, i32* %139, align 8, !tbaa !95
  %311 = sext i32 %310 to i64
  %312 = icmp slt i64 %309, %311
  br i1 %312, label %151, label %313

313:                                              ; preds = %308, %136
  %314 = phi i32 [ %140, %136 ], [ %310, %308 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %138) #21
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %137) #21
  br label %337

315:                                              ; preds = %334, %126
  %316 = phi i64 [ 0, %126 ], [ %335, %334 ]
  br i1 %129, label %317, label %334

317:                                              ; preds = %315
  br i1 %133, label %329, label %318

318:                                              ; preds = %318, %317
  %319 = phi i64 [ %326, %318 ], [ 0, %317 ]
  %320 = phi i64 [ %327, %318 ], [ %134, %317 ]
  %321 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i64 0, i32 4, i64 %316, i32 0, i64 %319, i32 0, i32 6
  store i32 0, i32* %321, align 8, !tbaa !194
  %322 = getelementptr inbounds [2 x [2 x double]], [2 x [2 x double]]* %13, i64 0, i64 %316, i64 %319
  store double 7.000000e+02, double* %322, align 16, !tbaa !27
  %323 = or i64 %319, 1
  %324 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i64 0, i32 4, i64 %316, i32 0, i64 %323, i32 0, i32 6
  store i32 0, i32* %324, align 8, !tbaa !194
  %325 = getelementptr inbounds [2 x [2 x double]], [2 x [2 x double]]* %13, i64 0, i64 %316, i64 %323
  store double 7.000000e+02, double* %325, align 8, !tbaa !27
  %326 = add nuw nsw i64 %319, 2
  %327 = add i64 %320, -2
  %328 = icmp eq i64 %327, 0
  br i1 %328, label %329, label %318

329:                                              ; preds = %318, %317
  %330 = phi i64 [ 0, %317 ], [ %326, %318 ]
  br i1 %135, label %334, label %331

331:                                              ; preds = %329
  %332 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i64 0, i32 4, i64 %316, i32 0, i64 %330, i32 0, i32 6
  store i32 0, i32* %332, align 8, !tbaa !194
  %333 = getelementptr inbounds [2 x [2 x double]], [2 x [2 x double]]* %13, i64 0, i64 %316, i64 %330
  store double 7.000000e+02, double* %333, align 8, !tbaa !27
  br label %334

334:                                              ; preds = %331, %329, %315
  %335 = add nuw nsw i64 %316, 1
  %336 = icmp ult i64 %335, %130
  br i1 %336, label %315, label %337

337:                                              ; preds = %334, %313
  %338 = phi i32 [ %314, %313 ], [ %124, %334 ]
  %339 = phi double [ %144, %313 ], [ 0.000000e+00, %334 ]
  %340 = icmp sgt i32 %338, 0
  br i1 %340, label %341, label %385

341:                                              ; preds = %337
  %342 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 46
  %343 = load i32, i32* %342, align 4, !tbaa !126
  %344 = icmp sgt i32 %343, 0
  %345 = zext i32 %338 to i64
  %346 = zext i32 %343 to i64
  %347 = and i64 %346, 1
  %348 = icmp eq i32 %343, 1
  %349 = sub nsw i64 %346, %347
  %350 = icmp eq i64 %347, 0
  br label %351

351:                                              ; preds = %382, %341
  %352 = phi i64 [ 0, %341 ], [ %383, %382 ]
  br i1 %344, label %353, label %382

353:                                              ; preds = %351
  br i1 %348, label %373, label %354

354:                                              ; preds = %354, %353
  %355 = phi i64 [ %370, %354 ], [ 0, %353 ]
  %356 = phi i64 [ %371, %354 ], [ %349, %353 ]
  %357 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i64 0, i32 4, i64 %352, i32 0, i64 %355, i32 0, i32 7
  store i32 0, i32* %357, align 4, !tbaa !139
  %358 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i64 0, i32 4, i64 %352, i32 0, i64 %355, i32 0, i32 6
  %359 = load i32, i32* %358, align 8, !tbaa !138
  %360 = icmp ne i32 %359, 0
  %361 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i64 0, i32 4, i64 %352, i32 0, i64 %355, i32 0, i32 5
  %362 = zext i1 %360 to i32
  store i32 %362, i32* %361, align 4, !tbaa !137
  %363 = or i64 %355, 1
  %364 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i64 0, i32 4, i64 %352, i32 0, i64 %363, i32 0, i32 7
  store i32 0, i32* %364, align 4, !tbaa !139
  %365 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i64 0, i32 4, i64 %352, i32 0, i64 %363, i32 0, i32 6
  %366 = load i32, i32* %365, align 8, !tbaa !138
  %367 = icmp ne i32 %366, 0
  %368 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i64 0, i32 4, i64 %352, i32 0, i64 %363, i32 0, i32 5
  %369 = zext i1 %367 to i32
  store i32 %369, i32* %368, align 4, !tbaa !137
  %370 = add nuw nsw i64 %355, 2
  %371 = add i64 %356, -2
  %372 = icmp eq i64 %371, 0
  br i1 %372, label %373, label %354

373:                                              ; preds = %354, %353
  %374 = phi i64 [ 0, %353 ], [ %370, %354 ]
  br i1 %350, label %382, label %375

375:                                              ; preds = %373
  %376 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i64 0, i32 4, i64 %352, i32 0, i64 %374, i32 0, i32 7
  store i32 0, i32* %376, align 4, !tbaa !139
  %377 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i64 0, i32 4, i64 %352, i32 0, i64 %374, i32 0, i32 6
  %378 = load i32, i32* %377, align 8, !tbaa !138
  %379 = icmp ne i32 %378, 0
  %380 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i64 0, i32 4, i64 %352, i32 0, i64 %374, i32 0, i32 5
  %381 = zext i1 %379 to i32
  store i32 %381, i32* %380, align 4, !tbaa !137
  br label %382

382:                                              ; preds = %375, %373, %351
  %383 = add nuw nsw i64 %352, 1
  %384 = icmp ult i64 %383, %345
  br i1 %384, label %351, label %385

385:                                              ; preds = %382, %337, %122
  %386 = phi double [ %339, %337 ], [ 0.000000e+00, %122 ], [ %339, %382 ]
  %387 = getelementptr inbounds [2 x [2 x [576 x double]]], [2 x [2 x [576 x double]]]* %7, i64 0, i64 0
  call void @mdct_sub48(%struct.lame_global_flags* nonnull %0, i16* %1, i16* %2, [2 x [576 x double]]* nonnull %387, %struct.III_side_info_t* nonnull @l3_side) #21
  %388 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 8
  %389 = load i32, i32* %388, align 4, !tbaa !121
  %390 = icmp eq i32 %389, 1
  br i1 %390, label %391, label %409

391:                                              ; preds = %385
  %392 = load i32, i32* getelementptr inbounds (%struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i64 0, i32 4, i64 0, i32 0, i64 0, i32 0, i32 6), align 8, !tbaa !194
  %393 = load i32, i32* getelementptr inbounds (%struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i64 0, i32 4, i64 0, i32 0, i64 1, i32 0, i32 6), align 8, !tbaa !194
  %394 = icmp eq i32 %392, %393
  %395 = load i32, i32* getelementptr inbounds (%struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i64 0, i32 4, i64 1, i32 0, i64 0, i32 0, i32 6), align 8
  %396 = load i32, i32* getelementptr inbounds (%struct.III_side_info_t, %struct.III_side_info_t* @l3_side, i64 0, i32 4, i64 1, i32 0, i64 1, i32 0, i32 6), align 8
  %397 = icmp eq i32 %395, %396
  %398 = and i1 %394, %397
  br i1 %398, label %399, label %409

399:                                              ; preds = %391
  %400 = load double, double* getelementptr inbounds ([2 x double], [2 x double]* @lame_encode_frame.ms_ratio, i64 0, i64 0), align 16, !tbaa !27
  %401 = load double, double* getelementptr inbounds ([2 x double], [2 x double]* @lame_encode_frame.ms_ratio, i64 0, i64 1), align 8, !tbaa !27
  %402 = fadd double %400, %401
  %403 = fadd double %386, %402
  %404 = load double, double* %17, align 8, !tbaa !27
  %405 = fadd double %404, %403
  %406 = fmul double %405, 2.500000e-01
  %407 = fcmp olt double %406, 3.500000e-01
  br i1 %407, label %408, label %409

408:                                              ; preds = %399
  store i32 2, i32* %36, align 4, !tbaa !122
  br label %409

409:                                              ; preds = %408, %399, %391, %385
  %410 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 10
  %411 = load i32, i32* %410, align 4, !tbaa !181
  %412 = icmp eq i32 %411, 0
  br i1 %412, label %414, label %413

413:                                              ; preds = %409
  store i32 2, i32* %36, align 4, !tbaa !122
  br label %417

414:                                              ; preds = %409
  %415 = load i32, i32* %36, align 4, !tbaa !122
  %416 = icmp eq i32 %415, 2
  br i1 %416, label %417, label %418

417:                                              ; preds = %414, %413
  br label %418

418:                                              ; preds = %417, %414
  %419 = phi [2 x [2 x %struct.III_psy_ratio]]* [ %10, %417 ], [ %9, %414 ]
  %420 = phi [2 x [2 x double]]* [ %14, %417 ], [ %13, %414 ]
  %421 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 21
  %422 = load i32, i32* %421, align 8, !tbaa !158
  %423 = icmp eq i32 %422, 0
  %424 = getelementptr inbounds [2 x [2 x double]], [2 x [2 x double]]* %420, i64 0, i64 0
  %425 = getelementptr inbounds [2 x [2 x %struct.III_psy_ratio]], [2 x [2 x %struct.III_psy_ratio]]* %419, i64 0, i64 0
  %426 = getelementptr inbounds [2 x [2 x [576 x i32]]], [2 x [2 x [576 x i32]]]* %8, i64 0, i64 0
  br i1 %423, label %428, label %427

427:                                              ; preds = %418
  call void @VBR_iteration_loop(%struct.lame_global_flags* nonnull %0, [2 x double]* nonnull %424, double* getelementptr inbounds ([2 x double], [2 x double]* @lame_encode_frame.ms_ratio, i64 0, i64 0), [2 x [576 x double]]* nonnull %387, [2 x %struct.III_psy_ratio]* nonnull %425, %struct.III_side_info_t* nonnull @l3_side, [2 x [576 x i32]]* nonnull %426, [2 x %struct.III_scalefac_t]* nonnull %33) #21
  br label %429

428:                                              ; preds = %418
  call void @iteration_loop(%struct.lame_global_flags* nonnull %0, [2 x double]* nonnull %424, double* getelementptr inbounds ([2 x double], [2 x double]* @lame_encode_frame.ms_ratio, i64 0, i64 0), [2 x [576 x double]]* nonnull %387, [2 x %struct.III_psy_ratio]* nonnull %425, %struct.III_side_info_t* nonnull @l3_side, [2 x [576 x i32]]* nonnull %426, [2 x %struct.III_scalefac_t]* nonnull %33) #21
  br label %429

429:                                              ; preds = %428, %427
  call void @getframebits(%struct.lame_global_flags* nonnull %0, i32* nonnull %16, i32* nonnull %15) #21
  %430 = load i32, i32* %16, align 4, !tbaa !18
  call void @III_format_bitstream(%struct.lame_global_flags* nonnull %0, i32 %430, [2 x [576 x i32]]* nonnull %426, %struct.III_side_info_t* nonnull @l3_side, [2 x %struct.III_scalefac_t]* nonnull %33, %struct.bit_stream_struc* nonnull @bs.159) #21
  %431 = load i64, i64* getelementptr inbounds (%struct.bit_stream_struc, %struct.bit_stream_struc* @bs.159, i64 0, i32 5), align 8, !tbaa !197
  %432 = load i64, i64* @lame_encode_frame.sentBits, align 8, !tbaa !19
  %433 = sub i64 %431, %432
  store i64 %433, i64* @lame_encode_frame.frameBits, align 8, !tbaa !19
  %434 = and i64 %433, 7
  %435 = icmp eq i64 %434, 0
  br i1 %435, label %442, label %436

436:                                              ; preds = %429
  %437 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %438 = lshr i64 %433, 3
  %439 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %437, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.16.176, i64 0, i64 0), i64 %433, i64 %438, i64 %434) #19
  %440 = load i64, i64* @lame_encode_frame.frameBits, align 8, !tbaa !19
  %441 = load i64, i64* @lame_encode_frame.sentBits, align 8, !tbaa !19
  br label %442

442:                                              ; preds = %436, %429
  %443 = phi i64 [ %432, %429 ], [ %441, %436 ]
  %444 = phi i64 [ %433, %429 ], [ %440, %436 ]
  %445 = add i64 %443, %444
  store i64 %445, i64* @lame_encode_frame.sentBits, align 8, !tbaa !19
  %446 = call i32 @copy_buffer(i8* %4, i32 %5, %struct.bit_stream_struc* nonnull @bs.159) #21
  %447 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 5
  %448 = load i32, i32* %447, align 8, !tbaa !182
  %449 = icmp eq i32 %448, 0
  br i1 %449, label %454, label %450

450:                                              ; preds = %442
  %451 = load i64, i64* @lame_encode_frame.sentBits, align 8, !tbaa !19
  %452 = lshr i64 %451, 3
  %453 = trunc i64 %452 to i32
  call void @AddVbrFrame(i32 %453) #21
  br label %454

454:                                              ; preds = %450, %442
  %455 = load i64, i64* %37, align 8, !tbaa !93
  %456 = add nsw i64 %455, 1
  store i64 %456, i64* %37, align 8, !tbaa !93
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #21
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %29) #21
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %28) #21
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %27) #21
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %26) #21
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %25) #21
  call void @llvm.lifetime.end.p0i8(i64 976, i8* nonnull %24) #21
  call void @llvm.lifetime.end.p0i8(i64 3904, i8* nonnull %23) #21
  call void @llvm.lifetime.end.p0i8(i64 3904, i8* nonnull %22) #21
  call void @llvm.lifetime.end.p0i8(i64 9216, i8* nonnull %21) #21
  call void @llvm.lifetime.end.p0i8(i64 18432, i8* nonnull %20) #21
  ret i32 %446
}

; Function Attrs: nounwind readnone speculatable willreturn
declare double @llvm.fabs.f64(double) #12

; Function Attrs: nounwind uwtable
define dso_local i32 @fill_buffer_resample(%struct.lame_global_flags* nocapture readonly %0, i16* nocapture %1, i32 %2, i16* nocapture readonly %3, i32 %4, i32* nocapture %5, i32 %6) local_unnamed_addr #0 {
  %8 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 39
  %9 = load i64, i64* %8, align 8, !tbaa !93
  %10 = icmp eq i64 %9, 0
  %11 = sext i32 %6 to i64
  br i1 %10, label %12, label %22

12:                                               ; preds = %7
  %13 = getelementptr inbounds [2 x i32], [2 x i32]* @fill_buffer_resample.init, i64 0, i64 %11
  %14 = load i32, i32* %13, align 4, !tbaa !18
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %24

16:                                               ; preds = %12
  store i32 1, i32* %13, align 4, !tbaa !18
  %17 = getelementptr inbounds [2 x double], [2 x double]* @fill_buffer_resample.itime, i64 0, i64 %11
  store double 0.000000e+00, double* %17, align 8, !tbaa !27
  %18 = getelementptr inbounds [2 x [5 x i16]], [2 x [5 x i16]]* @fill_buffer_resample.inbuf_old, i64 0, i64 %11, i64 0
  %19 = bitcast i16* %18 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 2 dereferenceable(10) %19, i8 0, i64 10, i1 false)
  %20 = load i64, i64* %8, align 8, !tbaa !93
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %24, label %22

22:                                               ; preds = %16, %7
  %23 = getelementptr inbounds [2 x i32], [2 x i32]* @fill_buffer_resample.init, i64 0, i64 %11
  store i32 0, i32* %23, align 4, !tbaa !18
  br label %24

24:                                               ; preds = %22, %16, %12
  %25 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 49
  %26 = load float, float* %25, align 8, !tbaa !161
  %27 = fpext float %26 to double
  %28 = fadd double %27, 5.000000e-01
  %29 = tail call double @llvm.floor.f64(double %28)
  %30 = fsub double %27, %29
  %31 = tail call double @llvm.fabs.f64(double %30)
  %32 = fcmp olt double %31, 1.000000e-04
  %33 = icmp sgt i32 %2, 0
  %34 = sext i32 %6 to i64
  %35 = getelementptr inbounds [2 x double], [2 x double]* @fill_buffer_resample.itime, i64 0, i64 %34
  %36 = load double, double* %35, align 8, !tbaa !27
  br i1 %33, label %37, label %150

37:                                               ; preds = %24
  %38 = zext i32 %2 to i64
  br label %39

39:                                               ; preds = %140, %37
  %40 = phi i64 [ 0, %37 ], [ %143, %140 ]
  %41 = trunc i64 %40 to i32
  %42 = sitofp i32 %41 to float
  %43 = fmul float %26, %42
  %44 = fpext float %43 to double
  %45 = fsub double %44, %36
  %46 = tail call double @llvm.floor.f64(double %45)
  %47 = fptosi double %46 to i32
  %48 = add nsw i32 %47, 2
  %49 = icmp slt i32 %48, %4
  br i1 %49, label %50, label %145

50:                                               ; preds = %39
  %51 = sitofp i32 %47 to double
  %52 = fadd double %36, %51
  %53 = fsub double %44, %52
  %54 = fadd double %53, -1.000000e+00
  %55 = icmp slt i32 %47, 0
  %56 = add nsw i32 %47, 5
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds [2 x [5 x i16]], [2 x [5 x i16]]* @fill_buffer_resample.inbuf_old, i64 0, i64 %34, i64 %57
  %59 = sext i32 %47 to i64
  %60 = getelementptr inbounds i16, i16* %3, i64 %59
  %61 = select i1 %55, i16* %58, i16* %60
  %62 = load i16, i16* %61, align 2, !tbaa !29
  %63 = icmp slt i32 %47, -1
  br i1 %63, label %64, label %68

64:                                               ; preds = %50
  %65 = add nsw i32 %47, 6
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds [2 x [5 x i16]], [2 x [5 x i16]]* @fill_buffer_resample.inbuf_old, i64 0, i64 %34, i64 %66
  br label %72

68:                                               ; preds = %50
  %69 = add nsw i32 %47, 1
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds i16, i16* %3, i64 %70
  br label %72

72:                                               ; preds = %68, %64
  %73 = phi i16* [ %67, %64 ], [ %71, %68 ]
  %74 = load i16, i16* %73, align 2, !tbaa !29
  br i1 %32, label %75, label %84

75:                                               ; preds = %72
  %76 = sitofp i16 %74 to double
  %77 = fmul double %53, %76
  %78 = sitofp i16 %62 to double
  %79 = fmul double %54, %78
  %80 = fsub double %77, %79
  %81 = fadd double %80, 5.000000e-01
  %82 = tail call double @llvm.floor.f64(double %81)
  %83 = fptosi double %82 to i16
  br label %140

84:                                               ; preds = %72
  %85 = fadd double %53, 1.000000e+00
  %86 = fadd double %53, -2.000000e+00
  %87 = icmp slt i32 %47, 1
  br i1 %87, label %88, label %92

88:                                               ; preds = %84
  %89 = add nsw i32 %47, 4
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds [2 x [5 x i16]], [2 x [5 x i16]]* @fill_buffer_resample.inbuf_old, i64 0, i64 %34, i64 %90
  br label %96

92:                                               ; preds = %84
  %93 = add nsw i32 %47, -1
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds i16, i16* %3, i64 %94
  br label %96

96:                                               ; preds = %92, %88
  %97 = phi i16* [ %91, %88 ], [ %95, %92 ]
  %98 = load i16, i16* %97, align 2, !tbaa !29
  %99 = sext i16 %98 to i32
  %100 = icmp slt i32 %47, -2
  %101 = add nsw i32 %47, 7
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds [2 x [5 x i16]], [2 x [5 x i16]]* @fill_buffer_resample.inbuf_old, i64 0, i64 %34, i64 %102
  %104 = sext i32 %48 to i64
  %105 = getelementptr inbounds i16, i16* %3, i64 %104
  %106 = select i1 %100, i16* %103, i16* %105
  %107 = load i16, i16* %106, align 2, !tbaa !29
  %108 = sub nsw i32 0, %99
  %109 = sitofp i32 %108 to double
  %110 = fmul double %53, %109
  %111 = fmul double %54, %110
  %112 = fmul double %86, %111
  %113 = fdiv double %112, 6.000000e+00
  %114 = fadd double %113, 5.000000e-01
  %115 = sitofp i16 %62 to double
  %116 = fmul double %85, %115
  %117 = fmul double %54, %116
  %118 = fmul double %86, %117
  %119 = fmul double %118, 5.000000e-01
  %120 = fadd double %119, %114
  %121 = sitofp i16 %74 to double
  %122 = fmul double %85, %121
  %123 = fmul double %53, %122
  %124 = fmul double %86, %123
  %125 = fmul double %124, 5.000000e-01
  %126 = fsub double %120, %125
  %127 = sitofp i16 %107 to double
  %128 = fmul double %85, %127
  %129 = fmul double %53, %128
  %130 = fmul double %54, %129
  %131 = fdiv double %130, 6.000000e+00
  %132 = fadd double %131, %126
  %133 = tail call double @llvm.floor.f64(double %132)
  %134 = fptosi double %133 to i32
  %135 = icmp sgt i32 %134, 32767
  br i1 %135, label %140, label %136

136:                                              ; preds = %96
  %137 = icmp sgt i32 %134, -32767
  %138 = select i1 %137, i32 %134, i32 -32767
  %139 = trunc i32 %138 to i16
  br label %140

140:                                              ; preds = %136, %96, %75
  %141 = phi i16 [ %83, %75 ], [ 32767, %96 ], [ %139, %136 ]
  %142 = getelementptr inbounds i16, i16* %1, i64 %40
  store i16 %141, i16* %142, align 2, !tbaa !29
  %143 = add nuw nsw i64 %40, 1
  %144 = icmp eq i64 %143, %38
  br i1 %144, label %147, label %39

145:                                              ; preds = %39
  %146 = trunc i64 %40 to i32
  br label %147

147:                                              ; preds = %145, %140
  %148 = phi i32 [ %146, %145 ], [ %2, %140 ]
  %149 = add i32 %47, 2
  br label %150

150:                                              ; preds = %147, %24
  %151 = phi i32 [ %148, %147 ], [ 0, %24 ]
  %152 = phi i32 [ %149, %147 ], [ 2, %24 ]
  %153 = icmp sgt i32 %152, %4
  %154 = select i1 %153, i32 %4, i32 %152
  store i32 %154, i32* %5, align 4, !tbaa !18
  %155 = sitofp i32 %154 to float
  %156 = sitofp i32 %151 to float
  %157 = fmul float %26, %156
  %158 = fsub float %155, %157
  %159 = fpext float %158 to double
  %160 = getelementptr inbounds [2 x double], [2 x double]* @fill_buffer_resample.itime, i64 0, i64 %34
  %161 = fadd double %36, %159
  store double %161, double* %160, align 8, !tbaa !27
  %162 = add i32 %154, -5
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds i16, i16* %3, i64 %163
  %165 = load i16, i16* %164, align 2, !tbaa !29
  %166 = getelementptr inbounds [2 x [5 x i16]], [2 x [5 x i16]]* @fill_buffer_resample.inbuf_old, i64 0, i64 %34, i64 0
  store i16 %165, i16* %166, align 2, !tbaa !29
  %167 = add i32 %154, -4
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds i16, i16* %3, i64 %168
  %170 = load i16, i16* %169, align 2, !tbaa !29
  %171 = getelementptr inbounds [2 x [5 x i16]], [2 x [5 x i16]]* @fill_buffer_resample.inbuf_old, i64 0, i64 %34, i64 1
  store i16 %170, i16* %171, align 2, !tbaa !29
  %172 = add i32 %154, -3
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds i16, i16* %3, i64 %173
  %175 = load i16, i16* %174, align 2, !tbaa !29
  %176 = getelementptr inbounds [2 x [5 x i16]], [2 x [5 x i16]]* @fill_buffer_resample.inbuf_old, i64 0, i64 %34, i64 2
  store i16 %175, i16* %176, align 2, !tbaa !29
  %177 = add i32 %154, -2
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds i16, i16* %3, i64 %178
  %180 = load i16, i16* %179, align 2, !tbaa !29
  %181 = getelementptr inbounds [2 x [5 x i16]], [2 x [5 x i16]]* @fill_buffer_resample.inbuf_old, i64 0, i64 %34, i64 3
  store i16 %180, i16* %181, align 2, !tbaa !29
  %182 = add i32 %154, -1
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds i16, i16* %3, i64 %183
  %185 = load i16, i16* %184, align 2, !tbaa !29
  %186 = getelementptr inbounds [2 x [5 x i16]], [2 x [5 x i16]]* @fill_buffer_resample.inbuf_old, i64 0, i64 %34, i64 4
  store i16 %185, i16* %186, align 2, !tbaa !29
  ret i32 %151
}

; Function Attrs: nounwind uwtable
define dso_local i32 @fill_buffer(%struct.lame_global_flags* nocapture readnone %0, i16* nocapture %1, i32 %2, i16* nocapture readonly %3, i32 %4) local_unnamed_addr #0 {
  %6 = icmp slt i32 %2, %4
  %7 = select i1 %6, i32 %2, i32 %4
  %8 = bitcast i16* %1 to i8*
  %9 = bitcast i16* %3 to i8*
  %10 = sext i32 %7 to i64
  %11 = shl nsw i64 %10, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %9, i64 %11, i1 false)
  ret i32 %7
}

; Function Attrs: nounwind uwtable
define dso_local i32 @lame_encode_buffer(%struct.lame_global_flags* %0, i16* %1, i16* %2, i32 %3, i8* %4, i32 %5) local_unnamed_addr #0 {
  %7 = alloca [2 x i16*], align 16
  %8 = alloca i32, align 4
  %9 = bitcast [2 x i16*]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #21
  %10 = getelementptr inbounds [2 x i16*], [2 x i16*]* %7, i64 0, i64 0
  store i16* %1, i16** %10, align 16, !tbaa !7
  %11 = getelementptr inbounds [2 x i16*], [2 x i16*]* %7, i64 0, i64 1
  store i16* %2, i16** %11, align 8, !tbaa !7
  %12 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 42
  %13 = load i32, i32* %12, align 4, !tbaa !160
  %14 = add nsw i32 %13, 752
  %15 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 39
  %16 = load i64, i64* %15, align 8, !tbaa !93
  %17 = icmp ne i64 %16, 0
  %18 = load i1, i1* @lame_encode_buffer.frame_buffered, align 4
  %19 = or i1 %17, %18
  br i1 %19, label %22, label %20

20:                                               ; preds = %6
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(12224) bitcast ([2 x [3056 x i16]]* @mfbuf to i8*), i8 0, i64 12224, i1 false)
  store i1 true, i1* @lame_encode_buffer.frame_buffered, align 4
  store i32 1088, i32* @mf_samples_to_encode, align 4, !tbaa !18
  store i32 752, i32* @mf_size, align 4, !tbaa !18
  %21 = load i64, i64* %15, align 8, !tbaa !93
  br label %22

22:                                               ; preds = %20, %6
  %23 = phi i64 [ %16, %6 ], [ %21, %20 ]
  %24 = icmp eq i64 %23, 1
  br i1 %24, label %25, label %26

25:                                               ; preds = %22
  store i1 false, i1* @lame_encode_buffer.frame_buffered, align 4
  br label %26

26:                                               ; preds = %25, %22
  %27 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 1
  %28 = load i32, i32* %27, align 8, !tbaa !86
  %29 = icmp eq i32 %28, 2
  br i1 %29, label %30, label %149

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 46
  %32 = load i32, i32* %31, align 4, !tbaa !126
  %33 = icmp eq i32 %32, 1
  %34 = icmp sgt i32 %3, 0
  %35 = and i1 %33, %34
  br i1 %35, label %36, label %149

36:                                               ; preds = %30
  %37 = zext i32 %3 to i64
  %38 = icmp ult i32 %3, 8
  br i1 %38, label %106, label %39

39:                                               ; preds = %36
  %40 = getelementptr i16, i16* %1, i64 %37
  %41 = getelementptr i16, i16* %2, i64 %37
  %42 = icmp ugt i16* %41, %1
  %43 = icmp ugt i16* %40, %2
  %44 = and i1 %42, %43
  br i1 %44, label %106, label %45

45:                                               ; preds = %39
  %46 = and i64 %37, 4294967288
  %47 = add nsw i64 %46, -8
  %48 = lshr exact i64 %47, 3
  %49 = add nuw nsw i64 %48, 1
  %50 = and i64 %49, 1
  %51 = icmp eq i64 %47, 0
  br i1 %51, label %87, label %52

52:                                               ; preds = %45
  %53 = sub nuw nsw i64 %49, %50
  br label %54

54:                                               ; preds = %54, %52
  %55 = phi i64 [ 0, %52 ], [ %84, %54 ]
  %56 = phi i64 [ %53, %52 ], [ %85, %54 ]
  %57 = getelementptr inbounds i16, i16* %1, i64 %55
  %58 = bitcast i16* %57 to <8 x i16>*
  %59 = load <8 x i16>, <8 x i16>* %58, align 2, !tbaa !29, !alias.scope !199, !noalias !202
  %60 = sext <8 x i16> %59 to <8 x i32>
  %61 = getelementptr inbounds i16, i16* %2, i64 %55
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !tbaa !29, !alias.scope !202
  %64 = sext <8 x i16> %63 to <8 x i32>
  %65 = add nsw <8 x i32> %64, %60
  %66 = sdiv <8 x i32> %65, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %67 = trunc <8 x i32> %66 to <8 x i16>
  %68 = bitcast i16* %57 to <8 x i16>*
  store <8 x i16> %67, <8 x i16>* %68, align 2, !tbaa !29, !alias.scope !199, !noalias !202
  %69 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> zeroinitializer, <8 x i16>* %69, align 2, !tbaa !29, !alias.scope !202
  %70 = or i64 %55, 8
  %71 = getelementptr inbounds i16, i16* %1, i64 %70
  %72 = bitcast i16* %71 to <8 x i16>*
  %73 = load <8 x i16>, <8 x i16>* %72, align 2, !tbaa !29, !alias.scope !199, !noalias !202
  %74 = sext <8 x i16> %73 to <8 x i32>
  %75 = getelementptr inbounds i16, i16* %2, i64 %70
  %76 = bitcast i16* %75 to <8 x i16>*
  %77 = load <8 x i16>, <8 x i16>* %76, align 2, !tbaa !29, !alias.scope !202
  %78 = sext <8 x i16> %77 to <8 x i32>
  %79 = add nsw <8 x i32> %78, %74
  %80 = sdiv <8 x i32> %79, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %81 = trunc <8 x i32> %80 to <8 x i16>
  %82 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> %81, <8 x i16>* %82, align 2, !tbaa !29, !alias.scope !199, !noalias !202
  %83 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> zeroinitializer, <8 x i16>* %83, align 2, !tbaa !29, !alias.scope !202
  %84 = add i64 %55, 16
  %85 = add i64 %56, -2
  %86 = icmp eq i64 %85, 0
  br i1 %86, label %87, label %54, !llvm.loop !204

87:                                               ; preds = %54, %45
  %88 = phi i64 [ 0, %45 ], [ %84, %54 ]
  %89 = icmp eq i64 %50, 0
  br i1 %89, label %104, label %90

90:                                               ; preds = %87
  %91 = getelementptr inbounds i16, i16* %1, i64 %88
  %92 = bitcast i16* %91 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2, !tbaa !29, !alias.scope !199, !noalias !202
  %94 = sext <8 x i16> %93 to <8 x i32>
  %95 = getelementptr inbounds i16, i16* %2, i64 %88
  %96 = bitcast i16* %95 to <8 x i16>*
  %97 = load <8 x i16>, <8 x i16>* %96, align 2, !tbaa !29, !alias.scope !202
  %98 = sext <8 x i16> %97 to <8 x i32>
  %99 = add nsw <8 x i32> %98, %94
  %100 = sdiv <8 x i32> %99, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %101 = trunc <8 x i32> %100 to <8 x i16>
  %102 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %101, <8 x i16>* %102, align 2, !tbaa !29, !alias.scope !199, !noalias !202
  %103 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> zeroinitializer, <8 x i16>* %103, align 2, !tbaa !29, !alias.scope !202
  br label %104

104:                                              ; preds = %90, %87
  %105 = icmp eq i64 %46, %37
  br i1 %105, label %149, label %106

106:                                              ; preds = %104, %39, %36
  %107 = phi i64 [ 0, %39 ], [ 0, %36 ], [ %46, %104 ]
  %108 = xor i64 %107, -1
  %109 = and i64 %37, 1
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %122, label %111

111:                                              ; preds = %106
  %112 = getelementptr inbounds i16, i16* %1, i64 %107
  %113 = load i16, i16* %112, align 2, !tbaa !29
  %114 = sext i16 %113 to i32
  %115 = getelementptr inbounds i16, i16* %2, i64 %107
  %116 = load i16, i16* %115, align 2, !tbaa !29
  %117 = sext i16 %116 to i32
  %118 = add nsw i32 %117, %114
  %119 = sdiv i32 %118, 2
  %120 = trunc i32 %119 to i16
  store i16 %120, i16* %112, align 2, !tbaa !29
  store i16 0, i16* %115, align 2, !tbaa !29
  %121 = or i64 %107, 1
  br label %122

122:                                              ; preds = %111, %106
  %123 = phi i64 [ %107, %106 ], [ %121, %111 ]
  %124 = sub nsw i64 0, %37
  %125 = icmp eq i64 %108, %124
  br i1 %125, label %149, label %126

126:                                              ; preds = %126, %122
  %127 = phi i64 [ %147, %126 ], [ %123, %122 ]
  %128 = getelementptr inbounds i16, i16* %1, i64 %127
  %129 = load i16, i16* %128, align 2, !tbaa !29
  %130 = sext i16 %129 to i32
  %131 = getelementptr inbounds i16, i16* %2, i64 %127
  %132 = load i16, i16* %131, align 2, !tbaa !29
  %133 = sext i16 %132 to i32
  %134 = add nsw i32 %133, %130
  %135 = sdiv i32 %134, 2
  %136 = trunc i32 %135 to i16
  store i16 %136, i16* %128, align 2, !tbaa !29
  store i16 0, i16* %131, align 2, !tbaa !29
  %137 = add nuw nsw i64 %127, 1
  %138 = getelementptr inbounds i16, i16* %1, i64 %137
  %139 = load i16, i16* %138, align 2, !tbaa !29
  %140 = sext i16 %139 to i32
  %141 = getelementptr inbounds i16, i16* %2, i64 %137
  %142 = load i16, i16* %141, align 2, !tbaa !29
  %143 = sext i16 %142 to i32
  %144 = add nsw i32 %143, %140
  %145 = sdiv i32 %144, 2
  %146 = trunc i32 %145 to i16
  store i16 %146, i16* %138, align 2, !tbaa !29
  store i16 0, i16* %141, align 2, !tbaa !29
  %147 = add nuw nsw i64 %127, 2
  %148 = icmp eq i64 %147, %37
  br i1 %148, label %149, label %126, !llvm.loop !205

149:                                              ; preds = %126, %122, %104, %30, %26
  %150 = icmp sgt i32 %3, 0
  br i1 %150, label %151, label %327

151:                                              ; preds = %149
  %152 = bitcast i32* %8 to i8*
  %153 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 46
  %154 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 49
  %155 = load i32, i32* %153, align 4, !tbaa !126
  br label %156

156:                                              ; preds = %322, %151
  %157 = phi i32 [ %155, %151 ], [ %323, %322 ]
  %158 = phi i32 [ %3, %151 ], [ %197, %322 ]
  %159 = phi i32 [ 0, %151 ], [ %325, %322 ]
  %160 = phi i8* [ %4, %151 ], [ %324, %322 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %152) #21
  store i32 0, i32* %8, align 4, !tbaa !18
  %161 = icmp sgt i32 %157, 0
  br i1 %161, label %162, label %193

162:                                              ; preds = %184, %156
  %163 = phi i64 [ %189, %184 ], [ 0, %156 ]
  %164 = load float, float* %154, align 8, !tbaa !161
  %165 = fcmp une float %164, 1.000000e+00
  %166 = load i32, i32* @mf_size, align 4, !tbaa !18
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 %163, i64 %167
  %169 = load i32, i32* %12, align 4, !tbaa !160
  %170 = getelementptr inbounds [2 x i16*], [2 x i16*]* %7, i64 0, i64 %163
  %171 = load i16*, i16** %170, align 8, !tbaa !7
  br i1 %165, label %172, label %177

172:                                              ; preds = %162
  %173 = trunc i64 %163 to i32
  %174 = call i32 @fill_buffer_resample(%struct.lame_global_flags* nonnull %0, i16* nonnull %168, i32 %169, i16* %171, i32 %158, i32* nonnull %8, i32 %173)
  %175 = load i32, i32* %8, align 4, !tbaa !18
  %176 = sext i32 %175 to i64
  br label %184

177:                                              ; preds = %162
  %178 = icmp slt i32 %169, %158
  %179 = select i1 %178, i32 %169, i32 %158
  %180 = bitcast i16* %168 to i8*
  %181 = bitcast i16* %171 to i8*
  %182 = sext i32 %179 to i64
  %183 = shl nsw i64 %182, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %180, i8* align 1 %181, i64 %183, i1 false) #21
  store i32 %179, i32* %8, align 4, !tbaa !18
  br label %184

184:                                              ; preds = %177, %172
  %185 = phi i64 [ %182, %177 ], [ %176, %172 ]
  %186 = phi i32 [ %179, %177 ], [ %175, %172 ]
  %187 = phi i32 [ %179, %177 ], [ %174, %172 ]
  %188 = getelementptr inbounds i16, i16* %171, i64 %185
  store i16* %188, i16** %170, align 8, !tbaa !7
  %189 = add nuw nsw i64 %163, 1
  %190 = load i32, i32* %153, align 4, !tbaa !126
  %191 = sext i32 %190 to i64
  %192 = icmp slt i64 %189, %191
  br i1 %192, label %162, label %193

193:                                              ; preds = %184, %156
  %194 = phi i32 [ 0, %156 ], [ %186, %184 ]
  %195 = phi i32 [ %157, %156 ], [ %190, %184 ]
  %196 = phi i32 [ 0, %156 ], [ %187, %184 ]
  %197 = sub nsw i32 %158, %194
  %198 = load i32, i32* @mf_size, align 4, !tbaa !18
  %199 = add nsw i32 %198, %196
  store i32 %199, i32* @mf_size, align 4, !tbaa !18
  %200 = load i32, i32* @mf_samples_to_encode, align 4, !tbaa !18
  %201 = add nsw i32 %200, %196
  store i32 %201, i32* @mf_samples_to_encode, align 4, !tbaa !18
  %202 = icmp slt i32 %199, %14
  br i1 %202, label %322, label %203

203:                                              ; preds = %193
  %204 = tail call i32 @lame_encode_frame(%struct.lame_global_flags* nonnull %0, i16* getelementptr inbounds ([2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 0, i64 0), i16* getelementptr inbounds ([2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 1, i64 0), i32 undef, i8* %160, i32 %5)
  %205 = icmp eq i32 %204, -1
  br i1 %205, label %206, label %207

206:                                              ; preds = %203
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %152) #21
  br label %327

207:                                              ; preds = %203
  %208 = sext i32 %204 to i64
  %209 = getelementptr inbounds i8, i8* %160, i64 %208
  %210 = add nsw i32 %204, %159
  %211 = load i32, i32* %12, align 4, !tbaa !160
  %212 = load i32, i32* @mf_size, align 4, !tbaa !18
  %213 = sub i32 %212, %211
  store i32 %213, i32* @mf_size, align 4, !tbaa !18
  %214 = load i32, i32* @mf_samples_to_encode, align 4, !tbaa !18
  %215 = sub nsw i32 %214, %211
  store i32 %215, i32* @mf_samples_to_encode, align 4, !tbaa !18
  %216 = load i32, i32* %153, align 4, !tbaa !126
  %217 = icmp sgt i32 %216, 0
  br i1 %217, label %218, label %322

218:                                              ; preds = %207
  %219 = icmp sgt i32 %213, 0
  %220 = sext i32 %211 to i64
  %221 = zext i32 %216 to i64
  %222 = zext i32 %213 to i64
  %223 = add nsw i64 %220, %222
  %224 = and i64 %222, 4294967280
  %225 = add nsw i64 %224, -16
  %226 = lshr exact i64 %225, 4
  %227 = add nuw nsw i64 %226, 1
  %228 = icmp ult i32 %213, 16
  %229 = and i64 %222, 4294967280
  %230 = and i64 %227, 1
  %231 = icmp eq i64 %225, 0
  %232 = sub nuw nsw i64 %227, %230
  %233 = icmp eq i64 %230, 0
  %234 = icmp eq i64 %229, %222
  %235 = and i64 %222, 1
  %236 = icmp eq i64 %235, 0
  %237 = sub nsw i64 0, %222
  br label %238

238:                                              ; preds = %319, %218
  %239 = phi i64 [ 0, %218 ], [ %320, %319 ]
  %240 = getelementptr [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 %239, i64 0
  %241 = getelementptr [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 %239, i64 %222
  %242 = getelementptr [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 %239, i64 %220
  %243 = getelementptr [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 %239, i64 %223
  br i1 %219, label %244, label %319

244:                                              ; preds = %238
  br i1 %228, label %294, label %245

245:                                              ; preds = %244
  %246 = icmp ult i16* %240, %243
  %247 = icmp ult i16* %242, %241
  %248 = and i1 %246, %247
  br i1 %248, label %294, label %249

249:                                              ; preds = %245
  br i1 %231, label %279, label %250

250:                                              ; preds = %250, %249
  %251 = phi i64 [ %276, %250 ], [ 0, %249 ]
  %252 = phi i64 [ %277, %250 ], [ %232, %249 ]
  %253 = add nsw i64 %251, %220
  %254 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 %239, i64 %253
  %255 = bitcast i16* %254 to <8 x i16>*
  %256 = load <8 x i16>, <8 x i16>* %255, align 2, !tbaa !29, !alias.scope !206
  %257 = getelementptr inbounds i16, i16* %254, i64 8
  %258 = bitcast i16* %257 to <8 x i16>*
  %259 = load <8 x i16>, <8 x i16>* %258, align 2, !tbaa !29, !alias.scope !206
  %260 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 %239, i64 %251
  %261 = bitcast i16* %260 to <8 x i16>*
  store <8 x i16> %256, <8 x i16>* %261, align 16, !tbaa !29, !alias.scope !209, !noalias !206
  %262 = getelementptr inbounds i16, i16* %260, i64 8
  %263 = bitcast i16* %262 to <8 x i16>*
  store <8 x i16> %259, <8 x i16>* %263, align 16, !tbaa !29, !alias.scope !209, !noalias !206
  %264 = or i64 %251, 16
  %265 = add nsw i64 %264, %220
  %266 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 %239, i64 %265
  %267 = bitcast i16* %266 to <8 x i16>*
  %268 = load <8 x i16>, <8 x i16>* %267, align 2, !tbaa !29, !alias.scope !206
  %269 = getelementptr inbounds i16, i16* %266, i64 8
  %270 = bitcast i16* %269 to <8 x i16>*
  %271 = load <8 x i16>, <8 x i16>* %270, align 2, !tbaa !29, !alias.scope !206
  %272 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 %239, i64 %264
  %273 = bitcast i16* %272 to <8 x i16>*
  store <8 x i16> %268, <8 x i16>* %273, align 16, !tbaa !29, !alias.scope !209, !noalias !206
  %274 = getelementptr inbounds i16, i16* %272, i64 8
  %275 = bitcast i16* %274 to <8 x i16>*
  store <8 x i16> %271, <8 x i16>* %275, align 16, !tbaa !29, !alias.scope !209, !noalias !206
  %276 = add i64 %251, 32
  %277 = add i64 %252, -2
  %278 = icmp eq i64 %277, 0
  br i1 %278, label %279, label %250, !llvm.loop !211

279:                                              ; preds = %250, %249
  %280 = phi i64 [ 0, %249 ], [ %276, %250 ]
  br i1 %233, label %293, label %281

281:                                              ; preds = %279
  %282 = add nsw i64 %280, %220
  %283 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 %239, i64 %282
  %284 = bitcast i16* %283 to <8 x i16>*
  %285 = load <8 x i16>, <8 x i16>* %284, align 2, !tbaa !29, !alias.scope !206
  %286 = getelementptr inbounds i16, i16* %283, i64 8
  %287 = bitcast i16* %286 to <8 x i16>*
  %288 = load <8 x i16>, <8 x i16>* %287, align 2, !tbaa !29, !alias.scope !206
  %289 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 %239, i64 %280
  %290 = bitcast i16* %289 to <8 x i16>*
  store <8 x i16> %285, <8 x i16>* %290, align 16, !tbaa !29, !alias.scope !209, !noalias !206
  %291 = getelementptr inbounds i16, i16* %289, i64 8
  %292 = bitcast i16* %291 to <8 x i16>*
  store <8 x i16> %288, <8 x i16>* %292, align 16, !tbaa !29, !alias.scope !209, !noalias !206
  br label %293

293:                                              ; preds = %281, %279
  br i1 %234, label %319, label %294

294:                                              ; preds = %293, %245, %244
  %295 = phi i64 [ 0, %245 ], [ 0, %244 ], [ %229, %293 ]
  %296 = xor i64 %295, -1
  br i1 %236, label %303, label %297

297:                                              ; preds = %294
  %298 = add nsw i64 %295, %220
  %299 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 %239, i64 %298
  %300 = load i16, i16* %299, align 2, !tbaa !29
  %301 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 %239, i64 %295
  store i16 %300, i16* %301, align 16, !tbaa !29
  %302 = or i64 %295, 1
  br label %303

303:                                              ; preds = %297, %294
  %304 = phi i64 [ %302, %297 ], [ %295, %294 ]
  %305 = icmp eq i64 %296, %237
  br i1 %305, label %319, label %306

306:                                              ; preds = %306, %303
  %307 = phi i64 [ %317, %306 ], [ %304, %303 ]
  %308 = add nsw i64 %307, %220
  %309 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 %239, i64 %308
  %310 = load i16, i16* %309, align 2, !tbaa !29
  %311 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 %239, i64 %307
  store i16 %310, i16* %311, align 2, !tbaa !29
  %312 = add nuw nsw i64 %307, 1
  %313 = add nsw i64 %312, %220
  %314 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 %239, i64 %313
  %315 = load i16, i16* %314, align 2, !tbaa !29
  %316 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 %239, i64 %312
  store i16 %315, i16* %316, align 2, !tbaa !29
  %317 = add nuw nsw i64 %307, 2
  %318 = icmp eq i64 %317, %222
  br i1 %318, label %319, label %306, !llvm.loop !212

319:                                              ; preds = %306, %303, %293, %238
  %320 = add nuw nsw i64 %239, 1
  %321 = icmp ult i64 %320, %221
  br i1 %321, label %238, label %322

322:                                              ; preds = %319, %207, %193
  %323 = phi i32 [ %195, %193 ], [ %216, %207 ], [ %216, %319 ]
  %324 = phi i8* [ %160, %193 ], [ %209, %207 ], [ %209, %319 ]
  %325 = phi i32 [ %159, %193 ], [ %210, %207 ], [ %210, %319 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %152) #21
  %326 = icmp sgt i32 %197, 0
  br i1 %326, label %156, label %327

327:                                              ; preds = %322, %206, %149
  %328 = phi i32 [ -1, %206 ], [ 0, %149 ], [ %325, %322 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #21
  ret i32 %328
}

; Function Attrs: nounwind uwtable
define dso_local i32 @lame_encode_buffer_interleaved(%struct.lame_global_flags* %0, i16* %1, i32 %2, i8* %3, i32 %4) local_unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 42
  %7 = load i32, i32* %6, align 4, !tbaa !160
  %8 = add nsw i32 %7, 752
  %9 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 8, !tbaa !86
  %11 = icmp eq i32 %10, 1
  br i1 %11, label %12, label %14

12:                                               ; preds = %5
  %13 = tail call i32 @lame_encode_buffer(%struct.lame_global_flags* nonnull %0, i16* %1, i16* null, i32 %2, i8* %3, i32 %4)
  br label %396

14:                                               ; preds = %5
  %15 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 49
  %16 = load float, float* %15, align 8, !tbaa !161
  %17 = fcmp une float %16, 1.000000e+00
  br i1 %17, label %18, label %101

18:                                               ; preds = %14
  %19 = sext i32 %2 to i64
  %20 = shl nsw i64 %19, 1
  %21 = tail call noalias i8* @malloc(i64 %20) #21
  %22 = bitcast i8* %21 to i16*
  %23 = tail call noalias i8* @malloc(i64 %20) #21
  %24 = bitcast i8* %23 to i16*
  %25 = icmp eq i8* %21, null
  %26 = icmp eq i8* %23, null
  %27 = or i1 %25, %26
  br i1 %27, label %396, label %28

28:                                               ; preds = %18
  %29 = icmp sgt i32 %2, 0
  br i1 %29, label %30, label %99

30:                                               ; preds = %28
  %31 = zext i32 %2 to i64
  %32 = icmp ult i32 %2, 8
  br i1 %32, label %85, label %33

33:                                               ; preds = %30
  %34 = and i64 %31, 4294967288
  %35 = add nsw i64 %34, -8
  %36 = lshr exact i64 %35, 3
  %37 = add nuw nsw i64 %36, 1
  %38 = and i64 %37, 1
  %39 = icmp eq i64 %35, 0
  br i1 %39, label %69, label %40

40:                                               ; preds = %33
  %41 = sub nuw nsw i64 %37, %38
  br label %42

42:                                               ; preds = %42, %40
  %43 = phi i64 [ 0, %40 ], [ %66, %42 ]
  %44 = phi i64 [ %41, %40 ], [ %67, %42 ]
  %45 = shl nuw nsw i64 %43, 1
  %46 = getelementptr inbounds i16, i16* %1, i64 %45
  %47 = bitcast i16* %46 to <16 x i16>*
  %48 = load <16 x i16>, <16 x i16>* %47, align 2, !tbaa !29
  %49 = shufflevector <16 x i16> %48, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %50 = shufflevector <16 x i16> %48, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %51 = getelementptr inbounds i16, i16* %22, i64 %43
  %52 = bitcast i16* %51 to <8 x i16>*
  store <8 x i16> %49, <8 x i16>* %52, align 2, !tbaa !29
  %53 = getelementptr inbounds i16, i16* %24, i64 %43
  %54 = bitcast i16* %53 to <8 x i16>*
  store <8 x i16> %50, <8 x i16>* %54, align 2, !tbaa !29
  %55 = or i64 %43, 8
  %56 = shl nuw nsw i64 %55, 1
  %57 = getelementptr inbounds i16, i16* %1, i64 %56
  %58 = bitcast i16* %57 to <16 x i16>*
  %59 = load <16 x i16>, <16 x i16>* %58, align 2, !tbaa !29
  %60 = shufflevector <16 x i16> %59, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %61 = shufflevector <16 x i16> %59, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %62 = getelementptr inbounds i16, i16* %22, i64 %55
  %63 = bitcast i16* %62 to <8 x i16>*
  store <8 x i16> %60, <8 x i16>* %63, align 2, !tbaa !29
  %64 = getelementptr inbounds i16, i16* %24, i64 %55
  %65 = bitcast i16* %64 to <8 x i16>*
  store <8 x i16> %61, <8 x i16>* %65, align 2, !tbaa !29
  %66 = add i64 %43, 16
  %67 = add i64 %44, -2
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %42, !llvm.loop !213

69:                                               ; preds = %42, %33
  %70 = phi i64 [ 0, %33 ], [ %66, %42 ]
  %71 = icmp eq i64 %38, 0
  br i1 %71, label %83, label %72

72:                                               ; preds = %69
  %73 = shl nuw nsw i64 %70, 1
  %74 = getelementptr inbounds i16, i16* %1, i64 %73
  %75 = bitcast i16* %74 to <16 x i16>*
  %76 = load <16 x i16>, <16 x i16>* %75, align 2, !tbaa !29
  %77 = shufflevector <16 x i16> %76, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %78 = shufflevector <16 x i16> %76, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %79 = getelementptr inbounds i16, i16* %22, i64 %70
  %80 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> %77, <8 x i16>* %80, align 2, !tbaa !29
  %81 = getelementptr inbounds i16, i16* %24, i64 %70
  %82 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> %78, <8 x i16>* %82, align 2, !tbaa !29
  br label %83

83:                                               ; preds = %72, %69
  %84 = icmp eq i64 %34, %31
  br i1 %84, label %99, label %85

85:                                               ; preds = %83, %30
  %86 = phi i64 [ 0, %30 ], [ %34, %83 ]
  br label %87

87:                                               ; preds = %87, %85
  %88 = phi i64 [ %97, %87 ], [ %86, %85 ]
  %89 = shl nuw nsw i64 %88, 1
  %90 = getelementptr inbounds i16, i16* %1, i64 %89
  %91 = load i16, i16* %90, align 2, !tbaa !29
  %92 = getelementptr inbounds i16, i16* %22, i64 %88
  store i16 %91, i16* %92, align 2, !tbaa !29
  %93 = or i64 %89, 1
  %94 = getelementptr inbounds i16, i16* %1, i64 %93
  %95 = load i16, i16* %94, align 2, !tbaa !29
  %96 = getelementptr inbounds i16, i16* %24, i64 %88
  store i16 %95, i16* %96, align 2, !tbaa !29
  %97 = add nuw nsw i64 %88, 1
  %98 = icmp eq i64 %97, %31
  br i1 %98, label %99, label %87, !llvm.loop !214

99:                                               ; preds = %87, %83, %28
  %100 = tail call i32 @lame_encode_buffer(%struct.lame_global_flags* %0, i16* %22, i16* %24, i32 %2, i8* %3, i32 %4)
  tail call void @free(i8* nonnull %21) #21
  tail call void @free(i8* nonnull %23) #21
  br label %396

101:                                              ; preds = %14
  %102 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 39
  %103 = load i64, i64* %102, align 8, !tbaa !93
  %104 = icmp ne i64 %103, 0
  %105 = load i1, i1* @lame_encode_buffer_interleaved.frame_buffered, align 4
  %106 = or i1 %104, %105
  br i1 %106, label %109, label %107

107:                                              ; preds = %101
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(12224) bitcast ([2 x [3056 x i16]]* @mfbuf to i8*), i8 0, i64 12224, i1 false)
  store i1 true, i1* @lame_encode_buffer_interleaved.frame_buffered, align 4
  store i32 1088, i32* @mf_samples_to_encode, align 4, !tbaa !18
  store i32 752, i32* @mf_size, align 4, !tbaa !18
  %108 = load i64, i64* %102, align 8, !tbaa !93
  br label %109

109:                                              ; preds = %107, %101
  %110 = phi i64 [ %103, %101 ], [ %108, %107 ]
  %111 = icmp eq i64 %110, 1
  br i1 %111, label %112, label %113

112:                                              ; preds = %109
  store i1 false, i1* @lame_encode_buffer_interleaved.frame_buffered, align 4
  br label %113

113:                                              ; preds = %112, %109
  %114 = load i32, i32* %9, align 8, !tbaa !86
  %115 = icmp eq i32 %114, 2
  br i1 %115, label %116, label %166

116:                                              ; preds = %113
  %117 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 46
  %118 = load i32, i32* %117, align 4, !tbaa !126
  %119 = icmp eq i32 %118, 1
  %120 = icmp sgt i32 %2, 0
  %121 = and i1 %119, %120
  br i1 %121, label %122, label %166

122:                                              ; preds = %116
  %123 = zext i32 %2 to i64
  %124 = icmp ult i32 %2, 8
  br i1 %124, label %149, label %125

125:                                              ; preds = %122
  %126 = and i64 %123, 4294967288
  %127 = getelementptr inbounds i16, i16* %1, i64 -1
  br label %128

128:                                              ; preds = %128, %125
  %129 = phi i64 [ 0, %125 ], [ %145, %128 ]
  %130 = shl nuw nsw i64 %129, 1
  %131 = getelementptr inbounds i16, i16* %1, i64 %130
  %132 = bitcast i16* %131 to <16 x i16>*
  %133 = load <16 x i16>, <16 x i16>* %132, align 2, !tbaa !29
  %134 = shufflevector <16 x i16> %133, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %135 = shufflevector <16 x i16> %133, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %136 = sext <8 x i16> %134 to <8 x i32>
  %137 = or i64 %130, 1
  %138 = sext <8 x i16> %135 to <8 x i32>
  %139 = add nsw <8 x i32> %138, %136
  %140 = sdiv <8 x i32> %139, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  %141 = trunc <8 x i32> %140 to <8 x i16>
  %142 = getelementptr inbounds i16, i16* %127, i64 %137
  %143 = bitcast i16* %142 to <16 x i16>*
  %144 = shufflevector <8 x i16> %141, <8 x i16> zeroinitializer, <16 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11, i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  store <16 x i16> %144, <16 x i16>* %143, align 2, !tbaa !29
  %145 = add i64 %129, 8
  %146 = icmp eq i64 %145, %126
  br i1 %146, label %147, label %128, !llvm.loop !215

147:                                              ; preds = %128
  %148 = icmp eq i64 %126, %123
  br i1 %148, label %166, label %149

149:                                              ; preds = %147, %122
  %150 = phi i64 [ 0, %122 ], [ %126, %147 ]
  br label %151

151:                                              ; preds = %151, %149
  %152 = phi i64 [ %164, %151 ], [ %150, %149 ]
  %153 = shl nuw nsw i64 %152, 1
  %154 = getelementptr inbounds i16, i16* %1, i64 %153
  %155 = load i16, i16* %154, align 2, !tbaa !29
  %156 = sext i16 %155 to i32
  %157 = or i64 %153, 1
  %158 = getelementptr inbounds i16, i16* %1, i64 %157
  %159 = load i16, i16* %158, align 2, !tbaa !29
  %160 = sext i16 %159 to i32
  %161 = add nsw i32 %160, %156
  %162 = sdiv i32 %161, 2
  %163 = trunc i32 %162 to i16
  store i16 %163, i16* %154, align 2, !tbaa !29
  store i16 0, i16* %158, align 2, !tbaa !29
  %164 = add nuw nsw i64 %152, 1
  %165 = icmp eq i64 %164, %123
  br i1 %165, label %166, label %151, !llvm.loop !216

166:                                              ; preds = %151, %147, %116, %113
  %167 = icmp sgt i32 %2, 0
  br i1 %167, label %168, label %396

168:                                              ; preds = %166
  %169 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 46
  %170 = load i32, i32* %6, align 4, !tbaa !160
  br label %171

171:                                              ; preds = %391, %168
  %172 = phi i32 [ %170, %168 ], [ %392, %391 ]
  %173 = phi i16* [ %1, %168 ], [ %267, %391 ]
  %174 = phi i32 [ %2, %168 ], [ %268, %391 ]
  %175 = phi i8* [ %3, %168 ], [ %394, %391 ]
  %176 = phi i32 [ 0, %168 ], [ %393, %391 ]
  %177 = icmp slt i32 %172, %174
  %178 = select i1 %177, i32 %172, i32 %174
  %179 = icmp sgt i32 %178, 0
  %180 = load i32, i32* @mf_size, align 4, !tbaa !18
  br i1 %179, label %181, label %264

181:                                              ; preds = %171
  %182 = sext i32 %180 to i64
  %183 = zext i32 %178 to i64
  %184 = icmp ult i32 %178, 8
  br i1 %184, label %249, label %185

185:                                              ; preds = %181
  %186 = getelementptr [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 0, i64 %182
  %187 = add nsw i64 %182, %183
  %188 = getelementptr [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 1, i64 %187
  %189 = shl nuw nsw i64 %183, 1
  %190 = getelementptr i16, i16* %173, i64 %189
  %191 = icmp ult i16* %186, %190
  %192 = icmp ult i16* %173, %188
  %193 = and i1 %191, %192
  br i1 %193, label %249, label %194

194:                                              ; preds = %185
  %195 = and i64 %183, 4294967288
  %196 = add nsw i64 %195, -8
  %197 = lshr exact i64 %196, 3
  %198 = add nuw nsw i64 %197, 1
  %199 = and i64 %198, 1
  %200 = icmp eq i64 %196, 0
  br i1 %200, label %232, label %201

201:                                              ; preds = %194
  %202 = sub nuw nsw i64 %198, %199
  br label %203

203:                                              ; preds = %203, %201
  %204 = phi i64 [ 0, %201 ], [ %229, %203 ]
  %205 = phi i64 [ %202, %201 ], [ %230, %203 ]
  %206 = shl nuw nsw i64 %204, 1
  %207 = getelementptr inbounds i16, i16* %173, i64 %206
  %208 = bitcast i16* %207 to <16 x i16>*
  %209 = load <16 x i16>, <16 x i16>* %208, align 2, !tbaa !29
  %210 = shufflevector <16 x i16> %209, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %211 = shufflevector <16 x i16> %209, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %212 = add nsw i64 %204, %182
  %213 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 0, i64 %212
  %214 = bitcast i16* %213 to <8 x i16>*
  store <8 x i16> %210, <8 x i16>* %214, align 2, !tbaa !29, !alias.scope !217, !noalias !220
  %215 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 1, i64 %212
  %216 = bitcast i16* %215 to <8 x i16>*
  store <8 x i16> %211, <8 x i16>* %216, align 2, !tbaa !29, !alias.scope !217, !noalias !220
  %217 = or i64 %204, 8
  %218 = shl nuw nsw i64 %217, 1
  %219 = getelementptr inbounds i16, i16* %173, i64 %218
  %220 = bitcast i16* %219 to <16 x i16>*
  %221 = load <16 x i16>, <16 x i16>* %220, align 2, !tbaa !29
  %222 = shufflevector <16 x i16> %221, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %223 = shufflevector <16 x i16> %221, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %224 = add nsw i64 %217, %182
  %225 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 0, i64 %224
  %226 = bitcast i16* %225 to <8 x i16>*
  store <8 x i16> %222, <8 x i16>* %226, align 2, !tbaa !29, !alias.scope !217, !noalias !220
  %227 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 1, i64 %224
  %228 = bitcast i16* %227 to <8 x i16>*
  store <8 x i16> %223, <8 x i16>* %228, align 2, !tbaa !29, !alias.scope !217, !noalias !220
  %229 = add i64 %204, 16
  %230 = add i64 %205, -2
  %231 = icmp eq i64 %230, 0
  br i1 %231, label %232, label %203, !llvm.loop !222

232:                                              ; preds = %203, %194
  %233 = phi i64 [ 0, %194 ], [ %229, %203 ]
  %234 = icmp eq i64 %199, 0
  br i1 %234, label %247, label %235

235:                                              ; preds = %232
  %236 = shl nuw nsw i64 %233, 1
  %237 = getelementptr inbounds i16, i16* %173, i64 %236
  %238 = bitcast i16* %237 to <16 x i16>*
  %239 = load <16 x i16>, <16 x i16>* %238, align 2, !tbaa !29
  %240 = shufflevector <16 x i16> %239, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %241 = shufflevector <16 x i16> %239, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %242 = add nsw i64 %233, %182
  %243 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 0, i64 %242
  %244 = bitcast i16* %243 to <8 x i16>*
  store <8 x i16> %240, <8 x i16>* %244, align 2, !tbaa !29, !alias.scope !217, !noalias !220
  %245 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 1, i64 %242
  %246 = bitcast i16* %245 to <8 x i16>*
  store <8 x i16> %241, <8 x i16>* %246, align 2, !tbaa !29, !alias.scope !217, !noalias !220
  br label %247

247:                                              ; preds = %235, %232
  %248 = icmp eq i64 %195, %183
  br i1 %248, label %264, label %249

249:                                              ; preds = %247, %185, %181
  %250 = phi i64 [ 0, %185 ], [ 0, %181 ], [ %195, %247 ]
  br label %251

251:                                              ; preds = %251, %249
  %252 = phi i64 [ %262, %251 ], [ %250, %249 ]
  %253 = shl nuw nsw i64 %252, 1
  %254 = getelementptr inbounds i16, i16* %173, i64 %253
  %255 = load i16, i16* %254, align 2, !tbaa !29
  %256 = add nsw i64 %252, %182
  %257 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 0, i64 %256
  store i16 %255, i16* %257, align 2, !tbaa !29
  %258 = or i64 %253, 1
  %259 = getelementptr inbounds i16, i16* %173, i64 %258
  %260 = load i16, i16* %259, align 2, !tbaa !29
  %261 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 1, i64 %256
  store i16 %260, i16* %261, align 2, !tbaa !29
  %262 = add nuw nsw i64 %252, 1
  %263 = icmp ult i64 %262, %183
  br i1 %263, label %251, label %264, !llvm.loop !223

264:                                              ; preds = %251, %247, %171
  %265 = shl nsw i32 %178, 1
  %266 = sext i32 %265 to i64
  %267 = getelementptr inbounds i16, i16* %173, i64 %266
  %268 = sub nsw i32 %174, %178
  %269 = add nsw i32 %180, %178
  store i32 %269, i32* @mf_size, align 4, !tbaa !18
  %270 = load i32, i32* @mf_samples_to_encode, align 4, !tbaa !18
  %271 = add nsw i32 %270, %178
  store i32 %271, i32* @mf_samples_to_encode, align 4, !tbaa !18
  %272 = icmp slt i32 %269, %8
  br i1 %272, label %391, label %273

273:                                              ; preds = %264
  %274 = tail call i32 @lame_encode_frame(%struct.lame_global_flags* %0, i16* getelementptr inbounds ([2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 0, i64 0), i16* getelementptr inbounds ([2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 1, i64 0), i32 undef, i8* %175, i32 %4)
  %275 = icmp eq i32 %274, -1
  br i1 %275, label %396, label %276

276:                                              ; preds = %273
  %277 = sext i32 %274 to i64
  %278 = getelementptr inbounds i8, i8* %175, i64 %277
  %279 = add nsw i32 %274, %176
  %280 = load i32, i32* %6, align 4, !tbaa !160
  %281 = load i32, i32* @mf_size, align 4, !tbaa !18
  %282 = sub i32 %281, %280
  store i32 %282, i32* @mf_size, align 4, !tbaa !18
  %283 = load i32, i32* @mf_samples_to_encode, align 4, !tbaa !18
  %284 = sub nsw i32 %283, %280
  store i32 %284, i32* @mf_samples_to_encode, align 4, !tbaa !18
  %285 = load i32, i32* %169, align 4, !tbaa !126
  %286 = icmp sgt i32 %285, 0
  br i1 %286, label %287, label %391

287:                                              ; preds = %276
  %288 = icmp sgt i32 %282, 0
  %289 = sext i32 %280 to i64
  %290 = zext i32 %285 to i64
  %291 = zext i32 %282 to i64
  %292 = add nsw i64 %289, %291
  %293 = and i64 %291, 4294967280
  %294 = add nsw i64 %293, -16
  %295 = lshr exact i64 %294, 4
  %296 = add nuw nsw i64 %295, 1
  %297 = icmp ult i32 %282, 16
  %298 = and i64 %291, 4294967280
  %299 = and i64 %296, 1
  %300 = icmp eq i64 %294, 0
  %301 = sub nuw nsw i64 %296, %299
  %302 = icmp eq i64 %299, 0
  %303 = icmp eq i64 %298, %291
  %304 = and i64 %291, 1
  %305 = icmp eq i64 %304, 0
  %306 = sub nsw i64 0, %291
  br label %307

307:                                              ; preds = %388, %287
  %308 = phi i64 [ 0, %287 ], [ %389, %388 ]
  %309 = getelementptr [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 %308, i64 0
  %310 = getelementptr [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 %308, i64 %291
  %311 = getelementptr [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 %308, i64 %289
  %312 = getelementptr [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 %308, i64 %292
  br i1 %288, label %313, label %388

313:                                              ; preds = %307
  br i1 %297, label %363, label %314

314:                                              ; preds = %313
  %315 = icmp ult i16* %309, %312
  %316 = icmp ult i16* %311, %310
  %317 = and i1 %315, %316
  br i1 %317, label %363, label %318

318:                                              ; preds = %314
  br i1 %300, label %348, label %319

319:                                              ; preds = %319, %318
  %320 = phi i64 [ %345, %319 ], [ 0, %318 ]
  %321 = phi i64 [ %346, %319 ], [ %301, %318 ]
  %322 = add nsw i64 %320, %289
  %323 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 %308, i64 %322
  %324 = bitcast i16* %323 to <8 x i16>*
  %325 = load <8 x i16>, <8 x i16>* %324, align 2, !tbaa !29, !alias.scope !224
  %326 = getelementptr inbounds i16, i16* %323, i64 8
  %327 = bitcast i16* %326 to <8 x i16>*
  %328 = load <8 x i16>, <8 x i16>* %327, align 2, !tbaa !29, !alias.scope !224
  %329 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 %308, i64 %320
  %330 = bitcast i16* %329 to <8 x i16>*
  store <8 x i16> %325, <8 x i16>* %330, align 16, !tbaa !29, !alias.scope !227, !noalias !224
  %331 = getelementptr inbounds i16, i16* %329, i64 8
  %332 = bitcast i16* %331 to <8 x i16>*
  store <8 x i16> %328, <8 x i16>* %332, align 16, !tbaa !29, !alias.scope !227, !noalias !224
  %333 = or i64 %320, 16
  %334 = add nsw i64 %333, %289
  %335 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 %308, i64 %334
  %336 = bitcast i16* %335 to <8 x i16>*
  %337 = load <8 x i16>, <8 x i16>* %336, align 2, !tbaa !29, !alias.scope !224
  %338 = getelementptr inbounds i16, i16* %335, i64 8
  %339 = bitcast i16* %338 to <8 x i16>*
  %340 = load <8 x i16>, <8 x i16>* %339, align 2, !tbaa !29, !alias.scope !224
  %341 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 %308, i64 %333
  %342 = bitcast i16* %341 to <8 x i16>*
  store <8 x i16> %337, <8 x i16>* %342, align 16, !tbaa !29, !alias.scope !227, !noalias !224
  %343 = getelementptr inbounds i16, i16* %341, i64 8
  %344 = bitcast i16* %343 to <8 x i16>*
  store <8 x i16> %340, <8 x i16>* %344, align 16, !tbaa !29, !alias.scope !227, !noalias !224
  %345 = add i64 %320, 32
  %346 = add i64 %321, -2
  %347 = icmp eq i64 %346, 0
  br i1 %347, label %348, label %319, !llvm.loop !229

348:                                              ; preds = %319, %318
  %349 = phi i64 [ 0, %318 ], [ %345, %319 ]
  br i1 %302, label %362, label %350

350:                                              ; preds = %348
  %351 = add nsw i64 %349, %289
  %352 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 %308, i64 %351
  %353 = bitcast i16* %352 to <8 x i16>*
  %354 = load <8 x i16>, <8 x i16>* %353, align 2, !tbaa !29, !alias.scope !224
  %355 = getelementptr inbounds i16, i16* %352, i64 8
  %356 = bitcast i16* %355 to <8 x i16>*
  %357 = load <8 x i16>, <8 x i16>* %356, align 2, !tbaa !29, !alias.scope !224
  %358 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 %308, i64 %349
  %359 = bitcast i16* %358 to <8 x i16>*
  store <8 x i16> %354, <8 x i16>* %359, align 16, !tbaa !29, !alias.scope !227, !noalias !224
  %360 = getelementptr inbounds i16, i16* %358, i64 8
  %361 = bitcast i16* %360 to <8 x i16>*
  store <8 x i16> %357, <8 x i16>* %361, align 16, !tbaa !29, !alias.scope !227, !noalias !224
  br label %362

362:                                              ; preds = %350, %348
  br i1 %303, label %388, label %363

363:                                              ; preds = %362, %314, %313
  %364 = phi i64 [ 0, %314 ], [ 0, %313 ], [ %298, %362 ]
  %365 = xor i64 %364, -1
  br i1 %305, label %372, label %366

366:                                              ; preds = %363
  %367 = add nsw i64 %364, %289
  %368 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 %308, i64 %367
  %369 = load i16, i16* %368, align 2, !tbaa !29
  %370 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 %308, i64 %364
  store i16 %369, i16* %370, align 16, !tbaa !29
  %371 = or i64 %364, 1
  br label %372

372:                                              ; preds = %366, %363
  %373 = phi i64 [ %371, %366 ], [ %364, %363 ]
  %374 = icmp eq i64 %365, %306
  br i1 %374, label %388, label %375

375:                                              ; preds = %375, %372
  %376 = phi i64 [ %386, %375 ], [ %373, %372 ]
  %377 = add nsw i64 %376, %289
  %378 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 %308, i64 %377
  %379 = load i16, i16* %378, align 2, !tbaa !29
  %380 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 %308, i64 %376
  store i16 %379, i16* %380, align 2, !tbaa !29
  %381 = add nuw nsw i64 %376, 1
  %382 = add nsw i64 %381, %289
  %383 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 %308, i64 %382
  %384 = load i16, i16* %383, align 2, !tbaa !29
  %385 = getelementptr inbounds [2 x [3056 x i16]], [2 x [3056 x i16]]* @mfbuf, i64 0, i64 %308, i64 %381
  store i16 %384, i16* %385, align 2, !tbaa !29
  %386 = add nuw nsw i64 %376, 2
  %387 = icmp eq i64 %386, %291
  br i1 %387, label %388, label %375, !llvm.loop !230

388:                                              ; preds = %375, %372, %362, %307
  %389 = add nuw nsw i64 %308, 1
  %390 = icmp ult i64 %389, %290
  br i1 %390, label %307, label %391

391:                                              ; preds = %388, %276, %264
  %392 = phi i32 [ %172, %264 ], [ %280, %276 ], [ %280, %388 ]
  %393 = phi i32 [ %176, %264 ], [ %279, %276 ], [ %279, %388 ]
  %394 = phi i8* [ %175, %264 ], [ %278, %276 ], [ %278, %388 ]
  %395 = icmp sgt i32 %268, 0
  br i1 %395, label %171, label %396

396:                                              ; preds = %391, %273, %166, %99, %18, %12
  %397 = phi i32 [ %13, %12 ], [ %100, %99 ], [ -1, %18 ], [ 0, %166 ], [ %393, %391 ], [ -1, %273 ]
  ret i32 %397
}

; Function Attrs: nounwind uwtable
define dso_local i32 @lame_encode(%struct.lame_global_flags* %0, [1152 x i16]* %1, i8* %2, i32 %3) local_unnamed_addr #0 {
  %5 = load i32, i32* @mf_samples_to_encode, align 4, !tbaa !18
  %6 = getelementptr inbounds [1152 x i16], [1152 x i16]* %1, i64 0, i64 0
  %7 = getelementptr inbounds [1152 x i16], [1152 x i16]* %1, i64 1, i64 0
  %8 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 45
  %9 = load i32, i32* %8, align 8, !tbaa !95
  %10 = mul nsw i32 %9, 576
  %11 = tail call i32 @lame_encode_buffer(%struct.lame_global_flags* %0, i16* %6, i16* nonnull %7, i32 %10, i8* %2, i32 %3)
  store i32 %5, i32* @mf_samples_to_encode, align 4, !tbaa !18
  ret i32 %11
}

; Function Attrs: nofree norecurse nounwind uwtable writeonly
define dso_local void @lame_init(%struct.lame_global_flags* %0) local_unnamed_addr #8 {
  %2 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 36
  store i32 0, i32* %2, align 4, !tbaa !231
  %3 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 33
  store i32 0, i32* %3, align 8, !tbaa !232
  %4 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 34
  store i32 0, i32* %4, align 4, !tbaa !233
  %5 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 5
  store i32 1, i32* %5, align 8, !tbaa !182
  %6 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 35
  store float 0.000000e+00, float* %6, align 8, !tbaa !234
  %7 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 17
  %8 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 39
  store i64 0, i64* %8, align 8, !tbaa !93
  %9 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 4
  store i32 0, i32* %9, align 4, !tbaa !185
  %10 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 6
  %11 = bitcast i32* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %11, i8 0, i64 16, i1 false)
  store i32 5, i32* %10, align 4, !tbaa !180
  %12 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 29
  store i32 0, i32* %12, align 8, !tbaa !88
  %13 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 59
  store i32 0, i32* %13, align 8, !tbaa !172
  %14 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 25
  %15 = bitcast i32* %14 to <4 x i32>*
  store <4 x i32> <i32 0, i32 0, i32 -1, i32 -1>, <4 x i32>* %15, align 8, !tbaa !18
  %16 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 53
  %17 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 57
  %18 = bitcast float* %16 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %18, i8 0, i64 16, i1 false)
  store i32 32, i32* %17, align 8, !tbaa !173
  %19 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 58
  store i32 -1, i32* %19, align 4, !tbaa !175
  %20 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 37
  store i32 0, i32* %20, align 8, !tbaa !235
  %21 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 49
  store float 1.000000e+00, float* %21, align 8, !tbaa !161
  %22 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 15
  store i32 2, i32* %22, align 8, !tbaa !188
  %23 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 44
  store i32 0, i32* %23, align 4, !tbaa !119
  %24 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 30
  store i32 0, i32* %24, align 4, !tbaa !89
  %25 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 7
  store i32 0, i32* %25, align 8, !tbaa !190
  %26 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 40
  store i64 0, i64* %26, align 8, !tbaa !94
  %27 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 21
  %28 = bitcast i32* %27 to <4 x i32>*
  store <4 x i32> <i32 0, i32 4, i32 0, i32 0>, <4 x i32>* %28, align 8, !tbaa !18
  %29 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 47
  store i32 1, i32* %29, align 8, !tbaa !179
  %30 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 48
  store i32 13, i32* %30, align 4, !tbaa !178
  %31 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 43
  store i32 1, i32* %31, align 8, !tbaa !115
  %32 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 8
  store i32 1, i32* %32, align 4, !tbaa !121
  %33 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 9
  %34 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 13
  %35 = bitcast i32* %33 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %35, i8 0, i64 16, i1 false)
  store i32 1, i32* %34, align 8, !tbaa !124
  %36 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 16
  store i32 0, i32* %36, align 4, !tbaa !120
  %37 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 14
  store i32 0, i32* %37, align 4, !tbaa !116
  %38 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 38
  store i32 0, i32* %38, align 4, !tbaa !125
  %39 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 2
  store i32 44100, i32* %39, align 4, !tbaa !85
  %40 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 3
  store i32 0, i32* %40, align 8, !tbaa !156
  %41 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 1
  store i32 2, i32* %41, align 8, !tbaa !86
  %42 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 0
  store i64 4294967295, i64* %42, align 8, !tbaa !87
  %43 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 31
  %44 = bitcast i8** %43 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %44, i8 0, i64 16, i1 false)
  store i32 0, i32* getelementptr inbounds (%struct.ID3TAGDATA, %struct.ID3TAGDATA* @id3tag, i64 0, i32 0), align 4, !tbaa !184
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @lame_encode_finish(%struct.lame_global_flags* %0, i8* %1, i32 %2) local_unnamed_addr #0 {
  %4 = alloca [2 x [1152 x i16]], align 16
  %5 = bitcast [2 x [1152 x i16]]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4608, i8* nonnull %5) #21
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(4608) %5, i8 0, i64 4608, i1 false)
  %6 = load i32, i32* @mf_samples_to_encode, align 4, !tbaa !18
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %31

8:                                                ; preds = %3
  %9 = icmp eq i32 %2, 0
  %10 = getelementptr inbounds [2 x [1152 x i16]], [2 x [1152 x i16]]* %4, i64 0, i64 0, i64 0
  %11 = getelementptr inbounds [2 x [1152 x i16]], [2 x [1152 x i16]]* %4, i64 0, i64 1, i64 0
  %12 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 45
  %13 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 42
  br label %14

14:                                               ; preds = %24, %8
  %15 = phi i32 [ 0, %8 ], [ %27, %24 ]
  %16 = phi i8* [ %1, %8 ], [ %26, %24 ]
  %17 = phi i32 [ %6, %8 ], [ %29, %24 ]
  %18 = sub nsw i32 %2, %15
  %19 = select i1 %9, i32 0, i32 %18
  %20 = load i32, i32* %12, align 8, !tbaa !95
  %21 = mul nsw i32 %20, 576
  %22 = call i32 @lame_encode_buffer(%struct.lame_global_flags* %0, i16* nonnull %10, i16* nonnull %11, i32 %21, i8* %16, i32 %19) #21
  store i32 %17, i32* @mf_samples_to_encode, align 4, !tbaa !18
  %23 = icmp eq i32 %22, -1
  br i1 %23, label %63, label %24

24:                                               ; preds = %14
  %25 = sext i32 %22 to i64
  %26 = getelementptr inbounds i8, i8* %16, i64 %25
  %27 = add nsw i32 %22, %15
  %28 = load i32, i32* %13, align 4, !tbaa !160
  %29 = sub nsw i32 %17, %28
  store i32 %29, i32* @mf_samples_to_encode, align 4, !tbaa !18
  %30 = icmp sgt i32 %29, 0
  br i1 %30, label %14, label %31

31:                                               ; preds = %24, %3
  %32 = phi i8* [ %1, %3 ], [ %26, %24 ]
  %33 = phi i32 [ 0, %3 ], [ %27, %24 ]
  %34 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 39
  %35 = load i64, i64* %34, align 8, !tbaa !93
  %36 = add nsw i64 %35, -1
  store i64 %36, i64* %34, align 8, !tbaa !93
  %37 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 4
  %38 = load i32, i32* %37, align 4, !tbaa !185
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %55

40:                                               ; preds = %31
  %41 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 7
  %42 = load i32, i32* %41, align 8, !tbaa !190
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %55

44:                                               ; preds = %40
  %45 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 3
  %46 = load i32, i32* %45, align 8, !tbaa !156
  %47 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 40
  %48 = load i64, i64* %47, align 8, !tbaa !94
  %49 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 42
  %50 = load i32, i32* %49, align 4, !tbaa !160
  call void @timestatus(i32 %46, i64 %36, i64 %48, i32 %50) #21
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %52 = call i32 @fputc(i32 10, %struct._IO_FILE* %51) #19
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %54 = call i32 @fflush(%struct._IO_FILE* %53)
  br label %55

55:                                               ; preds = %44, %40, %31
  call void @III_FlushBitstream() #21
  %56 = sub nsw i32 %2, %33
  %57 = icmp eq i32 %2, 0
  %58 = select i1 %57, i32 0, i32 %56
  %59 = call i32 @copy_buffer(i8* %32, i32 %58, %struct.bit_stream_struc* nonnull @bs.159) #21
  %60 = icmp eq i32 %59, -1
  %61 = add nsw i32 %59, %33
  %62 = select i1 %60, i32 -1, i32 %61
  br label %63

63:                                               ; preds = %55, %14
  %64 = phi i32 [ %62, %55 ], [ -1, %14 ]
  call void @desalloc_buffer(%struct.bit_stream_struc* nonnull @bs.159) #21
  call void @llvm.lifetime.end.p0i8(i64 4608, i8* nonnull %5) #21
  ret i32 %64
}

; Function Attrs: nounwind uwtable
define dso_local void @lame_mp3_tags(%struct.lame_global_flags* nocapture readonly %0) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 5
  %3 = load i32, i32* %2, align 8, !tbaa !182
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %16, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 22
  %7 = load i32, i32* %6, align 4, !tbaa !162
  %8 = mul nsw i32 %7, 100
  %9 = sdiv i32 %8, 9
  %10 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 32
  %11 = load i8*, i8** %10, align 8, !tbaa !183
  %12 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 43
  %13 = load i32, i32* %12, align 8, !tbaa !115
  %14 = sub nsw i32 1, %13
  %15 = tail call i32 @PutVbrTag(i8* %11, i32 %9, i32 %14) #21
  br label %16

16:                                               ; preds = %5, %1
  %17 = load i32, i32* getelementptr inbounds (%struct.ID3TAGDATA, %struct.ID3TAGDATA* @id3tag, i64 0, i32 0), align 4, !tbaa !184
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %23, label %19

19:                                               ; preds = %16
  tail call void @id3_buildtag(%struct.ID3TAGDATA* nonnull @id3tag) #21
  %20 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 32
  %21 = load i8*, i8** %20, align 8, !tbaa !183
  %22 = tail call i32 @id3_writetag(i8* %21, %struct.ID3TAGDATA* nonnull @id3tag) #21
  br label %23

23:                                               ; preds = %19, %16
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @lame_version(%struct.lame_global_flags* nocapture readnone %0, i8* %1) local_unnamed_addr #0 {
  %3 = tail call i8* @get_lame_version() #21
  %4 = tail call i8* @strncpy(i8* nonnull dereferenceable(1) %1, i8* nonnull dereferenceable(1) %3, i64 20) #21
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local i8* @strncpy(i8* noalias returned, i8* noalias nocapture readonly, i64) local_unnamed_addr #4

; Function Attrs: nounwind uwtable
define dso_local void @init_layer3(i32 %0) local_unnamed_addr #0 {
  br label %2

2:                                                ; preds = %2, %1
  %3 = phi i64 [ -256, %1 ], [ %25, %2 ]
  %4 = trunc i64 %3 to i32
  %5 = add nsw i32 %4, 210
  %6 = sitofp i32 %5 to double
  %7 = fmul double %6, -2.500000e-01
  %8 = tail call double @exp2(double %7) #4
  %9 = add nsw i64 %3, 256
  %10 = getelementptr inbounds [378 x double], [378 x double]* @gainpow2, i64 0, i64 %9
  store double %8, double* %10, align 8, !tbaa !27
  %11 = trunc i64 %3 to i32
  %12 = add i32 %11, 211
  %13 = sitofp i32 %12 to double
  %14 = fmul double %13, -2.500000e-01
  %15 = tail call double @exp2(double %14) #4
  %16 = add nsw i64 %3, 257
  %17 = getelementptr inbounds [378 x double], [378 x double]* @gainpow2, i64 0, i64 %16
  store double %15, double* %17, align 8, !tbaa !27
  %18 = trunc i64 %3 to i32
  %19 = add i32 %18, 212
  %20 = sitofp i32 %19 to double
  %21 = fmul double %20, -2.500000e-01
  %22 = tail call double @exp2(double %21) #4
  %23 = add nsw i64 %3, 258
  %24 = getelementptr inbounds [378 x double], [378 x double]* @gainpow2, i64 0, i64 %23
  store double %22, double* %24, align 8, !tbaa !27
  %25 = add nsw i64 %3, 3
  %26 = icmp eq i64 %25, 122
  br i1 %26, label %27, label %2

27:                                               ; preds = %883, %2
  %28 = phi i64 [ %888, %883 ], [ 0, %2 ]
  %29 = trunc i64 %28 to i32
  %30 = sitofp i32 %29 to double
  %31 = tail call double @pow(double %30, double 0x3FF5555555555555) #21
  %32 = getelementptr inbounds [8207 x double], [8207 x double]* @ispow, i64 0, i64 %28
  store double %31, double* %32, align 16, !tbaa !27
  %33 = or i64 %28, 1
  %34 = trunc i64 %33 to i32
  %35 = sitofp i32 %34 to double
  %36 = tail call double @pow(double %35, double 0x3FF5555555555555) #21
  %37 = getelementptr inbounds [8207 x double], [8207 x double]* @ispow, i64 0, i64 %33
  store double %36, double* %37, align 8, !tbaa !27
  %38 = or i64 %28, 2
  %39 = trunc i64 %38 to i32
  %40 = sitofp i32 %39 to double
  %41 = tail call double @pow(double %40, double 0x3FF5555555555555) #21
  %42 = getelementptr inbounds [8207 x double], [8207 x double]* @ispow, i64 0, i64 %38
  store double %41, double* %42, align 16, !tbaa !27
  %43 = or i64 %28, 3
  %44 = icmp eq i64 %43, 8207
  br i1 %44, label %45, label %883

45:                                               ; preds = %27
  store double 0x3FEB7095010F9356, double* @aa_cs.0, align 16, !tbaa !27
  store double 0xBFE076BFCD6FBECD, double* @aa_ca.0, align 16, !tbaa !27
  store double 0x3FEC373AFE3FA80C, double* @aa_cs.1, align 16, !tbaa !27
  store double 0xBFDE30DB485DB660, double* @aa_ca.1, align 16, !tbaa !27
  store double 0x3FEE635B9EE7B56E, double* @aa_cs.2, align 16, !tbaa !27
  store double 0xBFD40E604F4701FC, double* @aa_ca.2, align 16, !tbaa !27
  store double 0x3FEF77502A0DD15B, double* @aa_cs.3, align 16, !tbaa !27
  store double 0xBFC748EE85851AEC, double* @aa_ca.3, align 16, !tbaa !27
  store double 0x3FEFDB482DD30F5B, double* @aa_cs.4, align 16, !tbaa !27
  store double 0xBFB83603A7F2535A, double* @aa_ca.4, align 16, !tbaa !27
  store double 0x3FEFF91F901A8104, double* @aa_cs.5, align 16, !tbaa !27
  store double 0xBFA4F970DD8206D0, double* @aa_ca.5, align 16, !tbaa !27
  store double 0x3FEFFF2C98DBE44E, double* @aa_cs.6, align 16, !tbaa !27
  store double 0xBF8D14239D59A7C1, double* @aa_ca.6, align 16, !tbaa !27
  store double 0x3FEFFFF1A52805D2, double* @aa_cs.7, align 16, !tbaa !27
  store double 0xBF6E4F68C708D3F4, double* @aa_ca.7, align 16, !tbaa !27
  br label %46

46:                                               ; preds = %46, %45
  %47 = phi i64 [ 0, %45 ], [ %81, %46 ]
  %48 = shl nuw nsw i64 %47, 1
  %49 = trunc i64 %48 to i32
  %50 = or i32 %49, 1
  %51 = sitofp i32 %50 to double
  %52 = fmul double %51, 0x3FA657184AE74487
  %53 = tail call double @sin(double %52) #21
  %54 = fmul double %53, 5.000000e-01
  %55 = trunc i64 %48 to i32
  %56 = add i32 %55, 19
  %57 = sitofp i32 %56 to double
  %58 = fmul double %57, 0x400921FB54442D18
  %59 = fdiv double %58, 7.200000e+01
  %60 = tail call double @cos(double %59) #21
  %61 = fdiv double %54, %60
  %62 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 %47
  store double %61, double* %62, align 8, !tbaa !27
  %63 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 %47
  store double %61, double* %63, align 8, !tbaa !27
  %64 = add nuw nsw i64 %47, 18
  %65 = shl nuw nsw i64 %64, 1
  %66 = trunc i64 %65 to i32
  %67 = or i32 %66, 1
  %68 = sitofp i32 %67 to double
  %69 = fmul double %68, 0x3FA657184AE74487
  %70 = tail call double @sin(double %69) #21
  %71 = fmul double %70, 5.000000e-01
  %72 = trunc i64 %65 to i32
  %73 = add i32 %72, 19
  %74 = sitofp i32 %73 to double
  %75 = fmul double %74, 0x400921FB54442D18
  %76 = fdiv double %75, 7.200000e+01
  %77 = tail call double @cos(double %76) #21
  %78 = fdiv double %71, %77
  %79 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 %64
  store double %78, double* %79, align 8, !tbaa !27
  %80 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 %64
  store double %78, double* %80, align 8, !tbaa !27
  %81 = add nuw nsw i64 %47, 1
  %82 = icmp eq i64 %81, 18
  br i1 %82, label %83, label %46

83:                                               ; preds = %46
  store <2 x double> <double 0xBFE5B3935C0C9409, double 0xBFE42AE51F3AF2B9>, <2 x double>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 18) to <2 x double>*), align 16, !tbaa !27
  store <2 x double> <double 0xBFFA9AA4BCAD1BAF, double 0xBFF4E7AE9144F0FC>, <2 x double>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 12) to <2 x double>*), align 16, !tbaa !27
  store <2 x double> <double 0xBFE03F8E65FDF0FC, double 0xBFDDD1BA8E917E2B>, <2 x double>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 24) to <2 x double>*), align 16, !tbaa !27
  store <2 x double> zeroinitializer, <2 x double>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 0) to <2 x double>*), align 16, !tbaa !27
  store <2 x double> zeroinitializer, <2 x double>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 30) to <2 x double>*), align 16, !tbaa !27
  store <2 x double> <double 0x3FD34C45A2782FB5, double 0x3FF7746EA3A45F90>, <2 x double>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 6) to <2 x double>*), align 16, !tbaa !27
  store <2 x double> <double 0xBFE2F895141F4826, double 0xBFE209C1A6FE449C>, <2 x double>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 20) to <2 x double>*), align 16, !tbaa !27
  store <2 x double> <double 0xBFF1535055B4BD6A, double 0xBFEDC74EA7F7F7FC>, <2 x double>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 14) to <2 x double>*), align 16, !tbaa !27
  store <2 x double> <double 0xBFD969579AF13B11, double 0xBFD37FB982271A06>, <2 x double>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 26) to <2 x double>*), align 16, !tbaa !27
  store <2 x double> zeroinitializer, <2 x double>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 2) to <2 x double>*), align 16, !tbaa !27
  store <2 x double> zeroinitializer, <2 x double>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 32) to <2 x double>*), align 16, !tbaa !27
  store <2 x double> <double 0x401BE994A779F926, double 0xC0223026A975A6C3>, <2 x double>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 8) to <2 x double>*), align 16, !tbaa !27
  store <2 x double> <double 0xBFE1517A7BDB3895, double 0xBFE0C6C679D621E4>, <2 x double>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 22) to <2 x double>*), align 16, !tbaa !27
  store <2 x double> <double 0xBFEA486A6FFF9FC1, double 0xBFE7AED8CED5B9BD>, <2 x double>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 16) to <2 x double>*), align 16, !tbaa !27
  store <2 x double> <double 0xBFC8B3FCEA414726, double 0xBFB11CED80D03287>, <2 x double>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 28) to <2 x double>*), align 16, !tbaa !27
  store <2 x double> zeroinitializer, <2 x double>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 4) to <2 x double>*), align 16, !tbaa !27
  store <2 x double> zeroinitializer, <2 x double>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 34) to <2 x double>*), align 16, !tbaa !27
  store <2 x double> <double 0xC00C4FFDA58811F0, double 0xC00252A2ED14A1B7>, <2 x double>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 10) to <2 x double>*), align 16, !tbaa !27
  store double 0x3FEF838B8C811C17, double* @COS9.1, align 16, !tbaa !27
  store double 0x3FEE11F642522D1C, double* @COS9.2, align 16, !tbaa !27
  store double 0x3FEBB67AE8584CAB, double* @COS9.3, align 16, !tbaa !27
  store double 0x3FE8836FA2CF5039, double* @COS9.4, align 16, !tbaa !27
  store double 0x3FE491B7523C161D, double* @COS9.5, align 16, !tbaa !27
  store double 0x3FE0000000000001, double* @COS9.6, align 16, !tbaa !27
  store double 0x3FD5E3A8748A0BF7, double* @COS9.7, align 16, !tbaa !27
  store double 0x3FC63A1A7E0B738C, double* @COS9.8, align 16, !tbaa !27
  store double 0x3FE00FA563D53203, double* @tfcos36.0, align 16, !tbaa !27
  store double 0x3FE0907DC1930690, double* @tfcos36.1, align 16, !tbaa !27
  store double 0x3FE1A76F9AD128B7, double* @tfcos36.2, align 16, !tbaa !27
  store double 0x3FE3884AEF684AF8, double* @tfcos36.3, align 16, !tbaa !27
  store double 0x3FE6A09E667F3BCC, double* @tfcos36.4, align 16, !tbaa !27
  store double 0x3FEBE52877982345, double* @tfcos36.5, align 16, !tbaa !27
  store double 0x3FF2EDFB187B1137, double* @tfcos36.6, align 16, !tbaa !27
  store double 0x3FFEE8DD4748BF0E, double* @tfcos36.7, align 16, !tbaa !27
  store double 0x4016F28A8AE3AB0A, double* @tfcos36.8, align 16, !tbaa !27
  store double 0x3FE0907DC1930690, double* @tfcos12.0, align 16, !tbaa !27
  store double 0x3FE6A09E667F3BCC, double* @tfcos12.1, align 16, !tbaa !27
  store double 0x3FFEE8DD4748BF16, double* @tfcos12.2, align 16, !tbaa !27
  store double 0x3FEBB67AE8584CAB, double* @COS6_1, align 8, !tbaa !27
  store double 0x3FE0000000000001, double* @COS6_2, align 8, !tbaa !27
  br label %84

84:                                               ; preds = %699, %83
  %85 = phi i64 [ 0, %83 ], [ %700, %699 ]
  %86 = shl nuw nsw i64 %85, 1
  %87 = trunc i64 %86 to i32
  %88 = or i32 %87, 1
  %89 = sitofp i32 %88 to double
  %90 = fmul double %89, 0x3FC0C152382D7365
  %91 = tail call double @sin(double %90) #21
  %92 = fmul double %91, 5.000000e-01
  %93 = add nuw nsw i64 %86, 7
  %94 = trunc i64 %93 to i32
  %95 = sitofp i32 %94 to double
  %96 = fmul double %95, 0x400921FB54442D18
  %97 = fdiv double %96, 2.400000e+01
  %98 = tail call double @cos(double %97) #21
  %99 = fdiv double %92, %98
  %100 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 2, i64 %85
  store double %99, double* %100, align 8, !tbaa !27
  %101 = fmul double %95, 0x3FC0C152382D7365
  %102 = fcmp oeq double %101, 0xFFF0000000000000
  %103 = fcmp oeq double %101, 0x7FF0000000000000
  %104 = or i1 %103, %102
  br i1 %104, label %105, label %107, !prof !174

105:                                              ; preds = %84
  %106 = tail call double @cos(double %101) #21
  br label %107

107:                                              ; preds = %105, %84
  %108 = trunc i64 %93 to i32
  %109 = mul i32 %108, 3
  %110 = sitofp i32 %109 to double
  %111 = fmul double %110, 0x3FC0C152382D7365
  %112 = fcmp oeq double %111, 0xFFF0000000000000
  %113 = fcmp oeq double %111, 0x7FF0000000000000
  %114 = or i1 %113, %112
  br i1 %114, label %657, label %659, !prof !174

115:                                              ; preds = %702, %646
  %116 = phi i64 [ %655, %646 ], [ 1, %702 ]
  %117 = trunc i64 %116 to i32
  %118 = sitofp i32 %117 to double
  %119 = fmul double %118, 0x400921FB54442D18
  %120 = fdiv double %119, 1.200000e+01
  %121 = tail call double @tan(double %120) #21
  %122 = fadd double %121, 1.000000e+00
  %123 = fdiv double %121, %122
  %124 = getelementptr inbounds [16 x double], [16 x double]* @tan1_1, i64 0, i64 %116
  store double %123, double* %124, align 8, !tbaa !27
  %125 = fdiv double 1.000000e+00, %122
  %126 = getelementptr inbounds [16 x double], [16 x double]* @tan2_1, i64 0, i64 %116
  store double %125, double* %126, align 8, !tbaa !27
  %127 = fmul double %121, 0x3FF6A09E667F3BCD
  %128 = fdiv double %127, %122
  %129 = getelementptr inbounds [16 x double], [16 x double]* @tan1_2, i64 0, i64 %116
  store double %128, double* %129, align 8, !tbaa !27
  %130 = fdiv double 0x3FF6A09E667F3BCD, %122
  %131 = getelementptr inbounds [16 x double], [16 x double]* @tan2_2, i64 0, i64 %116
  store double %130, double* %131, align 8, !tbaa !27
  %132 = and i32 %117, 1
  %133 = icmp eq i32 %132, 0
  %134 = fadd double %118, 1.000000e+00
  %135 = fmul double %134, 5.000000e-01
  %136 = fmul double %118, 5.000000e-01
  br i1 %133, label %139, label %137

137:                                              ; preds = %115
  %138 = tail call double @pow(double 0x3FEAE89F995AD3AD, double %135) #21
  br label %141

139:                                              ; preds = %115
  %140 = tail call double @pow(double 0x3FEAE89F995AD3AD, double %136) #21
  br label %141

141:                                              ; preds = %139, %137
  %142 = phi double [ 1.000000e+00, %137 ], [ %140, %139 ]
  %143 = phi double [ %138, %137 ], [ 1.000000e+00, %139 ]
  %144 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* @pow1_1, i64 0, i64 0, i64 %116
  store double %143, double* %144, align 8, !tbaa !27
  %145 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* @pow2_1, i64 0, i64 0, i64 %116
  store double %142, double* %145, align 8, !tbaa !27
  %146 = fmul double %143, 0x3FF6A09E667F3BCD
  %147 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* @pow1_2, i64 0, i64 0, i64 %116
  store double %146, double* %147, align 8, !tbaa !27
  %148 = fmul double %142, 0x3FF6A09E667F3BCD
  %149 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* @pow2_2, i64 0, i64 0, i64 %116
  store double %148, double* %149, align 8, !tbaa !27
  br i1 %133, label %644, label %642

150:                                              ; preds = %646, %293
  %151 = phi i64 [ %401, %293 ], [ 0, %646 ]
  %152 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %151, i64 0
  %153 = getelementptr inbounds [9 x [3 x i32*]], [9 x [3 x i32*]]* @map, i64 0, i64 %151, i64 0
  store i32* %152, i32** %153, align 8, !tbaa !7
  %154 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %151, i32 1, i64 0
  %155 = load i16, i16* %154, align 2, !tbaa !29
  %156 = ashr i16 %155, 1
  %157 = sext i16 %156 to i32
  %158 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %151, i64 1
  store i32 %157, i32* %152, align 16, !tbaa !18
  %159 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %151, i64 2
  store i32 0, i32* %158, align 4, !tbaa !18
  %160 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %151, i64 3
  store i32 3, i32* %159, align 8, !tbaa !18
  %161 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %151, i64 4
  store i32 0, i32* %160, align 4, !tbaa !18
  %162 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %151, i32 1, i64 1
  %163 = sext i16 %155 to i32
  %164 = load i16, i16* %162, align 2, !tbaa !29
  %165 = ashr i16 %164, 1
  %166 = sext i16 %165 to i32
  %167 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %151, i64 5
  store i32 %166, i32* %161, align 16, !tbaa !18
  %168 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %151, i64 6
  store i32 %163, i32* %167, align 4, !tbaa !18
  %169 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %151, i64 7
  store i32 3, i32* %168, align 8, !tbaa !18
  %170 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %151, i64 8
  store i32 1, i32* %169, align 4, !tbaa !18
  %171 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %151, i32 1, i64 2
  %172 = sext i16 %164 to i32
  %173 = add nsw i32 %163, %172
  %174 = load i16, i16* %171, align 2, !tbaa !29
  %175 = ashr i16 %174, 1
  %176 = sext i16 %175 to i32
  %177 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %151, i64 9
  store i32 %176, i32* %170, align 16, !tbaa !18
  %178 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %151, i64 10
  store i32 %173, i32* %177, align 4, !tbaa !18
  %179 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %151, i64 11
  store i32 3, i32* %178, align 8, !tbaa !18
  %180 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %151, i64 12
  store i32 2, i32* %179, align 4, !tbaa !18
  %181 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %151, i32 1, i64 3
  %182 = sext i16 %174 to i32
  %183 = add nsw i32 %173, %182
  %184 = load i16, i16* %181, align 2, !tbaa !29
  %185 = ashr i16 %184, 1
  %186 = sext i16 %185 to i32
  %187 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %151, i64 13
  store i32 %186, i32* %180, align 16, !tbaa !18
  %188 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %151, i64 14
  store i32 %183, i32* %187, align 4, !tbaa !18
  %189 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %151, i64 15
  store i32 3, i32* %188, align 8, !tbaa !18
  %190 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %151, i64 16
  store i32 3, i32* %189, align 4, !tbaa !18
  %191 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %151, i32 1, i64 4
  %192 = sext i16 %184 to i32
  %193 = add nsw i32 %183, %192
  %194 = load i16, i16* %191, align 2, !tbaa !29
  %195 = ashr i16 %194, 1
  %196 = sext i16 %195 to i32
  %197 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %151, i64 17
  store i32 %196, i32* %190, align 16, !tbaa !18
  %198 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %151, i64 18
  store i32 %193, i32* %197, align 4, !tbaa !18
  %199 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %151, i64 19
  store i32 3, i32* %198, align 8, !tbaa !18
  %200 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %151, i64 20
  store i32 4, i32* %199, align 4, !tbaa !18
  %201 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %151, i32 1, i64 5
  %202 = sext i16 %194 to i32
  %203 = add nsw i32 %193, %202
  %204 = load i16, i16* %201, align 2, !tbaa !29
  %205 = ashr i16 %204, 1
  %206 = sext i16 %205 to i32
  %207 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %151, i64 21
  store i32 %206, i32* %200, align 16, !tbaa !18
  %208 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %151, i64 22
  store i32 %203, i32* %207, align 4, !tbaa !18
  %209 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %151, i64 23
  store i32 3, i32* %208, align 8, !tbaa !18
  %210 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %151, i64 24
  store i32 5, i32* %209, align 4, !tbaa !18
  %211 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %151, i32 1, i64 6
  %212 = sext i16 %204 to i32
  %213 = add nsw i32 %203, %212
  %214 = load i16, i16* %211, align 2, !tbaa !29
  %215 = ashr i16 %214, 1
  %216 = sext i16 %215 to i32
  %217 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %151, i64 25
  store i32 %216, i32* %210, align 16, !tbaa !18
  %218 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %151, i64 26
  store i32 %213, i32* %217, align 4, !tbaa !18
  %219 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %151, i64 27
  store i32 3, i32* %218, align 8, !tbaa !18
  %220 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %151, i64 28
  store i32 6, i32* %219, align 4, !tbaa !18
  %221 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %151, i32 1, i64 7
  %222 = sext i16 %214 to i32
  %223 = add nsw i32 %213, %222
  %224 = load i16, i16* %221, align 2, !tbaa !29
  %225 = ashr i16 %224, 1
  %226 = sext i16 %225 to i32
  %227 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %151, i64 29
  store i32 %226, i32* %220, align 16, !tbaa !18
  %228 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %151, i64 30
  store i32 %223, i32* %227, align 4, !tbaa !18
  %229 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %151, i64 31
  store i32 3, i32* %228, align 8, !tbaa !18
  %230 = getelementptr inbounds [9 x [152 x i32]], [9 x [152 x i32]]* @mapbuf0, i64 0, i64 %151, i64 32
  store i32 7, i32* %229, align 4, !tbaa !18
  %231 = sext i16 %224 to i32
  %232 = add nsw i32 %223, %231
  %233 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %151, i32 3, i64 3
  br label %234

234:                                              ; preds = %234, %150
  %235 = phi i32 [ %232, %150 ], [ %258, %234 ]
  %236 = phi i32* [ %230, %150 ], [ %255, %234 ]
  %237 = phi i16* [ %233, %150 ], [ %256, %234 ]
  %238 = phi i32 [ 3, %150 ], [ %259, %234 ]
  %239 = load i16, i16* %237, align 2, !tbaa !29
  %240 = ashr i16 %239, 1
  %241 = sext i16 %240 to i32
  %242 = getelementptr inbounds i32, i32* %236, i64 1
  store i32 %241, i32* %236, align 4, !tbaa !18
  %243 = getelementptr inbounds i32, i32* %236, i64 2
  store i32 %235, i32* %242, align 4, !tbaa !18
  %244 = getelementptr inbounds i32, i32* %236, i64 3
  store i32 0, i32* %243, align 4, !tbaa !18
  %245 = getelementptr inbounds i32, i32* %236, i64 4
  store i32 %238, i32* %244, align 4, !tbaa !18
  %246 = getelementptr inbounds i32, i32* %236, i64 5
  store i32 %241, i32* %245, align 4, !tbaa !18
  %247 = add nsw i32 %235, 1
  %248 = getelementptr inbounds i32, i32* %236, i64 6
  store i32 %247, i32* %246, align 4, !tbaa !18
  %249 = getelementptr inbounds i32, i32* %236, i64 7
  store i32 1, i32* %248, align 4, !tbaa !18
  %250 = getelementptr inbounds i32, i32* %236, i64 8
  store i32 %238, i32* %249, align 4, !tbaa !18
  %251 = getelementptr inbounds i32, i32* %236, i64 9
  store i32 %241, i32* %250, align 4, !tbaa !18
  %252 = add nsw i32 %235, 2
  %253 = getelementptr inbounds i32, i32* %236, i64 10
  store i32 %252, i32* %251, align 4, !tbaa !18
  %254 = getelementptr inbounds i32, i32* %236, i64 11
  store i32 2, i32* %253, align 4, !tbaa !18
  %255 = getelementptr inbounds i32, i32* %236, i64 12
  store i32 %238, i32* %254, align 4, !tbaa !18
  %256 = getelementptr inbounds i16, i16* %237, i64 1
  %257 = mul nsw i32 %241, 6
  %258 = add nsw i32 %257, %235
  %259 = add nuw nsw i32 %238, 1
  %260 = icmp eq i32 %259, 13
  br i1 %260, label %261, label %234

261:                                              ; preds = %234
  %262 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %151, i32 3, i64 0
  %263 = getelementptr inbounds [9 x [3 x i32*]], [9 x [3 x i32*]]* @mapend, i64 0, i64 %151, i64 0
  store i32* %255, i32** %263, align 8, !tbaa !7
  %264 = getelementptr inbounds [9 x [156 x i32]], [9 x [156 x i32]]* @mapbuf1, i64 0, i64 %151, i64 0
  %265 = getelementptr inbounds [9 x [3 x i32*]], [9 x [3 x i32*]]* @map, i64 0, i64 %151, i64 1
  store i32* %264, i32** %265, align 8, !tbaa !7
  br label %266

266:                                              ; preds = %266, %261
  %267 = phi i32 [ 0, %261 ], [ %290, %266 ]
  %268 = phi i32* [ %264, %261 ], [ %287, %266 ]
  %269 = phi i16* [ %262, %261 ], [ %288, %266 ]
  %270 = phi i32 [ 0, %261 ], [ %291, %266 ]
  %271 = load i16, i16* %269, align 2, !tbaa !29
  %272 = ashr i16 %271, 1
  %273 = sext i16 %272 to i32
  %274 = getelementptr inbounds i32, i32* %268, i64 1
  store i32 %273, i32* %268, align 4, !tbaa !18
  %275 = getelementptr inbounds i32, i32* %268, i64 2
  store i32 %267, i32* %274, align 4, !tbaa !18
  %276 = getelementptr inbounds i32, i32* %268, i64 3
  store i32 0, i32* %275, align 4, !tbaa !18
  %277 = getelementptr inbounds i32, i32* %268, i64 4
  store i32 %270, i32* %276, align 4, !tbaa !18
  %278 = getelementptr inbounds i32, i32* %268, i64 5
  store i32 %273, i32* %277, align 4, !tbaa !18
  %279 = or i32 %267, 1
  %280 = getelementptr inbounds i32, i32* %268, i64 6
  store i32 %279, i32* %278, align 4, !tbaa !18
  %281 = getelementptr inbounds i32, i32* %268, i64 7
  store i32 1, i32* %280, align 4, !tbaa !18
  %282 = getelementptr inbounds i32, i32* %268, i64 8
  store i32 %270, i32* %281, align 4, !tbaa !18
  %283 = getelementptr inbounds i32, i32* %268, i64 9
  store i32 %273, i32* %282, align 4, !tbaa !18
  %284 = add nsw i32 %267, 2
  %285 = getelementptr inbounds i32, i32* %268, i64 10
  store i32 %284, i32* %283, align 4, !tbaa !18
  %286 = getelementptr inbounds i32, i32* %268, i64 11
  store i32 2, i32* %285, align 4, !tbaa !18
  %287 = getelementptr inbounds i32, i32* %268, i64 12
  store i32 %270, i32* %286, align 4, !tbaa !18
  %288 = getelementptr inbounds i16, i16* %269, i64 1
  %289 = mul nsw i32 %273, 6
  %290 = add nsw i32 %289, %267
  %291 = add nuw nsw i32 %270, 1
  %292 = icmp eq i32 %291, 13
  br i1 %292, label %293, label %266

293:                                              ; preds = %266
  %294 = getelementptr inbounds [9 x [3 x i32*]], [9 x [3 x i32*]]* @mapend, i64 0, i64 %151, i64 1
  store i32* %287, i32** %294, align 8, !tbaa !7
  %295 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 0
  %296 = getelementptr inbounds [9 x [3 x i32*]], [9 x [3 x i32*]]* @map, i64 0, i64 %151, i64 2
  store i32* %295, i32** %296, align 8, !tbaa !7
  %297 = load i16, i16* %154, align 2, !tbaa !29
  %298 = ashr i16 %297, 1
  %299 = sext i16 %298 to i32
  %300 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 1
  store i32 %299, i32* %295, align 16, !tbaa !18
  %301 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 2
  store i32 0, i32* %300, align 4, !tbaa !18
  %302 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 3
  store i32 %166, i32* %301, align 8, !tbaa !18
  %303 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 4
  store i32 1, i32* %302, align 4, !tbaa !18
  %304 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 5
  store i32 %176, i32* %303, align 16, !tbaa !18
  %305 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 6
  store i32 2, i32* %304, align 4, !tbaa !18
  %306 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 7
  store i32 %186, i32* %305, align 8, !tbaa !18
  %307 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 8
  store i32 3, i32* %306, align 4, !tbaa !18
  %308 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 9
  store i32 %196, i32* %307, align 16, !tbaa !18
  %309 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 10
  store i32 4, i32* %308, align 4, !tbaa !18
  %310 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 11
  store i32 %206, i32* %309, align 8, !tbaa !18
  %311 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 12
  store i32 5, i32* %310, align 4, !tbaa !18
  %312 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 13
  store i32 %216, i32* %311, align 16, !tbaa !18
  %313 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 14
  store i32 6, i32* %312, align 4, !tbaa !18
  %314 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %151, i32 1, i64 8
  %315 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 15
  store i32 %226, i32* %313, align 8, !tbaa !18
  %316 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 16
  store i32 7, i32* %315, align 4, !tbaa !18
  %317 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %151, i32 1, i64 9
  %318 = load i16, i16* %314, align 2, !tbaa !29
  %319 = ashr i16 %318, 1
  %320 = sext i16 %319 to i32
  %321 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 17
  store i32 %320, i32* %316, align 16, !tbaa !18
  %322 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 18
  store i32 8, i32* %321, align 4, !tbaa !18
  %323 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %151, i32 1, i64 10
  %324 = load i16, i16* %317, align 2, !tbaa !29
  %325 = ashr i16 %324, 1
  %326 = sext i16 %325 to i32
  %327 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 19
  store i32 %326, i32* %322, align 8, !tbaa !18
  %328 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 20
  store i32 9, i32* %327, align 4, !tbaa !18
  %329 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %151, i32 1, i64 11
  %330 = load i16, i16* %323, align 2, !tbaa !29
  %331 = ashr i16 %330, 1
  %332 = sext i16 %331 to i32
  %333 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 21
  store i32 %332, i32* %328, align 16, !tbaa !18
  %334 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 22
  store i32 10, i32* %333, align 4, !tbaa !18
  %335 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %151, i32 1, i64 12
  %336 = load i16, i16* %329, align 2, !tbaa !29
  %337 = ashr i16 %336, 1
  %338 = sext i16 %337 to i32
  %339 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 23
  store i32 %338, i32* %334, align 8, !tbaa !18
  %340 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 24
  store i32 11, i32* %339, align 4, !tbaa !18
  %341 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %151, i32 1, i64 13
  %342 = load i16, i16* %335, align 2, !tbaa !29
  %343 = ashr i16 %342, 1
  %344 = sext i16 %343 to i32
  %345 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 25
  store i32 %344, i32* %340, align 16, !tbaa !18
  %346 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 26
  store i32 12, i32* %345, align 4, !tbaa !18
  %347 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %151, i32 1, i64 14
  %348 = load i16, i16* %341, align 2, !tbaa !29
  %349 = ashr i16 %348, 1
  %350 = sext i16 %349 to i32
  %351 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 27
  store i32 %350, i32* %346, align 8, !tbaa !18
  %352 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 28
  store i32 13, i32* %351, align 4, !tbaa !18
  %353 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %151, i32 1, i64 15
  %354 = load i16, i16* %347, align 2, !tbaa !29
  %355 = ashr i16 %354, 1
  %356 = sext i16 %355 to i32
  %357 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 29
  store i32 %356, i32* %352, align 16, !tbaa !18
  %358 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 30
  store i32 14, i32* %357, align 4, !tbaa !18
  %359 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %151, i32 1, i64 16
  %360 = load i16, i16* %353, align 2, !tbaa !29
  %361 = ashr i16 %360, 1
  %362 = sext i16 %361 to i32
  %363 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 31
  store i32 %362, i32* %358, align 8, !tbaa !18
  %364 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 32
  store i32 15, i32* %363, align 4, !tbaa !18
  %365 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %151, i32 1, i64 17
  %366 = load i16, i16* %359, align 2, !tbaa !29
  %367 = ashr i16 %366, 1
  %368 = sext i16 %367 to i32
  %369 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 33
  store i32 %368, i32* %364, align 16, !tbaa !18
  %370 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 34
  store i32 16, i32* %369, align 4, !tbaa !18
  %371 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %151, i32 1, i64 18
  %372 = load i16, i16* %365, align 2, !tbaa !29
  %373 = ashr i16 %372, 1
  %374 = sext i16 %373 to i32
  %375 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 35
  store i32 %374, i32* %370, align 8, !tbaa !18
  %376 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 36
  store i32 17, i32* %375, align 4, !tbaa !18
  %377 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %151, i32 1, i64 19
  %378 = load i16, i16* %371, align 2, !tbaa !29
  %379 = ashr i16 %378, 1
  %380 = sext i16 %379 to i32
  %381 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 37
  store i32 %380, i32* %376, align 16, !tbaa !18
  %382 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 38
  store i32 18, i32* %381, align 4, !tbaa !18
  %383 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %151, i32 1, i64 20
  %384 = load i16, i16* %377, align 2, !tbaa !29
  %385 = ashr i16 %384, 1
  %386 = sext i16 %385 to i32
  %387 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 39
  store i32 %386, i32* %382, align 8, !tbaa !18
  %388 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 40
  store i32 19, i32* %387, align 4, !tbaa !18
  %389 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %151, i32 1, i64 21
  %390 = load i16, i16* %383, align 2, !tbaa !29
  %391 = ashr i16 %390, 1
  %392 = sext i16 %391 to i32
  %393 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 41
  store i32 %392, i32* %388, align 16, !tbaa !18
  %394 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 42
  store i32 20, i32* %393, align 4, !tbaa !18
  %395 = load i16, i16* %389, align 2, !tbaa !29
  %396 = ashr i16 %395, 1
  %397 = sext i16 %396 to i32
  %398 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 43
  store i32 %397, i32* %394, align 8, !tbaa !18
  %399 = getelementptr inbounds [9 x [44 x i32]], [9 x [44 x i32]]* @mapbuf2, i64 0, i64 %151, i64 44
  store i32 21, i32* %398, align 4, !tbaa !18
  %400 = getelementptr inbounds [9 x [3 x i32*]], [9 x [3 x i32*]]* @mapend, i64 0, i64 %151, i64 2
  store i32* %399, i32** %400, align 8, !tbaa !7
  %401 = add nuw nsw i64 %151, 1
  %402 = icmp eq i64 %401, 9
  br i1 %402, label %403, label %150

403:                                              ; preds = %293
  %404 = insertelement <4 x i32> undef, i32 %0, i32 0
  %405 = shufflevector <4 x i32> %404, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %406

406:                                              ; preds = %503, %403
  %407 = phi i64 [ %504, %503 ], [ 0, %403 ]
  %408 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %407, i32 0, i64 0
  %409 = bitcast i16* %408 to <4 x i16>*
  %410 = load <4 x i16>, <4 x i16>* %409, align 16, !tbaa !29
  %411 = sext <4 x i16> %410 to <4 x i32>
  %412 = add nsw <4 x i32> %411, <i32 7, i32 7, i32 7, i32 7>
  %413 = sdiv <4 x i32> %412, <i32 18, i32 18, i32 18, i32 18>
  %414 = add nsw <4 x i32> %413, <i32 1, i32 1, i32 1, i32 1>
  %415 = getelementptr inbounds [9 x [23 x i32]], [9 x [23 x i32]]* @longLimit, i64 0, i64 %407, i64 0
  %416 = icmp slt <4 x i32> %413, %405
  %417 = select <4 x i1> %416, <4 x i32> %414, <4 x i32> %405
  %418 = bitcast i32* %415 to <4 x i32>*
  store <4 x i32> %417, <4 x i32>* %418, align 4, !tbaa !18
  %419 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %407, i32 0, i64 4
  %420 = bitcast i16* %419 to <4 x i16>*
  %421 = load <4 x i16>, <4 x i16>* %420, align 8, !tbaa !29
  %422 = sext <4 x i16> %421 to <4 x i32>
  %423 = add nsw <4 x i32> %422, <i32 7, i32 7, i32 7, i32 7>
  %424 = sdiv <4 x i32> %423, <i32 18, i32 18, i32 18, i32 18>
  %425 = add nsw <4 x i32> %424, <i32 1, i32 1, i32 1, i32 1>
  %426 = getelementptr inbounds [9 x [23 x i32]], [9 x [23 x i32]]* @longLimit, i64 0, i64 %407, i64 4
  %427 = icmp slt <4 x i32> %424, %405
  %428 = select <4 x i1> %427, <4 x i32> %425, <4 x i32> %405
  %429 = bitcast i32* %426 to <4 x i32>*
  store <4 x i32> %428, <4 x i32>* %429, align 4, !tbaa !18
  %430 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %407, i32 0, i64 8
  %431 = bitcast i16* %430 to <4 x i16>*
  %432 = load <4 x i16>, <4 x i16>* %431, align 16, !tbaa !29
  %433 = sext <4 x i16> %432 to <4 x i32>
  %434 = add nsw <4 x i32> %433, <i32 7, i32 7, i32 7, i32 7>
  %435 = sdiv <4 x i32> %434, <i32 18, i32 18, i32 18, i32 18>
  %436 = add nsw <4 x i32> %435, <i32 1, i32 1, i32 1, i32 1>
  %437 = getelementptr inbounds [9 x [23 x i32]], [9 x [23 x i32]]* @longLimit, i64 0, i64 %407, i64 8
  %438 = icmp slt <4 x i32> %435, %405
  %439 = select <4 x i1> %438, <4 x i32> %436, <4 x i32> %405
  %440 = bitcast i32* %437 to <4 x i32>*
  store <4 x i32> %439, <4 x i32>* %440, align 4, !tbaa !18
  %441 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %407, i32 0, i64 12
  %442 = bitcast i16* %441 to <4 x i16>*
  %443 = load <4 x i16>, <4 x i16>* %442, align 8, !tbaa !29
  %444 = sext <4 x i16> %443 to <4 x i32>
  %445 = add nsw <4 x i32> %444, <i32 7, i32 7, i32 7, i32 7>
  %446 = sdiv <4 x i32> %445, <i32 18, i32 18, i32 18, i32 18>
  %447 = add nsw <4 x i32> %446, <i32 1, i32 1, i32 1, i32 1>
  %448 = getelementptr inbounds [9 x [23 x i32]], [9 x [23 x i32]]* @longLimit, i64 0, i64 %407, i64 12
  %449 = icmp slt <4 x i32> %446, %405
  %450 = select <4 x i1> %449, <4 x i32> %447, <4 x i32> %405
  %451 = bitcast i32* %448 to <4 x i32>*
  store <4 x i32> %450, <4 x i32>* %451, align 4, !tbaa !18
  %452 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %407, i32 0, i64 16
  %453 = bitcast i16* %452 to <4 x i16>*
  %454 = load <4 x i16>, <4 x i16>* %453, align 16, !tbaa !29
  %455 = sext <4 x i16> %454 to <4 x i32>
  %456 = add nsw <4 x i32> %455, <i32 7, i32 7, i32 7, i32 7>
  %457 = sdiv <4 x i32> %456, <i32 18, i32 18, i32 18, i32 18>
  %458 = add nsw <4 x i32> %457, <i32 1, i32 1, i32 1, i32 1>
  %459 = getelementptr inbounds [9 x [23 x i32]], [9 x [23 x i32]]* @longLimit, i64 0, i64 %407, i64 16
  %460 = icmp slt <4 x i32> %457, %405
  %461 = select <4 x i1> %460, <4 x i32> %458, <4 x i32> %405
  %462 = bitcast i32* %459 to <4 x i32>*
  store <4 x i32> %461, <4 x i32>* %462, align 4, !tbaa !18
  %463 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %407, i32 0, i64 20
  %464 = load i16, i16* %463, align 8, !tbaa !29
  %465 = sext i16 %464 to i32
  %466 = add nsw i32 %465, 7
  %467 = sdiv i32 %466, 18
  %468 = add nsw i32 %467, 1
  %469 = getelementptr inbounds [9 x [23 x i32]], [9 x [23 x i32]]* @longLimit, i64 0, i64 %407, i64 20
  %470 = icmp slt i32 %467, %0
  %471 = select i1 %470, i32 %468, i32 %0
  store i32 %471, i32* %469, align 4, !tbaa !18
  %472 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %407, i32 0, i64 21
  %473 = load i16, i16* %472, align 2, !tbaa !29
  %474 = sext i16 %473 to i32
  %475 = add nsw i32 %474, 7
  %476 = sdiv i32 %475, 18
  %477 = add nsw i32 %476, 1
  %478 = getelementptr inbounds [9 x [23 x i32]], [9 x [23 x i32]]* @longLimit, i64 0, i64 %407, i64 21
  %479 = icmp slt i32 %476, %0
  %480 = select i1 %479, i32 %477, i32 %0
  store i32 %480, i32* %478, align 4, !tbaa !18
  %481 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %407, i32 0, i64 22
  %482 = load i16, i16* %481, align 4, !tbaa !29
  %483 = sext i16 %482 to i32
  %484 = add nsw i32 %483, 7
  %485 = sdiv i32 %484, 18
  %486 = add nsw i32 %485, 1
  %487 = getelementptr inbounds [9 x [23 x i32]], [9 x [23 x i32]]* @longLimit, i64 0, i64 %407, i64 22
  %488 = icmp slt i32 %485, %0
  %489 = select i1 %488, i32 %486, i32 %0
  store i32 %489, i32* %487, align 4, !tbaa !18
  br label %490

490:                                              ; preds = %490, %406
  %491 = phi i64 [ %501, %490 ], [ 0, %406 ]
  %492 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %407, i32 2, i64 %491
  %493 = load i16, i16* %492, align 2, !tbaa !29
  %494 = sext i16 %493 to i32
  %495 = add nsw i32 %494, -1
  %496 = sdiv i32 %495, 18
  %497 = add nsw i32 %496, 1
  %498 = getelementptr inbounds [9 x [14 x i32]], [9 x [14 x i32]]* @shortLimit, i64 0, i64 %407, i64 %491
  %499 = icmp slt i32 %496, %0
  %500 = select i1 %499, i32 %497, i32 %0
  store i32 %500, i32* %498, align 4, !tbaa !18
  %501 = add nuw nsw i64 %491, 1
  %502 = icmp eq i64 %501, 14
  br i1 %502, label %503, label %490

503:                                              ; preds = %490
  %504 = add nuw nsw i64 %407, 1
  %505 = icmp eq i64 %504, 9
  br i1 %505, label %506, label %406

506:                                              ; preds = %503
  store <4 x i32> <i32 12288, i32 12352, i32 12416, i32 12480>, <4 x i32>* bitcast ([256 x i32]* @i_slen2 to <4 x i32>*), align 16, !tbaa !18
  store i32 12544, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 4), align 16, !tbaa !18
  store i32 12608, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 5), align 4, !tbaa !18
  store <4 x i32> <i32 12296, i32 12360, i32 12424, i32 12488>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 6) to <4 x i32>*), align 8, !tbaa !18
  store i32 12552, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 10), align 8, !tbaa !18
  store i32 12616, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 11), align 4, !tbaa !18
  store <4 x i32> <i32 12304, i32 12368, i32 12432, i32 12496>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 12) to <4 x i32>*), align 16, !tbaa !18
  store i32 12560, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 16), align 16, !tbaa !18
  store i32 12624, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 17), align 4, !tbaa !18
  store <4 x i32> <i32 12312, i32 12376, i32 12440, i32 12504>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 18) to <4 x i32>*), align 8, !tbaa !18
  store i32 12568, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 22), align 8, !tbaa !18
  store i32 12632, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 23), align 4, !tbaa !18
  store <4 x i32> <i32 12320, i32 12384, i32 12448, i32 12512>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 24) to <4 x i32>*), align 16, !tbaa !18
  store i32 12576, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 28), align 16, !tbaa !18
  store i32 12640, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 29), align 4, !tbaa !18
  store <4 x i32> <i32 12328, i32 12392, i32 12456, i32 12520>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 30) to <4 x i32>*), align 8, !tbaa !18
  store i32 12584, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 34), align 8, !tbaa !18
  store i32 12648, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 35), align 4, !tbaa !18
  store <4 x i32> <i32 12289, i32 12353, i32 12417, i32 12481>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 36) to <4 x i32>*), align 16, !tbaa !18
  store i32 12545, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 40), align 16, !tbaa !18
  store i32 12609, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 41), align 4, !tbaa !18
  store <4 x i32> <i32 12297, i32 12361, i32 12425, i32 12489>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 42) to <4 x i32>*), align 8, !tbaa !18
  store i32 12553, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 46), align 8, !tbaa !18
  store i32 12617, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 47), align 4, !tbaa !18
  store <4 x i32> <i32 12305, i32 12369, i32 12433, i32 12497>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 48) to <4 x i32>*), align 16, !tbaa !18
  store i32 12561, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 52), align 16, !tbaa !18
  store i32 12625, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 53), align 4, !tbaa !18
  store <4 x i32> <i32 12313, i32 12377, i32 12441, i32 12505>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 54) to <4 x i32>*), align 8, !tbaa !18
  store i32 12569, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 58), align 8, !tbaa !18
  store i32 12633, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 59), align 4, !tbaa !18
  store <4 x i32> <i32 12321, i32 12385, i32 12449, i32 12513>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 60) to <4 x i32>*), align 16, !tbaa !18
  store i32 12577, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 64), align 16, !tbaa !18
  store i32 12641, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 65), align 4, !tbaa !18
  store <4 x i32> <i32 12329, i32 12393, i32 12457, i32 12521>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 66) to <4 x i32>*), align 8, !tbaa !18
  store i32 12585, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 70), align 8, !tbaa !18
  store i32 12649, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 71), align 4, !tbaa !18
  store <4 x i32> <i32 12290, i32 12354, i32 12418, i32 12482>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 72) to <4 x i32>*), align 16, !tbaa !18
  store i32 12546, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 76), align 16, !tbaa !18
  store i32 12610, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 77), align 4, !tbaa !18
  store <4 x i32> <i32 12298, i32 12362, i32 12426, i32 12490>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 78) to <4 x i32>*), align 8, !tbaa !18
  store i32 12554, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 82), align 8, !tbaa !18
  store i32 12618, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 83), align 4, !tbaa !18
  store <4 x i32> <i32 12306, i32 12370, i32 12434, i32 12498>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 84) to <4 x i32>*), align 16, !tbaa !18
  store i32 12562, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 88), align 16, !tbaa !18
  store i32 12626, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 89), align 4, !tbaa !18
  store <4 x i32> <i32 12314, i32 12378, i32 12442, i32 12506>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 90) to <4 x i32>*), align 8, !tbaa !18
  store i32 12570, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 94), align 8, !tbaa !18
  store i32 12634, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 95), align 4, !tbaa !18
  store <4 x i32> <i32 12322, i32 12386, i32 12450, i32 12514>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 96) to <4 x i32>*), align 16, !tbaa !18
  store i32 12578, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 100), align 16, !tbaa !18
  store i32 12642, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 101), align 4, !tbaa !18
  store <4 x i32> <i32 12330, i32 12394, i32 12458, i32 12522>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 102) to <4 x i32>*), align 8, !tbaa !18
  store i32 12586, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 106), align 8, !tbaa !18
  store i32 12650, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 107), align 4, !tbaa !18
  store <4 x i32> <i32 12291, i32 12355, i32 12419, i32 12483>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 108) to <4 x i32>*), align 16, !tbaa !18
  store i32 12547, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 112), align 16, !tbaa !18
  store i32 12611, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 113), align 4, !tbaa !18
  store <4 x i32> <i32 12299, i32 12363, i32 12427, i32 12491>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 114) to <4 x i32>*), align 8, !tbaa !18
  store i32 12555, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 118), align 8, !tbaa !18
  store i32 12619, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 119), align 4, !tbaa !18
  store <4 x i32> <i32 12307, i32 12371, i32 12435, i32 12499>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 120) to <4 x i32>*), align 16, !tbaa !18
  store i32 12563, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 124), align 16, !tbaa !18
  store i32 12627, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 125), align 4, !tbaa !18
  store <4 x i32> <i32 12315, i32 12379, i32 12443, i32 12507>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 126) to <4 x i32>*), align 8, !tbaa !18
  store i32 12571, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 130), align 8, !tbaa !18
  store i32 12635, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 131), align 4, !tbaa !18
  store <4 x i32> <i32 12323, i32 12387, i32 12451, i32 12515>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 132) to <4 x i32>*), align 16, !tbaa !18
  store i32 12579, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 136), align 16, !tbaa !18
  store i32 12643, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 137), align 4, !tbaa !18
  store <4 x i32> <i32 12331, i32 12395, i32 12459, i32 12523>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 138) to <4 x i32>*), align 8, !tbaa !18
  store i32 12587, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 142), align 8, !tbaa !18
  store i32 12651, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 143), align 4, !tbaa !18
  store <4 x i32> <i32 12292, i32 12356, i32 12420, i32 12484>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 144) to <4 x i32>*), align 16, !tbaa !18
  store i32 12548, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 148), align 16, !tbaa !18
  store i32 12612, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 149), align 4, !tbaa !18
  store <4 x i32> <i32 12300, i32 12364, i32 12428, i32 12492>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 150) to <4 x i32>*), align 8, !tbaa !18
  store i32 12556, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 154), align 8, !tbaa !18
  store i32 12620, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 155), align 4, !tbaa !18
  store <4 x i32> <i32 12308, i32 12372, i32 12436, i32 12500>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 156) to <4 x i32>*), align 16, !tbaa !18
  store i32 12564, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 160), align 16, !tbaa !18
  store i32 12628, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 161), align 4, !tbaa !18
  store <4 x i32> <i32 12316, i32 12380, i32 12444, i32 12508>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 162) to <4 x i32>*), align 8, !tbaa !18
  store i32 12572, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 166), align 8, !tbaa !18
  store i32 12636, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 167), align 4, !tbaa !18
  store <4 x i32> <i32 12324, i32 12388, i32 12452, i32 12516>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 168) to <4 x i32>*), align 16, !tbaa !18
  store i32 12580, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 172), align 16, !tbaa !18
  store i32 12644, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 173), align 4, !tbaa !18
  store <4 x i32> <i32 12332, i32 12396, i32 12460, i32 12524>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 174) to <4 x i32>*), align 8, !tbaa !18
  store i32 12588, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 178), align 8, !tbaa !18
  store i32 12652, i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 179), align 4, !tbaa !18
  store <4 x i32> <i32 16384, i32 16448, i32 16512, i32 16576>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 180) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 16392, i32 16456, i32 16520, i32 16584>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 184) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 16400, i32 16464, i32 16528, i32 16592>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 188) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 16408, i32 16472, i32 16536, i32 16600>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 192) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 16385, i32 16449, i32 16513, i32 16577>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 196) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 16393, i32 16457, i32 16521, i32 16585>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 200) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 16401, i32 16465, i32 16529, i32 16593>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 204) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 16409, i32 16473, i32 16537, i32 16601>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 208) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 16386, i32 16450, i32 16514, i32 16578>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 212) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 16394, i32 16458, i32 16522, i32 16586>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 216) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 16402, i32 16466, i32 16530, i32 16594>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 220) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 16410, i32 16474, i32 16538, i32 16602>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 224) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 16387, i32 16451, i32 16515, i32 16579>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 228) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 16395, i32 16459, i32 16523, i32 16587>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 232) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 16403, i32 16467, i32 16531, i32 16595>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 236) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 16411, i32 16475, i32 16539, i32 16603>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 240) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 20480, i32 20488, i32 20496, i32 20481>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 244) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 40960, i32 40968, i32 40976, i32 40961>, <4 x i32>* bitcast (i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 500) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 20489, i32 20497, i32 20482, i32 20490>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 248) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 40969, i32 40977, i32 40962, i32 40970>, <4 x i32>* bitcast (i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 504) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 20498, i32 20483, i32 20491, i32 20499>, <4 x i32>* bitcast (i32* getelementptr inbounds ([256 x i32], [256 x i32]* @i_slen2, i64 0, i64 252) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 40978, i32 40963, i32 40971, i32 40979>, <4 x i32>* bitcast (i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 508) to <4 x i32>*), align 16, !tbaa !18
  br label %507

507:                                              ; preds = %507, %506
  %508 = phi i64 [ 0, %506 ], [ %639, %507 ]
  %509 = mul nuw nsw i64 %508, 80
  %510 = trunc i64 %508 to i32
  %511 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %509
  store i32 %510, i32* %511, align 16, !tbaa !18
  %512 = or i64 %509, 1
  %513 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %512
  %514 = insertelement <4 x i32> undef, i32 %510, i32 0
  %515 = shufflevector <4 x i32> %514, <4 x i32> undef, <4 x i32> zeroinitializer
  %516 = or <4 x i32> %515, <i32 512, i32 1024, i32 1536, i32 64>
  %517 = bitcast i32* %513 to <4 x i32>*
  store <4 x i32> %516, <4 x i32>* %517, align 4, !tbaa !18
  %518 = or i64 %509, 5
  %519 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %518
  %520 = or <4 x i32> %515, <i32 576, i32 1088, i32 1600, i32 128>
  %521 = bitcast i32* %519 to <4 x i32>*
  store <4 x i32> %520, <4 x i32>* %521, align 4, !tbaa !18
  %522 = or i64 %509, 9
  %523 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %522
  %524 = or <4 x i32> %515, <i32 640, i32 1152, i32 1664, i32 192>
  %525 = bitcast i32* %523 to <4 x i32>*
  store <4 x i32> %524, <4 x i32>* %525, align 4, !tbaa !18
  %526 = or i64 %509, 13
  %527 = or i32 %510, 704
  %528 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %526
  store i32 %527, i32* %528, align 4, !tbaa !18
  %529 = or i64 %509, 14
  %530 = or i32 %510, 1216
  %531 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %529
  store i32 %530, i32* %531, align 8, !tbaa !18
  %532 = or i64 %509, 15
  %533 = or i32 %510, 1728
  %534 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %532
  store i32 %533, i32* %534, align 4, !tbaa !18
  %535 = add nuw nsw i64 %509, 16
  %536 = or i32 %510, 8
  %537 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %535
  store i32 %536, i32* %537, align 16, !tbaa !18
  %538 = or i64 %535, 1
  %539 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %538
  %540 = insertelement <4 x i32> undef, i32 %536, i32 0
  %541 = shufflevector <4 x i32> %540, <4 x i32> undef, <4 x i32> zeroinitializer
  %542 = or <4 x i32> %541, <i32 512, i32 1024, i32 1536, i32 64>
  %543 = bitcast i32* %539 to <4 x i32>*
  store <4 x i32> %542, <4 x i32>* %543, align 4, !tbaa !18
  %544 = or i64 %535, 5
  %545 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %544
  %546 = or <4 x i32> %541, <i32 576, i32 1088, i32 1600, i32 128>
  %547 = bitcast i32* %545 to <4 x i32>*
  store <4 x i32> %546, <4 x i32>* %547, align 4, !tbaa !18
  %548 = or i64 %535, 9
  %549 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %548
  %550 = or <4 x i32> %541, <i32 640, i32 1152, i32 1664, i32 192>
  %551 = bitcast i32* %549 to <4 x i32>*
  store <4 x i32> %550, <4 x i32>* %551, align 4, !tbaa !18
  %552 = or i64 %535, 13
  %553 = or i32 %510, 712
  %554 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %552
  store i32 %553, i32* %554, align 4, !tbaa !18
  %555 = or i64 %535, 14
  %556 = or i32 %510, 1224
  %557 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %555
  store i32 %556, i32* %557, align 8, !tbaa !18
  %558 = or i64 %535, 15
  %559 = or i32 %510, 1736
  %560 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %558
  store i32 %559, i32* %560, align 4, !tbaa !18
  %561 = add nuw nsw i64 %509, 32
  %562 = or i32 %510, 16
  %563 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %561
  store i32 %562, i32* %563, align 16, !tbaa !18
  %564 = or i64 %561, 1
  %565 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %564
  %566 = insertelement <4 x i32> undef, i32 %562, i32 0
  %567 = shufflevector <4 x i32> %566, <4 x i32> undef, <4 x i32> zeroinitializer
  %568 = or <4 x i32> %567, <i32 512, i32 1024, i32 1536, i32 64>
  %569 = bitcast i32* %565 to <4 x i32>*
  store <4 x i32> %568, <4 x i32>* %569, align 4, !tbaa !18
  %570 = or i64 %561, 5
  %571 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %570
  %572 = or <4 x i32> %567, <i32 576, i32 1088, i32 1600, i32 128>
  %573 = bitcast i32* %571 to <4 x i32>*
  store <4 x i32> %572, <4 x i32>* %573, align 4, !tbaa !18
  %574 = or i64 %561, 9
  %575 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %574
  %576 = or <4 x i32> %567, <i32 640, i32 1152, i32 1664, i32 192>
  %577 = bitcast i32* %575 to <4 x i32>*
  store <4 x i32> %576, <4 x i32>* %577, align 4, !tbaa !18
  %578 = or i64 %561, 13
  %579 = or i32 %510, 720
  %580 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %578
  store i32 %579, i32* %580, align 4, !tbaa !18
  %581 = or i64 %561, 14
  %582 = or i32 %510, 1232
  %583 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %581
  store i32 %582, i32* %583, align 8, !tbaa !18
  %584 = or i64 %561, 15
  %585 = or i32 %510, 1744
  %586 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %584
  store i32 %585, i32* %586, align 4, !tbaa !18
  %587 = add nuw nsw i64 %509, 48
  %588 = or i32 %510, 24
  %589 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %587
  store i32 %588, i32* %589, align 16, !tbaa !18
  %590 = or i64 %587, 1
  %591 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %590
  %592 = insertelement <4 x i32> undef, i32 %588, i32 0
  %593 = shufflevector <4 x i32> %592, <4 x i32> undef, <4 x i32> zeroinitializer
  %594 = or <4 x i32> %593, <i32 512, i32 1024, i32 1536, i32 64>
  %595 = bitcast i32* %591 to <4 x i32>*
  store <4 x i32> %594, <4 x i32>* %595, align 4, !tbaa !18
  %596 = or i64 %587, 5
  %597 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %596
  %598 = or <4 x i32> %593, <i32 576, i32 1088, i32 1600, i32 128>
  %599 = bitcast i32* %597 to <4 x i32>*
  store <4 x i32> %598, <4 x i32>* %599, align 4, !tbaa !18
  %600 = or i64 %587, 9
  %601 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %600
  %602 = or <4 x i32> %593, <i32 640, i32 1152, i32 1664, i32 192>
  %603 = bitcast i32* %601 to <4 x i32>*
  store <4 x i32> %602, <4 x i32>* %603, align 4, !tbaa !18
  %604 = or i64 %587, 13
  %605 = or i32 %510, 728
  %606 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %604
  store i32 %605, i32* %606, align 4, !tbaa !18
  %607 = or i64 %587, 14
  %608 = or i32 %510, 1240
  %609 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %607
  store i32 %608, i32* %609, align 8, !tbaa !18
  %610 = or i64 %587, 15
  %611 = or i32 %510, 1752
  %612 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %610
  store i32 %611, i32* %612, align 4, !tbaa !18
  %613 = add nuw nsw i64 %509, 64
  %614 = or i32 %510, 32
  %615 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %613
  store i32 %614, i32* %615, align 16, !tbaa !18
  %616 = or i64 %613, 1
  %617 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %616
  %618 = insertelement <4 x i32> undef, i32 %614, i32 0
  %619 = shufflevector <4 x i32> %618, <4 x i32> undef, <4 x i32> zeroinitializer
  %620 = or <4 x i32> %619, <i32 512, i32 1024, i32 1536, i32 64>
  %621 = bitcast i32* %617 to <4 x i32>*
  store <4 x i32> %620, <4 x i32>* %621, align 4, !tbaa !18
  %622 = or i64 %613, 5
  %623 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %622
  %624 = or <4 x i32> %619, <i32 576, i32 1088, i32 1600, i32 128>
  %625 = bitcast i32* %623 to <4 x i32>*
  store <4 x i32> %624, <4 x i32>* %625, align 4, !tbaa !18
  %626 = or i64 %613, 9
  %627 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %626
  %628 = or <4 x i32> %619, <i32 640, i32 1152, i32 1664, i32 192>
  %629 = bitcast i32* %627 to <4 x i32>*
  store <4 x i32> %628, <4 x i32>* %629, align 4, !tbaa !18
  %630 = or i64 %613, 13
  %631 = or i32 %510, 736
  %632 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %630
  store i32 %631, i32* %632, align 4, !tbaa !18
  %633 = or i64 %613, 14
  %634 = or i32 %510, 1248
  %635 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %633
  store i32 %634, i32* %635, align 8, !tbaa !18
  %636 = or i64 %613, 15
  %637 = or i32 %510, 1760
  %638 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %636
  store i32 %637, i32* %638, align 4, !tbaa !18
  %639 = add nuw nsw i64 %508, 1
  %640 = icmp eq i64 %639, 5
  br i1 %640, label %641, label %507

641:                                              ; preds = %507
  store <4 x i32> <i32 4096, i32 4160, i32 4224, i32 4288>, <4 x i32>* bitcast (i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 400) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 4104, i32 4168, i32 4232, i32 4296>, <4 x i32>* bitcast (i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 404) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 4112, i32 4176, i32 4240, i32 4304>, <4 x i32>* bitcast (i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 408) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 4120, i32 4184, i32 4248, i32 4312>, <4 x i32>* bitcast (i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 412) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 4128, i32 4192, i32 4256, i32 4320>, <4 x i32>* bitcast (i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 416) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 4097, i32 4161, i32 4225, i32 4289>, <4 x i32>* bitcast (i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 420) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 4105, i32 4169, i32 4233, i32 4297>, <4 x i32>* bitcast (i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 424) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 4113, i32 4177, i32 4241, i32 4305>, <4 x i32>* bitcast (i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 428) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 4121, i32 4185, i32 4249, i32 4313>, <4 x i32>* bitcast (i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 432) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 4129, i32 4193, i32 4257, i32 4321>, <4 x i32>* bitcast (i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 436) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 4098, i32 4162, i32 4226, i32 4290>, <4 x i32>* bitcast (i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 440) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 4106, i32 4170, i32 4234, i32 4298>, <4 x i32>* bitcast (i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 444) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 4114, i32 4178, i32 4242, i32 4306>, <4 x i32>* bitcast (i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 448) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 4122, i32 4186, i32 4250, i32 4314>, <4 x i32>* bitcast (i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 452) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 4130, i32 4194, i32 4258, i32 4322>, <4 x i32>* bitcast (i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 456) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 4099, i32 4163, i32 4227, i32 4291>, <4 x i32>* bitcast (i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 460) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 4107, i32 4171, i32 4235, i32 4299>, <4 x i32>* bitcast (i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 464) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 4115, i32 4179, i32 4243, i32 4307>, <4 x i32>* bitcast (i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 468) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 4123, i32 4187, i32 4251, i32 4315>, <4 x i32>* bitcast (i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 472) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 4131, i32 4195, i32 4259, i32 4323>, <4 x i32>* bitcast (i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 476) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 4100, i32 4164, i32 4228, i32 4292>, <4 x i32>* bitcast (i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 480) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 4108, i32 4172, i32 4236, i32 4300>, <4 x i32>* bitcast (i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 484) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 4116, i32 4180, i32 4244, i32 4308>, <4 x i32>* bitcast (i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 488) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 4124, i32 4188, i32 4252, i32 4316>, <4 x i32>* bitcast (i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 492) to <4 x i32>*), align 16, !tbaa !18
  store <4 x i32> <i32 4132, i32 4196, i32 4260, i32 4324>, <4 x i32>* bitcast (i32* getelementptr inbounds ([512 x i32], [512 x i32]* @n_slen2, i64 0, i64 496) to <4 x i32>*), align 16, !tbaa !18
  ret void

642:                                              ; preds = %141
  %643 = tail call double @pow(double 0x3FE6A09E667F3BCD, double %135) #21
  br label %646

644:                                              ; preds = %141
  %645 = tail call double @pow(double 0x3FE6A09E667F3BCD, double %136) #21
  br label %646

646:                                              ; preds = %644, %642
  %647 = phi double [ 1.000000e+00, %642 ], [ %645, %644 ]
  %648 = phi double [ %643, %642 ], [ 1.000000e+00, %644 ]
  %649 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* @pow1_1, i64 0, i64 1, i64 %116
  store double %648, double* %649, align 8, !tbaa !27
  %650 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* @pow2_1, i64 0, i64 1, i64 %116
  store double %647, double* %650, align 8, !tbaa !27
  %651 = fmul double %648, 0x3FF6A09E667F3BCD
  %652 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* @pow1_2, i64 0, i64 1, i64 %116
  store double %651, double* %652, align 8, !tbaa !27
  %653 = fmul double %647, 0x3FF6A09E667F3BCD
  %654 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* @pow2_2, i64 0, i64 1, i64 %116
  store double %653, double* %654, align 8, !tbaa !27
  %655 = add nuw nsw i64 %116, 1
  %656 = icmp eq i64 %655, 16
  br i1 %656, label %150, label %115, !llvm.loop !236

657:                                              ; preds = %107
  %658 = tail call double @cos(double %111) #21
  br label %659

659:                                              ; preds = %657, %107
  %660 = trunc i64 %93 to i32
  %661 = mul i32 %660, 5
  %662 = sitofp i32 %661 to double
  %663 = fmul double %662, 0x3FC0C152382D7365
  %664 = fcmp oeq double %663, 0xFFF0000000000000
  %665 = fcmp oeq double %663, 0x7FF0000000000000
  %666 = or i1 %665, %664
  br i1 %666, label %667, label %669, !prof !174

667:                                              ; preds = %659
  %668 = tail call double @cos(double %663) #21
  br label %669

669:                                              ; preds = %667, %659
  %670 = trunc i64 %93 to i32
  %671 = mul i32 %670, 7
  %672 = sitofp i32 %671 to double
  %673 = fmul double %672, 0x3FC0C152382D7365
  %674 = fcmp oeq double %673, 0xFFF0000000000000
  %675 = fcmp oeq double %673, 0x7FF0000000000000
  %676 = or i1 %675, %674
  br i1 %676, label %677, label %679, !prof !174

677:                                              ; preds = %669
  %678 = tail call double @cos(double %673) #21
  br label %679

679:                                              ; preds = %677, %669
  %680 = trunc i64 %93 to i32
  %681 = mul i32 %680, 9
  %682 = sitofp i32 %681 to double
  %683 = fmul double %682, 0x3FC0C152382D7365
  %684 = fcmp oeq double %683, 0xFFF0000000000000
  %685 = fcmp oeq double %683, 0x7FF0000000000000
  %686 = or i1 %685, %684
  br i1 %686, label %687, label %689, !prof !174

687:                                              ; preds = %679
  %688 = tail call double @cos(double %683) #21
  br label %689

689:                                              ; preds = %687, %679
  %690 = trunc i64 %93 to i32
  %691 = mul i32 %690, 11
  %692 = sitofp i32 %691 to double
  %693 = fmul double %692, 0x3FC0C152382D7365
  %694 = fcmp oeq double %693, 0xFFF0000000000000
  %695 = fcmp oeq double %693, 0x7FF0000000000000
  %696 = or i1 %695, %694
  br i1 %696, label %697, label %699, !prof !174

697:                                              ; preds = %689
  %698 = tail call double @cos(double %693) #21
  br label %699

699:                                              ; preds = %697, %689
  %700 = add nuw nsw i64 %85, 1
  %701 = icmp eq i64 %700, 12
  br i1 %701, label %702, label %84

702:                                              ; preds = %699
  %703 = load i64, i64* bitcast ([4 x [36 x double]]* @win to i64*), align 16, !tbaa !27
  store i64 %703, i64* bitcast ([4 x [36 x double]]* @win1 to i64*), align 16, !tbaa !27
  %704 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 2) to i64*), align 16, !tbaa !27
  store i64 %704, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 2) to i64*), align 16, !tbaa !27
  %705 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 4) to i64*), align 16, !tbaa !27
  store i64 %705, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 4) to i64*), align 16, !tbaa !27
  %706 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 6) to i64*), align 16, !tbaa !27
  store i64 %706, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 6) to i64*), align 16, !tbaa !27
  %707 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 8) to i64*), align 16, !tbaa !27
  store i64 %707, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 8) to i64*), align 16, !tbaa !27
  %708 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 10) to i64*), align 16, !tbaa !27
  store i64 %708, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 10) to i64*), align 16, !tbaa !27
  %709 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 12) to i64*), align 16, !tbaa !27
  store i64 %709, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 12) to i64*), align 16, !tbaa !27
  %710 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 14) to i64*), align 16, !tbaa !27
  store i64 %710, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 14) to i64*), align 16, !tbaa !27
  %711 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 16) to i64*), align 16, !tbaa !27
  store i64 %711, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 16) to i64*), align 16, !tbaa !27
  %712 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 18) to i64*), align 16, !tbaa !27
  store i64 %712, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 18) to i64*), align 16, !tbaa !27
  %713 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 20) to i64*), align 16, !tbaa !27
  store i64 %713, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 20) to i64*), align 16, !tbaa !27
  %714 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 22) to i64*), align 16, !tbaa !27
  store i64 %714, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 22) to i64*), align 16, !tbaa !27
  %715 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 24) to i64*), align 16, !tbaa !27
  store i64 %715, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 24) to i64*), align 16, !tbaa !27
  %716 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 26) to i64*), align 16, !tbaa !27
  store i64 %716, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 26) to i64*), align 16, !tbaa !27
  %717 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 28) to i64*), align 16, !tbaa !27
  store i64 %717, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 28) to i64*), align 16, !tbaa !27
  %718 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 30) to i64*), align 16, !tbaa !27
  store i64 %718, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 30) to i64*), align 16, !tbaa !27
  %719 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 32) to i64*), align 16, !tbaa !27
  store i64 %719, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 32) to i64*), align 16, !tbaa !27
  %720 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 34) to i64*), align 16, !tbaa !27
  store i64 %720, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 34) to i64*), align 16, !tbaa !27
  %721 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 1), align 8, !tbaa !27
  %722 = fneg double %721
  store double %722, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 1), align 8, !tbaa !27
  %723 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 3), align 8, !tbaa !27
  %724 = fneg double %723
  store double %724, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 3), align 8, !tbaa !27
  %725 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 5), align 8, !tbaa !27
  %726 = fneg double %725
  store double %726, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 5), align 8, !tbaa !27
  %727 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 7), align 8, !tbaa !27
  %728 = fneg double %727
  store double %728, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 7), align 8, !tbaa !27
  %729 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 9), align 8, !tbaa !27
  %730 = fneg double %729
  store double %730, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 9), align 8, !tbaa !27
  %731 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 11), align 8, !tbaa !27
  %732 = fneg double %731
  store double %732, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 11), align 8, !tbaa !27
  %733 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 13), align 8, !tbaa !27
  %734 = fneg double %733
  store double %734, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 13), align 8, !tbaa !27
  %735 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 15), align 8, !tbaa !27
  %736 = fneg double %735
  store double %736, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 15), align 8, !tbaa !27
  %737 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 17), align 8, !tbaa !27
  %738 = fneg double %737
  store double %738, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 17), align 8, !tbaa !27
  %739 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 19), align 8, !tbaa !27
  %740 = fneg double %739
  store double %740, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 19), align 8, !tbaa !27
  %741 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 21), align 8, !tbaa !27
  %742 = fneg double %741
  store double %742, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 21), align 8, !tbaa !27
  %743 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 23), align 8, !tbaa !27
  %744 = fneg double %743
  store double %744, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 23), align 8, !tbaa !27
  %745 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 25), align 8, !tbaa !27
  %746 = fneg double %745
  store double %746, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 25), align 8, !tbaa !27
  %747 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 27), align 8, !tbaa !27
  %748 = fneg double %747
  store double %748, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 27), align 8, !tbaa !27
  %749 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 29), align 8, !tbaa !27
  %750 = fneg double %749
  store double %750, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 29), align 8, !tbaa !27
  %751 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 31), align 8, !tbaa !27
  %752 = fneg double %751
  store double %752, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 31), align 8, !tbaa !27
  %753 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 33), align 8, !tbaa !27
  %754 = fneg double %753
  store double %754, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 33), align 8, !tbaa !27
  %755 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 35), align 8, !tbaa !27
  %756 = fneg double %755
  store double %756, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 35), align 8, !tbaa !27
  %757 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 0) to i64*), align 16, !tbaa !27
  store i64 %757, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 0) to i64*), align 16, !tbaa !27
  %758 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 2) to i64*), align 16, !tbaa !27
  store i64 %758, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 2) to i64*), align 16, !tbaa !27
  %759 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 4) to i64*), align 16, !tbaa !27
  store i64 %759, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 4) to i64*), align 16, !tbaa !27
  %760 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 6) to i64*), align 16, !tbaa !27
  store i64 %760, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 6) to i64*), align 16, !tbaa !27
  %761 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 8) to i64*), align 16, !tbaa !27
  store i64 %761, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 8) to i64*), align 16, !tbaa !27
  %762 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 10) to i64*), align 16, !tbaa !27
  store i64 %762, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 10) to i64*), align 16, !tbaa !27
  %763 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 12) to i64*), align 16, !tbaa !27
  store i64 %763, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 12) to i64*), align 16, !tbaa !27
  %764 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 14) to i64*), align 16, !tbaa !27
  store i64 %764, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 14) to i64*), align 16, !tbaa !27
  %765 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 16) to i64*), align 16, !tbaa !27
  store i64 %765, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 16) to i64*), align 16, !tbaa !27
  %766 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 18) to i64*), align 16, !tbaa !27
  store i64 %766, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 18) to i64*), align 16, !tbaa !27
  %767 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 20) to i64*), align 16, !tbaa !27
  store i64 %767, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 20) to i64*), align 16, !tbaa !27
  %768 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 22) to i64*), align 16, !tbaa !27
  store i64 %768, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 22) to i64*), align 16, !tbaa !27
  %769 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 24) to i64*), align 16, !tbaa !27
  store i64 %769, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 24) to i64*), align 16, !tbaa !27
  %770 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 26) to i64*), align 16, !tbaa !27
  store i64 %770, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 26) to i64*), align 16, !tbaa !27
  %771 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 28) to i64*), align 16, !tbaa !27
  store i64 %771, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 28) to i64*), align 16, !tbaa !27
  %772 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 30) to i64*), align 16, !tbaa !27
  store i64 %772, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 30) to i64*), align 16, !tbaa !27
  %773 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 32) to i64*), align 16, !tbaa !27
  store i64 %773, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 32) to i64*), align 16, !tbaa !27
  %774 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 34) to i64*), align 16, !tbaa !27
  store i64 %774, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 34) to i64*), align 16, !tbaa !27
  %775 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 1), align 8, !tbaa !27
  %776 = fneg double %775
  store double %776, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 1), align 8, !tbaa !27
  %777 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 3), align 8, !tbaa !27
  %778 = fneg double %777
  store double %778, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 3), align 8, !tbaa !27
  %779 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 5), align 8, !tbaa !27
  %780 = fneg double %779
  store double %780, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 5), align 8, !tbaa !27
  %781 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 7), align 8, !tbaa !27
  %782 = fneg double %781
  store double %782, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 7), align 8, !tbaa !27
  %783 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 9), align 8, !tbaa !27
  %784 = fneg double %783
  store double %784, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 9), align 8, !tbaa !27
  %785 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 11), align 8, !tbaa !27
  %786 = fneg double %785
  store double %786, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 11), align 8, !tbaa !27
  %787 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 13), align 8, !tbaa !27
  %788 = fneg double %787
  store double %788, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 13), align 8, !tbaa !27
  %789 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 15), align 8, !tbaa !27
  %790 = fneg double %789
  store double %790, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 15), align 8, !tbaa !27
  %791 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 17), align 8, !tbaa !27
  %792 = fneg double %791
  store double %792, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 17), align 8, !tbaa !27
  %793 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 19), align 8, !tbaa !27
  %794 = fneg double %793
  store double %794, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 19), align 8, !tbaa !27
  %795 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 21), align 8, !tbaa !27
  %796 = fneg double %795
  store double %796, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 21), align 8, !tbaa !27
  %797 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 23), align 8, !tbaa !27
  %798 = fneg double %797
  store double %798, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 23), align 8, !tbaa !27
  %799 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 25), align 8, !tbaa !27
  %800 = fneg double %799
  store double %800, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 25), align 8, !tbaa !27
  %801 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 27), align 8, !tbaa !27
  %802 = fneg double %801
  store double %802, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 27), align 8, !tbaa !27
  %803 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 29), align 8, !tbaa !27
  %804 = fneg double %803
  store double %804, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 29), align 8, !tbaa !27
  %805 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 31), align 8, !tbaa !27
  %806 = fneg double %805
  store double %806, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 31), align 8, !tbaa !27
  %807 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 33), align 8, !tbaa !27
  %808 = fneg double %807
  store double %808, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 33), align 8, !tbaa !27
  %809 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 1, i64 35), align 8, !tbaa !27
  %810 = fneg double %809
  store double %810, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 1, i64 35), align 8, !tbaa !27
  %811 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 2, i64 0) to i64*), align 16, !tbaa !27
  store i64 %811, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 2, i64 0) to i64*), align 16, !tbaa !27
  %812 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 2, i64 2) to i64*), align 16, !tbaa !27
  store i64 %812, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 2, i64 2) to i64*), align 16, !tbaa !27
  %813 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 2, i64 4) to i64*), align 16, !tbaa !27
  store i64 %813, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 2, i64 4) to i64*), align 16, !tbaa !27
  %814 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 2, i64 6) to i64*), align 16, !tbaa !27
  store i64 %814, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 2, i64 6) to i64*), align 16, !tbaa !27
  %815 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 2, i64 8) to i64*), align 16, !tbaa !27
  store i64 %815, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 2, i64 8) to i64*), align 16, !tbaa !27
  %816 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 2, i64 10) to i64*), align 16, !tbaa !27
  store i64 %816, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 2, i64 10) to i64*), align 16, !tbaa !27
  %817 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 2, i64 1), align 8, !tbaa !27
  %818 = fneg double %817
  store double %818, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 2, i64 1), align 8, !tbaa !27
  %819 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 2, i64 3), align 8, !tbaa !27
  %820 = fneg double %819
  store double %820, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 2, i64 3), align 8, !tbaa !27
  %821 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 2, i64 5), align 8, !tbaa !27
  %822 = fneg double %821
  store double %822, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 2, i64 5), align 8, !tbaa !27
  %823 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 2, i64 7), align 8, !tbaa !27
  %824 = fneg double %823
  store double %824, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 2, i64 7), align 8, !tbaa !27
  %825 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 2, i64 9), align 8, !tbaa !27
  %826 = fneg double %825
  store double %826, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 2, i64 9), align 8, !tbaa !27
  %827 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 2, i64 11), align 8, !tbaa !27
  %828 = fneg double %827
  store double %828, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 2, i64 11), align 8, !tbaa !27
  %829 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 0) to i64*), align 16, !tbaa !27
  store i64 %829, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 0) to i64*), align 16, !tbaa !27
  %830 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 2) to i64*), align 16, !tbaa !27
  store i64 %830, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 2) to i64*), align 16, !tbaa !27
  %831 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 4) to i64*), align 16, !tbaa !27
  store i64 %831, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 4) to i64*), align 16, !tbaa !27
  %832 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 6) to i64*), align 16, !tbaa !27
  store i64 %832, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 6) to i64*), align 16, !tbaa !27
  %833 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 8) to i64*), align 16, !tbaa !27
  store i64 %833, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 8) to i64*), align 16, !tbaa !27
  %834 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 10) to i64*), align 16, !tbaa !27
  store i64 %834, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 10) to i64*), align 16, !tbaa !27
  %835 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 12) to i64*), align 16, !tbaa !27
  store i64 %835, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 12) to i64*), align 16, !tbaa !27
  %836 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 14) to i64*), align 16, !tbaa !27
  store i64 %836, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 14) to i64*), align 16, !tbaa !27
  %837 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 16) to i64*), align 16, !tbaa !27
  store i64 %837, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 16) to i64*), align 16, !tbaa !27
  %838 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 18) to i64*), align 16, !tbaa !27
  store i64 %838, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 18) to i64*), align 16, !tbaa !27
  %839 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 20) to i64*), align 16, !tbaa !27
  store i64 %839, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 20) to i64*), align 16, !tbaa !27
  %840 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 22) to i64*), align 16, !tbaa !27
  store i64 %840, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 22) to i64*), align 16, !tbaa !27
  %841 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 24) to i64*), align 16, !tbaa !27
  store i64 %841, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 24) to i64*), align 16, !tbaa !27
  %842 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 26) to i64*), align 16, !tbaa !27
  store i64 %842, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 26) to i64*), align 16, !tbaa !27
  %843 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 28) to i64*), align 16, !tbaa !27
  store i64 %843, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 28) to i64*), align 16, !tbaa !27
  %844 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 30) to i64*), align 16, !tbaa !27
  store i64 %844, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 30) to i64*), align 16, !tbaa !27
  %845 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 32) to i64*), align 16, !tbaa !27
  store i64 %845, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 32) to i64*), align 16, !tbaa !27
  %846 = load i64, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 34) to i64*), align 16, !tbaa !27
  store i64 %846, i64* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 34) to i64*), align 16, !tbaa !27
  %847 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 1), align 8, !tbaa !27
  %848 = fneg double %847
  store double %848, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 1), align 8, !tbaa !27
  %849 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 3), align 8, !tbaa !27
  %850 = fneg double %849
  store double %850, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 3), align 8, !tbaa !27
  %851 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 5), align 8, !tbaa !27
  %852 = fneg double %851
  store double %852, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 5), align 8, !tbaa !27
  %853 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 7), align 8, !tbaa !27
  %854 = fneg double %853
  store double %854, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 7), align 8, !tbaa !27
  %855 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 9), align 8, !tbaa !27
  %856 = fneg double %855
  store double %856, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 9), align 8, !tbaa !27
  %857 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 11), align 8, !tbaa !27
  %858 = fneg double %857
  store double %858, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 11), align 8, !tbaa !27
  %859 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 13), align 8, !tbaa !27
  %860 = fneg double %859
  store double %860, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 13), align 8, !tbaa !27
  %861 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 15), align 8, !tbaa !27
  %862 = fneg double %861
  store double %862, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 15), align 8, !tbaa !27
  %863 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 17), align 8, !tbaa !27
  %864 = fneg double %863
  store double %864, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 17), align 8, !tbaa !27
  %865 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 19), align 8, !tbaa !27
  %866 = fneg double %865
  store double %866, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 19), align 8, !tbaa !27
  %867 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 21), align 8, !tbaa !27
  %868 = fneg double %867
  store double %868, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 21), align 8, !tbaa !27
  %869 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 23), align 8, !tbaa !27
  %870 = fneg double %869
  store double %870, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 23), align 8, !tbaa !27
  %871 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 25), align 8, !tbaa !27
  %872 = fneg double %871
  store double %872, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 25), align 8, !tbaa !27
  %873 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 27), align 8, !tbaa !27
  %874 = fneg double %873
  store double %874, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 27), align 8, !tbaa !27
  %875 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 29), align 8, !tbaa !27
  %876 = fneg double %875
  store double %876, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 29), align 8, !tbaa !27
  %877 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 31), align 8, !tbaa !27
  %878 = fneg double %877
  store double %878, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 31), align 8, !tbaa !27
  %879 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 33), align 8, !tbaa !27
  %880 = fneg double %879
  store double %880, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 33), align 8, !tbaa !27
  %881 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 3, i64 35), align 8, !tbaa !27
  %882 = fneg double %881
  store double %882, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 3, i64 35), align 8, !tbaa !27
  store double 0.000000e+00, double* getelementptr inbounds ([16 x double], [16 x double]* @tan1_1, i64 0, i64 0), align 16, !tbaa !27
  store double 1.000000e+00, double* getelementptr inbounds ([16 x double], [16 x double]* @tan2_1, i64 0, i64 0), align 16, !tbaa !27
  store double 0.000000e+00, double* getelementptr inbounds ([16 x double], [16 x double]* @tan1_2, i64 0, i64 0), align 16, !tbaa !27
  store double 0x3FF6A09E667F3BCD, double* getelementptr inbounds ([16 x double], [16 x double]* @tan2_2, i64 0, i64 0), align 16, !tbaa !27
  store double 1.000000e+00, double* getelementptr inbounds ([2 x [16 x double]], [2 x [16 x double]]* @pow1_1, i64 0, i64 0, i64 0), align 16, !tbaa !27
  store double 1.000000e+00, double* getelementptr inbounds ([2 x [16 x double]], [2 x [16 x double]]* @pow2_1, i64 0, i64 0, i64 0), align 16, !tbaa !27
  store double 0x3FF6A09E667F3BCD, double* getelementptr inbounds ([2 x [16 x double]], [2 x [16 x double]]* @pow1_2, i64 0, i64 0, i64 0), align 16, !tbaa !27
  store double 0x3FF6A09E667F3BCD, double* getelementptr inbounds ([2 x [16 x double]], [2 x [16 x double]]* @pow2_2, i64 0, i64 0, i64 0), align 16, !tbaa !27
  store double 1.000000e+00, double* getelementptr inbounds ([2 x [16 x double]], [2 x [16 x double]]* @pow1_1, i64 0, i64 1, i64 0), align 16, !tbaa !27
  store double 1.000000e+00, double* getelementptr inbounds ([2 x [16 x double]], [2 x [16 x double]]* @pow2_1, i64 0, i64 1, i64 0), align 16, !tbaa !27
  store double 0x3FF6A09E667F3BCD, double* getelementptr inbounds ([2 x [16 x double]], [2 x [16 x double]]* @pow1_2, i64 0, i64 1, i64 0), align 16, !tbaa !27
  store double 0x3FF6A09E667F3BCD, double* getelementptr inbounds ([2 x [16 x double]], [2 x [16 x double]]* @pow2_2, i64 0, i64 1, i64 0), align 16, !tbaa !27
  br label %115

883:                                              ; preds = %27
  %884 = trunc i64 %43 to i32
  %885 = sitofp i32 %884 to double
  %886 = tail call double @pow(double %885, double 0x3FF5555555555555) #21
  %887 = getelementptr inbounds [8207 x double], [8207 x double]* @ispow, i64 0, i64 %43
  store double %886, double* %887, align 8, !tbaa !27
  %888 = add nuw nsw i64 %28, 4
  br label %27
}

declare double @exp2(double) local_unnamed_addr

; Function Attrs: nofree nounwind
declare dso_local double @pow(double, double) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare dso_local double @sin(double) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare dso_local double @tan(double) local_unnamed_addr #4

; Function Attrs: nounwind uwtable
define dso_local i32 @do_layer3(%struct.frame* nocapture readonly %0, i8* %1, i32* %2) local_unnamed_addr #0 {
  %4 = alloca [2 x [39 x i32]], align 16
  %5 = alloca %struct.III_sideinfo, align 8
  %6 = alloca i32, align 4
  %7 = bitcast [2 x [39 x i32]]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 312, i8* nonnull %7) #21
  %8 = bitcast %struct.III_sideinfo* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 488, i8* nonnull %8) #21
  %9 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 0
  %10 = load i32, i32* %9, align 4, !tbaa !17
  %11 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 2
  %12 = load i32, i32* %11, align 4, !tbaa !238
  %13 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 9
  %14 = load i32, i32* %13, align 4, !tbaa !24
  %15 = icmp eq i32 %10, 1
  %16 = icmp sgt i32 %12, -1
  %17 = select i1 %15, i32 0, i32 %12
  %18 = or i1 %15, %16
  %19 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 12
  %20 = load i32, i32* %19, align 4, !tbaa !12
  %21 = icmp eq i32 %20, 1
  br i1 %21, label %22, label %27

22:                                               ; preds = %3
  %23 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 13
  %24 = load i32, i32* %23, align 4, !tbaa !13
  %25 = and i32 %24, 2
  %26 = and i32 %24, 1
  br label %27

27:                                               ; preds = %22, %3
  %28 = phi i32 [ %25, %22 ], [ 0, %3 ]
  %29 = phi i32 [ %26, %22 ], [ 0, %3 ]
  %30 = getelementptr inbounds %struct.frame, %struct.frame* %0, i64 0, i32 3
  %31 = load i32, i32* %30, align 4, !tbaa !23
  %32 = icmp eq i32 %31, 0
  %33 = sext i32 %14 to i64
  %34 = icmp eq i32 %17, 3
  %35 = select i1 %34, i64 4, i64 0
  br i1 %32, label %194, label %36

36:                                               ; preds = %27
  %37 = tail call i32 @getbits(i32 8) #21
  %38 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 0
  store i32 %37, i32* %38, align 8, !tbaa !239
  br i1 %15, label %39, label %53

39:                                               ; preds = %36
  %40 = load i8*, i8** @wordpointer, align 8, !tbaa !7
  %41 = load i8, i8* %40, align 1, !tbaa !26
  %42 = zext i8 %41 to i32
  %43 = load i32, i32* @bitindex, align 4, !tbaa !18
  %44 = shl i32 %42, %43
  %45 = add nsw i32 %43, 1
  %46 = ashr i32 %45, 3
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i8, i8* %40, i64 %47
  store i8* %48, i8** @wordpointer, align 8, !tbaa !7
  %49 = and i32 %45, 7
  store i32 %49, i32* @bitindex, align 4, !tbaa !18
  %50 = lshr i32 %44, 7
  %51 = and i32 %50, 1
  %52 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 1
  store i32 %51, i32* %52, align 4
  br label %57

53:                                               ; preds = %36
  %54 = tail call i32 @getbits_fast(i32 2) #21
  %55 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 1
  store i32 %54, i32* %55, align 4
  %56 = icmp sgt i32 %10, 0
  br i1 %56, label %57, label %363

57:                                               ; preds = %53, %39
  %58 = getelementptr inbounds double, double* getelementptr inbounds ([378 x double], [378 x double]* @gainpow2, i64 0, i64 256), i64 %35
  %59 = icmp eq i32 %28, 0
  %60 = icmp eq i32 %14, 8
  %61 = zext i32 %10 to i64
  br label %62

62:                                               ; preds = %167, %57
  %63 = phi i64 [ 0, %57 ], [ %192, %167 ]
  %64 = tail call i32 @getbits(i32 12) #21
  %65 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %63, i32 0, i64 0, i32 1
  store i32 %64, i32* %65, align 4, !tbaa !241
  %66 = tail call i32 @getbits_fast(i32 9) #21
  %67 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %63, i32 0, i64 0, i32 2
  store i32 %66, i32* %67, align 8, !tbaa !243
  %68 = icmp ugt i32 %66, 288
  br i1 %68, label %69, label %72

69:                                               ; preds = %62
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %71 = tail call i64 @fwrite(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.181, i64 0, i64 0), i64 22, i64 1, %struct._IO_FILE* %70) #22
  store i32 288, i32* %67, align 8, !tbaa !243
  br label %72

72:                                               ; preds = %69, %62
  %73 = tail call i32 @getbits_fast(i32 8) #21
  %74 = zext i32 %73 to i64
  %75 = sub nsw i64 0, %74
  %76 = getelementptr inbounds double, double* %58, i64 %75
  %77 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %63, i32 0, i64 0, i32 17
  %78 = getelementptr inbounds double, double* %76, i64 2
  %79 = select i1 %59, double* %76, double* %78
  store double* %79, double** %77, align 8, !tbaa !244
  %80 = tail call i32 @getbits(i32 9) #21
  %81 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %63, i32 0, i64 0, i32 3
  store i32 %80, i32* %81, align 4, !tbaa !245
  %82 = load i8*, i8** @wordpointer, align 8, !tbaa !7
  %83 = load i8, i8* %82, align 1, !tbaa !26
  %84 = zext i8 %83 to i32
  %85 = load i32, i32* @bitindex, align 4, !tbaa !18
  %86 = shl i32 %84, %85
  %87 = add nsw i32 %85, 1
  %88 = ashr i32 %87, 3
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i8, i8* %82, i64 %89
  store i8* %90, i8** @wordpointer, align 8, !tbaa !7
  %91 = and i32 %87, 7
  store i32 %91, i32* @bitindex, align 4, !tbaa !18
  %92 = trunc i32 %86 to i8
  %93 = icmp sgt i8 %92, -1
  br i1 %93, label %94, label %120

94:                                               ; preds = %72
  %95 = tail call i32 @getbits_fast(i32 5) #21
  %96 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %63, i32 0, i64 0, i32 6, i64 0
  store i32 %95, i32* %96, align 8, !tbaa !18
  %97 = tail call i32 @getbits_fast(i32 5) #21
  %98 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %63, i32 0, i64 0, i32 6, i64 1
  store i32 %97, i32* %98, align 4, !tbaa !18
  %99 = tail call i32 @getbits_fast(i32 5) #21
  %100 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %63, i32 0, i64 0, i32 6, i64 2
  store i32 %99, i32* %100, align 8, !tbaa !18
  %101 = tail call i32 @getbits_fast(i32 4) #21
  %102 = tail call i32 @getbits_fast(i32 3) #21
  %103 = add nsw i32 %101, 1
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %33, i32 0, i64 %104
  %106 = load i16, i16* %105, align 2, !tbaa !29
  %107 = ashr i16 %106, 1
  %108 = sext i16 %107 to i32
  %109 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %63, i32 0, i64 0, i32 11
  store i32 %108, i32* %109, align 4, !tbaa !246
  %110 = add i32 %102, 1
  %111 = add i32 %110, %103
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %33, i32 0, i64 %112
  %114 = load i16, i16* %113, align 2, !tbaa !29
  %115 = ashr i16 %114, 1
  %116 = sext i16 %115 to i32
  %117 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %63, i32 0, i64 0, i32 12
  store i32 %116, i32* %117, align 8, !tbaa !247
  %118 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %63, i32 0, i64 0, i32 4
  store i32 0, i32* %118, align 8, !tbaa !248
  %119 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %63, i32 0, i64 0, i32 5
  store i32 0, i32* %119, align 4, !tbaa !249
  br label %167

120:                                              ; preds = %72
  %121 = tail call i32 @getbits_fast(i32 2) #21
  %122 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %63, i32 0, i64 0, i32 4
  store i32 %121, i32* %122, align 8, !tbaa !248
  %123 = load i8*, i8** @wordpointer, align 8, !tbaa !7
  %124 = load i8, i8* %123, align 1, !tbaa !26
  %125 = zext i8 %124 to i32
  %126 = load i32, i32* @bitindex, align 4, !tbaa !18
  %127 = shl i32 %125, %126
  %128 = add nsw i32 %126, 1
  %129 = ashr i32 %128, 3
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds i8, i8* %123, i64 %130
  store i8* %131, i8** @wordpointer, align 8, !tbaa !7
  %132 = and i32 %128, 7
  store i32 %132, i32* @bitindex, align 4, !tbaa !18
  %133 = lshr i32 %127, 7
  %134 = and i32 %133, 1
  %135 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %63, i32 0, i64 0, i32 5
  store i32 %134, i32* %135, align 4, !tbaa !249
  %136 = tail call i32 @getbits_fast(i32 5) #21
  %137 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %63, i32 0, i64 0, i32 6, i64 0
  store i32 %136, i32* %137, align 8, !tbaa !18
  %138 = tail call i32 @getbits_fast(i32 5) #21
  %139 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %63, i32 0, i64 0, i32 6, i64 1
  store i32 %138, i32* %139, align 4, !tbaa !18
  %140 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %63, i32 0, i64 0, i32 6, i64 2
  store i32 0, i32* %140, align 8, !tbaa !18
  %141 = tail call i32 @getbits_fast(i32 3) #21
  %142 = shl i32 %141, 3
  %143 = zext i32 %142 to i64
  %144 = getelementptr inbounds double, double* %79, i64 %143
  %145 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %63, i32 0, i64 0, i32 16, i64 0
  store double* %144, double** %145, align 8, !tbaa !7
  %146 = tail call i32 @getbits_fast(i32 3) #21
  %147 = shl i32 %146, 3
  %148 = zext i32 %147 to i64
  %149 = getelementptr inbounds double, double* %79, i64 %148
  %150 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %63, i32 0, i64 0, i32 16, i64 1
  store double* %149, double** %150, align 8, !tbaa !7
  %151 = tail call i32 @getbits_fast(i32 3) #21
  %152 = shl i32 %151, 3
  %153 = zext i32 %152 to i64
  %154 = getelementptr inbounds double, double* %79, i64 %153
  %155 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %63, i32 0, i64 0, i32 16, i64 2
  store double* %154, double** %155, align 8, !tbaa !7
  switch i32 %121, label %161 [
    i32 0, label %156
    i32 2, label %159
  ]

156:                                              ; preds = %120
  %157 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %158 = tail call i64 @fwrite(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1.182, i64 0, i64 0), i64 54, i64 1, %struct._IO_FILE* %157) #22
  tail call void @exit(i32 1) #20
  unreachable

159:                                              ; preds = %120
  %160 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %63, i32 0, i64 0, i32 11
  store i32 18, i32* %160, align 4, !tbaa !246
  br label %165

161:                                              ; preds = %120
  %162 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %63, i32 0, i64 0, i32 11
  br i1 %60, label %163, label %164

163:                                              ; preds = %161
  store i32 54, i32* %162, align 4, !tbaa !246
  br label %165

164:                                              ; preds = %161
  store i32 27, i32* %162, align 4, !tbaa !246
  br label %165

165:                                              ; preds = %164, %163, %159
  %166 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %63, i32 0, i64 0, i32 12
  store i32 288, i32* %166, align 8, !tbaa !247
  br label %167

167:                                              ; preds = %165, %94
  %168 = load i8*, i8** @wordpointer, align 8, !tbaa !7
  %169 = load i8, i8* %168, align 1, !tbaa !26
  %170 = zext i8 %169 to i32
  %171 = load i32, i32* @bitindex, align 4, !tbaa !18
  %172 = shl i32 %170, %171
  %173 = add nsw i32 %171, 1
  %174 = ashr i32 %173, 3
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds i8, i8* %168, i64 %175
  store i8* %176, i8** @wordpointer, align 8, !tbaa !7
  %177 = and i32 %173, 7
  store i32 %177, i32* @bitindex, align 4, !tbaa !18
  %178 = lshr i32 %172, 7
  %179 = and i32 %178, 1
  %180 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %63, i32 0, i64 0, i32 14
  store i32 %179, i32* %180, align 8, !tbaa !250
  %181 = load i8, i8* %176, align 1, !tbaa !26
  %182 = zext i8 %181 to i32
  %183 = shl nuw nsw i32 %182, %177
  %184 = add nuw nsw i32 %177, 1
  %185 = lshr i32 %184, 3
  %186 = zext i32 %185 to i64
  %187 = getelementptr inbounds i8, i8* %176, i64 %186
  store i8* %187, i8** @wordpointer, align 8, !tbaa !7
  %188 = and i32 %184, 7
  store i32 %188, i32* @bitindex, align 4, !tbaa !18
  %189 = lshr i32 %183, 7
  %190 = and i32 %189, 1
  %191 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %63, i32 0, i64 0, i32 15
  store i32 %190, i32* %191, align 4, !tbaa !251
  %192 = add nuw nsw i64 %63, 1
  %193 = icmp eq i64 %192, %61
  br i1 %193, label %363, label %62

194:                                              ; preds = %27
  %195 = tail call i32 @getbits(i32 9) #21
  %196 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 0
  store i32 %195, i32* %196, align 8, !tbaa !239
  br i1 %15, label %197, label %200

197:                                              ; preds = %194
  %198 = tail call i32 @getbits_fast(i32 5) #21
  %199 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 1
  store i32 %198, i32* %199, align 4
  br label %206

200:                                              ; preds = %194
  %201 = tail call i32 @getbits_fast(i32 3) #21
  %202 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 1
  store i32 %201, i32* %202, align 4
  %203 = icmp sgt i32 %10, 0
  br i1 %203, label %206, label %204

204:                                              ; preds = %200
  %205 = zext i32 %10 to i64
  br label %208

206:                                              ; preds = %200, %197
  %207 = zext i32 %10 to i64
  br label %213

208:                                              ; preds = %213, %204
  %209 = phi i64 [ %205, %204 ], [ %207, %213 ]
  %210 = phi i1 [ false, %204 ], [ true, %213 ]
  %211 = getelementptr inbounds double, double* getelementptr inbounds ([378 x double], [378 x double]* @gainpow2, i64 0, i64 256), i64 %35
  %212 = icmp eq i32 %28, 0
  br label %220

213:                                              ; preds = %213, %206
  %214 = phi i64 [ 0, %206 ], [ %218, %213 ]
  %215 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %214, i32 0, i64 0, i32 0
  store i32 -1, i32* %215, align 8, !tbaa !252
  %216 = tail call i32 @getbits_fast(i32 4) #21
  %217 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %214, i32 0, i64 1, i32 0
  store i32 %216, i32* %217, align 8, !tbaa !252
  %218 = add nuw nsw i64 %214, 1
  %219 = icmp eq i64 %218, %207
  br i1 %219, label %208, label %213

220:                                              ; preds = %361, %208
  %221 = phi i64 [ 0, %208 ], [ 1, %361 ]
  br i1 %210, label %222, label %361

222:                                              ; preds = %323, %220
  %223 = phi i64 [ %359, %323 ], [ 0, %220 ]
  %224 = tail call i32 @getbits(i32 12) #21
  %225 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %223, i32 0, i64 %221, i32 1
  store i32 %224, i32* %225, align 4, !tbaa !241
  %226 = tail call i32 @getbits_fast(i32 9) #21
  %227 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %223, i32 0, i64 %221, i32 2
  store i32 %226, i32* %227, align 8, !tbaa !243
  %228 = icmp ugt i32 %226, 288
  br i1 %228, label %229, label %232

229:                                              ; preds = %222
  %230 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %231 = tail call i64 @fwrite(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.181, i64 0, i64 0), i64 22, i64 1, %struct._IO_FILE* %230) #22
  store i32 288, i32* %227, align 8, !tbaa !243
  br label %232

232:                                              ; preds = %229, %222
  %233 = tail call i32 @getbits_fast(i32 8) #21
  %234 = zext i32 %233 to i64
  %235 = sub nsw i64 0, %234
  %236 = getelementptr inbounds double, double* %211, i64 %235
  %237 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %223, i32 0, i64 %221, i32 17
  %238 = getelementptr inbounds double, double* %236, i64 2
  %239 = select i1 %212, double* %236, double* %238
  store double* %239, double** %237, align 8, !tbaa !244
  %240 = tail call i32 @getbits_fast(i32 4) #21
  %241 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %223, i32 0, i64 %221, i32 3
  store i32 %240, i32* %241, align 4, !tbaa !245
  %242 = load i8*, i8** @wordpointer, align 8, !tbaa !7
  %243 = load i8, i8* %242, align 1, !tbaa !26
  %244 = zext i8 %243 to i32
  %245 = load i32, i32* @bitindex, align 4, !tbaa !18
  %246 = shl i32 %244, %245
  %247 = add nsw i32 %245, 1
  %248 = ashr i32 %247, 3
  %249 = sext i32 %248 to i64
  %250 = getelementptr inbounds i8, i8* %242, i64 %249
  store i8* %250, i8** @wordpointer, align 8, !tbaa !7
  %251 = and i32 %247, 7
  store i32 %251, i32* @bitindex, align 4, !tbaa !18
  %252 = trunc i32 %246 to i8
  %253 = icmp sgt i8 %252, -1
  br i1 %253, label %254, label %280

254:                                              ; preds = %232
  %255 = tail call i32 @getbits_fast(i32 5) #21
  %256 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %223, i32 0, i64 %221, i32 6, i64 0
  store i32 %255, i32* %256, align 8, !tbaa !18
  %257 = tail call i32 @getbits_fast(i32 5) #21
  %258 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %223, i32 0, i64 %221, i32 6, i64 1
  store i32 %257, i32* %258, align 4, !tbaa !18
  %259 = tail call i32 @getbits_fast(i32 5) #21
  %260 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %223, i32 0, i64 %221, i32 6, i64 2
  store i32 %259, i32* %260, align 8, !tbaa !18
  %261 = tail call i32 @getbits_fast(i32 4) #21
  %262 = tail call i32 @getbits_fast(i32 3) #21
  %263 = add nsw i32 %261, 1
  %264 = sext i32 %263 to i64
  %265 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %33, i32 0, i64 %264
  %266 = load i16, i16* %265, align 2, !tbaa !29
  %267 = ashr i16 %266, 1
  %268 = sext i16 %267 to i32
  %269 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %223, i32 0, i64 %221, i32 11
  store i32 %268, i32* %269, align 4, !tbaa !246
  %270 = add i32 %262, 1
  %271 = add i32 %270, %263
  %272 = sext i32 %271 to i64
  %273 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %33, i32 0, i64 %272
  %274 = load i16, i16* %273, align 2, !tbaa !29
  %275 = ashr i16 %274, 1
  %276 = sext i16 %275 to i32
  %277 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %223, i32 0, i64 %221, i32 12
  store i32 %276, i32* %277, align 8, !tbaa !247
  %278 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %223, i32 0, i64 %221, i32 4
  store i32 0, i32* %278, align 8, !tbaa !248
  %279 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %223, i32 0, i64 %221, i32 5
  store i32 0, i32* %279, align 4, !tbaa !249
  br label %323

280:                                              ; preds = %232
  %281 = tail call i32 @getbits_fast(i32 2) #21
  %282 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %223, i32 0, i64 %221, i32 4
  store i32 %281, i32* %282, align 8, !tbaa !248
  %283 = load i8*, i8** @wordpointer, align 8, !tbaa !7
  %284 = load i8, i8* %283, align 1, !tbaa !26
  %285 = zext i8 %284 to i32
  %286 = load i32, i32* @bitindex, align 4, !tbaa !18
  %287 = shl i32 %285, %286
  %288 = add nsw i32 %286, 1
  %289 = ashr i32 %288, 3
  %290 = sext i32 %289 to i64
  %291 = getelementptr inbounds i8, i8* %283, i64 %290
  store i8* %291, i8** @wordpointer, align 8, !tbaa !7
  %292 = and i32 %288, 7
  store i32 %292, i32* @bitindex, align 4, !tbaa !18
  %293 = lshr i32 %287, 7
  %294 = and i32 %293, 1
  %295 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %223, i32 0, i64 %221, i32 5
  store i32 %294, i32* %295, align 4, !tbaa !249
  %296 = tail call i32 @getbits_fast(i32 5) #21
  %297 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %223, i32 0, i64 %221, i32 6, i64 0
  store i32 %296, i32* %297, align 8, !tbaa !18
  %298 = tail call i32 @getbits_fast(i32 5) #21
  %299 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %223, i32 0, i64 %221, i32 6, i64 1
  store i32 %298, i32* %299, align 4, !tbaa !18
  %300 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %223, i32 0, i64 %221, i32 6, i64 2
  store i32 0, i32* %300, align 8, !tbaa !18
  %301 = tail call i32 @getbits_fast(i32 3) #21
  %302 = shl i32 %301, 3
  %303 = zext i32 %302 to i64
  %304 = getelementptr inbounds double, double* %239, i64 %303
  %305 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %223, i32 0, i64 %221, i32 16, i64 0
  store double* %304, double** %305, align 8, !tbaa !7
  %306 = tail call i32 @getbits_fast(i32 3) #21
  %307 = shl i32 %306, 3
  %308 = zext i32 %307 to i64
  %309 = getelementptr inbounds double, double* %239, i64 %308
  %310 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %223, i32 0, i64 %221, i32 16, i64 1
  store double* %309, double** %310, align 8, !tbaa !7
  %311 = tail call i32 @getbits_fast(i32 3) #21
  %312 = shl i32 %311, 3
  %313 = zext i32 %312 to i64
  %314 = getelementptr inbounds double, double* %239, i64 %313
  %315 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %223, i32 0, i64 %221, i32 16, i64 2
  store double* %314, double** %315, align 8, !tbaa !7
  %316 = icmp eq i32 %281, 0
  br i1 %316, label %317, label %320

317:                                              ; preds = %280
  %318 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %319 = tail call i64 @fwrite(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1.182, i64 0, i64 0), i64 54, i64 1, %struct._IO_FILE* %318) #22
  tail call void @exit(i32 1) #20
  unreachable

320:                                              ; preds = %280
  %321 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %223, i32 0, i64 %221, i32 11
  store i32 18, i32* %321, align 4, !tbaa !246
  %322 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %223, i32 0, i64 %221, i32 12
  store i32 288, i32* %322, align 8, !tbaa !247
  br label %323

323:                                              ; preds = %320, %254
  %324 = load i8*, i8** @wordpointer, align 8, !tbaa !7
  %325 = load i8, i8* %324, align 1, !tbaa !26
  %326 = zext i8 %325 to i32
  %327 = load i32, i32* @bitindex, align 4, !tbaa !18
  %328 = shl i32 %326, %327
  %329 = add nsw i32 %327, 1
  %330 = ashr i32 %329, 3
  %331 = sext i32 %330 to i64
  %332 = getelementptr inbounds i8, i8* %324, i64 %331
  store i8* %332, i8** @wordpointer, align 8, !tbaa !7
  %333 = and i32 %329, 7
  store i32 %333, i32* @bitindex, align 4, !tbaa !18
  %334 = lshr i32 %328, 7
  %335 = and i32 %334, 1
  %336 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %223, i32 0, i64 %221, i32 13
  store i32 %335, i32* %336, align 4, !tbaa !253
  %337 = load i8, i8* %332, align 1, !tbaa !26
  %338 = zext i8 %337 to i32
  %339 = shl nuw nsw i32 %338, %333
  %340 = add nuw nsw i32 %333, 1
  %341 = lshr i32 %340, 3
  %342 = zext i32 %341 to i64
  %343 = getelementptr inbounds i8, i8* %332, i64 %342
  store i8* %343, i8** @wordpointer, align 8, !tbaa !7
  %344 = and i32 %340, 7
  store i32 %344, i32* @bitindex, align 4, !tbaa !18
  %345 = lshr i32 %339, 7
  %346 = and i32 %345, 1
  %347 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %223, i32 0, i64 %221, i32 14
  store i32 %346, i32* %347, align 8, !tbaa !250
  %348 = load i8, i8* %343, align 1, !tbaa !26
  %349 = zext i8 %348 to i32
  %350 = shl nuw nsw i32 %349, %344
  %351 = add nuw nsw i32 %344, 1
  %352 = lshr i32 %351, 3
  %353 = zext i32 %352 to i64
  %354 = getelementptr inbounds i8, i8* %343, i64 %353
  store i8* %354, i8** @wordpointer, align 8, !tbaa !7
  %355 = and i32 %351, 7
  store i32 %355, i32* @bitindex, align 4, !tbaa !18
  %356 = lshr i32 %350, 7
  %357 = and i32 %356, 1
  %358 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %223, i32 0, i64 %221, i32 15
  store i32 %357, i32* %358, align 4, !tbaa !251
  %359 = add nuw nsw i64 %223, 1
  %360 = icmp eq i64 %359, %209
  br i1 %360, label %361, label %222

361:                                              ; preds = %323, %220
  %362 = icmp eq i64 %221, 0
  br i1 %362, label %220, label %363

363:                                              ; preds = %361, %167, %53
  %364 = phi i32 [ %37, %53 ], [ %195, %361 ], [ %37, %167 ]
  %365 = phi i64 [ 1, %53 ], [ 2, %361 ], [ 1, %167 ]
  %366 = zext i32 %364 to i64
  %367 = tail call i32 @set_pointer(i64 %366) #21
  %368 = icmp eq i32 %367, -1
  br i1 %368, label %1476, label %369

369:                                              ; preds = %363
  %370 = getelementptr inbounds [2 x [39 x i32]], [2 x [39 x i32]]* %4, i64 0, i64 0, i64 0
  %371 = icmp eq i32 %10, 2
  %372 = getelementptr inbounds [2 x [39 x i32]], [2 x [39 x i32]]* %4, i64 0, i64 1, i64 0
  %373 = icmp eq i32 %28, 0
  %374 = icmp eq i32 %29, 0
  %375 = select i1 %373, [2 x [16 x double]]* @pow2_1, [2 x [16 x double]]* @pow2_2
  %376 = select i1 %373, [2 x [16 x double]]* @pow1_1, [2 x [16 x double]]* @pow1_2
  %377 = select i1 %373, double* getelementptr inbounds ([16 x double], [16 x double]* @tan2_1, i64 0, i64 0), double* getelementptr inbounds ([16 x double], [16 x double]* @tan2_2, i64 0, i64 0)
  %378 = select i1 %373, double* getelementptr inbounds ([16 x double], [16 x double]* @tan1_1, i64 0, i64 0), double* getelementptr inbounds ([16 x double], [16 x double]* @tan1_2, i64 0, i64 0)
  %379 = getelementptr inbounds [2 x [39 x i32]], [2 x [39 x i32]]* %4, i64 0, i64 1, i64 20
  %380 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %33, i32 1, i64 21
  %381 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %33, i32 2, i64 12
  %382 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %33, i32 3, i64 12
  %383 = or i32 %29, %28
  %384 = icmp ne i32 %383, 0
  %385 = or i1 %34, %384
  %386 = icmp sgt i32 %17, -1
  %387 = bitcast i32* %6 to i8*
  %388 = select i1 %18, i64 1, i64 2
  br label %389

389:                                              ; preds = %1473, %369
  %390 = phi i64 [ 0, %369 ], [ %1474, %1473 ]
  %391 = phi i32 [ 0, %369 ], [ %1470, %1473 ]
  %392 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 0, i32 0, i64 %390
  %393 = load i32, i32* %30, align 4, !tbaa !23
  %394 = icmp eq i32 %393, 0
  br i1 %394, label %397, label %395

395:                                              ; preds = %389
  %396 = call fastcc i32 @III_get_scale_factors_2(i32* nonnull %370, %struct.gr_info_s* nonnull %392, i32 0)
  br label %399

397:                                              ; preds = %389
  %398 = call fastcc i32 @III_get_scale_factors_1(i32* nonnull %370, %struct.gr_info_s* nonnull %392)
  br label %399

399:                                              ; preds = %397, %395
  %400 = phi i32 [ %396, %395 ], [ %398, %397 ]
  %401 = call fastcc i32 @III_dequantize_sample([18 x double]* getelementptr inbounds ([2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 0, i64 0), i32* nonnull %370, %struct.gr_info_s* nonnull %392, i32 %14, i32 %400)
  %402 = icmp eq i32 %401, 0
  br i1 %402, label %403, label %1476

403:                                              ; preds = %399
  br i1 %371, label %404, label %1088

404:                                              ; preds = %403
  %405 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 1, i32 0, i64 %390
  %406 = load i32, i32* %30, align 4, !tbaa !23
  %407 = icmp eq i32 %406, 0
  br i1 %407, label %410, label %408

408:                                              ; preds = %404
  %409 = call fastcc i32 @III_get_scale_factors_2(i32* nonnull %372, %struct.gr_info_s* nonnull %405, i32 %29)
  br label %412

410:                                              ; preds = %404
  %411 = call fastcc i32 @III_get_scale_factors_1(i32* nonnull %372, %struct.gr_info_s* nonnull %405)
  br label %412

412:                                              ; preds = %410, %408
  %413 = phi i32 [ %409, %408 ], [ %411, %410 ]
  %414 = call fastcc i32 @III_dequantize_sample([18 x double]* getelementptr inbounds ([2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0), i32* nonnull %372, %struct.gr_info_s* nonnull %405, i32 %14, i32 %413)
  %415 = icmp eq i32 %414, 0
  br i1 %415, label %416, label %1476

416:                                              ; preds = %412
  br i1 %373, label %453, label %417

417:                                              ; preds = %417, %416
  %418 = phi i64 [ %451, %417 ], [ 0, %416 ]
  %419 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 0, i64 0, i64 %418
  %420 = bitcast double* %419 to <2 x double>*
  %421 = load <2 x double>, <2 x double>* %420, align 16, !tbaa !27
  %422 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %418
  %423 = bitcast double* %422 to <2 x double>*
  %424 = load <2 x double>, <2 x double>* %423, align 16, !tbaa !27
  %425 = fsub <2 x double> %421, %424
  %426 = bitcast double* %422 to <2 x double>*
  store <2 x double> %425, <2 x double>* %426, align 16, !tbaa !27
  %427 = fadd <2 x double> %421, %424
  %428 = bitcast double* %419 to <2 x double>*
  store <2 x double> %427, <2 x double>* %428, align 16, !tbaa !27
  %429 = add nuw nsw i64 %418, 2
  %430 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 0, i64 0, i64 %429
  %431 = bitcast double* %430 to <2 x double>*
  %432 = load <2 x double>, <2 x double>* %431, align 16, !tbaa !27
  %433 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %429
  %434 = bitcast double* %433 to <2 x double>*
  %435 = load <2 x double>, <2 x double>* %434, align 16, !tbaa !27
  %436 = fsub <2 x double> %432, %435
  %437 = bitcast double* %433 to <2 x double>*
  store <2 x double> %436, <2 x double>* %437, align 16, !tbaa !27
  %438 = fadd <2 x double> %432, %435
  %439 = bitcast double* %430 to <2 x double>*
  store <2 x double> %438, <2 x double>* %439, align 16, !tbaa !27
  %440 = add nuw nsw i64 %418, 4
  %441 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 0, i64 0, i64 %440
  %442 = bitcast double* %441 to <2 x double>*
  %443 = load <2 x double>, <2 x double>* %442, align 16, !tbaa !27
  %444 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %440
  %445 = bitcast double* %444 to <2 x double>*
  %446 = load <2 x double>, <2 x double>* %445, align 16, !tbaa !27
  %447 = fsub <2 x double> %443, %446
  %448 = bitcast double* %444 to <2 x double>*
  store <2 x double> %447, <2 x double>* %448, align 16, !tbaa !27
  %449 = fadd <2 x double> %443, %446
  %450 = bitcast double* %441 to <2 x double>*
  store <2 x double> %449, <2 x double>* %450, align 16, !tbaa !27
  %451 = add nuw nsw i64 %418, 6
  %452 = icmp eq i64 %451, 576
  br i1 %452, label %453, label %417, !llvm.loop !254

453:                                              ; preds = %417, %416
  br i1 %374, label %873, label %454

454:                                              ; preds = %453
  %455 = load i32, i32* %30, align 4, !tbaa !23
  %456 = icmp eq i32 %455, 0
  br i1 %456, label %464, label %457

457:                                              ; preds = %454
  %458 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 1, i32 0, i64 %390, i32 3
  %459 = load i32, i32* %458, align 4, !tbaa !245
  %460 = and i32 %459, 1
  %461 = zext i32 %460 to i64
  %462 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* %375, i64 0, i64 %461, i64 0
  %463 = getelementptr inbounds [2 x [16 x double]], [2 x [16 x double]]* %376, i64 0, i64 %461, i64 0
  br label %464

464:                                              ; preds = %457, %454
  %465 = phi double* [ %462, %457 ], [ %377, %454 ]
  %466 = phi double* [ %463, %457 ], [ %378, %454 ]
  %467 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 1, i32 0, i64 %390, i32 4
  %468 = load i32, i32* %467, align 8, !tbaa !248
  %469 = icmp eq i32 %468, 2
  br i1 %469, label %470, label %674

470:                                              ; preds = %464
  %471 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 1, i32 0, i64 %390, i32 5
  %472 = load i32, i32* %471, align 4, !tbaa !249
  %473 = icmp ne i32 %472, 0
  %474 = zext i1 %473 to i32
  %475 = sub i32 33, %472
  br label %476

476:                                              ; preds = %559, %470
  %477 = phi i64 [ 0, %470 ], [ %560, %559 ]
  %478 = phi i32 [ %474, %470 ], [ %482, %559 ]
  %479 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 1, i32 0, i64 %390, i32 8, i64 %477
  %480 = load i32, i32* %479, align 4, !tbaa !18
  %481 = icmp sgt i32 %480, 3
  %482 = select i1 %481, i32 0, i32 %478
  %483 = icmp slt i32 %480, 12
  %484 = trunc i64 %477 to i32
  br i1 %483, label %485, label %527

485:                                              ; preds = %476
  %486 = sub i32 %484, %472
  br label %487

487:                                              ; preds = %524, %485
  %488 = phi i32 [ %480, %485 ], [ %525, %524 ]
  %489 = mul nsw i32 %488, 3
  %490 = add i32 %486, %489
  %491 = zext i32 %490 to i64
  %492 = getelementptr inbounds [2 x [39 x i32]], [2 x [39 x i32]]* %4, i64 0, i64 1, i64 %491
  %493 = load i32, i32* %492, align 4, !tbaa !18
  %494 = icmp eq i32 %493, 7
  br i1 %494, label %524, label %495

495:                                              ; preds = %487
  %496 = sext i32 %488 to i64
  %497 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %33, i32 3, i64 %496
  %498 = load i16, i16* %497, align 2, !tbaa !29
  %499 = sext i32 %493 to i64
  %500 = getelementptr inbounds double, double* %466, i64 %499
  %501 = load double, double* %500, align 8, !tbaa !27
  %502 = getelementptr inbounds double, double* %465, i64 %499
  %503 = load double, double* %502, align 8, !tbaa !27
  %504 = icmp sgt i16 %498, 0
  br i1 %504, label %505, label %524

505:                                              ; preds = %495
  %506 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %33, i32 2, i64 %496
  %507 = load i16, i16* %506, align 2, !tbaa !29
  %508 = sext i16 %507 to i64
  %509 = zext i16 %498 to i32
  %510 = add i64 %477, %508
  %511 = shl i64 %510, 32
  %512 = ashr exact i64 %511, 32
  br label %513

513:                                              ; preds = %513, %505
  %514 = phi i64 [ %512, %505 ], [ %522, %513 ]
  %515 = phi i32 [ %509, %505 ], [ %521, %513 ]
  %516 = getelementptr inbounds [576 x double], [576 x double]* bitcast ([2 x [32 x [18 x double]]]* @do_layer3.hybridIn to [576 x double]*), i64 0, i64 %514
  %517 = load double, double* %516, align 8, !tbaa !27
  %518 = fmul double %501, %517
  store double %518, double* %516, align 8, !tbaa !27
  %519 = fmul double %503, %517
  %520 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %514
  store double %519, double* %520, align 8, !tbaa !27
  %521 = add nsw i32 %515, -1
  %522 = add nsw i64 %514, 3
  %523 = icmp sgt i32 %515, 1
  br i1 %523, label %513, label %524

524:                                              ; preds = %513, %495, %487
  %525 = add nsw i32 %488, 1
  %526 = icmp slt i32 %488, 11
  br i1 %526, label %487, label %527

527:                                              ; preds = %524, %476
  %528 = add i32 %475, %484
  %529 = zext i32 %528 to i64
  %530 = getelementptr inbounds [2 x [39 x i32]], [2 x [39 x i32]]* %4, i64 0, i64 1, i64 %529
  %531 = load i32, i32* %530, align 4, !tbaa !18
  %532 = icmp eq i32 %531, 7
  br i1 %532, label %559, label %533

533:                                              ; preds = %527
  %534 = load i16, i16* %382, align 2, !tbaa !29
  %535 = sext i32 %531 to i64
  %536 = getelementptr inbounds double, double* %466, i64 %535
  %537 = load double, double* %536, align 8, !tbaa !27
  %538 = getelementptr inbounds double, double* %465, i64 %535
  %539 = load double, double* %538, align 8, !tbaa !27
  %540 = icmp sgt i16 %534, 0
  br i1 %540, label %541, label %559

541:                                              ; preds = %533
  %542 = zext i16 %534 to i32
  %543 = load i16, i16* %381, align 2, !tbaa !29
  %544 = sext i16 %543 to i64
  %545 = add i64 %477, %544
  %546 = shl i64 %545, 32
  %547 = ashr exact i64 %546, 32
  br label %548

548:                                              ; preds = %548, %541
  %549 = phi i64 [ %547, %541 ], [ %557, %548 ]
  %550 = phi i32 [ %542, %541 ], [ %556, %548 ]
  %551 = getelementptr inbounds [576 x double], [576 x double]* bitcast ([2 x [32 x [18 x double]]]* @do_layer3.hybridIn to [576 x double]*), i64 0, i64 %549
  %552 = load double, double* %551, align 8, !tbaa !27
  %553 = fmul double %537, %552
  store double %553, double* %551, align 8, !tbaa !27
  %554 = fmul double %539, %552
  %555 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %549
  store double %554, double* %555, align 8, !tbaa !27
  %556 = add nsw i32 %550, -1
  %557 = add nsw i64 %549, 3
  %558 = icmp sgt i32 %550, 1
  br i1 %558, label %548, label %559

559:                                              ; preds = %548, %533, %527
  %560 = add nuw nsw i64 %477, 1
  %561 = icmp eq i64 %560, 3
  br i1 %561, label %562, label %476

562:                                              ; preds = %559
  %563 = icmp eq i32 %482, 0
  br i1 %563, label %873, label %564

564:                                              ; preds = %562
  %565 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 1, i32 0, i64 %390, i32 9
  %566 = load i32, i32* %565, align 4, !tbaa !255
  %567 = sext i32 %566 to i64
  %568 = icmp slt i32 %566, 8
  br i1 %568, label %569, label %873

569:                                              ; preds = %564
  %570 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %33, i32 0, i64 %567
  %571 = load i16, i16* %570, align 2, !tbaa !29
  %572 = sext i16 %571 to i32
  br label %573

573:                                              ; preds = %670, %569
  %574 = phi i64 [ %567, %569 ], [ %672, %670 ]
  %575 = phi i32 [ %572, %569 ], [ %671, %670 ]
  %576 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %33, i32 1, i64 %574
  %577 = load i16, i16* %576, align 2, !tbaa !29
  %578 = sext i16 %577 to i32
  %579 = getelementptr inbounds [2 x [39 x i32]], [2 x [39 x i32]]* %4, i64 0, i64 1, i64 %574
  %580 = load i32, i32* %579, align 4, !tbaa !18
  %581 = icmp eq i32 %580, 7
  br i1 %581, label %665, label %582

582:                                              ; preds = %573
  %583 = sext i32 %580 to i64
  %584 = getelementptr inbounds double, double* %466, i64 %583
  %585 = load double, double* %584, align 8, !tbaa !27
  %586 = getelementptr inbounds double, double* %465, i64 %583
  %587 = load double, double* %586, align 8, !tbaa !27
  %588 = icmp sgt i16 %577, 0
  br i1 %588, label %589, label %670

589:                                              ; preds = %582
  %590 = sext i32 %575 to i64
  %591 = add nsw i32 %578, -1
  %592 = zext i32 %591 to i64
  %593 = add nuw nsw i64 %592, 1
  %594 = icmp eq i32 %591, 0
  br i1 %594, label %651, label %595

595:                                              ; preds = %589
  %596 = and i64 %593, 8589934590
  %597 = add nsw i64 %596, %590
  %598 = trunc i64 %596 to i32
  %599 = sub i32 %578, %598
  %600 = insertelement <2 x double> undef, double %585, i32 0
  %601 = shufflevector <2 x double> %600, <2 x double> undef, <2 x i32> zeroinitializer
  %602 = insertelement <2 x double> undef, double %587, i32 0
  %603 = shufflevector <2 x double> %602, <2 x double> undef, <2 x i32> zeroinitializer
  %604 = add nsw i64 %596, -2
  %605 = lshr exact i64 %604, 1
  %606 = add nuw i64 %605, 1
  %607 = and i64 %606, 1
  %608 = icmp eq i64 %604, 0
  br i1 %608, label %636, label %609

609:                                              ; preds = %595
  %610 = sub nuw i64 %606, %607
  br label %611

611:                                              ; preds = %611, %609
  %612 = phi i64 [ 0, %609 ], [ %633, %611 ]
  %613 = phi i64 [ %610, %609 ], [ %634, %611 ]
  %614 = add i64 %612, %590
  %615 = getelementptr inbounds [576 x double], [576 x double]* bitcast ([2 x [32 x [18 x double]]]* @do_layer3.hybridIn to [576 x double]*), i64 0, i64 %614
  %616 = bitcast double* %615 to <2 x double>*
  %617 = load <2 x double>, <2 x double>* %616, align 8, !tbaa !27
  %618 = fmul <2 x double> %601, %617
  %619 = bitcast double* %615 to <2 x double>*
  store <2 x double> %618, <2 x double>* %619, align 8, !tbaa !27
  %620 = fmul <2 x double> %603, %617
  %621 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %614
  %622 = bitcast double* %621 to <2 x double>*
  store <2 x double> %620, <2 x double>* %622, align 8, !tbaa !27
  %623 = or i64 %612, 2
  %624 = add i64 %623, %590
  %625 = getelementptr inbounds [576 x double], [576 x double]* bitcast ([2 x [32 x [18 x double]]]* @do_layer3.hybridIn to [576 x double]*), i64 0, i64 %624
  %626 = bitcast double* %625 to <2 x double>*
  %627 = load <2 x double>, <2 x double>* %626, align 8, !tbaa !27
  %628 = fmul <2 x double> %601, %627
  %629 = bitcast double* %625 to <2 x double>*
  store <2 x double> %628, <2 x double>* %629, align 8, !tbaa !27
  %630 = fmul <2 x double> %603, %627
  %631 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %624
  %632 = bitcast double* %631 to <2 x double>*
  store <2 x double> %630, <2 x double>* %632, align 8, !tbaa !27
  %633 = add i64 %612, 4
  %634 = add i64 %613, -2
  %635 = icmp eq i64 %634, 0
  br i1 %635, label %636, label %611, !llvm.loop !256

636:                                              ; preds = %611, %595
  %637 = phi i64 [ 0, %595 ], [ %633, %611 ]
  %638 = icmp eq i64 %607, 0
  br i1 %638, label %649, label %639

639:                                              ; preds = %636
  %640 = add i64 %637, %590
  %641 = getelementptr inbounds [576 x double], [576 x double]* bitcast ([2 x [32 x [18 x double]]]* @do_layer3.hybridIn to [576 x double]*), i64 0, i64 %640
  %642 = bitcast double* %641 to <2 x double>*
  %643 = load <2 x double>, <2 x double>* %642, align 8, !tbaa !27
  %644 = fmul <2 x double> %601, %643
  %645 = bitcast double* %641 to <2 x double>*
  store <2 x double> %644, <2 x double>* %645, align 8, !tbaa !27
  %646 = fmul <2 x double> %603, %643
  %647 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %640
  %648 = bitcast double* %647 to <2 x double>*
  store <2 x double> %646, <2 x double>* %648, align 8, !tbaa !27
  br label %649

649:                                              ; preds = %639, %636
  %650 = icmp eq i64 %593, %596
  br i1 %650, label %667, label %651

651:                                              ; preds = %649, %589
  %652 = phi i64 [ %590, %589 ], [ %597, %649 ]
  %653 = phi i32 [ %578, %589 ], [ %599, %649 ]
  br label %654

654:                                              ; preds = %654, %651
  %655 = phi i64 [ %663, %654 ], [ %652, %651 ]
  %656 = phi i32 [ %662, %654 ], [ %653, %651 ]
  %657 = getelementptr inbounds [576 x double], [576 x double]* bitcast ([2 x [32 x [18 x double]]]* @do_layer3.hybridIn to [576 x double]*), i64 0, i64 %655
  %658 = load double, double* %657, align 8, !tbaa !27
  %659 = fmul double %585, %658
  store double %659, double* %657, align 8, !tbaa !27
  %660 = fmul double %587, %658
  %661 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %655
  store double %660, double* %661, align 8, !tbaa !27
  %662 = add nsw i32 %656, -1
  %663 = add nsw i64 %655, 1
  %664 = icmp sgt i32 %656, 1
  br i1 %664, label %654, label %667, !llvm.loop !257

665:                                              ; preds = %573
  %666 = add nsw i32 %575, %578
  br label %670

667:                                              ; preds = %654, %649
  %668 = phi i64 [ %597, %649 ], [ %663, %654 ]
  %669 = trunc i64 %668 to i32
  br label %670

670:                                              ; preds = %667, %665, %582
  %671 = phi i32 [ %666, %665 ], [ %575, %582 ], [ %669, %667 ]
  %672 = add nsw i64 %574, 1
  %673 = icmp slt i64 %574, 7
  br i1 %673, label %573, label %873

674:                                              ; preds = %464
  %675 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 1, i32 0, i64 %390, i32 9
  %676 = load i32, i32* %675, align 4, !tbaa !255
  %677 = sext i32 %676 to i64
  %678 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %33, i32 0, i64 %677
  %679 = load i16, i16* %678, align 2, !tbaa !29
  %680 = sext i16 %679 to i32
  %681 = icmp slt i32 %676, 21
  br i1 %681, label %682, label %784

682:                                              ; preds = %780, %674
  %683 = phi i64 [ %782, %780 ], [ %677, %674 ]
  %684 = phi i32 [ %781, %780 ], [ %680, %674 ]
  %685 = getelementptr inbounds [9 x %struct.bandInfoStruct], [9 x %struct.bandInfoStruct]* @bandInfo, i64 0, i64 %33, i32 1, i64 %683
  %686 = load i16, i16* %685, align 2, !tbaa !29
  %687 = sext i16 %686 to i32
  %688 = getelementptr inbounds [2 x [39 x i32]], [2 x [39 x i32]]* %4, i64 0, i64 1, i64 %683
  %689 = load i32, i32* %688, align 4, !tbaa !18
  %690 = icmp eq i32 %689, 7
  br i1 %690, label %775, label %691

691:                                              ; preds = %682
  %692 = sext i32 %689 to i64
  %693 = getelementptr inbounds double, double* %466, i64 %692
  %694 = load double, double* %693, align 8, !tbaa !27
  %695 = getelementptr inbounds double, double* %465, i64 %692
  %696 = load double, double* %695, align 8, !tbaa !27
  %697 = icmp sgt i16 %686, 0
  br i1 %697, label %698, label %780

698:                                              ; preds = %691
  %699 = sext i32 %684 to i64
  %700 = sext i16 %686 to i64
  %701 = add nsw i64 %700, 4294967295
  %702 = and i64 %701, 4294967295
  %703 = add nuw nsw i64 %702, 1
  %704 = icmp eq i64 %702, 0
  br i1 %704, label %761, label %705

705:                                              ; preds = %698
  %706 = and i64 %703, 8589934590
  %707 = add nsw i64 %706, %699
  %708 = trunc i64 %706 to i32
  %709 = sub i32 %687, %708
  %710 = insertelement <2 x double> undef, double %694, i32 0
  %711 = shufflevector <2 x double> %710, <2 x double> undef, <2 x i32> zeroinitializer
  %712 = insertelement <2 x double> undef, double %696, i32 0
  %713 = shufflevector <2 x double> %712, <2 x double> undef, <2 x i32> zeroinitializer
  %714 = add nsw i64 %706, -2
  %715 = lshr exact i64 %714, 1
  %716 = add nuw i64 %715, 1
  %717 = and i64 %716, 1
  %718 = icmp eq i64 %714, 0
  br i1 %718, label %746, label %719

719:                                              ; preds = %705
  %720 = sub nuw i64 %716, %717
  br label %721

721:                                              ; preds = %721, %719
  %722 = phi i64 [ 0, %719 ], [ %743, %721 ]
  %723 = phi i64 [ %720, %719 ], [ %744, %721 ]
  %724 = add i64 %722, %699
  %725 = getelementptr inbounds [576 x double], [576 x double]* bitcast ([2 x [32 x [18 x double]]]* @do_layer3.hybridIn to [576 x double]*), i64 0, i64 %724
  %726 = bitcast double* %725 to <2 x double>*
  %727 = load <2 x double>, <2 x double>* %726, align 8, !tbaa !27
  %728 = fmul <2 x double> %711, %727
  %729 = bitcast double* %725 to <2 x double>*
  store <2 x double> %728, <2 x double>* %729, align 8, !tbaa !27
  %730 = fmul <2 x double> %713, %727
  %731 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %724
  %732 = bitcast double* %731 to <2 x double>*
  store <2 x double> %730, <2 x double>* %732, align 8, !tbaa !27
  %733 = or i64 %722, 2
  %734 = add i64 %733, %699
  %735 = getelementptr inbounds [576 x double], [576 x double]* bitcast ([2 x [32 x [18 x double]]]* @do_layer3.hybridIn to [576 x double]*), i64 0, i64 %734
  %736 = bitcast double* %735 to <2 x double>*
  %737 = load <2 x double>, <2 x double>* %736, align 8, !tbaa !27
  %738 = fmul <2 x double> %711, %737
  %739 = bitcast double* %735 to <2 x double>*
  store <2 x double> %738, <2 x double>* %739, align 8, !tbaa !27
  %740 = fmul <2 x double> %713, %737
  %741 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %734
  %742 = bitcast double* %741 to <2 x double>*
  store <2 x double> %740, <2 x double>* %742, align 8, !tbaa !27
  %743 = add i64 %722, 4
  %744 = add i64 %723, -2
  %745 = icmp eq i64 %744, 0
  br i1 %745, label %746, label %721, !llvm.loop !258

746:                                              ; preds = %721, %705
  %747 = phi i64 [ 0, %705 ], [ %743, %721 ]
  %748 = icmp eq i64 %717, 0
  br i1 %748, label %759, label %749

749:                                              ; preds = %746
  %750 = add i64 %747, %699
  %751 = getelementptr inbounds [576 x double], [576 x double]* bitcast ([2 x [32 x [18 x double]]]* @do_layer3.hybridIn to [576 x double]*), i64 0, i64 %750
  %752 = bitcast double* %751 to <2 x double>*
  %753 = load <2 x double>, <2 x double>* %752, align 8, !tbaa !27
  %754 = fmul <2 x double> %711, %753
  %755 = bitcast double* %751 to <2 x double>*
  store <2 x double> %754, <2 x double>* %755, align 8, !tbaa !27
  %756 = fmul <2 x double> %713, %753
  %757 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %750
  %758 = bitcast double* %757 to <2 x double>*
  store <2 x double> %756, <2 x double>* %758, align 8, !tbaa !27
  br label %759

759:                                              ; preds = %749, %746
  %760 = icmp eq i64 %703, %706
  br i1 %760, label %777, label %761

761:                                              ; preds = %759, %698
  %762 = phi i64 [ %699, %698 ], [ %707, %759 ]
  %763 = phi i32 [ %687, %698 ], [ %709, %759 ]
  br label %764

764:                                              ; preds = %764, %761
  %765 = phi i64 [ %773, %764 ], [ %762, %761 ]
  %766 = phi i32 [ %772, %764 ], [ %763, %761 ]
  %767 = getelementptr inbounds [576 x double], [576 x double]* bitcast ([2 x [32 x [18 x double]]]* @do_layer3.hybridIn to [576 x double]*), i64 0, i64 %765
  %768 = load double, double* %767, align 8, !tbaa !27
  %769 = fmul double %694, %768
  store double %769, double* %767, align 8, !tbaa !27
  %770 = fmul double %696, %768
  %771 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %765
  store double %770, double* %771, align 8, !tbaa !27
  %772 = add nsw i32 %766, -1
  %773 = add nsw i64 %765, 1
  %774 = icmp sgt i32 %766, 1
  br i1 %774, label %764, label %777, !llvm.loop !259

775:                                              ; preds = %682
  %776 = add nsw i32 %684, %687
  br label %780

777:                                              ; preds = %764, %759
  %778 = phi i64 [ %707, %759 ], [ %773, %764 ]
  %779 = trunc i64 %778 to i32
  br label %780

780:                                              ; preds = %777, %775, %691
  %781 = phi i32 [ %776, %775 ], [ %684, %691 ], [ %779, %777 ]
  %782 = add nsw i64 %683, 1
  %783 = icmp slt i64 %683, 20
  br i1 %783, label %682, label %784

784:                                              ; preds = %780, %674
  %785 = phi i32 [ %680, %674 ], [ %781, %780 ]
  %786 = load i32, i32* %379, align 4, !tbaa !18
  %787 = icmp eq i32 %786, 7
  br i1 %787, label %873, label %788

788:                                              ; preds = %784
  %789 = sext i32 %786 to i64
  %790 = getelementptr inbounds double, double* %466, i64 %789
  %791 = load double, double* %790, align 8, !tbaa !27
  %792 = getelementptr inbounds double, double* %465, i64 %789
  %793 = load double, double* %792, align 8, !tbaa !27
  %794 = load i16, i16* %380, align 2, !tbaa !29
  %795 = icmp sgt i16 %794, 0
  br i1 %795, label %796, label %873

796:                                              ; preds = %788
  %797 = zext i16 %794 to i32
  %798 = sext i32 %785 to i64
  %799 = add nsw i32 %797, -1
  %800 = zext i32 %799 to i64
  %801 = add nuw nsw i64 %800, 1
  %802 = icmp eq i32 %799, 0
  br i1 %802, label %859, label %803

803:                                              ; preds = %796
  %804 = and i64 %801, 8589934590
  %805 = add nsw i64 %804, %798
  %806 = trunc i64 %804 to i32
  %807 = sub i32 %797, %806
  %808 = insertelement <2 x double> undef, double %791, i32 0
  %809 = shufflevector <2 x double> %808, <2 x double> undef, <2 x i32> zeroinitializer
  %810 = insertelement <2 x double> undef, double %793, i32 0
  %811 = shufflevector <2 x double> %810, <2 x double> undef, <2 x i32> zeroinitializer
  %812 = add nsw i64 %804, -2
  %813 = lshr exact i64 %812, 1
  %814 = add nuw i64 %813, 1
  %815 = and i64 %814, 1
  %816 = icmp eq i64 %812, 0
  br i1 %816, label %844, label %817

817:                                              ; preds = %803
  %818 = sub nuw i64 %814, %815
  br label %819

819:                                              ; preds = %819, %817
  %820 = phi i64 [ 0, %817 ], [ %841, %819 ]
  %821 = phi i64 [ %818, %817 ], [ %842, %819 ]
  %822 = add i64 %820, %798
  %823 = getelementptr inbounds [576 x double], [576 x double]* bitcast ([2 x [32 x [18 x double]]]* @do_layer3.hybridIn to [576 x double]*), i64 0, i64 %822
  %824 = bitcast double* %823 to <2 x double>*
  %825 = load <2 x double>, <2 x double>* %824, align 8, !tbaa !27
  %826 = fmul <2 x double> %809, %825
  %827 = bitcast double* %823 to <2 x double>*
  store <2 x double> %826, <2 x double>* %827, align 8, !tbaa !27
  %828 = fmul <2 x double> %811, %825
  %829 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %822
  %830 = bitcast double* %829 to <2 x double>*
  store <2 x double> %828, <2 x double>* %830, align 8, !tbaa !27
  %831 = or i64 %820, 2
  %832 = add i64 %831, %798
  %833 = getelementptr inbounds [576 x double], [576 x double]* bitcast ([2 x [32 x [18 x double]]]* @do_layer3.hybridIn to [576 x double]*), i64 0, i64 %832
  %834 = bitcast double* %833 to <2 x double>*
  %835 = load <2 x double>, <2 x double>* %834, align 8, !tbaa !27
  %836 = fmul <2 x double> %809, %835
  %837 = bitcast double* %833 to <2 x double>*
  store <2 x double> %836, <2 x double>* %837, align 8, !tbaa !27
  %838 = fmul <2 x double> %811, %835
  %839 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %832
  %840 = bitcast double* %839 to <2 x double>*
  store <2 x double> %838, <2 x double>* %840, align 8, !tbaa !27
  %841 = add i64 %820, 4
  %842 = add i64 %821, -2
  %843 = icmp eq i64 %842, 0
  br i1 %843, label %844, label %819, !llvm.loop !260

844:                                              ; preds = %819, %803
  %845 = phi i64 [ 0, %803 ], [ %841, %819 ]
  %846 = icmp eq i64 %815, 0
  br i1 %846, label %857, label %847

847:                                              ; preds = %844
  %848 = add i64 %845, %798
  %849 = getelementptr inbounds [576 x double], [576 x double]* bitcast ([2 x [32 x [18 x double]]]* @do_layer3.hybridIn to [576 x double]*), i64 0, i64 %848
  %850 = bitcast double* %849 to <2 x double>*
  %851 = load <2 x double>, <2 x double>* %850, align 8, !tbaa !27
  %852 = fmul <2 x double> %809, %851
  %853 = bitcast double* %849 to <2 x double>*
  store <2 x double> %852, <2 x double>* %853, align 8, !tbaa !27
  %854 = fmul <2 x double> %811, %851
  %855 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %848
  %856 = bitcast double* %855 to <2 x double>*
  store <2 x double> %854, <2 x double>* %856, align 8, !tbaa !27
  br label %857

857:                                              ; preds = %847, %844
  %858 = icmp eq i64 %801, %804
  br i1 %858, label %873, label %859

859:                                              ; preds = %857, %796
  %860 = phi i64 [ %798, %796 ], [ %805, %857 ]
  %861 = phi i32 [ %797, %796 ], [ %807, %857 ]
  br label %862

862:                                              ; preds = %862, %859
  %863 = phi i64 [ %871, %862 ], [ %860, %859 ]
  %864 = phi i32 [ %870, %862 ], [ %861, %859 ]
  %865 = getelementptr inbounds [576 x double], [576 x double]* bitcast ([2 x [32 x [18 x double]]]* @do_layer3.hybridIn to [576 x double]*), i64 0, i64 %863
  %866 = load double, double* %865, align 8, !tbaa !27
  %867 = fmul double %791, %866
  store double %867, double* %865, align 8, !tbaa !27
  %868 = fmul double %793, %866
  %869 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %863
  store double %868, double* %869, align 8, !tbaa !27
  %870 = add nsw i32 %864, -1
  %871 = add nsw i64 %863, 1
  %872 = icmp sgt i32 %864, 1
  br i1 %872, label %862, label %873, !llvm.loop !261

873:                                              ; preds = %862, %857, %788, %784, %670, %564, %562, %453
  br i1 %385, label %874, label %882

874:                                              ; preds = %873
  %875 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 1, i32 0, i64 %390, i32 10
  %876 = load i32, i32* %875, align 8, !tbaa !262
  %877 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 0, i32 0, i64 %390, i32 10
  %878 = load i32, i32* %877, align 8, !tbaa !262
  %879 = icmp ugt i32 %876, %878
  br i1 %879, label %880, label %881

880:                                              ; preds = %874
  store i32 %876, i32* %877, align 8, !tbaa !262
  br label %882

881:                                              ; preds = %874
  store i32 %878, i32* %875, align 8, !tbaa !262
  br label %882

882:                                              ; preds = %881, %880, %873
  switch i32 %17, label %1088 [
    i32 3, label %979
    i32 1, label %883
  ]

883:                                              ; preds = %882
  %884 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 1, i32 0, i64 %390, i32 10
  %885 = load i32, i32* %884, align 8, !tbaa !262
  %886 = mul i32 %885, 18
  %887 = icmp eq i32 %886, 0
  br i1 %887, label %1088, label %888

888:                                              ; preds = %883
  %889 = add i32 %886, -2
  %890 = zext i32 %889 to i64
  %891 = add nuw nsw i64 %890, 2
  %892 = icmp eq i32 %889, 0
  br i1 %892, label %893, label %897

893:                                              ; preds = %977, %888
  %894 = phi double* [ getelementptr inbounds ([2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 0), %888 ], [ %899, %977 ]
  %895 = phi double* [ getelementptr inbounds ([2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 0, i64 0, i64 0), %888 ], [ %900, %977 ]
  %896 = phi i32 [ 0, %888 ], [ %901, %977 ]
  br label %1077

897:                                              ; preds = %888
  %898 = and i64 %891, 8589934588
  %899 = getelementptr [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %898
  %900 = getelementptr [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 0, i64 0, i64 %898
  %901 = trunc i64 %898 to i32
  %902 = add nsw i64 %898, -4
  %903 = lshr exact i64 %902, 2
  %904 = add nuw nsw i64 %903, 1
  %905 = and i64 %904, 3
  %906 = icmp ult i64 %902, 12
  br i1 %906, label %958, label %907

907:                                              ; preds = %897
  %908 = sub nsw i64 %904, %905
  br label %909

909:                                              ; preds = %909, %907
  %910 = phi i64 [ 0, %907 ], [ %955, %909 ]
  %911 = phi i64 [ %908, %907 ], [ %956, %909 ]
  %912 = getelementptr [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %910
  %913 = getelementptr [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 0, i64 0, i64 %910
  %914 = bitcast double* %912 to <2 x i64>*
  %915 = load <2 x i64>, <2 x i64>* %914, align 16, !tbaa !27
  %916 = getelementptr double, double* %912, i64 2
  %917 = bitcast double* %916 to <2 x i64>*
  %918 = load <2 x i64>, <2 x i64>* %917, align 16, !tbaa !27
  %919 = bitcast double* %913 to <2 x i64>*
  store <2 x i64> %915, <2 x i64>* %919, align 16, !tbaa !27
  %920 = getelementptr double, double* %913, i64 2
  %921 = bitcast double* %920 to <2 x i64>*
  store <2 x i64> %918, <2 x i64>* %921, align 16, !tbaa !27
  %922 = or i64 %910, 4
  %923 = getelementptr [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %922
  %924 = getelementptr [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 0, i64 0, i64 %922
  %925 = bitcast double* %923 to <2 x i64>*
  %926 = load <2 x i64>, <2 x i64>* %925, align 16, !tbaa !27
  %927 = getelementptr double, double* %923, i64 2
  %928 = bitcast double* %927 to <2 x i64>*
  %929 = load <2 x i64>, <2 x i64>* %928, align 16, !tbaa !27
  %930 = bitcast double* %924 to <2 x i64>*
  store <2 x i64> %926, <2 x i64>* %930, align 16, !tbaa !27
  %931 = getelementptr double, double* %924, i64 2
  %932 = bitcast double* %931 to <2 x i64>*
  store <2 x i64> %929, <2 x i64>* %932, align 16, !tbaa !27
  %933 = or i64 %910, 8
  %934 = getelementptr [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %933
  %935 = getelementptr [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 0, i64 0, i64 %933
  %936 = bitcast double* %934 to <2 x i64>*
  %937 = load <2 x i64>, <2 x i64>* %936, align 16, !tbaa !27
  %938 = getelementptr double, double* %934, i64 2
  %939 = bitcast double* %938 to <2 x i64>*
  %940 = load <2 x i64>, <2 x i64>* %939, align 16, !tbaa !27
  %941 = bitcast double* %935 to <2 x i64>*
  store <2 x i64> %937, <2 x i64>* %941, align 16, !tbaa !27
  %942 = getelementptr double, double* %935, i64 2
  %943 = bitcast double* %942 to <2 x i64>*
  store <2 x i64> %940, <2 x i64>* %943, align 16, !tbaa !27
  %944 = or i64 %910, 12
  %945 = getelementptr [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %944
  %946 = getelementptr [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 0, i64 0, i64 %944
  %947 = bitcast double* %945 to <2 x i64>*
  %948 = load <2 x i64>, <2 x i64>* %947, align 16, !tbaa !27
  %949 = getelementptr double, double* %945, i64 2
  %950 = bitcast double* %949 to <2 x i64>*
  %951 = load <2 x i64>, <2 x i64>* %950, align 16, !tbaa !27
  %952 = bitcast double* %946 to <2 x i64>*
  store <2 x i64> %948, <2 x i64>* %952, align 16, !tbaa !27
  %953 = getelementptr double, double* %946, i64 2
  %954 = bitcast double* %953 to <2 x i64>*
  store <2 x i64> %951, <2 x i64>* %954, align 16, !tbaa !27
  %955 = add i64 %910, 16
  %956 = add i64 %911, -4
  %957 = icmp eq i64 %956, 0
  br i1 %957, label %958, label %909, !llvm.loop !263

958:                                              ; preds = %909, %897
  %959 = phi i64 [ 0, %897 ], [ %955, %909 ]
  %960 = icmp eq i64 %905, 0
  br i1 %960, label %977, label %961

961:                                              ; preds = %961, %958
  %962 = phi i64 [ %974, %961 ], [ %959, %958 ]
  %963 = phi i64 [ %975, %961 ], [ %905, %958 ]
  %964 = getelementptr [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %962
  %965 = getelementptr [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 0, i64 0, i64 %962
  %966 = bitcast double* %964 to <2 x i64>*
  %967 = load <2 x i64>, <2 x i64>* %966, align 16, !tbaa !27
  %968 = getelementptr double, double* %964, i64 2
  %969 = bitcast double* %968 to <2 x i64>*
  %970 = load <2 x i64>, <2 x i64>* %969, align 16, !tbaa !27
  %971 = bitcast double* %965 to <2 x i64>*
  store <2 x i64> %967, <2 x i64>* %971, align 16, !tbaa !27
  %972 = getelementptr double, double* %965, i64 2
  %973 = bitcast double* %972 to <2 x i64>*
  store <2 x i64> %970, <2 x i64>* %973, align 16, !tbaa !27
  %974 = add i64 %962, 4
  %975 = add i64 %963, -1
  %976 = icmp eq i64 %975, 0
  br i1 %976, label %977, label %961, !llvm.loop !264

977:                                              ; preds = %961, %958
  %978 = icmp eq i64 %891, %898
  br i1 %978, label %1088, label %893

979:                                              ; preds = %882
  %980 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 1, i32 0, i64 %390, i32 10
  %981 = load i32, i32* %980, align 8, !tbaa !262
  %982 = mul i32 %981, 18
  %983 = icmp eq i32 %982, 0
  br i1 %983, label %1088, label %984

984:                                              ; preds = %979
  %985 = add i32 %982, -2
  %986 = zext i32 %985 to i64
  %987 = add nuw nsw i64 %986, 2
  %988 = icmp eq i32 %985, 0
  br i1 %988, label %1062, label %989

989:                                              ; preds = %984
  %990 = and i64 %987, 8589934588
  %991 = getelementptr [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %990
  %992 = getelementptr [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 0, i64 0, i64 %990
  %993 = trunc i64 %990 to i32
  %994 = add nsw i64 %990, -4
  %995 = lshr exact i64 %994, 2
  %996 = add nuw nsw i64 %995, 1
  %997 = and i64 %996, 1
  %998 = icmp eq i64 %994, 0
  br i1 %998, label %1040, label %999

999:                                              ; preds = %989
  %1000 = sub nuw nsw i64 %996, %997
  br label %1001

1001:                                             ; preds = %1001, %999
  %1002 = phi i64 [ 0, %999 ], [ %1037, %1001 ]
  %1003 = phi i64 [ %1000, %999 ], [ %1038, %1001 ]
  %1004 = getelementptr [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %1002
  %1005 = getelementptr [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 0, i64 0, i64 %1002
  %1006 = bitcast double* %1005 to <2 x double>*
  %1007 = load <2 x double>, <2 x double>* %1006, align 16, !tbaa !27
  %1008 = getelementptr double, double* %1005, i64 2
  %1009 = bitcast double* %1008 to <2 x double>*
  %1010 = load <2 x double>, <2 x double>* %1009, align 16, !tbaa !27
  %1011 = bitcast double* %1004 to <2 x double>*
  %1012 = load <2 x double>, <2 x double>* %1011, align 16, !tbaa !27
  %1013 = getelementptr double, double* %1004, i64 2
  %1014 = bitcast double* %1013 to <2 x double>*
  %1015 = load <2 x double>, <2 x double>* %1014, align 16, !tbaa !27
  %1016 = fadd <2 x double> %1007, %1012
  %1017 = fadd <2 x double> %1010, %1015
  %1018 = bitcast double* %1005 to <2 x double>*
  store <2 x double> %1016, <2 x double>* %1018, align 16, !tbaa !27
  %1019 = bitcast double* %1008 to <2 x double>*
  store <2 x double> %1017, <2 x double>* %1019, align 16, !tbaa !27
  %1020 = or i64 %1002, 4
  %1021 = getelementptr [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %1020
  %1022 = getelementptr [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 0, i64 0, i64 %1020
  %1023 = bitcast double* %1022 to <2 x double>*
  %1024 = load <2 x double>, <2 x double>* %1023, align 16, !tbaa !27
  %1025 = getelementptr double, double* %1022, i64 2
  %1026 = bitcast double* %1025 to <2 x double>*
  %1027 = load <2 x double>, <2 x double>* %1026, align 16, !tbaa !27
  %1028 = bitcast double* %1021 to <2 x double>*
  %1029 = load <2 x double>, <2 x double>* %1028, align 16, !tbaa !27
  %1030 = getelementptr double, double* %1021, i64 2
  %1031 = bitcast double* %1030 to <2 x double>*
  %1032 = load <2 x double>, <2 x double>* %1031, align 16, !tbaa !27
  %1033 = fadd <2 x double> %1024, %1029
  %1034 = fadd <2 x double> %1027, %1032
  %1035 = bitcast double* %1022 to <2 x double>*
  store <2 x double> %1033, <2 x double>* %1035, align 16, !tbaa !27
  %1036 = bitcast double* %1025 to <2 x double>*
  store <2 x double> %1034, <2 x double>* %1036, align 16, !tbaa !27
  %1037 = add i64 %1002, 8
  %1038 = add i64 %1003, -2
  %1039 = icmp eq i64 %1038, 0
  br i1 %1039, label %1040, label %1001, !llvm.loop !265

1040:                                             ; preds = %1001, %989
  %1041 = phi i64 [ 0, %989 ], [ %1037, %1001 ]
  %1042 = icmp eq i64 %997, 0
  br i1 %1042, label %1060, label %1043

1043:                                             ; preds = %1040
  %1044 = getelementptr [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 %1041
  %1045 = getelementptr [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 0, i64 0, i64 %1041
  %1046 = bitcast double* %1045 to <2 x double>*
  %1047 = load <2 x double>, <2 x double>* %1046, align 16, !tbaa !27
  %1048 = getelementptr double, double* %1045, i64 2
  %1049 = bitcast double* %1048 to <2 x double>*
  %1050 = load <2 x double>, <2 x double>* %1049, align 16, !tbaa !27
  %1051 = bitcast double* %1044 to <2 x double>*
  %1052 = load <2 x double>, <2 x double>* %1051, align 16, !tbaa !27
  %1053 = getelementptr double, double* %1044, i64 2
  %1054 = bitcast double* %1053 to <2 x double>*
  %1055 = load <2 x double>, <2 x double>* %1054, align 16, !tbaa !27
  %1056 = fadd <2 x double> %1047, %1052
  %1057 = fadd <2 x double> %1050, %1055
  %1058 = bitcast double* %1045 to <2 x double>*
  store <2 x double> %1056, <2 x double>* %1058, align 16, !tbaa !27
  %1059 = bitcast double* %1048 to <2 x double>*
  store <2 x double> %1057, <2 x double>* %1059, align 16, !tbaa !27
  br label %1060

1060:                                             ; preds = %1043, %1040
  %1061 = icmp eq i64 %987, %990
  br i1 %1061, label %1088, label %1062

1062:                                             ; preds = %1060, %984
  %1063 = phi double* [ getelementptr inbounds ([2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 1, i64 0, i64 0), %984 ], [ %991, %1060 ]
  %1064 = phi double* [ getelementptr inbounds ([2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 0, i64 0, i64 0), %984 ], [ %992, %1060 ]
  %1065 = phi i32 [ 0, %984 ], [ %993, %1060 ]
  br label %1066

1066:                                             ; preds = %1066, %1062
  %1067 = phi double* [ %1071, %1066 ], [ %1063, %1062 ]
  %1068 = phi double* [ %1075, %1066 ], [ %1064, %1062 ]
  %1069 = phi i32 [ %1074, %1066 ], [ %1065, %1062 ]
  %1070 = load double, double* %1068, align 8, !tbaa !27
  %1071 = getelementptr inbounds double, double* %1067, i64 1
  %1072 = load double, double* %1067, align 8, !tbaa !27
  %1073 = fadd double %1070, %1072
  store double %1073, double* %1068, align 8, !tbaa !27
  %1074 = add nuw nsw i32 %1069, 1
  %1075 = getelementptr inbounds double, double* %1068, i64 1
  %1076 = icmp ult i32 %1074, %982
  br i1 %1076, label %1066, label %1088, !llvm.loop !266

1077:                                             ; preds = %1077, %893
  %1078 = phi double* [ %1081, %1077 ], [ %894, %893 ]
  %1079 = phi double* [ %1084, %1077 ], [ %895, %893 ]
  %1080 = phi i32 [ %1086, %1077 ], [ %896, %893 ]
  %1081 = getelementptr inbounds double, double* %1078, i64 1
  %1082 = bitcast double* %1078 to i64*
  %1083 = load i64, i64* %1082, align 8, !tbaa !27
  %1084 = getelementptr inbounds double, double* %1079, i64 1
  %1085 = bitcast double* %1079 to i64*
  store i64 %1083, i64* %1085, align 8, !tbaa !27
  %1086 = add nuw nsw i32 %1080, 1
  %1087 = icmp ult i32 %1086, %886
  br i1 %1087, label %1077, label %1088, !llvm.loop !267

1088:                                             ; preds = %1077, %1066, %1060, %979, %977, %883, %882, %403
  br label %1089

1089:                                             ; preds = %1451, %1088
  %1090 = phi i64 [ %1452, %1451 ], [ 0, %1088 ]
  %1091 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %1090, i32 0, i64 %390, i32 4
  %1092 = load i32, i32* %1091, align 8, !tbaa !248
  %1093 = icmp eq i32 %1092, 2
  br i1 %1093, label %1094, label %1098

1094:                                             ; preds = %1089
  %1095 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %1090, i32 0, i64 %390, i32 5
  %1096 = load i32, i32* %1095, align 4, !tbaa !249
  %1097 = icmp eq i32 %1096, 0
  br i1 %1097, label %1247, label %1103

1098:                                             ; preds = %1089
  %1099 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %1090, i32 0, i64 %390, i32 10
  %1100 = load i32, i32* %1099, align 8, !tbaa !262
  %1101 = add i32 %1100, -1
  %1102 = icmp eq i32 %1101, 0
  br i1 %1102, label %1247, label %1103

1103:                                             ; preds = %1098, %1094
  %1104 = phi i32 [ %1101, %1098 ], [ 1, %1094 ]
  %1105 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 %1090, i64 1, i64 0
  br label %1106

1106:                                             ; preds = %1106, %1103
  %1107 = phi double* [ %1245, %1106 ], [ %1105, %1103 ]
  %1108 = phi i32 [ %1244, %1106 ], [ %1104, %1103 ]
  %1109 = getelementptr inbounds double, double* %1107, i64 -1
  %1110 = load double, double* @aa_cs.0, align 16, !tbaa !27
  %1111 = getelementptr inbounds double, double* %1107, i64 -2
  %1112 = bitcast double* %1111 to <2 x double>*
  %1113 = load <2 x double>, <2 x double>* %1112, align 8, !tbaa !27
  %1114 = shufflevector <2 x double> %1113, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %1115 = extractelement <2 x double> %1113, i32 1
  %1116 = fmul double %1115, %1110
  %1117 = load double, double* @aa_ca.0, align 16, !tbaa !27
  %1118 = bitcast double* %1107 to <2 x double>*
  %1119 = load <2 x double>, <2 x double>* %1118, align 8, !tbaa !27
  %1120 = extractelement <2 x double> %1119, i32 0
  %1121 = fmul double %1120, %1117
  %1122 = fsub double %1116, %1121
  store double %1122, double* %1109, align 8, !tbaa !27
  %1123 = load double, double* @aa_cs.0, align 16, !tbaa !27
  %1124 = load double, double* @aa_ca.0, align 16, !tbaa !27
  %1125 = load double, double* @aa_cs.1, align 16, !tbaa !27
  %1126 = extractelement <2 x double> %1113, i32 0
  %1127 = fmul double %1126, %1125
  %1128 = load double, double* @aa_ca.1, align 16, !tbaa !27
  %1129 = extractelement <2 x double> %1119, i32 1
  %1130 = fmul double %1129, %1128
  %1131 = fsub double %1127, %1130
  store double %1131, double* %1111, align 8, !tbaa !27
  %1132 = load double, double* @aa_cs.1, align 16, !tbaa !27
  %1133 = insertelement <2 x double> undef, double %1123, i32 0
  %1134 = insertelement <2 x double> %1133, double %1132, i32 1
  %1135 = fmul <2 x double> %1119, %1134
  %1136 = load double, double* @aa_ca.1, align 16, !tbaa !27
  %1137 = insertelement <2 x double> undef, double %1124, i32 0
  %1138 = insertelement <2 x double> %1137, double %1136, i32 1
  %1139 = fmul <2 x double> %1114, %1138
  %1140 = fadd <2 x double> %1135, %1139
  %1141 = getelementptr inbounds double, double* %1107, i64 2
  %1142 = bitcast double* %1107 to <2 x double>*
  store <2 x double> %1140, <2 x double>* %1142, align 8, !tbaa !27
  %1143 = getelementptr inbounds double, double* %1107, i64 -3
  %1144 = load double, double* @aa_cs.2, align 16, !tbaa !27
  %1145 = getelementptr inbounds double, double* %1107, i64 -4
  %1146 = bitcast double* %1145 to <2 x double>*
  %1147 = load <2 x double>, <2 x double>* %1146, align 8, !tbaa !27
  %1148 = shufflevector <2 x double> %1147, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %1149 = extractelement <2 x double> %1147, i32 1
  %1150 = fmul double %1149, %1144
  %1151 = load double, double* @aa_ca.2, align 16, !tbaa !27
  %1152 = bitcast double* %1141 to <2 x double>*
  %1153 = load <2 x double>, <2 x double>* %1152, align 8, !tbaa !27
  %1154 = extractelement <2 x double> %1153, i32 0
  %1155 = fmul double %1154, %1151
  %1156 = fsub double %1150, %1155
  store double %1156, double* %1143, align 8, !tbaa !27
  %1157 = load double, double* @aa_cs.2, align 16, !tbaa !27
  %1158 = load double, double* @aa_ca.2, align 16, !tbaa !27
  %1159 = load double, double* @aa_cs.3, align 16, !tbaa !27
  %1160 = extractelement <2 x double> %1147, i32 0
  %1161 = fmul double %1160, %1159
  %1162 = load double, double* @aa_ca.3, align 16, !tbaa !27
  %1163 = extractelement <2 x double> %1153, i32 1
  %1164 = fmul double %1163, %1162
  %1165 = fsub double %1161, %1164
  store double %1165, double* %1145, align 8, !tbaa !27
  %1166 = load double, double* @aa_cs.3, align 16, !tbaa !27
  %1167 = insertelement <2 x double> undef, double %1157, i32 0
  %1168 = insertelement <2 x double> %1167, double %1166, i32 1
  %1169 = fmul <2 x double> %1153, %1168
  %1170 = load double, double* @aa_ca.3, align 16, !tbaa !27
  %1171 = insertelement <2 x double> undef, double %1158, i32 0
  %1172 = insertelement <2 x double> %1171, double %1170, i32 1
  %1173 = fmul <2 x double> %1148, %1172
  %1174 = fadd <2 x double> %1169, %1173
  %1175 = getelementptr inbounds double, double* %1107, i64 4
  %1176 = bitcast double* %1141 to <2 x double>*
  store <2 x double> %1174, <2 x double>* %1176, align 8, !tbaa !27
  %1177 = getelementptr inbounds double, double* %1107, i64 -5
  %1178 = load double, double* @aa_cs.4, align 16, !tbaa !27
  %1179 = getelementptr inbounds double, double* %1107, i64 -6
  %1180 = bitcast double* %1179 to <2 x double>*
  %1181 = load <2 x double>, <2 x double>* %1180, align 8, !tbaa !27
  %1182 = shufflevector <2 x double> %1181, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %1183 = extractelement <2 x double> %1181, i32 1
  %1184 = fmul double %1183, %1178
  %1185 = load double, double* @aa_ca.4, align 16, !tbaa !27
  %1186 = bitcast double* %1175 to <2 x double>*
  %1187 = load <2 x double>, <2 x double>* %1186, align 8, !tbaa !27
  %1188 = extractelement <2 x double> %1187, i32 0
  %1189 = fmul double %1188, %1185
  %1190 = fsub double %1184, %1189
  store double %1190, double* %1177, align 8, !tbaa !27
  %1191 = load double, double* @aa_cs.4, align 16, !tbaa !27
  %1192 = load double, double* @aa_ca.4, align 16, !tbaa !27
  %1193 = load double, double* @aa_cs.5, align 16, !tbaa !27
  %1194 = extractelement <2 x double> %1181, i32 0
  %1195 = fmul double %1194, %1193
  %1196 = load double, double* @aa_ca.5, align 16, !tbaa !27
  %1197 = extractelement <2 x double> %1187, i32 1
  %1198 = fmul double %1197, %1196
  %1199 = fsub double %1195, %1198
  store double %1199, double* %1179, align 8, !tbaa !27
  %1200 = load double, double* @aa_cs.5, align 16, !tbaa !27
  %1201 = insertelement <2 x double> undef, double %1191, i32 0
  %1202 = insertelement <2 x double> %1201, double %1200, i32 1
  %1203 = fmul <2 x double> %1187, %1202
  %1204 = load double, double* @aa_ca.5, align 16, !tbaa !27
  %1205 = insertelement <2 x double> undef, double %1192, i32 0
  %1206 = insertelement <2 x double> %1205, double %1204, i32 1
  %1207 = fmul <2 x double> %1182, %1206
  %1208 = fadd <2 x double> %1203, %1207
  %1209 = getelementptr inbounds double, double* %1107, i64 6
  %1210 = bitcast double* %1175 to <2 x double>*
  store <2 x double> %1208, <2 x double>* %1210, align 8, !tbaa !27
  %1211 = getelementptr inbounds double, double* %1107, i64 -7
  %1212 = load double, double* @aa_cs.6, align 16, !tbaa !27
  %1213 = getelementptr inbounds double, double* %1107, i64 -8
  %1214 = bitcast double* %1213 to <2 x double>*
  %1215 = load <2 x double>, <2 x double>* %1214, align 8, !tbaa !27
  %1216 = shufflevector <2 x double> %1215, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %1217 = extractelement <2 x double> %1215, i32 1
  %1218 = fmul double %1217, %1212
  %1219 = load double, double* @aa_ca.6, align 16, !tbaa !27
  %1220 = bitcast double* %1209 to <2 x double>*
  %1221 = load <2 x double>, <2 x double>* %1220, align 8, !tbaa !27
  %1222 = extractelement <2 x double> %1221, i32 0
  %1223 = fmul double %1222, %1219
  %1224 = fsub double %1218, %1223
  store double %1224, double* %1211, align 8, !tbaa !27
  %1225 = load double, double* @aa_cs.6, align 16, !tbaa !27
  %1226 = load double, double* @aa_ca.6, align 16, !tbaa !27
  %1227 = load double, double* @aa_cs.7, align 16, !tbaa !27
  %1228 = extractelement <2 x double> %1215, i32 0
  %1229 = fmul double %1228, %1227
  %1230 = load double, double* @aa_ca.7, align 16, !tbaa !27
  %1231 = extractelement <2 x double> %1221, i32 1
  %1232 = fmul double %1231, %1230
  %1233 = fsub double %1229, %1232
  store double %1233, double* %1213, align 8, !tbaa !27
  %1234 = load double, double* @aa_cs.7, align 16, !tbaa !27
  %1235 = insertelement <2 x double> undef, double %1225, i32 0
  %1236 = insertelement <2 x double> %1235, double %1234, i32 1
  %1237 = fmul <2 x double> %1221, %1236
  %1238 = load double, double* @aa_ca.7, align 16, !tbaa !27
  %1239 = insertelement <2 x double> undef, double %1226, i32 0
  %1240 = insertelement <2 x double> %1239, double %1238, i32 1
  %1241 = fmul <2 x double> %1216, %1240
  %1242 = fadd <2 x double> %1237, %1241
  %1243 = bitcast double* %1209 to <2 x double>*
  store <2 x double> %1242, <2 x double>* %1243, align 8, !tbaa !27
  %1244 = add nsw i32 %1108, -1
  %1245 = getelementptr inbounds double, double* %1107, i64 18
  %1246 = icmp eq i32 %1244, 0
  br i1 %1246, label %1247, label %1106

1247:                                             ; preds = %1106, %1098, %1094
  %1248 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* @do_layer3.hybridOut, i64 0, i64 %1090, i64 0, i64 0
  %1249 = load %struct.mpstr*, %struct.mpstr** @gmp, align 8, !tbaa !7
  %1250 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %1249, i64 0, i32 8, i64 %1090
  %1251 = load i32, i32* %1250, align 4, !tbaa !18
  %1252 = sext i32 %1251 to i64
  %1253 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %1249, i64 0, i32 7, i64 %1252, i64 %1090, i64 0
  %1254 = sub i32 1, %1251
  %1255 = sext i32 %1254 to i64
  %1256 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %1249, i64 0, i32 7, i64 %1255, i64 %1090, i64 0
  store i32 %1254, i32* %1250, align 4, !tbaa !18
  %1257 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %1090, i32 0, i64 %390, i32 5
  %1258 = load i32, i32* %1257, align 4, !tbaa !249
  %1259 = icmp eq i32 %1258, 0
  br i1 %1259, label %1269, label %1260

1260:                                             ; preds = %1247
  %1261 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 %1090, i64 0, i64 0
  call fastcc void @dct36(double* nonnull %1261, double* nonnull %1253, double* nonnull %1256, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 0, i64 0), double* nonnull %1248) #21
  %1262 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 %1090, i64 1, i64 0
  %1263 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %1249, i64 0, i32 7, i64 %1252, i64 %1090, i64 18
  %1264 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %1249, i64 0, i32 7, i64 %1255, i64 %1090, i64 18
  %1265 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* @do_layer3.hybridOut, i64 0, i64 %1090, i64 0, i64 1
  call fastcc void @dct36(double* nonnull %1262, double* nonnull %1263, double* nonnull %1264, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 0, i64 0), double* nonnull %1265) #21
  %1266 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %1249, i64 0, i32 7, i64 %1252, i64 %1090, i64 36
  %1267 = getelementptr inbounds %struct.mpstr, %struct.mpstr* %1249, i64 0, i32 7, i64 %1255, i64 %1090, i64 36
  %1268 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* @do_layer3.hybridOut, i64 0, i64 %1090, i64 0, i64 2
  br label %1269

1269:                                             ; preds = %1260, %1247
  %1270 = phi double* [ %1267, %1260 ], [ %1256, %1247 ]
  %1271 = phi double* [ %1266, %1260 ], [ %1253, %1247 ]
  %1272 = phi i32 [ 2, %1260 ], [ 0, %1247 ]
  %1273 = phi double* [ %1268, %1260 ], [ %1248, %1247 ]
  %1274 = load i32, i32* %1091, align 8, !tbaa !248
  %1275 = icmp eq i32 %1274, 2
  %1276 = getelementptr inbounds %struct.III_sideinfo, %struct.III_sideinfo* %5, i64 0, i32 2, i64 %1090, i32 0, i64 %390, i32 10
  %1277 = load i32, i32* %1276, align 8, !tbaa !262
  %1278 = icmp ult i32 %1272, %1277
  br i1 %1275, label %1285, label %1279

1279:                                             ; preds = %1269
  br i1 %1278, label %1280, label %1331

1280:                                             ; preds = %1279
  %1281 = sext i32 %1274 to i64
  %1282 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 %1281, i64 0
  %1283 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 %1281, i64 0
  %1284 = zext i32 %1272 to i64
  br label %1306

1285:                                             ; preds = %1269
  br i1 %1278, label %1286, label %1331

1286:                                             ; preds = %1285
  %1287 = zext i32 %1272 to i64
  br label %1288

1288:                                             ; preds = %1288, %1286
  %1289 = phi i64 [ %1287, %1286 ], [ %1299, %1288 ]
  %1290 = phi double* [ %1273, %1286 ], [ %1300, %1288 ]
  %1291 = phi double* [ %1271, %1286 ], [ %1301, %1288 ]
  %1292 = phi double* [ %1270, %1286 ], [ %1302, %1288 ]
  %1293 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 %1090, i64 %1289, i64 0
  call fastcc void @dct12(double* nonnull %1293, double* nonnull %1291, double* nonnull %1292, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win, i64 0, i64 2, i64 0), double* nonnull %1290) #21
  %1294 = or i64 %1289, 1
  %1295 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 %1090, i64 %1294, i64 0
  %1296 = getelementptr inbounds double, double* %1291, i64 18
  %1297 = getelementptr inbounds double, double* %1292, i64 18
  %1298 = getelementptr inbounds double, double* %1290, i64 1
  call fastcc void @dct12(double* nonnull %1295, double* nonnull %1296, double* nonnull %1297, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win1, i64 0, i64 2, i64 0), double* nonnull %1298) #21
  %1299 = add nuw nsw i64 %1289, 2
  %1300 = getelementptr inbounds double, double* %1290, i64 2
  %1301 = getelementptr inbounds double, double* %1291, i64 36
  %1302 = getelementptr inbounds double, double* %1292, i64 36
  %1303 = load i32, i32* %1276, align 8, !tbaa !262
  %1304 = zext i32 %1303 to i64
  %1305 = icmp ult i64 %1299, %1304
  br i1 %1305, label %1288, label %1324

1306:                                             ; preds = %1306, %1280
  %1307 = phi i64 [ %1284, %1280 ], [ %1317, %1306 ]
  %1308 = phi double* [ %1273, %1280 ], [ %1318, %1306 ]
  %1309 = phi double* [ %1271, %1280 ], [ %1319, %1306 ]
  %1310 = phi double* [ %1270, %1280 ], [ %1320, %1306 ]
  %1311 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 %1090, i64 %1307, i64 0
  call fastcc void @dct36(double* nonnull %1311, double* nonnull %1309, double* nonnull %1310, double* nonnull %1282, double* nonnull %1308) #21
  %1312 = or i64 %1307, 1
  %1313 = getelementptr inbounds [2 x [32 x [18 x double]]], [2 x [32 x [18 x double]]]* @do_layer3.hybridIn, i64 0, i64 %1090, i64 %1312, i64 0
  %1314 = getelementptr inbounds double, double* %1309, i64 18
  %1315 = getelementptr inbounds double, double* %1310, i64 18
  %1316 = getelementptr inbounds double, double* %1308, i64 1
  call fastcc void @dct36(double* nonnull %1313, double* nonnull %1314, double* nonnull %1315, double* nonnull %1283, double* nonnull %1316) #21
  %1317 = add nuw nsw i64 %1307, 2
  %1318 = getelementptr inbounds double, double* %1308, i64 2
  %1319 = getelementptr inbounds double, double* %1309, i64 36
  %1320 = getelementptr inbounds double, double* %1310, i64 36
  %1321 = load i32, i32* %1276, align 8, !tbaa !262
  %1322 = zext i32 %1321 to i64
  %1323 = icmp ult i64 %1317, %1322
  br i1 %1323, label %1306, label %1324

1324:                                             ; preds = %1306, %1288
  %1325 = phi double* [ %1302, %1288 ], [ %1320, %1306 ]
  %1326 = phi double* [ %1301, %1288 ], [ %1319, %1306 ]
  %1327 = phi i64 [ %1299, %1288 ], [ %1317, %1306 ]
  %1328 = phi double* [ %1300, %1288 ], [ %1318, %1306 ]
  %1329 = trunc i64 %1327 to i32
  %1330 = icmp slt i32 %1329, 32
  br i1 %1330, label %1331, label %1451

1331:                                             ; preds = %1324, %1285, %1279
  %1332 = phi double* [ %1273, %1279 ], [ %1273, %1285 ], [ %1328, %1324 ]
  %1333 = phi i32 [ %1272, %1279 ], [ %1272, %1285 ], [ %1329, %1324 ]
  %1334 = phi double* [ %1271, %1279 ], [ %1271, %1285 ], [ %1326, %1324 ]
  %1335 = phi double* [ %1270, %1279 ], [ %1270, %1285 ], [ %1325, %1324 ]
  br label %1336

1336:                                             ; preds = %1336, %1331
  %1337 = phi double* [ %1449, %1336 ], [ %1332, %1331 ]
  %1338 = phi i32 [ %1448, %1336 ], [ %1333, %1331 ]
  %1339 = phi double* [ %1442, %1336 ], [ %1334, %1331 ]
  %1340 = phi double* [ %1447, %1336 ], [ %1335, %1331 ]
  %1341 = getelementptr inbounds double, double* %1339, i64 1
  %1342 = bitcast double* %1339 to i64*
  %1343 = load i64, i64* %1342, align 8, !tbaa !27
  %1344 = bitcast double* %1337 to i64*
  store i64 %1343, i64* %1344, align 8, !tbaa !27
  %1345 = getelementptr inbounds double, double* %1340, i64 1
  store double 0.000000e+00, double* %1340, align 8, !tbaa !27
  %1346 = getelementptr inbounds double, double* %1339, i64 2
  %1347 = bitcast double* %1341 to i64*
  %1348 = load i64, i64* %1347, align 8, !tbaa !27
  %1349 = getelementptr inbounds double, double* %1337, i64 32
  %1350 = bitcast double* %1349 to i64*
  store i64 %1348, i64* %1350, align 8, !tbaa !27
  %1351 = getelementptr inbounds double, double* %1340, i64 2
  store double 0.000000e+00, double* %1345, align 8, !tbaa !27
  %1352 = getelementptr inbounds double, double* %1339, i64 3
  %1353 = bitcast double* %1346 to i64*
  %1354 = load i64, i64* %1353, align 8, !tbaa !27
  %1355 = getelementptr inbounds double, double* %1337, i64 64
  %1356 = bitcast double* %1355 to i64*
  store i64 %1354, i64* %1356, align 8, !tbaa !27
  %1357 = getelementptr inbounds double, double* %1340, i64 3
  store double 0.000000e+00, double* %1351, align 8, !tbaa !27
  %1358 = getelementptr inbounds double, double* %1339, i64 4
  %1359 = bitcast double* %1352 to i64*
  %1360 = load i64, i64* %1359, align 8, !tbaa !27
  %1361 = getelementptr inbounds double, double* %1337, i64 96
  %1362 = bitcast double* %1361 to i64*
  store i64 %1360, i64* %1362, align 8, !tbaa !27
  %1363 = getelementptr inbounds double, double* %1340, i64 4
  store double 0.000000e+00, double* %1357, align 8, !tbaa !27
  %1364 = getelementptr inbounds double, double* %1339, i64 5
  %1365 = bitcast double* %1358 to i64*
  %1366 = load i64, i64* %1365, align 8, !tbaa !27
  %1367 = getelementptr inbounds double, double* %1337, i64 128
  %1368 = bitcast double* %1367 to i64*
  store i64 %1366, i64* %1368, align 8, !tbaa !27
  %1369 = getelementptr inbounds double, double* %1340, i64 5
  store double 0.000000e+00, double* %1363, align 8, !tbaa !27
  %1370 = getelementptr inbounds double, double* %1339, i64 6
  %1371 = bitcast double* %1364 to i64*
  %1372 = load i64, i64* %1371, align 8, !tbaa !27
  %1373 = getelementptr inbounds double, double* %1337, i64 160
  %1374 = bitcast double* %1373 to i64*
  store i64 %1372, i64* %1374, align 8, !tbaa !27
  %1375 = getelementptr inbounds double, double* %1340, i64 6
  store double 0.000000e+00, double* %1369, align 8, !tbaa !27
  %1376 = getelementptr inbounds double, double* %1339, i64 7
  %1377 = bitcast double* %1370 to i64*
  %1378 = load i64, i64* %1377, align 8, !tbaa !27
  %1379 = getelementptr inbounds double, double* %1337, i64 192
  %1380 = bitcast double* %1379 to i64*
  store i64 %1378, i64* %1380, align 8, !tbaa !27
  %1381 = getelementptr inbounds double, double* %1340, i64 7
  store double 0.000000e+00, double* %1375, align 8, !tbaa !27
  %1382 = getelementptr inbounds double, double* %1339, i64 8
  %1383 = bitcast double* %1376 to i64*
  %1384 = load i64, i64* %1383, align 8, !tbaa !27
  %1385 = getelementptr inbounds double, double* %1337, i64 224
  %1386 = bitcast double* %1385 to i64*
  store i64 %1384, i64* %1386, align 8, !tbaa !27
  %1387 = getelementptr inbounds double, double* %1340, i64 8
  store double 0.000000e+00, double* %1381, align 8, !tbaa !27
  %1388 = getelementptr inbounds double, double* %1339, i64 9
  %1389 = bitcast double* %1382 to i64*
  %1390 = load i64, i64* %1389, align 8, !tbaa !27
  %1391 = getelementptr inbounds double, double* %1337, i64 256
  %1392 = bitcast double* %1391 to i64*
  store i64 %1390, i64* %1392, align 8, !tbaa !27
  %1393 = getelementptr inbounds double, double* %1340, i64 9
  store double 0.000000e+00, double* %1387, align 8, !tbaa !27
  %1394 = getelementptr inbounds double, double* %1339, i64 10
  %1395 = bitcast double* %1388 to i64*
  %1396 = load i64, i64* %1395, align 8, !tbaa !27
  %1397 = getelementptr inbounds double, double* %1337, i64 288
  %1398 = bitcast double* %1397 to i64*
  store i64 %1396, i64* %1398, align 8, !tbaa !27
  %1399 = getelementptr inbounds double, double* %1340, i64 10
  store double 0.000000e+00, double* %1393, align 8, !tbaa !27
  %1400 = getelementptr inbounds double, double* %1339, i64 11
  %1401 = bitcast double* %1394 to i64*
  %1402 = load i64, i64* %1401, align 8, !tbaa !27
  %1403 = getelementptr inbounds double, double* %1337, i64 320
  %1404 = bitcast double* %1403 to i64*
  store i64 %1402, i64* %1404, align 8, !tbaa !27
  %1405 = getelementptr inbounds double, double* %1340, i64 11
  store double 0.000000e+00, double* %1399, align 8, !tbaa !27
  %1406 = getelementptr inbounds double, double* %1339, i64 12
  %1407 = bitcast double* %1400 to i64*
  %1408 = load i64, i64* %1407, align 8, !tbaa !27
  %1409 = getelementptr inbounds double, double* %1337, i64 352
  %1410 = bitcast double* %1409 to i64*
  store i64 %1408, i64* %1410, align 8, !tbaa !27
  %1411 = getelementptr inbounds double, double* %1340, i64 12
  store double 0.000000e+00, double* %1405, align 8, !tbaa !27
  %1412 = getelementptr inbounds double, double* %1339, i64 13
  %1413 = bitcast double* %1406 to i64*
  %1414 = load i64, i64* %1413, align 8, !tbaa !27
  %1415 = getelementptr inbounds double, double* %1337, i64 384
  %1416 = bitcast double* %1415 to i64*
  store i64 %1414, i64* %1416, align 8, !tbaa !27
  %1417 = getelementptr inbounds double, double* %1340, i64 13
  store double 0.000000e+00, double* %1411, align 8, !tbaa !27
  %1418 = getelementptr inbounds double, double* %1339, i64 14
  %1419 = bitcast double* %1412 to i64*
  %1420 = load i64, i64* %1419, align 8, !tbaa !27
  %1421 = getelementptr inbounds double, double* %1337, i64 416
  %1422 = bitcast double* %1421 to i64*
  store i64 %1420, i64* %1422, align 8, !tbaa !27
  %1423 = getelementptr inbounds double, double* %1340, i64 14
  store double 0.000000e+00, double* %1417, align 8, !tbaa !27
  %1424 = getelementptr inbounds double, double* %1339, i64 15
  %1425 = bitcast double* %1418 to i64*
  %1426 = load i64, i64* %1425, align 8, !tbaa !27
  %1427 = getelementptr inbounds double, double* %1337, i64 448
  %1428 = bitcast double* %1427 to i64*
  store i64 %1426, i64* %1428, align 8, !tbaa !27
  %1429 = getelementptr inbounds double, double* %1340, i64 15
  store double 0.000000e+00, double* %1423, align 8, !tbaa !27
  %1430 = getelementptr inbounds double, double* %1339, i64 16
  %1431 = bitcast double* %1424 to i64*
  %1432 = load i64, i64* %1431, align 8, !tbaa !27
  %1433 = getelementptr inbounds double, double* %1337, i64 480
  %1434 = bitcast double* %1433 to i64*
  store i64 %1432, i64* %1434, align 8, !tbaa !27
  %1435 = getelementptr inbounds double, double* %1340, i64 16
  store double 0.000000e+00, double* %1429, align 8, !tbaa !27
  %1436 = getelementptr inbounds double, double* %1339, i64 17
  %1437 = bitcast double* %1430 to i64*
  %1438 = load i64, i64* %1437, align 8, !tbaa !27
  %1439 = getelementptr inbounds double, double* %1337, i64 512
  %1440 = bitcast double* %1439 to i64*
  store i64 %1438, i64* %1440, align 8, !tbaa !27
  %1441 = getelementptr inbounds double, double* %1340, i64 17
  store double 0.000000e+00, double* %1435, align 8, !tbaa !27
  %1442 = getelementptr inbounds double, double* %1339, i64 18
  %1443 = bitcast double* %1436 to i64*
  %1444 = load i64, i64* %1443, align 8, !tbaa !27
  %1445 = getelementptr inbounds double, double* %1337, i64 544
  %1446 = bitcast double* %1445 to i64*
  store i64 %1444, i64* %1446, align 8, !tbaa !27
  %1447 = getelementptr inbounds double, double* %1340, i64 18
  store double 0.000000e+00, double* %1441, align 8, !tbaa !27
  %1448 = add nsw i32 %1338, 1
  %1449 = getelementptr inbounds double, double* %1337, i64 1
  %1450 = icmp slt i32 %1338, 31
  br i1 %1450, label %1336, label %1451

1451:                                             ; preds = %1336, %1324
  %1452 = add nuw nsw i64 %1090, 1
  %1453 = icmp ult i64 %1452, %388
  br i1 %1453, label %1089, label %1454

1454:                                             ; preds = %1469, %1451
  %1455 = phi i64 [ %1471, %1469 ], [ 0, %1451 ]
  %1456 = phi i32 [ %1470, %1469 ], [ %391, %1451 ]
  br i1 %386, label %1457, label %1461

1457:                                             ; preds = %1454
  %1458 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* @do_layer3.hybridOut, i64 0, i64 0, i64 %1455, i64 0
  %1459 = call i32 @synth_1to1_mono(double* nonnull %1458, i8* %1, i32* %2) #21
  %1460 = add nsw i32 %1459, %1456
  br label %1469

1461:                                             ; preds = %1454
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %387) #21
  %1462 = load i32, i32* %2, align 4, !tbaa !18
  store i32 %1462, i32* %6, align 4, !tbaa !18
  %1463 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* @do_layer3.hybridOut, i64 0, i64 0, i64 %1455, i64 0
  %1464 = call i32 @synth_1to1(double* nonnull %1463, i32 0, i8* %1, i32* nonnull %6) #21
  %1465 = add nsw i32 %1464, %1456
  %1466 = getelementptr inbounds [2 x [18 x [32 x double]]], [2 x [18 x [32 x double]]]* @do_layer3.hybridOut, i64 0, i64 1, i64 %1455, i64 0
  %1467 = call i32 @synth_1to1(double* nonnull %1466, i32 1, i8* %1, i32* nonnull %2) #21
  %1468 = add nsw i32 %1465, %1467
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %387) #21
  br label %1469

1469:                                             ; preds = %1461, %1457
  %1470 = phi i32 [ %1460, %1457 ], [ %1468, %1461 ]
  %1471 = add nuw nsw i64 %1455, 1
  %1472 = icmp eq i64 %1471, 18
  br i1 %1472, label %1473, label %1454

1473:                                             ; preds = %1469
  %1474 = add nuw nsw i64 %390, 1
  %1475 = icmp eq i64 %1474, %365
  br i1 %1475, label %1476, label %389

1476:                                             ; preds = %1473, %412, %399, %363
  %1477 = phi i32 [ 0, %363 ], [ %391, %399 ], [ %1470, %1473 ], [ %391, %412 ]
  call void @llvm.lifetime.end.p0i8(i64 488, i8* nonnull %8) #21
  call void @llvm.lifetime.end.p0i8(i64 312, i8* nonnull %7) #21
  ret i32 %1477
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @III_get_scale_factors_2(i32* nocapture %0, %struct.gr_info_s* nocapture %1, i32 %2) unnamed_addr #0 {
  %4 = icmp eq i32 %2, 0
  %5 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %1, i64 0, i32 3
  %6 = load i32, i32* %5, align 4, !tbaa !245
  %7 = lshr i32 %6, 1
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds [256 x i32], [256 x i32]* @i_slen2, i64 0, i64 %8
  %10 = zext i32 %6 to i64
  %11 = getelementptr inbounds [512 x i32], [512 x i32]* @n_slen2, i64 0, i64 %10
  %12 = select i1 %4, i32* %11, i32* %9
  %13 = load i32, i32* %12, align 4, !tbaa !18
  %14 = lshr i32 %13, 15
  %15 = and i32 %14, 1
  %16 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %1, i64 0, i32 13
  store i32 %15, i32* %16, align 4, !tbaa !253
  %17 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %1, i64 0, i32 4
  %18 = load i32, i32* %17, align 8, !tbaa !248
  %19 = icmp eq i32 %18, 2
  br i1 %19, label %20, label %25

20:                                               ; preds = %3
  %21 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %1, i64 0, i32 5
  %22 = load i32, i32* %21, align 4, !tbaa !249
  %23 = icmp eq i32 %22, 0
  %24 = select i1 %23, i64 1, i64 2
  br label %25

25:                                               ; preds = %20, %3
  %26 = phi i64 [ 0, %3 ], [ %24, %20 ]
  %27 = lshr i32 %13, 12
  %28 = and i32 %27, 7
  %29 = zext i32 %28 to i64
  %30 = bitcast i32* %0 to i8*
  %31 = and i32 %13, 7
  %32 = lshr i32 %13, 3
  %33 = icmp eq i32 %31, 0
  %34 = getelementptr inbounds [3 x [6 x [4 x i8]]], [3 x [6 x [4 x i8]]]* @III_get_scale_factors_2.stab, i64 0, i64 %26, i64 %29, i64 0
  %35 = load i8, i8* %34, align 4, !tbaa !26
  %36 = icmp ne i8 %35, 0
  br i1 %33, label %40, label %37

37:                                               ; preds = %25
  br i1 %36, label %38, label %59

38:                                               ; preds = %37
  %39 = zext i8 %35 to i32
  br label %52

40:                                               ; preds = %25
  br i1 %36, label %41, label %79

41:                                               ; preds = %40
  %42 = zext i8 %35 to i32
  %43 = icmp ugt i32 %42, 1
  %44 = select i1 %43, i32 %42, i32 1
  %45 = shl nuw nsw i32 %44, 2
  %46 = zext i32 %45 to i64
  call void @llvm.memset.p0i8.i64(i8* align 4 %30, i8 0, i64 %46, i1 false)
  %47 = add nsw i32 %42, -1
  %48 = and i32 %42, 7
  %49 = icmp ult i32 %47, 7
  br i1 %49, label %69, label %50

50:                                               ; preds = %41
  %51 = sub nsw i32 %42, %48
  br label %63

52:                                               ; preds = %52, %38
  %53 = phi i32* [ %56, %52 ], [ %0, %38 ]
  %54 = phi i32 [ %57, %52 ], [ 0, %38 ]
  %55 = tail call i32 @getbits_fast(i32 %31) #21
  %56 = getelementptr inbounds i32, i32* %53, i64 1
  store i32 %55, i32* %53, align 4, !tbaa !18
  %57 = add nuw nsw i32 %54, 1
  %58 = icmp ult i32 %57, %39
  br i1 %58, label %52, label %59

59:                                               ; preds = %52, %37
  %60 = phi i32* [ %0, %37 ], [ %56, %52 ]
  %61 = zext i8 %35 to i32
  %62 = mul nuw nsw i32 %31, %61
  br label %79

63:                                               ; preds = %63, %50
  %64 = phi i32* [ %0, %50 ], [ %66, %63 ]
  %65 = phi i32 [ %51, %50 ], [ %67, %63 ]
  %66 = getelementptr inbounds i32, i32* %64, i64 8
  %67 = add i32 %65, -8
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %63

69:                                               ; preds = %63, %41
  %70 = phi i32* [ undef, %41 ], [ %66, %63 ]
  %71 = phi i32* [ %0, %41 ], [ %66, %63 ]
  %72 = icmp eq i32 %48, 0
  br i1 %72, label %79, label %73

73:                                               ; preds = %73, %69
  %74 = phi i32* [ %76, %73 ], [ %71, %69 ]
  %75 = phi i32 [ %77, %73 ], [ %48, %69 ]
  %76 = getelementptr inbounds i32, i32* %74, i64 1
  %77 = add i32 %75, -1
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %73, !llvm.loop !268

79:                                               ; preds = %73, %69, %59, %40
  %80 = phi i32 [ %62, %59 ], [ 0, %40 ], [ 0, %73 ], [ 0, %69 ]
  %81 = phi i32* [ %60, %59 ], [ %0, %40 ], [ %70, %69 ], [ %76, %73 ]
  %82 = bitcast i32* %81 to i8*
  %83 = and i32 %32, 7
  %84 = lshr i32 %13, 6
  %85 = icmp eq i32 %83, 0
  %86 = getelementptr inbounds [3 x [6 x [4 x i8]]], [3 x [6 x [4 x i8]]]* @III_get_scale_factors_2.stab, i64 0, i64 %26, i64 %29, i64 1
  %87 = load i8, i8* %86, align 1, !tbaa !26
  %88 = icmp ne i8 %87, 0
  br i1 %85, label %106, label %89

89:                                               ; preds = %79
  br i1 %88, label %90, label %101

90:                                               ; preds = %89
  %91 = zext i8 %87 to i32
  br label %92

92:                                               ; preds = %92, %90
  %93 = phi i32* [ %96, %92 ], [ %81, %90 ]
  %94 = phi i32 [ %97, %92 ], [ 0, %90 ]
  %95 = tail call i32 @getbits_fast(i32 %83) #21
  %96 = getelementptr inbounds i32, i32* %93, i64 1
  store i32 %95, i32* %93, align 4, !tbaa !18
  %97 = add nuw nsw i32 %94, 1
  %98 = icmp ult i32 %97, %91
  br i1 %98, label %92, label %99

99:                                               ; preds = %92
  %100 = zext i8 %87 to i32
  br label %101

101:                                              ; preds = %99, %89
  %102 = phi i32* [ %96, %99 ], [ %81, %89 ]
  %103 = phi i32 [ %100, %99 ], [ 0, %89 ]
  %104 = mul nuw nsw i32 %83, %103
  %105 = add nsw i32 %104, %80
  br label %134

106:                                              ; preds = %79
  br i1 %88, label %107, label %134

107:                                              ; preds = %106
  %108 = zext i8 %87 to i32
  %109 = icmp ugt i32 %108, 1
  %110 = select i1 %109, i32 %108, i32 1
  %111 = shl nuw nsw i32 %110, 2
  %112 = zext i32 %111 to i64
  call void @llvm.memset.p0i8.i64(i8* align 4 %82, i8 0, i64 %112, i1 false)
  %113 = add nsw i32 %108, -1
  %114 = and i32 %108, 7
  %115 = icmp ult i32 %113, 7
  br i1 %115, label %124, label %116

116:                                              ; preds = %107
  %117 = sub nsw i32 %108, %114
  br label %118

118:                                              ; preds = %118, %116
  %119 = phi i32* [ %81, %116 ], [ %121, %118 ]
  %120 = phi i32 [ %117, %116 ], [ %122, %118 ]
  %121 = getelementptr inbounds i32, i32* %119, i64 8
  %122 = add i32 %120, -8
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %124, label %118

124:                                              ; preds = %118, %107
  %125 = phi i32* [ undef, %107 ], [ %121, %118 ]
  %126 = phi i32* [ %81, %107 ], [ %121, %118 ]
  %127 = icmp eq i32 %114, 0
  br i1 %127, label %134, label %128

128:                                              ; preds = %128, %124
  %129 = phi i32* [ %131, %128 ], [ %126, %124 ]
  %130 = phi i32 [ %132, %128 ], [ %114, %124 ]
  %131 = getelementptr inbounds i32, i32* %129, i64 1
  %132 = add i32 %130, -1
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %128, !llvm.loop !269

134:                                              ; preds = %128, %124, %106, %101
  %135 = phi i32 [ %105, %101 ], [ %80, %106 ], [ %80, %128 ], [ %80, %124 ]
  %136 = phi i32* [ %102, %101 ], [ %81, %106 ], [ %125, %124 ], [ %131, %128 ]
  %137 = bitcast i32* %136 to i8*
  %138 = and i32 %84, 7
  %139 = lshr i32 %13, 9
  %140 = icmp eq i32 %138, 0
  %141 = getelementptr inbounds [3 x [6 x [4 x i8]]], [3 x [6 x [4 x i8]]]* @III_get_scale_factors_2.stab, i64 0, i64 %26, i64 %29, i64 2
  %142 = load i8, i8* %141, align 2, !tbaa !26
  %143 = icmp ne i8 %142, 0
  br i1 %140, label %161, label %144

144:                                              ; preds = %134
  br i1 %143, label %145, label %156

145:                                              ; preds = %144
  %146 = zext i8 %142 to i32
  br label %147

147:                                              ; preds = %147, %145
  %148 = phi i32* [ %151, %147 ], [ %136, %145 ]
  %149 = phi i32 [ %152, %147 ], [ 0, %145 ]
  %150 = tail call i32 @getbits_fast(i32 %138) #21
  %151 = getelementptr inbounds i32, i32* %148, i64 1
  store i32 %150, i32* %148, align 4, !tbaa !18
  %152 = add nuw nsw i32 %149, 1
  %153 = icmp ult i32 %152, %146
  br i1 %153, label %147, label %154

154:                                              ; preds = %147
  %155 = zext i8 %142 to i32
  br label %156

156:                                              ; preds = %154, %144
  %157 = phi i32* [ %151, %154 ], [ %136, %144 ]
  %158 = phi i32 [ %155, %154 ], [ 0, %144 ]
  %159 = mul nuw nsw i32 %138, %158
  %160 = add nsw i32 %159, %135
  br label %189

161:                                              ; preds = %134
  br i1 %143, label %162, label %189

162:                                              ; preds = %161
  %163 = zext i8 %142 to i32
  %164 = icmp ugt i32 %163, 1
  %165 = select i1 %164, i32 %163, i32 1
  %166 = shl nuw nsw i32 %165, 2
  %167 = zext i32 %166 to i64
  call void @llvm.memset.p0i8.i64(i8* align 4 %137, i8 0, i64 %167, i1 false)
  %168 = add nsw i32 %163, -1
  %169 = and i32 %163, 7
  %170 = icmp ult i32 %168, 7
  br i1 %170, label %179, label %171

171:                                              ; preds = %162
  %172 = sub nsw i32 %163, %169
  br label %173

173:                                              ; preds = %173, %171
  %174 = phi i32* [ %136, %171 ], [ %176, %173 ]
  %175 = phi i32 [ %172, %171 ], [ %177, %173 ]
  %176 = getelementptr inbounds i32, i32* %174, i64 8
  %177 = add i32 %175, -8
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %179, label %173

179:                                              ; preds = %173, %162
  %180 = phi i32* [ undef, %162 ], [ %176, %173 ]
  %181 = phi i32* [ %136, %162 ], [ %176, %173 ]
  %182 = icmp eq i32 %169, 0
  br i1 %182, label %189, label %183

183:                                              ; preds = %183, %179
  %184 = phi i32* [ %186, %183 ], [ %181, %179 ]
  %185 = phi i32 [ %187, %183 ], [ %169, %179 ]
  %186 = getelementptr inbounds i32, i32* %184, i64 1
  %187 = add i32 %185, -1
  %188 = icmp eq i32 %187, 0
  br i1 %188, label %189, label %183, !llvm.loop !270

189:                                              ; preds = %183, %179, %161, %156
  %190 = phi i32 [ %160, %156 ], [ %135, %161 ], [ %135, %183 ], [ %135, %179 ]
  %191 = phi i32* [ %157, %156 ], [ %136, %161 ], [ %180, %179 ], [ %186, %183 ]
  %192 = bitcast i32* %191 to i8*
  %193 = and i32 %139, 7
  %194 = icmp eq i32 %193, 0
  %195 = getelementptr inbounds [3 x [6 x [4 x i8]]], [3 x [6 x [4 x i8]]]* @III_get_scale_factors_2.stab, i64 0, i64 %26, i64 %29, i64 3
  %196 = load i8, i8* %195, align 1, !tbaa !26
  %197 = icmp ne i8 %196, 0
  br i1 %194, label %215, label %198

198:                                              ; preds = %189
  br i1 %197, label %199, label %210

199:                                              ; preds = %198
  %200 = zext i8 %196 to i32
  br label %201

201:                                              ; preds = %201, %199
  %202 = phi i32* [ %205, %201 ], [ %191, %199 ]
  %203 = phi i32 [ %206, %201 ], [ 0, %199 ]
  %204 = tail call i32 @getbits_fast(i32 %193) #21
  %205 = getelementptr inbounds i32, i32* %202, i64 1
  store i32 %204, i32* %202, align 4, !tbaa !18
  %206 = add nuw nsw i32 %203, 1
  %207 = icmp ult i32 %206, %200
  br i1 %207, label %201, label %208

208:                                              ; preds = %201
  %209 = zext i8 %196 to i32
  br label %210

210:                                              ; preds = %208, %198
  %211 = phi i32* [ %205, %208 ], [ %191, %198 ]
  %212 = phi i32 [ %209, %208 ], [ 0, %198 ]
  %213 = mul nuw nsw i32 %193, %212
  %214 = add nsw i32 %213, %190
  br label %243

215:                                              ; preds = %189
  br i1 %197, label %216, label %243

216:                                              ; preds = %215
  %217 = zext i8 %196 to i32
  %218 = icmp ugt i32 %217, 1
  %219 = select i1 %218, i32 %217, i32 1
  %220 = shl nuw nsw i32 %219, 2
  %221 = zext i32 %220 to i64
  call void @llvm.memset.p0i8.i64(i8* align 4 %192, i8 0, i64 %221, i1 false)
  %222 = add nsw i32 %217, -1
  %223 = and i32 %217, 7
  %224 = icmp ult i32 %222, 7
  br i1 %224, label %233, label %225

225:                                              ; preds = %216
  %226 = sub nsw i32 %217, %223
  br label %227

227:                                              ; preds = %227, %225
  %228 = phi i32* [ %191, %225 ], [ %230, %227 ]
  %229 = phi i32 [ %226, %225 ], [ %231, %227 ]
  %230 = getelementptr inbounds i32, i32* %228, i64 8
  %231 = add i32 %229, -8
  %232 = icmp eq i32 %231, 0
  br i1 %232, label %233, label %227

233:                                              ; preds = %227, %216
  %234 = phi i32* [ undef, %216 ], [ %230, %227 ]
  %235 = phi i32* [ %191, %216 ], [ %230, %227 ]
  %236 = icmp eq i32 %223, 0
  br i1 %236, label %243, label %237

237:                                              ; preds = %237, %233
  %238 = phi i32* [ %240, %237 ], [ %235, %233 ]
  %239 = phi i32 [ %241, %237 ], [ %223, %233 ]
  %240 = getelementptr inbounds i32, i32* %238, i64 1
  %241 = add i32 %239, -1
  %242 = icmp eq i32 %241, 0
  br i1 %242, label %243, label %237, !llvm.loop !271

243:                                              ; preds = %237, %233, %215, %210
  %244 = phi i32 [ %214, %210 ], [ %190, %215 ], [ %190, %237 ], [ %190, %233 ]
  %245 = phi i32* [ %211, %210 ], [ %191, %215 ], [ %234, %233 ], [ %240, %237 ]
  %246 = bitcast i32* %245 to i8*
  %247 = shl nuw nsw i64 %26, 3
  %248 = or i64 %247, 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(1) %246, i8 0, i64 %248, i1 false)
  ret i32 %244
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @III_get_scale_factors_1(i32* nocapture %0, %struct.gr_info_s* nocapture readonly %1) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %1, i64 0, i32 3
  %4 = load i32, i32* %3, align 4, !tbaa !245
  %5 = zext i32 %4 to i64
  %6 = getelementptr inbounds [2 x [16 x i8]], [2 x [16 x i8]]* @III_get_scale_factors_1.slen, i64 0, i64 0, i64 %5
  %7 = load i8, i8* %6, align 1, !tbaa !26
  %8 = zext i8 %7 to i32
  %9 = getelementptr inbounds [2 x [16 x i8]], [2 x [16 x i8]]* @III_get_scale_factors_1.slen, i64 0, i64 1, i64 %5
  %10 = load i8, i8* %9, align 1, !tbaa !26
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %1, i64 0, i32 4
  %13 = load i32, i32* %12, align 8, !tbaa !248
  %14 = icmp eq i32 %13, 2
  br i1 %14, label %15, label %88

15:                                               ; preds = %2
  %16 = add nuw nsw i32 %11, %8
  %17 = mul nuw nsw i32 %16, 18
  %18 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %1, i64 0, i32 5
  %19 = load i32, i32* %18, align 4, !tbaa !249
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %39, label %21

21:                                               ; preds = %15
  %22 = tail call i32 @getbits_fast(i32 %8) #21
  %23 = getelementptr inbounds i32, i32* %0, i64 1
  store i32 %22, i32* %0, align 4, !tbaa !18
  %24 = tail call i32 @getbits_fast(i32 %8) #21
  %25 = getelementptr inbounds i32, i32* %0, i64 2
  store i32 %24, i32* %23, align 4, !tbaa !18
  %26 = tail call i32 @getbits_fast(i32 %8) #21
  %27 = getelementptr inbounds i32, i32* %0, i64 3
  store i32 %26, i32* %25, align 4, !tbaa !18
  %28 = tail call i32 @getbits_fast(i32 %8) #21
  %29 = getelementptr inbounds i32, i32* %0, i64 4
  store i32 %28, i32* %27, align 4, !tbaa !18
  %30 = tail call i32 @getbits_fast(i32 %8) #21
  %31 = getelementptr inbounds i32, i32* %0, i64 5
  store i32 %30, i32* %29, align 4, !tbaa !18
  %32 = tail call i32 @getbits_fast(i32 %8) #21
  %33 = getelementptr inbounds i32, i32* %0, i64 6
  store i32 %32, i32* %31, align 4, !tbaa !18
  %34 = tail call i32 @getbits_fast(i32 %8) #21
  %35 = getelementptr inbounds i32, i32* %0, i64 7
  store i32 %34, i32* %33, align 4, !tbaa !18
  %36 = tail call i32 @getbits_fast(i32 %8) #21
  %37 = getelementptr inbounds i32, i32* %0, i64 8
  store i32 %36, i32* %35, align 4, !tbaa !18
  %38 = sub nsw i32 %17, %8
  br label %39

39:                                               ; preds = %21, %15
  %40 = phi i32 [ %38, %21 ], [ %17, %15 ]
  %41 = phi i32 [ 9, %21 ], [ 18, %15 ]
  %42 = phi i32* [ %37, %21 ], [ %0, %15 ]
  br label %43

43:                                               ; preds = %43, %39
  %44 = phi i32* [ %42, %39 ], [ %47, %43 ]
  %45 = phi i32 [ %41, %39 ], [ %48, %43 ]
  %46 = tail call i32 @getbits_fast(i32 %8) #21
  %47 = getelementptr inbounds i32, i32* %44, i64 1
  store i32 %46, i32* %44, align 4, !tbaa !18
  %48 = add nsw i32 %45, -1
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %43

50:                                               ; preds = %43
  %51 = tail call i32 @getbits_fast(i32 %11) #21
  %52 = getelementptr inbounds i32, i32* %44, i64 2
  store i32 %51, i32* %47, align 4, !tbaa !18
  %53 = tail call i32 @getbits_fast(i32 %11) #21
  %54 = getelementptr inbounds i32, i32* %44, i64 3
  store i32 %53, i32* %52, align 4, !tbaa !18
  %55 = tail call i32 @getbits_fast(i32 %11) #21
  %56 = getelementptr inbounds i32, i32* %44, i64 4
  store i32 %55, i32* %54, align 4, !tbaa !18
  %57 = tail call i32 @getbits_fast(i32 %11) #21
  %58 = getelementptr inbounds i32, i32* %44, i64 5
  store i32 %57, i32* %56, align 4, !tbaa !18
  %59 = tail call i32 @getbits_fast(i32 %11) #21
  %60 = getelementptr inbounds i32, i32* %44, i64 6
  store i32 %59, i32* %58, align 4, !tbaa !18
  %61 = tail call i32 @getbits_fast(i32 %11) #21
  %62 = getelementptr inbounds i32, i32* %44, i64 7
  store i32 %61, i32* %60, align 4, !tbaa !18
  %63 = tail call i32 @getbits_fast(i32 %11) #21
  %64 = getelementptr inbounds i32, i32* %44, i64 8
  store i32 %63, i32* %62, align 4, !tbaa !18
  %65 = tail call i32 @getbits_fast(i32 %11) #21
  %66 = getelementptr inbounds i32, i32* %44, i64 9
  store i32 %65, i32* %64, align 4, !tbaa !18
  %67 = tail call i32 @getbits_fast(i32 %11) #21
  %68 = getelementptr inbounds i32, i32* %44, i64 10
  store i32 %67, i32* %66, align 4, !tbaa !18
  %69 = tail call i32 @getbits_fast(i32 %11) #21
  %70 = getelementptr inbounds i32, i32* %44, i64 11
  store i32 %69, i32* %68, align 4, !tbaa !18
  %71 = tail call i32 @getbits_fast(i32 %11) #21
  %72 = getelementptr inbounds i32, i32* %44, i64 12
  store i32 %71, i32* %70, align 4, !tbaa !18
  %73 = tail call i32 @getbits_fast(i32 %11) #21
  %74 = getelementptr inbounds i32, i32* %44, i64 13
  store i32 %73, i32* %72, align 4, !tbaa !18
  %75 = tail call i32 @getbits_fast(i32 %11) #21
  %76 = getelementptr inbounds i32, i32* %44, i64 14
  store i32 %75, i32* %74, align 4, !tbaa !18
  %77 = tail call i32 @getbits_fast(i32 %11) #21
  %78 = getelementptr inbounds i32, i32* %44, i64 15
  store i32 %77, i32* %76, align 4, !tbaa !18
  %79 = tail call i32 @getbits_fast(i32 %11) #21
  %80 = getelementptr inbounds i32, i32* %44, i64 16
  store i32 %79, i32* %78, align 4, !tbaa !18
  %81 = tail call i32 @getbits_fast(i32 %11) #21
  %82 = getelementptr inbounds i32, i32* %44, i64 17
  store i32 %81, i32* %80, align 4, !tbaa !18
  %83 = tail call i32 @getbits_fast(i32 %11) #21
  %84 = getelementptr inbounds i32, i32* %44, i64 18
  store i32 %83, i32* %82, align 4, !tbaa !18
  %85 = tail call i32 @getbits_fast(i32 %11) #21
  %86 = getelementptr inbounds i32, i32* %44, i64 19
  store i32 %85, i32* %84, align 4, !tbaa !18
  %87 = getelementptr inbounds i32, i32* %44, i64 20
  store i32 0, i32* %86, align 4, !tbaa !18
  store i32 0, i32* %87, align 4, !tbaa !18
  br label %204

88:                                               ; preds = %2
  %89 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %1, i64 0, i32 0
  %90 = load i32, i32* %89, align 8, !tbaa !252
  %91 = icmp slt i32 %90, 0
  br i1 %91, label %92, label %137

92:                                               ; preds = %88
  %93 = tail call i32 @getbits_fast(i32 %8) #21
  %94 = getelementptr inbounds i32, i32* %0, i64 1
  store i32 %93, i32* %0, align 4, !tbaa !18
  %95 = tail call i32 @getbits_fast(i32 %8) #21
  %96 = getelementptr inbounds i32, i32* %0, i64 2
  store i32 %95, i32* %94, align 4, !tbaa !18
  %97 = tail call i32 @getbits_fast(i32 %8) #21
  %98 = getelementptr inbounds i32, i32* %0, i64 3
  store i32 %97, i32* %96, align 4, !tbaa !18
  %99 = tail call i32 @getbits_fast(i32 %8) #21
  %100 = getelementptr inbounds i32, i32* %0, i64 4
  store i32 %99, i32* %98, align 4, !tbaa !18
  %101 = tail call i32 @getbits_fast(i32 %8) #21
  %102 = getelementptr inbounds i32, i32* %0, i64 5
  store i32 %101, i32* %100, align 4, !tbaa !18
  %103 = tail call i32 @getbits_fast(i32 %8) #21
  %104 = getelementptr inbounds i32, i32* %0, i64 6
  store i32 %103, i32* %102, align 4, !tbaa !18
  %105 = tail call i32 @getbits_fast(i32 %8) #21
  %106 = getelementptr inbounds i32, i32* %0, i64 7
  store i32 %105, i32* %104, align 4, !tbaa !18
  %107 = tail call i32 @getbits_fast(i32 %8) #21
  %108 = getelementptr inbounds i32, i32* %0, i64 8
  store i32 %107, i32* %106, align 4, !tbaa !18
  %109 = tail call i32 @getbits_fast(i32 %8) #21
  %110 = getelementptr inbounds i32, i32* %0, i64 9
  store i32 %109, i32* %108, align 4, !tbaa !18
  %111 = tail call i32 @getbits_fast(i32 %8) #21
  %112 = getelementptr inbounds i32, i32* %0, i64 10
  store i32 %111, i32* %110, align 4, !tbaa !18
  %113 = tail call i32 @getbits_fast(i32 %8) #21
  %114 = getelementptr inbounds i32, i32* %0, i64 11
  store i32 %113, i32* %112, align 4, !tbaa !18
  %115 = tail call i32 @getbits_fast(i32 %11) #21
  %116 = getelementptr inbounds i32, i32* %0, i64 12
  store i32 %115, i32* %114, align 4, !tbaa !18
  %117 = tail call i32 @getbits_fast(i32 %11) #21
  %118 = getelementptr inbounds i32, i32* %0, i64 13
  store i32 %117, i32* %116, align 4, !tbaa !18
  %119 = tail call i32 @getbits_fast(i32 %11) #21
  %120 = getelementptr inbounds i32, i32* %0, i64 14
  store i32 %119, i32* %118, align 4, !tbaa !18
  %121 = tail call i32 @getbits_fast(i32 %11) #21
  %122 = getelementptr inbounds i32, i32* %0, i64 15
  store i32 %121, i32* %120, align 4, !tbaa !18
  %123 = tail call i32 @getbits_fast(i32 %11) #21
  %124 = getelementptr inbounds i32, i32* %0, i64 16
  store i32 %123, i32* %122, align 4, !tbaa !18
  %125 = tail call i32 @getbits_fast(i32 %11) #21
  %126 = getelementptr inbounds i32, i32* %0, i64 17
  store i32 %125, i32* %124, align 4, !tbaa !18
  %127 = tail call i32 @getbits_fast(i32 %11) #21
  %128 = getelementptr inbounds i32, i32* %0, i64 18
  store i32 %127, i32* %126, align 4, !tbaa !18
  %129 = tail call i32 @getbits_fast(i32 %11) #21
  %130 = getelementptr inbounds i32, i32* %0, i64 19
  store i32 %129, i32* %128, align 4, !tbaa !18
  %131 = tail call i32 @getbits_fast(i32 %11) #21
  %132 = getelementptr inbounds i32, i32* %0, i64 20
  store i32 %131, i32* %130, align 4, !tbaa !18
  %133 = tail call i32 @getbits_fast(i32 %11) #21
  store i32 %133, i32* %132, align 4, !tbaa !18
  %134 = add nuw nsw i32 %11, %8
  %135 = mul nuw nsw i32 %134, 10
  %136 = add nuw nsw i32 %135, %8
  br label %204

137:                                              ; preds = %88
  %138 = and i32 %90, 8
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %153

140:                                              ; preds = %137
  %141 = tail call i32 @getbits_fast(i32 %8) #21
  %142 = getelementptr inbounds i32, i32* %0, i64 1
  store i32 %141, i32* %0, align 4, !tbaa !18
  %143 = tail call i32 @getbits_fast(i32 %8) #21
  %144 = getelementptr inbounds i32, i32* %0, i64 2
  store i32 %143, i32* %142, align 4, !tbaa !18
  %145 = tail call i32 @getbits_fast(i32 %8) #21
  %146 = getelementptr inbounds i32, i32* %0, i64 3
  store i32 %145, i32* %144, align 4, !tbaa !18
  %147 = tail call i32 @getbits_fast(i32 %8) #21
  %148 = getelementptr inbounds i32, i32* %0, i64 4
  store i32 %147, i32* %146, align 4, !tbaa !18
  %149 = tail call i32 @getbits_fast(i32 %8) #21
  %150 = getelementptr inbounds i32, i32* %0, i64 5
  store i32 %149, i32* %148, align 4, !tbaa !18
  %151 = tail call i32 @getbits_fast(i32 %8) #21
  store i32 %151, i32* %150, align 4, !tbaa !18
  %152 = mul nuw nsw i32 %8, 6
  br label %153

153:                                              ; preds = %140, %137
  %154 = phi i32 [ %152, %140 ], [ 0, %137 ]
  %155 = and i32 %90, 4
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %157, label %170

157:                                              ; preds = %153
  %158 = getelementptr inbounds i32, i32* %0, i64 6
  %159 = tail call i32 @getbits_fast(i32 %8) #21
  %160 = getelementptr inbounds i32, i32* %0, i64 7
  store i32 %159, i32* %158, align 4, !tbaa !18
  %161 = tail call i32 @getbits_fast(i32 %8) #21
  %162 = getelementptr inbounds i32, i32* %0, i64 8
  store i32 %161, i32* %160, align 4, !tbaa !18
  %163 = tail call i32 @getbits_fast(i32 %8) #21
  %164 = getelementptr inbounds i32, i32* %0, i64 9
  store i32 %163, i32* %162, align 4, !tbaa !18
  %165 = tail call i32 @getbits_fast(i32 %8) #21
  %166 = getelementptr inbounds i32, i32* %0, i64 10
  store i32 %165, i32* %164, align 4, !tbaa !18
  %167 = tail call i32 @getbits_fast(i32 %8) #21
  store i32 %167, i32* %166, align 4, !tbaa !18
  %168 = mul nuw nsw i32 %8, 5
  %169 = add nuw nsw i32 %154, %168
  br label %170

170:                                              ; preds = %157, %153
  %171 = phi i32 [ %169, %157 ], [ %154, %153 ]
  %172 = and i32 %90, 2
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %174, label %187

174:                                              ; preds = %170
  %175 = getelementptr inbounds i32, i32* %0, i64 11
  %176 = tail call i32 @getbits_fast(i32 %11) #21
  %177 = getelementptr inbounds i32, i32* %0, i64 12
  store i32 %176, i32* %175, align 4, !tbaa !18
  %178 = tail call i32 @getbits_fast(i32 %11) #21
  %179 = getelementptr inbounds i32, i32* %0, i64 13
  store i32 %178, i32* %177, align 4, !tbaa !18
  %180 = tail call i32 @getbits_fast(i32 %11) #21
  %181 = getelementptr inbounds i32, i32* %0, i64 14
  store i32 %180, i32* %179, align 4, !tbaa !18
  %182 = tail call i32 @getbits_fast(i32 %11) #21
  %183 = getelementptr inbounds i32, i32* %0, i64 15
  store i32 %182, i32* %181, align 4, !tbaa !18
  %184 = tail call i32 @getbits_fast(i32 %11) #21
  store i32 %184, i32* %183, align 4, !tbaa !18
  %185 = mul nuw nsw i32 %11, 5
  %186 = add nuw nsw i32 %171, %185
  br label %187

187:                                              ; preds = %174, %170
  %188 = phi i32 [ %186, %174 ], [ %171, %170 ]
  %189 = and i32 %90, 1
  %190 = icmp eq i32 %189, 0
  br i1 %190, label %191, label %204

191:                                              ; preds = %187
  %192 = getelementptr inbounds i32, i32* %0, i64 16
  %193 = tail call i32 @getbits_fast(i32 %11) #21
  %194 = getelementptr inbounds i32, i32* %0, i64 17
  store i32 %193, i32* %192, align 4, !tbaa !18
  %195 = tail call i32 @getbits_fast(i32 %11) #21
  %196 = getelementptr inbounds i32, i32* %0, i64 18
  store i32 %195, i32* %194, align 4, !tbaa !18
  %197 = tail call i32 @getbits_fast(i32 %11) #21
  %198 = getelementptr inbounds i32, i32* %0, i64 19
  store i32 %197, i32* %196, align 4, !tbaa !18
  %199 = tail call i32 @getbits_fast(i32 %11) #21
  %200 = getelementptr inbounds i32, i32* %0, i64 20
  store i32 %199, i32* %198, align 4, !tbaa !18
  %201 = tail call i32 @getbits_fast(i32 %11) #21
  store i32 %201, i32* %200, align 4, !tbaa !18
  %202 = mul nuw nsw i32 %11, 5
  %203 = add nuw nsw i32 %188, %202
  br label %204

204:                                              ; preds = %191, %187, %92, %50
  %205 = phi i32* [ %44, %50 ], [ %0, %187 ], [ %0, %191 ], [ %0, %92 ]
  %206 = phi i32 [ %40, %50 ], [ %136, %92 ], [ %203, %191 ], [ %188, %187 ]
  %207 = getelementptr inbounds i32, i32* %205, i64 21
  store i32 0, i32* %207, align 4, !tbaa !18
  ret i32 %206
}

; Function Attrs: nounwind uwtable
define internal fastcc i32 @III_dequantize_sample([18 x double]* %0, i32* nocapture readonly %1, %struct.gr_info_s* %2, i32 %3, i32 %4) unnamed_addr #0 {
  %6 = alloca [3 x i32], align 4
  %7 = alloca <4 x i32>, align 16
  %8 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 14
  %9 = load i32, i32* %8, align 8, !tbaa !250
  %10 = add i32 %9, 1
  %11 = getelementptr [18 x double], [18 x double]* %0, i64 0, i64 0
  %12 = bitcast [3 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %12) #21
  %13 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 1
  %14 = load i32, i32* %13, align 4, !tbaa !241
  %15 = sub i32 %14, %4
  %16 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 2
  %17 = load i32, i32* %16, align 8, !tbaa !243
  %18 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 11
  %19 = load i32, i32* %18, align 4, !tbaa !246
  %20 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 12
  %21 = load i32, i32* %20, align 8, !tbaa !247
  %22 = sub nsw i32 288, %17
  %23 = ashr i32 %22, 1
  %24 = icmp sgt i32 %17, %19
  %25 = getelementptr inbounds [3 x i32], [3 x i32]* %6, i64 0, i64 0
  br i1 %24, label %28, label %26

26:                                               ; preds = %5
  store i32 %17, i32* %25, align 4, !tbaa !18
  %27 = getelementptr inbounds [3 x i32], [3 x i32]* %6, i64 0, i64 1
  store i32 0, i32* %27, align 4, !tbaa !18
  br label %37

28:                                               ; preds = %5
  store i32 %19, i32* %25, align 4, !tbaa !18
  %29 = icmp sgt i32 %17, %21
  br i1 %29, label %33, label %30

30:                                               ; preds = %28
  %31 = sub nsw i32 %17, %19
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %6, i64 0, i64 1
  store i32 %31, i32* %32, align 4, !tbaa !18
  br label %37

33:                                               ; preds = %28
  %34 = sub nsw i32 %21, %19
  %35 = getelementptr inbounds [3 x i32], [3 x i32]* %6, i64 0, i64 1
  store i32 %34, i32* %35, align 4, !tbaa !18
  %36 = sub nsw i32 %17, %21
  br label %37

37:                                               ; preds = %33, %30, %26
  %38 = phi i32 [ 0, %30 ], [ %36, %33 ], [ 0, %26 ]
  %39 = phi i32 [ %19, %30 ], [ %19, %33 ], [ %17, %26 ]
  %40 = getelementptr inbounds [3 x i32], [3 x i32]* %6, i64 0, i64 2
  store i32 %38, i32* %40, align 4, !tbaa !18
  %41 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 4
  %42 = load i32, i32* %41, align 8, !tbaa !248
  %43 = icmp eq i32 %42, 2
  br i1 %43, label %44, label %465

44:                                               ; preds = %37
  %45 = bitcast <4 x i32>* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %45) #21
  %46 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 5
  %47 = load i32, i32* %46, align 4, !tbaa !249
  %48 = icmp eq i32 %47, 0
  %49 = getelementptr inbounds <4 x i32>, <4 x i32>* %7, i64 0, i64 3
  store i32 -1, i32* %49, align 4, !tbaa !18
  %50 = getelementptr inbounds <4 x i32>, <4 x i32>* %7, i64 0, i64 2
  br i1 %48, label %55, label %51

51:                                               ; preds = %44
  store i32 2, i32* %50, align 8, !tbaa !18
  %52 = sext i32 %3 to i64
  %53 = getelementptr inbounds [9 x [3 x i32*]], [9 x [3 x i32*]]* @map, i64 0, i64 %52, i64 0
  %54 = getelementptr inbounds [9 x [3 x i32*]], [9 x [3 x i32*]]* @mapend, i64 0, i64 %52, i64 0
  br label %59

55:                                               ; preds = %44
  store i32 -1, i32* %50, align 8, !tbaa !18
  %56 = sext i32 %3 to i64
  %57 = getelementptr inbounds [9 x [3 x i32*]], [9 x [3 x i32*]]* @map, i64 0, i64 %56, i64 1
  %58 = getelementptr inbounds [9 x [3 x i32*]], [9 x [3 x i32*]]* @mapend, i64 0, i64 %56, i64 1
  br label %59

59:                                               ; preds = %55, %51
  %60 = phi i32 [ -1, %55 ], [ 2, %51 ]
  %61 = phi i32** [ %58, %55 ], [ %54, %51 ]
  %62 = phi i32** [ %57, %55 ], [ %53, %51 ]
  %63 = getelementptr inbounds <4 x i32>, <4 x i32>* %7, i64 0, i64 1
  store i32 %60, i32* %63, align 4
  %64 = getelementptr inbounds <4 x i32>, <4 x i32>* %7, i64 0, i64 0
  store i32 %60, i32* %64, align 16
  %65 = load i32*, i32** %62, align 8, !tbaa !7
  %66 = load i32*, i32** %61, align 8, !tbaa !7
  %67 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 17
  br label %80

68:                                               ; preds = %288
  %69 = icmp ne i32 %23, 0
  %70 = icmp sgt i32 %289, 0
  %71 = and i1 %70, %69
  br i1 %71, label %72, label %303

72:                                               ; preds = %68
  %73 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 15
  %74 = load i32, i32* %73, align 4, !tbaa !251
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds [2 x %struct.newhuff], [2 x %struct.newhuff]* @htc, i64 0, i64 %75, i32 1
  %77 = load i16*, i16** %76, align 8, !tbaa !272
  %78 = load i16, i16* %77, align 2, !tbaa !29
  %79 = icmp slt i16 %78, 0
  br label %310

80:                                               ; preds = %299, %59
  %81 = phi i32 [ %39, %59 ], [ %302, %299 ]
  %82 = phi i64 [ 0, %59 ], [ 1, %299 ]
  %83 = phi i32* [ %1, %59 ], [ %297, %299 ]
  %84 = phi double* [ %11, %59 ], [ %296, %299 ]
  %85 = phi i32 [ 0, %59 ], [ %295, %299 ]
  %86 = phi i32* [ %65, %59 ], [ %294, %299 ]
  %87 = phi double [ 0.000000e+00, %59 ], [ %293, %299 ]
  %88 = phi i32 [ 0, %59 ], [ %292, %299 ]
  %89 = phi i32 [ 0, %59 ], [ %291, %299 ]
  %90 = phi i32 [ 0, %59 ], [ %290, %299 ]
  %91 = phi i32 [ %15, %59 ], [ %289, %299 ]
  %92 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 6, i64 %82
  %93 = load i32, i32* %92, align 4, !tbaa !18
  %94 = zext i32 %93 to i64
  %95 = icmp eq i32 %81, 0
  br i1 %95, label %288, label %96

96:                                               ; preds = %80
  %97 = getelementptr inbounds [32 x %struct.newhuff], [32 x %struct.newhuff]* @ht.183, i64 0, i64 %94, i32 1
  %98 = load i16*, i16** %97, align 8, !tbaa !272
  %99 = getelementptr inbounds [32 x %struct.newhuff], [32 x %struct.newhuff]* @ht.183, i64 0, i64 %94, i32 0
  br label %100

100:                                              ; preds = %282, %96
  %101 = phi i32* [ %83, %96 ], [ %143, %282 ]
  %102 = phi double* [ %84, %96 ], [ %284, %282 ]
  %103 = phi i32 [ %81, %96 ], [ %285, %282 ]
  %104 = phi i32 [ %85, %96 ], [ %286, %282 ]
  %105 = phi i32* [ %86, %96 ], [ %140, %282 ]
  %106 = phi double [ %87, %96 ], [ %139, %282 ]
  %107 = phi i32 [ %88, %96 ], [ %138, %282 ]
  %108 = phi i32 [ %89, %96 ], [ %137, %282 ]
  %109 = phi i32 [ %90, %96 ], [ %136, %282 ]
  %110 = phi i32 [ %91, %96 ], [ %283, %282 ]
  %111 = icmp eq i32 %104, 0
  br i1 %111, label %112, label %135

112:                                              ; preds = %100
  %113 = getelementptr inbounds i32, i32* %105, i64 1
  %114 = load i32, i32* %105, align 4, !tbaa !18
  %115 = getelementptr inbounds i32, i32* %105, i64 2
  %116 = load i32, i32* %113, align 4, !tbaa !18
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds [18 x double], [18 x double]* %0, i64 0, i64 %117
  %119 = getelementptr inbounds i32, i32* %105, i64 3
  %120 = load i32, i32* %115, align 4, !tbaa !18
  %121 = getelementptr inbounds i32, i32* %105, i64 4
  %122 = load i32, i32* %119, align 4, !tbaa !18
  %123 = icmp eq i32 %120, 3
  %124 = sext i32 %120 to i64
  %125 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 16, i64 %124
  %126 = select i1 %123, double** %67, double** %125
  %127 = select i1 %123, i32 1, i32 3
  %128 = load double*, double** %126, align 8, !tbaa !7
  %129 = getelementptr inbounds i32, i32* %101, i64 1
  %130 = load i32, i32* %101, align 4, !tbaa !18
  %131 = shl i32 %130, %10
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds double, double* %128, i64 %132
  %134 = load double, double* %133, align 8, !tbaa !27
  br label %135

135:                                              ; preds = %112, %100
  %136 = phi i32 [ %109, %100 ], [ %127, %112 ]
  %137 = phi i32 [ %108, %100 ], [ %120, %112 ]
  %138 = phi i32 [ %107, %100 ], [ %122, %112 ]
  %139 = phi double [ %106, %100 ], [ %134, %112 ]
  %140 = phi i32* [ %105, %100 ], [ %121, %112 ]
  %141 = phi i32 [ %104, %100 ], [ %114, %112 ]
  %142 = phi double* [ %102, %100 ], [ %118, %112 ]
  %143 = phi i32* [ %101, %100 ], [ %129, %112 ]
  %144 = load i16, i16* %98, align 2, !tbaa !29
  %145 = icmp slt i16 %144, 0
  br i1 %145, label %146, label %170

146:                                              ; preds = %146, %135
  %147 = phi i16 [ %168, %146 ], [ %144, %135 ]
  %148 = phi i16* [ %166, %146 ], [ %98, %135 ]
  %149 = phi i32 [ %167, %146 ], [ %110, %135 ]
  %150 = getelementptr inbounds i16, i16* %148, i64 1
  %151 = load i8*, i8** @wordpointer, align 8, !tbaa !7
  %152 = load i8, i8* %151, align 1, !tbaa !26
  %153 = zext i8 %152 to i32
  %154 = load i32, i32* @bitindex, align 4, !tbaa !18
  %155 = shl i32 %153, %154
  %156 = add nsw i32 %154, 1
  %157 = ashr i32 %156, 3
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds i8, i8* %151, i64 %158
  store i8* %159, i8** @wordpointer, align 8, !tbaa !7
  %160 = and i32 %156, 7
  store i32 %160, i32* @bitindex, align 4, !tbaa !18
  %161 = trunc i32 %155 to i8
  %162 = icmp sgt i8 %161, -1
  %163 = sext i16 %147 to i64
  %164 = sub nsw i64 0, %163
  %165 = getelementptr inbounds i16, i16* %150, i64 %164
  %166 = select i1 %162, i16* %150, i16* %165
  %167 = add nsw i32 %149, -1
  %168 = load i16, i16* %166, align 2, !tbaa !29
  %169 = icmp slt i16 %168, 0
  br i1 %169, label %146, label %170

170:                                              ; preds = %146, %135
  %171 = phi i32 [ %110, %135 ], [ %167, %146 ]
  %172 = phi i16 [ %144, %135 ], [ %168, %146 ]
  %173 = zext i16 %172 to i32
  %174 = lshr i32 %173, 4
  %175 = and i32 %173, 15
  switch i32 %174, label %204 [
    i32 15, label %176
    i32 0, label %226
  ]

176:                                              ; preds = %170
  %177 = sext i32 %137 to i64
  %178 = getelementptr inbounds <4 x i32>, <4 x i32>* %7, i64 0, i64 %177
  store i32 %138, i32* %178, align 4, !tbaa !18
  %179 = load i32, i32* %99, align 16, !tbaa !274
  %180 = xor i32 %179, -1
  %181 = add i32 %171, %180
  %182 = tail call i32 @getbits(i32 %179) #21
  %183 = add i32 %182, 15
  %184 = load i8*, i8** @wordpointer, align 8, !tbaa !7
  %185 = load i8, i8* %184, align 1, !tbaa !26
  %186 = zext i8 %185 to i32
  %187 = load i32, i32* @bitindex, align 4, !tbaa !18
  %188 = shl i32 %186, %187
  %189 = add nsw i32 %187, 1
  %190 = ashr i32 %189, 3
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds i8, i8* %184, i64 %191
  store i8* %192, i8** @wordpointer, align 8, !tbaa !7
  %193 = and i32 %189, 7
  store i32 %193, i32* @bitindex, align 4, !tbaa !18
  %194 = trunc i32 %188 to i8
  %195 = icmp sgt i8 %194, -1
  %196 = sext i32 %183 to i64
  %197 = getelementptr inbounds [8207 x double], [8207 x double]* @ispow, i64 0, i64 %196
  %198 = load double, double* %197, align 8, !tbaa !27
  br i1 %195, label %202, label %199

199:                                              ; preds = %176
  %200 = fneg double %198
  %201 = fmul double %139, %200
  store double %201, double* %142, align 8, !tbaa !27
  br label %227

202:                                              ; preds = %176
  %203 = fmul double %139, %198
  store double %203, double* %142, align 8, !tbaa !27
  br label %227

204:                                              ; preds = %170
  %205 = sext i32 %137 to i64
  %206 = getelementptr inbounds <4 x i32>, <4 x i32>* %7, i64 0, i64 %205
  store i32 %138, i32* %206, align 4, !tbaa !18
  %207 = load i8*, i8** @wordpointer, align 8, !tbaa !7
  %208 = load i8, i8* %207, align 1, !tbaa !26
  %209 = zext i8 %208 to i32
  %210 = load i32, i32* @bitindex, align 4, !tbaa !18
  %211 = shl i32 %209, %210
  %212 = add nsw i32 %210, 1
  %213 = ashr i32 %212, 3
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds i8, i8* %207, i64 %214
  store i8* %215, i8** @wordpointer, align 8, !tbaa !7
  %216 = and i32 %212, 7
  store i32 %216, i32* @bitindex, align 4, !tbaa !18
  %217 = trunc i32 %211 to i8
  %218 = icmp sgt i8 %217, -1
  %219 = zext i32 %174 to i64
  %220 = getelementptr inbounds [8207 x double], [8207 x double]* @ispow, i64 0, i64 %219
  %221 = load double, double* %220, align 8, !tbaa !27
  %222 = fneg double %221
  %223 = select i1 %218, double %221, double %222
  %224 = fmul double %139, %223
  store double %224, double* %142, align 8, !tbaa !27
  %225 = add nsw i32 %171, -1
  br label %227

226:                                              ; preds = %170
  store double 0.000000e+00, double* %142, align 8, !tbaa !27
  br label %227

227:                                              ; preds = %226, %204, %202, %199
  %228 = phi i32 [ %181, %199 ], [ %181, %202 ], [ %225, %204 ], [ %171, %226 ]
  %229 = sext i32 %136 to i64
  %230 = getelementptr inbounds double, double* %142, i64 %229
  switch i32 %175, label %259 [
    i32 15, label %231
    i32 0, label %281
  ]

231:                                              ; preds = %227
  %232 = sext i32 %137 to i64
  %233 = getelementptr inbounds <4 x i32>, <4 x i32>* %7, i64 0, i64 %232
  store i32 %138, i32* %233, align 4, !tbaa !18
  %234 = load i32, i32* %99, align 16, !tbaa !274
  %235 = xor i32 %234, -1
  %236 = add i32 %228, %235
  %237 = tail call i32 @getbits(i32 %234) #21
  %238 = add i32 %237, 15
  %239 = load i8*, i8** @wordpointer, align 8, !tbaa !7
  %240 = load i8, i8* %239, align 1, !tbaa !26
  %241 = zext i8 %240 to i32
  %242 = load i32, i32* @bitindex, align 4, !tbaa !18
  %243 = shl i32 %241, %242
  %244 = add nsw i32 %242, 1
  %245 = ashr i32 %244, 3
  %246 = sext i32 %245 to i64
  %247 = getelementptr inbounds i8, i8* %239, i64 %246
  store i8* %247, i8** @wordpointer, align 8, !tbaa !7
  %248 = and i32 %244, 7
  store i32 %248, i32* @bitindex, align 4, !tbaa !18
  %249 = trunc i32 %243 to i8
  %250 = icmp sgt i8 %249, -1
  %251 = sext i32 %238 to i64
  %252 = getelementptr inbounds [8207 x double], [8207 x double]* @ispow, i64 0, i64 %251
  %253 = load double, double* %252, align 8, !tbaa !27
  br i1 %250, label %257, label %254

254:                                              ; preds = %231
  %255 = fneg double %253
  %256 = fmul double %139, %255
  store double %256, double* %230, align 8, !tbaa !27
  br label %282

257:                                              ; preds = %231
  %258 = fmul double %139, %253
  store double %258, double* %230, align 8, !tbaa !27
  br label %282

259:                                              ; preds = %227
  %260 = sext i32 %137 to i64
  %261 = getelementptr inbounds <4 x i32>, <4 x i32>* %7, i64 0, i64 %260
  store i32 %138, i32* %261, align 4, !tbaa !18
  %262 = load i8*, i8** @wordpointer, align 8, !tbaa !7
  %263 = load i8, i8* %262, align 1, !tbaa !26
  %264 = zext i8 %263 to i32
  %265 = load i32, i32* @bitindex, align 4, !tbaa !18
  %266 = shl i32 %264, %265
  %267 = add nsw i32 %265, 1
  %268 = ashr i32 %267, 3
  %269 = sext i32 %268 to i64
  %270 = getelementptr inbounds i8, i8* %262, i64 %269
  store i8* %270, i8** @wordpointer, align 8, !tbaa !7
  %271 = and i32 %267, 7
  store i32 %271, i32* @bitindex, align 4, !tbaa !18
  %272 = trunc i32 %266 to i8
  %273 = icmp sgt i8 %272, -1
  %274 = zext i32 %175 to i64
  %275 = getelementptr inbounds [8207 x double], [8207 x double]* @ispow, i64 0, i64 %274
  %276 = load double, double* %275, align 8, !tbaa !27
  %277 = fneg double %276
  %278 = select i1 %273, double %276, double %277
  %279 = fmul double %139, %278
  store double %279, double* %230, align 8, !tbaa !27
  %280 = add nsw i32 %228, -1
  br label %282

281:                                              ; preds = %227
  store double 0.000000e+00, double* %230, align 8, !tbaa !27
  br label %282

282:                                              ; preds = %281, %259, %257, %254
  %283 = phi i32 [ %236, %254 ], [ %236, %257 ], [ %280, %259 ], [ %228, %281 ]
  %284 = getelementptr inbounds double, double* %230, i64 %229
  %285 = add nsw i32 %103, -1
  %286 = add nsw i32 %141, -1
  %287 = icmp eq i32 %285, 0
  br i1 %287, label %288, label %100

288:                                              ; preds = %282, %80
  %289 = phi i32 [ %91, %80 ], [ %283, %282 ]
  %290 = phi i32 [ %90, %80 ], [ %136, %282 ]
  %291 = phi i32 [ %89, %80 ], [ %137, %282 ]
  %292 = phi i32 [ %88, %80 ], [ %138, %282 ]
  %293 = phi double [ %87, %80 ], [ %139, %282 ]
  %294 = phi i32* [ %86, %80 ], [ %140, %282 ]
  %295 = phi i32 [ %85, %80 ], [ %286, %282 ]
  %296 = phi double* [ %84, %80 ], [ %284, %282 ]
  %297 = phi i32* [ %83, %80 ], [ %143, %282 ]
  %298 = icmp eq i64 %82, 0
  br i1 %298, label %299, label %68

299:                                              ; preds = %288
  %300 = add nuw nsw i64 %82, 1
  %301 = getelementptr inbounds [3 x i32], [3 x i32]* %6, i64 0, i64 %300
  %302 = load i32, i32* %301, align 4, !tbaa !18
  br label %80

303:                                              ; preds = %921, %894, %834, %407, %387, %68
  %304 = phi i32 [ %289, %68 ], [ %348, %387 ], [ %829, %834 ], [ %856, %894 ], [ %916, %921 ], [ %409, %407 ]
  %305 = phi i32 [ %290, %68 ], [ %376, %387 ], [ %376, %834 ], [ %883, %894 ], [ %883, %921 ], [ %883, %407 ]
  %306 = phi i32* [ %294, %68 ], [ %380, %387 ], [ %380, %834 ], [ %887, %894 ], [ %887, %921 ], [ %887, %407 ]
  %307 = phi i32 [ %295, %68 ], [ %384, %387 ], [ %384, %834 ], [ %891, %894 ], [ %891, %921 ], [ %891, %407 ]
  %308 = phi double* [ %296, %68 ], [ %382, %387 ], [ %831, %834 ], [ %889, %894 ], [ %918, %921 ], [ %410, %407 ]
  %309 = icmp ult i32* %306, %66
  br i1 %309, label %415, label %442

310:                                              ; preds = %407, %72
  %311 = phi i32* [ %297, %72 ], [ %890, %407 ]
  %312 = phi double* [ %296, %72 ], [ %410, %407 ]
  %313 = phi i32 [ %23, %72 ], [ %411, %407 ]
  %314 = phi i32 [ %295, %72 ], [ %891, %407 ]
  %315 = phi i32* [ %294, %72 ], [ %887, %407 ]
  %316 = phi double [ %293, %72 ], [ %886, %407 ]
  %317 = phi i32 [ %292, %72 ], [ %885, %407 ]
  %318 = phi i32 [ %291, %72 ], [ %884, %407 ]
  %319 = phi i32 [ %290, %72 ], [ %883, %407 ]
  %320 = phi i32 [ %289, %72 ], [ %409, %407 ]
  br i1 %79, label %321, label %347

321:                                              ; preds = %327, %310
  %322 = phi i16 [ %345, %327 ], [ %78, %310 ]
  %323 = phi i16* [ %344, %327 ], [ %77, %310 ]
  %324 = phi i32 [ %328, %327 ], [ %320, %310 ]
  %325 = getelementptr inbounds i16, i16* %323, i64 1
  %326 = icmp slt i32 %324, 1
  br i1 %326, label %347, label %327

327:                                              ; preds = %321
  %328 = add nsw i32 %324, -1
  %329 = load i8*, i8** @wordpointer, align 8, !tbaa !7
  %330 = load i8, i8* %329, align 1, !tbaa !26
  %331 = zext i8 %330 to i32
  %332 = load i32, i32* @bitindex, align 4, !tbaa !18
  %333 = shl i32 %331, %332
  %334 = add nsw i32 %332, 1
  %335 = ashr i32 %334, 3
  %336 = sext i32 %335 to i64
  %337 = getelementptr inbounds i8, i8* %329, i64 %336
  store i8* %337, i8** @wordpointer, align 8, !tbaa !7
  %338 = and i32 %334, 7
  store i32 %338, i32* @bitindex, align 4, !tbaa !18
  %339 = trunc i32 %333 to i8
  %340 = icmp sgt i8 %339, -1
  %341 = sext i16 %322 to i64
  %342 = sub nsw i64 0, %341
  %343 = getelementptr inbounds i16, i16* %325, i64 %342
  %344 = select i1 %340, i16* %325, i16* %343
  %345 = load i16, i16* %344, align 2, !tbaa !29
  %346 = icmp slt i16 %345, 0
  br i1 %346, label %321, label %347

347:                                              ; preds = %327, %321, %310
  %348 = phi i32 [ %320, %310 ], [ %324, %321 ], [ %328, %327 ]
  %349 = phi i16 [ %78, %310 ], [ 0, %321 ], [ %345, %327 ]
  %350 = zext i16 %349 to i32
  %351 = icmp eq i32 %314, 0
  br i1 %351, label %352, label %375

352:                                              ; preds = %347
  %353 = getelementptr inbounds i32, i32* %315, i64 1
  %354 = load i32, i32* %315, align 4, !tbaa !18
  %355 = getelementptr inbounds i32, i32* %315, i64 2
  %356 = load i32, i32* %353, align 4, !tbaa !18
  %357 = sext i32 %356 to i64
  %358 = getelementptr inbounds [18 x double], [18 x double]* %0, i64 0, i64 %357
  %359 = getelementptr inbounds i32, i32* %315, i64 3
  %360 = load i32, i32* %355, align 4, !tbaa !18
  %361 = getelementptr inbounds i32, i32* %315, i64 4
  %362 = load i32, i32* %359, align 4, !tbaa !18
  %363 = icmp eq i32 %360, 3
  %364 = sext i32 %360 to i64
  %365 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 16, i64 %364
  %366 = select i1 %363, double** %67, double** %365
  %367 = select i1 %363, i32 1, i32 3
  %368 = load double*, double** %366, align 8, !tbaa !7
  %369 = getelementptr inbounds i32, i32* %311, i64 1
  %370 = load i32, i32* %311, align 4, !tbaa !18
  %371 = shl i32 %370, %10
  %372 = sext i32 %371 to i64
  %373 = getelementptr inbounds double, double* %368, i64 %372
  %374 = load double, double* %373, align 8, !tbaa !27
  br label %375

375:                                              ; preds = %352, %347
  %376 = phi i32 [ %319, %347 ], [ %367, %352 ]
  %377 = phi i32 [ %318, %347 ], [ %360, %352 ]
  %378 = phi i32 [ %317, %347 ], [ %362, %352 ]
  %379 = phi double [ %316, %347 ], [ %374, %352 ]
  %380 = phi i32* [ %315, %347 ], [ %361, %352 ]
  %381 = phi i32 [ %314, %347 ], [ %354, %352 ]
  %382 = phi double* [ %312, %347 ], [ %358, %352 ]
  %383 = phi i32* [ %311, %347 ], [ %369, %352 ]
  %384 = add nsw i32 %381, -1
  %385 = and i32 %350, 8
  %386 = icmp eq i32 %385, 0
  br i1 %386, label %827, label %387

387:                                              ; preds = %375
  %388 = sext i32 %377 to i64
  %389 = getelementptr inbounds <4 x i32>, <4 x i32>* %7, i64 0, i64 %388
  store i32 %378, i32* %389, align 4, !tbaa !18
  %390 = icmp slt i32 %348, 1
  br i1 %390, label %303, label %391

391:                                              ; preds = %387
  %392 = add nsw i32 %348, -1
  %393 = load i8*, i8** @wordpointer, align 8, !tbaa !7
  %394 = load i8, i8* %393, align 1, !tbaa !26
  %395 = zext i8 %394 to i32
  %396 = load i32, i32* @bitindex, align 4, !tbaa !18
  %397 = shl i32 %395, %396
  %398 = add nsw i32 %396, 1
  %399 = ashr i32 %398, 3
  %400 = sext i32 %399 to i64
  %401 = getelementptr inbounds i8, i8* %393, i64 %400
  store i8* %401, i8** @wordpointer, align 8, !tbaa !7
  %402 = and i32 %398, 7
  store i32 %402, i32* @bitindex, align 4, !tbaa !18
  %403 = trunc i32 %397 to i8
  %404 = icmp sgt i8 %403, -1
  %405 = fneg double %379
  %406 = select i1 %404, double %379, double %405
  br label %827

407:                                              ; preds = %925, %914
  %408 = phi double [ 0.000000e+00, %914 ], [ %940, %925 ]
  %409 = phi i32 [ %916, %914 ], [ %926, %925 ]
  store double %408, double* %918, align 8, !tbaa !27
  %410 = getelementptr inbounds double, double* %918, i64 %917
  %411 = add nsw i32 %313, -1
  %412 = icmp ne i32 %411, 0
  %413 = icmp sgt i32 %409, 0
  %414 = and i1 %413, %412
  br i1 %414, label %310, label %303

415:                                              ; preds = %432, %303
  %416 = phi double* [ %440, %432 ], [ %308, %303 ]
  %417 = phi i32 [ %437, %432 ], [ %307, %303 ]
  %418 = phi i32* [ %434, %432 ], [ %306, %303 ]
  %419 = phi i32 [ %433, %432 ], [ %305, %303 ]
  %420 = icmp eq i32 %417, 0
  br i1 %420, label %421, label %432

421:                                              ; preds = %415
  %422 = getelementptr inbounds i32, i32* %418, i64 1
  %423 = load i32, i32* %418, align 4, !tbaa !18
  %424 = getelementptr inbounds i32, i32* %418, i64 2
  %425 = load i32, i32* %422, align 4, !tbaa !18
  %426 = sext i32 %425 to i64
  %427 = getelementptr inbounds [18 x double], [18 x double]* %0, i64 0, i64 %426
  %428 = load i32, i32* %424, align 4, !tbaa !18
  %429 = icmp eq i32 %428, 3
  %430 = select i1 %429, i32 1, i32 3
  %431 = getelementptr inbounds i32, i32* %418, i64 4
  br label %432

432:                                              ; preds = %421, %415
  %433 = phi i32 [ %419, %415 ], [ %430, %421 ]
  %434 = phi i32* [ %418, %415 ], [ %431, %421 ]
  %435 = phi i32 [ %417, %415 ], [ %423, %421 ]
  %436 = phi double* [ %416, %415 ], [ %427, %421 ]
  %437 = add nsw i32 %435, -1
  store double 0.000000e+00, double* %436, align 8, !tbaa !27
  %438 = sext i32 %433 to i64
  %439 = getelementptr inbounds double, double* %436, i64 %438
  store double 0.000000e+00, double* %439, align 8, !tbaa !27
  %440 = getelementptr inbounds double, double* %439, i64 %438
  %441 = icmp ult i32* %434, %66
  br i1 %441, label %415, label %442

442:                                              ; preds = %432, %303
  %443 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 8, i64 0
  %444 = load <4 x i32>, <4 x i32>* %7, align 16, !tbaa !18
  %445 = add nsw <4 x i32> %444, <i32 1, i32 1, i32 1, i32 1>
  %446 = bitcast i32* %443 to <4 x i32>*
  store <4 x i32> %445, <4 x i32>* %446, align 8, !tbaa !18
  %447 = extractelement <4 x i32> %444, i32 0
  %448 = extractelement <4 x i32> %444, i32 1
  %449 = icmp sgt i32 %447, %448
  %450 = select i1 %449, i32 %447, i32 %448
  %451 = extractelement <4 x i32> %444, i32 2
  %452 = icmp sgt i32 %450, %451
  %453 = select i1 %452, i32 %450, i32 %451
  %454 = add nsw i32 %453, 1
  %455 = icmp eq i32 %454, 0
  %456 = sext i32 %3 to i64
  %457 = sext i32 %454 to i64
  %458 = getelementptr inbounds [9 x [14 x i32]], [9 x [14 x i32]]* @shortLimit, i64 0, i64 %456, i64 %457
  %459 = extractelement <4 x i32> %445, i32 3
  %460 = sext i32 %459 to i64
  %461 = getelementptr inbounds [9 x [23 x i32]], [9 x [23 x i32]]* @longLimit, i64 0, i64 %456, i64 %460
  %462 = select i1 %455, i32* %461, i32* %458
  %463 = load i32, i32* %462, align 4, !tbaa !18
  %464 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 10
  store i32 %463, i32* %464, align 8, !tbaa !262
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %45) #21
  br label %806

465:                                              ; preds = %37
  %466 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 13
  %467 = load i32, i32* %466, align 4, !tbaa !253
  %468 = icmp eq i32 %467, 0
  %469 = select i1 %468, i32* getelementptr inbounds ([22 x i32], [22 x i32]* @pretab2, i64 0, i64 0), i32* getelementptr inbounds ([22 x i32], [22 x i32]* @pretab1, i64 0, i64 0)
  %470 = sext i32 %3 to i64
  %471 = getelementptr inbounds [9 x [3 x i32*]], [9 x [3 x i32*]]* @map, i64 0, i64 %470, i64 2
  %472 = load i32*, i32** %471, align 8, !tbaa !7
  %473 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 17
  br label %486

474:                                              ; preds = %677
  %475 = icmp ne i32 %23, 0
  %476 = icmp sgt i32 %678, 0
  %477 = and i1 %476, %475
  br i1 %477, label %478, label %786

478:                                              ; preds = %474
  %479 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 15
  %480 = load i32, i32* %479, align 4, !tbaa !251
  %481 = zext i32 %480 to i64
  %482 = getelementptr inbounds [2 x %struct.newhuff], [2 x %struct.newhuff]* @htc, i64 0, i64 %481, i32 1
  %483 = load i16*, i16** %482, align 8, !tbaa !272
  %484 = load i16, i16* %483, align 2, !tbaa !29
  %485 = icmp slt i16 %484, 0
  br label %692

486:                                              ; preds = %689, %465
  %487 = phi i32 [ %39, %465 ], [ %691, %689 ]
  %488 = phi i64 [ 0, %465 ], [ %687, %689 ]
  %489 = phi i32* [ %1, %465 ], [ %686, %689 ]
  %490 = phi i32 [ 0, %465 ], [ %685, %689 ]
  %491 = phi double [ 0.000000e+00, %465 ], [ %684, %689 ]
  %492 = phi i32* [ %472, %465 ], [ %683, %689 ]
  %493 = phi i32 [ 0, %465 ], [ %682, %689 ]
  %494 = phi i32 [ -1, %465 ], [ %681, %689 ]
  %495 = phi i32* [ %469, %465 ], [ %680, %689 ]
  %496 = phi double* [ %11, %465 ], [ %679, %689 ]
  %497 = phi i32 [ %15, %465 ], [ %678, %689 ]
  %498 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 6, i64 %488
  %499 = load i32, i32* %498, align 4, !tbaa !18
  %500 = zext i32 %499 to i64
  %501 = icmp eq i32 %487, 0
  br i1 %501, label %677, label %502

502:                                              ; preds = %486
  %503 = getelementptr inbounds [32 x %struct.newhuff], [32 x %struct.newhuff]* @ht.183, i64 0, i64 %500, i32 1
  %504 = load i16*, i16** %503, align 8, !tbaa !272
  %505 = getelementptr inbounds [32 x %struct.newhuff], [32 x %struct.newhuff]* @ht.183, i64 0, i64 %500, i32 0
  br label %506

506:                                              ; preds = %670, %502
  %507 = phi i32* [ %489, %502 ], [ %539, %670 ]
  %508 = phi i32 [ %487, %502 ], [ %674, %670 ]
  %509 = phi i32 [ %490, %502 ], [ %675, %670 ]
  %510 = phi double [ %491, %502 ], [ %537, %670 ]
  %511 = phi i32* [ %492, %502 ], [ %536, %670 ]
  %512 = phi i32 [ %493, %502 ], [ %535, %670 ]
  %513 = phi i32 [ %494, %502 ], [ %672, %670 ]
  %514 = phi i32* [ %495, %502 ], [ %534, %670 ]
  %515 = phi double* [ %496, %502 ], [ %673, %670 ]
  %516 = phi i32 [ %497, %502 ], [ %671, %670 ]
  %517 = icmp eq i32 %509, 0
  br i1 %517, label %518, label %533

518:                                              ; preds = %506
  %519 = getelementptr inbounds i32, i32* %511, i64 1
  %520 = load i32, i32* %511, align 4, !tbaa !18
  %521 = load double*, double** %473, align 8, !tbaa !244
  %522 = getelementptr inbounds i32, i32* %507, i64 1
  %523 = load i32, i32* %507, align 4, !tbaa !18
  %524 = getelementptr inbounds i32, i32* %514, i64 1
  %525 = load i32, i32* %514, align 4, !tbaa !18
  %526 = add nsw i32 %525, %523
  %527 = shl i32 %526, %10
  %528 = sext i32 %527 to i64
  %529 = getelementptr inbounds double, double* %521, i64 %528
  %530 = load double, double* %529, align 8, !tbaa !27
  %531 = getelementptr inbounds i32, i32* %511, i64 2
  %532 = load i32, i32* %519, align 4, !tbaa !18
  br label %533

533:                                              ; preds = %518, %506
  %534 = phi i32* [ %514, %506 ], [ %524, %518 ]
  %535 = phi i32 [ %512, %506 ], [ %532, %518 ]
  %536 = phi i32* [ %511, %506 ], [ %531, %518 ]
  %537 = phi double [ %510, %506 ], [ %530, %518 ]
  %538 = phi i32 [ %509, %506 ], [ %520, %518 ]
  %539 = phi i32* [ %507, %506 ], [ %522, %518 ]
  %540 = load i16, i16* %504, align 2, !tbaa !29
  %541 = icmp slt i16 %540, 0
  br i1 %541, label %542, label %566

542:                                              ; preds = %542, %533
  %543 = phi i16 [ %564, %542 ], [ %540, %533 ]
  %544 = phi i16* [ %562, %542 ], [ %504, %533 ]
  %545 = phi i32 [ %563, %542 ], [ %516, %533 ]
  %546 = getelementptr inbounds i16, i16* %544, i64 1
  %547 = load i8*, i8** @wordpointer, align 8, !tbaa !7
  %548 = load i8, i8* %547, align 1, !tbaa !26
  %549 = zext i8 %548 to i32
  %550 = load i32, i32* @bitindex, align 4, !tbaa !18
  %551 = shl i32 %549, %550
  %552 = add nsw i32 %550, 1
  %553 = ashr i32 %552, 3
  %554 = sext i32 %553 to i64
  %555 = getelementptr inbounds i8, i8* %547, i64 %554
  store i8* %555, i8** @wordpointer, align 8, !tbaa !7
  %556 = and i32 %552, 7
  store i32 %556, i32* @bitindex, align 4, !tbaa !18
  %557 = trunc i32 %551 to i8
  %558 = icmp sgt i8 %557, -1
  %559 = sext i16 %543 to i64
  %560 = sub nsw i64 0, %559
  %561 = getelementptr inbounds i16, i16* %546, i64 %560
  %562 = select i1 %558, i16* %546, i16* %561
  %563 = add nsw i32 %545, -1
  %564 = load i16, i16* %562, align 2, !tbaa !29
  %565 = icmp slt i16 %564, 0
  br i1 %565, label %542, label %566

566:                                              ; preds = %542, %533
  %567 = phi i32 [ %516, %533 ], [ %563, %542 ]
  %568 = phi i16 [ %540, %533 ], [ %564, %542 ]
  %569 = zext i16 %568 to i32
  %570 = lshr i32 %569, 4
  %571 = and i32 %569, 15
  switch i32 %570, label %598 [
    i32 15, label %572
    i32 0, label %618
  ]

572:                                              ; preds = %566
  %573 = load i32, i32* %505, align 16, !tbaa !274
  %574 = xor i32 %573, -1
  %575 = add i32 %567, %574
  %576 = tail call i32 @getbits(i32 %573) #21
  %577 = add i32 %576, 15
  %578 = load i8*, i8** @wordpointer, align 8, !tbaa !7
  %579 = load i8, i8* %578, align 1, !tbaa !26
  %580 = zext i8 %579 to i32
  %581 = load i32, i32* @bitindex, align 4, !tbaa !18
  %582 = shl i32 %580, %581
  %583 = add nsw i32 %581, 1
  %584 = ashr i32 %583, 3
  %585 = sext i32 %584 to i64
  %586 = getelementptr inbounds i8, i8* %578, i64 %585
  store i8* %586, i8** @wordpointer, align 8, !tbaa !7
  %587 = and i32 %583, 7
  store i32 %587, i32* @bitindex, align 4, !tbaa !18
  %588 = trunc i32 %582 to i8
  %589 = icmp sgt i8 %588, -1
  %590 = sext i32 %577 to i64
  %591 = getelementptr inbounds [8207 x double], [8207 x double]* @ispow, i64 0, i64 %590
  %592 = load double, double* %591, align 8, !tbaa !27
  br i1 %589, label %596, label %593

593:                                              ; preds = %572
  %594 = fneg double %592
  %595 = fmul double %537, %594
  store double %595, double* %515, align 8, !tbaa !27
  br label %619

596:                                              ; preds = %572
  %597 = fmul double %537, %592
  store double %597, double* %515, align 8, !tbaa !27
  br label %619

598:                                              ; preds = %566
  %599 = load i8*, i8** @wordpointer, align 8, !tbaa !7
  %600 = load i8, i8* %599, align 1, !tbaa !26
  %601 = zext i8 %600 to i32
  %602 = load i32, i32* @bitindex, align 4, !tbaa !18
  %603 = shl i32 %601, %602
  %604 = add nsw i32 %602, 1
  %605 = ashr i32 %604, 3
  %606 = sext i32 %605 to i64
  %607 = getelementptr inbounds i8, i8* %599, i64 %606
  store i8* %607, i8** @wordpointer, align 8, !tbaa !7
  %608 = and i32 %604, 7
  store i32 %608, i32* @bitindex, align 4, !tbaa !18
  %609 = trunc i32 %603 to i8
  %610 = icmp sgt i8 %609, -1
  %611 = zext i32 %570 to i64
  %612 = getelementptr inbounds [8207 x double], [8207 x double]* @ispow, i64 0, i64 %611
  %613 = load double, double* %612, align 8, !tbaa !27
  %614 = fneg double %613
  %615 = select i1 %610, double %613, double %614
  %616 = fmul double %537, %615
  store double %616, double* %515, align 8, !tbaa !27
  %617 = add nsw i32 %567, -1
  br label %619

618:                                              ; preds = %566
  store double 0.000000e+00, double* %515, align 8, !tbaa !27
  br label %619

619:                                              ; preds = %618, %598, %596, %593
  %620 = phi i32 [ %575, %593 ], [ %575, %596 ], [ %617, %598 ], [ %567, %618 ]
  %621 = phi i32 [ %535, %593 ], [ %535, %596 ], [ %535, %598 ], [ %513, %618 ]
  %622 = getelementptr inbounds double, double* %515, i64 1
  switch i32 %571, label %649 [
    i32 15, label %623
    i32 0, label %669
  ]

623:                                              ; preds = %619
  %624 = load i32, i32* %505, align 16, !tbaa !274
  %625 = xor i32 %624, -1
  %626 = add i32 %620, %625
  %627 = tail call i32 @getbits(i32 %624) #21
  %628 = add i32 %627, 15
  %629 = load i8*, i8** @wordpointer, align 8, !tbaa !7
  %630 = load i8, i8* %629, align 1, !tbaa !26
  %631 = zext i8 %630 to i32
  %632 = load i32, i32* @bitindex, align 4, !tbaa !18
  %633 = shl i32 %631, %632
  %634 = add nsw i32 %632, 1
  %635 = ashr i32 %634, 3
  %636 = sext i32 %635 to i64
  %637 = getelementptr inbounds i8, i8* %629, i64 %636
  store i8* %637, i8** @wordpointer, align 8, !tbaa !7
  %638 = and i32 %634, 7
  store i32 %638, i32* @bitindex, align 4, !tbaa !18
  %639 = trunc i32 %633 to i8
  %640 = icmp sgt i8 %639, -1
  %641 = sext i32 %628 to i64
  %642 = getelementptr inbounds [8207 x double], [8207 x double]* @ispow, i64 0, i64 %641
  %643 = load double, double* %642, align 8, !tbaa !27
  br i1 %640, label %647, label %644

644:                                              ; preds = %623
  %645 = fneg double %643
  %646 = fmul double %537, %645
  store double %646, double* %622, align 8, !tbaa !27
  br label %670

647:                                              ; preds = %623
  %648 = fmul double %537, %643
  store double %648, double* %622, align 8, !tbaa !27
  br label %670

649:                                              ; preds = %619
  %650 = load i8*, i8** @wordpointer, align 8, !tbaa !7
  %651 = load i8, i8* %650, align 1, !tbaa !26
  %652 = zext i8 %651 to i32
  %653 = load i32, i32* @bitindex, align 4, !tbaa !18
  %654 = shl i32 %652, %653
  %655 = add nsw i32 %653, 1
  %656 = ashr i32 %655, 3
  %657 = sext i32 %656 to i64
  %658 = getelementptr inbounds i8, i8* %650, i64 %657
  store i8* %658, i8** @wordpointer, align 8, !tbaa !7
  %659 = and i32 %655, 7
  store i32 %659, i32* @bitindex, align 4, !tbaa !18
  %660 = trunc i32 %654 to i8
  %661 = icmp sgt i8 %660, -1
  %662 = zext i32 %571 to i64
  %663 = getelementptr inbounds [8207 x double], [8207 x double]* @ispow, i64 0, i64 %662
  %664 = load double, double* %663, align 8, !tbaa !27
  %665 = fneg double %664
  %666 = select i1 %661, double %664, double %665
  %667 = fmul double %537, %666
  store double %667, double* %622, align 8, !tbaa !27
  %668 = add nsw i32 %620, -1
  br label %670

669:                                              ; preds = %619
  store double 0.000000e+00, double* %622, align 8, !tbaa !27
  br label %670

670:                                              ; preds = %669, %649, %647, %644
  %671 = phi i32 [ %626, %644 ], [ %626, %647 ], [ %668, %649 ], [ %620, %669 ]
  %672 = phi i32 [ %535, %644 ], [ %535, %647 ], [ %535, %649 ], [ %621, %669 ]
  %673 = getelementptr inbounds double, double* %515, i64 2
  %674 = add nsw i32 %508, -1
  %675 = add nsw i32 %538, -1
  %676 = icmp eq i32 %674, 0
  br i1 %676, label %677, label %506

677:                                              ; preds = %670, %486
  %678 = phi i32 [ %497, %486 ], [ %671, %670 ]
  %679 = phi double* [ %496, %486 ], [ %673, %670 ]
  %680 = phi i32* [ %495, %486 ], [ %534, %670 ]
  %681 = phi i32 [ %494, %486 ], [ %672, %670 ]
  %682 = phi i32 [ %493, %486 ], [ %535, %670 ]
  %683 = phi i32* [ %492, %486 ], [ %536, %670 ]
  %684 = phi double [ %491, %486 ], [ %537, %670 ]
  %685 = phi i32 [ %490, %486 ], [ %675, %670 ]
  %686 = phi i32* [ %489, %486 ], [ %539, %670 ]
  %687 = add nuw nsw i64 %488, 1
  %688 = icmp eq i64 %687, 3
  br i1 %688, label %474, label %689

689:                                              ; preds = %677
  %690 = getelementptr inbounds [3 x i32], [3 x i32]* %6, i64 0, i64 %687
  %691 = load i32, i32* %690, align 4, !tbaa !18
  br label %486

692:                                              ; preds = %777, %478
  %693 = phi i32* [ %686, %478 ], [ %993, %777 ]
  %694 = phi i32 [ %685, %478 ], [ %994, %777 ]
  %695 = phi double [ %684, %478 ], [ %991, %777 ]
  %696 = phi i32* [ %683, %478 ], [ %990, %777 ]
  %697 = phi i32 [ %682, %478 ], [ %989, %777 ]
  %698 = phi i32 [ %681, %478 ], [ %780, %777 ]
  %699 = phi i32* [ %680, %478 ], [ %988, %777 ]
  %700 = phi double* [ %679, %478 ], [ %781, %777 ]
  %701 = phi i32 [ %23, %478 ], [ %782, %777 ]
  %702 = phi i32 [ %678, %478 ], [ %779, %777 ]
  br i1 %485, label %703, label %729

703:                                              ; preds = %709, %692
  %704 = phi i16 [ %727, %709 ], [ %484, %692 ]
  %705 = phi i16* [ %726, %709 ], [ %483, %692 ]
  %706 = phi i32 [ %710, %709 ], [ %702, %692 ]
  %707 = getelementptr inbounds i16, i16* %705, i64 1
  %708 = icmp slt i32 %706, 1
  br i1 %708, label %729, label %709

709:                                              ; preds = %703
  %710 = add nsw i32 %706, -1
  %711 = load i8*, i8** @wordpointer, align 8, !tbaa !7
  %712 = load i8, i8* %711, align 1, !tbaa !26
  %713 = zext i8 %712 to i32
  %714 = load i32, i32* @bitindex, align 4, !tbaa !18
  %715 = shl i32 %713, %714
  %716 = add nsw i32 %714, 1
  %717 = ashr i32 %716, 3
  %718 = sext i32 %717 to i64
  %719 = getelementptr inbounds i8, i8* %711, i64 %718
  store i8* %719, i8** @wordpointer, align 8, !tbaa !7
  %720 = and i32 %716, 7
  store i32 %720, i32* @bitindex, align 4, !tbaa !18
  %721 = trunc i32 %715 to i8
  %722 = icmp sgt i8 %721, -1
  %723 = sext i16 %704 to i64
  %724 = sub nsw i64 0, %723
  %725 = getelementptr inbounds i16, i16* %707, i64 %724
  %726 = select i1 %722, i16* %707, i16* %725
  %727 = load i16, i16* %726, align 2, !tbaa !29
  %728 = icmp slt i16 %727, 0
  br i1 %728, label %703, label %729

729:                                              ; preds = %709, %703, %692
  %730 = phi i32 [ %702, %692 ], [ %706, %703 ], [ %710, %709 ]
  %731 = phi i16 [ %484, %692 ], [ 0, %703 ], [ %727, %709 ]
  %732 = zext i16 %731 to i32
  %733 = icmp eq i32 %694, 0
  br i1 %733, label %734, label %749

734:                                              ; preds = %729
  %735 = getelementptr inbounds i32, i32* %696, i64 1
  %736 = load i32, i32* %696, align 4, !tbaa !18
  %737 = getelementptr inbounds i32, i32* %696, i64 2
  %738 = load i32, i32* %735, align 4, !tbaa !18
  %739 = load double*, double** %473, align 8, !tbaa !244
  %740 = getelementptr inbounds i32, i32* %693, i64 1
  %741 = load i32, i32* %693, align 4, !tbaa !18
  %742 = getelementptr inbounds i32, i32* %699, i64 1
  %743 = load i32, i32* %699, align 4, !tbaa !18
  %744 = add nsw i32 %743, %741
  %745 = shl i32 %744, %10
  %746 = sext i32 %745 to i64
  %747 = getelementptr inbounds double, double* %739, i64 %746
  %748 = load double, double* %747, align 8, !tbaa !27
  br label %749

749:                                              ; preds = %734, %729
  %750 = phi i32* [ %699, %729 ], [ %742, %734 ]
  %751 = phi i32 [ %697, %729 ], [ %738, %734 ]
  %752 = phi i32* [ %696, %729 ], [ %737, %734 ]
  %753 = phi double [ %695, %729 ], [ %748, %734 ]
  %754 = phi i32 [ %694, %729 ], [ %736, %734 ]
  %755 = phi i32* [ %693, %729 ], [ %740, %734 ]
  %756 = add nsw i32 %754, -1
  %757 = and i32 %732, 8
  %758 = icmp eq i32 %757, 0
  br i1 %758, label %941, label %759

759:                                              ; preds = %749
  %760 = icmp slt i32 %730, 1
  br i1 %760, label %786, label %761

761:                                              ; preds = %759
  %762 = add nsw i32 %730, -1
  %763 = load i8*, i8** @wordpointer, align 8, !tbaa !7
  %764 = load i8, i8* %763, align 1, !tbaa !26
  %765 = zext i8 %764 to i32
  %766 = load i32, i32* @bitindex, align 4, !tbaa !18
  %767 = shl i32 %765, %766
  %768 = add nsw i32 %766, 1
  %769 = ashr i32 %768, 3
  %770 = sext i32 %769 to i64
  %771 = getelementptr inbounds i8, i8* %763, i64 %770
  store i8* %771, i8** @wordpointer, align 8, !tbaa !7
  %772 = and i32 %768, 7
  store i32 %772, i32* @bitindex, align 4, !tbaa !18
  %773 = trunc i32 %767 to i8
  %774 = icmp sgt i8 %773, -1
  %775 = fneg double %753
  %776 = select i1 %774, double %753, double %775
  br label %941

777:                                              ; preds = %1024, %1015
  %778 = phi double [ 0.000000e+00, %1015 ], [ %1039, %1024 ]
  %779 = phi i32 [ %1017, %1015 ], [ %1025, %1024 ]
  %780 = phi i32 [ %1018, %1015 ], [ %989, %1024 ]
  store double %778, double* %1019, align 8, !tbaa !27
  %781 = getelementptr inbounds double, double* %700, i64 4
  %782 = add nsw i32 %701, -1
  %783 = icmp ne i32 %782, 0
  %784 = icmp sgt i32 %779, 0
  %785 = and i1 %784, %783
  br i1 %785, label %692, label %786

786:                                              ; preds = %1022, %997, %948, %777, %759, %474
  %787 = phi i32 [ %678, %474 ], [ %730, %759 ], [ %943, %948 ], [ %968, %997 ], [ %1017, %1022 ], [ %779, %777 ]
  %788 = phi double* [ %679, %474 ], [ %700, %759 ], [ %945, %948 ], [ %970, %997 ], [ %1019, %1022 ], [ %781, %777 ]
  %789 = phi i32 [ %681, %474 ], [ %751, %759 ], [ %751, %948 ], [ %989, %997 ], [ %989, %1022 ], [ %780, %777 ]
  %790 = getelementptr inbounds [18 x double], [18 x double]* %0, i64 32, i64 0
  %791 = ptrtoint double* %790 to i64
  %792 = ptrtoint double* %788 to i64
  %793 = sub i64 %791, %792
  %794 = and i64 %793, 68719476720
  %795 = icmp eq i64 %794, 0
  br i1 %795, label %799, label %796

796:                                              ; preds = %786
  %797 = bitcast double* %788 to i8*
  %798 = and i64 %793, 68719476720
  call void @llvm.memset.p0i8.i64(i8* align 8 %797, i8 0, i64 %798, i1 false)
  br label %799

799:                                              ; preds = %796, %786
  %800 = add nsw i32 %789, 1
  %801 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 9
  store i32 %800, i32* %801, align 4, !tbaa !255
  %802 = zext i32 %800 to i64
  %803 = getelementptr inbounds [9 x [23 x i32]], [9 x [23 x i32]]* @longLimit, i64 0, i64 %470, i64 %802
  %804 = load i32, i32* %803, align 4, !tbaa !18
  %805 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 10
  store i32 %804, i32* %805, align 8, !tbaa !262
  br label %806

806:                                              ; preds = %799, %442
  %807 = phi i32 [ %304, %442 ], [ %787, %799 ]
  %808 = icmp sgt i32 %807, 16
  br i1 %808, label %809, label %814

809:                                              ; preds = %809, %806
  %810 = phi i32 [ %812, %809 ], [ %807, %806 ]
  %811 = tail call i32 @getbits(i32 16) #21
  %812 = add nsw i32 %810, -16
  %813 = icmp sgt i32 %810, 32
  br i1 %813, label %809, label %814

814:                                              ; preds = %809, %806
  %815 = phi i32 [ %807, %806 ], [ %812, %809 ]
  %816 = icmp sgt i32 %815, 0
  br i1 %816, label %817, label %819

817:                                              ; preds = %814
  %818 = tail call i32 @getbits(i32 %815) #21
  br label %825

819:                                              ; preds = %814
  %820 = icmp slt i32 %815, 0
  br i1 %820, label %821, label %825

821:                                              ; preds = %819
  %822 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %823 = sub nsw i32 0, %815
  %824 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %822, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.2.184, i64 0, i64 0), i32 %823) #19
  br label %825

825:                                              ; preds = %821, %819, %817
  %826 = phi i32 [ 1, %821 ], [ 0, %819 ], [ 0, %817 ]
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %12) #21
  ret i32 %826

827:                                              ; preds = %391, %375
  %828 = phi double [ 0.000000e+00, %375 ], [ %406, %391 ]
  %829 = phi i32 [ %348, %375 ], [ %392, %391 ]
  store double %828, double* %382, align 8, !tbaa !27
  %830 = sext i32 %376 to i64
  %831 = getelementptr inbounds double, double* %382, i64 %830
  %832 = and i32 %350, 4
  %833 = icmp eq i32 %832, 0
  br i1 %833, label %854, label %834

834:                                              ; preds = %827
  %835 = sext i32 %377 to i64
  %836 = getelementptr inbounds <4 x i32>, <4 x i32>* %7, i64 0, i64 %835
  store i32 %378, i32* %836, align 4, !tbaa !18
  %837 = icmp slt i32 %829, 1
  br i1 %837, label %303, label %838

838:                                              ; preds = %834
  %839 = add nsw i32 %829, -1
  %840 = load i8*, i8** @wordpointer, align 8, !tbaa !7
  %841 = load i8, i8* %840, align 1, !tbaa !26
  %842 = zext i8 %841 to i32
  %843 = load i32, i32* @bitindex, align 4, !tbaa !18
  %844 = shl i32 %842, %843
  %845 = add nsw i32 %843, 1
  %846 = ashr i32 %845, 3
  %847 = sext i32 %846 to i64
  %848 = getelementptr inbounds i8, i8* %840, i64 %847
  store i8* %848, i8** @wordpointer, align 8, !tbaa !7
  %849 = and i32 %845, 7
  store i32 %849, i32* @bitindex, align 4, !tbaa !18
  %850 = trunc i32 %844 to i8
  %851 = icmp sgt i8 %850, -1
  %852 = fneg double %379
  %853 = select i1 %851, double %379, double %852
  br label %854

854:                                              ; preds = %838, %827
  %855 = phi double [ 0.000000e+00, %827 ], [ %853, %838 ]
  %856 = phi i32 [ %829, %827 ], [ %839, %838 ]
  store double %855, double* %831, align 8, !tbaa !27
  %857 = getelementptr inbounds double, double* %831, i64 %830
  %858 = icmp eq i32 %384, 0
  br i1 %858, label %859, label %882

859:                                              ; preds = %854
  %860 = getelementptr inbounds i32, i32* %380, i64 1
  %861 = load i32, i32* %380, align 4, !tbaa !18
  %862 = getelementptr inbounds i32, i32* %380, i64 2
  %863 = load i32, i32* %860, align 4, !tbaa !18
  %864 = sext i32 %863 to i64
  %865 = getelementptr inbounds [18 x double], [18 x double]* %0, i64 0, i64 %864
  %866 = getelementptr inbounds i32, i32* %380, i64 3
  %867 = load i32, i32* %862, align 4, !tbaa !18
  %868 = getelementptr inbounds i32, i32* %380, i64 4
  %869 = load i32, i32* %866, align 4, !tbaa !18
  %870 = icmp eq i32 %867, 3
  %871 = sext i32 %867 to i64
  %872 = getelementptr inbounds %struct.gr_info_s, %struct.gr_info_s* %2, i64 0, i32 16, i64 %871
  %873 = select i1 %870, double** %67, double** %872
  %874 = select i1 %870, i32 1, i32 3
  %875 = load double*, double** %873, align 8, !tbaa !7
  %876 = getelementptr inbounds i32, i32* %383, i64 1
  %877 = load i32, i32* %383, align 4, !tbaa !18
  %878 = shl i32 %877, %10
  %879 = sext i32 %878 to i64
  %880 = getelementptr inbounds double, double* %875, i64 %879
  %881 = load double, double* %880, align 8, !tbaa !27
  br label %882

882:                                              ; preds = %859, %854
  %883 = phi i32 [ %376, %854 ], [ %874, %859 ]
  %884 = phi i32 [ %377, %854 ], [ %867, %859 ]
  %885 = phi i32 [ %378, %854 ], [ %869, %859 ]
  %886 = phi double [ %379, %854 ], [ %881, %859 ]
  %887 = phi i32* [ %380, %854 ], [ %868, %859 ]
  %888 = phi i32 [ %384, %854 ], [ %861, %859 ]
  %889 = phi double* [ %857, %854 ], [ %865, %859 ]
  %890 = phi i32* [ %383, %854 ], [ %876, %859 ]
  %891 = add nsw i32 %888, -1
  %892 = and i32 %350, 2
  %893 = icmp eq i32 %892, 0
  br i1 %893, label %914, label %894

894:                                              ; preds = %882
  %895 = sext i32 %884 to i64
  %896 = getelementptr inbounds <4 x i32>, <4 x i32>* %7, i64 0, i64 %895
  store i32 %885, i32* %896, align 4, !tbaa !18
  %897 = icmp slt i32 %856, 1
  br i1 %897, label %303, label %898

898:                                              ; preds = %894
  %899 = add nsw i32 %856, -1
  %900 = load i8*, i8** @wordpointer, align 8, !tbaa !7
  %901 = load i8, i8* %900, align 1, !tbaa !26
  %902 = zext i8 %901 to i32
  %903 = load i32, i32* @bitindex, align 4, !tbaa !18
  %904 = shl i32 %902, %903
  %905 = add nsw i32 %903, 1
  %906 = ashr i32 %905, 3
  %907 = sext i32 %906 to i64
  %908 = getelementptr inbounds i8, i8* %900, i64 %907
  store i8* %908, i8** @wordpointer, align 8, !tbaa !7
  %909 = and i32 %905, 7
  store i32 %909, i32* @bitindex, align 4, !tbaa !18
  %910 = trunc i32 %904 to i8
  %911 = icmp sgt i8 %910, -1
  %912 = fneg double %886
  %913 = select i1 %911, double %886, double %912
  br label %914

914:                                              ; preds = %898, %882
  %915 = phi double [ 0.000000e+00, %882 ], [ %913, %898 ]
  %916 = phi i32 [ %856, %882 ], [ %899, %898 ]
  store double %915, double* %889, align 8, !tbaa !27
  %917 = sext i32 %883 to i64
  %918 = getelementptr inbounds double, double* %889, i64 %917
  %919 = and i32 %350, 1
  %920 = icmp eq i32 %919, 0
  br i1 %920, label %407, label %921

921:                                              ; preds = %914
  %922 = sext i32 %884 to i64
  %923 = getelementptr inbounds <4 x i32>, <4 x i32>* %7, i64 0, i64 %922
  store i32 %885, i32* %923, align 4, !tbaa !18
  %924 = icmp slt i32 %916, 1
  br i1 %924, label %303, label %925

925:                                              ; preds = %921
  %926 = add nsw i32 %916, -1
  %927 = load i8*, i8** @wordpointer, align 8, !tbaa !7
  %928 = load i8, i8* %927, align 1, !tbaa !26
  %929 = zext i8 %928 to i32
  %930 = load i32, i32* @bitindex, align 4, !tbaa !18
  %931 = shl i32 %929, %930
  %932 = add nsw i32 %930, 1
  %933 = ashr i32 %932, 3
  %934 = sext i32 %933 to i64
  %935 = getelementptr inbounds i8, i8* %927, i64 %934
  store i8* %935, i8** @wordpointer, align 8, !tbaa !7
  %936 = and i32 %932, 7
  store i32 %936, i32* @bitindex, align 4, !tbaa !18
  %937 = trunc i32 %931 to i8
  %938 = icmp sgt i8 %937, -1
  %939 = fneg double %886
  %940 = select i1 %938, double %886, double %939
  br label %407

941:                                              ; preds = %761, %749
  %942 = phi double [ 0.000000e+00, %749 ], [ %776, %761 ]
  %943 = phi i32 [ %730, %749 ], [ %762, %761 ]
  %944 = phi i32 [ %698, %749 ], [ %751, %761 ]
  store double %942, double* %700, align 8, !tbaa !27
  %945 = getelementptr inbounds double, double* %700, i64 1
  %946 = and i32 %732, 4
  %947 = icmp eq i32 %946, 0
  br i1 %947, label %966, label %948

948:                                              ; preds = %941
  %949 = icmp slt i32 %943, 1
  br i1 %949, label %786, label %950

950:                                              ; preds = %948
  %951 = add nsw i32 %943, -1
  %952 = load i8*, i8** @wordpointer, align 8, !tbaa !7
  %953 = load i8, i8* %952, align 1, !tbaa !26
  %954 = zext i8 %953 to i32
  %955 = load i32, i32* @bitindex, align 4, !tbaa !18
  %956 = shl i32 %954, %955
  %957 = add nsw i32 %955, 1
  %958 = ashr i32 %957, 3
  %959 = sext i32 %958 to i64
  %960 = getelementptr inbounds i8, i8* %952, i64 %959
  store i8* %960, i8** @wordpointer, align 8, !tbaa !7
  %961 = and i32 %957, 7
  store i32 %961, i32* @bitindex, align 4, !tbaa !18
  %962 = trunc i32 %956 to i8
  %963 = icmp sgt i8 %962, -1
  %964 = fneg double %753
  %965 = select i1 %963, double %753, double %964
  br label %966

966:                                              ; preds = %950, %941
  %967 = phi double [ 0.000000e+00, %941 ], [ %965, %950 ]
  %968 = phi i32 [ %943, %941 ], [ %951, %950 ]
  %969 = phi i32 [ %944, %941 ], [ %751, %950 ]
  store double %967, double* %945, align 8, !tbaa !27
  %970 = getelementptr inbounds double, double* %700, i64 2
  %971 = icmp eq i32 %756, 0
  br i1 %971, label %972, label %987

972:                                              ; preds = %966
  %973 = getelementptr inbounds i32, i32* %752, i64 1
  %974 = load i32, i32* %752, align 4, !tbaa !18
  %975 = getelementptr inbounds i32, i32* %752, i64 2
  %976 = load i32, i32* %973, align 4, !tbaa !18
  %977 = load double*, double** %473, align 8, !tbaa !244
  %978 = getelementptr inbounds i32, i32* %755, i64 1
  %979 = load i32, i32* %755, align 4, !tbaa !18
  %980 = getelementptr inbounds i32, i32* %750, i64 1
  %981 = load i32, i32* %750, align 4, !tbaa !18
  %982 = add nsw i32 %981, %979
  %983 = shl i32 %982, %10
  %984 = sext i32 %983 to i64
  %985 = getelementptr inbounds double, double* %977, i64 %984
  %986 = load double, double* %985, align 8, !tbaa !27
  br label %987

987:                                              ; preds = %972, %966
  %988 = phi i32* [ %750, %966 ], [ %980, %972 ]
  %989 = phi i32 [ %751, %966 ], [ %976, %972 ]
  %990 = phi i32* [ %752, %966 ], [ %975, %972 ]
  %991 = phi double [ %753, %966 ], [ %986, %972 ]
  %992 = phi i32 [ %756, %966 ], [ %974, %972 ]
  %993 = phi i32* [ %755, %966 ], [ %978, %972 ]
  %994 = add nsw i32 %992, -1
  %995 = and i32 %732, 2
  %996 = icmp eq i32 %995, 0
  br i1 %996, label %1015, label %997

997:                                              ; preds = %987
  %998 = icmp slt i32 %968, 1
  br i1 %998, label %786, label %999

999:                                              ; preds = %997
  %1000 = add nsw i32 %968, -1
  %1001 = load i8*, i8** @wordpointer, align 8, !tbaa !7
  %1002 = load i8, i8* %1001, align 1, !tbaa !26
  %1003 = zext i8 %1002 to i32
  %1004 = load i32, i32* @bitindex, align 4, !tbaa !18
  %1005 = shl i32 %1003, %1004
  %1006 = add nsw i32 %1004, 1
  %1007 = ashr i32 %1006, 3
  %1008 = sext i32 %1007 to i64
  %1009 = getelementptr inbounds i8, i8* %1001, i64 %1008
  store i8* %1009, i8** @wordpointer, align 8, !tbaa !7
  %1010 = and i32 %1006, 7
  store i32 %1010, i32* @bitindex, align 4, !tbaa !18
  %1011 = trunc i32 %1005 to i8
  %1012 = icmp sgt i8 %1011, -1
  %1013 = fneg double %991
  %1014 = select i1 %1012, double %991, double %1013
  br label %1015

1015:                                             ; preds = %999, %987
  %1016 = phi double [ 0.000000e+00, %987 ], [ %1014, %999 ]
  %1017 = phi i32 [ %968, %987 ], [ %1000, %999 ]
  %1018 = phi i32 [ %969, %987 ], [ %989, %999 ]
  store double %1016, double* %970, align 8, !tbaa !27
  %1019 = getelementptr inbounds double, double* %700, i64 3
  %1020 = and i32 %732, 1
  %1021 = icmp eq i32 %1020, 0
  br i1 %1021, label %777, label %1022

1022:                                             ; preds = %1015
  %1023 = icmp slt i32 %1017, 1
  br i1 %1023, label %786, label %1024

1024:                                             ; preds = %1022
  %1025 = add nsw i32 %1017, -1
  %1026 = load i8*, i8** @wordpointer, align 8, !tbaa !7
  %1027 = load i8, i8* %1026, align 1, !tbaa !26
  %1028 = zext i8 %1027 to i32
  %1029 = load i32, i32* @bitindex, align 4, !tbaa !18
  %1030 = shl i32 %1028, %1029
  %1031 = add nsw i32 %1029, 1
  %1032 = ashr i32 %1031, 3
  %1033 = sext i32 %1032 to i64
  %1034 = getelementptr inbounds i8, i8* %1026, i64 %1033
  store i8* %1034, i8** @wordpointer, align 8, !tbaa !7
  %1035 = and i32 %1031, 7
  store i32 %1035, i32* @bitindex, align 4, !tbaa !18
  %1036 = trunc i32 %1030 to i8
  %1037 = icmp sgt i8 %1036, -1
  %1038 = fneg double %991
  %1039 = select i1 %1037, double %991, double %1038
  br label %777
}

; Function Attrs: nofree norecurse nounwind uwtable
define internal fastcc void @dct36(double* %0, double* nocapture readonly %1, double* nocapture %2, double* readonly %3, double* nocapture %4) unnamed_addr #5 {
  %6 = getelementptr inbounds double, double* %0, i64 16
  %7 = load double, double* %6, align 8, !tbaa !27
  %8 = getelementptr inbounds double, double* %0, i64 17
  %9 = load double, double* %8, align 8, !tbaa !27
  %10 = fadd double %7, %9
  %11 = getelementptr inbounds double, double* %0, i64 15
  %12 = load double, double* %11, align 8, !tbaa !27
  %13 = fadd double %7, %12
  store double %13, double* %6, align 8, !tbaa !27
  %14 = getelementptr inbounds double, double* %0, i64 14
  %15 = load double, double* %14, align 8, !tbaa !27
  %16 = fadd double %12, %15
  %17 = getelementptr inbounds double, double* %0, i64 13
  %18 = load double, double* %17, align 8, !tbaa !27
  %19 = fadd double %15, %18
  store double %19, double* %14, align 8, !tbaa !27
  %20 = getelementptr inbounds double, double* %0, i64 12
  %21 = load double, double* %20, align 8, !tbaa !27
  %22 = fadd double %18, %21
  %23 = getelementptr inbounds double, double* %0, i64 11
  %24 = load double, double* %23, align 8, !tbaa !27
  %25 = fadd double %21, %24
  store double %25, double* %20, align 8, !tbaa !27
  %26 = getelementptr inbounds double, double* %0, i64 10
  %27 = load double, double* %26, align 8, !tbaa !27
  %28 = fadd double %24, %27
  %29 = getelementptr inbounds double, double* %0, i64 9
  %30 = load double, double* %29, align 8, !tbaa !27
  %31 = fadd double %27, %30
  store double %31, double* %26, align 8, !tbaa !27
  %32 = getelementptr inbounds double, double* %0, i64 8
  %33 = load double, double* %32, align 8, !tbaa !27
  %34 = fadd double %30, %33
  %35 = getelementptr inbounds double, double* %0, i64 7
  %36 = load double, double* %35, align 8, !tbaa !27
  %37 = fadd double %33, %36
  store double %37, double* %32, align 8, !tbaa !27
  %38 = getelementptr inbounds double, double* %0, i64 6
  %39 = load double, double* %38, align 8, !tbaa !27
  %40 = fadd double %36, %39
  %41 = getelementptr inbounds double, double* %0, i64 5
  %42 = load double, double* %41, align 8, !tbaa !27
  %43 = fadd double %39, %42
  store double %43, double* %38, align 8, !tbaa !27
  %44 = getelementptr inbounds double, double* %0, i64 4
  %45 = load double, double* %44, align 8, !tbaa !27
  %46 = fadd double %42, %45
  %47 = getelementptr inbounds double, double* %0, i64 3
  %48 = load double, double* %47, align 8, !tbaa !27
  %49 = fadd double %45, %48
  store double %49, double* %44, align 8, !tbaa !27
  %50 = getelementptr inbounds double, double* %0, i64 2
  %51 = getelementptr inbounds double, double* %0, i64 1
  %52 = bitcast double* %51 to <2 x double>*
  %53 = load <2 x double>, <2 x double>* %52, align 8, !tbaa !27
  %54 = extractelement <2 x double> %53, i32 1
  %55 = fadd double %48, %54
  %56 = load double, double* %0, align 8, !tbaa !27
  %57 = insertelement <2 x double> undef, double %56, i32 0
  %58 = shufflevector <2 x double> %57, <2 x double> %53, <2 x i32> <i32 0, i32 2>
  %59 = fadd <2 x double> %53, %58
  %60 = bitcast double* %51 to <2 x double>*
  store <2 x double> %59, <2 x double>* %60, align 8, !tbaa !27
  %61 = fadd double %10, %16
  store double %61, double* %8, align 8, !tbaa !27
  %62 = fadd double %16, %22
  store double %62, double* %11, align 8, !tbaa !27
  %63 = fadd double %22, %28
  store double %63, double* %17, align 8, !tbaa !27
  %64 = fadd double %28, %34
  store double %64, double* %23, align 8, !tbaa !27
  %65 = fadd double %34, %40
  store double %65, double* %29, align 8, !tbaa !27
  %66 = fadd double %40, %46
  store double %66, double* %35, align 8, !tbaa !27
  %67 = fadd double %46, %55
  store double %67, double* %41, align 8, !tbaa !27
  %68 = extractelement <2 x double> %59, i32 0
  %69 = fadd double %55, %68
  store double %69, double* %47, align 8, !tbaa !27
  %70 = load double, double* @COS9.3, align 16, !tbaa !27
  %71 = fmul double %43, %70
  %72 = load double, double* @COS9.6, align 16, !tbaa !27
  %73 = fmul double %25, %72
  %74 = fmul double %66, %70
  %75 = fmul double %63, %72
  %76 = load double, double* @COS9.1, align 16, !tbaa !27
  %77 = extractelement <2 x double> %59, i32 1
  %78 = fmul double %77, %76
  %79 = fadd double %71, %78
  %80 = load double, double* @COS9.5, align 16, !tbaa !27
  %81 = fmul double %31, %80
  %82 = fadd double %79, %81
  %83 = load double, double* @COS9.7, align 16, !tbaa !27
  %84 = fmul double %19, %83
  %85 = fadd double %82, %84
  %86 = fmul double %69, %76
  %87 = fadd double %74, %86
  %88 = fmul double %64, %80
  %89 = fadd double %87, %88
  %90 = fmul double %62, %83
  %91 = fadd double %89, %90
  %92 = load double, double* @COS9.2, align 16, !tbaa !27
  %93 = fmul double %49, %92
  %94 = fadd double %56, %93
  %95 = load double, double* @COS9.4, align 16, !tbaa !27
  %96 = fmul double %37, %95
  %97 = fadd double %94, %96
  %98 = fadd double %73, %97
  %99 = load double, double* @COS9.8, align 16, !tbaa !27
  %100 = fmul double %13, %99
  %101 = fadd double %100, %98
  %102 = fmul double %67, %92
  %103 = fadd double %68, %102
  %104 = fmul double %65, %95
  %105 = fadd double %103, %104
  %106 = fadd double %75, %105
  %107 = fmul double %61, %99
  %108 = fadd double %107, %106
  %109 = fadd double %85, %101
  %110 = fadd double %91, %108
  %111 = load double, double* @tfcos36.0, align 16, !tbaa !27
  %112 = fmul double %111, %110
  %113 = fadd double %109, %112
  %114 = getelementptr inbounds double, double* %3, i64 27
  %115 = load double, double* %114, align 8, !tbaa !27
  %116 = fmul double %115, %113
  %117 = getelementptr inbounds double, double* %2, i64 9
  store double %116, double* %117, align 8, !tbaa !27
  %118 = getelementptr inbounds double, double* %3, i64 26
  %119 = load double, double* %118, align 8, !tbaa !27
  %120 = fmul double %119, %113
  %121 = getelementptr inbounds double, double* %2, i64 8
  store double %120, double* %121, align 8, !tbaa !27
  %122 = fsub double %109, %112
  %123 = getelementptr inbounds double, double* %1, i64 8
  %124 = load double, double* %123, align 8, !tbaa !27
  %125 = getelementptr inbounds double, double* %3, i64 8
  %126 = load double, double* %125, align 8, !tbaa !27
  %127 = fmul double %122, %126
  %128 = fadd double %124, %127
  %129 = getelementptr inbounds double, double* %4, i64 256
  store double %128, double* %129, align 8, !tbaa !27
  %130 = getelementptr inbounds double, double* %1, i64 9
  %131 = load double, double* %130, align 8, !tbaa !27
  %132 = getelementptr inbounds double, double* %3, i64 9
  %133 = load double, double* %132, align 8, !tbaa !27
  %134 = fmul double %122, %133
  %135 = fadd double %131, %134
  %136 = getelementptr inbounds double, double* %4, i64 288
  store double %135, double* %136, align 8, !tbaa !27
  %137 = fsub double %101, %85
  %138 = fsub double %108, %91
  %139 = load double, double* @tfcos36.8, align 16, !tbaa !27
  %140 = fmul double %138, %139
  %141 = fadd double %137, %140
  %142 = getelementptr inbounds double, double* %3, i64 35
  %143 = load double, double* %142, align 8, !tbaa !27
  %144 = fmul double %143, %141
  %145 = getelementptr inbounds double, double* %2, i64 17
  store double %144, double* %145, align 8, !tbaa !27
  %146 = getelementptr inbounds double, double* %3, i64 18
  %147 = load double, double* %146, align 8, !tbaa !27
  %148 = fmul double %141, %147
  store double %148, double* %2, align 8, !tbaa !27
  %149 = fsub double %137, %140
  %150 = load double, double* %1, align 8, !tbaa !27
  %151 = load double, double* %3, align 8, !tbaa !27
  %152 = fmul double %149, %151
  %153 = fadd double %150, %152
  store double %153, double* %4, align 8, !tbaa !27
  %154 = getelementptr inbounds double, double* %1, i64 17
  %155 = load double, double* %154, align 8, !tbaa !27
  %156 = getelementptr inbounds double, double* %3, i64 17
  %157 = load double, double* %156, align 8, !tbaa !27
  %158 = fmul double %149, %157
  %159 = fadd double %155, %158
  %160 = getelementptr inbounds double, double* %4, i64 544
  store double %159, double* %160, align 8, !tbaa !27
  %161 = load double, double* %50, align 8, !tbaa !27
  %162 = load double, double* %26, align 8, !tbaa !27
  %163 = fsub double %161, %162
  %164 = load double, double* %14, align 8, !tbaa !27
  %165 = fsub double %163, %164
  %166 = fmul double %70, %165
  %167 = load double, double* %47, align 8, !tbaa !27
  %168 = load double, double* %23, align 8, !tbaa !27
  %169 = fsub double %167, %168
  %170 = load double, double* %11, align 8, !tbaa !27
  %171 = fsub double %169, %170
  %172 = fmul double %70, %171
  %173 = load double, double* %44, align 8, !tbaa !27
  %174 = load double, double* %32, align 8, !tbaa !27
  %175 = fsub double %173, %174
  %176 = load double, double* %6, align 8, !tbaa !27
  %177 = fsub double %175, %176
  %178 = fmul double %72, %177
  %179 = load double, double* %20, align 8, !tbaa !27
  %180 = fsub double %178, %179
  %181 = load double, double* %0, align 8, !tbaa !27
  %182 = fadd double %181, %180
  %183 = load double, double* %41, align 8, !tbaa !27
  %184 = load double, double* %29, align 8, !tbaa !27
  %185 = fsub double %183, %184
  %186 = load double, double* %8, align 8, !tbaa !27
  %187 = fsub double %185, %186
  %188 = fmul double %72, %187
  %189 = load double, double* %17, align 8, !tbaa !27
  %190 = fsub double %188, %189
  %191 = load double, double* %51, align 8, !tbaa !27
  %192 = fadd double %191, %190
  %193 = fadd double %166, %182
  %194 = fadd double %172, %192
  %195 = load double, double* @tfcos36.1, align 16, !tbaa !27
  %196 = fmul double %195, %194
  %197 = fadd double %193, %196
  %198 = getelementptr inbounds double, double* %3, i64 28
  %199 = load double, double* %198, align 8, !tbaa !27
  %200 = fmul double %199, %197
  %201 = getelementptr inbounds double, double* %2, i64 10
  store double %200, double* %201, align 8, !tbaa !27
  %202 = getelementptr inbounds double, double* %3, i64 25
  %203 = load double, double* %202, align 8, !tbaa !27
  %204 = fmul double %203, %197
  %205 = getelementptr inbounds double, double* %2, i64 7
  store double %204, double* %205, align 8, !tbaa !27
  %206 = fsub double %193, %196
  %207 = getelementptr inbounds double, double* %1, i64 7
  %208 = load double, double* %207, align 8, !tbaa !27
  %209 = getelementptr inbounds double, double* %3, i64 7
  %210 = load double, double* %209, align 8, !tbaa !27
  %211 = fmul double %206, %210
  %212 = fadd double %208, %211
  %213 = getelementptr inbounds double, double* %4, i64 224
  store double %212, double* %213, align 8, !tbaa !27
  %214 = getelementptr inbounds double, double* %1, i64 10
  %215 = load double, double* %214, align 8, !tbaa !27
  %216 = getelementptr inbounds double, double* %3, i64 10
  %217 = load double, double* %216, align 8, !tbaa !27
  %218 = fmul double %206, %217
  %219 = fadd double %215, %218
  %220 = getelementptr inbounds double, double* %4, i64 320
  store double %219, double* %220, align 8, !tbaa !27
  %221 = fsub double %182, %166
  %222 = fsub double %192, %172
  %223 = load double, double* @tfcos36.7, align 16, !tbaa !27
  %224 = fmul double %222, %223
  %225 = fadd double %221, %224
  %226 = getelementptr inbounds double, double* %3, i64 34
  %227 = load double, double* %226, align 8, !tbaa !27
  %228 = fmul double %227, %225
  %229 = getelementptr inbounds double, double* %2, i64 16
  store double %228, double* %229, align 8, !tbaa !27
  %230 = getelementptr inbounds double, double* %3, i64 19
  %231 = load double, double* %230, align 8, !tbaa !27
  %232 = fmul double %225, %231
  %233 = getelementptr inbounds double, double* %2, i64 1
  store double %232, double* %233, align 8, !tbaa !27
  %234 = fsub double %221, %224
  %235 = getelementptr inbounds double, double* %1, i64 1
  %236 = load double, double* %235, align 8, !tbaa !27
  %237 = getelementptr inbounds double, double* %3, i64 1
  %238 = load double, double* %237, align 8, !tbaa !27
  %239 = fmul double %234, %238
  %240 = fadd double %236, %239
  %241 = getelementptr inbounds double, double* %4, i64 32
  store double %240, double* %241, align 8, !tbaa !27
  %242 = getelementptr inbounds double, double* %1, i64 16
  %243 = load double, double* %242, align 8, !tbaa !27
  %244 = getelementptr inbounds double, double* %3, i64 16
  %245 = load double, double* %244, align 8, !tbaa !27
  %246 = fmul double %234, %245
  %247 = fadd double %243, %246
  %248 = getelementptr inbounds double, double* %4, i64 512
  store double %247, double* %248, align 8, !tbaa !27
  %249 = load double, double* %50, align 8, !tbaa !27
  %250 = fmul double %80, %249
  %251 = fsub double %250, %71
  %252 = load double, double* %26, align 8, !tbaa !27
  %253 = fmul double %83, %252
  %254 = fsub double %251, %253
  %255 = load double, double* %14, align 8, !tbaa !27
  %256 = fmul double %76, %255
  %257 = fadd double %254, %256
  %258 = load double, double* %47, align 8, !tbaa !27
  %259 = fmul double %80, %258
  %260 = fsub double %259, %74
  %261 = load double, double* %23, align 8, !tbaa !27
  %262 = fmul double %83, %261
  %263 = fsub double %260, %262
  %264 = load double, double* %11, align 8, !tbaa !27
  %265 = fmul double %76, %264
  %266 = fadd double %263, %265
  %267 = load double, double* %0, align 8, !tbaa !27
  %268 = load double, double* %44, align 8, !tbaa !27
  %269 = fmul double %99, %268
  %270 = fsub double %267, %269
  %271 = load double, double* %32, align 8, !tbaa !27
  %272 = fmul double %92, %271
  %273 = fsub double %270, %272
  %274 = fadd double %73, %273
  %275 = load double, double* %6, align 8, !tbaa !27
  %276 = fmul double %95, %275
  %277 = fadd double %276, %274
  %278 = load double, double* %51, align 8, !tbaa !27
  %279 = load double, double* %41, align 8, !tbaa !27
  %280 = fmul double %99, %279
  %281 = fsub double %278, %280
  %282 = load double, double* %29, align 8, !tbaa !27
  %283 = fmul double %92, %282
  %284 = fsub double %281, %283
  %285 = fadd double %75, %284
  %286 = load double, double* %8, align 8, !tbaa !27
  %287 = fmul double %95, %286
  %288 = fadd double %287, %285
  %289 = fadd double %257, %277
  %290 = fadd double %266, %288
  %291 = load double, double* @tfcos36.2, align 16, !tbaa !27
  %292 = fmul double %291, %290
  %293 = fadd double %289, %292
  %294 = getelementptr inbounds double, double* %3, i64 29
  %295 = load double, double* %294, align 8, !tbaa !27
  %296 = fmul double %295, %293
  %297 = getelementptr inbounds double, double* %2, i64 11
  store double %296, double* %297, align 8, !tbaa !27
  %298 = getelementptr inbounds double, double* %3, i64 24
  %299 = load double, double* %298, align 8, !tbaa !27
  %300 = fmul double %299, %293
  %301 = getelementptr inbounds double, double* %2, i64 6
  store double %300, double* %301, align 8, !tbaa !27
  %302 = fsub double %289, %292
  %303 = getelementptr inbounds double, double* %1, i64 6
  %304 = load double, double* %303, align 8, !tbaa !27
  %305 = getelementptr inbounds double, double* %3, i64 6
  %306 = load double, double* %305, align 8, !tbaa !27
  %307 = fmul double %302, %306
  %308 = fadd double %304, %307
  %309 = getelementptr inbounds double, double* %4, i64 192
  store double %308, double* %309, align 8, !tbaa !27
  %310 = getelementptr inbounds double, double* %1, i64 11
  %311 = load double, double* %310, align 8, !tbaa !27
  %312 = getelementptr inbounds double, double* %3, i64 11
  %313 = load double, double* %312, align 8, !tbaa !27
  %314 = fmul double %302, %313
  %315 = fadd double %311, %314
  %316 = getelementptr inbounds double, double* %4, i64 352
  store double %315, double* %316, align 8, !tbaa !27
  %317 = fsub double %277, %257
  %318 = fsub double %288, %266
  %319 = load double, double* @tfcos36.6, align 16, !tbaa !27
  %320 = fmul double %318, %319
  %321 = fadd double %317, %320
  %322 = getelementptr inbounds double, double* %3, i64 33
  %323 = load double, double* %322, align 8, !tbaa !27
  %324 = fmul double %323, %321
  %325 = getelementptr inbounds double, double* %2, i64 15
  store double %324, double* %325, align 8, !tbaa !27
  %326 = getelementptr inbounds double, double* %3, i64 20
  %327 = load double, double* %326, align 8, !tbaa !27
  %328 = fmul double %321, %327
  %329 = getelementptr inbounds double, double* %2, i64 2
  store double %328, double* %329, align 8, !tbaa !27
  %330 = fsub double %317, %320
  %331 = getelementptr inbounds double, double* %1, i64 2
  %332 = load double, double* %331, align 8, !tbaa !27
  %333 = getelementptr inbounds double, double* %3, i64 2
  %334 = load double, double* %333, align 8, !tbaa !27
  %335 = fmul double %330, %334
  %336 = fadd double %332, %335
  %337 = getelementptr inbounds double, double* %4, i64 64
  store double %336, double* %337, align 8, !tbaa !27
  %338 = getelementptr inbounds double, double* %1, i64 15
  %339 = load double, double* %338, align 8, !tbaa !27
  %340 = getelementptr inbounds double, double* %3, i64 15
  %341 = load double, double* %340, align 8, !tbaa !27
  %342 = fmul double %330, %341
  %343 = fadd double %339, %342
  %344 = getelementptr inbounds double, double* %4, i64 480
  store double %343, double* %344, align 8, !tbaa !27
  %345 = load double, double* %50, align 8, !tbaa !27
  %346 = fmul double %83, %345
  %347 = fsub double %346, %71
  %348 = load double, double* %26, align 8, !tbaa !27
  %349 = fmul double %76, %348
  %350 = fadd double %347, %349
  %351 = load double, double* %14, align 8, !tbaa !27
  %352 = fmul double %80, %351
  %353 = fsub double %350, %352
  %354 = load double, double* %47, align 8, !tbaa !27
  %355 = fmul double %83, %354
  %356 = fsub double %355, %74
  %357 = load double, double* %23, align 8, !tbaa !27
  %358 = fmul double %76, %357
  %359 = fadd double %356, %358
  %360 = load double, double* %11, align 8, !tbaa !27
  %361 = fmul double %80, %360
  %362 = fsub double %359, %361
  %363 = load double, double* %0, align 8, !tbaa !27
  %364 = load double, double* %44, align 8, !tbaa !27
  %365 = fmul double %95, %364
  %366 = fsub double %363, %365
  %367 = load double, double* %32, align 8, !tbaa !27
  %368 = fmul double %99, %367
  %369 = fadd double %366, %368
  %370 = fadd double %73, %369
  %371 = load double, double* %6, align 8, !tbaa !27
  %372 = fmul double %92, %371
  %373 = fsub double %370, %372
  %374 = load double, double* %51, align 8, !tbaa !27
  %375 = load double, double* %41, align 8, !tbaa !27
  %376 = fmul double %95, %375
  %377 = fsub double %374, %376
  %378 = load double, double* %29, align 8, !tbaa !27
  %379 = fmul double %99, %378
  %380 = fadd double %377, %379
  %381 = fadd double %75, %380
  %382 = load double, double* %8, align 8, !tbaa !27
  %383 = fmul double %92, %382
  %384 = fsub double %381, %383
  %385 = fadd double %353, %373
  %386 = fadd double %362, %384
  %387 = load double, double* @tfcos36.3, align 16, !tbaa !27
  %388 = fmul double %387, %386
  %389 = fadd double %385, %388
  %390 = getelementptr inbounds double, double* %3, i64 30
  %391 = load double, double* %390, align 8, !tbaa !27
  %392 = fmul double %391, %389
  %393 = getelementptr inbounds double, double* %2, i64 12
  store double %392, double* %393, align 8, !tbaa !27
  %394 = getelementptr inbounds double, double* %3, i64 23
  %395 = load double, double* %394, align 8, !tbaa !27
  %396 = fmul double %395, %389
  %397 = getelementptr inbounds double, double* %2, i64 5
  store double %396, double* %397, align 8, !tbaa !27
  %398 = fsub double %385, %388
  %399 = getelementptr inbounds double, double* %1, i64 5
  %400 = load double, double* %399, align 8, !tbaa !27
  %401 = getelementptr inbounds double, double* %3, i64 5
  %402 = load double, double* %401, align 8, !tbaa !27
  %403 = fmul double %398, %402
  %404 = fadd double %400, %403
  %405 = getelementptr inbounds double, double* %4, i64 160
  store double %404, double* %405, align 8, !tbaa !27
  %406 = getelementptr inbounds double, double* %1, i64 12
  %407 = load double, double* %406, align 8, !tbaa !27
  %408 = getelementptr inbounds double, double* %3, i64 12
  %409 = load double, double* %408, align 8, !tbaa !27
  %410 = fmul double %398, %409
  %411 = fadd double %407, %410
  %412 = getelementptr inbounds double, double* %4, i64 384
  store double %411, double* %412, align 8, !tbaa !27
  %413 = fsub double %373, %353
  %414 = fsub double %384, %362
  %415 = load double, double* @tfcos36.5, align 16, !tbaa !27
  %416 = fmul double %414, %415
  %417 = fadd double %413, %416
  %418 = getelementptr inbounds double, double* %3, i64 32
  %419 = load double, double* %418, align 8, !tbaa !27
  %420 = fmul double %419, %417
  %421 = getelementptr inbounds double, double* %2, i64 14
  store double %420, double* %421, align 8, !tbaa !27
  %422 = getelementptr inbounds double, double* %3, i64 21
  %423 = load double, double* %422, align 8, !tbaa !27
  %424 = fmul double %417, %423
  %425 = getelementptr inbounds double, double* %2, i64 3
  store double %424, double* %425, align 8, !tbaa !27
  %426 = fsub double %413, %416
  %427 = getelementptr inbounds double, double* %1, i64 3
  %428 = load double, double* %427, align 8, !tbaa !27
  %429 = getelementptr inbounds double, double* %3, i64 3
  %430 = load double, double* %429, align 8, !tbaa !27
  %431 = fmul double %426, %430
  %432 = fadd double %428, %431
  %433 = getelementptr inbounds double, double* %4, i64 96
  store double %432, double* %433, align 8, !tbaa !27
  %434 = getelementptr inbounds double, double* %1, i64 14
  %435 = load double, double* %434, align 8, !tbaa !27
  %436 = getelementptr inbounds double, double* %3, i64 14
  %437 = load double, double* %436, align 8, !tbaa !27
  %438 = fmul double %426, %437
  %439 = fadd double %435, %438
  %440 = getelementptr inbounds double, double* %4, i64 448
  store double %439, double* %440, align 8, !tbaa !27
  %441 = load double, double* %0, align 8, !tbaa !27
  %442 = load double, double* %44, align 8, !tbaa !27
  %443 = fsub double %441, %442
  %444 = load double, double* %32, align 8, !tbaa !27
  %445 = fadd double %443, %444
  %446 = load double, double* %20, align 8, !tbaa !27
  %447 = fsub double %445, %446
  %448 = load double, double* %6, align 8, !tbaa !27
  %449 = fadd double %447, %448
  %450 = load double, double* %51, align 8, !tbaa !27
  %451 = load double, double* %41, align 8, !tbaa !27
  %452 = fsub double %450, %451
  %453 = load double, double* %29, align 8, !tbaa !27
  %454 = fadd double %452, %453
  %455 = load double, double* %17, align 8, !tbaa !27
  %456 = fsub double %454, %455
  %457 = load double, double* %8, align 8, !tbaa !27
  %458 = fadd double %456, %457
  %459 = load double, double* @tfcos36.4, align 16, !tbaa !27
  %460 = fmul double %458, %459
  %461 = fadd double %449, %460
  %462 = getelementptr inbounds double, double* %3, i64 31
  %463 = load double, double* %462, align 8, !tbaa !27
  %464 = fmul double %463, %461
  %465 = getelementptr inbounds double, double* %2, i64 13
  store double %464, double* %465, align 8, !tbaa !27
  %466 = getelementptr inbounds double, double* %3, i64 22
  %467 = load double, double* %466, align 8, !tbaa !27
  %468 = fmul double %461, %467
  %469 = getelementptr inbounds double, double* %2, i64 4
  store double %468, double* %469, align 8, !tbaa !27
  %470 = fsub double %449, %460
  %471 = getelementptr inbounds double, double* %1, i64 4
  %472 = load double, double* %471, align 8, !tbaa !27
  %473 = getelementptr inbounds double, double* %3, i64 4
  %474 = load double, double* %473, align 8, !tbaa !27
  %475 = fmul double %470, %474
  %476 = fadd double %472, %475
  %477 = getelementptr inbounds double, double* %4, i64 128
  store double %476, double* %477, align 8, !tbaa !27
  %478 = getelementptr inbounds double, double* %1, i64 13
  %479 = load double, double* %478, align 8, !tbaa !27
  %480 = getelementptr inbounds double, double* %3, i64 13
  %481 = load double, double* %480, align 8, !tbaa !27
  %482 = fmul double %470, %481
  %483 = fadd double %479, %482
  %484 = getelementptr inbounds double, double* %4, i64 416
  store double %483, double* %484, align 8, !tbaa !27
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define internal fastcc void @dct12(double* nocapture readonly %0, double* nocapture readonly %1, double* nocapture %2, double* nocapture readonly %3, double* nocapture %4) unnamed_addr #5 {
  %6 = bitcast double* %1 to i64*
  %7 = load i64, i64* %6, align 8, !tbaa !27
  %8 = bitcast double* %4 to i64*
  store i64 %7, i64* %8, align 8, !tbaa !27
  %9 = getelementptr inbounds double, double* %1, i64 1
  %10 = bitcast double* %9 to i64*
  %11 = load i64, i64* %10, align 8, !tbaa !27
  %12 = getelementptr inbounds double, double* %4, i64 32
  %13 = bitcast double* %12 to i64*
  store i64 %11, i64* %13, align 8, !tbaa !27
  %14 = getelementptr inbounds double, double* %1, i64 2
  %15 = bitcast double* %14 to i64*
  %16 = load i64, i64* %15, align 8, !tbaa !27
  %17 = getelementptr inbounds double, double* %4, i64 64
  %18 = bitcast double* %17 to i64*
  store i64 %16, i64* %18, align 8, !tbaa !27
  %19 = getelementptr inbounds double, double* %1, i64 3
  %20 = bitcast double* %19 to i64*
  %21 = load i64, i64* %20, align 8, !tbaa !27
  %22 = getelementptr inbounds double, double* %4, i64 96
  %23 = bitcast double* %22 to i64*
  store i64 %21, i64* %23, align 8, !tbaa !27
  %24 = getelementptr inbounds double, double* %1, i64 4
  %25 = bitcast double* %24 to i64*
  %26 = load i64, i64* %25, align 8, !tbaa !27
  %27 = getelementptr inbounds double, double* %4, i64 128
  %28 = bitcast double* %27 to i64*
  store i64 %26, i64* %28, align 8, !tbaa !27
  %29 = getelementptr inbounds double, double* %1, i64 5
  %30 = bitcast double* %29 to i64*
  %31 = load i64, i64* %30, align 8, !tbaa !27
  %32 = getelementptr inbounds double, double* %4, i64 160
  %33 = bitcast double* %32 to i64*
  store i64 %31, i64* %33, align 8, !tbaa !27
  %34 = getelementptr inbounds double, double* %0, i64 15
  %35 = load double, double* %34, align 8, !tbaa !27
  %36 = getelementptr inbounds double, double* %0, i64 12
  %37 = load double, double* %36, align 8, !tbaa !27
  %38 = fadd double %35, %37
  %39 = getelementptr inbounds double, double* %0, i64 9
  %40 = load double, double* %39, align 8, !tbaa !27
  %41 = fadd double %37, %40
  %42 = getelementptr inbounds double, double* %0, i64 6
  %43 = load double, double* %42, align 8, !tbaa !27
  %44 = fadd double %40, %43
  %45 = getelementptr inbounds double, double* %0, i64 3
  %46 = load double, double* %45, align 8, !tbaa !27
  %47 = fadd double %43, %46
  %48 = load double, double* %0, align 8, !tbaa !27
  %49 = fadd double %46, %48
  %50 = fadd double %38, %44
  %51 = fadd double %44, %49
  %52 = load double, double* @COS6_1, align 8, !tbaa !27
  %53 = fmul double %47, %52
  %54 = fmul double %52, %51
  %55 = fsub double %48, %41
  %56 = fsub double %49, %50
  %57 = load double, double* @tfcos12.1, align 16, !tbaa !27
  %58 = fmul double %56, %57
  %59 = fadd double %55, %58
  %60 = fsub double %55, %58
  %61 = getelementptr inbounds double, double* %1, i64 16
  %62 = load double, double* %61, align 8, !tbaa !27
  %63 = getelementptr inbounds double, double* %3, i64 10
  %64 = load double, double* %63, align 8, !tbaa !27
  %65 = fmul double %59, %64
  %66 = fadd double %62, %65
  %67 = getelementptr inbounds double, double* %4, i64 512
  store double %66, double* %67, align 8, !tbaa !27
  %68 = getelementptr inbounds double, double* %1, i64 13
  %69 = load double, double* %68, align 8, !tbaa !27
  %70 = getelementptr inbounds double, double* %3, i64 7
  %71 = load double, double* %70, align 8, !tbaa !27
  %72 = fmul double %59, %71
  %73 = fadd double %69, %72
  %74 = getelementptr inbounds double, double* %4, i64 416
  store double %73, double* %74, align 8, !tbaa !27
  %75 = getelementptr inbounds double, double* %1, i64 7
  %76 = load double, double* %75, align 8, !tbaa !27
  %77 = getelementptr inbounds double, double* %3, i64 1
  %78 = load double, double* %77, align 8, !tbaa !27
  %79 = fmul double %60, %78
  %80 = fadd double %76, %79
  %81 = getelementptr inbounds double, double* %4, i64 224
  store double %80, double* %81, align 8, !tbaa !27
  %82 = getelementptr inbounds double, double* %1, i64 10
  %83 = load double, double* %82, align 8, !tbaa !27
  %84 = getelementptr inbounds double, double* %3, i64 4
  %85 = load double, double* %84, align 8, !tbaa !27
  %86 = fmul double %60, %85
  %87 = fadd double %83, %86
  %88 = getelementptr inbounds double, double* %4, i64 320
  store double %87, double* %88, align 8, !tbaa !27
  %89 = load double, double* @COS6_2, align 8, !tbaa !27
  %90 = fmul double %41, %89
  %91 = fadd double %48, %90
  %92 = fadd double %53, %91
  %93 = fsub double %91, %53
  %94 = fmul double %50, %89
  %95 = fadd double %49, %94
  %96 = fadd double %54, %95
  %97 = load double, double* @tfcos12.0, align 16, !tbaa !27
  %98 = fmul double %97, %96
  %99 = fsub double %95, %54
  %100 = load double, double* @tfcos12.2, align 16, !tbaa !27
  %101 = fmul double %100, %99
  %102 = fadd double %92, %98
  %103 = fsub double %92, %98
  %104 = fadd double %93, %101
  %105 = fsub double %93, %101
  %106 = getelementptr inbounds double, double* %1, i64 17
  %107 = load double, double* %106, align 8, !tbaa !27
  %108 = getelementptr inbounds double, double* %3, i64 11
  %109 = load double, double* %108, align 8, !tbaa !27
  %110 = fmul double %109, %104
  %111 = fadd double %107, %110
  %112 = getelementptr inbounds double, double* %4, i64 544
  store double %111, double* %112, align 8, !tbaa !27
  %113 = getelementptr inbounds double, double* %1, i64 12
  %114 = load double, double* %113, align 8, !tbaa !27
  %115 = getelementptr inbounds double, double* %3, i64 6
  %116 = load double, double* %115, align 8, !tbaa !27
  %117 = fmul double %104, %116
  %118 = fadd double %114, %117
  %119 = getelementptr inbounds double, double* %4, i64 384
  store double %118, double* %119, align 8, !tbaa !27
  %120 = getelementptr inbounds double, double* %1, i64 14
  %121 = load double, double* %120, align 8, !tbaa !27
  %122 = getelementptr inbounds double, double* %3, i64 8
  %123 = load double, double* %122, align 8, !tbaa !27
  %124 = fmul double %102, %123
  %125 = fadd double %121, %124
  %126 = getelementptr inbounds double, double* %4, i64 448
  store double %125, double* %126, align 8, !tbaa !27
  %127 = getelementptr inbounds double, double* %1, i64 15
  %128 = load double, double* %127, align 8, !tbaa !27
  %129 = getelementptr inbounds double, double* %3, i64 9
  %130 = load double, double* %129, align 8, !tbaa !27
  %131 = fmul double %102, %130
  %132 = fadd double %128, %131
  %133 = getelementptr inbounds double, double* %4, i64 480
  store double %132, double* %133, align 8, !tbaa !27
  %134 = getelementptr inbounds double, double* %1, i64 6
  %135 = load double, double* %134, align 8, !tbaa !27
  %136 = load double, double* %3, align 8, !tbaa !27
  %137 = fmul double %105, %136
  %138 = fadd double %135, %137
  %139 = getelementptr inbounds double, double* %4, i64 192
  store double %138, double* %139, align 8, !tbaa !27
  %140 = getelementptr inbounds double, double* %1, i64 11
  %141 = load double, double* %140, align 8, !tbaa !27
  %142 = getelementptr inbounds double, double* %3, i64 5
  %143 = load double, double* %142, align 8, !tbaa !27
  %144 = fmul double %105, %143
  %145 = fadd double %141, %144
  %146 = getelementptr inbounds double, double* %4, i64 352
  store double %145, double* %146, align 8, !tbaa !27
  %147 = getelementptr inbounds double, double* %1, i64 8
  %148 = load double, double* %147, align 8, !tbaa !27
  %149 = getelementptr inbounds double, double* %3, i64 2
  %150 = load double, double* %149, align 8, !tbaa !27
  %151 = fmul double %103, %150
  %152 = fadd double %148, %151
  %153 = getelementptr inbounds double, double* %4, i64 256
  store double %152, double* %153, align 8, !tbaa !27
  %154 = getelementptr inbounds double, double* %1, i64 9
  %155 = load double, double* %154, align 8, !tbaa !27
  %156 = getelementptr inbounds double, double* %3, i64 3
  %157 = load double, double* %156, align 8, !tbaa !27
  %158 = fmul double %103, %157
  %159 = fadd double %155, %158
  %160 = getelementptr inbounds double, double* %4, i64 288
  store double %159, double* %160, align 8, !tbaa !27
  %161 = getelementptr inbounds double, double* %0, i64 1
  %162 = getelementptr inbounds double, double* %0, i64 16
  %163 = load double, double* %162, align 8, !tbaa !27
  %164 = getelementptr inbounds double, double* %0, i64 13
  %165 = load double, double* %164, align 8, !tbaa !27
  %166 = fadd double %163, %165
  %167 = getelementptr inbounds double, double* %0, i64 10
  %168 = load double, double* %167, align 8, !tbaa !27
  %169 = fadd double %165, %168
  %170 = getelementptr inbounds double, double* %0, i64 7
  %171 = load double, double* %170, align 8, !tbaa !27
  %172 = fadd double %168, %171
  %173 = getelementptr inbounds double, double* %0, i64 4
  %174 = load double, double* %173, align 8, !tbaa !27
  %175 = fadd double %171, %174
  %176 = load double, double* %161, align 8, !tbaa !27
  %177 = fadd double %174, %176
  %178 = fadd double %166, %172
  %179 = fadd double %172, %177
  %180 = fmul double %52, %175
  %181 = fmul double %52, %179
  %182 = fsub double %176, %169
  %183 = fsub double %177, %178
  %184 = fmul double %57, %183
  %185 = fadd double %182, %184
  %186 = fsub double %182, %184
  %187 = load double, double* %63, align 8, !tbaa !27
  %188 = fmul double %187, %185
  %189 = getelementptr inbounds double, double* %2, i64 4
  store double %188, double* %189, align 8, !tbaa !27
  %190 = load double, double* %70, align 8, !tbaa !27
  %191 = fmul double %190, %185
  %192 = getelementptr inbounds double, double* %2, i64 1
  store double %191, double* %192, align 8, !tbaa !27
  %193 = load double, double* %77, align 8, !tbaa !27
  %194 = fmul double %186, %193
  %195 = load double, double* %74, align 8, !tbaa !27
  %196 = fadd double %195, %194
  store double %196, double* %74, align 8, !tbaa !27
  %197 = load double, double* %84, align 8, !tbaa !27
  %198 = fmul double %186, %197
  %199 = load double, double* %67, align 8, !tbaa !27
  %200 = fadd double %199, %198
  store double %200, double* %67, align 8, !tbaa !27
  %201 = fmul double %89, %169
  %202 = fadd double %201, %176
  %203 = fadd double %202, %180
  %204 = fsub double %202, %180
  %205 = fmul double %89, %178
  %206 = fadd double %177, %205
  %207 = fadd double %206, %181
  %208 = fmul double %97, %207
  %209 = fsub double %206, %181
  %210 = fmul double %100, %209
  %211 = fadd double %203, %208
  %212 = fsub double %203, %208
  %213 = fadd double %204, %210
  %214 = fsub double %204, %210
  %215 = load double, double* %108, align 8, !tbaa !27
  %216 = fmul double %213, %215
  %217 = getelementptr inbounds double, double* %2, i64 5
  store double %216, double* %217, align 8, !tbaa !27
  %218 = load double, double* %115, align 8, !tbaa !27
  %219 = fmul double %213, %218
  store double %219, double* %2, align 8, !tbaa !27
  %220 = load double, double* %122, align 8, !tbaa !27
  %221 = fmul double %211, %220
  %222 = getelementptr inbounds double, double* %2, i64 2
  store double %221, double* %222, align 8, !tbaa !27
  %223 = load double, double* %129, align 8, !tbaa !27
  %224 = fmul double %211, %223
  %225 = getelementptr inbounds double, double* %2, i64 3
  store double %224, double* %225, align 8, !tbaa !27
  %226 = load double, double* %3, align 8, !tbaa !27
  %227 = fmul double %214, %226
  %228 = load double, double* %119, align 8, !tbaa !27
  %229 = fadd double %228, %227
  store double %229, double* %119, align 8, !tbaa !27
  %230 = load double, double* %142, align 8, !tbaa !27
  %231 = fmul double %214, %230
  %232 = load double, double* %112, align 8, !tbaa !27
  %233 = fadd double %232, %231
  store double %233, double* %112, align 8, !tbaa !27
  %234 = load double, double* %149, align 8, !tbaa !27
  %235 = fmul double %212, %234
  %236 = load double, double* %126, align 8, !tbaa !27
  %237 = fadd double %236, %235
  store double %237, double* %126, align 8, !tbaa !27
  %238 = load double, double* %156, align 8, !tbaa !27
  %239 = fmul double %212, %238
  %240 = load double, double* %133, align 8, !tbaa !27
  %241 = fadd double %240, %239
  store double %241, double* %133, align 8, !tbaa !27
  %242 = getelementptr inbounds double, double* %0, i64 2
  %243 = getelementptr inbounds double, double* %2, i64 12
  %244 = getelementptr inbounds double, double* %0, i64 17
  %245 = bitcast double* %243 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(48) %245, i8 0, i64 48, i1 false)
  %246 = load double, double* %244, align 8, !tbaa !27
  %247 = getelementptr inbounds double, double* %0, i64 14
  %248 = load double, double* %247, align 8, !tbaa !27
  %249 = fadd double %246, %248
  %250 = getelementptr inbounds double, double* %0, i64 11
  %251 = load double, double* %250, align 8, !tbaa !27
  %252 = fadd double %248, %251
  %253 = getelementptr inbounds double, double* %0, i64 8
  %254 = load double, double* %253, align 8, !tbaa !27
  %255 = fadd double %251, %254
  %256 = getelementptr inbounds double, double* %0, i64 5
  %257 = load double, double* %256, align 8, !tbaa !27
  %258 = fadd double %254, %257
  %259 = load double, double* %242, align 8, !tbaa !27
  %260 = fadd double %257, %259
  %261 = fadd double %249, %255
  %262 = fadd double %255, %260
  %263 = fmul double %52, %258
  %264 = fmul double %52, %262
  %265 = fsub double %259, %252
  %266 = fsub double %260, %261
  %267 = fmul double %57, %266
  %268 = fadd double %265, %267
  %269 = fsub double %265, %267
  %270 = load double, double* %63, align 8, !tbaa !27
  %271 = fmul double %270, %268
  %272 = getelementptr inbounds double, double* %2, i64 10
  store double %271, double* %272, align 8, !tbaa !27
  %273 = load double, double* %70, align 8, !tbaa !27
  %274 = fmul double %273, %268
  %275 = getelementptr inbounds double, double* %2, i64 7
  store double %274, double* %275, align 8, !tbaa !27
  %276 = load double, double* %77, align 8, !tbaa !27
  %277 = fmul double %269, %276
  %278 = load double, double* %192, align 8, !tbaa !27
  %279 = fadd double %278, %277
  store double %279, double* %192, align 8, !tbaa !27
  %280 = load double, double* %84, align 8, !tbaa !27
  %281 = fmul double %269, %280
  %282 = load double, double* %189, align 8, !tbaa !27
  %283 = fadd double %282, %281
  store double %283, double* %189, align 8, !tbaa !27
  %284 = fmul double %89, %252
  %285 = fadd double %284, %259
  %286 = fadd double %285, %263
  %287 = fsub double %285, %263
  %288 = fmul double %89, %261
  %289 = fadd double %260, %288
  %290 = fadd double %289, %264
  %291 = fmul double %97, %290
  %292 = fsub double %289, %264
  %293 = fmul double %100, %292
  %294 = fadd double %286, %291
  %295 = fsub double %286, %291
  %296 = fadd double %287, %293
  %297 = fsub double %287, %293
  %298 = load double, double* %108, align 8, !tbaa !27
  %299 = fmul double %296, %298
  %300 = getelementptr inbounds double, double* %2, i64 11
  store double %299, double* %300, align 8, !tbaa !27
  %301 = load double, double* %115, align 8, !tbaa !27
  %302 = fmul double %296, %301
  %303 = getelementptr inbounds double, double* %2, i64 6
  store double %302, double* %303, align 8, !tbaa !27
  %304 = load double, double* %122, align 8, !tbaa !27
  %305 = fmul double %294, %304
  %306 = getelementptr inbounds double, double* %2, i64 8
  store double %305, double* %306, align 8, !tbaa !27
  %307 = load double, double* %129, align 8, !tbaa !27
  %308 = fmul double %294, %307
  %309 = getelementptr inbounds double, double* %2, i64 9
  store double %308, double* %309, align 8, !tbaa !27
  %310 = load double, double* %3, align 8, !tbaa !27
  %311 = fmul double %297, %310
  %312 = load double, double* %2, align 8, !tbaa !27
  %313 = fadd double %312, %311
  store double %313, double* %2, align 8, !tbaa !27
  %314 = load double, double* %142, align 8, !tbaa !27
  %315 = fmul double %297, %314
  %316 = load double, double* %217, align 8, !tbaa !27
  %317 = fadd double %316, %315
  store double %317, double* %217, align 8, !tbaa !27
  %318 = load double, double* %149, align 8, !tbaa !27
  %319 = fmul double %295, %318
  %320 = load double, double* %222, align 8, !tbaa !27
  %321 = fadd double %320, %319
  store double %321, double* %222, align 8, !tbaa !27
  %322 = load double, double* %156, align 8, !tbaa !27
  %323 = fmul double %295, %322
  %324 = load double, double* %225, align 8, !tbaa !27
  %325 = fadd double %324, %323
  store double %325, double* %225, align 8, !tbaa !27
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @main(i32 %0, i8** %1) local_unnamed_addr #0 {
  %3 = alloca [16384 x i8], align 16
  %4 = alloca [2 x [1152 x i16]], align 16
  %5 = alloca %struct.lame_global_flags, align 8
  %6 = getelementptr inbounds [16384 x i8], [16384 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 16384, i8* nonnull %6) #21
  %7 = bitcast [2 x [1152 x i16]]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4608, i8* nonnull %7) #21
  %8 = bitcast %struct.lame_global_flags* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 280, i8* nonnull %8) #21
  call void @lame_init(%struct.lame_global_flags* nonnull %5) #21
  %9 = icmp eq i32 %0, 1
  br i1 %9, label %10, label %12

10:                                               ; preds = %2
  %11 = load i8*, i8** %1, align 8, !tbaa !7
  call void @lame_usage(%struct.lame_global_flags* nonnull %5, i8* %11) #21
  br label %12

12:                                               ; preds = %10, %2
  call void @lame_parse_args(%struct.lame_global_flags* nonnull %5, i32 %0, i8** %1) #21
  %13 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %5, i64 0, i32 4
  %14 = load i32, i32* %13, align 4, !tbaa !185
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %30

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %5, i64 0, i32 32
  %18 = load i8*, i8** %17, align 8, !tbaa !183
  %19 = call i32 @strcmp(i8* nonnull dereferenceable(1) %18, i8* nonnull dereferenceable(2) getelementptr inbounds ([2 x i8], [2 x i8]* @.str.185, i64 0, i64 0)) #23
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %16
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  br label %30

23:                                               ; preds = %16
  %24 = call %struct._IO_FILE* @fopen(i8* %18, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1.186, i64 0, i64 0))
  %25 = icmp eq %struct._IO_FILE* %24, null
  br i1 %25, label %26, label %30

26:                                               ; preds = %23
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %28 = load i8*, i8** %17, align 8, !tbaa !183
  %29 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %27, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2.187, i64 0, i64 0), i8* %28) #19
  call void @exit(i32 1) #20
  unreachable

30:                                               ; preds = %23, %21, %12
  %31 = phi %struct._IO_FILE* [ undef, %12 ], [ %24, %23 ], [ %22, %21 ]
  call void @lame_init_infile(%struct.lame_global_flags* nonnull %5) #21
  call void @lame_init_params(%struct.lame_global_flags* nonnull %5) #21
  call void @lame_print_config(%struct.lame_global_flags* nonnull %5) #21
  %32 = getelementptr inbounds [2 x [1152 x i16]], [2 x [1152 x i16]]* %4, i64 0, i64 0
  %33 = getelementptr inbounds [2 x [1152 x i16]], [2 x [1152 x i16]]* %4, i64 0, i64 0, i64 0
  %34 = getelementptr inbounds [2 x [1152 x i16]], [2 x [1152 x i16]]* %4, i64 0, i64 1, i64 0
  br label %35

35:                                               ; preds = %49, %30
  %36 = call i32 @lame_readframe(%struct.lame_global_flags* nonnull %5, [1152 x i16]* nonnull %32) #21
  %37 = call i32 @lame_encode_buffer(%struct.lame_global_flags* nonnull %5, i16* nonnull %33, i16* nonnull %34, i32 %36, i8* nonnull %6, i32 16384) #21
  %38 = icmp eq i32 %37, -1
  br i1 %38, label %39, label %42

39:                                               ; preds = %35
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %41 = call i64 @fwrite(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3.188, i64 0, i64 0), i64 33, i64 1, %struct._IO_FILE* %40) #19
  call void @exit(i32 1) #20
  unreachable

42:                                               ; preds = %35
  %43 = sext i32 %37 to i64
  %44 = call i64 @fwrite(i8* nonnull %6, i64 1, i64 %43, %struct._IO_FILE* %31)
  %45 = icmp eq i64 %44, %43
  br i1 %45, label %49, label %46

46:                                               ; preds = %42
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %48 = call i64 @fwrite(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4.189, i64 0, i64 0), i64 24, i64 1, %struct._IO_FILE* %47) #19
  call void @exit(i32 1) #20
  unreachable

49:                                               ; preds = %42
  %50 = icmp eq i32 %36, 0
  br i1 %50, label %51, label %35

51:                                               ; preds = %49
  %52 = call i32 @lame_encode_finish(%struct.lame_global_flags* nonnull %5, i8* nonnull %6, i32 16384) #21
  %53 = sext i32 %52 to i64
  %54 = call i64 @fwrite(i8* nonnull %6, i64 1, i64 %53, %struct._IO_FILE* %31)
  %55 = call i32 @fclose(%struct._IO_FILE* %31)
  call void @lame_close_infile(%struct.lame_global_flags* nonnull %5) #21
  call void @lame_mp3_tags(%struct.lame_global_flags* nonnull %5) #21
  call void @llvm.lifetime.end.p0i8(i64 280, i8* nonnull %8) #21
  call void @llvm.lifetime.end.p0i8(i64 4608, i8* nonnull %7) #21
  call void @llvm.lifetime.end.p0i8(i64 16384, i8* nonnull %6) #21
  ret i32 0
}

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local i32 @is_syncword(i8* nocapture readonly %0) local_unnamed_addr #10 {
  %2 = load i8, i8* %0, align 1, !tbaa !26
  %3 = icmp eq i8 %2, -1
  br i1 %3, label %4, label %9

4:                                                ; preds = %1
  %5 = getelementptr inbounds i8, i8* %0, i64 1
  %6 = load i8, i8* %5, align 1, !tbaa !26
  %7 = icmp ugt i8 %6, -17
  %8 = zext i1 %7 to i32
  br label %9

9:                                                ; preds = %4, %1
  %10 = phi i32 [ 0, %1 ], [ %8, %4 ]
  ret i32 %10
}

; Function Attrs: nounwind uwtable
define dso_local i32 @lame_decode_initfile(%struct._IO_FILE* nocapture %0, i32* nocapture %1, i32* nocapture %2, i32* nocapture %3, i64* nocapture %4) local_unnamed_addr #0 {
  %6 = alloca %struct.VBRTAGDATA, align 4
  %7 = alloca i32, align 4
  %8 = bitcast %struct.VBRTAGDATA* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 124, i8* nonnull %8) #21
  %9 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #21
  %10 = tail call i32 @InitMP3(%struct.mpstr* nonnull @mp) #21
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(16384) getelementptr inbounds ([16384 x i8], [16384 x i8]* @buf, i64 0, i64 0), i8 0, i64 16384, i1 false)
  br label %11

11:                                               ; preds = %15, %5
  %12 = phi i8 [ 0, %5 ], [ %17, %15 ]
  store i8 %12, i8* getelementptr inbounds ([16384 x i8], [16384 x i8]* @buf, i64 0, i64 0), align 16, !tbaa !26
  %13 = tail call i64 @fread(i8* getelementptr inbounds ([16384 x i8], [16384 x i8]* @buf, i64 0, i64 1), i64 1, i64 1, %struct._IO_FILE* %0)
  %14 = icmp eq i64 %13, 0
  br i1 %14, label %63, label %15

15:                                               ; preds = %11
  %16 = load i8, i8* getelementptr inbounds ([16384 x i8], [16384 x i8]* @buf, i64 0, i64 0), align 16, !tbaa !26
  %17 = load i8, i8* getelementptr inbounds ([16384 x i8], [16384 x i8]* @buf, i64 0, i64 1), align 1
  %18 = icmp ne i8 %16, -1
  %19 = icmp ult i8 %17, -16
  %20 = or i1 %18, %19
  br i1 %20, label %11, label %21

21:                                               ; preds = %15
  %22 = tail call i64 @fread(i8* getelementptr inbounds ([16384 x i8], [16384 x i8]* @buf, i64 0, i64 2), i64 1, i64 46, %struct._IO_FILE* %0)
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %63, label %24

24:                                               ; preds = %21
  %25 = call i32 @GetVbrTag(%struct.VBRTAGDATA* nonnull %6, i8* getelementptr inbounds ([16384 x i8], [16384 x i8]* @buf, i64 0, i64 0)) #21
  %26 = icmp ne i32 %25, 0
  %27 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %6, i64 0, i32 3
  %28 = load i32, i32* %27, align 4
  %29 = select i1 %26, i32 %28, i32 0
  %30 = sext i32 %29 to i64
  store i32 0, i32* %7, align 4, !tbaa !18
  %31 = trunc i64 %22 to i32
  %32 = add i32 %31, 2
  %33 = call i32 @decodeMP3(%struct.mpstr* nonnull @mp, i8* getelementptr inbounds ([16384 x i8], [16384 x i8]* @buf, i64 0, i64 0), i32 %32, i8* getelementptr inbounds ([8192 x i8], [8192 x i8]* @out, i64 0, i64 0), i32 8192, i32* nonnull %7) #21
  %34 = load i32, i32* %7, align 4, !tbaa !18
  %35 = icmp slt i32 %34, 1
  %36 = or i1 %26, %35
  br i1 %36, label %40, label %37

37:                                               ; preds = %24
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %39 = call i64 @fwrite(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.192, i64 0, i64 0), i64 49, i64 1, %struct._IO_FILE* %38) #19
  br label %40

40:                                               ; preds = %37, %24
  %41 = load i32, i32* getelementptr inbounds (%struct.mpstr, %struct.mpstr* @mp, i64 0, i32 5, i32 0), align 4, !tbaa !275
  store i32 %41, i32* %1, align 4, !tbaa !18
  %42 = load i32, i32* getelementptr inbounds (%struct.mpstr, %struct.mpstr* @mp, i64 0, i32 5, i32 9), align 4, !tbaa !276
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds [9 x i64], [9 x i64]* @freqs, i64 0, i64 %43
  %45 = load i64, i64* %44, align 8, !tbaa !19
  %46 = trunc i64 %45 to i32
  store i32 %46, i32* %2, align 4, !tbaa !18
  %47 = load i32, i32* getelementptr inbounds (%struct.mpstr, %struct.mpstr* @mp, i64 0, i32 5, i32 3), align 4, !tbaa !277
  %48 = sext i32 %47 to i64
  %49 = load i32, i32* getelementptr inbounds (%struct.mpstr, %struct.mpstr* @mp, i64 0, i32 5, i32 6), align 4, !tbaa !278
  %50 = add nsw i32 %49, -1
  %51 = sext i32 %50 to i64
  %52 = load i32, i32* getelementptr inbounds (%struct.mpstr, %struct.mpstr* @mp, i64 0, i32 5, i32 8), align 4, !tbaa !279
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds [2 x [3 x [16 x i32]]], [2 x [3 x [16 x i32]]]* @tabsel_123, i64 0, i64 %48, i64 %51, i64 %53
  %55 = load i32, i32* %54, align 4, !tbaa !18
  store i32 %55, i32* %3, align 4, !tbaa !18
  %56 = icmp ne i32 %29, 0
  %57 = and i1 %26, %56
  %58 = load i32, i32* getelementptr inbounds (%struct.mpstr, %struct.mpstr* @mp, i64 0, i32 5, i32 3), align 4
  %59 = icmp eq i32 %58, 0
  %60 = select i1 %59, i64 1152, i64 576
  %61 = mul nsw i64 %60, %30
  %62 = select i1 %57, i64 %61, i64 4294967295
  store i64 %62, i64* %4, align 8, !tbaa !19
  br label %63

63:                                               ; preds = %40, %21, %11
  %64 = phi i32 [ 0, %40 ], [ -1, %21 ], [ -1, %11 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #21
  call void @llvm.lifetime.end.p0i8(i64 124, i8* nonnull %8) #21
  ret i32 %64
}

; Function Attrs: nounwind uwtable
define dso_local i32 @lame_decode_init() local_unnamed_addr #0 {
  %1 = tail call i32 @InitMP3(%struct.mpstr* nonnull @mp) #21
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(16384) getelementptr inbounds ([16384 x i8], [16384 x i8]* @buf, i64 0, i64 0), i8 0, i64 16384, i1 false)
  ret i32 0
}

; Function Attrs: nounwind uwtable
define dso_local i32 @lame_decode_fromfile(%struct._IO_FILE* nocapture %0, i16* nocapture %1, i16* nocapture %2) local_unnamed_addr #0 {
  %4 = alloca i32, align 4
  %5 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #21
  store i32 0, i32* %4, align 4, !tbaa !18
  %6 = tail call i64 @fread(i8* getelementptr inbounds ([16384 x i8], [16384 x i8]* @buf, i64 0, i64 0), i64 1, i64 64, %struct._IO_FILE* %0)
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %85, label %8

8:                                                ; preds = %3
  %9 = trunc i64 %6 to i32
  %10 = call i32 @decodeMP3(%struct.mpstr* nonnull @mp, i8* getelementptr inbounds ([16384 x i8], [16384 x i8]* @buf, i64 0, i64 0), i32 %9, i8* getelementptr inbounds ([8192 x i8], [8192 x i8]* @out, i64 0, i64 0), i32 8192, i32* nonnull %4) #21
  %11 = icmp eq i32 %10, 1
  %12 = load i32, i32* %4, align 4
  %13 = icmp eq i32 %12, 0
  %14 = or i1 %11, %13
  br i1 %14, label %15, label %25

15:                                               ; preds = %18, %8
  %16 = call i64 @fread(i8* getelementptr inbounds ([16384 x i8], [16384 x i8]* @buf, i64 0, i64 0), i64 1, i64 100, %struct._IO_FILE* %0)
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %85, label %18

18:                                               ; preds = %15
  %19 = trunc i64 %16 to i32
  %20 = call i32 @decodeMP3(%struct.mpstr* nonnull @mp, i8* getelementptr inbounds ([16384 x i8], [16384 x i8]* @buf, i64 0, i64 0), i32 %19, i8* getelementptr inbounds ([8192 x i8], [8192 x i8]* @out, i64 0, i64 0), i32 8192, i32* nonnull %4) #21
  %21 = icmp eq i32 %20, 1
  %22 = load i32, i32* %4, align 4
  %23 = icmp eq i32 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %15, label %25

25:                                               ; preds = %18, %8
  %26 = phi i32 [ %10, %8 ], [ %20, %18 ]
  %27 = phi i32 [ %12, %8 ], [ %22, %18 ]
  %28 = load i32, i32* getelementptr inbounds (%struct.mpstr, %struct.mpstr* @mp, i64 0, i32 5, i32 0), align 4, !tbaa !275
  %29 = icmp eq i32 %26, 0
  br i1 %29, label %30, label %81

30:                                               ; preds = %25
  %31 = shl nsw i32 %28, 1
  %32 = sdiv i32 %27, %31
  switch i32 %32, label %33 [
    i32 1152, label %36
    i32 576, label %36
  ]

33:                                               ; preds = %30
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %35 = call i64 @fwrite(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1.195, i64 0, i64 0), i64 65, i64 1, %struct._IO_FILE* %34) #19
  call void @exit(i32 -50) #20
  unreachable

36:                                               ; preds = %30, %30
  %37 = icmp sgt i32 %28, 0
  br i1 %37, label %38, label %81

38:                                               ; preds = %36
  %39 = zext i32 %28 to i64
  %40 = zext i32 %28 to i64
  %41 = zext i32 %32 to i64
  %42 = and i64 %41, 1
  %43 = icmp eq i32 %32, 1
  %44 = sub nsw i64 %41, %42
  %45 = icmp eq i64 %42, 0
  br label %46

46:                                               ; preds = %78, %38
  %47 = phi i64 [ 0, %38 ], [ %79, %78 ]
  %48 = icmp eq i64 %47, 0
  br i1 %43, label %69, label %49

49:                                               ; preds = %46
  %50 = select i1 %48, i16* %1, i16* %2
  %51 = select i1 %48, i16* %1, i16* %2
  br label %52

52:                                               ; preds = %52, %49
  %53 = phi i64 [ 0, %49 ], [ %66, %52 ]
  %54 = phi i64 [ %44, %49 ], [ %67, %52 ]
  %55 = mul nsw i64 %53, %39
  %56 = add nuw nsw i64 %55, %47
  %57 = getelementptr inbounds i16, i16* bitcast ([8192 x i8]* @out to i16*), i64 %56
  %58 = load i16, i16* %57, align 2, !tbaa !29
  %59 = getelementptr inbounds i16, i16* %50, i64 %53
  store i16 %58, i16* %59, align 2, !tbaa !29
  %60 = or i64 %53, 1
  %61 = mul nsw i64 %60, %39
  %62 = add nuw nsw i64 %61, %47
  %63 = getelementptr inbounds i16, i16* bitcast ([8192 x i8]* @out to i16*), i64 %62
  %64 = load i16, i16* %63, align 2, !tbaa !29
  %65 = getelementptr inbounds i16, i16* %51, i64 %60
  store i16 %64, i16* %65, align 2, !tbaa !29
  %66 = add nuw nsw i64 %53, 2
  %67 = add i64 %54, -2
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %52

69:                                               ; preds = %52, %46
  %70 = phi i64 [ 0, %46 ], [ %66, %52 ]
  br i1 %45, label %78, label %71

71:                                               ; preds = %69
  %72 = mul nsw i64 %70, %39
  %73 = add nuw nsw i64 %72, %47
  %74 = getelementptr inbounds i16, i16* bitcast ([8192 x i8]* @out to i16*), i64 %73
  %75 = load i16, i16* %74, align 2, !tbaa !29
  %76 = select i1 %48, i16* %1, i16* %2
  %77 = getelementptr inbounds i16, i16* %76, i64 %70
  store i16 %75, i16* %77, align 2, !tbaa !29
  br label %78

78:                                               ; preds = %71, %69
  %79 = add nuw nsw i64 %47, 1
  %80 = icmp eq i64 %79, %40
  br i1 %80, label %81, label %46

81:                                               ; preds = %78, %36, %25
  %82 = phi i32 [ 0, %25 ], [ %32, %36 ], [ %32, %78 ]
  %83 = icmp eq i32 %26, -1
  %84 = select i1 %83, i32 -1, i32 %82
  br label %85

85:                                               ; preds = %81, %15, %3
  %86 = phi i32 [ 0, %3 ], [ %84, %81 ], [ -1, %15 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #21
  ret i32 %86
}

; Function Attrs: nounwind uwtable
define dso_local i32 @lame_decode(i8* %0, i32 %1, i16* nocapture %2, i16* nocapture %3) local_unnamed_addr #0 {
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #21
  %7 = call i32 @decodeMP3(%struct.mpstr* nonnull @mp, i8* %0, i32 %1, i8* getelementptr inbounds ([8192 x i8], [8192 x i8]* @out, i64 0, i64 0), i32 8192, i32* nonnull %5) #21
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %65

9:                                                ; preds = %4
  %10 = load i32, i32* %5, align 4, !tbaa !18
  %11 = load i32, i32* getelementptr inbounds (%struct.mpstr, %struct.mpstr* @mp, i64 0, i32 5, i32 0), align 4, !tbaa !275
  %12 = shl nsw i32 %11, 1
  %13 = sdiv i32 %10, %12
  %14 = icmp sgt i32 %13, 1152
  br i1 %14, label %26, label %15

15:                                               ; preds = %9
  %16 = icmp sgt i32 %11, 0
  br i1 %16, label %17, label %65

17:                                               ; preds = %15
  %18 = icmp sgt i32 %13, 0
  %19 = zext i32 %11 to i64
  %20 = zext i32 %11 to i64
  %21 = zext i32 %13 to i64
  %22 = and i64 %21, 1
  %23 = icmp eq i32 %13, 1
  %24 = sub nsw i64 %21, %22
  %25 = icmp eq i64 %22, 0
  br label %29

26:                                               ; preds = %9
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %28 = call i64 @fwrite(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.2.196, i64 0, i64 0), i64 65, i64 1, %struct._IO_FILE* %27) #19
  call void @exit(i32 -50) #20
  unreachable

29:                                               ; preds = %62, %17
  %30 = phi i64 [ 0, %17 ], [ %63, %62 ]
  br i1 %18, label %31, label %62

31:                                               ; preds = %29
  %32 = icmp eq i64 %30, 0
  br i1 %23, label %53, label %33

33:                                               ; preds = %31
  %34 = select i1 %32, i16* %2, i16* %3
  %35 = select i1 %32, i16* %2, i16* %3
  br label %36

36:                                               ; preds = %36, %33
  %37 = phi i64 [ 0, %33 ], [ %50, %36 ]
  %38 = phi i64 [ %24, %33 ], [ %51, %36 ]
  %39 = mul nsw i64 %37, %19
  %40 = add nuw nsw i64 %39, %30
  %41 = getelementptr inbounds i16, i16* bitcast ([8192 x i8]* @out to i16*), i64 %40
  %42 = load i16, i16* %41, align 2, !tbaa !29
  %43 = getelementptr inbounds i16, i16* %34, i64 %37
  store i16 %42, i16* %43, align 2, !tbaa !29
  %44 = or i64 %37, 1
  %45 = mul nsw i64 %44, %19
  %46 = add nuw nsw i64 %45, %30
  %47 = getelementptr inbounds i16, i16* bitcast ([8192 x i8]* @out to i16*), i64 %46
  %48 = load i16, i16* %47, align 2, !tbaa !29
  %49 = getelementptr inbounds i16, i16* %35, i64 %44
  store i16 %48, i16* %49, align 2, !tbaa !29
  %50 = add nuw nsw i64 %37, 2
  %51 = add i64 %38, -2
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %53, label %36

53:                                               ; preds = %36, %31
  %54 = phi i64 [ 0, %31 ], [ %50, %36 ]
  br i1 %25, label %62, label %55

55:                                               ; preds = %53
  %56 = mul nsw i64 %54, %19
  %57 = add nuw nsw i64 %56, %30
  %58 = getelementptr inbounds i16, i16* bitcast ([8192 x i8]* @out to i16*), i64 %57
  %59 = load i16, i16* %58, align 2, !tbaa !29
  %60 = select i1 %32, i16* %2, i16* %3
  %61 = getelementptr inbounds i16, i16* %60, i64 %54
  store i16 %59, i16* %61, align 2, !tbaa !29
  br label %62

62:                                               ; preds = %55, %53, %29
  %63 = add nuw nsw i64 %30, 1
  %64 = icmp eq i64 %63, %20
  br i1 %64, label %65, label %29

65:                                               ; preds = %62, %15, %4
  %66 = phi i32 [ 0, %4 ], [ %13, %15 ], [ %13, %62 ]
  %67 = icmp eq i32 %7, -1
  %68 = select i1 %67, i32 -1, i32 %66
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #21
  ret i32 %68
}

; Function Attrs: nounwind uwtable
define dso_local void @mdct_sub48(%struct.lame_global_flags* nocapture readonly %0, i16* readonly %1, i16* readonly %2, [2 x [576 x double]]* nocapture %3, %struct.III_side_info_t* nocapture readonly %4) local_unnamed_addr #0 {
  %6 = load i32, i32* @mdct_sub48.init, align 4, !tbaa !18
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %11

8:                                                ; preds = %5
  tail call void @mdct_init48()
  %9 = load i32, i32* @mdct_sub48.init, align 4, !tbaa !18
  %10 = add nsw i32 %9, 1
  store i32 %10, i32* @mdct_sub48.init, align 4, !tbaa !18
  br label %11

11:                                               ; preds = %8, %5
  %12 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 46
  %13 = load i32, i32* %12, align 4, !tbaa !126
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %15, label %857

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 45
  %17 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 59
  %18 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 58
  %19 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 57
  %20 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 53
  %21 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 54
  %22 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 55
  %23 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 56
  br label %24

24:                                               ; preds = %852, %15
  %25 = phi i64 [ 0, %15 ], [ %853, %852 ]
  %26 = phi i16* [ %1, %15 ], [ %2, %852 ]
  %27 = load i32, i32* %16, align 8, !tbaa !95
  %28 = icmp sgt i32 %27, 0
  br i1 %28, label %29, label %852

29:                                               ; preds = %840, %24
  %30 = phi i64 [ %841, %840 ], [ 0, %24 ]
  %31 = phi i16* [ %89, %840 ], [ %26, %24 ]
  %32 = sub nsw i64 1, %30
  %33 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 0, i64 0
  br label %34

34:                                               ; preds = %34, %29
  %35 = phi i32 [ 0, %29 ], [ %90, %34 ]
  %36 = phi i16* [ %31, %29 ], [ %89, %34 ]
  %37 = phi double* [ %33, %29 ], [ %88, %34 ]
  tail call fastcc void @window_subband(i16* %36, double* nonnull %37)
  %38 = getelementptr inbounds i16, i16* %36, i64 32
  %39 = getelementptr inbounds double, double* %37, i64 32
  tail call fastcc void @window_subband(i16* nonnull %38, double* nonnull %39)
  %40 = getelementptr inbounds double, double* %37, i64 33
  %41 = load double, double* %40, align 8, !tbaa !27
  %42 = fsub double -0.000000e+00, %41
  store double %42, double* %40, align 8, !tbaa !27
  %43 = getelementptr inbounds double, double* %37, i64 35
  %44 = load double, double* %43, align 8, !tbaa !27
  %45 = fsub double -0.000000e+00, %44
  store double %45, double* %43, align 8, !tbaa !27
  %46 = getelementptr inbounds double, double* %37, i64 37
  %47 = load double, double* %46, align 8, !tbaa !27
  %48 = fsub double -0.000000e+00, %47
  store double %48, double* %46, align 8, !tbaa !27
  %49 = getelementptr inbounds double, double* %37, i64 39
  %50 = load double, double* %49, align 8, !tbaa !27
  %51 = fsub double -0.000000e+00, %50
  store double %51, double* %49, align 8, !tbaa !27
  %52 = getelementptr inbounds double, double* %37, i64 41
  %53 = load double, double* %52, align 8, !tbaa !27
  %54 = fsub double -0.000000e+00, %53
  store double %54, double* %52, align 8, !tbaa !27
  %55 = getelementptr inbounds double, double* %37, i64 43
  %56 = load double, double* %55, align 8, !tbaa !27
  %57 = fsub double -0.000000e+00, %56
  store double %57, double* %55, align 8, !tbaa !27
  %58 = getelementptr inbounds double, double* %37, i64 45
  %59 = load double, double* %58, align 8, !tbaa !27
  %60 = fsub double -0.000000e+00, %59
  store double %60, double* %58, align 8, !tbaa !27
  %61 = getelementptr inbounds double, double* %37, i64 47
  %62 = load double, double* %61, align 8, !tbaa !27
  %63 = fsub double -0.000000e+00, %62
  store double %63, double* %61, align 8, !tbaa !27
  %64 = getelementptr inbounds double, double* %37, i64 49
  %65 = load double, double* %64, align 8, !tbaa !27
  %66 = fsub double -0.000000e+00, %65
  store double %66, double* %64, align 8, !tbaa !27
  %67 = getelementptr inbounds double, double* %37, i64 51
  %68 = load double, double* %67, align 8, !tbaa !27
  %69 = fsub double -0.000000e+00, %68
  store double %69, double* %67, align 8, !tbaa !27
  %70 = getelementptr inbounds double, double* %37, i64 53
  %71 = load double, double* %70, align 8, !tbaa !27
  %72 = fsub double -0.000000e+00, %71
  store double %72, double* %70, align 8, !tbaa !27
  %73 = getelementptr inbounds double, double* %37, i64 55
  %74 = load double, double* %73, align 8, !tbaa !27
  %75 = fsub double -0.000000e+00, %74
  store double %75, double* %73, align 8, !tbaa !27
  %76 = getelementptr inbounds double, double* %37, i64 57
  %77 = load double, double* %76, align 8, !tbaa !27
  %78 = fsub double -0.000000e+00, %77
  store double %78, double* %76, align 8, !tbaa !27
  %79 = getelementptr inbounds double, double* %37, i64 59
  %80 = load double, double* %79, align 8, !tbaa !27
  %81 = fsub double -0.000000e+00, %80
  store double %81, double* %79, align 8, !tbaa !27
  %82 = getelementptr inbounds double, double* %37, i64 61
  %83 = load double, double* %82, align 8, !tbaa !27
  %84 = fsub double -0.000000e+00, %83
  store double %84, double* %82, align 8, !tbaa !27
  %85 = getelementptr inbounds double, double* %37, i64 63
  %86 = load double, double* %85, align 8, !tbaa !27
  %87 = fsub double -0.000000e+00, %86
  store double %87, double* %85, align 8, !tbaa !27
  %88 = getelementptr inbounds double, double* %37, i64 64
  %89 = getelementptr inbounds i16, i16* %36, i64 64
  %90 = add nuw nsw i32 %35, 1
  %91 = icmp eq i32 %90, 9
  br i1 %91, label %92, label %34

92:                                               ; preds = %34
  %93 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %3, i64 %30, i64 %25, i64 0
  %94 = load i32, i32* %17, align 8, !tbaa !172
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %250

96:                                               ; preds = %92
  %97 = load i32, i32* %18, align 4, !tbaa !175
  %98 = add i32 %97, 1
  %99 = load i32, i32* %19, align 8, !tbaa !173
  %100 = icmp slt i32 %98, %99
  br i1 %100, label %101, label %250

101:                                              ; preds = %96
  %102 = sext i32 %98 to i64
  br label %103

103:                                              ; preds = %245, %101
  %104 = phi i64 [ %102, %101 ], [ %246, %245 ]
  %105 = trunc i64 %104 to i32
  %106 = sitofp i32 %105 to double
  %107 = fdiv double %106, 3.100000e+01
  %108 = load float, float* %20, align 8, !tbaa !165
  %109 = fpext float %108 to double
  %110 = fcmp ogt double %107, %109
  br i1 %110, label %111, label %176

111:                                              ; preds = %103
  %112 = load float, float* %21, align 4, !tbaa !166
  %113 = fpext float %112 to double
  %114 = fcmp olt double %107, %113
  br i1 %114, label %115, label %176

115:                                              ; preds = %111
  %116 = fsub double %109, %107
  %117 = fmul double %116, 0x3FF921FB54442D18
  %118 = fsub float %112, %108
  %119 = fpext float %118 to double
  %120 = fdiv double %117, %119
  %121 = tail call double @cos(double %120) #21
  %122 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 0, i64 %104
  %123 = load double, double* %122, align 8, !tbaa !27
  %124 = fmul double %121, %123
  store double %124, double* %122, align 8, !tbaa !27
  %125 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 1, i64 %104
  %126 = load double, double* %125, align 8, !tbaa !27
  %127 = fmul double %121, %126
  store double %127, double* %125, align 8, !tbaa !27
  %128 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 2, i64 %104
  %129 = load double, double* %128, align 8, !tbaa !27
  %130 = fmul double %121, %129
  store double %130, double* %128, align 8, !tbaa !27
  %131 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 3, i64 %104
  %132 = load double, double* %131, align 8, !tbaa !27
  %133 = fmul double %121, %132
  store double %133, double* %131, align 8, !tbaa !27
  %134 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 4, i64 %104
  %135 = load double, double* %134, align 8, !tbaa !27
  %136 = fmul double %121, %135
  store double %136, double* %134, align 8, !tbaa !27
  %137 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 5, i64 %104
  %138 = load double, double* %137, align 8, !tbaa !27
  %139 = fmul double %121, %138
  store double %139, double* %137, align 8, !tbaa !27
  %140 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 6, i64 %104
  %141 = load double, double* %140, align 8, !tbaa !27
  %142 = fmul double %121, %141
  store double %142, double* %140, align 8, !tbaa !27
  %143 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 7, i64 %104
  %144 = load double, double* %143, align 8, !tbaa !27
  %145 = fmul double %121, %144
  store double %145, double* %143, align 8, !tbaa !27
  %146 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 8, i64 %104
  %147 = load double, double* %146, align 8, !tbaa !27
  %148 = fmul double %121, %147
  store double %148, double* %146, align 8, !tbaa !27
  %149 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 9, i64 %104
  %150 = load double, double* %149, align 8, !tbaa !27
  %151 = fmul double %121, %150
  store double %151, double* %149, align 8, !tbaa !27
  %152 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 10, i64 %104
  %153 = load double, double* %152, align 8, !tbaa !27
  %154 = fmul double %121, %153
  store double %154, double* %152, align 8, !tbaa !27
  %155 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 11, i64 %104
  %156 = load double, double* %155, align 8, !tbaa !27
  %157 = fmul double %121, %156
  store double %157, double* %155, align 8, !tbaa !27
  %158 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 12, i64 %104
  %159 = load double, double* %158, align 8, !tbaa !27
  %160 = fmul double %121, %159
  store double %160, double* %158, align 8, !tbaa !27
  %161 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 13, i64 %104
  %162 = load double, double* %161, align 8, !tbaa !27
  %163 = fmul double %121, %162
  store double %163, double* %161, align 8, !tbaa !27
  %164 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 14, i64 %104
  %165 = load double, double* %164, align 8, !tbaa !27
  %166 = fmul double %121, %165
  store double %166, double* %164, align 8, !tbaa !27
  %167 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 15, i64 %104
  %168 = load double, double* %167, align 8, !tbaa !27
  %169 = fmul double %121, %168
  store double %169, double* %167, align 8, !tbaa !27
  %170 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 16, i64 %104
  %171 = load double, double* %170, align 8, !tbaa !27
  %172 = fmul double %121, %171
  store double %172, double* %170, align 8, !tbaa !27
  %173 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 17, i64 %104
  %174 = load double, double* %173, align 8, !tbaa !27
  %175 = fmul double %121, %174
  store double %175, double* %173, align 8, !tbaa !27
  br label %176

176:                                              ; preds = %115, %111, %103
  %177 = load float, float* %22, align 8, !tbaa !168
  %178 = fpext float %177 to double
  %179 = fcmp ogt double %107, %178
  br i1 %179, label %180, label %245

180:                                              ; preds = %176
  %181 = load float, float* %23, align 4, !tbaa !170
  %182 = fpext float %181 to double
  %183 = fcmp olt double %107, %182
  br i1 %183, label %184, label %245

184:                                              ; preds = %180
  %185 = fsub double %182, %107
  %186 = fmul double %185, 0x3FF921FB54442D18
  %187 = fsub float %181, %177
  %188 = fpext float %187 to double
  %189 = fdiv double %186, %188
  %190 = tail call double @cos(double %189) #21
  %191 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 0, i64 %104
  %192 = load double, double* %191, align 8, !tbaa !27
  %193 = fmul double %190, %192
  store double %193, double* %191, align 8, !tbaa !27
  %194 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 1, i64 %104
  %195 = load double, double* %194, align 8, !tbaa !27
  %196 = fmul double %190, %195
  store double %196, double* %194, align 8, !tbaa !27
  %197 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 2, i64 %104
  %198 = load double, double* %197, align 8, !tbaa !27
  %199 = fmul double %190, %198
  store double %199, double* %197, align 8, !tbaa !27
  %200 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 3, i64 %104
  %201 = load double, double* %200, align 8, !tbaa !27
  %202 = fmul double %190, %201
  store double %202, double* %200, align 8, !tbaa !27
  %203 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 4, i64 %104
  %204 = load double, double* %203, align 8, !tbaa !27
  %205 = fmul double %190, %204
  store double %205, double* %203, align 8, !tbaa !27
  %206 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 5, i64 %104
  %207 = load double, double* %206, align 8, !tbaa !27
  %208 = fmul double %190, %207
  store double %208, double* %206, align 8, !tbaa !27
  %209 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 6, i64 %104
  %210 = load double, double* %209, align 8, !tbaa !27
  %211 = fmul double %190, %210
  store double %211, double* %209, align 8, !tbaa !27
  %212 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 7, i64 %104
  %213 = load double, double* %212, align 8, !tbaa !27
  %214 = fmul double %190, %213
  store double %214, double* %212, align 8, !tbaa !27
  %215 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 8, i64 %104
  %216 = load double, double* %215, align 8, !tbaa !27
  %217 = fmul double %190, %216
  store double %217, double* %215, align 8, !tbaa !27
  %218 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 9, i64 %104
  %219 = load double, double* %218, align 8, !tbaa !27
  %220 = fmul double %190, %219
  store double %220, double* %218, align 8, !tbaa !27
  %221 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 10, i64 %104
  %222 = load double, double* %221, align 8, !tbaa !27
  %223 = fmul double %190, %222
  store double %223, double* %221, align 8, !tbaa !27
  %224 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 11, i64 %104
  %225 = load double, double* %224, align 8, !tbaa !27
  %226 = fmul double %190, %225
  store double %226, double* %224, align 8, !tbaa !27
  %227 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 12, i64 %104
  %228 = load double, double* %227, align 8, !tbaa !27
  %229 = fmul double %190, %228
  store double %229, double* %227, align 8, !tbaa !27
  %230 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 13, i64 %104
  %231 = load double, double* %230, align 8, !tbaa !27
  %232 = fmul double %190, %231
  store double %232, double* %230, align 8, !tbaa !27
  %233 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 14, i64 %104
  %234 = load double, double* %233, align 8, !tbaa !27
  %235 = fmul double %190, %234
  store double %235, double* %233, align 8, !tbaa !27
  %236 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 15, i64 %104
  %237 = load double, double* %236, align 8, !tbaa !27
  %238 = fmul double %190, %237
  store double %238, double* %236, align 8, !tbaa !27
  %239 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 16, i64 %104
  %240 = load double, double* %239, align 8, !tbaa !27
  %241 = fmul double %190, %240
  store double %241, double* %239, align 8, !tbaa !27
  %242 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 17, i64 %104
  %243 = load double, double* %242, align 8, !tbaa !27
  %244 = fmul double %190, %243
  store double %244, double* %242, align 8, !tbaa !27
  br label %245

245:                                              ; preds = %184, %180, %176
  %246 = add nsw i64 %104, 1
  %247 = load i32, i32* %19, align 8, !tbaa !173
  %248 = sext i32 %247 to i64
  %249 = icmp slt i64 %246, %248
  br i1 %249, label %103, label %250

250:                                              ; preds = %245, %96, %92
  %251 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %4, i64 0, i32 4, i64 %30, i32 0, i64 %25, i32 0, i32 6
  %252 = load double, double* @ca.7, align 16
  %253 = load double, double* @cs.7, align 16
  %254 = load double, double* @ca.6, align 16
  %255 = load double, double* @cs.6, align 16
  %256 = load double, double* @ca.5, align 16
  %257 = load double, double* @cs.5, align 16
  %258 = load double, double* @ca.4, align 16
  %259 = load double, double* @cs.4, align 16
  %260 = load double, double* @ca.3, align 16
  %261 = load double, double* @cs.3, align 16
  %262 = load double, double* @ca.2, align 16
  %263 = load double, double* @cs.2, align 16
  %264 = load double, double* @ca.1, align 16
  %265 = load double, double* @cs.1, align 16
  %266 = load double, double* @ca.0, align 16
  %267 = load double, double* @cs.0, align 16
  %268 = insertelement <2 x double> undef, double %252, i32 0
  %269 = insertelement <2 x double> %268, double %254, i32 1
  %270 = insertelement <2 x double> undef, double %253, i32 0
  %271 = insertelement <2 x double> %270, double %255, i32 1
  %272 = insertelement <2 x double> undef, double %256, i32 0
  %273 = insertelement <2 x double> %272, double %258, i32 1
  %274 = insertelement <2 x double> undef, double %257, i32 0
  %275 = insertelement <2 x double> %274, double %259, i32 1
  %276 = insertelement <2 x double> undef, double %260, i32 0
  %277 = insertelement <2 x double> %276, double %262, i32 1
  %278 = insertelement <2 x double> undef, double %261, i32 0
  %279 = insertelement <2 x double> %278, double %263, i32 1
  %280 = insertelement <2 x double> undef, double %264, i32 0
  %281 = insertelement <2 x double> %280, double %266, i32 1
  %282 = insertelement <2 x double> undef, double %265, i32 0
  %283 = insertelement <2 x double> %282, double %267, i32 1
  %284 = insertelement <2 x double> undef, double %265, i32 0
  %285 = insertelement <2 x double> %284, double %267, i32 1
  %286 = insertelement <2 x double> undef, double %264, i32 0
  %287 = insertelement <2 x double> %286, double %266, i32 1
  %288 = insertelement <2 x double> undef, double %261, i32 0
  %289 = insertelement <2 x double> %288, double %263, i32 1
  %290 = insertelement <2 x double> undef, double %260, i32 0
  %291 = insertelement <2 x double> %290, double %262, i32 1
  %292 = insertelement <2 x double> undef, double %257, i32 0
  %293 = insertelement <2 x double> %292, double %259, i32 1
  %294 = insertelement <2 x double> undef, double %256, i32 0
  %295 = insertelement <2 x double> %294, double %258, i32 1
  %296 = insertelement <2 x double> undef, double %253, i32 0
  %297 = insertelement <2 x double> %296, double %255, i32 1
  %298 = insertelement <2 x double> undef, double %252, i32 0
  %299 = insertelement <2 x double> %298, double %254, i32 1
  br label %300

300:                                              ; preds = %836, %250
  %301 = phi i64 [ 0, %250 ], [ %837, %836 ]
  %302 = phi double* [ %93, %250 ], [ %838, %836 ]
  %303 = load i32, i32* %251, align 8, !tbaa !138
  %304 = load i32, i32* %19, align 8, !tbaa !173
  %305 = sext i32 %304 to i64
  %306 = icmp slt i64 %301, %305
  br i1 %306, label %307, label %311

307:                                              ; preds = %300
  %308 = load i32, i32* %18, align 4, !tbaa !175
  %309 = sext i32 %308 to i64
  %310 = icmp sgt i64 %301, %309
  br i1 %310, label %313, label %311

311:                                              ; preds = %307, %300
  %312 = bitcast double* %302 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(144) %312, i8 0, i64 144, i1 false)
  br label %768

313:                                              ; preds = %307
  %314 = icmp eq i32 %303, 2
  br i1 %314, label %317, label %315

315:                                              ; preds = %313
  %316 = sext i32 %303 to i64
  br label %492

317:                                              ; preds = %313
  %318 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 2), align 16, !tbaa !27
  %319 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %30, i64 8, i64 %301
  %320 = load double, double* %319, align 8, !tbaa !27
  %321 = fmul double %318, %320
  %322 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %30, i64 9, i64 %301
  %323 = load double, double* %322, align 8, !tbaa !27
  %324 = fsub double %321, %323
  store double %324, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 6), align 16, !tbaa !27
  %325 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %30, i64 14, i64 %301
  %326 = load double, double* %325, align 8, !tbaa !27
  %327 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %30, i64 15, i64 %301
  %328 = load double, double* %327, align 8, !tbaa !27
  %329 = fmul double %318, %328
  %330 = fadd double %326, %329
  store double %330, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 9), align 8, !tbaa !27
  %331 = fmul double %318, %326
  %332 = fsub double %331, %328
  store double %332, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 12), align 16, !tbaa !27
  %333 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 2, i64 %301
  %334 = load double, double* %333, align 8, !tbaa !27
  %335 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 3, i64 %301
  %336 = load double, double* %335, align 8, !tbaa !27
  %337 = fmul double %318, %336
  %338 = fadd double %334, %337
  store double %338, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 15), align 8, !tbaa !27
  %339 = fmul double %318, %334
  %340 = fsub double %339, %336
  store double %340, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 18), align 16, !tbaa !27
  %341 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 8, i64 %301
  %342 = load double, double* %341, align 8, !tbaa !27
  %343 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 9, i64 %301
  %344 = load double, double* %343, align 8, !tbaa !27
  %345 = fmul double %318, %344
  %346 = fadd double %342, %345
  store double %346, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 21), align 8, !tbaa !27
  %347 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %30, i64 7, i64 %301
  %348 = load double, double* %347, align 8, !tbaa !27
  %349 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %30, i64 10, i64 %301
  %350 = load double, double* %349, align 8, !tbaa !27
  %351 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %30, i64 13, i64 %301
  %352 = load double, double* %351, align 8, !tbaa !27
  %353 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %30, i64 16, i64 %301
  %354 = load double, double* %353, align 8, !tbaa !27
  %355 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 0) to <2 x double>*), align 16, !tbaa !27
  %356 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 1, i64 %301
  %357 = load double, double* %356, align 8, !tbaa !27
  %358 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 4, i64 %301
  %359 = load double, double* %358, align 8, !tbaa !27
  %360 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 7, i64 %301
  %361 = load double, double* %360, align 8, !tbaa !27
  %362 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 10, i64 %301
  %363 = load double, double* %362, align 8, !tbaa !27
  %364 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %30, i64 6, i64 %301
  %365 = load double, double* %364, align 8, !tbaa !27
  %366 = insertelement <2 x double> undef, double %365, i32 0
  %367 = insertelement <2 x double> %366, double %348, i32 1
  %368 = fmul <2 x double> %355, %367
  %369 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %30, i64 11, i64 %301
  %370 = load double, double* %369, align 8, !tbaa !27
  %371 = insertelement <2 x double> undef, double %370, i32 0
  %372 = insertelement <2 x double> %371, double %350, i32 1
  %373 = fsub <2 x double> %368, %372
  store <2 x double> %373, <2 x double>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 4) to <2 x double>*), align 16, !tbaa !27
  %374 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %30, i64 12, i64 %301
  %375 = load double, double* %374, align 8, !tbaa !27
  %376 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %30, i64 17, i64 %301
  %377 = load double, double* %376, align 8, !tbaa !27
  %378 = insertelement <2 x double> undef, double %377, i32 0
  %379 = insertelement <2 x double> %378, double %354, i32 1
  %380 = fmul <2 x double> %355, %379
  %381 = insertelement <2 x double> undef, double %375, i32 0
  %382 = insertelement <2 x double> %381, double %352, i32 1
  %383 = fadd <2 x double> %382, %380
  store <2 x double> %383, <2 x double>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 7) to <2 x double>*), align 8, !tbaa !27
  %384 = fmul <2 x double> %355, %382
  %385 = fsub <2 x double> %384, %379
  store <2 x double> %385, <2 x double>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 10) to <2 x double>*), align 16, !tbaa !27
  %386 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 0, i64 %301
  %387 = load double, double* %386, align 8, !tbaa !27
  %388 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 5, i64 %301
  %389 = load double, double* %388, align 8, !tbaa !27
  %390 = insertelement <2 x double> undef, double %389, i32 0
  %391 = insertelement <2 x double> %390, double %359, i32 1
  %392 = fmul <2 x double> %355, %391
  %393 = insertelement <2 x double> undef, double %387, i32 0
  %394 = insertelement <2 x double> %393, double %357, i32 1
  %395 = fadd <2 x double> %394, %392
  store <2 x double> %395, <2 x double>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 13) to <2 x double>*), align 8, !tbaa !27
  %396 = fmul <2 x double> %355, %394
  %397 = fsub <2 x double> %396, %391
  store <2 x double> %397, <2 x double>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 16) to <2 x double>*), align 16, !tbaa !27
  %398 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 6, i64 %301
  %399 = load double, double* %398, align 8, !tbaa !27
  %400 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 11, i64 %301
  %401 = load double, double* %400, align 8, !tbaa !27
  %402 = insertelement <2 x double> undef, double %401, i32 0
  %403 = insertelement <2 x double> %402, double %363, i32 1
  %404 = fmul <2 x double> %355, %403
  %405 = insertelement <2 x double> undef, double %399, i32 0
  %406 = insertelement <2 x double> %405, double %361, i32 1
  %407 = fadd <2 x double> %406, %404
  store <2 x double> %407, <2 x double>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 19) to <2 x double>*), align 8, !tbaa !27
  %408 = extractelement <2 x double> %397, i32 0
  %409 = extractelement <2 x double> %397, i32 1
  %410 = extractelement <2 x double> %407, i32 0
  %411 = extractelement <2 x double> %407, i32 1
  br label %412

412:                                              ; preds = %484, %317
  %413 = phi double [ %491, %484 ], [ %346, %317 ]
  %414 = phi double [ %490, %484 ], [ %411, %317 ]
  %415 = phi double [ %489, %484 ], [ %410, %317 ]
  %416 = phi double [ %488, %484 ], [ %340, %317 ]
  %417 = phi double [ %487, %484 ], [ %409, %317 ]
  %418 = phi double [ %486, %484 ], [ %408, %317 ]
  %419 = phi i64 [ %485, %484 ], [ 5, %317 ]
  %420 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i64 0, i64 %419, i64 0
  %421 = load double, double* %420, align 16, !tbaa !27
  %422 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i64 0, i64 %419, i64 1
  %423 = load double, double* %422, align 8, !tbaa !27
  %424 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i64 0, i64 %419, i64 2
  %425 = load double, double* %424, align 16, !tbaa !27
  %426 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i64 0, i64 %419, i64 3
  %427 = load double, double* %426, align 8, !tbaa !27
  %428 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i64 0, i64 %419, i64 4
  %429 = load double, double* %428, align 16, !tbaa !27
  %430 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i64 0, i64 %419, i64 5
  %431 = load double, double* %430, align 8, !tbaa !27
  %432 = mul nuw nsw i64 %419, 3
  %433 = fmul double %421, %418
  %434 = fmul double %423, %417
  %435 = fadd double %433, %434
  %436 = fmul double %425, %416
  %437 = fadd double %435, %436
  %438 = fmul double %427, %415
  %439 = fadd double %437, %438
  %440 = fmul double %429, %414
  %441 = fadd double %439, %440
  %442 = fmul double %431, %413
  %443 = fadd double %441, %442
  %444 = add nuw nsw i64 %432, 2
  %445 = getelementptr inbounds double, double* %302, i64 %444
  store double %443, double* %445, align 8, !tbaa !27
  %446 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 10), align 16, !tbaa !27
  %447 = fmul double %421, %446
  %448 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 11), align 8, !tbaa !27
  %449 = fmul double %423, %448
  %450 = fadd double %447, %449
  %451 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 12), align 16, !tbaa !27
  %452 = fmul double %425, %451
  %453 = fadd double %450, %452
  %454 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 13), align 8, !tbaa !27
  %455 = fmul double %427, %454
  %456 = fadd double %453, %455
  %457 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 14), align 16, !tbaa !27
  %458 = fmul double %429, %457
  %459 = fadd double %456, %458
  %460 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 15), align 8, !tbaa !27
  %461 = fmul double %431, %460
  %462 = fadd double %459, %461
  %463 = add nuw nsw i64 %432, 1
  %464 = getelementptr inbounds double, double* %302, i64 %463
  store double %462, double* %464, align 8, !tbaa !27
  %465 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 4), align 16, !tbaa !27
  %466 = fmul double %421, %465
  %467 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 5), align 8, !tbaa !27
  %468 = fmul double %423, %467
  %469 = fadd double %466, %468
  %470 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 6), align 16, !tbaa !27
  %471 = fmul double %425, %470
  %472 = fadd double %469, %471
  %473 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 7), align 8, !tbaa !27
  %474 = fmul double %427, %473
  %475 = fadd double %472, %474
  %476 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 8), align 16, !tbaa !27
  %477 = fmul double %429, %476
  %478 = fadd double %475, %477
  %479 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 9), align 8, !tbaa !27
  %480 = fmul double %431, %479
  %481 = fadd double %478, %480
  %482 = getelementptr inbounds double, double* %302, i64 %432
  store double %481, double* %482, align 8, !tbaa !27
  %483 = icmp eq i64 %419, 0
  br i1 %483, label %768, label %484

484:                                              ; preds = %412
  %485 = add nsw i64 %419, -1
  %486 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 16), align 16, !tbaa !27
  %487 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 17), align 8, !tbaa !27
  %488 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 18), align 16, !tbaa !27
  %489 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 19), align 8, !tbaa !27
  %490 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 20), align 16, !tbaa !27
  %491 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 21), align 8, !tbaa !27
  br label %412

492:                                              ; preds = %492, %315
  %493 = phi i64 [ 8, %315 ], [ %522, %492 ]
  %494 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 %316, i64 %493
  %495 = load double, double* %494, align 8, !tbaa !27
  %496 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %30, i64 %493, i64 %301
  %497 = load double, double* %496, align 8, !tbaa !27
  %498 = fmul double %495, %497
  %499 = add nuw nsw i64 %493, 9
  %500 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 %316, i64 %499
  %501 = load double, double* %500, align 8, !tbaa !27
  %502 = sub nuw nsw i64 17, %493
  %503 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %30, i64 %502, i64 %301
  %504 = load double, double* %503, align 8, !tbaa !27
  %505 = fmul double %501, %504
  %506 = fsub double %498, %505
  %507 = getelementptr inbounds double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 4), i64 %493
  store double %506, double* %507, align 8, !tbaa !27
  %508 = add nuw nsw i64 %493, 18
  %509 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 %316, i64 %508
  %510 = load double, double* %509, align 8, !tbaa !27
  %511 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 %493, i64 %301
  %512 = load double, double* %511, align 8, !tbaa !27
  %513 = fmul double %510, %512
  %514 = add nuw nsw i64 %493, 27
  %515 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 %316, i64 %514
  %516 = load double, double* %515, align 8, !tbaa !27
  %517 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 %32, i64 %502, i64 %301
  %518 = load double, double* %517, align 8, !tbaa !27
  %519 = fmul double %516, %518
  %520 = fadd double %513, %519
  %521 = getelementptr inbounds double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 4), i64 %499
  store double %520, double* %521, align 8, !tbaa !27
  %522 = add nsw i64 %493, -1
  %523 = icmp eq i64 %493, 0
  br i1 %523, label %524, label %492

524:                                              ; preds = %524, %492
  %525 = phi i64 [ %620, %524 ], [ 11, %492 ]
  %526 = phi double* [ %619, %524 ], [ getelementptr inbounds ([244 x double], [244 x double]* @cos_l, i64 0, i64 0), %492 ]
  %527 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 4), align 16, !tbaa !27
  %528 = load double, double* %526, align 8, !tbaa !27
  %529 = fmul double %527, %528
  %530 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 5), align 8, !tbaa !27
  %531 = getelementptr inbounds double, double* %526, i64 1
  %532 = load double, double* %531, align 8, !tbaa !27
  %533 = fmul double %530, %532
  %534 = fadd double %529, %533
  %535 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 6), align 16, !tbaa !27
  %536 = getelementptr inbounds double, double* %526, i64 2
  %537 = load double, double* %536, align 8, !tbaa !27
  %538 = fmul double %535, %537
  %539 = fadd double %534, %538
  %540 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 7), align 8, !tbaa !27
  %541 = getelementptr inbounds double, double* %526, i64 3
  %542 = load double, double* %541, align 8, !tbaa !27
  %543 = fmul double %540, %542
  %544 = fadd double %539, %543
  %545 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 8), align 16, !tbaa !27
  %546 = getelementptr inbounds double, double* %526, i64 4
  %547 = load double, double* %546, align 8, !tbaa !27
  %548 = fmul double %545, %547
  %549 = fadd double %544, %548
  %550 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 9), align 8, !tbaa !27
  %551 = getelementptr inbounds double, double* %526, i64 5
  %552 = load double, double* %551, align 8, !tbaa !27
  %553 = fmul double %550, %552
  %554 = fadd double %549, %553
  %555 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 10), align 16, !tbaa !27
  %556 = getelementptr inbounds double, double* %526, i64 6
  %557 = load double, double* %556, align 8, !tbaa !27
  %558 = fmul double %555, %557
  %559 = fadd double %554, %558
  %560 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 11), align 8, !tbaa !27
  %561 = getelementptr inbounds double, double* %526, i64 7
  %562 = load double, double* %561, align 8, !tbaa !27
  %563 = fmul double %560, %562
  %564 = fadd double %559, %563
  %565 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 12), align 16, !tbaa !27
  %566 = getelementptr inbounds double, double* %526, i64 8
  %567 = load double, double* %566, align 8, !tbaa !27
  %568 = fmul double %565, %567
  %569 = fadd double %564, %568
  %570 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 13), align 8, !tbaa !27
  %571 = getelementptr inbounds double, double* %526, i64 9
  %572 = load double, double* %571, align 8, !tbaa !27
  %573 = fmul double %570, %572
  %574 = fadd double %569, %573
  %575 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 14), align 16, !tbaa !27
  %576 = getelementptr inbounds double, double* %526, i64 10
  %577 = load double, double* %576, align 8, !tbaa !27
  %578 = fmul double %575, %577
  %579 = fadd double %574, %578
  %580 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 15), align 8, !tbaa !27
  %581 = getelementptr inbounds double, double* %526, i64 11
  %582 = load double, double* %581, align 8, !tbaa !27
  %583 = fmul double %580, %582
  %584 = fadd double %579, %583
  %585 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 16), align 16, !tbaa !27
  %586 = getelementptr inbounds double, double* %526, i64 12
  %587 = load double, double* %586, align 8, !tbaa !27
  %588 = fmul double %585, %587
  %589 = fadd double %584, %588
  %590 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 17), align 8, !tbaa !27
  %591 = getelementptr inbounds double, double* %526, i64 13
  %592 = load double, double* %591, align 8, !tbaa !27
  %593 = fmul double %590, %592
  %594 = fadd double %589, %593
  %595 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 18), align 16, !tbaa !27
  %596 = getelementptr inbounds double, double* %526, i64 14
  %597 = load double, double* %596, align 8, !tbaa !27
  %598 = fmul double %595, %597
  %599 = fadd double %594, %598
  %600 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 19), align 8, !tbaa !27
  %601 = getelementptr inbounds double, double* %526, i64 15
  %602 = load double, double* %601, align 8, !tbaa !27
  %603 = fmul double %600, %602
  %604 = fadd double %599, %603
  %605 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 20), align 16, !tbaa !27
  %606 = getelementptr inbounds double, double* %526, i64 16
  %607 = load double, double* %606, align 8, !tbaa !27
  %608 = fmul double %605, %607
  %609 = fadd double %604, %608
  %610 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 21), align 8, !tbaa !27
  %611 = getelementptr inbounds double, double* %526, i64 17
  %612 = load double, double* %611, align 8, !tbaa !27
  %613 = fmul double %610, %612
  %614 = fadd double %609, %613
  %615 = getelementptr inbounds [12 x i32], [12 x i32]* @all, i64 0, i64 %525
  %616 = load i32, i32* %615, align 4, !tbaa !18
  %617 = sext i32 %616 to i64
  %618 = getelementptr inbounds double, double* %302, i64 %617
  store double %614, double* %618, align 8, !tbaa !27
  %619 = getelementptr inbounds double, double* %526, i64 18
  %620 = add nsw i64 %525, -1
  %621 = icmp eq i64 %525, 0
  br i1 %621, label %622, label %524

622:                                              ; preds = %524
  %623 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 4), align 16, !tbaa !27
  %624 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 9), align 8, !tbaa !27
  %625 = fadd double %623, %624
  %626 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 19), align 8, !tbaa !27
  %627 = fadd double %625, %626
  %628 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 5), align 8, !tbaa !27
  %629 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 8), align 16, !tbaa !27
  %630 = fadd double %628, %629
  %631 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 20), align 16, !tbaa !27
  %632 = fadd double %630, %631
  %633 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 6), align 16, !tbaa !27
  %634 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 7), align 8, !tbaa !27
  %635 = fadd double %633, %634
  %636 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 21), align 8, !tbaa !27
  %637 = fadd double %635, %636
  %638 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 10), align 16, !tbaa !27
  %639 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 13), align 8, !tbaa !27
  %640 = fsub double %638, %639
  %641 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 18), align 16, !tbaa !27
  %642 = fadd double %640, %641
  %643 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 11), align 8, !tbaa !27
  %644 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 14), align 16, !tbaa !27
  %645 = fsub double %643, %644
  %646 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 17), align 8, !tbaa !27
  %647 = fadd double %645, %646
  %648 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 12), align 16, !tbaa !27
  %649 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 15), align 8, !tbaa !27
  %650 = fsub double %648, %649
  %651 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 16), align 16, !tbaa !27
  %652 = fadd double %650, %651
  %653 = load double, double* %619, align 8, !tbaa !27
  %654 = fmul double %627, %653
  %655 = getelementptr inbounds double, double* %526, i64 19
  %656 = load double, double* %655, align 8, !tbaa !27
  %657 = fmul double %632, %656
  %658 = fadd double %654, %657
  %659 = getelementptr inbounds double, double* %526, i64 20
  %660 = load double, double* %659, align 8, !tbaa !27
  %661 = fmul double %637, %660
  %662 = fadd double %658, %661
  %663 = getelementptr inbounds double, double* %526, i64 21
  %664 = load double, double* %663, align 8, !tbaa !27
  %665 = fmul double %642, %664
  %666 = fadd double %662, %665
  %667 = getelementptr inbounds double, double* %526, i64 22
  %668 = load double, double* %667, align 8, !tbaa !27
  %669 = fmul double %647, %668
  %670 = fadd double %666, %669
  %671 = getelementptr inbounds double, double* %526, i64 23
  %672 = load double, double* %671, align 8, !tbaa !27
  %673 = fmul double %652, %672
  %674 = fadd double %670, %673
  %675 = getelementptr inbounds double, double* %302, i64 16
  store double %674, double* %675, align 8, !tbaa !27
  %676 = getelementptr inbounds double, double* %526, i64 24
  %677 = load double, double* %676, align 8, !tbaa !27
  %678 = fmul double %627, %677
  %679 = getelementptr inbounds double, double* %526, i64 25
  %680 = load double, double* %679, align 8, !tbaa !27
  %681 = fmul double %632, %680
  %682 = fadd double %678, %681
  %683 = getelementptr inbounds double, double* %526, i64 26
  %684 = load double, double* %683, align 8, !tbaa !27
  %685 = fmul double %637, %684
  %686 = fadd double %682, %685
  %687 = getelementptr inbounds double, double* %526, i64 27
  %688 = load double, double* %687, align 8, !tbaa !27
  %689 = fmul double %642, %688
  %690 = fadd double %686, %689
  %691 = getelementptr inbounds double, double* %526, i64 28
  %692 = load double, double* %691, align 8, !tbaa !27
  %693 = fmul double %647, %692
  %694 = fadd double %690, %693
  %695 = getelementptr inbounds double, double* %526, i64 29
  %696 = load double, double* %695, align 8, !tbaa !27
  %697 = fmul double %652, %696
  %698 = fadd double %694, %697
  %699 = getelementptr inbounds double, double* %302, i64 10
  store double %698, double* %699, align 8, !tbaa !27
  %700 = getelementptr inbounds double, double* %526, i64 30
  %701 = load double, double* %700, align 8, !tbaa !27
  %702 = fmul double %627, %701
  %703 = getelementptr inbounds double, double* %526, i64 31
  %704 = load double, double* %703, align 8, !tbaa !27
  %705 = fmul double %632, %704
  %706 = fadd double %702, %705
  %707 = getelementptr inbounds double, double* %526, i64 32
  %708 = load double, double* %707, align 8, !tbaa !27
  %709 = fmul double %637, %708
  %710 = fadd double %706, %709
  %711 = getelementptr inbounds double, double* %526, i64 33
  %712 = load double, double* %711, align 8, !tbaa !27
  %713 = fmul double %642, %712
  %714 = fadd double %710, %713
  %715 = getelementptr inbounds double, double* %526, i64 34
  %716 = load double, double* %715, align 8, !tbaa !27
  %717 = fmul double %647, %716
  %718 = fadd double %714, %717
  %719 = getelementptr inbounds double, double* %526, i64 35
  %720 = load double, double* %719, align 8, !tbaa !27
  %721 = fmul double %652, %720
  %722 = fadd double %718, %721
  %723 = getelementptr inbounds double, double* %302, i64 7
  store double %722, double* %723, align 8, !tbaa !27
  %724 = getelementptr inbounds double, double* %526, i64 36
  %725 = load double, double* %724, align 8, !tbaa !27
  %726 = fmul double %627, %725
  %727 = getelementptr inbounds double, double* %526, i64 37
  %728 = load double, double* %727, align 8, !tbaa !27
  %729 = fmul double %632, %728
  %730 = fadd double %726, %729
  %731 = getelementptr inbounds double, double* %526, i64 38
  %732 = load double, double* %731, align 8, !tbaa !27
  %733 = fmul double %637, %732
  %734 = fadd double %730, %733
  %735 = getelementptr inbounds double, double* %526, i64 39
  %736 = load double, double* %735, align 8, !tbaa !27
  %737 = fmul double %642, %736
  %738 = fadd double %734, %737
  %739 = getelementptr inbounds double, double* %526, i64 40
  %740 = load double, double* %739, align 8, !tbaa !27
  %741 = fmul double %647, %740
  %742 = fadd double %738, %741
  %743 = getelementptr inbounds double, double* %526, i64 41
  %744 = load double, double* %743, align 8, !tbaa !27
  %745 = fmul double %652, %744
  %746 = fadd double %742, %745
  %747 = getelementptr inbounds double, double* %302, i64 1
  store double %746, double* %747, align 8, !tbaa !27
  %748 = getelementptr inbounds double, double* %526, i64 42
  %749 = fsub double %627, %632
  %750 = fadd double %749, %652
  %751 = fsub double %637, %642
  %752 = fsub double %751, %647
  %753 = load double, double* %748, align 8, !tbaa !27
  %754 = fmul double %750, %753
  %755 = getelementptr inbounds double, double* %526, i64 43
  %756 = load double, double* %755, align 8, !tbaa !27
  %757 = fmul double %752, %756
  %758 = fadd double %754, %757
  %759 = getelementptr inbounds double, double* %302, i64 13
  store double %758, double* %759, align 8, !tbaa !27
  %760 = getelementptr inbounds double, double* %526, i64 44
  %761 = load double, double* %760, align 8, !tbaa !27
  %762 = fmul double %750, %761
  %763 = getelementptr inbounds double, double* %526, i64 45
  %764 = load double, double* %763, align 8, !tbaa !27
  %765 = fmul double %752, %764
  %766 = fadd double %762, %765
  %767 = getelementptr inbounds double, double* %302, i64 4
  store double %766, double* %767, align 8, !tbaa !27
  br label %768

768:                                              ; preds = %622, %412, %311
  %769 = icmp eq i32 %303, 2
  %770 = icmp eq i64 %301, 0
  %771 = or i1 %770, %769
  br i1 %771, label %836, label %772

772:                                              ; preds = %768
  %773 = getelementptr inbounds double, double* %302, i64 -8
  %774 = getelementptr inbounds double, double* %302, i64 6
  %775 = bitcast double* %774 to <2 x double>*
  %776 = load <2 x double>, <2 x double>* %775, align 8, !tbaa !27
  %777 = shufflevector <2 x double> %776, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %778 = bitcast double* %773 to <2 x double>*
  %779 = load <2 x double>, <2 x double>* %778, align 8, !tbaa !27
  %780 = fmul <2 x double> %777, %269
  %781 = fmul <2 x double> %779, %271
  %782 = fadd <2 x double> %780, %781
  %783 = fmul <2 x double> %777, %297
  %784 = fmul <2 x double> %299, %779
  %785 = fsub <2 x double> %783, %784
  %786 = bitcast double* %773 to <2 x double>*
  store <2 x double> %782, <2 x double>* %786, align 8, !tbaa !27
  %787 = shufflevector <2 x double> %785, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %788 = bitcast double* %774 to <2 x double>*
  store <2 x double> %787, <2 x double>* %788, align 8, !tbaa !27
  %789 = getelementptr inbounds double, double* %302, i64 -6
  %790 = getelementptr inbounds double, double* %302, i64 4
  %791 = bitcast double* %790 to <2 x double>*
  %792 = load <2 x double>, <2 x double>* %791, align 8, !tbaa !27
  %793 = shufflevector <2 x double> %792, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %794 = bitcast double* %789 to <2 x double>*
  %795 = load <2 x double>, <2 x double>* %794, align 8, !tbaa !27
  %796 = fmul <2 x double> %793, %273
  %797 = fmul <2 x double> %795, %275
  %798 = fadd <2 x double> %796, %797
  %799 = fmul <2 x double> %793, %293
  %800 = fmul <2 x double> %295, %795
  %801 = fsub <2 x double> %799, %800
  %802 = bitcast double* %789 to <2 x double>*
  store <2 x double> %798, <2 x double>* %802, align 8, !tbaa !27
  %803 = shufflevector <2 x double> %801, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %804 = bitcast double* %790 to <2 x double>*
  store <2 x double> %803, <2 x double>* %804, align 8, !tbaa !27
  %805 = getelementptr inbounds double, double* %302, i64 -4
  %806 = getelementptr inbounds double, double* %302, i64 2
  %807 = bitcast double* %806 to <2 x double>*
  %808 = load <2 x double>, <2 x double>* %807, align 8, !tbaa !27
  %809 = shufflevector <2 x double> %808, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %810 = bitcast double* %805 to <2 x double>*
  %811 = load <2 x double>, <2 x double>* %810, align 8, !tbaa !27
  %812 = fmul <2 x double> %809, %277
  %813 = fmul <2 x double> %811, %279
  %814 = fadd <2 x double> %812, %813
  %815 = fmul <2 x double> %809, %289
  %816 = fmul <2 x double> %291, %811
  %817 = fsub <2 x double> %815, %816
  %818 = bitcast double* %805 to <2 x double>*
  store <2 x double> %814, <2 x double>* %818, align 8, !tbaa !27
  %819 = shufflevector <2 x double> %817, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %820 = bitcast double* %806 to <2 x double>*
  store <2 x double> %819, <2 x double>* %820, align 8, !tbaa !27
  %821 = getelementptr inbounds double, double* %302, i64 -2
  %822 = bitcast double* %302 to <2 x double>*
  %823 = load <2 x double>, <2 x double>* %822, align 8, !tbaa !27
  %824 = shufflevector <2 x double> %823, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %825 = bitcast double* %821 to <2 x double>*
  %826 = load <2 x double>, <2 x double>* %825, align 8, !tbaa !27
  %827 = fmul <2 x double> %824, %281
  %828 = fmul <2 x double> %826, %283
  %829 = fadd <2 x double> %827, %828
  %830 = fmul <2 x double> %824, %285
  %831 = fmul <2 x double> %287, %826
  %832 = fsub <2 x double> %830, %831
  %833 = bitcast double* %821 to <2 x double>*
  store <2 x double> %829, <2 x double>* %833, align 8, !tbaa !27
  %834 = shufflevector <2 x double> %832, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %835 = bitcast double* %302 to <2 x double>*
  store <2 x double> %834, <2 x double>* %835, align 8, !tbaa !27
  br label %836

836:                                              ; preds = %772, %768
  %837 = add nuw nsw i64 %301, 1
  %838 = getelementptr inbounds double, double* %302, i64 18
  %839 = icmp eq i64 %837, 32
  br i1 %839, label %840, label %300

840:                                              ; preds = %836
  %841 = add nuw nsw i64 %30, 1
  %842 = load i32, i32* %16, align 8, !tbaa !95
  %843 = sext i32 %842 to i64
  %844 = icmp slt i64 %841, %843
  br i1 %844, label %29, label %845

845:                                              ; preds = %840
  %846 = icmp eq i32 %842, 1
  br i1 %846, label %847, label %852

847:                                              ; preds = %845
  %848 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25
  %849 = bitcast [2 x [18 x [32 x double]]]* %848 to i8*
  %850 = getelementptr inbounds [2 x [2 x [18 x [32 x double]]]], [2 x [2 x [18 x [32 x double]]]]* @sb_sample, i64 0, i64 %25, i64 1, i64 0
  %851 = bitcast [32 x double]* %850 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 dereferenceable(4608) %849, i8* nonnull align 16 dereferenceable(4608) %851, i64 4608, i1 false)
  br label %852

852:                                              ; preds = %847, %845, %24
  %853 = add nuw nsw i64 %25, 1
  %854 = load i32, i32* %12, align 4, !tbaa !126
  %855 = sext i32 %854 to i64
  %856 = icmp slt i64 %853, %855
  br i1 %856, label %24, label %857

857:                                              ; preds = %852, %11
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @mdct_init48() local_unnamed_addr #0 {
  %1 = alloca [31 x double], align 16
  store double 0xBFE076BFCD6FBECD, double* @ca.0, align 16, !tbaa !27
  store double 0x3FEB7095010F9356, double* @cs.0, align 16, !tbaa !27
  store double 0xBFDE30DB485DB660, double* @ca.1, align 16, !tbaa !27
  store double 0x3FEC373AFE3FA80C, double* @cs.1, align 16, !tbaa !27
  store double 0xBFD40E604F4701FC, double* @ca.2, align 16, !tbaa !27
  store double 0x3FEE635B9EE7B56E, double* @cs.2, align 16, !tbaa !27
  store double 0xBFC748EE85851AEC, double* @ca.3, align 16, !tbaa !27
  store double 0x3FEF77502A0DD15B, double* @cs.3, align 16, !tbaa !27
  store double 0xBFB83603A7F2535A, double* @ca.4, align 16, !tbaa !27
  store double 0x3FEFDB482DD30F5B, double* @cs.4, align 16, !tbaa !27
  store double 0xBFA4F970DD8206D0, double* @ca.5, align 16, !tbaa !27
  store double 0x3FEFF91F901A8104, double* @cs.5, align 16, !tbaa !27
  store double 0xBF8D14239D59A7C1, double* @ca.6, align 16, !tbaa !27
  store double 0x3FEFFF2C98DBE44E, double* @cs.6, align 16, !tbaa !27
  store double 0xBF6E4F68C708D3F4, double* @ca.7, align 16, !tbaa !27
  store double 0x3FEFFFF1A52805D2, double* @cs.7, align 16, !tbaa !27
  br label %2

2:                                                ; preds = %2, %0
  %3 = phi i64 [ 0, %0 ], [ %24, %2 ]
  %4 = trunc i64 %3 to i32
  %5 = sitofp i32 %4 to double
  %6 = fadd double %5, 5.000000e-01
  %7 = fmul double %6, 0x3FB657184AE74487
  %8 = tail call double @sin(double %7) #21
  %9 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 0, i64 %3
  store double %8, double* %9, align 8, !tbaa !27
  %10 = add nuw nsw i64 %3, 1
  %11 = trunc i64 %10 to i32
  %12 = sitofp i32 %11 to double
  %13 = fadd double %12, 5.000000e-01
  %14 = fmul double %13, 0x3FB657184AE74487
  %15 = tail call double @sin(double %14) #21
  %16 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 0, i64 %10
  store double %15, double* %16, align 8, !tbaa !27
  %17 = add nuw nsw i64 %3, 2
  %18 = trunc i64 %17 to i32
  %19 = sitofp i32 %18 to double
  %20 = fadd double %19, 5.000000e-01
  %21 = fmul double %20, 0x3FB657184AE74487
  %22 = tail call double @sin(double %21) #21
  %23 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 0, i64 %17
  store double %22, double* %23, align 8, !tbaa !27
  %24 = add nuw nsw i64 %3, 3
  %25 = icmp eq i64 %24, 36
  br i1 %25, label %26, label %2

26:                                               ; preds = %2
  %27 = load <2 x i64>, <2 x i64>* bitcast ([4 x [36 x double]]* @win.199 to <2 x i64>*), align 16, !tbaa !27
  store <2 x i64> %27, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 0) to <2 x i64>*), align 16, !tbaa !27
  %28 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 0, i64 2) to <2 x i64>*), align 16, !tbaa !27
  store <2 x i64> %28, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 2) to <2 x i64>*), align 16, !tbaa !27
  %29 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 0, i64 4) to <2 x i64>*), align 16, !tbaa !27
  store <2 x i64> %29, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 4) to <2 x i64>*), align 16, !tbaa !27
  %30 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 0, i64 6) to <2 x i64>*), align 16, !tbaa !27
  store <2 x i64> %30, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 6) to <2 x i64>*), align 16, !tbaa !27
  %31 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 0, i64 8) to <2 x i64>*), align 16, !tbaa !27
  store <2 x i64> %31, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 8) to <2 x i64>*), align 16, !tbaa !27
  %32 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 0, i64 10) to <2 x i64>*), align 16, !tbaa !27
  store <2 x i64> %32, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 10) to <2 x i64>*), align 16, !tbaa !27
  %33 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 0, i64 12) to <2 x i64>*), align 16, !tbaa !27
  store <2 x i64> %33, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 12) to <2 x i64>*), align 16, !tbaa !27
  %34 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 0, i64 14) to <2 x i64>*), align 16, !tbaa !27
  store <2 x i64> %34, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 14) to <2 x i64>*), align 16, !tbaa !27
  %35 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 0, i64 16) to <2 x i64>*), align 16, !tbaa !27
  store <2 x i64> %35, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 16) to <2 x i64>*), align 16, !tbaa !27
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 18) to <2 x double>*), align 16, !tbaa !27
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 20) to <2 x double>*), align 16, !tbaa !27
  store <2 x double> <double 1.000000e+00, double 1.000000e+00>, <2 x double>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 22) to <2 x double>*), align 16, !tbaa !27
  store double 0x3FEFB9EA92EC689C, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 24), align 16, !tbaa !27
  store double 0x3FED906BCF328D49, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 25), align 8, !tbaa !27
  store double 0x3FE963268B572498, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 26), align 16, !tbaa !27
  store double 0x3FE37AF93F9513ED, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 27), align 8, !tbaa !27
  store double 0x3FD87DE2A6AEA96F, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 28), align 16, !tbaa !27
  store double 0x3FC0B5150F6DA2F6, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 29), align 8, !tbaa !27
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(48) bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 30) to i8*), i8 0, i64 48, i1 false)
  store <2 x i64> zeroinitializer, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 0) to <2 x i64>*), align 16, !tbaa !27
  store <2 x i64> zeroinitializer, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 2) to <2 x i64>*), align 16, !tbaa !27
  store <2 x i64> zeroinitializer, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 4) to <2 x i64>*), align 16, !tbaa !27
  %36 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 28) to <2 x i64>*), align 16, !tbaa !27
  %37 = shufflevector <2 x i64> %36, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  store <2 x i64> %37, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 6) to <2 x i64>*), align 16, !tbaa !27
  %38 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 26) to <2 x i64>*), align 16, !tbaa !27
  %39 = shufflevector <2 x i64> %38, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  store <2 x i64> %39, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 8) to <2 x i64>*), align 16, !tbaa !27
  %40 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 24) to <2 x i64>*), align 16, !tbaa !27
  %41 = shufflevector <2 x i64> %40, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  store <2 x i64> %41, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 10) to <2 x i64>*), align 16, !tbaa !27
  %42 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 22) to <2 x i64>*), align 16, !tbaa !27
  %43 = shufflevector <2 x i64> %42, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  store <2 x i64> %43, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 12) to <2 x i64>*), align 16, !tbaa !27
  %44 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 20) to <2 x i64>*), align 16, !tbaa !27
  %45 = shufflevector <2 x i64> %44, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  store <2 x i64> %45, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 14) to <2 x i64>*), align 16, !tbaa !27
  %46 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 18) to <2 x i64>*), align 16, !tbaa !27
  %47 = shufflevector <2 x i64> %46, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  store <2 x i64> %47, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 16) to <2 x i64>*), align 16, !tbaa !27
  %48 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 16) to <2 x i64>*), align 16, !tbaa !27
  %49 = shufflevector <2 x i64> %48, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  store <2 x i64> %49, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 18) to <2 x i64>*), align 16, !tbaa !27
  %50 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 14) to <2 x i64>*), align 16, !tbaa !27
  %51 = shufflevector <2 x i64> %50, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  store <2 x i64> %51, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 20) to <2 x i64>*), align 16, !tbaa !27
  %52 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 12) to <2 x i64>*), align 16, !tbaa !27
  %53 = shufflevector <2 x i64> %52, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  store <2 x i64> %53, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 22) to <2 x i64>*), align 16, !tbaa !27
  %54 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 10) to <2 x i64>*), align 16, !tbaa !27
  %55 = shufflevector <2 x i64> %54, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  store <2 x i64> %55, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 24) to <2 x i64>*), align 16, !tbaa !27
  %56 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 8) to <2 x i64>*), align 16, !tbaa !27
  %57 = shufflevector <2 x i64> %56, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  store <2 x i64> %57, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 26) to <2 x i64>*), align 16, !tbaa !27
  %58 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 6) to <2 x i64>*), align 16, !tbaa !27
  %59 = shufflevector <2 x i64> %58, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  store <2 x i64> %59, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 28) to <2 x i64>*), align 16, !tbaa !27
  %60 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 4) to <2 x i64>*), align 16, !tbaa !27
  %61 = shufflevector <2 x i64> %60, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  store <2 x i64> %61, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 30) to <2 x i64>*), align 16, !tbaa !27
  %62 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 2) to <2 x i64>*), align 16, !tbaa !27
  %63 = shufflevector <2 x i64> %62, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  store <2 x i64> %63, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 32) to <2 x i64>*), align 16, !tbaa !27
  %64 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 0) to <2 x i64>*), align 16, !tbaa !27
  %65 = shufflevector <2 x i64> %64, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  store <2 x i64> %65, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 34) to <2 x i64>*), align 16, !tbaa !27
  br label %66

66:                                               ; preds = %66, %26
  %67 = phi i64 [ 11, %26 ], [ %147, %66 ]
  %68 = phi double* [ getelementptr inbounds ([244 x double], [244 x double]* @cos_l, i64 0, i64 0), %26 ], [ %146, %66 ]
  %69 = getelementptr inbounds [12 x i32], [12 x i32]* @all, i64 0, i64 %67
  %70 = load i32, i32* %69, align 4, !tbaa !18
  %71 = shl nsw i32 %70, 1
  %72 = or i32 %71, 1
  %73 = sitofp i32 %72 to double
  %74 = fmul double %73, 0x3F9657184AE74487
  %75 = fmul double %74, 3.800000e+01
  %76 = tail call double @cos(double %75) #21
  %77 = fmul double %76, 0x3FBC71C71C71C71C
  %78 = getelementptr inbounds double, double* %68, i64 1
  store double %77, double* %68, align 8, !tbaa !27
  %79 = fmul double %74, 4.200000e+01
  %80 = tail call double @cos(double %79) #21
  %81 = fmul double %80, 0x3FBC71C71C71C71C
  %82 = getelementptr inbounds double, double* %68, i64 2
  store double %81, double* %78, align 8, !tbaa !27
  %83 = fmul double %74, 4.600000e+01
  %84 = tail call double @cos(double %83) #21
  %85 = fmul double %84, 0x3FBC71C71C71C71C
  %86 = getelementptr inbounds double, double* %68, i64 3
  store double %85, double* %82, align 8, !tbaa !27
  %87 = fmul double %74, 5.000000e+01
  %88 = tail call double @cos(double %87) #21
  %89 = fmul double %88, 0x3FBC71C71C71C71C
  %90 = getelementptr inbounds double, double* %68, i64 4
  store double %89, double* %86, align 8, !tbaa !27
  %91 = fmul double %74, 5.400000e+01
  %92 = tail call double @cos(double %91) #21
  %93 = fmul double %92, 0x3FBC71C71C71C71C
  %94 = getelementptr inbounds double, double* %68, i64 5
  store double %93, double* %90, align 8, !tbaa !27
  %95 = fmul double %74, 5.800000e+01
  %96 = tail call double @cos(double %95) #21
  %97 = fmul double %96, 0x3FBC71C71C71C71C
  %98 = getelementptr inbounds double, double* %68, i64 6
  store double %97, double* %94, align 8, !tbaa !27
  %99 = fmul double %74, 6.200000e+01
  %100 = tail call double @cos(double %99) #21
  %101 = fmul double %100, 0x3FBC71C71C71C71C
  %102 = getelementptr inbounds double, double* %68, i64 7
  store double %101, double* %98, align 8, !tbaa !27
  %103 = fmul double %74, 6.600000e+01
  %104 = tail call double @cos(double %103) #21
  %105 = fmul double %104, 0x3FBC71C71C71C71C
  %106 = getelementptr inbounds double, double* %68, i64 8
  store double %105, double* %102, align 8, !tbaa !27
  %107 = fmul double %74, 7.000000e+01
  %108 = tail call double @cos(double %107) #21
  %109 = fmul double %108, 0x3FBC71C71C71C71C
  %110 = getelementptr inbounds double, double* %68, i64 9
  store double %109, double* %106, align 8, !tbaa !27
  %111 = fmul double %74, 1.100000e+02
  %112 = tail call double @cos(double %111) #21
  %113 = fmul double %112, 0x3FBC71C71C71C71C
  %114 = getelementptr inbounds double, double* %68, i64 10
  store double %113, double* %110, align 8, !tbaa !27
  %115 = fmul double %74, 1.140000e+02
  %116 = tail call double @cos(double %115) #21
  %117 = fmul double %116, 0x3FBC71C71C71C71C
  %118 = getelementptr inbounds double, double* %68, i64 11
  store double %117, double* %114, align 8, !tbaa !27
  %119 = fmul double %74, 1.180000e+02
  %120 = tail call double @cos(double %119) #21
  %121 = fmul double %120, 0x3FBC71C71C71C71C
  %122 = getelementptr inbounds double, double* %68, i64 12
  store double %121, double* %118, align 8, !tbaa !27
  %123 = fmul double %74, 1.220000e+02
  %124 = tail call double @cos(double %123) #21
  %125 = fmul double %124, 0x3FBC71C71C71C71C
  %126 = getelementptr inbounds double, double* %68, i64 13
  store double %125, double* %122, align 8, !tbaa !27
  %127 = fmul double %74, 1.260000e+02
  %128 = tail call double @cos(double %127) #21
  %129 = fmul double %128, 0x3FBC71C71C71C71C
  %130 = getelementptr inbounds double, double* %68, i64 14
  store double %129, double* %126, align 8, !tbaa !27
  %131 = fmul double %74, 1.300000e+02
  %132 = tail call double @cos(double %131) #21
  %133 = fmul double %132, 0x3FBC71C71C71C71C
  %134 = getelementptr inbounds double, double* %68, i64 15
  store double %133, double* %130, align 8, !tbaa !27
  %135 = fmul double %74, 1.340000e+02
  %136 = tail call double @cos(double %135) #21
  %137 = fmul double %136, 0x3FBC71C71C71C71C
  %138 = getelementptr inbounds double, double* %68, i64 16
  store double %137, double* %134, align 8, !tbaa !27
  %139 = fmul double %74, 1.380000e+02
  %140 = tail call double @cos(double %139) #21
  %141 = fmul double %140, 0x3FBC71C71C71C71C
  %142 = getelementptr inbounds double, double* %68, i64 17
  store double %141, double* %138, align 8, !tbaa !27
  %143 = fmul double %74, 1.420000e+02
  %144 = tail call double @cos(double %143) #21
  %145 = fmul double %144, 0x3FBC71C71C71C71C
  %146 = getelementptr inbounds double, double* %68, i64 18
  store double %145, double* %142, align 8, !tbaa !27
  %147 = add nsw i64 %67, -1
  %148 = icmp eq i64 %67, 0
  br i1 %148, label %149, label %66

149:                                              ; preds = %66
  %150 = getelementptr inbounds double, double* %68, i64 20
  %151 = bitcast double* %146 to <2 x double>*
  store <2 x double> <double 0xBFB150DD8DD9D8BF, double 0x3FA5C53B3ED42489>, <2 x double>* %151, align 8, !tbaa !27
  %152 = getelementptr inbounds double, double* %68, i64 22
  %153 = bitcast double* %150 to <2 x double>*
  store <2 x double> <double 0xBF8DB3B3A9A67635, double 0x3FB69105D1310418>, <2 x double>* %153, align 8, !tbaa !27
  %154 = getelementptr inbounds double, double* %68, i64 24
  %155 = bitcast double* %152 to <2 x double>*
  store <2 x double> <double 0xBFBA477C4665D2FD, double 0x3FBC337B2D43EB39>, <2 x double>* %155, align 8, !tbaa !27
  %156 = getelementptr inbounds double, double* %68, i64 26
  %157 = bitcast double* %154 to <2 x double>*
  store <2 x double> <double 0x3F8DB3B3A9A6765A, double 0x3FBA477C4665D2EF>, <2 x double>* %157, align 8, !tbaa !27
  %158 = getelementptr inbounds double, double* %68, i64 28
  %159 = bitcast double* %156 to <2 x double>*
  store <2 x double> <double 0xBFB150DD8DD9D8C0, double 0xBFBC337B2D43EB38>, <2 x double>* %159, align 8, !tbaa !27
  %160 = getelementptr inbounds double, double* %68, i64 30
  %161 = bitcast double* %158 to <2 x double>*
  store <2 x double> <double 0x3FA5C53B3ED424BF, double 0x3FB69105D1310415>, <2 x double>* %161, align 8, !tbaa !27
  %162 = getelementptr inbounds double, double* %68, i64 32
  %163 = bitcast double* %160 to <2 x double>*
  store <2 x double> <double 0x3FBC337B2D43EB35, double 0x3FA5C53B3ED424BE>, <2 x double>* %163, align 8, !tbaa !27
  %164 = getelementptr inbounds double, double* %68, i64 34
  %165 = bitcast double* %162 to <2 x double>*
  store <2 x double> <double 0xBFB69105D1310415, double 0x3F8DB3B3A9A676B8>, <2 x double>* %165, align 8, !tbaa !27
  %166 = getelementptr inbounds double, double* %68, i64 36
  %167 = bitcast double* %164 to <2 x double>*
  store <2 x double> <double 0xBFBA477C4665D2EA, double 0xBFB150DD8DD9D8CB>, <2 x double>* %167, align 8, !tbaa !27
  %168 = getelementptr inbounds double, double* %68, i64 38
  %169 = bitcast double* %166 to <2 x double>*
  store <2 x double> <double 0xBFB69105D131040F, double 0xBFBA477C4665D2E8>, <2 x double>* %169, align 8, !tbaa !27
  %170 = getelementptr inbounds double, double* %68, i64 40
  %171 = bitcast double* %168 to <2 x double>*
  store <2 x double> <double 0xBFBC337B2D43EB34, double 0xBFB150DD8DD9D8D2>, <2 x double>* %171, align 8, !tbaa !27
  %172 = getelementptr inbounds double, double* %68, i64 42
  %173 = bitcast double* %170 to <2 x double>*
  store <2 x double> <double 0xBFA5C53B3ED424D2, double 0xBF8DB3B3A9A67701>, <2 x double>* %173, align 8, !tbaa !27
  %174 = getelementptr inbounds double, double* %68, i64 44
  %175 = bitcast double* %172 to <2 x double>*
  store <2 x double> <double 0xBFBA477C4665D2F0, double 0xBFA5C53B3ED424C1>, <2 x double>* %175, align 8, !tbaa !27
  %176 = bitcast double* %174 to <2 x double>*
  store <2 x double> <double 0x3FA5C53B3ED424D4, double 0xBFBA477C4665D2E6>, <2 x double>* %176, align 8, !tbaa !27
  %177 = load double, double* getelementptr inbounds ([256 x double], [256 x double]* @enwindow, i64 0, i64 248), align 16, !tbaa !27
  %178 = bitcast [31 x double]* %1 to i8*
  call void @llvm.lifetime.start.p0i8(i64 248, i8* nonnull %178) #21
  %179 = load double, double* getelementptr inbounds ([256 x double], [256 x double]* @enwindow, i64 0, i64 0), align 16, !tbaa !27
  %180 = fdiv double %179, %177
  %181 = getelementptr inbounds [31 x double], [31 x double]* %1, i64 0, i64 15
  store double %180, double* %181, align 8, !tbaa !27
  %182 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([256 x double], [256 x double]* @enwindow, i64 0, i64 1) to <2 x double>*), align 8, !tbaa !27
  %183 = insertelement <2 x double> undef, double %179, i32 0
  %184 = shufflevector <2 x double> %183, <2 x double> undef, <2 x i32> zeroinitializer
  %185 = fdiv <2 x double> %182, %184
  store <2 x double> %185, <2 x double>* bitcast ([256 x double]* @enwindow to <2 x double>*), align 16, !tbaa !27
  %186 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([256 x double], [256 x double]* @enwindow, i64 0, i64 3) to <2 x double>*), align 8, !tbaa !27
  %187 = fdiv <2 x double> %186, %184
  store <2 x double> %187, <2 x double>* bitcast (double* getelementptr inbounds ([256 x double], [256 x double]* @enwindow, i64 0, i64 2) to <2 x double>*), align 16, !tbaa !27
  %188 = load <2 x double>, <2 x double>* bitcast (double* getelementptr inbounds ([256 x double], [256 x double]* @enwindow, i64 0, i64 5) to <2 x double>*), align 8, !tbaa !27
  %189 = fdiv <2 x double> %188, %184
  store <2 x double> %189, <2 x double>* bitcast (double* getelementptr inbounds ([256 x double], [256 x double]* @enwindow, i64 0, i64 4) to <2 x double>*), align 16, !tbaa !27
  %190 = load double, double* getelementptr inbounds ([256 x double], [256 x double]* @enwindow, i64 0, i64 7), align 8, !tbaa !27
  %191 = fdiv double %190, %179
  store double %191, double* getelementptr inbounds ([256 x double], [256 x double]* @enwindow, i64 0, i64 6), align 16, !tbaa !27
  br label %220

192:                                              ; preds = %220
  %193 = getelementptr inbounds double, double* %223, i64 17
  %194 = load double, double* %193, align 8, !tbaa !27
  %195 = fdiv double %194, %177
  %196 = getelementptr inbounds double, double* %222, i64 16
  store double %195, double* %288, align 8, !tbaa !27
  %197 = getelementptr inbounds double, double* %223, i64 18
  %198 = load double, double* %197, align 8, !tbaa !27
  %199 = fdiv double %198, %177
  %200 = getelementptr inbounds double, double* %222, i64 17
  store double %199, double* %196, align 8, !tbaa !27
  %201 = getelementptr inbounds double, double* %223, i64 19
  %202 = load double, double* %201, align 8, !tbaa !27
  %203 = fdiv double %202, %177
  %204 = getelementptr inbounds double, double* %222, i64 18
  store double %203, double* %200, align 8, !tbaa !27
  %205 = getelementptr inbounds double, double* %223, i64 20
  %206 = load double, double* %205, align 8, !tbaa !27
  %207 = fdiv double %206, %177
  %208 = getelementptr inbounds double, double* %222, i64 19
  store double %207, double* %204, align 8, !tbaa !27
  %209 = getelementptr inbounds double, double* %223, i64 21
  %210 = load double, double* %209, align 8, !tbaa !27
  %211 = fdiv double %210, %177
  %212 = getelementptr inbounds double, double* %222, i64 20
  store double %211, double* %208, align 8, !tbaa !27
  %213 = getelementptr inbounds double, double* %223, i64 22
  %214 = load double, double* %213, align 8, !tbaa !27
  %215 = fdiv double %214, %177
  %216 = getelementptr inbounds double, double* %222, i64 21
  store double %215, double* %212, align 8, !tbaa !27
  %217 = getelementptr inbounds double, double* %223, i64 23
  %218 = load double, double* %217, align 8, !tbaa !27
  %219 = fdiv double %218, %177
  store double %219, double* %216, align 8, !tbaa !27
  br label %292

220:                                              ; preds = %220, %149
  %221 = phi i64 [ 14, %149 ], [ %290, %220 ]
  %222 = phi double* [ getelementptr inbounds ([256 x double], [256 x double]* @enwindow, i64 0, i64 7), %149 ], [ %288, %220 ]
  %223 = phi double* [ getelementptr inbounds ([256 x double], [256 x double]* @enwindow, i64 0, i64 8), %149 ], [ %289, %220 ]
  %224 = load double, double* %223, align 8, !tbaa !27
  %225 = fdiv double %224, %177
  %226 = sub nuw nsw i64 30, %221
  %227 = getelementptr inbounds [31 x double], [31 x double]* %1, i64 0, i64 %226
  store double %225, double* %227, align 8, !tbaa !27
  %228 = getelementptr inbounds [31 x double], [31 x double]* %1, i64 0, i64 %221
  store double %225, double* %228, align 8, !tbaa !27
  %229 = getelementptr inbounds double, double* %223, i64 1
  %230 = load double, double* %229, align 8, !tbaa !27
  %231 = fdiv double %230, %224
  %232 = getelementptr inbounds double, double* %222, i64 1
  store double %231, double* %222, align 8, !tbaa !27
  %233 = getelementptr inbounds double, double* %223, i64 2
  %234 = load double, double* %233, align 8, !tbaa !27
  %235 = fdiv double %234, %224
  %236 = getelementptr inbounds double, double* %222, i64 2
  store double %235, double* %232, align 8, !tbaa !27
  %237 = getelementptr inbounds double, double* %223, i64 3
  %238 = load double, double* %237, align 8, !tbaa !27
  %239 = fdiv double %238, %224
  %240 = getelementptr inbounds double, double* %222, i64 3
  store double %239, double* %236, align 8, !tbaa !27
  %241 = getelementptr inbounds double, double* %223, i64 4
  %242 = load double, double* %241, align 8, !tbaa !27
  %243 = fdiv double %242, %224
  %244 = getelementptr inbounds double, double* %222, i64 4
  store double %243, double* %240, align 8, !tbaa !27
  %245 = getelementptr inbounds double, double* %223, i64 5
  %246 = load double, double* %245, align 8, !tbaa !27
  %247 = fdiv double %246, %224
  %248 = getelementptr inbounds double, double* %222, i64 5
  store double %247, double* %244, align 8, !tbaa !27
  %249 = getelementptr inbounds double, double* %223, i64 6
  %250 = load double, double* %249, align 8, !tbaa !27
  %251 = fdiv double %250, %224
  %252 = getelementptr inbounds double, double* %222, i64 6
  store double %251, double* %248, align 8, !tbaa !27
  %253 = getelementptr inbounds double, double* %223, i64 7
  %254 = load double, double* %253, align 8, !tbaa !27
  %255 = fdiv double %254, %224
  %256 = getelementptr inbounds double, double* %222, i64 7
  store double %255, double* %252, align 8, !tbaa !27
  %257 = getelementptr inbounds double, double* %223, i64 8
  %258 = load double, double* %257, align 8, !tbaa !27
  %259 = fdiv double %258, %224
  %260 = getelementptr inbounds double, double* %222, i64 8
  store double %259, double* %256, align 8, !tbaa !27
  %261 = getelementptr inbounds double, double* %223, i64 9
  %262 = load double, double* %261, align 8, !tbaa !27
  %263 = fdiv double %262, %224
  %264 = getelementptr inbounds double, double* %222, i64 9
  store double %263, double* %260, align 8, !tbaa !27
  %265 = getelementptr inbounds double, double* %223, i64 10
  %266 = load double, double* %265, align 8, !tbaa !27
  %267 = fdiv double %266, %224
  %268 = getelementptr inbounds double, double* %222, i64 10
  store double %267, double* %264, align 8, !tbaa !27
  %269 = getelementptr inbounds double, double* %223, i64 11
  %270 = load double, double* %269, align 8, !tbaa !27
  %271 = fdiv double %270, %224
  %272 = getelementptr inbounds double, double* %222, i64 11
  store double %271, double* %268, align 8, !tbaa !27
  %273 = getelementptr inbounds double, double* %223, i64 12
  %274 = load double, double* %273, align 8, !tbaa !27
  %275 = fdiv double %274, %224
  %276 = getelementptr inbounds double, double* %222, i64 12
  store double %275, double* %272, align 8, !tbaa !27
  %277 = getelementptr inbounds double, double* %223, i64 13
  %278 = load double, double* %277, align 8, !tbaa !27
  %279 = fdiv double %278, %224
  %280 = getelementptr inbounds double, double* %222, i64 13
  store double %279, double* %276, align 8, !tbaa !27
  %281 = getelementptr inbounds double, double* %223, i64 14
  %282 = load double, double* %281, align 8, !tbaa !27
  %283 = fdiv double %282, %224
  %284 = getelementptr inbounds double, double* %222, i64 14
  store double %283, double* %280, align 8, !tbaa !27
  %285 = getelementptr inbounds double, double* %223, i64 15
  %286 = load double, double* %285, align 8, !tbaa !27
  %287 = fdiv double %286, %224
  %288 = getelementptr inbounds double, double* %222, i64 15
  store double %287, double* %284, align 8, !tbaa !27
  %289 = getelementptr inbounds double, double* %223, i64 16
  %290 = add nsw i64 %221, -1
  %291 = icmp eq i64 %221, 0
  br i1 %291, label %192, label %220

292:                                              ; preds = %313, %192
  %293 = phi i64 [ 15, %192 ], [ %314, %313 ]
  %294 = phi double* [ getelementptr inbounds ([16 x [31 x double]], [16 x [31 x double]]* @mm, i64 0, i64 0, i64 0), %192 ], [ %310, %313 ]
  %295 = shl nsw i64 %293, 1
  %296 = or i64 %295, 1
  br label %297

297:                                              ; preds = %475, %292
  %298 = phi i64 [ 1, %292 ], [ %486, %475 ]
  %299 = phi double* [ %294, %292 ], [ %485, %475 ]
  %300 = mul nuw nsw i64 %298, %296
  %301 = trunc i64 %300 to i32
  %302 = sitofp i32 %301 to double
  %303 = fmul double %302, 0x400921FB54442D18
  %304 = fmul double %303, 1.562500e-02
  %305 = tail call double @cos(double %304) #21
  %306 = add nsw i64 %298, -1
  %307 = getelementptr inbounds [31 x double], [31 x double]* %1, i64 0, i64 %306
  %308 = load double, double* %307, align 8, !tbaa !27
  %309 = fmul double %305, %308
  %310 = getelementptr inbounds double, double* %299, i64 1
  store double %309, double* %299, align 8, !tbaa !27
  %311 = add nuw nsw i64 %298, 1
  %312 = icmp eq i64 %311, 32
  br i1 %312, label %313, label %475

313:                                              ; preds = %297
  %314 = add nsw i64 %293, -1
  %315 = icmp eq i64 %293, 0
  br i1 %315, label %316, label %292

316:                                              ; preds = %313
  call void @llvm.lifetime.end.p0i8(i64 248, i8* nonnull %178) #21
  %317 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 0, i64 9) to <2 x i64>*), align 8, !tbaa !27
  %318 = shufflevector <2 x i64> %317, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %319 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 0, i64 27) to <2 x i64>*), align 8, !tbaa !27
  %320 = shufflevector <2 x i64> %319, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %321 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 9) to <2 x i64>*), align 8, !tbaa !27
  %322 = shufflevector <2 x i64> %321, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %323 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 27) to <2 x i64>*), align 8, !tbaa !27
  %324 = shufflevector <2 x i64> %323, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %325 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 9) to <2 x i64>*), align 8, !tbaa !27
  %326 = shufflevector <2 x i64> %325, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %327 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 27) to <2 x i64>*), align 8, !tbaa !27
  %328 = shufflevector <2 x i64> %327, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %329 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 0, i64 16) to <2 x i64>*), align 16, !tbaa !27
  %330 = shufflevector <2 x i64> %329, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  store <2 x i64> %318, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 0, i64 16) to <2 x i64>*), align 16, !tbaa !27
  store <2 x i64> %330, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 0, i64 9) to <2 x i64>*), align 8, !tbaa !27
  %331 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 0, i64 34) to <2 x i64>*), align 16, !tbaa !27
  %332 = shufflevector <2 x i64> %331, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  store <2 x i64> %320, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 0, i64 34) to <2 x i64>*), align 16, !tbaa !27
  store <2 x i64> %332, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 0, i64 27) to <2 x i64>*), align 8, !tbaa !27
  %333 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 16) to <2 x i64>*), align 16, !tbaa !27
  %334 = shufflevector <2 x i64> %333, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  store <2 x i64> %322, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 16) to <2 x i64>*), align 16, !tbaa !27
  store <2 x i64> %334, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 9) to <2 x i64>*), align 8, !tbaa !27
  %335 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 34) to <2 x i64>*), align 16, !tbaa !27
  %336 = shufflevector <2 x i64> %335, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  store <2 x i64> %324, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 34) to <2 x i64>*), align 16, !tbaa !27
  store <2 x i64> %336, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 27) to <2 x i64>*), align 8, !tbaa !27
  %337 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 16) to <2 x i64>*), align 16, !tbaa !27
  %338 = shufflevector <2 x i64> %337, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  store <2 x i64> %326, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 16) to <2 x i64>*), align 16, !tbaa !27
  store <2 x i64> %338, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 9) to <2 x i64>*), align 8, !tbaa !27
  %339 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 34) to <2 x i64>*), align 16, !tbaa !27
  %340 = shufflevector <2 x i64> %339, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  store <2 x i64> %328, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 34) to <2 x i64>*), align 16, !tbaa !27
  store <2 x i64> %340, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 27) to <2 x i64>*), align 8, !tbaa !27
  %341 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 0, i64 11) to <2 x i64>*), align 8, !tbaa !27
  %342 = shufflevector <2 x i64> %341, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %343 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 0, i64 29) to <2 x i64>*), align 8, !tbaa !27
  %344 = shufflevector <2 x i64> %343, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %345 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 11) to <2 x i64>*), align 8, !tbaa !27
  %346 = shufflevector <2 x i64> %345, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %347 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 29) to <2 x i64>*), align 8, !tbaa !27
  %348 = shufflevector <2 x i64> %347, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %349 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 11) to <2 x i64>*), align 8, !tbaa !27
  %350 = shufflevector <2 x i64> %349, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %351 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 29) to <2 x i64>*), align 8, !tbaa !27
  %352 = shufflevector <2 x i64> %351, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  %353 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 0, i64 14) to <2 x i64>*), align 16, !tbaa !27
  %354 = shufflevector <2 x i64> %353, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  store <2 x i64> %342, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 0, i64 14) to <2 x i64>*), align 16, !tbaa !27
  store <2 x i64> %354, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 0, i64 11) to <2 x i64>*), align 8, !tbaa !27
  %355 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 0, i64 32) to <2 x i64>*), align 16, !tbaa !27
  %356 = shufflevector <2 x i64> %355, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  store <2 x i64> %344, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 0, i64 32) to <2 x i64>*), align 16, !tbaa !27
  store <2 x i64> %356, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 0, i64 29) to <2 x i64>*), align 8, !tbaa !27
  %357 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 14) to <2 x i64>*), align 16, !tbaa !27
  %358 = shufflevector <2 x i64> %357, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  store <2 x i64> %346, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 14) to <2 x i64>*), align 16, !tbaa !27
  store <2 x i64> %358, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 11) to <2 x i64>*), align 8, !tbaa !27
  %359 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 32) to <2 x i64>*), align 16, !tbaa !27
  %360 = shufflevector <2 x i64> %359, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  store <2 x i64> %348, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 32) to <2 x i64>*), align 16, !tbaa !27
  store <2 x i64> %360, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 29) to <2 x i64>*), align 8, !tbaa !27
  %361 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 14) to <2 x i64>*), align 16, !tbaa !27
  %362 = shufflevector <2 x i64> %361, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  store <2 x i64> %350, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 14) to <2 x i64>*), align 16, !tbaa !27
  store <2 x i64> %362, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 11) to <2 x i64>*), align 8, !tbaa !27
  %363 = load <2 x i64>, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 32) to <2 x i64>*), align 16, !tbaa !27
  %364 = shufflevector <2 x i64> %363, <2 x i64> undef, <2 x i32> <i32 1, i32 0>
  store <2 x i64> %352, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 32) to <2 x i64>*), align 16, !tbaa !27
  store <2 x i64> %364, <2 x i64>* bitcast (double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 29) to <2 x i64>*), align 8, !tbaa !27
  %365 = fmul double %177, 0x3F00000000000000
  %366 = insertelement <2 x double> undef, double %365, i32 0
  %367 = shufflevector <2 x double> %366, <2 x double> undef, <2 x i32> zeroinitializer
  br label %368

368:                                              ; preds = %368, %316
  %369 = phi i64 [ 0, %316 ], [ %401, %368 ]
  %370 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 0, i64 %369
  %371 = bitcast double* %370 to <2 x double>*
  %372 = load <2 x double>, <2 x double>* %371, align 16, !tbaa !27
  %373 = fmul <2 x double> %367, %372
  %374 = bitcast double* %370 to <2 x double>*
  store <2 x double> %373, <2 x double>* %374, align 16, !tbaa !27
  %375 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 %369
  %376 = bitcast double* %375 to <2 x double>*
  %377 = load <2 x double>, <2 x double>* %376, align 16, !tbaa !27
  %378 = fmul <2 x double> %367, %377
  %379 = bitcast double* %375 to <2 x double>*
  store <2 x double> %378, <2 x double>* %379, align 16, !tbaa !27
  %380 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 %369
  %381 = bitcast double* %380 to <2 x double>*
  %382 = load <2 x double>, <2 x double>* %381, align 16, !tbaa !27
  %383 = fmul <2 x double> %367, %382
  %384 = bitcast double* %380 to <2 x double>*
  store <2 x double> %383, <2 x double>* %384, align 16, !tbaa !27
  %385 = or i64 %369, 2
  %386 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 0, i64 %385
  %387 = bitcast double* %386 to <2 x double>*
  %388 = load <2 x double>, <2 x double>* %387, align 16, !tbaa !27
  %389 = fmul <2 x double> %367, %388
  %390 = bitcast double* %386 to <2 x double>*
  store <2 x double> %389, <2 x double>* %390, align 16, !tbaa !27
  %391 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 1, i64 %385
  %392 = bitcast double* %391 to <2 x double>*
  %393 = load <2 x double>, <2 x double>* %392, align 16, !tbaa !27
  %394 = fmul <2 x double> %367, %393
  %395 = bitcast double* %391 to <2 x double>*
  store <2 x double> %394, <2 x double>* %395, align 16, !tbaa !27
  %396 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 3, i64 %385
  %397 = bitcast double* %396 to <2 x double>*
  %398 = load <2 x double>, <2 x double>* %397, align 16, !tbaa !27
  %399 = fmul <2 x double> %367, %398
  %400 = bitcast double* %396 to <2 x double>*
  store <2 x double> %399, <2 x double>* %400, align 16, !tbaa !27
  %401 = add nuw nsw i64 %369, 4
  %402 = icmp eq i64 %401, 36
  br i1 %402, label %403, label %368, !llvm.loop !280

403:                                              ; preds = %403, %368
  %404 = phi i64 [ %472, %403 ], [ 0, %368 ]
  %405 = trunc i64 %404 to i32
  %406 = sitofp i32 %405 to double
  %407 = fadd double %406, 5.000000e-01
  %408 = fmul double %407, 0x3FD0C152382D7365
  %409 = tail call double @cos(double %408) #21
  %410 = fmul double %177, %409
  %411 = fmul double %410, 0x3F00000000000000
  %412 = fmul double %411, 0x3FD5555555555555
  %413 = tail call double @tan(double %408) #21
  %414 = getelementptr inbounds [4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 %404
  store double %413, double* %414, align 8, !tbaa !27
  %415 = shl nsw i64 %404, 2
  %416 = or i64 %415, 2
  %417 = trunc i64 %416 to i32
  %418 = add i32 %417, 12
  %419 = sitofp i32 %418 to double
  %420 = trunc i64 %416 to i32
  %421 = add i32 %420, 36
  %422 = sitofp i32 %421 to double
  %423 = add nuw nsw i64 %404, 3
  %424 = fmul double %419, 0x3FB0C152382D7365
  %425 = tail call double @cos(double %424) #21
  %426 = fmul double %412, %425
  %427 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i64 0, i64 0, i64 %404
  store double %426, double* %427, align 8, !tbaa !27
  %428 = fmul double %422, 0x3FB0C152382D7365
  %429 = tail call double @cos(double %428) #21
  %430 = fmul double %412, %429
  %431 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i64 0, i64 0, i64 %423
  store double %430, double* %431, align 8, !tbaa !27
  %432 = fmul double %419, 0x3FC921FB54442D18
  %433 = tail call double @cos(double %432) #21
  %434 = fmul double %412, %433
  %435 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i64 0, i64 1, i64 %404
  store double %434, double* %435, align 8, !tbaa !27
  %436 = fmul double %422, 0x3FC921FB54442D18
  %437 = tail call double @cos(double %436) #21
  %438 = fmul double %412, %437
  %439 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i64 0, i64 1, i64 %423
  store double %438, double* %439, align 8, !tbaa !27
  %440 = fmul double %419, 0x3FD4F1A6C638D03E
  %441 = tail call double @cos(double %440) #21
  %442 = fmul double %412, %441
  %443 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i64 0, i64 2, i64 %404
  store double %442, double* %443, align 8, !tbaa !27
  %444 = fmul double %422, 0x3FD4F1A6C638D03E
  %445 = tail call double @cos(double %444) #21
  %446 = fmul double %412, %445
  %447 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i64 0, i64 2, i64 %423
  store double %446, double* %447, align 8, !tbaa !27
  %448 = fmul double %419, 0x3FDD524FE24F89F1
  %449 = tail call double @cos(double %448) #21
  %450 = fmul double %412, %449
  %451 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i64 0, i64 3, i64 %404
  store double %450, double* %451, align 8, !tbaa !27
  %452 = fmul double %422, 0x3FDD524FE24F89F1
  %453 = tail call double @cos(double %452) #21
  %454 = fmul double %412, %453
  %455 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i64 0, i64 3, i64 %423
  store double %454, double* %455, align 8, !tbaa !27
  %456 = fmul double %419, 0x3FE2D97C7F3321D2
  %457 = tail call double @cos(double %456) #21
  %458 = fmul double %412, %457
  %459 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i64 0, i64 4, i64 %404
  store double %458, double* %459, align 8, !tbaa !27
  %460 = fmul double %422, 0x3FE2D97C7F3321D2
  %461 = tail call double @cos(double %460) #21
  %462 = fmul double %412, %461
  %463 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i64 0, i64 4, i64 %423
  store double %462, double* %463, align 8, !tbaa !27
  %464 = fmul double %419, 0x3FE709D10D3E7EAB
  %465 = tail call double @cos(double %464) #21
  %466 = fmul double %412, %465
  %467 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i64 0, i64 5, i64 %404
  store double %466, double* %467, align 8, !tbaa !27
  %468 = fmul double %422, 0x3FE709D10D3E7EAB
  %469 = tail call double @cos(double %468) #21
  %470 = fmul double %412, %469
  %471 = getelementptr inbounds [6 x [6 x double]], [6 x [6 x double]]* @cos_s, i64 0, i64 5, i64 %423
  store double %470, double* %471, align 8, !tbaa !27
  %472 = add nuw nsw i64 %404, 1
  %473 = icmp eq i64 %472, 3
  br i1 %473, label %474, label %403

474:                                              ; preds = %403
  ret void

475:                                              ; preds = %297
  %476 = mul nuw nsw i64 %311, %296
  %477 = trunc i64 %476 to i32
  %478 = sitofp i32 %477 to double
  %479 = fmul double %478, 0x400921FB54442D18
  %480 = fmul double %479, 1.562500e-02
  %481 = tail call double @cos(double %480) #21
  %482 = getelementptr inbounds [31 x double], [31 x double]* %1, i64 0, i64 %298
  %483 = load double, double* %482, align 8, !tbaa !27
  %484 = fmul double %481, %483
  %485 = getelementptr inbounds double, double* %299, i64 2
  store double %484, double* %310, align 8, !tbaa !27
  %486 = add nuw nsw i64 %298, 2
  br label %297
}

; Function Attrs: nofree norecurse nounwind uwtable
define internal fastcc void @window_subband(i16* readonly %0, double* nocapture %1) unnamed_addr #5 {
  %3 = getelementptr inbounds i16, i16* %0, i64 255
  %4 = load i16, i16* %3, align 2, !tbaa !29
  %5 = sitofp i16 %4 to double
  %6 = getelementptr inbounds i16, i16* %0, i64 223
  %7 = load i16, i16* %6, align 2, !tbaa !29
  %8 = sext i16 %7 to i32
  %9 = getelementptr inbounds i16, i16* %0, i64 287
  %10 = load i16, i16* %9, align 2, !tbaa !29
  %11 = sext i16 %10 to i32
  %12 = sub nsw i32 %8, %11
  %13 = sitofp i32 %12 to double
  %14 = load double, double* getelementptr inbounds ([256 x double], [256 x double]* @enwindow, i64 0, i64 0), align 16, !tbaa !27
  %15 = fmul double %14, %13
  %16 = fadd double %15, %5
  %17 = getelementptr inbounds i16, i16* %0, i64 191
  %18 = load i16, i16* %17, align 2, !tbaa !29
  %19 = sext i16 %18 to i32
  %20 = getelementptr inbounds i16, i16* %0, i64 319
  %21 = load i16, i16* %20, align 2, !tbaa !29
  %22 = sext i16 %21 to i32
  %23 = add nsw i32 %22, %19
  %24 = sitofp i32 %23 to double
  %25 = load double, double* getelementptr inbounds ([256 x double], [256 x double]* @enwindow, i64 0, i64 1), align 8, !tbaa !27
  %26 = fmul double %25, %24
  %27 = fadd double %16, %26
  %28 = getelementptr inbounds i16, i16* %0, i64 159
  %29 = load i16, i16* %28, align 2, !tbaa !29
  %30 = sext i16 %29 to i32
  %31 = getelementptr inbounds i16, i16* %0, i64 351
  %32 = load i16, i16* %31, align 2, !tbaa !29
  %33 = sext i16 %32 to i32
  %34 = sub nsw i32 %30, %33
  %35 = sitofp i32 %34 to double
  %36 = load double, double* getelementptr inbounds ([256 x double], [256 x double]* @enwindow, i64 0, i64 2), align 16, !tbaa !27
  %37 = fmul double %36, %35
  %38 = fadd double %27, %37
  %39 = getelementptr inbounds i16, i16* %0, i64 127
  %40 = load i16, i16* %39, align 2, !tbaa !29
  %41 = sext i16 %40 to i32
  %42 = getelementptr inbounds i16, i16* %0, i64 383
  %43 = load i16, i16* %42, align 2, !tbaa !29
  %44 = sext i16 %43 to i32
  %45 = add nsw i32 %44, %41
  %46 = sitofp i32 %45 to double
  %47 = load double, double* getelementptr inbounds ([256 x double], [256 x double]* @enwindow, i64 0, i64 3), align 8, !tbaa !27
  %48 = fmul double %47, %46
  %49 = fadd double %38, %48
  %50 = getelementptr inbounds i16, i16* %0, i64 95
  %51 = load i16, i16* %50, align 2, !tbaa !29
  %52 = sext i16 %51 to i32
  %53 = getelementptr inbounds i16, i16* %0, i64 415
  %54 = load i16, i16* %53, align 2, !tbaa !29
  %55 = sext i16 %54 to i32
  %56 = sub nsw i32 %52, %55
  %57 = sitofp i32 %56 to double
  %58 = load double, double* getelementptr inbounds ([256 x double], [256 x double]* @enwindow, i64 0, i64 4), align 16, !tbaa !27
  %59 = fmul double %58, %57
  %60 = fadd double %49, %59
  %61 = getelementptr inbounds i16, i16* %0, i64 63
  %62 = load i16, i16* %61, align 2, !tbaa !29
  %63 = sext i16 %62 to i32
  %64 = getelementptr inbounds i16, i16* %0, i64 447
  %65 = load i16, i16* %64, align 2, !tbaa !29
  %66 = sext i16 %65 to i32
  %67 = add nsw i32 %66, %63
  %68 = sitofp i32 %67 to double
  %69 = load double, double* getelementptr inbounds ([256 x double], [256 x double]* @enwindow, i64 0, i64 5), align 8, !tbaa !27
  %70 = fmul double %69, %68
  %71 = fadd double %60, %70
  %72 = getelementptr inbounds i16, i16* %0, i64 31
  %73 = load i16, i16* %72, align 2, !tbaa !29
  %74 = sext i16 %73 to i32
  %75 = getelementptr inbounds i16, i16* %0, i64 479
  %76 = load i16, i16* %75, align 2, !tbaa !29
  %77 = sext i16 %76 to i32
  %78 = sub nsw i32 %74, %77
  %79 = sitofp i32 %78 to double
  %80 = load double, double* getelementptr inbounds ([256 x double], [256 x double]* @enwindow, i64 0, i64 6), align 16, !tbaa !27
  %81 = fmul double %80, %79
  %82 = fadd double %71, %81
  store double %82, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 19), align 8, !tbaa !27
  br label %83

83:                                               ; preds = %83, %2
  %84 = phi i64 [ 14, %2 ], [ %278, %83 ]
  %85 = phi double* [ getelementptr inbounds ([256 x double], [256 x double]* @enwindow, i64 0, i64 7), %2 ], [ %263, %83 ]
  %86 = getelementptr inbounds i16, i16* %0, i64 %84
  %87 = sub nsw i64 0, %84
  %88 = getelementptr inbounds i16, i16* %0, i64 %87
  %89 = getelementptr inbounds i16, i16* %88, i64 270
  %90 = load i16, i16* %89, align 2, !tbaa !29
  %91 = sitofp i16 %90 to double
  %92 = getelementptr inbounds i16, i16* %86, i64 240
  %93 = load i16, i16* %92, align 2, !tbaa !29
  %94 = sitofp i16 %93 to double
  %95 = getelementptr inbounds double, double* %85, i64 1
  %96 = load double, double* %85, align 8, !tbaa !27
  %97 = getelementptr inbounds i16, i16* %88, i64 334
  %98 = load i16, i16* %97, align 2, !tbaa !29
  %99 = sitofp i16 %98 to double
  %100 = fmul double %96, %99
  %101 = fadd double %100, %91
  %102 = getelementptr inbounds i16, i16* %86, i64 176
  %103 = load i16, i16* %102, align 2, !tbaa !29
  %104 = sitofp i16 %103 to double
  %105 = fmul double %96, %104
  %106 = fadd double %105, %94
  %107 = getelementptr inbounds double, double* %85, i64 2
  %108 = load double, double* %95, align 8, !tbaa !27
  %109 = getelementptr inbounds i16, i16* %88, i64 398
  %110 = load i16, i16* %109, align 2, !tbaa !29
  %111 = sitofp i16 %110 to double
  %112 = fmul double %108, %111
  %113 = fadd double %101, %112
  %114 = getelementptr inbounds i16, i16* %86, i64 112
  %115 = load i16, i16* %114, align 2, !tbaa !29
  %116 = sitofp i16 %115 to double
  %117 = fmul double %108, %116
  %118 = fadd double %106, %117
  %119 = getelementptr inbounds double, double* %85, i64 3
  %120 = load double, double* %107, align 8, !tbaa !27
  %121 = getelementptr inbounds i16, i16* %88, i64 462
  %122 = load i16, i16* %121, align 2, !tbaa !29
  %123 = sitofp i16 %122 to double
  %124 = fmul double %120, %123
  %125 = fadd double %113, %124
  %126 = getelementptr inbounds i16, i16* %86, i64 48
  %127 = load i16, i16* %126, align 2, !tbaa !29
  %128 = sitofp i16 %127 to double
  %129 = fmul double %120, %128
  %130 = fadd double %118, %129
  %131 = getelementptr inbounds double, double* %85, i64 4
  %132 = load double, double* %119, align 8, !tbaa !27
  %133 = getelementptr inbounds i16, i16* %88, i64 14
  %134 = load i16, i16* %133, align 2, !tbaa !29
  %135 = sitofp i16 %134 to double
  %136 = fmul double %132, %135
  %137 = fadd double %125, %136
  %138 = getelementptr inbounds i16, i16* %86, i64 496
  %139 = load i16, i16* %138, align 2, !tbaa !29
  %140 = sitofp i16 %139 to double
  %141 = fmul double %132, %140
  %142 = fadd double %130, %141
  %143 = getelementptr inbounds double, double* %85, i64 5
  %144 = load double, double* %131, align 8, !tbaa !27
  %145 = getelementptr inbounds i16, i16* %88, i64 78
  %146 = load i16, i16* %145, align 2, !tbaa !29
  %147 = sitofp i16 %146 to double
  %148 = fmul double %144, %147
  %149 = fadd double %137, %148
  %150 = getelementptr inbounds i16, i16* %86, i64 432
  %151 = load i16, i16* %150, align 2, !tbaa !29
  %152 = sitofp i16 %151 to double
  %153 = fmul double %144, %152
  %154 = fadd double %142, %153
  %155 = getelementptr inbounds double, double* %85, i64 6
  %156 = load double, double* %143, align 8, !tbaa !27
  %157 = getelementptr inbounds i16, i16* %88, i64 142
  %158 = load i16, i16* %157, align 2, !tbaa !29
  %159 = sitofp i16 %158 to double
  %160 = fmul double %156, %159
  %161 = fadd double %149, %160
  %162 = getelementptr inbounds i16, i16* %86, i64 368
  %163 = load i16, i16* %162, align 2, !tbaa !29
  %164 = sitofp i16 %163 to double
  %165 = fmul double %156, %164
  %166 = fadd double %154, %165
  %167 = getelementptr inbounds double, double* %85, i64 7
  %168 = load double, double* %155, align 8, !tbaa !27
  %169 = getelementptr inbounds i16, i16* %88, i64 206
  %170 = load i16, i16* %169, align 2, !tbaa !29
  %171 = sitofp i16 %170 to double
  %172 = fmul double %168, %171
  %173 = fadd double %161, %172
  %174 = getelementptr inbounds i16, i16* %86, i64 304
  %175 = load i16, i16* %174, align 2, !tbaa !29
  %176 = sitofp i16 %175 to double
  %177 = fmul double %168, %176
  %178 = fadd double %166, %177
  %179 = getelementptr inbounds double, double* %85, i64 8
  %180 = load double, double* %167, align 8, !tbaa !27
  %181 = getelementptr inbounds i16, i16* %86, i64 16
  %182 = load i16, i16* %181, align 2, !tbaa !29
  %183 = sitofp i16 %182 to double
  %184 = fmul double %180, %183
  %185 = fadd double %173, %184
  %186 = getelementptr inbounds i16, i16* %88, i64 494
  %187 = load i16, i16* %186, align 2, !tbaa !29
  %188 = sitofp i16 %187 to double
  %189 = fmul double %180, %188
  %190 = fsub double %178, %189
  %191 = getelementptr inbounds double, double* %85, i64 9
  %192 = load double, double* %179, align 8, !tbaa !27
  %193 = getelementptr inbounds i16, i16* %86, i64 80
  %194 = load i16, i16* %193, align 2, !tbaa !29
  %195 = sitofp i16 %194 to double
  %196 = fmul double %192, %195
  %197 = fadd double %185, %196
  %198 = getelementptr inbounds i16, i16* %88, i64 430
  %199 = load i16, i16* %198, align 2, !tbaa !29
  %200 = sitofp i16 %199 to double
  %201 = fmul double %192, %200
  %202 = fsub double %190, %201
  %203 = getelementptr inbounds double, double* %85, i64 10
  %204 = load double, double* %191, align 8, !tbaa !27
  %205 = getelementptr inbounds i16, i16* %86, i64 144
  %206 = load i16, i16* %205, align 2, !tbaa !29
  %207 = sitofp i16 %206 to double
  %208 = fmul double %204, %207
  %209 = fadd double %197, %208
  %210 = getelementptr inbounds i16, i16* %88, i64 366
  %211 = load i16, i16* %210, align 2, !tbaa !29
  %212 = sitofp i16 %211 to double
  %213 = fmul double %204, %212
  %214 = fsub double %202, %213
  %215 = getelementptr inbounds double, double* %85, i64 11
  %216 = load double, double* %203, align 8, !tbaa !27
  %217 = getelementptr inbounds i16, i16* %86, i64 208
  %218 = load i16, i16* %217, align 2, !tbaa !29
  %219 = sitofp i16 %218 to double
  %220 = fmul double %216, %219
  %221 = fadd double %209, %220
  %222 = getelementptr inbounds i16, i16* %88, i64 302
  %223 = load i16, i16* %222, align 2, !tbaa !29
  %224 = sitofp i16 %223 to double
  %225 = fmul double %216, %224
  %226 = fsub double %214, %225
  %227 = getelementptr inbounds double, double* %85, i64 12
  %228 = load double, double* %215, align 8, !tbaa !27
  %229 = getelementptr inbounds i16, i16* %86, i64 272
  %230 = load i16, i16* %229, align 2, !tbaa !29
  %231 = sitofp i16 %230 to double
  %232 = fmul double %228, %231
  %233 = fsub double %221, %232
  %234 = getelementptr inbounds i16, i16* %88, i64 238
  %235 = load i16, i16* %234, align 2, !tbaa !29
  %236 = sitofp i16 %235 to double
  %237 = fmul double %228, %236
  %238 = fadd double %226, %237
  %239 = getelementptr inbounds double, double* %85, i64 13
  %240 = load double, double* %227, align 8, !tbaa !27
  %241 = getelementptr inbounds i16, i16* %86, i64 336
  %242 = load i16, i16* %241, align 2, !tbaa !29
  %243 = sitofp i16 %242 to double
  %244 = fmul double %240, %243
  %245 = fsub double %233, %244
  %246 = getelementptr inbounds i16, i16* %88, i64 174
  %247 = load i16, i16* %246, align 2, !tbaa !29
  %248 = sitofp i16 %247 to double
  %249 = fmul double %240, %248
  %250 = fadd double %238, %249
  %251 = getelementptr inbounds double, double* %85, i64 14
  %252 = load double, double* %239, align 8, !tbaa !27
  %253 = getelementptr inbounds i16, i16* %86, i64 400
  %254 = load i16, i16* %253, align 2, !tbaa !29
  %255 = sitofp i16 %254 to double
  %256 = fmul double %252, %255
  %257 = fsub double %245, %256
  %258 = getelementptr inbounds i16, i16* %88, i64 110
  %259 = load i16, i16* %258, align 2, !tbaa !29
  %260 = sitofp i16 %259 to double
  %261 = fmul double %252, %260
  %262 = fadd double %250, %261
  %263 = getelementptr inbounds double, double* %85, i64 15
  %264 = load double, double* %251, align 8, !tbaa !27
  %265 = getelementptr inbounds i16, i16* %86, i64 464
  %266 = load i16, i16* %265, align 2, !tbaa !29
  %267 = sitofp i16 %266 to double
  %268 = fmul double %264, %267
  %269 = fsub double %257, %268
  %270 = getelementptr inbounds i16, i16* %88, i64 46
  %271 = load i16, i16* %270, align 2, !tbaa !29
  %272 = sitofp i16 %271 to double
  %273 = fmul double %264, %272
  %274 = fadd double %262, %273
  %275 = sub nuw nsw i64 30, %84
  %276 = getelementptr inbounds double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 4), i64 %275
  store double %269, double* %276, align 8, !tbaa !27
  %277 = getelementptr inbounds double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 4), i64 %84
  store double %274, double* %277, align 8, !tbaa !27
  %278 = add nsw i64 %84, -1
  %279 = icmp eq i64 %84, 0
  br i1 %279, label %280, label %83

280:                                              ; preds = %83
  %281 = getelementptr inbounds i16, i16* %0, i64 239
  %282 = load i16, i16* %281, align 2, !tbaa !29
  %283 = sitofp i16 %282 to double
  %284 = getelementptr inbounds i16, i16* %0, i64 175
  %285 = load i16, i16* %284, align 2, !tbaa !29
  %286 = sitofp i16 %285 to double
  %287 = getelementptr inbounds double, double* %85, i64 16
  %288 = load double, double* %263, align 8, !tbaa !27
  %289 = fmul double %288, %286
  %290 = fadd double %289, %283
  %291 = getelementptr inbounds i16, i16* %0, i64 111
  %292 = load i16, i16* %291, align 2, !tbaa !29
  %293 = sitofp i16 %292 to double
  %294 = getelementptr inbounds double, double* %85, i64 17
  %295 = load double, double* %287, align 8, !tbaa !27
  %296 = fmul double %295, %293
  %297 = fadd double %290, %296
  %298 = getelementptr inbounds i16, i16* %0, i64 47
  %299 = load i16, i16* %298, align 2, !tbaa !29
  %300 = sitofp i16 %299 to double
  %301 = getelementptr inbounds double, double* %85, i64 18
  %302 = load double, double* %294, align 8, !tbaa !27
  %303 = fmul double %302, %300
  %304 = fadd double %297, %303
  %305 = getelementptr inbounds i16, i16* %0, i64 303
  %306 = load i16, i16* %305, align 2, !tbaa !29
  %307 = sitofp i16 %306 to double
  %308 = getelementptr inbounds double, double* %85, i64 19
  %309 = load double, double* %301, align 8, !tbaa !27
  %310 = fmul double %309, %307
  %311 = fsub double %304, %310
  %312 = getelementptr inbounds i16, i16* %0, i64 367
  %313 = load i16, i16* %312, align 2, !tbaa !29
  %314 = sitofp i16 %313 to double
  %315 = getelementptr inbounds double, double* %85, i64 20
  %316 = load double, double* %308, align 8, !tbaa !27
  %317 = fmul double %316, %314
  %318 = fsub double %311, %317
  %319 = getelementptr inbounds i16, i16* %0, i64 431
  %320 = load i16, i16* %319, align 2, !tbaa !29
  %321 = sitofp i16 %320 to double
  %322 = getelementptr inbounds double, double* %85, i64 21
  %323 = load double, double* %315, align 8, !tbaa !27
  %324 = fmul double %323, %321
  %325 = fsub double %318, %324
  %326 = getelementptr inbounds i16, i16* %0, i64 495
  %327 = load i16, i16* %326, align 2, !tbaa !29
  %328 = sitofp i16 %327 to double
  %329 = load double, double* %322, align 8, !tbaa !27
  %330 = fmul double %329, %328
  %331 = fsub double %325, %330
  br label %332

332:                                              ; preds = %332, %280
  %333 = phi i64 [ 15, %280 ], [ %493, %332 ]
  %334 = phi double* [ getelementptr inbounds ([16 x [31 x double]], [16 x [31 x double]]* @mm, i64 0, i64 0, i64 0), %280 ], [ %487, %332 ]
  %335 = getelementptr inbounds double, double* %334, i64 1
  %336 = load double, double* %334, align 8, !tbaa !27
  %337 = fmul double %274, %336
  %338 = getelementptr inbounds double, double* %334, i64 2
  %339 = load double, double* %335, align 8, !tbaa !27
  %340 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 5), align 8, !tbaa !27
  %341 = fmul double %339, %340
  %342 = fadd double %331, %341
  %343 = getelementptr inbounds double, double* %334, i64 3
  %344 = load double, double* %338, align 8, !tbaa !27
  %345 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 6), align 16, !tbaa !27
  %346 = fmul double %344, %345
  %347 = fadd double %337, %346
  %348 = getelementptr inbounds double, double* %334, i64 4
  %349 = load double, double* %343, align 8, !tbaa !27
  %350 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 7), align 8, !tbaa !27
  %351 = fmul double %349, %350
  %352 = fadd double %342, %351
  %353 = getelementptr inbounds double, double* %334, i64 5
  %354 = load double, double* %348, align 8, !tbaa !27
  %355 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 8), align 16, !tbaa !27
  %356 = fmul double %354, %355
  %357 = fadd double %347, %356
  %358 = getelementptr inbounds double, double* %334, i64 6
  %359 = load double, double* %353, align 8, !tbaa !27
  %360 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 9), align 8, !tbaa !27
  %361 = fmul double %359, %360
  %362 = fadd double %352, %361
  %363 = getelementptr inbounds double, double* %334, i64 7
  %364 = load double, double* %358, align 8, !tbaa !27
  %365 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 10), align 16, !tbaa !27
  %366 = fmul double %364, %365
  %367 = fadd double %357, %366
  %368 = getelementptr inbounds double, double* %334, i64 8
  %369 = load double, double* %363, align 8, !tbaa !27
  %370 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 11), align 8, !tbaa !27
  %371 = fmul double %369, %370
  %372 = fadd double %362, %371
  %373 = getelementptr inbounds double, double* %334, i64 9
  %374 = load double, double* %368, align 8, !tbaa !27
  %375 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 12), align 16, !tbaa !27
  %376 = fmul double %374, %375
  %377 = fadd double %367, %376
  %378 = getelementptr inbounds double, double* %334, i64 10
  %379 = load double, double* %373, align 8, !tbaa !27
  %380 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 13), align 8, !tbaa !27
  %381 = fmul double %379, %380
  %382 = fadd double %372, %381
  %383 = getelementptr inbounds double, double* %334, i64 11
  %384 = load double, double* %378, align 8, !tbaa !27
  %385 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 14), align 16, !tbaa !27
  %386 = fmul double %384, %385
  %387 = fadd double %377, %386
  %388 = getelementptr inbounds double, double* %334, i64 12
  %389 = load double, double* %383, align 8, !tbaa !27
  %390 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 15), align 8, !tbaa !27
  %391 = fmul double %389, %390
  %392 = fadd double %382, %391
  %393 = getelementptr inbounds double, double* %334, i64 13
  %394 = load double, double* %388, align 8, !tbaa !27
  %395 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 16), align 16, !tbaa !27
  %396 = fmul double %394, %395
  %397 = fadd double %387, %396
  %398 = getelementptr inbounds double, double* %334, i64 14
  %399 = load double, double* %393, align 8, !tbaa !27
  %400 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 17), align 8, !tbaa !27
  %401 = fmul double %399, %400
  %402 = fadd double %392, %401
  %403 = getelementptr inbounds double, double* %334, i64 15
  %404 = load double, double* %398, align 8, !tbaa !27
  %405 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 18), align 16, !tbaa !27
  %406 = fmul double %404, %405
  %407 = fadd double %397, %406
  %408 = getelementptr inbounds double, double* %334, i64 16
  %409 = load double, double* %403, align 8, !tbaa !27
  %410 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 19), align 8, !tbaa !27
  %411 = fmul double %409, %410
  %412 = fadd double %402, %411
  %413 = getelementptr inbounds double, double* %334, i64 17
  %414 = load double, double* %408, align 8, !tbaa !27
  %415 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 20), align 16, !tbaa !27
  %416 = fmul double %414, %415
  %417 = fadd double %407, %416
  %418 = getelementptr inbounds double, double* %334, i64 18
  %419 = load double, double* %413, align 8, !tbaa !27
  %420 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 21), align 8, !tbaa !27
  %421 = fmul double %419, %420
  %422 = fadd double %412, %421
  %423 = getelementptr inbounds double, double* %334, i64 19
  %424 = load double, double* %418, align 8, !tbaa !27
  %425 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 22), align 16, !tbaa !27
  %426 = fmul double %424, %425
  %427 = fadd double %417, %426
  %428 = getelementptr inbounds double, double* %334, i64 20
  %429 = load double, double* %423, align 8, !tbaa !27
  %430 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 23), align 8, !tbaa !27
  %431 = fmul double %429, %430
  %432 = fadd double %422, %431
  %433 = getelementptr inbounds double, double* %334, i64 21
  %434 = load double, double* %428, align 8, !tbaa !27
  %435 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 24), align 16, !tbaa !27
  %436 = fmul double %434, %435
  %437 = fadd double %427, %436
  %438 = getelementptr inbounds double, double* %334, i64 22
  %439 = load double, double* %433, align 8, !tbaa !27
  %440 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 25), align 8, !tbaa !27
  %441 = fmul double %439, %440
  %442 = fadd double %432, %441
  %443 = getelementptr inbounds double, double* %334, i64 23
  %444 = load double, double* %438, align 8, !tbaa !27
  %445 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 26), align 16, !tbaa !27
  %446 = fmul double %444, %445
  %447 = fadd double %437, %446
  %448 = getelementptr inbounds double, double* %334, i64 24
  %449 = load double, double* %443, align 8, !tbaa !27
  %450 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 27), align 8, !tbaa !27
  %451 = fmul double %449, %450
  %452 = fadd double %442, %451
  %453 = getelementptr inbounds double, double* %334, i64 25
  %454 = load double, double* %448, align 8, !tbaa !27
  %455 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 28), align 16, !tbaa !27
  %456 = fmul double %454, %455
  %457 = fadd double %447, %456
  %458 = getelementptr inbounds double, double* %334, i64 26
  %459 = load double, double* %453, align 8, !tbaa !27
  %460 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 29), align 8, !tbaa !27
  %461 = fmul double %459, %460
  %462 = fadd double %452, %461
  %463 = getelementptr inbounds double, double* %334, i64 27
  %464 = load double, double* %458, align 8, !tbaa !27
  %465 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 30), align 16, !tbaa !27
  %466 = fmul double %464, %465
  %467 = fadd double %457, %466
  %468 = getelementptr inbounds double, double* %334, i64 28
  %469 = load double, double* %463, align 8, !tbaa !27
  %470 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 31), align 8, !tbaa !27
  %471 = fmul double %469, %470
  %472 = fadd double %462, %471
  %473 = getelementptr inbounds double, double* %334, i64 29
  %474 = load double, double* %468, align 8, !tbaa !27
  %475 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 32), align 16, !tbaa !27
  %476 = fmul double %474, %475
  %477 = fadd double %467, %476
  %478 = getelementptr inbounds double, double* %334, i64 30
  %479 = load double, double* %473, align 8, !tbaa !27
  %480 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 33), align 8, !tbaa !27
  %481 = fmul double %479, %480
  %482 = fadd double %472, %481
  %483 = load double, double* %478, align 8, !tbaa !27
  %484 = load double, double* getelementptr inbounds ([4 x [36 x double]], [4 x [36 x double]]* @win.199, i64 0, i64 2, i64 34), align 16, !tbaa !27
  %485 = fmul double %483, %484
  %486 = fadd double %477, %485
  %487 = getelementptr double, double* %334, i64 31
  %488 = fadd double %482, %486
  %489 = getelementptr inbounds double, double* %1, i64 %333
  store double %488, double* %489, align 8, !tbaa !27
  %490 = fsub double %482, %486
  %491 = sub nuw nsw i64 31, %333
  %492 = getelementptr inbounds double, double* %1, i64 %491
  store double %490, double* %492, align 8, !tbaa !27
  %493 = add nsw i64 %333, -1
  %494 = icmp eq i64 %333, 0
  br i1 %494, label %495, label %332

495:                                              ; preds = %332
  ret void
}

; Function Attrs: noreturn nounwind uwtable
define dso_local void @lame_usage(%struct.lame_global_flags* nocapture readnone %0, i8* %1) local_unnamed_addr #14 {
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  tail call void @lame_print_version(%struct._IO_FILE* %3) #21
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %5 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %4) #19
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %7 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1.202, i64 0, i64 0), i8* %1) #19
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %9 = tail call i64 @fwrite(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.2.203, i64 0, i64 0), i64 65, i64 1, %struct._IO_FILE* %8) #19
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %11 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %10) #19
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %13 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.3.204, i64 0, i64 0), i8* %1) #19
  tail call void @exit(i32 1) #20
  unreachable
}

; Function Attrs: noreturn nounwind uwtable
define dso_local void @lame_help(%struct.lame_global_flags* nocapture readonly %0, i8* %1) local_unnamed_addr #14 {
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  tail call void @lame_print_version(%struct._IO_FILE* %3) #21
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %5 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %4)
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %7 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1.202, i64 0, i64 0), i8* %1)
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %9 = tail call i64 @fwrite(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.2.203, i64 0, i64 0), i64 65, i64 1, %struct._IO_FILE* %8)
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %11 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %10)
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %13 = tail call i64 @fwrite(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4.205, i64 0, i64 0), i64 10, i64 1, %struct._IO_FILE* %12)
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %15 = tail call i64 @fwrite(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5.206, i64 0, i64 0), i64 17, i64 1, %struct._IO_FILE* %14)
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %17 = tail call i64 @fwrite(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.6.207, i64 0, i64 0), i64 37, i64 1, %struct._IO_FILE* %16)
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %19 = tail call i64 @fwrite(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.7.208, i64 0, i64 0), i64 49, i64 1, %struct._IO_FILE* %18)
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %21 = tail call i64 @fwrite(i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.8.209, i64 0, i64 0), i64 76, i64 1, %struct._IO_FILE* %20)
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %23 = tail call i64 @fwrite(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.9.210, i64 0, i64 0), i64 45, i64 1, %struct._IO_FILE* %22)
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %25 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %24)
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %27 = tail call i64 @fwrite(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.10.211, i64 0, i64 0), i64 18, i64 1, %struct._IO_FILE* %26)
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %29 = tail call i64 @fwrite(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.11.212, i64 0, i64 0), i64 64, i64 1, %struct._IO_FILE* %28)
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %31 = tail call i64 @fwrite(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.12.213, i64 0, i64 0), i64 74, i64 1, %struct._IO_FILE* %30)
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %33 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.13.214, i64 0, i64 0))
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %35 = tail call i64 @fwrite(i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.14.215, i64 0, i64 0), i64 75, i64 1, %struct._IO_FILE* %34)
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %37 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %36, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.15.216, i64 0, i64 0))
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %39 = tail call i64 @fwrite(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.16.217, i64 0, i64 0), i64 80, i64 1, %struct._IO_FILE* %38)
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %41 = tail call i64 @fwrite(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.17.218, i64 0, i64 0), i64 72, i64 1, %struct._IO_FILE* %40)
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %43 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %42)
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %45 = tail call i64 @fwrite(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.18.219, i64 0, i64 0), i64 23, i64 1, %struct._IO_FILE* %44)
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %47 = tail call i64 @fwrite(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.19.220, i64 0, i64 0), i64 70, i64 1, %struct._IO_FILE* %46)
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %49 = tail call i64 @fwrite(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.20.221, i64 0, i64 0), i64 66, i64 1, %struct._IO_FILE* %48)
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %51 = tail call i64 @fwrite(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.21.222, i64 0, i64 0), i64 71, i64 1, %struct._IO_FILE* %50)
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %53 = tail call i64 @fwrite(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.22.223, i64 0, i64 0), i64 64, i64 1, %struct._IO_FILE* %52)
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %55 = tail call i64 @fwrite(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.23.224, i64 0, i64 0), i64 64, i64 1, %struct._IO_FILE* %54)
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %57 = tail call i64 @fwrite(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.24.225, i64 0, i64 0), i64 49, i64 1, %struct._IO_FILE* %56)
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %59 = tail call i64 @fwrite(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.25.226, i64 0, i64 0), i64 48, i64 1, %struct._IO_FILE* %58)
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %61 = tail call i64 @fwrite(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.26.227, i64 0, i64 0), i64 44, i64 1, %struct._IO_FILE* %60)
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %63 = tail call i64 @fwrite(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.27.228, i64 0, i64 0), i64 44, i64 1, %struct._IO_FILE* %62)
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %65 = tail call i64 @fwrite(i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.28.229, i64 0, i64 0), i64 76, i64 1, %struct._IO_FILE* %64)
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %67 = tail call i64 @fwrite(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.29.230, i64 0, i64 0), i64 56, i64 1, %struct._IO_FILE* %66)
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %69 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %68)
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %71 = tail call i64 @fwrite(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.30.231, i64 0, i64 0), i64 47, i64 1, %struct._IO_FILE* %70)
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %73 = tail call i64 @fwrite(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.31.232, i64 0, i64 0), i64 71, i64 1, %struct._IO_FILE* %72)
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %75 = tail call i64 @fwrite(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.32.233, i64 0, i64 0), i64 49, i64 1, %struct._IO_FILE* %74)
  %76 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %77 = tail call i64 @fwrite(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.33.234, i64 0, i64 0), i64 53, i64 1, %struct._IO_FILE* %76)
  %78 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %79 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %78)
  %80 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %81 = tail call i64 @fwrite(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.34.235, i64 0, i64 0), i64 15, i64 1, %struct._IO_FILE* %80)
  %82 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %83 = tail call i64 @fwrite(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.35.236, i64 0, i64 0), i64 47, i64 1, %struct._IO_FILE* %82)
  %84 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %85 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 22
  %86 = load i32, i32* %85, align 4, !tbaa !162
  %87 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %84, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.36.237, i64 0, i64 0), i32 %86)
  %88 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %89 = tail call i64 @fwrite(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.37.238, i64 0, i64 0), i64 65, i64 1, %struct._IO_FILE* %88)
  %90 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %91 = tail call i64 @fwrite(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.38.239, i64 0, i64 0), i64 67, i64 1, %struct._IO_FILE* %90)
  %92 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %93 = tail call i64 @fwrite(i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.39.240, i64 0, i64 0), i64 68, i64 1, %struct._IO_FILE* %92)
  %94 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %95 = tail call i64 @fwrite(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.40.241, i64 0, i64 0), i64 55, i64 1, %struct._IO_FILE* %94)
  %96 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %97 = tail call i64 @fwrite(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.41.242, i64 0, i64 0), i64 50, i64 1, %struct._IO_FILE* %96)
  %98 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %99 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %98)
  %100 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %101 = tail call i64 @fwrite(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.42.243, i64 0, i64 0), i64 29, i64 1, %struct._IO_FILE* %100)
  %102 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %103 = tail call i64 @fwrite(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.43.244, i64 0, i64 0), i64 50, i64 1, %struct._IO_FILE* %102)
  %104 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %105 = tail call i64 @fwrite(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.44.245, i64 0, i64 0), i64 38, i64 1, %struct._IO_FILE* %104)
  %106 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %107 = tail call i64 @fwrite(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.45.246, i64 0, i64 0), i64 41, i64 1, %struct._IO_FILE* %106)
  %108 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %109 = tail call i64 @fwrite(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.46.247, i64 0, i64 0), i64 74, i64 1, %struct._IO_FILE* %108)
  %110 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %111 = tail call i64 @fwrite(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.47.248, i64 0, i64 0), i64 57, i64 1, %struct._IO_FILE* %110)
  %112 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %113 = tail call i64 @fwrite(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.48.249, i64 0, i64 0), i64 46, i64 1, %struct._IO_FILE* %112)
  %114 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %115 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %114)
  %116 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %117 = tail call i64 @fwrite(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.49.250, i64 0, i64 0), i64 63, i64 1, %struct._IO_FILE* %116)
  %118 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %119 = tail call i64 @fwrite(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.50.251, i64 0, i64 0), i64 51, i64 1, %struct._IO_FILE* %118)
  %120 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %121 = tail call i64 @fwrite(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.51.252, i64 0, i64 0), i64 61, i64 1, %struct._IO_FILE* %120)
  %122 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %123 = tail call i64 @fwrite(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.52.253, i64 0, i64 0), i64 62, i64 1, %struct._IO_FILE* %122)
  %124 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %125 = tail call i64 @fwrite(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.53.254, i64 0, i64 0), i64 74, i64 1, %struct._IO_FILE* %124)
  %126 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %127 = tail call i64 @fwrite(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.54.255, i64 0, i64 0), i64 53, i64 1, %struct._IO_FILE* %126)
  %128 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %129 = tail call i64 @fwrite(i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.55.256, i64 0, i64 0), i64 68, i64 1, %struct._IO_FILE* %128)
  %130 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %131 = tail call i64 @fwrite(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.56.257, i64 0, i64 0), i64 67, i64 1, %struct._IO_FILE* %130)
  %132 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %133 = tail call i64 @fwrite(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.57.258, i64 0, i64 0), i64 66, i64 1, %struct._IO_FILE* %132)
  %134 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %135 = tail call i64 @fwrite(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.58.259, i64 0, i64 0), i64 53, i64 1, %struct._IO_FILE* %134)
  %136 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %137 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %136)
  %138 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  tail call void @display_bitrates(%struct._IO_FILE* %138) #21
  tail call void @exit(i32 0) #20
  unreachable
}

; Function Attrs: noreturn nounwind uwtable
define dso_local void @lame_presets_info(%struct.lame_global_flags* nocapture readnone %0, i8* nocapture readnone %1) local_unnamed_addr #14 {
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  tail call void @lame_print_version(%struct._IO_FILE* %3) #21
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %5 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %4)
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %7 = tail call i64 @fwrite(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.59.260, i64 0, i64 0), i64 48, i64 1, %struct._IO_FILE* %6)
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %9 = tail call i64 @fwrite(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.60.261, i64 0, i64 0), i64 51, i64 1, %struct._IO_FILE* %8)
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %11 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %10)
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %13 = tail call i64 @fwrite(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.61.262, i64 0, i64 0), i64 43, i64 1, %struct._IO_FILE* %12)
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %15 = tail call i64 @fwrite(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.62.263, i64 0, i64 0), i64 47, i64 1, %struct._IO_FILE* %14)
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %17 = tail call i64 @fwrite(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.63.264, i64 0, i64 0), i64 47, i64 1, %struct._IO_FILE* %16)
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %19 = tail call i64 @fwrite(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.64.265, i64 0, i64 0), i64 47, i64 1, %struct._IO_FILE* %18)
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %21 = tail call i64 @fwrite(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.65.266, i64 0, i64 0), i64 47, i64 1, %struct._IO_FILE* %20)
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %23 = tail call i64 @fwrite(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.66.267, i64 0, i64 0), i64 34, i64 1, %struct._IO_FILE* %22)
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %25 = tail call i64 @fwrite(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.67.268, i64 0, i64 0), i64 31, i64 1, %struct._IO_FILE* %24)
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %27 = tail call i64 @fwrite(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.68.269, i64 0, i64 0), i64 31, i64 1, %struct._IO_FILE* %26)
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %29 = tail call i64 @fwrite(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.69.270, i64 0, i64 0), i64 34, i64 1, %struct._IO_FILE* %28)
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %31 = tail call i64 @fwrite(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.70.271, i64 0, i64 0), i64 58, i64 1, %struct._IO_FILE* %30)
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %33 = tail call i64 @fwrite(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.71.272, i64 0, i64 0), i64 34, i64 1, %struct._IO_FILE* %32)
  %34 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %35 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %34)
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %37 = tail call i64 @fwrite(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.72.273, i64 0, i64 0), i64 43, i64 1, %struct._IO_FILE* %36)
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %39 = tail call i64 @fwrite(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.73.274, i64 0, i64 0), i64 47, i64 1, %struct._IO_FILE* %38)
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %41 = tail call i64 @fwrite(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.74.275, i64 0, i64 0), i64 47, i64 1, %struct._IO_FILE* %40)
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %43 = tail call i64 @fwrite(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.75.276, i64 0, i64 0), i64 43, i64 1, %struct._IO_FILE* %42)
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %45 = tail call i64 @fwrite(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.76.277, i64 0, i64 0), i64 43, i64 1, %struct._IO_FILE* %44)
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %47 = tail call i64 @fwrite(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.66.267, i64 0, i64 0), i64 34, i64 1, %struct._IO_FILE* %46)
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %49 = tail call i64 @fwrite(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.67.268, i64 0, i64 0), i64 31, i64 1, %struct._IO_FILE* %48)
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %51 = tail call i64 @fwrite(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.77.278, i64 0, i64 0), i64 31, i64 1, %struct._IO_FILE* %50)
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %53 = tail call i64 @fwrite(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.69.270, i64 0, i64 0), i64 34, i64 1, %struct._IO_FILE* %52)
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %55 = tail call i64 @fwrite(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.78.279, i64 0, i64 0), i64 58, i64 1, %struct._IO_FILE* %54)
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %57 = tail call i64 @fwrite(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.79.280, i64 0, i64 0), i64 34, i64 1, %struct._IO_FILE* %56)
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %59 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %58)
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %61 = tail call i64 @fwrite(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.80.281, i64 0, i64 0), i64 43, i64 1, %struct._IO_FILE* %60)
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %63 = tail call i64 @fwrite(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.81.282, i64 0, i64 0), i64 47, i64 1, %struct._IO_FILE* %62)
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %65 = tail call i64 @fwrite(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.82.283, i64 0, i64 0), i64 43, i64 1, %struct._IO_FILE* %64)
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %67 = tail call i64 @fwrite(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.83.284, i64 0, i64 0), i64 45, i64 1, %struct._IO_FILE* %66)
  %68 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %69 = tail call i64 @fwrite(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.84.285, i64 0, i64 0), i64 43, i64 1, %struct._IO_FILE* %68)
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %71 = tail call i64 @fwrite(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.85.286, i64 0, i64 0), i64 31, i64 1, %struct._IO_FILE* %70)
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %73 = tail call i64 @fwrite(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.86.287, i64 0, i64 0), i64 31, i64 1, %struct._IO_FILE* %72)
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %75 = tail call i64 @fwrite(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.87.288, i64 0, i64 0), i64 34, i64 1, %struct._IO_FILE* %74)
  %76 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %77 = tail call i64 @fwrite(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.88.289, i64 0, i64 0), i64 58, i64 1, %struct._IO_FILE* %76)
  %78 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %79 = tail call i64 @fwrite(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.79.280, i64 0, i64 0), i64 34, i64 1, %struct._IO_FILE* %78)
  %80 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %81 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %80)
  %82 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %83 = tail call i64 @fwrite(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.89.290, i64 0, i64 0), i64 43, i64 1, %struct._IO_FILE* %82)
  %84 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %85 = tail call i64 @fwrite(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.76.277, i64 0, i64 0), i64 43, i64 1, %struct._IO_FILE* %84)
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %87 = tail call i64 @fwrite(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.90.291, i64 0, i64 0), i64 47, i64 1, %struct._IO_FILE* %86)
  %88 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %89 = tail call i64 @fwrite(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.91.292, i64 0, i64 0), i64 47, i64 1, %struct._IO_FILE* %88)
  %90 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %91 = tail call i64 @fwrite(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.85.286, i64 0, i64 0), i64 31, i64 1, %struct._IO_FILE* %90)
  %92 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %93 = tail call i64 @fwrite(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.92.293, i64 0, i64 0), i64 31, i64 1, %struct._IO_FILE* %92)
  %94 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %95 = tail call i64 @fwrite(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.87.288, i64 0, i64 0), i64 34, i64 1, %struct._IO_FILE* %94)
  %96 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %97 = tail call i64 @fwrite(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.88.289, i64 0, i64 0), i64 58, i64 1, %struct._IO_FILE* %96)
  %98 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %99 = tail call i64 @fwrite(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.79.280, i64 0, i64 0), i64 34, i64 1, %struct._IO_FILE* %98)
  %100 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %101 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %100)
  %102 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %103 = tail call i64 @fwrite(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.93.294, i64 0, i64 0), i64 43, i64 1, %struct._IO_FILE* %102)
  %104 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %105 = tail call i64 @fwrite(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.94.295, i64 0, i64 0), i64 43, i64 1, %struct._IO_FILE* %104)
  %106 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %107 = tail call i64 @fwrite(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.90.291, i64 0, i64 0), i64 47, i64 1, %struct._IO_FILE* %106)
  %108 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %109 = tail call i64 @fwrite(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.91.292, i64 0, i64 0), i64 47, i64 1, %struct._IO_FILE* %108)
  %110 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %111 = tail call i64 @fwrite(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.95.296, i64 0, i64 0), i64 27, i64 1, %struct._IO_FILE* %110)
  %112 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %113 = tail call i64 @fwrite(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.85.286, i64 0, i64 0), i64 31, i64 1, %struct._IO_FILE* %112)
  %114 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %115 = tail call i64 @fwrite(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.96.297, i64 0, i64 0), i64 31, i64 1, %struct._IO_FILE* %114)
  %116 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %117 = tail call i64 @fwrite(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.87.288, i64 0, i64 0), i64 34, i64 1, %struct._IO_FILE* %116)
  %118 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %119 = tail call i64 @fwrite(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.97.298, i64 0, i64 0), i64 58, i64 1, %struct._IO_FILE* %118)
  %120 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %121 = tail call i64 @fwrite(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.98.299, i64 0, i64 0), i64 34, i64 1, %struct._IO_FILE* %120)
  %122 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %123 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %122)
  %124 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %125 = tail call i64 @fwrite(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.99.300, i64 0, i64 0), i64 27, i64 1, %struct._IO_FILE* %124)
  %126 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %127 = tail call i64 @fwrite(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.95.296, i64 0, i64 0), i64 27, i64 1, %struct._IO_FILE* %126)
  %128 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %129 = tail call i64 @fwrite(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.100.301, i64 0, i64 0), i64 31, i64 1, %struct._IO_FILE* %128)
  %130 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %131 = tail call i64 @fwrite(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.101.302, i64 0, i64 0), i64 31, i64 1, %struct._IO_FILE* %130)
  %132 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %133 = tail call i64 @fwrite(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.102.303, i64 0, i64 0), i64 34, i64 1, %struct._IO_FILE* %132)
  %134 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %135 = tail call i64 @fwrite(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.103.304, i64 0, i64 0), i64 58, i64 1, %struct._IO_FILE* %134)
  %136 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %137 = tail call i64 @fwrite(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.104.305, i64 0, i64 0), i64 34, i64 1, %struct._IO_FILE* %136)
  %138 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %139 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %138)
  %140 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %141 = tail call i64 @fwrite(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.105.306, i64 0, i64 0), i64 27, i64 1, %struct._IO_FILE* %140)
  %142 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %143 = tail call i64 @fwrite(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.95.296, i64 0, i64 0), i64 27, i64 1, %struct._IO_FILE* %142)
  %144 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %145 = tail call i64 @fwrite(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.100.301, i64 0, i64 0), i64 31, i64 1, %struct._IO_FILE* %144)
  %146 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %147 = tail call i64 @fwrite(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.106.307, i64 0, i64 0), i64 31, i64 1, %struct._IO_FILE* %146)
  %148 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %149 = tail call i64 @fwrite(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.107.308, i64 0, i64 0), i64 34, i64 1, %struct._IO_FILE* %148)
  %150 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %151 = tail call i64 @fwrite(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.108.309, i64 0, i64 0), i64 58, i64 1, %struct._IO_FILE* %150)
  %152 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %153 = tail call i64 @fwrite(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.109.310, i64 0, i64 0), i64 34, i64 1, %struct._IO_FILE* %152)
  %154 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !tbaa !7
  %155 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %154)
  tail call void @exit(i32 0) #20
  unreachable
}

; Function Attrs: nounwind uwtable
define dso_local void @lame_parse_args(%struct.lame_global_flags* %0, i32 %1, i8** nocapture readonly %2) local_unnamed_addr #0 {
  %4 = alloca i8, align 1
  %5 = alloca i8*, align 8
  %6 = load i8*, i8** %2, align 8, !tbaa !7
  store i8 0, i8* getelementptr inbounds ([300 x i8], [300 x i8]* @inPath, i64 0, i64 0), align 16, !tbaa !26
  store i8 0, i8* getelementptr inbounds ([300 x i8], [300 x i8]* @outPath, i64 0, i64 0), align 16, !tbaa !26
  %7 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 31
  store i8* getelementptr inbounds ([300 x i8], [300 x i8]* @inPath, i64 0, i64 0), i8** %7, align 8, !tbaa !83
  %8 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 32
  store i8* getelementptr inbounds ([300 x i8], [300 x i8]* @outPath, i64 0, i64 0), i8** %8, align 8, !tbaa !183
  tail call void @id3_inittag(%struct.ID3TAGDATA* nonnull @id3tag) #21
  store i32 0, i32* getelementptr inbounds (%struct.ID3TAGDATA, %struct.ID3TAGDATA* @id3tag, i64 0, i32 0), align 4, !tbaa !184
  %9 = icmp sgt i32 %1, 1
  br i1 %9, label %10, label %444

10:                                               ; preds = %3
  %11 = bitcast i8** %5 to i8*
  %12 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 13
  %13 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 12
  %14 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 38
  %15 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 6
  %16 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 20
  %17 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 19
  %18 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 18
  %19 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 7
  %20 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 21
  %21 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 36
  %22 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 25
  %23 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 26
  %24 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 8
  %25 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 9
  %26 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 14
  %27 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 30
  %28 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 29
  %29 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 5
  %30 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 24
  %31 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 11
  %32 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 23
  %33 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 2
  %34 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 22
  %35 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 10
  %36 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 28
  %37 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 27
  %38 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 37
  %39 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 3
  %40 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 35
  %41 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 33
  %42 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 17
  %43 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 44
  %44 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 34
  %45 = bitcast i32* %34 to <4 x i32>*
  %46 = bitcast i32* %34 to <4 x i32>*
  %47 = bitcast i32* %34 to <4 x i32>*
  %48 = bitcast i32* %34 to <4 x i32>*
  %49 = bitcast i32* %34 to <4 x i32>*
  %50 = bitcast i32* %34 to <4 x i32>*
  %51 = bitcast i32* %34 to <4 x i32>*
  br label %52

52:                                               ; preds = %435, %10
  %53 = phi i32 [ 1, %10 ], [ %440, %435 ]
  %54 = phi i32 [ 0, %10 ], [ %439, %435 ]
  %55 = phi i32 [ 0, %10 ], [ %438, %435 ]
  %56 = phi i32 [ 0, %10 ], [ %437, %435 ]
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %4) #21
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #21
  %57 = sext i32 %53 to i64
  %58 = getelementptr inbounds i8*, i8** %2, i64 %57
  %59 = load i8*, i8** %58, align 8, !tbaa !7
  %60 = getelementptr inbounds i8, i8* %59, i64 1
  store i8* %60, i8** %5, align 8, !tbaa !7
  %61 = load i8, i8* %59, align 1, !tbaa !26
  %62 = icmp eq i8 %61, 45
  br i1 %62, label %63, label %421

63:                                               ; preds = %52
  %64 = add nsw i32 %56, 2
  %65 = icmp slt i32 %64, %1
  br i1 %65, label %66, label %70

66:                                               ; preds = %63
  %67 = sext i32 %64 to i64
  %68 = getelementptr inbounds i8*, i8** %2, i64 %67
  %69 = load i8*, i8** %68, align 8, !tbaa !7
  br label %70

70:                                               ; preds = %66, %63
  %71 = phi i8* [ %69, %66 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.110.313, i64 0, i64 0), %63 ]
  %72 = load i8, i8* %60, align 1, !tbaa !26
  %73 = icmp eq i8 %72, 0
  br i1 %73, label %74, label %85

74:                                               ; preds = %70
  %75 = load i8, i8* getelementptr inbounds ([300 x i8], [300 x i8]* @inPath, i64 0, i64 0), align 16, !tbaa !26
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %80, label %77

77:                                               ; preds = %74
  %78 = load i8, i8* getelementptr inbounds ([300 x i8], [300 x i8]* @outPath, i64 0, i64 0), align 16, !tbaa !26
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %80, label %83

80:                                               ; preds = %77, %74
  %81 = phi i8* [ getelementptr inbounds ([300 x i8], [300 x i8]* @inPath, i64 0, i64 0), %74 ], [ getelementptr inbounds ([300 x i8], [300 x i8]* @outPath, i64 0, i64 0), %77 ]
  %82 = tail call i8* @strncpy(i8* nonnull dereferenceable(1) %81, i8* nonnull dereferenceable(1) %59, i64 300) #21
  br label %83

83:                                               ; preds = %80, %77
  %84 = load i8, i8* %60, align 1, !tbaa !26
  br label %85

85:                                               ; preds = %83, %70
  %86 = phi i8 [ %84, %83 ], [ %72, %70 ]
  %87 = icmp eq i8 %86, 45
  %88 = getelementptr inbounds i8, i8* %59, i64 2
  store i8* %88, i8** %5, align 8, !tbaa !7
  br i1 %87, label %91, label %89

89:                                               ; preds = %85
  store i8 %86, i8* %4, align 1, !tbaa !26
  %90 = icmp eq i8 %86, 0
  br i1 %90, label %435, label %316

91:                                               ; preds = %85
  %92 = tail call i32 @strcmp(i8* nonnull %88, i8* nonnull dereferenceable(9) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.111.314, i64 0, i64 0)) #23
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %105

94:                                               ; preds = %91
  %95 = tail call double @strtod(i8* nocapture nonnull %71, i8** null) #21
  %96 = fptrunc double %95 to float
  %97 = fpext float %96 to double
  %98 = fmul double %97, 1.000000e+03
  %99 = fadd double %98, 5.000000e-01
  %100 = fptosi double %99 to i32
  store i32 %100, i32* %39, align 8, !tbaa !156
  %101 = fcmp olt float %96, 1.000000e+00
  br i1 %101, label %102, label %313

102:                                              ; preds = %94
  %103 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %104 = tail call i64 @fwrite(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.112.315, i64 0, i64 0), i64 42, i64 1, %struct._IO_FILE* %103) #19
  tail call void @exit(i32 1) #20
  unreachable

105:                                              ; preds = %91
  %106 = tail call i32 @strcmp(i8* nonnull %88, i8* nonnull dereferenceable(9) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.113.316, i64 0, i64 0)) #23
  %107 = icmp eq i32 %106, 0
  br i1 %107, label %108, label %109

108:                                              ; preds = %105
  store i32 3, i32* %28, align 8, !tbaa !88
  br label %313

109:                                              ; preds = %105
  %110 = tail call i32 @strcmp(i8* nonnull %88, i8* nonnull dereferenceable(6) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.114.317, i64 0, i64 0)) #23
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %113

112:                                              ; preds = %109
  store i32 12000, i32* %22, align 8, !tbaa !164
  store i32 160, i32* %30, align 4, !tbaa !176
  store i32 1, i32* %38, align 8, !tbaa !235
  br label %313

113:                                              ; preds = %109
  %114 = tail call i32 @strcmp(i8* nonnull %88, i8* nonnull dereferenceable(8) getelementptr inbounds ([8 x i8], [8 x i8]* @.str.115.318, i64 0, i64 0)) #23
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %117

116:                                              ; preds = %113
  store i32 1, i32* %38, align 8, !tbaa !235
  br label %313

117:                                              ; preds = %113
  %118 = tail call i32 @strcmp(i8* nonnull %88, i8* nonnull dereferenceable(6) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.116.319, i64 0, i64 0)) #23
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %121

120:                                              ; preds = %117
  store i32 1, i32* %44, align 4, !tbaa !233
  br label %313

121:                                              ; preds = %117
  %122 = tail call i32 @strcmp(i8* nonnull %88, i8* nonnull dereferenceable(6) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.117.320, i64 0, i64 0)) #23
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %124, label %125

124:                                              ; preds = %121
  store i32 1, i32* %42, align 8, !tbaa !189
  store i32 0, i32* %43, align 4, !tbaa !119
  br label %313

125:                                              ; preds = %121
  %126 = tail call i32 @strcmp(i8* nonnull %88, i8* nonnull dereferenceable(8) getelementptr inbounds ([8 x i8], [8 x i8]* @.str.118.321, i64 0, i64 0)) #23
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %128, label %129

128:                                              ; preds = %125
  store i32 1, i32* %41, align 8, !tbaa !232
  br label %313

129:                                              ; preds = %125
  %130 = tail call i32 @strcmp(i8* nonnull %88, i8* nonnull dereferenceable(7) getelementptr inbounds ([7 x i8], [7 x i8]* @.str.119.322, i64 0, i64 0)) #23
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %313, label %132

132:                                              ; preds = %129
  %133 = tail call i32 @strcmp(i8* nonnull %88, i8* nonnull dereferenceable(3) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.120.323, i64 0, i64 0)) #23
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %135, label %137

135:                                              ; preds = %132
  store i32 1, i32* getelementptr inbounds (%struct.ID3TAGDATA, %struct.ID3TAGDATA* @id3tag, i64 0, i32 0), align 4, !tbaa !184
  %136 = tail call i8* @strncpy(i8* nonnull dereferenceable(1) getelementptr inbounds (%struct.ID3TAGDATA, %struct.ID3TAGDATA* @id3tag, i64 0, i32 2, i64 0), i8* nonnull dereferenceable(1) %71, i64 30) #21
  br label %313

137:                                              ; preds = %132
  %138 = tail call i32 @strcmp(i8* nonnull %88, i8* nonnull dereferenceable(3) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.121.324, i64 0, i64 0)) #23
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %142

140:                                              ; preds = %137
  store i32 1, i32* getelementptr inbounds (%struct.ID3TAGDATA, %struct.ID3TAGDATA* @id3tag, i64 0, i32 0), align 4, !tbaa !184
  %141 = tail call i8* @strncpy(i8* nonnull dereferenceable(1) getelementptr inbounds (%struct.ID3TAGDATA, %struct.ID3TAGDATA* @id3tag, i64 0, i32 3, i64 0), i8* nonnull dereferenceable(1) %71, i64 30) #21
  br label %313

142:                                              ; preds = %137
  %143 = tail call i32 @strcmp(i8* nonnull %88, i8* nonnull dereferenceable(3) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.122.325, i64 0, i64 0)) #23
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %145, label %147

145:                                              ; preds = %142
  store i32 1, i32* getelementptr inbounds (%struct.ID3TAGDATA, %struct.ID3TAGDATA* @id3tag, i64 0, i32 0), align 4, !tbaa !184
  %146 = tail call i8* @strncpy(i8* nonnull dereferenceable(1) getelementptr inbounds (%struct.ID3TAGDATA, %struct.ID3TAGDATA* @id3tag, i64 0, i32 4, i64 0), i8* nonnull dereferenceable(1) %71, i64 30) #21
  br label %313

147:                                              ; preds = %142
  %148 = tail call i32 @strcmp(i8* nonnull %88, i8* nonnull dereferenceable(3) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.123.326, i64 0, i64 0)) #23
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %150, label %152

150:                                              ; preds = %147
  store i32 1, i32* getelementptr inbounds (%struct.ID3TAGDATA, %struct.ID3TAGDATA* @id3tag, i64 0, i32 0), align 4, !tbaa !184
  %151 = tail call i8* @strncpy(i8* nonnull dereferenceable(1) getelementptr inbounds (%struct.ID3TAGDATA, %struct.ID3TAGDATA* @id3tag, i64 0, i32 5, i64 0), i8* nonnull dereferenceable(1) %71, i64 4) #21
  br label %313

152:                                              ; preds = %147
  %153 = tail call i32 @strcmp(i8* nonnull %88, i8* nonnull dereferenceable(3) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.124.327, i64 0, i64 0)) #23
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %155, label %157

155:                                              ; preds = %152
  store i32 1, i32* getelementptr inbounds (%struct.ID3TAGDATA, %struct.ID3TAGDATA* @id3tag, i64 0, i32 0), align 4, !tbaa !184
  %156 = tail call i8* @strncpy(i8* nonnull dereferenceable(1) getelementptr inbounds (%struct.ID3TAGDATA, %struct.ID3TAGDATA* @id3tag, i64 0, i32 6, i64 0), i8* nonnull dereferenceable(1) %71, i64 30) #21
  br label %313

157:                                              ; preds = %152
  %158 = tail call i32 @strcmp(i8* nonnull %88, i8* nonnull dereferenceable(3) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.125.328, i64 0, i64 0)) #23
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %160, label %168

160:                                              ; preds = %157
  store i32 1, i32* getelementptr inbounds (%struct.ID3TAGDATA, %struct.ID3TAGDATA* @id3tag, i64 0, i32 0), align 4, !tbaa !184
  %161 = tail call i64 @strtol(i8* nocapture nonnull %71, i8** null, i32 10) #21
  %162 = trunc i64 %161 to i32
  %163 = icmp sgt i32 %162, 1
  %164 = select i1 %163, i32 %162, i32 1
  %165 = icmp slt i32 %164, 99
  %166 = select i1 %165, i32 %164, i32 99
  %167 = trunc i32 %166 to i8
  store i8 %167, i8* getelementptr inbounds (%struct.ID3TAGDATA, %struct.ID3TAGDATA* @id3tag, i64 0, i32 9), align 2, !tbaa !96
  br label %313

168:                                              ; preds = %157
  %169 = tail call i32 @strcmp(i8* nonnull %88, i8* nonnull dereferenceable(3) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.126.329, i64 0, i64 0)) #23
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %171, label %207

171:                                              ; preds = %168
  %172 = call i64 @strtol(i8* %71, i8** nonnull %5, i32 10) #21
  %173 = load i8*, i8** %5, align 8, !tbaa !7
  %174 = icmp eq i8* %71, %173
  br i1 %174, label %178, label %175

175:                                              ; preds = %171
  %176 = trunc i64 %172 to i32
  %177 = load i32, i32* @genre_last, align 4, !tbaa !18
  br label %196

178:                                              ; preds = %171
  %179 = load i32, i32* @genre_last, align 4, !tbaa !18
  %180 = icmp slt i32 %179, 0
  br i1 %180, label %196, label %181

181:                                              ; preds = %178
  %182 = zext i32 %179 to i64
  br label %183

183:                                              ; preds = %190, %181
  %184 = phi i64 [ %191, %190 ], [ 0, %181 ]
  %185 = phi i32 [ %192, %190 ], [ 0, %181 ]
  %186 = getelementptr inbounds [0 x i8*], [0 x i8*]* bitcast ([148 x i8*]* @genre_list to [0 x i8*]*), i64 0, i64 %184
  %187 = load i8*, i8** %186, align 8, !tbaa !7
  %188 = tail call i32 @strcmp(i8* nonnull dereferenceable(1) %187, i8* nonnull dereferenceable(1) %71) #23
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %194, label %190

190:                                              ; preds = %183
  %191 = add nuw nsw i64 %184, 1
  %192 = add nuw nsw i32 %185, 1
  %193 = icmp ult i64 %184, %182
  br i1 %193, label %183, label %196

194:                                              ; preds = %183
  %195 = trunc i64 %184 to i32
  br label %196

196:                                              ; preds = %194, %190, %178, %175
  %197 = phi i32 [ %177, %175 ], [ %179, %178 ], [ %179, %194 ], [ %179, %190 ]
  %198 = phi i32 [ %176, %175 ], [ 0, %178 ], [ %195, %194 ], [ %192, %190 ]
  %199 = icmp sgt i32 %198, %197
  br i1 %199, label %200, label %203

200:                                              ; preds = %196
  %201 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %202 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %201, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.127.330, i64 0, i64 0), i8* %71) #19
  br label %203

203:                                              ; preds = %200, %196
  %204 = phi i32 [ 255, %200 ], [ %198, %196 ]
  %205 = trunc i32 %204 to i8
  store i8 %205, i8* %4, align 1, !tbaa !26
  store i32 1, i32* getelementptr inbounds (%struct.ID3TAGDATA, %struct.ID3TAGDATA* @id3tag, i64 0, i32 0), align 4, !tbaa !184
  %206 = call i8* @strncpy(i8* nonnull dereferenceable(1) getelementptr inbounds (%struct.ID3TAGDATA, %struct.ID3TAGDATA* @id3tag, i64 0, i32 8, i64 0), i8* nonnull %4, i64 1) #21
  br label %313

207:                                              ; preds = %168
  %208 = tail call i32 @strcmp(i8* nonnull %88, i8* nonnull dereferenceable(8) getelementptr inbounds ([8 x i8], [8 x i8]* @.str.128.331, i64 0, i64 0)) #23
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %210, label %219

210:                                              ; preds = %207
  %211 = tail call double @strtod(i8* nocapture nonnull %71, i8** null) #21
  %212 = fmul double %211, 1.000000e+03
  %213 = fadd double %212, 5.000000e-01
  %214 = fptosi double %213 to i32
  store i32 %214, i32* %22, align 8, !tbaa !164
  %215 = icmp slt i32 %214, 1
  br i1 %215, label %216, label %313

216:                                              ; preds = %210
  %217 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %218 = tail call i64 @fwrite(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.129.332, i64 0, i64 0), i64 60, i64 1, %struct._IO_FILE* %217) #19
  tail call void @exit(i32 1) #20
  unreachable

219:                                              ; preds = %207
  %220 = tail call i32 @strcmp(i8* nonnull %88, i8* nonnull dereferenceable(14) getelementptr inbounds ([14 x i8], [14 x i8]* @.str.130.333, i64 0, i64 0)) #23
  %221 = icmp eq i32 %220, 0
  br i1 %221, label %222, label %231

222:                                              ; preds = %219
  %223 = tail call double @strtod(i8* nocapture nonnull %71, i8** null) #21
  %224 = fmul double %223, 1.000000e+03
  %225 = fadd double %224, 5.000000e-01
  %226 = fptosi double %225 to i32
  store i32 %226, i32* %37, align 8, !tbaa !171
  %227 = icmp slt i32 %226, 0
  br i1 %227, label %228, label %313

228:                                              ; preds = %222
  %229 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %230 = tail call i64 @fwrite(i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.131.334, i64 0, i64 0), i64 68, i64 1, %struct._IO_FILE* %229) #19
  tail call void @exit(i32 1) #20
  unreachable

231:                                              ; preds = %219
  %232 = tail call i32 @strcmp(i8* nonnull %88, i8* nonnull dereferenceable(9) getelementptr inbounds ([9 x i8], [9 x i8]* @.str.132.335, i64 0, i64 0)) #23
  %233 = icmp eq i32 %232, 0
  br i1 %233, label %234, label %243

234:                                              ; preds = %231
  %235 = tail call double @strtod(i8* nocapture nonnull %71, i8** null) #21
  %236 = fmul double %235, 1.000000e+03
  %237 = fadd double %236, 5.000000e-01
  %238 = fptosi double %237 to i32
  store i32 %238, i32* %23, align 4, !tbaa !167
  %239 = icmp slt i32 %238, 1
  br i1 %239, label %240, label %313

240:                                              ; preds = %234
  %241 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %242 = tail call i64 @fwrite(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.133.336, i64 0, i64 0), i64 62, i64 1, %struct._IO_FILE* %241) #19
  tail call void @exit(i32 1) #20
  unreachable

243:                                              ; preds = %231
  %244 = tail call i32 @strcmp(i8* nonnull %88, i8* nonnull dereferenceable(15) getelementptr inbounds ([15 x i8], [15 x i8]* @.str.134.337, i64 0, i64 0)) #23
  %245 = icmp eq i32 %244, 0
  br i1 %245, label %246, label %255

246:                                              ; preds = %243
  %247 = tail call double @strtod(i8* nocapture nonnull %71, i8** null) #21
  %248 = fmul double %247, 1.000000e+03
  %249 = fadd double %248, 5.000000e-01
  %250 = fptosi double %249 to i32
  store i32 %250, i32* %36, align 4, !tbaa !169
  %251 = icmp slt i32 %250, 0
  br i1 %251, label %252, label %313

252:                                              ; preds = %246
  %253 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %254 = tail call i64 @fwrite(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.135.338, i64 0, i64 0), i64 70, i64 1, %struct._IO_FILE* %253) #19
  tail call void @exit(i32 1) #20
  unreachable

255:                                              ; preds = %243
  %256 = tail call i32 @strcmp(i8* nonnull %88, i8* nonnull dereferenceable(8) getelementptr inbounds ([8 x i8], [8 x i8]* @.str.136.339, i64 0, i64 0)) #23
  %257 = icmp eq i32 %256, 0
  br i1 %257, label %258, label %265

258:                                              ; preds = %255
  %259 = tail call double @strtod(i8* nocapture nonnull %71, i8** null) #21
  %260 = fptrunc double %259 to float
  store float %260, float* %40, align 8, !tbaa !234
  %261 = fcmp ugt float %260, 0.000000e+00
  br i1 %261, label %313, label %262

262:                                              ; preds = %258
  %263 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %264 = tail call i64 @fwrite(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.137.340, i64 0, i64 0), i64 28, i64 1, %struct._IO_FILE* %263) #19
  tail call void @exit(i32 1) #20
  unreachable

265:                                              ; preds = %255
  %266 = tail call i32 @strcmp(i8* nonnull %88, i8* nonnull dereferenceable(5) getelementptr inbounds ([5 x i8], [5 x i8]* @.str.138.341, i64 0, i64 0)) #23
  %267 = icmp eq i32 %266, 0
  br i1 %267, label %271, label %268

268:                                              ; preds = %265
  %269 = tail call i32 @strcmp(i8* nonnull %88, i8* nonnull dereferenceable(6) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.139.342, i64 0, i64 0)) #23
  %270 = icmp eq i32 %269, 0
  br i1 %270, label %271, label %272

271:                                              ; preds = %268, %265
  tail call void @lame_help(%struct.lame_global_flags* %0, i8* %6)
  unreachable

272:                                              ; preds = %268
  %273 = tail call i32 @strcmp(i8* nonnull %88, i8* nonnull dereferenceable(7) getelementptr inbounds ([7 x i8], [7 x i8]* @.str.140.343, i64 0, i64 0)) #23
  %274 = icmp eq i32 %273, 0
  br i1 %274, label %275, label %310

275:                                              ; preds = %272
  %276 = tail call i32 @strcmp(i8* nonnull dereferenceable(1) %71, i8* nonnull dereferenceable(6) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.141.344, i64 0, i64 0)) #23
  %277 = icmp eq i32 %276, 0
  br i1 %277, label %278, label %279

278:                                              ; preds = %275
  store i32 16, i32* %31, align 8, !tbaa !157
  store i32 260, i32* %23, align 4, !tbaa !167
  store i32 40, i32* %36, align 4, !tbaa !169
  store i32 300, i32* %37, align 8, !tbaa !171
  store <4 x i32> <i32 5, i32 8, i32 56, i32 3700>, <4 x i32>* %51, align 4, !tbaa !18
  store i32 1, i32* %38, align 8, !tbaa !235
  store i32 16000, i32* %39, align 8, !tbaa !156
  store i32 3, i32* %24, align 4, !tbaa !121
  store i32 1, i32* %25, align 8, !tbaa !163
  store i32 5, i32* %15, align 4, !tbaa !180
  br label %313

279:                                              ; preds = %275
  %280 = tail call i32 @strcmp(i8* nonnull dereferenceable(1) %71, i8* nonnull dereferenceable(6) getelementptr inbounds ([6 x i8], [6 x i8]* @.str.114.317, i64 0, i64 0)) #23
  %281 = icmp eq i32 %280, 0
  br i1 %281, label %282, label %283

282:                                              ; preds = %279
  store i32 56, i32* %31, align 8, !tbaa !157
  store i32 100, i32* %23, align 4, !tbaa !167
  store i32 20, i32* %36, align 4, !tbaa !169
  store i32 2000, i32* %37, align 8, !tbaa !171
  store <4 x i32> <i32 4, i32 8, i32 96, i32 11000>, <4 x i32>* %50, align 4, !tbaa !18
  store i32 1, i32* %38, align 8, !tbaa !235
  store i32 3, i32* %24, align 4, !tbaa !121
  store i32 1, i32* %25, align 8, !tbaa !163
  store i32 24000, i32* %39, align 8, !tbaa !156
  store i32 5, i32* %15, align 4, !tbaa !180
  br label %313

283:                                              ; preds = %279
  %284 = tail call i32 @strcmp(i8* nonnull dereferenceable(1) %71, i8* nonnull dereferenceable(3) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.142.345, i64 0, i64 0)) #23
  %285 = icmp eq i32 %284, 0
  br i1 %285, label %286, label %287

286:                                              ; preds = %283
  store i32 96, i32* %31, align 8, !tbaa !157
  store i32 30, i32* %23, align 4, !tbaa !167
  store i32 0, i32* %36, align 4, !tbaa !169
  store i32 0, i32* %37, align 8, !tbaa !171
  store <4 x i32> <i32 4, i32 32, i32 192, i32 15000>, <4 x i32>* %49, align 4, !tbaa !18
  store i32 1, i32* %24, align 4, !tbaa !121
  store i32 1, i32* %25, align 8, !tbaa !163
  store i32 5, i32* %15, align 4, !tbaa !180
  br label %313

287:                                              ; preds = %283
  %288 = tail call i32 @strcmp(i8* nonnull dereferenceable(1) %71, i8* nonnull dereferenceable(5) getelementptr inbounds ([5 x i8], [5 x i8]* @.str.143.346, i64 0, i64 0)) #23
  %289 = icmp eq i32 %288, 0
  br i1 %289, label %290, label %291

290:                                              ; preds = %287
  store i32 128, i32* %31, align 8, !tbaa !157
  store i32 15, i32* %23, align 4, !tbaa !167
  store i32 15, i32* %36, align 4, !tbaa !169
  store i32 2000, i32* %37, align 8, !tbaa !171
  store <4 x i32> <i32 4, i32 32, i32 192, i32 17000>, <4 x i32>* %48, align 4, !tbaa !18
  store i32 1, i32* %24, align 4, !tbaa !121
  store i32 1, i32* %25, align 8, !tbaa !163
  store i32 5, i32* %15, align 4, !tbaa !180
  br label %313

291:                                              ; preds = %287
  %292 = tail call i32 @strcmp(i8* nonnull dereferenceable(1) %71, i8* nonnull dereferenceable(5) getelementptr inbounds ([5 x i8], [5 x i8]* @.str.144.347, i64 0, i64 0)) #23
  %293 = icmp eq i32 %292, 0
  br i1 %293, label %294, label %295

294:                                              ; preds = %291
  store i32 160, i32* %31, align 8, !tbaa !157
  store i32 15, i32* %23, align 4, !tbaa !167
  store i32 15, i32* %36, align 4, !tbaa !169
  store i32 3000, i32* %37, align 8, !tbaa !171
  store <4 x i32> <i32 3, i32 32, i32 224, i32 20000>, <4 x i32>* %47, align 4, !tbaa !18
  store i32 1, i32* %24, align 4, !tbaa !121
  store i32 1, i32* %25, align 8, !tbaa !163
  store i32 2, i32* %15, align 4, !tbaa !180
  br label %313

295:                                              ; preds = %291
  %296 = tail call i32 @strcmp(i8* nonnull dereferenceable(1) %71, i8* nonnull dereferenceable(3) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.145.348, i64 0, i64 0)) #23
  %297 = icmp eq i32 %296, 0
  br i1 %297, label %298, label %299

298:                                              ; preds = %295
  store i32 192, i32* %31, align 8, !tbaa !157
  store i32 -1, i32* %23, align 4, !tbaa !167
  store <4 x i32> <i32 2, i32 80, i32 256, i32 -1>, <4 x i32>* %46, align 4, !tbaa !18
  store i32 0, i32* %24, align 4, !tbaa !121
  store i32 1, i32* %25, align 8, !tbaa !163
  store i32 2, i32* %15, align 4, !tbaa !180
  br label %313

299:                                              ; preds = %295
  %300 = tail call i32 @strcmp(i8* nonnull dereferenceable(1) %71, i8* nonnull dereferenceable(7) getelementptr inbounds ([7 x i8], [7 x i8]* @.str.146.349, i64 0, i64 0)) #23
  %301 = icmp eq i32 %300, 0
  br i1 %301, label %302, label %303

302:                                              ; preds = %299
  store i32 256, i32* %31, align 8, !tbaa !157
  store i32 -1, i32* %23, align 4, !tbaa !167
  store <4 x i32> <i32 0, i32 112, i32 320, i32 -1>, <4 x i32>* %45, align 4, !tbaa !18
  store i32 0, i32* %24, align 4, !tbaa !121
  store i32 1, i32* %25, align 8, !tbaa !163
  store i32 2, i32* %15, align 4, !tbaa !180
  br label %313

303:                                              ; preds = %299
  %304 = tail call i32 @strcmp(i8* nonnull dereferenceable(1) %71, i8* nonnull dereferenceable(5) getelementptr inbounds ([5 x i8], [5 x i8]* @.str.138.341, i64 0, i64 0)) #23
  %305 = icmp eq i32 %304, 0
  br i1 %305, label %306, label %307

306:                                              ; preds = %303
  tail call void @lame_presets_info(%struct.lame_global_flags* undef, i8* undef)
  unreachable

307:                                              ; preds = %303
  %308 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %309 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %308, i8* getelementptr inbounds ([84 x i8], [84 x i8]* @.str.147.350, i64 0, i64 0), i8* %6, i8* %71) #19
  tail call void @exit(i32 1) #20
  unreachable

310:                                              ; preds = %272
  %311 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %312 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %311, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.148.351, i64 0, i64 0), i8* %6, i8* nonnull %88) #19
  br label %313

313:                                              ; preds = %310, %302, %298, %294, %290, %286, %282, %278, %258, %246, %234, %222, %210, %203, %160, %155, %150, %145, %140, %135, %129, %128, %124, %120, %116, %112, %108, %94
  %314 = phi i32 [ 1, %94 ], [ 0, %108 ], [ 0, %112 ], [ 0, %116 ], [ 0, %120 ], [ 0, %124 ], [ 0, %128 ], [ 0, %129 ], [ 1, %135 ], [ 1, %140 ], [ 1, %145 ], [ 1, %150 ], [ 1, %155 ], [ 1, %160 ], [ 1, %203 ], [ 1, %210 ], [ 1, %222 ], [ 1, %234 ], [ 1, %246 ], [ 1, %258 ], [ 1, %278 ], [ 1, %282 ], [ 1, %286 ], [ 1, %290 ], [ 1, %294 ], [ 1, %298 ], [ 1, %302 ], [ 0, %310 ]
  %315 = add nsw i32 %314, %53
  br label %435

316:                                              ; preds = %412, %89
  %317 = phi i8* [ %418, %412 ], [ %88, %89 ]
  %318 = phi i8 [ %419, %412 ], [ %86, %89 ]
  %319 = phi i32 [ %414, %412 ], [ %54, %89 ]
  %320 = phi i32 [ %415, %412 ], [ %55, %89 ]
  %321 = phi i32 [ %417, %412 ], [ %53, %89 ]
  %322 = phi i32 [ %416, %412 ], [ 0, %89 ]
  %323 = load i8, i8* %317, align 1, !tbaa !26
  %324 = icmp eq i8 %323, 0
  %325 = select i1 %324, i8* %71, i8* %317
  %326 = sext i8 %318 to i32
  switch i32 %326, label %403 [
    i32 109, label %327
    i32 86, label %337
    i32 113, label %344
    i32 115, label %351
    i32 98, label %358
    i32 66, label %361
    i32 116, label %364
    i32 114, label %365
    i32 120, label %366
    i32 112, label %367
    i32 97, label %368
    i32 104, label %369
    i32 107, label %370
    i32 100, label %371
    i32 118, label %372
    i32 83, label %373
    i32 88, label %374
    i32 89, label %386
    i32 90, label %387
    i32 102, label %388
    i32 103, label %389
    i32 101, label %392
    i32 99, label %400
    i32 111, label %401
    i32 63, label %402
  ]

327:                                              ; preds = %316
  store i32 1, i32* %25, align 8, !tbaa !163
  %328 = load i8, i8* %325, align 1, !tbaa !26
  switch i8 %328, label %334 [
    i8 115, label %329
    i8 100, label %330
    i8 106, label %331
    i8 102, label %332
    i8 109, label %333
  ]

329:                                              ; preds = %327
  store i32 0, i32* %24, align 4, !tbaa !121
  br label %406

330:                                              ; preds = %327
  store i32 2, i32* %24, align 4, !tbaa !121
  br label %406

331:                                              ; preds = %327
  store i32 1, i32* %24, align 4, !tbaa !121
  br label %406

332:                                              ; preds = %327
  store i32 1, i32* %24, align 4, !tbaa !121
  store i32 1, i32* %35, align 4, !tbaa !181
  br label %406

333:                                              ; preds = %327
  store i32 3, i32* %24, align 4, !tbaa !121
  br label %406

334:                                              ; preds = %327
  %335 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %336 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %335, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.149.352, i64 0, i64 0), i8* %6, i8* nonnull %325) #19
  br label %406

337:                                              ; preds = %316
  store i32 1, i32* %20, align 8, !tbaa !158
  %338 = tail call i64 @strtol(i8* nocapture nonnull %325, i8** null, i32 10) #21
  %339 = trunc i64 %338 to i32
  %340 = icmp sgt i32 %339, 0
  %341 = select i1 %340, i32 %339, i32 0
  %342 = icmp slt i32 %341, 9
  %343 = select i1 %342, i32 %341, i32 9
  store i32 %343, i32* %34, align 4
  br label %406

344:                                              ; preds = %316
  %345 = tail call i64 @strtol(i8* nocapture nonnull %325, i8** null, i32 10) #21
  %346 = trunc i64 %345 to i32
  %347 = icmp sgt i32 %346, 0
  %348 = select i1 %347, i32 %346, i32 0
  %349 = icmp slt i32 %348, 9
  %350 = select i1 %349, i32 %348, i32 9
  br label %406

351:                                              ; preds = %316
  %352 = tail call double @strtod(i8* nocapture nonnull %325, i8** null) #21
  %353 = fptrunc double %352 to float
  %354 = fpext float %353 to double
  %355 = fmul double %354, 1.000000e+03
  %356 = fadd double %355, 5.000000e-01
  %357 = fptosi double %356 to i32
  store i32 %357, i32* %33, align 4, !tbaa !85
  br label %406

358:                                              ; preds = %316
  %359 = tail call i64 @strtol(i8* nocapture nonnull %325, i8** null, i32 10) #21
  %360 = trunc i64 %359 to i32
  store i32 %360, i32* %31, align 8, !tbaa !157
  store i32 %360, i32* %32, align 8, !tbaa !177
  br label %406

361:                                              ; preds = %316
  %362 = tail call i64 @strtol(i8* nocapture nonnull %325, i8** null, i32 10) #21
  %363 = trunc i64 %362 to i32
  store i32 %363, i32* %30, align 4, !tbaa !176
  br label %406

364:                                              ; preds = %316
  store i32 0, i32* %29, align 8, !tbaa !182
  br label %412

365:                                              ; preds = %316
  store i32 4, i32* %28, align 8, !tbaa !88
  br label %412

366:                                              ; preds = %316
  store i32 1, i32* %27, align 4, !tbaa !89
  br label %412

367:                                              ; preds = %316
  store i32 1, i32* %26, align 4, !tbaa !116
  br label %412

368:                                              ; preds = %316
  store i32 3, i32* %24, align 4, !tbaa !121
  store i32 1, i32* %25, align 8, !tbaa !163
  br label %412

369:                                              ; preds = %316
  store i32 2, i32* %15, align 4, !tbaa !180
  br label %412

370:                                              ; preds = %316
  store i32 -1, i32* %22, align 8, !tbaa !164
  store i32 -1, i32* %23, align 4, !tbaa !167
  br label %412

371:                                              ; preds = %316
  store i32 1, i32* %21, align 4, !tbaa !231
  br label %412

372:                                              ; preds = %316
  store i32 1, i32* %20, align 8, !tbaa !158
  br label %412

373:                                              ; preds = %316
  store i32 1, i32* %19, align 8, !tbaa !190
  br label %412

374:                                              ; preds = %316
  store i32 0, i32* %18, align 4, !tbaa !281
  %375 = load i8, i8* %325, align 1, !tbaa !26
  switch i8 %375, label %383 [
    i8 48, label %376
    i8 49, label %377
    i8 50, label %378
    i8 51, label %379
    i8 52, label %380
    i8 53, label %381
    i8 54, label %382
  ]

376:                                              ; preds = %374
  store i32 0, i32* %18, align 4, !tbaa !281
  br label %406

377:                                              ; preds = %374
  store i32 1, i32* %18, align 4, !tbaa !281
  br label %406

378:                                              ; preds = %374
  store i32 2, i32* %18, align 4, !tbaa !281
  br label %406

379:                                              ; preds = %374
  store i32 3, i32* %18, align 4, !tbaa !281
  br label %406

380:                                              ; preds = %374
  store i32 4, i32* %18, align 4, !tbaa !281
  br label %406

381:                                              ; preds = %374
  store i32 5, i32* %18, align 4, !tbaa !281
  br label %406

382:                                              ; preds = %374
  store i32 6, i32* %18, align 4, !tbaa !281
  br label %406

383:                                              ; preds = %374
  %384 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %385 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %384, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.150.353, i64 0, i64 0), i8* %6, i8* nonnull %325) #19
  br label %406

386:                                              ; preds = %316
  store i32 1, i32* %17, align 8, !tbaa !282
  br label %412

387:                                              ; preds = %316
  store i32 1, i32* %16, align 4, !tbaa !283
  br label %412

388:                                              ; preds = %316
  store i32 9, i32* %15, align 4, !tbaa !180
  br label %412

389:                                              ; preds = %316
  %390 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %391 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %390, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.151.354, i64 0, i64 0), i8* %6, i8* %325) #19
  br label %412

392:                                              ; preds = %316
  %393 = load i8, i8* %325, align 1, !tbaa !26
  switch i8 %393, label %397 [
    i8 110, label %394
    i8 53, label %395
    i8 99, label %396
  ]

394:                                              ; preds = %392
  store i32 0, i32* %14, align 4, !tbaa !125
  br label %406

395:                                              ; preds = %392
  store i32 1, i32* %14, align 4, !tbaa !125
  br label %406

396:                                              ; preds = %392
  store i32 3, i32* %14, align 4, !tbaa !125
  br label %406

397:                                              ; preds = %392
  %398 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %399 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %398, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.152, i64 0, i64 0), i8* %6, i8* nonnull %325) #19
  br label %406

400:                                              ; preds = %316
  store i32 1, i32* %13, align 4, !tbaa !123
  br label %412

401:                                              ; preds = %316
  store i32 0, i32* %12, align 8, !tbaa !124
  br label %412

402:                                              ; preds = %316
  tail call void @lame_help(%struct.lame_global_flags* %0, i8* %6)
  unreachable

403:                                              ; preds = %316
  %404 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %405 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %404, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.153, i64 0, i64 0), i8* %6, i32 %326) #19
  br label %412

406:                                              ; preds = %397, %396, %395, %394, %383, %382, %381, %380, %379, %378, %377, %376, %361, %358, %351, %344, %337, %334, %333, %332, %331, %330, %329
  %407 = phi i32 [ %322, %337 ], [ 1, %334 ], [ %322, %333 ], [ %322, %332 ], [ %322, %331 ], [ %322, %330 ], [ %322, %329 ], [ %322, %344 ], [ %322, %351 ], [ %322, %358 ], [ %322, %361 ], [ 1, %383 ], [ %322, %382 ], [ %322, %381 ], [ %322, %380 ], [ %322, %379 ], [ %322, %378 ], [ %322, %377 ], [ %322, %376 ], [ 1, %397 ], [ %322, %396 ], [ %322, %395 ], [ %322, %394 ]
  %408 = phi i32 [ %319, %337 ], [ %319, %334 ], [ %319, %333 ], [ %319, %332 ], [ %319, %331 ], [ %319, %330 ], [ %319, %329 ], [ %350, %344 ], [ %319, %351 ], [ %319, %358 ], [ %319, %361 ], [ %319, %383 ], [ %319, %382 ], [ %319, %381 ], [ %319, %380 ], [ %319, %379 ], [ %319, %378 ], [ %319, %377 ], [ %319, %376 ], [ %319, %397 ], [ %319, %396 ], [ %319, %395 ], [ %319, %394 ]
  %409 = icmp eq i8* %325, %317
  br i1 %409, label %412, label %410

410:                                              ; preds = %406
  %411 = add nsw i32 %321, 1
  br label %412

412:                                              ; preds = %410, %406, %403, %401, %400, %389, %388, %387, %386, %373, %372, %371, %370, %369, %368, %367, %366, %365, %364
  %413 = phi i8* [ %317, %410 ], [ %317, %403 ], [ %317, %401 ], [ %317, %400 ], [ %317, %389 ], [ %317, %388 ], [ %317, %387 ], [ %317, %386 ], [ %317, %373 ], [ %317, %372 ], [ %317, %371 ], [ %317, %370 ], [ %317, %369 ], [ %317, %368 ], [ %317, %367 ], [ %317, %366 ], [ %317, %365 ], [ %317, %364 ], [ getelementptr inbounds ([1 x i8], [1 x i8]* @.str.110.313, i64 0, i64 0), %406 ]
  %414 = phi i32 [ %408, %410 ], [ %319, %403 ], [ %319, %401 ], [ %319, %400 ], [ %319, %389 ], [ %319, %388 ], [ %319, %387 ], [ %319, %386 ], [ %319, %373 ], [ %319, %372 ], [ %319, %371 ], [ %319, %370 ], [ %319, %369 ], [ %319, %368 ], [ %319, %367 ], [ %319, %366 ], [ %319, %365 ], [ %319, %364 ], [ %408, %406 ]
  %415 = phi i32 [ %320, %410 ], [ %320, %403 ], [ %320, %401 ], [ %320, %400 ], [ %320, %389 ], [ %320, %388 ], [ %320, %387 ], [ %320, %386 ], [ %320, %373 ], [ %320, %372 ], [ %320, %371 ], [ %320, %370 ], [ %320, %369 ], [ 1, %368 ], [ %320, %367 ], [ %320, %366 ], [ %320, %365 ], [ %320, %364 ], [ %320, %406 ]
  %416 = phi i32 [ %407, %410 ], [ 1, %403 ], [ %322, %401 ], [ %322, %400 ], [ %322, %389 ], [ %322, %388 ], [ %322, %387 ], [ %322, %386 ], [ %322, %373 ], [ %322, %372 ], [ %322, %371 ], [ %322, %370 ], [ %322, %369 ], [ %322, %368 ], [ %322, %367 ], [ %322, %366 ], [ %322, %365 ], [ %322, %364 ], [ %407, %406 ]
  %417 = phi i32 [ %411, %410 ], [ %321, %403 ], [ %321, %401 ], [ %321, %400 ], [ %321, %389 ], [ %321, %388 ], [ %321, %387 ], [ %321, %386 ], [ %321, %373 ], [ %321, %372 ], [ %321, %371 ], [ %321, %370 ], [ %321, %369 ], [ %321, %368 ], [ %321, %367 ], [ %321, %366 ], [ %321, %365 ], [ %321, %364 ], [ %321, %406 ]
  %418 = getelementptr inbounds i8, i8* %413, i64 1
  %419 = load i8, i8* %413, align 1, !tbaa !26
  %420 = icmp eq i8 %419, 0
  br i1 %420, label %434, label %316

421:                                              ; preds = %52
  %422 = load i8, i8* getelementptr inbounds ([300 x i8], [300 x i8]* @inPath, i64 0, i64 0), align 16, !tbaa !26
  %423 = icmp eq i8 %422, 0
  br i1 %423, label %424, label %426

424:                                              ; preds = %421
  %425 = tail call i8* @strncpy(i8* nonnull dereferenceable(1) getelementptr inbounds ([300 x i8], [300 x i8]* @inPath, i64 0, i64 0), i8* nonnull dereferenceable(1) %59, i64 300) #21
  br label %435

426:                                              ; preds = %421
  %427 = load i8, i8* getelementptr inbounds ([300 x i8], [300 x i8]* @outPath, i64 0, i64 0), align 16, !tbaa !26
  %428 = icmp eq i8 %427, 0
  br i1 %428, label %429, label %431

429:                                              ; preds = %426
  %430 = tail call i8* @strncpy(i8* nonnull dereferenceable(1) getelementptr inbounds ([300 x i8], [300 x i8]* @outPath, i64 0, i64 0), i8* nonnull dereferenceable(1) %59, i64 300) #21
  br label %435

431:                                              ; preds = %426
  %432 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %433 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %432, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.154, i64 0, i64 0), i8* %6, i8* nonnull %59) #19
  br label %435

434:                                              ; preds = %412
  store i8* %418, i8** %5, align 8, !tbaa !7
  store i8 0, i8* %4, align 1, !tbaa !26
  br label %435

435:                                              ; preds = %434, %431, %429, %424, %313, %89
  %436 = phi i32 [ 0, %313 ], [ 0, %424 ], [ 0, %429 ], [ 1, %431 ], [ %416, %434 ], [ 0, %89 ]
  %437 = phi i32 [ %315, %313 ], [ %53, %424 ], [ %53, %429 ], [ %53, %431 ], [ %417, %434 ], [ %53, %89 ]
  %438 = phi i32 [ %55, %313 ], [ %55, %424 ], [ %55, %429 ], [ %55, %431 ], [ %415, %434 ], [ %55, %89 ]
  %439 = phi i32 [ %54, %313 ], [ %54, %424 ], [ %54, %429 ], [ %54, %431 ], [ %414, %434 ], [ %54, %89 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #21
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %4) #21
  %440 = add nsw i32 %437, 1
  %441 = icmp slt i32 %440, %1
  %442 = icmp eq i32 %436, 0
  %443 = and i1 %442, %441
  br i1 %443, label %52, label %444

444:                                              ; preds = %435, %3
  %445 = phi i32 [ 0, %3 ], [ %436, %435 ]
  %446 = phi i32 [ 0, %3 ], [ %438, %435 ]
  %447 = phi i32 [ 0, %3 ], [ %439, %435 ]
  %448 = icmp ne i32 %445, 0
  %449 = load i8, i8* getelementptr inbounds ([300 x i8], [300 x i8]* @inPath, i64 0, i64 0), align 16
  %450 = icmp eq i8 %449, 0
  %451 = or i1 %448, %450
  br i1 %451, label %452, label %453

452:                                              ; preds = %444
  tail call void @lame_usage(%struct.lame_global_flags* undef, i8* %6)
  unreachable

453:                                              ; preds = %444
  %454 = icmp eq i8 %449, 45
  br i1 %454, label %455, label %457

455:                                              ; preds = %453
  %456 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 7
  store i32 1, i32* %456, align 8, !tbaa !190
  br label %457

457:                                              ; preds = %455, %453
  %458 = load i8, i8* getelementptr inbounds ([300 x i8], [300 x i8]* @outPath, i64 0, i64 0), align 16, !tbaa !26
  %459 = icmp eq i8 %458, 0
  br i1 %459, label %460, label %467

460:                                              ; preds = %457
  br i1 %454, label %461, label %462

461:                                              ; preds = %460
  store i16 45, i16* bitcast ([300 x i8]* @outPath to i16*), align 16
  br label %470

462:                                              ; preds = %460
  %463 = tail call i8* @strncpy(i8* nonnull dereferenceable(1) getelementptr inbounds ([300 x i8], [300 x i8]* @outPath, i64 0, i64 0), i8* nonnull dereferenceable(1) getelementptr inbounds ([300 x i8], [300 x i8]* @inPath, i64 0, i64 0), i64 296) #21
  %464 = tail call i64 @strlen(i8* nonnull dereferenceable(1) getelementptr inbounds ([300 x i8], [300 x i8]* @outPath, i64 0, i64 0))
  %465 = getelementptr [300 x i8], [300 x i8]* @outPath, i64 0, i64 %464
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(5) %465, i8* nonnull align 1 dereferenceable(5) getelementptr inbounds ([5 x i8], [5 x i8]* @.str.156, i64 0, i64 0), i64 5, i1 false)
  %466 = load i8, i8* getelementptr inbounds ([300 x i8], [300 x i8]* @outPath, i64 0, i64 0), align 16, !tbaa !26
  br label %467

467:                                              ; preds = %462, %457
  %468 = phi i8 [ %458, %457 ], [ %466, %462 ]
  %469 = icmp eq i8 %468, 45
  br i1 %469, label %470, label %477

470:                                              ; preds = %467, %461
  %471 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 5
  store i32 0, i32* %471, align 8, !tbaa !182
  %472 = load i32, i32* getelementptr inbounds (%struct.ID3TAGDATA, %struct.ID3TAGDATA* @id3tag, i64 0, i32 0), align 4, !tbaa !184
  %473 = icmp eq i32 %472, 0
  br i1 %473, label %477, label %474

474:                                              ; preds = %470
  store i32 0, i32* getelementptr inbounds (%struct.ID3TAGDATA, %struct.ID3TAGDATA* @id3tag, i64 0, i32 0), align 4, !tbaa !184
  %475 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %476 = tail call i64 @fwrite(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.157.355, i64 0, i64 0), i64 54, i64 1, %struct._IO_FILE* %475) #19
  br label %477

477:                                              ; preds = %474, %470, %467
  %478 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 29
  %479 = load i32, i32* %478, align 8, !tbaa !88
  %480 = icmp eq i32 %479, 3
  br i1 %480, label %488, label %481

481:                                              ; preds = %477
  %482 = tail call i64 @strlen(i8* nonnull dereferenceable(1) getelementptr inbounds ([300 x i8], [300 x i8]* @inPath, i64 0, i64 0)) #23
  %483 = add i64 %482, -4
  %484 = getelementptr inbounds [300 x i8], [300 x i8]* @inPath, i64 0, i64 %483
  %485 = tail call i32 @strcmp(i8* nonnull %484, i8* nonnull dereferenceable(5) getelementptr inbounds ([5 x i8], [5 x i8]* @.str.156, i64 0, i64 0)) #23
  %486 = icmp eq i32 %485, 0
  br i1 %486, label %487, label %488

487:                                              ; preds = %481
  store i32 3, i32* %478, align 8, !tbaa !88
  br label %488

488:                                              ; preds = %487, %481, %477
  %489 = icmp eq i32 %446, 0
  br i1 %489, label %492, label %490

490:                                              ; preds = %488
  %491 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 1
  store i32 2, i32* %491, align 8, !tbaa !86
  br label %499

492:                                              ; preds = %488
  %493 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 8
  %494 = load i32, i32* %493, align 4, !tbaa !121
  %495 = icmp eq i32 %494, 3
  %496 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 1
  br i1 %495, label %497, label %498

497:                                              ; preds = %492
  store i32 1, i32* %496, align 8, !tbaa !86
  br label %499

498:                                              ; preds = %492
  store i32 2, i32* %496, align 8, !tbaa !86
  br label %499

499:                                              ; preds = %498, %497, %490
  %500 = icmp eq i32 %447, 0
  br i1 %500, label %503, label %501

501:                                              ; preds = %499
  %502 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 6
  store i32 %447, i32* %502, align 4, !tbaa !180
  br label %503

503:                                              ; preds = %501, %499
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local double @strtod(i8* readonly, i8** nocapture) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare dso_local i64 @strtol(i8* readonly, i8** nocapture, i32) local_unnamed_addr #4

; Function Attrs: nofree nounwind uwtable
define dso_local i32 @ReadByte(%struct._IO_FILE* nocapture %0) local_unnamed_addr #3 {
  %2 = tail call i32 @getc(%struct._IO_FILE* %0)
  %3 = and i32 %2, 255
  %4 = trunc i32 %2 to i8
  %5 = icmp slt i8 %4, 0
  %6 = or i32 %2, -256
  %7 = select i1 %5, i32 %6, i32 %3
  ret i32 %7
}

; Function Attrs: nofree nounwind
declare dso_local i32 @getc(%struct._IO_FILE* nocapture) local_unnamed_addr #4

; Function Attrs: nofree nounwind uwtable
define dso_local i32 @Read16BitsLowHigh(%struct._IO_FILE* nocapture %0) local_unnamed_addr #3 {
  %2 = tail call i32 @getc(%struct._IO_FILE* %0)
  %3 = and i32 %2, 255
  %4 = tail call i32 @getc(%struct._IO_FILE* %0)
  %5 = shl i32 %4, 8
  %6 = and i32 %5, 65280
  %7 = or i32 %6, %3
  %8 = trunc i32 %4 to i8
  %9 = icmp slt i8 %8, 0
  %10 = or i32 %7, -65536
  %11 = select i1 %9, i32 %10, i32 %7
  ret i32 %11
}

; Function Attrs: nofree nounwind uwtable
define dso_local i32 @Read16BitsHighLow(%struct._IO_FILE* nocapture %0) local_unnamed_addr #3 {
  %2 = tail call i32 @getc(%struct._IO_FILE* %0)
  %3 = tail call i32 @getc(%struct._IO_FILE* %0)
  %4 = and i32 %3, 255
  %5 = shl i32 %2, 8
  %6 = and i32 %5, 65280
  %7 = or i32 %6, %4
  %8 = trunc i32 %2 to i8
  %9 = icmp slt i8 %8, 0
  %10 = or i32 %7, -65536
  %11 = select i1 %9, i32 %10, i32 %7
  ret i32 %11
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @Write8Bits(%struct._IO_FILE* nocapture %0, i32 %1) local_unnamed_addr #3 {
  %3 = and i32 %1, 255
  %4 = tail call i32 @putc(i32 %3, %struct._IO_FILE* %0)
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local i32 @putc(i32, %struct._IO_FILE* nocapture) local_unnamed_addr #4

; Function Attrs: nofree nounwind uwtable
define dso_local void @Write16BitsLowHigh(%struct._IO_FILE* nocapture %0, i32 %1) local_unnamed_addr #3 {
  %3 = and i32 %1, 255
  %4 = tail call i32 @putc(i32 %3, %struct._IO_FILE* %0)
  %5 = lshr i32 %1, 8
  %6 = and i32 %5, 255
  %7 = tail call i32 @putc(i32 %6, %struct._IO_FILE* %0)
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @Write16BitsHighLow(%struct._IO_FILE* nocapture %0, i32 %1) local_unnamed_addr #3 {
  %3 = lshr i32 %1, 8
  %4 = and i32 %3, 255
  %5 = tail call i32 @putc(i32 %4, %struct._IO_FILE* %0)
  %6 = and i32 %1, 255
  %7 = tail call i32 @putc(i32 %6, %struct._IO_FILE* %0)
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local i32 @Read24BitsHighLow(%struct._IO_FILE* nocapture %0) local_unnamed_addr #3 {
  %2 = tail call i32 @getc(%struct._IO_FILE* %0)
  %3 = tail call i32 @getc(%struct._IO_FILE* %0)
  %4 = tail call i32 @getc(%struct._IO_FILE* %0)
  %5 = and i32 %4, 255
  %6 = shl i32 %2, 16
  %7 = and i32 %6, 16711680
  %8 = shl i32 %3, 8
  %9 = and i32 %8, 65280
  %10 = or i32 %9, %7
  %11 = or i32 %10, %5
  %12 = trunc i32 %2 to i8
  %13 = icmp slt i8 %12, 0
  %14 = or i32 %11, -16777216
  %15 = select i1 %13, i32 %14, i32 %11
  ret i32 %15
}

; Function Attrs: nofree nounwind uwtable
define dso_local i32 @Read32Bits(%struct._IO_FILE* nocapture %0) local_unnamed_addr #3 {
  %2 = tail call i32 @getc(%struct._IO_FILE* %0) #21
  %3 = and i32 %2, 255
  %4 = tail call i32 @getc(%struct._IO_FILE* %0) #21
  %5 = shl i32 %4, 8
  %6 = and i32 %5, 65280
  %7 = or i32 %6, %3
  %8 = tail call i32 @getc(%struct._IO_FILE* %0) #21
  %9 = and i32 %8, 255
  %10 = tail call i32 @getc(%struct._IO_FILE* %0) #21
  %11 = shl i32 %10, 8
  %12 = and i32 %11, 65280
  %13 = or i32 %12, %9
  %14 = shl nuw i32 %13, 16
  %15 = or i32 %7, %14
  ret i32 %15
}

; Function Attrs: nofree nounwind uwtable
define dso_local i32 @Read32BitsHighLow(%struct._IO_FILE* nocapture %0) local_unnamed_addr #3 {
  %2 = tail call i32 @getc(%struct._IO_FILE* %0) #21
  %3 = tail call i32 @getc(%struct._IO_FILE* %0) #21
  %4 = and i32 %3, 255
  %5 = shl i32 %2, 8
  %6 = and i32 %5, 65280
  %7 = or i32 %6, %4
  %8 = tail call i32 @getc(%struct._IO_FILE* %0) #21
  %9 = tail call i32 @getc(%struct._IO_FILE* %0) #21
  %10 = and i32 %9, 255
  %11 = shl i32 %8, 8
  %12 = and i32 %11, 65280
  %13 = or i32 %12, %10
  %14 = shl nuw i32 %7, 16
  %15 = or i32 %13, %14
  ret i32 %15
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @Write32Bits(%struct._IO_FILE* nocapture %0, i32 %1) local_unnamed_addr #3 {
  %3 = and i32 %1, 255
  %4 = tail call i32 @putc(i32 %3, %struct._IO_FILE* %0) #21
  %5 = lshr i32 %1, 8
  %6 = and i32 %5, 255
  %7 = tail call i32 @putc(i32 %6, %struct._IO_FILE* %0) #21
  %8 = lshr i32 %1, 16
  %9 = and i32 %8, 255
  %10 = tail call i32 @putc(i32 %9, %struct._IO_FILE* %0) #21
  %11 = lshr i32 %1, 24
  %12 = tail call i32 @putc(i32 %11, %struct._IO_FILE* %0) #21
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @Write32BitsLowHigh(%struct._IO_FILE* nocapture %0, i32 %1) local_unnamed_addr #3 {
  %3 = and i32 %1, 255
  %4 = tail call i32 @putc(i32 %3, %struct._IO_FILE* %0) #21
  %5 = lshr i32 %1, 8
  %6 = and i32 %5, 255
  %7 = tail call i32 @putc(i32 %6, %struct._IO_FILE* %0) #21
  %8 = lshr i32 %1, 16
  %9 = and i32 %8, 255
  %10 = tail call i32 @putc(i32 %9, %struct._IO_FILE* %0) #21
  %11 = lshr i32 %1, 24
  %12 = tail call i32 @putc(i32 %11, %struct._IO_FILE* %0) #21
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @Write32BitsHighLow(%struct._IO_FILE* nocapture %0, i32 %1) local_unnamed_addr #3 {
  %3 = lshr i32 %1, 16
  %4 = lshr i32 %1, 24
  %5 = tail call i32 @putc(i32 %4, %struct._IO_FILE* %0) #21
  %6 = and i32 %3, 255
  %7 = tail call i32 @putc(i32 %6, %struct._IO_FILE* %0) #21
  %8 = lshr i32 %1, 8
  %9 = and i32 %8, 255
  %10 = tail call i32 @putc(i32 %9, %struct._IO_FILE* %0) #21
  %11 = and i32 %1, 255
  %12 = tail call i32 @putc(i32 %11, %struct._IO_FILE* %0) #21
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @ReadBytes(%struct._IO_FILE* nocapture %0, i8* nocapture %1, i32 %2) local_unnamed_addr #3 {
  %4 = tail call i32 @feof(%struct._IO_FILE* %0) #21
  %5 = icmp eq i32 %4, 0
  %6 = icmp sgt i32 %2, 0
  %7 = and i1 %6, %5
  br i1 %7, label %8, label %19

8:                                                ; preds = %8, %3
  %9 = phi i32 [ %11, %8 ], [ %2, %3 ]
  %10 = phi i8* [ %14, %8 ], [ %1, %3 ]
  %11 = add nsw i32 %9, -1
  %12 = tail call i32 @getc(%struct._IO_FILE* %0)
  %13 = trunc i32 %12 to i8
  %14 = getelementptr inbounds i8, i8* %10, i64 1
  store i8 %13, i8* %10, align 1, !tbaa !26
  %15 = tail call i32 @feof(%struct._IO_FILE* %0) #21
  %16 = icmp eq i32 %15, 0
  %17 = icmp sgt i32 %9, 1
  %18 = and i1 %17, %16
  br i1 %18, label %8, label %19

19:                                               ; preds = %8, %3
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local i32 @feof(%struct._IO_FILE* nocapture) local_unnamed_addr #4

; Function Attrs: nofree nounwind uwtable
define dso_local void @ReadBytesSwapped(%struct._IO_FILE* nocapture %0, i8* %1, i32 %2) local_unnamed_addr #3 {
  %4 = tail call i32 @feof(%struct._IO_FILE* %0) #21
  %5 = icmp eq i32 %4, 0
  %6 = icmp sgt i32 %2, 0
  %7 = and i1 %6, %5
  br i1 %7, label %12, label %8

8:                                                ; preds = %12, %3
  %9 = phi i8* [ %1, %3 ], [ %18, %12 ]
  %10 = getelementptr inbounds i8, i8* %9, i64 -1
  %11 = icmp ugt i8* %10, %1
  br i1 %11, label %23, label %31

12:                                               ; preds = %12, %3
  %13 = phi i8* [ %18, %12 ], [ %1, %3 ]
  %14 = phi i32 [ %15, %12 ], [ %2, %3 ]
  %15 = add nsw i32 %14, -1
  %16 = tail call i32 @getc(%struct._IO_FILE* %0)
  %17 = trunc i32 %16 to i8
  %18 = getelementptr inbounds i8, i8* %13, i64 1
  store i8 %17, i8* %13, align 1, !tbaa !26
  %19 = tail call i32 @feof(%struct._IO_FILE* %0) #21
  %20 = icmp eq i32 %19, 0
  %21 = icmp sgt i32 %14, 1
  %22 = and i1 %21, %20
  br i1 %22, label %12, label %8

23:                                               ; preds = %23, %8
  %24 = phi i8* [ %29, %23 ], [ %10, %8 ]
  %25 = phi i8* [ %28, %23 ], [ %1, %8 ]
  %26 = load i8, i8* %25, align 1, !tbaa !26
  %27 = load i8, i8* %24, align 1, !tbaa !26
  store i8 %27, i8* %25, align 1, !tbaa !26
  store i8 %26, i8* %24, align 1, !tbaa !26
  %28 = getelementptr inbounds i8, i8* %25, i64 1
  %29 = getelementptr inbounds i8, i8* %24, i64 -1
  %30 = icmp ult i8* %28, %29
  br i1 %30, label %23, label %31

31:                                               ; preds = %23, %8
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @WriteBytes(%struct._IO_FILE* nocapture %0, i8* nocapture readonly %1, i32 %2) local_unnamed_addr #3 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %14

5:                                                ; preds = %5, %3
  %6 = phi i32 [ %8, %5 ], [ %2, %3 ]
  %7 = phi i8* [ %9, %5 ], [ %1, %3 ]
  %8 = add nsw i32 %6, -1
  %9 = getelementptr inbounds i8, i8* %7, i64 1
  %10 = load i8, i8* %7, align 1, !tbaa !26
  %11 = sext i8 %10 to i32
  %12 = tail call i32 @putc(i32 %11, %struct._IO_FILE* %0)
  %13 = icmp sgt i32 %6, 1
  br i1 %13, label %5, label %14

14:                                               ; preds = %5, %3
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @WriteBytesSwapped(%struct._IO_FILE* nocapture %0, i8* nocapture readonly %1, i32 %2) local_unnamed_addr #3 {
  %4 = icmp sgt i32 %2, 0
  br i1 %4, label %5, label %18

5:                                                ; preds = %3
  %6 = add nsw i32 %2, -1
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds i8, i8* %1, i64 %7
  br label %9

9:                                                ; preds = %9, %5
  %10 = phi i32 [ %12, %9 ], [ %2, %5 ]
  %11 = phi i8* [ %13, %9 ], [ %8, %5 ]
  %12 = add nsw i32 %10, -1
  %13 = getelementptr inbounds i8, i8* %11, i64 -1
  %14 = load i8, i8* %11, align 1, !tbaa !26
  %15 = sext i8 %14 to i32
  %16 = tail call i32 @putc(i32 %15, %struct._IO_FILE* %0)
  %17 = icmp sgt i32 %10, 1
  br i1 %17, label %9, label %18

18:                                               ; preds = %9, %3
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local double @ReadIeeeFloatHighLow(%struct._IO_FILE* nocapture %0) local_unnamed_addr #0 {
  %2 = alloca [4 x i8], align 1
  %3 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #21
  %4 = tail call i32 @feof(%struct._IO_FILE* %0) #21
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %17

6:                                                ; preds = %6, %1
  %7 = phi i32 [ %9, %6 ], [ 4, %1 ]
  %8 = phi i8* [ %12, %6 ], [ %3, %1 ]
  %9 = add nsw i32 %7, -1
  %10 = tail call i32 @getc(%struct._IO_FILE* %0) #21
  %11 = trunc i32 %10 to i8
  %12 = getelementptr inbounds i8, i8* %8, i64 1
  store i8 %11, i8* %8, align 1, !tbaa !26
  %13 = tail call i32 @feof(%struct._IO_FILE* %0) #21
  %14 = icmp eq i32 %13, 0
  %15 = icmp ugt i32 %7, 1
  %16 = and i1 %15, %14
  br i1 %16, label %6, label %17

17:                                               ; preds = %6, %1
  %18 = call double @ConvertFromIeeeSingle(i8* nonnull %3) #21
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #21
  ret double %18
}

; Function Attrs: nounwind uwtable
define dso_local double @ReadIeeeFloatLowHigh(%struct._IO_FILE* nocapture %0) local_unnamed_addr #0 {
  %2 = alloca [4 x i8], align 1
  %3 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #21
  %4 = tail call i32 @feof(%struct._IO_FILE* %0) #21
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %10, label %30

6:                                                ; preds = %10
  %7 = icmp eq i64 %11, 0
  br i1 %7, label %30, label %8

8:                                                ; preds = %6
  %9 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i64 0, i64 %11
  br label %22

10:                                               ; preds = %10, %1
  %11 = phi i64 [ %17, %10 ], [ 0, %1 ]
  %12 = phi i32 [ %14, %10 ], [ 4, %1 ]
  %13 = getelementptr inbounds [4 x i8], [4 x i8]* %2, i64 0, i64 %11
  %14 = add nsw i32 %12, -1
  %15 = tail call i32 @getc(%struct._IO_FILE* %0) #21
  %16 = trunc i32 %15 to i8
  %17 = add nuw nsw i64 %11, 1
  store i8 %16, i8* %13, align 1, !tbaa !26
  %18 = tail call i32 @feof(%struct._IO_FILE* %0) #21
  %19 = icmp eq i32 %18, 0
  %20 = icmp ugt i32 %12, 1
  %21 = and i1 %20, %19
  br i1 %21, label %10, label %6

22:                                               ; preds = %22, %8
  %23 = phi i8* [ %28, %22 ], [ %9, %8 ]
  %24 = phi i8* [ %27, %22 ], [ %3, %8 ]
  %25 = load i8, i8* %24, align 1, !tbaa !26
  %26 = load i8, i8* %23, align 1, !tbaa !26
  store i8 %26, i8* %24, align 1, !tbaa !26
  store i8 %25, i8* %23, align 1, !tbaa !26
  %27 = getelementptr inbounds i8, i8* %24, i64 1
  %28 = getelementptr inbounds i8, i8* %23, i64 -1
  %29 = icmp ult i8* %27, %28
  br i1 %29, label %22, label %30

30:                                               ; preds = %22, %6, %1
  %31 = call double @ConvertFromIeeeSingle(i8* nonnull %3) #21
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #21
  ret double %31
}

; Function Attrs: nounwind uwtable
define dso_local double @ReadIeeeDoubleHighLow(%struct._IO_FILE* nocapture %0) local_unnamed_addr #0 {
  %2 = alloca [8 x i8], align 1
  %3 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #21
  %4 = tail call i32 @feof(%struct._IO_FILE* %0) #21
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %17

6:                                                ; preds = %6, %1
  %7 = phi i32 [ %9, %6 ], [ 8, %1 ]
  %8 = phi i8* [ %12, %6 ], [ %3, %1 ]
  %9 = add nsw i32 %7, -1
  %10 = tail call i32 @getc(%struct._IO_FILE* %0) #21
  %11 = trunc i32 %10 to i8
  %12 = getelementptr inbounds i8, i8* %8, i64 1
  store i8 %11, i8* %8, align 1, !tbaa !26
  %13 = tail call i32 @feof(%struct._IO_FILE* %0) #21
  %14 = icmp eq i32 %13, 0
  %15 = icmp ugt i32 %7, 1
  %16 = and i1 %15, %14
  br i1 %16, label %6, label %17

17:                                               ; preds = %6, %1
  %18 = call double @ConvertFromIeeeDouble(i8* nonnull %3) #21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #21
  ret double %18
}

; Function Attrs: nounwind uwtable
define dso_local double @ReadIeeeDoubleLowHigh(%struct._IO_FILE* nocapture %0) local_unnamed_addr #0 {
  %2 = alloca [8 x i8], align 1
  %3 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #21
  %4 = tail call i32 @feof(%struct._IO_FILE* %0) #21
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %10, label %30

6:                                                ; preds = %10
  %7 = icmp eq i64 %11, 0
  br i1 %7, label %30, label %8

8:                                                ; preds = %6
  %9 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i64 0, i64 %11
  br label %22

10:                                               ; preds = %10, %1
  %11 = phi i64 [ %17, %10 ], [ 0, %1 ]
  %12 = phi i32 [ %14, %10 ], [ 8, %1 ]
  %13 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i64 0, i64 %11
  %14 = add nsw i32 %12, -1
  %15 = tail call i32 @getc(%struct._IO_FILE* %0) #21
  %16 = trunc i32 %15 to i8
  %17 = add nuw nsw i64 %11, 1
  store i8 %16, i8* %13, align 1, !tbaa !26
  %18 = tail call i32 @feof(%struct._IO_FILE* %0) #21
  %19 = icmp eq i32 %18, 0
  %20 = icmp ugt i32 %12, 1
  %21 = and i1 %20, %19
  br i1 %21, label %10, label %6

22:                                               ; preds = %22, %8
  %23 = phi i8* [ %28, %22 ], [ %9, %8 ]
  %24 = phi i8* [ %27, %22 ], [ %3, %8 ]
  %25 = load i8, i8* %24, align 1, !tbaa !26
  %26 = load i8, i8* %23, align 1, !tbaa !26
  store i8 %26, i8* %24, align 1, !tbaa !26
  store i8 %25, i8* %23, align 1, !tbaa !26
  %27 = getelementptr inbounds i8, i8* %24, i64 1
  %28 = getelementptr inbounds i8, i8* %23, i64 -1
  %29 = icmp ult i8* %27, %28
  br i1 %29, label %22, label %30

30:                                               ; preds = %22, %6, %1
  %31 = call double @ConvertFromIeeeDouble(i8* nonnull %3) #21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #21
  ret double %31
}

; Function Attrs: nounwind uwtable
define dso_local double @ReadIeeeExtendedHighLow(%struct._IO_FILE* nocapture %0) local_unnamed_addr #0 {
  %2 = alloca [10 x i8], align 1
  %3 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 10, i8* nonnull %3) #21
  %4 = tail call i32 @feof(%struct._IO_FILE* %0) #21
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %17

6:                                                ; preds = %6, %1
  %7 = phi i32 [ %9, %6 ], [ 10, %1 ]
  %8 = phi i8* [ %12, %6 ], [ %3, %1 ]
  %9 = add nsw i32 %7, -1
  %10 = tail call i32 @getc(%struct._IO_FILE* %0) #21
  %11 = trunc i32 %10 to i8
  %12 = getelementptr inbounds i8, i8* %8, i64 1
  store i8 %11, i8* %8, align 1, !tbaa !26
  %13 = tail call i32 @feof(%struct._IO_FILE* %0) #21
  %14 = icmp eq i32 %13, 0
  %15 = icmp ugt i32 %7, 1
  %16 = and i1 %15, %14
  br i1 %16, label %6, label %17

17:                                               ; preds = %6, %1
  %18 = call double @ConvertFromIeeeExtended(i8* nonnull %3) #21
  call void @llvm.lifetime.end.p0i8(i64 10, i8* nonnull %3) #21
  ret double %18
}

; Function Attrs: nounwind uwtable
define dso_local double @ReadIeeeExtendedLowHigh(%struct._IO_FILE* nocapture %0) local_unnamed_addr #0 {
  %2 = alloca [10 x i8], align 1
  %3 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 10, i8* nonnull %3) #21
  %4 = tail call i32 @feof(%struct._IO_FILE* %0) #21
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %10, label %30

6:                                                ; preds = %10
  %7 = icmp eq i64 %11, 0
  br i1 %7, label %30, label %8

8:                                                ; preds = %6
  %9 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 %11
  br label %22

10:                                               ; preds = %10, %1
  %11 = phi i64 [ %17, %10 ], [ 0, %1 ]
  %12 = phi i32 [ %14, %10 ], [ 10, %1 ]
  %13 = getelementptr inbounds [10 x i8], [10 x i8]* %2, i64 0, i64 %11
  %14 = add nsw i32 %12, -1
  %15 = tail call i32 @getc(%struct._IO_FILE* %0) #21
  %16 = trunc i32 %15 to i8
  %17 = add nuw nsw i64 %11, 1
  store i8 %16, i8* %13, align 1, !tbaa !26
  %18 = tail call i32 @feof(%struct._IO_FILE* %0) #21
  %19 = icmp eq i32 %18, 0
  %20 = icmp ugt i32 %12, 1
  %21 = and i1 %20, %19
  br i1 %21, label %10, label %6

22:                                               ; preds = %22, %8
  %23 = phi i8* [ %28, %22 ], [ %9, %8 ]
  %24 = phi i8* [ %27, %22 ], [ %3, %8 ]
  %25 = load i8, i8* %24, align 1, !tbaa !26
  %26 = load i8, i8* %23, align 1, !tbaa !26
  store i8 %26, i8* %24, align 1, !tbaa !26
  store i8 %25, i8* %23, align 1, !tbaa !26
  %27 = getelementptr inbounds i8, i8* %24, i64 1
  %28 = getelementptr inbounds i8, i8* %23, i64 -1
  %29 = icmp ult i8* %27, %28
  br i1 %29, label %22, label %30

30:                                               ; preds = %22, %6, %1
  %31 = call double @ConvertFromIeeeExtended(i8* nonnull %3) #21
  call void @llvm.lifetime.end.p0i8(i64 10, i8* nonnull %3) #21
  ret double %31
}

; Function Attrs: nounwind uwtable
define dso_local void @WriteIeeeFloatLowHigh(%struct._IO_FILE* nocapture %0, double %1) local_unnamed_addr #0 {
  %3 = alloca [4 x i8], align 1
  %4 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #21
  call void @ConvertToIeeeSingle(double %1, i8* nonnull %4) #21
  %5 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 3
  %6 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 2
  %7 = load i8, i8* %5, align 1, !tbaa !26
  %8 = sext i8 %7 to i32
  %9 = call i32 @putc(i32 %8, %struct._IO_FILE* %0) #21
  %10 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 1
  %11 = load i8, i8* %6, align 1, !tbaa !26
  %12 = sext i8 %11 to i32
  %13 = call i32 @putc(i32 %12, %struct._IO_FILE* %0) #21
  %14 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 0
  %15 = load i8, i8* %10, align 1, !tbaa !26
  %16 = sext i8 %15 to i32
  %17 = call i32 @putc(i32 %16, %struct._IO_FILE* %0) #21
  %18 = load i8, i8* %14, align 1, !tbaa !26
  %19 = sext i8 %18 to i32
  %20 = call i32 @putc(i32 %19, %struct._IO_FILE* %0) #21
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #21
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @WriteIeeeFloatHighLow(%struct._IO_FILE* nocapture %0, double %1) local_unnamed_addr #0 {
  %3 = alloca [4 x i8], align 1
  %4 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #21
  call void @ConvertToIeeeSingle(double %1, i8* nonnull %4) #21
  %5 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 1
  %6 = load i8, i8* %4, align 1, !tbaa !26
  %7 = sext i8 %6 to i32
  %8 = call i32 @putc(i32 %7, %struct._IO_FILE* %0) #21
  %9 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 2
  %10 = load i8, i8* %5, align 1, !tbaa !26
  %11 = sext i8 %10 to i32
  %12 = call i32 @putc(i32 %11, %struct._IO_FILE* %0) #21
  %13 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 3
  %14 = load i8, i8* %9, align 1, !tbaa !26
  %15 = sext i8 %14 to i32
  %16 = call i32 @putc(i32 %15, %struct._IO_FILE* %0) #21
  %17 = load i8, i8* %13, align 1, !tbaa !26
  %18 = sext i8 %17 to i32
  %19 = call i32 @putc(i32 %18, %struct._IO_FILE* %0) #21
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #21
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @WriteIeeeDoubleLowHigh(%struct._IO_FILE* nocapture %0, double %1) local_unnamed_addr #0 {
  %3 = alloca [8 x i8], align 1
  %4 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #21
  call void @ConvertToIeeeDouble(double %1, i8* nonnull %4) #21
  %5 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %6 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %7 = load i8, i8* %5, align 1, !tbaa !26
  %8 = sext i8 %7 to i32
  %9 = call i32 @putc(i32 %8, %struct._IO_FILE* %0) #21
  %10 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %11 = load i8, i8* %6, align 1, !tbaa !26
  %12 = sext i8 %11 to i32
  %13 = call i32 @putc(i32 %12, %struct._IO_FILE* %0) #21
  %14 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %15 = load i8, i8* %10, align 1, !tbaa !26
  %16 = sext i8 %15 to i32
  %17 = call i32 @putc(i32 %16, %struct._IO_FILE* %0) #21
  %18 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %19 = load i8, i8* %14, align 1, !tbaa !26
  %20 = sext i8 %19 to i32
  %21 = call i32 @putc(i32 %20, %struct._IO_FILE* %0) #21
  %22 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %23 = load i8, i8* %18, align 1, !tbaa !26
  %24 = sext i8 %23 to i32
  %25 = call i32 @putc(i32 %24, %struct._IO_FILE* %0) #21
  %26 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %27 = load i8, i8* %22, align 1, !tbaa !26
  %28 = sext i8 %27 to i32
  %29 = call i32 @putc(i32 %28, %struct._IO_FILE* %0) #21
  %30 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 0
  %31 = load i8, i8* %26, align 1, !tbaa !26
  %32 = sext i8 %31 to i32
  %33 = call i32 @putc(i32 %32, %struct._IO_FILE* %0) #21
  %34 = load i8, i8* %30, align 1, !tbaa !26
  %35 = sext i8 %34 to i32
  %36 = call i32 @putc(i32 %35, %struct._IO_FILE* %0) #21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #21
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @WriteIeeeDoubleHighLow(%struct._IO_FILE* nocapture %0, double %1) local_unnamed_addr #0 {
  %3 = alloca [8 x i8], align 1
  %4 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #21
  call void @ConvertToIeeeDouble(double %1, i8* nonnull %4) #21
  %5 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 1
  %6 = load i8, i8* %4, align 1, !tbaa !26
  %7 = sext i8 %6 to i32
  %8 = call i32 @putc(i32 %7, %struct._IO_FILE* %0) #21
  %9 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 2
  %10 = load i8, i8* %5, align 1, !tbaa !26
  %11 = sext i8 %10 to i32
  %12 = call i32 @putc(i32 %11, %struct._IO_FILE* %0) #21
  %13 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 3
  %14 = load i8, i8* %9, align 1, !tbaa !26
  %15 = sext i8 %14 to i32
  %16 = call i32 @putc(i32 %15, %struct._IO_FILE* %0) #21
  %17 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 4
  %18 = load i8, i8* %13, align 1, !tbaa !26
  %19 = sext i8 %18 to i32
  %20 = call i32 @putc(i32 %19, %struct._IO_FILE* %0) #21
  %21 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 5
  %22 = load i8, i8* %17, align 1, !tbaa !26
  %23 = sext i8 %22 to i32
  %24 = call i32 @putc(i32 %23, %struct._IO_FILE* %0) #21
  %25 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 6
  %26 = load i8, i8* %21, align 1, !tbaa !26
  %27 = sext i8 %26 to i32
  %28 = call i32 @putc(i32 %27, %struct._IO_FILE* %0) #21
  %29 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 7
  %30 = load i8, i8* %25, align 1, !tbaa !26
  %31 = sext i8 %30 to i32
  %32 = call i32 @putc(i32 %31, %struct._IO_FILE* %0) #21
  %33 = load i8, i8* %29, align 1, !tbaa !26
  %34 = sext i8 %33 to i32
  %35 = call i32 @putc(i32 %34, %struct._IO_FILE* %0) #21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #21
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @WriteIeeeExtendedLowHigh(%struct._IO_FILE* nocapture %0, double %1) local_unnamed_addr #0 {
  %3 = alloca [10 x i8], align 1
  %4 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 10, i8* nonnull %4) #21
  call void @ConvertToIeeeExtended(double %1, i8* nonnull %4) #21
  %5 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i64 0, i64 9
  %6 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i64 0, i64 8
  %7 = load i8, i8* %5, align 1, !tbaa !26
  %8 = sext i8 %7 to i32
  %9 = call i32 @putc(i32 %8, %struct._IO_FILE* %0) #21
  %10 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i64 0, i64 7
  %11 = load i8, i8* %6, align 1, !tbaa !26
  %12 = sext i8 %11 to i32
  %13 = call i32 @putc(i32 %12, %struct._IO_FILE* %0) #21
  %14 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i64 0, i64 6
  %15 = load i8, i8* %10, align 1, !tbaa !26
  %16 = sext i8 %15 to i32
  %17 = call i32 @putc(i32 %16, %struct._IO_FILE* %0) #21
  %18 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i64 0, i64 5
  %19 = load i8, i8* %14, align 1, !tbaa !26
  %20 = sext i8 %19 to i32
  %21 = call i32 @putc(i32 %20, %struct._IO_FILE* %0) #21
  %22 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i64 0, i64 4
  %23 = load i8, i8* %18, align 1, !tbaa !26
  %24 = sext i8 %23 to i32
  %25 = call i32 @putc(i32 %24, %struct._IO_FILE* %0) #21
  %26 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i64 0, i64 3
  %27 = load i8, i8* %22, align 1, !tbaa !26
  %28 = sext i8 %27 to i32
  %29 = call i32 @putc(i32 %28, %struct._IO_FILE* %0) #21
  %30 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i64 0, i64 2
  %31 = load i8, i8* %26, align 1, !tbaa !26
  %32 = sext i8 %31 to i32
  %33 = call i32 @putc(i32 %32, %struct._IO_FILE* %0) #21
  %34 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i64 0, i64 1
  %35 = load i8, i8* %30, align 1, !tbaa !26
  %36 = sext i8 %35 to i32
  %37 = call i32 @putc(i32 %36, %struct._IO_FILE* %0) #21
  %38 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i64 0, i64 0
  %39 = load i8, i8* %34, align 1, !tbaa !26
  %40 = sext i8 %39 to i32
  %41 = call i32 @putc(i32 %40, %struct._IO_FILE* %0) #21
  %42 = load i8, i8* %38, align 1, !tbaa !26
  %43 = sext i8 %42 to i32
  %44 = call i32 @putc(i32 %43, %struct._IO_FILE* %0) #21
  call void @llvm.lifetime.end.p0i8(i64 10, i8* nonnull %4) #21
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @WriteIeeeExtendedHighLow(%struct._IO_FILE* nocapture %0, double %1) local_unnamed_addr #0 {
  %3 = alloca [10 x i8], align 1
  %4 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 10, i8* nonnull %4) #21
  call void @ConvertToIeeeExtended(double %1, i8* nonnull %4) #21
  %5 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i64 0, i64 1
  %6 = load i8, i8* %4, align 1, !tbaa !26
  %7 = sext i8 %6 to i32
  %8 = call i32 @putc(i32 %7, %struct._IO_FILE* %0) #21
  %9 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i64 0, i64 2
  %10 = load i8, i8* %5, align 1, !tbaa !26
  %11 = sext i8 %10 to i32
  %12 = call i32 @putc(i32 %11, %struct._IO_FILE* %0) #21
  %13 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i64 0, i64 3
  %14 = load i8, i8* %9, align 1, !tbaa !26
  %15 = sext i8 %14 to i32
  %16 = call i32 @putc(i32 %15, %struct._IO_FILE* %0) #21
  %17 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i64 0, i64 4
  %18 = load i8, i8* %13, align 1, !tbaa !26
  %19 = sext i8 %18 to i32
  %20 = call i32 @putc(i32 %19, %struct._IO_FILE* %0) #21
  %21 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i64 0, i64 5
  %22 = load i8, i8* %17, align 1, !tbaa !26
  %23 = sext i8 %22 to i32
  %24 = call i32 @putc(i32 %23, %struct._IO_FILE* %0) #21
  %25 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i64 0, i64 6
  %26 = load i8, i8* %21, align 1, !tbaa !26
  %27 = sext i8 %26 to i32
  %28 = call i32 @putc(i32 %27, %struct._IO_FILE* %0) #21
  %29 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i64 0, i64 7
  %30 = load i8, i8* %25, align 1, !tbaa !26
  %31 = sext i8 %30 to i32
  %32 = call i32 @putc(i32 %31, %struct._IO_FILE* %0) #21
  %33 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i64 0, i64 8
  %34 = load i8, i8* %29, align 1, !tbaa !26
  %35 = sext i8 %34 to i32
  %36 = call i32 @putc(i32 %35, %struct._IO_FILE* %0) #21
  %37 = getelementptr inbounds [10 x i8], [10 x i8]* %3, i64 0, i64 9
  %38 = load i8, i8* %33, align 1, !tbaa !26
  %39 = sext i8 %38 to i32
  %40 = call i32 @putc(i32 %39, %struct._IO_FILE* %0) #21
  %41 = load i8, i8* %37, align 1, !tbaa !26
  %42 = sext i8 %41 to i32
  %43 = call i32 @putc(i32 %42, %struct._IO_FILE* %0) #21
  call void @llvm.lifetime.end.p0i8(i64 10, i8* nonnull %4) #21
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @L3psycho_anal(%struct.lame_global_flags* nocapture readonly %0, i16** %1, i32 %2, double* nocapture %3, double* nocapture %4, double* nocapture %5, [2 x %struct.III_psy_ratio]* nocapture %6, [2 x %struct.III_psy_ratio]* nocapture %7, double* nocapture %8, double* nocapture %9, i32* nocapture %10) local_unnamed_addr #0 {
  %12 = alloca [4 x float], align 16
  %13 = alloca [2 x i32], align 4
  %14 = bitcast [2 x i32]* %13 to i8*
  %15 = alloca [2 x i32], align 4
  %16 = alloca [63 x double], align 16
  %17 = bitcast [4 x float]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17) #21
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #21
  %18 = bitcast [2 x i32]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #21
  %19 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 39
  %20 = load i64, i64* %19, align 8, !tbaa !93
  %21 = icmp eq i64 %20, 0
  %22 = icmp eq i32 %2, 0
  %23 = and i1 %22, %21
  br i1 %23, label %24, label %453

24:                                               ; preds = %11
  %25 = bitcast [63 x double]* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 504, i8* nonnull %25) #21
  store i32 3, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @L3psycho_anal.blocktype_old, i64 0, i64 0), align 4, !tbaa !18
  store i32 3, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @L3psycho_anal.blocktype_old, i64 0, i64 1), align 4, !tbaa !18
  %26 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 3
  %27 = load i32, i32* %26, align 8, !tbaa !156
  switch i32 %27, label %28 [
    i32 32000, label %31
    i32 44100, label %31
    i32 48000, label %31
    i32 16000, label %31
    i32 22050, label %31
    i32 24000, label %31
  ]

28:                                               ; preds = %24
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %30 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.368, i64 0, i64 0), i32 %27) #19
  tail call void @exit(i32 -1) #20
  unreachable

31:                                               ; preds = %24, %24, %24, %24, %24, %24
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(16416) bitcast ([4 x [2 x [513 x float]]]* @L3psycho_anal.rx_sav to i8*), i8 0, i64 16416, i1 false)
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(16416) bitcast ([4 x [2 x [513 x float]]]* @L3psycho_anal.ax_sav to i8*), i8 0, i64 16416, i1 false)
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(16416) bitcast ([4 x [2 x [513 x float]]]* @L3psycho_anal.bx_sav to i8*), i8 0, i64 16416, i1 false)
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(1952) bitcast ([4 x %struct.III_psy_xmin]* @L3psycho_anal.en to i8*), i8 0, i64 1952, i1 false)
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(1952) bitcast ([4 x %struct.III_psy_xmin]* @L3psycho_anal.thm to i8*), i8 0, i64 1952, i1 false)
  store i1 true, i1* @L3psycho_anal.cw_lower_index, align 4
  %32 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 35
  %33 = load float, float* %32, align 8, !tbaa !234
  %34 = fcmp ogt float %33, 0.000000e+00
  %35 = select i1 %34, float %33, float 0x4021BE4F80000000
  %36 = fpext float %35 to double
  %37 = fmul double %36, 1.000000e+03
  %38 = fmul double %37, 1.024000e+03
  %39 = load i32, i32* %26, align 8, !tbaa !156
  %40 = sitofp i32 %39 to double
  %41 = fdiv double %38, %40
  %42 = fptosi double %41 to i32
  %43 = icmp slt i32 %42, 509
  %44 = select i1 %43, i32 %42, i32 509
  %45 = icmp sgt i32 %44, 6
  %46 = select i1 %45, i32 %44, i32 6
  store i32 %46, i32* @L3psycho_anal.cw_upper_index, align 4, !tbaa !18
  br label %47

47:                                               ; preds = %47, %31
  %48 = phi i64 [ 0, %31 ], [ %88, %47 ]
  %49 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.cw, i64 0, i64 %48
  %50 = bitcast float* %49 to <4 x float>*
  store <4 x float> <float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000>, <4 x float>* %50, align 16, !tbaa !33
  %51 = getelementptr inbounds float, float* %49, i64 4
  %52 = bitcast float* %51 to <4 x float>*
  store <4 x float> <float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000>, <4 x float>* %52, align 16, !tbaa !33
  %53 = or i64 %48, 8
  %54 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.cw, i64 0, i64 %53
  %55 = bitcast float* %54 to <4 x float>*
  store <4 x float> <float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000>, <4 x float>* %55, align 16, !tbaa !33
  %56 = getelementptr inbounds float, float* %54, i64 4
  %57 = bitcast float* %56 to <4 x float>*
  store <4 x float> <float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000>, <4 x float>* %57, align 16, !tbaa !33
  %58 = or i64 %48, 16
  %59 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.cw, i64 0, i64 %58
  %60 = bitcast float* %59 to <4 x float>*
  store <4 x float> <float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000>, <4 x float>* %60, align 16, !tbaa !33
  %61 = getelementptr inbounds float, float* %59, i64 4
  %62 = bitcast float* %61 to <4 x float>*
  store <4 x float> <float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000>, <4 x float>* %62, align 16, !tbaa !33
  %63 = or i64 %48, 24
  %64 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.cw, i64 0, i64 %63
  %65 = bitcast float* %64 to <4 x float>*
  store <4 x float> <float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000>, <4 x float>* %65, align 16, !tbaa !33
  %66 = getelementptr inbounds float, float* %64, i64 4
  %67 = bitcast float* %66 to <4 x float>*
  store <4 x float> <float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000>, <4 x float>* %67, align 16, !tbaa !33
  %68 = or i64 %48, 32
  %69 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.cw, i64 0, i64 %68
  %70 = bitcast float* %69 to <4 x float>*
  store <4 x float> <float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000>, <4 x float>* %70, align 16, !tbaa !33
  %71 = getelementptr inbounds float, float* %69, i64 4
  %72 = bitcast float* %71 to <4 x float>*
  store <4 x float> <float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000>, <4 x float>* %72, align 16, !tbaa !33
  %73 = or i64 %48, 40
  %74 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.cw, i64 0, i64 %73
  %75 = bitcast float* %74 to <4 x float>*
  store <4 x float> <float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000>, <4 x float>* %75, align 16, !tbaa !33
  %76 = getelementptr inbounds float, float* %74, i64 4
  %77 = bitcast float* %76 to <4 x float>*
  store <4 x float> <float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000>, <4 x float>* %77, align 16, !tbaa !33
  %78 = or i64 %48, 48
  %79 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.cw, i64 0, i64 %78
  %80 = bitcast float* %79 to <4 x float>*
  store <4 x float> <float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000>, <4 x float>* %80, align 16, !tbaa !33
  %81 = getelementptr inbounds float, float* %79, i64 4
  %82 = bitcast float* %81 to <4 x float>*
  store <4 x float> <float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000>, <4 x float>* %82, align 16, !tbaa !33
  %83 = or i64 %48, 56
  %84 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.cw, i64 0, i64 %83
  %85 = bitcast float* %84 to <4 x float>*
  store <4 x float> <float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000>, <4 x float>* %85, align 16, !tbaa !33
  %86 = getelementptr inbounds float, float* %84, i64 4
  %87 = bitcast float* %86 to <4 x float>*
  store <4 x float> <float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000, float 0x3FD99999A0000000>, <4 x float>* %87, align 16, !tbaa !33
  %88 = add nuw nsw i64 %48, 64
  %89 = icmp eq i64 %88, 512
  br i1 %89, label %90, label %47, !llvm.loop !284

90:                                               ; preds = %47
  store float 0x3FD99999A0000000, float* getelementptr inbounds ([513 x float], [513 x float]* @L3psycho_anal.cw, i64 0, i64 512), align 16, !tbaa !33
  br label %91

91:                                               ; preds = %91, %90
  %92 = phi i64 [ %103, %91 ], [ 0, %90 ]
  %93 = trunc i64 %92 to i32
  %94 = sitofp i32 %93 to double
  %95 = fmul double %94, 0x400921FB54442D18
  %96 = fdiv double %95, 1.200000e+01
  %97 = tail call double @cos(double %96) #21
  %98 = fsub double 1.000000e+00, %97
  %99 = fmul double %98, 1.250000e+00
  %100 = fadd double %99, -2.500000e+00
  %101 = tail call double @pow(double 1.000000e+01, double %100) #21
  %102 = getelementptr inbounds [12 x double], [12 x double]* @L3psycho_anal.mld_s, i64 0, i64 %92
  store double %101, double* %102, align 8, !tbaa !27
  %103 = add nuw nsw i64 %92, 1
  %104 = icmp eq i64 %103, 12
  br i1 %104, label %105, label %91

105:                                              ; preds = %105, %91
  %106 = phi i64 [ %117, %105 ], [ 0, %91 ]
  %107 = trunc i64 %106 to i32
  %108 = sitofp i32 %107 to double
  %109 = fmul double %108, 0x400921FB54442D18
  %110 = fdiv double %109, 2.100000e+01
  %111 = tail call double @cos(double %110) #21
  %112 = fsub double 1.000000e+00, %111
  %113 = fmul double %112, 1.250000e+00
  %114 = fadd double %113, -2.500000e+00
  %115 = tail call double @pow(double 1.000000e+01, double %114) #21
  %116 = getelementptr inbounds [21 x double], [21 x double]* @L3psycho_anal.mld_l, i64 0, i64 %106
  store double %115, double* %116, align 8, !tbaa !27
  %117 = add nuw nsw i64 %106, 1
  %118 = icmp eq i64 %117, 21
  br i1 %118, label %119, label %105

119:                                              ; preds = %105
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(2052) bitcast ([513 x i32]* @L3psycho_anal.partition_l to i8*), i8 -1, i64 2052, i1 false)
  %120 = load i32, i32* %26, align 8, !tbaa !156
  %121 = sitofp i32 %120 to double
  %122 = getelementptr inbounds [63 x double], [63 x double]* %16, i64 0, i64 0
  call void @L3para_read(double %121, i32* getelementptr inbounds ([63 x i32], [63 x i32]* @L3psycho_anal.numlines_l, i64 0, i64 0), i32* getelementptr inbounds ([63 x i32], [63 x i32]* @L3psycho_anal.numlines_s, i64 0, i64 0), i32* getelementptr inbounds ([513 x i32], [513 x i32]* @L3psycho_anal.partition_l, i64 0, i64 0), double* getelementptr inbounds ([63 x double], [63 x double]* @L3psycho_anal.minval, i64 0, i64 0), double* getelementptr inbounds ([63 x double], [63 x double]* @L3psycho_anal.qthr_l, i64 0, i64 0), [64 x double]* getelementptr inbounds ([64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_l, i64 0, i64 0), [64 x double]* getelementptr inbounds ([64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_s, i64 0, i64 0), double* getelementptr inbounds ([63 x double], [63 x double]* @L3psycho_anal.qthr_s, i64 0, i64 0), double* nonnull %122, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @L3psycho_anal.bu_l, i64 0, i64 0), i32* getelementptr inbounds ([21 x i32], [21 x i32]* @L3psycho_anal.bo_l, i64 0, i64 0), double* getelementptr inbounds ([21 x double], [21 x double]* @L3psycho_anal.w1_l, i64 0, i64 0), double* getelementptr inbounds ([21 x double], [21 x double]* @L3psycho_anal.w2_l, i64 0, i64 0), i32* getelementptr inbounds ([12 x i32], [12 x i32]* @L3psycho_anal.bu_s, i64 0, i64 0), i32* getelementptr inbounds ([12 x i32], [12 x i32]* @L3psycho_anal.bo_s, i64 0, i64 0), double* getelementptr inbounds ([12 x double], [12 x double]* @L3psycho_anal.w1_s, i64 0, i64 0), double* getelementptr inbounds ([12 x double], [12 x double]* @L3psycho_anal.w2_s, i64 0, i64 0))
  store i32 0, i32* @L3psycho_anal.npart_l_orig, align 4, !tbaa !18
  store i32 0, i32* @L3psycho_anal.npart_s_orig, align 4, !tbaa !18
  br label %123

123:                                              ; preds = %1763, %119
  %124 = phi i32 [ 0, %119 ], [ %1764, %1763 ]
  %125 = phi i64 [ 0, %119 ], [ %1765, %1763 ]
  %126 = getelementptr inbounds [513 x i32], [513 x i32]* @L3psycho_anal.partition_l, i64 0, i64 %125
  %127 = load i32, i32* %126, align 4, !tbaa !18
  %128 = icmp sgt i32 %127, %124
  br i1 %128, label %129, label %130

129:                                              ; preds = %123
  store i32 %127, i32* @L3psycho_anal.npart_l_orig, align 4, !tbaa !18
  br label %130

130:                                              ; preds = %129, %123
  %131 = phi i32 [ %124, %123 ], [ %127, %129 ]
  %132 = add nuw nsw i64 %125, 1
  %133 = getelementptr inbounds [513 x i32], [513 x i32]* @L3psycho_anal.partition_l, i64 0, i64 %132
  %134 = load i32, i32* %133, align 4, !tbaa !18
  %135 = icmp sgt i32 %134, %131
  br i1 %135, label %1755, label %1756

136:                                              ; preds = %1763
  %137 = add i32 %1764, 1
  store i32 %137, i32* @L3psycho_anal.npart_l_orig, align 4, !tbaa !18
  br label %138

138:                                              ; preds = %138, %136
  %139 = phi i64 [ %143, %138 ], [ 0, %136 ]
  %140 = getelementptr inbounds [63 x i32], [63 x i32]* @L3psycho_anal.numlines_s, i64 0, i64 %139
  %141 = load i32, i32* %140, align 4, !tbaa !18
  %142 = icmp sgt i32 %141, -1
  %143 = add nuw i64 %139, 1
  br i1 %142, label %138, label %144

144:                                              ; preds = %138
  %145 = trunc i64 %139 to i32
  store i32 %145, i32* @L3psycho_anal.npart_s_orig, align 4, !tbaa !18
  %146 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @L3psycho_anal.bo_l, i64 0, i64 20), align 16, !tbaa !18
  %147 = add nsw i32 %146, 1
  store i32 %147, i32* @L3psycho_anal.npart_l, align 4, !tbaa !18
  %148 = load i32, i32* getelementptr inbounds ([12 x i32], [12 x i32]* @L3psycho_anal.bo_s, i64 0, i64 11), align 4, !tbaa !18
  %149 = add nsw i32 %148, 1
  store i32 %149, i32* @L3psycho_anal.npart_s, align 4, !tbaa !18
  %150 = icmp sgt i32 %146, %1764
  br i1 %150, label %151, label %152

151:                                              ; preds = %144
  store i32 %137, i32* @L3psycho_anal.npart_l, align 4, !tbaa !18
  store i32 %1764, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @L3psycho_anal.bo_l, i64 0, i64 20), align 16, !tbaa !18
  store double 1.000000e+00, double* getelementptr inbounds ([21 x double], [21 x double]* @L3psycho_anal.w2_l, i64 0, i64 20), align 16, !tbaa !27
  br label %152

152:                                              ; preds = %151, %144
  %153 = phi i32 [ %147, %144 ], [ %137, %151 ]
  %154 = icmp slt i32 %148, %145
  br i1 %154, label %157, label %155

155:                                              ; preds = %152
  store i32 %145, i32* @L3psycho_anal.npart_s, align 4, !tbaa !18
  %156 = add nsw i32 %145, -1
  store i32 %156, i32* getelementptr inbounds ([12 x i32], [12 x i32]* @L3psycho_anal.bo_s, i64 0, i64 11), align 4, !tbaa !18
  store double 1.000000e+00, double* getelementptr inbounds ([12 x double], [12 x double]* @L3psycho_anal.w2_s, i64 0, i64 11), align 8, !tbaa !27
  br label %157

157:                                              ; preds = %155, %152
  %158 = phi i32 [ %149, %152 ], [ %145, %155 ]
  %159 = icmp sgt i32 %153, 0
  br i1 %159, label %160, label %167

160:                                              ; preds = %157
  %161 = icmp slt i32 %1764, 0
  %162 = sext i32 %137 to i64
  %163 = zext i32 %153 to i64
  %164 = zext i32 %137 to i64
  br label %165

165:                                              ; preds = %194, %160
  %166 = phi i64 [ 0, %160 ], [ %197, %194 ]
  br i1 %161, label %183, label %173

167:                                              ; preds = %194, %157
  %168 = icmp sgt i32 %158, 0
  br i1 %168, label %169, label %201

169:                                              ; preds = %167
  %170 = icmp eq i32 %145, 0
  %171 = and i64 %139, 4294967295
  %172 = zext i32 %158 to i64
  br label %199

173:                                              ; preds = %178, %165
  %174 = phi i64 [ %179, %178 ], [ 0, %165 ]
  %175 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_l, i64 0, i64 %166, i64 %174
  %176 = load double, double* %175, align 8, !tbaa !27
  %177 = fcmp une double %176, 0.000000e+00
  br i1 %177, label %181, label %178

178:                                              ; preds = %173
  %179 = add nuw nsw i64 %174, 1
  %180 = icmp eq i64 %179, %164
  br i1 %180, label %183, label %173

181:                                              ; preds = %173
  %182 = trunc i64 %174 to i32
  br label %183

183:                                              ; preds = %181, %178, %165
  %184 = phi i32 [ 0, %165 ], [ %182, %181 ], [ %137, %178 ]
  %185 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind, i64 0, i64 %166, i64 0
  store i32 %184, i32* %185, align 8, !tbaa !18
  br label %186

186:                                              ; preds = %190, %183
  %187 = phi i64 [ %188, %190 ], [ %162, %183 ]
  %188 = add nsw i64 %187, -1
  %189 = icmp sgt i64 %187, 1
  br i1 %189, label %190, label %194

190:                                              ; preds = %186
  %191 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_l, i64 0, i64 %166, i64 %188
  %192 = load double, double* %191, align 8, !tbaa !27
  %193 = fcmp une double %192, 0.000000e+00
  br i1 %193, label %194, label %186

194:                                              ; preds = %190, %186
  %195 = trunc i64 %188 to i32
  %196 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind, i64 0, i64 %166, i64 1
  store i32 %195, i32* %196, align 4, !tbaa !18
  %197 = add nuw nsw i64 %166, 1
  %198 = icmp ult i64 %197, %163
  br i1 %198, label %165, label %167

199:                                              ; preds = %225, %169
  %200 = phi i64 [ 0, %169 ], [ %228, %225 ]
  br i1 %170, label %214, label %204

201:                                              ; preds = %225, %167
  br i1 %159, label %202, label %330

202:                                              ; preds = %201
  %203 = zext i32 %153 to i64
  br label %230

204:                                              ; preds = %209, %199
  %205 = phi i64 [ %210, %209 ], [ 0, %199 ]
  %206 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_s, i64 0, i64 %200, i64 %205
  %207 = load double, double* %206, align 8, !tbaa !27
  %208 = fcmp une double %207, 0.000000e+00
  br i1 %208, label %212, label %209

209:                                              ; preds = %204
  %210 = add nuw nsw i64 %205, 1
  %211 = icmp eq i64 %210, %171
  br i1 %211, label %214, label %204

212:                                              ; preds = %204
  %213 = trunc i64 %205 to i32
  br label %214

214:                                              ; preds = %212, %209, %199
  %215 = phi i32 [ 0, %199 ], [ %213, %212 ], [ %145, %209 ]
  %216 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind_s, i64 0, i64 %200, i64 0
  store i32 %215, i32* %216, align 8, !tbaa !18
  br label %217

217:                                              ; preds = %221, %214
  %218 = phi i64 [ %219, %221 ], [ %171, %214 ]
  %219 = add nsw i64 %218, -1
  %220 = icmp sgt i64 %218, 1
  br i1 %220, label %221, label %225

221:                                              ; preds = %217
  %222 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_s, i64 0, i64 %200, i64 %219
  %223 = load double, double* %222, align 8, !tbaa !27
  %224 = fcmp une double %223, 0.000000e+00
  br i1 %224, label %225, label %217

225:                                              ; preds = %221, %217
  %226 = trunc i64 %219 to i32
  %227 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind_s, i64 0, i64 %200, i64 1
  store i32 %226, i32* %227, align 4, !tbaa !18
  %228 = add nuw nsw i64 %200, 1
  %229 = icmp ult i64 %228, %172
  br i1 %229, label %199, label %201

230:                                              ; preds = %327, %202
  %231 = phi i64 [ 0, %202 ], [ %328, %327 ]
  %232 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind, i64 0, i64 %231, i64 0
  %233 = load i32, i32* %232, align 8, !tbaa !18
  %234 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind, i64 0, i64 %231, i64 1
  %235 = load i32, i32* %234, align 4, !tbaa !18
  %236 = icmp sgt i32 %233, %235
  br i1 %236, label %327, label %237

237:                                              ; preds = %230
  %238 = sext i32 %233 to i64
  %239 = sext i32 %235 to i64
  br label %312

240:                                              ; preds = %312
  br i1 %236, label %327, label %241

241:                                              ; preds = %240
  %242 = fdiv double 0x3FD0137987DD704C, %317
  %243 = sext i32 %233 to i64
  %244 = sext i32 %235 to i64
  %245 = icmp sgt i64 %238, %239
  %246 = select i1 %245, i64 %238, i64 %239
  %247 = add nsw i64 %246, 1
  %248 = sub nsw i64 %247, %238
  %249 = icmp ult i64 %248, 4
  br i1 %249, label %250, label %252

250:                                              ; preds = %310, %241
  %251 = phi i64 [ %243, %241 ], [ %254, %310 ]
  br label %320

252:                                              ; preds = %241
  %253 = and i64 %248, -4
  %254 = add nsw i64 %253, %243
  %255 = insertelement <2 x double> undef, double %242, i32 0
  %256 = shufflevector <2 x double> %255, <2 x double> undef, <2 x i32> zeroinitializer
  %257 = insertelement <2 x double> undef, double %242, i32 0
  %258 = shufflevector <2 x double> %257, <2 x double> undef, <2 x i32> zeroinitializer
  %259 = add nsw i64 %253, -4
  %260 = lshr exact i64 %259, 2
  %261 = add nuw nsw i64 %260, 1
  %262 = and i64 %261, 1
  %263 = icmp eq i64 %259, 0
  br i1 %263, label %295, label %264

264:                                              ; preds = %252
  %265 = sub nuw nsw i64 %261, %262
  br label %266

266:                                              ; preds = %266, %264
  %267 = phi i64 [ 0, %264 ], [ %292, %266 ]
  %268 = phi i64 [ %265, %264 ], [ %293, %266 ]
  %269 = add i64 %267, %243
  %270 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_l, i64 0, i64 %231, i64 %269
  %271 = bitcast double* %270 to <2 x double>*
  %272 = load <2 x double>, <2 x double>* %271, align 8, !tbaa !27
  %273 = getelementptr inbounds double, double* %270, i64 2
  %274 = bitcast double* %273 to <2 x double>*
  %275 = load <2 x double>, <2 x double>* %274, align 8, !tbaa !27
  %276 = fmul <2 x double> %256, %272
  %277 = fmul <2 x double> %258, %275
  %278 = bitcast double* %270 to <2 x double>*
  store <2 x double> %276, <2 x double>* %278, align 8, !tbaa !27
  %279 = bitcast double* %273 to <2 x double>*
  store <2 x double> %277, <2 x double>* %279, align 8, !tbaa !27
  %280 = or i64 %267, 4
  %281 = add i64 %280, %243
  %282 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_l, i64 0, i64 %231, i64 %281
  %283 = bitcast double* %282 to <2 x double>*
  %284 = load <2 x double>, <2 x double>* %283, align 8, !tbaa !27
  %285 = getelementptr inbounds double, double* %282, i64 2
  %286 = bitcast double* %285 to <2 x double>*
  %287 = load <2 x double>, <2 x double>* %286, align 8, !tbaa !27
  %288 = fmul <2 x double> %256, %284
  %289 = fmul <2 x double> %258, %287
  %290 = bitcast double* %282 to <2 x double>*
  store <2 x double> %288, <2 x double>* %290, align 8, !tbaa !27
  %291 = bitcast double* %285 to <2 x double>*
  store <2 x double> %289, <2 x double>* %291, align 8, !tbaa !27
  %292 = add i64 %267, 8
  %293 = add i64 %268, -2
  %294 = icmp eq i64 %293, 0
  br i1 %294, label %295, label %266, !llvm.loop !285

295:                                              ; preds = %266, %252
  %296 = phi i64 [ 0, %252 ], [ %292, %266 ]
  %297 = icmp eq i64 %262, 0
  br i1 %297, label %310, label %298

298:                                              ; preds = %295
  %299 = add i64 %296, %243
  %300 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_l, i64 0, i64 %231, i64 %299
  %301 = bitcast double* %300 to <2 x double>*
  %302 = load <2 x double>, <2 x double>* %301, align 8, !tbaa !27
  %303 = getelementptr inbounds double, double* %300, i64 2
  %304 = bitcast double* %303 to <2 x double>*
  %305 = load <2 x double>, <2 x double>* %304, align 8, !tbaa !27
  %306 = fmul <2 x double> %256, %302
  %307 = fmul <2 x double> %258, %305
  %308 = bitcast double* %300 to <2 x double>*
  store <2 x double> %306, <2 x double>* %308, align 8, !tbaa !27
  %309 = bitcast double* %303 to <2 x double>*
  store <2 x double> %307, <2 x double>* %309, align 8, !tbaa !27
  br label %310

310:                                              ; preds = %298, %295
  %311 = icmp eq i64 %248, %253
  br i1 %311, label %327, label %250

312:                                              ; preds = %312, %237
  %313 = phi i64 [ %318, %312 ], [ %238, %237 ]
  %314 = phi double [ %317, %312 ], [ 0.000000e+00, %237 ]
  %315 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_l, i64 0, i64 %231, i64 %313
  %316 = load double, double* %315, align 8, !tbaa !27
  %317 = fadd double %314, %316
  %318 = add nsw i64 %313, 1
  %319 = icmp slt i64 %313, %239
  br i1 %319, label %312, label %240

320:                                              ; preds = %320, %250
  %321 = phi i64 [ %325, %320 ], [ %251, %250 ]
  %322 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_l, i64 0, i64 %231, i64 %321
  %323 = load double, double* %322, align 8, !tbaa !27
  %324 = fmul double %242, %323
  store double %324, double* %322, align 8, !tbaa !27
  %325 = add nsw i64 %321, 1
  %326 = icmp slt i64 %321, %244
  br i1 %326, label %320, label %327, !llvm.loop !286

327:                                              ; preds = %320, %310, %240, %230
  %328 = add nuw nsw i64 %231, 1
  %329 = icmp eq i64 %328, %203
  br i1 %329, label %330, label %230

330:                                              ; preds = %327, %201
  %331 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 43
  %332 = load i32, i32* %331, align 8, !tbaa !115
  %333 = icmp eq i32 %332, 1
  %334 = and i1 %333, %168
  br i1 %334, label %335, label %345

335:                                              ; preds = %335, %330
  %336 = phi i64 [ %341, %335 ], [ 0, %330 ]
  %337 = getelementptr inbounds [63 x double], [63 x double]* %16, i64 0, i64 %336
  %338 = load double, double* %337, align 8, !tbaa !27
  %339 = fmul double %338, 0x3FCD791C5F888823
  %340 = tail call double @exp(double %339) #21
  store double %340, double* %337, align 8, !tbaa !27
  %341 = add nuw nsw i64 %336, 1
  %342 = load i32, i32* @L3psycho_anal.npart_s, align 4, !tbaa !18
  %343 = sext i32 %342 to i64
  %344 = icmp slt i64 %341, %343
  br i1 %344, label %335, label %345

345:                                              ; preds = %335, %330
  %346 = phi i32 [ %158, %330 ], [ %342, %335 ]
  %347 = icmp sgt i32 %346, 0
  br i1 %347, label %348, label %452

348:                                              ; preds = %345
  %349 = zext i32 %346 to i64
  br label %350

350:                                              ; preds = %449, %348
  %351 = phi i64 [ 0, %348 ], [ %450, %449 ]
  %352 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind_s, i64 0, i64 %351, i64 0
  %353 = load i32, i32* %352, align 8, !tbaa !18
  %354 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind_s, i64 0, i64 %351, i64 1
  %355 = load i32, i32* %354, align 4, !tbaa !18
  %356 = icmp sgt i32 %353, %355
  br i1 %356, label %449, label %357

357:                                              ; preds = %350
  %358 = sext i32 %353 to i64
  %359 = sext i32 %355 to i64
  br label %434

360:                                              ; preds = %434
  br i1 %356, label %449, label %361

361:                                              ; preds = %360
  %362 = getelementptr inbounds [63 x double], [63 x double]* %16, i64 0, i64 %351
  %363 = load double, double* %362, align 8, !tbaa !27
  %364 = fdiv double %363, %439
  %365 = sext i32 %353 to i64
  %366 = sext i32 %355 to i64
  %367 = icmp sgt i64 %358, %359
  %368 = select i1 %367, i64 %358, i64 %359
  %369 = add nsw i64 %368, 1
  %370 = sub nsw i64 %369, %358
  %371 = icmp ult i64 %370, 4
  br i1 %371, label %372, label %374

372:                                              ; preds = %432, %361
  %373 = phi i64 [ %365, %361 ], [ %376, %432 ]
  br label %442

374:                                              ; preds = %361
  %375 = and i64 %370, -4
  %376 = add nsw i64 %375, %365
  %377 = insertelement <2 x double> undef, double %364, i32 0
  %378 = shufflevector <2 x double> %377, <2 x double> undef, <2 x i32> zeroinitializer
  %379 = insertelement <2 x double> undef, double %364, i32 0
  %380 = shufflevector <2 x double> %379, <2 x double> undef, <2 x i32> zeroinitializer
  %381 = add nsw i64 %375, -4
  %382 = lshr exact i64 %381, 2
  %383 = add nuw nsw i64 %382, 1
  %384 = and i64 %383, 1
  %385 = icmp eq i64 %381, 0
  br i1 %385, label %417, label %386

386:                                              ; preds = %374
  %387 = sub nuw nsw i64 %383, %384
  br label %388

388:                                              ; preds = %388, %386
  %389 = phi i64 [ 0, %386 ], [ %414, %388 ]
  %390 = phi i64 [ %387, %386 ], [ %415, %388 ]
  %391 = add i64 %389, %365
  %392 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_s, i64 0, i64 %351, i64 %391
  %393 = bitcast double* %392 to <2 x double>*
  %394 = load <2 x double>, <2 x double>* %393, align 8, !tbaa !27
  %395 = getelementptr inbounds double, double* %392, i64 2
  %396 = bitcast double* %395 to <2 x double>*
  %397 = load <2 x double>, <2 x double>* %396, align 8, !tbaa !27
  %398 = fmul <2 x double> %394, %378
  %399 = fmul <2 x double> %397, %380
  %400 = bitcast double* %392 to <2 x double>*
  store <2 x double> %398, <2 x double>* %400, align 8, !tbaa !27
  %401 = bitcast double* %395 to <2 x double>*
  store <2 x double> %399, <2 x double>* %401, align 8, !tbaa !27
  %402 = or i64 %389, 4
  %403 = add i64 %402, %365
  %404 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_s, i64 0, i64 %351, i64 %403
  %405 = bitcast double* %404 to <2 x double>*
  %406 = load <2 x double>, <2 x double>* %405, align 8, !tbaa !27
  %407 = getelementptr inbounds double, double* %404, i64 2
  %408 = bitcast double* %407 to <2 x double>*
  %409 = load <2 x double>, <2 x double>* %408, align 8, !tbaa !27
  %410 = fmul <2 x double> %406, %378
  %411 = fmul <2 x double> %409, %380
  %412 = bitcast double* %404 to <2 x double>*
  store <2 x double> %410, <2 x double>* %412, align 8, !tbaa !27
  %413 = bitcast double* %407 to <2 x double>*
  store <2 x double> %411, <2 x double>* %413, align 8, !tbaa !27
  %414 = add i64 %389, 8
  %415 = add i64 %390, -2
  %416 = icmp eq i64 %415, 0
  br i1 %416, label %417, label %388, !llvm.loop !287

417:                                              ; preds = %388, %374
  %418 = phi i64 [ 0, %374 ], [ %414, %388 ]
  %419 = icmp eq i64 %384, 0
  br i1 %419, label %432, label %420

420:                                              ; preds = %417
  %421 = add i64 %418, %365
  %422 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_s, i64 0, i64 %351, i64 %421
  %423 = bitcast double* %422 to <2 x double>*
  %424 = load <2 x double>, <2 x double>* %423, align 8, !tbaa !27
  %425 = getelementptr inbounds double, double* %422, i64 2
  %426 = bitcast double* %425 to <2 x double>*
  %427 = load <2 x double>, <2 x double>* %426, align 8, !tbaa !27
  %428 = fmul <2 x double> %424, %378
  %429 = fmul <2 x double> %427, %380
  %430 = bitcast double* %422 to <2 x double>*
  store <2 x double> %428, <2 x double>* %430, align 8, !tbaa !27
  %431 = bitcast double* %425 to <2 x double>*
  store <2 x double> %429, <2 x double>* %431, align 8, !tbaa !27
  br label %432

432:                                              ; preds = %420, %417
  %433 = icmp eq i64 %370, %375
  br i1 %433, label %449, label %372

434:                                              ; preds = %434, %357
  %435 = phi i64 [ %440, %434 ], [ %358, %357 ]
  %436 = phi double [ %439, %434 ], [ 0.000000e+00, %357 ]
  %437 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_s, i64 0, i64 %351, i64 %435
  %438 = load double, double* %437, align 8, !tbaa !27
  %439 = fadd double %436, %438
  %440 = add nsw i64 %435, 1
  %441 = icmp slt i64 %435, %359
  br i1 %441, label %434, label %360

442:                                              ; preds = %442, %372
  %443 = phi i64 [ %447, %442 ], [ %373, %372 ]
  %444 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_s, i64 0, i64 %351, i64 %443
  %445 = load double, double* %444, align 8, !tbaa !27
  %446 = fmul double %445, %364
  store double %446, double* %444, align 8, !tbaa !27
  %447 = add nsw i64 %443, 1
  %448 = icmp slt i64 %443, %366
  br i1 %448, label %442, label %449, !llvm.loop !288

449:                                              ; preds = %442, %432, %360, %350
  %450 = add nuw nsw i64 %351, 1
  %451 = icmp ult i64 %450, %349
  br i1 %451, label %350, label %452

452:                                              ; preds = %449, %345
  tail call void @init_fft() #21
  call void @llvm.lifetime.end.p0i8(i64 504, i8* nonnull %25) #21
  br label %453

453:                                              ; preds = %452, %11
  %454 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 46
  %455 = load i32, i32* %454, align 4, !tbaa !126
  %456 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 8
  %457 = load i32, i32* %456, align 4, !tbaa !121
  %458 = icmp eq i32 %457, 1
  %459 = select i1 %458, i32 4, i32 %455
  %460 = icmp sgt i32 %459, 0
  br i1 %460, label %461, label %1444

461:                                              ; preds = %453
  %462 = sext i32 %2 to i64
  %463 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 37
  %464 = zext i32 %459 to i64
  br label %465

465:                                              ; preds = %1362, %461
  %466 = phi i64 [ 0, %461 ], [ %1363, %1362 ]
  %467 = trunc i64 %466 to i32
  %468 = and i64 %466, 1
  %469 = getelementptr inbounds [2 x [1024 x float]], [2 x [1024 x float]]* @L3psycho_anal.wsamp_L, i64 0, i64 %468
  %470 = icmp ult i64 %466, 2
  br i1 %470, label %471, label %487

471:                                              ; preds = %465
  %472 = getelementptr inbounds [1024 x float], [1024 x float]* %469, i64 0, i64 0
  tail call void @fft_long(float* nonnull %472, i32 %467, i16** %1) #21
  %473 = getelementptr inbounds [2 x [3 x [256 x float]]], [2 x [3 x [256 x float]]]* @L3psycho_anal.wsamp_S, i64 0, i64 %468, i64 0
  tail call void @fft_short([256 x float]* nonnull %473, i32 %467, i16** %1) #21
  %474 = getelementptr inbounds [4 x double], [4 x double]* @L3psycho_anal.pe, i64 0, i64 %466
  %475 = bitcast double* %474 to i64*
  %476 = load i64, i64* %475, align 8, !tbaa !27
  %477 = getelementptr inbounds double, double* %8, i64 %466
  %478 = bitcast double* %477 to i64*
  store i64 %476, i64* %478, align 8, !tbaa !27
  %479 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %6, i64 %462, i64 %466
  %480 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i64 0, i64 %466
  %481 = bitcast %struct.III_psy_ratio* %479 to i8*
  %482 = bitcast %struct.III_psy_xmin* %480 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(488) %481, i8* nonnull align 8 dereferenceable(488) %482, i64 488, i1 false), !tbaa.struct !289
  %483 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %6, i64 %462, i64 %466, i32 1
  %484 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.en, i64 0, i64 %466
  %485 = bitcast %struct.III_psy_xmin* %483 to i8*
  %486 = bitcast %struct.III_psy_xmin* %484 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(488) %485, i8* nonnull align 8 dereferenceable(488) %486, i64 488, i1 false), !tbaa.struct !289
  br label %572

487:                                              ; preds = %465
  %488 = getelementptr inbounds [4 x double], [4 x double]* @L3psycho_anal.pe, i64 0, i64 %466
  %489 = bitcast double* %488 to i64*
  %490 = load i64, i64* %489, align 8, !tbaa !27
  %491 = add nsw i64 %466, -2
  %492 = getelementptr inbounds double, double* %9, i64 %491
  %493 = bitcast double* %492 to i64*
  store i64 %490, i64* %493, align 8, !tbaa !27
  %494 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %7, i64 %462, i64 %491, i32 1
  %495 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.en, i64 0, i64 %466
  %496 = bitcast %struct.III_psy_xmin* %494 to i8*
  %497 = bitcast %struct.III_psy_xmin* %495 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(488) %496, i8* nonnull align 8 dereferenceable(488) %497, i64 488, i1 false), !tbaa.struct !289
  %498 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %7, i64 %462, i64 %491, i32 0
  %499 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i64 0, i64 %466
  %500 = bitcast %struct.III_psy_xmin* %498 to i8*
  %501 = bitcast %struct.III_psy_xmin* %499 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(488) %500, i8* nonnull align 8 dereferenceable(488) %501, i64 488, i1 false), !tbaa.struct !289
  %502 = icmp eq i64 %466, 2
  br i1 %502, label %503, label %572

503:                                              ; preds = %503, %487
  %504 = phi i64 [ %524, %503 ], [ 0, %487 ]
  %505 = sub i64 1023, %504
  %506 = getelementptr inbounds [2 x [1024 x float]], [2 x [1024 x float]]* @L3psycho_anal.wsamp_L, i64 0, i64 0, i64 %505
  %507 = getelementptr inbounds float, float* %506, i64 -3
  %508 = bitcast float* %507 to <4 x float>*
  %509 = load <4 x float>, <4 x float>* %508, align 4, !tbaa !33
  %510 = shufflevector <4 x float> %509, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %511 = getelementptr inbounds [2 x [1024 x float]], [2 x [1024 x float]]* @L3psycho_anal.wsamp_L, i64 0, i64 1, i64 %505
  %512 = getelementptr inbounds float, float* %511, i64 -3
  %513 = bitcast float* %512 to <4 x float>*
  %514 = load <4 x float>, <4 x float>* %513, align 4, !tbaa !33
  %515 = shufflevector <4 x float> %514, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %516 = fadd <4 x float> %510, %515
  %517 = fmul <4 x float> %516, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %518 = shufflevector <4 x float> %517, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %519 = bitcast float* %507 to <4 x float>*
  store <4 x float> %518, <4 x float>* %519, align 4, !tbaa !33
  %520 = fsub <4 x float> %510, %515
  %521 = fmul <4 x float> %520, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %522 = shufflevector <4 x float> %521, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %523 = bitcast float* %512 to <4 x float>*
  store <4 x float> %522, <4 x float>* %523, align 4, !tbaa !33
  %524 = add i64 %504, 4
  %525 = icmp eq i64 %524, 1024
  br i1 %525, label %526, label %503, !llvm.loop !290

526:                                              ; preds = %526, %503
  %527 = phi i64 [ %547, %526 ], [ 0, %503 ]
  %528 = sub i64 255, %527
  %529 = getelementptr inbounds [2 x [3 x [256 x float]]], [2 x [3 x [256 x float]]]* @L3psycho_anal.wsamp_S, i64 0, i64 0, i64 2, i64 %528
  %530 = getelementptr inbounds float, float* %529, i64 -3
  %531 = bitcast float* %530 to <4 x float>*
  %532 = load <4 x float>, <4 x float>* %531, align 4, !tbaa !33
  %533 = shufflevector <4 x float> %532, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %534 = getelementptr inbounds [2 x [3 x [256 x float]]], [2 x [3 x [256 x float]]]* @L3psycho_anal.wsamp_S, i64 0, i64 1, i64 2, i64 %528
  %535 = getelementptr inbounds float, float* %534, i64 -3
  %536 = bitcast float* %535 to <4 x float>*
  %537 = load <4 x float>, <4 x float>* %536, align 4, !tbaa !33
  %538 = shufflevector <4 x float> %537, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %539 = fadd <4 x float> %533, %538
  %540 = fmul <4 x float> %539, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %541 = shufflevector <4 x float> %540, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %542 = bitcast float* %530 to <4 x float>*
  store <4 x float> %541, <4 x float>* %542, align 4, !tbaa !33
  %543 = fsub <4 x float> %533, %538
  %544 = fmul <4 x float> %543, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %545 = shufflevector <4 x float> %544, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %546 = bitcast float* %535 to <4 x float>*
  store <4 x float> %545, <4 x float>* %546, align 4, !tbaa !33
  %547 = add i64 %527, 4
  %548 = icmp eq i64 %547, 256
  br i1 %548, label %549, label %526, !llvm.loop !291

549:                                              ; preds = %549, %526
  %550 = phi i64 [ %570, %549 ], [ 0, %526 ]
  %551 = sub i64 255, %550
  %552 = getelementptr inbounds [2 x [3 x [256 x float]]], [2 x [3 x [256 x float]]]* @L3psycho_anal.wsamp_S, i64 0, i64 0, i64 1, i64 %551
  %553 = getelementptr inbounds float, float* %552, i64 -3
  %554 = bitcast float* %553 to <4 x float>*
  %555 = load <4 x float>, <4 x float>* %554, align 4, !tbaa !33
  %556 = shufflevector <4 x float> %555, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %557 = getelementptr inbounds [2 x [3 x [256 x float]]], [2 x [3 x [256 x float]]]* @L3psycho_anal.wsamp_S, i64 0, i64 1, i64 1, i64 %551
  %558 = getelementptr inbounds float, float* %557, i64 -3
  %559 = bitcast float* %558 to <4 x float>*
  %560 = load <4 x float>, <4 x float>* %559, align 4, !tbaa !33
  %561 = shufflevector <4 x float> %560, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %562 = fadd <4 x float> %556, %561
  %563 = fmul <4 x float> %562, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %564 = shufflevector <4 x float> %563, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %565 = bitcast float* %553 to <4 x float>*
  store <4 x float> %564, <4 x float>* %565, align 4, !tbaa !33
  %566 = fsub <4 x float> %556, %561
  %567 = fmul <4 x float> %566, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %568 = shufflevector <4 x float> %567, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %569 = bitcast float* %558 to <4 x float>*
  store <4 x float> %568, <4 x float>* %569, align 4, !tbaa !33
  %570 = add i64 %550, 4
  %571 = icmp eq i64 %570, 256
  br i1 %571, label %1682, label %549, !llvm.loop !292

572:                                              ; preds = %1682, %487, %471
  %573 = getelementptr inbounds [1024 x float], [1024 x float]* %469, i64 0, i64 0
  %574 = load float, float* %573, align 16, !tbaa !33
  %575 = fmul float %574, %574
  store float %575, float* getelementptr inbounds ([513 x float], [513 x float]* @L3psycho_anal.energy, i64 0, i64 0), align 16, !tbaa !33
  %576 = getelementptr inbounds [4 x float], [4 x float]* %12, i64 0, i64 %466
  store float %575, float* %576, align 4, !tbaa !33
  br label %614

577:                                              ; preds = %614
  store float %628, float* %576, align 4, !tbaa !33
  %578 = getelementptr inbounds [2 x [3 x [256 x float]]], [2 x [3 x [256 x float]]]* @L3psycho_anal.wsamp_S, i64 0, i64 %468, i64 2, i64 0
  %579 = load float, float* %578, align 16, !tbaa !33
  %580 = fmul float %579, %579
  store float %580, float* getelementptr inbounds ([3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i64 0, i64 2, i64 0), align 8, !tbaa !33
  br label %581

581:                                              ; preds = %581, %577
  %582 = phi i64 [ 0, %577 ], [ %612, %581 ]
  %583 = or i64 %582, 1
  %584 = getelementptr inbounds [2 x [3 x [256 x float]]], [2 x [3 x [256 x float]]]* @L3psycho_anal.wsamp_S, i64 0, i64 %468, i64 2, i64 %583
  %585 = bitcast float* %584 to <4 x float>*
  %586 = load <4 x float>, <4 x float>* %585, align 4, !tbaa !33
  %587 = getelementptr inbounds float, float* %584, i64 4
  %588 = bitcast float* %587 to <4 x float>*
  %589 = load <4 x float>, <4 x float>* %588, align 4, !tbaa !33
  %590 = sub i64 255, %582
  %591 = getelementptr inbounds [2 x [3 x [256 x float]]], [2 x [3 x [256 x float]]]* @L3psycho_anal.wsamp_S, i64 0, i64 %468, i64 2, i64 %590
  %592 = getelementptr inbounds float, float* %591, i64 -3
  %593 = bitcast float* %592 to <4 x float>*
  %594 = load <4 x float>, <4 x float>* %593, align 4, !tbaa !33
  %595 = getelementptr inbounds float, float* %591, i64 -7
  %596 = bitcast float* %595 to <4 x float>*
  %597 = load <4 x float>, <4 x float>* %596, align 4, !tbaa !33
  %598 = fmul <4 x float> %586, %586
  %599 = fmul <4 x float> %589, %589
  %600 = fmul <4 x float> %594, %594
  %601 = shufflevector <4 x float> %600, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %602 = fmul <4 x float> %597, %597
  %603 = shufflevector <4 x float> %602, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %604 = fadd <4 x float> %598, %601
  %605 = fadd <4 x float> %599, %603
  %606 = fmul <4 x float> %604, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %607 = fmul <4 x float> %605, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %608 = getelementptr inbounds [3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i64 0, i64 2, i64 %583
  %609 = bitcast float* %608 to <4 x float>*
  store <4 x float> %606, <4 x float>* %609, align 4, !tbaa !33
  %610 = getelementptr inbounds float, float* %608, i64 4
  %611 = bitcast float* %610 to <4 x float>*
  store <4 x float> %607, <4 x float>* %611, align 4, !tbaa !33
  %612 = add i64 %582, 8
  %613 = icmp eq i64 %612, 128
  br i1 %613, label %631, label %581, !llvm.loop !293

614:                                              ; preds = %614, %572
  %615 = phi i64 [ 511, %572 ], [ %629, %614 ]
  %616 = phi float [ %575, %572 ], [ %628, %614 ]
  %617 = sub nuw nsw i64 512, %615
  %618 = getelementptr inbounds [2 x [1024 x float]], [2 x [1024 x float]]* @L3psycho_anal.wsamp_L, i64 0, i64 %468, i64 %617
  %619 = load float, float* %618, align 4, !tbaa !33
  %620 = add nuw nsw i64 %615, 512
  %621 = getelementptr inbounds [2 x [1024 x float]], [2 x [1024 x float]]* @L3psycho_anal.wsamp_L, i64 0, i64 %468, i64 %620
  %622 = load float, float* %621, align 4, !tbaa !33
  %623 = fmul float %619, %619
  %624 = fmul float %622, %622
  %625 = fadd float %623, %624
  %626 = fmul float %625, 5.000000e-01
  %627 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.energy, i64 0, i64 %617
  store float %626, float* %627, align 4, !tbaa !33
  %628 = fadd float %616, %626
  %629 = add nsw i64 %615, -1
  %630 = icmp eq i64 %615, 0
  br i1 %630, label %577, label %614

631:                                              ; preds = %581
  %632 = getelementptr inbounds [2 x [3 x [256 x float]]], [2 x [3 x [256 x float]]]* @L3psycho_anal.wsamp_S, i64 0, i64 %468, i64 1, i64 0
  %633 = load float, float* %632, align 16, !tbaa !33
  %634 = fmul float %633, %633
  store float %634, float* getelementptr inbounds ([3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i64 0, i64 1, i64 0), align 4, !tbaa !33
  br label %635

635:                                              ; preds = %635, %631
  %636 = phi i64 [ 0, %631 ], [ %666, %635 ]
  %637 = or i64 %636, 1
  %638 = getelementptr inbounds [2 x [3 x [256 x float]]], [2 x [3 x [256 x float]]]* @L3psycho_anal.wsamp_S, i64 0, i64 %468, i64 1, i64 %637
  %639 = bitcast float* %638 to <4 x float>*
  %640 = load <4 x float>, <4 x float>* %639, align 4, !tbaa !33
  %641 = getelementptr inbounds float, float* %638, i64 4
  %642 = bitcast float* %641 to <4 x float>*
  %643 = load <4 x float>, <4 x float>* %642, align 4, !tbaa !33
  %644 = sub i64 255, %636
  %645 = getelementptr inbounds [2 x [3 x [256 x float]]], [2 x [3 x [256 x float]]]* @L3psycho_anal.wsamp_S, i64 0, i64 %468, i64 1, i64 %644
  %646 = getelementptr inbounds float, float* %645, i64 -3
  %647 = bitcast float* %646 to <4 x float>*
  %648 = load <4 x float>, <4 x float>* %647, align 4, !tbaa !33
  %649 = getelementptr inbounds float, float* %645, i64 -7
  %650 = bitcast float* %649 to <4 x float>*
  %651 = load <4 x float>, <4 x float>* %650, align 4, !tbaa !33
  %652 = fmul <4 x float> %640, %640
  %653 = fmul <4 x float> %643, %643
  %654 = fmul <4 x float> %648, %648
  %655 = shufflevector <4 x float> %654, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %656 = fmul <4 x float> %651, %651
  %657 = shufflevector <4 x float> %656, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %658 = fadd <4 x float> %652, %655
  %659 = fadd <4 x float> %653, %657
  %660 = fmul <4 x float> %658, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %661 = fmul <4 x float> %659, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %662 = getelementptr inbounds [3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i64 0, i64 1, i64 %637
  %663 = bitcast float* %662 to <4 x float>*
  store <4 x float> %660, <4 x float>* %663, align 4, !tbaa !33
  %664 = getelementptr inbounds float, float* %662, i64 4
  %665 = bitcast float* %664 to <4 x float>*
  store <4 x float> %661, <4 x float>* %665, align 4, !tbaa !33
  %666 = add i64 %636, 8
  %667 = icmp eq i64 %666, 128
  br i1 %667, label %1705, label %635, !llvm.loop !294

668:                                              ; preds = %1742, %748
  %669 = phi i32 [ 0, %1742 ], [ %753, %748 ]
  %670 = load i32, i32* @L3psycho_anal.cw_upper_index, align 4, !tbaa !18
  %671 = icmp slt i32 %669, %670
  br i1 %671, label %672, label %756

672:                                              ; preds = %668
  %673 = zext i32 %669 to i64
  br label %759

674:                                              ; preds = %1742, %748
  %675 = phi i64 [ %751, %748 ], [ 0, %1742 ]
  %676 = getelementptr inbounds [4 x [2 x [513 x float]]], [4 x [2 x [513 x float]]]* @L3psycho_anal.ax_sav, i64 0, i64 %466, i64 1, i64 %675
  %677 = load float, float* %676, align 4, !tbaa !33
  %678 = getelementptr inbounds [4 x [2 x [513 x float]]], [4 x [2 x [513 x float]]]* @L3psycho_anal.bx_sav, i64 0, i64 %466, i64 1, i64 %675
  %679 = load float, float* %678, align 4, !tbaa !33
  %680 = getelementptr inbounds [4 x [2 x [513 x float]]], [4 x [2 x [513 x float]]]* @L3psycho_anal.rx_sav, i64 0, i64 %466, i64 1, i64 %675
  %681 = load float, float* %680, align 4, !tbaa !33
  %682 = getelementptr inbounds [4 x [2 x [513 x float]]], [4 x [2 x [513 x float]]]* @L3psycho_anal.ax_sav, i64 0, i64 %466, i64 0, i64 %675
  %683 = load float, float* %682, align 4, !tbaa !33
  store float %683, float* %676, align 4, !tbaa !33
  %684 = getelementptr inbounds [4 x [2 x [513 x float]]], [4 x [2 x [513 x float]]]* @L3psycho_anal.bx_sav, i64 0, i64 %466, i64 0, i64 %675
  %685 = load float, float* %684, align 4, !tbaa !33
  store float %685, float* %678, align 4, !tbaa !33
  %686 = getelementptr inbounds [4 x [2 x [513 x float]]], [4 x [2 x [513 x float]]]* @L3psycho_anal.rx_sav, i64 0, i64 %466, i64 0, i64 %675
  %687 = load float, float* %686, align 4, !tbaa !33
  store float %687, float* %680, align 4, !tbaa !33
  %688 = getelementptr inbounds [2 x [1024 x float]], [2 x [1024 x float]]* @L3psycho_anal.wsamp_L, i64 0, i64 %468, i64 %675
  %689 = load float, float* %688, align 4, !tbaa !33
  store float %689, float* %682, align 4, !tbaa !33
  %690 = icmp eq i64 %675, 0
  %691 = sub nuw nsw i64 1024, %675
  %692 = getelementptr inbounds [2 x [1024 x float]], [2 x [1024 x float]]* @L3psycho_anal.wsamp_L, i64 0, i64 %468, i64 %691
  %693 = select i1 %690, float* %573, float* %692
  %694 = load float, float* %693, align 4, !tbaa !33
  store float %694, float* %684, align 4, !tbaa !33
  %695 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.energy, i64 0, i64 %675
  %696 = load float, float* %695, align 4, !tbaa !33
  %697 = tail call float @sqrtf(float %696) #4
  store float %697, float* %686, align 4, !tbaa !33
  %698 = fcmp une float %687, 0.000000e+00
  br i1 %698, label %699, label %706

699:                                              ; preds = %674
  %700 = fmul float %683, %685
  %701 = fmul float %683, %683
  %702 = fmul float %685, %685
  %703 = fsub float %701, %702
  %704 = fmul float %703, 5.000000e-01
  %705 = fmul float %687, %687
  br label %706

706:                                              ; preds = %699, %674
  %707 = phi float [ %705, %699 ], [ 1.000000e+00, %674 ]
  %708 = phi float [ %704, %699 ], [ 0.000000e+00, %674 ]
  %709 = phi float [ %700, %699 ], [ 1.000000e+00, %674 ]
  %710 = fcmp une float %681, 0.000000e+00
  br i1 %710, label %711, label %721

711:                                              ; preds = %706
  %712 = fadd float %708, %709
  %713 = fadd float %677, %679
  %714 = fmul float %713, %712
  %715 = fmul float %714, 5.000000e-01
  %716 = fmul float %677, %709
  %717 = fsub float %715, %716
  %718 = fmul float %679, %708
  %719 = fsub float %715, %718
  %720 = fmul float %681, %707
  br label %721

721:                                              ; preds = %711, %706
  %722 = phi float [ %720, %711 ], [ %707, %706 ]
  %723 = phi float [ %717, %711 ], [ %708, %706 ]
  %724 = phi float [ %719, %711 ], [ %709, %706 ]
  %725 = fmul float %687, 2.000000e+00
  %726 = fsub float %725, %681
  %727 = fdiv float %726, %722
  %728 = tail call float @llvm.fabs.f32(float %726)
  %729 = fadd float %728, %697
  %730 = fcmp une float %729, 0.000000e+00
  br i1 %730, label %731, label %748

731:                                              ; preds = %721
  %732 = fmul float %723, %727
  %733 = fmul float %727, %724
  %734 = fadd float %689, %694
  %735 = fmul float %734, 5.000000e-01
  %736 = fsub float %735, %733
  %737 = fsub float %689, %694
  %738 = fmul float %737, 5.000000e-01
  %739 = fsub float %738, %732
  %740 = fmul float %736, %736
  %741 = fmul float %739, %739
  %742 = fadd float %741, %740
  %743 = fpext float %742 to double
  %744 = tail call double @sqrt(double %743) #21
  %745 = fpext float %729 to double
  %746 = fdiv double %744, %745
  %747 = fptrunc double %746 to float
  br label %748

748:                                              ; preds = %731, %721
  %749 = phi float [ %747, %731 ], [ %729, %721 ]
  %750 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.cw, i64 0, i64 %675
  store float %749, float* %750, align 4, !tbaa !33
  %751 = add nuw nsw i64 %675, 1
  %752 = load i1, i1* @L3psycho_anal.cw_lower_index, align 4
  %753 = select i1 %752, i32 6, i32 0
  %754 = zext i32 %753 to i64
  %755 = icmp ult i64 %751, %754
  br i1 %755, label %674, label %668

756:                                              ; preds = %843, %668
  %757 = phi i32 [ %670, %668 ], [ %853, %843 ]
  %758 = icmp sgt i32 %757, 0
  br i1 %758, label %865, label %858

759:                                              ; preds = %843, %672
  %760 = phi i64 [ %673, %672 ], [ %852, %843 ]
  %761 = add nuw nsw i64 %760, 2
  %762 = trunc i64 %761 to i32
  %763 = lshr i32 %762, 2
  %764 = zext i32 %763 to i64
  %765 = getelementptr inbounds [3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i64 0, i64 0, i64 %764
  %766 = load float, float* %765, align 4, !tbaa !33
  %767 = fcmp une float %766, 0.000000e+00
  br i1 %767, label %768, label %781

768:                                              ; preds = %759
  %769 = getelementptr inbounds [2 x [3 x [256 x float]]], [2 x [3 x [256 x float]]]* @L3psycho_anal.wsamp_S, i64 0, i64 %468, i64 0, i64 %764
  %770 = load float, float* %769, align 4, !tbaa !33
  %771 = sub nsw i32 256, %763
  %772 = sext i32 %771 to i64
  %773 = getelementptr inbounds [2 x [3 x [256 x float]]], [2 x [3 x [256 x float]]]* @L3psycho_anal.wsamp_S, i64 0, i64 %468, i64 0, i64 %772
  %774 = load float, float* %773, align 4, !tbaa !33
  %775 = fmul float %770, %774
  %776 = fmul float %770, %770
  %777 = fmul float %774, %774
  %778 = fsub float %776, %777
  %779 = fmul float %778, 5.000000e-01
  %780 = tail call float @sqrtf(float %766) #4
  br label %781

781:                                              ; preds = %768, %759
  %782 = phi float [ %780, %768 ], [ %766, %759 ]
  %783 = phi float [ %775, %768 ], [ 1.000000e+00, %759 ]
  %784 = phi float [ %779, %768 ], [ 0.000000e+00, %759 ]
  %785 = phi float [ %766, %768 ], [ 1.000000e+00, %759 ]
  %786 = getelementptr inbounds [3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i64 0, i64 2, i64 %764
  %787 = load float, float* %786, align 4, !tbaa !33
  %788 = fcmp une float %787, 0.000000e+00
  br i1 %788, label %789, label %806

789:                                              ; preds = %781
  %790 = getelementptr inbounds [2 x [3 x [256 x float]]], [2 x [3 x [256 x float]]]* @L3psycho_anal.wsamp_S, i64 0, i64 %468, i64 2, i64 %764
  %791 = load float, float* %790, align 4, !tbaa !33
  %792 = sub nsw i32 256, %763
  %793 = sext i32 %792 to i64
  %794 = getelementptr inbounds [2 x [3 x [256 x float]]], [2 x [3 x [256 x float]]]* @L3psycho_anal.wsamp_S, i64 0, i64 %468, i64 2, i64 %793
  %795 = load float, float* %794, align 4, !tbaa !33
  %796 = fadd float %783, %784
  %797 = fadd float %791, %795
  %798 = fmul float %796, %797
  %799 = fmul float %798, 5.000000e-01
  %800 = fmul float %783, %791
  %801 = fsub float %799, %800
  %802 = fmul float %784, %795
  %803 = fsub float %799, %802
  %804 = tail call float @sqrtf(float %787) #4
  %805 = fmul float %785, %804
  br label %806

806:                                              ; preds = %789, %781
  %807 = phi float [ %804, %789 ], [ %787, %781 ]
  %808 = phi float [ %803, %789 ], [ %783, %781 ]
  %809 = phi float [ %801, %789 ], [ %784, %781 ]
  %810 = phi float [ %805, %789 ], [ %785, %781 ]
  %811 = fmul float %782, 2.000000e+00
  %812 = fsub float %811, %807
  %813 = fdiv float %812, %810
  %814 = getelementptr inbounds [3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i64 0, i64 1, i64 %764
  %815 = load float, float* %814, align 4, !tbaa !33
  %816 = tail call float @sqrtf(float %815) #4
  %817 = tail call float @llvm.fabs.f32(float %812)
  %818 = fadd float %817, %816
  %819 = fcmp une float %818, 0.000000e+00
  br i1 %819, label %820, label %843

820:                                              ; preds = %806
  %821 = fmul float %809, %813
  %822 = fmul float %808, %813
  %823 = getelementptr inbounds [2 x [3 x [256 x float]]], [2 x [3 x [256 x float]]]* @L3psycho_anal.wsamp_S, i64 0, i64 %468, i64 1, i64 %764
  %824 = load float, float* %823, align 4, !tbaa !33
  %825 = sub nsw i32 256, %763
  %826 = sext i32 %825 to i64
  %827 = getelementptr inbounds [2 x [3 x [256 x float]]], [2 x [3 x [256 x float]]]* @L3psycho_anal.wsamp_S, i64 0, i64 %468, i64 1, i64 %826
  %828 = load float, float* %827, align 4, !tbaa !33
  %829 = fadd float %824, %828
  %830 = fmul float %829, 5.000000e-01
  %831 = fsub float %830, %822
  %832 = fsub float %824, %828
  %833 = fmul float %832, 5.000000e-01
  %834 = fsub float %833, %821
  %835 = fmul float %831, %831
  %836 = fmul float %834, %834
  %837 = fadd float %835, %836
  %838 = fpext float %837 to double
  %839 = tail call double @sqrt(double %838) #21
  %840 = fpext float %818 to double
  %841 = fdiv double %839, %840
  %842 = fptrunc double %841 to float
  br label %843

843:                                              ; preds = %820, %806
  %844 = phi float [ %842, %820 ], [ %818, %806 ]
  %845 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.cw, i64 0, i64 %760
  store float %844, float* %845, align 8, !tbaa !33
  %846 = add nuw nsw i64 %760, 3
  %847 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.cw, i64 0, i64 %846
  store float %844, float* %847, align 4, !tbaa !33
  %848 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.cw, i64 0, i64 %761
  store float %844, float* %848, align 8, !tbaa !33
  %849 = and i64 %760, 4294967294
  %850 = or i64 %849, 1
  %851 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.cw, i64 0, i64 %850
  store float %844, float* %851, align 4, !tbaa !33
  %852 = add nuw i64 %760, 4
  %853 = load i32, i32* @L3psycho_anal.cw_upper_index, align 4, !tbaa !18
  %854 = trunc i64 %852 to i32
  %855 = icmp sgt i32 %853, %854
  br i1 %855, label %759, label %756

856:                                              ; preds = %901
  %857 = trunc i64 %908 to i32
  br label %858

858:                                              ; preds = %856, %756
  %859 = phi i32 [ 0, %756 ], [ %902, %856 ]
  %860 = phi i32 [ 0, %756 ], [ %857, %856 ]
  %861 = load i32, i32* @L3psycho_anal.npart_l_orig, align 4, !tbaa !18
  %862 = icmp slt i32 %860, %861
  br i1 %862, label %863, label %945

863:                                              ; preds = %858
  %864 = zext i32 %860 to i64
  br label %910

865:                                              ; preds = %901, %756
  %866 = phi i64 [ %908, %901 ], [ 0, %756 ]
  %867 = phi i32 [ %902, %901 ], [ 0, %756 ]
  %868 = sext i32 %867 to i64
  %869 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.energy, i64 0, i64 %868
  %870 = load float, float* %869, align 4, !tbaa !33
  %871 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.cw, i64 0, i64 %868
  %872 = load float, float* %871, align 4, !tbaa !33
  %873 = fmul float %870, %872
  %874 = insertelement <2 x float> undef, float %870, i32 0
  %875 = insertelement <2 x float> %874, float %873, i32 1
  %876 = fpext <2 x float> %875 to <2 x double>
  %877 = getelementptr inbounds [63 x i32], [63 x i32]* @L3psycho_anal.numlines_l, i64 0, i64 %866
  %878 = load i32, i32* %877, align 4, !tbaa !18
  %879 = add nsw i32 %867, 1
  %880 = icmp sgt i32 %878, 1
  br i1 %880, label %881, label %901

881:                                              ; preds = %865
  %882 = sext i32 %879 to i64
  br label %883

883:                                              ; preds = %883, %881
  %884 = phi i64 [ %882, %881 ], [ %897, %883 ]
  %885 = phi i32 [ %878, %881 ], [ %887, %883 ]
  %886 = phi <2 x double> [ %876, %881 ], [ %896, %883 ]
  %887 = add nsw i32 %885, -1
  %888 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.energy, i64 0, i64 %884
  %889 = load float, float* %888, align 4, !tbaa !33
  %890 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.cw, i64 0, i64 %884
  %891 = load float, float* %890, align 4, !tbaa !33
  %892 = fmul float %889, %891
  %893 = insertelement <2 x float> undef, float %889, i32 0
  %894 = insertelement <2 x float> %893, float %892, i32 1
  %895 = fpext <2 x float> %894 to <2 x double>
  %896 = fadd <2 x double> %886, %895
  %897 = add nsw i64 %884, 1
  %898 = icmp sgt i32 %885, 2
  br i1 %898, label %883, label %899

899:                                              ; preds = %883
  %900 = trunc i64 %897 to i32
  br label %901

901:                                              ; preds = %899, %865
  %902 = phi i32 [ %879, %865 ], [ %900, %899 ]
  %903 = phi <2 x double> [ %876, %865 ], [ %896, %899 ]
  %904 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i64 0, i64 %866
  %905 = extractelement <2 x double> %903, i32 0
  store double %905, double* %904, align 8, !tbaa !27
  %906 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.cb, i64 0, i64 %866
  %907 = extractelement <2 x double> %903, i32 1
  store double %907, double* %906, align 8, !tbaa !27
  %908 = add nuw i64 %866, 1
  %909 = icmp slt i32 %902, %757
  br i1 %909, label %865, label %856

910:                                              ; preds = %936, %863
  %911 = phi i64 [ %864, %863 ], [ %942, %936 ]
  %912 = phi i32 [ %859, %863 ], [ %938, %936 ]
  %913 = sext i32 %912 to i64
  %914 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.energy, i64 0, i64 %913
  %915 = load float, float* %914, align 4, !tbaa !33
  %916 = fpext float %915 to double
  %917 = getelementptr inbounds [63 x i32], [63 x i32]* @L3psycho_anal.numlines_l, i64 0, i64 %911
  %918 = load i32, i32* %917, align 4, !tbaa !18
  %919 = add i32 %912, 1
  %920 = icmp sgt i32 %918, 1
  br i1 %920, label %921, label %936

921:                                              ; preds = %910
  %922 = sext i32 %919 to i64
  br label %923

923:                                              ; preds = %923, %921
  %924 = phi i64 [ %922, %921 ], [ %932, %923 ]
  %925 = phi double [ %916, %921 ], [ %931, %923 ]
  %926 = phi i32 [ %918, %921 ], [ %927, %923 ]
  %927 = add nsw i32 %926, -1
  %928 = getelementptr inbounds [513 x float], [513 x float]* @L3psycho_anal.energy, i64 0, i64 %924
  %929 = load float, float* %928, align 4, !tbaa !33
  %930 = fpext float %929 to double
  %931 = fadd double %925, %930
  %932 = add nsw i64 %924, 1
  %933 = icmp sgt i32 %926, 2
  br i1 %933, label %923, label %934

934:                                              ; preds = %923
  %935 = trunc i64 %932 to i32
  br label %936

936:                                              ; preds = %934, %910
  %937 = phi double [ %916, %910 ], [ %931, %934 ]
  %938 = phi i32 [ %919, %910 ], [ %935, %934 ]
  %939 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i64 0, i64 %911
  store double %937, double* %939, align 8, !tbaa !27
  %940 = fmul double %937, 4.000000e-01
  %941 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.cb, i64 0, i64 %911
  store double %940, double* %941, align 8, !tbaa !27
  %942 = add nuw nsw i64 %911, 1
  %943 = trunc i64 %942 to i32
  %944 = icmp sgt i32 %861, %943
  br i1 %944, label %910, label %945

945:                                              ; preds = %936, %858
  %946 = getelementptr inbounds [4 x double], [4 x double]* @L3psycho_anal.pe, i64 0, i64 %466
  store double 0.000000e+00, double* %946, align 8, !tbaa !27
  %947 = load i32, i32* @L3psycho_anal.npart_l, align 4, !tbaa !18
  %948 = icmp sgt i32 %947, 0
  br i1 %948, label %949, label %1030

949:                                              ; preds = %1025, %945
  %950 = phi i64 [ %1026, %1025 ], [ 0, %945 ]
  %951 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind, i64 0, i64 %950, i64 0
  %952 = load i32, i32* %951, align 8, !tbaa !18
  %953 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind, i64 0, i64 %950, i64 1
  %954 = load i32, i32* %953, align 4, !tbaa !18
  %955 = icmp sgt i32 %952, %954
  br i1 %955, label %990, label %956

956:                                              ; preds = %949
  %957 = sext i32 %952 to i64
  %958 = sext i32 %954 to i64
  br label %959

959:                                              ; preds = %959, %956
  %960 = phi i64 [ %974, %959 ], [ %957, %956 ]
  %961 = phi <2 x double> [ %973, %959 ], [ zeroinitializer, %956 ]
  %962 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_l, i64 0, i64 %950, i64 %960
  %963 = load double, double* %962, align 8, !tbaa !27
  %964 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i64 0, i64 %960
  %965 = load double, double* %964, align 8, !tbaa !27
  %966 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.cb, i64 0, i64 %960
  %967 = load double, double* %966, align 8, !tbaa !27
  %968 = insertelement <2 x double> undef, double %963, i32 0
  %969 = shufflevector <2 x double> %968, <2 x double> undef, <2 x i32> zeroinitializer
  %970 = insertelement <2 x double> undef, double %967, i32 0
  %971 = insertelement <2 x double> %970, double %965, i32 1
  %972 = fmul <2 x double> %969, %971
  %973 = fadd <2 x double> %961, %972
  %974 = add nsw i64 %960, 1
  %975 = icmp slt i64 %960, %958
  br i1 %975, label %959, label %976

976:                                              ; preds = %959
  %977 = extractelement <2 x double> %973, i32 1
  %978 = fcmp une double %977, 0.000000e+00
  br i1 %978, label %979, label %990

979:                                              ; preds = %976
  %980 = extractelement <2 x double> %973, i32 0
  %981 = fdiv double %980, %977
  %982 = fcmp ugt double %981, 0x3FA8F6869E6F084D
  br i1 %982, label %983, label %990

983:                                              ; preds = %979
  %984 = fcmp ogt double %981, 0x3FDFEDFBDEEA22F7
  br i1 %984, label %990, label %985

985:                                              ; preds = %983
  %986 = tail call double @log(double %981) #21
  %987 = fmul double %986, 0x3FF30298B36105E3
  %988 = fadd double %987, 0x3FEA6FF6E4078667
  %989 = tail call double @exp(double %988) #21
  br label %990

990:                                              ; preds = %985, %983, %979, %976, %949
  %991 = phi double [ %977, %985 ], [ %977, %976 ], [ %977, %979 ], [ %977, %983 ], [ 0.000000e+00, %949 ]
  %992 = phi double [ %989, %985 ], [ %977, %976 ], [ 0x3FB0270AC3F8A9F9, %979 ], [ 1.000000e+00, %983 ], [ 0.000000e+00, %949 ]
  %993 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.minval, i64 0, i64 %950
  %994 = load double, double* %993, align 8, !tbaa !27
  %995 = fcmp olt double %994, %992
  %996 = select i1 %995, double %994, double %992
  %997 = fmul double %991, %996
  %998 = getelementptr inbounds [4 x [63 x double]], [4 x [63 x double]]* @L3psycho_anal.nb_1, i64 0, i64 %466, i64 %950
  %999 = load double, double* %998, align 8, !tbaa !27
  %1000 = fmul double %999, 2.000000e+00
  %1001 = getelementptr inbounds [4 x [63 x double]], [4 x [63 x double]]* @L3psycho_anal.nb_2, i64 0, i64 %466, i64 %950
  %1002 = load double, double* %1001, align 8, !tbaa !27
  %1003 = fmul double %1002, 1.600000e+01
  %1004 = fcmp olt double %1000, %1003
  %1005 = select i1 %1004, double %1000, double %1003
  %1006 = fcmp olt double %997, %1005
  %1007 = select i1 %1006, double %997, double %1005
  %1008 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.qthr_l, i64 0, i64 %950
  %1009 = load double, double* %1008, align 8, !tbaa !27
  %1010 = fcmp ogt double %1009, %1007
  %1011 = select i1 %1010, double %1009, double %1007
  %1012 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i64 0, i64 %950
  store double %1011, double* %1012, align 8, !tbaa !27
  store double %999, double* %1001, align 8, !tbaa !27
  store double %997, double* %998, align 8, !tbaa !27
  %1013 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i64 0, i64 %950
  %1014 = load double, double* %1013, align 8, !tbaa !27
  %1015 = fcmp olt double %1011, %1014
  br i1 %1015, label %1016, label %1025

1016:                                             ; preds = %990
  %1017 = getelementptr inbounds [63 x i32], [63 x i32]* @L3psycho_anal.numlines_l, i64 0, i64 %950
  %1018 = load i32, i32* %1017, align 4, !tbaa !18
  %1019 = sitofp i32 %1018 to double
  %1020 = fdiv double %1011, %1014
  %1021 = tail call double @log(double %1020) #21
  %1022 = fmul double %1021, %1019
  %1023 = load double, double* %946, align 8, !tbaa !27
  %1024 = fsub double %1023, %1022
  store double %1024, double* %946, align 8, !tbaa !27
  br label %1025

1025:                                             ; preds = %1016, %990
  %1026 = add nuw nsw i64 %950, 1
  %1027 = load i32, i32* @L3psycho_anal.npart_l, align 4, !tbaa !18
  %1028 = sext i32 %1027 to i64
  %1029 = icmp slt i64 %1026, %1028
  br i1 %1029, label %949, label %1030

1030:                                             ; preds = %1025, %945
  br i1 %470, label %1032, label %1031

1031:                                             ; preds = %1076, %1071, %1070, %1040, %1035, %1030
  br label %1084

1032:                                             ; preds = %1030
  %1033 = load i32, i32* %463, align 8, !tbaa !235
  %1034 = icmp eq i32 %1033, 0
  br i1 %1034, label %1037, label %1035

1035:                                             ; preds = %1032
  %1036 = getelementptr inbounds [2 x i32], [2 x i32]* %15, i64 0, i64 %466
  store i32 1, i32* %1036, align 4, !tbaa !18
  br label %1031

1037:                                             ; preds = %1032
  %1038 = load double, double* %946, align 8, !tbaa !27
  %1039 = fcmp ogt double %1038, 3.000000e+03
  br i1 %1039, label %1040, label %1042

1040:                                             ; preds = %1037
  %1041 = getelementptr inbounds [2 x i32], [2 x i32]* %15, i64 0, i64 %466
  store i32 0, i32* %1041, align 4, !tbaa !18
  br label %1031

1042:                                             ; preds = %1744, %1037
  %1043 = phi i64 [ %1754, %1744 ], [ 64, %1037 ]
  %1044 = phi float [ %1753, %1744 ], [ 0.000000e+00, %1037 ]
  %1045 = phi float [ %1750, %1744 ], [ 0.000000e+00, %1037 ]
  %1046 = phi float [ %1747, %1744 ], [ 0.000000e+00, %1037 ]
  %1047 = getelementptr inbounds [3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i64 0, i64 0, i64 %1043
  %1048 = load float, float* %1047, align 8, !tbaa !33
  %1049 = fadd float %1046, %1048
  %1050 = getelementptr inbounds [3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i64 0, i64 1, i64 %1043
  %1051 = load float, float* %1050, align 4, !tbaa !33
  %1052 = fadd float %1045, %1051
  %1053 = getelementptr inbounds [3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i64 0, i64 2, i64 %1043
  %1054 = load float, float* %1053, align 8, !tbaa !33
  %1055 = fadd float %1044, %1054
  %1056 = or i64 %1043, 1
  %1057 = icmp eq i64 %1056, 129
  br i1 %1057, label %1058, label %1744

1058:                                             ; preds = %1042
  %1059 = fcmp olt float %1049, %1052
  %1060 = select i1 %1059, float %1049, float %1052
  %1061 = fcmp olt float %1060, %1055
  %1062 = select i1 %1061, float %1060, float %1055
  %1063 = fcmp ogt float %1049, %1052
  %1064 = select i1 %1063, float %1049, float %1052
  %1065 = fcmp ogt float %1064, %1055
  %1066 = select i1 %1065, float %1064, float %1055
  %1067 = getelementptr inbounds [2 x i32], [2 x i32]* %15, i64 0, i64 %466
  store i32 1, i32* %1067, align 4, !tbaa !18
  %1068 = fmul float %1062, 3.000000e+01
  %1069 = fcmp ogt float %1066, %1068
  br i1 %1069, label %1070, label %1071

1070:                                             ; preds = %1058
  store i32 0, i32* %1067, align 4, !tbaa !18
  br label %1031

1071:                                             ; preds = %1058
  %1072 = fmul float %1062, 1.000000e+01
  %1073 = fcmp ogt float %1066, %1072
  %1074 = fcmp ogt double %1038, 1.000000e+03
  %1075 = and i1 %1074, %1073
  br i1 %1075, label %1076, label %1031

1076:                                             ; preds = %1071
  store i32 0, i32* %1067, align 4, !tbaa !18
  br label %1031

1077:                                             ; preds = %1181
  %1078 = load i32, i32* @L3psycho_anal.npart_s_orig, align 4
  %1079 = icmp sgt i32 %1078, 0
  %1080 = load i32, i32* @L3psycho_anal.npart_s, align 4
  %1081 = icmp sgt i32 %1080, 0
  %1082 = zext i32 %1078 to i64
  %1083 = zext i32 %1080 to i64
  br label %1189

1084:                                             ; preds = %1181, %1031
  %1085 = phi i64 [ %1187, %1181 ], [ 0, %1031 ]
  %1086 = getelementptr inbounds [21 x double], [21 x double]* @L3psycho_anal.w1_l, i64 0, i64 %1085
  %1087 = load double, double* %1086, align 8, !tbaa !27
  %1088 = getelementptr inbounds [21 x i32], [21 x i32]* @L3psycho_anal.bu_l, i64 0, i64 %1085
  %1089 = load i32, i32* %1088, align 4, !tbaa !18
  %1090 = sext i32 %1089 to i64
  %1091 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i64 0, i64 %1090
  %1092 = load double, double* %1091, align 8, !tbaa !27
  %1093 = getelementptr inbounds [21 x double], [21 x double]* @L3psycho_anal.w2_l, i64 0, i64 %1085
  %1094 = load double, double* %1093, align 8, !tbaa !27
  %1095 = getelementptr inbounds [21 x i32], [21 x i32]* @L3psycho_anal.bo_l, i64 0, i64 %1085
  %1096 = load i32, i32* %1095, align 4, !tbaa !18
  %1097 = sext i32 %1096 to i64
  %1098 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i64 0, i64 %1097
  %1099 = load double, double* %1098, align 8, !tbaa !27
  %1100 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i64 0, i64 %1090
  %1101 = load double, double* %1100, align 8, !tbaa !27
  %1102 = insertelement <2 x double> undef, double %1087, i32 0
  %1103 = shufflevector <2 x double> %1102, <2 x double> undef, <2 x i32> zeroinitializer
  %1104 = insertelement <2 x double> undef, double %1092, i32 0
  %1105 = insertelement <2 x double> %1104, double %1101, i32 1
  %1106 = fmul <2 x double> %1103, %1105
  %1107 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i64 0, i64 %1097
  %1108 = load double, double* %1107, align 8, !tbaa !27
  %1109 = insertelement <2 x double> undef, double %1094, i32 0
  %1110 = shufflevector <2 x double> %1109, <2 x double> undef, <2 x i32> zeroinitializer
  %1111 = insertelement <2 x double> undef, double %1099, i32 0
  %1112 = insertelement <2 x double> %1111, double %1108, i32 1
  %1113 = fmul <2 x double> %1110, %1112
  %1114 = fadd <2 x double> %1106, %1113
  %1115 = add i32 %1089, 1
  %1116 = icmp slt i32 %1115, %1096
  br i1 %1116, label %1117, label %1181

1117:                                             ; preds = %1084
  %1118 = sext i32 %1115 to i64
  %1119 = xor i32 %1089, 3
  %1120 = add i32 %1096, %1119
  %1121 = add i32 %1096, -2
  %1122 = sub i32 %1121, %1089
  %1123 = and i32 %1120, 3
  %1124 = icmp eq i32 %1123, 0
  br i1 %1124, label %1139, label %1125

1125:                                             ; preds = %1125, %1117
  %1126 = phi i64 [ %1136, %1125 ], [ %1118, %1117 ]
  %1127 = phi <2 x double> [ %1135, %1125 ], [ %1114, %1117 ]
  %1128 = phi i32 [ %1137, %1125 ], [ %1123, %1117 ]
  %1129 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i64 0, i64 %1126
  %1130 = load double, double* %1129, align 8, !tbaa !27
  %1131 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i64 0, i64 %1126
  %1132 = load double, double* %1131, align 8, !tbaa !27
  %1133 = insertelement <2 x double> undef, double %1130, i32 0
  %1134 = insertelement <2 x double> %1133, double %1132, i32 1
  %1135 = fadd <2 x double> %1127, %1134
  %1136 = add nsw i64 %1126, 1
  %1137 = add i32 %1128, -1
  %1138 = icmp eq i32 %1137, 0
  br i1 %1138, label %1139, label %1125, !llvm.loop !295

1139:                                             ; preds = %1125, %1117
  %1140 = phi <2 x double> [ undef, %1117 ], [ %1135, %1125 ]
  %1141 = phi i64 [ %1118, %1117 ], [ %1136, %1125 ]
  %1142 = phi <2 x double> [ %1114, %1117 ], [ %1135, %1125 ]
  %1143 = icmp ult i32 %1122, 3
  br i1 %1143, label %1181, label %1144

1144:                                             ; preds = %1144, %1139
  %1145 = phi i64 [ %1178, %1144 ], [ %1141, %1139 ]
  %1146 = phi <2 x double> [ %1177, %1144 ], [ %1142, %1139 ]
  %1147 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i64 0, i64 %1145
  %1148 = load double, double* %1147, align 8, !tbaa !27
  %1149 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i64 0, i64 %1145
  %1150 = load double, double* %1149, align 8, !tbaa !27
  %1151 = insertelement <2 x double> undef, double %1148, i32 0
  %1152 = insertelement <2 x double> %1151, double %1150, i32 1
  %1153 = fadd <2 x double> %1146, %1152
  %1154 = add nsw i64 %1145, 1
  %1155 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i64 0, i64 %1154
  %1156 = load double, double* %1155, align 8, !tbaa !27
  %1157 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i64 0, i64 %1154
  %1158 = load double, double* %1157, align 8, !tbaa !27
  %1159 = insertelement <2 x double> undef, double %1156, i32 0
  %1160 = insertelement <2 x double> %1159, double %1158, i32 1
  %1161 = fadd <2 x double> %1153, %1160
  %1162 = add nsw i64 %1145, 2
  %1163 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i64 0, i64 %1162
  %1164 = load double, double* %1163, align 8, !tbaa !27
  %1165 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i64 0, i64 %1162
  %1166 = load double, double* %1165, align 8, !tbaa !27
  %1167 = insertelement <2 x double> undef, double %1164, i32 0
  %1168 = insertelement <2 x double> %1167, double %1166, i32 1
  %1169 = fadd <2 x double> %1161, %1168
  %1170 = add nsw i64 %1145, 3
  %1171 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i64 0, i64 %1170
  %1172 = load double, double* %1171, align 8, !tbaa !27
  %1173 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i64 0, i64 %1170
  %1174 = load double, double* %1173, align 8, !tbaa !27
  %1175 = insertelement <2 x double> undef, double %1172, i32 0
  %1176 = insertelement <2 x double> %1175, double %1174, i32 1
  %1177 = fadd <2 x double> %1169, %1176
  %1178 = add nsw i64 %1145, 4
  %1179 = trunc i64 %1178 to i32
  %1180 = icmp eq i32 %1096, %1179
  br i1 %1180, label %1181, label %1144

1181:                                             ; preds = %1144, %1139, %1084
  %1182 = phi <2 x double> [ %1114, %1084 ], [ %1140, %1139 ], [ %1177, %1144 ]
  %1183 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.en, i64 0, i64 %466, i32 0, i64 %1085
  %1184 = extractelement <2 x double> %1182, i32 0
  store double %1184, double* %1183, align 8, !tbaa !27
  %1185 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i64 0, i64 %466, i32 0, i64 %1085
  %1186 = extractelement <2 x double> %1182, i32 1
  store double %1186, double* %1185, align 8, !tbaa !27
  %1187 = add nuw nsw i64 %1085, 1
  %1188 = icmp eq i64 %1187, 21
  br i1 %1188, label %1077, label %1084

1189:                                             ; preds = %1359, %1077
  %1190 = phi i64 [ 0, %1077 ], [ %1360, %1359 ]
  br i1 %1079, label %1192, label %1191

1191:                                             ; preds = %1216, %1189
  br i1 %1081, label %1223, label %1253

1192:                                             ; preds = %1216, %1189
  %1193 = phi i64 [ %1221, %1216 ], [ 0, %1189 ]
  %1194 = phi i32 [ %1218, %1216 ], [ 0, %1189 ]
  %1195 = sext i32 %1194 to i64
  %1196 = getelementptr inbounds [3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i64 0, i64 %1190, i64 %1195
  %1197 = load float, float* %1196, align 4, !tbaa !33
  %1198 = getelementptr inbounds [63 x i32], [63 x i32]* @L3psycho_anal.numlines_s, i64 0, i64 %1193
  %1199 = load i32, i32* %1198, align 4, !tbaa !18
  %1200 = add i32 %1194, 1
  %1201 = icmp sgt i32 %1199, 0
  br i1 %1201, label %1202, label %1216

1202:                                             ; preds = %1192
  %1203 = sext i32 %1200 to i64
  br label %1204

1204:                                             ; preds = %1204, %1202
  %1205 = phi i64 [ %1203, %1202 ], [ %1212, %1204 ]
  %1206 = phi float [ %1197, %1202 ], [ %1210, %1204 ]
  %1207 = phi i32 [ %1199, %1202 ], [ %1211, %1204 ]
  %1208 = getelementptr inbounds [3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i64 0, i64 %1190, i64 %1205
  %1209 = load float, float* %1208, align 4, !tbaa !33
  %1210 = fadd float %1206, %1209
  %1211 = add nsw i32 %1207, -1
  %1212 = add nsw i64 %1205, 1
  %1213 = icmp sgt i32 %1207, 1
  br i1 %1213, label %1204, label %1214

1214:                                             ; preds = %1204
  %1215 = trunc i64 %1212 to i32
  br label %1216

1216:                                             ; preds = %1214, %1192
  %1217 = phi float [ %1197, %1192 ], [ %1210, %1214 ]
  %1218 = phi i32 [ %1200, %1192 ], [ %1215, %1214 ]
  %1219 = fpext float %1217 to double
  %1220 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i64 0, i64 %1193
  store double %1219, double* %1220, align 8, !tbaa !27
  %1221 = add nuw nsw i64 %1193, 1
  %1222 = icmp eq i64 %1221, %1082
  br i1 %1222, label %1191, label %1192

1223:                                             ; preds = %1244, %1191
  %1224 = phi i64 [ %1251, %1244 ], [ 0, %1191 ]
  %1225 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind_s, i64 0, i64 %1224, i64 0
  %1226 = load i32, i32* %1225, align 8, !tbaa !18
  %1227 = getelementptr inbounds [63 x [2 x i32]], [63 x [2 x i32]]* @L3psycho_anal.s3ind_s, i64 0, i64 %1224, i64 1
  %1228 = load i32, i32* %1227, align 4, !tbaa !18
  %1229 = icmp sgt i32 %1226, %1228
  br i1 %1229, label %1244, label %1230

1230:                                             ; preds = %1223
  %1231 = sext i32 %1226 to i64
  %1232 = sext i32 %1228 to i64
  br label %1233

1233:                                             ; preds = %1233, %1230
  %1234 = phi i64 [ %1242, %1233 ], [ %1231, %1230 ]
  %1235 = phi double [ %1241, %1233 ], [ 0.000000e+00, %1230 ]
  %1236 = getelementptr inbounds [64 x [64 x double]], [64 x [64 x double]]* @L3psycho_anal.s3_s, i64 0, i64 %1224, i64 %1234
  %1237 = load double, double* %1236, align 8, !tbaa !27
  %1238 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i64 0, i64 %1234
  %1239 = load double, double* %1238, align 8, !tbaa !27
  %1240 = fmul double %1237, %1239
  %1241 = fadd double %1235, %1240
  %1242 = add nsw i64 %1234, 1
  %1243 = icmp slt i64 %1234, %1232
  br i1 %1243, label %1233, label %1244

1244:                                             ; preds = %1233, %1223
  %1245 = phi double [ 0.000000e+00, %1223 ], [ %1241, %1233 ]
  %1246 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.qthr_s, i64 0, i64 %1224
  %1247 = load double, double* %1246, align 8, !tbaa !27
  %1248 = fcmp ogt double %1247, %1245
  %1249 = select i1 %1248, double %1247, double %1245
  %1250 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i64 0, i64 %1224
  store double %1249, double* %1250, align 8, !tbaa !27
  %1251 = add nuw nsw i64 %1224, 1
  %1252 = icmp eq i64 %1251, %1083
  br i1 %1252, label %1253, label %1223

1253:                                             ; preds = %1244, %1191
  br label %1254

1254:                                             ; preds = %1351, %1253
  %1255 = phi i64 [ %1357, %1351 ], [ 0, %1253 ]
  %1256 = getelementptr inbounds [12 x double], [12 x double]* @L3psycho_anal.w1_s, i64 0, i64 %1255
  %1257 = load double, double* %1256, align 8, !tbaa !27
  %1258 = getelementptr inbounds [12 x i32], [12 x i32]* @L3psycho_anal.bu_s, i64 0, i64 %1255
  %1259 = load i32, i32* %1258, align 4, !tbaa !18
  %1260 = sext i32 %1259 to i64
  %1261 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i64 0, i64 %1260
  %1262 = load double, double* %1261, align 8, !tbaa !27
  %1263 = getelementptr inbounds [12 x double], [12 x double]* @L3psycho_anal.w2_s, i64 0, i64 %1255
  %1264 = load double, double* %1263, align 8, !tbaa !27
  %1265 = getelementptr inbounds [12 x i32], [12 x i32]* @L3psycho_anal.bo_s, i64 0, i64 %1255
  %1266 = load i32, i32* %1265, align 4, !tbaa !18
  %1267 = sext i32 %1266 to i64
  %1268 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i64 0, i64 %1267
  %1269 = load double, double* %1268, align 8, !tbaa !27
  %1270 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i64 0, i64 %1260
  %1271 = load double, double* %1270, align 8, !tbaa !27
  %1272 = insertelement <2 x double> undef, double %1257, i32 0
  %1273 = shufflevector <2 x double> %1272, <2 x double> undef, <2 x i32> zeroinitializer
  %1274 = insertelement <2 x double> undef, double %1262, i32 0
  %1275 = insertelement <2 x double> %1274, double %1271, i32 1
  %1276 = fmul <2 x double> %1273, %1275
  %1277 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i64 0, i64 %1267
  %1278 = load double, double* %1277, align 8, !tbaa !27
  %1279 = insertelement <2 x double> undef, double %1264, i32 0
  %1280 = shufflevector <2 x double> %1279, <2 x double> undef, <2 x i32> zeroinitializer
  %1281 = insertelement <2 x double> undef, double %1269, i32 0
  %1282 = insertelement <2 x double> %1281, double %1278, i32 1
  %1283 = fmul <2 x double> %1280, %1282
  %1284 = fadd <2 x double> %1276, %1283
  %1285 = add i32 %1259, 1
  %1286 = icmp slt i32 %1285, %1266
  br i1 %1286, label %1287, label %1351

1287:                                             ; preds = %1254
  %1288 = sext i32 %1285 to i64
  %1289 = xor i32 %1259, 3
  %1290 = add i32 %1266, %1289
  %1291 = add i32 %1266, -2
  %1292 = sub i32 %1291, %1259
  %1293 = and i32 %1290, 3
  %1294 = icmp eq i32 %1293, 0
  br i1 %1294, label %1309, label %1295

1295:                                             ; preds = %1295, %1287
  %1296 = phi i64 [ %1306, %1295 ], [ %1288, %1287 ]
  %1297 = phi <2 x double> [ %1305, %1295 ], [ %1284, %1287 ]
  %1298 = phi i32 [ %1307, %1295 ], [ %1293, %1287 ]
  %1299 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i64 0, i64 %1296
  %1300 = load double, double* %1299, align 8, !tbaa !27
  %1301 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i64 0, i64 %1296
  %1302 = load double, double* %1301, align 8, !tbaa !27
  %1303 = insertelement <2 x double> undef, double %1300, i32 0
  %1304 = insertelement <2 x double> %1303, double %1302, i32 1
  %1305 = fadd <2 x double> %1297, %1304
  %1306 = add nsw i64 %1296, 1
  %1307 = add i32 %1298, -1
  %1308 = icmp eq i32 %1307, 0
  br i1 %1308, label %1309, label %1295, !llvm.loop !296

1309:                                             ; preds = %1295, %1287
  %1310 = phi <2 x double> [ undef, %1287 ], [ %1305, %1295 ]
  %1311 = phi i64 [ %1288, %1287 ], [ %1306, %1295 ]
  %1312 = phi <2 x double> [ %1284, %1287 ], [ %1305, %1295 ]
  %1313 = icmp ult i32 %1292, 3
  br i1 %1313, label %1351, label %1314

1314:                                             ; preds = %1314, %1309
  %1315 = phi i64 [ %1348, %1314 ], [ %1311, %1309 ]
  %1316 = phi <2 x double> [ %1347, %1314 ], [ %1312, %1309 ]
  %1317 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i64 0, i64 %1315
  %1318 = load double, double* %1317, align 8, !tbaa !27
  %1319 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i64 0, i64 %1315
  %1320 = load double, double* %1319, align 8, !tbaa !27
  %1321 = insertelement <2 x double> undef, double %1318, i32 0
  %1322 = insertelement <2 x double> %1321, double %1320, i32 1
  %1323 = fadd <2 x double> %1316, %1322
  %1324 = add nsw i64 %1315, 1
  %1325 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i64 0, i64 %1324
  %1326 = load double, double* %1325, align 8, !tbaa !27
  %1327 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i64 0, i64 %1324
  %1328 = load double, double* %1327, align 8, !tbaa !27
  %1329 = insertelement <2 x double> undef, double %1326, i32 0
  %1330 = insertelement <2 x double> %1329, double %1328, i32 1
  %1331 = fadd <2 x double> %1323, %1330
  %1332 = add nsw i64 %1315, 2
  %1333 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i64 0, i64 %1332
  %1334 = load double, double* %1333, align 8, !tbaa !27
  %1335 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i64 0, i64 %1332
  %1336 = load double, double* %1335, align 8, !tbaa !27
  %1337 = insertelement <2 x double> undef, double %1334, i32 0
  %1338 = insertelement <2 x double> %1337, double %1336, i32 1
  %1339 = fadd <2 x double> %1331, %1338
  %1340 = add nsw i64 %1315, 3
  %1341 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.eb, i64 0, i64 %1340
  %1342 = load double, double* %1341, align 8, !tbaa !27
  %1343 = getelementptr inbounds [63 x double], [63 x double]* @L3psycho_anal.thr, i64 0, i64 %1340
  %1344 = load double, double* %1343, align 8, !tbaa !27
  %1345 = insertelement <2 x double> undef, double %1342, i32 0
  %1346 = insertelement <2 x double> %1345, double %1344, i32 1
  %1347 = fadd <2 x double> %1339, %1346
  %1348 = add nsw i64 %1315, 4
  %1349 = trunc i64 %1348 to i32
  %1350 = icmp eq i32 %1266, %1349
  br i1 %1350, label %1351, label %1314

1351:                                             ; preds = %1314, %1309, %1254
  %1352 = phi <2 x double> [ %1284, %1254 ], [ %1310, %1309 ], [ %1347, %1314 ]
  %1353 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.en, i64 0, i64 %466, i32 1, i64 %1255, i64 %1190
  %1354 = extractelement <2 x double> %1352, i32 0
  store double %1354, double* %1353, align 8, !tbaa !27
  %1355 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i64 0, i64 %466, i32 1, i64 %1255, i64 %1190
  %1356 = extractelement <2 x double> %1352, i32 1
  store double %1356, double* %1355, align 8, !tbaa !27
  %1357 = add nuw nsw i64 %1255, 1
  %1358 = icmp eq i64 %1357, 12
  br i1 %1358, label %1359, label %1254

1359:                                             ; preds = %1351
  %1360 = add nuw nsw i64 %1190, 1
  %1361 = icmp eq i64 %1360, 3
  br i1 %1361, label %1362, label %1189

1362:                                             ; preds = %1359
  %1363 = add nuw nsw i64 %466, 1
  %1364 = icmp eq i64 %1363, %464
  br i1 %1364, label %1365, label %465

1365:                                             ; preds = %1362
  %1366 = icmp eq i32 %459, 4
  br i1 %1366, label %1367, label %1444

1367:                                             ; preds = %1399, %1365
  %1368 = phi i64 [ %1400, %1399 ], [ 0, %1365 ]
  %1369 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i64 0, i64 0, i32 0, i64 %1368
  %1370 = load double, double* %1369, align 8, !tbaa !27
  %1371 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i64 0, i64 1, i32 0, i64 %1368
  %1372 = load double, double* %1371, align 8, !tbaa !27
  %1373 = fmul double %1372, 1.580000e+00
  %1374 = fcmp ugt double %1370, %1373
  %1375 = fmul double %1370, 1.580000e+00
  %1376 = fcmp ugt double %1372, %1375
  %1377 = or i1 %1376, %1374
  br i1 %1377, label %1399, label %1378

1378:                                             ; preds = %1367
  %1379 = getelementptr inbounds [21 x double], [21 x double]* @L3psycho_anal.mld_l, i64 0, i64 %1368
  %1380 = load double, double* %1379, align 8, !tbaa !27
  %1381 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.en, i64 0, i64 3, i32 0, i64 %1368
  %1382 = load double, double* %1381, align 8, !tbaa !27
  %1383 = fmul double %1380, %1382
  %1384 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i64 0, i64 2, i32 0, i64 %1368
  %1385 = load double, double* %1384, align 8, !tbaa !27
  %1386 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i64 0, i64 3, i32 0, i64 %1368
  %1387 = load double, double* %1386, align 8, !tbaa !27
  %1388 = fcmp olt double %1387, %1383
  %1389 = select i1 %1388, double %1387, double %1383
  %1390 = fcmp ogt double %1385, %1389
  %1391 = select i1 %1390, double %1385, double %1389
  %1392 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.en, i64 0, i64 2, i32 0, i64 %1368
  %1393 = load double, double* %1392, align 8, !tbaa !27
  %1394 = fmul double %1380, %1393
  %1395 = fcmp olt double %1385, %1394
  %1396 = select i1 %1395, double %1385, double %1394
  %1397 = fcmp ogt double %1387, %1396
  %1398 = select i1 %1397, double %1387, double %1396
  store double %1391, double* %1384, align 8, !tbaa !27
  store double %1398, double* %1386, align 8, !tbaa !27
  br label %1399

1399:                                             ; preds = %1378, %1367
  %1400 = add nuw nsw i64 %1368, 1
  %1401 = icmp eq i64 %1400, 21
  br i1 %1401, label %1402, label %1367

1402:                                             ; preds = %1679, %1399
  %1403 = phi i64 [ %1680, %1679 ], [ 0, %1399 ]
  %1404 = getelementptr inbounds [12 x double], [12 x double]* @L3psycho_anal.mld_s, i64 0, i64 %1403
  %1405 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i64 0, i64 0, i32 1, i64 %1403, i64 0
  %1406 = load double, double* %1405, align 8, !tbaa !27
  %1407 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i64 0, i64 1, i32 1, i64 %1403, i64 0
  %1408 = load double, double* %1407, align 8, !tbaa !27
  %1409 = fmul double %1408, 1.580000e+00
  %1410 = fcmp ugt double %1406, %1409
  %1411 = fmul double %1406, 1.580000e+00
  %1412 = fcmp ugt double %1408, %1411
  %1413 = or i1 %1412, %1410
  br i1 %1413, label %1434, label %1414

1414:                                             ; preds = %1402
  %1415 = load double, double* %1404, align 8, !tbaa !27
  %1416 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.en, i64 0, i64 3, i32 1, i64 %1403, i64 0
  %1417 = load double, double* %1416, align 8, !tbaa !27
  %1418 = fmul double %1415, %1417
  %1419 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i64 0, i64 2, i32 1, i64 %1403, i64 0
  %1420 = load double, double* %1419, align 8, !tbaa !27
  %1421 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i64 0, i64 3, i32 1, i64 %1403, i64 0
  %1422 = load double, double* %1421, align 8, !tbaa !27
  %1423 = fcmp olt double %1422, %1418
  %1424 = select i1 %1423, double %1422, double %1418
  %1425 = fcmp ogt double %1420, %1424
  %1426 = select i1 %1425, double %1420, double %1424
  %1427 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.en, i64 0, i64 2, i32 1, i64 %1403, i64 0
  %1428 = load double, double* %1427, align 8, !tbaa !27
  %1429 = fmul double %1415, %1428
  %1430 = fcmp olt double %1420, %1429
  %1431 = select i1 %1430, double %1420, double %1429
  %1432 = fcmp ogt double %1422, %1431
  %1433 = select i1 %1432, double %1422, double %1431
  store double %1426, double* %1419, align 8, !tbaa !27
  store double %1433, double* %1421, align 8, !tbaa !27
  br label %1434

1434:                                             ; preds = %1414, %1402
  %1435 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i64 0, i64 0, i32 1, i64 %1403, i64 1
  %1436 = load double, double* %1435, align 8, !tbaa !27
  %1437 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i64 0, i64 1, i32 1, i64 %1403, i64 1
  %1438 = load double, double* %1437, align 8, !tbaa !27
  %1439 = fmul double %1438, 1.580000e+00
  %1440 = fcmp ugt double %1436, %1439
  %1441 = fmul double %1436, 1.580000e+00
  %1442 = fcmp ugt double %1438, %1441
  %1443 = or i1 %1442, %1440
  br i1 %1443, label %1649, label %1629

1444:                                             ; preds = %1679, %1365, %453
  %1445 = phi i1 [ false, %1365 ], [ false, %453 ], [ %1366, %1679 ]
  %1446 = load i32, i32* %456, align 4, !tbaa !121
  %1447 = icmp eq i32 %1446, 1
  br i1 %1447, label %1448, label %1497

1448:                                             ; preds = %1465, %1444
  %1449 = phi i64 [ %1469, %1465 ], [ 5, %1444 ]
  %1450 = phi double [ %1468, %1465 ], [ 0.000000e+00, %1444 ]
  %1451 = phi double [ %1467, %1465 ], [ 0.000000e+00, %1444 ]
  %1452 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i64 0, i64 0, i32 0, i64 %1449
  %1453 = load double, double* %1452, align 8, !tbaa !27
  %1454 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i64 0, i64 1, i32 0, i64 %1449
  %1455 = load double, double* %1454, align 8, !tbaa !27
  %1456 = fcmp olt double %1453, %1455
  %1457 = select i1 %1456, double %1453, double %1455
  %1458 = fcmp ogt double %1453, %1455
  %1459 = select i1 %1458, double %1453, double %1455
  %1460 = fmul double %1457, 1.000000e+03
  %1461 = fcmp ult double %1459, %1460
  br i1 %1461, label %1462, label %1465

1462:                                             ; preds = %1448
  %1463 = fdiv double %1459, %1457
  %1464 = tail call double @log10(double %1463) #21
  br label %1465

1465:                                             ; preds = %1462, %1448
  %1466 = phi double [ %1464, %1462 ], [ 3.000000e+00, %1448 ]
  %1467 = fadd double %1451, %1466
  %1468 = fadd double %1450, 1.000000e+00
  %1469 = add nuw nsw i64 %1449, 1
  %1470 = icmp eq i64 %1469, 21
  br i1 %1470, label %1471, label %1448

1471:                                             ; preds = %1465
  %1472 = fdiv double %1467, %1468
  %1473 = fmul double %1472, 0x3FE6666666666666
  %1474 = fcmp olt double %1473, 5.000000e-01
  br label %1475

1475:                                             ; preds = %1491, %1471
  %1476 = phi i64 [ 3, %1471 ], [ %1495, %1491 ]
  %1477 = phi <2 x double> [ zeroinitializer, %1471 ], [ %1494, %1491 ]
  %1478 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i64 0, i64 0, i32 1, i64 %1476, i64 0
  %1479 = load double, double* %1478, align 8, !tbaa !27
  %1480 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i64 0, i64 1, i32 1, i64 %1476, i64 0
  %1481 = load double, double* %1480, align 8, !tbaa !27
  %1482 = fcmp olt double %1479, %1481
  %1483 = select i1 %1482, double %1479, double %1481
  %1484 = fcmp ogt double %1479, %1481
  %1485 = select i1 %1484, double %1479, double %1481
  %1486 = fmul double %1483, 1.000000e+03
  %1487 = fcmp ult double %1485, %1486
  br i1 %1487, label %1488, label %1491

1488:                                             ; preds = %1475
  %1489 = fdiv double %1485, %1483
  %1490 = tail call double @log10(double %1489) #21
  br label %1491

1491:                                             ; preds = %1488, %1475
  %1492 = phi double [ %1490, %1488 ], [ 3.000000e+00, %1475 ]
  %1493 = insertelement <2 x double> <double 1.000000e+00, double undef>, double %1492, i32 1
  %1494 = fadd <2 x double> %1477, %1493
  %1495 = add nuw nsw i64 %1476, 1
  %1496 = icmp eq i64 %1495, 12
  br i1 %1496, label %1577, label %1475

1497:                                             ; preds = %1621, %1444
  %1498 = phi double [ %1628, %1621 ], [ 0.000000e+00, %1444 ]
  %1499 = phi double [ %1622, %1621 ], [ 0.000000e+00, %1444 ]
  %1500 = load i32, i32* %454, align 4, !tbaa !126
  %1501 = icmp sgt i32 %1500, 0
  br i1 %1501, label %1502, label %1556

1502:                                             ; preds = %1497
  %1503 = zext i32 %1500 to i64
  %1504 = shl nuw nsw i64 %1503, 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %14, i8 0, i64 %1504, i1 false)
  %1505 = icmp eq i32 %1500, 2
  br i1 %1505, label %1506, label %1522

1506:                                             ; preds = %1502
  %1507 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 36
  %1508 = load i32, i32* %1507, align 4, !tbaa !231
  %1509 = icmp eq i32 %1508, 0
  br i1 %1509, label %1513, label %1510

1510:                                             ; preds = %1506
  %1511 = load i32, i32* %456, align 4, !tbaa !121
  %1512 = icmp eq i32 %1511, 1
  br i1 %1512, label %1513, label %1522

1513:                                             ; preds = %1510, %1506
  %1514 = getelementptr inbounds [2 x i32], [2 x i32]* %15, i64 0, i64 0
  %1515 = load i32, i32* %1514, align 4, !tbaa !18
  %1516 = icmp ne i32 %1515, 0
  %1517 = getelementptr inbounds [2 x i32], [2 x i32]* %15, i64 0, i64 1
  %1518 = load i32, i32* %1517, align 4
  %1519 = icmp ne i32 %1518, 0
  %1520 = and i1 %1516, %1519
  br i1 %1520, label %1522, label %1521

1521:                                             ; preds = %1513
  store i32 0, i32* %1514, align 4, !tbaa !18
  store i32 0, i32* %1517, align 4, !tbaa !18
  br label %1522

1522:                                             ; preds = %1521, %1513, %1510, %1502
  br label %1523

1523:                                             ; preds = %1547, %1522
  %1524 = phi i64 [ %1552, %1547 ], [ 0, %1522 ]
  %1525 = getelementptr inbounds [2 x i32], [2 x i32]* %15, i64 0, i64 %1524
  %1526 = load i32, i32* %1525, align 4, !tbaa !18
  %1527 = icmp eq i32 %1526, 0
  br i1 %1527, label %1541, label %1528

1528:                                             ; preds = %1523
  %1529 = getelementptr inbounds [2 x i32], [2 x i32]* @L3psycho_anal.blocktype_old, i64 0, i64 %1524
  %1530 = load i32, i32* %1529, align 4, !tbaa !18
  switch i32 %1530, label %1531 [
    i32 0, label %1534
    i32 3, label %1534
    i32 2, label %1536
    i32 1, label %1538
  ]

1531:                                             ; preds = %1528
  %1532 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 %1524
  %1533 = load i32, i32* %1532, align 4, !tbaa !18
  br label %1547

1534:                                             ; preds = %1528, %1528
  %1535 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 %1524
  store i32 0, i32* %1535, align 4, !tbaa !18
  br label %1547

1536:                                             ; preds = %1528
  %1537 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 %1524
  store i32 3, i32* %1537, align 4, !tbaa !18
  br label %1547

1538:                                             ; preds = %1528
  %1539 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %1540 = tail call i64 @fwrite(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1.369, i64 0, i64 0), i64 25, i64 1, %struct._IO_FILE* %1539) #19
  tail call void @abort() #20
  unreachable

1541:                                             ; preds = %1523
  %1542 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 %1524
  store i32 2, i32* %1542, align 4, !tbaa !18
  %1543 = getelementptr inbounds [2 x i32], [2 x i32]* @L3psycho_anal.blocktype_old, i64 0, i64 %1524
  %1544 = load i32, i32* %1543, align 4, !tbaa !18
  switch i32 %1544, label %1547 [
    i32 0, label %1545
    i32 3, label %1546
  ]

1545:                                             ; preds = %1541
  store i32 1, i32* %1543, align 4, !tbaa !18
  br label %1547

1546:                                             ; preds = %1541
  store i32 2, i32* %1543, align 4, !tbaa !18
  br label %1547

1547:                                             ; preds = %1546, %1545, %1541, %1536, %1534, %1531
  %1548 = phi i32 [ 2, %1541 ], [ 2, %1545 ], [ 2, %1546 ], [ 0, %1534 ], [ 3, %1536 ], [ %1533, %1531 ]
  %1549 = phi i32 [ %1544, %1541 ], [ 1, %1545 ], [ 2, %1546 ], [ %1530, %1534 ], [ 2, %1536 ], [ %1530, %1531 ]
  %1550 = getelementptr inbounds [2 x i32], [2 x i32]* @L3psycho_anal.blocktype_old, i64 0, i64 %1524
  %1551 = getelementptr inbounds i32, i32* %10, i64 %1524
  store i32 %1549, i32* %1551, align 4, !tbaa !18
  store i32 %1548, i32* %1550, align 4, !tbaa !18
  %1552 = add nuw nsw i64 %1524, 1
  %1553 = load i32, i32* %454, align 4, !tbaa !126
  %1554 = sext i32 %1553 to i64
  %1555 = icmp slt i64 %1552, %1554
  br i1 %1555, label %1523, label %1556

1556:                                             ; preds = %1547, %1497
  %1557 = load i32, i32* %10, align 4, !tbaa !18
  %1558 = icmp eq i32 %1557, 2
  %1559 = load i64, i64* bitcast (double* @L3psycho_anal.ms_ratio_s_old to i64*), align 8
  %1560 = load i64, i64* bitcast (double* @L3psycho_anal.ms_ratio_l_old to i64*), align 8
  %1561 = select i1 %1558, i64 %1559, i64 %1560
  %1562 = bitcast double* %3 to i64*
  store i64 %1561, i64* %1562, align 8, !tbaa !27
  store double %1498, double* @L3psycho_anal.ms_ratio_s_old, align 8, !tbaa !27
  store double %1499, double* @L3psycho_anal.ms_ratio_l_old, align 8, !tbaa !27
  store double %1499, double* %4, align 8, !tbaa !27
  br i1 %1445, label %1563, label %1575

1563:                                             ; preds = %1556
  %1564 = getelementptr inbounds [4 x float], [4 x float]* %12, i64 0, i64 3
  %1565 = load float, float* %1564, align 4, !tbaa !33
  %1566 = getelementptr inbounds [4 x float], [4 x float]* %12, i64 0, i64 2
  %1567 = load float, float* %1566, align 8, !tbaa !33
  %1568 = fadd float %1565, %1567
  %1569 = load i64, i64* bitcast (double* @L3psycho_anal.ms_ener_ratio_old to i64*), align 8, !tbaa !27
  %1570 = bitcast double* %5 to i64*
  store i64 %1569, i64* %1570, align 8, !tbaa !27
  store double 0.000000e+00, double* @L3psycho_anal.ms_ener_ratio_old, align 8, !tbaa !27
  %1571 = fcmp ogt float %1568, 0.000000e+00
  br i1 %1571, label %1572, label %1576

1572:                                             ; preds = %1563
  %1573 = fdiv float %1565, %1568
  %1574 = fpext float %1573 to double
  store double %1574, double* @L3psycho_anal.ms_ener_ratio_old, align 8, !tbaa !27
  br label %1576

1575:                                             ; preds = %1556
  store double 0.000000e+00, double* %5, align 8, !tbaa !27
  br label %1576

1576:                                             ; preds = %1575, %1572, %1563
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #21
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17) #21
  ret void

1577:                                             ; preds = %1593, %1491
  %1578 = phi i64 [ %1597, %1593 ], [ 3, %1491 ]
  %1579 = phi <2 x double> [ %1596, %1593 ], [ %1494, %1491 ]
  %1580 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i64 0, i64 0, i32 1, i64 %1578, i64 1
  %1581 = load double, double* %1580, align 8, !tbaa !27
  %1582 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i64 0, i64 1, i32 1, i64 %1578, i64 1
  %1583 = load double, double* %1582, align 8, !tbaa !27
  %1584 = fcmp olt double %1581, %1583
  %1585 = select i1 %1584, double %1581, double %1583
  %1586 = fcmp ogt double %1581, %1583
  %1587 = select i1 %1586, double %1581, double %1583
  %1588 = fmul double %1585, 1.000000e+03
  %1589 = fcmp ult double %1587, %1588
  br i1 %1589, label %1590, label %1593

1590:                                             ; preds = %1577
  %1591 = fdiv double %1587, %1585
  %1592 = tail call double @log10(double %1591) #21
  br label %1593

1593:                                             ; preds = %1590, %1577
  %1594 = phi double [ %1592, %1590 ], [ 3.000000e+00, %1577 ]
  %1595 = insertelement <2 x double> <double 1.000000e+00, double undef>, double %1594, i32 1
  %1596 = fadd <2 x double> %1579, %1595
  %1597 = add nuw nsw i64 %1578, 1
  %1598 = icmp eq i64 %1597, 12
  br i1 %1598, label %1599, label %1577

1599:                                             ; preds = %1615, %1593
  %1600 = phi i64 [ %1619, %1615 ], [ 3, %1593 ]
  %1601 = phi <2 x double> [ %1618, %1615 ], [ %1596, %1593 ]
  %1602 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i64 0, i64 0, i32 1, i64 %1600, i64 2
  %1603 = load double, double* %1602, align 8, !tbaa !27
  %1604 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i64 0, i64 1, i32 1, i64 %1600, i64 2
  %1605 = load double, double* %1604, align 8, !tbaa !27
  %1606 = fcmp olt double %1603, %1605
  %1607 = select i1 %1606, double %1603, double %1605
  %1608 = fcmp ogt double %1603, %1605
  %1609 = select i1 %1608, double %1603, double %1605
  %1610 = fmul double %1607, 1.000000e+03
  %1611 = fcmp ult double %1609, %1610
  br i1 %1611, label %1612, label %1615

1612:                                             ; preds = %1599
  %1613 = fdiv double %1609, %1607
  %1614 = tail call double @log10(double %1613) #21
  br label %1615

1615:                                             ; preds = %1612, %1599
  %1616 = phi double [ %1614, %1612 ], [ 3.000000e+00, %1599 ]
  %1617 = insertelement <2 x double> <double 1.000000e+00, double undef>, double %1616, i32 1
  %1618 = fadd <2 x double> %1601, %1617
  %1619 = add nuw nsw i64 %1600, 1
  %1620 = icmp eq i64 %1619, 12
  br i1 %1620, label %1621, label %1599

1621:                                             ; preds = %1615
  %1622 = select i1 %1474, double %1473, double 5.000000e-01
  %1623 = extractelement <2 x double> %1618, i32 0
  %1624 = extractelement <2 x double> %1618, i32 1
  %1625 = fdiv double %1624, %1623
  %1626 = fmul double %1625, 0x3FE6666666666666
  %1627 = fcmp olt double %1626, 5.000000e-01
  %1628 = select i1 %1627, double %1626, double 5.000000e-01
  br label %1497

1629:                                             ; preds = %1434
  %1630 = load double, double* %1404, align 8, !tbaa !27
  %1631 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.en, i64 0, i64 3, i32 1, i64 %1403, i64 1
  %1632 = load double, double* %1631, align 8, !tbaa !27
  %1633 = fmul double %1630, %1632
  %1634 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i64 0, i64 2, i32 1, i64 %1403, i64 1
  %1635 = load double, double* %1634, align 8, !tbaa !27
  %1636 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i64 0, i64 3, i32 1, i64 %1403, i64 1
  %1637 = load double, double* %1636, align 8, !tbaa !27
  %1638 = fcmp olt double %1637, %1633
  %1639 = select i1 %1638, double %1637, double %1633
  %1640 = fcmp ogt double %1635, %1639
  %1641 = select i1 %1640, double %1635, double %1639
  %1642 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.en, i64 0, i64 2, i32 1, i64 %1403, i64 1
  %1643 = load double, double* %1642, align 8, !tbaa !27
  %1644 = fmul double %1630, %1643
  %1645 = fcmp olt double %1635, %1644
  %1646 = select i1 %1645, double %1635, double %1644
  %1647 = fcmp ogt double %1637, %1646
  %1648 = select i1 %1647, double %1637, double %1646
  store double %1641, double* %1634, align 8, !tbaa !27
  store double %1648, double* %1636, align 8, !tbaa !27
  br label %1649

1649:                                             ; preds = %1629, %1434
  %1650 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i64 0, i64 0, i32 1, i64 %1403, i64 2
  %1651 = load double, double* %1650, align 8, !tbaa !27
  %1652 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i64 0, i64 1, i32 1, i64 %1403, i64 2
  %1653 = load double, double* %1652, align 8, !tbaa !27
  %1654 = fmul double %1653, 1.580000e+00
  %1655 = fcmp ugt double %1651, %1654
  %1656 = fmul double %1651, 1.580000e+00
  %1657 = fcmp ugt double %1653, %1656
  %1658 = or i1 %1657, %1655
  br i1 %1658, label %1679, label %1659

1659:                                             ; preds = %1649
  %1660 = load double, double* %1404, align 8, !tbaa !27
  %1661 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.en, i64 0, i64 3, i32 1, i64 %1403, i64 2
  %1662 = load double, double* %1661, align 8, !tbaa !27
  %1663 = fmul double %1660, %1662
  %1664 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i64 0, i64 2, i32 1, i64 %1403, i64 2
  %1665 = load double, double* %1664, align 8, !tbaa !27
  %1666 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.thm, i64 0, i64 3, i32 1, i64 %1403, i64 2
  %1667 = load double, double* %1666, align 8, !tbaa !27
  %1668 = fcmp olt double %1667, %1663
  %1669 = select i1 %1668, double %1667, double %1663
  %1670 = fcmp ogt double %1665, %1669
  %1671 = select i1 %1670, double %1665, double %1669
  %1672 = getelementptr inbounds [4 x %struct.III_psy_xmin], [4 x %struct.III_psy_xmin]* @L3psycho_anal.en, i64 0, i64 2, i32 1, i64 %1403, i64 2
  %1673 = load double, double* %1672, align 8, !tbaa !27
  %1674 = fmul double %1660, %1673
  %1675 = fcmp olt double %1665, %1674
  %1676 = select i1 %1675, double %1665, double %1674
  %1677 = fcmp ogt double %1667, %1676
  %1678 = select i1 %1677, double %1667, double %1676
  store double %1671, double* %1664, align 8, !tbaa !27
  store double %1678, double* %1666, align 8, !tbaa !27
  br label %1679

1679:                                             ; preds = %1659, %1649
  %1680 = add nuw nsw i64 %1403, 1
  %1681 = icmp eq i64 %1680, 12
  br i1 %1681, label %1444, label %1402

1682:                                             ; preds = %1682, %549
  %1683 = phi i64 [ %1703, %1682 ], [ 0, %549 ]
  %1684 = sub i64 255, %1683
  %1685 = getelementptr inbounds [2 x [3 x [256 x float]]], [2 x [3 x [256 x float]]]* @L3psycho_anal.wsamp_S, i64 0, i64 0, i64 0, i64 %1684
  %1686 = getelementptr inbounds float, float* %1685, i64 -3
  %1687 = bitcast float* %1686 to <4 x float>*
  %1688 = load <4 x float>, <4 x float>* %1687, align 4, !tbaa !33
  %1689 = shufflevector <4 x float> %1688, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1690 = getelementptr inbounds [2 x [3 x [256 x float]]], [2 x [3 x [256 x float]]]* @L3psycho_anal.wsamp_S, i64 0, i64 1, i64 0, i64 %1684
  %1691 = getelementptr inbounds float, float* %1690, i64 -3
  %1692 = bitcast float* %1691 to <4 x float>*
  %1693 = load <4 x float>, <4 x float>* %1692, align 4, !tbaa !33
  %1694 = shufflevector <4 x float> %1693, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1695 = fadd <4 x float> %1689, %1694
  %1696 = fmul <4 x float> %1695, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %1697 = shufflevector <4 x float> %1696, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1698 = bitcast float* %1686 to <4 x float>*
  store <4 x float> %1697, <4 x float>* %1698, align 4, !tbaa !33
  %1699 = fsub <4 x float> %1689, %1694
  %1700 = fmul <4 x float> %1699, <float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000, float 0x3FE6A09E60000000>
  %1701 = shufflevector <4 x float> %1700, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1702 = bitcast float* %1691 to <4 x float>*
  store <4 x float> %1701, <4 x float>* %1702, align 4, !tbaa !33
  %1703 = add i64 %1683, 4
  %1704 = icmp eq i64 %1703, 256
  br i1 %1704, label %572, label %1682, !llvm.loop !297

1705:                                             ; preds = %635
  %1706 = getelementptr inbounds [2 x [3 x [256 x float]]], [2 x [3 x [256 x float]]]* @L3psycho_anal.wsamp_S, i64 0, i64 %468, i64 0, i64 0
  %1707 = load float, float* %1706, align 16, !tbaa !33
  %1708 = fmul float %1707, %1707
  store float %1708, float* getelementptr inbounds ([3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i64 0, i64 0, i64 0), align 16, !tbaa !33
  br label %1709

1709:                                             ; preds = %1709, %1705
  %1710 = phi i64 [ 0, %1705 ], [ %1740, %1709 ]
  %1711 = or i64 %1710, 1
  %1712 = getelementptr inbounds [2 x [3 x [256 x float]]], [2 x [3 x [256 x float]]]* @L3psycho_anal.wsamp_S, i64 0, i64 %468, i64 0, i64 %1711
  %1713 = bitcast float* %1712 to <4 x float>*
  %1714 = load <4 x float>, <4 x float>* %1713, align 4, !tbaa !33
  %1715 = getelementptr inbounds float, float* %1712, i64 4
  %1716 = bitcast float* %1715 to <4 x float>*
  %1717 = load <4 x float>, <4 x float>* %1716, align 4, !tbaa !33
  %1718 = sub i64 255, %1710
  %1719 = getelementptr inbounds [2 x [3 x [256 x float]]], [2 x [3 x [256 x float]]]* @L3psycho_anal.wsamp_S, i64 0, i64 %468, i64 0, i64 %1718
  %1720 = getelementptr inbounds float, float* %1719, i64 -3
  %1721 = bitcast float* %1720 to <4 x float>*
  %1722 = load <4 x float>, <4 x float>* %1721, align 4, !tbaa !33
  %1723 = getelementptr inbounds float, float* %1719, i64 -7
  %1724 = bitcast float* %1723 to <4 x float>*
  %1725 = load <4 x float>, <4 x float>* %1724, align 4, !tbaa !33
  %1726 = fmul <4 x float> %1714, %1714
  %1727 = fmul <4 x float> %1717, %1717
  %1728 = fmul <4 x float> %1722, %1722
  %1729 = shufflevector <4 x float> %1728, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1730 = fmul <4 x float> %1725, %1725
  %1731 = shufflevector <4 x float> %1730, <4 x float> undef, <4 x i32> <i32 3, i32 2, i32 1, i32 0>
  %1732 = fadd <4 x float> %1726, %1729
  %1733 = fadd <4 x float> %1727, %1731
  %1734 = fmul <4 x float> %1732, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %1735 = fmul <4 x float> %1733, <float 5.000000e-01, float 5.000000e-01, float 5.000000e-01, float 5.000000e-01>
  %1736 = getelementptr inbounds [3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i64 0, i64 0, i64 %1711
  %1737 = bitcast float* %1736 to <4 x float>*
  store <4 x float> %1734, <4 x float>* %1737, align 4, !tbaa !33
  %1738 = getelementptr inbounds float, float* %1736, i64 4
  %1739 = bitcast float* %1738 to <4 x float>*
  store <4 x float> %1735, <4 x float>* %1739, align 4, !tbaa !33
  %1740 = add i64 %1710, 8
  %1741 = icmp eq i64 %1740, 128
  br i1 %1741, label %1742, label %1709, !llvm.loop !298

1742:                                             ; preds = %1709
  %1743 = load i1, i1* @L3psycho_anal.cw_lower_index, align 4
  br i1 %1743, label %674, label %668

1744:                                             ; preds = %1042
  %1745 = getelementptr inbounds [3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i64 0, i64 0, i64 %1056
  %1746 = load float, float* %1745, align 4, !tbaa !33
  %1747 = fadd float %1049, %1746
  %1748 = getelementptr inbounds [3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i64 0, i64 1, i64 %1056
  %1749 = load float, float* %1748, align 4, !tbaa !33
  %1750 = fadd float %1052, %1749
  %1751 = getelementptr inbounds [3 x [129 x float]], [3 x [129 x float]]* @L3psycho_anal.energy_s, i64 0, i64 2, i64 %1056
  %1752 = load float, float* %1751, align 4, !tbaa !33
  %1753 = fadd float %1055, %1752
  %1754 = add nuw nsw i64 %1043, 2
  br label %1042

1755:                                             ; preds = %130
  store i32 %134, i32* @L3psycho_anal.npart_l_orig, align 4, !tbaa !18
  br label %1756

1756:                                             ; preds = %1755, %130
  %1757 = phi i32 [ %131, %130 ], [ %134, %1755 ]
  %1758 = add nuw nsw i64 %125, 2
  %1759 = getelementptr inbounds [513 x i32], [513 x i32]* @L3psycho_anal.partition_l, i64 0, i64 %1758
  %1760 = load i32, i32* %1759, align 4, !tbaa !18
  %1761 = icmp sgt i32 %1760, %1757
  br i1 %1761, label %1762, label %1763

1762:                                             ; preds = %1756
  store i32 %1760, i32* @L3psycho_anal.npart_l_orig, align 4, !tbaa !18
  br label %1763

1763:                                             ; preds = %1762, %1756
  %1764 = phi i32 [ %1757, %1756 ], [ %1760, %1762 ]
  %1765 = add nuw nsw i64 %125, 3
  %1766 = icmp eq i64 %1765, 513
  br i1 %1766, label %136, label %123
}

; Function Attrs: nounwind uwtable
define dso_local void @L3para_read(double %0, i32* nocapture %1, i32* nocapture %2, i32* nocapture %3, double* nocapture %4, double* nocapture %5, [64 x double]* nocapture %6, [64 x double]* nocapture %7, double* nocapture %8, double* nocapture %9, i32* nocapture %10, i32* nocapture %11, double* nocapture %12, double* nocapture %13, i32* nocapture %14, i32* nocapture %15, double* nocapture %16, double* nocapture %17) local_unnamed_addr #0 {
  %19 = alloca [63 x double], align 16
  %20 = alloca [63 x double], align 16
  %21 = bitcast [63 x double]* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 504, i8* nonnull %21) #21
  %22 = bitcast [63 x double]* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 504, i8* nonnull %22) #21
  br label %28

23:                                               ; preds = %99
  %24 = icmp sgt i32 %101, 0
  br i1 %24, label %26, label %25

25:                                               ; preds = %145, %23
  br label %152

26:                                               ; preds = %23
  %27 = zext i32 %101 to i64
  br label %104

28:                                               ; preds = %99, %18
  %29 = phi i32 [ 0, %18 ], [ %101, %99 ]
  %30 = phi double* [ getelementptr inbounds ([4926 x double], [4926 x double]* @psy_data, i64 0, i64 0), %18 ], [ %100, %99 ]
  %31 = phi i32 [ 0, %18 ], [ %102, %99 ]
  %32 = getelementptr inbounds double, double* %30, i64 1
  %33 = load double, double* %30, align 8, !tbaa !27
  %34 = getelementptr inbounds double, double* %30, i64 2
  %35 = load double, double* %32, align 8, !tbaa !27
  %36 = fptosi double %35 to i32
  %37 = add nsw i32 %36, 1
  %38 = fcmp oeq double %33, %0
  br i1 %38, label %39, label %95

39:                                               ; preds = %28
  %40 = icmp slt i32 %36, 0
  br i1 %40, label %99, label %41

41:                                               ; preds = %39
  %42 = zext i32 %36 to i64
  br label %43

43:                                               ; preds = %91, %41
  %44 = phi i64 [ 0, %41 ], [ %93, %91 ]
  %45 = phi double* [ %34, %41 ], [ %65, %91 ]
  %46 = phi i32 [ 0, %41 ], [ %92, %91 ]
  %47 = getelementptr inbounds double, double* %45, i64 1
  %48 = load double, double* %45, align 8, !tbaa !27
  %49 = fptosi double %48 to i32
  %50 = getelementptr inbounds double, double* %45, i64 2
  %51 = load double, double* %47, align 8, !tbaa !27
  %52 = fptosi double %51 to i32
  %53 = getelementptr inbounds i32, i32* %1, i64 %44
  store i32 %52, i32* %53, align 4, !tbaa !18
  %54 = getelementptr inbounds double, double* %45, i64 3
  %55 = load double, double* %50, align 8, !tbaa !27
  %56 = fadd double %55, -6.000000e+00
  %57 = fmul double %56, 0xBFCD791C5F888823
  %58 = tail call double @exp(double %57) #21
  %59 = getelementptr inbounds double, double* %4, i64 %44
  store double %58, double* %59, align 8, !tbaa !27
  %60 = bitcast double* %54 to i64*
  %61 = load i64, i64* %60, align 8, !tbaa !27
  %62 = getelementptr inbounds double, double* %5, i64 %44
  %63 = bitcast double* %62 to i64*
  store i64 %61, i64* %63, align 8, !tbaa !27
  %64 = getelementptr inbounds double, double* %45, i64 5
  %65 = getelementptr inbounds double, double* %45, i64 6
  %66 = bitcast double* %64 to i64*
  %67 = load i64, i64* %66, align 8, !tbaa !27
  %68 = getelementptr inbounds [63 x double], [63 x double]* %19, i64 0, i64 %44
  %69 = bitcast double* %68 to i64*
  store i64 %67, i64* %69, align 8, !tbaa !27
  %70 = zext i32 %49 to i64
  %71 = icmp eq i64 %44, %70
  br i1 %71, label %72, label %78

72:                                               ; preds = %43
  %73 = load i32, i32* %53, align 4, !tbaa !18
  %74 = icmp sgt i32 %73, 0
  br i1 %74, label %75, label %91

75:                                               ; preds = %72
  %76 = sext i32 %46 to i64
  %77 = trunc i64 %44 to i32
  br label %81

78:                                               ; preds = %43
  %79 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %80 = tail call i64 @fwrite(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2.370, i64 0, i64 0), i64 26, i64 1, %struct._IO_FILE* %79) #19
  tail call void @exit(i32 -1) #20
  unreachable

81:                                               ; preds = %81, %75
  %82 = phi i64 [ %76, %75 ], [ %84, %81 ]
  %83 = phi i32 [ 0, %75 ], [ %86, %81 ]
  %84 = add nsw i64 %82, 1
  %85 = getelementptr inbounds i32, i32* %3, i64 %82
  store i32 %77, i32* %85, align 4, !tbaa !18
  %86 = add nuw nsw i32 %83, 1
  %87 = load i32, i32* %53, align 4, !tbaa !18
  %88 = icmp slt i32 %86, %87
  br i1 %88, label %81, label %89

89:                                               ; preds = %81
  %90 = trunc i64 %84 to i32
  br label %91

91:                                               ; preds = %89, %72
  %92 = phi i32 [ %46, %72 ], [ %90, %89 ]
  %93 = add nuw nsw i64 %44, 1
  %94 = icmp eq i64 %44, %42
  br i1 %94, label %99, label %43

95:                                               ; preds = %28
  %96 = mul nsw i32 %37, 6
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds double, double* %34, i64 %97
  br label %99

99:                                               ; preds = %95, %91, %39
  %100 = phi double* [ %98, %95 ], [ %34, %39 ], [ %65, %91 ]
  %101 = phi i32 [ %29, %95 ], [ %37, %39 ], [ %37, %91 ]
  %102 = add nuw nsw i32 %31, 1
  %103 = icmp eq i32 %102, 6
  br i1 %103, label %23, label %28

104:                                              ; preds = %145, %26
  %105 = phi i64 [ 0, %26 ], [ %146, %145 ]
  %106 = getelementptr inbounds [63 x double], [63 x double]* %19, i64 0, i64 %105
  %107 = load double, double* %106, align 8, !tbaa !27
  br label %108

108:                                              ; preds = %140, %104
  %109 = phi i64 [ 0, %104 ], [ %143, %140 ]
  %110 = getelementptr inbounds [63 x double], [63 x double]* %19, i64 0, i64 %109
  %111 = icmp ult i64 %105, %109
  %112 = load double, double* %110, align 8, !tbaa !27
  %113 = fsub double %107, %112
  %114 = select i1 %111, double 1.500000e+00, double 3.000000e+00
  %115 = fmul double %114, %113
  %116 = fcmp oge double %115, 5.000000e-01
  %117 = fcmp ole double %115, 2.500000e+00
  %118 = and i1 %116, %117
  br i1 %118, label %119, label %125

119:                                              ; preds = %108
  %120 = fadd double %115, -5.000000e-01
  %121 = fmul double %120, %120
  %122 = fmul double %120, 2.000000e+00
  %123 = fsub double %121, %122
  %124 = fmul double %123, 8.000000e+00
  br label %125

125:                                              ; preds = %119, %108
  %126 = phi double [ %124, %119 ], [ 0.000000e+00, %108 ]
  %127 = fadd double %115, 4.740000e-01
  %128 = fmul double %127, 7.500000e+00
  %129 = fadd double %128, 0x402F9F6E6106AB15
  %130 = fmul double %127, %127
  %131 = fadd double %130, 1.000000e+00
  %132 = tail call double @sqrt(double %131) #21
  %133 = fmul double %132, 1.750000e+01
  %134 = fsub double %129, %133
  %135 = fcmp ugt double %134, -6.000000e+01
  br i1 %135, label %136, label %140

136:                                              ; preds = %125
  %137 = fadd double %126, %134
  %138 = fmul double %137, 0x3FCD791C5F888823
  %139 = tail call double @exp(double %138) #21
  br label %140

140:                                              ; preds = %136, %125
  %141 = phi double [ %139, %136 ], [ 0.000000e+00, %125 ]
  %142 = getelementptr inbounds [64 x double], [64 x double]* %6, i64 %105, i64 %109
  store double %141, double* %142, align 8
  %143 = add nuw nsw i64 %109, 1
  %144 = icmp eq i64 %143, %27
  br i1 %144, label %145, label %108

145:                                              ; preds = %140
  %146 = add nuw nsw i64 %105, 1
  %147 = icmp eq i64 %146, %27
  br i1 %147, label %25, label %104

148:                                              ; preds = %211
  %149 = icmp sgt i32 %213, 0
  br i1 %149, label %150, label %260

150:                                              ; preds = %148
  %151 = zext i32 %213 to i64
  br label %216

152:                                              ; preds = %211, %25
  %153 = phi i32 [ %213, %211 ], [ %101, %25 ]
  %154 = phi double* [ %212, %211 ], [ %100, %25 ]
  %155 = phi i32 [ %214, %211 ], [ 0, %25 ]
  %156 = getelementptr inbounds double, double* %154, i64 1
  %157 = load double, double* %154, align 8, !tbaa !27
  %158 = getelementptr inbounds double, double* %154, i64 2
  %159 = load double, double* %156, align 8, !tbaa !27
  %160 = fptosi double %159 to i32
  %161 = add nsw i32 %160, 1
  %162 = fcmp oeq double %157, %0
  br i1 %162, label %163, label %207

163:                                              ; preds = %152
  %164 = icmp slt i32 %160, 0
  br i1 %164, label %202, label %165

165:                                              ; preds = %163
  %166 = zext i32 %160 to i64
  %167 = add nuw i32 %160, 1
  br label %168

168:                                              ; preds = %197, %165
  %169 = phi i64 [ 0, %165 ], [ %200, %197 ]
  %170 = phi double* [ %158, %165 ], [ %198, %197 ]
  %171 = getelementptr inbounds double, double* %170, i64 1
  %172 = load double, double* %170, align 8, !tbaa !27
  %173 = fptosi double %172 to i32
  %174 = getelementptr inbounds double, double* %170, i64 2
  %175 = load double, double* %171, align 8, !tbaa !27
  %176 = fptosi double %175 to i32
  %177 = getelementptr inbounds i32, i32* %2, i64 %169
  store i32 %176, i32* %177, align 4, !tbaa !18
  %178 = bitcast double* %174 to i64*
  %179 = load i64, i64* %178, align 8, !tbaa !27
  %180 = getelementptr inbounds double, double* %8, i64 %169
  %181 = bitcast double* %180 to i64*
  store i64 %179, i64* %181, align 8, !tbaa !27
  %182 = getelementptr inbounds double, double* %170, i64 4
  %183 = getelementptr inbounds double, double* %170, i64 5
  %184 = bitcast double* %182 to i64*
  %185 = load i64, i64* %184, align 8, !tbaa !27
  %186 = getelementptr inbounds double, double* %9, i64 %169
  %187 = bitcast double* %186 to i64*
  store i64 %185, i64* %187, align 8, !tbaa !27
  %188 = bitcast double* %183 to i64*
  %189 = load i64, i64* %188, align 8, !tbaa !27
  %190 = getelementptr inbounds [63 x double], [63 x double]* %20, i64 0, i64 %169
  %191 = bitcast double* %190 to i64*
  store i64 %189, i64* %191, align 8, !tbaa !27
  %192 = zext i32 %173 to i64
  %193 = icmp eq i64 %169, %192
  br i1 %193, label %197, label %194

194:                                              ; preds = %168
  %195 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %196 = tail call i64 @fwrite(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3.371, i64 0, i64 0), i64 26, i64 1, %struct._IO_FILE* %195) #19
  tail call void @exit(i32 -1) #20
  unreachable

197:                                              ; preds = %168
  %198 = getelementptr inbounds double, double* %170, i64 6
  %199 = add nsw i32 %176, -1
  store i32 %199, i32* %177, align 4, !tbaa !18
  %200 = add nuw nsw i64 %169, 1
  %201 = icmp eq i64 %169, %166
  br i1 %201, label %202, label %168

202:                                              ; preds = %197, %163
  %203 = phi i32 [ 0, %163 ], [ %167, %197 ]
  %204 = phi double* [ %158, %163 ], [ %198, %197 ]
  %205 = zext i32 %203 to i64
  %206 = getelementptr inbounds i32, i32* %2, i64 %205
  store i32 -1, i32* %206, align 4, !tbaa !18
  br label %211

207:                                              ; preds = %152
  %208 = mul nsw i32 %161, 6
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds double, double* %158, i64 %209
  br label %211

211:                                              ; preds = %207, %202
  %212 = phi double* [ %204, %202 ], [ %210, %207 ]
  %213 = phi i32 [ %161, %202 ], [ %153, %207 ]
  %214 = add nuw nsw i32 %155, 1
  %215 = icmp eq i32 %214, 6
  br i1 %215, label %148, label %152

216:                                              ; preds = %257, %150
  %217 = phi i64 [ 0, %150 ], [ %258, %257 ]
  %218 = getelementptr inbounds [63 x double], [63 x double]* %20, i64 0, i64 %217
  %219 = load double, double* %218, align 8, !tbaa !27
  br label %220

220:                                              ; preds = %252, %216
  %221 = phi i64 [ 0, %216 ], [ %255, %252 ]
  %222 = getelementptr inbounds [63 x double], [63 x double]* %20, i64 0, i64 %221
  %223 = icmp ult i64 %217, %221
  %224 = load double, double* %222, align 8, !tbaa !27
  %225 = fsub double %219, %224
  %226 = select i1 %223, double 1.500000e+00, double 3.000000e+00
  %227 = fmul double %226, %225
  %228 = fcmp oge double %227, 5.000000e-01
  %229 = fcmp ole double %227, 2.500000e+00
  %230 = and i1 %228, %229
  br i1 %230, label %231, label %237

231:                                              ; preds = %220
  %232 = fadd double %227, -5.000000e-01
  %233 = fmul double %232, %232
  %234 = fmul double %232, 2.000000e+00
  %235 = fsub double %233, %234
  %236 = fmul double %235, 8.000000e+00
  br label %237

237:                                              ; preds = %231, %220
  %238 = phi double [ %236, %231 ], [ 0.000000e+00, %220 ]
  %239 = fadd double %227, 4.740000e-01
  %240 = fmul double %239, 7.500000e+00
  %241 = fadd double %240, 0x402F9F6E6106AB15
  %242 = fmul double %239, %239
  %243 = fadd double %242, 1.000000e+00
  %244 = tail call double @sqrt(double %243) #21
  %245 = fmul double %244, 1.750000e+01
  %246 = fsub double %241, %245
  %247 = fcmp ugt double %246, -6.000000e+01
  br i1 %247, label %248, label %252

248:                                              ; preds = %237
  %249 = fadd double %238, %246
  %250 = fmul double %249, 0x3FCD791C5F888823
  %251 = tail call double @exp(double %250) #21
  br label %252

252:                                              ; preds = %248, %237
  %253 = phi double [ %251, %248 ], [ 0.000000e+00, %237 ]
  %254 = getelementptr inbounds [64 x double], [64 x double]* %7, i64 %217, i64 %221
  store double %253, double* %254, align 8
  %255 = add nuw nsw i64 %221, 1
  %256 = icmp eq i64 %255, %151
  br i1 %256, label %257, label %220

257:                                              ; preds = %252
  %258 = add nuw nsw i64 %217, 1
  %259 = icmp eq i64 %258, %151
  br i1 %259, label %260, label %216

260:                                              ; preds = %257, %148
  br label %261

261:                                              ; preds = %330, %260
  %262 = phi double* [ %331, %330 ], [ %212, %260 ]
  %263 = phi i32 [ %332, %330 ], [ 0, %260 ]
  %264 = getelementptr inbounds double, double* %262, i64 1
  %265 = load double, double* %262, align 8, !tbaa !27
  %266 = getelementptr inbounds double, double* %262, i64 2
  %267 = load double, double* %264, align 8, !tbaa !27
  %268 = fptosi double %267 to i32
  %269 = fcmp oeq double %265, %0
  br i1 %269, label %270, label %325

270:                                              ; preds = %261
  %271 = icmp slt i32 %268, 0
  br i1 %271, label %330, label %272

272:                                              ; preds = %270
  %273 = zext i32 %268 to i64
  br label %274

274:                                              ; preds = %322, %272
  %275 = phi i64 [ 0, %272 ], [ %323, %322 ]
  %276 = phi double* [ %266, %272 ], [ %293, %322 ]
  %277 = load double, double* %276, align 8, !tbaa !27
  %278 = fptosi double %277 to i32
  %279 = getelementptr inbounds double, double* %276, i64 2
  %280 = getelementptr inbounds double, double* %276, i64 3
  %281 = load double, double* %279, align 8, !tbaa !27
  %282 = fptosi double %281 to i32
  %283 = getelementptr inbounds i32, i32* %10, i64 %275
  store i32 %282, i32* %283, align 4, !tbaa !18
  %284 = getelementptr inbounds double, double* %276, i64 4
  %285 = load double, double* %280, align 8, !tbaa !27
  %286 = fptosi double %285 to i32
  %287 = getelementptr inbounds i32, i32* %11, i64 %275
  store i32 %286, i32* %287, align 4, !tbaa !18
  %288 = getelementptr inbounds double, double* %276, i64 5
  %289 = bitcast double* %284 to i64*
  %290 = load i64, i64* %289, align 8, !tbaa !27
  %291 = getelementptr inbounds double, double* %12, i64 %275
  %292 = bitcast double* %291 to i64*
  store i64 %290, i64* %292, align 8, !tbaa !27
  %293 = getelementptr inbounds double, double* %276, i64 6
  %294 = bitcast double* %288 to i64*
  %295 = load i64, i64* %294, align 8, !tbaa !27
  %296 = getelementptr inbounds double, double* %13, i64 %275
  %297 = bitcast double* %296 to i64*
  store i64 %295, i64* %297, align 8, !tbaa !27
  %298 = zext i32 %278 to i64
  %299 = icmp eq i64 %275, %298
  br i1 %299, label %303, label %300

300:                                              ; preds = %274
  %301 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %302 = tail call i64 @fwrite(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.4.372, i64 0, i64 0), i64 27, i64 1, %struct._IO_FILE* %301) #19
  tail call void @exit(i32 -1) #20
  unreachable

303:                                              ; preds = %274
  %304 = icmp eq i64 %275, 0
  br i1 %304, label %322, label %305

305:                                              ; preds = %303
  %306 = load double, double* %291, align 8, !tbaa !27
  %307 = fsub double 1.000000e+00, %306
  %308 = add nsw i64 %275, -1
  %309 = getelementptr inbounds double, double* %13, i64 %308
  %310 = load double, double* %309, align 8, !tbaa !27
  %311 = fsub double %307, %310
  %312 = tail call double @llvm.fabs.f64(double %311)
  %313 = fcmp ogt double %312, 1.000000e-02
  br i1 %313, label %314, label %322

314:                                              ; preds = %305
  %315 = getelementptr inbounds double, double* %13, i64 %308
  %316 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %317 = tail call i64 @fwrite(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5.373, i64 0, i64 0), i64 30, i64 1, %struct._IO_FILE* %316) #19
  %318 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %319 = load double, double* %291, align 8, !tbaa !27
  %320 = load double, double* %315, align 8, !tbaa !27
  %321 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %318, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6.374, i64 0, i64 0), double %319, double %320) #19
  tail call void @exit(i32 -1) #20
  unreachable

322:                                              ; preds = %305, %303
  %323 = add nuw nsw i64 %275, 1
  %324 = icmp eq i64 %275, %273
  br i1 %324, label %330, label %274

325:                                              ; preds = %261
  %326 = mul i32 %268, 6
  %327 = add i32 %326, 6
  %328 = sext i32 %327 to i64
  %329 = getelementptr inbounds double, double* %266, i64 %328
  br label %330

330:                                              ; preds = %325, %322, %270
  %331 = phi double* [ %329, %325 ], [ %266, %270 ], [ %293, %322 ]
  %332 = add nuw nsw i32 %263, 1
  %333 = icmp eq i32 %332, 6
  br i1 %333, label %334, label %261

334:                                              ; preds = %403, %330
  %335 = phi double* [ %404, %403 ], [ %331, %330 ]
  %336 = phi i32 [ %405, %403 ], [ 0, %330 ]
  %337 = getelementptr inbounds double, double* %335, i64 1
  %338 = load double, double* %335, align 8, !tbaa !27
  %339 = getelementptr inbounds double, double* %335, i64 2
  %340 = load double, double* %337, align 8, !tbaa !27
  %341 = fptosi double %340 to i32
  %342 = fcmp oeq double %338, %0
  br i1 %342, label %343, label %398

343:                                              ; preds = %334
  %344 = icmp slt i32 %341, 0
  br i1 %344, label %403, label %345

345:                                              ; preds = %343
  %346 = zext i32 %341 to i64
  br label %347

347:                                              ; preds = %395, %345
  %348 = phi i64 [ 0, %345 ], [ %396, %395 ]
  %349 = phi double* [ %339, %345 ], [ %366, %395 ]
  %350 = load double, double* %349, align 8, !tbaa !27
  %351 = fptosi double %350 to i32
  %352 = getelementptr inbounds double, double* %349, i64 2
  %353 = getelementptr inbounds double, double* %349, i64 3
  %354 = load double, double* %352, align 8, !tbaa !27
  %355 = fptosi double %354 to i32
  %356 = getelementptr inbounds i32, i32* %14, i64 %348
  store i32 %355, i32* %356, align 4, !tbaa !18
  %357 = getelementptr inbounds double, double* %349, i64 4
  %358 = load double, double* %353, align 8, !tbaa !27
  %359 = fptosi double %358 to i32
  %360 = getelementptr inbounds i32, i32* %15, i64 %348
  store i32 %359, i32* %360, align 4, !tbaa !18
  %361 = getelementptr inbounds double, double* %349, i64 5
  %362 = bitcast double* %357 to i64*
  %363 = load i64, i64* %362, align 8, !tbaa !27
  %364 = getelementptr inbounds double, double* %16, i64 %348
  %365 = bitcast double* %364 to i64*
  store i64 %363, i64* %365, align 8, !tbaa !27
  %366 = getelementptr inbounds double, double* %349, i64 6
  %367 = bitcast double* %361 to i64*
  %368 = load i64, i64* %367, align 8, !tbaa !27
  %369 = getelementptr inbounds double, double* %17, i64 %348
  %370 = bitcast double* %369 to i64*
  store i64 %368, i64* %370, align 8, !tbaa !27
  %371 = zext i32 %351 to i64
  %372 = icmp eq i64 %348, %371
  br i1 %372, label %376, label %373

373:                                              ; preds = %347
  %374 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %375 = tail call i64 @fwrite(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.4.372, i64 0, i64 0), i64 27, i64 1, %struct._IO_FILE* %374) #19
  tail call void @exit(i32 -1) #20
  unreachable

376:                                              ; preds = %347
  %377 = icmp eq i64 %348, 0
  br i1 %377, label %395, label %378

378:                                              ; preds = %376
  %379 = load double, double* %364, align 8, !tbaa !27
  %380 = fsub double 1.000000e+00, %379
  %381 = add nsw i64 %348, -1
  %382 = getelementptr inbounds double, double* %17, i64 %381
  %383 = load double, double* %382, align 8, !tbaa !27
  %384 = fsub double %380, %383
  %385 = tail call double @llvm.fabs.f64(double %384)
  %386 = fcmp ogt double %385, 1.000000e-02
  br i1 %386, label %387, label %395

387:                                              ; preds = %378
  %388 = getelementptr inbounds double, double* %17, i64 %381
  %389 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %390 = tail call i64 @fwrite(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.7.375, i64 0, i64 0), i64 30, i64 1, %struct._IO_FILE* %389) #19
  %391 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %392 = load double, double* %364, align 8, !tbaa !27
  %393 = load double, double* %388, align 8, !tbaa !27
  %394 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %391, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6.374, i64 0, i64 0), double %392, double %393) #19
  tail call void @exit(i32 -1) #20
  unreachable

395:                                              ; preds = %378, %376
  %396 = add nuw nsw i64 %348, 1
  %397 = icmp eq i64 %348, %346
  br i1 %397, label %403, label %347

398:                                              ; preds = %334
  %399 = mul i32 %341, 6
  %400 = add i32 %399, 6
  %401 = sext i32 %400 to i64
  %402 = getelementptr inbounds double, double* %339, i64 %401
  br label %403

403:                                              ; preds = %398, %395, %343
  %404 = phi double* [ %402, %398 ], [ %339, %343 ], [ %366, %395 ]
  %405 = add nuw nsw i32 %336, 1
  %406 = icmp eq i32 %405, 6
  br i1 %406, label %407, label %334

407:                                              ; preds = %403
  call void @llvm.lifetime.end.p0i8(i64 504, i8* nonnull %22) #21
  call void @llvm.lifetime.end.p0i8(i64 504, i8* nonnull %21) #21
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local double @exp(double) local_unnamed_addr #4

declare float @sqrtf(float) local_unnamed_addr

; Function Attrs: nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float) #12

; Function Attrs: nofree nounwind
declare dso_local double @sqrt(double) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare dso_local double @log10(double) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare dso_local void @abort() local_unnamed_addr #2

; Function Attrs: nounwind uwtable
define dso_local void @iteration_loop(%struct.lame_global_flags* %0, [2 x double]* %1, double* nocapture readonly %2, [2 x [576 x double]]* %3, [2 x %struct.III_psy_ratio]* %4, %struct.III_side_info_t* %5, [2 x [576 x i32]]* %6, [2 x %struct.III_scalefac_t]* %7) local_unnamed_addr #0 {
  %9 = alloca [4 x double], align 16
  %10 = alloca [2 x %struct.III_psy_xmin], align 16
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca [2 x i32], align 4
  %14 = bitcast [4 x double]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %14) #21
  %15 = bitcast [2 x %struct.III_psy_xmin]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 976, i8* nonnull %15) #21
  %16 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %16) #21
  %17 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #21
  tail call void @iteration_init(%struct.lame_global_flags* %0, %struct.III_side_info_t* %5, [2 x [576 x i32]]* %6) #21
  call void @getframebits(%struct.lame_global_flags* %0, i32* nonnull %11, i32* nonnull %12) #21
  %18 = load i32, i32* %12, align 4, !tbaa !18
  %19 = load i32, i32* %11, align 4, !tbaa !18
  %20 = call i32 @ResvFrameBegin(%struct.lame_global_flags* %0, %struct.III_side_info_t* %5, i32 %18, i32 %19) #21
  %21 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 45
  %22 = load i32, i32* %21, align 8, !tbaa !95
  %23 = icmp sgt i32 %22, 0
  br i1 %23, label %24, label %106

24:                                               ; preds = %8
  %25 = bitcast [2 x i32]* %13 to i8*
  %26 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 0
  %27 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 46
  %28 = getelementptr inbounds [4 x double], [4 x double]* %9, i64 0, i64 0
  %29 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 64
  %30 = bitcast [4 x double]* %9 to i8*
  br label %31

31:                                               ; preds = %101, %24
  %32 = phi i64 [ 0, %24 ], [ %102, %101 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #21
  %33 = load i32, i32* @convert_mdct, align 4, !tbaa !18
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %37, label %35

35:                                               ; preds = %31
  %36 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %3, i64 %32, i64 0
  call void @ms_convert([576 x double]* %36, [576 x double]* %36) #21
  br label %37

37:                                               ; preds = %35, %31
  %38 = load i32, i32* %12, align 4, !tbaa !18
  %39 = trunc i64 %32 to i32
  call void @on_pe(%struct.lame_global_flags* nonnull %0, [2 x double]* %1, %struct.III_side_info_t* %5, i32* nonnull %26, i32 %38, i32 %39) #21
  %40 = load i32, i32* @reduce_sidechannel, align 4, !tbaa !18
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %46, label %42

42:                                               ; preds = %37
  %43 = getelementptr inbounds double, double* %2, i64 %32
  %44 = load double, double* %43, align 8, !tbaa !27
  %45 = load i32, i32* %12, align 4, !tbaa !18
  call void @reduce_side(i32* nonnull %26, double %44, i32 %45) #21
  br label %46

46:                                               ; preds = %42, %37
  %47 = load i32, i32* %27, align 4, !tbaa !126
  %48 = icmp sgt i32 %47, 0
  br i1 %48, label %49, label %101

49:                                               ; preds = %96, %46
  %50 = phi i64 [ %97, %96 ], [ 0, %46 ]
  %51 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %5, i64 0, i32 4, i64 %32, i32 0, i64 %50, i32 0
  %52 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %3, i64 %32, i64 %50, i64 0
  %53 = call i32 @init_outer_loop(%struct.lame_global_flags* nonnull %0, double* %52, %struct.gr_info* nonnull %51)
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %61

55:                                               ; preds = %49
  %56 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %7, i64 %32, i64 %50
  %57 = bitcast %struct.III_scalefac_t* %56 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(244) %57, i8 0, i64 244, i1 false)
  %58 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %6, i64 %32, i64 %50, i64 0
  %59 = bitcast i32* %58 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(2304) %59, i8 0, i64 2304, i1 false)
  %60 = trunc i64 %50 to i32
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(32) %30, i8 0, i64 32, i1 false)
  br label %70

61:                                               ; preds = %49
  %62 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %4, i64 %32, i64 %50
  %63 = getelementptr inbounds [2 x %struct.III_psy_xmin], [2 x %struct.III_psy_xmin]* %10, i64 0, i64 %50
  %64 = call i32 @calc_xmin(%struct.lame_global_flags* nonnull %0, double* %52, %struct.III_psy_ratio* %62, %struct.gr_info* nonnull %51, %struct.III_psy_xmin* nonnull %63) #21
  %65 = getelementptr inbounds [2 x i32], [2 x i32]* %13, i64 0, i64 %50
  %66 = load i32, i32* %65, align 4, !tbaa !18
  %67 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %6, i64 %32, i64 %50, i64 0
  %68 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %7, i64 %32, i64 %50
  %69 = trunc i64 %50 to i32
  call void @outer_loop(%struct.lame_global_flags* nonnull %0, double* %52, i32 %66, double* nonnull %28, %struct.III_psy_xmin* nonnull %63, i32* %67, %struct.III_scalefac_t* %68, %struct.gr_info* nonnull %51, [21 x double]* undef, i32 %69)
  br label %70

70:                                               ; preds = %61, %55
  %71 = phi i32 [ %69, %61 ], [ %60, %55 ]
  call void @best_scalefac_store(%struct.lame_global_flags* nonnull %0, i32 %39, i32 %71, [2 x [576 x i32]]* %6, %struct.III_side_info_t* %5, [2 x %struct.III_scalefac_t]* %7) #21
  %72 = load i32, i32* %29, align 4, !tbaa !187
  %73 = icmp eq i32 %72, 1
  br i1 %73, label %74, label %80

74:                                               ; preds = %70
  %75 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %5, i64 0, i32 4, i64 %32, i32 0, i64 %50, i32 0, i32 6
  %76 = load i32, i32* %75, align 8, !tbaa !138
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %80

78:                                               ; preds = %74
  %79 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %6, i64 %32, i64 %50, i64 0
  call void @best_huffman_divide(i32 %39, i32 %71, %struct.gr_info* nonnull %51, i32* %79) #21
  br label %80

80:                                               ; preds = %78, %74, %70
  %81 = load i32, i32* %12, align 4, !tbaa !18
  call void @ResvAdjust(%struct.lame_global_flags* nonnull %0, %struct.gr_info* nonnull %51, %struct.III_side_info_t* %5, i32 %81) #21
  br label %82

82:                                               ; preds = %112, %80
  %83 = phi i64 [ 0, %80 ], [ %113, %112 ]
  %84 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %3, i64 %32, i64 %50, i64 %83
  %85 = load double, double* %84, align 8, !tbaa !27
  %86 = fcmp olt double %85, 0.000000e+00
  br i1 %86, label %87, label %91

87:                                               ; preds = %82
  %88 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %6, i64 %32, i64 %50, i64 %83
  %89 = load i32, i32* %88, align 4, !tbaa !18
  %90 = sub nsw i32 0, %89
  store i32 %90, i32* %88, align 4, !tbaa !18
  br label %91

91:                                               ; preds = %87, %82
  %92 = or i64 %83, 1
  %93 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %3, i64 %32, i64 %50, i64 %92
  %94 = load double, double* %93, align 8, !tbaa !27
  %95 = fcmp olt double %94, 0.000000e+00
  br i1 %95, label %108, label %112

96:                                               ; preds = %112
  %97 = add nuw nsw i64 %50, 1
  %98 = load i32, i32* %27, align 4, !tbaa !126
  %99 = sext i32 %98 to i64
  %100 = icmp slt i64 %97, %99
  br i1 %100, label %49, label %101

101:                                              ; preds = %96, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #21
  %102 = add nuw nsw i64 %32, 1
  %103 = load i32, i32* %21, align 8, !tbaa !95
  %104 = sext i32 %103 to i64
  %105 = icmp slt i64 %102, %104
  br i1 %105, label %31, label %106

106:                                              ; preds = %101, %8
  %107 = load i32, i32* %12, align 4, !tbaa !18
  call void @ResvFrameEnd(%struct.lame_global_flags* nonnull %0, %struct.III_side_info_t* %5, i32 %107) #21
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #21
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %16) #21
  call void @llvm.lifetime.end.p0i8(i64 976, i8* nonnull %15) #21
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %14) #21
  ret void

108:                                              ; preds = %91
  %109 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %6, i64 %32, i64 %50, i64 %92
  %110 = load i32, i32* %109, align 4, !tbaa !18
  %111 = sub nsw i32 0, %110
  store i32 %111, i32* %109, align 4, !tbaa !18
  br label %112

112:                                              ; preds = %108, %91
  %113 = add nuw nsw i64 %83, 2
  %114 = icmp eq i64 %113, 576
  br i1 %114, label %96, label %82
}

; Function Attrs: nounwind uwtable
define dso_local i32 @init_outer_loop(%struct.lame_global_flags* nocapture readonly %0, double* nocapture readonly %1, %struct.gr_info* %2) local_unnamed_addr #0 {
  %4 = getelementptr %struct.gr_info, %struct.gr_info* %2, i64 0, i32 20, i64 0
  %5 = bitcast i32* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %5, i8 0, i64 16, i1 false)
  %6 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 19
  store i32* getelementptr inbounds ([6 x [3 x [4 x i32]]], [6 x [3 x [4 x i32]]]* @nr_of_sfb_block, i64 0, i64 0, i64 0, i64 0), i32** %6, align 8, !tbaa !147
  %7 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 0
  store i32 0, i32* %7, align 8, !tbaa !132
  %8 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 1
  store i32 0, i32* %8, align 4, !tbaa !134
  %9 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 2
  store i32 0, i32* %9, align 8, !tbaa !150
  %10 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 4
  store i32 0, i32* %10, align 8, !tbaa !136
  %11 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 8, i64 0
  %12 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 9, i64 0
  %13 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 9, i64 1
  %14 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 9, i64 2
  %15 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 15
  store i32 0, i32* %15, align 4, !tbaa !154
  %16 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 3
  %17 = bitcast i32* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(40) %17, i8 0, i64 40, i1 false)
  store i32 210, i32* %16, align 4, !tbaa !135
  %18 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 14
  store i32 0, i32* %18, align 8, !tbaa !144
  %19 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 18
  store i32 0, i32* %19, align 8, !tbaa !299
  %20 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 20
  %21 = load i32, i32* %20, align 4, !tbaa !283
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %24

23:                                               ; preds = %24, %3
  br label %121

24:                                               ; preds = %3
  %25 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 6
  %26 = load i32, i32* %25, align 8, !tbaa !138
  %27 = icmp eq i32 %26, 2
  br i1 %27, label %28, label %23

28:                                               ; preds = %28, %24
  %29 = phi double [ %54, %28 ], [ 0.000000e+00, %24 ]
  %30 = phi i64 [ %63, %28 ], [ 0, %24 ]
  %31 = phi i32 [ %62, %28 ], [ 0, %24 ]
  %32 = phi <2 x double> [ %61, %28 ], [ zeroinitializer, %24 ]
  %33 = getelementptr inbounds double, double* %1, i64 %30
  %34 = load double, double* %33, align 8, !tbaa !27
  %35 = or i64 %30, 1
  %36 = getelementptr inbounds double, double* %1, i64 %35
  %37 = load double, double* %36, align 8, !tbaa !27
  %38 = fmul double %37, %37
  %39 = fadd double %29, %38
  %40 = add nuw nsw i64 %30, 2
  %41 = getelementptr inbounds double, double* %1, i64 %40
  %42 = load double, double* %41, align 8, !tbaa !27
  %43 = insertelement <2 x double> undef, double %34, i32 0
  %44 = insertelement <2 x double> %43, double %42, i32 1
  %45 = fmul <2 x double> %44, %44
  %46 = fadd <2 x double> %32, %45
  %47 = add nuw nsw i64 %30, 3
  %48 = getelementptr inbounds double, double* %1, i64 %47
  %49 = load double, double* %48, align 8, !tbaa !27
  %50 = add nuw nsw i64 %30, 4
  %51 = getelementptr inbounds double, double* %1, i64 %50
  %52 = load double, double* %51, align 8, !tbaa !27
  %53 = fmul double %52, %52
  %54 = fadd double %39, %53
  %55 = add nuw nsw i64 %30, 5
  %56 = getelementptr inbounds double, double* %1, i64 %55
  %57 = load double, double* %56, align 8, !tbaa !27
  %58 = insertelement <2 x double> undef, double %49, i32 0
  %59 = insertelement <2 x double> %58, double %57, i32 1
  %60 = fmul <2 x double> %59, %59
  %61 = fadd <2 x double> %46, %60
  %62 = add nuw nsw i32 %31, 2
  %63 = add nuw nsw i64 %30, 6
  %64 = icmp eq i32 %62, 192
  br i1 %64, label %65, label %28

65:                                               ; preds = %28
  %66 = extractelement <2 x double> %61, i32 0
  %67 = fcmp olt double %66, 0x3D719799812DEA11
  %68 = select i1 %67, double 0x3D719799812DEA11, double %66
  %69 = fcmp ogt double %68, %54
  %70 = select i1 %69, double %68, double %54
  %71 = extractelement <2 x double> %61, i32 1
  %72 = fcmp ogt double %70, %71
  %73 = select i1 %72, double %70, double %71
  %74 = fcmp ogt double %54, 0x3D719799812DEA11
  %75 = select i1 %74, double %54, double 0x3D719799812DEA11
  %76 = fdiv double %75, %73
  %77 = fcmp ogt <2 x double> %61, <double 0x3D719799812DEA11, double 0x3D719799812DEA11>
  %78 = select <2 x i1> %77, <2 x double> %61, <2 x double> <double 0x3D719799812DEA11, double 0x3D719799812DEA11>
  %79 = insertelement <2 x double> undef, double %73, i32 0
  %80 = shufflevector <2 x double> %79, <2 x double> undef, <2 x i32> zeroinitializer
  %81 = fdiv <2 x double> %78, %80
  %82 = extractelement <2 x double> %81, i32 0
  %83 = tail call double @log(double %82) #21
  %84 = fmul double %83, 5.000000e-01
  %85 = fdiv double %84, 0x3FE62E42FEFA39EF
  %86 = fsub double 5.000000e-01, %85
  %87 = fptosi double %86 to i32
  %88 = icmp slt i32 %87, 2
  %89 = select i1 %88, i32 %87, i32 2
  %90 = icmp sgt i32 %89, 0
  %91 = select i1 %90, i32 %89, i32 0
  store i32 %91, i32* %12, align 4, !tbaa !18
  %92 = tail call double @log(double %76) #21
  %93 = fmul double %92, 5.000000e-01
  %94 = fdiv double %93, 0x3FE62E42FEFA39EF
  %95 = fsub double 5.000000e-01, %94
  %96 = fptosi double %95 to i32
  %97 = icmp slt i32 %96, 2
  %98 = select i1 %97, i32 %96, i32 2
  %99 = icmp sgt i32 %98, 0
  %100 = select i1 %99, i32 %98, i32 0
  store i32 %100, i32* %13, align 4, !tbaa !18
  %101 = extractelement <2 x double> %81, i32 1
  %102 = tail call double @log(double %101) #21
  %103 = fmul double %102, 5.000000e-01
  %104 = fdiv double %103, 0x3FE62E42FEFA39EF
  %105 = fsub double 5.000000e-01, %104
  %106 = fptosi double %105 to i32
  %107 = icmp slt i32 %106, 2
  %108 = select i1 %107, i32 %106, i32 2
  %109 = icmp sgt i32 %108, 0
  %110 = select i1 %109, i32 %108, i32 0
  store i32 %110, i32* %14, align 4, !tbaa !18
  %111 = fadd double %82, %76
  %112 = fadd double %111, %101
  %113 = fcmp ogt double %112, 1.000000e-99
  %114 = zext i1 %113 to i32
  br label %127

115:                                              ; preds = %121
  %116 = or i64 %122, 1
  %117 = getelementptr inbounds double, double* %1, i64 %116
  %118 = load double, double* %117, align 8, !tbaa !27
  %119 = tail call double @llvm.fabs.f64(double %118)
  %120 = fcmp ogt double %119, 1.000000e-99
  br i1 %120, label %127, label %129

121:                                              ; preds = %141, %23
  %122 = phi i64 [ 0, %23 ], [ %142, %141 ]
  %123 = getelementptr inbounds double, double* %1, i64 %122
  %124 = load double, double* %123, align 8, !tbaa !27
  %125 = tail call double @llvm.fabs.f64(double %124)
  %126 = fcmp ogt double %125, 1.000000e-99
  br i1 %126, label %127, label %115

127:                                              ; preds = %141, %135, %129, %121, %115, %65
  %128 = phi i32 [ %114, %65 ], [ 1, %121 ], [ 1, %115 ], [ 1, %129 ], [ 1, %135 ], [ 0, %141 ]
  ret i32 %128

129:                                              ; preds = %115
  %130 = or i64 %122, 2
  %131 = getelementptr inbounds double, double* %1, i64 %130
  %132 = load double, double* %131, align 8, !tbaa !27
  %133 = tail call double @llvm.fabs.f64(double %132)
  %134 = fcmp ogt double %133, 1.000000e-99
  br i1 %134, label %127, label %135

135:                                              ; preds = %129
  %136 = or i64 %122, 3
  %137 = getelementptr inbounds double, double* %1, i64 %136
  %138 = load double, double* %137, align 8, !tbaa !27
  %139 = tail call double @llvm.fabs.f64(double %138)
  %140 = fcmp ogt double %139, 1.000000e-99
  br i1 %140, label %127, label %141

141:                                              ; preds = %135
  %142 = add nuw nsw i64 %122, 4
  %143 = icmp eq i64 %142, 576
  br i1 %143, label %127, label %121
}

; Function Attrs: nounwind uwtable
define dso_local void @outer_loop(%struct.lame_global_flags* %0, double* nocapture readonly %1, i32 %2, double* nocapture %3, %struct.III_psy_xmin* nocapture readonly %4, i32* nocapture %5, %struct.III_scalefac_t* nocapture %6, %struct.gr_info* %7, [21 x double]* nocapture readnone %8, i32 %9) local_unnamed_addr #0 {
  %11 = alloca %struct.III_scalefac_t, align 4
  %12 = alloca %struct.gr_info, align 8
  %13 = alloca [576 x i32], align 16
  %14 = alloca [576 x double], align 16
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  %18 = alloca [4 x [21 x double]], align 16
  %19 = alloca [4 x [21 x double]], align 16
  %20 = bitcast %struct.III_scalefac_t* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 244, i8* nonnull %20) #21
  %21 = bitcast %struct.gr_info* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %21)
  %22 = bitcast [576 x i32]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2304, i8* nonnull %22) #21
  %23 = bitcast [576 x double]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4608, i8* nonnull %23) #21
  %24 = bitcast double* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #21
  %25 = bitcast double* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #21
  %26 = bitcast double* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #21
  %27 = bitcast [4 x [21 x double]]* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 672, i8* nonnull %27) #21
  %28 = bitcast [4 x [21 x double]]* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 672, i8* nonnull %28) #21
  %29 = sext i32 %9 to i64
  %30 = getelementptr inbounds [2 x i32], [2 x i32]* @outer_loop.OldValue, i64 0, i64 %29
  %31 = getelementptr inbounds [576 x i32], [576 x i32]* %13, i64 0, i64 0
  %32 = getelementptr inbounds [576 x double], [576 x double]* %14, i64 0, i64 0
  %33 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %7, i64 0, i32 3
  %34 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %7, i64 0, i32 15
  %35 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %7, i64 0, i32 0
  %36 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 61
  %37 = getelementptr inbounds [4 x [21 x double]], [4 x [21 x double]]* %18, i64 0, i64 0
  %38 = getelementptr inbounds [4 x [21 x double]], [4 x [21 x double]]* %19, i64 0, i64 0
  %39 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 18
  %40 = bitcast %struct.III_scalefac_t* %6 to i8*
  %41 = bitcast i32* %5 to i8*
  %42 = bitcast %struct.gr_info* %7 to i8*
  %43 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 62
  %44 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 43
  %45 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %7, i64 0, i32 13
  %46 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 19
  br label %47

47:                                               ; preds = %159, %10
  %48 = phi i32 [ 1, %10 ], [ %160, %159 ]
  %49 = phi double [ 0.000000e+00, %10 ], [ %130, %159 ]
  %50 = phi double [ 0.000000e+00, %10 ], [ %129, %159 ]
  %51 = phi double [ 0.000000e+00, %10 ], [ %128, %159 ]
  %52 = phi i32 [ 100, %10 ], [ %127, %159 ]
  %53 = phi i32 [ 0, %10 ], [ %55, %159 ]
  %54 = phi i32 [ 0, %10 ], [ %90, %159 ]
  %55 = add nuw nsw i32 %53, 1
  %56 = icmp eq i32 %48, 0
  br i1 %56, label %89, label %57

57:                                               ; preds = %47
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(244) %20, i8 0, i64 244, i1 false)
  br label %58

58:                                               ; preds = %58, %57
  %59 = phi i64 [ 0, %57 ], [ %83, %58 ]
  %60 = getelementptr inbounds double, double* %1, i64 %59
  %61 = load double, double* %60, align 8, !tbaa !27
  %62 = call double @llvm.fabs.f64(double %61)
  %63 = call double @sqrt(double %62) #21
  %64 = fmul double %63, %62
  %65 = call double @sqrt(double %64) #21
  %66 = getelementptr inbounds [576 x double], [576 x double]* %14, i64 0, i64 %59
  store double %65, double* %66, align 8, !tbaa !27
  %67 = add nuw nsw i64 %59, 1
  %68 = getelementptr inbounds double, double* %1, i64 %67
  %69 = load double, double* %68, align 8, !tbaa !27
  %70 = call double @llvm.fabs.f64(double %69)
  %71 = call double @sqrt(double %70) #21
  %72 = fmul double %71, %70
  %73 = call double @sqrt(double %72) #21
  %74 = getelementptr inbounds [576 x double], [576 x double]* %14, i64 0, i64 %67
  store double %73, double* %74, align 8, !tbaa !27
  %75 = add nuw nsw i64 %59, 2
  %76 = getelementptr inbounds double, double* %1, i64 %75
  %77 = load double, double* %76, align 8, !tbaa !27
  %78 = call double @llvm.fabs.f64(double %77)
  %79 = call double @sqrt(double %78) #21
  %80 = fmul double %79, %78
  %81 = call double @sqrt(double %80) #21
  %82 = getelementptr inbounds [576 x double], [576 x double]* %14, i64 0, i64 %75
  store double %81, double* %82, align 8, !tbaa !27
  %83 = add nuw nsw i64 %59, 3
  %84 = icmp eq i64 %83, 576
  br i1 %84, label %85, label %58

85:                                               ; preds = %58
  %86 = load i32, i32* %30, align 4, !tbaa !18
  %87 = call i32 @bin_search_StepSize2(%struct.lame_global_flags* %0, i32 %2, i32 %86, i32* nonnull %31, double* nonnull %32, %struct.gr_info* %7) #21
  %88 = load i32, i32* %33, align 4, !tbaa !135
  store i32 %88, i32* %30, align 4, !tbaa !18
  br label %89

89:                                               ; preds = %85, %47
  %90 = phi i32 [ %87, %85 ], [ %54, %47 ]
  %91 = load i32, i32* %34, align 4, !tbaa !154
  %92 = sub i32 %2, %91
  %93 = icmp slt i32 %92, 0
  br i1 %93, label %163, label %94

94:                                               ; preds = %89
  %95 = icmp eq i32 %53, 0
  br i1 %95, label %96, label %101

96:                                               ; preds = %94
  %97 = icmp sgt i32 %90, %92
  br i1 %97, label %98, label %103

98:                                               ; preds = %96
  %99 = load i32, i32* %33, align 4, !tbaa !135
  %100 = add i32 %99, 1
  store i32 %100, i32* %33, align 4, !tbaa !135
  br label %101

101:                                              ; preds = %98, %94
  %102 = call i32 @inner_loop(%struct.lame_global_flags* %0, double* nonnull %32, i32* nonnull %31, i32 %92, %struct.gr_info* nonnull %7) #21
  br label %103

103:                                              ; preds = %101, %96
  %104 = phi i32 [ %90, %96 ], [ %102, %101 ]
  store i32 %104, i32* %35, align 8, !tbaa !132
  %105 = load i32, i32* %36, align 8, !tbaa !300
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %109, label %107

107:                                              ; preds = %103
  %108 = call i32 @calc_noise1(double* %1, i32* nonnull %31, %struct.gr_info* nonnull %7, [21 x double]* nonnull %37, [21 x double]* nonnull %38, %struct.III_psy_xmin* %4, %struct.III_scalefac_t* nonnull %11, double* nonnull %16, double* nonnull %17, double* nonnull %15)
  br label %109

109:                                              ; preds = %107, %103
  %110 = phi i32 [ %108, %107 ], [ 0, %103 ]
  br i1 %95, label %111, label %115

111:                                              ; preds = %109
  %112 = load double, double* %15, align 8, !tbaa !27
  %113 = load double, double* %16, align 8, !tbaa !27
  %114 = load double, double* %17, align 8, !tbaa !27
  br label %122

115:                                              ; preds = %109
  %116 = load i32, i32* %39, align 4, !tbaa !281
  %117 = load double, double* %17, align 8, !tbaa !27
  %118 = load double, double* %16, align 8, !tbaa !27
  %119 = load double, double* %15, align 8, !tbaa !27
  %120 = call i32 @quant_compare(i32 %116, i32 %52, double %49, double %50, double %51, i32 %110, double %117, double %118, double %119)
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %126, label %122

122:                                              ; preds = %115, %111
  %123 = phi double [ %114, %111 ], [ %117, %115 ]
  %124 = phi double [ %113, %111 ], [ %118, %115 ]
  %125 = phi double [ %112, %111 ], [ %119, %115 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(244) %40, i8* nonnull align 4 dereferenceable(244) %20, i64 244, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(2304) %41, i8* nonnull align 16 dereferenceable(2304) %22, i64 2304, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(120) %21, i8* nonnull align 8 dereferenceable(120) %42, i64 120, i1 false)
  br label %126

126:                                              ; preds = %122, %115
  %127 = phi i32 [ %52, %115 ], [ %110, %122 ]
  %128 = phi double [ %51, %115 ], [ %125, %122 ]
  %129 = phi double [ %50, %115 ], [ %124, %122 ]
  %130 = phi double [ %49, %115 ], [ %123, %122 ]
  %131 = load i32, i32* %43, align 4, !tbaa !301
  %132 = or i32 %131, %110
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %163, label %134

134:                                              ; preds = %126
  call void @amp_scalefac_bands(double* nonnull %32, %struct.gr_info* nonnull %7, %struct.III_scalefac_t* nonnull %11, [21 x double]* nonnull %38)
  %135 = call i32 @loop_break(%struct.III_scalefac_t* nonnull %11, %struct.gr_info* nonnull %7) #21
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %137, label %150

137:                                              ; preds = %134
  %138 = load i32, i32* %44, align 8, !tbaa !115
  %139 = icmp eq i32 %138, 1
  br i1 %139, label %140, label %142

140:                                              ; preds = %137
  %141 = call i32 @scale_bitcount(%struct.III_scalefac_t* nonnull %11, %struct.gr_info* nonnull %7) #21
  br label %144

142:                                              ; preds = %137
  %143 = call i32 @scale_bitcount_lsf(%struct.III_scalefac_t* nonnull %11, %struct.gr_info* nonnull %7) #21
  br label %144

144:                                              ; preds = %142, %140
  %145 = phi i32 [ %141, %140 ], [ %143, %142 ]
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %150, label %147

147:                                              ; preds = %144
  %148 = load i32, i32* %45, align 4, !tbaa !143
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %154, label %150

150:                                              ; preds = %147, %144, %134
  %151 = phi i32 [ 1, %147 ], [ %135, %134 ], [ 0, %144 ]
  %152 = icmp eq i32 %151, 0
  %153 = zext i1 %152 to i32
  br label %159

154:                                              ; preds = %147
  %155 = load i32, i32* %46, align 8, !tbaa !282
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %163, label %157

157:                                              ; preds = %154
  %158 = call i32 @init_outer_loop(%struct.lame_global_flags* nonnull %0, double* %1, %struct.gr_info* nonnull %7)
  store i32 1, i32* %45, align 4, !tbaa !143
  br label %159

159:                                              ; preds = %157, %150
  %160 = phi i32 [ 1, %157 ], [ 0, %150 ]
  %161 = phi i32 [ 1, %157 ], [ %153, %150 ]
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %163, label %47

163:                                              ; preds = %159, %154, %126, %89
  %164 = phi i32 [ %127, %159 ], [ %127, %126 ], [ %127, %154 ], [ %52, %89 ]
  %165 = phi double [ %128, %159 ], [ %128, %126 ], [ %128, %154 ], [ %51, %89 ]
  %166 = phi double [ %129, %159 ], [ %129, %126 ], [ %129, %154 ], [ %50, %89 ]
  %167 = phi double [ %130, %159 ], [ %130, %126 ], [ %130, %154 ], [ %49, %89 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(120) %42, i8* nonnull align 8 dereferenceable(120) %21, i64 120, i1 false)
  %168 = load i32, i32* %34, align 4, !tbaa !154
  %169 = load i32, i32* %35, align 8, !tbaa !132
  %170 = add i32 %169, %168
  store i32 %170, i32* %35, align 8, !tbaa !132
  %171 = sitofp i32 %164 to double
  store double %171, double* %3, align 8, !tbaa !27
  %172 = getelementptr inbounds double, double* %3, i64 1
  store double %165, double* %172, align 8, !tbaa !27
  %173 = getelementptr inbounds double, double* %3, i64 2
  store double %166, double* %173, align 8, !tbaa !27
  %174 = getelementptr inbounds double, double* %3, i64 3
  store double %167, double* %174, align 8, !tbaa !27
  call void @llvm.lifetime.end.p0i8(i64 672, i8* nonnull %28) #21
  call void @llvm.lifetime.end.p0i8(i64 672, i8* nonnull %27) #21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #21
  call void @llvm.lifetime.end.p0i8(i64 4608, i8* nonnull %23) #21
  call void @llvm.lifetime.end.p0i8(i64 2304, i8* nonnull %22) #21
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %21)
  call void @llvm.lifetime.end.p0i8(i64 244, i8* nonnull %20) #21
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local i32 @calc_noise1(double* nocapture readonly %0, i32* nocapture readonly %1, %struct.gr_info* nocapture readonly %2, [21 x double]* nocapture %3, [21 x double]* nocapture %4, %struct.III_psy_xmin* nocapture readonly %5, %struct.III_scalefac_t* nocapture readonly %6, double* nocapture %7, double* nocapture %8, double* nocapture %9) local_unnamed_addr #3 {
  store double 0.000000e+00, double* %7, align 8, !tbaa !27
  store double 0.000000e+00, double* %8, align 8, !tbaa !27
  store double -9.990000e+02, double* %9, align 8, !tbaa !27
  %11 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 16
  %12 = load i32, i32* %11, align 8, !tbaa !302
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %18, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 12
  %16 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 3
  %17 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 13
  br label %24

18:                                               ; preds = %129, %10
  %19 = phi i32 [ 0, %10 ], [ %130, %129 ]
  %20 = phi i32 [ 0, %10 ], [ %49, %129 ]
  %21 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 17
  %22 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 13
  %23 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 3
  br label %139

24:                                               ; preds = %129, %14
  %25 = phi i64 [ 0, %14 ], [ %48, %129 ]
  %26 = phi i32 [ 0, %14 ], [ %49, %129 ]
  %27 = phi i32 [ 0, %14 ], [ %130, %129 ]
  %28 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %6, i64 0, i32 0, i64 %25
  %29 = load i32, i32* %28, align 4, !tbaa !18
  %30 = load i32, i32* %15, align 8, !tbaa !142
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %36, label %32

32:                                               ; preds = %24
  %33 = getelementptr inbounds [21 x i32], [21 x i32]* @pretab, i64 0, i64 %25
  %34 = load i32, i32* %33, align 4, !tbaa !18
  %35 = add nsw i32 %34, %29
  br label %36

36:                                               ; preds = %32, %24
  %37 = phi i32 [ %35, %32 ], [ %29, %24 ]
  %38 = load i32, i32* %16, align 4, !tbaa !135
  %39 = load i32, i32* %17, align 4, !tbaa !143
  %40 = add i32 %39, 1
  %41 = shl i32 %37, %40
  %42 = sub i32 %38, %41
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds [256 x double], [256 x double]* @pow20, i64 0, i64 %43
  %45 = load double, double* %44, align 8, !tbaa !27
  %46 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 0, i64 %25
  %47 = load i32, i32* %46, align 4, !tbaa !18
  %48 = add nuw nsw i64 %25, 1
  %49 = add nuw nsw i32 %26, 1
  %50 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 0, i64 %48
  %51 = load i32, i32* %50, align 4, !tbaa !18
  %52 = sub nsw i32 %51, %47
  %53 = sitofp i32 %52 to double
  %54 = icmp sgt i32 %51, %47
  br i1 %54, label %55, label %112

55:                                               ; preds = %36
  %56 = sext i32 %47 to i64
  %57 = sext i32 %51 to i64
  %58 = sub nsw i64 %57, %56
  %59 = xor i64 %56, -1
  %60 = and i64 %58, 1
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %76, label %62

62:                                               ; preds = %55
  %63 = getelementptr inbounds double, double* %0, i64 %56
  %64 = load double, double* %63, align 8, !tbaa !27
  %65 = tail call double @llvm.fabs.f64(double %64)
  %66 = getelementptr inbounds i32, i32* %1, i64 %56
  %67 = load i32, i32* %66, align 4, !tbaa !18
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i64 0, i64 %68
  %70 = load double, double* %69, align 8, !tbaa !27
  %71 = fmul double %45, %70
  %72 = fsub double %65, %71
  %73 = fmul double %72, %72
  %74 = fadd double %73, 0.000000e+00
  %75 = add nsw i64 %56, 1
  br label %76

76:                                               ; preds = %62, %55
  %77 = phi double [ %74, %62 ], [ undef, %55 ]
  %78 = phi i64 [ %75, %62 ], [ %56, %55 ]
  %79 = phi double [ %74, %62 ], [ 0.000000e+00, %55 ]
  %80 = sub nsw i64 0, %57
  %81 = icmp eq i64 %59, %80
  br i1 %81, label %112, label %82

82:                                               ; preds = %82, %76
  %83 = phi i64 [ %110, %82 ], [ %78, %76 ]
  %84 = phi double [ %109, %82 ], [ %79, %76 ]
  %85 = getelementptr inbounds double, double* %0, i64 %83
  %86 = load double, double* %85, align 8, !tbaa !27
  %87 = tail call double @llvm.fabs.f64(double %86)
  %88 = getelementptr inbounds i32, i32* %1, i64 %83
  %89 = load i32, i32* %88, align 4, !tbaa !18
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i64 0, i64 %90
  %92 = load double, double* %91, align 8, !tbaa !27
  %93 = fmul double %45, %92
  %94 = fsub double %87, %93
  %95 = fmul double %94, %94
  %96 = fadd double %84, %95
  %97 = add nsw i64 %83, 1
  %98 = getelementptr inbounds double, double* %0, i64 %97
  %99 = load double, double* %98, align 8, !tbaa !27
  %100 = tail call double @llvm.fabs.f64(double %99)
  %101 = getelementptr inbounds i32, i32* %1, i64 %97
  %102 = load i32, i32* %101, align 4, !tbaa !18
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i64 0, i64 %103
  %105 = load double, double* %104, align 8, !tbaa !27
  %106 = fmul double %45, %105
  %107 = fsub double %100, %106
  %108 = fmul double %107, %107
  %109 = fadd double %96, %108
  %110 = add nsw i64 %83, 2
  %111 = icmp eq i64 %110, %57
  br i1 %111, label %112, label %82

112:                                              ; preds = %82, %76, %36
  %113 = phi double [ 0.000000e+00, %36 ], [ %77, %76 ], [ %109, %82 ]
  %114 = fdiv double %113, %53
  %115 = getelementptr inbounds [21 x double], [21 x double]* %3, i64 0, i64 %25
  store double %114, double* %115, align 8, !tbaa !27
  %116 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %5, i64 0, i32 0, i64 %25
  %117 = load double, double* %116, align 8, !tbaa !27
  %118 = fdiv double %114, %117
  %119 = fcmp olt double %118, 1.000000e-03
  %120 = select i1 %119, double 1.000000e-03, double %118
  %121 = tail call double @log10(double %120) #21
  %122 = fmul double %121, 1.000000e+01
  %123 = getelementptr inbounds [21 x double], [21 x double]* %4, i64 0, i64 %25
  store double %122, double* %123, align 8, !tbaa !27
  %124 = fcmp ogt double %122, 0.000000e+00
  br i1 %124, label %125, label %129

125:                                              ; preds = %112
  %126 = add nsw i32 %27, 1
  %127 = load double, double* %7, align 8, !tbaa !27
  %128 = fadd double %122, %127
  store double %128, double* %7, align 8, !tbaa !27
  br label %129

129:                                              ; preds = %125, %112
  %130 = phi i32 [ %126, %125 ], [ %27, %112 ]
  %131 = load double, double* %8, align 8, !tbaa !27
  %132 = fadd double %122, %131
  store double %132, double* %8, align 8, !tbaa !27
  %133 = load double, double* %9, align 8, !tbaa !27
  %134 = fcmp ogt double %133, %122
  %135 = select i1 %134, double %133, double %122
  store double %135, double* %9, align 8, !tbaa !27
  %136 = load i32, i32* %11, align 8, !tbaa !302
  %137 = zext i32 %136 to i64
  %138 = icmp ult i64 %48, %137
  br i1 %138, label %24, label %18

139:                                              ; preds = %265, %18
  %140 = phi i64 [ 0, %18 ], [ %266, %265 ]
  %141 = phi i32 [ %20, %18 ], [ %268, %265 ]
  %142 = phi i32 [ %19, %18 ], [ %267, %265 ]
  %143 = load i32, i32* %21, align 4, !tbaa !303
  %144 = icmp ult i32 %143, 12
  br i1 %144, label %147, label %145

145:                                              ; preds = %139
  %146 = add nuw nsw i64 %140, 1
  br label %265

147:                                              ; preds = %139
  %148 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 9, i64 %140
  %149 = add nuw nsw i64 %140, 1
  %150 = zext i32 %143 to i64
  br label %151

151:                                              ; preds = %256, %147
  %152 = phi i64 [ %150, %147 ], [ %170, %256 ]
  %153 = phi i32 [ %141, %147 ], [ %263, %256 ]
  %154 = phi i32 [ %142, %147 ], [ %257, %256 ]
  %155 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %6, i64 0, i32 1, i64 %152, i64 %140
  %156 = load i32, i32* %155, align 4, !tbaa !18
  %157 = load i32, i32* %22, align 4, !tbaa !143
  %158 = add i32 %157, 1
  %159 = shl i32 %156, %158
  %160 = load i32, i32* %148, align 4, !tbaa !18
  %161 = load i32, i32* %23, align 4, !tbaa !135
  %162 = mul i32 %160, -8
  %163 = sub i32 %162, %159
  %164 = add i32 %163, %161
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds [256 x double], [256 x double]* @pow20, i64 0, i64 %165
  %167 = load double, double* %166, align 8, !tbaa !27
  %168 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 1, i64 %152
  %169 = load i32, i32* %168, align 4, !tbaa !18
  %170 = add nuw nsw i64 %152, 1
  %171 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 1, i64 %170
  %172 = load i32, i32* %171, align 4, !tbaa !18
  %173 = sub nsw i32 %172, %169
  %174 = sitofp i32 %173 to double
  %175 = icmp sgt i32 %172, %169
  br i1 %175, label %176, label %239

176:                                              ; preds = %151
  %177 = sext i32 %169 to i64
  %178 = sext i32 %172 to i64
  %179 = sub nsw i64 %178, %177
  %180 = xor i64 %177, -1
  %181 = and i64 %179, 1
  %182 = icmp eq i64 %181, 0
  br i1 %182, label %199, label %183

183:                                              ; preds = %176
  %184 = mul nsw i64 %177, 3
  %185 = add nsw i64 %184, %140
  %186 = getelementptr inbounds double, double* %0, i64 %185
  %187 = load double, double* %186, align 8, !tbaa !27
  %188 = tail call double @llvm.fabs.f64(double %187)
  %189 = getelementptr inbounds i32, i32* %1, i64 %185
  %190 = load i32, i32* %189, align 4, !tbaa !18
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i64 0, i64 %191
  %193 = load double, double* %192, align 8, !tbaa !27
  %194 = fmul double %167, %193
  %195 = fsub double %188, %194
  %196 = fmul double %195, %195
  %197 = fadd double %196, 0.000000e+00
  %198 = add nsw i64 %177, 1
  br label %199

199:                                              ; preds = %183, %176
  %200 = phi double [ %197, %183 ], [ undef, %176 ]
  %201 = phi i64 [ %198, %183 ], [ %177, %176 ]
  %202 = phi double [ %197, %183 ], [ 0.000000e+00, %176 ]
  %203 = sub nsw i64 0, %178
  %204 = icmp eq i64 %180, %203
  br i1 %204, label %239, label %205

205:                                              ; preds = %205, %199
  %206 = phi i64 [ %237, %205 ], [ %201, %199 ]
  %207 = phi double [ %236, %205 ], [ %202, %199 ]
  %208 = mul nsw i64 %206, 3
  %209 = add nsw i64 %208, %140
  %210 = getelementptr inbounds double, double* %0, i64 %209
  %211 = load double, double* %210, align 8, !tbaa !27
  %212 = tail call double @llvm.fabs.f64(double %211)
  %213 = getelementptr inbounds i32, i32* %1, i64 %209
  %214 = load i32, i32* %213, align 4, !tbaa !18
  %215 = sext i32 %214 to i64
  %216 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i64 0, i64 %215
  %217 = load double, double* %216, align 8, !tbaa !27
  %218 = fmul double %167, %217
  %219 = fsub double %212, %218
  %220 = fmul double %219, %219
  %221 = fadd double %207, %220
  %222 = mul i64 %206, 3
  %223 = add i64 %222, 3
  %224 = add nsw i64 %223, %140
  %225 = getelementptr inbounds double, double* %0, i64 %224
  %226 = load double, double* %225, align 8, !tbaa !27
  %227 = tail call double @llvm.fabs.f64(double %226)
  %228 = getelementptr inbounds i32, i32* %1, i64 %224
  %229 = load i32, i32* %228, align 4, !tbaa !18
  %230 = sext i32 %229 to i64
  %231 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i64 0, i64 %230
  %232 = load double, double* %231, align 8, !tbaa !27
  %233 = fmul double %167, %232
  %234 = fsub double %227, %233
  %235 = fmul double %234, %234
  %236 = fadd double %221, %235
  %237 = add nsw i64 %206, 2
  %238 = icmp eq i64 %237, %178
  br i1 %238, label %239, label %205

239:                                              ; preds = %205, %199, %151
  %240 = phi double [ 0.000000e+00, %151 ], [ %200, %199 ], [ %236, %205 ]
  %241 = fdiv double %240, %174
  %242 = getelementptr inbounds [21 x double], [21 x double]* %3, i64 %149, i64 %152
  store double %241, double* %242, align 8, !tbaa !27
  %243 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %5, i64 0, i32 1, i64 %152, i64 %140
  %244 = load double, double* %243, align 8, !tbaa !27
  %245 = fdiv double %241, %244
  %246 = fcmp olt double %245, 1.000000e-03
  %247 = select i1 %246, double 1.000000e-03, double %245
  %248 = tail call double @log10(double %247) #21
  %249 = fmul double %248, 1.000000e+01
  %250 = getelementptr inbounds [21 x double], [21 x double]* %4, i64 %149, i64 %152
  store double %249, double* %250, align 8, !tbaa !27
  %251 = fcmp ogt double %249, 0.000000e+00
  br i1 %251, label %252, label %256

252:                                              ; preds = %239
  %253 = add nsw i32 %154, 1
  %254 = load double, double* %7, align 8, !tbaa !27
  %255 = fadd double %249, %254
  store double %255, double* %7, align 8, !tbaa !27
  br label %256

256:                                              ; preds = %252, %239
  %257 = phi i32 [ %253, %252 ], [ %154, %239 ]
  %258 = load double, double* %8, align 8, !tbaa !27
  %259 = fadd double %249, %258
  store double %259, double* %8, align 8, !tbaa !27
  %260 = load double, double* %9, align 8, !tbaa !27
  %261 = fcmp ogt double %260, %249
  %262 = select i1 %261, double %260, double %249
  store double %262, double* %9, align 8, !tbaa !27
  %263 = add nsw i32 %153, 1
  %264 = icmp ult i64 %152, 11
  br i1 %264, label %151, label %265

265:                                              ; preds = %256, %145
  %266 = phi i64 [ %146, %145 ], [ %149, %256 ]
  %267 = phi i32 [ %142, %145 ], [ %257, %256 ]
  %268 = phi i32 [ %141, %145 ], [ %263, %256 ]
  %269 = icmp eq i64 %266, 3
  br i1 %269, label %270, label %139

270:                                              ; preds = %265
  %271 = icmp sgt i32 %268, 1
  br i1 %271, label %272, label %276

272:                                              ; preds = %270
  %273 = sitofp i32 %268 to double
  %274 = load double, double* %8, align 8, !tbaa !27
  %275 = fdiv double %274, %273
  store double %275, double* %8, align 8, !tbaa !27
  br label %276

276:                                              ; preds = %272, %270
  %277 = icmp sgt i32 %267, 1
  br i1 %277, label %278, label %282

278:                                              ; preds = %276
  %279 = sitofp i32 %267 to double
  %280 = load double, double* %7, align 8, !tbaa !27
  %281 = fdiv double %280, %279
  store double %281, double* %7, align 8, !tbaa !27
  br label %282

282:                                              ; preds = %278, %276
  ret i32 %267
}

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local i32 @quant_compare(i32 %0, i32 %1, double %2, double %3, double %4, i32 %5, double %6, double %7, double %8) local_unnamed_addr #15 {
  %10 = icmp eq i32 %0, 0
  br i1 %10, label %11, label %17

11:                                               ; preds = %9
  %12 = icmp slt i32 %5, %1
  %13 = icmp eq i32 %5, %1
  %14 = fcmp ole double %7, %3
  %15 = and i1 %13, %14
  %16 = or i1 %12, %15
  br label %81

17:                                               ; preds = %9
  %18 = icmp eq i32 %0, 1
  %19 = fcmp olt double %8, %4
  %20 = and i1 %18, %19
  %21 = icmp eq i32 %0, 2
  %22 = fcmp olt double %6, %2
  %23 = select i1 %21, i1 %22, i1 %20
  switch i32 %0, label %81 [
    i32 3, label %24
    i32 4, label %28
    i32 5, label %66
    i32 6, label %71
  ]

24:                                               ; preds = %17
  %25 = fadd double %4, 2.000000e+00
  %26 = fcmp ogt double %25, %8
  %27 = and i1 %22, %26
  br label %81

28:                                               ; preds = %17
  %29 = fcmp ole double %8, 0.000000e+00
  %30 = fcmp ogt double %4, 2.000000e+00
  %31 = and i1 %30, %29
  br i1 %31, label %81, label %32

32:                                               ; preds = %28
  %33 = fcmp olt double %4, 0.000000e+00
  %34 = and i1 %33, %29
  %35 = fadd double %4, 2.000000e+00
  %36 = fcmp ogt double %35, %8
  %37 = and i1 %36, %34
  %38 = and i1 %22, %37
  br i1 %38, label %81, label %39

39:                                               ; preds = %32
  %40 = fcmp ogt double %4, 0.000000e+00
  %41 = and i1 %40, %29
  %42 = and i1 %36, %41
  %43 = fadd double %2, %3
  %44 = fcmp ogt double %43, %6
  %45 = and i1 %44, %42
  br i1 %45, label %81, label %46

46:                                               ; preds = %39
  %47 = fcmp ogt double %8, 0.000000e+00
  %48 = fcmp ogt double %4, -5.000000e-01
  %49 = and i1 %48, %47
  %50 = fadd double %4, 1.000000e+00
  %51 = fcmp ogt double %50, %8
  %52 = and i1 %51, %49
  %53 = fadd double %6, %7
  %54 = fcmp olt double %53, %43
  %55 = and i1 %54, %52
  br i1 %55, label %81, label %56

56:                                               ; preds = %46
  %57 = fcmp ogt double %4, -1.000000e+00
  %58 = and i1 %57, %47
  %59 = fadd double %4, 1.500000e+00
  %60 = fcmp ogt double %59, %8
  %61 = and i1 %60, %58
  br i1 %61, label %62, label %81

62:                                               ; preds = %56
  %63 = fadd double %53, %7
  %64 = fadd double %43, %3
  %65 = fcmp olt double %63, %64
  br label %81

66:                                               ; preds = %17
  %67 = fcmp olt double %7, %3
  %68 = fcmp oeq double %7, %3
  %69 = and i1 %22, %68
  %70 = or i1 %67, %69
  br label %81

71:                                               ; preds = %17
  %72 = fcmp olt double %7, %3
  br i1 %72, label %81, label %73

73:                                               ; preds = %71
  %74 = fcmp une double %7, %3
  %75 = or i1 %74, %19
  %76 = xor i1 %74, true
  br i1 %75, label %81, label %77

77:                                               ; preds = %73
  %78 = fcmp oeq double %8, %4
  %79 = fcmp ole double %6, %2
  %80 = and i1 %79, %78
  br label %81

81:                                               ; preds = %77, %73, %71, %66, %62, %56, %46, %39, %32, %28, %24, %17, %11
  %82 = phi i1 [ true, %71 ], [ %76, %73 ], [ %80, %77 ], [ %70, %66 ], [ %27, %24 ], [ true, %39 ], [ true, %32 ], [ %65, %62 ], [ false, %56 ], [ true, %28 ], [ true, %46 ], [ %23, %17 ], [ %16, %11 ]
  %83 = zext i1 %82 to i32
  ret i32 %83
}

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @amp_scalefac_bands(double* nocapture %0, %struct.gr_info* nocapture readonly %1, %struct.III_scalefac_t* nocapture %2, [21 x double]* nocapture readonly %3) local_unnamed_addr #5 {
  %5 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %1, i64 0, i32 13
  %6 = load i32, i32* %5, align 4, !tbaa !143
  %7 = icmp eq i32 %6, 0
  %8 = select i1 %7, double 0x3FF4BFDAD5362A27, double 0x3FFAE89F995AD3AE
  %9 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %1, i64 0, i32 16
  %10 = load i32, i32* %9, align 8, !tbaa !302
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %61, label %12

12:                                               ; preds = %4
  %13 = zext i32 %10 to i64
  %14 = add nsw i64 %13, -1
  %15 = and i64 %13, 3
  %16 = icmp ult i64 %14, 3
  br i1 %16, label %45, label %17

17:                                               ; preds = %12
  %18 = sub nsw i64 %13, %15
  br label %19

19:                                               ; preds = %19, %17
  %20 = phi i64 [ 0, %17 ], [ %42, %19 ]
  %21 = phi double [ -9.000000e+02, %17 ], [ %41, %19 ]
  %22 = phi i64 [ %18, %17 ], [ %43, %19 ]
  %23 = getelementptr inbounds [21 x double], [21 x double]* %3, i64 0, i64 %20
  %24 = load double, double* %23, align 8, !tbaa !27
  %25 = fcmp ogt double %24, %21
  %26 = select i1 %25, double %24, double %21
  %27 = or i64 %20, 1
  %28 = getelementptr inbounds [21 x double], [21 x double]* %3, i64 0, i64 %27
  %29 = load double, double* %28, align 8, !tbaa !27
  %30 = fcmp ogt double %29, %26
  %31 = select i1 %30, double %29, double %26
  %32 = or i64 %20, 2
  %33 = getelementptr inbounds [21 x double], [21 x double]* %3, i64 0, i64 %32
  %34 = load double, double* %33, align 8, !tbaa !27
  %35 = fcmp ogt double %34, %31
  %36 = select i1 %35, double %34, double %31
  %37 = or i64 %20, 3
  %38 = getelementptr inbounds [21 x double], [21 x double]* %3, i64 0, i64 %37
  %39 = load double, double* %38, align 8, !tbaa !27
  %40 = fcmp ogt double %39, %36
  %41 = select i1 %40, double %39, double %36
  %42 = add nuw nsw i64 %20, 4
  %43 = add i64 %22, -4
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %45, label %19

45:                                               ; preds = %19, %12
  %46 = phi double [ undef, %12 ], [ %41, %19 ]
  %47 = phi i64 [ 0, %12 ], [ %42, %19 ]
  %48 = phi double [ -9.000000e+02, %12 ], [ %41, %19 ]
  %49 = icmp eq i64 %15, 0
  br i1 %49, label %61, label %50

50:                                               ; preds = %50, %45
  %51 = phi i64 [ %58, %50 ], [ %47, %45 ]
  %52 = phi double [ %57, %50 ], [ %48, %45 ]
  %53 = phi i64 [ %59, %50 ], [ %15, %45 ]
  %54 = getelementptr inbounds [21 x double], [21 x double]* %3, i64 0, i64 %51
  %55 = load double, double* %54, align 8, !tbaa !27
  %56 = fcmp ogt double %55, %52
  %57 = select i1 %56, double %55, double %52
  %58 = add nuw nsw i64 %51, 1
  %59 = add i64 %53, -1
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %61, label %50, !llvm.loop !304

61:                                               ; preds = %50, %45, %4
  %62 = phi double [ -9.000000e+02, %4 ], [ %46, %45 ], [ %57, %50 ]
  %63 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %1, i64 0, i32 17
  %64 = load i32, i32* %63, align 4, !tbaa !303
  %65 = icmp ult i32 %64, 12
  br i1 %65, label %66, label %119

66:                                               ; preds = %61
  %67 = zext i32 %64 to i64
  %68 = and i64 %67, 1
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %84, label %70

70:                                               ; preds = %66
  %71 = getelementptr inbounds [21 x double], [21 x double]* %3, i64 1, i64 %67
  %72 = load double, double* %71, align 8, !tbaa !27
  %73 = fcmp ogt double %72, %62
  %74 = select i1 %73, double %72, double %62
  %75 = getelementptr inbounds [21 x double], [21 x double]* %3, i64 2, i64 %67
  %76 = load double, double* %75, align 8, !tbaa !27
  %77 = fcmp ogt double %76, %74
  %78 = select i1 %77, double %76, double %74
  %79 = getelementptr inbounds [21 x double], [21 x double]* %3, i64 3, i64 %67
  %80 = load double, double* %79, align 8, !tbaa !27
  %81 = fcmp ogt double %80, %78
  %82 = select i1 %81, double %80, double %78
  %83 = add nuw nsw i64 %67, 1
  br label %84

84:                                               ; preds = %70, %66
  %85 = phi double [ undef, %66 ], [ %82, %70 ]
  %86 = phi i64 [ %67, %66 ], [ %83, %70 ]
  %87 = phi double [ %62, %66 ], [ %82, %70 ]
  %88 = icmp eq i32 %64, 11
  br i1 %88, label %119, label %89

89:                                               ; preds = %89, %84
  %90 = phi i64 [ %117, %89 ], [ %86, %84 ]
  %91 = phi double [ %116, %89 ], [ %87, %84 ]
  %92 = getelementptr inbounds [21 x double], [21 x double]* %3, i64 1, i64 %90
  %93 = load double, double* %92, align 8, !tbaa !27
  %94 = fcmp ogt double %93, %91
  %95 = select i1 %94, double %93, double %91
  %96 = getelementptr inbounds [21 x double], [21 x double]* %3, i64 2, i64 %90
  %97 = load double, double* %96, align 8, !tbaa !27
  %98 = fcmp ogt double %97, %95
  %99 = select i1 %98, double %97, double %95
  %100 = getelementptr inbounds [21 x double], [21 x double]* %3, i64 3, i64 %90
  %101 = load double, double* %100, align 8, !tbaa !27
  %102 = fcmp ogt double %101, %99
  %103 = select i1 %102, double %101, double %99
  %104 = add nuw nsw i64 %90, 1
  %105 = getelementptr inbounds [21 x double], [21 x double]* %3, i64 1, i64 %104
  %106 = load double, double* %105, align 8, !tbaa !27
  %107 = fcmp ogt double %106, %103
  %108 = select i1 %107, double %106, double %103
  %109 = getelementptr inbounds [21 x double], [21 x double]* %3, i64 2, i64 %104
  %110 = load double, double* %109, align 8, !tbaa !27
  %111 = fcmp ogt double %110, %108
  %112 = select i1 %111, double %110, double %108
  %113 = getelementptr inbounds [21 x double], [21 x double]* %3, i64 3, i64 %104
  %114 = load double, double* %113, align 8, !tbaa !27
  %115 = fcmp ogt double %114, %112
  %116 = select i1 %115, double %114, double %112
  %117 = add nuw nsw i64 %90, 2
  %118 = icmp eq i64 %117, 12
  br i1 %118, label %119, label %89

119:                                              ; preds = %89, %84, %61
  %120 = phi double [ %62, %61 ], [ %85, %84 ], [ %116, %89 ]
  %121 = fmul double %120, 1.050000e+00
  %122 = fcmp olt double %121, 0.000000e+00
  %123 = select i1 %122, double %121, double 0.000000e+00
  br i1 %11, label %131, label %124

124:                                              ; preds = %119
  %125 = insertelement <2 x double> undef, double %8, i32 0
  %126 = shufflevector <2 x double> %125, <2 x double> undef, <2 x i32> zeroinitializer
  %127 = insertelement <2 x double> undef, double %8, i32 0
  %128 = shufflevector <2 x double> %127, <2 x double> undef, <2 x i32> zeroinitializer
  br label %134

129:                                              ; preds = %221
  %130 = load i32, i32* %63, align 4, !tbaa !303
  br label %131

131:                                              ; preds = %129, %119
  %132 = phi i32 [ %130, %129 ], [ %64, %119 ]
  %133 = icmp ult i32 %132, 12
  br i1 %133, label %229, label %406

134:                                              ; preds = %221, %124
  %135 = phi i64 [ %222, %221 ], [ 0, %124 ]
  %136 = getelementptr inbounds [21 x double], [21 x double]* %3, i64 0, i64 %135
  %137 = load double, double* %136, align 8, !tbaa !27
  %138 = fcmp ogt double %137, %123
  br i1 %138, label %141, label %139

139:                                              ; preds = %134
  %140 = add nuw nsw i64 %135, 1
  br label %221

141:                                              ; preds = %134
  %142 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %2, i64 0, i32 0, i64 %135
  %143 = load i32, i32* %142, align 4, !tbaa !18
  %144 = add nsw i32 %143, 1
  store i32 %144, i32* %142, align 4, !tbaa !18
  %145 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 0, i64 %135
  %146 = load i32, i32* %145, align 4, !tbaa !18
  %147 = add nuw nsw i64 %135, 1
  %148 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 0, i64 %147
  %149 = load i32, i32* %148, align 4, !tbaa !18
  %150 = icmp slt i32 %146, %149
  br i1 %150, label %151, label %221

151:                                              ; preds = %141
  %152 = sext i32 %146 to i64
  %153 = sext i32 %149 to i64
  %154 = sub nsw i64 %153, %152
  %155 = icmp ult i64 %154, 4
  br i1 %155, label %212, label %156

156:                                              ; preds = %151
  %157 = and i64 %154, -4
  %158 = add nsw i64 %157, %152
  %159 = add nsw i64 %157, -4
  %160 = lshr exact i64 %159, 2
  %161 = add nuw nsw i64 %160, 1
  %162 = and i64 %161, 1
  %163 = icmp eq i64 %159, 0
  br i1 %163, label %195, label %164

164:                                              ; preds = %156
  %165 = sub nuw nsw i64 %161, %162
  br label %166

166:                                              ; preds = %166, %164
  %167 = phi i64 [ 0, %164 ], [ %192, %166 ]
  %168 = phi i64 [ %165, %164 ], [ %193, %166 ]
  %169 = add i64 %167, %152
  %170 = getelementptr inbounds double, double* %0, i64 %169
  %171 = bitcast double* %170 to <2 x double>*
  %172 = load <2 x double>, <2 x double>* %171, align 8, !tbaa !27
  %173 = getelementptr inbounds double, double* %170, i64 2
  %174 = bitcast double* %173 to <2 x double>*
  %175 = load <2 x double>, <2 x double>* %174, align 8, !tbaa !27
  %176 = fmul <2 x double> %126, %172
  %177 = fmul <2 x double> %128, %175
  %178 = bitcast double* %170 to <2 x double>*
  store <2 x double> %176, <2 x double>* %178, align 8, !tbaa !27
  %179 = bitcast double* %173 to <2 x double>*
  store <2 x double> %177, <2 x double>* %179, align 8, !tbaa !27
  %180 = or i64 %167, 4
  %181 = add i64 %180, %152
  %182 = getelementptr inbounds double, double* %0, i64 %181
  %183 = bitcast double* %182 to <2 x double>*
  %184 = load <2 x double>, <2 x double>* %183, align 8, !tbaa !27
  %185 = getelementptr inbounds double, double* %182, i64 2
  %186 = bitcast double* %185 to <2 x double>*
  %187 = load <2 x double>, <2 x double>* %186, align 8, !tbaa !27
  %188 = fmul <2 x double> %126, %184
  %189 = fmul <2 x double> %128, %187
  %190 = bitcast double* %182 to <2 x double>*
  store <2 x double> %188, <2 x double>* %190, align 8, !tbaa !27
  %191 = bitcast double* %185 to <2 x double>*
  store <2 x double> %189, <2 x double>* %191, align 8, !tbaa !27
  %192 = add i64 %167, 8
  %193 = add i64 %168, -2
  %194 = icmp eq i64 %193, 0
  br i1 %194, label %195, label %166, !llvm.loop !305

195:                                              ; preds = %166, %156
  %196 = phi i64 [ 0, %156 ], [ %192, %166 ]
  %197 = icmp eq i64 %162, 0
  br i1 %197, label %210, label %198

198:                                              ; preds = %195
  %199 = add i64 %196, %152
  %200 = getelementptr inbounds double, double* %0, i64 %199
  %201 = bitcast double* %200 to <2 x double>*
  %202 = load <2 x double>, <2 x double>* %201, align 8, !tbaa !27
  %203 = getelementptr inbounds double, double* %200, i64 2
  %204 = bitcast double* %203 to <2 x double>*
  %205 = load <2 x double>, <2 x double>* %204, align 8, !tbaa !27
  %206 = fmul <2 x double> %126, %202
  %207 = fmul <2 x double> %128, %205
  %208 = bitcast double* %200 to <2 x double>*
  store <2 x double> %206, <2 x double>* %208, align 8, !tbaa !27
  %209 = bitcast double* %203 to <2 x double>*
  store <2 x double> %207, <2 x double>* %209, align 8, !tbaa !27
  br label %210

210:                                              ; preds = %198, %195
  %211 = icmp eq i64 %154, %157
  br i1 %211, label %221, label %212

212:                                              ; preds = %210, %151
  %213 = phi i64 [ %152, %151 ], [ %158, %210 ]
  br label %214

214:                                              ; preds = %214, %212
  %215 = phi i64 [ %219, %214 ], [ %213, %212 ]
  %216 = getelementptr inbounds double, double* %0, i64 %215
  %217 = load double, double* %216, align 8, !tbaa !27
  %218 = fmul double %8, %217
  store double %218, double* %216, align 8, !tbaa !27
  %219 = add nsw i64 %215, 1
  %220 = icmp eq i64 %219, %153
  br i1 %220, label %221, label %214, !llvm.loop !306

221:                                              ; preds = %214, %210, %141, %139
  %222 = phi i64 [ %140, %139 ], [ %147, %141 ], [ %147, %210 ], [ %147, %214 ]
  %223 = load i32, i32* %9, align 8, !tbaa !302
  %224 = zext i32 %223 to i64
  %225 = icmp ult i64 %222, %224
  br i1 %225, label %134, label %129

226:                                              ; preds = %292
  %227 = load i32, i32* %63, align 4, !tbaa !303
  %228 = icmp ult i32 %227, 12
  br i1 %228, label %295, label %406

229:                                              ; preds = %131
  %230 = zext i32 %132 to i64
  br label %231

231:                                              ; preds = %292, %229
  %232 = phi i64 [ %230, %229 ], [ %293, %292 ]
  %233 = getelementptr inbounds [21 x double], [21 x double]* %3, i64 1, i64 %232
  %234 = load double, double* %233, align 8, !tbaa !27
  %235 = fcmp ogt double %234, %123
  br i1 %235, label %238, label %236

236:                                              ; preds = %231
  %237 = add nuw nsw i64 %232, 1
  br label %292

238:                                              ; preds = %231
  %239 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %2, i64 0, i32 1, i64 %232, i64 0
  %240 = load i32, i32* %239, align 4, !tbaa !18
  %241 = add nsw i32 %240, 1
  store i32 %241, i32* %239, align 4, !tbaa !18
  %242 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 1, i64 %232
  %243 = load i32, i32* %242, align 4, !tbaa !18
  %244 = add nuw nsw i64 %232, 1
  %245 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 1, i64 %244
  %246 = load i32, i32* %245, align 4, !tbaa !18
  %247 = icmp slt i32 %243, %246
  br i1 %247, label %248, label %292

248:                                              ; preds = %238
  %249 = sext i32 %243 to i64
  %250 = sext i32 %246 to i64
  %251 = sub nsw i64 %250, %249
  %252 = xor i64 %249, -1
  %253 = add nsw i64 %252, %250
  %254 = and i64 %251, 3
  %255 = icmp eq i64 %254, 0
  br i1 %255, label %266, label %256

256:                                              ; preds = %256, %248
  %257 = phi i64 [ %263, %256 ], [ %249, %248 ]
  %258 = phi i64 [ %264, %256 ], [ %254, %248 ]
  %259 = mul nsw i64 %257, 3
  %260 = getelementptr inbounds double, double* %0, i64 %259
  %261 = load double, double* %260, align 8, !tbaa !27
  %262 = fmul double %8, %261
  store double %262, double* %260, align 8, !tbaa !27
  %263 = add nsw i64 %257, 1
  %264 = add i64 %258, -1
  %265 = icmp eq i64 %264, 0
  br i1 %265, label %266, label %256, !llvm.loop !307

266:                                              ; preds = %256, %248
  %267 = phi i64 [ %249, %248 ], [ %263, %256 ]
  %268 = icmp ult i64 %253, 3
  br i1 %268, label %292, label %269

269:                                              ; preds = %269, %266
  %270 = phi i64 [ %290, %269 ], [ %267, %266 ]
  %271 = mul nsw i64 %270, 3
  %272 = getelementptr inbounds double, double* %0, i64 %271
  %273 = load double, double* %272, align 8, !tbaa !27
  %274 = fmul double %8, %273
  store double %274, double* %272, align 8, !tbaa !27
  %275 = mul i64 %270, 3
  %276 = add i64 %275, 3
  %277 = getelementptr inbounds double, double* %0, i64 %276
  %278 = load double, double* %277, align 8, !tbaa !27
  %279 = fmul double %8, %278
  store double %279, double* %277, align 8, !tbaa !27
  %280 = mul i64 %270, 3
  %281 = add i64 %280, 6
  %282 = getelementptr inbounds double, double* %0, i64 %281
  %283 = load double, double* %282, align 8, !tbaa !27
  %284 = fmul double %8, %283
  store double %284, double* %282, align 8, !tbaa !27
  %285 = mul i64 %270, 3
  %286 = add i64 %285, 9
  %287 = getelementptr inbounds double, double* %0, i64 %286
  %288 = load double, double* %287, align 8, !tbaa !27
  %289 = fmul double %8, %288
  store double %289, double* %287, align 8, !tbaa !27
  %290 = add nsw i64 %270, 4
  %291 = icmp eq i64 %290, %250
  br i1 %291, label %292, label %269

292:                                              ; preds = %269, %266, %238, %236
  %293 = phi i64 [ %237, %236 ], [ %244, %238 ], [ %244, %269 ], [ %244, %266 ]
  %294 = icmp eq i64 %293, 12
  br i1 %294, label %226, label %231

295:                                              ; preds = %226
  %296 = zext i32 %227 to i64
  br label %297

297:                                              ; preds = %346, %295
  %298 = phi i64 [ %296, %295 ], [ %347, %346 ]
  %299 = getelementptr inbounds [21 x double], [21 x double]* %3, i64 2, i64 %298
  %300 = load double, double* %299, align 8, !tbaa !27
  %301 = fcmp ogt double %300, %123
  br i1 %301, label %304, label %302

302:                                              ; preds = %297
  %303 = add nuw nsw i64 %298, 1
  br label %346

304:                                              ; preds = %297
  %305 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %2, i64 0, i32 1, i64 %298, i64 1
  %306 = load i32, i32* %305, align 4, !tbaa !18
  %307 = add nsw i32 %306, 1
  store i32 %307, i32* %305, align 4, !tbaa !18
  %308 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 1, i64 %298
  %309 = load i32, i32* %308, align 4, !tbaa !18
  %310 = add nuw nsw i64 %298, 1
  %311 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 1, i64 %310
  %312 = load i32, i32* %311, align 4, !tbaa !18
  %313 = icmp slt i32 %309, %312
  br i1 %313, label %314, label %346

314:                                              ; preds = %304
  %315 = sext i32 %309 to i64
  %316 = sext i32 %312 to i64
  %317 = sub nsw i64 %316, %315
  %318 = xor i64 %315, -1
  %319 = and i64 %317, 1
  %320 = icmp eq i64 %319, 0
  br i1 %320, label %328, label %321

321:                                              ; preds = %314
  %322 = mul nsw i64 %315, 3
  %323 = add nsw i64 %322, 1
  %324 = getelementptr inbounds double, double* %0, i64 %323
  %325 = load double, double* %324, align 8, !tbaa !27
  %326 = fmul double %8, %325
  store double %326, double* %324, align 8, !tbaa !27
  %327 = add nsw i64 %315, 1
  br label %328

328:                                              ; preds = %321, %314
  %329 = phi i64 [ %327, %321 ], [ %315, %314 ]
  %330 = sub nsw i64 0, %316
  %331 = icmp eq i64 %318, %330
  br i1 %331, label %346, label %332

332:                                              ; preds = %332, %328
  %333 = phi i64 [ %344, %332 ], [ %329, %328 ]
  %334 = mul nsw i64 %333, 3
  %335 = add nsw i64 %334, 1
  %336 = getelementptr inbounds double, double* %0, i64 %335
  %337 = load double, double* %336, align 8, !tbaa !27
  %338 = fmul double %8, %337
  store double %338, double* %336, align 8, !tbaa !27
  %339 = mul i64 %333, 3
  %340 = add i64 %339, 4
  %341 = getelementptr inbounds double, double* %0, i64 %340
  %342 = load double, double* %341, align 8, !tbaa !27
  %343 = fmul double %8, %342
  store double %343, double* %341, align 8, !tbaa !27
  %344 = add nsw i64 %333, 2
  %345 = icmp eq i64 %344, %316
  br i1 %345, label %346, label %332

346:                                              ; preds = %332, %328, %304, %302
  %347 = phi i64 [ %303, %302 ], [ %310, %304 ], [ %310, %332 ], [ %310, %328 ]
  %348 = icmp eq i64 %347, 12
  br i1 %348, label %349, label %297

349:                                              ; preds = %346
  %350 = load i32, i32* %63, align 4, !tbaa !303
  %351 = icmp ult i32 %350, 12
  br i1 %351, label %352, label %406

352:                                              ; preds = %349
  %353 = zext i32 %350 to i64
  br label %354

354:                                              ; preds = %403, %352
  %355 = phi i64 [ %353, %352 ], [ %404, %403 ]
  %356 = getelementptr inbounds [21 x double], [21 x double]* %3, i64 3, i64 %355
  %357 = load double, double* %356, align 8, !tbaa !27
  %358 = fcmp ogt double %357, %123
  br i1 %358, label %361, label %359

359:                                              ; preds = %354
  %360 = add nuw nsw i64 %355, 1
  br label %403

361:                                              ; preds = %354
  %362 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %2, i64 0, i32 1, i64 %355, i64 2
  %363 = load i32, i32* %362, align 4, !tbaa !18
  %364 = add nsw i32 %363, 1
  store i32 %364, i32* %362, align 4, !tbaa !18
  %365 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 1, i64 %355
  %366 = load i32, i32* %365, align 4, !tbaa !18
  %367 = add nuw nsw i64 %355, 1
  %368 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 1, i64 %367
  %369 = load i32, i32* %368, align 4, !tbaa !18
  %370 = icmp slt i32 %366, %369
  br i1 %370, label %371, label %403

371:                                              ; preds = %361
  %372 = sext i32 %366 to i64
  %373 = sext i32 %369 to i64
  %374 = sub nsw i64 %373, %372
  %375 = xor i64 %372, -1
  %376 = and i64 %374, 1
  %377 = icmp eq i64 %376, 0
  br i1 %377, label %385, label %378

378:                                              ; preds = %371
  %379 = mul nsw i64 %372, 3
  %380 = add nsw i64 %379, 2
  %381 = getelementptr inbounds double, double* %0, i64 %380
  %382 = load double, double* %381, align 8, !tbaa !27
  %383 = fmul double %8, %382
  store double %383, double* %381, align 8, !tbaa !27
  %384 = add nsw i64 %372, 1
  br label %385

385:                                              ; preds = %378, %371
  %386 = phi i64 [ %384, %378 ], [ %372, %371 ]
  %387 = sub nsw i64 0, %373
  %388 = icmp eq i64 %375, %387
  br i1 %388, label %403, label %389

389:                                              ; preds = %389, %385
  %390 = phi i64 [ %401, %389 ], [ %386, %385 ]
  %391 = mul nsw i64 %390, 3
  %392 = add nsw i64 %391, 2
  %393 = getelementptr inbounds double, double* %0, i64 %392
  %394 = load double, double* %393, align 8, !tbaa !27
  %395 = fmul double %8, %394
  store double %395, double* %393, align 8, !tbaa !27
  %396 = mul i64 %390, 3
  %397 = add i64 %396, 5
  %398 = getelementptr inbounds double, double* %0, i64 %397
  %399 = load double, double* %398, align 8, !tbaa !27
  %400 = fmul double %8, %399
  store double %400, double* %398, align 8, !tbaa !27
  %401 = add nsw i64 %390, 2
  %402 = icmp eq i64 %401, %373
  br i1 %402, label %403, label %389

403:                                              ; preds = %389, %385, %361, %359
  %404 = phi i64 [ %360, %359 ], [ %367, %361 ], [ %367, %389 ], [ %367, %385 ]
  %405 = icmp eq i64 %404, 12
  br i1 %405, label %406, label %354

406:                                              ; preds = %403, %349, %226, %131
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @set_masking_lower(i32 %0, i32 %1) local_unnamed_addr #3 {
  %3 = shl i32 %0, 1
  %4 = add nsw i32 %3, -6
  %5 = sitofp i32 %4 to float
  %6 = add nsw i32 %1, -125
  %7 = sitofp i32 %6 to double
  %8 = fdiv double %7, 2.375000e+03
  %9 = fptrunc double %8 to float
  %10 = fadd float %9, -1.000000e+00
  %11 = fmul float %10, 4.000000e+00
  %12 = fadd float %11, %5
  %13 = fdiv float %12, 1.000000e+01
  %14 = fpext float %13 to double
  %15 = tail call double @pow(double 1.000000e+01, double %14) #21
  %16 = fptrunc double %15 to float
  store float %16, float* @masking_lower, align 4, !tbaa !33
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @VBR_iteration_loop(%struct.lame_global_flags* %0, [2 x double]* nocapture readonly %1, double* nocapture readonly %2, [2 x [576 x double]]* %3, [2 x %struct.III_psy_ratio]* %4, %struct.III_side_info_t* %5, [2 x [576 x i32]]* %6, [2 x %struct.III_scalefac_t]* %7) local_unnamed_addr #0 {
  %9 = alloca %struct.gr_info, align 8
  %10 = alloca %struct.gr_info, align 8
  %11 = alloca %struct.III_scalefac_t, align 4
  %12 = alloca [576 x i32], align 16
  %13 = alloca %struct.III_psy_xmin, align 8
  %14 = alloca [2 x [2 x i32]], align 16
  %15 = alloca [4 x double], align 16
  %16 = alloca [15 x i32], align 16
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = bitcast %struct.gr_info* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %19)
  %20 = bitcast %struct.gr_info* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %20)
  %21 = bitcast %struct.III_scalefac_t* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 244, i8* nonnull %21)
  %22 = bitcast [576 x i32]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2304, i8* nonnull %22)
  %23 = bitcast %struct.III_psy_xmin* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 488, i8* nonnull %23) #21
  %24 = bitcast [2 x [2 x i32]]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %24) #21
  %25 = bitcast [4 x double]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %25) #21
  %26 = bitcast [15 x i32]* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 60, i8* nonnull %26) #21
  %27 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %27) #21
  %28 = bitcast i32* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28) #21
  tail call void @iteration_init(%struct.lame_global_flags* %0, %struct.III_side_info_t* %5, [2 x [576 x i32]]* %6) #21
  %29 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 50
  store i32 1, i32* %29, align 4, !tbaa !117
  %30 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 48
  %31 = load i32, i32* %30, align 4, !tbaa !178
  %32 = icmp slt i32 %31, 1
  br i1 %32, label %55, label %33

33:                                               ; preds = %8
  %34 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 47
  %35 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 46
  br label %36

36:                                               ; preds = %45, %33
  %37 = phi i32 [ 0, %33 ], [ %46, %45 ]
  call void @getframebits(%struct.lame_global_flags* nonnull %0, i32* nonnull %17, i32* nonnull %18) #21
  %38 = load i32, i32* %29, align 4, !tbaa !117
  %39 = load i32, i32* %34, align 8, !tbaa !179
  %40 = icmp eq i32 %38, %39
  %41 = load i32, i32* %18, align 4, !tbaa !18
  br i1 %40, label %42, label %45

42:                                               ; preds = %36
  %43 = load i32, i32* %35, align 4, !tbaa !126
  %44 = sdiv i32 %41, %43
  br label %45

45:                                               ; preds = %42, %36
  %46 = phi i32 [ %44, %42 ], [ %37, %36 ]
  %47 = load i32, i32* %17, align 4, !tbaa !18
  %48 = call i32 @ResvFrameBegin(%struct.lame_global_flags* nonnull %0, %struct.III_side_info_t* %5, i32 %41, i32 %47) #21
  %49 = load i32, i32* %29, align 4, !tbaa !117
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [15 x i32], [15 x i32]* %16, i64 0, i64 %50
  store i32 %48, i32* %51, align 4, !tbaa !18
  %52 = add nsw i32 %49, 1
  store i32 %52, i32* %29, align 4, !tbaa !117
  %53 = load i32, i32* %30, align 4, !tbaa !178
  %54 = icmp slt i32 %49, %53
  br i1 %54, label %36, label %55

55:                                               ; preds = %45, %8
  %56 = phi i32 [ 0, %8 ], [ %46, %45 ]
  %57 = phi i32 [ %31, %8 ], [ %53, %45 ]
  store i32 %57, i32* %29, align 4, !tbaa !117
  %58 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 45
  %59 = load i32, i32* %58, align 8, !tbaa !95
  %60 = icmp sgt i32 %59, 0
  br i1 %60, label %61, label %251

61:                                               ; preds = %55
  %62 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 46
  %63 = icmp sgt i32 %56, 125
  %64 = select i1 %63, i32 %56, i32 125
  %65 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 22
  %66 = getelementptr inbounds [4 x double], [4 x double]* %15, i64 0, i64 0
  %67 = getelementptr inbounds [4 x double], [4 x double]* %15, i64 0, i64 3
  %68 = getelementptr inbounds [4 x double], [4 x double]* %15, i64 0, i64 2
  %69 = getelementptr inbounds [4 x double], [4 x double]* %15, i64 0, i64 1
  br label %70

70:                                               ; preds = %212, %61
  %71 = phi i64 [ 0, %61 ], [ %215, %212 ]
  %72 = phi i32 [ 0, %61 ], [ %214, %212 ]
  %73 = phi i32 [ 0, %61 ], [ %213, %212 ]
  %74 = load i32, i32* %62, align 4, !tbaa !126
  %75 = load i32, i32* @reduce_sidechannel, align 4, !tbaa !18
  %76 = icmp eq i32 %75, 0
  %77 = select i1 %76, i32 %74, i32 1
  %78 = load i32, i32* @convert_mdct, align 4, !tbaa !18
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %82, label %80

80:                                               ; preds = %70
  %81 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %3, i64 %71, i64 0
  call void @ms_convert([576 x double]* %81, [576 x double]* %81) #21
  br label %82

82:                                               ; preds = %80, %70
  %83 = icmp sgt i32 %77, 0
  br i1 %83, label %84, label %212

84:                                               ; preds = %82
  %85 = zext i32 %77 to i64
  br label %86

86:                                               ; preds = %207, %84
  %87 = phi i64 [ 0, %84 ], [ %210, %207 ]
  %88 = phi i32 [ %72, %84 ], [ %209, %207 ]
  %89 = phi i32 [ %73, %84 ], [ %208, %207 ]
  %90 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %5, i64 0, i32 4, i64 %71, i32 0, i64 %87, i32 0
  %91 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %3, i64 %71, i64 %87, i64 0
  %92 = call i32 @init_outer_loop(%struct.lame_global_flags* %0, double* %91, %struct.gr_info* nonnull %90)
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %100

94:                                               ; preds = %86
  %95 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %7, i64 %71, i64 %87
  %96 = bitcast %struct.III_scalefac_t* %95 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(244) %96, i8 0, i64 244, i1 false)
  %97 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %6, i64 %71, i64 %87, i64 0
  %98 = bitcast i32* %97 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(2304) %98, i8 0, i64 2304, i1 false)
  %99 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %14, i64 0, i64 %71, i64 %87
  store i32 0, i32* %99, align 4, !tbaa !18
  br label %207

100:                                              ; preds = %86
  %101 = bitcast %struct.gr_info* %90 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(120) %20, i8* nonnull align 8 dereferenceable(120) %101, i64 120, i1 false)
  %102 = load i32, i32* %65, align 4, !tbaa !162
  %103 = shl i32 %102, 1
  %104 = add nsw i32 %103, -6
  %105 = sitofp i32 %104 to float
  %106 = fdiv float %105, 1.000000e+01
  %107 = fpext float %106 to double
  %108 = call double @pow(double 1.000000e+01, double %107) #21
  %109 = fptrunc double %108 to float
  store float %109, float* @masking_lower, align 4, !tbaa !33
  %110 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %4, i64 %71, i64 %87
  %111 = call i32 @calc_xmin(%struct.lame_global_flags* %0, double* %91, %struct.III_psy_ratio* %110, %struct.gr_info* nonnull %90, %struct.III_psy_xmin* nonnull %13) #21
  %112 = icmp eq i32 %111, 0
  %113 = select i1 %112, i32 125, i32 %64
  %114 = select i1 %112, i32 1, i32 %88
  %115 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %5, i64 0, i32 4, i64 %71, i32 0, i64 %87, i32 0, i32 6
  %116 = load i32, i32* %115, align 8, !tbaa !138
  %117 = icmp eq i32 %116, 2
  br i1 %117, label %118, label %128

118:                                              ; preds = %100
  %119 = getelementptr inbounds [2 x double], [2 x double]* %1, i64 %71, i64 %87
  %120 = load double, double* %119, align 8, !tbaa !27
  %121 = fcmp olt double %120, 1.100000e+03
  %122 = select i1 %121, double 1.100000e+03, double %120
  %123 = sitofp i32 %113 to double
  %124 = fadd double %122, %123
  %125 = fptosi double %124 to i32
  %126 = icmp slt i32 %125, 1800
  %127 = select i1 %126, i32 %125, i32 1800
  br label %128

128:                                              ; preds = %118, %100
  %129 = phi i32 [ %127, %118 ], [ %113, %100 ]
  %130 = load i32, i32* %30, align 4, !tbaa !178
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds [15 x i32], [15 x i32]* %16, i64 0, i64 %131
  %133 = load i32, i32* %132, align 4, !tbaa !18
  %134 = load i32, i32* %62, align 4, !tbaa !126
  %135 = load i32, i32* %58, align 8, !tbaa !95
  %136 = mul nsw i32 %135, %134
  %137 = sdiv i32 %133, %136
  %138 = icmp slt i32 %137, 1300
  %139 = select i1 %138, i32 %137, i32 1300
  %140 = add nsw i32 %139, 1200
  %141 = icmp sgt i32 %140, %129
  %142 = select i1 %141, i32 %140, i32 %129
  %143 = sub nsw i32 %142, %129
  %144 = sdiv i32 %143, 4
  %145 = add nsw i32 %142, %129
  %146 = sdiv i32 %145, 2
  %147 = add nsw i32 %142, 1
  %148 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %6, i64 %71, i64 %87, i64 0
  %149 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %7, i64 %71, i64 %87
  %150 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %90, i64 0, i32 0
  %151 = bitcast %struct.III_scalefac_t* %149 to i8*
  %152 = bitcast i32* %148 to i8*
  %153 = trunc i64 %87 to i32
  br label %154

154:                                              ; preds = %195, %128
  %155 = phi i32 [ %144, %128 ], [ %198, %195 ]
  %156 = phi i32 [ %147, %128 ], [ %196, %195 ]
  %157 = phi i32 [ %146, %128 ], [ %197, %195 ]
  %158 = icmp slt i32 %157, %156
  br i1 %158, label %161, label %159

159:                                              ; preds = %154
  %160 = sub nsw i32 %157, %155
  br label %195

161:                                              ; preds = %154
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(120) %101, i8* nonnull align 8 dereferenceable(120) %20, i64 120, i1 false)
  %162 = load i32, i32* %65, align 4, !tbaa !162
  %163 = shl i32 %162, 1
  %164 = add nsw i32 %163, -6
  %165 = sitofp i32 %164 to float
  %166 = add nsw i32 %157, -125
  %167 = sitofp i32 %166 to double
  %168 = fdiv double %167, 2.375000e+03
  %169 = fptrunc double %168 to float
  %170 = fadd float %169, -1.000000e+00
  %171 = fmul float %170, 4.000000e+00
  %172 = fadd float %171, %165
  %173 = fdiv float %172, 1.000000e+01
  %174 = fpext float %173 to double
  %175 = call double @pow(double 1.000000e+01, double %174) #21
  %176 = fptrunc double %175 to float
  store float %176, float* @masking_lower, align 4, !tbaa !33
  %177 = call i32 @calc_xmin(%struct.lame_global_flags* %0, double* %91, %struct.III_psy_ratio* %110, %struct.gr_info* nonnull %90, %struct.III_psy_xmin* nonnull %13) #21
  call void @outer_loop(%struct.lame_global_flags* %0, double* %91, i32 %157, double* nonnull %66, %struct.III_psy_xmin* nonnull %13, i32* %148, %struct.III_scalefac_t* %149, %struct.gr_info* nonnull %90, [21 x double]* undef, i32 %153)
  %178 = load double, double* %66, align 16, !tbaa !27
  %179 = fptosi double %178 to i32
  %180 = load double, double* %67, align 8, !tbaa !27
  %181 = load double, double* %68, align 16, !tbaa !27
  %182 = load double, double* %69, align 8, !tbaa !27
  %183 = icmp sgt i32 %179, 0
  %184 = fcmp ugt double %181, 0.000000e+00
  %185 = or i1 %183, %184
  %186 = fcmp ugt double %180, 0.000000e+00
  %187 = or i1 %186, %185
  %188 = fcmp ugt double %182, 0.000000e+00
  %189 = or i1 %188, %187
  br i1 %189, label %193, label %190

190:                                              ; preds = %161
  %191 = load i32, i32* %150, align 8, !tbaa !132
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(244) %21, i8* nonnull align 4 dereferenceable(244) %151, i64 244, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 dereferenceable(2304) %22, i8* nonnull align 4 dereferenceable(2304) %152, i64 2304, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(120) %19, i8* nonnull align 8 dereferenceable(120) %101, i64 120, i1 false)
  %192 = sub nsw i32 %157, %155
  br label %195

193:                                              ; preds = %161
  %194 = add nsw i32 %157, %155
  br label %195

195:                                              ; preds = %193, %190, %159
  %196 = phi i32 [ %156, %159 ], [ %191, %190 ], [ %156, %193 ]
  %197 = phi i32 [ %160, %159 ], [ %192, %190 ], [ %194, %193 ]
  %198 = sdiv i32 %155, 2
  %199 = icmp sgt i32 %155, 21
  br i1 %199, label %154, label %200

200:                                              ; preds = %195
  %201 = icmp sgt i32 %196, %142
  br i1 %201, label %203, label %202

202:                                              ; preds = %200
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(120) %101, i8* nonnull align 8 dereferenceable(120) %19, i64 120, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(244) %151, i8* nonnull align 4 dereferenceable(244) %21, i64 244, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(2304) %152, i8* nonnull align 16 dereferenceable(2304) %22, i64 2304, i1 false)
  br label %203

203:                                              ; preds = %202, %200
  %204 = load i32, i32* %150, align 8, !tbaa !132
  %205 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %14, i64 0, i64 %71, i64 %87
  store i32 %204, i32* %205, align 4, !tbaa !18
  %206 = add nsw i32 %204, %89
  br label %207

207:                                              ; preds = %203, %94
  %208 = phi i32 [ %206, %203 ], [ %89, %94 ]
  %209 = phi i32 [ %114, %203 ], [ 1, %94 ]
  %210 = add nuw nsw i64 %87, 1
  %211 = icmp eq i64 %210, %85
  br i1 %211, label %212, label %86

212:                                              ; preds = %207, %82
  %213 = phi i32 [ %73, %82 ], [ %208, %207 ]
  %214 = phi i32 [ %72, %82 ], [ %209, %207 ]
  %215 = add nuw nsw i64 %71, 1
  %216 = load i32, i32* %58, align 8, !tbaa !95
  %217 = sext i32 %216 to i64
  %218 = icmp slt i64 %215, %217
  br i1 %218, label %70, label %219

219:                                              ; preds = %212
  %220 = load i32, i32* @reduce_sidechannel, align 4, !tbaa !18
  %221 = icmp ne i32 %220, 0
  %222 = icmp sgt i32 %216, 0
  %223 = and i1 %221, %222
  br i1 %223, label %224, label %248

224:                                              ; preds = %219
  %225 = zext i32 %216 to i64
  br label %226

226:                                              ; preds = %226, %224
  %227 = phi i64 [ 0, %224 ], [ %246, %226 ]
  %228 = phi i32 [ %213, %224 ], [ %245, %226 ]
  %229 = getelementptr inbounds double, double* %2, i64 %227
  %230 = load double, double* %229, align 8, !tbaa !27
  %231 = fsub double 5.000000e-01, %230
  %232 = fmul double %231, 3.300000e-01
  %233 = fmul double %232, 2.000000e+00
  %234 = fsub double 1.000000e+00, %233
  %235 = fadd double %233, 1.000000e+00
  %236 = fdiv double %234, %235
  %237 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %14, i64 0, i64 %227, i64 0
  %238 = load i32, i32* %237, align 8, !tbaa !18
  %239 = sitofp i32 %238 to double
  %240 = fmul double %236, %239
  %241 = fptosi double %240 to i32
  %242 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %14, i64 0, i64 %227, i64 1
  %243 = icmp sgt i32 %241, 125
  %244 = select i1 %243, i32 %241, i32 125
  store i32 %244, i32* %242, align 4, !tbaa !18
  %245 = add nsw i32 %244, %228
  %246 = add nuw nsw i64 %227, 1
  %247 = icmp eq i64 %246, %225
  br i1 %247, label %248, label %226

248:                                              ; preds = %226, %219
  %249 = phi i32 [ %213, %219 ], [ %245, %226 ]
  %250 = icmp eq i32 %214, 0
  br i1 %250, label %251, label %255

251:                                              ; preds = %248, %55
  %252 = phi i32 [ %249, %248 ], [ 0, %55 ]
  %253 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 47
  %254 = load i32, i32* %253, align 8, !tbaa !179
  br label %255

255:                                              ; preds = %251, %248
  %256 = phi i32 [ %252, %251 ], [ %249, %248 ]
  %257 = phi i32 [ %254, %251 ], [ 1, %248 ]
  store i32 %257, i32* %29, align 4, !tbaa !117
  %258 = load i32, i32* %30, align 4, !tbaa !178
  %259 = icmp slt i32 %257, %258
  br i1 %259, label %260, label %272

260:                                              ; preds = %255
  %261 = sext i32 %257 to i64
  %262 = sext i32 %258 to i64
  br label %266

263:                                              ; preds = %266
  %264 = trunc i64 %271 to i32
  store i32 %264, i32* %29, align 4, !tbaa !117
  %265 = icmp slt i64 %271, %262
  br i1 %265, label %266, label %272

266:                                              ; preds = %263, %260
  %267 = phi i64 [ %261, %260 ], [ %271, %263 ]
  %268 = getelementptr inbounds [15 x i32], [15 x i32]* %16, i64 0, i64 %267
  %269 = load i32, i32* %268, align 4, !tbaa !18
  %270 = icmp sgt i32 %256, %269
  %271 = add nsw i64 %267, 1
  br i1 %270, label %263, label %272

272:                                              ; preds = %266, %263, %255
  call void @getframebits(%struct.lame_global_flags* nonnull %0, i32* nonnull %17, i32* nonnull %18) #21
  %273 = load i32, i32* %18, align 4, !tbaa !18
  %274 = load i32, i32* %17, align 4, !tbaa !18
  %275 = call i32 @ResvFrameBegin(%struct.lame_global_flags* nonnull %0, %struct.III_side_info_t* %5, i32 %273, i32 %274) #21
  %276 = icmp sgt i32 %256, %275
  %277 = load i32, i32* %58, align 8, !tbaa !95
  br i1 %276, label %278, label %344

278:                                              ; preds = %272
  %279 = icmp sgt i32 %277, 0
  br i1 %279, label %280, label %481

280:                                              ; preds = %278
  %281 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 46
  %282 = load i32, i32* %281, align 4, !tbaa !126
  %283 = icmp sgt i32 %282, 0
  %284 = zext i32 %282 to i64
  %285 = sext i32 %277 to i64
  %286 = and i64 %284, 1
  %287 = icmp eq i32 %282, 1
  %288 = sub nsw i64 %284, %286
  %289 = icmp eq i64 %286, 0
  br label %290

290:                                              ; preds = %324, %280
  %291 = phi i64 [ 0, %280 ], [ %325, %324 ]
  br i1 %283, label %292, label %324

292:                                              ; preds = %290
  %293 = load i32, i32* %29, align 4, !tbaa !117
  %294 = sext i32 %293 to i64
  %295 = getelementptr inbounds [15 x i32], [15 x i32]* %16, i64 0, i64 %294
  %296 = load i32, i32* %295, align 4, !tbaa !18
  br i1 %287, label %317, label %302

297:                                              ; preds = %324
  br i1 %279, label %298, label %481

298:                                              ; preds = %297
  %299 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 46
  %300 = load i32, i32* %299, align 4, !tbaa !126
  %301 = icmp sgt i32 %300, 0
  br i1 %301, label %327, label %347

302:                                              ; preds = %302, %292
  %303 = phi i64 [ %314, %302 ], [ 0, %292 ]
  %304 = phi i64 [ %315, %302 ], [ %288, %292 ]
  %305 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %14, i64 0, i64 %291, i64 %303
  %306 = load i32, i32* %305, align 8, !tbaa !18
  %307 = mul nsw i32 %296, %306
  %308 = sdiv i32 %307, %256
  store i32 %308, i32* %305, align 8, !tbaa !18
  %309 = or i64 %303, 1
  %310 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %14, i64 0, i64 %291, i64 %309
  %311 = load i32, i32* %310, align 4, !tbaa !18
  %312 = mul nsw i32 %296, %311
  %313 = sdiv i32 %312, %256
  store i32 %313, i32* %310, align 4, !tbaa !18
  %314 = add nuw nsw i64 %303, 2
  %315 = add i64 %304, -2
  %316 = icmp eq i64 %315, 0
  br i1 %316, label %317, label %302

317:                                              ; preds = %302, %292
  %318 = phi i64 [ 0, %292 ], [ %314, %302 ]
  br i1 %289, label %324, label %319

319:                                              ; preds = %317
  %320 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %14, i64 0, i64 %291, i64 %318
  %321 = load i32, i32* %320, align 4, !tbaa !18
  %322 = mul nsw i32 %296, %321
  %323 = sdiv i32 %322, %256
  store i32 %323, i32* %320, align 4, !tbaa !18
  br label %324

324:                                              ; preds = %319, %317, %290
  %325 = add nuw nsw i64 %291, 1
  %326 = icmp slt i64 %325, %285
  br i1 %326, label %290, label %297

327:                                              ; preds = %298
  %328 = zext i32 %300 to i64
  %329 = add nsw i64 %328, -1
  %330 = and i64 %328, 7
  %331 = icmp ult i64 %329, 7
  br i1 %331, label %338, label %332

332:                                              ; preds = %327
  %333 = sub nsw i64 %328, %330
  br label %334

334:                                              ; preds = %334, %332
  %335 = phi i64 [ %333, %332 ], [ %336, %334 ]
  %336 = add i64 %335, -8
  %337 = icmp eq i64 %336, 0
  br i1 %337, label %338, label %334

338:                                              ; preds = %334, %327
  %339 = icmp eq i64 %330, 0
  br i1 %339, label %344, label %340

340:                                              ; preds = %340, %338
  %341 = phi i64 [ %342, %340 ], [ %330, %338 ]
  %342 = add i64 %341, -1
  %343 = icmp eq i64 %342, 0
  br i1 %343, label %344, label %340, !llvm.loop !308

344:                                              ; preds = %340, %338, %272
  %345 = phi i32 [ 0, %272 ], [ 1, %340 ], [ 1, %338 ]
  %346 = icmp sgt i32 %277, 0
  br i1 %346, label %347, label %481

347:                                              ; preds = %344, %298
  %348 = phi i32 [ %345, %344 ], [ 1, %298 ]
  %349 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 46
  %350 = icmp eq i32 %348, 0
  %351 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 22
  %352 = getelementptr inbounds [4 x double], [4 x double]* %15, i64 0, i64 0
  %353 = load i32, i32* %349, align 4, !tbaa !126
  %354 = bitcast [4 x double]* %15 to i8*
  br label %355

355:                                              ; preds = %409, %347
  %356 = phi i32 [ %353, %347 ], [ %410, %409 ]
  %357 = phi i64 [ 0, %347 ], [ %411, %409 ]
  %358 = icmp sgt i32 %356, 0
  br i1 %358, label %364, label %409

359:                                              ; preds = %409
  %360 = icmp sgt i32 %412, 0
  br i1 %360, label %361, label %481

361:                                              ; preds = %359
  %362 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 46
  %363 = load i32, i32* %362, align 4, !tbaa !126
  br label %415

364:                                              ; preds = %404, %355
  %365 = phi i64 [ %405, %404 ], [ 0, %355 ]
  br i1 %350, label %366, label %371

366:                                              ; preds = %364
  %367 = load i32, i32* @reduce_sidechannel, align 4, !tbaa !18
  %368 = icmp ne i32 %367, 0
  %369 = icmp eq i64 %365, 1
  %370 = and i1 %369, %368
  br i1 %370, label %371, label %404

371:                                              ; preds = %366, %364
  %372 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %5, i64 0, i32 4, i64 %357, i32 0, i64 %365, i32 0
  %373 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %3, i64 %357, i64 %365, i64 0
  %374 = call i32 @init_outer_loop(%struct.lame_global_flags* %0, double* %373, %struct.gr_info* nonnull %372)
  %375 = icmp eq i32 %374, 0
  br i1 %375, label %376, label %381

376:                                              ; preds = %371
  %377 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %7, i64 %357, i64 %365
  %378 = bitcast %struct.III_scalefac_t* %377 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(244) %378, i8 0, i64 244, i1 false)
  %379 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %6, i64 %357, i64 %365, i64 0
  %380 = bitcast i32* %379 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(2304) %380, i8 0, i64 2304, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(32) %354, i8 0, i64 32, i1 false)
  br label %404

381:                                              ; preds = %371
  %382 = load i32, i32* %351, align 4, !tbaa !162
  %383 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* %14, i64 0, i64 %357, i64 %365
  %384 = load i32, i32* %383, align 4, !tbaa !18
  %385 = shl i32 %382, 1
  %386 = add nsw i32 %385, -6
  %387 = sitofp i32 %386 to float
  %388 = add nsw i32 %384, -125
  %389 = sitofp i32 %388 to double
  %390 = fdiv double %389, 2.375000e+03
  %391 = fptrunc double %390 to float
  %392 = fadd float %391, -1.000000e+00
  %393 = fmul float %392, 4.000000e+00
  %394 = fadd float %393, %387
  %395 = fdiv float %394, 1.000000e+01
  %396 = fpext float %395 to double
  %397 = call double @pow(double 1.000000e+01, double %396) #21
  %398 = fptrunc double %397 to float
  store float %398, float* @masking_lower, align 4, !tbaa !33
  %399 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %4, i64 %357, i64 %365
  %400 = call i32 @calc_xmin(%struct.lame_global_flags* %0, double* %373, %struct.III_psy_ratio* %399, %struct.gr_info* nonnull %372, %struct.III_psy_xmin* nonnull %13) #21
  %401 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %6, i64 %357, i64 %365, i64 0
  %402 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %7, i64 %357, i64 %365
  %403 = trunc i64 %365 to i32
  call void @outer_loop(%struct.lame_global_flags* %0, double* %373, i32 %384, double* nonnull %352, %struct.III_psy_xmin* nonnull %13, i32* %401, %struct.III_scalefac_t* %402, %struct.gr_info* nonnull %372, [21 x double]* undef, i32 %403)
  br label %404

404:                                              ; preds = %381, %376, %366
  %405 = add nuw nsw i64 %365, 1
  %406 = load i32, i32* %349, align 4, !tbaa !126
  %407 = sext i32 %406 to i64
  %408 = icmp slt i64 %405, %407
  br i1 %408, label %364, label %409

409:                                              ; preds = %404, %355
  %410 = phi i32 [ %356, %355 ], [ %406, %404 ]
  %411 = add nuw nsw i64 %357, 1
  %412 = load i32, i32* %58, align 8, !tbaa !95
  %413 = sext i32 %412 to i64
  %414 = icmp slt i64 %411, %413
  br i1 %414, label %355, label %359

415:                                              ; preds = %444, %361
  %416 = phi i32 [ %412, %361 ], [ %445, %444 ]
  %417 = phi i32 [ %363, %361 ], [ %446, %444 ]
  %418 = phi i64 [ 0, %361 ], [ %447, %444 ]
  %419 = icmp sgt i32 %417, 0
  br i1 %419, label %420, label %444

420:                                              ; preds = %415
  %421 = trunc i64 %418 to i32
  br label %427

422:                                              ; preds = %444
  %423 = icmp sgt i32 %445, 0
  br i1 %423, label %424, label %481

424:                                              ; preds = %422
  %425 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 46
  %426 = load i32, i32* %425, align 4, !tbaa !126
  br label %450

427:                                              ; preds = %436, %420
  %428 = phi i64 [ 0, %420 ], [ %438, %436 ]
  %429 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %5, i64 0, i32 4, i64 %418, i32 0, i64 %428, i32 0
  %430 = trunc i64 %428 to i32
  call void @best_scalefac_store(%struct.lame_global_flags* nonnull %0, i32 %421, i32 %430, [2 x [576 x i32]]* %6, %struct.III_side_info_t* %5, [2 x %struct.III_scalefac_t]* %7) #21
  %431 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %5, i64 0, i32 4, i64 %418, i32 0, i64 %428, i32 0, i32 6
  %432 = load i32, i32* %431, align 8, !tbaa !138
  %433 = icmp eq i32 %432, 0
  br i1 %433, label %434, label %436

434:                                              ; preds = %427
  %435 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %6, i64 %418, i64 %428, i64 0
  call void @best_huffman_divide(i32 %421, i32 %430, %struct.gr_info* nonnull %429, i32* %435) #21
  br label %436

436:                                              ; preds = %434, %427
  %437 = load i32, i32* %18, align 4, !tbaa !18
  call void @ResvAdjust(%struct.lame_global_flags* %0, %struct.gr_info* nonnull %429, %struct.III_side_info_t* nonnull %5, i32 %437) #21
  %438 = add nuw nsw i64 %428, 1
  %439 = load i32, i32* %362, align 4, !tbaa !126
  %440 = sext i32 %439 to i64
  %441 = icmp slt i64 %438, %440
  br i1 %441, label %427, label %442

442:                                              ; preds = %436
  %443 = load i32, i32* %58, align 8, !tbaa !95
  br label %444

444:                                              ; preds = %442, %415
  %445 = phi i32 [ %443, %442 ], [ %416, %415 ]
  %446 = phi i32 [ %439, %442 ], [ %417, %415 ]
  %447 = add nuw nsw i64 %418, 1
  %448 = sext i32 %445 to i64
  %449 = icmp slt i64 %447, %448
  br i1 %449, label %415, label %422

450:                                              ; preds = %475, %424
  %451 = phi i32 [ %426, %424 ], [ %476, %475 ]
  %452 = phi i64 [ 0, %424 ], [ %477, %475 ]
  %453 = icmp sgt i32 %451, 0
  br i1 %453, label %454, label %475

454:                                              ; preds = %470, %450
  %455 = phi i64 [ %471, %470 ], [ 0, %450 ]
  br label %456

456:                                              ; preds = %487, %454
  %457 = phi i64 [ 0, %454 ], [ %488, %487 ]
  %458 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %3, i64 %452, i64 %455, i64 %457
  %459 = load double, double* %458, align 8, !tbaa !27
  %460 = fcmp olt double %459, 0.000000e+00
  br i1 %460, label %461, label %465

461:                                              ; preds = %456
  %462 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %6, i64 %452, i64 %455, i64 %457
  %463 = load i32, i32* %462, align 4, !tbaa !18
  %464 = sub nsw i32 0, %463
  store i32 %464, i32* %462, align 4, !tbaa !18
  br label %465

465:                                              ; preds = %461, %456
  %466 = or i64 %457, 1
  %467 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %3, i64 %452, i64 %455, i64 %466
  %468 = load double, double* %467, align 8, !tbaa !27
  %469 = fcmp olt double %468, 0.000000e+00
  br i1 %469, label %483, label %487

470:                                              ; preds = %487
  %471 = add nuw nsw i64 %455, 1
  %472 = load i32, i32* %425, align 4, !tbaa !126
  %473 = sext i32 %472 to i64
  %474 = icmp slt i64 %471, %473
  br i1 %474, label %454, label %475

475:                                              ; preds = %470, %450
  %476 = phi i32 [ %451, %450 ], [ %472, %470 ]
  %477 = add nuw nsw i64 %452, 1
  %478 = load i32, i32* %58, align 8, !tbaa !95
  %479 = sext i32 %478 to i64
  %480 = icmp slt i64 %477, %479
  br i1 %480, label %450, label %481

481:                                              ; preds = %475, %422, %359, %344, %297, %278
  %482 = load i32, i32* %18, align 4, !tbaa !18
  call void @ResvFrameEnd(%struct.lame_global_flags* nonnull %0, %struct.III_side_info_t* %5, i32 %482) #21
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %28) #21
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %27) #21
  call void @llvm.lifetime.end.p0i8(i64 60, i8* nonnull %26) #21
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %25) #21
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %24) #21
  call void @llvm.lifetime.end.p0i8(i64 488, i8* nonnull %23) #21
  call void @llvm.lifetime.end.p0i8(i64 2304, i8* nonnull %22)
  call void @llvm.lifetime.end.p0i8(i64 244, i8* nonnull %21)
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %20)
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %19)
  ret void

483:                                              ; preds = %465
  %484 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %6, i64 %452, i64 %455, i64 %466
  %485 = load i32, i32* %484, align 4, !tbaa !18
  %486 = sub nsw i32 0, %485
  store i32 %486, i32* %484, align 4, !tbaa !18
  br label %487

487:                                              ; preds = %483, %465
  %488 = add nuw nsw i64 %457, 2
  %489 = icmp eq i64 %488, 576
  br i1 %489, label %470, label %456
}

; Function Attrs: norecurse nounwind readnone uwtable
define dso_local i32 @VBR_compare(i32 %0, double %1, double %2, double %3, i32 %4, double %5, double %6, double %7) local_unnamed_addr #15 {
  %9 = icmp sgt i32 %4, %0
  %10 = fcmp ugt double %6, %2
  %11 = or i1 %9, %10
  %12 = fcmp ugt double %5, %1
  %13 = or i1 %12, %11
  %14 = fcmp ole double %7, %3
  %15 = xor i1 %13, true
  %16 = and i1 %14, %15
  %17 = zext i1 %16 to i32
  ret i32 %17
}

; Function Attrs: nounwind uwtable
define dso_local void @iteration_init(%struct.lame_global_flags* nocapture readonly %0, %struct.III_side_info_t* nocapture %1, [2 x [576 x i32]]* nocapture readnone %2) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %1, i64 0, i32 2
  store i32 0, i32* %4, align 8, !tbaa !148
  %5 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 39
  %6 = load i64, i64* %5, align 8, !tbaa !93
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %8, label %117

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 51
  %10 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 43
  br label %26

11:                                               ; preds = %26
  %12 = getelementptr inbounds [6 x %struct.scalefac_struct], [6 x %struct.scalefac_struct]* @sfBandIndex, i64 0, i64 %42, i32 1, i64 0
  %13 = bitcast i32* %12 to <4 x i32>*
  %14 = load <4 x i32>, <4 x i32>* %13, align 4, !tbaa !18
  store <4 x i32> %14, <4 x i32>* bitcast (i32* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 1, i64 0) to <4 x i32>*), align 4, !tbaa !18
  %15 = getelementptr inbounds [6 x %struct.scalefac_struct], [6 x %struct.scalefac_struct]* @sfBandIndex, i64 0, i64 %42, i32 1, i64 4
  %16 = bitcast i32* %15 to <4 x i32>*
  %17 = load <4 x i32>, <4 x i32>* %16, align 4, !tbaa !18
  store <4 x i32> %17, <4 x i32>* bitcast (i32* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 1, i64 4) to <4 x i32>*), align 4, !tbaa !18
  %18 = getelementptr inbounds [6 x %struct.scalefac_struct], [6 x %struct.scalefac_struct]* @sfBandIndex, i64 0, i64 %42, i32 1, i64 8
  %19 = bitcast i32* %18 to <4 x i32>*
  %20 = load <4 x i32>, <4 x i32>* %19, align 4, !tbaa !18
  store <4 x i32> %20, <4 x i32>* bitcast (i32* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 1, i64 8) to <4 x i32>*), align 4, !tbaa !18
  %21 = getelementptr inbounds [6 x %struct.scalefac_struct], [6 x %struct.scalefac_struct]* @sfBandIndex, i64 0, i64 %42, i32 1, i64 12
  %22 = load i32, i32* %21, align 4, !tbaa !18
  store i32 %22, i32* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 1, i64 12), align 4, !tbaa !18
  %23 = getelementptr inbounds [6 x %struct.scalefac_struct], [6 x %struct.scalefac_struct]* @sfBandIndex, i64 0, i64 %42, i32 1, i64 13
  %24 = load i32, i32* %23, align 4, !tbaa !18
  store i32 %24, i32* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 1, i64 13), align 4, !tbaa !18
  %25 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %1, i64 0, i32 0
  store i32 0, i32* %25, align 8, !tbaa !129
  tail call void @compute_ath(%struct.lame_global_flags* nonnull %0, double* getelementptr inbounds ([21 x double], [21 x double]* @ATH_l, i64 0, i64 0), double* getelementptr inbounds ([21 x double], [21 x double]* @ATH_s, i64 0, i64 0))
  br label %43

26:                                               ; preds = %186, %8
  %27 = phi i64 [ 0, %8 ], [ %190, %186 ]
  %28 = load i32, i32* %9, align 8, !tbaa !118
  %29 = load i32, i32* %10, align 8, !tbaa !115
  %30 = mul nsw i32 %29, 3
  %31 = add nsw i32 %30, %28
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds [6 x %struct.scalefac_struct], [6 x %struct.scalefac_struct]* @sfBandIndex, i64 0, i64 %32, i32 0, i64 %27
  %34 = load i32, i32* %33, align 4, !tbaa !18
  %35 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 0, i64 %27
  store i32 %34, i32* %35, align 4, !tbaa !18
  %36 = or i64 %27, 1
  %37 = icmp eq i64 %36, 23
  %38 = load i32, i32* %9, align 8, !tbaa !118
  %39 = load i32, i32* %10, align 8, !tbaa !115
  %40 = mul nsw i32 %39, 3
  %41 = add nsw i32 %40, %38
  %42 = sext i32 %41 to i64
  br i1 %37, label %11, label %186

43:                                               ; preds = %43, %11
  %44 = phi i64 [ 0, %11 ], [ %64, %43 ]
  %45 = trunc i64 %44 to i32
  %46 = sitofp i32 %45 to double
  %47 = tail call double @pow(double %46, double 0x3FF5555555555555) #21
  %48 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i64 0, i64 %44
  store double %47, double* %48, align 16, !tbaa !27
  %49 = or i64 %44, 1
  %50 = trunc i64 %49 to i32
  %51 = sitofp i32 %50 to double
  %52 = tail call double @pow(double %51, double 0x3FF5555555555555) #21
  %53 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i64 0, i64 %49
  store double %52, double* %53, align 8, !tbaa !27
  %54 = or i64 %44, 2
  %55 = trunc i64 %54 to i32
  %56 = sitofp i32 %55 to double
  %57 = tail call double @pow(double %56, double 0x3FF5555555555555) #21
  %58 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i64 0, i64 %54
  store double %57, double* %58, align 16, !tbaa !27
  %59 = or i64 %44, 3
  %60 = trunc i64 %59 to i32
  %61 = sitofp i32 %60 to double
  %62 = tail call double @pow(double %61, double 0x3FF5555555555555) #21
  %63 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i64 0, i64 %59
  store double %62, double* %63, align 8, !tbaa !27
  %64 = add nuw nsw i64 %44, 4
  %65 = icmp eq i64 %64, 8208
  br i1 %65, label %66, label %43

66:                                               ; preds = %173, %43
  %67 = phi i64 [ %174, %173 ], [ 0, %43 ]
  %68 = or i64 %67, 1
  %69 = trunc i64 %68 to i32
  %70 = sitofp i32 %69 to double
  %71 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i64 0, i64 %67
  %72 = load double, double* %71, align 16, !tbaa !27
  %73 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i64 0, i64 %68
  %74 = load double, double* %73, align 8, !tbaa !27
  %75 = fadd double %72, %74
  %76 = fmul double %75, 5.000000e-01
  %77 = tail call double @pow(double %76, double 7.500000e-01) #21
  %78 = fsub double %70, %77
  %79 = getelementptr inbounds [8208 x double], [8208 x double]* @adj43, i64 0, i64 %67
  store double %78, double* %79, align 16, !tbaa !27
  %80 = icmp eq i64 %68, 8207
  br i1 %80, label %81, label %173

81:                                               ; preds = %66
  store double 5.000000e-01, double* getelementptr inbounds ([8208 x double], [8208 x double]* @adj43, i64 0, i64 8207), align 8, !tbaa !27
  br label %82

82:                                               ; preds = %164, %81
  %83 = phi i64 [ 1, %81 ], [ %172, %164 ]
  %84 = add nsw i64 %83, -1
  %85 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i64 0, i64 %84
  %86 = load double, double* %85, align 8, !tbaa !27
  %87 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i64 0, i64 %83
  %88 = load double, double* %87, align 8, !tbaa !27
  %89 = fadd double %86, %88
  %90 = fmul double %89, 5.000000e-01
  %91 = tail call double @pow(double %90, double 7.500000e-01) #21
  %92 = add nuw nsw i64 %83, 1
  %93 = icmp eq i64 %92, 8208
  br i1 %93, label %94, label %164

94:                                               ; preds = %94, %82
  %95 = phi i64 [ %115, %94 ], [ 0, %82 ]
  %96 = trunc i64 %95 to i32
  %97 = add nsw i32 %96, -210
  %98 = sitofp i32 %97 to double
  %99 = fmul double %98, -1.875000e-01
  %100 = tail call double @exp2(double %99) #4
  %101 = getelementptr inbounds [256 x double], [256 x double]* @ipow20, i64 0, i64 %95
  store double %100, double* %101, align 16, !tbaa !27
  %102 = fmul double %98, 2.500000e-01
  %103 = tail call double @exp2(double %102) #4
  %104 = getelementptr inbounds [256 x double], [256 x double]* @pow20, i64 0, i64 %95
  store double %103, double* %104, align 16, !tbaa !27
  %105 = or i64 %95, 1
  %106 = trunc i64 %105 to i32
  %107 = add nsw i32 %106, -210
  %108 = sitofp i32 %107 to double
  %109 = fmul double %108, -1.875000e-01
  %110 = tail call double @exp2(double %109) #4
  %111 = getelementptr inbounds [256 x double], [256 x double]* @ipow20, i64 0, i64 %105
  store double %110, double* %111, align 8, !tbaa !27
  %112 = fmul double %108, 2.500000e-01
  %113 = tail call double @exp2(double %112) #4
  %114 = getelementptr inbounds [256 x double], [256 x double]* @pow20, i64 0, i64 %105
  store double %113, double* %114, align 8, !tbaa !27
  %115 = add nuw nsw i64 %95, 2
  %116 = icmp eq i64 %115, 256
  br i1 %116, label %117, label %94

117:                                              ; preds = %94, %3
  store i32 0, i32* @convert_mdct, align 4, !tbaa !18
  store i32 0, i32* @reduce_sidechannel, align 4, !tbaa !18
  %118 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 52
  %119 = load i32, i32* %118, align 4, !tbaa !122
  %120 = icmp eq i32 %119, 2
  br i1 %120, label %121, label %122

121:                                              ; preds = %117
  store i32 1, i32* @convert_mdct, align 4, !tbaa !18
  store i32 1, i32* @reduce_sidechannel, align 4, !tbaa !18
  br label %122

122:                                              ; preds = %121, %117
  %123 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 45
  %124 = load i32, i32* %123, align 8, !tbaa !95
  %125 = icmp sgt i32 %124, 0
  br i1 %125, label %126, label %136

126:                                              ; preds = %122
  %127 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 46
  %128 = load i32, i32* %127, align 4, !tbaa !126
  %129 = icmp sgt i32 %128, 0
  %130 = zext i32 %124 to i64
  br label %131

131:                                              ; preds = %151, %126
  %132 = phi i64 [ 0, %126 ], [ %152, %151 ]
  br i1 %129, label %133, label %151

133:                                              ; preds = %131
  %134 = load i32, i32* %127, align 4, !tbaa !126
  %135 = sext i32 %134 to i64
  br label %140

136:                                              ; preds = %151, %122
  %137 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 46
  %138 = load i32, i32* %137, align 4, !tbaa !126
  %139 = icmp sgt i32 %138, 0
  br i1 %139, label %154, label %163

140:                                              ; preds = %140, %133
  %141 = phi i64 [ 0, %133 ], [ %149, %140 ]
  %142 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %1, i64 0, i32 4, i64 %132, i32 0, i64 %141, i32 0, i32 6
  %143 = load i32, i32* %142, align 8, !tbaa !138
  %144 = icmp eq i32 %143, 2
  %145 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %1, i64 0, i32 4, i64 %132, i32 0, i64 %141, i32 0, i32 16
  %146 = select i1 %144, i32 0, i32 21
  %147 = select i1 %144, i32 0, i32 12
  store i32 %146, i32* %145, align 8, !tbaa !302
  %148 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %1, i64 0, i32 4, i64 %132, i32 0, i64 %141, i32 0, i32 17
  store i32 %147, i32* %148, align 4
  %149 = add nuw nsw i64 %141, 1
  %150 = icmp slt i64 %149, %135
  br i1 %150, label %140, label %151

151:                                              ; preds = %140, %131
  %152 = add nuw nsw i64 %132, 1
  %153 = icmp ult i64 %152, %130
  br i1 %153, label %131, label %136

154:                                              ; preds = %154, %136
  %155 = phi i64 [ %162, %154 ], [ 0, %136 ]
  %156 = phi i32 [ %159, %154 ], [ 0, %136 ]
  %157 = getelementptr %struct.III_side_info_t, %struct.III_side_info_t* %1, i64 0, i32 3, i64 %155, i64 0
  %158 = bitcast i32* %157 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %158, i8 0, i64 16, i1 false)
  %159 = add nuw nsw i32 %156, 1
  %160 = load i32, i32* %137, align 4, !tbaa !126
  %161 = icmp slt i32 %159, %160
  %162 = add nuw nsw i64 %155, 1
  br i1 %161, label %154, label %163

163:                                              ; preds = %154, %136
  ret void

164:                                              ; preds = %82
  %165 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i64 0, i64 %83
  %166 = load double, double* %165, align 8, !tbaa !27
  %167 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i64 0, i64 %92
  %168 = load double, double* %167, align 8, !tbaa !27
  %169 = fadd double %166, %168
  %170 = fmul double %169, 5.000000e-01
  %171 = tail call double @pow(double %170, double 7.500000e-01) #21
  %172 = add nuw nsw i64 %83, 2
  br label %82

173:                                              ; preds = %66
  %174 = add nuw nsw i64 %67, 2
  %175 = trunc i64 %174 to i32
  %176 = sitofp i32 %175 to double
  %177 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i64 0, i64 %68
  %178 = load double, double* %177, align 8, !tbaa !27
  %179 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i64 0, i64 %174
  %180 = load double, double* %179, align 16, !tbaa !27
  %181 = fadd double %178, %180
  %182 = fmul double %181, 5.000000e-01
  %183 = tail call double @pow(double %182, double 7.500000e-01) #21
  %184 = fsub double %176, %183
  %185 = getelementptr inbounds [8208 x double], [8208 x double]* @adj43, i64 0, i64 %68
  store double %184, double* %185, align 8, !tbaa !27
  br label %66

186:                                              ; preds = %26
  %187 = getelementptr inbounds [6 x %struct.scalefac_struct], [6 x %struct.scalefac_struct]* @sfBandIndex, i64 0, i64 %42, i32 0, i64 %36
  %188 = load i32, i32* %187, align 4, !tbaa !18
  %189 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 0, i64 %36
  store i32 %188, i32* %189, align 4, !tbaa !18
  %190 = add nuw nsw i64 %27, 2
  br label %26
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @compute_ath(%struct.lame_global_flags* nocapture readonly %0, double* nocapture %1, double* nocapture %2) local_unnamed_addr #3 {
  %4 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 3
  %5 = load i32, i32* %4, align 8, !tbaa !156
  %6 = sitofp i32 %5 to double
  %7 = fdiv double %6, 1.000000e+03
  %8 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 34
  br label %11

9:                                                ; preds = %20, %11
  %10 = icmp eq i64 %15, 21
  br i1 %10, label %51, label %11

11:                                               ; preds = %9, %3
  %12 = phi i64 [ 0, %3 ], [ %15, %9 ]
  %13 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 0, i64 %12
  %14 = load i32, i32* %13, align 4, !tbaa !18
  %15 = add nuw nsw i64 %12, 1
  %16 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 0, i64 %15
  %17 = load i32, i32* %16, align 4, !tbaa !18
  %18 = getelementptr inbounds double, double* %1, i64 %12
  store double 0x547D42AEA2879F2E, double* %18, align 8, !tbaa !27
  %19 = icmp slt i32 %14, %17
  br i1 %19, label %20, label %9

20:                                               ; preds = %20, %11
  %21 = phi i32 [ %47, %20 ], [ %14, %11 ]
  %22 = sitofp i32 %21 to double
  %23 = fmul double %7, %22
  %24 = fdiv double %23, 1.152000e+03
  %25 = fcmp olt double %24, 2.000000e-02
  %26 = select i1 %25, double 2.000000e-02, double %24
  %27 = tail call double @pow(double %26, double -8.000000e-01) #21
  %28 = fmul double %27, 3.640000e+00
  %29 = fadd double %26, -3.300000e+00
  %30 = fmul double %29, %29
  %31 = fmul double %30, -6.000000e-01
  %32 = tail call double @exp(double %31) #21
  %33 = fmul double %32, 6.500000e+00
  %34 = fsub double %28, %33
  %35 = tail call double @pow(double %26, double 4.000000e+00) #21
  %36 = fmul double %35, 1.000000e-03
  %37 = fadd double %34, %36
  %38 = load i32, i32* %8, align 4, !tbaa !233
  %39 = icmp eq i32 %38, 0
  %40 = select i1 %39, double -1.140000e+02, double -2.000000e+02
  %41 = fadd double %37, %40
  %42 = fdiv double %41, 1.000000e+01
  %43 = tail call double @pow(double 1.000000e+01, double %42) #21
  %44 = load double, double* %18, align 8, !tbaa !27
  %45 = fcmp olt double %44, %43
  %46 = select i1 %45, double %44, double %43
  store double %46, double* %18, align 8, !tbaa !27
  %47 = add i32 %21, 1
  %48 = icmp eq i32 %47, %17
  br i1 %48, label %9, label %20

49:                                               ; preds = %60, %51
  %50 = icmp eq i64 %55, 12
  br i1 %50, label %89, label %51

51:                                               ; preds = %49, %9
  %52 = phi i64 [ %55, %49 ], [ 0, %9 ]
  %53 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 1, i64 %52
  %54 = load i32, i32* %53, align 4, !tbaa !18
  %55 = add nuw nsw i64 %52, 1
  %56 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 1, i64 %55
  %57 = load i32, i32* %56, align 4, !tbaa !18
  %58 = getelementptr inbounds double, double* %2, i64 %52
  store double 0x547D42AEA2879F2E, double* %58, align 8, !tbaa !27
  %59 = icmp slt i32 %54, %57
  br i1 %59, label %60, label %49

60:                                               ; preds = %60, %51
  %61 = phi i32 [ %87, %60 ], [ %54, %51 ]
  %62 = sitofp i32 %61 to double
  %63 = fmul double %7, %62
  %64 = fdiv double %63, 3.840000e+02
  %65 = fcmp olt double %64, 2.000000e-02
  %66 = select i1 %65, double 2.000000e-02, double %64
  %67 = tail call double @pow(double %66, double -8.000000e-01) #21
  %68 = fmul double %67, 3.640000e+00
  %69 = fadd double %66, -3.300000e+00
  %70 = fmul double %69, %69
  %71 = fmul double %70, -6.000000e-01
  %72 = tail call double @exp(double %71) #21
  %73 = fmul double %72, 6.500000e+00
  %74 = fsub double %68, %73
  %75 = tail call double @pow(double %66, double 4.000000e+00) #21
  %76 = fmul double %75, 1.000000e-03
  %77 = fadd double %74, %76
  %78 = load i32, i32* %8, align 4, !tbaa !233
  %79 = icmp eq i32 %78, 0
  %80 = select i1 %79, double -1.140000e+02, double -2.000000e+02
  %81 = fadd double %77, %80
  %82 = fdiv double %81, 1.000000e+01
  %83 = tail call double @pow(double 1.000000e+01, double %82) #21
  %84 = load double, double* %58, align 8, !tbaa !27
  %85 = fcmp olt double %84, %83
  %86 = select i1 %85, double %84, double %83
  store double %86, double* %58, align 8, !tbaa !27
  %87 = add i32 %61, 1
  %88 = icmp eq i32 %87, %57
  br i1 %88, label %49, label %60

89:                                               ; preds = %49
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local double @ATHformula(%struct.lame_global_flags* nocapture readonly %0, double %1) local_unnamed_addr #3 {
  %3 = fcmp olt double %1, 2.000000e-02
  %4 = select i1 %3, double 2.000000e-02, double %1
  %5 = tail call double @pow(double %4, double -8.000000e-01) #21
  %6 = fmul double %5, 3.640000e+00
  %7 = fadd double %4, -3.300000e+00
  %8 = fmul double %7, %7
  %9 = fmul double %8, -6.000000e-01
  %10 = tail call double @exp(double %9) #21
  %11 = fmul double %10, 6.500000e+00
  %12 = fsub double %6, %11
  %13 = tail call double @pow(double %4, double 4.000000e+00) #21
  %14 = fmul double %13, 1.000000e-03
  %15 = fadd double %12, %14
  %16 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 34
  %17 = load i32, i32* %16, align 4, !tbaa !233
  %18 = icmp eq i32 %17, 0
  %19 = select i1 %18, double -1.140000e+02, double -2.000000e+02
  %20 = fadd double %15, %19
  %21 = fdiv double %20, 1.000000e+01
  %22 = tail call double @pow(double 1.000000e+01, double %21) #21
  ret double %22
}

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @ms_convert([576 x double]* nocapture %0, [576 x double]* nocapture readonly %1) local_unnamed_addr #5 {
  %3 = getelementptr [576 x double], [576 x double]* %0, i64 2, i64 0
  %4 = getelementptr [576 x double], [576 x double]* %1, i64 2, i64 0
  %5 = bitcast double* %4 to [576 x double]*
  %6 = icmp ugt [576 x double]* %5, %0
  %7 = bitcast double* %3 to [576 x double]*
  %8 = icmp ugt [576 x double]* %7, %1
  %9 = and i1 %6, %8
  br i1 %9, label %43, label %10

10:                                               ; preds = %10, %2
  %11 = phi i64 [ %41, %10 ], [ 0, %2 ]
  %12 = getelementptr inbounds [576 x double], [576 x double]* %1, i64 0, i64 %11
  %13 = bitcast double* %12 to <2 x double>*
  %14 = load <2 x double>, <2 x double>* %13, align 8, !tbaa !27, !alias.scope !309
  %15 = getelementptr inbounds [576 x double], [576 x double]* %1, i64 1, i64 %11
  %16 = bitcast double* %15 to <2 x double>*
  %17 = load <2 x double>, <2 x double>* %16, align 8, !tbaa !27, !alias.scope !309
  %18 = fadd <2 x double> %14, %17
  %19 = fmul <2 x double> %18, <double 0x3FE6A09E667F3BCD, double 0x3FE6A09E667F3BCD>
  %20 = getelementptr inbounds [576 x double], [576 x double]* %0, i64 0, i64 %11
  %21 = bitcast double* %20 to <2 x double>*
  store <2 x double> %19, <2 x double>* %21, align 8, !tbaa !27, !alias.scope !312, !noalias !309
  %22 = fsub <2 x double> %14, %17
  %23 = fmul <2 x double> %22, <double 0x3FE6A09E667F3BCD, double 0x3FE6A09E667F3BCD>
  %24 = getelementptr inbounds [576 x double], [576 x double]* %0, i64 1, i64 %11
  %25 = bitcast double* %24 to <2 x double>*
  store <2 x double> %23, <2 x double>* %25, align 8, !tbaa !27, !alias.scope !312, !noalias !309
  %26 = or i64 %11, 2
  %27 = getelementptr inbounds [576 x double], [576 x double]* %1, i64 0, i64 %26
  %28 = bitcast double* %27 to <2 x double>*
  %29 = load <2 x double>, <2 x double>* %28, align 8, !tbaa !27, !alias.scope !309
  %30 = getelementptr inbounds [576 x double], [576 x double]* %1, i64 1, i64 %26
  %31 = bitcast double* %30 to <2 x double>*
  %32 = load <2 x double>, <2 x double>* %31, align 8, !tbaa !27, !alias.scope !309
  %33 = fadd <2 x double> %29, %32
  %34 = fmul <2 x double> %33, <double 0x3FE6A09E667F3BCD, double 0x3FE6A09E667F3BCD>
  %35 = getelementptr inbounds [576 x double], [576 x double]* %0, i64 0, i64 %26
  %36 = bitcast double* %35 to <2 x double>*
  store <2 x double> %34, <2 x double>* %36, align 8, !tbaa !27, !alias.scope !312, !noalias !309
  %37 = fsub <2 x double> %29, %32
  %38 = fmul <2 x double> %37, <double 0x3FE6A09E667F3BCD, double 0x3FE6A09E667F3BCD>
  %39 = getelementptr inbounds [576 x double], [576 x double]* %0, i64 1, i64 %26
  %40 = bitcast double* %39 to <2 x double>*
  store <2 x double> %38, <2 x double>* %40, align 8, !tbaa !27, !alias.scope !312, !noalias !309
  %41 = add nuw nsw i64 %11, 4
  %42 = icmp eq i64 %41, 576
  br i1 %42, label %68, label %10, !llvm.loop !314

43:                                               ; preds = %43, %2
  %44 = phi i64 [ %66, %43 ], [ 0, %2 ]
  %45 = getelementptr inbounds [576 x double], [576 x double]* %1, i64 0, i64 %44
  %46 = load double, double* %45, align 8, !tbaa !27
  %47 = getelementptr inbounds [576 x double], [576 x double]* %1, i64 1, i64 %44
  %48 = load double, double* %47, align 8, !tbaa !27
  %49 = fadd double %46, %48
  %50 = fmul double %49, 0x3FE6A09E667F3BCD
  %51 = getelementptr inbounds [576 x double], [576 x double]* %0, i64 0, i64 %44
  store double %50, double* %51, align 8, !tbaa !27
  %52 = fsub double %46, %48
  %53 = fmul double %52, 0x3FE6A09E667F3BCD
  %54 = getelementptr inbounds [576 x double], [576 x double]* %0, i64 1, i64 %44
  store double %53, double* %54, align 8, !tbaa !27
  %55 = or i64 %44, 1
  %56 = getelementptr inbounds [576 x double], [576 x double]* %1, i64 0, i64 %55
  %57 = load double, double* %56, align 8, !tbaa !27
  %58 = getelementptr inbounds [576 x double], [576 x double]* %1, i64 1, i64 %55
  %59 = load double, double* %58, align 8, !tbaa !27
  %60 = fadd double %57, %59
  %61 = fmul double %60, 0x3FE6A09E667F3BCD
  %62 = getelementptr inbounds [576 x double], [576 x double]* %0, i64 0, i64 %55
  store double %61, double* %62, align 8, !tbaa !27
  %63 = fsub double %57, %59
  %64 = fmul double %63, 0x3FE6A09E667F3BCD
  %65 = getelementptr inbounds [576 x double], [576 x double]* %0, i64 1, i64 %55
  store double %64, double* %65, align 8, !tbaa !27
  %66 = add nuw nsw i64 %44, 2
  %67 = icmp eq i64 %66, 576
  br i1 %67, label %68, label %43, !llvm.loop !315

68:                                               ; preds = %43, %10
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @on_pe(%struct.lame_global_flags* nocapture readonly %0, [2 x double]* nocapture readonly %1, %struct.III_side_info_t* nocapture readonly %2, i32* nocapture %3, i32 %4, i32 %5) local_unnamed_addr #0 {
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #21
  %10 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #21
  call void @ResvMaxBits(i32 %4, i32* nonnull %8, i32* nonnull %7, i32 %5) #21
  %11 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 46
  %12 = load i32, i32* %11, align 4, !tbaa !126
  %13 = icmp sgt i32 %12, 0
  br i1 %13, label %14, label %50

14:                                               ; preds = %6
  %15 = sext i32 %5 to i64
  %16 = load i32, i32* %8, align 4, !tbaa !18
  %17 = load i32, i32* %7, align 4, !tbaa !18
  br label %18

18:                                               ; preds = %18, %14
  %19 = phi i64 [ 0, %14 ], [ %45, %18 ]
  %20 = phi i32 [ %17, %14 ], [ %44, %18 ]
  %21 = phi i32 [ %12, %14 ], [ %46, %18 ]
  %22 = sdiv i32 %16, %21
  %23 = getelementptr inbounds i32, i32* %3, i64 %19
  store i32 %22, i32* %23, align 4, !tbaa !18
  %24 = getelementptr inbounds [2 x double], [2 x double]* %1, i64 %15, i64 %19
  %25 = load double, double* %24, align 8, !tbaa !27
  %26 = fadd double %25, -7.500000e+02
  %27 = fdiv double %26, 1.550000e+00
  %28 = fptosi double %27 to i32
  %29 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %2, i64 0, i32 4, i64 %15, i32 0, i64 %19, i32 0, i32 6
  %30 = load i32, i32* %29, align 8, !tbaa !138
  %31 = icmp eq i32 %30, 2
  %32 = icmp slt i32 %28, 500
  %33 = and i1 %31, %32
  %34 = select i1 %33, i32 500, i32 %28
  %35 = icmp sgt i32 %34, 0
  %36 = select i1 %35, i32 %34, i32 0
  %37 = icmp sgt i32 %36, %20
  %38 = select i1 %37, i32 %20, i32 %36
  %39 = add nsw i32 %38, %22
  %40 = icmp sgt i32 %39, 4095
  %41 = sub nsw i32 4095, %22
  %42 = select i1 %40, i32 %41, i32 %38
  %43 = add nsw i32 %42, %22
  store i32 %43, i32* %23, align 4, !tbaa !18
  %44 = sub nsw i32 %20, %42
  %45 = add nuw nsw i64 %19, 1
  %46 = load i32, i32* %11, align 4, !tbaa !126
  %47 = sext i32 %46 to i64
  %48 = icmp slt i64 %45, %47
  br i1 %48, label %18, label %49

49:                                               ; preds = %18
  store i32 %44, i32* %7, align 4, !tbaa !18
  br label %50

50:                                               ; preds = %49, %6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #21
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #21
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @reduce_side(i32* nocapture %0, double %1, i32 %2) local_unnamed_addr #5 {
  %4 = fsub double 5.000000e-01, %1
  %5 = fmul double %4, 3.300000e-01
  %6 = fmul double %5, 2.000000e+00
  %7 = fptrunc double %6 to float
  %8 = getelementptr inbounds i32, i32* %0, i64 1
  %9 = load i32, i32* %8, align 4, !tbaa !18
  %10 = icmp sgt i32 %9, 124
  br i1 %10, label %13, label %11

11:                                               ; preds = %3
  %12 = load i32, i32* %0, align 4, !tbaa !18
  br label %30

13:                                               ; preds = %3
  %14 = fcmp olt float %7, 0.000000e+00
  %15 = select i1 %14, float 0.000000e+00, float %7
  %16 = sitofp i32 %9 to float
  %17 = fmul float %15, %16
  %18 = fsub float %16, %17
  %19 = fcmp ogt float %18, 1.250000e+02
  br i1 %19, label %20, label %26

20:                                               ; preds = %13
  %21 = load i32, i32* %0, align 4, !tbaa !18
  %22 = sitofp i32 %21 to float
  %23 = fadd float %17, %22
  %24 = fptosi float %23 to i32
  store i32 %24, i32* %0, align 4, !tbaa !18
  %25 = fptosi float %18 to i32
  store i32 %25, i32* %8, align 4, !tbaa !18
  br label %30

26:                                               ; preds = %13
  %27 = add nsw i32 %9, -125
  %28 = load i32, i32* %0, align 4, !tbaa !18
  %29 = add nsw i32 %27, %28
  store i32 %29, i32* %0, align 4, !tbaa !18
  store i32 125, i32* %8, align 4, !tbaa !18
  br label %30

30:                                               ; preds = %26, %20, %11
  %31 = phi i32 [ %9, %11 ], [ %25, %20 ], [ 125, %26 ]
  %32 = phi i32 [ %12, %11 ], [ %24, %20 ], [ %29, %26 ]
  %33 = icmp sgt i32 %2, 5791
  %34 = sdiv i32 %2, 2
  %35 = add nsw i32 %34, 1200
  %36 = select i1 %33, i32 4095, i32 %35
  %37 = icmp sgt i32 %32, %36
  br i1 %37, label %38, label %39

38:                                               ; preds = %30
  store i32 %36, i32* %0, align 4, !tbaa !18
  br label %39

39:                                               ; preds = %38, %30
  %40 = icmp sgt i32 %31, %36
  br i1 %40, label %41, label %42

41:                                               ; preds = %39
  store i32 %36, i32* %8, align 4, !tbaa !18
  br label %42

42:                                               ; preds = %41, %39
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local i32 @inner_loop(%struct.lame_global_flags* %0, double* %1, i32* %2, i32 %3, %struct.gr_info* %4) local_unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %4, i64 0, i32 3
  %7 = tail call i32 @count_bits(%struct.lame_global_flags* %0, i32* %2, double* %1, %struct.gr_info* nonnull %4) #21
  %8 = icmp sgt i32 %7, %3
  br i1 %8, label %9, label %14

9:                                                ; preds = %9, %5
  %10 = load i32, i32* %6, align 4, !tbaa !135
  %11 = add i32 %10, 1
  store i32 %11, i32* %6, align 4, !tbaa !135
  %12 = tail call i32 @count_bits(%struct.lame_global_flags* %0, i32* %2, double* %1, %struct.gr_info* nonnull %4) #21
  %13 = icmp sgt i32 %12, %3
  br i1 %13, label %9, label %14

14:                                               ; preds = %9, %5
  %15 = phi i32 [ %7, %5 ], [ %12, %9 ]
  ret i32 %15
}

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local i32 @scale_bitcount(%struct.III_scalefac_t* nocapture %0, %struct.gr_info* nocapture %1) local_unnamed_addr #5 {
  %3 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %1, i64 0, i32 6
  %4 = load i32, i32* %3, align 8, !tbaa !138
  %5 = icmp eq i32 %4, 2
  br i1 %5, label %39, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 0
  %8 = load i32, i32* %7, align 4, !tbaa !18
  %9 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 1
  %10 = load i32, i32* %9, align 4, !tbaa !18
  %11 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 2
  %12 = bitcast i32* %11 to <8 x i32>*
  %13 = load <8 x i32>, <8 x i32>* %12, align 4, !tbaa !18
  %14 = shufflevector <8 x i32> %13, <8 x i32> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef>
  %15 = icmp sgt <8 x i32> %13, %14
  %16 = select <8 x i1> %15, <8 x i32> %13, <8 x i32> %14
  %17 = shufflevector <8 x i32> %16, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %18 = icmp sgt <8 x i32> %16, %17
  %19 = select <8 x i1> %18, <8 x i32> %16, <8 x i32> %17
  %20 = shufflevector <8 x i32> %19, <8 x i32> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %21 = icmp sgt <8 x i32> %19, %20
  %22 = select <8 x i1> %21, <8 x i32> %19, <8 x i32> %20
  %23 = extractelement <8 x i32> %22, i32 0
  %24 = icmp sgt i32 %23, %10
  %25 = select i1 %24, i32 %23, i32 %10
  %26 = icmp sgt i32 %25, %8
  %27 = select i1 %26, i32 %25, i32 %8
  %28 = icmp sgt i32 %27, 0
  %29 = select i1 %28, i32 %27, i32 0
  %30 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 10
  %31 = load i32, i32* %30, align 4, !tbaa !18
  %32 = icmp sgt i32 %31, %29
  %33 = select i1 %32, i32 %31, i32 %29
  %34 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %1, i64 0, i32 12
  %35 = load i32, i32* %34, align 8, !tbaa !142
  %36 = icmp eq i32 %35, 0
  %37 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 11
  %38 = load i32, i32* %37, align 4, !tbaa !18
  br i1 %36, label %92, label %130

39:                                               ; preds = %2
  %40 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 1, i64 0, i64 0
  %41 = load i32, i32* %40, align 4, !tbaa !18
  %42 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 1, i64 0, i64 1
  %43 = bitcast i32* %42 to <16 x i32>*
  %44 = load <16 x i32>, <16 x i32>* %43, align 4, !tbaa !18
  %45 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 1, i64 6, i64 0
  %46 = load i32, i32* %45, align 4, !tbaa !18
  %47 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 1, i64 6, i64 1
  %48 = bitcast i32* %47 to <16 x i32>*
  %49 = load <16 x i32>, <16 x i32>* %48, align 4, !tbaa !18
  %50 = shufflevector <16 x i32> %44, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %51 = icmp sgt <16 x i32> %44, %50
  %52 = select <16 x i1> %51, <16 x i32> %44, <16 x i32> %50
  %53 = shufflevector <16 x i32> %52, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %54 = icmp sgt <16 x i32> %52, %53
  %55 = select <16 x i1> %54, <16 x i32> %52, <16 x i32> %53
  %56 = shufflevector <16 x i32> %55, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %57 = icmp sgt <16 x i32> %55, %56
  %58 = select <16 x i1> %57, <16 x i32> %55, <16 x i32> %56
  %59 = shufflevector <16 x i32> %58, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %60 = icmp sgt <16 x i32> %58, %59
  %61 = select <16 x i1> %60, <16 x i32> %58, <16 x i32> %59
  %62 = extractelement <16 x i32> %61, i32 0
  %63 = icmp sgt i32 %62, %41
  %64 = select i1 %63, i32 %62, i32 %41
  %65 = icmp sgt i32 %64, 0
  %66 = select i1 %65, i32 %64, i32 0
  %67 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 1, i64 5, i64 2
  %68 = load i32, i32* %67, align 4, !tbaa !18
  %69 = icmp sgt i32 %68, %66
  %70 = shufflevector <16 x i32> %49, <16 x i32> undef, <16 x i32> <i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %71 = icmp sgt <16 x i32> %49, %70
  %72 = select <16 x i1> %71, <16 x i32> %49, <16 x i32> %70
  %73 = shufflevector <16 x i32> %72, <16 x i32> undef, <16 x i32> <i32 4, i32 5, i32 6, i32 7, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %74 = icmp sgt <16 x i32> %72, %73
  %75 = select <16 x i1> %74, <16 x i32> %72, <16 x i32> %73
  %76 = shufflevector <16 x i32> %75, <16 x i32> undef, <16 x i32> <i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %77 = icmp sgt <16 x i32> %75, %76
  %78 = select <16 x i1> %77, <16 x i32> %75, <16 x i32> %76
  %79 = shufflevector <16 x i32> %78, <16 x i32> undef, <16 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %80 = icmp sgt <16 x i32> %78, %79
  %81 = select <16 x i1> %80, <16 x i32> %78, <16 x i32> %79
  %82 = extractelement <16 x i32> %81, i32 0
  %83 = icmp sgt i32 %82, %46
  %84 = select i1 %83, i32 %82, i32 %46
  %85 = icmp sgt i32 %84, 0
  %86 = select i1 %85, i32 %84, i32 0
  %87 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 1, i64 11, i64 2
  %88 = load i32, i32* %87, align 4, !tbaa !18
  %89 = icmp sgt i32 %88, %86
  %90 = select i1 %89, i32 %88, i32 %86
  %91 = select i1 %69, i32 %68, i32 %66
  br label %170

92:                                               ; preds = %6
  %93 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 11), align 4, !tbaa !18
  %94 = icmp slt i32 %38, %93
  br i1 %94, label %130, label %95

95:                                               ; preds = %92
  %96 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 12
  %97 = load i32, i32* %96, align 4, !tbaa !18
  %98 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 12), align 16, !tbaa !18
  %99 = icmp slt i32 %97, %98
  br i1 %99, label %130, label %201

100:                                              ; preds = %236
  store i32 1, i32* %34, align 8, !tbaa !142
  %101 = load i32, i32* %37, align 4, !tbaa !18
  %102 = sub nsw i32 %101, %93
  store i32 %102, i32* %37, align 4, !tbaa !18
  %103 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 12), align 16, !tbaa !18
  %104 = load i32, i32* %96, align 4, !tbaa !18
  %105 = sub nsw i32 %104, %103
  store i32 %105, i32* %96, align 4, !tbaa !18
  %106 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 13), align 4, !tbaa !18
  %107 = load i32, i32* %202, align 4, !tbaa !18
  %108 = sub nsw i32 %107, %106
  store i32 %108, i32* %202, align 4, !tbaa !18
  %109 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 14), align 8, !tbaa !18
  %110 = load i32, i32* %207, align 4, !tbaa !18
  %111 = sub nsw i32 %110, %109
  store i32 %111, i32* %207, align 4, !tbaa !18
  %112 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 15), align 4, !tbaa !18
  %113 = load i32, i32* %212, align 4, !tbaa !18
  %114 = sub nsw i32 %113, %112
  store i32 %114, i32* %212, align 4, !tbaa !18
  %115 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 16), align 16, !tbaa !18
  %116 = load i32, i32* %217, align 4, !tbaa !18
  %117 = sub nsw i32 %116, %115
  store i32 %117, i32* %217, align 4, !tbaa !18
  %118 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 17), align 4, !tbaa !18
  %119 = load i32, i32* %222, align 4, !tbaa !18
  %120 = sub nsw i32 %119, %118
  store i32 %120, i32* %222, align 4, !tbaa !18
  %121 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 18), align 8, !tbaa !18
  %122 = load i32, i32* %227, align 4, !tbaa !18
  %123 = sub nsw i32 %122, %121
  store i32 %123, i32* %227, align 4, !tbaa !18
  %124 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 19), align 4, !tbaa !18
  %125 = load i32, i32* %232, align 4, !tbaa !18
  %126 = sub nsw i32 %125, %124
  store i32 %126, i32* %232, align 4, !tbaa !18
  %127 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 20), align 16, !tbaa !18
  %128 = load i32, i32* %237, align 4, !tbaa !18
  %129 = sub nsw i32 %128, %127
  store i32 %129, i32* %237, align 4, !tbaa !18
  br label %130

130:                                              ; preds = %236, %231, %226, %221, %216, %211, %206, %201, %100, %95, %92, %6
  %131 = phi i32 [ %102, %100 ], [ %38, %236 ], [ %38, %231 ], [ %38, %226 ], [ %38, %221 ], [ %38, %216 ], [ %38, %211 ], [ %38, %206 ], [ %38, %201 ], [ %38, %95 ], [ %38, %92 ], [ %38, %6 ]
  %132 = icmp sgt i32 %131, 0
  %133 = select i1 %132, i32 %131, i32 0
  %134 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 12
  %135 = load i32, i32* %134, align 4, !tbaa !18
  %136 = icmp sgt i32 %135, %133
  %137 = select i1 %136, i32 %135, i32 %133
  %138 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 13
  %139 = load i32, i32* %138, align 4, !tbaa !18
  %140 = icmp sgt i32 %139, %137
  %141 = select i1 %140, i32 %139, i32 %137
  %142 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 14
  %143 = load i32, i32* %142, align 4, !tbaa !18
  %144 = icmp sgt i32 %143, %141
  %145 = select i1 %144, i32 %143, i32 %141
  %146 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 15
  %147 = load i32, i32* %146, align 4, !tbaa !18
  %148 = icmp sgt i32 %147, %145
  %149 = select i1 %148, i32 %147, i32 %145
  %150 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 16
  %151 = load i32, i32* %150, align 4, !tbaa !18
  %152 = icmp sgt i32 %151, %149
  %153 = select i1 %152, i32 %151, i32 %149
  %154 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 17
  %155 = load i32, i32* %154, align 4, !tbaa !18
  %156 = icmp sgt i32 %155, %153
  %157 = select i1 %156, i32 %155, i32 %153
  %158 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 18
  %159 = load i32, i32* %158, align 4, !tbaa !18
  %160 = icmp sgt i32 %159, %157
  %161 = select i1 %160, i32 %159, i32 %157
  %162 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 19
  %163 = load i32, i32* %162, align 4, !tbaa !18
  %164 = icmp sgt i32 %163, %161
  %165 = select i1 %164, i32 %163, i32 %161
  %166 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 20
  %167 = load i32, i32* %166, align 4, !tbaa !18
  %168 = icmp sgt i32 %167, %165
  %169 = select i1 %168, i32 %167, i32 %165
  br label %170

170:                                              ; preds = %130, %39
  %171 = phi i32 [ %91, %39 ], [ %33, %130 ]
  %172 = phi i32 [ %90, %39 ], [ %169, %130 ]
  %173 = phi i32* [ getelementptr inbounds ([16 x i32], [16 x i32]* @scale_bitcount.slen1_tab, i64 0, i64 0), %39 ], [ getelementptr inbounds ([16 x i32], [16 x i32]* @scale_bitcount.slen2_tab, i64 0, i64 0), %130 ]
  %174 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %1, i64 0, i32 15
  store i32 100000, i32* %174, align 4, !tbaa !154
  %175 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %1, i64 0, i32 4
  br label %176

176:                                              ; preds = %251, %170
  %177 = phi i32 [ 100000, %170 ], [ %252, %251 ]
  %178 = phi i64 [ 0, %170 ], [ %254, %251 ]
  %179 = phi i32 [ 2, %170 ], [ %253, %251 ]
  %180 = getelementptr inbounds [16 x i32], [16 x i32]* @scale_bitcount.slen1, i64 0, i64 %178
  %181 = load i32, i32* %180, align 8, !tbaa !18
  %182 = icmp slt i32 %171, %181
  br i1 %182, label %183, label %193

183:                                              ; preds = %176
  %184 = getelementptr inbounds [16 x i32], [16 x i32]* @scale_bitcount.slen2, i64 0, i64 %178
  %185 = load i32, i32* %184, align 8, !tbaa !18
  %186 = icmp slt i32 %172, %185
  br i1 %186, label %187, label %193

187:                                              ; preds = %183
  %188 = getelementptr inbounds i32, i32* %173, i64 %178
  %189 = load i32, i32* %188, align 4, !tbaa !18
  %190 = icmp sgt i32 %177, %189
  br i1 %190, label %191, label %193

191:                                              ; preds = %187
  store i32 %189, i32* %174, align 4, !tbaa !154
  %192 = trunc i64 %178 to i32
  store i32 %192, i32* %175, align 8, !tbaa !136
  br label %193

193:                                              ; preds = %191, %187, %183, %176
  %194 = phi i32 [ %189, %191 ], [ %177, %187 ], [ %177, %183 ], [ %177, %176 ]
  %195 = phi i32 [ 0, %191 ], [ %179, %187 ], [ %179, %183 ], [ %179, %176 ]
  %196 = or i64 %178, 1
  %197 = getelementptr inbounds [16 x i32], [16 x i32]* @scale_bitcount.slen1, i64 0, i64 %196
  %198 = load i32, i32* %197, align 4, !tbaa !18
  %199 = icmp slt i32 %171, %198
  br i1 %199, label %241, label %251

200:                                              ; preds = %251
  ret i32 %253

201:                                              ; preds = %95
  %202 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 13
  %203 = load i32, i32* %202, align 4, !tbaa !18
  %204 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 13), align 4, !tbaa !18
  %205 = icmp slt i32 %203, %204
  br i1 %205, label %130, label %206

206:                                              ; preds = %201
  %207 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 14
  %208 = load i32, i32* %207, align 4, !tbaa !18
  %209 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 14), align 8, !tbaa !18
  %210 = icmp slt i32 %208, %209
  br i1 %210, label %130, label %211

211:                                              ; preds = %206
  %212 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 15
  %213 = load i32, i32* %212, align 4, !tbaa !18
  %214 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 15), align 4, !tbaa !18
  %215 = icmp slt i32 %213, %214
  br i1 %215, label %130, label %216

216:                                              ; preds = %211
  %217 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 16
  %218 = load i32, i32* %217, align 4, !tbaa !18
  %219 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 16), align 16, !tbaa !18
  %220 = icmp slt i32 %218, %219
  br i1 %220, label %130, label %221

221:                                              ; preds = %216
  %222 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 17
  %223 = load i32, i32* %222, align 4, !tbaa !18
  %224 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 17), align 4, !tbaa !18
  %225 = icmp slt i32 %223, %224
  br i1 %225, label %130, label %226

226:                                              ; preds = %221
  %227 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 18
  %228 = load i32, i32* %227, align 4, !tbaa !18
  %229 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 18), align 8, !tbaa !18
  %230 = icmp slt i32 %228, %229
  br i1 %230, label %130, label %231

231:                                              ; preds = %226
  %232 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 19
  %233 = load i32, i32* %232, align 4, !tbaa !18
  %234 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 19), align 4, !tbaa !18
  %235 = icmp slt i32 %233, %234
  br i1 %235, label %130, label %236

236:                                              ; preds = %231
  %237 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 20
  %238 = load i32, i32* %237, align 4, !tbaa !18
  %239 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 20), align 16, !tbaa !18
  %240 = icmp slt i32 %238, %239
  br i1 %240, label %130, label %100

241:                                              ; preds = %193
  %242 = getelementptr inbounds [16 x i32], [16 x i32]* @scale_bitcount.slen2, i64 0, i64 %196
  %243 = load i32, i32* %242, align 4, !tbaa !18
  %244 = icmp slt i32 %172, %243
  br i1 %244, label %245, label %251

245:                                              ; preds = %241
  %246 = getelementptr inbounds i32, i32* %173, i64 %196
  %247 = load i32, i32* %246, align 4, !tbaa !18
  %248 = icmp sgt i32 %194, %247
  br i1 %248, label %249, label %251

249:                                              ; preds = %245
  store i32 %247, i32* %174, align 4, !tbaa !154
  %250 = trunc i64 %196 to i32
  store i32 %250, i32* %175, align 8, !tbaa !136
  br label %251

251:                                              ; preds = %249, %245, %241, %193
  %252 = phi i32 [ %247, %249 ], [ %194, %245 ], [ %194, %241 ], [ %194, %193 ]
  %253 = phi i32 [ 0, %249 ], [ %195, %245 ], [ %195, %241 ], [ %195, %193 ]
  %254 = add nuw nsw i64 %178, 2
  %255 = icmp eq i64 %254, 16
  br i1 %255, label %200, label %176
}

; Function Attrs: nounwind uwtable
define dso_local i32 @scale_bitcount_lsf(%struct.III_scalefac_t* nocapture readonly %0, %struct.gr_info* nocapture %1) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %1, i64 0, i32 12
  %4 = load i32, i32* %3, align 8, !tbaa !142
  %5 = icmp eq i32 %4, 0
  %6 = select i1 %5, i64 0, i64 2
  %7 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %1, i64 0, i32 6
  %8 = load i32, i32* %7, align 8, !tbaa !138
  %9 = icmp eq i32 %8, 2
  br i1 %9, label %93, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds [6 x [3 x [4 x i32]]], [6 x [3 x [4 x i32]]]* @nr_of_sfb_block, i64 0, i64 %6, i64 0, i64 0
  %12 = load i32, i32* %11, align 16, !tbaa !18
  %13 = icmp sgt i32 %12, 0
  br i1 %13, label %14, label %134

14:                                               ; preds = %10
  %15 = add i32 %12, -1
  %16 = zext i32 %15 to i64
  %17 = add nuw nsw i64 %16, 1
  %18 = icmp ult i32 %15, 7
  br i1 %18, label %19, label %23

19:                                               ; preds = %80, %14
  %20 = phi i64 [ 0, %14 ], [ %24, %80 ]
  %21 = phi i32 [ 0, %14 ], [ %91, %80 ]
  %22 = phi i32 [ 0, %14 ], [ %25, %80 ]
  br label %123

23:                                               ; preds = %14
  %24 = and i64 %17, 8589934584
  %25 = trunc i64 %24 to i32
  %26 = add nsw i64 %24, -8
  %27 = lshr exact i64 %26, 3
  %28 = add nuw nsw i64 %27, 1
  %29 = and i64 %28, 1
  %30 = icmp eq i64 %26, 0
  br i1 %30, label %62, label %31

31:                                               ; preds = %23
  %32 = sub nuw nsw i64 %28, %29
  br label %33

33:                                               ; preds = %33, %31
  %34 = phi i64 [ 0, %31 ], [ %59, %33 ]
  %35 = phi <4 x i32> [ zeroinitializer, %31 ], [ %57, %33 ]
  %36 = phi <4 x i32> [ zeroinitializer, %31 ], [ %58, %33 ]
  %37 = phi i64 [ %32, %31 ], [ %60, %33 ]
  %38 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 %34
  %39 = bitcast i32* %38 to <4 x i32>*
  %40 = load <4 x i32>, <4 x i32>* %39, align 4, !tbaa !18
  %41 = getelementptr inbounds i32, i32* %38, i64 4
  %42 = bitcast i32* %41 to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 4, !tbaa !18
  %44 = icmp sgt <4 x i32> %40, %35
  %45 = icmp sgt <4 x i32> %43, %36
  %46 = select <4 x i1> %44, <4 x i32> %40, <4 x i32> %35
  %47 = select <4 x i1> %45, <4 x i32> %43, <4 x i32> %36
  %48 = or i64 %34, 8
  %49 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 %48
  %50 = bitcast i32* %49 to <4 x i32>*
  %51 = load <4 x i32>, <4 x i32>* %50, align 4, !tbaa !18
  %52 = getelementptr inbounds i32, i32* %49, i64 4
  %53 = bitcast i32* %52 to <4 x i32>*
  %54 = load <4 x i32>, <4 x i32>* %53, align 4, !tbaa !18
  %55 = icmp sgt <4 x i32> %51, %46
  %56 = icmp sgt <4 x i32> %54, %47
  %57 = select <4 x i1> %55, <4 x i32> %51, <4 x i32> %46
  %58 = select <4 x i1> %56, <4 x i32> %54, <4 x i32> %47
  %59 = add i64 %34, 16
  %60 = add i64 %37, -2
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %62, label %33, !llvm.loop !316

62:                                               ; preds = %33, %23
  %63 = phi <4 x i32> [ undef, %23 ], [ %57, %33 ]
  %64 = phi <4 x i32> [ undef, %23 ], [ %58, %33 ]
  %65 = phi i64 [ 0, %23 ], [ %59, %33 ]
  %66 = phi <4 x i32> [ zeroinitializer, %23 ], [ %57, %33 ]
  %67 = phi <4 x i32> [ zeroinitializer, %23 ], [ %58, %33 ]
  %68 = icmp eq i64 %29, 0
  br i1 %68, label %80, label %69

69:                                               ; preds = %62
  %70 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 %65
  %71 = bitcast i32* %70 to <4 x i32>*
  %72 = load <4 x i32>, <4 x i32>* %71, align 4, !tbaa !18
  %73 = getelementptr inbounds i32, i32* %70, i64 4
  %74 = bitcast i32* %73 to <4 x i32>*
  %75 = load <4 x i32>, <4 x i32>* %74, align 4, !tbaa !18
  %76 = icmp sgt <4 x i32> %75, %67
  %77 = select <4 x i1> %76, <4 x i32> %75, <4 x i32> %67
  %78 = icmp sgt <4 x i32> %72, %66
  %79 = select <4 x i1> %78, <4 x i32> %72, <4 x i32> %66
  br label %80

80:                                               ; preds = %69, %62
  %81 = phi <4 x i32> [ %63, %62 ], [ %79, %69 ]
  %82 = phi <4 x i32> [ %64, %62 ], [ %77, %69 ]
  %83 = icmp sgt <4 x i32> %81, %82
  %84 = select <4 x i1> %83, <4 x i32> %81, <4 x i32> %82
  %85 = shufflevector <4 x i32> %84, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %86 = icmp sgt <4 x i32> %84, %85
  %87 = select <4 x i1> %86, <4 x i32> %84, <4 x i32> %85
  %88 = shufflevector <4 x i32> %87, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %89 = icmp sgt <4 x i32> %87, %88
  %90 = select <4 x i1> %89, <4 x i32> %87, <4 x i32> %88
  %91 = extractelement <4 x i32> %90, i32 0
  %92 = icmp eq i64 %17, %24
  br i1 %92, label %134, label %19

93:                                               ; preds = %2
  %94 = getelementptr inbounds [6 x [3 x [4 x i32]]], [6 x [3 x [4 x i32]]]* @nr_of_sfb_block, i64 0, i64 %6, i64 1, i64 0
  %95 = load i32, i32* %94, align 16, !tbaa !18
  %96 = udiv i32 %95, 3
  %97 = icmp sgt i32 %96, 0
  br i1 %97, label %98, label %117

98:                                               ; preds = %98, %93
  %99 = phi i64 [ %115, %98 ], [ 0, %93 ]
  %100 = phi i32 [ %113, %98 ], [ 0, %93 ]
  %101 = phi i32 [ %114, %98 ], [ 0, %93 ]
  %102 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 1, i64 %99, i64 0
  %103 = load i32, i32* %102, align 4, !tbaa !18
  %104 = icmp sgt i32 %103, %100
  %105 = select i1 %104, i32 %103, i32 %100
  %106 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 1, i64 %99, i64 1
  %107 = load i32, i32* %106, align 4, !tbaa !18
  %108 = icmp sgt i32 %107, %105
  %109 = select i1 %108, i32 %107, i32 %105
  %110 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 1, i64 %99, i64 2
  %111 = load i32, i32* %110, align 4, !tbaa !18
  %112 = icmp sgt i32 %111, %109
  %113 = select i1 %112, i32 %111, i32 %109
  %114 = add nuw nsw i32 %101, 1
  %115 = add nuw nsw i64 %99, 1
  %116 = icmp ult i32 %114, %96
  br i1 %116, label %98, label %117

117:                                              ; preds = %98, %93
  %118 = phi i32 [ 0, %93 ], [ %113, %98 ]
  %119 = getelementptr inbounds [6 x [3 x [4 x i32]]], [6 x [3 x [4 x i32]]]* @nr_of_sfb_block, i64 0, i64 %6, i64 1, i64 1
  %120 = load i32, i32* %119, align 4, !tbaa !18
  %121 = udiv i32 %120, 3
  %122 = icmp sgt i32 %121, 0
  br i1 %122, label %215, label %238

123:                                              ; preds = %123, %19
  %124 = phi i64 [ %132, %123 ], [ %20, %19 ]
  %125 = phi i32 [ %130, %123 ], [ %21, %19 ]
  %126 = phi i32 [ %131, %123 ], [ %22, %19 ]
  %127 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 %124
  %128 = load i32, i32* %127, align 4, !tbaa !18
  %129 = icmp sgt i32 %128, %125
  %130 = select i1 %129, i32 %128, i32 %125
  %131 = add nuw nsw i32 %126, 1
  %132 = add nuw nsw i64 %124, 1
  %133 = icmp eq i32 %131, %12
  br i1 %133, label %134, label %123, !llvm.loop !317

134:                                              ; preds = %123, %80, %10
  %135 = phi i32 [ 0, %10 ], [ %91, %80 ], [ %130, %123 ]
  %136 = phi i32 [ 0, %10 ], [ %12, %80 ], [ %12, %123 ]
  %137 = getelementptr inbounds [6 x [3 x [4 x i32]]], [6 x [3 x [4 x i32]]]* @nr_of_sfb_block, i64 0, i64 %6, i64 0, i64 1
  %138 = load i32, i32* %137, align 4, !tbaa !18
  %139 = icmp sgt i32 %138, 0
  br i1 %139, label %296, label %394

140:                                              ; preds = %588, %571, %498, %277, %268
  %141 = phi i32 [ 0, %268 ], [ 0, %498 ], [ %582, %571 ], [ %292, %277 ], [ %595, %588 ]
  %142 = phi i32 [ %269, %268 ], [ %499, %498 ], [ %499, %571 ], [ %269, %277 ], [ %499, %588 ]
  %143 = phi i32 [ %239, %268 ], [ %395, %498 ], [ %395, %571 ], [ %239, %277 ], [ %395, %588 ]
  %144 = phi i32 [ %118, %268 ], [ %135, %498 ], [ %135, %571 ], [ %118, %277 ], [ %135, %588 ]
  %145 = phi i64 [ 1, %268 ], [ 0, %498 ], [ 0, %571 ], [ 1, %277 ], [ 0, %588 ]
  %146 = getelementptr inbounds [6 x [4 x i32]], [6 x [4 x i32]]* @max_range_sfac_tab, i64 0, i64 %6, i64 0
  %147 = load i32, i32* %146, align 16, !tbaa !18
  %148 = icmp sgt i32 %144, %147
  %149 = zext i1 %148 to i32
  %150 = getelementptr inbounds [6 x [4 x i32]], [6 x [4 x i32]]* @max_range_sfac_tab, i64 0, i64 %6, i64 1
  %151 = load i32, i32* %150, align 4, !tbaa !18
  %152 = icmp sgt i32 %143, %151
  %153 = zext i1 %152 to i32
  %154 = add nuw nsw i32 %149, %153
  %155 = getelementptr inbounds [6 x [4 x i32]], [6 x [4 x i32]]* @max_range_sfac_tab, i64 0, i64 %6, i64 2
  %156 = load i32, i32* %155, align 8, !tbaa !18
  %157 = icmp sgt i32 %142, %156
  %158 = zext i1 %157 to i32
  %159 = add nuw nsw i32 %154, %158
  %160 = getelementptr inbounds [6 x [4 x i32]], [6 x [4 x i32]]* @max_range_sfac_tab, i64 0, i64 %6, i64 3
  %161 = load i32, i32* %160, align 4, !tbaa !18
  %162 = icmp sgt i32 %141, %161
  %163 = zext i1 %162 to i32
  %164 = add nuw nsw i32 %159, %163
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %214

166:                                              ; preds = %140
  %167 = getelementptr inbounds [6 x [3 x [4 x i32]]], [6 x [3 x [4 x i32]]]* @nr_of_sfb_block, i64 0, i64 %6, i64 %145, i64 0
  %168 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %1, i64 0, i32 19
  store i32* %167, i32** %168, align 8, !tbaa !147
  %169 = sext i32 %144 to i64
  %170 = getelementptr inbounds [16 x i32], [16 x i32]* @scale_bitcount_lsf.log2tab, i64 0, i64 %169
  %171 = load i32, i32* %170, align 4, !tbaa !18
  %172 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %1, i64 0, i32 20, i64 0
  store i32 %171, i32* %172, align 4, !tbaa !18
  %173 = sext i32 %143 to i64
  %174 = getelementptr inbounds [16 x i32], [16 x i32]* @scale_bitcount_lsf.log2tab, i64 0, i64 %173
  %175 = load i32, i32* %174, align 4, !tbaa !18
  %176 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %1, i64 0, i32 20, i64 1
  store i32 %175, i32* %176, align 4, !tbaa !18
  %177 = sext i32 %142 to i64
  %178 = getelementptr inbounds [16 x i32], [16 x i32]* @scale_bitcount_lsf.log2tab, i64 0, i64 %177
  %179 = load i32, i32* %178, align 4, !tbaa !18
  %180 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %1, i64 0, i32 20, i64 2
  store i32 %179, i32* %180, align 4, !tbaa !18
  %181 = sext i32 %141 to i64
  %182 = getelementptr inbounds [16 x i32], [16 x i32]* @scale_bitcount_lsf.log2tab, i64 0, i64 %181
  %183 = load i32, i32* %182, align 4, !tbaa !18
  %184 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %1, i64 0, i32 20, i64 3
  store i32 %183, i32* %184, align 4, !tbaa !18
  br i1 %5, label %185, label %191

185:                                              ; preds = %166
  %186 = mul i32 %171, 5
  %187 = add i32 %186, %175
  %188 = shl i32 %187, 4
  %189 = shl i32 %179, 2
  %190 = add i32 %189, %188
  br label %194

191:                                              ; preds = %166
  %192 = mul i32 %171, 3
  %193 = add i32 %192, 500
  br label %194

194:                                              ; preds = %191, %185
  %195 = phi i32 [ %175, %191 ], [ %183, %185 ]
  %196 = phi i32 [ %193, %191 ], [ %190, %185 ]
  %197 = add i32 %196, %195
  %198 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %1, i64 0, i32 4
  store i32 %197, i32* %198, align 8
  %199 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %1, i64 0, i32 15
  store i32 0, i32* %199, align 4, !tbaa !154
  %200 = load i32, i32* %167, align 16, !tbaa !18
  %201 = mul i32 %200, %171
  store i32 %201, i32* %199, align 4, !tbaa !154
  %202 = getelementptr inbounds [6 x [3 x [4 x i32]]], [6 x [3 x [4 x i32]]]* @nr_of_sfb_block, i64 0, i64 %6, i64 %145, i64 1
  %203 = load i32, i32* %202, align 4, !tbaa !18
  %204 = mul i32 %203, %175
  %205 = add i32 %201, %204
  store i32 %205, i32* %199, align 4, !tbaa !154
  %206 = getelementptr inbounds [6 x [3 x [4 x i32]]], [6 x [3 x [4 x i32]]]* @nr_of_sfb_block, i64 0, i64 %6, i64 %145, i64 2
  %207 = load i32, i32* %206, align 8, !tbaa !18
  %208 = mul i32 %207, %179
  %209 = add i32 %205, %208
  store i32 %209, i32* %199, align 4, !tbaa !154
  %210 = getelementptr inbounds [6 x [3 x [4 x i32]]], [6 x [3 x [4 x i32]]]* @nr_of_sfb_block, i64 0, i64 %6, i64 %145, i64 3
  %211 = load i32, i32* %210, align 4, !tbaa !18
  %212 = mul i32 %211, %183
  %213 = add i32 %209, %212
  store i32 %213, i32* %199, align 4, !tbaa !154
  br label %214

214:                                              ; preds = %194, %140
  ret i32 %164

215:                                              ; preds = %117
  %216 = zext i32 %96 to i64
  br label %217

217:                                              ; preds = %217, %215
  %218 = phi i64 [ %216, %215 ], [ %234, %217 ]
  %219 = phi i32 [ 0, %215 ], [ %232, %217 ]
  %220 = phi i32 [ 0, %215 ], [ %233, %217 ]
  %221 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 1, i64 %218, i64 0
  %222 = load i32, i32* %221, align 4, !tbaa !18
  %223 = icmp sgt i32 %222, %219
  %224 = select i1 %223, i32 %222, i32 %219
  %225 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 1, i64 %218, i64 1
  %226 = load i32, i32* %225, align 4, !tbaa !18
  %227 = icmp sgt i32 %226, %224
  %228 = select i1 %227, i32 %226, i32 %224
  %229 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 1, i64 %218, i64 2
  %230 = load i32, i32* %229, align 4, !tbaa !18
  %231 = icmp sgt i32 %230, %228
  %232 = select i1 %231, i32 %230, i32 %228
  %233 = add nuw nsw i32 %220, 1
  %234 = add nuw nsw i64 %218, 1
  %235 = icmp ult i32 %233, %121
  br i1 %235, label %217, label %236

236:                                              ; preds = %217
  %237 = add nuw i32 %96, %121
  br label %238

238:                                              ; preds = %236, %117
  %239 = phi i32 [ %232, %236 ], [ 0, %117 ]
  %240 = phi i32 [ %237, %236 ], [ %96, %117 ]
  %241 = getelementptr inbounds [6 x [3 x [4 x i32]]], [6 x [3 x [4 x i32]]]* @nr_of_sfb_block, i64 0, i64 %6, i64 1, i64 2
  %242 = load i32, i32* %241, align 8, !tbaa !18
  %243 = udiv i32 %242, 3
  %244 = icmp sgt i32 %243, 0
  br i1 %244, label %245, label %268

245:                                              ; preds = %238
  %246 = sext i32 %240 to i64
  br label %247

247:                                              ; preds = %247, %245
  %248 = phi i64 [ %246, %245 ], [ %264, %247 ]
  %249 = phi i32 [ 0, %245 ], [ %262, %247 ]
  %250 = phi i32 [ 0, %245 ], [ %263, %247 ]
  %251 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 1, i64 %248, i64 0
  %252 = load i32, i32* %251, align 4, !tbaa !18
  %253 = icmp sgt i32 %252, %249
  %254 = select i1 %253, i32 %252, i32 %249
  %255 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 1, i64 %248, i64 1
  %256 = load i32, i32* %255, align 4, !tbaa !18
  %257 = icmp sgt i32 %256, %254
  %258 = select i1 %257, i32 %256, i32 %254
  %259 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 1, i64 %248, i64 2
  %260 = load i32, i32* %259, align 4, !tbaa !18
  %261 = icmp sgt i32 %260, %258
  %262 = select i1 %261, i32 %260, i32 %258
  %263 = add nuw nsw i32 %250, 1
  %264 = add nsw i64 %248, 1
  %265 = icmp ult i32 %263, %243
  br i1 %265, label %247, label %266

266:                                              ; preds = %247
  %267 = add i32 %240, %243
  br label %268

268:                                              ; preds = %266, %238
  %269 = phi i32 [ %262, %266 ], [ 0, %238 ]
  %270 = phi i32 [ %267, %266 ], [ %240, %238 ]
  %271 = getelementptr inbounds [6 x [3 x [4 x i32]]], [6 x [3 x [4 x i32]]]* @nr_of_sfb_block, i64 0, i64 %6, i64 1, i64 3
  %272 = load i32, i32* %271, align 4, !tbaa !18
  %273 = udiv i32 %272, 3
  %274 = icmp sgt i32 %273, 0
  br i1 %274, label %275, label %140

275:                                              ; preds = %268
  %276 = sext i32 %270 to i64
  br label %277

277:                                              ; preds = %277, %275
  %278 = phi i64 [ %276, %275 ], [ %294, %277 ]
  %279 = phi i32 [ 0, %275 ], [ %292, %277 ]
  %280 = phi i32 [ 0, %275 ], [ %293, %277 ]
  %281 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 1, i64 %278, i64 0
  %282 = load i32, i32* %281, align 4, !tbaa !18
  %283 = icmp sgt i32 %282, %279
  %284 = select i1 %283, i32 %282, i32 %279
  %285 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 1, i64 %278, i64 1
  %286 = load i32, i32* %285, align 4, !tbaa !18
  %287 = icmp sgt i32 %286, %284
  %288 = select i1 %287, i32 %286, i32 %284
  %289 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 1, i64 %278, i64 2
  %290 = load i32, i32* %289, align 4, !tbaa !18
  %291 = icmp sgt i32 %290, %288
  %292 = select i1 %291, i32 %290, i32 %288
  %293 = add nuw nsw i32 %280, 1
  %294 = add nsw i64 %278, 1
  %295 = icmp ult i32 %293, %273
  br i1 %295, label %277, label %140

296:                                              ; preds = %134
  %297 = sext i32 %136 to i64
  %298 = add i32 %138, -1
  %299 = zext i32 %298 to i64
  %300 = add nuw nsw i64 %299, 1
  %301 = icmp ult i32 %298, 7
  br i1 %301, label %376, label %302

302:                                              ; preds = %296
  %303 = and i64 %300, 8589934584
  %304 = add nsw i64 %303, %297
  %305 = trunc i64 %303 to i32
  %306 = add nsw i64 %303, -8
  %307 = lshr exact i64 %306, 3
  %308 = add nuw nsw i64 %307, 1
  %309 = and i64 %308, 1
  %310 = icmp eq i64 %306, 0
  br i1 %310, label %344, label %311

311:                                              ; preds = %302
  %312 = sub nuw nsw i64 %308, %309
  br label %313

313:                                              ; preds = %313, %311
  %314 = phi i64 [ 0, %311 ], [ %341, %313 ]
  %315 = phi <4 x i32> [ zeroinitializer, %311 ], [ %339, %313 ]
  %316 = phi <4 x i32> [ zeroinitializer, %311 ], [ %340, %313 ]
  %317 = phi i64 [ %312, %311 ], [ %342, %313 ]
  %318 = add i64 %314, %297
  %319 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 %318
  %320 = bitcast i32* %319 to <4 x i32>*
  %321 = load <4 x i32>, <4 x i32>* %320, align 4, !tbaa !18
  %322 = getelementptr inbounds i32, i32* %319, i64 4
  %323 = bitcast i32* %322 to <4 x i32>*
  %324 = load <4 x i32>, <4 x i32>* %323, align 4, !tbaa !18
  %325 = icmp sgt <4 x i32> %321, %315
  %326 = icmp sgt <4 x i32> %324, %316
  %327 = select <4 x i1> %325, <4 x i32> %321, <4 x i32> %315
  %328 = select <4 x i1> %326, <4 x i32> %324, <4 x i32> %316
  %329 = or i64 %314, 8
  %330 = add i64 %329, %297
  %331 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 %330
  %332 = bitcast i32* %331 to <4 x i32>*
  %333 = load <4 x i32>, <4 x i32>* %332, align 4, !tbaa !18
  %334 = getelementptr inbounds i32, i32* %331, i64 4
  %335 = bitcast i32* %334 to <4 x i32>*
  %336 = load <4 x i32>, <4 x i32>* %335, align 4, !tbaa !18
  %337 = icmp sgt <4 x i32> %333, %327
  %338 = icmp sgt <4 x i32> %336, %328
  %339 = select <4 x i1> %337, <4 x i32> %333, <4 x i32> %327
  %340 = select <4 x i1> %338, <4 x i32> %336, <4 x i32> %328
  %341 = add i64 %314, 16
  %342 = add i64 %317, -2
  %343 = icmp eq i64 %342, 0
  br i1 %343, label %344, label %313, !llvm.loop !318

344:                                              ; preds = %313, %302
  %345 = phi <4 x i32> [ undef, %302 ], [ %339, %313 ]
  %346 = phi <4 x i32> [ undef, %302 ], [ %340, %313 ]
  %347 = phi i64 [ 0, %302 ], [ %341, %313 ]
  %348 = phi <4 x i32> [ zeroinitializer, %302 ], [ %339, %313 ]
  %349 = phi <4 x i32> [ zeroinitializer, %302 ], [ %340, %313 ]
  %350 = icmp eq i64 %309, 0
  br i1 %350, label %363, label %351

351:                                              ; preds = %344
  %352 = add i64 %347, %297
  %353 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 %352
  %354 = bitcast i32* %353 to <4 x i32>*
  %355 = load <4 x i32>, <4 x i32>* %354, align 4, !tbaa !18
  %356 = getelementptr inbounds i32, i32* %353, i64 4
  %357 = bitcast i32* %356 to <4 x i32>*
  %358 = load <4 x i32>, <4 x i32>* %357, align 4, !tbaa !18
  %359 = icmp sgt <4 x i32> %358, %349
  %360 = select <4 x i1> %359, <4 x i32> %358, <4 x i32> %349
  %361 = icmp sgt <4 x i32> %355, %348
  %362 = select <4 x i1> %361, <4 x i32> %355, <4 x i32> %348
  br label %363

363:                                              ; preds = %351, %344
  %364 = phi <4 x i32> [ %345, %344 ], [ %362, %351 ]
  %365 = phi <4 x i32> [ %346, %344 ], [ %360, %351 ]
  %366 = icmp sgt <4 x i32> %364, %365
  %367 = select <4 x i1> %366, <4 x i32> %364, <4 x i32> %365
  %368 = shufflevector <4 x i32> %367, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %369 = icmp sgt <4 x i32> %367, %368
  %370 = select <4 x i1> %369, <4 x i32> %367, <4 x i32> %368
  %371 = shufflevector <4 x i32> %370, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %372 = icmp sgt <4 x i32> %370, %371
  %373 = select <4 x i1> %372, <4 x i32> %370, <4 x i32> %371
  %374 = extractelement <4 x i32> %373, i32 0
  %375 = icmp eq i64 %300, %303
  br i1 %375, label %391, label %376

376:                                              ; preds = %363, %296
  %377 = phi i64 [ %297, %296 ], [ %304, %363 ]
  %378 = phi i32 [ 0, %296 ], [ %374, %363 ]
  %379 = phi i32 [ 0, %296 ], [ %305, %363 ]
  br label %380

380:                                              ; preds = %380, %376
  %381 = phi i64 [ %389, %380 ], [ %377, %376 ]
  %382 = phi i32 [ %387, %380 ], [ %378, %376 ]
  %383 = phi i32 [ %388, %380 ], [ %379, %376 ]
  %384 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 %381
  %385 = load i32, i32* %384, align 4, !tbaa !18
  %386 = icmp sgt i32 %385, %382
  %387 = select i1 %386, i32 %385, i32 %382
  %388 = add nuw nsw i32 %383, 1
  %389 = add nsw i64 %381, 1
  %390 = icmp eq i32 %388, %138
  br i1 %390, label %391, label %380, !llvm.loop !319

391:                                              ; preds = %380, %363
  %392 = phi i32 [ %374, %363 ], [ %387, %380 ]
  %393 = add i32 %136, %138
  br label %394

394:                                              ; preds = %391, %134
  %395 = phi i32 [ %392, %391 ], [ 0, %134 ]
  %396 = phi i32 [ %393, %391 ], [ %136, %134 ]
  %397 = getelementptr inbounds [6 x [3 x [4 x i32]]], [6 x [3 x [4 x i32]]]* @nr_of_sfb_block, i64 0, i64 %6, i64 0, i64 2
  %398 = load i32, i32* %397, align 8, !tbaa !18
  %399 = icmp sgt i32 %398, 0
  br i1 %399, label %400, label %498

400:                                              ; preds = %394
  %401 = sext i32 %396 to i64
  %402 = add i32 %398, -1
  %403 = zext i32 %402 to i64
  %404 = add nuw nsw i64 %403, 1
  %405 = icmp ult i32 %402, 7
  br i1 %405, label %480, label %406

406:                                              ; preds = %400
  %407 = and i64 %404, 8589934584
  %408 = add nsw i64 %407, %401
  %409 = trunc i64 %407 to i32
  %410 = add nsw i64 %407, -8
  %411 = lshr exact i64 %410, 3
  %412 = add nuw nsw i64 %411, 1
  %413 = and i64 %412, 1
  %414 = icmp eq i64 %410, 0
  br i1 %414, label %448, label %415

415:                                              ; preds = %406
  %416 = sub nuw nsw i64 %412, %413
  br label %417

417:                                              ; preds = %417, %415
  %418 = phi i64 [ 0, %415 ], [ %445, %417 ]
  %419 = phi <4 x i32> [ zeroinitializer, %415 ], [ %443, %417 ]
  %420 = phi <4 x i32> [ zeroinitializer, %415 ], [ %444, %417 ]
  %421 = phi i64 [ %416, %415 ], [ %446, %417 ]
  %422 = add i64 %418, %401
  %423 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 %422
  %424 = bitcast i32* %423 to <4 x i32>*
  %425 = load <4 x i32>, <4 x i32>* %424, align 4, !tbaa !18
  %426 = getelementptr inbounds i32, i32* %423, i64 4
  %427 = bitcast i32* %426 to <4 x i32>*
  %428 = load <4 x i32>, <4 x i32>* %427, align 4, !tbaa !18
  %429 = icmp sgt <4 x i32> %425, %419
  %430 = icmp sgt <4 x i32> %428, %420
  %431 = select <4 x i1> %429, <4 x i32> %425, <4 x i32> %419
  %432 = select <4 x i1> %430, <4 x i32> %428, <4 x i32> %420
  %433 = or i64 %418, 8
  %434 = add i64 %433, %401
  %435 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 %434
  %436 = bitcast i32* %435 to <4 x i32>*
  %437 = load <4 x i32>, <4 x i32>* %436, align 4, !tbaa !18
  %438 = getelementptr inbounds i32, i32* %435, i64 4
  %439 = bitcast i32* %438 to <4 x i32>*
  %440 = load <4 x i32>, <4 x i32>* %439, align 4, !tbaa !18
  %441 = icmp sgt <4 x i32> %437, %431
  %442 = icmp sgt <4 x i32> %440, %432
  %443 = select <4 x i1> %441, <4 x i32> %437, <4 x i32> %431
  %444 = select <4 x i1> %442, <4 x i32> %440, <4 x i32> %432
  %445 = add i64 %418, 16
  %446 = add i64 %421, -2
  %447 = icmp eq i64 %446, 0
  br i1 %447, label %448, label %417, !llvm.loop !320

448:                                              ; preds = %417, %406
  %449 = phi <4 x i32> [ undef, %406 ], [ %443, %417 ]
  %450 = phi <4 x i32> [ undef, %406 ], [ %444, %417 ]
  %451 = phi i64 [ 0, %406 ], [ %445, %417 ]
  %452 = phi <4 x i32> [ zeroinitializer, %406 ], [ %443, %417 ]
  %453 = phi <4 x i32> [ zeroinitializer, %406 ], [ %444, %417 ]
  %454 = icmp eq i64 %413, 0
  br i1 %454, label %467, label %455

455:                                              ; preds = %448
  %456 = add i64 %451, %401
  %457 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 %456
  %458 = bitcast i32* %457 to <4 x i32>*
  %459 = load <4 x i32>, <4 x i32>* %458, align 4, !tbaa !18
  %460 = getelementptr inbounds i32, i32* %457, i64 4
  %461 = bitcast i32* %460 to <4 x i32>*
  %462 = load <4 x i32>, <4 x i32>* %461, align 4, !tbaa !18
  %463 = icmp sgt <4 x i32> %462, %453
  %464 = select <4 x i1> %463, <4 x i32> %462, <4 x i32> %453
  %465 = icmp sgt <4 x i32> %459, %452
  %466 = select <4 x i1> %465, <4 x i32> %459, <4 x i32> %452
  br label %467

467:                                              ; preds = %455, %448
  %468 = phi <4 x i32> [ %449, %448 ], [ %466, %455 ]
  %469 = phi <4 x i32> [ %450, %448 ], [ %464, %455 ]
  %470 = icmp sgt <4 x i32> %468, %469
  %471 = select <4 x i1> %470, <4 x i32> %468, <4 x i32> %469
  %472 = shufflevector <4 x i32> %471, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %473 = icmp sgt <4 x i32> %471, %472
  %474 = select <4 x i1> %473, <4 x i32> %471, <4 x i32> %472
  %475 = shufflevector <4 x i32> %474, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %476 = icmp sgt <4 x i32> %474, %475
  %477 = select <4 x i1> %476, <4 x i32> %474, <4 x i32> %475
  %478 = extractelement <4 x i32> %477, i32 0
  %479 = icmp eq i64 %404, %407
  br i1 %479, label %495, label %480

480:                                              ; preds = %467, %400
  %481 = phi i64 [ %401, %400 ], [ %408, %467 ]
  %482 = phi i32 [ 0, %400 ], [ %478, %467 ]
  %483 = phi i32 [ 0, %400 ], [ %409, %467 ]
  br label %484

484:                                              ; preds = %484, %480
  %485 = phi i64 [ %493, %484 ], [ %481, %480 ]
  %486 = phi i32 [ %491, %484 ], [ %482, %480 ]
  %487 = phi i32 [ %492, %484 ], [ %483, %480 ]
  %488 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 %485
  %489 = load i32, i32* %488, align 4, !tbaa !18
  %490 = icmp sgt i32 %489, %486
  %491 = select i1 %490, i32 %489, i32 %486
  %492 = add nuw nsw i32 %487, 1
  %493 = add nsw i64 %485, 1
  %494 = icmp eq i32 %492, %398
  br i1 %494, label %495, label %484, !llvm.loop !321

495:                                              ; preds = %484, %467
  %496 = phi i32 [ %478, %467 ], [ %491, %484 ]
  %497 = add i32 %396, %398
  br label %498

498:                                              ; preds = %495, %394
  %499 = phi i32 [ %496, %495 ], [ 0, %394 ]
  %500 = phi i32 [ %497, %495 ], [ %396, %394 ]
  %501 = getelementptr inbounds [6 x [3 x [4 x i32]]], [6 x [3 x [4 x i32]]]* @nr_of_sfb_block, i64 0, i64 %6, i64 0, i64 3
  %502 = load i32, i32* %501, align 4, !tbaa !18
  %503 = icmp sgt i32 %502, 0
  br i1 %503, label %504, label %140

504:                                              ; preds = %498
  %505 = sext i32 %500 to i64
  %506 = add i32 %502, -1
  %507 = zext i32 %506 to i64
  %508 = add nuw nsw i64 %507, 1
  %509 = icmp ult i32 %506, 7
  br i1 %509, label %584, label %510

510:                                              ; preds = %504
  %511 = and i64 %508, 8589934584
  %512 = add nsw i64 %511, %505
  %513 = trunc i64 %511 to i32
  %514 = add nsw i64 %511, -8
  %515 = lshr exact i64 %514, 3
  %516 = add nuw nsw i64 %515, 1
  %517 = and i64 %516, 1
  %518 = icmp eq i64 %514, 0
  br i1 %518, label %552, label %519

519:                                              ; preds = %510
  %520 = sub nuw nsw i64 %516, %517
  br label %521

521:                                              ; preds = %521, %519
  %522 = phi i64 [ 0, %519 ], [ %549, %521 ]
  %523 = phi <4 x i32> [ zeroinitializer, %519 ], [ %547, %521 ]
  %524 = phi <4 x i32> [ zeroinitializer, %519 ], [ %548, %521 ]
  %525 = phi i64 [ %520, %519 ], [ %550, %521 ]
  %526 = add i64 %522, %505
  %527 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 %526
  %528 = bitcast i32* %527 to <4 x i32>*
  %529 = load <4 x i32>, <4 x i32>* %528, align 4, !tbaa !18
  %530 = getelementptr inbounds i32, i32* %527, i64 4
  %531 = bitcast i32* %530 to <4 x i32>*
  %532 = load <4 x i32>, <4 x i32>* %531, align 4, !tbaa !18
  %533 = icmp sgt <4 x i32> %529, %523
  %534 = icmp sgt <4 x i32> %532, %524
  %535 = select <4 x i1> %533, <4 x i32> %529, <4 x i32> %523
  %536 = select <4 x i1> %534, <4 x i32> %532, <4 x i32> %524
  %537 = or i64 %522, 8
  %538 = add i64 %537, %505
  %539 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 %538
  %540 = bitcast i32* %539 to <4 x i32>*
  %541 = load <4 x i32>, <4 x i32>* %540, align 4, !tbaa !18
  %542 = getelementptr inbounds i32, i32* %539, i64 4
  %543 = bitcast i32* %542 to <4 x i32>*
  %544 = load <4 x i32>, <4 x i32>* %543, align 4, !tbaa !18
  %545 = icmp sgt <4 x i32> %541, %535
  %546 = icmp sgt <4 x i32> %544, %536
  %547 = select <4 x i1> %545, <4 x i32> %541, <4 x i32> %535
  %548 = select <4 x i1> %546, <4 x i32> %544, <4 x i32> %536
  %549 = add i64 %522, 16
  %550 = add i64 %525, -2
  %551 = icmp eq i64 %550, 0
  br i1 %551, label %552, label %521, !llvm.loop !322

552:                                              ; preds = %521, %510
  %553 = phi <4 x i32> [ undef, %510 ], [ %547, %521 ]
  %554 = phi <4 x i32> [ undef, %510 ], [ %548, %521 ]
  %555 = phi i64 [ 0, %510 ], [ %549, %521 ]
  %556 = phi <4 x i32> [ zeroinitializer, %510 ], [ %547, %521 ]
  %557 = phi <4 x i32> [ zeroinitializer, %510 ], [ %548, %521 ]
  %558 = icmp eq i64 %517, 0
  br i1 %558, label %571, label %559

559:                                              ; preds = %552
  %560 = add i64 %555, %505
  %561 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 %560
  %562 = bitcast i32* %561 to <4 x i32>*
  %563 = load <4 x i32>, <4 x i32>* %562, align 4, !tbaa !18
  %564 = getelementptr inbounds i32, i32* %561, i64 4
  %565 = bitcast i32* %564 to <4 x i32>*
  %566 = load <4 x i32>, <4 x i32>* %565, align 4, !tbaa !18
  %567 = icmp sgt <4 x i32> %566, %557
  %568 = select <4 x i1> %567, <4 x i32> %566, <4 x i32> %557
  %569 = icmp sgt <4 x i32> %563, %556
  %570 = select <4 x i1> %569, <4 x i32> %563, <4 x i32> %556
  br label %571

571:                                              ; preds = %559, %552
  %572 = phi <4 x i32> [ %553, %552 ], [ %570, %559 ]
  %573 = phi <4 x i32> [ %554, %552 ], [ %568, %559 ]
  %574 = icmp sgt <4 x i32> %572, %573
  %575 = select <4 x i1> %574, <4 x i32> %572, <4 x i32> %573
  %576 = shufflevector <4 x i32> %575, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %577 = icmp sgt <4 x i32> %575, %576
  %578 = select <4 x i1> %577, <4 x i32> %575, <4 x i32> %576
  %579 = shufflevector <4 x i32> %578, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %580 = icmp sgt <4 x i32> %578, %579
  %581 = select <4 x i1> %580, <4 x i32> %578, <4 x i32> %579
  %582 = extractelement <4 x i32> %581, i32 0
  %583 = icmp eq i64 %508, %511
  br i1 %583, label %140, label %584

584:                                              ; preds = %571, %504
  %585 = phi i64 [ %505, %504 ], [ %512, %571 ]
  %586 = phi i32 [ 0, %504 ], [ %582, %571 ]
  %587 = phi i32 [ 0, %504 ], [ %513, %571 ]
  br label %588

588:                                              ; preds = %588, %584
  %589 = phi i64 [ %597, %588 ], [ %585, %584 ]
  %590 = phi i32 [ %595, %588 ], [ %586, %584 ]
  %591 = phi i32 [ %596, %588 ], [ %587, %584 ]
  %592 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 %589
  %593 = load i32, i32* %592, align 4, !tbaa !18
  %594 = icmp sgt i32 %593, %590
  %595 = select i1 %594, i32 %593, i32 %590
  %596 = add nuw nsw i32 %591, 1
  %597 = add nsw i64 %589, 1
  %598 = icmp eq i32 %596, %502
  br i1 %598, label %140, label %588, !llvm.loop !323
}

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local i32 @calc_xmin(%struct.lame_global_flags* nocapture readonly %0, double* nocapture readonly %1, %struct.III_psy_ratio* nocapture readonly %2, %struct.gr_info* nocapture readonly %3, %struct.III_psy_xmin* nocapture %4) local_unnamed_addr #5 {
  %6 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 33
  %7 = load i32, i32* %6, align 8, !tbaa !232
  %8 = icmp eq i32 %7, 0
  %9 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %3, i64 0, i32 17
  %10 = load i32, i32* %9, align 4, !tbaa !303
  %11 = icmp ult i32 %10, 12
  br i1 %8, label %33, label %12

12:                                               ; preds = %5
  br i1 %11, label %13, label %67

13:                                               ; preds = %12
  %14 = zext i32 %10 to i64
  %15 = and i64 %14, 1
  %16 = icmp eq i64 %15, 0
  br i1 %16, label %30, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds [21 x double], [21 x double]* @ATH_s, i64 0, i64 %14
  %19 = bitcast double* %18 to i64*
  %20 = load i64, i64* %19, align 8, !tbaa !27
  %21 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %4, i64 0, i32 1, i64 %14, i64 0
  %22 = bitcast double* %21 to i64*
  store i64 %20, i64* %22, align 8, !tbaa !27
  %23 = load i64, i64* %19, align 8, !tbaa !27
  %24 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %4, i64 0, i32 1, i64 %14, i64 1
  %25 = bitcast double* %24 to i64*
  store i64 %23, i64* %25, align 8, !tbaa !27
  %26 = load i64, i64* %19, align 8, !tbaa !27
  %27 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %4, i64 0, i32 1, i64 %14, i64 2
  %28 = bitcast double* %27 to i64*
  store i64 %26, i64* %28, align 8, !tbaa !27
  %29 = add nuw nsw i64 %14, 1
  br label %30

30:                                               ; preds = %17, %13
  %31 = phi i64 [ %14, %13 ], [ %29, %17 ]
  %32 = icmp eq i32 %10, 11
  br i1 %32, label %67, label %40

33:                                               ; preds = %5
  br i1 %11, label %34, label %171

34:                                               ; preds = %33
  %35 = load float, float* @masking_lower, align 4
  %36 = fpext float %35 to double
  %37 = zext i32 %10 to i64
  %38 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 1, i64 %37
  %39 = load i32, i32* %38, align 4, !tbaa !18
  br label %180

40:                                               ; preds = %40, %30
  %41 = phi i64 [ %65, %40 ], [ %31, %30 ]
  %42 = getelementptr inbounds [21 x double], [21 x double]* @ATH_s, i64 0, i64 %41
  %43 = bitcast double* %42 to i64*
  %44 = load i64, i64* %43, align 8, !tbaa !27
  %45 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %4, i64 0, i32 1, i64 %41, i64 0
  %46 = bitcast double* %45 to i64*
  store i64 %44, i64* %46, align 8, !tbaa !27
  %47 = load i64, i64* %43, align 8, !tbaa !27
  %48 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %4, i64 0, i32 1, i64 %41, i64 1
  %49 = bitcast double* %48 to i64*
  store i64 %47, i64* %49, align 8, !tbaa !27
  %50 = load i64, i64* %43, align 8, !tbaa !27
  %51 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %4, i64 0, i32 1, i64 %41, i64 2
  %52 = bitcast double* %51 to i64*
  store i64 %50, i64* %52, align 8, !tbaa !27
  %53 = add nuw nsw i64 %41, 1
  %54 = getelementptr inbounds [21 x double], [21 x double]* @ATH_s, i64 0, i64 %53
  %55 = bitcast double* %54 to i64*
  %56 = load i64, i64* %55, align 8, !tbaa !27
  %57 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %4, i64 0, i32 1, i64 %53, i64 0
  %58 = bitcast double* %57 to i64*
  store i64 %56, i64* %58, align 8, !tbaa !27
  %59 = load i64, i64* %55, align 8, !tbaa !27
  %60 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %4, i64 0, i32 1, i64 %53, i64 1
  %61 = bitcast double* %60 to i64*
  store i64 %59, i64* %61, align 8, !tbaa !27
  %62 = load i64, i64* %55, align 8, !tbaa !27
  %63 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %4, i64 0, i32 1, i64 %53, i64 2
  %64 = bitcast double* %63 to i64*
  store i64 %62, i64* %64, align 8, !tbaa !27
  %65 = add nuw nsw i64 %41, 2
  %66 = icmp eq i64 %65, 12
  br i1 %66, label %67, label %40

67:                                               ; preds = %40, %30, %12
  %68 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %3, i64 0, i32 16
  %69 = load i32, i32* %68, align 8, !tbaa !302
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %349, label %71

71:                                               ; preds = %67
  %72 = zext i32 %69 to i64
  %73 = icmp ult i32 %69, 4
  br i1 %73, label %160, label %74

74:                                               ; preds = %71
  %75 = getelementptr %struct.III_psy_xmin, %struct.III_psy_xmin* %4, i64 0, i32 0, i64 %72
  %76 = getelementptr [21 x double], [21 x double]* @ATH_l, i64 0, i64 %72
  %77 = bitcast double* %76 to %struct.III_psy_xmin*
  %78 = icmp ugt %struct.III_psy_xmin* %77, %4
  %79 = icmp ugt double* %75, getelementptr inbounds ([21 x double], [21 x double]* @ATH_l, i64 0, i64 0)
  %80 = and i1 %78, %79
  br i1 %80, label %160, label %81

81:                                               ; preds = %74
  %82 = and i64 %72, 4294967292
  %83 = add nsw i64 %82, -4
  %84 = lshr exact i64 %83, 2
  %85 = add nuw nsw i64 %84, 1
  %86 = and i64 %85, 3
  %87 = icmp ult i64 %83, 12
  br i1 %87, label %139, label %88

88:                                               ; preds = %81
  %89 = sub nsw i64 %85, %86
  br label %90

90:                                               ; preds = %90, %88
  %91 = phi i64 [ 0, %88 ], [ %136, %90 ]
  %92 = phi i64 [ %89, %88 ], [ %137, %90 ]
  %93 = getelementptr inbounds [21 x double], [21 x double]* @ATH_l, i64 0, i64 %91
  %94 = bitcast double* %93 to <2 x i64>*
  %95 = load <2 x i64>, <2 x i64>* %94, align 16, !tbaa !27, !alias.scope !324
  %96 = getelementptr inbounds double, double* %93, i64 2
  %97 = bitcast double* %96 to <2 x i64>*
  %98 = load <2 x i64>, <2 x i64>* %97, align 16, !tbaa !27, !alias.scope !324
  %99 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %4, i64 0, i32 0, i64 %91
  %100 = bitcast double* %99 to <2 x i64>*
  store <2 x i64> %95, <2 x i64>* %100, align 8, !tbaa !27, !alias.scope !327, !noalias !324
  %101 = getelementptr inbounds double, double* %99, i64 2
  %102 = bitcast double* %101 to <2 x i64>*
  store <2 x i64> %98, <2 x i64>* %102, align 8, !tbaa !27, !alias.scope !327, !noalias !324
  %103 = or i64 %91, 4
  %104 = getelementptr inbounds [21 x double], [21 x double]* @ATH_l, i64 0, i64 %103
  %105 = bitcast double* %104 to <2 x i64>*
  %106 = load <2 x i64>, <2 x i64>* %105, align 16, !tbaa !27, !alias.scope !324
  %107 = getelementptr inbounds double, double* %104, i64 2
  %108 = bitcast double* %107 to <2 x i64>*
  %109 = load <2 x i64>, <2 x i64>* %108, align 16, !tbaa !27, !alias.scope !324
  %110 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %4, i64 0, i32 0, i64 %103
  %111 = bitcast double* %110 to <2 x i64>*
  store <2 x i64> %106, <2 x i64>* %111, align 8, !tbaa !27, !alias.scope !327, !noalias !324
  %112 = getelementptr inbounds double, double* %110, i64 2
  %113 = bitcast double* %112 to <2 x i64>*
  store <2 x i64> %109, <2 x i64>* %113, align 8, !tbaa !27, !alias.scope !327, !noalias !324
  %114 = or i64 %91, 8
  %115 = getelementptr inbounds [21 x double], [21 x double]* @ATH_l, i64 0, i64 %114
  %116 = bitcast double* %115 to <2 x i64>*
  %117 = load <2 x i64>, <2 x i64>* %116, align 16, !tbaa !27, !alias.scope !324
  %118 = getelementptr inbounds double, double* %115, i64 2
  %119 = bitcast double* %118 to <2 x i64>*
  %120 = load <2 x i64>, <2 x i64>* %119, align 16, !tbaa !27, !alias.scope !324
  %121 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %4, i64 0, i32 0, i64 %114
  %122 = bitcast double* %121 to <2 x i64>*
  store <2 x i64> %117, <2 x i64>* %122, align 8, !tbaa !27, !alias.scope !327, !noalias !324
  %123 = getelementptr inbounds double, double* %121, i64 2
  %124 = bitcast double* %123 to <2 x i64>*
  store <2 x i64> %120, <2 x i64>* %124, align 8, !tbaa !27, !alias.scope !327, !noalias !324
  %125 = or i64 %91, 12
  %126 = getelementptr inbounds [21 x double], [21 x double]* @ATH_l, i64 0, i64 %125
  %127 = bitcast double* %126 to <2 x i64>*
  %128 = load <2 x i64>, <2 x i64>* %127, align 16, !tbaa !27, !alias.scope !324
  %129 = getelementptr inbounds double, double* %126, i64 2
  %130 = bitcast double* %129 to <2 x i64>*
  %131 = load <2 x i64>, <2 x i64>* %130, align 16, !tbaa !27, !alias.scope !324
  %132 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %4, i64 0, i32 0, i64 %125
  %133 = bitcast double* %132 to <2 x i64>*
  store <2 x i64> %128, <2 x i64>* %133, align 8, !tbaa !27, !alias.scope !327, !noalias !324
  %134 = getelementptr inbounds double, double* %132, i64 2
  %135 = bitcast double* %134 to <2 x i64>*
  store <2 x i64> %131, <2 x i64>* %135, align 8, !tbaa !27, !alias.scope !327, !noalias !324
  %136 = add i64 %91, 16
  %137 = add i64 %92, -4
  %138 = icmp eq i64 %137, 0
  br i1 %138, label %139, label %90, !llvm.loop !329

139:                                              ; preds = %90, %81
  %140 = phi i64 [ 0, %81 ], [ %136, %90 ]
  %141 = icmp eq i64 %86, 0
  br i1 %141, label %158, label %142

142:                                              ; preds = %142, %139
  %143 = phi i64 [ %155, %142 ], [ %140, %139 ]
  %144 = phi i64 [ %156, %142 ], [ %86, %139 ]
  %145 = getelementptr inbounds [21 x double], [21 x double]* @ATH_l, i64 0, i64 %143
  %146 = bitcast double* %145 to <2 x i64>*
  %147 = load <2 x i64>, <2 x i64>* %146, align 16, !tbaa !27, !alias.scope !324
  %148 = getelementptr inbounds double, double* %145, i64 2
  %149 = bitcast double* %148 to <2 x i64>*
  %150 = load <2 x i64>, <2 x i64>* %149, align 16, !tbaa !27, !alias.scope !324
  %151 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %4, i64 0, i32 0, i64 %143
  %152 = bitcast double* %151 to <2 x i64>*
  store <2 x i64> %147, <2 x i64>* %152, align 8, !tbaa !27, !alias.scope !327, !noalias !324
  %153 = getelementptr inbounds double, double* %151, i64 2
  %154 = bitcast double* %153 to <2 x i64>*
  store <2 x i64> %150, <2 x i64>* %154, align 8, !tbaa !27, !alias.scope !327, !noalias !324
  %155 = add i64 %143, 4
  %156 = add i64 %144, -1
  %157 = icmp eq i64 %156, 0
  br i1 %157, label %158, label %142, !llvm.loop !330

158:                                              ; preds = %142, %139
  %159 = icmp eq i64 %82, %72
  br i1 %159, label %349, label %160

160:                                              ; preds = %158, %74, %71
  %161 = phi i64 [ 0, %74 ], [ 0, %71 ], [ %82, %158 ]
  br label %162

162:                                              ; preds = %162, %160
  %163 = phi i64 [ %169, %162 ], [ %161, %160 ]
  %164 = getelementptr inbounds [21 x double], [21 x double]* @ATH_l, i64 0, i64 %163
  %165 = bitcast double* %164 to i64*
  %166 = load i64, i64* %165, align 8, !tbaa !27
  %167 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %4, i64 0, i32 0, i64 %163
  %168 = bitcast double* %167 to i64*
  store i64 %166, i64* %168, align 8, !tbaa !27
  %169 = add nuw nsw i64 %163, 1
  %170 = icmp ult i64 %169, %72
  br i1 %170, label %162, label %349, !llvm.loop !331

171:                                              ; preds = %492, %33
  %172 = phi i32 [ 0, %33 ], [ %500, %492 ]
  %173 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %3, i64 0, i32 16
  %174 = load i32, i32* %173, align 8, !tbaa !302
  %175 = icmp eq i32 %174, 0
  br i1 %175, label %349, label %176

176:                                              ; preds = %171
  %177 = load float, float* @masking_lower, align 4
  %178 = fpext float %177 to double
  %179 = zext i32 %174 to i64
  br label %266

180:                                              ; preds = %492, %34
  %181 = phi i32 [ %39, %34 ], [ %186, %492 ]
  %182 = phi i64 [ %37, %34 ], [ %184, %492 ]
  %183 = phi i32 [ 0, %34 ], [ %500, %492 ]
  %184 = add nuw nsw i64 %182, 1
  %185 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 1, i64 %184
  %186 = load i32, i32* %185, align 4, !tbaa !18
  %187 = sub nsw i32 %186, %181
  %188 = icmp sgt i32 %186, %181
  %189 = sitofp i32 %187 to double
  %190 = getelementptr inbounds [21 x double], [21 x double]* @ATH_s, i64 0, i64 %182
  %191 = sext i32 %181 to i64
  br i1 %188, label %192, label %244

192:                                              ; preds = %180
  %193 = sext i32 %186 to i64
  %194 = sub nsw i64 %193, %191
  %195 = xor i64 %191, -1
  %196 = add nsw i64 %195, %193
  %197 = and i64 %194, 3
  %198 = icmp eq i64 %197, 0
  br i1 %198, label %211, label %199

199:                                              ; preds = %199, %192
  %200 = phi i64 [ %208, %199 ], [ %191, %192 ]
  %201 = phi double [ %207, %199 ], [ 0.000000e+00, %192 ]
  %202 = phi i64 [ %209, %199 ], [ %197, %192 ]
  %203 = mul nsw i64 %200, 3
  %204 = getelementptr inbounds double, double* %1, i64 %203
  %205 = load double, double* %204, align 8, !tbaa !27
  %206 = fmul double %205, %205
  %207 = fadd double %201, %206
  %208 = add nsw i64 %200, 1
  %209 = add i64 %202, -1
  %210 = icmp eq i64 %209, 0
  br i1 %210, label %211, label %199, !llvm.loop !332

211:                                              ; preds = %199, %192
  %212 = phi double [ undef, %192 ], [ %207, %199 ]
  %213 = phi i64 [ %191, %192 ], [ %208, %199 ]
  %214 = phi double [ 0.000000e+00, %192 ], [ %207, %199 ]
  %215 = icmp ult i64 %196, 3
  br i1 %215, label %244, label %216

216:                                              ; preds = %216, %211
  %217 = phi i64 [ %242, %216 ], [ %213, %211 ]
  %218 = phi double [ %241, %216 ], [ %214, %211 ]
  %219 = mul nsw i64 %217, 3
  %220 = getelementptr inbounds double, double* %1, i64 %219
  %221 = load double, double* %220, align 8, !tbaa !27
  %222 = fmul double %221, %221
  %223 = fadd double %218, %222
  %224 = mul i64 %217, 3
  %225 = add i64 %224, 3
  %226 = getelementptr inbounds double, double* %1, i64 %225
  %227 = load double, double* %226, align 8, !tbaa !27
  %228 = fmul double %227, %227
  %229 = fadd double %223, %228
  %230 = mul i64 %217, 3
  %231 = add i64 %230, 6
  %232 = getelementptr inbounds double, double* %1, i64 %231
  %233 = load double, double* %232, align 8, !tbaa !27
  %234 = fmul double %233, %233
  %235 = fadd double %229, %234
  %236 = mul i64 %217, 3
  %237 = add i64 %236, 9
  %238 = getelementptr inbounds double, double* %1, i64 %237
  %239 = load double, double* %238, align 8, !tbaa !27
  %240 = fmul double %239, %239
  %241 = fadd double %235, %240
  %242 = add nsw i64 %217, 4
  %243 = icmp eq i64 %242, %193
  br i1 %243, label %244, label %216

244:                                              ; preds = %216, %211, %180
  %245 = phi double [ 0.000000e+00, %180 ], [ %212, %211 ], [ %241, %216 ]
  %246 = fdiv double %245, %189
  %247 = getelementptr inbounds %struct.III_psy_ratio, %struct.III_psy_ratio* %2, i64 0, i32 1, i32 1, i64 %182, i64 0
  %248 = load double, double* %247, align 8, !tbaa !27
  %249 = fcmp ogt double %248, 0.000000e+00
  br i1 %249, label %250, label %256

250:                                              ; preds = %244
  %251 = getelementptr inbounds %struct.III_psy_ratio, %struct.III_psy_ratio* %2, i64 0, i32 0, i32 1, i64 %182, i64 0
  %252 = load double, double* %251, align 8, !tbaa !27
  %253 = fmul double %246, %252
  %254 = fmul double %253, %36
  %255 = fdiv double %254, %248
  br label %256

256:                                              ; preds = %250, %244
  %257 = phi double [ %255, %250 ], [ %248, %244 ]
  %258 = load double, double* %190, align 8, !tbaa !27
  %259 = fcmp ogt double %258, %257
  %260 = select i1 %259, double %258, double %257
  %261 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %4, i64 0, i32 1, i64 %182, i64 0
  store double %260, double* %261, align 8, !tbaa !27
  %262 = load double, double* %190, align 8, !tbaa !27
  %263 = fcmp ogt double %246, %262
  %264 = zext i1 %263 to i32
  %265 = add nsw i32 %183, %264
  br i1 %188, label %351, label %405

266:                                              ; preds = %337, %176
  %267 = phi i64 [ 0, %176 ], [ %271, %337 ]
  %268 = phi i32 [ %172, %176 ], [ %347, %337 ]
  %269 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 0, i64 %267
  %270 = load i32, i32* %269, align 4, !tbaa !18
  %271 = add nuw nsw i64 %267, 1
  %272 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 0, i64 %271
  %273 = load i32, i32* %272, align 4, !tbaa !18
  %274 = sub nsw i32 %273, %270
  %275 = icmp sgt i32 %273, %270
  br i1 %275, label %276, label %324

276:                                              ; preds = %266
  %277 = sext i32 %270 to i64
  %278 = sext i32 %273 to i64
  %279 = sub nsw i64 %278, %277
  %280 = xor i64 %277, -1
  %281 = add nsw i64 %280, %278
  %282 = and i64 %279, 3
  %283 = icmp eq i64 %282, 0
  br i1 %283, label %295, label %284

284:                                              ; preds = %284, %276
  %285 = phi i64 [ %292, %284 ], [ %277, %276 ]
  %286 = phi double [ %291, %284 ], [ 0.000000e+00, %276 ]
  %287 = phi i64 [ %293, %284 ], [ %282, %276 ]
  %288 = getelementptr inbounds double, double* %1, i64 %285
  %289 = load double, double* %288, align 8, !tbaa !27
  %290 = fmul double %289, %289
  %291 = fadd double %286, %290
  %292 = add nsw i64 %285, 1
  %293 = add i64 %287, -1
  %294 = icmp eq i64 %293, 0
  br i1 %294, label %295, label %284, !llvm.loop !333

295:                                              ; preds = %284, %276
  %296 = phi double [ undef, %276 ], [ %291, %284 ]
  %297 = phi i64 [ %277, %276 ], [ %292, %284 ]
  %298 = phi double [ 0.000000e+00, %276 ], [ %291, %284 ]
  %299 = icmp ult i64 %281, 3
  br i1 %299, label %324, label %300

300:                                              ; preds = %300, %295
  %301 = phi i64 [ %322, %300 ], [ %297, %295 ]
  %302 = phi double [ %321, %300 ], [ %298, %295 ]
  %303 = getelementptr inbounds double, double* %1, i64 %301
  %304 = load double, double* %303, align 8, !tbaa !27
  %305 = fmul double %304, %304
  %306 = fadd double %302, %305
  %307 = add nsw i64 %301, 1
  %308 = getelementptr inbounds double, double* %1, i64 %307
  %309 = load double, double* %308, align 8, !tbaa !27
  %310 = fmul double %309, %309
  %311 = fadd double %306, %310
  %312 = add nsw i64 %301, 2
  %313 = getelementptr inbounds double, double* %1, i64 %312
  %314 = load double, double* %313, align 8, !tbaa !27
  %315 = fmul double %314, %314
  %316 = fadd double %311, %315
  %317 = add nsw i64 %301, 3
  %318 = getelementptr inbounds double, double* %1, i64 %317
  %319 = load double, double* %318, align 8, !tbaa !27
  %320 = fmul double %319, %319
  %321 = fadd double %316, %320
  %322 = add nsw i64 %301, 4
  %323 = icmp eq i64 %322, %278
  br i1 %323, label %324, label %300

324:                                              ; preds = %300, %295, %266
  %325 = phi double [ 0.000000e+00, %266 ], [ %296, %295 ], [ %321, %300 ]
  %326 = sitofp i32 %274 to double
  %327 = fdiv double %325, %326
  %328 = getelementptr inbounds %struct.III_psy_ratio, %struct.III_psy_ratio* %2, i64 0, i32 1, i32 0, i64 %267
  %329 = load double, double* %328, align 8, !tbaa !27
  %330 = fcmp ogt double %329, 0.000000e+00
  br i1 %330, label %331, label %337

331:                                              ; preds = %324
  %332 = getelementptr inbounds %struct.III_psy_ratio, %struct.III_psy_ratio* %2, i64 0, i32 0, i32 0, i64 %267
  %333 = load double, double* %332, align 8, !tbaa !27
  %334 = fmul double %327, %333
  %335 = fmul double %334, %178
  %336 = fdiv double %335, %329
  br label %337

337:                                              ; preds = %331, %324
  %338 = phi double [ %336, %331 ], [ %329, %324 ]
  %339 = getelementptr inbounds [21 x double], [21 x double]* @ATH_l, i64 0, i64 %267
  %340 = load double, double* %339, align 8, !tbaa !27
  %341 = fcmp ogt double %340, %338
  %342 = select i1 %341, double %340, double %338
  %343 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %4, i64 0, i32 0, i64 %267
  store double %342, double* %343, align 8, !tbaa !27
  %344 = load double, double* %339, align 8, !tbaa !27
  %345 = fcmp ogt double %327, %344
  %346 = zext i1 %345 to i32
  %347 = add nsw i32 %268, %346
  %348 = icmp ult i64 %271, %179
  br i1 %348, label %266, label %349

349:                                              ; preds = %337, %171, %162, %158, %67
  %350 = phi i32 [ %172, %171 ], [ 0, %67 ], [ 0, %158 ], [ %347, %337 ], [ 0, %162 ]
  ret i32 %350

351:                                              ; preds = %256
  %352 = sext i32 %186 to i64
  %353 = sub nsw i64 %352, %191
  %354 = xor i64 %191, -1
  %355 = add nsw i64 %354, %352
  %356 = and i64 %353, 3
  %357 = icmp eq i64 %356, 0
  br i1 %357, label %371, label %358

358:                                              ; preds = %358, %351
  %359 = phi i64 [ %368, %358 ], [ %191, %351 ]
  %360 = phi double [ %367, %358 ], [ 0.000000e+00, %351 ]
  %361 = phi i64 [ %369, %358 ], [ %356, %351 ]
  %362 = mul nsw i64 %359, 3
  %363 = add nsw i64 %362, 1
  %364 = getelementptr inbounds double, double* %1, i64 %363
  %365 = load double, double* %364, align 8, !tbaa !27
  %366 = fmul double %365, %365
  %367 = fadd double %360, %366
  %368 = add nsw i64 %359, 1
  %369 = add i64 %361, -1
  %370 = icmp eq i64 %369, 0
  br i1 %370, label %371, label %358, !llvm.loop !334

371:                                              ; preds = %358, %351
  %372 = phi double [ undef, %351 ], [ %367, %358 ]
  %373 = phi i64 [ %191, %351 ], [ %368, %358 ]
  %374 = phi double [ 0.000000e+00, %351 ], [ %367, %358 ]
  %375 = icmp ult i64 %355, 3
  br i1 %375, label %405, label %376

376:                                              ; preds = %376, %371
  %377 = phi i64 [ %403, %376 ], [ %373, %371 ]
  %378 = phi double [ %402, %376 ], [ %374, %371 ]
  %379 = mul nsw i64 %377, 3
  %380 = add nsw i64 %379, 1
  %381 = getelementptr inbounds double, double* %1, i64 %380
  %382 = load double, double* %381, align 8, !tbaa !27
  %383 = fmul double %382, %382
  %384 = fadd double %378, %383
  %385 = mul i64 %377, 3
  %386 = add i64 %385, 4
  %387 = getelementptr inbounds double, double* %1, i64 %386
  %388 = load double, double* %387, align 8, !tbaa !27
  %389 = fmul double %388, %388
  %390 = fadd double %384, %389
  %391 = mul i64 %377, 3
  %392 = add i64 %391, 7
  %393 = getelementptr inbounds double, double* %1, i64 %392
  %394 = load double, double* %393, align 8, !tbaa !27
  %395 = fmul double %394, %394
  %396 = fadd double %390, %395
  %397 = mul i64 %377, 3
  %398 = add i64 %397, 10
  %399 = getelementptr inbounds double, double* %1, i64 %398
  %400 = load double, double* %399, align 8, !tbaa !27
  %401 = fmul double %400, %400
  %402 = fadd double %396, %401
  %403 = add nsw i64 %377, 4
  %404 = icmp eq i64 %403, %352
  br i1 %404, label %405, label %376

405:                                              ; preds = %376, %371, %256
  %406 = phi double [ 0.000000e+00, %256 ], [ %372, %371 ], [ %402, %376 ]
  %407 = fdiv double %406, %189
  %408 = getelementptr inbounds %struct.III_psy_ratio, %struct.III_psy_ratio* %2, i64 0, i32 1, i32 1, i64 %182, i64 1
  %409 = load double, double* %408, align 8, !tbaa !27
  %410 = fcmp ogt double %409, 0.000000e+00
  br i1 %410, label %411, label %417

411:                                              ; preds = %405
  %412 = getelementptr inbounds %struct.III_psy_ratio, %struct.III_psy_ratio* %2, i64 0, i32 0, i32 1, i64 %182, i64 1
  %413 = load double, double* %412, align 8, !tbaa !27
  %414 = fmul double %407, %413
  %415 = fmul double %414, %36
  %416 = fdiv double %415, %409
  br label %417

417:                                              ; preds = %411, %405
  %418 = phi double [ %416, %411 ], [ %409, %405 ]
  %419 = fcmp ogt double %262, %418
  %420 = select i1 %419, double %262, double %418
  %421 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %4, i64 0, i32 1, i64 %182, i64 1
  store double %420, double* %421, align 8, !tbaa !27
  %422 = load double, double* %190, align 8, !tbaa !27
  %423 = fcmp ogt double %407, %422
  %424 = zext i1 %423 to i32
  %425 = add nsw i32 %265, %424
  br i1 %188, label %426, label %480

426:                                              ; preds = %417
  %427 = sext i32 %186 to i64
  %428 = sub nsw i64 %427, %191
  %429 = xor i64 %191, -1
  %430 = add nsw i64 %429, %427
  %431 = and i64 %428, 3
  %432 = icmp eq i64 %431, 0
  br i1 %432, label %446, label %433

433:                                              ; preds = %433, %426
  %434 = phi i64 [ %443, %433 ], [ %191, %426 ]
  %435 = phi double [ %442, %433 ], [ 0.000000e+00, %426 ]
  %436 = phi i64 [ %444, %433 ], [ %431, %426 ]
  %437 = mul nsw i64 %434, 3
  %438 = add nsw i64 %437, 2
  %439 = getelementptr inbounds double, double* %1, i64 %438
  %440 = load double, double* %439, align 8, !tbaa !27
  %441 = fmul double %440, %440
  %442 = fadd double %435, %441
  %443 = add nsw i64 %434, 1
  %444 = add i64 %436, -1
  %445 = icmp eq i64 %444, 0
  br i1 %445, label %446, label %433, !llvm.loop !335

446:                                              ; preds = %433, %426
  %447 = phi double [ undef, %426 ], [ %442, %433 ]
  %448 = phi i64 [ %191, %426 ], [ %443, %433 ]
  %449 = phi double [ 0.000000e+00, %426 ], [ %442, %433 ]
  %450 = icmp ult i64 %430, 3
  br i1 %450, label %480, label %451

451:                                              ; preds = %451, %446
  %452 = phi i64 [ %478, %451 ], [ %448, %446 ]
  %453 = phi double [ %477, %451 ], [ %449, %446 ]
  %454 = mul nsw i64 %452, 3
  %455 = add nsw i64 %454, 2
  %456 = getelementptr inbounds double, double* %1, i64 %455
  %457 = load double, double* %456, align 8, !tbaa !27
  %458 = fmul double %457, %457
  %459 = fadd double %453, %458
  %460 = mul i64 %452, 3
  %461 = add i64 %460, 5
  %462 = getelementptr inbounds double, double* %1, i64 %461
  %463 = load double, double* %462, align 8, !tbaa !27
  %464 = fmul double %463, %463
  %465 = fadd double %459, %464
  %466 = mul i64 %452, 3
  %467 = add i64 %466, 8
  %468 = getelementptr inbounds double, double* %1, i64 %467
  %469 = load double, double* %468, align 8, !tbaa !27
  %470 = fmul double %469, %469
  %471 = fadd double %465, %470
  %472 = mul i64 %452, 3
  %473 = add i64 %472, 11
  %474 = getelementptr inbounds double, double* %1, i64 %473
  %475 = load double, double* %474, align 8, !tbaa !27
  %476 = fmul double %475, %475
  %477 = fadd double %471, %476
  %478 = add nsw i64 %452, 4
  %479 = icmp eq i64 %478, %427
  br i1 %479, label %480, label %451

480:                                              ; preds = %451, %446, %417
  %481 = phi double [ 0.000000e+00, %417 ], [ %447, %446 ], [ %477, %451 ]
  %482 = fdiv double %481, %189
  %483 = getelementptr inbounds %struct.III_psy_ratio, %struct.III_psy_ratio* %2, i64 0, i32 1, i32 1, i64 %182, i64 2
  %484 = load double, double* %483, align 8, !tbaa !27
  %485 = fcmp ogt double %484, 0.000000e+00
  br i1 %485, label %486, label %492

486:                                              ; preds = %480
  %487 = getelementptr inbounds %struct.III_psy_ratio, %struct.III_psy_ratio* %2, i64 0, i32 0, i32 1, i64 %182, i64 2
  %488 = load double, double* %487, align 8, !tbaa !27
  %489 = fmul double %482, %488
  %490 = fmul double %489, %36
  %491 = fdiv double %490, %484
  br label %492

492:                                              ; preds = %486, %480
  %493 = phi double [ %491, %486 ], [ %484, %480 ]
  %494 = fcmp ogt double %422, %493
  %495 = select i1 %494, double %422, double %493
  %496 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %4, i64 0, i32 1, i64 %182, i64 2
  store double %495, double* %496, align 8, !tbaa !27
  %497 = load double, double* %190, align 8, !tbaa !27
  %498 = fcmp ogt double %482, %497
  %499 = zext i1 %498 to i32
  %500 = add nsw i32 %425, %499
  %501 = icmp ult i64 %182, 11
  br i1 %501, label %180, label %171
}

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local i32 @loop_break(%struct.III_scalefac_t* nocapture readonly %0, %struct.gr_info* nocapture readonly %1) local_unnamed_addr #10 {
  %3 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %1, i64 0, i32 16
  %4 = load i32, i32* %3, align 8, !tbaa !302
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %16, label %6

6:                                                ; preds = %2
  %7 = zext i32 %4 to i64
  br label %10

8:                                                ; preds = %10
  %9 = icmp ult i64 %15, %7
  br i1 %9, label %10, label %16

10:                                               ; preds = %8, %6
  %11 = phi i64 [ 0, %6 ], [ %15, %8 ]
  %12 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 0, i64 %11
  %13 = load i32, i32* %12, align 4, !tbaa !18
  %14 = icmp eq i32 %13, 0
  %15 = add nuw nsw i64 %11, 1
  br i1 %14, label %30, label %8

16:                                               ; preds = %8, %2
  %17 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %1, i64 0, i32 17
  %18 = load i32, i32* %17, align 4, !tbaa !303
  %19 = icmp ult i32 %18, 12
  br i1 %19, label %20, label %30

20:                                               ; preds = %36, %16
  %21 = phi i32 [ %37, %36 ], [ %18, %16 ]
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 1, i64 %22, i64 0
  %24 = load i32, i32* %23, align 4, !tbaa !18
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %30, label %26

26:                                               ; preds = %20
  %27 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 1, i64 %22, i64 1
  %28 = load i32, i32* %27, align 4, !tbaa !18
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %32

30:                                               ; preds = %36, %32, %26, %20, %16, %10
  %31 = phi i32 [ 1, %16 ], [ 1, %36 ], [ 0, %20 ], [ 0, %26 ], [ 0, %32 ], [ 0, %10 ]
  ret i32 %31

32:                                               ; preds = %26
  %33 = getelementptr inbounds %struct.III_scalefac_t, %struct.III_scalefac_t* %0, i64 0, i32 1, i64 %22, i64 2
  %34 = load i32, i32* %33, align 4, !tbaa !18
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %30, label %36

36:                                               ; preds = %32
  %37 = add nsw i32 %21, 1
  %38 = icmp eq i32 %37, 12
  br i1 %38, label %30, label %20
}

; Function Attrs: nounwind uwtable
define dso_local i32 @bin_search_StepSize2(%struct.lame_global_flags* %0, i32 %1, i32 %2, i32* %3, double* %4, %struct.gr_info* %5) local_unnamed_addr #0 {
  %7 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %5, i64 0, i32 3
  store i32 %2, i32* %7, align 4, !tbaa !135
  %8 = tail call i32 @count_bits(%struct.lame_global_flags* %0, i32* %3, double* %4, %struct.gr_info* %5) #21
  %9 = load i32, i32* @bin_search_StepSize2.CurrentStep, align 4, !tbaa !18
  %10 = icmp eq i32 %9, 1
  br i1 %10, label %52, label %11

11:                                               ; preds = %45, %6
  %12 = phi i32 [ %50, %45 ], [ %9, %6 ]
  %13 = phi i32 [ %49, %45 ], [ %8, %6 ]
  %14 = phi i32 [ %48, %45 ], [ 0, %6 ]
  %15 = phi i32 [ %47, %45 ], [ %2, %6 ]
  %16 = phi i32 [ %46, %45 ], [ 0, %6 ]
  %17 = icmp ne i32 %16, 0
  br i1 %17, label %18, label %20

18:                                               ; preds = %11
  %19 = sdiv i32 %12, 2
  store i32 %19, i32* @bin_search_StepSize2.CurrentStep, align 4, !tbaa !18
  br label %20

20:                                               ; preds = %18, %11
  %21 = phi i32 [ %19, %18 ], [ %12, %11 ]
  %22 = icmp sgt i32 %13, %1
  br i1 %22, label %23, label %33

23:                                               ; preds = %20
  %24 = icmp ne i32 %14, 2
  %25 = or i1 %17, %24
  br i1 %25, label %28, label %26

26:                                               ; preds = %23
  %27 = sdiv i32 %21, 2
  store i32 %27, i32* @bin_search_StepSize2.CurrentStep, align 4, !tbaa !18
  br label %28

28:                                               ; preds = %26, %23
  %29 = phi i32 [ %21, %23 ], [ %27, %26 ]
  %30 = phi i32 [ %16, %23 ], [ 1, %26 ]
  %31 = add nsw i32 %29, %15
  %32 = icmp sgt i32 %31, 255
  br i1 %32, label %52, label %45

33:                                               ; preds = %20
  %34 = icmp slt i32 %13, %1
  br i1 %34, label %35, label %52

35:                                               ; preds = %33
  %36 = icmp ne i32 %14, 1
  %37 = or i1 %17, %36
  br i1 %37, label %40, label %38

38:                                               ; preds = %35
  %39 = sdiv i32 %21, 2
  store i32 %39, i32* @bin_search_StepSize2.CurrentStep, align 4, !tbaa !18
  br label %40

40:                                               ; preds = %38, %35
  %41 = phi i32 [ %21, %35 ], [ %39, %38 ]
  %42 = phi i32 [ %16, %35 ], [ 1, %38 ]
  %43 = sub nsw i32 %15, %41
  %44 = icmp slt i32 %43, 0
  br i1 %44, label %52, label %45

45:                                               ; preds = %40, %28
  %46 = phi i32 [ %30, %28 ], [ %42, %40 ]
  %47 = phi i32 [ %31, %28 ], [ %43, %40 ]
  %48 = phi i32 [ 1, %28 ], [ 2, %40 ]
  store i32 %47, i32* %7, align 4, !tbaa !135
  %49 = tail call i32 @count_bits(%struct.lame_global_flags* %0, i32* %3, double* %4, %struct.gr_info* nonnull %5) #21
  %50 = load i32, i32* @bin_search_StepSize2.CurrentStep, align 4, !tbaa !18
  %51 = icmp eq i32 %50, 1
  br i1 %51, label %52, label %11

52:                                               ; preds = %45, %40, %33, %28, %6
  %53 = phi i32 [ %8, %6 ], [ %13, %33 ], [ %13, %40 ], [ %13, %28 ], [ %49, %45 ]
  %54 = phi i32 [ %2, %6 ], [ %15, %33 ], [ %43, %40 ], [ %31, %28 ], [ %47, %45 ]
  %55 = sub nsw i32 %2, %54
  %56 = icmp slt i32 %55, 0
  %57 = sub nsw i32 0, %55
  %58 = select i1 %56, i32 %57, i32 %55
  %59 = icmp slt i32 %58, 4
  %60 = select i1 %59, i32 2, i32 4
  store i32 %60, i32* @bin_search_StepSize2.CurrentStep, align 4, !tbaa !18
  ret i32 %53
}

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @quantize_xrpow(double* nocapture readonly %0, i32* nocapture %1, %struct.gr_info* nocapture readonly %2) local_unnamed_addr #5 {
  %4 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 3
  %5 = load i32, i32* %4, align 4, !tbaa !135
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds [256 x double], [256 x double]* @ipow20, i64 0, i64 %6
  %8 = load double, double* %7, align 8, !tbaa !27
  %9 = insertelement <4 x double> undef, double %8, i32 0
  %10 = shufflevector <4 x double> %9, <4 x double> undef, <4 x i32> zeroinitializer
  %11 = insertelement <4 x double> undef, double %8, i32 0
  %12 = shufflevector <4 x double> %11, <4 x double> undef, <4 x i32> zeroinitializer
  br label %13

13:                                               ; preds = %13, %3
  %14 = phi double* [ %0, %3 ], [ %36, %13 ]
  %15 = phi i32* [ %1, %3 ], [ %79, %13 ]
  %16 = phi i32 [ 72, %3 ], [ %81, %13 ]
  %17 = bitcast double* %14 to <4 x double>*
  %18 = load <4 x double>, <4 x double>* %17, align 8, !tbaa !27
  %19 = fmul <4 x double> %10, %18
  %20 = extractelement <4 x double> %19, i32 0
  %21 = fptosi double %20 to i32
  %22 = extractelement <4 x double> %19, i32 1
  %23 = fptosi double %22 to i32
  %24 = getelementptr inbounds double, double* %14, i64 4
  %25 = extractelement <4 x double> %19, i32 2
  %26 = fptosi double %25 to i32
  %27 = extractelement <4 x double> %19, i32 3
  %28 = fptosi double %27 to i32
  %29 = bitcast double* %24 to <4 x double>*
  %30 = load <4 x double>, <4 x double>* %29, align 8, !tbaa !27
  %31 = fmul <4 x double> %12, %30
  %32 = extractelement <4 x double> %31, i32 0
  %33 = fptosi double %32 to i32
  %34 = extractelement <4 x double> %31, i32 1
  %35 = fptosi double %34 to i32
  %36 = getelementptr inbounds double, double* %14, i64 8
  %37 = extractelement <4 x double> %31, i32 2
  %38 = fptosi double %37 to i32
  %39 = sext i32 %21 to i64
  %40 = getelementptr inbounds [8208 x double], [8208 x double]* @adj43, i64 0, i64 %39
  %41 = load double, double* %40, align 8, !tbaa !27
  %42 = extractelement <4 x double> %31, i32 3
  %43 = fptosi double %42 to i32
  %44 = sext i32 %23 to i64
  %45 = getelementptr inbounds [8208 x double], [8208 x double]* @adj43, i64 0, i64 %44
  %46 = load double, double* %45, align 8, !tbaa !27
  %47 = sext i32 %26 to i64
  %48 = getelementptr inbounds [8208 x double], [8208 x double]* @adj43, i64 0, i64 %47
  %49 = load double, double* %48, align 8, !tbaa !27
  %50 = sext i32 %28 to i64
  %51 = getelementptr inbounds [8208 x double], [8208 x double]* @adj43, i64 0, i64 %50
  %52 = load double, double* %51, align 8, !tbaa !27
  %53 = insertelement <4 x double> undef, double %41, i32 0
  %54 = insertelement <4 x double> %53, double %46, i32 1
  %55 = insertelement <4 x double> %54, double %49, i32 2
  %56 = insertelement <4 x double> %55, double %52, i32 3
  %57 = fadd <4 x double> %19, %56
  %58 = sext i32 %33 to i64
  %59 = getelementptr inbounds [8208 x double], [8208 x double]* @adj43, i64 0, i64 %58
  %60 = load double, double* %59, align 8, !tbaa !27
  %61 = fptosi <4 x double> %57 to <4 x i32>
  %62 = getelementptr inbounds i32, i32* %15, i64 4
  %63 = bitcast i32* %15 to <4 x i32>*
  store <4 x i32> %61, <4 x i32>* %63, align 4, !tbaa !18
  %64 = sext i32 %35 to i64
  %65 = getelementptr inbounds [8208 x double], [8208 x double]* @adj43, i64 0, i64 %64
  %66 = load double, double* %65, align 8, !tbaa !27
  %67 = sext i32 %38 to i64
  %68 = getelementptr inbounds [8208 x double], [8208 x double]* @adj43, i64 0, i64 %67
  %69 = load double, double* %68, align 8, !tbaa !27
  %70 = sext i32 %43 to i64
  %71 = getelementptr inbounds [8208 x double], [8208 x double]* @adj43, i64 0, i64 %70
  %72 = load double, double* %71, align 8, !tbaa !27
  %73 = insertelement <4 x double> undef, double %60, i32 0
  %74 = insertelement <4 x double> %73, double %66, i32 1
  %75 = insertelement <4 x double> %74, double %69, i32 2
  %76 = insertelement <4 x double> %75, double %72, i32 3
  %77 = fadd <4 x double> %31, %76
  %78 = fptosi <4 x double> %77 to <4 x i32>
  %79 = getelementptr inbounds i32, i32* %15, i64 8
  %80 = bitcast i32* %62 to <4 x i32>*
  store <4 x i32> %78, <4 x i32>* %80, align 4, !tbaa !18
  %81 = add nsw i32 %16, -1
  %82 = icmp ugt i32 %16, 1
  br i1 %82, label %13, label %83

83:                                               ; preds = %13
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @quantize_xrpow_ISO(double* nocapture readonly %0, i32* nocapture %1, %struct.gr_info* nocapture readonly %2) local_unnamed_addr #5 {
  %4 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 3
  %5 = load i32, i32* %4, align 4, !tbaa !135
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds [256 x double], [256 x double]* @ipow20, i64 0, i64 %6
  %8 = load double, double* %7, align 8, !tbaa !27
  %9 = fdiv double 5.946000e-01, %8
  %10 = insertelement <2 x double> undef, double %9, i32 0
  %11 = shufflevector <2 x double> %10, <2 x double> undef, <2 x i32> zeroinitializer
  %12 = insertelement <2 x double> undef, double %9, i32 0
  %13 = shufflevector <2 x double> %12, <2 x double> undef, <2 x i32> zeroinitializer
  %14 = insertelement <2 x double> undef, double %8, i32 0
  %15 = shufflevector <2 x double> %14, <2 x double> undef, <2 x i32> zeroinitializer
  %16 = insertelement <2 x double> undef, double %8, i32 0
  %17 = shufflevector <2 x double> %16, <2 x double> undef, <2 x i32> zeroinitializer
  br label %18

18:                                               ; preds = %18, %3
  %19 = phi i64 [ 0, %3 ], [ %40, %18 ]
  %20 = getelementptr double, double* %0, i64 %19
  %21 = getelementptr i32, i32* %1, i64 %19
  %22 = bitcast double* %20 to <2 x double>*
  %23 = load <2 x double>, <2 x double>* %22, align 8, !tbaa !27
  %24 = getelementptr double, double* %20, i64 2
  %25 = bitcast double* %24 to <2 x double>*
  %26 = load <2 x double>, <2 x double>* %25, align 8, !tbaa !27
  %27 = fcmp ogt <2 x double> %11, %23
  %28 = fcmp ogt <2 x double> %13, %26
  %29 = fmul <2 x double> %15, %23
  %30 = fmul <2 x double> %17, %26
  %31 = fadd <2 x double> %29, <double 4.054000e-01, double 4.054000e-01>
  %32 = fadd <2 x double> %30, <double 4.054000e-01, double 4.054000e-01>
  %33 = fptosi <2 x double> %31 to <2 x i32>
  %34 = fptosi <2 x double> %32 to <2 x i32>
  %35 = select <2 x i1> %27, <2 x i32> zeroinitializer, <2 x i32> %33
  %36 = select <2 x i1> %28, <2 x i32> zeroinitializer, <2 x i32> %34
  %37 = bitcast i32* %21 to <2 x i32>*
  store <2 x i32> %35, <2 x i32>* %37, align 4, !tbaa !18
  %38 = getelementptr i32, i32* %21, i64 2
  %39 = bitcast i32* %38 to <2 x i32>*
  store <2 x i32> %36, <2 x i32>* %39, align 4, !tbaa !18
  %40 = add i64 %19, 4
  %41 = icmp eq i64 %40, 576
  br i1 %41, label %42, label %18, !llvm.loop !336

42:                                               ; preds = %18
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local i32 @ResvFrameBegin(%struct.lame_global_flags* nocapture readonly %0, %struct.III_side_info_t* nocapture readnone %1, i32 %2, i32 %3) local_unnamed_addr #5 {
  %5 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 39
  %6 = load i64, i64* %5, align 8, !tbaa !93
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %10, label %8

8:                                                ; preds = %4
  %9 = load i32, i32* @ResvSize, align 4, !tbaa !18
  br label %11

10:                                               ; preds = %4
  store i32 0, i32* @ResvSize, align 4, !tbaa !18
  br label %11

11:                                               ; preds = %10, %8
  %12 = phi i32 [ %9, %8 ], [ 0, %10 ]
  %13 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 43
  %14 = load i32, i32* %13, align 8, !tbaa !115
  %15 = icmp eq i32 %14, 1
  %16 = select i1 %15, i32 4088, i32 2040
  %17 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 45
  %18 = load i32, i32* %17, align 8, !tbaa !95
  %19 = mul nsw i32 %18, %2
  %20 = add nsw i32 %19, %12
  %21 = icmp sgt i32 %3, 7680
  %22 = sub nsw i32 7680, %3
  %23 = select i1 %21, i32 0, i32 %22
  %24 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 17
  %25 = load i32, i32* %24, align 8, !tbaa !189
  %26 = icmp eq i32 %25, 0
  %27 = select i1 %26, i32 %23, i32 0
  %28 = icmp sgt i32 %27, %16
  %29 = select i1 %28, i32 %16, i32 %27
  store i32 %29, i32* @ResvMax, align 4
  ret i32 %20
}

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @ResvMaxBits(i32 %0, i32* nocapture %1, i32* nocapture %2, i32 %3) local_unnamed_addr #5 {
  store i32 %0, i32* %1, align 4, !tbaa !18
  %5 = load i32, i32* @ResvSize, align 4, !tbaa !18
  %6 = load i32, i32* @ResvMax, align 4, !tbaa !18
  %7 = mul nsw i32 %6, 9
  %8 = sdiv i32 %7, 10
  %9 = icmp sgt i32 %5, %8
  br i1 %9, label %10, label %13

10:                                               ; preds = %4
  %11 = sub nsw i32 %5, %8
  %12 = add nsw i32 %11, %0
  br label %18

13:                                               ; preds = %4
  %14 = sitofp i32 %0 to double
  %15 = fdiv double %14, 1.520000e+01
  %16 = fptosi double %15 to i32
  %17 = sub nsw i32 %0, %16
  br label %18

18:                                               ; preds = %13, %10
  %19 = phi i32 [ %17, %13 ], [ %12, %10 ]
  %20 = phi i32 [ 0, %13 ], [ %11, %10 ]
  store i32 %19, i32* %1, align 4, !tbaa !18
  %21 = mul nsw i32 %6, 6
  %22 = sdiv i32 %21, 10
  %23 = icmp slt i32 %5, %22
  %24 = select i1 %23, i32 %5, i32 %22
  %25 = sub nsw i32 %24, %20
  %26 = icmp sgt i32 %25, 0
  %27 = select i1 %26, i32 %25, i32 0
  store i32 %27, i32* %2, align 4, !tbaa !18
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @ResvAdjust(%struct.lame_global_flags* nocapture readonly %0, %struct.gr_info* nocapture readonly %1, %struct.III_side_info_t* nocapture readnone %2, i32 %3) local_unnamed_addr #5 {
  %5 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 46
  %6 = load i32, i32* %5, align 4, !tbaa !126
  %7 = sdiv i32 %3, %6
  %8 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %1, i64 0, i32 0
  %9 = load i32, i32* %8, align 8, !tbaa !132
  %10 = sub i32 %7, %9
  %11 = load i32, i32* @ResvSize, align 4, !tbaa !18
  %12 = add i32 %10, %11
  store i32 %12, i32* @ResvSize, align 4, !tbaa !18
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @ResvFrameEnd(%struct.lame_global_flags* nocapture readonly %0, %struct.III_side_info_t* nocapture %1, i32 %2) local_unnamed_addr #5 {
  %4 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 46
  %5 = load i32, i32* %4, align 4, !tbaa !126
  %6 = icmp ne i32 %5, 2
  %7 = and i32 %2, 1
  %8 = icmp eq i32 %7, 0
  %9 = or i1 %8, %6
  %10 = load i32, i32* @ResvSize, align 4, !tbaa !18
  br i1 %9, label %13, label %11

11:                                               ; preds = %3
  %12 = add nsw i32 %10, 1
  store i32 %12, i32* @ResvSize, align 4, !tbaa !18
  br label %13

13:                                               ; preds = %11, %3
  %14 = phi i32 [ %12, %11 ], [ %10, %3 ]
  %15 = load i32, i32* @ResvMax, align 4, !tbaa !18
  %16 = sub nsw i32 %14, %15
  %17 = icmp sgt i32 %16, 0
  %18 = select i1 %17, i32 %16, i32 0
  %19 = sub nsw i32 %14, %18
  %20 = srem i32 %19, 8
  %21 = add i32 %20, %18
  %22 = sub i32 %19, %20
  store i32 %22, i32* @ResvSize, align 4, !tbaa !18
  %23 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %1, i64 0, i32 2
  store i32 %21, i32* %23, align 8, !tbaa !148
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @initrtp(%struct.rtpheader* nocapture %0) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.rtpheader, %struct.rtpheader* %0, i64 0, i32 0, i32 0
  %3 = load i32, i32* %2, align 4
  %4 = and i32 %3, 65535
  %5 = or i32 %4, -2146566144
  store i32 %5, i32* %2, align 4
  %6 = tail call i32 @rand() #21
  %7 = and i32 %6, 65535
  %8 = load i32, i32* %2, align 4
  %9 = and i32 %8, -65536
  %10 = or i32 %9, %7
  store i32 %10, i32* %2, align 4
  %11 = tail call i32 @rand() #21
  %12 = getelementptr inbounds %struct.rtpheader, %struct.rtpheader* %0, i64 0, i32 1
  store i32 %11, i32* %12, align 4, !tbaa !337
  %13 = tail call i32 @rand() #21
  %14 = getelementptr inbounds %struct.rtpheader, %struct.rtpheader* %0, i64 0, i32 2
  store i32 %13, i32* %14, align 4, !tbaa !340
  %15 = getelementptr inbounds %struct.rtpheader, %struct.rtpheader* %0, i64 0, i32 3
  store i32 0, i32* %15, align 4, !tbaa !341
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @rand() local_unnamed_addr #9

; Function Attrs: nounwind uwtable
define dso_local i32 @sendrtp(i32 %0, %struct.sockaddr_in* %1, %struct.rtpheader* nocapture readonly %2, i8* nocapture readonly %3, i32 %4) local_unnamed_addr #0 {
  %6 = sext i32 %4 to i64
  %7 = add nsw i64 %6, 16
  %8 = alloca i8, i64 %7, align 16
  %9 = bitcast %struct.rtpheader* %2 to <4 x i32>*
  %10 = load <4 x i32>, <4 x i32>* %9, align 4, !tbaa !18
  %11 = call <4 x i32> @llvm.bswap.v4i32(<4 x i32> %10)
  %12 = bitcast i8* %8 to <4 x i32>*
  store <4 x i32> %11, <4 x i32>* %12, align 16, !tbaa !18
  %13 = getelementptr inbounds i8, i8* %8, i64 16
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %13, i8* align 1 %3, i64 %6, i1 false)
  %14 = bitcast %struct.sockaddr_in* %1 to %struct.sockaddr*
  %15 = call i64 @sendto(i32 %0, i8* nonnull %8, i64 %7, i32 0, %struct.sockaddr* %14, i32 16) #21
  %16 = trunc i64 %15 to i32
  ret i32 %16
}

; Function Attrs: nounwind readnone speculatable willreturn
declare <4 x i32> @llvm.bswap.v4i32(<4 x i32>) #12

declare dso_local i64 @sendto(i32, i8*, i64, i32, %struct.sockaddr*, i32) local_unnamed_addr #16

; Function Attrs: nounwind uwtable
define dso_local i32 @makesocket(i8* %0, i16 zeroext %1, i32 %2, %struct.sockaddr_in* nocapture %3) local_unnamed_addr #0 {
  %5 = alloca i32, align 4
  %6 = alloca i8, align 1
  %7 = alloca i8, align 1
  %8 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #21
  store i32 1, i32* %5, align 4, !tbaa !18
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %6) #21
  %9 = trunc i32 %2 to i8
  store i8 %9, i8* %6, align 1, !tbaa !26
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %7) #21
  store i8 0, i8* %7, align 1, !tbaa !26
  %10 = tail call i32 @socket(i32 2, i32 2, i32 0) #21
  %11 = icmp slt i32 %10, 0
  br i1 %11, label %12, label %15

12:                                               ; preds = %4
  %13 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %14 = tail call i64 @fwrite(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.426, i64 0, i64 0), i64 17, i64 1, %struct._IO_FILE* %13) #19
  tail call void @exit(i32 1) #20
  unreachable

15:                                               ; preds = %4
  %16 = tail call i32 @inet_addr(i8* %0) #21
  %17 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i64 0, i32 0
  store i16 2, i16* %17, align 4, !tbaa !342
  %18 = tail call i16 @llvm.bswap.i16(i16 %1) #21
  %19 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i64 0, i32 1
  store i16 %18, i16* %19, align 2, !tbaa !345
  %20 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i64 0, i32 2, i32 0
  store i32 %16, i32* %20, align 4, !tbaa !346
  %21 = call i32 @setsockopt(i32 %10, i32 1, i32 2, i8* nonnull %8, i32 4) #21
  %22 = icmp slt i32 %21, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %15
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %25 = call i64 @fwrite(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1.427, i64 0, i64 0), i64 31, i64 1, %struct._IO_FILE* %24) #19
  call void @exit(i32 1) #20
  unreachable

26:                                               ; preds = %15
  %27 = and i32 %16, 240
  %28 = icmp eq i32 %27, 224
  br i1 %28, label %29, label %41

29:                                               ; preds = %26
  %30 = call i32 @setsockopt(i32 %10, i32 0, i32 33, i8* nonnull %6, i32 1) #21
  %31 = icmp slt i32 %30, 0
  br i1 %31, label %32, label %35

32:                                               ; preds = %29
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %34 = call i64 @fwrite(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.2.428, i64 0, i64 0), i64 58, i64 1, %struct._IO_FILE* %33) #19
  call void @exit(i32 1) #20
  unreachable

35:                                               ; preds = %29
  store i8 1, i8* %7, align 1, !tbaa !26
  %36 = call i32 @setsockopt(i32 %10, i32 0, i32 34, i8* nonnull %7, i32 1) #21
  %37 = icmp slt i32 %36, 0
  br i1 %37, label %38, label %41

38:                                               ; preds = %35
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %40 = call i64 @fwrite(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.3.429, i64 0, i64 0), i64 59, i64 1, %struct._IO_FILE* %39) #19
  call void @exit(i32 1) #20
  unreachable

41:                                               ; preds = %35, %26
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %7) #21
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #21
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #21
  ret i32 %10
}

; Function Attrs: nounwind
declare dso_local i32 @socket(i32, i32, i32) local_unnamed_addr #9

; Function Attrs: nounwind
declare dso_local i32 @inet_addr(i8*) local_unnamed_addr #9

; Function Attrs: nounwind readnone speculatable willreturn
declare i16 @llvm.bswap.i16(i16) #12

; Function Attrs: nounwind
declare dso_local i32 @setsockopt(i32, i32, i32, i8*, i32) local_unnamed_addr #9

; Function Attrs: nofree nounwind uwtable
define dso_local void @make_decode_tables(i64 %0) local_unnamed_addr #3 {
  %2 = load double*, double** getelementptr inbounds ([5 x double*], [5 x double*]* @pnts, i64 0, i64 0), align 16, !tbaa !7
  br label %3

3:                                                ; preds = %3, %1
  %4 = phi i64 [ 0, %1 ], [ %15, %3 ]
  %5 = trunc i64 %4 to i32
  %6 = sitofp i32 %5 to double
  %7 = fmul double %6, 2.000000e+00
  %8 = fadd double %7, 1.000000e+00
  %9 = fmul double %8, 0x400921FB54442D18
  %10 = fmul double %9, 1.562500e-02
  %11 = tail call double @cos(double %10) #21
  %12 = fmul double %11, 2.000000e+00
  %13 = fdiv double 1.000000e+00, %12
  %14 = getelementptr inbounds double, double* %2, i64 %4
  store double %13, double* %14, align 8, !tbaa !27
  %15 = add nuw nsw i64 %4, 1
  %16 = icmp eq i64 %15, 16
  br i1 %16, label %72, label %3

17:                                               ; preds = %72, %31
  %18 = phi i64 [ 0, %72 ], [ %41, %31 ]
  %19 = phi i64 [ %88, %72 ], [ %39, %31 ]
  %20 = phi double* [ getelementptr inbounds ([544 x double], [544 x double]* @decwin, i64 0, i64 0), %72 ], [ %42, %31 ]
  %21 = phi i32 [ 0, %72 ], [ %40, %31 ]
  %22 = icmp ult double* %20, getelementptr inbounds ([544 x double], [544 x double]* @decwin, i64 0, i64 528)
  br i1 %22, label %23, label %31

23:                                               ; preds = %17
  %24 = getelementptr inbounds [257 x i64], [257 x i64]* @intwinbase, i64 0, i64 %18
  %25 = load i64, i64* %24, align 8, !tbaa !19
  %26 = sitofp i64 %25 to double
  %27 = fmul double %26, 0x3EF0000000000000
  %28 = sitofp i64 %19 to double
  %29 = fmul double %27, %28
  store double %29, double* %20, align 8, !tbaa !27
  %30 = getelementptr inbounds double, double* %20, i64 16
  store double %29, double* %30, align 8, !tbaa !27
  br label %31

31:                                               ; preds = %23, %17
  %32 = and i32 %21, 31
  %33 = icmp eq i32 %32, 31
  %34 = getelementptr inbounds double, double* %20, i64 -1023
  %35 = select i1 %33, double* %34, double* %20
  %36 = and i32 %21, 63
  %37 = icmp eq i32 %36, 63
  %38 = sub nsw i64 0, %19
  %39 = select i1 %37, i64 %38, i64 %19
  %40 = add nuw nsw i32 %21, 1
  %41 = add nuw nsw i64 %18, 1
  %42 = getelementptr inbounds double, double* %35, i64 32
  %43 = icmp eq i64 %41, 256
  br i1 %43, label %44, label %17

44:                                               ; preds = %58, %31
  %45 = phi i64 [ %68, %58 ], [ 256, %31 ]
  %46 = phi i64 [ %66, %58 ], [ %39, %31 ]
  %47 = phi double* [ %69, %58 ], [ %42, %31 ]
  %48 = phi i32 [ %67, %58 ], [ 256, %31 ]
  %49 = icmp ult double* %47, getelementptr inbounds ([544 x double], [544 x double]* @decwin, i64 0, i64 528)
  br i1 %49, label %50, label %58

50:                                               ; preds = %44
  %51 = getelementptr inbounds [257 x i64], [257 x i64]* @intwinbase, i64 0, i64 %45
  %52 = load i64, i64* %51, align 8, !tbaa !19
  %53 = sitofp i64 %52 to double
  %54 = fmul double %53, 0x3EF0000000000000
  %55 = sitofp i64 %46 to double
  %56 = fmul double %54, %55
  store double %56, double* %47, align 8, !tbaa !27
  %57 = getelementptr inbounds double, double* %47, i64 16
  store double %56, double* %57, align 8, !tbaa !27
  br label %58

58:                                               ; preds = %50, %44
  %59 = and i32 %48, 31
  %60 = icmp eq i32 %59, 31
  %61 = getelementptr inbounds double, double* %47, i64 -1023
  %62 = select i1 %60, double* %61, double* %47
  %63 = and i32 %48, 63
  %64 = icmp eq i32 %63, 63
  %65 = sub nsw i64 0, %46
  %66 = select i1 %64, i64 %65, i64 %46
  %67 = add nuw nsw i32 %48, 1
  %68 = add nsw i64 %45, -1
  %69 = getelementptr inbounds double, double* %62, i64 32
  %70 = icmp eq i32 %67, 512
  br i1 %70, label %71, label %44

71:                                               ; preds = %58
  ret void

72:                                               ; preds = %3
  %73 = load double*, double** getelementptr inbounds ([5 x double*], [5 x double*]* @pnts, i64 0, i64 1), align 8, !tbaa !7
  store double 0x3FE013D19C61D971, double* %73, align 8, !tbaa !27
  %74 = getelementptr inbounds double, double* %73, i64 1
  store double 0x3FE0B84F03EBE15E, double* %74, align 8, !tbaa !27
  %75 = getelementptr inbounds double, double* %73, i64 2
  store double 0x3FE22467D1065A74, double* %75, align 8, !tbaa !27
  %76 = getelementptr inbounds double, double* %73, i64 3
  store double 0x3FE4B2C398BBE3C6, double* %76, align 8, !tbaa !27
  %77 = getelementptr inbounds double, double* %73, i64 4
  store double 0x3FE938900B7D4210, double* %77, align 8, !tbaa !27
  %78 = getelementptr inbounds double, double* %73, i64 5
  store double 0x3FF0F8892A4ECED7, double* %78, align 8, !tbaa !27
  %79 = getelementptr inbounds double, double* %73, i64 6
  store double 0x3FFB8F24B0406142, double* %79, align 8, !tbaa !27
  %80 = getelementptr inbounds double, double* %73, i64 7
  store double 0x4014679380E538D4, double* %80, align 8, !tbaa !27
  %81 = load double*, double** getelementptr inbounds ([5 x double*], [5 x double*]* @pnts, i64 0, i64 2), align 16, !tbaa !7
  store double 0x3FE0503ED17CBA53, double* %81, align 8, !tbaa !27
  %82 = getelementptr inbounds double, double* %81, i64 1
  store double 0x3FE33E37A1E0173E, double* %82, align 8, !tbaa !27
  %83 = getelementptr inbounds double, double* %81, i64 2
  store double 0x3FECCC9AEFB18D57, double* %83, align 8, !tbaa !27
  %84 = getelementptr inbounds double, double* %81, i64 3
  store double 0x400480D9D073B426, double* %84, align 8, !tbaa !27
  %85 = load double*, double** getelementptr inbounds ([5 x double*], [5 x double*]* @pnts, i64 0, i64 3), align 8, !tbaa !7
  store double 0x3FE1517A7BDB3895, double* %85, align 8, !tbaa !27
  %86 = getelementptr inbounds double, double* %85, i64 1
  store double 0x3FF4E7AE9144F0FB, double* %86, align 8, !tbaa !27
  %87 = load double*, double** getelementptr inbounds ([5 x double*], [5 x double*]* @pnts, i64 0, i64 4), align 16, !tbaa !7
  store double 0x3FE6A09E667F3BCC, double* %87, align 8, !tbaa !27
  %88 = sub nsw i64 0, %0
  br label %17
}

; Function Attrs: nounwind uwtable
define dso_local i32 @count_bits(%struct.lame_global_flags* nocapture readonly %0, i32* %1, double* %2, %struct.gr_info* %3) local_unnamed_addr #0 {
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #21
  store i32 0, i32* %6, align 4, !tbaa !18
  %8 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %3, i64 0, i32 3
  %9 = load i32, i32* %8, align 4, !tbaa !135
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds [256 x double], [256 x double]* @ipow20, i64 0, i64 %10
  %12 = load double, double* %11, align 8, !tbaa !27
  %13 = fdiv double 8.206000e+03, %12
  br label %19

14:                                               ; preds = %19
  %15 = or i64 %20, 1
  %16 = getelementptr inbounds double, double* %2, i64 %15
  %17 = load double, double* %16, align 8, !tbaa !27
  %18 = fcmp ogt double %17, %13
  br i1 %18, label %210, label %212

19:                                               ; preds = %232, %4
  %20 = phi i64 [ 0, %4 ], [ %233, %232 ]
  %21 = getelementptr inbounds double, double* %2, i64 %20
  %22 = load double, double* %21, align 8, !tbaa !27
  %23 = fcmp ogt double %22, %13
  br i1 %23, label %210, label %14

24:                                               ; preds = %232
  %25 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 60
  %26 = load i32, i32* %25, align 4, !tbaa !347
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %29, label %28

28:                                               ; preds = %24
  tail call void @quantize_xrpow(double* nonnull %2, i32* %1, %struct.gr_info* %3) #21
  br label %30

29:                                               ; preds = %24
  tail call void @quantize_xrpow_ISO(double* nonnull %2, i32* %1, %struct.gr_info* %3) #21
  br label %30

30:                                               ; preds = %29, %28
  %31 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %3, i64 0, i32 6
  %32 = load i32, i32* %31, align 8, !tbaa !138
  %33 = icmp eq i32 %32, 2
  br i1 %33, label %34, label %43

34:                                               ; preds = %30
  %35 = getelementptr inbounds i32, i32* %1, i64 36
  %36 = call fastcc i32 @choose_table_short(i32* %1, i32* nonnull %35, i32* nonnull %6)
  %37 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %3, i64 0, i32 8, i64 0
  store i32 %36, i32* %37, align 8, !tbaa !18
  %38 = getelementptr inbounds i32, i32* %1, i64 576
  %39 = call fastcc i32 @choose_table_short(i32* nonnull %35, i32* nonnull %38, i32* nonnull %6)
  %40 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %3, i64 0, i32 8, i64 1
  store i32 %39, i32* %40, align 4, !tbaa !18
  %41 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %3, i64 0, i32 1
  store i32 288, i32* %41, align 4, !tbaa !134
  %42 = load i32, i32* %6, align 4, !tbaa !18
  br label %210

43:                                               ; preds = %30
  %44 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %44) #21
  store i32 0, i32* %5, align 4, !tbaa !18
  br label %45

45:                                               ; preds = %50, %43
  %46 = phi i64 [ %54, %50 ], [ 576, %43 ]
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %48, label %50

48:                                               ; preds = %45
  %49 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %3, i64 0, i32 2
  store i32 0, i32* %49, align 8, !tbaa !150
  br label %116

50:                                               ; preds = %45
  %51 = add nsw i64 %46, -1
  %52 = getelementptr inbounds i32, i32* %1, i64 %51
  %53 = load i32, i32* %52, align 4, !tbaa !18
  %54 = add nsw i64 %46, -2
  %55 = getelementptr inbounds i32, i32* %1, i64 %54
  %56 = load i32, i32* %55, align 4, !tbaa !18
  %57 = or i32 %56, %53
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %45, label %59

59:                                               ; preds = %50
  %60 = trunc i64 %46 to i32
  %61 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %3, i64 0, i32 2
  store i32 %60, i32* %61, align 8, !tbaa !150
  %62 = icmp sgt i32 %60, 3
  br i1 %62, label %63, label %116

63:                                               ; preds = %59
  %64 = load i8*, i8** getelementptr inbounds ([34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 32, i32 3), align 16
  %65 = and i64 %46, 4294967294
  br label %66

66:                                               ; preds = %86, %63
  %67 = phi i64 [ %65, %63 ], [ %81, %86 ]
  %68 = phi i32 [ 0, %63 ], [ %104, %86 ]
  %69 = phi i32 [ 0, %63 ], [ %110, %86 ]
  %70 = add nsw i64 %67, -1
  %71 = getelementptr inbounds i32, i32* %1, i64 %70
  %72 = load i32, i32* %71, align 4, !tbaa !18
  %73 = add nsw i64 %67, -2
  %74 = getelementptr inbounds i32, i32* %1, i64 %73
  %75 = load i32, i32* %74, align 4, !tbaa !18
  %76 = or i32 %75, %72
  %77 = add nsw i64 %67, -3
  %78 = getelementptr inbounds i32, i32* %1, i64 %77
  %79 = load i32, i32* %78, align 4, !tbaa !18
  %80 = or i32 %76, %79
  %81 = add nsw i64 %67, -4
  %82 = getelementptr inbounds i32, i32* %1, i64 %81
  %83 = load i32, i32* %82, align 4, !tbaa !18
  %84 = or i32 %80, %83
  %85 = icmp ugt i32 %84, 1
  br i1 %85, label %112, label %86

86:                                               ; preds = %66
  %87 = add nsw i32 %72, %68
  %88 = icmp eq i32 %75, 0
  %89 = add nsw i32 %72, 2
  %90 = xor i1 %88, true
  %91 = zext i1 %90 to i32
  %92 = add nsw i32 %87, %91
  %93 = select i1 %88, i32 %72, i32 %89
  %94 = icmp eq i32 %79, 0
  %95 = add nsw i32 %93, 4
  %96 = xor i1 %94, true
  %97 = zext i1 %96 to i32
  %98 = add nsw i32 %92, %97
  %99 = select i1 %94, i32 %93, i32 %95
  %100 = icmp eq i32 %83, 0
  %101 = add nsw i32 %99, 8
  %102 = xor i1 %100, true
  %103 = zext i1 %102 to i32
  %104 = add nsw i32 %98, %103
  %105 = select i1 %100, i32 %99, i32 %101
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i8, i8* %64, i64 %106
  %108 = load i8, i8* %107, align 1, !tbaa !26
  %109 = zext i8 %108 to i32
  %110 = add nuw nsw i32 %69, %109
  %111 = icmp sgt i64 %67, 7
  br i1 %111, label %66, label %114

112:                                              ; preds = %66
  %113 = trunc i64 %67 to i32
  store i32 %68, i32* %5, align 4, !tbaa !18
  br label %116

114:                                              ; preds = %86
  %115 = trunc i64 %81 to i32
  store i32 %104, i32* %5, align 4, !tbaa !18
  br label %116

116:                                              ; preds = %114, %112, %59, %48
  %117 = phi i32 [ %60, %112 ], [ %60, %114 ], [ %60, %59 ], [ 0, %48 ]
  %118 = phi i32 [ %68, %112 ], [ %104, %114 ], [ 0, %59 ], [ 0, %48 ]
  %119 = phi i32 [ %113, %112 ], [ %115, %114 ], [ %60, %59 ], [ 0, %48 ]
  %120 = phi i32 [ %69, %112 ], [ %110, %114 ], [ 0, %59 ], [ 0, %48 ]
  %121 = sub i32 %117, %119
  %122 = icmp slt i32 %120, %121
  %123 = select i1 %122, i32 %120, i32 %121
  %124 = add nsw i32 %123, %118
  %125 = xor i1 %122, true
  %126 = zext i1 %125 to i32
  store i32 %124, i32* %5, align 4, !tbaa !18
  %127 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %3, i64 0, i32 14
  store i32 %126, i32* %127, align 8
  %128 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %3, i64 0, i32 18
  store i32 %124, i32* %128, align 8, !tbaa !299
  %129 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %3, i64 0, i32 1
  store i32 %119, i32* %129, align 4, !tbaa !134
  %130 = icmp eq i32 %119, 0
  br i1 %130, label %202, label %131

131:                                              ; preds = %116
  %132 = icmp eq i32 %32, 0
  br i1 %132, label %133, label %181

133:                                              ; preds = %133, %131
  %134 = phi i64 [ %135, %133 ], [ 0, %131 ]
  %135 = add nuw i64 %134, 1
  %136 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 0, i64 %135
  %137 = load i32, i32* %136, align 4, !tbaa !18
  %138 = icmp slt i32 %137, %119
  br i1 %138, label %133, label %139

139:                                              ; preds = %133
  %140 = and i64 %135, 4294967295
  %141 = getelementptr inbounds [23 x %struct.anon.113], [23 x %struct.anon.113]* @subdv_table, i64 0, i64 %140, i32 0
  %142 = load i32, i32* %141, align 8, !tbaa !348
  %143 = sext i32 %142 to i64
  br label %144

144:                                              ; preds = %144, %139
  %145 = phi i64 [ %152, %144 ], [ %143, %139 ]
  %146 = trunc i64 %145 to i32
  %147 = add i32 %146, 1
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 0, i64 %148
  %150 = load i32, i32* %149, align 4, !tbaa !18
  %151 = icmp sgt i32 %150, %119
  %152 = add i64 %145, -1
  br i1 %151, label %144, label %153

153:                                              ; preds = %144
  %154 = trunc i64 %145 to i32
  %155 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %3, i64 0, i32 10
  store i32 %154, i32* %155, align 8, !tbaa !140
  %156 = getelementptr inbounds [23 x %struct.anon.113], [23 x %struct.anon.113]* @subdv_table, i64 0, i64 %140, i32 1
  %157 = load i32, i32* %156, align 4, !tbaa !350
  %158 = add i32 %154, 2
  br label %159

159:                                              ; preds = %159, %153
  %160 = phi i32 [ %157, %153 ], [ %166, %159 ]
  %161 = add i32 %158, %160
  %162 = zext i32 %161 to i64
  %163 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 0, i64 %162
  %164 = load i32, i32* %163, align 4, !tbaa !18
  %165 = icmp sgt i32 %164, %119
  %166 = add nsw i32 %160, -1
  br i1 %165, label %159, label %167

167:                                              ; preds = %159
  %168 = zext i32 %161 to i64
  %169 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 0, i64 %168
  %170 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %3, i64 0, i32 11
  store i32 %160, i32* %170, align 4, !tbaa !141
  %171 = zext i32 %147 to i64
  %172 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 0, i64 %171
  %173 = load i32, i32* %172, align 4, !tbaa !18
  %174 = load i32, i32* %169, align 4, !tbaa !18
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds i32, i32* %1, i64 %175
  %177 = sext i32 %119 to i64
  %178 = getelementptr inbounds i32, i32* %1, i64 %177
  %179 = call fastcc i32 @choose_table(i32* %176, i32* nonnull %178, i32* nonnull %5) #21
  %180 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %3, i64 0, i32 8, i64 2
  store i32 %179, i32* %180, align 8, !tbaa !18
  br label %188

181:                                              ; preds = %131
  %182 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %3, i64 0, i32 10
  store i32 7, i32* %182, align 8, !tbaa !140
  %183 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %3, i64 0, i32 11
  store i32 13, i32* %183, align 4, !tbaa !141
  %184 = load i32, i32* getelementptr inbounds (%struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 0, i64 8), align 4, !tbaa !18
  %185 = icmp sgt i32 %184, %119
  %186 = select i1 %185, i32 %119, i32 %184
  %187 = sext i32 %119 to i64
  br label %188

188:                                              ; preds = %181, %167
  %189 = phi i64 [ %187, %181 ], [ %175, %167 ]
  %190 = phi i32 [ %186, %181 ], [ %173, %167 ]
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds i32, i32* %1, i64 %191
  %193 = call fastcc i32 @choose_table(i32* %1, i32* %192, i32* nonnull %5) #21
  %194 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %3, i64 0, i32 8, i64 0
  store i32 %193, i32* %194, align 8, !tbaa !18
  %195 = getelementptr inbounds i32, i32* %1, i64 %189
  %196 = call fastcc i32 @choose_table(i32* %192, i32* %195, i32* nonnull %5) #21
  %197 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %3, i64 0, i32 8, i64 1
  store i32 %196, i32* %197, align 4, !tbaa !18
  %198 = load i32, i32* %5, align 4, !tbaa !18
  %199 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %3, i64 0, i32 2
  %200 = load i32, i32* %199, align 8, !tbaa !150
  %201 = load i32, i32* %129, align 4, !tbaa !134
  br label %202

202:                                              ; preds = %188, %116
  %203 = phi i32 [ 0, %116 ], [ %201, %188 ]
  %204 = phi i32 [ %117, %116 ], [ %200, %188 ]
  %205 = phi i32 [ %124, %116 ], [ %198, %188 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %44) #21
  store i32 %205, i32* %6, align 4, !tbaa !18
  %206 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %3, i64 0, i32 2
  %207 = sub i32 %204, %203
  %208 = lshr i32 %207, 2
  store i32 %208, i32* %206, align 8, !tbaa !150
  %209 = lshr i32 %203, 1
  store i32 %209, i32* %129, align 4, !tbaa !134
  br label %210

210:                                              ; preds = %227, %222, %217, %212, %202, %34, %19, %14
  %211 = phi i32 [ %205, %202 ], [ %42, %34 ], [ 100000, %227 ], [ 100000, %222 ], [ 100000, %217 ], [ 100000, %212 ], [ 100000, %14 ], [ 100000, %19 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #21
  ret i32 %211

212:                                              ; preds = %14
  %213 = add nuw nsw i64 %20, 2
  %214 = getelementptr inbounds double, double* %2, i64 %213
  %215 = load double, double* %214, align 8, !tbaa !27
  %216 = fcmp ogt double %215, %13
  br i1 %216, label %210, label %217

217:                                              ; preds = %212
  %218 = add nuw nsw i64 %20, 3
  %219 = getelementptr inbounds double, double* %2, i64 %218
  %220 = load double, double* %219, align 8, !tbaa !27
  %221 = fcmp ogt double %220, %13
  br i1 %221, label %210, label %222

222:                                              ; preds = %217
  %223 = add nuw nsw i64 %20, 4
  %224 = getelementptr inbounds double, double* %2, i64 %223
  %225 = load double, double* %224, align 8, !tbaa !27
  %226 = fcmp ogt double %225, %13
  br i1 %226, label %210, label %227

227:                                              ; preds = %222
  %228 = add nuw nsw i64 %20, 5
  %229 = getelementptr inbounds double, double* %2, i64 %228
  %230 = load double, double* %229, align 8, !tbaa !27
  %231 = fcmp ogt double %230, %13
  br i1 %231, label %210, label %232

232:                                              ; preds = %227
  %233 = add nuw nsw i64 %20, 6
  %234 = icmp eq i64 %233, 576
  br i1 %234, label %24, label %19
}

; Function Attrs: nofree norecurse nounwind uwtable
define internal fastcc i32 @choose_table_short(i32* readonly %0, i32* readnone %1, i32* nocapture %2) unnamed_addr #5 {
  %4 = icmp ult i32* %0, %1
  br i1 %4, label %5, label %391

5:                                                ; preds = %3
  %6 = ptrtoint i32* %0 to i64
  %7 = bitcast i32* %1 to i8*
  %8 = xor i64 %6, -1
  %9 = getelementptr i8, i8* %7, i64 %8
  %10 = ptrtoint i8* %9 to i64
  %11 = lshr i64 %10, 3
  %12 = add nuw nsw i64 %11, 1
  %13 = and i64 %12, 3
  %14 = icmp ult i8* %9, inttoptr (i64 24 to i8*)
  br i1 %14, label %55, label %15

15:                                               ; preds = %5
  %16 = sub nsw i64 %12, %13
  br label %17

17:                                               ; preds = %17, %15
  %18 = phi i32 [ 0, %15 ], [ %52, %17 ]
  %19 = phi i32* [ %0, %15 ], [ %49, %17 ]
  %20 = phi i64 [ %16, %15 ], [ %53, %17 ]
  %21 = getelementptr inbounds i32, i32* %19, i64 1
  %22 = load i32, i32* %19, align 4, !tbaa !18
  %23 = icmp slt i32 %18, %22
  %24 = select i1 %23, i32 %22, i32 %18
  %25 = getelementptr inbounds i32, i32* %19, i64 2
  %26 = load i32, i32* %21, align 4, !tbaa !18
  %27 = icmp slt i32 %24, %26
  %28 = select i1 %27, i32 %26, i32 %24
  %29 = getelementptr inbounds i32, i32* %19, i64 3
  %30 = load i32, i32* %25, align 4, !tbaa !18
  %31 = icmp slt i32 %28, %30
  %32 = select i1 %31, i32 %30, i32 %28
  %33 = getelementptr inbounds i32, i32* %19, i64 4
  %34 = load i32, i32* %29, align 4, !tbaa !18
  %35 = icmp slt i32 %32, %34
  %36 = select i1 %35, i32 %34, i32 %32
  %37 = getelementptr inbounds i32, i32* %19, i64 5
  %38 = load i32, i32* %33, align 4, !tbaa !18
  %39 = icmp slt i32 %36, %38
  %40 = select i1 %39, i32 %38, i32 %36
  %41 = getelementptr inbounds i32, i32* %19, i64 6
  %42 = load i32, i32* %37, align 4, !tbaa !18
  %43 = icmp slt i32 %40, %42
  %44 = select i1 %43, i32 %42, i32 %40
  %45 = getelementptr inbounds i32, i32* %19, i64 7
  %46 = load i32, i32* %41, align 4, !tbaa !18
  %47 = icmp slt i32 %44, %46
  %48 = select i1 %47, i32 %46, i32 %44
  %49 = getelementptr inbounds i32, i32* %19, i64 8
  %50 = load i32, i32* %45, align 4, !tbaa !18
  %51 = icmp slt i32 %48, %50
  %52 = select i1 %51, i32 %50, i32 %48
  %53 = add i64 %20, -4
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %55, label %17

55:                                               ; preds = %17, %5
  %56 = phi i32 [ undef, %5 ], [ %52, %17 ]
  %57 = phi i32 [ 0, %5 ], [ %52, %17 ]
  %58 = phi i32* [ %0, %5 ], [ %49, %17 ]
  %59 = icmp eq i64 %13, 0
  br i1 %59, label %74, label %60

60:                                               ; preds = %60, %55
  %61 = phi i32 [ %71, %60 ], [ %57, %55 ]
  %62 = phi i32* [ %68, %60 ], [ %58, %55 ]
  %63 = phi i64 [ %72, %60 ], [ %13, %55 ]
  %64 = getelementptr inbounds i32, i32* %62, i64 1
  %65 = load i32, i32* %62, align 4, !tbaa !18
  %66 = icmp slt i32 %61, %65
  %67 = select i1 %66, i32 %65, i32 %61
  %68 = getelementptr inbounds i32, i32* %62, i64 2
  %69 = load i32, i32* %64, align 4, !tbaa !18
  %70 = icmp slt i32 %67, %69
  %71 = select i1 %70, i32 %69, i32 %67
  %72 = add i64 %63, -1
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %74, label %60, !llvm.loop !351

74:                                               ; preds = %60, %55
  %75 = phi i32 [ %56, %55 ], [ %71, %60 ]
  %76 = icmp sgt i32 %75, 8206
  br i1 %76, label %77, label %78

77:                                               ; preds = %74
  store i32 100000, i32* %2, align 4, !tbaa !18
  br label %391

78:                                               ; preds = %74
  %79 = icmp slt i32 %75, 16
  br i1 %79, label %80, label %217

80:                                               ; preds = %78
  %81 = icmp eq i32 %75, 0
  br i1 %81, label %391, label %82

82:                                               ; preds = %80
  %83 = add nsw i32 %75, -1
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds [15 x i32], [15 x i32]* @huf_tbl_noESC, i64 0, i64 %84
  %86 = load i32, i32* %85, align 4, !tbaa !18
  %87 = zext i32 %86 to i64
  %88 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 %87, i32 3
  %89 = load i8*, i8** %88, align 8, !tbaa !153
  br label %90

90:                                               ; preds = %90, %82
  %91 = phi i32 [ 0, %82 ], [ %141, %90 ]
  %92 = phi i32 [ 0, %82 ], [ %147, %90 ]
  %93 = phi i32* [ getelementptr inbounds ([288 x i32], [288 x i32]* @cb_esc_buf, i64 0, i64 0), %82 ], [ %142, %90 ]
  %94 = phi i32* [ %0, %82 ], [ %148, %90 ]
  %95 = getelementptr inbounds i32, i32* %94, i64 3
  %96 = load i32, i32* %95, align 4, !tbaa !18
  %97 = getelementptr inbounds i32, i32* %94, i64 1
  %98 = load i32, i32* %94, align 4, !tbaa !18
  %99 = shl i32 %98, 4
  %100 = add i32 %99, %96
  store i32 %100, i32* %93, align 4, !tbaa !18
  %101 = getelementptr inbounds i32, i32* %94, i64 4
  %102 = load i32, i32* %101, align 4, !tbaa !18
  %103 = load i32, i32* %97, align 4, !tbaa !18
  %104 = insertelement <4 x i32> undef, i32 %96, i32 0
  %105 = insertelement <4 x i32> %104, i32 %98, i32 1
  %106 = insertelement <4 x i32> %105, i32 %102, i32 2
  %107 = insertelement <4 x i32> %106, i32 %103, i32 3
  %108 = icmp ne <4 x i32> %107, zeroinitializer
  %109 = zext <4 x i1> %108 to <4 x i32>
  %110 = getelementptr inbounds i32, i32* %93, i64 1
  %111 = sext i32 %100 to i64
  %112 = getelementptr inbounds i8, i8* %89, i64 %111
  %113 = load i8, i8* %112, align 1, !tbaa !26
  %114 = zext i8 %113 to i32
  %115 = add nsw i32 %92, %114
  %116 = getelementptr inbounds i32, i32* %94, i64 2
  %117 = shl i32 %103, 4
  %118 = add i32 %117, %102
  %119 = getelementptr inbounds i32, i32* %93, i64 2
  store i32 %118, i32* %110, align 4, !tbaa !18
  %120 = sext i32 %118 to i64
  %121 = getelementptr inbounds i8, i8* %89, i64 %120
  %122 = load i8, i8* %121, align 1, !tbaa !26
  %123 = zext i8 %122 to i32
  %124 = add nsw i32 %115, %123
  %125 = getelementptr inbounds i32, i32* %94, i64 5
  %126 = load i32, i32* %125, align 4, !tbaa !18
  %127 = load i32, i32* %116, align 4, !tbaa !18
  %128 = icmp ne i32 %127, 0
  %129 = shl i32 %127, 4
  %130 = zext i1 %128 to i32
  %131 = icmp ne i32 %126, 0
  %132 = add i32 %129, %126
  %133 = zext i1 %131 to i32
  %134 = shufflevector <4 x i32> %109, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %135 = add <4 x i32> %134, %109
  %136 = shufflevector <4 x i32> %135, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %137 = add <4 x i32> %135, %136
  %138 = extractelement <4 x i32> %137, i32 0
  %139 = add i32 %138, %133
  %140 = add i32 %139, %130
  %141 = add i32 %140, %91
  %142 = getelementptr inbounds i32, i32* %93, i64 3
  store i32 %132, i32* %119, align 4, !tbaa !18
  %143 = sext i32 %132 to i64
  %144 = getelementptr inbounds i8, i8* %89, i64 %143
  %145 = load i8, i8* %144, align 1, !tbaa !26
  %146 = zext i8 %145 to i32
  %147 = add nsw i32 %124, %146
  %148 = getelementptr inbounds i32, i32* %94, i64 6
  %149 = icmp ult i32* %148, %1
  br i1 %149, label %90, label %150

150:                                              ; preds = %90
  store i32* %142, i32** @cb_esc_end, align 8, !tbaa !7
  %151 = add nsw i32 %147, %141
  switch i32 %86, label %212 [
    i32 7, label %152
    i32 10, label %152
    i32 2, label %172
    i32 5, label %172
    i32 13, label %195
  ]

152:                                              ; preds = %150, %150
  %153 = add nuw nsw i32 %86, 1
  %154 = zext i32 %153 to i64
  %155 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 %154, i32 3
  %156 = load i8*, i8** %155, align 8, !tbaa !153
  br label %157

157:                                              ; preds = %157, %152
  %158 = phi i32 [ %141, %152 ], [ %166, %157 ]
  %159 = phi i32* [ getelementptr inbounds ([288 x i32], [288 x i32]* @cb_esc_buf, i64 0, i64 0), %152 ], [ %160, %157 ]
  %160 = getelementptr inbounds i32, i32* %159, i64 1
  %161 = load i32, i32* %159, align 4, !tbaa !18
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds i8, i8* %156, i64 %162
  %164 = load i8, i8* %163, align 1, !tbaa !26
  %165 = zext i8 %164 to i32
  %166 = add nsw i32 %158, %165
  %167 = icmp ult i32* %160, %142
  br i1 %167, label %157, label %168

168:                                              ; preds = %157
  %169 = icmp sgt i32 %151, %166
  %170 = select i1 %169, i32 %153, i32 %86
  %171 = select i1 %169, i32 %166, i32 %151
  br label %172

172:                                              ; preds = %168, %150, %150
  %173 = phi i32 [ %86, %150 ], [ %86, %150 ], [ %170, %168 ]
  %174 = phi i32 [ %151, %150 ], [ %151, %150 ], [ %171, %168 ]
  %175 = phi i32 [ %86, %150 ], [ %86, %150 ], [ %153, %168 ]
  %176 = add nsw i32 %175, 1
  %177 = zext i32 %176 to i64
  %178 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 %177, i32 3
  %179 = load i8*, i8** %178, align 8, !tbaa !153
  br label %180

180:                                              ; preds = %180, %172
  %181 = phi i32 [ %141, %172 ], [ %189, %180 ]
  %182 = phi i32* [ getelementptr inbounds ([288 x i32], [288 x i32]* @cb_esc_buf, i64 0, i64 0), %172 ], [ %183, %180 ]
  %183 = getelementptr inbounds i32, i32* %182, i64 1
  %184 = load i32, i32* %182, align 4, !tbaa !18
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds i8, i8* %179, i64 %185
  %187 = load i8, i8* %186, align 1, !tbaa !26
  %188 = zext i8 %187 to i32
  %189 = add nsw i32 %181, %188
  %190 = icmp ult i32* %183, %142
  br i1 %190, label %180, label %191

191:                                              ; preds = %180
  %192 = icmp sgt i32 %174, %189
  %193 = select i1 %192, i32 %176, i32 %173
  %194 = select i1 %192, i32 %189, i32 %174
  br label %212

195:                                              ; preds = %150
  %196 = load i8*, i8** getelementptr inbounds ([34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 15, i32 3), align 8, !tbaa !153
  br label %197

197:                                              ; preds = %197, %195
  %198 = phi i32 [ %141, %195 ], [ %206, %197 ]
  %199 = phi i32* [ getelementptr inbounds ([288 x i32], [288 x i32]* @cb_esc_buf, i64 0, i64 0), %195 ], [ %200, %197 ]
  %200 = getelementptr inbounds i32, i32* %199, i64 1
  %201 = load i32, i32* %199, align 4, !tbaa !18
  %202 = sext i32 %201 to i64
  %203 = getelementptr inbounds i8, i8* %196, i64 %202
  %204 = load i8, i8* %203, align 1, !tbaa !26
  %205 = zext i8 %204 to i32
  %206 = add nsw i32 %198, %205
  %207 = icmp ult i32* %200, %142
  br i1 %207, label %197, label %208

208:                                              ; preds = %197
  %209 = icmp sgt i32 %151, %206
  %210 = select i1 %209, i32 15, i32 13
  %211 = select i1 %209, i32 %206, i32 %151
  br label %212

212:                                              ; preds = %208, %191, %150
  %213 = phi i32 [ %86, %150 ], [ %193, %191 ], [ %210, %208 ]
  %214 = phi i32 [ %151, %150 ], [ %194, %191 ], [ %211, %208 ]
  %215 = load i32, i32* %2, align 4, !tbaa !18
  %216 = add nsw i32 %215, %214
  store i32 %216, i32* %2, align 4, !tbaa !18
  br label %391

217:                                              ; preds = %78
  %218 = add nsw i32 %75, -15
  %219 = load i32, i32* getelementptr inbounds ([34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 24, i32 1), align 4, !tbaa !352
  %220 = icmp slt i32 %219, %218
  br i1 %220, label %221, label %224

221:                                              ; preds = %217
  %222 = load i32, i32* getelementptr inbounds ([34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 25, i32 1), align 4, !tbaa !352
  %223 = icmp slt i32 %222, %218
  br i1 %223, label %393, label %224

224:                                              ; preds = %408, %405, %402, %399, %396, %393, %221, %217
  %225 = phi i32 [ 31, %408 ], [ 30, %405 ], [ 29, %402 ], [ 28, %399 ], [ 27, %396 ], [ 26, %393 ], [ 25, %221 ], [ 24, %217 ]
  %226 = zext i32 %225 to i64
  %227 = add nsw i64 %226, -8
  %228 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 %227, i32 1
  %229 = load i32, i32* %228, align 4, !tbaa !352
  %230 = icmp slt i32 %229, %218
  br i1 %230, label %231, label %235

231:                                              ; preds = %224
  %232 = add nsw i64 %226, -7
  %233 = add nsw i32 %225, -7
  %234 = icmp eq i64 %227, 23
  br i1 %234, label %238, label %411

235:                                              ; preds = %459, %451, %443, %435, %427, %419, %411, %224
  %236 = phi i64 [ %227, %224 ], [ %232, %411 ], [ %416, %419 ], [ %424, %427 ], [ %432, %435 ], [ %440, %443 ], [ %448, %451 ], [ %456, %459 ]
  %237 = trunc i64 %236 to i32
  br label %238

238:                                              ; preds = %459, %455, %447, %439, %431, %423, %415, %408, %235, %231
  %239 = phi i32 [ 32, %408 ], [ %225, %235 ], [ %225, %231 ], [ %225, %455 ], [ %225, %447 ], [ %225, %439 ], [ %225, %431 ], [ %225, %423 ], [ %225, %415 ], [ %225, %459 ]
  %240 = phi i64 [ 32, %408 ], [ %226, %235 ], [ %226, %231 ], [ %226, %455 ], [ %226, %447 ], [ %226, %439 ], [ %226, %431 ], [ %226, %423 ], [ %226, %415 ], [ %226, %459 ]
  %241 = phi i32 [ 24, %408 ], [ %237, %235 ], [ %233, %231 ], [ %417, %415 ], [ %425, %423 ], [ %433, %431 ], [ %441, %439 ], [ %449, %447 ], [ %457, %455 ], [ %225, %459 ]
  %242 = sext i32 %241 to i64
  %243 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 %242, i32 0
  %244 = load i32, i32* %243, align 8, !tbaa !155
  %245 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 %240, i32 0
  %246 = load i32, i32* %245, align 8, !tbaa !155
  %247 = load i8*, i8** getelementptr inbounds ([34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 16, i32 3), align 16, !tbaa !153
  %248 = load i8*, i8** getelementptr inbounds ([34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 24, i32 3), align 16, !tbaa !153
  br label %249

249:                                              ; preds = %368, %238
  %250 = phi i32* [ %0, %238 ], [ %382, %368 ]
  %251 = phi i32 [ 0, %238 ], [ %369, %368 ]
  %252 = phi i32 [ 0, %238 ], [ %377, %368 ]
  %253 = phi i32 [ 0, %238 ], [ %381, %368 ]
  %254 = getelementptr inbounds i32, i32* %250, i64 3
  %255 = load i32, i32* %254, align 4, !tbaa !18
  %256 = getelementptr inbounds i32, i32* %250, i64 1
  %257 = load i32, i32* %250, align 4, !tbaa !18
  %258 = icmp eq i32 %257, 0
  br i1 %258, label %268, label %259

259:                                              ; preds = %249
  %260 = add nsw i32 %251, 1
  %261 = icmp sgt i32 %257, 14
  %262 = select i1 %261, i32 %244, i32 0
  %263 = add nsw i32 %262, %252
  %264 = select i1 %261, i32 %246, i32 0
  %265 = add nsw i32 %264, %253
  %266 = shl i32 %257, 4
  %267 = select i1 %261, i32 240, i32 %266
  br label %268

268:                                              ; preds = %259, %249
  %269 = phi i32 [ %260, %259 ], [ %251, %249 ]
  %270 = phi i32 [ %263, %259 ], [ %252, %249 ]
  %271 = phi i32 [ %265, %259 ], [ %253, %249 ]
  %272 = phi i32 [ %267, %259 ], [ 0, %249 ]
  %273 = icmp eq i32 %255, 0
  br i1 %273, label %283, label %274

274:                                              ; preds = %268
  %275 = add nsw i32 %269, 1
  %276 = icmp sgt i32 %255, 14
  %277 = select i1 %276, i32 %244, i32 0
  %278 = add nsw i32 %270, %277
  %279 = select i1 %276, i32 %246, i32 0
  %280 = add nsw i32 %271, %279
  %281 = select i1 %276, i32 15, i32 %255
  %282 = add nsw i32 %272, %281
  br label %283

283:                                              ; preds = %274, %268
  %284 = phi i32 [ %275, %274 ], [ %269, %268 ]
  %285 = phi i32 [ %278, %274 ], [ %270, %268 ]
  %286 = phi i32 [ %280, %274 ], [ %271, %268 ]
  %287 = phi i32 [ %282, %274 ], [ %272, %268 ]
  %288 = sext i32 %287 to i64
  %289 = getelementptr inbounds i8, i8* %247, i64 %288
  %290 = load i8, i8* %289, align 1, !tbaa !26
  %291 = zext i8 %290 to i32
  %292 = add nsw i32 %285, %291
  %293 = getelementptr inbounds i8, i8* %248, i64 %288
  %294 = load i8, i8* %293, align 1, !tbaa !26
  %295 = zext i8 %294 to i32
  %296 = add nsw i32 %286, %295
  %297 = getelementptr inbounds i32, i32* %250, i64 4
  %298 = load i32, i32* %297, align 4, !tbaa !18
  %299 = getelementptr inbounds i32, i32* %250, i64 2
  %300 = load i32, i32* %256, align 4, !tbaa !18
  %301 = icmp eq i32 %300, 0
  br i1 %301, label %311, label %302

302:                                              ; preds = %283
  %303 = add nsw i32 %284, 1
  %304 = icmp sgt i32 %300, 14
  %305 = select i1 %304, i32 %244, i32 0
  %306 = add nsw i32 %305, %292
  %307 = select i1 %304, i32 %246, i32 0
  %308 = add nsw i32 %307, %296
  %309 = shl i32 %300, 4
  %310 = select i1 %304, i32 240, i32 %309
  br label %311

311:                                              ; preds = %302, %283
  %312 = phi i32 [ %303, %302 ], [ %284, %283 ]
  %313 = phi i32 [ %306, %302 ], [ %292, %283 ]
  %314 = phi i32 [ %308, %302 ], [ %296, %283 ]
  %315 = phi i32 [ %310, %302 ], [ 0, %283 ]
  %316 = icmp eq i32 %298, 0
  br i1 %316, label %326, label %317

317:                                              ; preds = %311
  %318 = add nsw i32 %312, 1
  %319 = icmp sgt i32 %298, 14
  %320 = select i1 %319, i32 %244, i32 0
  %321 = add nsw i32 %313, %320
  %322 = select i1 %319, i32 %246, i32 0
  %323 = add nsw i32 %314, %322
  %324 = select i1 %319, i32 15, i32 %298
  %325 = add nsw i32 %315, %324
  br label %326

326:                                              ; preds = %317, %311
  %327 = phi i32 [ %318, %317 ], [ %312, %311 ]
  %328 = phi i32 [ %321, %317 ], [ %313, %311 ]
  %329 = phi i32 [ %323, %317 ], [ %314, %311 ]
  %330 = phi i32 [ %325, %317 ], [ %315, %311 ]
  %331 = sext i32 %330 to i64
  %332 = getelementptr inbounds i8, i8* %247, i64 %331
  %333 = load i8, i8* %332, align 1, !tbaa !26
  %334 = zext i8 %333 to i32
  %335 = add nsw i32 %328, %334
  %336 = getelementptr inbounds i8, i8* %248, i64 %331
  %337 = load i8, i8* %336, align 1, !tbaa !26
  %338 = zext i8 %337 to i32
  %339 = add nsw i32 %329, %338
  %340 = getelementptr inbounds i32, i32* %250, i64 5
  %341 = load i32, i32* %340, align 4, !tbaa !18
  %342 = load i32, i32* %299, align 4, !tbaa !18
  %343 = icmp eq i32 %342, 0
  br i1 %343, label %353, label %344

344:                                              ; preds = %326
  %345 = add nsw i32 %327, 1
  %346 = icmp sgt i32 %342, 14
  %347 = select i1 %346, i32 %244, i32 0
  %348 = add nsw i32 %347, %335
  %349 = select i1 %346, i32 %246, i32 0
  %350 = add nsw i32 %349, %339
  %351 = shl i32 %342, 4
  %352 = select i1 %346, i32 240, i32 %351
  br label %353

353:                                              ; preds = %344, %326
  %354 = phi i32 [ %345, %344 ], [ %327, %326 ]
  %355 = phi i32 [ %348, %344 ], [ %335, %326 ]
  %356 = phi i32 [ %350, %344 ], [ %339, %326 ]
  %357 = phi i32 [ %352, %344 ], [ 0, %326 ]
  %358 = icmp eq i32 %341, 0
  br i1 %358, label %368, label %359

359:                                              ; preds = %353
  %360 = add nsw i32 %354, 1
  %361 = icmp sgt i32 %341, 14
  %362 = select i1 %361, i32 %244, i32 0
  %363 = add nsw i32 %355, %362
  %364 = select i1 %361, i32 %246, i32 0
  %365 = add nsw i32 %356, %364
  %366 = select i1 %361, i32 15, i32 %341
  %367 = add nsw i32 %357, %366
  br label %368

368:                                              ; preds = %359, %353
  %369 = phi i32 [ %360, %359 ], [ %354, %353 ]
  %370 = phi i32 [ %363, %359 ], [ %355, %353 ]
  %371 = phi i32 [ %365, %359 ], [ %356, %353 ]
  %372 = phi i32 [ %367, %359 ], [ %357, %353 ]
  %373 = sext i32 %372 to i64
  %374 = getelementptr inbounds i8, i8* %247, i64 %373
  %375 = load i8, i8* %374, align 1, !tbaa !26
  %376 = zext i8 %375 to i32
  %377 = add nsw i32 %370, %376
  %378 = getelementptr inbounds i8, i8* %248, i64 %373
  %379 = load i8, i8* %378, align 1, !tbaa !26
  %380 = zext i8 %379 to i32
  %381 = add nsw i32 %371, %380
  %382 = getelementptr i32, i32* %250, i64 6
  %383 = icmp ult i32* %382, %1
  br i1 %383, label %249, label %384

384:                                              ; preds = %368
  %385 = icmp sgt i32 %377, %381
  %386 = select i1 %385, i32 %239, i32 %241
  %387 = select i1 %385, i32 %381, i32 %377
  %388 = add nsw i32 %387, %369
  %389 = load i32, i32* %2, align 4, !tbaa !18
  %390 = add nsw i32 %388, %389
  store i32 %390, i32* %2, align 4, !tbaa !18
  br label %391

391:                                              ; preds = %384, %212, %80, %77, %3
  %392 = phi i32 [ -1, %77 ], [ 0, %80 ], [ %213, %212 ], [ %386, %384 ], [ 0, %3 ]
  ret i32 %392

393:                                              ; preds = %221
  %394 = load i32, i32* getelementptr inbounds ([34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 26, i32 1), align 4, !tbaa !352
  %395 = icmp slt i32 %394, %218
  br i1 %395, label %396, label %224

396:                                              ; preds = %393
  %397 = load i32, i32* getelementptr inbounds ([34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 27, i32 1), align 4, !tbaa !352
  %398 = icmp slt i32 %397, %218
  br i1 %398, label %399, label %224

399:                                              ; preds = %396
  %400 = load i32, i32* getelementptr inbounds ([34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 28, i32 1), align 4, !tbaa !352
  %401 = icmp slt i32 %400, %218
  br i1 %401, label %402, label %224

402:                                              ; preds = %399
  %403 = load i32, i32* getelementptr inbounds ([34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 29, i32 1), align 4, !tbaa !352
  %404 = icmp slt i32 %403, %218
  br i1 %404, label %405, label %224

405:                                              ; preds = %402
  %406 = load i32, i32* getelementptr inbounds ([34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 30, i32 1), align 4, !tbaa !352
  %407 = icmp slt i32 %406, %218
  br i1 %407, label %408, label %224

408:                                              ; preds = %405
  %409 = load i32, i32* getelementptr inbounds ([34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 31, i32 1), align 4, !tbaa !352
  %410 = icmp slt i32 %409, %218
  br i1 %410, label %238, label %224

411:                                              ; preds = %231
  %412 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 %232, i32 1
  %413 = load i32, i32* %412, align 4, !tbaa !352
  %414 = icmp slt i32 %413, %218
  br i1 %414, label %415, label %235

415:                                              ; preds = %411
  %416 = add nsw i64 %226, -6
  %417 = add nsw i32 %225, -6
  %418 = icmp ult i64 %232, 23
  br i1 %418, label %419, label %238

419:                                              ; preds = %415
  %420 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 %416, i32 1
  %421 = load i32, i32* %420, align 4, !tbaa !352
  %422 = icmp slt i32 %421, %218
  br i1 %422, label %423, label %235

423:                                              ; preds = %419
  %424 = add nsw i64 %226, -5
  %425 = add nsw i32 %225, -5
  %426 = icmp ult i64 %416, 23
  br i1 %426, label %427, label %238

427:                                              ; preds = %423
  %428 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 %424, i32 1
  %429 = load i32, i32* %428, align 4, !tbaa !352
  %430 = icmp slt i32 %429, %218
  br i1 %430, label %431, label %235

431:                                              ; preds = %427
  %432 = add nsw i64 %226, -4
  %433 = add nsw i32 %225, -4
  %434 = icmp ult i64 %424, 23
  br i1 %434, label %435, label %238

435:                                              ; preds = %431
  %436 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 %432, i32 1
  %437 = load i32, i32* %436, align 4, !tbaa !352
  %438 = icmp slt i32 %437, %218
  br i1 %438, label %439, label %235

439:                                              ; preds = %435
  %440 = add nsw i64 %226, -3
  %441 = add nsw i32 %225, -3
  %442 = icmp ult i64 %432, 23
  br i1 %442, label %443, label %238

443:                                              ; preds = %439
  %444 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 %440, i32 1
  %445 = load i32, i32* %444, align 4, !tbaa !352
  %446 = icmp slt i32 %445, %218
  br i1 %446, label %447, label %235

447:                                              ; preds = %443
  %448 = add nsw i64 %226, -2
  %449 = add nsw i32 %225, -2
  %450 = icmp ult i64 %440, 23
  br i1 %450, label %451, label %238

451:                                              ; preds = %447
  %452 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 %448, i32 1
  %453 = load i32, i32* %452, align 4, !tbaa !352
  %454 = icmp slt i32 %453, %218
  br i1 %454, label %455, label %235

455:                                              ; preds = %451
  %456 = add nsw i64 %226, -1
  %457 = add nsw i32 %225, -1
  %458 = icmp ult i64 %448, 23
  br i1 %458, label %459, label %238

459:                                              ; preds = %455
  %460 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 %456, i32 1
  %461 = load i32, i32* %460, align 4, !tbaa !352
  %462 = icmp slt i32 %461, %218
  br i1 %462, label %238, label %235
}

; Function Attrs: nofree norecurse nounwind uwtable
define internal fastcc i32 @choose_table(i32* readonly %0, i32* readnone %1, i32* nocapture %2) unnamed_addr #5 {
  %4 = icmp ult i32* %0, %1
  br i1 %4, label %5, label %269

5:                                                ; preds = %3
  %6 = ptrtoint i32* %0 to i64
  %7 = bitcast i32* %1 to i8*
  %8 = xor i64 %6, -1
  %9 = getelementptr i8, i8* %7, i64 %8
  %10 = ptrtoint i8* %9 to i64
  %11 = lshr i64 %10, 3
  %12 = add nuw nsw i64 %11, 1
  %13 = and i64 %12, 3
  %14 = icmp ult i8* %9, inttoptr (i64 24 to i8*)
  br i1 %14, label %55, label %15

15:                                               ; preds = %5
  %16 = sub nsw i64 %12, %13
  br label %17

17:                                               ; preds = %17, %15
  %18 = phi i32 [ 0, %15 ], [ %52, %17 ]
  %19 = phi i32* [ %0, %15 ], [ %49, %17 ]
  %20 = phi i64 [ %16, %15 ], [ %53, %17 ]
  %21 = getelementptr inbounds i32, i32* %19, i64 1
  %22 = load i32, i32* %19, align 4, !tbaa !18
  %23 = icmp slt i32 %18, %22
  %24 = select i1 %23, i32 %22, i32 %18
  %25 = getelementptr inbounds i32, i32* %19, i64 2
  %26 = load i32, i32* %21, align 4, !tbaa !18
  %27 = icmp slt i32 %24, %26
  %28 = select i1 %27, i32 %26, i32 %24
  %29 = getelementptr inbounds i32, i32* %19, i64 3
  %30 = load i32, i32* %25, align 4, !tbaa !18
  %31 = icmp slt i32 %28, %30
  %32 = select i1 %31, i32 %30, i32 %28
  %33 = getelementptr inbounds i32, i32* %19, i64 4
  %34 = load i32, i32* %29, align 4, !tbaa !18
  %35 = icmp slt i32 %32, %34
  %36 = select i1 %35, i32 %34, i32 %32
  %37 = getelementptr inbounds i32, i32* %19, i64 5
  %38 = load i32, i32* %33, align 4, !tbaa !18
  %39 = icmp slt i32 %36, %38
  %40 = select i1 %39, i32 %38, i32 %36
  %41 = getelementptr inbounds i32, i32* %19, i64 6
  %42 = load i32, i32* %37, align 4, !tbaa !18
  %43 = icmp slt i32 %40, %42
  %44 = select i1 %43, i32 %42, i32 %40
  %45 = getelementptr inbounds i32, i32* %19, i64 7
  %46 = load i32, i32* %41, align 4, !tbaa !18
  %47 = icmp slt i32 %44, %46
  %48 = select i1 %47, i32 %46, i32 %44
  %49 = getelementptr inbounds i32, i32* %19, i64 8
  %50 = load i32, i32* %45, align 4, !tbaa !18
  %51 = icmp slt i32 %48, %50
  %52 = select i1 %51, i32 %50, i32 %48
  %53 = add i64 %20, -4
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %55, label %17

55:                                               ; preds = %17, %5
  %56 = phi i32 [ undef, %5 ], [ %52, %17 ]
  %57 = phi i32 [ 0, %5 ], [ %52, %17 ]
  %58 = phi i32* [ %0, %5 ], [ %49, %17 ]
  %59 = icmp eq i64 %13, 0
  br i1 %59, label %74, label %60

60:                                               ; preds = %60, %55
  %61 = phi i32 [ %71, %60 ], [ %57, %55 ]
  %62 = phi i32* [ %68, %60 ], [ %58, %55 ]
  %63 = phi i64 [ %72, %60 ], [ %13, %55 ]
  %64 = getelementptr inbounds i32, i32* %62, i64 1
  %65 = load i32, i32* %62, align 4, !tbaa !18
  %66 = icmp slt i32 %61, %65
  %67 = select i1 %66, i32 %65, i32 %61
  %68 = getelementptr inbounds i32, i32* %62, i64 2
  %69 = load i32, i32* %64, align 4, !tbaa !18
  %70 = icmp slt i32 %67, %69
  %71 = select i1 %70, i32 %69, i32 %67
  %72 = add i64 %63, -1
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %74, label %60, !llvm.loop !353

74:                                               ; preds = %60, %55
  %75 = phi i32 [ %56, %55 ], [ %71, %60 ]
  %76 = icmp sgt i32 %75, 8206
  br i1 %76, label %77, label %78

77:                                               ; preds = %74
  store i32 100000, i32* %2, align 4, !tbaa !18
  br label %269

78:                                               ; preds = %74
  %79 = icmp slt i32 %75, 16
  br i1 %79, label %80, label %181

80:                                               ; preds = %78
  %81 = icmp eq i32 %75, 0
  br i1 %81, label %269, label %82

82:                                               ; preds = %80
  %83 = add nsw i32 %75, -1
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds [15 x i32], [15 x i32]* @huf_tbl_noESC, i64 0, i64 %84
  %86 = load i32, i32* %85, align 4, !tbaa !18
  %87 = zext i32 %86 to i64
  %88 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 %87, i32 3
  %89 = load i8*, i8** %88, align 8, !tbaa !153
  br label %90

90:                                               ; preds = %90, %82
  %91 = phi i32 [ 0, %82 ], [ %106, %90 ]
  %92 = phi i32 [ 0, %82 ], [ %112, %90 ]
  %93 = phi i32* [ getelementptr inbounds ([288 x i32], [288 x i32]* @cb_esc_buf, i64 0, i64 0), %82 ], [ %107, %90 ]
  %94 = phi i32* [ %0, %82 ], [ %97, %90 ]
  %95 = getelementptr inbounds i32, i32* %94, i64 1
  %96 = load i32, i32* %94, align 4, !tbaa !18
  %97 = getelementptr inbounds i32, i32* %94, i64 2
  %98 = load i32, i32* %95, align 4, !tbaa !18
  %99 = icmp ne i32 %96, 0
  %100 = shl i32 %96, 4
  %101 = zext i1 %99 to i32
  %102 = add nsw i32 %91, %101
  %103 = icmp ne i32 %98, 0
  %104 = add i32 %100, %98
  %105 = zext i1 %103 to i32
  %106 = add nsw i32 %102, %105
  %107 = getelementptr inbounds i32, i32* %93, i64 1
  store i32 %104, i32* %93, align 4, !tbaa !18
  %108 = sext i32 %104 to i64
  %109 = getelementptr inbounds i8, i8* %89, i64 %108
  %110 = load i8, i8* %109, align 1, !tbaa !26
  %111 = zext i8 %110 to i32
  %112 = add nuw nsw i32 %92, %111
  %113 = icmp ult i32* %97, %1
  br i1 %113, label %90, label %114

114:                                              ; preds = %90
  store i32* %107, i32** @cb_esc_end, align 8, !tbaa !7
  %115 = add nsw i32 %112, %106
  switch i32 %86, label %176 [
    i32 7, label %116
    i32 10, label %116
    i32 2, label %136
    i32 5, label %136
    i32 13, label %159
  ]

116:                                              ; preds = %114, %114
  %117 = add nuw nsw i32 %86, 1
  %118 = zext i32 %117 to i64
  %119 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 %118, i32 3
  %120 = load i8*, i8** %119, align 8, !tbaa !153
  br label %121

121:                                              ; preds = %121, %116
  %122 = phi i32 [ %106, %116 ], [ %130, %121 ]
  %123 = phi i32* [ getelementptr inbounds ([288 x i32], [288 x i32]* @cb_esc_buf, i64 0, i64 0), %116 ], [ %124, %121 ]
  %124 = getelementptr inbounds i32, i32* %123, i64 1
  %125 = load i32, i32* %123, align 4, !tbaa !18
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds i8, i8* %120, i64 %126
  %128 = load i8, i8* %127, align 1, !tbaa !26
  %129 = zext i8 %128 to i32
  %130 = add nsw i32 %122, %129
  %131 = icmp ult i32* %123, %93
  br i1 %131, label %121, label %132

132:                                              ; preds = %121
  %133 = icmp sgt i32 %115, %130
  %134 = select i1 %133, i32 %117, i32 %86
  %135 = select i1 %133, i32 %130, i32 %115
  br label %136

136:                                              ; preds = %132, %114, %114
  %137 = phi i32 [ %86, %114 ], [ %86, %114 ], [ %134, %132 ]
  %138 = phi i32 [ %115, %114 ], [ %115, %114 ], [ %135, %132 ]
  %139 = phi i32 [ %86, %114 ], [ %86, %114 ], [ %117, %132 ]
  %140 = add nsw i32 %139, 1
  %141 = zext i32 %140 to i64
  %142 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 %141, i32 3
  %143 = load i8*, i8** %142, align 8, !tbaa !153
  br label %144

144:                                              ; preds = %144, %136
  %145 = phi i32 [ %106, %136 ], [ %153, %144 ]
  %146 = phi i32* [ getelementptr inbounds ([288 x i32], [288 x i32]* @cb_esc_buf, i64 0, i64 0), %136 ], [ %147, %144 ]
  %147 = getelementptr inbounds i32, i32* %146, i64 1
  %148 = load i32, i32* %146, align 4, !tbaa !18
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds i8, i8* %143, i64 %149
  %151 = load i8, i8* %150, align 1, !tbaa !26
  %152 = zext i8 %151 to i32
  %153 = add nsw i32 %145, %152
  %154 = icmp ult i32* %146, %93
  br i1 %154, label %144, label %155

155:                                              ; preds = %144
  %156 = icmp sgt i32 %138, %153
  %157 = select i1 %156, i32 %140, i32 %137
  %158 = select i1 %156, i32 %153, i32 %138
  br label %176

159:                                              ; preds = %114
  %160 = load i8*, i8** getelementptr inbounds ([34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 15, i32 3), align 8, !tbaa !153
  br label %161

161:                                              ; preds = %161, %159
  %162 = phi i32 [ %106, %159 ], [ %170, %161 ]
  %163 = phi i32* [ getelementptr inbounds ([288 x i32], [288 x i32]* @cb_esc_buf, i64 0, i64 0), %159 ], [ %164, %161 ]
  %164 = getelementptr inbounds i32, i32* %163, i64 1
  %165 = load i32, i32* %163, align 4, !tbaa !18
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds i8, i8* %160, i64 %166
  %168 = load i8, i8* %167, align 1, !tbaa !26
  %169 = zext i8 %168 to i32
  %170 = add nsw i32 %162, %169
  %171 = icmp ult i32* %163, %93
  br i1 %171, label %161, label %172

172:                                              ; preds = %161
  %173 = icmp sgt i32 %115, %170
  %174 = select i1 %173, i32 15, i32 13
  %175 = select i1 %173, i32 %170, i32 %115
  br label %176

176:                                              ; preds = %172, %155, %114
  %177 = phi i32 [ %86, %114 ], [ %157, %155 ], [ %174, %172 ]
  %178 = phi i32 [ %115, %114 ], [ %158, %155 ], [ %175, %172 ]
  %179 = load i32, i32* %2, align 4, !tbaa !18
  %180 = add nsw i32 %179, %178
  store i32 %180, i32* %2, align 4, !tbaa !18
  br label %269

181:                                              ; preds = %78
  %182 = add nsw i32 %75, -15
  %183 = load i32, i32* getelementptr inbounds ([34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 24, i32 1), align 4, !tbaa !352
  %184 = icmp slt i32 %183, %182
  br i1 %184, label %185, label %188

185:                                              ; preds = %181
  %186 = load i32, i32* getelementptr inbounds ([34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 25, i32 1), align 4, !tbaa !352
  %187 = icmp slt i32 %186, %182
  br i1 %187, label %271, label %188

188:                                              ; preds = %286, %283, %280, %277, %274, %271, %185, %181
  %189 = phi i32 [ 31, %286 ], [ 30, %283 ], [ 29, %280 ], [ 28, %277 ], [ 27, %274 ], [ 26, %271 ], [ 25, %185 ], [ 24, %181 ]
  %190 = zext i32 %189 to i64
  %191 = add nsw i64 %190, -8
  %192 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 %191, i32 1
  %193 = load i32, i32* %192, align 4, !tbaa !352
  %194 = icmp slt i32 %193, %182
  br i1 %194, label %195, label %199

195:                                              ; preds = %188
  %196 = add nsw i64 %190, -7
  %197 = add nsw i32 %189, -7
  %198 = icmp eq i64 %191, 23
  br i1 %198, label %202, label %289

199:                                              ; preds = %337, %329, %321, %313, %305, %297, %289, %188
  %200 = phi i64 [ %191, %188 ], [ %196, %289 ], [ %294, %297 ], [ %302, %305 ], [ %310, %313 ], [ %318, %321 ], [ %326, %329 ], [ %334, %337 ]
  %201 = trunc i64 %200 to i32
  br label %202

202:                                              ; preds = %337, %333, %325, %317, %309, %301, %293, %286, %199, %195
  %203 = phi i32 [ 32, %286 ], [ %189, %199 ], [ %189, %195 ], [ %189, %333 ], [ %189, %325 ], [ %189, %317 ], [ %189, %309 ], [ %189, %301 ], [ %189, %293 ], [ %189, %337 ]
  %204 = phi i64 [ 32, %286 ], [ %190, %199 ], [ %190, %195 ], [ %190, %333 ], [ %190, %325 ], [ %190, %317 ], [ %190, %309 ], [ %190, %301 ], [ %190, %293 ], [ %190, %337 ]
  %205 = phi i32 [ 24, %286 ], [ %201, %199 ], [ %197, %195 ], [ %295, %293 ], [ %303, %301 ], [ %311, %309 ], [ %319, %317 ], [ %327, %325 ], [ %335, %333 ], [ %189, %337 ]
  %206 = sext i32 %205 to i64
  %207 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 %206, i32 0
  %208 = load i32, i32* %207, align 8, !tbaa !155
  %209 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 %204, i32 0
  %210 = load i32, i32* %209, align 8, !tbaa !155
  %211 = load i8*, i8** getelementptr inbounds ([34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 16, i32 3), align 16, !tbaa !153
  %212 = load i8*, i8** getelementptr inbounds ([34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 24, i32 3), align 16, !tbaa !153
  br label %213

213:                                              ; preds = %247, %202
  %214 = phi i32 [ 0, %202 ], [ %260, %247 ]
  %215 = phi i32 [ 0, %202 ], [ %256, %247 ]
  %216 = phi i32 [ 0, %202 ], [ %248, %247 ]
  %217 = phi i32* [ %0, %202 ], [ %220, %247 ]
  %218 = getelementptr inbounds i32, i32* %217, i64 1
  %219 = load i32, i32* %217, align 4, !tbaa !18
  %220 = getelementptr inbounds i32, i32* %217, i64 2
  %221 = load i32, i32* %218, align 4, !tbaa !18
  %222 = icmp eq i32 %219, 0
  br i1 %222, label %232, label %223

223:                                              ; preds = %213
  %224 = add nsw i32 %216, 1
  %225 = icmp sgt i32 %219, 14
  %226 = select i1 %225, i32 %208, i32 0
  %227 = add nsw i32 %226, %215
  %228 = select i1 %225, i32 %210, i32 0
  %229 = add nsw i32 %228, %214
  %230 = shl i32 %219, 4
  %231 = select i1 %225, i32 240, i32 %230
  br label %232

232:                                              ; preds = %223, %213
  %233 = phi i32 [ %224, %223 ], [ %216, %213 ]
  %234 = phi i32 [ %227, %223 ], [ %215, %213 ]
  %235 = phi i32 [ %229, %223 ], [ %214, %213 ]
  %236 = phi i32 [ %231, %223 ], [ 0, %213 ]
  %237 = icmp eq i32 %221, 0
  br i1 %237, label %247, label %238

238:                                              ; preds = %232
  %239 = add nsw i32 %233, 1
  %240 = icmp sgt i32 %221, 14
  %241 = select i1 %240, i32 %208, i32 0
  %242 = add nsw i32 %234, %241
  %243 = select i1 %240, i32 %210, i32 0
  %244 = add nsw i32 %235, %243
  %245 = select i1 %240, i32 15, i32 %221
  %246 = add nsw i32 %236, %245
  br label %247

247:                                              ; preds = %238, %232
  %248 = phi i32 [ %239, %238 ], [ %233, %232 ]
  %249 = phi i32 [ %242, %238 ], [ %234, %232 ]
  %250 = phi i32 [ %244, %238 ], [ %235, %232 ]
  %251 = phi i32 [ %246, %238 ], [ %236, %232 ]
  %252 = sext i32 %251 to i64
  %253 = getelementptr inbounds i8, i8* %211, i64 %252
  %254 = load i8, i8* %253, align 1, !tbaa !26
  %255 = zext i8 %254 to i32
  %256 = add nsw i32 %249, %255
  %257 = getelementptr inbounds i8, i8* %212, i64 %252
  %258 = load i8, i8* %257, align 1, !tbaa !26
  %259 = zext i8 %258 to i32
  %260 = add nsw i32 %250, %259
  %261 = icmp ult i32* %220, %1
  br i1 %261, label %213, label %262

262:                                              ; preds = %247
  %263 = icmp sgt i32 %256, %260
  %264 = select i1 %263, i32 %203, i32 %205
  %265 = select i1 %263, i32 %260, i32 %256
  %266 = load i32, i32* %2, align 4, !tbaa !18
  %267 = add i32 %266, %248
  %268 = add i32 %267, %265
  store i32 %268, i32* %2, align 4, !tbaa !18
  br label %269

269:                                              ; preds = %262, %176, %80, %77, %3
  %270 = phi i32 [ -1, %77 ], [ 0, %80 ], [ %177, %176 ], [ %264, %262 ], [ 0, %3 ]
  ret i32 %270

271:                                              ; preds = %185
  %272 = load i32, i32* getelementptr inbounds ([34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 26, i32 1), align 4, !tbaa !352
  %273 = icmp slt i32 %272, %182
  br i1 %273, label %274, label %188

274:                                              ; preds = %271
  %275 = load i32, i32* getelementptr inbounds ([34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 27, i32 1), align 4, !tbaa !352
  %276 = icmp slt i32 %275, %182
  br i1 %276, label %277, label %188

277:                                              ; preds = %274
  %278 = load i32, i32* getelementptr inbounds ([34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 28, i32 1), align 4, !tbaa !352
  %279 = icmp slt i32 %278, %182
  br i1 %279, label %280, label %188

280:                                              ; preds = %277
  %281 = load i32, i32* getelementptr inbounds ([34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 29, i32 1), align 4, !tbaa !352
  %282 = icmp slt i32 %281, %182
  br i1 %282, label %283, label %188

283:                                              ; preds = %280
  %284 = load i32, i32* getelementptr inbounds ([34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 30, i32 1), align 4, !tbaa !352
  %285 = icmp slt i32 %284, %182
  br i1 %285, label %286, label %188

286:                                              ; preds = %283
  %287 = load i32, i32* getelementptr inbounds ([34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 31, i32 1), align 4, !tbaa !352
  %288 = icmp slt i32 %287, %182
  br i1 %288, label %202, label %188

289:                                              ; preds = %195
  %290 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 %196, i32 1
  %291 = load i32, i32* %290, align 4, !tbaa !352
  %292 = icmp slt i32 %291, %182
  br i1 %292, label %293, label %199

293:                                              ; preds = %289
  %294 = add nsw i64 %190, -6
  %295 = add nsw i32 %189, -6
  %296 = icmp ult i64 %196, 23
  br i1 %296, label %297, label %202

297:                                              ; preds = %293
  %298 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 %294, i32 1
  %299 = load i32, i32* %298, align 4, !tbaa !352
  %300 = icmp slt i32 %299, %182
  br i1 %300, label %301, label %199

301:                                              ; preds = %297
  %302 = add nsw i64 %190, -5
  %303 = add nsw i32 %189, -5
  %304 = icmp ult i64 %294, 23
  br i1 %304, label %305, label %202

305:                                              ; preds = %301
  %306 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 %302, i32 1
  %307 = load i32, i32* %306, align 4, !tbaa !352
  %308 = icmp slt i32 %307, %182
  br i1 %308, label %309, label %199

309:                                              ; preds = %305
  %310 = add nsw i64 %190, -4
  %311 = add nsw i32 %189, -4
  %312 = icmp ult i64 %302, 23
  br i1 %312, label %313, label %202

313:                                              ; preds = %309
  %314 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 %310, i32 1
  %315 = load i32, i32* %314, align 4, !tbaa !352
  %316 = icmp slt i32 %315, %182
  br i1 %316, label %317, label %199

317:                                              ; preds = %313
  %318 = add nsw i64 %190, -3
  %319 = add nsw i32 %189, -3
  %320 = icmp ult i64 %310, 23
  br i1 %320, label %321, label %202

321:                                              ; preds = %317
  %322 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 %318, i32 1
  %323 = load i32, i32* %322, align 4, !tbaa !352
  %324 = icmp slt i32 %323, %182
  br i1 %324, label %325, label %199

325:                                              ; preds = %321
  %326 = add nsw i64 %190, -2
  %327 = add nsw i32 %189, -2
  %328 = icmp ult i64 %318, 23
  br i1 %328, label %329, label %202

329:                                              ; preds = %325
  %330 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 %326, i32 1
  %331 = load i32, i32* %330, align 4, !tbaa !352
  %332 = icmp slt i32 %331, %182
  br i1 %332, label %333, label %199

333:                                              ; preds = %329
  %334 = add nsw i64 %190, -1
  %335 = add nsw i32 %189, -1
  %336 = icmp ult i64 %326, 23
  br i1 %336, label %337, label %202

337:                                              ; preds = %333
  %338 = getelementptr inbounds [34 x %struct.huffcodetab], [34 x %struct.huffcodetab]* @ht, i64 0, i64 %334, i32 1
  %339 = load i32, i32* %338, align 4, !tbaa !352
  %340 = icmp slt i32 %339, %182
  br i1 %340, label %202, label %199
}

; Function Attrs: nounwind uwtable
define dso_local void @best_huffman_divide(i32 %0, i32 %1, %struct.gr_info* nocapture %2, i32* %3) local_unnamed_addr #0 {
  %5 = alloca i32, align 4
  %6 = alloca [25 x i32], align 16
  %7 = alloca [25 x i32], align 16
  %8 = alloca %struct.gr_info, align 8
  %9 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #21
  %10 = bitcast [25 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 100, i8* nonnull %10) #21
  %11 = bitcast [25 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 100, i8* nonnull %11) #21
  %12 = bitcast %struct.gr_info* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %12) #21
  %13 = bitcast %struct.gr_info* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(120) %12, i8* nonnull align 8 dereferenceable(120) %13, i64 120, i1 false)
  %14 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %8, i64 0, i32 1
  %15 = load i32, i32* %14, align 4, !tbaa !134
  %16 = shl i32 %15, 1
  %17 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %8, i64 0, i32 0
  %18 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %8, i64 0, i32 18
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %8, i64 0, i32 15
  %21 = load i32, i32* %20, align 4
  %22 = add i32 %21, %19
  %23 = sext i32 %16 to i64
  %24 = getelementptr inbounds i32, i32* %3, i64 %23
  br label %25

25:                                               ; preds = %30, %4
  %26 = phi i64 [ 2, %4 ], [ %36, %30 ]
  %27 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 0, i64 %26
  %28 = load i32, i32* %27, align 4, !tbaa !18
  %29 = icmp sgt i32 %28, %16
  br i1 %29, label %38, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds [25 x i32], [25 x i32]* %6, i64 0, i64 %26
  store i32 %22, i32* %31, align 4, !tbaa !18
  %32 = sext i32 %28 to i64
  %33 = getelementptr inbounds i32, i32* %3, i64 %32
  %34 = call fastcc i32 @choose_table(i32* %33, i32* %24, i32* nonnull %31)
  %35 = getelementptr inbounds [25 x i32], [25 x i32]* %7, i64 0, i64 %26
  store i32 %34, i32* %35, align 4, !tbaa !18
  %36 = add nuw nsw i64 %26, 1
  %37 = icmp eq i64 %36, 23
  br i1 %37, label %41, label %25

38:                                               ; preds = %25
  %39 = trunc i64 %26 to i32
  %40 = icmp ult i32 %39, 25
  br i1 %40, label %41, label %109

41:                                               ; preds = %38, %30
  %42 = phi i64 [ %26, %38 ], [ 23, %30 ]
  %43 = and i64 %42, 4294967295
  %44 = sub nsw i64 25, %42
  %45 = icmp ult i64 %44, 4
  br i1 %45, label %46, label %48

46:                                               ; preds = %107, %41
  %47 = phi i64 [ %43, %41 ], [ %50, %107 ]
  br label %116

48:                                               ; preds = %41
  %49 = and i64 %44, -4
  %50 = add i64 %43, %49
  %51 = add nsw i64 %49, -4
  %52 = lshr exact i64 %51, 2
  %53 = add nuw nsw i64 %52, 1
  %54 = and i64 %53, 7
  %55 = icmp ult i64 %51, 28
  br i1 %55, label %95, label %56

56:                                               ; preds = %48
  %57 = sub nsw i64 %53, %54
  br label %58

58:                                               ; preds = %58, %56
  %59 = phi i64 [ 0, %56 ], [ %92, %58 ]
  %60 = phi i64 [ %57, %56 ], [ %93, %58 ]
  %61 = add i64 %43, %59
  %62 = getelementptr inbounds [25 x i32], [25 x i32]* %6, i64 0, i64 %61
  %63 = bitcast i32* %62 to <4 x i32>*
  store <4 x i32> <i32 100000, i32 100000, i32 100000, i32 100000>, <4 x i32>* %63, align 4, !tbaa !18
  %64 = or i64 %59, 4
  %65 = add i64 %43, %64
  %66 = getelementptr inbounds [25 x i32], [25 x i32]* %6, i64 0, i64 %65
  %67 = bitcast i32* %66 to <4 x i32>*
  store <4 x i32> <i32 100000, i32 100000, i32 100000, i32 100000>, <4 x i32>* %67, align 4, !tbaa !18
  %68 = or i64 %59, 8
  %69 = add i64 %43, %68
  %70 = getelementptr inbounds [25 x i32], [25 x i32]* %6, i64 0, i64 %69
  %71 = bitcast i32* %70 to <4 x i32>*
  store <4 x i32> <i32 100000, i32 100000, i32 100000, i32 100000>, <4 x i32>* %71, align 4, !tbaa !18
  %72 = or i64 %59, 12
  %73 = add i64 %43, %72
  %74 = getelementptr inbounds [25 x i32], [25 x i32]* %6, i64 0, i64 %73
  %75 = bitcast i32* %74 to <4 x i32>*
  store <4 x i32> <i32 100000, i32 100000, i32 100000, i32 100000>, <4 x i32>* %75, align 4, !tbaa !18
  %76 = or i64 %59, 16
  %77 = add i64 %43, %76
  %78 = getelementptr inbounds [25 x i32], [25 x i32]* %6, i64 0, i64 %77
  %79 = bitcast i32* %78 to <4 x i32>*
  store <4 x i32> <i32 100000, i32 100000, i32 100000, i32 100000>, <4 x i32>* %79, align 4, !tbaa !18
  %80 = or i64 %59, 20
  %81 = add i64 %43, %80
  %82 = getelementptr inbounds [25 x i32], [25 x i32]* %6, i64 0, i64 %81
  %83 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> <i32 100000, i32 100000, i32 100000, i32 100000>, <4 x i32>* %83, align 4, !tbaa !18
  %84 = or i64 %59, 24
  %85 = add i64 %43, %84
  %86 = getelementptr inbounds [25 x i32], [25 x i32]* %6, i64 0, i64 %85
  %87 = bitcast i32* %86 to <4 x i32>*
  store <4 x i32> <i32 100000, i32 100000, i32 100000, i32 100000>, <4 x i32>* %87, align 4, !tbaa !18
  %88 = or i64 %59, 28
  %89 = add i64 %43, %88
  %90 = getelementptr inbounds [25 x i32], [25 x i32]* %6, i64 0, i64 %89
  %91 = bitcast i32* %90 to <4 x i32>*
  store <4 x i32> <i32 100000, i32 100000, i32 100000, i32 100000>, <4 x i32>* %91, align 4, !tbaa !18
  %92 = add i64 %59, 32
  %93 = add i64 %60, -8
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %95, label %58, !llvm.loop !354

95:                                               ; preds = %58, %48
  %96 = phi i64 [ 0, %48 ], [ %92, %58 ]
  %97 = icmp eq i64 %54, 0
  br i1 %97, label %107, label %98

98:                                               ; preds = %98, %95
  %99 = phi i64 [ %104, %98 ], [ %96, %95 ]
  %100 = phi i64 [ %105, %98 ], [ %54, %95 ]
  %101 = add i64 %43, %99
  %102 = getelementptr inbounds [25 x i32], [25 x i32]* %6, i64 0, i64 %101
  %103 = bitcast i32* %102 to <4 x i32>*
  store <4 x i32> <i32 100000, i32 100000, i32 100000, i32 100000>, <4 x i32>* %103, align 4, !tbaa !18
  %104 = add i64 %99, 4
  %105 = add i64 %100, -1
  %106 = icmp eq i64 %105, 0
  br i1 %106, label %107, label %98, !llvm.loop !355

107:                                              ; preds = %98, %95
  %108 = icmp eq i64 %44, %49
  br i1 %108, label %109, label %46

109:                                              ; preds = %116, %107, %38
  %110 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %8, i64 0, i32 10
  %111 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %8, i64 0, i32 8, i64 0
  %112 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %2, i64 0, i32 0
  %113 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %8, i64 0, i32 8, i64 1
  %114 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %8, i64 0, i32 11
  %115 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %8, i64 0, i32 8, i64 2
  br label %123

116:                                              ; preds = %116, %46
  %117 = phi i64 [ %119, %116 ], [ %47, %46 ]
  %118 = getelementptr inbounds [25 x i32], [25 x i32]* %6, i64 0, i64 %117
  store i32 100000, i32* %118, align 4, !tbaa !18
  %119 = add nuw nsw i64 %117, 1
  %120 = icmp eq i64 %119, 25
  br i1 %120, label %109, label %116, !llvm.loop !356

121:                                              ; preds = %160
  %122 = icmp eq i64 %125, 16
  br i1 %122, label %165, label %123

123:                                              ; preds = %121, %109
  %124 = phi i64 [ 0, %109 ], [ %125, %121 ]
  %125 = add nuw nsw i64 %124, 1
  %126 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 0, i64 %125
  %127 = load i32, i32* %126, align 4, !tbaa !18
  %128 = icmp sgt i32 %127, %16
  br i1 %128, label %165, label %129

129:                                              ; preds = %123
  %130 = trunc i64 %124 to i32
  store i32 %130, i32* %110, align 8, !tbaa !140
  store i32 0, i32* %5, align 4, !tbaa !18
  %131 = sext i32 %127 to i64
  %132 = getelementptr inbounds i32, i32* %3, i64 %131
  %133 = call fastcc i32 @choose_table(i32* %3, i32* %132, i32* nonnull %5)
  store i32 %133, i32* %111, align 8, !tbaa !18
  %134 = load i32, i32* %112, align 8, !tbaa !132
  %135 = load i32, i32* %5, align 4, !tbaa !18
  %136 = icmp slt i32 %134, %135
  br i1 %136, label %165, label %137

137:                                              ; preds = %129
  %138 = add nuw nsw i64 %124, 2
  br label %139

139:                                              ; preds = %163, %137
  %140 = phi i32 [ %134, %137 ], [ %164, %163 ]
  %141 = phi i64 [ 0, %137 ], [ %161, %163 ]
  %142 = add nuw nsw i64 %138, %141
  %143 = getelementptr inbounds [25 x i32], [25 x i32]* %6, i64 0, i64 %142
  %144 = load i32, i32* %143, align 4, !tbaa !18
  %145 = add nsw i32 %144, %135
  store i32 %145, i32* %17, align 8, !tbaa !18
  %146 = icmp slt i32 %140, %145
  br i1 %146, label %160, label %147

147:                                              ; preds = %139
  %148 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 0, i64 %142
  %149 = load i32, i32* %148, align 4, !tbaa !18
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds i32, i32* %3, i64 %150
  %152 = call fastcc i32 @choose_table(i32* %132, i32* %151, i32* nonnull %17)
  store i32 %152, i32* %113, align 4, !tbaa !18
  %153 = load i32, i32* %112, align 8, !tbaa !132
  %154 = load i32, i32* %17, align 8, !tbaa !18
  %155 = icmp slt i32 %153, %154
  br i1 %155, label %160, label %156

156:                                              ; preds = %147
  %157 = trunc i64 %141 to i32
  store i32 %157, i32* %114, align 4, !tbaa !141
  %158 = getelementptr inbounds [25 x i32], [25 x i32]* %7, i64 0, i64 %142
  %159 = load i32, i32* %158, align 4, !tbaa !18
  store i32 %159, i32* %115, align 8, !tbaa !18
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(120) %13, i8* nonnull align 8 dereferenceable(120) %12, i64 120, i1 false)
  br label %160

160:                                              ; preds = %156, %147, %139
  %161 = add nuw nsw i64 %141, 1
  %162 = icmp eq i64 %161, 8
  br i1 %162, label %121, label %163

163:                                              ; preds = %160
  %164 = load i32, i32* %112, align 8, !tbaa !132
  br label %139

165:                                              ; preds = %129, %123, %121
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %12) #21
  call void @llvm.lifetime.end.p0i8(i64 100, i8* nonnull %11) #21
  call void @llvm.lifetime.end.p0i8(i64 100, i8* nonnull %10) #21
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #21
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @best_scalefac_store(%struct.lame_global_flags* nocapture readonly %0, i32 %1, i32 %2, [2 x [576 x i32]]* nocapture readonly %3, %struct.III_side_info_t* %4, [2 x %struct.III_scalefac_t]* %5) local_unnamed_addr #0 {
  %7 = sext i32 %1 to i64
  %8 = sext i32 %2 to i64
  %9 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %4, i64 0, i32 4, i64 %7, i32 0, i64 %8, i32 0
  %10 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %4, i64 0, i32 4, i64 %7, i32 0, i64 %8, i32 0, i32 16
  %11 = load i32, i32* %10, align 8, !tbaa !302
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %17

13:                                               ; preds = %50, %6
  %14 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %4, i64 0, i32 4, i64 %7, i32 0, i64 %8, i32 0, i32 17
  %15 = load i32, i32* %14, align 4, !tbaa !303
  %16 = icmp slt i32 %15, 12
  br i1 %16, label %55, label %755

17:                                               ; preds = %50, %6
  %18 = phi i32 [ %52, %50 ], [ %11, %6 ]
  %19 = phi i64 [ %51, %50 ], [ 0, %6 ]
  %20 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 %7, i64 %8, i32 0, i64 %19
  %21 = load i32, i32* %20, align 4, !tbaa !18
  %22 = icmp sgt i32 %21, 0
  br i1 %22, label %25, label %23

23:                                               ; preds = %17
  %24 = add nuw nsw i64 %19, 1
  br label %50

25:                                               ; preds = %17
  %26 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 0, i64 %19
  %27 = load i32, i32* %26, align 4, !tbaa !18
  %28 = add nuw nsw i64 %19, 1
  %29 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 0, i64 %28
  %30 = load i32, i32* %29, align 4, !tbaa !18
  %31 = icmp slt i32 %27, %30
  br i1 %31, label %32, label %45

32:                                               ; preds = %25
  %33 = sext i32 %27 to i64
  br label %34

34:                                               ; preds = %39, %32
  %35 = phi i64 [ %33, %32 ], [ %40, %39 ]
  %36 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %3, i64 %7, i64 %8, i64 %35
  %37 = load i32, i32* %36, align 4, !tbaa !18
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %39, label %43

39:                                               ; preds = %34
  %40 = add nsw i64 %35, 1
  %41 = trunc i64 %40 to i32
  %42 = icmp eq i32 %30, %41
  br i1 %42, label %48, label %34

43:                                               ; preds = %34
  %44 = trunc i64 %35 to i32
  br label %45

45:                                               ; preds = %43, %25
  %46 = phi i32 [ %27, %25 ], [ %44, %43 ]
  %47 = icmp eq i32 %46, %30
  br i1 %47, label %48, label %50

48:                                               ; preds = %45, %39
  store i32 0, i32* %20, align 4, !tbaa !18
  %49 = load i32, i32* %10, align 8, !tbaa !302
  br label %50

50:                                               ; preds = %48, %45, %23
  %51 = phi i64 [ %24, %23 ], [ %28, %48 ], [ %28, %45 ]
  %52 = phi i32 [ %18, %23 ], [ %49, %48 ], [ %18, %45 ]
  %53 = zext i32 %52 to i64
  %54 = icmp ult i64 %51, %53
  br i1 %54, label %17, label %13

55:                                               ; preds = %13
  %56 = sext i32 %15 to i64
  br label %57

57:                                               ; preds = %89, %55
  %58 = phi i64 [ %56, %55 ], [ %90, %89 ]
  %59 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 %7, i64 %8, i32 1, i64 %58, i64 0
  %60 = load i32, i32* %59, align 4, !tbaa !18
  %61 = icmp sgt i32 %60, 0
  br i1 %61, label %64, label %62

62:                                               ; preds = %57
  %63 = add nsw i64 %58, 1
  br label %89

64:                                               ; preds = %57
  %65 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 1, i64 %58
  %66 = load i32, i32* %65, align 4, !tbaa !18
  %67 = add nsw i64 %58, 1
  %68 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 1, i64 %67
  %69 = load i32, i32* %68, align 4, !tbaa !18
  %70 = icmp slt i32 %66, %69
  br i1 %70, label %71, label %85

71:                                               ; preds = %64
  %72 = sext i32 %66 to i64
  br label %73

73:                                               ; preds = %79, %71
  %74 = phi i64 [ %72, %71 ], [ %80, %79 ]
  %75 = mul nsw i64 %74, 3
  %76 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %3, i64 %7, i64 %8, i64 %75
  %77 = load i32, i32* %76, align 4, !tbaa !18
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %83

79:                                               ; preds = %73
  %80 = add nsw i64 %74, 1
  %81 = trunc i64 %80 to i32
  %82 = icmp eq i32 %69, %81
  br i1 %82, label %88, label %73

83:                                               ; preds = %73
  %84 = trunc i64 %74 to i32
  br label %85

85:                                               ; preds = %83, %64
  %86 = phi i32 [ %66, %64 ], [ %84, %83 ]
  %87 = icmp eq i32 %86, %69
  br i1 %87, label %88, label %89

88:                                               ; preds = %85, %79
  store i32 0, i32* %59, align 4, !tbaa !18
  br label %89

89:                                               ; preds = %88, %85, %62
  %90 = phi i64 [ %63, %62 ], [ %67, %88 ], [ %67, %85 ]
  %91 = icmp slt i64 %58, 11
  br i1 %91, label %57, label %92

92:                                               ; preds = %89
  %93 = load i32, i32* %14, align 4, !tbaa !303
  %94 = icmp slt i32 %93, 12
  br i1 %94, label %676, label %755

95:                                               ; preds = %755
  %96 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %4, i64 0, i32 4, i64 %7, i32 0, i64 %8, i32 0, i32 12
  %97 = load i32, i32* %96, align 8, !tbaa !142
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %294

99:                                               ; preds = %95
  %100 = load i32, i32* %10, align 8, !tbaa !302
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %201, label %102

102:                                              ; preds = %99
  %103 = zext i32 %100 to i64
  %104 = icmp ult i32 %100, 8
  br i1 %104, label %190, label %105

105:                                              ; preds = %102
  %106 = and i64 %103, 4294967288
  %107 = add nsw i64 %106, -8
  %108 = lshr exact i64 %107, 3
  %109 = add nuw nsw i64 %108, 1
  %110 = and i64 %109, 3
  %111 = icmp ult i64 %107, 24
  br i1 %111, label %157, label %112

112:                                              ; preds = %105
  %113 = sub nsw i64 %109, %110
  br label %114

114:                                              ; preds = %114, %112
  %115 = phi i64 [ 0, %112 ], [ %154, %114 ]
  %116 = phi <4 x i32> [ zeroinitializer, %112 ], [ %152, %114 ]
  %117 = phi <4 x i32> [ zeroinitializer, %112 ], [ %153, %114 ]
  %118 = phi i64 [ %113, %112 ], [ %155, %114 ]
  %119 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 %7, i64 %8, i32 0, i64 %115
  %120 = bitcast i32* %119 to <4 x i32>*
  %121 = load <4 x i32>, <4 x i32>* %120, align 4, !tbaa !18
  %122 = getelementptr inbounds i32, i32* %119, i64 4
  %123 = bitcast i32* %122 to <4 x i32>*
  %124 = load <4 x i32>, <4 x i32>* %123, align 4, !tbaa !18
  %125 = or <4 x i32> %121, %116
  %126 = or <4 x i32> %124, %117
  %127 = or i64 %115, 8
  %128 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 %7, i64 %8, i32 0, i64 %127
  %129 = bitcast i32* %128 to <4 x i32>*
  %130 = load <4 x i32>, <4 x i32>* %129, align 4, !tbaa !18
  %131 = getelementptr inbounds i32, i32* %128, i64 4
  %132 = bitcast i32* %131 to <4 x i32>*
  %133 = load <4 x i32>, <4 x i32>* %132, align 4, !tbaa !18
  %134 = or <4 x i32> %130, %125
  %135 = or <4 x i32> %133, %126
  %136 = or i64 %115, 16
  %137 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 %7, i64 %8, i32 0, i64 %136
  %138 = bitcast i32* %137 to <4 x i32>*
  %139 = load <4 x i32>, <4 x i32>* %138, align 4, !tbaa !18
  %140 = getelementptr inbounds i32, i32* %137, i64 4
  %141 = bitcast i32* %140 to <4 x i32>*
  %142 = load <4 x i32>, <4 x i32>* %141, align 4, !tbaa !18
  %143 = or <4 x i32> %139, %134
  %144 = or <4 x i32> %142, %135
  %145 = or i64 %115, 24
  %146 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 %7, i64 %8, i32 0, i64 %145
  %147 = bitcast i32* %146 to <4 x i32>*
  %148 = load <4 x i32>, <4 x i32>* %147, align 4, !tbaa !18
  %149 = getelementptr inbounds i32, i32* %146, i64 4
  %150 = bitcast i32* %149 to <4 x i32>*
  %151 = load <4 x i32>, <4 x i32>* %150, align 4, !tbaa !18
  %152 = or <4 x i32> %148, %143
  %153 = or <4 x i32> %151, %144
  %154 = add i64 %115, 32
  %155 = add i64 %118, -4
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %157, label %114, !llvm.loop !357

157:                                              ; preds = %114, %105
  %158 = phi <4 x i32> [ undef, %105 ], [ %152, %114 ]
  %159 = phi <4 x i32> [ undef, %105 ], [ %153, %114 ]
  %160 = phi i64 [ 0, %105 ], [ %154, %114 ]
  %161 = phi <4 x i32> [ zeroinitializer, %105 ], [ %152, %114 ]
  %162 = phi <4 x i32> [ zeroinitializer, %105 ], [ %153, %114 ]
  %163 = icmp eq i64 %110, 0
  br i1 %163, label %180, label %164

164:                                              ; preds = %164, %157
  %165 = phi i64 [ %177, %164 ], [ %160, %157 ]
  %166 = phi <4 x i32> [ %175, %164 ], [ %161, %157 ]
  %167 = phi <4 x i32> [ %176, %164 ], [ %162, %157 ]
  %168 = phi i64 [ %178, %164 ], [ %110, %157 ]
  %169 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 %7, i64 %8, i32 0, i64 %165
  %170 = bitcast i32* %169 to <4 x i32>*
  %171 = load <4 x i32>, <4 x i32>* %170, align 4, !tbaa !18
  %172 = getelementptr inbounds i32, i32* %169, i64 4
  %173 = bitcast i32* %172 to <4 x i32>*
  %174 = load <4 x i32>, <4 x i32>* %173, align 4, !tbaa !18
  %175 = or <4 x i32> %171, %166
  %176 = or <4 x i32> %174, %167
  %177 = add i64 %165, 8
  %178 = add i64 %168, -1
  %179 = icmp eq i64 %178, 0
  br i1 %179, label %180, label %164, !llvm.loop !358

180:                                              ; preds = %164, %157
  %181 = phi <4 x i32> [ %158, %157 ], [ %175, %164 ]
  %182 = phi <4 x i32> [ %159, %157 ], [ %176, %164 ]
  %183 = or <4 x i32> %182, %181
  %184 = shufflevector <4 x i32> %183, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %185 = or <4 x i32> %183, %184
  %186 = shufflevector <4 x i32> %185, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %187 = or <4 x i32> %185, %186
  %188 = extractelement <4 x i32> %187, i32 0
  %189 = icmp eq i64 %106, %103
  br i1 %189, label %201, label %190

190:                                              ; preds = %180, %102
  %191 = phi i64 [ 0, %102 ], [ %106, %180 ]
  %192 = phi i32 [ 0, %102 ], [ %188, %180 ]
  br label %193

193:                                              ; preds = %193, %190
  %194 = phi i64 [ %199, %193 ], [ %191, %190 ]
  %195 = phi i32 [ %198, %193 ], [ %192, %190 ]
  %196 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 %7, i64 %8, i32 0, i64 %194
  %197 = load i32, i32* %196, align 4, !tbaa !18
  %198 = or i32 %197, %195
  %199 = add nuw nsw i64 %194, 1
  %200 = icmp ult i64 %199, %103
  br i1 %200, label %193, label %201, !llvm.loop !359

201:                                              ; preds = %193, %180, %99
  %202 = phi i32 [ 0, %99 ], [ %188, %180 ], [ %198, %193 ]
  %203 = load i32, i32* %14, align 4, !tbaa !303
  %204 = icmp ult i32 %203, 12
  br i1 %204, label %205, label %249

205:                                              ; preds = %201
  %206 = zext i32 %203 to i64
  %207 = and i64 %206, 1
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %220, label %209

209:                                              ; preds = %205
  %210 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 %7, i64 %8, i32 1, i64 %206, i64 0
  %211 = load i32, i32* %210, align 4, !tbaa !18
  %212 = or i32 %211, %202
  %213 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 %7, i64 %8, i32 1, i64 %206, i64 1
  %214 = load i32, i32* %213, align 4, !tbaa !18
  %215 = or i32 %214, %212
  %216 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 %7, i64 %8, i32 1, i64 %206, i64 2
  %217 = load i32, i32* %216, align 4, !tbaa !18
  %218 = or i32 %217, %215
  %219 = add nuw nsw i64 %206, 1
  br label %220

220:                                              ; preds = %209, %205
  %221 = phi i32 [ undef, %205 ], [ %218, %209 ]
  %222 = phi i64 [ %206, %205 ], [ %219, %209 ]
  %223 = phi i32 [ %202, %205 ], [ %218, %209 ]
  %224 = icmp eq i32 %203, 11
  br i1 %224, label %249, label %225

225:                                              ; preds = %225, %220
  %226 = phi i64 [ %247, %225 ], [ %222, %220 ]
  %227 = phi i32 [ %246, %225 ], [ %223, %220 ]
  %228 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 %7, i64 %8, i32 1, i64 %226, i64 0
  %229 = load i32, i32* %228, align 4, !tbaa !18
  %230 = or i32 %229, %227
  %231 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 %7, i64 %8, i32 1, i64 %226, i64 1
  %232 = load i32, i32* %231, align 4, !tbaa !18
  %233 = or i32 %232, %230
  %234 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 %7, i64 %8, i32 1, i64 %226, i64 2
  %235 = load i32, i32* %234, align 4, !tbaa !18
  %236 = or i32 %235, %233
  %237 = add nuw nsw i64 %226, 1
  %238 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 %7, i64 %8, i32 1, i64 %237, i64 0
  %239 = load i32, i32* %238, align 4, !tbaa !18
  %240 = or i32 %239, %236
  %241 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 %7, i64 %8, i32 1, i64 %237, i64 1
  %242 = load i32, i32* %241, align 4, !tbaa !18
  %243 = or i32 %242, %240
  %244 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 %7, i64 %8, i32 1, i64 %237, i64 2
  %245 = load i32, i32* %244, align 4, !tbaa !18
  %246 = or i32 %245, %243
  %247 = add nuw nsw i64 %226, 2
  %248 = icmp eq i64 %247, 12
  br i1 %248, label %249, label %225

249:                                              ; preds = %225, %220, %201
  %250 = phi i32 [ %202, %201 ], [ %221, %220 ], [ %246, %225 ]
  %251 = and i32 %250, 1
  %252 = icmp eq i32 %251, 0
  %253 = icmp ne i32 %250, 0
  %254 = and i1 %253, %252
  br i1 %254, label %255, label %294

255:                                              ; preds = %249
  br i1 %101, label %267, label %256

256:                                              ; preds = %256, %255
  %257 = phi i64 [ %261, %256 ], [ 0, %255 ]
  %258 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 %7, i64 %8, i32 0, i64 %257
  %259 = load i32, i32* %258, align 4, !tbaa !18
  %260 = sdiv i32 %259, 2
  store i32 %260, i32* %258, align 4, !tbaa !18
  %261 = add nuw nsw i64 %257, 1
  %262 = load i32, i32* %10, align 8, !tbaa !302
  %263 = zext i32 %262 to i64
  %264 = icmp ult i64 %261, %263
  br i1 %264, label %256, label %265

265:                                              ; preds = %256
  %266 = load i32, i32* %14, align 4, !tbaa !303
  br label %267

267:                                              ; preds = %265, %255
  %268 = phi i32 [ %266, %265 ], [ %203, %255 ]
  %269 = icmp ult i32 %268, 12
  br i1 %269, label %270, label %285

270:                                              ; preds = %267
  %271 = zext i32 %268 to i64
  br label %272

272:                                              ; preds = %272, %270
  %273 = phi i64 [ %271, %270 ], [ %283, %272 ]
  %274 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 %7, i64 %8, i32 1, i64 %273, i64 0
  %275 = load i32, i32* %274, align 4, !tbaa !18
  %276 = sdiv i32 %275, 2
  store i32 %276, i32* %274, align 4, !tbaa !18
  %277 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 %7, i64 %8, i32 1, i64 %273, i64 1
  %278 = load i32, i32* %277, align 4, !tbaa !18
  %279 = sdiv i32 %278, 2
  store i32 %279, i32* %277, align 4, !tbaa !18
  %280 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 %7, i64 %8, i32 1, i64 %273, i64 2
  %281 = load i32, i32* %280, align 4, !tbaa !18
  %282 = sdiv i32 %281, 2
  store i32 %282, i32* %280, align 4, !tbaa !18
  %283 = add nuw nsw i64 %273, 1
  %284 = icmp eq i64 %283, 12
  br i1 %284, label %285, label %272

285:                                              ; preds = %272, %267
  store i32 1, i32* %761, align 4, !tbaa !143
  store i32 99999999, i32* %756, align 4, !tbaa !154
  %286 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 45
  %287 = load i32, i32* %286, align 8, !tbaa !95
  %288 = icmp eq i32 %287, 2
  %289 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 %7, i64 %8
  br i1 %288, label %290, label %292

290:                                              ; preds = %285
  %291 = tail call i32 @scale_bitcount(%struct.III_scalefac_t* %289, %struct.gr_info* nonnull %9) #21
  br label %294

292:                                              ; preds = %285
  %293 = tail call i32 @scale_bitcount_lsf(%struct.III_scalefac_t* %289, %struct.gr_info* nonnull %9) #21
  br label %294

294:                                              ; preds = %755, %292, %290, %249, %95
  %295 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 45
  %296 = load i32, i32* %295, align 8, !tbaa !95
  %297 = icmp eq i32 %296, 2
  %298 = icmp eq i32 %1, 1
  %299 = and i1 %298, %297
  br i1 %299, label %300, label %594

300:                                              ; preds = %294
  %301 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %4, i64 0, i32 4, i64 0, i32 0, i64 %8, i32 0, i32 6
  %302 = load i32, i32* %301, align 8, !tbaa !194
  %303 = icmp eq i32 %302, 2
  br i1 %303, label %594, label %304

304:                                              ; preds = %300
  %305 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %4, i64 0, i32 4, i64 1, i32 0, i64 %8, i32 0, i32 6
  %306 = load i32, i32* %305, align 8, !tbaa !194
  %307 = icmp eq i32 %306, 2
  br i1 %307, label %594, label %308

308:                                              ; preds = %304
  %309 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %4, i64 0, i32 4, i64 0, i32 0, i64 %8, i32 0, i32 13
  %310 = load i32, i32* %309, align 4, !tbaa !360
  %311 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %4, i64 0, i32 4, i64 1, i32 0, i64 %8, i32 0, i32 13
  %312 = load i32, i32* %311, align 4, !tbaa !360
  %313 = icmp eq i32 %310, %312
  br i1 %313, label %314, label %594

314:                                              ; preds = %308
  %315 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %4, i64 0, i32 4, i64 0, i32 0, i64 %8, i32 0, i32 12
  %316 = load i32, i32* %315, align 8, !tbaa !361
  %317 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %4, i64 0, i32 4, i64 1, i32 0, i64 %8, i32 0, i32 12
  %318 = load i32, i32* %317, align 8, !tbaa !361
  %319 = icmp eq i32 %316, %318
  br i1 %319, label %320, label %594

320:                                              ; preds = %314
  %321 = bitcast %struct.III_side_info_t* %4 to i8*
  %322 = shl nsw i64 %8, 4
  %323 = or i64 %322, 12
  %324 = getelementptr i8, i8* %321, i64 %323
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(16) %324, i8 0, i64 16, i1 false) #21
  %325 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 0, i64 %8, i32 0, i64 0
  %326 = load i32, i32* %325, align 4, !tbaa !18
  %327 = getelementptr [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 0
  %328 = load i32, i32* %327, align 4, !tbaa !18
  %329 = icmp eq i32 %326, %328
  br i1 %329, label %330, label %549

330:                                              ; preds = %320
  %331 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 0, i64 %8, i32 0, i64 1
  %332 = load i32, i32* %331, align 4, !tbaa !18
  %333 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 1
  %334 = load i32, i32* %333, align 4, !tbaa !18
  %335 = icmp eq i32 %332, %334
  br i1 %335, label %652, label %549

336:                                              ; preds = %670
  %337 = bitcast i32* %327 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(24) %337, i8 -1, i64 24, i1 false) #21
  %338 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %4, i64 0, i32 3, i64 %8, i64 0
  store i32 1, i32* %338, align 4, !tbaa !18
  br label %549

339:                                              ; preds = %610, %604, %598, %591, %585, %579
  %340 = load i32, i32* %327, align 4, !tbaa !18
  %341 = icmp slt i32 %340, 0
  %342 = icmp sgt i32 %340, 0
  %343 = select i1 %342, i32 %340, i32 0
  %344 = xor i1 %341, true
  %345 = zext i1 %344 to i32
  %346 = select i1 %341, i32 0, i32 %343
  %347 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 1
  %348 = load i32, i32* %347, align 4, !tbaa !18
  %349 = icmp slt i32 %348, 0
  %350 = icmp slt i32 %346, %348
  %351 = select i1 %350, i32 %348, i32 %346
  %352 = xor i1 %349, true
  %353 = zext i1 %352 to i32
  %354 = add nuw nsw i32 %353, %345
  %355 = select i1 %349, i32 %346, i32 %351
  %356 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 2
  %357 = load i32, i32* %356, align 4, !tbaa !18
  %358 = icmp slt i32 %357, 0
  %359 = icmp slt i32 %355, %357
  %360 = select i1 %359, i32 %357, i32 %355
  %361 = xor i1 %358, true
  %362 = zext i1 %361 to i32
  %363 = add nuw nsw i32 %354, %362
  %364 = select i1 %358, i32 %355, i32 %360
  %365 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 3
  %366 = load i32, i32* %365, align 4, !tbaa !18
  %367 = icmp slt i32 %366, 0
  %368 = icmp slt i32 %364, %366
  %369 = select i1 %368, i32 %366, i32 %364
  %370 = xor i1 %367, true
  %371 = zext i1 %370 to i32
  %372 = add nuw nsw i32 %363, %371
  %373 = select i1 %367, i32 %364, i32 %369
  %374 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 4
  %375 = load i32, i32* %374, align 4, !tbaa !18
  %376 = icmp slt i32 %375, 0
  %377 = icmp slt i32 %373, %375
  %378 = select i1 %377, i32 %375, i32 %373
  %379 = xor i1 %376, true
  %380 = zext i1 %379 to i32
  %381 = add nuw nsw i32 %372, %380
  %382 = select i1 %376, i32 %373, i32 %378
  %383 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 5
  %384 = load i32, i32* %383, align 4, !tbaa !18
  %385 = icmp slt i32 %384, 0
  %386 = icmp slt i32 %382, %384
  %387 = select i1 %386, i32 %384, i32 %382
  %388 = xor i1 %385, true
  %389 = zext i1 %388 to i32
  %390 = add nuw nsw i32 %381, %389
  %391 = select i1 %385, i32 %382, i32 %387
  %392 = load i32, i32* %552, align 4, !tbaa !18
  %393 = icmp slt i32 %392, 0
  %394 = icmp slt i32 %391, %392
  %395 = select i1 %394, i32 %392, i32 %391
  %396 = xor i1 %393, true
  %397 = zext i1 %396 to i32
  %398 = add nuw nsw i32 %390, %397
  %399 = select i1 %393, i32 %391, i32 %395
  %400 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 7
  %401 = load i32, i32* %400, align 4, !tbaa !18
  %402 = icmp slt i32 %401, 0
  %403 = icmp slt i32 %399, %401
  %404 = select i1 %403, i32 %401, i32 %399
  %405 = xor i1 %402, true
  %406 = zext i1 %405 to i32
  %407 = add nuw nsw i32 %398, %406
  %408 = select i1 %402, i32 %399, i32 %404
  %409 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 8
  %410 = load i32, i32* %409, align 4, !tbaa !18
  %411 = icmp slt i32 %410, 0
  %412 = icmp slt i32 %408, %410
  %413 = select i1 %412, i32 %410, i32 %408
  %414 = xor i1 %411, true
  %415 = zext i1 %414 to i32
  %416 = add nuw nsw i32 %407, %415
  %417 = select i1 %411, i32 %408, i32 %413
  %418 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 9
  %419 = load i32, i32* %418, align 4, !tbaa !18
  %420 = icmp slt i32 %419, 0
  %421 = icmp slt i32 %417, %419
  %422 = select i1 %421, i32 %419, i32 %417
  %423 = xor i1 %420, true
  %424 = zext i1 %423 to i32
  %425 = add nuw nsw i32 %416, %424
  %426 = select i1 %420, i32 %417, i32 %422
  %427 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 10
  %428 = load i32, i32* %427, align 4, !tbaa !18
  %429 = icmp slt i32 %428, 0
  %430 = icmp slt i32 %426, %428
  %431 = select i1 %430, i32 %428, i32 %426
  %432 = xor i1 %429, true
  %433 = zext i1 %432 to i32
  %434 = add nuw nsw i32 %425, %433
  %435 = select i1 %429, i32 %426, i32 %431
  %436 = load i32, i32* %567, align 4, !tbaa !18
  %437 = icmp slt i32 %436, 0
  %438 = icmp sgt i32 %436, 0
  %439 = select i1 %438, i32 %436, i32 0
  %440 = select i1 %437, i32 0, i32 %439
  %441 = xor i1 %437, true
  %442 = zext i1 %441 to i32
  %443 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 12
  %444 = load i32, i32* %443, align 4, !tbaa !18
  %445 = icmp slt i32 %444, 0
  %446 = icmp slt i32 %440, %444
  %447 = select i1 %446, i32 %444, i32 %440
  %448 = select i1 %445, i32 %440, i32 %447
  %449 = xor i1 %445, true
  %450 = zext i1 %449 to i32
  %451 = add nuw nsw i32 %450, %442
  %452 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 13
  %453 = load i32, i32* %452, align 4, !tbaa !18
  %454 = icmp slt i32 %453, 0
  %455 = icmp slt i32 %448, %453
  %456 = select i1 %455, i32 %453, i32 %448
  %457 = select i1 %454, i32 %448, i32 %456
  %458 = xor i1 %454, true
  %459 = zext i1 %458 to i32
  %460 = add nuw nsw i32 %451, %459
  %461 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 14
  %462 = load i32, i32* %461, align 4, !tbaa !18
  %463 = icmp slt i32 %462, 0
  %464 = icmp slt i32 %457, %462
  %465 = select i1 %464, i32 %462, i32 %457
  %466 = select i1 %463, i32 %457, i32 %465
  %467 = xor i1 %463, true
  %468 = zext i1 %467 to i32
  %469 = add nuw nsw i32 %460, %468
  %470 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 15
  %471 = load i32, i32* %470, align 4, !tbaa !18
  %472 = icmp slt i32 %471, 0
  %473 = icmp slt i32 %466, %471
  %474 = select i1 %473, i32 %471, i32 %466
  %475 = select i1 %472, i32 %466, i32 %474
  %476 = xor i1 %472, true
  %477 = zext i1 %476 to i32
  %478 = add nuw nsw i32 %469, %477
  %479 = load i32, i32* %582, align 4, !tbaa !18
  %480 = icmp slt i32 %479, 0
  %481 = icmp slt i32 %475, %479
  %482 = select i1 %481, i32 %479, i32 %475
  %483 = select i1 %480, i32 %475, i32 %482
  %484 = xor i1 %480, true
  %485 = zext i1 %484 to i32
  %486 = add nuw nsw i32 %478, %485
  %487 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 17
  %488 = load i32, i32* %487, align 4, !tbaa !18
  %489 = icmp slt i32 %488, 0
  %490 = icmp slt i32 %483, %488
  %491 = select i1 %490, i32 %488, i32 %483
  %492 = select i1 %489, i32 %483, i32 %491
  %493 = xor i1 %489, true
  %494 = zext i1 %493 to i32
  %495 = add nuw nsw i32 %486, %494
  %496 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 18
  %497 = load i32, i32* %496, align 4, !tbaa !18
  %498 = icmp slt i32 %497, 0
  %499 = icmp slt i32 %492, %497
  %500 = select i1 %499, i32 %497, i32 %492
  %501 = select i1 %498, i32 %492, i32 %500
  %502 = xor i1 %498, true
  %503 = zext i1 %502 to i32
  %504 = add nuw nsw i32 %495, %503
  %505 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 19
  %506 = load i32, i32* %505, align 4, !tbaa !18
  %507 = icmp slt i32 %506, 0
  %508 = icmp slt i32 %501, %506
  %509 = select i1 %508, i32 %506, i32 %501
  %510 = select i1 %507, i32 %501, i32 %509
  %511 = xor i1 %507, true
  %512 = zext i1 %511 to i32
  %513 = add nuw nsw i32 %504, %512
  %514 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 20
  %515 = load i32, i32* %514, align 4, !tbaa !18
  %516 = icmp slt i32 %515, 0
  %517 = icmp slt i32 %510, %515
  %518 = select i1 %517, i32 %515, i32 %510
  %519 = select i1 %516, i32 %510, i32 %518
  %520 = xor i1 %516, true
  %521 = zext i1 %520 to i32
  %522 = add nuw nsw i32 %513, %521
  %523 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %4, i64 0, i32 4, i64 1, i32 0, i64 %8, i32 0, i32 15
  %524 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %4, i64 0, i32 4, i64 1, i32 0, i64 %8, i32 0, i32 4
  br label %525

525:                                              ; preds = %546, %339
  %526 = phi i64 [ 0, %339 ], [ %547, %546 ]
  %527 = getelementptr inbounds [16 x i32], [16 x i32]* @scfsi_calc.slen1_n, i64 0, i64 %526
  %528 = load i32, i32* %527, align 4, !tbaa !18
  %529 = icmp slt i32 %435, %528
  br i1 %529, label %530, label %546

530:                                              ; preds = %525
  %531 = getelementptr inbounds [16 x i32], [16 x i32]* @scfsi_calc.slen2_n, i64 0, i64 %526
  %532 = load i32, i32* %531, align 4, !tbaa !18
  %533 = icmp slt i32 %519, %532
  br i1 %533, label %534, label %546

534:                                              ; preds = %530
  %535 = getelementptr inbounds [16 x i32], [16 x i32]* @scfsi_calc.slen1_tab, i64 0, i64 %526
  %536 = load i32, i32* %535, align 4, !tbaa !18
  %537 = mul nsw i32 %536, %434
  %538 = getelementptr inbounds [16 x i32], [16 x i32]* @scfsi_calc.slen2_tab, i64 0, i64 %526
  %539 = load i32, i32* %538, align 4, !tbaa !18
  %540 = mul nsw i32 %539, %522
  %541 = add nsw i32 %540, %537
  %542 = load i32, i32* %523, align 4, !tbaa !154
  %543 = icmp sgt i32 %542, %541
  br i1 %543, label %544, label %546

544:                                              ; preds = %534
  store i32 %541, i32* %523, align 4, !tbaa !154
  %545 = trunc i64 %526 to i32
  store i32 %545, i32* %524, align 8, !tbaa !136
  br label %546

546:                                              ; preds = %544, %534, %530, %525
  %547 = add nuw nsw i64 %526, 1
  %548 = icmp eq i64 %547, 16
  br i1 %548, label %594, label %525

549:                                              ; preds = %670, %664, %658, %652, %336, %330, %320
  %550 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 0, i64 %8, i32 0, i64 6
  %551 = load i32, i32* %550, align 4, !tbaa !18
  %552 = getelementptr [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 6
  %553 = load i32, i32* %552, align 4, !tbaa !18
  %554 = icmp eq i32 %551, %553
  br i1 %554, label %555, label %564

555:                                              ; preds = %549
  %556 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 0, i64 %8, i32 0, i64 7
  %557 = load i32, i32* %556, align 4, !tbaa !18
  %558 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 7
  %559 = load i32, i32* %558, align 4, !tbaa !18
  %560 = icmp eq i32 %557, %559
  br i1 %560, label %634, label %564

561:                                              ; preds = %646
  %562 = bitcast i32* %552 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %562, i8 -1, i64 20, i1 false) #21
  %563 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %4, i64 0, i32 3, i64 %8, i64 1
  store i32 1, i32* %563, align 4, !tbaa !18
  br label %564

564:                                              ; preds = %646, %640, %634, %561, %555, %549
  %565 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 0, i64 %8, i32 0, i64 11
  %566 = load i32, i32* %565, align 4, !tbaa !18
  %567 = getelementptr [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 11
  %568 = load i32, i32* %567, align 4, !tbaa !18
  %569 = icmp eq i32 %566, %568
  br i1 %569, label %570, label %579

570:                                              ; preds = %564
  %571 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 0, i64 %8, i32 0, i64 12
  %572 = load i32, i32* %571, align 4, !tbaa !18
  %573 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 12
  %574 = load i32, i32* %573, align 4, !tbaa !18
  %575 = icmp eq i32 %572, %574
  br i1 %575, label %616, label %579

576:                                              ; preds = %628
  %577 = bitcast i32* %567 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %577, i8 -1, i64 20, i1 false) #21
  %578 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %4, i64 0, i32 3, i64 %8, i64 2
  store i32 1, i32* %578, align 4, !tbaa !18
  br label %579

579:                                              ; preds = %628, %622, %616, %576, %570, %564
  %580 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 0, i64 %8, i32 0, i64 16
  %581 = load i32, i32* %580, align 4, !tbaa !18
  %582 = getelementptr [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 16
  %583 = load i32, i32* %582, align 4, !tbaa !18
  %584 = icmp eq i32 %581, %583
  br i1 %584, label %585, label %339

585:                                              ; preds = %579
  %586 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 0, i64 %8, i32 0, i64 17
  %587 = load i32, i32* %586, align 4, !tbaa !18
  %588 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 17
  %589 = load i32, i32* %588, align 4, !tbaa !18
  %590 = icmp eq i32 %587, %589
  br i1 %590, label %598, label %339

591:                                              ; preds = %610
  %592 = bitcast i32* %582 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 dereferenceable(20) %592, i8 -1, i64 20, i1 false) #21
  %593 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %4, i64 0, i32 3, i64 %8, i64 3
  store i32 1, i32* %593, align 4, !tbaa !18
  br label %339

594:                                              ; preds = %546, %314, %308, %304, %300, %294
  %595 = load i32, i32* %756, align 4, !tbaa !154
  %596 = load i32, i32* %758, align 8, !tbaa !132
  %597 = add i32 %596, %595
  store i32 %597, i32* %758, align 8, !tbaa !132
  ret void

598:                                              ; preds = %585
  %599 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 0, i64 %8, i32 0, i64 18
  %600 = load i32, i32* %599, align 4, !tbaa !18
  %601 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 18
  %602 = load i32, i32* %601, align 4, !tbaa !18
  %603 = icmp eq i32 %600, %602
  br i1 %603, label %604, label %339

604:                                              ; preds = %598
  %605 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 0, i64 %8, i32 0, i64 19
  %606 = load i32, i32* %605, align 4, !tbaa !18
  %607 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 19
  %608 = load i32, i32* %607, align 4, !tbaa !18
  %609 = icmp eq i32 %606, %608
  br i1 %609, label %610, label %339

610:                                              ; preds = %604
  %611 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 0, i64 %8, i32 0, i64 20
  %612 = load i32, i32* %611, align 4, !tbaa !18
  %613 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 20
  %614 = load i32, i32* %613, align 4, !tbaa !18
  %615 = icmp eq i32 %612, %614
  br i1 %615, label %591, label %339

616:                                              ; preds = %570
  %617 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 0, i64 %8, i32 0, i64 13
  %618 = load i32, i32* %617, align 4, !tbaa !18
  %619 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 13
  %620 = load i32, i32* %619, align 4, !tbaa !18
  %621 = icmp eq i32 %618, %620
  br i1 %621, label %622, label %579

622:                                              ; preds = %616
  %623 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 0, i64 %8, i32 0, i64 14
  %624 = load i32, i32* %623, align 4, !tbaa !18
  %625 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 14
  %626 = load i32, i32* %625, align 4, !tbaa !18
  %627 = icmp eq i32 %624, %626
  br i1 %627, label %628, label %579

628:                                              ; preds = %622
  %629 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 0, i64 %8, i32 0, i64 15
  %630 = load i32, i32* %629, align 4, !tbaa !18
  %631 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 15
  %632 = load i32, i32* %631, align 4, !tbaa !18
  %633 = icmp eq i32 %630, %632
  br i1 %633, label %576, label %579

634:                                              ; preds = %555
  %635 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 0, i64 %8, i32 0, i64 8
  %636 = load i32, i32* %635, align 4, !tbaa !18
  %637 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 8
  %638 = load i32, i32* %637, align 4, !tbaa !18
  %639 = icmp eq i32 %636, %638
  br i1 %639, label %640, label %564

640:                                              ; preds = %634
  %641 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 0, i64 %8, i32 0, i64 9
  %642 = load i32, i32* %641, align 4, !tbaa !18
  %643 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 9
  %644 = load i32, i32* %643, align 4, !tbaa !18
  %645 = icmp eq i32 %642, %644
  br i1 %645, label %646, label %564

646:                                              ; preds = %640
  %647 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 0, i64 %8, i32 0, i64 10
  %648 = load i32, i32* %647, align 4, !tbaa !18
  %649 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 10
  %650 = load i32, i32* %649, align 4, !tbaa !18
  %651 = icmp eq i32 %648, %650
  br i1 %651, label %561, label %564

652:                                              ; preds = %330
  %653 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 0, i64 %8, i32 0, i64 2
  %654 = load i32, i32* %653, align 4, !tbaa !18
  %655 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 2
  %656 = load i32, i32* %655, align 4, !tbaa !18
  %657 = icmp eq i32 %654, %656
  br i1 %657, label %658, label %549

658:                                              ; preds = %652
  %659 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 0, i64 %8, i32 0, i64 3
  %660 = load i32, i32* %659, align 4, !tbaa !18
  %661 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 3
  %662 = load i32, i32* %661, align 4, !tbaa !18
  %663 = icmp eq i32 %660, %662
  br i1 %663, label %664, label %549

664:                                              ; preds = %658
  %665 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 0, i64 %8, i32 0, i64 4
  %666 = load i32, i32* %665, align 4, !tbaa !18
  %667 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 4
  %668 = load i32, i32* %667, align 4, !tbaa !18
  %669 = icmp eq i32 %666, %668
  br i1 %669, label %670, label %549

670:                                              ; preds = %664
  %671 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 0, i64 %8, i32 0, i64 5
  %672 = load i32, i32* %671, align 4, !tbaa !18
  %673 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 1, i64 %8, i32 0, i64 5
  %674 = load i32, i32* %673, align 4, !tbaa !18
  %675 = icmp eq i32 %672, %674
  br i1 %675, label %336, label %549

676:                                              ; preds = %92
  %677 = sext i32 %93 to i64
  br label %678

678:                                              ; preds = %711, %676
  %679 = phi i64 [ %677, %676 ], [ %712, %711 ]
  %680 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 %7, i64 %8, i32 1, i64 %679, i64 1
  %681 = load i32, i32* %680, align 4, !tbaa !18
  %682 = icmp sgt i32 %681, 0
  br i1 %682, label %685, label %683

683:                                              ; preds = %678
  %684 = add nsw i64 %679, 1
  br label %711

685:                                              ; preds = %678
  %686 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 1, i64 %679
  %687 = load i32, i32* %686, align 4, !tbaa !18
  %688 = add nsw i64 %679, 1
  %689 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 1, i64 %688
  %690 = load i32, i32* %689, align 4, !tbaa !18
  %691 = icmp slt i32 %687, %690
  br i1 %691, label %692, label %707

692:                                              ; preds = %685
  %693 = sext i32 %687 to i64
  br label %694

694:                                              ; preds = %701, %692
  %695 = phi i64 [ %693, %692 ], [ %702, %701 ]
  %696 = mul nsw i64 %695, 3
  %697 = add nsw i64 %696, 1
  %698 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %3, i64 %7, i64 %8, i64 %697
  %699 = load i32, i32* %698, align 4, !tbaa !18
  %700 = icmp eq i32 %699, 0
  br i1 %700, label %701, label %705

701:                                              ; preds = %694
  %702 = add nsw i64 %695, 1
  %703 = trunc i64 %702 to i32
  %704 = icmp eq i32 %690, %703
  br i1 %704, label %710, label %694

705:                                              ; preds = %694
  %706 = trunc i64 %695 to i32
  br label %707

707:                                              ; preds = %705, %685
  %708 = phi i32 [ %687, %685 ], [ %706, %705 ]
  %709 = icmp eq i32 %708, %690
  br i1 %709, label %710, label %711

710:                                              ; preds = %707, %701
  store i32 0, i32* %680, align 4, !tbaa !18
  br label %711

711:                                              ; preds = %710, %707, %683
  %712 = phi i64 [ %684, %683 ], [ %688, %710 ], [ %688, %707 ]
  %713 = icmp slt i64 %679, 11
  br i1 %713, label %678, label %714

714:                                              ; preds = %711
  %715 = load i32, i32* %14, align 4, !tbaa !303
  %716 = icmp slt i32 %715, 12
  br i1 %716, label %717, label %755

717:                                              ; preds = %714
  %718 = sext i32 %715 to i64
  br label %719

719:                                              ; preds = %752, %717
  %720 = phi i64 [ %718, %717 ], [ %753, %752 ]
  %721 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %5, i64 %7, i64 %8, i32 1, i64 %720, i64 2
  %722 = load i32, i32* %721, align 4, !tbaa !18
  %723 = icmp sgt i32 %722, 0
  br i1 %723, label %726, label %724

724:                                              ; preds = %719
  %725 = add nsw i64 %720, 1
  br label %752

726:                                              ; preds = %719
  %727 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 1, i64 %720
  %728 = load i32, i32* %727, align 4, !tbaa !18
  %729 = add nsw i64 %720, 1
  %730 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 1, i64 %729
  %731 = load i32, i32* %730, align 4, !tbaa !18
  %732 = icmp slt i32 %728, %731
  br i1 %732, label %733, label %748

733:                                              ; preds = %726
  %734 = sext i32 %728 to i64
  br label %735

735:                                              ; preds = %742, %733
  %736 = phi i64 [ %734, %733 ], [ %743, %742 ]
  %737 = mul nsw i64 %736, 3
  %738 = add nsw i64 %737, 2
  %739 = getelementptr inbounds [2 x [576 x i32]], [2 x [576 x i32]]* %3, i64 %7, i64 %8, i64 %738
  %740 = load i32, i32* %739, align 4, !tbaa !18
  %741 = icmp eq i32 %740, 0
  br i1 %741, label %742, label %746

742:                                              ; preds = %735
  %743 = add nsw i64 %736, 1
  %744 = trunc i64 %743 to i32
  %745 = icmp eq i32 %731, %744
  br i1 %745, label %751, label %735

746:                                              ; preds = %735
  %747 = trunc i64 %736 to i32
  br label %748

748:                                              ; preds = %746, %726
  %749 = phi i32 [ %728, %726 ], [ %747, %746 ]
  %750 = icmp eq i32 %749, %731
  br i1 %750, label %751, label %752

751:                                              ; preds = %748, %742
  store i32 0, i32* %721, align 4, !tbaa !18
  br label %752

752:                                              ; preds = %751, %748, %724
  %753 = phi i64 [ %725, %724 ], [ %729, %751 ], [ %729, %748 ]
  %754 = icmp slt i64 %720, 11
  br i1 %754, label %719, label %755

755:                                              ; preds = %752, %714, %92, %13
  %756 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %4, i64 0, i32 4, i64 %7, i32 0, i64 %8, i32 0, i32 15
  %757 = load i32, i32* %756, align 4, !tbaa !154
  %758 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %9, i64 0, i32 0
  %759 = load i32, i32* %758, align 8, !tbaa !132
  %760 = sub i32 %759, %757
  store i32 %760, i32* %758, align 8, !tbaa !132
  %761 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %4, i64 0, i32 4, i64 %7, i32 0, i64 %8, i32 0, i32 13
  %762 = load i32, i32* %761, align 4, !tbaa !143
  %763 = icmp eq i32 %762, 0
  br i1 %763, label %95, label %294
}

; Function Attrs: nounwind uwtable
define dso_local float @ts_real_time(i64 %0) local_unnamed_addr #0 {
  %2 = alloca i64, align 8
  %3 = bitcast i64* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #21
  %4 = call i64 @time(i64* nonnull %2) #21
  %5 = icmp eq i64 %0, 0
  %6 = load i64, i64* %2, align 8, !tbaa !19
  br i1 %5, label %9, label %7

7:                                                ; preds = %1
  %8 = load i64, i64* @ts_real_time.initial_time, align 8, !tbaa !19
  br label %10

9:                                                ; preds = %1
  store i64 %6, i64* @ts_real_time.initial_time, align 8, !tbaa !19
  br label %10

10:                                               ; preds = %9, %7
  %11 = phi i64 [ %8, %7 ], [ %6, %9 ]
  %12 = call double @difftime(i64 %6, i64 %11) #24
  %13 = fptrunc double %12 to float
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #21
  ret float %13
}

; Function Attrs: nounwind
declare dso_local i64 @time(i64*) local_unnamed_addr #9

; Function Attrs: nounwind readnone
declare dso_local double @difftime(i64, i64) local_unnamed_addr #17

; Function Attrs: nounwind uwtable
define dso_local float @ts_process_time(i64 %0) local_unnamed_addr #0 {
  %2 = tail call i64 @clock() #21
  %3 = icmp eq i64 %0, 0
  br i1 %3, label %6, label %4

4:                                                ; preds = %1
  %5 = load i64, i64* @ts_process_time.initial_time, align 8, !tbaa !19
  br label %7

6:                                                ; preds = %1
  store i64 %2, i64* @ts_process_time.initial_time, align 8, !tbaa !19
  br label %7

7:                                                ; preds = %6, %4
  %8 = phi i64 [ %5, %4 ], [ %2, %6 ]
  %9 = sub nsw i64 %2, %8
  %10 = sitofp i64 %9 to float
  %11 = fdiv float %10, 1.000000e+06
  ret float %11
}

; Function Attrs: nounwind
declare dso_local i64 @clock() local_unnamed_addr #9

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @ts_calc_times(%struct.ts_times* nocapture %0, i32 %1, i64 %2, i64 %3, i32 %4) local_unnamed_addr #5 {
  %6 = icmp sgt i64 %2, 0
  br i1 %6, label %7, label %27

7:                                                ; preds = %5
  %8 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %0, i64 0, i32 0
  %9 = load float, float* %8, align 4, !tbaa !362
  %10 = sitofp i64 %3 to float
  %11 = fmul float %9, %10
  %12 = sitofp i64 %2 to float
  %13 = fdiv float %11, %12
  %14 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %0, i64 0, i32 1
  store float %13, float* %14, align 4, !tbaa !364
  %15 = sitofp i32 %1 to float
  %16 = fmul float %13, %15
  %17 = fcmp ogt float %16, 0.000000e+00
  br i1 %17, label %18, label %23

18:                                               ; preds = %7
  %19 = sext i32 %4 to i64
  %20 = mul nsw i64 %19, %3
  %21 = sitofp i64 %20 to float
  %22 = fdiv float %21, %16
  br label %23

23:                                               ; preds = %18, %7
  %24 = phi float [ %22, %18 ], [ 0.000000e+00, %7 ]
  %25 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %0, i64 0, i32 2
  store float %24, float* %25, align 4
  %26 = fsub float %13, %9
  br label %30

27:                                               ; preds = %5
  %28 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %0, i64 0, i32 1
  store float 0.000000e+00, float* %28, align 4, !tbaa !364
  %29 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %0, i64 0, i32 2
  store float 0.000000e+00, float* %29, align 4, !tbaa !365
  br label %30

30:                                               ; preds = %27, %23
  %31 = phi float [ 0.000000e+00, %27 ], [ %26, %23 ]
  %32 = getelementptr inbounds %struct.ts_times, %struct.ts_times* %0, i64 0, i32 3
  store float %31, float* %32, align 4, !tbaa !366
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @timestatus(i32 %0, i64 %1, i64 %2, i32 %3) local_unnamed_addr #0 {
  %5 = alloca i64, align 8
  %6 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #21
  %7 = call i64 @time(i64* nonnull %5) #21
  %8 = icmp eq i64 %1, 0
  %9 = load i64, i64* %5, align 8, !tbaa !19
  br i1 %8, label %12, label %10

10:                                               ; preds = %4
  %11 = load i64, i64* @ts_real_time.initial_time, align 8, !tbaa !19
  br label %13

12:                                               ; preds = %4
  store i64 %9, i64* @ts_real_time.initial_time, align 8, !tbaa !19
  br label %13

13:                                               ; preds = %12, %10
  %14 = phi i64 [ %11, %10 ], [ %9, %12 ]
  %15 = call double @difftime(i64 %9, i64 %14) #24
  %16 = fptrunc double %15 to float
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #21
  %17 = call i64 @clock() #21
  br i1 %8, label %18, label %21

18:                                               ; preds = %13
  store i64 %17, i64* @ts_process_time.initial_time, align 8, !tbaa !19
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %20 = call i64 @fwrite(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.448, i64 0, i64 0), i64 74, i64 1, %struct._IO_FILE* %19) #19
  br label %121

21:                                               ; preds = %13
  %22 = load i64, i64* @ts_process_time.initial_time, align 8, !tbaa !19
  %23 = sub nsw i64 %17, %22
  %24 = sitofp i64 %23 to float
  %25 = fdiv float %24, 1.000000e+06
  %26 = icmp sgt i64 %1, 0
  br i1 %26, label %27, label %44

27:                                               ; preds = %21
  %28 = sitofp i64 %2 to float
  %29 = fmul float %28, %16
  %30 = sitofp i64 %1 to float
  %31 = fdiv float %29, %30
  %32 = fsub float %31, %16
  %33 = fmul float %25, %28
  %34 = fdiv float %33, %30
  %35 = sitofp i32 %0 to float
  %36 = fmul float %34, %35
  %37 = fcmp ogt float %36, 0.000000e+00
  br i1 %37, label %38, label %44

38:                                               ; preds = %27
  %39 = sext i32 %3 to i64
  %40 = mul nsw i64 %39, %2
  %41 = sitofp i64 %40 to float
  %42 = fdiv float %41, %36
  %43 = fpext float %42 to double
  br label %44

44:                                               ; preds = %38, %27, %21
  %45 = phi float [ %32, %38 ], [ %32, %27 ], [ 0.000000e+00, %21 ]
  %46 = phi float [ %31, %38 ], [ %31, %27 ], [ 0.000000e+00, %21 ]
  %47 = phi double [ %43, %38 ], [ 0.000000e+00, %27 ], [ 0.000000e+00, %21 ]
  %48 = phi float [ %34, %38 ], [ %34, %27 ], [ 0.000000e+00, %21 ]
  %49 = icmp sgt i64 %2, 1
  br i1 %49, label %52, label %50

50:                                               ; preds = %44
  %51 = add nsw i64 %2, -1
  br label %59

52:                                               ; preds = %44
  %53 = sitofp i64 %1 to double
  %54 = fmul double %53, 1.000000e+02
  %55 = add nsw i64 %2, -1
  %56 = sitofp i64 %55 to double
  %57 = fdiv double %54, %56
  %58 = fptosi double %57 to i32
  br label %59

59:                                               ; preds = %52, %50
  %60 = phi i64 [ %51, %50 ], [ %55, %52 ]
  %61 = phi i32 [ 100, %50 ], [ %58, %52 ]
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %63 = fpext float %25 to double
  %64 = fadd double %63, 5.000000e-01
  %65 = fptosi double %64 to i64
  %66 = sdiv i64 %65, 3600
  %67 = trunc i64 %66 to i32
  %68 = fdiv double %64, 6.000000e+01
  %69 = fptosi double %68 to i64
  %70 = srem i64 %69, 60
  %71 = trunc i64 %70 to i32
  %72 = srem i64 %65, 60
  %73 = trunc i64 %72 to i32
  %74 = fpext float %48 to double
  %75 = fadd double %74, 5.000000e-01
  %76 = fptosi double %75 to i64
  %77 = sdiv i64 %76, 3600
  %78 = trunc i64 %77 to i32
  %79 = fdiv double %75, 6.000000e+01
  %80 = fptosi double %79 to i64
  %81 = srem i64 %80, 60
  %82 = trunc i64 %81 to i32
  %83 = srem i64 %76, 60
  %84 = trunc i64 %83 to i32
  %85 = fpext float %16 to double
  %86 = fadd double %85, 5.000000e-01
  %87 = fptosi double %86 to i64
  %88 = sdiv i64 %87, 3600
  %89 = trunc i64 %88 to i32
  %90 = fdiv double %86, 6.000000e+01
  %91 = fptosi double %90 to i64
  %92 = srem i64 %91, 60
  %93 = trunc i64 %92 to i32
  %94 = srem i64 %87, 60
  %95 = trunc i64 %94 to i32
  %96 = fpext float %46 to double
  %97 = fadd double %96, 5.000000e-01
  %98 = fptosi double %97 to i64
  %99 = sdiv i64 %98, 3600
  %100 = trunc i64 %99 to i32
  %101 = fdiv double %97, 6.000000e+01
  %102 = fptosi double %101 to i64
  %103 = srem i64 %102, 60
  %104 = trunc i64 %103 to i32
  %105 = srem i64 %98, 60
  %106 = trunc i64 %105 to i32
  %107 = fpext float %45 to double
  %108 = fadd double %107, 5.000000e-01
  %109 = fptosi double %108 to i64
  %110 = sdiv i64 %109, 3600
  %111 = trunc i64 %110 to i32
  %112 = fdiv double %108, 6.000000e+01
  %113 = fptosi double %112 to i64
  %114 = srem i64 %113, 60
  %115 = trunc i64 %114 to i32
  %116 = srem i64 %109, 60
  %117 = trunc i64 %116 to i32
  %118 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %62, i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str.1.449, i64 0, i64 0), i64 %1, i64 %60, i32 %61, i32 %67, i32 %71, i32 %73, i32 %78, i32 %82, i32 %84, i32 %89, i32 %93, i32 %95, i32 %100, i32 %104, i32 %106, double %47, i32 %111, i32 %115, i32 %117) #19
  %119 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %120 = call i32 @fflush(%struct._IO_FILE* %119)
  br label %121

121:                                              ; preds = %59, %18
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @getframebits(%struct.lame_global_flags* nocapture readonly %0, i32* nocapture %1, i32* nocapture %2) local_unnamed_addr #3 {
  %4 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 3
  %5 = load i32, i32* %4, align 8, !tbaa !156
  %6 = sitofp i32 %5 to double
  %7 = fdiv double %6, 1.000000e+03
  %8 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 43
  %9 = load i32, i32* %8, align 8, !tbaa !115
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 50
  %12 = load i32, i32* %11, align 4, !tbaa !117
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i64 0, i64 %10, i64 %13
  %15 = load i32, i32* %14, align 4, !tbaa !18
  %16 = sitofp i32 %15 to double
  %17 = icmp eq i32 %9, 1
  %18 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 46
  %19 = load i32, i32* %18, align 4, !tbaa !126
  %20 = icmp eq i32 %19, 1
  %21 = select i1 %20, i32 168, i32 288
  %22 = select i1 %20, i32 104, i32 168
  %23 = select i1 %17, i32 %21, i32 %22
  %24 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 14
  %25 = load i32, i32* %24, align 4, !tbaa !116
  %26 = icmp eq i32 %25, 0
  %27 = or i32 %23, 16
  %28 = select i1 %26, i32 %23, i32 %27
  %29 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 42
  %30 = load i32, i32* %29, align 4, !tbaa !160
  %31 = sitofp i32 %30 to double
  %32 = fdiv double %31, %7
  %33 = fmul double %16, 1.250000e-01
  %34 = fmul double %33, %32
  %35 = fadd double %34, 1.000000e-09
  %36 = tail call double @llvm.floor.f64(double %35)
  %37 = fptosi double %36 to i32
  %38 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 44
  %39 = load i32, i32* %38, align 4, !tbaa !119
  %40 = add i32 %39, %37
  %41 = shl i32 %40, 3
  store i32 %41, i32* %1, align 4, !tbaa !18
  %42 = sub nsw i32 %41, %28
  %43 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 45
  %44 = load i32, i32* %43, align 8, !tbaa !95
  %45 = sdiv i32 %42, %44
  store i32 %45, i32* %2, align 4, !tbaa !18
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @display_bitrates(%struct._IO_FILE* nocapture %0) local_unnamed_addr #3 {
  %2 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %0)
  %3 = tail call i64 @fwrite(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1.456, i64 0, i64 0), i64 36, i64 1, %struct._IO_FILE* %0)
  %4 = tail call i64 @fwrite(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2.457, i64 0, i64 0), i64 15, i64 1, %struct._IO_FILE* %0)
  %5 = load i32, i32* getelementptr inbounds ([2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i64 0, i64 1, i64 1), align 4, !tbaa !18
  %6 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.458, i64 0, i64 0), i32 %5)
  %7 = load i32, i32* getelementptr inbounds ([2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i64 0, i64 1, i64 2), align 4, !tbaa !18
  %8 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.458, i64 0, i64 0), i32 %7)
  %9 = load i32, i32* getelementptr inbounds ([2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i64 0, i64 1, i64 3), align 4, !tbaa !18
  %10 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.458, i64 0, i64 0), i32 %9)
  %11 = load i32, i32* getelementptr inbounds ([2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i64 0, i64 1, i64 4), align 4, !tbaa !18
  %12 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.458, i64 0, i64 0), i32 %11)
  %13 = load i32, i32* getelementptr inbounds ([2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i64 0, i64 1, i64 5), align 4, !tbaa !18
  %14 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.458, i64 0, i64 0), i32 %13)
  %15 = load i32, i32* getelementptr inbounds ([2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i64 0, i64 1, i64 6), align 4, !tbaa !18
  %16 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.458, i64 0, i64 0), i32 %15)
  %17 = load i32, i32* getelementptr inbounds ([2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i64 0, i64 1, i64 7), align 4, !tbaa !18
  %18 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.458, i64 0, i64 0), i32 %17)
  %19 = load i32, i32* getelementptr inbounds ([2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i64 0, i64 1, i64 8), align 4, !tbaa !18
  %20 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.458, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* getelementptr inbounds ([2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i64 0, i64 1, i64 9), align 4, !tbaa !18
  %22 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.458, i64 0, i64 0), i32 %21)
  %23 = load i32, i32* getelementptr inbounds ([2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i64 0, i64 1, i64 10), align 4, !tbaa !18
  %24 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.458, i64 0, i64 0), i32 %23)
  %25 = load i32, i32* getelementptr inbounds ([2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i64 0, i64 1, i64 11), align 4, !tbaa !18
  %26 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.458, i64 0, i64 0), i32 %25)
  %27 = load i32, i32* getelementptr inbounds ([2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i64 0, i64 1, i64 12), align 4, !tbaa !18
  %28 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.458, i64 0, i64 0), i32 %27)
  %29 = load i32, i32* getelementptr inbounds ([2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i64 0, i64 1, i64 13), align 4, !tbaa !18
  %30 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.458, i64 0, i64 0), i32 %29)
  %31 = load i32, i32* getelementptr inbounds ([2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i64 0, i64 1, i64 14), align 4, !tbaa !18
  %32 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.458, i64 0, i64 0), i32 %31)
  %33 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %0)
  %34 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %0)
  %35 = tail call i64 @fwrite(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4.459, i64 0, i64 0), i64 37, i64 1, %struct._IO_FILE* %0)
  %36 = tail call i64 @fwrite(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2.457, i64 0, i64 0), i64 15, i64 1, %struct._IO_FILE* %0)
  %37 = load i32, i32* getelementptr inbounds ([2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i64 0, i64 0, i64 1), align 4, !tbaa !18
  %38 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.458, i64 0, i64 0), i32 %37)
  %39 = load i32, i32* getelementptr inbounds ([2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i64 0, i64 0, i64 2), align 8, !tbaa !18
  %40 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.458, i64 0, i64 0), i32 %39)
  %41 = load i32, i32* getelementptr inbounds ([2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i64 0, i64 0, i64 3), align 4, !tbaa !18
  %42 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.458, i64 0, i64 0), i32 %41)
  %43 = load i32, i32* getelementptr inbounds ([2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i64 0, i64 0, i64 4), align 16, !tbaa !18
  %44 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.458, i64 0, i64 0), i32 %43)
  %45 = load i32, i32* getelementptr inbounds ([2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i64 0, i64 0, i64 5), align 4, !tbaa !18
  %46 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.458, i64 0, i64 0), i32 %45)
  %47 = load i32, i32* getelementptr inbounds ([2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i64 0, i64 0, i64 6), align 8, !tbaa !18
  %48 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.458, i64 0, i64 0), i32 %47)
  %49 = load i32, i32* getelementptr inbounds ([2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i64 0, i64 0, i64 7), align 4, !tbaa !18
  %50 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.458, i64 0, i64 0), i32 %49)
  %51 = load i32, i32* getelementptr inbounds ([2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i64 0, i64 0, i64 8), align 16, !tbaa !18
  %52 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.458, i64 0, i64 0), i32 %51)
  %53 = load i32, i32* getelementptr inbounds ([2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i64 0, i64 0, i64 9), align 4, !tbaa !18
  %54 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.458, i64 0, i64 0), i32 %53)
  %55 = load i32, i32* getelementptr inbounds ([2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i64 0, i64 0, i64 10), align 8, !tbaa !18
  %56 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.458, i64 0, i64 0), i32 %55)
  %57 = load i32, i32* getelementptr inbounds ([2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i64 0, i64 0, i64 11), align 4, !tbaa !18
  %58 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.458, i64 0, i64 0), i32 %57)
  %59 = load i32, i32* getelementptr inbounds ([2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i64 0, i64 0, i64 12), align 16, !tbaa !18
  %60 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.458, i64 0, i64 0), i32 %59)
  %61 = load i32, i32* getelementptr inbounds ([2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i64 0, i64 0, i64 13), align 4, !tbaa !18
  %62 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.458, i64 0, i64 0), i32 %61)
  %63 = load i32, i32* getelementptr inbounds ([2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i64 0, i64 0, i64 14), align 8, !tbaa !18
  %64 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3.458, i64 0, i64 0), i32 %63)
  %65 = tail call i32 @fputc(i32 10, %struct._IO_FILE* %0)
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local i32 @BitrateIndex(i32 %0, i32 %1, i32 %2) local_unnamed_addr #3 {
  %4 = sext i32 %1 to i64
  br label %5

5:                                                ; preds = %5, %3
  %6 = phi i32 [ 0, %3 ], [ %15, %5 ]
  %7 = phi i32 [ 0, %3 ], [ %14, %5 ]
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds [2 x [15 x i32]], [2 x [15 x i32]]* @bitrate_table, i64 0, i64 %4, i64 %8
  %10 = load i32, i32* %9, align 4, !tbaa !18
  %11 = icmp eq i32 %10, %0
  %12 = xor i1 %11, true
  %13 = zext i1 %12 to i32
  %14 = add nuw nsw i32 %7, %13
  %15 = select i1 %11, i32 1, i32 %6
  %16 = icmp ne i32 %15, 0
  %17 = icmp ult i32 %14, 15
  %18 = xor i1 %16, true
  %19 = and i1 %17, %18
  br i1 %19, label %5, label %20

20:                                               ; preds = %5
  br i1 %16, label %24, label %21

21:                                               ; preds = %20
  %22 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %23 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %22, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.5.462, i64 0, i64 0), i32 %0, i32 %2) #19
  br label %24

24:                                               ; preds = %21, %20
  %25 = phi i32 [ -1, %21 ], [ %14, %20 ]
  ret i32 %25
}

; Function Attrs: nofree nounwind uwtable
define dso_local i32 @SmpFrqIndex(i64 %0, i32* nocapture %1) local_unnamed_addr #3 {
  store i32 0, i32* %1, align 4, !tbaa !18
  switch i64 %0, label %9 [
    i64 44100, label %3
    i64 48000, label %4
    i64 32000, label %5
    i64 24000, label %6
    i64 22050, label %7
    i64 16000, label %8
  ]

3:                                                ; preds = %2
  store i32 1, i32* %1, align 4, !tbaa !18
  br label %12

4:                                                ; preds = %2
  store i32 1, i32* %1, align 4, !tbaa !18
  br label %12

5:                                                ; preds = %2
  store i32 1, i32* %1, align 4, !tbaa !18
  br label %12

6:                                                ; preds = %2
  store i32 0, i32* %1, align 4, !tbaa !18
  br label %12

7:                                                ; preds = %2
  store i32 0, i32* %1, align 4, !tbaa !18
  br label %12

8:                                                ; preds = %2
  store i32 0, i32* %1, align 4, !tbaa !18
  br label %12

9:                                                ; preds = %2
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %11 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %10, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.6.465, i64 0, i64 0), i64 %0) #19
  br label %12

12:                                               ; preds = %9, %8, %7, %6, %5, %4, %3
  %13 = phi i32 [ 0, %3 ], [ 1, %4 ], [ 2, %5 ], [ 1, %6 ], [ 0, %7 ], [ 2, %8 ], [ -1, %9 ]
  ret i32 %13
}

; Function Attrs: nounwind uwtable
define dso_local noalias i8* @mem_alloc(i64 %0, i8* %1) local_unnamed_addr #0 {
  %3 = tail call noalias i8* @malloc(i64 %0) #21
  %4 = icmp eq i8* %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %3, i8 0, i64 %0, i1 false)
  ret i8* %3

6:                                                ; preds = %2
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %8 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.466, i64 0, i64 0), i8* %1) #19
  tail call void @exit(i32 1) #20
  unreachable
}

; Function Attrs: nounwind uwtable
define dso_local i32 @DetermineByteOrder() local_unnamed_addr #0 {
  %1 = alloca [5 x i8], align 1
  %2 = alloca %struct.rtpbits, align 4
  %3 = getelementptr inbounds [5 x i8], [5 x i8]* %1, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 5, i8* nonnull %3) #21
  %4 = bitcast %struct.rtpbits* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #21
  %5 = getelementptr inbounds %struct.rtpbits, %struct.rtpbits* %2, i64 0, i32 0
  store i32 1094861636, i32* %5, align 4, !tbaa !26
  %6 = call i8* @strncpy(i8* nonnull %3, i8* nonnull %4, i64 4) #21
  %7 = getelementptr inbounds [5 x i8], [5 x i8]* %1, i64 0, i64 4
  store i8 0, i8* %7, align 1, !tbaa !26
  %8 = call i32 @bcmp(i8* nonnull dereferenceable(5) %3, i8* nonnull dereferenceable(5) getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8.469, i64 0, i64 0), i64 5)
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %14, label %10

10:                                               ; preds = %0
  %11 = call i32 @bcmp(i8* nonnull dereferenceable(5) %3, i8* nonnull dereferenceable(5) getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9.470, i64 0, i64 0), i64 5)
  %12 = icmp eq i32 %11, 0
  %13 = select i1 %12, i32 2, i32 0
  br label %14

14:                                               ; preds = %10, %0
  %15 = phi i32 [ 1, %0 ], [ %13, %10 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #21
  call void @llvm.lifetime.end.p0i8(i64 5, i8* nonnull %3) #21
  ret i32 %15
}

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #18

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @SwapBytesInWords(i16* nocapture %0, i32 %1) local_unnamed_addr #5 {
  %3 = icmp sgt i32 %1, 0
  br i1 %3, label %4, label %58

4:                                                ; preds = %2
  %5 = add i32 %1, -1
  %6 = and i32 %1, 3
  %7 = icmp ult i32 %5, 3
  br i1 %7, label %43, label %8

8:                                                ; preds = %4
  %9 = sub i32 %1, %6
  br label %10

10:                                               ; preds = %10, %8
  %11 = phi i16* [ %0, %8 ], [ %38, %10 ]
  %12 = phi i32 [ %9, %8 ], [ %41, %10 ]
  %13 = load i16, i16* %11, align 2, !tbaa !29
  %14 = trunc i16 %13 to i8
  %15 = lshr i16 %13, 8
  %16 = trunc i16 %15 to i8
  %17 = getelementptr inbounds i16, i16* %11, i64 1
  %18 = bitcast i16* %11 to i8*
  store i8 %16, i8* %18, align 1, !tbaa !26
  %19 = getelementptr inbounds i8, i8* %18, i64 1
  store i8 %14, i8* %19, align 1, !tbaa !26
  %20 = load i16, i16* %17, align 2, !tbaa !29
  %21 = trunc i16 %20 to i8
  %22 = lshr i16 %20, 8
  %23 = trunc i16 %22 to i8
  %24 = getelementptr inbounds i16, i16* %11, i64 2
  %25 = bitcast i16* %17 to i8*
  store i8 %23, i8* %25, align 1, !tbaa !26
  %26 = getelementptr inbounds i8, i8* %25, i64 1
  store i8 %21, i8* %26, align 1, !tbaa !26
  %27 = load i16, i16* %24, align 2, !tbaa !29
  %28 = trunc i16 %27 to i8
  %29 = lshr i16 %27, 8
  %30 = trunc i16 %29 to i8
  %31 = getelementptr inbounds i16, i16* %11, i64 3
  %32 = bitcast i16* %24 to i8*
  store i8 %30, i8* %32, align 1, !tbaa !26
  %33 = getelementptr inbounds i8, i8* %32, i64 1
  store i8 %28, i8* %33, align 1, !tbaa !26
  %34 = load i16, i16* %31, align 2, !tbaa !29
  %35 = trunc i16 %34 to i8
  %36 = lshr i16 %34, 8
  %37 = trunc i16 %36 to i8
  %38 = getelementptr inbounds i16, i16* %11, i64 4
  %39 = bitcast i16* %31 to i8*
  store i8 %37, i8* %39, align 1, !tbaa !26
  %40 = getelementptr inbounds i8, i8* %39, i64 1
  store i8 %35, i8* %40, align 1, !tbaa !26
  %41 = add i32 %12, -4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %10

43:                                               ; preds = %10, %4
  %44 = phi i16* [ %0, %4 ], [ %38, %10 ]
  %45 = icmp eq i32 %6, 0
  br i1 %45, label %58, label %46

46:                                               ; preds = %46, %43
  %47 = phi i16* [ %53, %46 ], [ %44, %43 ]
  %48 = phi i32 [ %56, %46 ], [ %6, %43 ]
  %49 = load i16, i16* %47, align 2, !tbaa !29
  %50 = trunc i16 %49 to i8
  %51 = lshr i16 %49, 8
  %52 = trunc i16 %51 to i8
  %53 = getelementptr inbounds i16, i16* %47, i64 1
  %54 = bitcast i16* %47 to i8*
  store i8 %52, i8* %54, align 1, !tbaa !26
  %55 = getelementptr inbounds i8, i8* %54, i64 1
  store i8 %50, i8* %55, align 1, !tbaa !26
  %56 = add i32 %48, -1
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %46, !llvm.loop !367

58:                                               ; preds = %46, %43, %2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @empty_buffer(%struct.bit_stream_struc* nocapture %0) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %0, i64 0, i32 6
  %3 = load i32, i32* %2, align 8, !tbaa !368
  %4 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %0, i64 0, i32 4
  %5 = load i32, i32* %4, align 8, !tbaa !369
  %6 = xor i32 %3, -1
  %7 = add i32 %5, %6
  %8 = icmp slt i32 %7, 1
  br i1 %8, label %16, label %9

9:                                                ; preds = %1
  %10 = add nsw i32 %5, -1
  store i32 %10, i32* %2, align 8, !tbaa !368
  %11 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %0, i64 0, i32 7
  store i32 8, i32* %11, align 4, !tbaa !370
  %12 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %0, i64 0, i32 3
  %13 = load i8*, i8** %12, align 8, !tbaa !371
  %14 = sext i32 %10 to i64
  %15 = getelementptr inbounds i8, i8* %13, i64 %14
  store i8 0, i8* %15, align 1, !tbaa !26
  br label %16

16:                                               ; preds = %9, %1
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local i32 @copy_buffer(i8* nocapture %0, i32 %1, %struct.bit_stream_struc* nocapture %2) local_unnamed_addr #5 {
  %4 = icmp eq i32 %1, 0
  %5 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %2, i64 0, i32 4
  %6 = load i32, i32* %5, align 8, !tbaa !369
  %7 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %2, i64 0, i32 6
  %8 = load i32, i32* %7, align 8, !tbaa !368
  br i1 %4, label %13, label %9

9:                                                ; preds = %3
  %10 = xor i32 %8, -1
  %11 = add i32 %6, %10
  %12 = icmp sgt i32 %11, %1
  br i1 %12, label %50, label %13

13:                                               ; preds = %9, %3
  %14 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %2, i64 0, i32 4
  %15 = add i32 %6, -1
  %16 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %2, i64 0, i32 6
  %17 = icmp sgt i32 %15, %8
  br i1 %17, label %18, label %36

18:                                               ; preds = %13
  %19 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %2, i64 0, i32 3
  %20 = sext i32 %15 to i64
  br label %21

21:                                               ; preds = %21, %18
  %22 = phi i64 [ 0, %18 ], [ %27, %21 ]
  %23 = phi i64 [ %20, %18 ], [ %29, %21 ]
  %24 = load i8*, i8** %19, align 8, !tbaa !371
  %25 = getelementptr inbounds i8, i8* %24, i64 %23
  %26 = load i8, i8* %25, align 1, !tbaa !26
  %27 = add nuw i64 %22, 1
  %28 = getelementptr inbounds i8, i8* %0, i64 %22
  store i8 %26, i8* %28, align 1, !tbaa !26
  %29 = add nsw i64 %23, -1
  %30 = load i32, i32* %16, align 8, !tbaa !368
  %31 = sext i32 %30 to i64
  %32 = icmp sgt i64 %29, %31
  br i1 %32, label %21, label %33

33:                                               ; preds = %21
  %34 = trunc i64 %27 to i32
  %35 = load i32, i32* %14, align 8, !tbaa !369
  br label %36

36:                                               ; preds = %33, %13
  %37 = phi i32 [ %6, %13 ], [ %35, %33 ]
  %38 = phi i32 [ 0, %13 ], [ %34, %33 ]
  %39 = phi i32 [ %8, %13 ], [ %30, %33 ]
  %40 = xor i32 %39, -1
  %41 = add i32 %37, %40
  %42 = icmp slt i32 %41, 1
  br i1 %42, label %50, label %43

43:                                               ; preds = %36
  %44 = add nsw i32 %37, -1
  store i32 %44, i32* %16, align 8, !tbaa !368
  %45 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %2, i64 0, i32 7
  store i32 8, i32* %45, align 4, !tbaa !370
  %46 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %2, i64 0, i32 3
  %47 = load i8*, i8** %46, align 8, !tbaa !371
  %48 = sext i32 %44 to i64
  %49 = getelementptr inbounds i8, i8* %47, i64 %48
  store i8 0, i8* %49, align 1, !tbaa !26
  br label %50

50:                                               ; preds = %43, %36, %9
  %51 = phi i32 [ -1, %9 ], [ %38, %36 ], [ %38, %43 ]
  ret i32 %51
}

; Function Attrs: nounwind uwtable
define dso_local void @init_bit_stream_w(%struct.bit_stream_struc* nocapture %0) local_unnamed_addr #0 {
  %2 = tail call noalias dereferenceable_or_null(16384) i8* @malloc(i64 16384) #21
  %3 = icmp eq i8* %2, null
  br i1 %3, label %4, label %7

4:                                                ; preds = %1
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %6 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %5, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.466, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10.477, i64 0, i64 0)) #22
  tail call void @exit(i32 1) #20
  unreachable

7:                                                ; preds = %1
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16384) %2, i8 0, i64 16384, i1 false) #21
  %8 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %0, i64 0, i32 3
  store i8* %2, i8** %8, align 8, !tbaa !371
  %9 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %0, i64 0, i32 4
  store i32 16384, i32* %9, align 8, !tbaa !369
  %10 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %0, i64 0, i32 6
  store i32 16383, i32* %10, align 8, !tbaa !368
  %11 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %0, i64 0, i32 7
  store i32 8, i32* %11, align 4, !tbaa !370
  %12 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %0, i64 0, i32 5
  store i64 0, i64* %12, align 8, !tbaa !197
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @alloc_buffer(%struct.bit_stream_struc* nocapture %0, i32 %1) local_unnamed_addr #0 {
  %3 = sext i32 %1 to i64
  %4 = tail call noalias i8* @malloc(i64 %3) #21
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %8 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %7, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.466, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10.477, i64 0, i64 0)) #22
  tail call void @exit(i32 1) #20
  unreachable

9:                                                ; preds = %2
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %4, i8 0, i64 %3, i1 false) #21
  %10 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %0, i64 0, i32 3
  store i8* %4, i8** %10, align 8, !tbaa !371
  %11 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %0, i64 0, i32 4
  store i32 %1, i32* %11, align 8, !tbaa !369
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @desalloc_buffer(%struct.bit_stream_struc* nocapture readonly %0) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %0, i64 0, i32 3
  %3 = load i8*, i8** %2, align 8, !tbaa !371
  tail call void @free(i8* %3) #21
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @putbits(%struct.bit_stream_struc* nocapture %0, i32 %1, i32 %2) local_unnamed_addr #3 {
  %4 = icmp sgt i32 %2, 32
  br i1 %4, label %5, label %12

5:                                                ; preds = %3
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %7 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %6, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.11.482, i64 0, i64 0), i32 32) #19
  %8 = zext i32 %2 to i64
  %9 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %0, i64 0, i32 5
  %10 = load i64, i64* %9, align 8, !tbaa !197
  %11 = add i64 %10, %8
  store i64 %11, i64* %9, align 8, !tbaa !197
  br label %18

12:                                               ; preds = %3
  %13 = sext i32 %2 to i64
  %14 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %0, i64 0, i32 5
  %15 = load i64, i64* %14, align 8, !tbaa !197
  %16 = add i64 %15, %13
  store i64 %16, i64* %14, align 8, !tbaa !197
  %17 = icmp sgt i32 %2, 0
  br i1 %17, label %18, label %53

18:                                               ; preds = %12, %5
  %19 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %0, i64 0, i32 7
  %20 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %0, i64 0, i32 3
  %21 = getelementptr inbounds %struct.bit_stream_struc, %struct.bit_stream_struc* %0, i64 0, i32 6
  br label %22

22:                                               ; preds = %51, %18
  %23 = phi i32 [ %2, %18 ], [ %27, %51 ]
  %24 = load i32, i32* %19, align 4, !tbaa !370
  %25 = icmp slt i32 %23, %24
  %26 = select i1 %25, i32 %23, i32 %24
  %27 = sub nsw i32 %23, %26
  %28 = lshr i32 %1, %27
  %29 = sext i32 %26 to i64
  %30 = getelementptr inbounds [9 x i32], [9 x i32]* @putmask, i64 0, i64 %29
  %31 = load i32, i32* %30, align 4, !tbaa !18
  %32 = and i32 %28, %31
  %33 = sub nsw i32 %24, %26
  %34 = shl i32 %32, %33
  %35 = load i8*, i8** %20, align 8, !tbaa !371
  %36 = load i32, i32* %21, align 8, !tbaa !368
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds i8, i8* %35, i64 %37
  %39 = load i8, i8* %38, align 1, !tbaa !26
  %40 = trunc i32 %34 to i8
  %41 = or i8 %39, %40
  store i8 %41, i8* %38, align 1, !tbaa !26
  %42 = load i32, i32* %19, align 4, !tbaa !370
  %43 = sub nsw i32 %42, %26
  store i32 %43, i32* %19, align 4, !tbaa !370
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %51

45:                                               ; preds = %22
  store i32 8, i32* %19, align 4, !tbaa !370
  %46 = load i32, i32* %21, align 8, !tbaa !368
  %47 = add nsw i32 %46, -1
  store i32 %47, i32* %21, align 8, !tbaa !368
  %48 = load i8*, i8** %20, align 8, !tbaa !371
  %49 = sext i32 %47 to i64
  %50 = getelementptr inbounds i8, i8* %48, i64 %49
  store i8 0, i8* %50, align 1, !tbaa !26
  br label %51

51:                                               ; preds = %45, %22
  %52 = icmp sgt i32 %27, 0
  br i1 %52, label %22, label %53

53:                                               ; preds = %51, %12
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local double @calc_sfb_ave_noise(double* nocapture readonly %0, double* nocapture readonly %1, i32 %2, i32 %3, double %4) local_unnamed_addr #3 {
  %6 = tail call double @pow(double %4, double 7.500000e-01) #21
  %7 = mul nsw i32 %3, %2
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %9, label %48

9:                                                ; preds = %5
  %10 = sext i32 %2 to i64
  %11 = zext i32 %7 to i64
  br label %12

12:                                               ; preds = %42, %9
  %13 = phi i64 [ 0, %9 ], [ %46, %42 ]
  %14 = phi double [ 0.000000e+00, %9 ], [ %45, %42 ]
  %15 = getelementptr inbounds double, double* %1, i64 %13
  %16 = load double, double* %15, align 8, !tbaa !27
  %17 = fdiv double %16, %6
  %18 = tail call double @llvm.floor.f64(double %17)
  %19 = fptosi double %18 to i32
  %20 = icmp sgt i32 %19, 8206
  br i1 %20, label %52, label %21

21:                                               ; preds = %12
  %22 = getelementptr inbounds double, double* %0, i64 %13
  %23 = load double, double* %22, align 8, !tbaa !27
  %24 = tail call double @llvm.fabs.f64(double %23)
  %25 = sext i32 %19 to i64
  %26 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i64 0, i64 %25
  %27 = load double, double* %26, align 8, !tbaa !27
  %28 = fmul double %27, %4
  %29 = fsub double %24, %28
  %30 = icmp eq i32 %19, 8206
  br i1 %30, label %42, label %31

31:                                               ; preds = %21
  %32 = add nsw i32 %19, 1
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i64 0, i64 %33
  %35 = load double, double* %34, align 8, !tbaa !27
  %36 = fmul double %35, %4
  %37 = fsub double %24, %36
  %38 = tail call double @llvm.fabs.f64(double %37)
  %39 = tail call double @llvm.fabs.f64(double %29)
  %40 = fcmp olt double %38, %39
  br i1 %40, label %41, label %42

41:                                               ; preds = %31
  br label %42

42:                                               ; preds = %41, %31, %21
  %43 = phi double [ %37, %41 ], [ %29, %31 ], [ %29, %21 ]
  %44 = fmul double %43, %43
  %45 = fadd double %14, %44
  %46 = add i64 %13, %10
  %47 = icmp slt i64 %46, %11
  br i1 %47, label %12, label %48

48:                                               ; preds = %42, %5
  %49 = phi double [ 0.000000e+00, %5 ], [ %45, %42 ]
  %50 = sitofp i32 %3 to double
  %51 = fdiv double %49, %50
  br label %52

52:                                               ; preds = %48, %12
  %53 = phi double [ %51, %48 ], [ -1.000000e+00, %12 ]
  ret double %53
}

; Function Attrs: nounwind uwtable
define dso_local double @find_scalefac(double* nocapture readonly %0, double* nocapture readonly %1, i32 %2, i32 %3, double %4, i32 %5) local_unnamed_addr #0 {
  %7 = mul nsw i32 %5, %2
  %8 = icmp sgt i32 %7, 0
  %9 = sext i32 %2 to i64
  %10 = zext i32 %7 to i64
  %11 = sitofp i32 %5 to double
  br label %12

12:                                               ; preds = %70, %6
  %13 = phi i32 [ 0, %6 ], [ %73, %70 ]
  %14 = phi double [ 3.200000e+01, %6 ], [ %17, %70 ]
  %15 = phi double [ 1.000000e+04, %6 ], [ %72, %70 ]
  %16 = phi double [ -2.050000e+01, %6 ], [ %71, %70 ]
  %17 = fmul double %14, 5.000000e-01
  %18 = tail call double @exp2(double %16) #4
  %19 = tail call double @pow(double %18, double 7.500000e-01) #21
  br i1 %8, label %20, label %56

20:                                               ; preds = %50, %12
  %21 = phi i64 [ %54, %50 ], [ 0, %12 ]
  %22 = phi double [ %53, %50 ], [ 0.000000e+00, %12 ]
  %23 = getelementptr inbounds double, double* %1, i64 %21
  %24 = load double, double* %23, align 8, !tbaa !27
  %25 = fdiv double %24, %19
  %26 = tail call double @llvm.floor.f64(double %25) #21
  %27 = fptosi double %26 to i32
  %28 = icmp sgt i32 %27, 8206
  br i1 %28, label %60, label %29

29:                                               ; preds = %20
  %30 = getelementptr inbounds double, double* %0, i64 %21
  %31 = load double, double* %30, align 8, !tbaa !27
  %32 = tail call double @llvm.fabs.f64(double %31) #21
  %33 = sext i32 %27 to i64
  %34 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i64 0, i64 %33
  %35 = load double, double* %34, align 8, !tbaa !27
  %36 = fmul double %18, %35
  %37 = fsub double %32, %36
  %38 = icmp eq i32 %27, 8206
  br i1 %38, label %50, label %39

39:                                               ; preds = %29
  %40 = add nsw i32 %27, 1
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i64 0, i64 %41
  %43 = load double, double* %42, align 8, !tbaa !27
  %44 = fmul double %18, %43
  %45 = fsub double %32, %44
  %46 = tail call double @llvm.fabs.f64(double %45) #21
  %47 = tail call double @llvm.fabs.f64(double %37) #21
  %48 = fcmp olt double %46, %47
  br i1 %48, label %49, label %50

49:                                               ; preds = %39
  br label %50

50:                                               ; preds = %49, %39, %29
  %51 = phi double [ %45, %49 ], [ %37, %39 ], [ %37, %29 ]
  %52 = fmul double %51, %51
  %53 = fadd double %22, %52
  %54 = add i64 %21, %9
  %55 = icmp slt i64 %54, %10
  br i1 %55, label %20, label %56

56:                                               ; preds = %50, %12
  %57 = phi double [ 0.000000e+00, %12 ], [ %53, %50 ]
  %58 = fdiv double %57, %11
  %59 = fcmp olt double %58, 0.000000e+00
  br i1 %59, label %60, label %62

60:                                               ; preds = %56, %20
  %61 = fadd double %16, %17
  br label %70

62:                                               ; preds = %56
  %63 = fcmp ogt double %58, %4
  br i1 %63, label %64, label %68

64:                                               ; preds = %62
  %65 = fcmp oeq double %15, 1.000000e+04
  %66 = select i1 %65, double %16, double %15
  %67 = fsub double %16, %17
  br label %70

68:                                               ; preds = %62
  %69 = fadd double %16, %17
  br label %70

70:                                               ; preds = %68, %64, %60
  %71 = phi double [ %61, %60 ], [ %67, %64 ], [ %69, %68 ]
  %72 = phi double [ %15, %60 ], [ %66, %64 ], [ %16, %68 ]
  %73 = add nuw nsw i32 %13, 1
  %74 = icmp eq i32 %73, 7
  br i1 %74, label %75, label %12

75:                                               ; preds = %70
  %76 = fadd double %72, 7.500000e-01
  %77 = fadd double %72, 1.000000e-02
  %78 = fcmp ogt double %76, %77
  br i1 %78, label %79, label %136

79:                                               ; preds = %75
  %80 = fmul double %17, 2.000000e+00
  %81 = fadd double %72, %80
  br label %82

82:                                               ; preds = %133, %79
  %83 = phi double [ %76, %79 ], [ %134, %133 ]
  %84 = fsub double %83, %81
  %85 = tail call double @llvm.fabs.f64(double %84)
  %86 = fcmp olt double %85, 1.000000e-02
  %87 = fadd double %83, -2.500000e-01
  %88 = select i1 %86, double %87, double %83
  %89 = tail call double @exp2(double %88) #4
  %90 = tail call double @pow(double %89, double 7.500000e-01) #21
  br i1 %8, label %91, label %127

91:                                               ; preds = %121, %82
  %92 = phi i64 [ %125, %121 ], [ 0, %82 ]
  %93 = phi double [ %124, %121 ], [ 0.000000e+00, %82 ]
  %94 = getelementptr inbounds double, double* %1, i64 %92
  %95 = load double, double* %94, align 8, !tbaa !27
  %96 = fdiv double %95, %90
  %97 = tail call double @llvm.floor.f64(double %96) #21
  %98 = fptosi double %97 to i32
  %99 = icmp sgt i32 %98, 8206
  br i1 %99, label %133, label %100

100:                                              ; preds = %91
  %101 = getelementptr inbounds double, double* %0, i64 %92
  %102 = load double, double* %101, align 8, !tbaa !27
  %103 = tail call double @llvm.fabs.f64(double %102) #21
  %104 = sext i32 %98 to i64
  %105 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i64 0, i64 %104
  %106 = load double, double* %105, align 8, !tbaa !27
  %107 = fmul double %89, %106
  %108 = fsub double %103, %107
  %109 = icmp eq i32 %98, 8206
  br i1 %109, label %121, label %110

110:                                              ; preds = %100
  %111 = add nsw i32 %98, 1
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds [8208 x double], [8208 x double]* @pow43, i64 0, i64 %112
  %114 = load double, double* %113, align 8, !tbaa !27
  %115 = fmul double %89, %114
  %116 = fsub double %103, %115
  %117 = tail call double @llvm.fabs.f64(double %116) #21
  %118 = tail call double @llvm.fabs.f64(double %108) #21
  %119 = fcmp olt double %117, %118
  br i1 %119, label %120, label %121

120:                                              ; preds = %110
  br label %121

121:                                              ; preds = %120, %110, %100
  %122 = phi double [ %116, %120 ], [ %108, %110 ], [ %108, %100 ]
  %123 = fmul double %122, %122
  %124 = fadd double %93, %123
  %125 = add i64 %92, %9
  %126 = icmp slt i64 %125, %10
  br i1 %126, label %91, label %127

127:                                              ; preds = %121, %82
  %128 = phi double [ 0.000000e+00, %82 ], [ %124, %121 ]
  %129 = fdiv double %128, %11
  %130 = fcmp ule double %129, 0.000000e+00
  %131 = fcmp ugt double %129, %4
  %132 = or i1 %130, %131
  br i1 %132, label %133, label %136

133:                                              ; preds = %127, %91
  %134 = fadd double %88, -2.500000e-01
  %135 = fcmp ogt double %134, %77
  br i1 %135, label %82, label %136

136:                                              ; preds = %133, %127, %75
  %137 = phi double [ %72, %75 ], [ %72, %133 ], [ %88, %127 ]
  ret double %137
}

; Function Attrs: nounwind uwtable
define dso_local double @compute_scalefacs_short([3 x double]* nocapture readonly %0, %struct.gr_info* nocapture readonly %1, [3 x i32]* nocapture %2) local_unnamed_addr #0 {
  %4 = alloca [12 x [3 x double]], align 16
  %5 = bitcast [12 x [3 x double]]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 288, i8* nonnull %5) #21
  %6 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %1, i64 0, i32 13
  %7 = load i32, i32* %6, align 4, !tbaa !143
  %8 = icmp eq i32 %7, 0
  %9 = select i1 %8, i32 2, i32 1
  %10 = bitcast [3 x double]* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 dereferenceable(288) %5, i8* nonnull align 8 dereferenceable(288) %10, i64 288, i1 false)
  %11 = sitofp i32 %9 to double
  br label %12

12:                                               ; preds = %12, %3
  %13 = phi i64 [ 0, %3 ], [ %51, %12 ]
  %14 = phi double [ 0.000000e+00, %3 ], [ %50, %12 ]
  %15 = icmp ult i64 %13, 6
  %16 = select i1 %15, double 1.500000e+01, double 7.000000e+00
  %17 = fdiv double %16, %11
  %18 = getelementptr inbounds [12 x [3 x double]], [12 x [3 x double]]* %4, i64 0, i64 %13, i64 0
  %19 = load double, double* %18, align 8, !tbaa !27
  %20 = fmul double %19, %11
  %21 = fsub double 7.500000e-01, %20
  %22 = fadd double %21, 1.000000e-04
  %23 = tail call double @llvm.floor.f64(double %22)
  %24 = fptosi double %23 to i32
  %25 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 %13, i64 0
  store i32 %24, i32* %25, align 4, !tbaa !18
  %26 = fadd double %17, %19
  %27 = fcmp ogt double %26, %14
  %28 = select i1 %27, double %26, double %14
  %29 = getelementptr inbounds [12 x [3 x double]], [12 x [3 x double]]* %4, i64 0, i64 %13, i64 1
  %30 = load double, double* %29, align 8, !tbaa !27
  %31 = fmul double %30, %11
  %32 = fsub double 7.500000e-01, %31
  %33 = fadd double %32, 1.000000e-04
  %34 = tail call double @llvm.floor.f64(double %33)
  %35 = fptosi double %34 to i32
  %36 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 %13, i64 1
  store i32 %35, i32* %36, align 4, !tbaa !18
  %37 = fadd double %17, %30
  %38 = fcmp ogt double %37, %28
  %39 = select i1 %38, double %37, double %28
  %40 = getelementptr inbounds [12 x [3 x double]], [12 x [3 x double]]* %4, i64 0, i64 %13, i64 2
  %41 = load double, double* %40, align 8, !tbaa !27
  %42 = fmul double %41, %11
  %43 = fsub double 7.500000e-01, %42
  %44 = fadd double %43, 1.000000e-04
  %45 = tail call double @llvm.floor.f64(double %44)
  %46 = fptosi double %45 to i32
  %47 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 %13, i64 2
  store i32 %46, i32* %47, align 4, !tbaa !18
  %48 = fadd double %17, %41
  %49 = fcmp ogt double %48, %39
  %50 = select i1 %49, double %48, double %39
  %51 = add nuw nsw i64 %13, 1
  %52 = icmp eq i64 %51, 12
  br i1 %52, label %53, label %12

53:                                               ; preds = %12
  call void @llvm.lifetime.end.p0i8(i64 288, i8* nonnull %5) #21
  ret double %50
}

; Function Attrs: nounwind uwtable
define dso_local double @compute_scalefacs_long(double* nocapture readonly %0, %struct.gr_info* nocapture %1, i32* nocapture %2) local_unnamed_addr #0 {
  %4 = alloca [21 x double], align 16
  %5 = bitcast [21 x double]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 168, i8* nonnull %5) #21
  %6 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %1, i64 0, i32 13
  %7 = load i32, i32* %6, align 4, !tbaa !143
  %8 = icmp eq i32 %7, 0
  %9 = select i1 %8, i32 2, i32 1
  %10 = bitcast double* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 dereferenceable(168) %5, i8* nonnull align 8 dereferenceable(168) %10, i64 168, i1 false)
  %11 = getelementptr inbounds %struct.gr_info, %struct.gr_info* %1, i64 0, i32 12
  store i32 0, i32* %11, align 8, !tbaa !142
  %12 = getelementptr inbounds [21 x double], [21 x double]* %4, i64 0, i64 11
  %13 = load double, double* %12, align 8, !tbaa !27
  %14 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 11), align 4, !tbaa !18
  %15 = sdiv i32 %14, %9
  %16 = sitofp i32 %15 to double
  %17 = fadd double %13, %16
  %18 = fcmp ogt double %17, 0.000000e+00
  br i1 %18, label %48, label %19

19:                                               ; preds = %3
  %20 = getelementptr inbounds [21 x double], [21 x double]* %4, i64 0, i64 12
  %21 = load double, double* %20, align 16, !tbaa !27
  %22 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 12), align 16, !tbaa !18
  %23 = sdiv i32 %22, %9
  %24 = sitofp i32 %23 to double
  %25 = fadd double %21, %24
  %26 = fcmp ogt double %25, 0.000000e+00
  br i1 %26, label %48, label %70

27:                                               ; preds = %126
  store i32 1, i32* %11, align 8, !tbaa !142
  store double %17, double* %12, align 8, !tbaa !27
  store double %25, double* %20, align 16, !tbaa !27
  store double %76, double* %71, align 8, !tbaa !27
  store double %84, double* %79, align 16, !tbaa !27
  store double %92, double* %87, align 8, !tbaa !27
  %28 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 16), align 16, !tbaa !18
  %29 = sdiv i32 %28, %9
  %30 = sitofp i32 %29 to double
  %31 = fadd double %96, %30
  store double %31, double* %95, align 16, !tbaa !27
  %32 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 17), align 4, !tbaa !18
  %33 = sdiv i32 %32, %9
  %34 = sitofp i32 %33 to double
  %35 = fadd double %104, %34
  store double %35, double* %103, align 8, !tbaa !27
  %36 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 18), align 8, !tbaa !18
  %37 = sdiv i32 %36, %9
  %38 = sitofp i32 %37 to double
  %39 = fadd double %112, %38
  store double %39, double* %111, align 16, !tbaa !27
  %40 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 19), align 4, !tbaa !18
  %41 = sdiv i32 %40, %9
  %42 = sitofp i32 %41 to double
  %43 = fadd double %120, %42
  store double %43, double* %119, align 8, !tbaa !27
  %44 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 20), align 16, !tbaa !18
  %45 = sdiv i32 %44, %9
  %46 = sitofp i32 %45 to double
  %47 = fadd double %128, %46
  store double %47, double* %127, align 16, !tbaa !27
  br label %48

48:                                               ; preds = %126, %118, %110, %102, %94, %86, %78, %70, %27, %19, %3
  %49 = sitofp i32 %9 to double
  br label %50

50:                                               ; preds = %50, %48
  %51 = phi i64 [ 0, %48 ], [ %67, %50 ]
  %52 = phi double [ 0.000000e+00, %48 ], [ %66, %50 ]
  %53 = getelementptr inbounds [21 x double], [21 x double]* %4, i64 0, i64 %51
  %54 = load double, double* %53, align 8, !tbaa !27
  %55 = fmul double %54, %49
  %56 = fsub double 7.500000e-01, %55
  %57 = fadd double %56, 1.000000e-04
  %58 = tail call double @llvm.floor.f64(double %57)
  %59 = fptosi double %58 to i32
  %60 = getelementptr inbounds i32, i32* %2, i64 %51
  store i32 %59, i32* %60, align 4, !tbaa !18
  %61 = icmp ult i64 %51, 11
  %62 = select i1 %61, double 1.500000e+01, double 7.000000e+00
  %63 = fdiv double %62, %49
  %64 = fadd double %63, %54
  %65 = fcmp ogt double %64, %52
  %66 = select i1 %65, double %64, double %52
  %67 = add nuw nsw i64 %51, 1
  %68 = icmp eq i64 %67, 21
  br i1 %68, label %69, label %50

69:                                               ; preds = %50
  call void @llvm.lifetime.end.p0i8(i64 168, i8* nonnull %5) #21
  ret double %66

70:                                               ; preds = %19
  %71 = getelementptr inbounds [21 x double], [21 x double]* %4, i64 0, i64 13
  %72 = load double, double* %71, align 8, !tbaa !27
  %73 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 13), align 4, !tbaa !18
  %74 = sdiv i32 %73, %9
  %75 = sitofp i32 %74 to double
  %76 = fadd double %72, %75
  %77 = fcmp ogt double %76, 0.000000e+00
  br i1 %77, label %48, label %78

78:                                               ; preds = %70
  %79 = getelementptr inbounds [21 x double], [21 x double]* %4, i64 0, i64 14
  %80 = load double, double* %79, align 16, !tbaa !27
  %81 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 14), align 8, !tbaa !18
  %82 = sdiv i32 %81, %9
  %83 = sitofp i32 %82 to double
  %84 = fadd double %80, %83
  %85 = fcmp ogt double %84, 0.000000e+00
  br i1 %85, label %48, label %86

86:                                               ; preds = %78
  %87 = getelementptr inbounds [21 x double], [21 x double]* %4, i64 0, i64 15
  %88 = load double, double* %87, align 8, !tbaa !27
  %89 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 15), align 4, !tbaa !18
  %90 = sdiv i32 %89, %9
  %91 = sitofp i32 %90 to double
  %92 = fadd double %88, %91
  %93 = fcmp ogt double %92, 0.000000e+00
  br i1 %93, label %48, label %94

94:                                               ; preds = %86
  %95 = getelementptr inbounds [21 x double], [21 x double]* %4, i64 0, i64 16
  %96 = load double, double* %95, align 16, !tbaa !27
  %97 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 16), align 16, !tbaa !18
  %98 = sdiv i32 %97, %9
  %99 = sitofp i32 %98 to double
  %100 = fadd double %96, %99
  %101 = fcmp ogt double %100, 0.000000e+00
  br i1 %101, label %48, label %102

102:                                              ; preds = %94
  %103 = getelementptr inbounds [21 x double], [21 x double]* %4, i64 0, i64 17
  %104 = load double, double* %103, align 8, !tbaa !27
  %105 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 17), align 4, !tbaa !18
  %106 = sdiv i32 %105, %9
  %107 = sitofp i32 %106 to double
  %108 = fadd double %104, %107
  %109 = fcmp ogt double %108, 0.000000e+00
  br i1 %109, label %48, label %110

110:                                              ; preds = %102
  %111 = getelementptr inbounds [21 x double], [21 x double]* %4, i64 0, i64 18
  %112 = load double, double* %111, align 16, !tbaa !27
  %113 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 18), align 8, !tbaa !18
  %114 = sdiv i32 %113, %9
  %115 = sitofp i32 %114 to double
  %116 = fadd double %112, %115
  %117 = fcmp ogt double %116, 0.000000e+00
  br i1 %117, label %48, label %118

118:                                              ; preds = %110
  %119 = getelementptr inbounds [21 x double], [21 x double]* %4, i64 0, i64 19
  %120 = load double, double* %119, align 8, !tbaa !27
  %121 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 19), align 4, !tbaa !18
  %122 = sdiv i32 %121, %9
  %123 = sitofp i32 %122 to double
  %124 = fadd double %120, %123
  %125 = fcmp ogt double %124, 0.000000e+00
  br i1 %125, label %48, label %126

126:                                              ; preds = %118
  %127 = getelementptr inbounds [21 x double], [21 x double]* %4, i64 0, i64 20
  %128 = load double, double* %127, align 16, !tbaa !27
  %129 = load i32, i32* getelementptr inbounds ([21 x i32], [21 x i32]* @pretab, i64 0, i64 20), align 16, !tbaa !18
  %130 = sdiv i32 %129, %9
  %131 = sitofp i32 %130 to double
  %132 = fadd double %128, %131
  %133 = fcmp ogt double %132, 0.000000e+00
  br i1 %133, label %48, label %27
}

; Function Attrs: nounwind uwtable
define dso_local void @VBR_iteration_loop_new(%struct.lame_global_flags* %0, [2 x double]* nocapture readnone %1, double* nocapture readnone %2, [2 x [576 x double]]* %3, [2 x %struct.III_psy_ratio]* %4, %struct.III_side_info_t* %5, [2 x [576 x i32]]* %6, [2 x %struct.III_scalefac_t]* nocapture %7) local_unnamed_addr #0 {
  %9 = alloca [12 x [3 x double]], align 16
  %10 = alloca [2 x [2 x %struct.III_psy_xmin]], align 16
  %11 = alloca %struct.III_psy_xmin, align 16
  %12 = alloca [576 x double], align 16
  %13 = bitcast [2 x [2 x %struct.III_psy_xmin]]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1952, i8* nonnull %13) #21
  %14 = bitcast %struct.III_psy_xmin* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 488, i8* nonnull %14) #21
  tail call void @iteration_init(%struct.lame_global_flags* %0, %struct.III_side_info_t* %5, [2 x [576 x i32]]* %6) #21
  %15 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 22
  %16 = load i32, i32* %15, align 4, !tbaa !162
  %17 = shl i32 %16, 1
  %18 = add nsw i32 %17, -10
  %19 = sitofp i32 %18 to double
  %20 = fdiv double %19, 1.000000e+01
  %21 = fcmp ogt double %20, 1.270000e+02
  br i1 %21, label %22, label %24, !prof !174

22:                                               ; preds = %8
  %23 = tail call double @pow(double 1.000000e+01, double %20) #21
  br label %24

24:                                               ; preds = %22, %8
  store float 1.000000e+00, float* @masking_lower, align 4, !tbaa !33
  %25 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 45
  %26 = load i32, i32* %25, align 8, !tbaa !95
  %27 = icmp sgt i32 %26, 0
  br i1 %27, label %28, label %439

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.lame_global_flags, %struct.lame_global_flags* %0, i64 0, i32 46
  %30 = bitcast [576 x double]* %12 to i8*
  %31 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 0, i64 0
  %32 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 1, i64 0
  %33 = bitcast [12 x [3 x double]]* %9 to i8*
  %34 = bitcast [3 x double]* %32 to i8*
  %35 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 0, i64 2
  %36 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 0, i64 4
  %37 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 0, i64 6
  %38 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 0, i64 8
  %39 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 0, i64 10
  %40 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 0, i64 12
  %41 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 0, i64 14
  %42 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 0, i64 16
  %43 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 0, i64 18
  %44 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 0, i64 20
  %45 = bitcast %struct.III_psy_xmin* %11 to <2 x double>*
  %46 = bitcast %struct.III_psy_xmin* %11 to <2 x double>*
  %47 = bitcast double* %35 to <2 x double>*
  %48 = bitcast double* %35 to <2 x double>*
  %49 = bitcast double* %36 to <2 x double>*
  %50 = bitcast double* %36 to <2 x double>*
  %51 = bitcast double* %37 to <2 x double>*
  %52 = bitcast double* %37 to <2 x double>*
  %53 = bitcast double* %38 to <2 x double>*
  %54 = bitcast double* %38 to <2 x double>*
  %55 = bitcast double* %39 to <2 x double>*
  %56 = bitcast double* %39 to <2 x double>*
  %57 = bitcast double* %40 to <2 x double>*
  %58 = bitcast double* %40 to <2 x double>*
  %59 = bitcast double* %41 to <2 x double>*
  %60 = bitcast double* %41 to <2 x double>*
  %61 = bitcast double* %42 to <2 x double>*
  %62 = bitcast double* %42 to <2 x double>*
  %63 = bitcast double* %43 to <2 x double>*
  %64 = bitcast double* %43 to <2 x double>*
  %65 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 1, i64 0, i64 0
  %66 = bitcast double* %65 to <2 x double>*
  %67 = bitcast double* %65 to <2 x double>*
  %68 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 1, i64 0, i64 2
  %69 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 1, i64 1, i64 0
  %70 = bitcast double* %69 to <2 x double>*
  %71 = bitcast double* %69 to <2 x double>*
  %72 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 1, i64 1, i64 2
  %73 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 1, i64 2, i64 0
  %74 = bitcast double* %73 to <2 x double>*
  %75 = bitcast double* %73 to <2 x double>*
  %76 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 1, i64 2, i64 2
  %77 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 1, i64 3, i64 0
  %78 = bitcast double* %77 to <2 x double>*
  %79 = bitcast double* %77 to <2 x double>*
  %80 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 1, i64 3, i64 2
  %81 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 1, i64 4, i64 0
  %82 = bitcast double* %81 to <2 x double>*
  %83 = bitcast double* %81 to <2 x double>*
  %84 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 1, i64 4, i64 2
  %85 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 1, i64 5, i64 0
  %86 = bitcast double* %85 to <2 x double>*
  %87 = bitcast double* %85 to <2 x double>*
  %88 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 1, i64 5, i64 2
  %89 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 1, i64 6, i64 0
  %90 = bitcast double* %89 to <2 x double>*
  %91 = bitcast double* %89 to <2 x double>*
  %92 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 1, i64 6, i64 2
  %93 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 1, i64 7, i64 0
  %94 = bitcast double* %93 to <2 x double>*
  %95 = bitcast double* %93 to <2 x double>*
  %96 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 1, i64 7, i64 2
  %97 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 1, i64 8, i64 0
  %98 = bitcast double* %97 to <2 x double>*
  %99 = bitcast double* %97 to <2 x double>*
  %100 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 1, i64 8, i64 2
  %101 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 1, i64 9, i64 0
  %102 = bitcast double* %101 to <2 x double>*
  %103 = bitcast double* %101 to <2 x double>*
  %104 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 1, i64 9, i64 2
  %105 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 1, i64 10, i64 0
  %106 = bitcast double* %105 to <2 x double>*
  %107 = bitcast double* %105 to <2 x double>*
  %108 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 1, i64 10, i64 2
  %109 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 1, i64 11, i64 0
  %110 = bitcast double* %109 to <2 x double>*
  %111 = bitcast double* %109 to <2 x double>*
  %112 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 1, i64 11, i64 2
  br label %113

113:                                              ; preds = %434, %28
  %114 = phi i64 [ 0, %28 ], [ %435, %434 ]
  %115 = load i32, i32* @convert_mdct, align 4, !tbaa !18
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %119, label %117

117:                                              ; preds = %113
  %118 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %3, i64 %114, i64 0
  call void @ms_convert([576 x double]* %118, [576 x double]* %118) #21
  br label %119

119:                                              ; preds = %117, %113
  %120 = load i32, i32* %29, align 4, !tbaa !126
  %121 = icmp sgt i32 %120, 0
  br i1 %121, label %122, label %434

122:                                              ; preds = %429, %119
  %123 = phi i64 [ %430, %429 ], [ 0, %119 ]
  call void @llvm.lifetime.start.p0i8(i64 4608, i8* nonnull %30) #21
  %124 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %5, i64 0, i32 4, i64 %114, i32 0, i64 %123, i32 0, i32 6
  %125 = load i32, i32* %124, align 8, !tbaa !138
  br label %126

126:                                              ; preds = %126, %122
  %127 = phi i64 [ 0, %122 ], [ %143, %126 ]
  %128 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %3, i64 %114, i64 %123, i64 %127
  %129 = load double, double* %128, align 8, !tbaa !27
  %130 = call double @llvm.fabs.f64(double %129)
  %131 = call double @sqrt(double %130) #21
  %132 = fmul double %131, %130
  %133 = call double @sqrt(double %132) #21
  %134 = getelementptr inbounds [576 x double], [576 x double]* %12, i64 0, i64 %127
  store double %133, double* %134, align 16, !tbaa !27
  %135 = or i64 %127, 1
  %136 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %3, i64 %114, i64 %123, i64 %135
  %137 = load double, double* %136, align 8, !tbaa !27
  %138 = call double @llvm.fabs.f64(double %137)
  %139 = call double @sqrt(double %138) #21
  %140 = fmul double %139, %138
  %141 = call double @sqrt(double %140) #21
  %142 = getelementptr inbounds [576 x double], [576 x double]* %12, i64 0, i64 %135
  store double %141, double* %142, align 8, !tbaa !27
  %143 = add nuw nsw i64 %127, 2
  %144 = icmp eq i64 %143, 576
  br i1 %144, label %145, label %126

145:                                              ; preds = %126
  %146 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %5, i64 0, i32 4, i64 %114, i32 0, i64 %123, i32 0
  %147 = icmp eq i32 %125, 2
  %148 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %3, i64 %114, i64 %123, i64 0
  %149 = getelementptr inbounds [2 x %struct.III_psy_ratio], [2 x %struct.III_psy_ratio]* %4, i64 %114, i64 %123
  %150 = getelementptr inbounds [2 x [2 x %struct.III_psy_xmin]], [2 x [2 x %struct.III_psy_xmin]]* %10, i64 0, i64 %114, i64 %123
  %151 = call i32 @calc_xmin(%struct.lame_global_flags* %0, double* %148, %struct.III_psy_ratio* %149, %struct.gr_info* nonnull %146, %struct.III_psy_xmin* nonnull %150) #21
  br i1 %147, label %152, label %209

152:                                              ; preds = %152, %145
  %153 = phi i64 [ %156, %152 ], [ 0, %145 ]
  %154 = phi double [ %207, %152 ], [ 0.000000e+00, %145 ]
  %155 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 1, i64 %153
  %156 = add nuw nsw i64 %153, 1
  %157 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 1, i64 %156
  %158 = load i32, i32* %155, align 4, !tbaa !18
  %159 = load i32, i32* %157, align 4, !tbaa !18
  %160 = sub nsw i32 %159, %158
  %161 = mul nsw i32 %158, 3
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %3, i64 %114, i64 %123, i64 %162
  %164 = getelementptr inbounds [576 x double], [576 x double]* %12, i64 0, i64 %162
  %165 = load float, float* @masking_lower, align 4, !tbaa !33
  %166 = fpext float %165 to double
  %167 = getelementptr inbounds [2 x [2 x %struct.III_psy_xmin]], [2 x [2 x %struct.III_psy_xmin]]* %10, i64 0, i64 %114, i64 %123, i32 1, i64 %153, i64 0
  %168 = load double, double* %167, align 8, !tbaa !27
  %169 = fmul double %168, %166
  %170 = call double @find_scalefac(double* %163, double* nonnull %164, i32 3, i32 undef, double %169, i32 %160)
  %171 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 1, i64 %153, i64 0
  store double %170, double* %171, align 8, !tbaa !27
  %172 = fcmp ogt double %170, %154
  %173 = select i1 %172, double %170, double %154
  %174 = load i32, i32* %155, align 4, !tbaa !18
  %175 = load i32, i32* %157, align 4, !tbaa !18
  %176 = sub nsw i32 %175, %174
  %177 = mul nsw i32 %174, 3
  %178 = add nsw i32 %177, 1
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %3, i64 %114, i64 %123, i64 %179
  %181 = getelementptr inbounds [576 x double], [576 x double]* %12, i64 0, i64 %179
  %182 = load float, float* @masking_lower, align 4, !tbaa !33
  %183 = fpext float %182 to double
  %184 = getelementptr inbounds [2 x [2 x %struct.III_psy_xmin]], [2 x [2 x %struct.III_psy_xmin]]* %10, i64 0, i64 %114, i64 %123, i32 1, i64 %153, i64 1
  %185 = load double, double* %184, align 8, !tbaa !27
  %186 = fmul double %185, %183
  %187 = call double @find_scalefac(double* %180, double* nonnull %181, i32 3, i32 undef, double %186, i32 %176)
  %188 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 1, i64 %153, i64 1
  store double %187, double* %188, align 8, !tbaa !27
  %189 = fcmp ogt double %187, %173
  %190 = select i1 %189, double %187, double %173
  %191 = load i32, i32* %155, align 4, !tbaa !18
  %192 = load i32, i32* %157, align 4, !tbaa !18
  %193 = sub nsw i32 %192, %191
  %194 = mul nsw i32 %191, 3
  %195 = add nsw i32 %194, 2
  %196 = sext i32 %195 to i64
  %197 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %3, i64 %114, i64 %123, i64 %196
  %198 = getelementptr inbounds [576 x double], [576 x double]* %12, i64 0, i64 %196
  %199 = load float, float* @masking_lower, align 4, !tbaa !33
  %200 = fpext float %199 to double
  %201 = getelementptr inbounds [2 x [2 x %struct.III_psy_xmin]], [2 x [2 x %struct.III_psy_xmin]]* %10, i64 0, i64 %114, i64 %123, i32 1, i64 %153, i64 2
  %202 = load double, double* %201, align 8, !tbaa !27
  %203 = fmul double %202, %200
  %204 = call double @find_scalefac(double* %197, double* nonnull %198, i32 3, i32 undef, double %203, i32 %193)
  %205 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 1, i64 %153, i64 2
  store double %204, double* %205, align 8, !tbaa !27
  %206 = fcmp ogt double %204, %190
  %207 = select i1 %206, double %204, double %190
  %208 = icmp eq i64 %156, 12
  br i1 %208, label %231, label %152

209:                                              ; preds = %209, %145
  %210 = phi i64 [ %214, %209 ], [ 0, %145 ]
  %211 = phi double [ %229, %209 ], [ 0.000000e+00, %145 ]
  %212 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 0, i64 %210
  %213 = load i32, i32* %212, align 4, !tbaa !18
  %214 = add nuw nsw i64 %210, 1
  %215 = getelementptr inbounds %struct.scalefac_struct, %struct.scalefac_struct* @scalefac_band, i64 0, i32 0, i64 %214
  %216 = load i32, i32* %215, align 4, !tbaa !18
  %217 = sub nsw i32 %216, %213
  %218 = sext i32 %213 to i64
  %219 = getelementptr inbounds [2 x [576 x double]], [2 x [576 x double]]* %3, i64 %114, i64 %123, i64 %218
  %220 = getelementptr inbounds [576 x double], [576 x double]* %12, i64 0, i64 %218
  %221 = load float, float* @masking_lower, align 4, !tbaa !33
  %222 = fpext float %221 to double
  %223 = getelementptr inbounds [2 x [2 x %struct.III_psy_xmin]], [2 x [2 x %struct.III_psy_xmin]]* %10, i64 0, i64 %114, i64 %123, i32 0, i64 %210
  %224 = load double, double* %223, align 8, !tbaa !27
  %225 = fmul double %224, %222
  %226 = call double @find_scalefac(double* %219, double* nonnull %220, i32 1, i32 undef, double %225, i32 %217)
  %227 = getelementptr inbounds %struct.III_psy_xmin, %struct.III_psy_xmin* %11, i64 0, i32 0, i64 %210
  store double %226, double* %227, align 8, !tbaa !27
  %228 = fcmp ogt double %226, %211
  %229 = select i1 %228, double %226, double %211
  %230 = icmp eq i64 %214, 21
  br i1 %230, label %231, label %209

231:                                              ; preds = %209, %152
  %232 = phi double [ %207, %152 ], [ %229, %209 ]
  %233 = fmul double %232, 4.000000e+00
  %234 = fadd double %233, 2.100000e+02
  %235 = fadd double %234, 5.000000e-01
  %236 = call double @llvm.floor.f64(double %235)
  %237 = fptoui double %236 to i32
  %238 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %5, i64 0, i32 4, i64 %114, i32 0, i64 %123, i32 0, i32 3
  store i32 %237, i32* %238, align 4, !tbaa !135
  br i1 %147, label %268, label %239

239:                                              ; preds = %231
  %240 = load <2 x double>, <2 x double>* %45, align 16, !tbaa !27
  %241 = insertelement <2 x double> undef, double %232, i32 0
  %242 = shufflevector <2 x double> %241, <2 x double> undef, <2 x i32> zeroinitializer
  %243 = fsub <2 x double> %240, %242
  store <2 x double> %243, <2 x double>* %46, align 16, !tbaa !27
  %244 = load <2 x double>, <2 x double>* %47, align 16, !tbaa !27
  %245 = fsub <2 x double> %244, %242
  store <2 x double> %245, <2 x double>* %48, align 16, !tbaa !27
  %246 = load <2 x double>, <2 x double>* %49, align 16, !tbaa !27
  %247 = fsub <2 x double> %246, %242
  store <2 x double> %247, <2 x double>* %50, align 16, !tbaa !27
  %248 = load <2 x double>, <2 x double>* %51, align 16, !tbaa !27
  %249 = fsub <2 x double> %248, %242
  store <2 x double> %249, <2 x double>* %52, align 16, !tbaa !27
  %250 = load <2 x double>, <2 x double>* %53, align 16, !tbaa !27
  %251 = fsub <2 x double> %250, %242
  store <2 x double> %251, <2 x double>* %54, align 16, !tbaa !27
  %252 = load <2 x double>, <2 x double>* %55, align 16, !tbaa !27
  %253 = fsub <2 x double> %252, %242
  store <2 x double> %253, <2 x double>* %56, align 16, !tbaa !27
  %254 = load <2 x double>, <2 x double>* %57, align 16, !tbaa !27
  %255 = fsub <2 x double> %254, %242
  store <2 x double> %255, <2 x double>* %58, align 16, !tbaa !27
  %256 = load <2 x double>, <2 x double>* %59, align 16, !tbaa !27
  %257 = fsub <2 x double> %256, %242
  store <2 x double> %257, <2 x double>* %60, align 16, !tbaa !27
  %258 = load <2 x double>, <2 x double>* %61, align 16, !tbaa !27
  %259 = fsub <2 x double> %258, %242
  store <2 x double> %259, <2 x double>* %62, align 16, !tbaa !27
  %260 = load <2 x double>, <2 x double>* %63, align 16, !tbaa !27
  %261 = fsub <2 x double> %260, %242
  store <2 x double> %261, <2 x double>* %64, align 16, !tbaa !27
  %262 = load double, double* %44, align 16, !tbaa !27
  %263 = fsub double %262, %232
  store double %263, double* %44, align 16, !tbaa !27
  %264 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %5, i64 0, i32 4, i64 %114, i32 0, i64 %123, i32 0, i32 13
  store i32 0, i32* %264, align 4, !tbaa !143
  %265 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %7, i64 %114, i64 %123, i32 0, i64 0
  %266 = call double @compute_scalefacs_long(double* nonnull %31, %struct.gr_info* nonnull %146, i32* %265)
  %267 = fcmp ogt double %266, 0.000000e+00
  br i1 %267, label %425, label %429

268:                                              ; preds = %231
  %269 = load <2 x double>, <2 x double>* %66, align 16, !tbaa !27
  %270 = insertelement <2 x double> undef, double %232, i32 0
  %271 = shufflevector <2 x double> %270, <2 x double> undef, <2 x i32> zeroinitializer
  %272 = fsub <2 x double> %269, %271
  store <2 x double> %272, <2 x double>* %67, align 16, !tbaa !27
  %273 = load double, double* %68, align 16, !tbaa !27
  %274 = fsub double %273, %232
  store double %274, double* %68, align 16, !tbaa !27
  %275 = load <2 x double>, <2 x double>* %70, align 8, !tbaa !27
  %276 = insertelement <2 x double> undef, double %232, i32 0
  %277 = shufflevector <2 x double> %276, <2 x double> undef, <2 x i32> zeroinitializer
  %278 = fsub <2 x double> %275, %277
  store <2 x double> %278, <2 x double>* %71, align 8, !tbaa !27
  %279 = load double, double* %72, align 8, !tbaa !27
  %280 = fsub double %279, %232
  store double %280, double* %72, align 8, !tbaa !27
  %281 = load <2 x double>, <2 x double>* %74, align 16, !tbaa !27
  %282 = insertelement <2 x double> undef, double %232, i32 0
  %283 = shufflevector <2 x double> %282, <2 x double> undef, <2 x i32> zeroinitializer
  %284 = fsub <2 x double> %281, %283
  store <2 x double> %284, <2 x double>* %75, align 16, !tbaa !27
  %285 = load double, double* %76, align 16, !tbaa !27
  %286 = fsub double %285, %232
  store double %286, double* %76, align 16, !tbaa !27
  %287 = load <2 x double>, <2 x double>* %78, align 8, !tbaa !27
  %288 = insertelement <2 x double> undef, double %232, i32 0
  %289 = shufflevector <2 x double> %288, <2 x double> undef, <2 x i32> zeroinitializer
  %290 = fsub <2 x double> %287, %289
  store <2 x double> %290, <2 x double>* %79, align 8, !tbaa !27
  %291 = load double, double* %80, align 8, !tbaa !27
  %292 = fsub double %291, %232
  store double %292, double* %80, align 8, !tbaa !27
  %293 = load <2 x double>, <2 x double>* %82, align 16, !tbaa !27
  %294 = insertelement <2 x double> undef, double %232, i32 0
  %295 = shufflevector <2 x double> %294, <2 x double> undef, <2 x i32> zeroinitializer
  %296 = fsub <2 x double> %293, %295
  store <2 x double> %296, <2 x double>* %83, align 16, !tbaa !27
  %297 = load double, double* %84, align 16, !tbaa !27
  %298 = fsub double %297, %232
  store double %298, double* %84, align 16, !tbaa !27
  %299 = load <2 x double>, <2 x double>* %86, align 8, !tbaa !27
  %300 = insertelement <2 x double> undef, double %232, i32 0
  %301 = shufflevector <2 x double> %300, <2 x double> undef, <2 x i32> zeroinitializer
  %302 = fsub <2 x double> %299, %301
  store <2 x double> %302, <2 x double>* %87, align 8, !tbaa !27
  %303 = load double, double* %88, align 8, !tbaa !27
  %304 = fsub double %303, %232
  store double %304, double* %88, align 8, !tbaa !27
  %305 = load <2 x double>, <2 x double>* %90, align 16, !tbaa !27
  %306 = insertelement <2 x double> undef, double %232, i32 0
  %307 = shufflevector <2 x double> %306, <2 x double> undef, <2 x i32> zeroinitializer
  %308 = fsub <2 x double> %305, %307
  store <2 x double> %308, <2 x double>* %91, align 16, !tbaa !27
  %309 = load double, double* %92, align 16, !tbaa !27
  %310 = fsub double %309, %232
  store double %310, double* %92, align 16, !tbaa !27
  %311 = load <2 x double>, <2 x double>* %94, align 8, !tbaa !27
  %312 = insertelement <2 x double> undef, double %232, i32 0
  %313 = shufflevector <2 x double> %312, <2 x double> undef, <2 x i32> zeroinitializer
  %314 = fsub <2 x double> %311, %313
  store <2 x double> %314, <2 x double>* %95, align 8, !tbaa !27
  %315 = load double, double* %96, align 8, !tbaa !27
  %316 = fsub double %315, %232
  store double %316, double* %96, align 8, !tbaa !27
  %317 = load <2 x double>, <2 x double>* %98, align 16, !tbaa !27
  %318 = insertelement <2 x double> undef, double %232, i32 0
  %319 = shufflevector <2 x double> %318, <2 x double> undef, <2 x i32> zeroinitializer
  %320 = fsub <2 x double> %317, %319
  store <2 x double> %320, <2 x double>* %99, align 16, !tbaa !27
  %321 = load double, double* %100, align 16, !tbaa !27
  %322 = fsub double %321, %232
  store double %322, double* %100, align 16, !tbaa !27
  %323 = load <2 x double>, <2 x double>* %102, align 8, !tbaa !27
  %324 = insertelement <2 x double> undef, double %232, i32 0
  %325 = shufflevector <2 x double> %324, <2 x double> undef, <2 x i32> zeroinitializer
  %326 = fsub <2 x double> %323, %325
  store <2 x double> %326, <2 x double>* %103, align 8, !tbaa !27
  %327 = load double, double* %104, align 8, !tbaa !27
  %328 = fsub double %327, %232
  store double %328, double* %104, align 8, !tbaa !27
  %329 = load <2 x double>, <2 x double>* %106, align 16, !tbaa !27
  %330 = insertelement <2 x double> undef, double %232, i32 0
  %331 = shufflevector <2 x double> %330, <2 x double> undef, <2 x i32> zeroinitializer
  %332 = fsub <2 x double> %329, %331
  store <2 x double> %332, <2 x double>* %107, align 16, !tbaa !27
  %333 = load double, double* %108, align 16, !tbaa !27
  %334 = fsub double %333, %232
  store double %334, double* %108, align 16, !tbaa !27
  %335 = load <2 x double>, <2 x double>* %110, align 8, !tbaa !27
  %336 = insertelement <2 x double> undef, double %232, i32 0
  %337 = shufflevector <2 x double> %336, <2 x double> undef, <2 x i32> zeroinitializer
  %338 = fsub <2 x double> %335, %337
  store <2 x double> %338, <2 x double>* %111, align 8, !tbaa !27
  %339 = load double, double* %112, align 8, !tbaa !27
  %340 = fsub double %339, %232
  store double %340, double* %112, align 8, !tbaa !27
  %341 = getelementptr inbounds %struct.III_side_info_t, %struct.III_side_info_t* %5, i64 0, i32 4, i64 %114, i32 0, i64 %123, i32 0, i32 13
  store i32 0, i32* %341, align 4, !tbaa !143
  call void @llvm.lifetime.start.p0i8(i64 288, i8* nonnull %33) #21
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 dereferenceable(288) %33, i8* nonnull align 16 dereferenceable(288) %34, i64 288, i1 false) #21
  br label %342

342:                                              ; preds = %342, %268
  %343 = phi i64 [ 0, %268 ], [ %380, %342 ]
  %344 = phi double [ 0.000000e+00, %268 ], [ %379, %342 ]
  %345 = icmp ult i64 %343, 6
  %346 = select i1 %345, double 7.500000e+00, double 3.500000e+00
  %347 = getelementptr inbounds [12 x [3 x double]], [12 x [3 x double]]* %9, i64 0, i64 %343, i64 0
  %348 = load double, double* %347, align 8, !tbaa !27
  %349 = fmul double %348, 2.000000e+00
  %350 = fsub double 7.500000e-01, %349
  %351 = fadd double %350, 1.000000e-04
  %352 = call double @llvm.floor.f64(double %351) #21
  %353 = fptosi double %352 to i32
  %354 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %7, i64 %114, i64 %123, i32 1, i64 %343, i64 0
  store i32 %353, i32* %354, align 4, !tbaa !18
  %355 = fadd double %346, %348
  %356 = fcmp ogt double %355, %344
  %357 = select i1 %356, double %355, double %344
  %358 = getelementptr inbounds [12 x [3 x double]], [12 x [3 x double]]* %9, i64 0, i64 %343, i64 1
  %359 = load double, double* %358, align 8, !tbaa !27
  %360 = fmul double %359, 2.000000e+00
  %361 = fsub double 7.500000e-01, %360
  %362 = fadd double %361, 1.000000e-04
  %363 = call double @llvm.floor.f64(double %362) #21
  %364 = fptosi double %363 to i32
  %365 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %7, i64 %114, i64 %123, i32 1, i64 %343, i64 1
  store i32 %364, i32* %365, align 4, !tbaa !18
  %366 = fadd double %346, %359
  %367 = fcmp ogt double %366, %357
  %368 = select i1 %367, double %366, double %357
  %369 = getelementptr inbounds [12 x [3 x double]], [12 x [3 x double]]* %9, i64 0, i64 %343, i64 2
  %370 = load double, double* %369, align 8, !tbaa !27
  %371 = fmul double %370, 2.000000e+00
  %372 = fsub double 7.500000e-01, %371
  %373 = fadd double %372, 1.000000e-04
  %374 = call double @llvm.floor.f64(double %373) #21
  %375 = fptosi double %374 to i32
  %376 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %7, i64 %114, i64 %123, i32 1, i64 %343, i64 2
  store i32 %375, i32* %376, align 4, !tbaa !18
  %377 = fadd double %346, %370
  %378 = fcmp ogt double %377, %368
  %379 = select i1 %378, double %377, double %368
  %380 = add nuw nsw i64 %343, 1
  %381 = icmp eq i64 %380, 12
  br i1 %381, label %382, label %342

382:                                              ; preds = %342
  call void @llvm.lifetime.end.p0i8(i64 288, i8* nonnull %33) #21
  %383 = fcmp ogt double %379, 0.000000e+00
  br i1 %383, label %384, label %429

384:                                              ; preds = %382
  store i32 1, i32* %341, align 4, !tbaa !143
  call void @llvm.lifetime.start.p0i8(i64 288, i8* nonnull %33) #21
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 dereferenceable(288) %33, i8* nonnull align 16 dereferenceable(288) %34, i64 288, i1 false) #21
  br label %385

385:                                              ; preds = %385, %384
  %386 = phi i64 [ 0, %384 ], [ %420, %385 ]
  %387 = phi double [ 0.000000e+00, %384 ], [ %419, %385 ]
  %388 = icmp ult i64 %386, 6
  %389 = select i1 %388, double 1.500000e+01, double 7.000000e+00
  %390 = getelementptr inbounds [12 x [3 x double]], [12 x [3 x double]]* %9, i64 0, i64 %386, i64 0
  %391 = load double, double* %390, align 8, !tbaa !27
  %392 = fsub double 7.500000e-01, %391
  %393 = fadd double %392, 1.000000e-04
  %394 = call double @llvm.floor.f64(double %393) #21
  %395 = fptosi double %394 to i32
  %396 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %7, i64 %114, i64 %123, i32 1, i64 %386, i64 0
  store i32 %395, i32* %396, align 4, !tbaa !18
  %397 = fadd double %389, %391
  %398 = fcmp ogt double %397, %387
  %399 = select i1 %398, double %397, double %387
  %400 = getelementptr inbounds [12 x [3 x double]], [12 x [3 x double]]* %9, i64 0, i64 %386, i64 1
  %401 = load double, double* %400, align 8, !tbaa !27
  %402 = fsub double 7.500000e-01, %401
  %403 = fadd double %402, 1.000000e-04
  %404 = call double @llvm.floor.f64(double %403) #21
  %405 = fptosi double %404 to i32
  %406 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %7, i64 %114, i64 %123, i32 1, i64 %386, i64 1
  store i32 %405, i32* %406, align 4, !tbaa !18
  %407 = fadd double %389, %401
  %408 = fcmp ogt double %407, %399
  %409 = select i1 %408, double %407, double %399
  %410 = getelementptr inbounds [12 x [3 x double]], [12 x [3 x double]]* %9, i64 0, i64 %386, i64 2
  %411 = load double, double* %410, align 8, !tbaa !27
  %412 = fsub double 7.500000e-01, %411
  %413 = fadd double %412, 1.000000e-04
  %414 = call double @llvm.floor.f64(double %413) #21
  %415 = fptosi double %414 to i32
  %416 = getelementptr inbounds [2 x %struct.III_scalefac_t], [2 x %struct.III_scalefac_t]* %7, i64 %114, i64 %123, i32 1, i64 %386, i64 2
  store i32 %415, i32* %416, align 4, !tbaa !18
  %417 = fadd double %389, %411
  %418 = fcmp ogt double %417, %409
  %419 = select i1 %418, double %417, double %409
  %420 = add nuw nsw i64 %386, 1
  %421 = icmp eq i64 %420, 12
  br i1 %421, label %422, label %385

422:                                              ; preds = %385
  call void @llvm.lifetime.end.p0i8(i64 288, i8* nonnull %33) #21
  %423 = fcmp ogt double %419, 0.000000e+00
  br i1 %423, label %424, label %429

424:                                              ; preds = %422
  call void @exit(i32 32) #20
  unreachable

425:                                              ; preds = %239
  store i32 1, i32* %264, align 4, !tbaa !143
  %426 = call double @compute_scalefacs_long(double* nonnull %31, %struct.gr_info* nonnull %146, i32* %265)
  %427 = fcmp ogt double %426, 0.000000e+00
  br i1 %427, label %428, label %429

428:                                              ; preds = %425
  call void @exit(i32 32) #20
  unreachable

429:                                              ; preds = %425, %422, %382, %239
  call void @llvm.lifetime.end.p0i8(i64 4608, i8* nonnull %30) #21
  %430 = add nuw nsw i64 %123, 1
  %431 = load i32, i32* %29, align 4, !tbaa !126
  %432 = sext i32 %431 to i64
  %433 = icmp slt i64 %430, %432
  br i1 %433, label %122, label %434

434:                                              ; preds = %429, %119
  %435 = add nuw nsw i64 %114, 1
  %436 = load i32, i32* %25, align 8, !tbaa !95
  %437 = sext i32 %436 to i64
  %438 = icmp slt i64 %435, %437
  br i1 %438, label %113, label %439

439:                                              ; preds = %434, %24
  call void @llvm.lifetime.end.p0i8(i64 488, i8* nonnull %14) #21
  call void @llvm.lifetime.end.p0i8(i64 1952, i8* nonnull %13) #21
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @AddVbrFrame(i32 %0) local_unnamed_addr #0 {
  %2 = load i32*, i32** @pVbrFrames, align 8, !tbaa !7
  %3 = icmp eq i32* %2, null
  %4 = load i32, i32* @nVbrFrameBufferSize, align 4
  %5 = icmp eq i32 %4, 0
  %6 = or i1 %3, %5
  %7 = bitcast i32* %2 to i8*
  br i1 %6, label %8, label %11

8:                                                ; preds = %1
  store i32 100, i32* @nVbrFrameBufferSize, align 4, !tbaa !18
  %9 = tail call noalias dereferenceable_or_null(400) i8* @malloc(i64 400) #21
  store i8* %9, i8** bitcast (i32** @pVbrFrames to i8**), align 8, !tbaa !7
  %10 = bitcast i8* %9 to i32*
  br label %11

11:                                               ; preds = %8, %1
  %12 = phi i32* [ %2, %1 ], [ %10, %8 ]
  %13 = phi i8* [ %7, %1 ], [ %9, %8 ]
  %14 = phi i32 [ %4, %1 ], [ 100, %8 ]
  %15 = load i32, i32* @nVbrNumFrames, align 4, !tbaa !18
  %16 = icmp eq i32 %15, %14
  br i1 %16, label %17, label %24

17:                                               ; preds = %11
  %18 = shl nsw i32 %14, 1
  store i32 %18, i32* @nVbrFrameBufferSize, align 4, !tbaa !18
  %19 = sext i32 %18 to i64
  %20 = shl nsw i64 %19, 2
  %21 = tail call i8* @realloc(i8* %13, i64 %20) #21
  store i8* %21, i8** bitcast (i32** @pVbrFrames to i8**), align 8, !tbaa !7
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* @nVbrNumFrames, align 4, !tbaa !18
  br label %24

24:                                               ; preds = %17, %11
  %25 = phi i32 [ %23, %17 ], [ %15, %11 ]
  %26 = phi i32* [ %22, %17 ], [ %12, %11 ]
  %27 = add nsw i32 %25, 1
  store i32 %27, i32* @nVbrNumFrames, align 4, !tbaa !18
  %28 = sext i32 %25 to i64
  %29 = getelementptr inbounds i32, i32* %26, i64 %28
  store i32 %0, i32* %29, align 4, !tbaa !18
  ret void
}

; Function Attrs: nounwind
declare dso_local noalias i8* @realloc(i8* nocapture, i64) local_unnamed_addr #9

; Function Attrs: nofree norecurse nounwind uwtable writeonly
define dso_local void @CreateI4(i8* nocapture %0, i32 %1) local_unnamed_addr #8 {
  %3 = lshr i32 %1, 24
  %4 = trunc i32 %3 to i8
  store i8 %4, i8* %0, align 1, !tbaa !26
  %5 = lshr i32 %1, 16
  %6 = trunc i32 %5 to i8
  %7 = getelementptr inbounds i8, i8* %0, i64 1
  store i8 %6, i8* %7, align 1, !tbaa !26
  %8 = lshr i32 %1, 8
  %9 = trunc i32 %8 to i8
  %10 = getelementptr inbounds i8, i8* %0, i64 2
  store i8 %9, i8* %10, align 1, !tbaa !26
  %11 = trunc i32 %1 to i8
  %12 = getelementptr inbounds i8, i8* %0, i64 3
  store i8 %11, i8* %12, align 1, !tbaa !26
  ret void
}

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local i32 @CheckVbrTag(i8* nocapture readonly %0) local_unnamed_addr #10 {
  %2 = getelementptr inbounds i8, i8* %0, i64 1
  %3 = load i8, i8* %2, align 1, !tbaa !26
  %4 = and i8 %3, 8
  %5 = getelementptr inbounds i8, i8* %0, i64 3
  %6 = load i8, i8* %5, align 1, !tbaa !26
  %7 = icmp eq i8 %4, 0
  %8 = icmp ult i8 %6, -64
  %9 = select i1 %8, i64 36, i64 21
  %10 = select i1 %8, i64 21, i64 13
  %11 = select i1 %7, i64 %10, i64 %9
  %12 = getelementptr inbounds i8, i8* %0, i64 %11
  %13 = load i8, i8* %12, align 1, !tbaa !26
  %14 = icmp eq i8 %13, 88
  br i1 %14, label %15, label %28

15:                                               ; preds = %1
  %16 = getelementptr inbounds i8, i8* %12, i64 1
  %17 = load i8, i8* %16, align 1, !tbaa !26
  %18 = icmp eq i8 %17, 105
  br i1 %18, label %19, label %28

19:                                               ; preds = %15
  %20 = getelementptr inbounds i8, i8* %12, i64 2
  %21 = load i8, i8* %20, align 1, !tbaa !26
  %22 = icmp eq i8 %21, 110
  br i1 %22, label %23, label %28

23:                                               ; preds = %19
  %24 = getelementptr inbounds i8, i8* %12, i64 3
  %25 = load i8, i8* %24, align 1, !tbaa !26
  %26 = icmp eq i8 %25, 103
  %27 = zext i1 %26 to i32
  br label %28

28:                                               ; preds = %23, %19, %15, %1
  %29 = phi i32 [ 0, %1 ], [ 0, %15 ], [ 0, %19 ], [ %27, %23 ]
  ret i32 %29
}

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local i32 @GetVbrTag(%struct.VBRTAGDATA* nocapture %0, i8* nocapture readonly %1) local_unnamed_addr #5 {
  %3 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %0, i64 0, i32 2
  store i32 0, i32* %3, align 4, !tbaa !372
  %4 = getelementptr inbounds i8, i8* %1, i64 1
  %5 = load i8, i8* %4, align 1, !tbaa !26
  %6 = lshr i8 %5, 3
  %7 = and i8 %6, 1
  %8 = zext i8 %7 to i32
  %9 = getelementptr inbounds i8, i8* %1, i64 2
  %10 = load i8, i8* %9, align 1, !tbaa !26
  %11 = lshr i8 %10, 2
  %12 = and i8 %11, 3
  %13 = getelementptr inbounds i8, i8* %1, i64 3
  %14 = load i8, i8* %13, align 1, !tbaa !26
  %15 = icmp eq i8 %7, 0
  %16 = icmp ult i8 %14, -64
  %17 = select i1 %16, i64 36, i64 21
  %18 = select i1 %16, i64 21, i64 13
  %19 = select i1 %15, i64 %18, i64 %17
  %20 = getelementptr inbounds i8, i8* %1, i64 %19
  %21 = load i8, i8* %20, align 1, !tbaa !26
  %22 = icmp eq i8 %21, 88
  br i1 %22, label %23, label %197

23:                                               ; preds = %2
  %24 = getelementptr inbounds i8, i8* %20, i64 1
  %25 = load i8, i8* %24, align 1, !tbaa !26
  %26 = icmp eq i8 %25, 105
  br i1 %26, label %27, label %197

27:                                               ; preds = %23
  %28 = getelementptr inbounds i8, i8* %20, i64 2
  %29 = load i8, i8* %28, align 1, !tbaa !26
  %30 = icmp eq i8 %29, 110
  br i1 %30, label %31, label %197

31:                                               ; preds = %27
  %32 = getelementptr inbounds i8, i8* %20, i64 3
  %33 = load i8, i8* %32, align 1, !tbaa !26
  %34 = icmp eq i8 %33, 103
  br i1 %34, label %35, label %197

35:                                               ; preds = %31
  %36 = getelementptr inbounds i8, i8* %20, i64 4
  %37 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %0, i64 0, i32 0
  store i32 %8, i32* %37, align 4, !tbaa !374
  %38 = zext i8 %12 to i64
  %39 = getelementptr inbounds [4 x i32], [4 x i32]* @GetVbrTag.sr_table, i64 0, i64 %38
  %40 = load i32, i32* %39, align 4, !tbaa !18
  %41 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %0, i64 0, i32 1
  %42 = xor i8 %7, 1
  %43 = zext i8 %42 to i32
  %44 = ashr i32 %40, %43
  store i32 %44, i32* %41, align 4, !tbaa !375
  %45 = load i8, i8* %36, align 1, !tbaa !26
  %46 = zext i8 %45 to i32
  %47 = getelementptr inbounds i8, i8* %20, i64 5
  %48 = load i8, i8* %47, align 1, !tbaa !26
  %49 = zext i8 %48 to i32
  %50 = shl nuw nsw i32 %46, 16
  %51 = shl nuw nsw i32 %49, 8
  %52 = or i32 %51, %50
  %53 = getelementptr inbounds i8, i8* %20, i64 6
  %54 = load i8, i8* %53, align 1, !tbaa !26
  %55 = zext i8 %54 to i32
  %56 = or i32 %52, %55
  %57 = shl nuw i32 %56, 8
  %58 = getelementptr inbounds i8, i8* %20, i64 7
  %59 = load i8, i8* %58, align 1, !tbaa !26
  %60 = zext i8 %59 to i32
  %61 = or i32 %57, %60
  store i32 %61, i32* %3, align 4, !tbaa !372
  %62 = getelementptr inbounds i8, i8* %20, i64 8
  %63 = and i32 %60, 1
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %85, label %65

65:                                               ; preds = %35
  %66 = load i8, i8* %62, align 1, !tbaa !26
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds i8, i8* %20, i64 9
  %69 = load i8, i8* %68, align 1, !tbaa !26
  %70 = zext i8 %69 to i32
  %71 = shl nuw nsw i32 %67, 16
  %72 = shl nuw nsw i32 %70, 8
  %73 = or i32 %72, %71
  %74 = getelementptr inbounds i8, i8* %20, i64 10
  %75 = load i8, i8* %74, align 1, !tbaa !26
  %76 = zext i8 %75 to i32
  %77 = or i32 %73, %76
  %78 = shl nuw i32 %77, 8
  %79 = getelementptr inbounds i8, i8* %20, i64 11
  %80 = load i8, i8* %79, align 1, !tbaa !26
  %81 = zext i8 %80 to i32
  %82 = or i32 %78, %81
  %83 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %0, i64 0, i32 3
  store i32 %82, i32* %83, align 4, !tbaa !376
  %84 = getelementptr inbounds i8, i8* %20, i64 12
  br label %85

85:                                               ; preds = %65, %35
  %86 = phi i8* [ %84, %65 ], [ %62, %35 ]
  %87 = and i32 %60, 2
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %109, label %89

89:                                               ; preds = %85
  %90 = load i8, i8* %86, align 1, !tbaa !26
  %91 = zext i8 %90 to i32
  %92 = getelementptr inbounds i8, i8* %86, i64 1
  %93 = load i8, i8* %92, align 1, !tbaa !26
  %94 = zext i8 %93 to i32
  %95 = shl nuw nsw i32 %91, 16
  %96 = shl nuw nsw i32 %94, 8
  %97 = or i32 %96, %95
  %98 = getelementptr inbounds i8, i8* %86, i64 2
  %99 = load i8, i8* %98, align 1, !tbaa !26
  %100 = zext i8 %99 to i32
  %101 = or i32 %97, %100
  %102 = shl nuw i32 %101, 8
  %103 = getelementptr inbounds i8, i8* %86, i64 3
  %104 = load i8, i8* %103, align 1, !tbaa !26
  %105 = zext i8 %104 to i32
  %106 = or i32 %102, %105
  %107 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %0, i64 0, i32 4
  store i32 %106, i32* %107, align 4, !tbaa !377
  %108 = getelementptr inbounds i8, i8* %86, i64 4
  br label %109

109:                                              ; preds = %89, %85
  %110 = phi i8* [ %108, %89 ], [ %86, %85 ]
  %111 = and i32 %60, 4
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %174, label %113

113:                                              ; preds = %109
  %114 = getelementptr %struct.VBRTAGDATA, %struct.VBRTAGDATA* %0, i64 0, i32 6, i64 0
  %115 = getelementptr %struct.VBRTAGDATA, %struct.VBRTAGDATA* %0, i64 1
  %116 = bitcast %struct.VBRTAGDATA* %115 to i8*
  %117 = getelementptr i8, i8* %110, i64 100
  %118 = icmp ult i8* %114, %117
  %119 = icmp ult i8* %110, %116
  %120 = and i1 %118, %119
  br i1 %120, label %151, label %121

121:                                              ; preds = %113
  %122 = bitcast i8* %110 to <16 x i8>*
  %123 = load <16 x i8>, <16 x i8>* %122, align 1, !tbaa !26, !alias.scope !378
  %124 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %0, i64 0, i32 6, i64 0
  %125 = bitcast i8* %124 to <16 x i8>*
  store <16 x i8> %123, <16 x i8>* %125, align 1, !tbaa !26, !alias.scope !381, !noalias !378
  %126 = getelementptr inbounds i8, i8* %110, i64 16
  %127 = bitcast i8* %126 to <16 x i8>*
  %128 = load <16 x i8>, <16 x i8>* %127, align 1, !tbaa !26, !alias.scope !378
  %129 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %0, i64 0, i32 6, i64 16
  %130 = bitcast i8* %129 to <16 x i8>*
  store <16 x i8> %128, <16 x i8>* %130, align 1, !tbaa !26, !alias.scope !381, !noalias !378
  %131 = getelementptr inbounds i8, i8* %110, i64 32
  %132 = bitcast i8* %131 to <16 x i8>*
  %133 = load <16 x i8>, <16 x i8>* %132, align 1, !tbaa !26, !alias.scope !378
  %134 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %0, i64 0, i32 6, i64 32
  %135 = bitcast i8* %134 to <16 x i8>*
  store <16 x i8> %133, <16 x i8>* %135, align 1, !tbaa !26, !alias.scope !381, !noalias !378
  %136 = getelementptr inbounds i8, i8* %110, i64 48
  %137 = bitcast i8* %136 to <16 x i8>*
  %138 = load <16 x i8>, <16 x i8>* %137, align 1, !tbaa !26, !alias.scope !378
  %139 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %0, i64 0, i32 6, i64 48
  %140 = bitcast i8* %139 to <16 x i8>*
  store <16 x i8> %138, <16 x i8>* %140, align 1, !tbaa !26, !alias.scope !381, !noalias !378
  %141 = getelementptr inbounds i8, i8* %110, i64 64
  %142 = bitcast i8* %141 to <16 x i8>*
  %143 = load <16 x i8>, <16 x i8>* %142, align 1, !tbaa !26, !alias.scope !378
  %144 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %0, i64 0, i32 6, i64 64
  %145 = bitcast i8* %144 to <16 x i8>*
  store <16 x i8> %143, <16 x i8>* %145, align 1, !tbaa !26, !alias.scope !381, !noalias !378
  %146 = getelementptr inbounds i8, i8* %110, i64 80
  %147 = bitcast i8* %146 to <16 x i8>*
  %148 = load <16 x i8>, <16 x i8>* %147, align 1, !tbaa !26, !alias.scope !378
  %149 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %0, i64 0, i32 6, i64 80
  %150 = bitcast i8* %149 to <16 x i8>*
  store <16 x i8> %148, <16 x i8>* %150, align 1, !tbaa !26, !alias.scope !381, !noalias !378
  br label %151

151:                                              ; preds = %121, %113
  %152 = phi i64 [ 0, %113 ], [ 96, %121 ]
  br label %153

153:                                              ; preds = %153, %151
  %154 = phi i64 [ %152, %151 ], [ %170, %153 ]
  %155 = getelementptr inbounds i8, i8* %110, i64 %154
  %156 = load i8, i8* %155, align 1, !tbaa !26
  %157 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %0, i64 0, i32 6, i64 %154
  store i8 %156, i8* %157, align 1, !tbaa !26
  %158 = or i64 %154, 1
  %159 = getelementptr inbounds i8, i8* %110, i64 %158
  %160 = load i8, i8* %159, align 1, !tbaa !26
  %161 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %0, i64 0, i32 6, i64 %158
  store i8 %160, i8* %161, align 1, !tbaa !26
  %162 = or i64 %154, 2
  %163 = getelementptr inbounds i8, i8* %110, i64 %162
  %164 = load i8, i8* %163, align 1, !tbaa !26
  %165 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %0, i64 0, i32 6, i64 %162
  store i8 %164, i8* %165, align 1, !tbaa !26
  %166 = or i64 %154, 3
  %167 = getelementptr inbounds i8, i8* %110, i64 %166
  %168 = load i8, i8* %167, align 1, !tbaa !26
  %169 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %0, i64 0, i32 6, i64 %166
  store i8 %168, i8* %169, align 1, !tbaa !26
  %170 = add nuw nsw i64 %154, 4
  %171 = icmp eq i64 %170, 100
  br i1 %171, label %172, label %153, !llvm.loop !383

172:                                              ; preds = %153
  %173 = getelementptr inbounds i8, i8* %110, i64 100
  br label %174

174:                                              ; preds = %172, %109
  %175 = phi i8* [ %173, %172 ], [ %110, %109 ]
  %176 = getelementptr inbounds %struct.VBRTAGDATA, %struct.VBRTAGDATA* %0, i64 0, i32 5
  store i32 -1, i32* %176, align 4, !tbaa !384
  %177 = and i32 %60, 8
  %178 = icmp eq i32 %177, 0
  br i1 %178, label %197, label %179

179:                                              ; preds = %174
  %180 = load i8, i8* %175, align 1, !tbaa !26
  %181 = zext i8 %180 to i32
  %182 = getelementptr inbounds i8, i8* %175, i64 1
  %183 = load i8, i8* %182, align 1, !tbaa !26
  %184 = zext i8 %183 to i32
  %185 = shl nuw nsw i32 %181, 16
  %186 = shl nuw nsw i32 %184, 8
  %187 = or i32 %186, %185
  %188 = getelementptr inbounds i8, i8* %175, i64 2
  %189 = load i8, i8* %188, align 1, !tbaa !26
  %190 = zext i8 %189 to i32
  %191 = or i32 %187, %190
  %192 = shl nuw i32 %191, 8
  %193 = getelementptr inbounds i8, i8* %175, i64 3
  %194 = load i8, i8* %193, align 1, !tbaa !26
  %195 = zext i8 %194 to i32
  %196 = or i32 %192, %195
  store i32 %196, i32* %176, align 4, !tbaa !384
  br label %197

197:                                              ; preds = %179, %174, %31, %27, %23, %2
  %198 = phi i32 [ 0, %2 ], [ 0, %23 ], [ 0, %27 ], [ 0, %31 ], [ 1, %174 ], [ 1, %179 ]
  ret i32 %198
}

; Function Attrs: nounwind uwtable
define dso_local i32 @InitVbrTag(%struct.bit_stream_struc* %0, i32 %1, i32 %2, i32 %3) local_unnamed_addr #0 {
  store i32* null, i32** @pVbrFrames, align 8, !tbaa !7
  store i32 0, i32* @nVbrNumFrames, align 4, !tbaa !18
  store i32 0, i32* @nVbrFrameBufferSize, align 4, !tbaa !18
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(216) getelementptr inbounds ([216 x i8], [216 x i8]* @pbtStreamBuffer, i64 0, i64 0), i8 0, i64 216, i1 false)
  %5 = icmp eq i32 %2, 3
  %6 = sext i32 %1 to i64
  %7 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* @SizeOfEmptyFrame, i64 0, i64 %6, i64 0
  %8 = getelementptr inbounds [2 x [2 x i32]], [2 x [2 x i32]]* @SizeOfEmptyFrame, i64 0, i64 %6, i64 1
  %9 = select i1 %5, i32* %8, i32* %7
  %10 = load i32, i32* %9, align 4, !tbaa !18
  %11 = add nsw i32 %10, 4
  store i32 %11, i32* @nZeroStreamSize, align 4, !tbaa !18
  %12 = icmp sgt i32 %3, 2
  br i1 %12, label %13, label %16

13:                                               ; preds = %4
  %14 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %15 = tail call i64 @fwrite(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.489, i64 0, i64 0), i64 33, i64 1, %struct._IO_FILE* %14) #19
  tail call void @exit(i32 -1) #20
  unreachable

16:                                               ; preds = %4
  %17 = sext i32 %3 to i64
  %18 = getelementptr inbounds [3 x i32], [3 x i32]* @InitVbrTag.framesize, i64 0, i64 %17
  %19 = load i32, i32* %18, align 4, !tbaa !18
  store i32 %19, i32* @TotalFrameSize, align 4, !tbaa !18
  %20 = add nsw i32 %10, 144
  %21 = icmp slt i32 %19, %20
  br i1 %21, label %22, label %25

22:                                               ; preds = %16
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !tbaa !7
  %24 = tail call i64 @fwrite(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.1.490, i64 0, i64 0), i64 33, i64 1, %struct._IO_FILE* %23) #19
  tail call void @exit(i32 -1) #20
  unreachable

25:                                               ; preds = %25, %16
  %26 = phi i32 [ %27, %25 ], [ 0, %16 ]
  tail call void @putbits(%struct.bit_stream_struc* %0, i32 0, i32 8) #21
  %27 = add nuw nsw i32 %26, 1
  %28 = load i32, i32* @TotalFrameSize, align 4, !tbaa !18
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %25, label %30

30:                                               ; preds = %25
  ret i32 0
}

; Function Attrs: nounwind uwtable
define dso_local i32 @PutVbrTag(i8* nocapture readonly %0, i32 %1, i32 %2) local_unnamed_addr #0 {
  %4 = alloca [100 x i8], align 16
  %5 = alloca [80 x i8], align 16
  %6 = getelementptr inbounds [100 x i8], [100 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 100, i8* nonnull %6) #21
  %7 = getelementptr inbounds [80 x i8], [80 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %7) #21
  %8 = load i32, i32* @nVbrNumFrames, align 4, !tbaa !18
  %9 = icmp eq i32 %8, 0
  %10 = load i32*, i32** @pVbrFrames, align 8
  %11 = icmp eq i32* %10, null
  %12 = or i1 %9, %11
  br i1 %12, label %131, label %13

13:                                               ; preds = %3
  %14 = tail call %struct._IO_FILE* @fopen(i8* %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.493, i64 0, i64 0))
  %15 = icmp eq %struct._IO_FILE* %14, null
  br i1 %15, label %131, label %16

16:                                               ; preds = %13
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(216) getelementptr inbounds ([216 x i8], [216 x i8]* @pbtStreamBuffer, i64 0, i64 0), i8 0, i64 216, i1 false)
  %17 = tail call i32 @fseek(%struct._IO_FILE* nonnull %14, i64 0, i32 2)
  %18 = tail call i64 @ftell(%struct._IO_FILE* nonnull %14)
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %131, label %20

20:                                               ; preds = %16
  %21 = load i32, i32* @TotalFrameSize, align 4, !tbaa !18
  %22 = sext i32 %21 to i64
  %23 = tail call i32 @fseek(%struct._IO_FILE* nonnull %14, i64 %22, i32 0)
  %24 = tail call i64 @fread_unlocked(i8* getelementptr inbounds ([216 x i8], [216 x i8]* @pbtStreamBuffer, i64 0, i64 0), i64 4, i64 1, %struct._IO_FILE* nonnull %14)
  store i8 -1, i8* getelementptr inbounds ([216 x i8], [216 x i8]* @pbtStreamBuffer, i64 0, i64 0), align 16, !tbaa !26
  %25 = icmp eq i32 %2, 0
  %26 = select i1 %25, i8 -5, i8 -13
  %27 = select i1 %25, i8 80, i8 -128
  store i8 %26, i8* getelementptr inbounds ([216 x i8], [216 x i8]* @pbtStreamBuffer, i64 0, i64 1), align 1, !tbaa !26
  %28 = load i8, i8* getelementptr inbounds ([216 x i8], [216 x i8]* @pbtStreamBuffer, i64 0, i64 2), align 2, !tbaa !26
  %29 = and i8 %28, 12
  %30 = or i8 %29, %27
  store i8 %30, i8* getelementptr inbounds ([216 x i8], [216 x i8]* @pbtStreamBuffer, i64 0, i64 2), align 2, !tbaa !26
  %31 = tail call i32 @fseek(%struct._IO_FILE* nonnull %14, i64 0, i32 0)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 dereferenceable(100) %6, i8 0, i64 100, i1 false)
  %32 = load i32, i32* @nVbrNumFrames, align 4, !tbaa !18
  %33 = sitofp i32 %32 to double
  %34 = load i32*, i32** @pVbrFrames, align 8, !tbaa !7
  %35 = sitofp i64 %18 to float
  br label %36

36:                                               ; preds = %36, %20
  %37 = phi i64 [ 1, %20 ], [ %54, %36 ]
  %38 = trunc i64 %37 to i32
  %39 = sitofp i32 %38 to double
  %40 = fmul double %39, 1.000000e-02
  %41 = fmul double %40, %33
  %42 = tail call double @llvm.floor.f64(double %41)
  %43 = fptosi double %42 to i32
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i32, i32* %34, i64 %44
  %46 = load i32, i32* %45, align 4, !tbaa !18
  %47 = sitofp i32 %46 to float
  %48 = fmul float %47, 2.560000e+02
  %49 = fdiv float %48, %35
  %50 = fcmp ogt float %49, 2.550000e+02
  %51 = select i1 %50, float 2.550000e+02, float %49
  %52 = fptoui float %51 to i8
  %53 = getelementptr inbounds [100 x i8], [100 x i8]* %4, i64 0, i64 %37
  store i8 %52, i8* %53, align 1, !tbaa !26
  %54 = add nuw nsw i64 %37, 1
  %55 = icmp eq i64 %54, 100
  br i1 %55, label %56, label %36

56:                                               ; preds = %36
  %57 = load i32, i32* @nZeroStreamSize, align 4, !tbaa !18
  %58 = add nsw i32 %57, 1
  %59 = sext i32 %57 to i64
  %60 = getelementptr inbounds [216 x i8], [216 x i8]* @pbtStreamBuffer, i64 0, i64 %59
  store i8 88, i8* %60, align 1, !tbaa !26
  %61 = add nsw i32 %57, 2
  %62 = sext i32 %58 to i64
  %63 = getelementptr inbounds [216 x i8], [216 x i8]* @pbtStreamBuffer, i64 0, i64 %62
  store i8 105, i8* %63, align 1, !tbaa !26
  %64 = add nsw i32 %57, 3
  %65 = sext i32 %61 to i64
  %66 = getelementptr inbounds [216 x i8], [216 x i8]* @pbtStreamBuffer, i64 0, i64 %65
  store i8 110, i8* %66, align 1, !tbaa !26
  %67 = add nsw i32 %57, 4
  %68 = sext i32 %64 to i64
  %69 = getelementptr inbounds [216 x i8], [216 x i8]* @pbtStreamBuffer, i64 0, i64 %68
  store i8 103, i8* %69, align 1, !tbaa !26
  %70 = sext i32 %67 to i64
  %71 = getelementptr inbounds [216 x i8], [216 x i8]* @pbtStreamBuffer, i64 0, i64 %70
  store i8 0, i8* %71, align 1, !tbaa !26
  %72 = getelementptr inbounds i8, i8* %71, i64 1
  store i8 0, i8* %72, align 1, !tbaa !26
  %73 = getelementptr inbounds i8, i8* %71, i64 2
  store i8 0, i8* %73, align 1, !tbaa !26
  %74 = getelementptr inbounds i8, i8* %71, i64 3
  store i8 15, i8* %74, align 1, !tbaa !26
  %75 = add nsw i32 %57, 8
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds [216 x i8], [216 x i8]* @pbtStreamBuffer, i64 0, i64 %76
  %78 = lshr i32 %32, 24
  %79 = trunc i32 %78 to i8
  store i8 %79, i8* %77, align 1, !tbaa !26
  %80 = lshr i32 %32, 16
  %81 = trunc i32 %80 to i8
  %82 = getelementptr inbounds i8, i8* %77, i64 1
  store i8 %81, i8* %82, align 1, !tbaa !26
  %83 = lshr i32 %32, 8
  %84 = trunc i32 %83 to i8
  %85 = getelementptr inbounds i8, i8* %77, i64 2
  store i8 %84, i8* %85, align 1, !tbaa !26
  %86 = trunc i32 %32 to i8
  %87 = getelementptr inbounds i8, i8* %77, i64 3
  store i8 %86, i8* %87, align 1, !tbaa !26
  %88 = add nsw i32 %57, 12
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds [216 x i8], [216 x i8]* @pbtStreamBuffer, i64 0, i64 %89
  %91 = trunc i64 %18 to i32
  %92 = lshr i32 %91, 24
  %93 = trunc i32 %92 to i8
  store i8 %93, i8* %90, align 1, !tbaa !26
  %94 = lshr i32 %91, 16
  %95 = trunc i32 %94 to i8
  %96 = getelementptr inbounds i8, i8* %90, i64 1
  store i8 %95, i8* %96, align 1, !tbaa !26
  %97 = lshr i32 %91, 8
  %98 = trunc i32 %97 to i8
  %99 = getelementptr inbounds i8, i8* %90, i64 2
  store i8 %98, i8* %99, align 1, !tbaa !26
  %100 = trunc i64 %18 to i8
  %101 = getelementptr inbounds i8, i8* %90, i64 3
  store i8 %100, i8* %101, align 1, !tbaa !26
  %102 = add nsw i32 %57, 16
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds [216 x i8], [216 x i8]* @pbtStreamBuffer, i64 0, i64 %103
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(100) %104, i8* nonnull align 16 dereferenceable(100) %6, i64 100, i1 false)
  %105 = add i32 %57, 116
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds [216 x i8], [216 x i8]* @pbtStreamBuffer, i64 0, i64 %106
  %108 = lshr i32 %1, 24
  %109 = trunc i32 %108 to i8
  store i8 %109, i8* %107, align 1, !tbaa !26
  %110 = lshr i32 %1, 16
  %111 = trunc i32 %110 to i8
  %112 = getelementptr inbounds i8, i8* %107, i64 1
  store i8 %111, i8* %112, align 1, !tbaa !26
  %113 = lshr i32 %1, 8
  %114 = trunc i32 %113 to i8
  %115 = getelementptr inbounds i8, i8* %107, i64 2
  store i8 %114, i8* %115, align 1, !tbaa !26
  %116 = trunc i32 %1 to i8
  %117 = getelementptr inbounds i8, i8* %107, i64 3
  store i8 %116, i8* %117, align 1, !tbaa !26
  %118 = add i32 %57, 120
  %119 = tail call i8* @get_lame_version() #21
  %120 = call i32 (i8*, i8*, ...) @sprintf(i8* nonnull %7, i8* nonnull dereferenceable(1) getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3.494, i64 0, i64 0), i8* %119) #21
  %121 = sext i32 %118 to i64
  %122 = getelementptr inbounds [216 x i8], [216 x i8]* @pbtStreamBuffer, i64 0, i64 %121
  %123 = call i8* @strncpy(i8* nonnull %122, i8* nonnull %7, i64 20) #21
  %124 = load i32, i32* @TotalFrameSize, align 4, !tbaa !18
  %125 = sext i32 %124 to i64
  %126 = tail call i64 @fwrite_unlocked(i8* getelementptr inbounds ([216 x i8], [216 x i8]* @pbtStreamBuffer, i64 0, i64 0), i64 %125, i64 1, %struct._IO_FILE* nonnull %14)
  %127 = icmp eq i64 %126, 1
  br i1 %127, label %128, label %131

128:                                              ; preds = %56
  %129 = tail call i32 @fclose(%struct._IO_FILE* nonnull %14)
  %130 = load i8*, i8** bitcast (i32** @pVbrFrames to i8**), align 8, !tbaa !7
  tail call void @free(i8* %130) #21
  store i32* null, i32** @pVbrFrames, align 8, !tbaa !7
  br label %131

131:                                              ; preds = %128, %56, %16, %13, %3
  %132 = phi i32 [ 0, %128 ], [ -1, %3 ], [ -1, %13 ], [ -1, %16 ], [ -1, %56 ]
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %7) #21
  call void @llvm.lifetime.end.p0i8(i64 100, i8* nonnull %6) #21
  ret i32 %132
}

; Function Attrs: nofree nounwind
declare dso_local i64 @ftell(%struct._IO_FILE* nocapture) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare i64 @fread_unlocked(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare dso_local i32 @sprintf(i8* noalias nocapture, i8* nocapture readonly, ...) local_unnamed_addr #4

; Function Attrs: norecurse nounwind readonly uwtable
define dso_local i32 @SeekPoint(i8* nocapture readonly %0, i32 %1, float %2) local_unnamed_addr #10 {
  %4 = fcmp olt float %2, 0.000000e+00
  %5 = select i1 %4, float 0.000000e+00, float %2
  %6 = fcmp ogt float %5, 1.000000e+02
  %7 = select i1 %6, float 1.000000e+02, float %5
  %8 = fptosi float %7 to i32
  %9 = icmp slt i32 %8, 99
  %10 = select i1 %9, i32 %8, i32 99
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds i8, i8* %0, i64 %11
  %13 = load i8, i8* %12, align 1, !tbaa !26
  %14 = uitofp i8 %13 to float
  br i1 %9, label %15, label %21

15:                                               ; preds = %3
  %16 = add nsw i32 %10, 1
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i8, i8* %0, i64 %17
  %19 = load i8, i8* %18, align 1, !tbaa !26
  %20 = uitofp i8 %19 to float
  br label %21

21:                                               ; preds = %15, %3
  %22 = phi float [ %20, %15 ], [ 2.560000e+02, %3 ]
  %23 = fsub float %22, %14
  %24 = sitofp i32 %10 to float
  %25 = fsub float %7, %24
  %26 = fmul float %25, %23
  %27 = fadd float %26, %14
  %28 = fmul float %27, 3.906250e-03
  %29 = sitofp i32 %1 to float
  %30 = fmul float %28, %29
  %31 = fptosi float %30 to i32
  ret i32 %31
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @lame_print_version(%struct._IO_FILE* nocapture %0) local_unnamed_addr #3 {
  %2 = tail call i32 (i8*, i8*, ...) @sprintf(i8* nonnull dereferenceable(1) getelementptr inbounds ([80 x i8], [80 x i8]* @lpszVersion, i64 0, i64 0), i8* nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2.497, i64 0, i64 0), i32 3, i32 70) #21
  %3 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.498, i64 0, i64 0), i8* getelementptr inbounds ([80 x i8], [80 x i8]* @lpszVersion, i64 0, i64 0))
  %4 = tail call i32 (i8*, i8*, ...) @sprintf(i8* nonnull dereferenceable(1) getelementptr inbounds ([80 x i8], [80 x i8]* @lpszVersion, i64 0, i64 0), i8* nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2.497, i64 0, i64 0), i32 0, i32 77) #21
  %5 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.1.499, i64 0, i64 0), i8* getelementptr inbounds ([80 x i8], [80 x i8]* @lpszVersion, i64 0, i64 0))
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local i8* @get_lame_version() local_unnamed_addr #3 {
  %1 = tail call i32 (i8*, i8*, ...) @sprintf(i8* nonnull dereferenceable(1) getelementptr inbounds ([80 x i8], [80 x i8]* @lpszVersion, i64 0, i64 0), i8* nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2.497, i64 0, i64 0), i32 3, i32 70) #21
  ret i8* getelementptr inbounds ([80 x i8], [80 x i8]* @lpszVersion, i64 0, i64 0)
}

; Function Attrs: nofree nounwind uwtable
define dso_local i8* @get_psy_version() local_unnamed_addr #3 {
  %1 = tail call i32 (i8*, i8*, ...) @sprintf(i8* nonnull dereferenceable(1) getelementptr inbounds ([80 x i8], [80 x i8]* @lpszVersion, i64 0, i64 0), i8* nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2.497, i64 0, i64 0), i32 0, i32 77) #21
  ret i8* getelementptr inbounds ([80 x i8], [80 x i8]* @lpszVersion, i64 0, i64 0)
}

; Function Attrs: nofree nounwind uwtable
define dso_local i8* @get_mp3x_version() local_unnamed_addr #3 {
  %1 = tail call i32 (i8*, i8*, ...) @sprintf(i8* nonnull dereferenceable(1) getelementptr inbounds ([80 x i8], [80 x i8]* @lpszVersion, i64 0, i64 0), i8* nonnull dereferenceable(1) getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3.502, i64 0, i64 0), i32 0, i32 82) #21
  ret i8* getelementptr inbounds ([80 x i8], [80 x i8]* @lpszVersion, i64 0, i64 0)
}

attributes #0 = { nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind }
attributes #2 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind willreturn }
attributes #7 = { inlinehint nofree norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { norecurse nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind readnone speculatable willreturn }
attributes #13 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #14 = { noreturn nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #15 = { norecurse nounwind readnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #16 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #17 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #18 = { nofree nounwind readonly }
attributes #19 = { cold }
attributes #20 = { noreturn nounwind }
attributes #21 = { nounwind }
attributes #22 = { cold nounwind }
attributes #23 = { nounwind readonly }
attributes #24 = { nounwind readnone }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}
!llvm.module.flags = !{!1}

!0 = !{!"Debian clang version 10.0.1-++20200708124224+ef32c611aa2-1~exp1~20200707224822.188 "}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{!3, !4, i64 24}
!3 = !{!"frame", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 16, !4, i64 20, !4, i64 24, !4, i64 28, !4, i64 32, !4, i64 36, !4, i64 40, !4, i64 44, !4, i64 48, !4, i64 52, !4, i64 56, !4, i64 60, !4, i64 64, !4, i64 68}
!4 = !{!"int", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C/C++ TBAA"}
!7 = !{!8, !8, i64 0}
!8 = !{!"any pointer", !5, i64 0}
!9 = !{!3, !4, i64 32}
!10 = !{!3, !4, i64 40}
!11 = !{!3, !4, i64 44}
!12 = !{!3, !4, i64 48}
!13 = !{!3, !4, i64 52}
!14 = !{!3, !4, i64 56}
!15 = !{!3, !4, i64 60}
!16 = !{!3, !4, i64 64}
!17 = !{!3, !4, i64 0}
!18 = !{!4, !4, i64 0}
!19 = !{!20, !20, i64 0}
!20 = !{!"long", !5, i64 0}
!21 = !{!3, !4, i64 68}
!22 = !{!3, !4, i64 16}
!23 = !{!3, !4, i64 12}
!24 = !{!3, !4, i64 36}
!25 = !{!3, !4, i64 28}
!26 = !{!5, !5, i64 0}
!27 = !{!28, !28, i64 0}
!28 = !{!"double", !5, i64 0}
!29 = !{!30, !30, i64 0}
!30 = !{!"short", !5, i64 0}
!31 = !{!32, !4, i64 31872}
!32 = !{!"mpstr", !8, i64 0, !8, i64 8, !4, i64 16, !4, i64 20, !4, i64 24, !3, i64 28, !5, i64 100, !5, i64 4712, !5, i64 23144, !20, i64 23152, !4, i64 23160, !5, i64 23168, !4, i64 31872}
!33 = !{!34, !34, i64 0}
!34 = !{!"float", !5, i64 0}
!35 = !{!36, !8, i64 16}
!36 = !{!"BF_FrameData", !4, i64 0, !4, i64 4, !4, i64 8, !8, i64 16, !8, i64 24, !5, i64 32, !5, i64 48, !5, i64 80, !5, i64 112, !5, i64 144, !8, i64 176}
!37 = !{!38, !4, i64 0}
!38 = !{!"", !4, i64 0, !8, i64 8}
!39 = !{!40, !4, i64 0}
!40 = !{!"BF_PartHolder", !4, i64 0, !8, i64 8}
!41 = !{!40, !8, i64 8}
!42 = !{!38, !8, i64 8}
!43 = !{!44, !8, i64 24}
!44 = !{!"side_info_link", !8, i64 0, !45, i64 8}
!45 = !{!"", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !8, i64 16, !8, i64 24, !5, i64 32, !5, i64 48}
!46 = !{!36, !8, i64 24}
!47 = !{!44, !8, i64 32}
!48 = !{!36, !4, i64 8}
!49 = !{!36, !4, i64 4}
!50 = !{!44, !8, i64 0}
!51 = !{!36, !4, i64 0}
!52 = !{!44, !4, i64 8}
!53 = !{!44, !4, i64 16}
!54 = !{!44, !4, i64 20}
!55 = !{!56, !30, i64 4}
!56 = !{!"", !4, i64 0, !30, i64 4}
!57 = distinct !{!57, !58}
!58 = !{!"llvm.loop.isvectorized", i32 1}
!59 = distinct !{!59, !60, !58}
!60 = !{!"llvm.loop.unroll.runtime.disable"}
!61 = distinct !{!61, !58}
!62 = distinct !{!62, !60, !58}
!63 = distinct !{!63, !58}
!64 = distinct !{!64, !60, !58}
!65 = distinct !{!65, !58}
!66 = distinct !{!66, !60, !58}
!67 = !{!44, !4, i64 12}
!68 = !{!69, !4, i64 0}
!69 = !{!"BF_FrameResults", !4, i64 0, !4, i64 4, !4, i64 8}
!70 = !{!69, !4, i64 4}
!71 = !{!56, !4, i64 0}
!72 = !{!36, !8, i64 176}
!73 = !{!69, !4, i64 8}
!74 = distinct !{!74, !75}
!75 = !{!"llvm.loop.unroll.disable"}
!76 = !{!45, !4, i64 0}
!77 = !{!45, !8, i64 16}
!78 = !{!45, !8, i64 24}
!79 = !{!45, !4, i64 12}
!80 = !{!45, !4, i64 8}
!81 = distinct !{!81, !58}
!82 = distinct !{!82, !60, !58}
!83 = !{!84, !8, i64 128}
!84 = !{!"", !20, i64 0, !4, i64 8, !4, i64 12, !4, i64 16, !4, i64 20, !4, i64 24, !4, i64 28, !4, i64 32, !4, i64 36, !4, i64 40, !4, i64 44, !4, i64 48, !4, i64 52, !4, i64 56, !4, i64 60, !4, i64 64, !4, i64 68, !4, i64 72, !4, i64 76, !4, i64 80, !4, i64 84, !4, i64 88, !4, i64 92, !4, i64 96, !4, i64 100, !4, i64 104, !4, i64 108, !4, i64 112, !4, i64 116, !5, i64 120, !4, i64 124, !8, i64 128, !8, i64 136, !4, i64 144, !4, i64 148, !34, i64 152, !4, i64 156, !4, i64 160, !4, i64 164, !20, i64 168, !20, i64 176, !4, i64 184, !4, i64 188, !4, i64 192, !4, i64 196, !4, i64 200, !4, i64 204, !4, i64 208, !4, i64 212, !34, i64 216, !4, i64 220, !4, i64 224, !4, i64 228, !34, i64 232, !34, i64 236, !34, i64 240, !34, i64 244, !4, i64 248, !4, i64 252, !4, i64 256, !4, i64 260, !4, i64 264, !4, i64 268, !4, i64 272, !4, i64 276}
!85 = !{!84, !4, i64 12}
!86 = !{!84, !4, i64 8}
!87 = !{!84, !20, i64 0}
!88 = !{!84, !5, i64 120}
!89 = !{!84, !4, i64 124}
!90 = !{!91, !20, i64 48}
!91 = !{!"stat", !20, i64 0, !20, i64 8, !20, i64 16, !4, i64 24, !4, i64 28, !4, i64 32, !4, i64 36, !20, i64 40, !20, i64 48, !20, i64 56, !20, i64 64, !92, i64 72, !92, i64 88, !92, i64 104, !5, i64 120}
!92 = !{!"timespec", !20, i64 0, !20, i64 8}
!93 = !{!84, !20, i64 168}
!94 = !{!84, !20, i64 176}
!95 = !{!84, !4, i64 200}
!96 = !{!97, !5, i64 266}
!97 = !{!"", !4, i64 0, !4, i64 4, !5, i64 8, !5, i64 39, !5, i64 70, !5, i64 101, !5, i64 106, !5, i64 137, !5, i64 265, !5, i64 266}
!98 = !{!97, !4, i64 4}
!99 = !{!32, !4, i64 24}
!100 = !{!32, !4, i64 36}
!101 = !{!32, !4, i64 23160}
!102 = !{!32, !8, i64 8}
!103 = !{!104, !8, i64 0}
!104 = !{!"buf", !8, i64 0, !20, i64 8, !20, i64 16, !8, i64 24, !8, i64 32}
!105 = !{!104, !8, i64 24}
!106 = !{!104, !20, i64 8}
!107 = !{!32, !8, i64 0}
!108 = !{!104, !8, i64 32}
!109 = !{!104, !20, i64 16}
!110 = !{!32, !4, i64 16}
!111 = !{!32, !4, i64 20}
!112 = !{!32, !4, i64 96}
!113 = !{!32, !20, i64 23152}
!114 = !{!32, !4, i64 56}
!115 = !{!84, !4, i64 192}
!116 = !{!84, !4, i64 60}
!117 = !{!84, !4, i64 220}
!118 = !{!84, !4, i64 224}
!119 = !{!84, !4, i64 196}
!120 = !{!84, !4, i64 68}
!121 = !{!84, !4, i64 36}
!122 = !{!84, !4, i64 228}
!123 = !{!84, !4, i64 52}
!124 = !{!84, !4, i64 56}
!125 = !{!84, !4, i64 164}
!126 = !{!84, !4, i64 204}
!127 = distinct !{!127, !75}
!128 = distinct !{!128, !75}
!129 = !{!130, !4, i64 0}
!130 = !{!"", !4, i64 0, !4, i64 4, !4, i64 8, !5, i64 12, !5, i64 48}
!131 = !{!130, !4, i64 4}
!132 = !{!133, !4, i64 0}
!133 = !{!"", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 16, !4, i64 20, !4, i64 24, !4, i64 28, !5, i64 32, !5, i64 44, !4, i64 56, !4, i64 60, !4, i64 64, !4, i64 68, !4, i64 72, !4, i64 76, !4, i64 80, !4, i64 84, !4, i64 88, !8, i64 96, !5, i64 104}
!134 = !{!133, !4, i64 4}
!135 = !{!133, !4, i64 12}
!136 = !{!133, !4, i64 16}
!137 = !{!133, !4, i64 20}
!138 = !{!133, !4, i64 24}
!139 = !{!133, !4, i64 28}
!140 = !{!133, !4, i64 56}
!141 = !{!133, !4, i64 60}
!142 = !{!133, !4, i64 64}
!143 = !{!133, !4, i64 68}
!144 = !{!133, !4, i64 72}
!145 = distinct !{!145, !75}
!146 = distinct !{!146, !75}
!147 = !{!133, !8, i64 96}
!148 = !{!130, !4, i64 8}
!149 = distinct !{!149, !75}
!150 = !{!133, !4, i64 8}
!151 = !{!152, !8, i64 8}
!152 = !{!"huffcodetab", !4, i64 0, !4, i64 4, !8, i64 8, !8, i64 16}
!153 = !{!152, !8, i64 16}
!154 = !{!133, !4, i64 76}
!155 = !{!152, !4, i64 0}
!156 = !{!84, !4, i64 16}
!157 = !{!84, !4, i64 48}
!158 = !{!84, !4, i64 88}
!159 = !{!84, !4, i64 184}
!160 = !{!84, !4, i64 188}
!161 = !{!84, !34, i64 216}
!162 = !{!84, !4, i64 92}
!163 = !{!84, !4, i64 40}
!164 = !{!84, !4, i64 104}
!165 = !{!84, !34, i64 232}
!166 = !{!84, !34, i64 236}
!167 = !{!84, !4, i64 108}
!168 = !{!84, !34, i64 240}
!169 = !{!84, !4, i64 116}
!170 = !{!84, !34, i64 244}
!171 = !{!84, !4, i64 112}
!172 = !{!84, !4, i64 256}
!173 = !{!84, !4, i64 248}
!174 = !{!"branch_weights", i32 1, i32 2000}
!175 = !{!84, !4, i64 252}
!176 = !{!84, !4, i64 100}
!177 = !{!84, !4, i64 96}
!178 = !{!84, !4, i64 212}
!179 = !{!84, !4, i64 208}
!180 = !{!84, !4, i64 28}
!181 = !{!84, !4, i64 44}
!182 = !{!84, !4, i64 24}
!183 = !{!84, !8, i64 136}
!184 = !{!97, !4, i64 0}
!185 = !{!84, !4, i64 20}
!186 = !{!84, !4, i64 272}
!187 = !{!84, !4, i64 276}
!188 = !{!84, !4, i64 64}
!189 = !{!84, !4, i64 72}
!190 = !{!84, !4, i64 32}
!191 = distinct !{!191, !58}
!192 = distinct !{!192, !75}
!193 = distinct !{!193, !60, !58}
!194 = !{!195, !4, i64 24}
!195 = !{!"gr_info_ss", !133, i64 0}
!196 = distinct !{!196, !75}
!197 = !{!198, !20, i64 40}
!198 = !{!"bit_stream_struc", !8, i64 0, !4, i64 8, !8, i64 16, !8, i64 24, !4, i64 32, !20, i64 40, !4, i64 48, !4, i64 52}
!199 = !{!200}
!200 = distinct !{!200, !201}
!201 = distinct !{!201, !"LVerDomain"}
!202 = !{!203}
!203 = distinct !{!203, !201}
!204 = distinct !{!204, !58}
!205 = distinct !{!205, !58}
!206 = !{!207}
!207 = distinct !{!207, !208}
!208 = distinct !{!208, !"LVerDomain"}
!209 = !{!210}
!210 = distinct !{!210, !208}
!211 = distinct !{!211, !58}
!212 = distinct !{!212, !58}
!213 = distinct !{!213, !58}
!214 = distinct !{!214, !60, !58}
!215 = distinct !{!215, !58}
!216 = distinct !{!216, !60, !58}
!217 = !{!218}
!218 = distinct !{!218, !219}
!219 = distinct !{!219, !"LVerDomain"}
!220 = !{!221}
!221 = distinct !{!221, !219}
!222 = distinct !{!222, !58}
!223 = distinct !{!223, !58}
!224 = !{!225}
!225 = distinct !{!225, !226}
!226 = distinct !{!226, !"LVerDomain"}
!227 = !{!228}
!228 = distinct !{!228, !226}
!229 = distinct !{!229, !58}
!230 = distinct !{!230, !58}
!231 = !{!84, !4, i64 156}
!232 = !{!84, !4, i64 144}
!233 = !{!84, !4, i64 148}
!234 = !{!84, !34, i64 152}
!235 = !{!84, !4, i64 160}
!236 = distinct !{!236, !237}
!237 = !{!"llvm.loop.peeled.count", i32 1}
!238 = !{!3, !4, i64 8}
!239 = !{!240, !4, i64 0}
!240 = !{!"III_sideinfo", !4, i64 0, !4, i64 4, !5, i64 8}
!241 = !{!242, !4, i64 4}
!242 = !{!"gr_info_s", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 16, !4, i64 20, !5, i64 24, !5, i64 36, !5, i64 48, !4, i64 60, !4, i64 64, !4, i64 68, !4, i64 72, !4, i64 76, !4, i64 80, !4, i64 84, !5, i64 88, !8, i64 112}
!243 = !{!242, !4, i64 8}
!244 = !{!242, !8, i64 112}
!245 = !{!242, !4, i64 12}
!246 = !{!242, !4, i64 68}
!247 = !{!242, !4, i64 72}
!248 = !{!242, !4, i64 16}
!249 = !{!242, !4, i64 20}
!250 = !{!242, !4, i64 80}
!251 = !{!242, !4, i64 84}
!252 = !{!242, !4, i64 0}
!253 = !{!242, !4, i64 76}
!254 = distinct !{!254, !58}
!255 = !{!242, !4, i64 60}
!256 = distinct !{!256, !58}
!257 = distinct !{!257, !60, !58}
!258 = distinct !{!258, !58}
!259 = distinct !{!259, !60, !58}
!260 = distinct !{!260, !58}
!261 = distinct !{!261, !60, !58}
!262 = !{!242, !4, i64 64}
!263 = distinct !{!263, !58}
!264 = distinct !{!264, !75}
!265 = distinct !{!265, !58}
!266 = distinct !{!266, !60, !58}
!267 = distinct !{!267, !60, !58}
!268 = distinct !{!268, !75}
!269 = distinct !{!269, !75}
!270 = distinct !{!270, !75}
!271 = distinct !{!271, !75}
!272 = !{!273, !8, i64 8}
!273 = !{!"newhuff", !4, i64 0, !8, i64 8}
!274 = !{!273, !4, i64 0}
!275 = !{!32, !4, i64 28}
!276 = !{!32, !4, i64 64}
!277 = !{!32, !4, i64 40}
!278 = !{!32, !4, i64 52}
!279 = !{!32, !4, i64 60}
!280 = distinct !{!280, !58}
!281 = !{!84, !4, i64 76}
!282 = !{!84, !4, i64 80}
!283 = !{!84, !4, i64 84}
!284 = distinct !{!284, !58}
!285 = distinct !{!285, !58}
!286 = distinct !{!286, !60, !58}
!287 = distinct !{!287, !58}
!288 = distinct !{!288, !60, !58}
!289 = !{i64 0, i64 176, !26, i64 176, i64 312, !26}
!290 = distinct !{!290, !58}
!291 = distinct !{!291, !58}
!292 = distinct !{!292, !58}
!293 = distinct !{!293, !58}
!294 = distinct !{!294, !58}
!295 = distinct !{!295, !75}
!296 = distinct !{!296, !75}
!297 = distinct !{!297, !58}
!298 = distinct !{!298, !58}
!299 = !{!133, !4, i64 88}
!300 = !{!84, !4, i64 264}
!301 = !{!84, !4, i64 268}
!302 = !{!133, !4, i64 80}
!303 = !{!133, !4, i64 84}
!304 = distinct !{!304, !75}
!305 = distinct !{!305, !58}
!306 = distinct !{!306, !60, !58}
!307 = distinct !{!307, !75}
!308 = distinct !{!308, !75}
!309 = !{!310}
!310 = distinct !{!310, !311}
!311 = distinct !{!311, !"LVerDomain"}
!312 = !{!313}
!313 = distinct !{!313, !311}
!314 = distinct !{!314, !58}
!315 = distinct !{!315, !58}
!316 = distinct !{!316, !58}
!317 = distinct !{!317, !60, !58}
!318 = distinct !{!318, !58}
!319 = distinct !{!319, !60, !58}
!320 = distinct !{!320, !58}
!321 = distinct !{!321, !60, !58}
!322 = distinct !{!322, !58}
!323 = distinct !{!323, !60, !58}
!324 = !{!325}
!325 = distinct !{!325, !326}
!326 = distinct !{!326, !"LVerDomain"}
!327 = !{!328}
!328 = distinct !{!328, !326}
!329 = distinct !{!329, !58}
!330 = distinct !{!330, !75}
!331 = distinct !{!331, !58}
!332 = distinct !{!332, !75}
!333 = distinct !{!333, !75}
!334 = distinct !{!334, !75}
!335 = distinct !{!335, !75}
!336 = distinct !{!336, !58}
!337 = !{!338, !4, i64 4}
!338 = !{!"rtpheader", !339, i64 0, !4, i64 4, !4, i64 8, !4, i64 12}
!339 = !{!"rtpbits", !4, i64 0, !4, i64 2, !4, i64 2, !4, i64 3, !4, i64 3, !4, i64 3, !4, i64 3}
!340 = !{!338, !4, i64 8}
!341 = !{!338, !4, i64 12}
!342 = !{!343, !30, i64 0}
!343 = !{!"sockaddr_in", !30, i64 0, !30, i64 2, !344, i64 4, !5, i64 8}
!344 = !{!"in_addr", !4, i64 0}
!345 = !{!343, !30, i64 2}
!346 = !{!343, !4, i64 4}
!347 = !{!84, !4, i64 260}
!348 = !{!349, !4, i64 0}
!349 = !{!"", !4, i64 0, !4, i64 4}
!350 = !{!349, !4, i64 4}
!351 = distinct !{!351, !75}
!352 = !{!152, !4, i64 4}
!353 = distinct !{!353, !75}
!354 = distinct !{!354, !58}
!355 = distinct !{!355, !75}
!356 = distinct !{!356, !60, !58}
!357 = distinct !{!357, !58}
!358 = distinct !{!358, !75}
!359 = distinct !{!359, !60, !58}
!360 = !{!195, !4, i64 68}
!361 = !{!195, !4, i64 64}
!362 = !{!363, !34, i64 0}
!363 = !{!"ts_times", !34, i64 0, !34, i64 4, !34, i64 8, !34, i64 12}
!364 = !{!363, !34, i64 4}
!365 = !{!363, !34, i64 8}
!366 = !{!363, !34, i64 12}
!367 = distinct !{!367, !75}
!368 = !{!198, !4, i64 48}
!369 = !{!198, !4, i64 32}
!370 = !{!198, !4, i64 52}
!371 = !{!198, !8, i64 24}
!372 = !{!373, !4, i64 8}
!373 = !{!"", !4, i64 0, !4, i64 4, !4, i64 8, !4, i64 12, !4, i64 16, !4, i64 20, !5, i64 24}
!374 = !{!373, !4, i64 0}
!375 = !{!373, !4, i64 4}
!376 = !{!373, !4, i64 12}
!377 = !{!373, !4, i64 16}
!378 = !{!379}
!379 = distinct !{!379, !380}
!380 = distinct !{!380, !"LVerDomain"}
!381 = !{!382}
!382 = distinct !{!382, !380}
!383 = distinct !{!383, !58}
!384 = !{!373, !4, i64 20}
